
Test 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097b4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08009944  08009944  0000a944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a20  08009a20  0000b31c  2**0
                  CONTENTS
  4 .ARM          00000008  08009a20  08009a20  0000aa20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a28  08009a28  0000b31c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a28  08009a28  0000aa28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009a2c  08009a2c  0000aa2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000031c  20000000  08009a30  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000478  2000031c  08009d4c  0000b31c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000794  08009d4c  0000b794  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b31c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000164a9  00000000  00000000  0000b34c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000276e  00000000  00000000  000217f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  00023f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d45  00000000  00000000  00025088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027a34  00000000  00000000  00025dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014df5  00000000  00000000  0004d801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1b49  00000000  00000000  000625f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015413f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d44  00000000  00000000  00154184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00158ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000031c 	.word	0x2000031c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800992c 	.word	0x0800992c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000320 	.word	0x20000320
 80001cc:	0800992c 	.word	0x0800992c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fb69 	bl	8000c4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f84d 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f90d 	bl	800079c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000582:	f000 f8db 	bl	800073c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000586:	f000 f899 	bl	80006bc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MX_VL53L0X_Init();
 800058a:	f000 f96d 	bl	8000868 <MX_VL53L0X_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 800058e:	4b1b      	ldr	r3, [pc, #108]	@ (80005fc <main+0x8c>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	491b      	ldr	r1, [pc, #108]	@ (8000600 <main+0x90>)
 8000594:	4618      	mov	r0, r3
 8000596:	f004 ffe9 	bl	800556c <VL53L0X_PerformSingleRangingMeasurement>
	if(RangingData.RangeStatus == 0) {
 800059a:	4b19      	ldr	r3, [pc, #100]	@ (8000600 <main+0x90>)
 800059c:	7e1b      	ldrb	r3, [r3, #24]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d114      	bne.n	80005cc <main+0x5c>
		MessageLen = sprintf((char*) Message, "Measured distance: %i\n\r", RangingData.RangeMilliMeter);
 80005a2:	4b17      	ldr	r3, [pc, #92]	@ (8000600 <main+0x90>)
 80005a4:	891b      	ldrh	r3, [r3, #8]
 80005a6:	461a      	mov	r2, r3
 80005a8:	4916      	ldr	r1, [pc, #88]	@ (8000604 <main+0x94>)
 80005aa:	4817      	ldr	r0, [pc, #92]	@ (8000608 <main+0x98>)
 80005ac:	f008 fd16 	bl	8008fdc <siprintf>
 80005b0:	4603      	mov	r3, r0
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	4b15      	ldr	r3, [pc, #84]	@ (800060c <main+0x9c>)
 80005b6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, Message, MessageLen, HAL_MAX_DELAY);
 80005b8:	4b14      	ldr	r3, [pc, #80]	@ (800060c <main+0x9c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	f04f 33ff 	mov.w	r3, #4294967295
 80005c2:	4911      	ldr	r1, [pc, #68]	@ (8000608 <main+0x98>)
 80005c4:	4812      	ldr	r0, [pc, #72]	@ (8000610 <main+0xa0>)
 80005c6:	f002 ffcb 	bl	8003560 <HAL_UART_Transmit>
 80005ca:	e7e0      	b.n	800058e <main+0x1e>
	} else {
		char msg[7] = "Error\r\n";
 80005cc:	4a11      	ldr	r2, [pc, #68]	@ (8000614 <main+0xa4>)
 80005ce:	463b      	mov	r3, r7
 80005d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005d4:	6018      	str	r0, [r3, #0]
 80005d6:	3304      	adds	r3, #4
 80005d8:	8019      	strh	r1, [r3, #0]
 80005da:	3302      	adds	r3, #2
 80005dc:	0c0a      	lsrs	r2, r1, #16
 80005de:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80005e0:	463b      	mov	r3, r7
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff fdf4 	bl	80001d0 <strlen>
 80005e8:	4603      	mov	r3, r0
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	4639      	mov	r1, r7
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295
 80005f2:	4807      	ldr	r0, [pc, #28]	@ (8000610 <main+0xa0>)
 80005f4:	f002 ffb4 	bl	8003560 <HAL_UART_Transmit>
	VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 80005f8:	e7c9      	b.n	800058e <main+0x1e>
 80005fa:	bf00      	nop
 80005fc:	20000000 	.word	0x20000000
 8000600:	20000458 	.word	0x20000458
 8000604:	08009944 	.word	0x08009944
 8000608:	20000414 	.word	0x20000414
 800060c:	20000454 	.word	0x20000454
 8000610:	2000038c 	.word	0x2000038c
 8000614:	0800995c 	.word	0x0800995c

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b096      	sub	sp, #88	@ 0x58
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	2244      	movs	r2, #68	@ 0x44
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f008 fcf8 	bl	800901c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	463b      	mov	r3, r7
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800063a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800063e:	f001 fc2f 	bl	8001ea0 <HAL_PWREx_ControlVoltageScaling>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000648:	f000 f97a 	bl	8000940 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064c:	2302      	movs	r3, #2
 800064e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000654:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000656:	2310      	movs	r3, #16
 8000658:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065e:	2302      	movs	r3, #2
 8000660:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000662:	2301      	movs	r3, #1
 8000664:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000666:	230a      	movs	r3, #10
 8000668:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800066a:	2307      	movs	r3, #7
 800066c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800066e:	2302      	movs	r3, #2
 8000670:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000672:	2302      	movs	r3, #2
 8000674:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4618      	mov	r0, r3
 800067c:	f001 fc66 	bl	8001f4c <HAL_RCC_OscConfig>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000686:	f000 f95b 	bl	8000940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	230f      	movs	r3, #15
 800068c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068e:	2303      	movs	r3, #3
 8000690:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800069e:	463b      	mov	r3, r7
 80006a0:	2104      	movs	r1, #4
 80006a2:	4618      	mov	r0, r3
 80006a4:	f002 f82e 	bl	8002704 <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ae:	f000 f947 	bl	8000940 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3758      	adds	r7, #88	@ 0x58
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
	...

080006bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000734 <MX_I2C1_Init+0x78>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80006c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000738 <MX_I2C1_Init+0x7c>)
 80006ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006cc:	4b18      	ldr	r3, [pc, #96]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d2:	4b17      	ldr	r3, [pc, #92]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d8:	4b15      	ldr	r3, [pc, #84]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006de:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006e4:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ea:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f6:	480e      	ldr	r0, [pc, #56]	@ (8000730 <MX_I2C1_Init+0x74>)
 80006f8:	f000 fdf0 	bl	80012dc <HAL_I2C_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000702:	f000 f91d 	bl	8000940 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000706:	2100      	movs	r1, #0
 8000708:	4809      	ldr	r0, [pc, #36]	@ (8000730 <MX_I2C1_Init+0x74>)
 800070a:	f001 fb23 	bl	8001d54 <HAL_I2CEx_ConfigAnalogFilter>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000714:	f000 f914 	bl	8000940 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000718:	2100      	movs	r1, #0
 800071a:	4805      	ldr	r0, [pc, #20]	@ (8000730 <MX_I2C1_Init+0x74>)
 800071c:	f001 fb65 	bl	8001dea <HAL_I2CEx_ConfigDigitalFilter>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000726:	f000 f90b 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	20000338 	.word	0x20000338
 8000734:	40005400 	.word	0x40005400
 8000738:	10909cec 	.word	0x10909cec

0800073c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000740:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <MX_USART2_UART_Init+0x58>)
 8000742:	4a15      	ldr	r2, [pc, #84]	@ (8000798 <MX_USART2_UART_Init+0x5c>)
 8000744:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000746:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <MX_USART2_UART_Init+0x58>)
 8000748:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800074c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800074e:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_USART2_UART_Init+0x58>)
 8000750:	2200      	movs	r2, #0
 8000752:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_USART2_UART_Init+0x58>)
 8000756:	2200      	movs	r2, #0
 8000758:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800075a:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <MX_USART2_UART_Init+0x58>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000760:	4b0c      	ldr	r3, [pc, #48]	@ (8000794 <MX_USART2_UART_Init+0x58>)
 8000762:	220c      	movs	r2, #12
 8000764:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <MX_USART2_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800076c:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <MX_USART2_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000772:	4b08      	ldr	r3, [pc, #32]	@ (8000794 <MX_USART2_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000778:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <MX_USART2_UART_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_USART2_UART_Init+0x58>)
 8000780:	f002 fea0 	bl	80034c4 <HAL_UART_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800078a:	f000 f8d9 	bl	8000940 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	2000038c 	.word	0x2000038c
 8000798:	40004400 	.word	0x40004400

0800079c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	@ 0x28
 80007a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	2200      	movs	r2, #0
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	605a      	str	r2, [r3, #4]
 80007ac:	609a      	str	r2, [r3, #8]
 80007ae:	60da      	str	r2, [r3, #12]
 80007b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007b2:	4b2b      	ldr	r3, [pc, #172]	@ (8000860 <MX_GPIO_Init+0xc4>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b6:	4a2a      	ldr	r2, [pc, #168]	@ (8000860 <MX_GPIO_Init+0xc4>)
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007be:	4b28      	ldr	r3, [pc, #160]	@ (8000860 <MX_GPIO_Init+0xc4>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c2:	f003 0304 	and.w	r3, r3, #4
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ca:	4b25      	ldr	r3, [pc, #148]	@ (8000860 <MX_GPIO_Init+0xc4>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ce:	4a24      	ldr	r2, [pc, #144]	@ (8000860 <MX_GPIO_Init+0xc4>)
 80007d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007d6:	4b22      	ldr	r3, [pc, #136]	@ (8000860 <MX_GPIO_Init+0xc4>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000860 <MX_GPIO_Init+0xc4>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e6:	4a1e      	ldr	r2, [pc, #120]	@ (8000860 <MX_GPIO_Init+0xc4>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000860 <MX_GPIO_Init+0xc4>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	4b19      	ldr	r3, [pc, #100]	@ (8000860 <MX_GPIO_Init+0xc4>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fe:	4a18      	ldr	r2, [pc, #96]	@ (8000860 <MX_GPIO_Init+0xc4>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000806:	4b16      	ldr	r3, [pc, #88]	@ (8000860 <MX_GPIO_Init+0xc4>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2120      	movs	r1, #32
 8000816:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800081a:	f000 fd47 	bl	80012ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800081e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000824:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000828:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 0314 	add.w	r3, r7, #20
 8000832:	4619      	mov	r1, r3
 8000834:	480b      	ldr	r0, [pc, #44]	@ (8000864 <MX_GPIO_Init+0xc8>)
 8000836:	f000 fb8f 	bl	8000f58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800083a:	2320      	movs	r3, #32
 800083c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	4619      	mov	r1, r3
 8000850:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000854:	f000 fb80 	bl	8000f58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000858:	bf00      	nop
 800085a:	3728      	adds	r7, #40	@ 0x28
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40021000 	.word	0x40021000
 8000864:	48000800 	.word	0x48000800

08000868 <MX_VL53L0X_Init>:

/* USER CODE BEGIN 4 */
// VL53L0X time-of-flight sensor initialization
static void MX_VL53L0X_Init(void) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
	uint32_t refSpadCount;
	uint8_t isApertureSpads;
	uint8_t VhvSettings;
	uint8_t PhaseCal;

	Dev->I2cHandle = &hi2c1;
 800086e:	4b32      	ldr	r3, [pc, #200]	@ (8000938 <MX_VL53L0X_Init+0xd0>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a32      	ldr	r2, [pc, #200]	@ (800093c <MX_VL53L0X_Init+0xd4>)
 8000874:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
	Dev->I2cDevAddr = 0x29 << 1;
 8000878:	4b2f      	ldr	r3, [pc, #188]	@ (8000938 <MX_VL53L0X_Init+0xd0>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2252      	movs	r2, #82	@ 0x52
 800087e:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160

	VL53L0X_WaitDeviceBooted(Dev);
 8000882:	4b2d      	ldr	r3, [pc, #180]	@ (8000938 <MX_VL53L0X_Init+0xd0>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4618      	mov	r0, r3
 8000888:	f003 feb8 	bl	80045fc <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit(Dev);
 800088c:	4b2a      	ldr	r3, [pc, #168]	@ (8000938 <MX_VL53L0X_Init+0xd0>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4618      	mov	r0, r3
 8000892:	f003 fbcf 	bl	8004034 <VL53L0X_DataInit>
	VL53L0X_StaticInit(Dev);
 8000896:	4b28      	ldr	r3, [pc, #160]	@ (8000938 <MX_VL53L0X_Init+0xd0>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f003 fd2e 	bl	80042fc <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 80008a0:	4b25      	ldr	r3, [pc, #148]	@ (8000938 <MX_VL53L0X_Init+0xd0>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	1c7a      	adds	r2, r7, #1
 80008a6:	1cb9      	adds	r1, r7, #2
 80008a8:	4618      	mov	r0, r3
 80008aa:	f004 fbc5 	bl	8005038 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 80008ae:	4b22      	ldr	r3, [pc, #136]	@ (8000938 <MX_VL53L0X_Init+0xd0>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	1cfa      	adds	r2, r7, #3
 80008b4:	1d39      	adds	r1, r7, #4
 80008b6:	4618      	mov	r0, r3
 80008b8:	f005 f840 	bl	800593c <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80008bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000938 <MX_VL53L0X_Init+0xd0>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2100      	movs	r1, #0
 80008c2:	4618      	mov	r0, r3
 80008c4:	f003 ff38 	bl	8004738 <VL53L0X_SetDeviceMode>

	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80008c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000938 <MX_VL53L0X_Init+0xd0>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2201      	movs	r2, #1
 80008ce:	2100      	movs	r1, #0
 80008d0:	4618      	mov	r0, r3
 80008d2:	f004 f9ab 	bl	8004c2c <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80008d6:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <MX_VL53L0X_Init+0xd0>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2201      	movs	r2, #1
 80008dc:	2101      	movs	r1, #1
 80008de:	4618      	mov	r0, r3
 80008e0:	f004 f9a4 	bl	8004c2c <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t) (0.1*65536));
 80008e4:	4b14      	ldr	r3, [pc, #80]	@ (8000938 <MX_VL53L0X_Init+0xd0>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f641 1299 	movw	r2, #6553	@ 0x1999
 80008ec:	2101      	movs	r1, #1
 80008ee:	4618      	mov	r0, r3
 80008f0:	f004 fa4c 	bl	8004d8c <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t) (60*65536));
 80008f4:	4b10      	ldr	r3, [pc, #64]	@ (8000938 <MX_VL53L0X_Init+0xd0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f004 fa44 	bl	8004d8c <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 8000904:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <MX_VL53L0X_Init+0xd0>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f248 01e8 	movw	r1, #33000	@ 0x80e8
 800090c:	4618      	mov	r0, r3
 800090e:	f003 ff71 	bl	80047f4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8000912:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <MX_VL53L0X_Init+0xd0>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2212      	movs	r2, #18
 8000918:	2100      	movs	r1, #0
 800091a:	4618      	mov	r0, r3
 800091c:	f003 ff90 	bl	8004840 <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8000920:	4b05      	ldr	r3, [pc, #20]	@ (8000938 <MX_VL53L0X_Init+0xd0>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	220e      	movs	r2, #14
 8000926:	2101      	movs	r1, #1
 8000928:	4618      	mov	r0, r3
 800092a:	f003 ff89 	bl	8004840 <VL53L0X_SetVcselPulsePeriod>
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000000 	.word	0x20000000
 800093c:	20000338 	.word	0x20000338

08000940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000944:	b672      	cpsid	i
}
 8000946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <Error_Handler+0x8>

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000952:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <HAL_MspInit+0x44>)
 8000954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000956:	4a0e      	ldr	r2, [pc, #56]	@ (8000990 <HAL_MspInit+0x44>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6613      	str	r3, [r2, #96]	@ 0x60
 800095e:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <HAL_MspInit+0x44>)
 8000960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <HAL_MspInit+0x44>)
 800096c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800096e:	4a08      	ldr	r2, [pc, #32]	@ (8000990 <HAL_MspInit+0x44>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000974:	6593      	str	r3, [r2, #88]	@ 0x58
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <HAL_MspInit+0x44>)
 8000978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800097a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000

08000994 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b0ac      	sub	sp, #176	@ 0xb0
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2288      	movs	r2, #136	@ 0x88
 80009b2:	2100      	movs	r1, #0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f008 fb31 	bl	800901c <memset>
  if(hi2c->Instance==I2C1)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a21      	ldr	r2, [pc, #132]	@ (8000a44 <HAL_I2C_MspInit+0xb0>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d13b      	bne.n	8000a3c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009c4:	2340      	movs	r3, #64	@ 0x40
 80009c6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4618      	mov	r0, r3
 80009d2:	f002 f8bb 	bl	8002b4c <HAL_RCCEx_PeriphCLKConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80009dc:	f7ff ffb0 	bl	8000940 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e0:	4b19      	ldr	r3, [pc, #100]	@ (8000a48 <HAL_I2C_MspInit+0xb4>)
 80009e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e4:	4a18      	ldr	r2, [pc, #96]	@ (8000a48 <HAL_I2C_MspInit+0xb4>)
 80009e6:	f043 0302 	orr.w	r3, r3, #2
 80009ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ec:	4b16      	ldr	r3, [pc, #88]	@ (8000a48 <HAL_I2C_MspInit+0xb4>)
 80009ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f0:	f003 0302 	and.w	r3, r3, #2
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009f8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a00:	2312      	movs	r3, #18
 8000a02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a12:	2304      	movs	r3, #4
 8000a14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a18:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480b      	ldr	r0, [pc, #44]	@ (8000a4c <HAL_I2C_MspInit+0xb8>)
 8000a20:	f000 fa9a 	bl	8000f58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a24:	4b08      	ldr	r3, [pc, #32]	@ (8000a48 <HAL_I2C_MspInit+0xb4>)
 8000a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a28:	4a07      	ldr	r2, [pc, #28]	@ (8000a48 <HAL_I2C_MspInit+0xb4>)
 8000a2a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a30:	4b05      	ldr	r3, [pc, #20]	@ (8000a48 <HAL_I2C_MspInit+0xb4>)
 8000a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a3c:	bf00      	nop
 8000a3e:	37b0      	adds	r7, #176	@ 0xb0
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40005400 	.word	0x40005400
 8000a48:	40021000 	.word	0x40021000
 8000a4c:	48000400 	.word	0x48000400

08000a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b0ac      	sub	sp, #176	@ 0xb0
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	2288      	movs	r2, #136	@ 0x88
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f008 fad3 	bl	800901c <memset>
  if(huart->Instance==USART2)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a21      	ldr	r2, [pc, #132]	@ (8000b00 <HAL_UART_MspInit+0xb0>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d13b      	bne.n	8000af8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a80:	2302      	movs	r3, #2
 8000a82:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f002 f85d 	bl	8002b4c <HAL_RCCEx_PeriphCLKConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a98:	f7ff ff52 	bl	8000940 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a9c:	4b19      	ldr	r3, [pc, #100]	@ (8000b04 <HAL_UART_MspInit+0xb4>)
 8000a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aa0:	4a18      	ldr	r2, [pc, #96]	@ (8000b04 <HAL_UART_MspInit+0xb4>)
 8000aa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000aa6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000aa8:	4b16      	ldr	r3, [pc, #88]	@ (8000b04 <HAL_UART_MspInit+0xb4>)
 8000aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	4b13      	ldr	r3, [pc, #76]	@ (8000b04 <HAL_UART_MspInit+0xb4>)
 8000ab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab8:	4a12      	ldr	r2, [pc, #72]	@ (8000b04 <HAL_UART_MspInit+0xb4>)
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac0:	4b10      	ldr	r3, [pc, #64]	@ (8000b04 <HAL_UART_MspInit+0xb4>)
 8000ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000acc:	230c      	movs	r3, #12
 8000ace:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ae4:	2307      	movs	r3, #7
 8000ae6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aea:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000aee:	4619      	mov	r1, r3
 8000af0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af4:	f000 fa30 	bl	8000f58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000af8:	bf00      	nop
 8000afa:	37b0      	adds	r7, #176	@ 0xb0
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40004400 	.word	0x40004400
 8000b04:	40021000 	.word	0x40021000

08000b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <NMI_Handler+0x4>

08000b10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <HardFault_Handler+0x4>

08000b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <MemManage_Handler+0x4>

08000b20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <BusFault_Handler+0x4>

08000b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <UsageFault_Handler+0x4>

08000b30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5e:	f000 f8d1 	bl	8000d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b70:	4a14      	ldr	r2, [pc, #80]	@ (8000bc4 <_sbrk+0x5c>)
 8000b72:	4b15      	ldr	r3, [pc, #84]	@ (8000bc8 <_sbrk+0x60>)
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b7c:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <_sbrk+0x64>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d102      	bne.n	8000b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b84:	4b11      	ldr	r3, [pc, #68]	@ (8000bcc <_sbrk+0x64>)
 8000b86:	4a12      	ldr	r2, [pc, #72]	@ (8000bd0 <_sbrk+0x68>)
 8000b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b8a:	4b10      	ldr	r3, [pc, #64]	@ (8000bcc <_sbrk+0x64>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4413      	add	r3, r2
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d207      	bcs.n	8000ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b98:	f008 fa48 	bl	800902c <__errno>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	220c      	movs	r2, #12
 8000ba0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba6:	e009      	b.n	8000bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba8:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <_sbrk+0x64>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bae:	4b07      	ldr	r3, [pc, #28]	@ (8000bcc <_sbrk+0x64>)
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	4a05      	ldr	r2, [pc, #20]	@ (8000bcc <_sbrk+0x64>)
 8000bb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bba:	68fb      	ldr	r3, [r7, #12]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20018000 	.word	0x20018000
 8000bc8:	00000400 	.word	0x00000400
 8000bcc:	20000604 	.word	0x20000604
 8000bd0:	20000798 	.word	0x20000798

08000bd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bd8:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <SystemInit+0x20>)
 8000bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bde:	4a05      	ldr	r2, [pc, #20]	@ (8000bf4 <SystemInit+0x20>)
 8000be0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000be4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bf8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bfc:	f7ff ffea 	bl	8000bd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c00:	480c      	ldr	r0, [pc, #48]	@ (8000c34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c02:	490d      	ldr	r1, [pc, #52]	@ (8000c38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c04:	4a0d      	ldr	r2, [pc, #52]	@ (8000c3c <LoopForever+0xe>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c08:	e002      	b.n	8000c10 <LoopCopyDataInit>

08000c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0e:	3304      	adds	r3, #4

08000c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c14:	d3f9      	bcc.n	8000c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c16:	4a0a      	ldr	r2, [pc, #40]	@ (8000c40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c18:	4c0a      	ldr	r4, [pc, #40]	@ (8000c44 <LoopForever+0x16>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c1c:	e001      	b.n	8000c22 <LoopFillZerobss>

08000c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c20:	3204      	adds	r2, #4

08000c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c24:	d3fb      	bcc.n	8000c1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c26:	f008 fa07 	bl	8009038 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c2a:	f7ff fca1 	bl	8000570 <main>

08000c2e <LoopForever>:

LoopForever:
    b LoopForever
 8000c2e:	e7fe      	b.n	8000c2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c30:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c38:	2000031c 	.word	0x2000031c
  ldr r2, =_sidata
 8000c3c:	08009a30 	.word	0x08009a30
  ldr r2, =_sbss
 8000c40:	2000031c 	.word	0x2000031c
  ldr r4, =_ebss
 8000c44:	20000794 	.word	0x20000794

08000c48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c48:	e7fe      	b.n	8000c48 <ADC1_2_IRQHandler>
	...

08000c4c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c56:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <HAL_Init+0x3c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c88 <HAL_Init+0x3c>)
 8000c5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c60:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c62:	2003      	movs	r0, #3
 8000c64:	f000 f944 	bl	8000ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c68:	2000      	movs	r0, #0
 8000c6a:	f000 f80f 	bl	8000c8c <HAL_InitTick>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d002      	beq.n	8000c7a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	71fb      	strb	r3, [r7, #7]
 8000c78:	e001      	b.n	8000c7e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c7a:	f7ff fe67 	bl	800094c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c7e:	79fb      	ldrb	r3, [r7, #7]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40022000 	.word	0x40022000

08000c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c94:	2300      	movs	r3, #0
 8000c96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c98:	4b17      	ldr	r3, [pc, #92]	@ (8000cf8 <HAL_InitTick+0x6c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d023      	beq.n	8000ce8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ca0:	4b16      	ldr	r3, [pc, #88]	@ (8000cfc <HAL_InitTick+0x70>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b14      	ldr	r3, [pc, #80]	@ (8000cf8 <HAL_InitTick+0x6c>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 f941 	bl	8000f3e <HAL_SYSTICK_Config>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d10f      	bne.n	8000ce2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2b0f      	cmp	r3, #15
 8000cc6:	d809      	bhi.n	8000cdc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	6879      	ldr	r1, [r7, #4]
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	f000 f919 	bl	8000f06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8000d00 <HAL_InitTick+0x74>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	6013      	str	r3, [r2, #0]
 8000cda:	e007      	b.n	8000cec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	73fb      	strb	r3, [r7, #15]
 8000ce0:	e004      	b.n	8000cec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	73fb      	strb	r3, [r7, #15]
 8000ce6:	e001      	b.n	8000cec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	2000000c 	.word	0x2000000c
 8000cfc:	20000004 	.word	0x20000004
 8000d00:	20000008 	.word	0x20000008

08000d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d08:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <HAL_IncTick+0x20>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <HAL_IncTick+0x24>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	4a04      	ldr	r2, [pc, #16]	@ (8000d28 <HAL_IncTick+0x24>)
 8000d16:	6013      	str	r3, [r2, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	2000000c 	.word	0x2000000c
 8000d28:	20000608 	.word	0x20000608

08000d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d30:	4b03      	ldr	r3, [pc, #12]	@ (8000d40 <HAL_GetTick+0x14>)
 8000d32:	681b      	ldr	r3, [r3, #0]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	20000608 	.word	0x20000608

08000d44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d4c:	f7ff ffee 	bl	8000d2c <HAL_GetTick>
 8000d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d5c:	d005      	beq.n	8000d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d88 <HAL_Delay+0x44>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4413      	add	r3, r2
 8000d68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d6a:	bf00      	nop
 8000d6c:	f7ff ffde 	bl	8000d2c <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d8f7      	bhi.n	8000d6c <HAL_Delay+0x28>
  {
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	2000000c 	.word	0x2000000c

08000d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000da8:	4013      	ands	r3, r2
 8000daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000db8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dbe:	4a04      	ldr	r2, [pc, #16]	@ (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	60d3      	str	r3, [r2, #12]
}
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd8:	4b04      	ldr	r3, [pc, #16]	@ (8000dec <__NVIC_GetPriorityGrouping+0x18>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	0a1b      	lsrs	r3, r3, #8
 8000dde:	f003 0307 	and.w	r3, r3, #7
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	6039      	str	r1, [r7, #0]
 8000dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	db0a      	blt.n	8000e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	490c      	ldr	r1, [pc, #48]	@ (8000e3c <__NVIC_SetPriority+0x4c>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	0112      	lsls	r2, r2, #4
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	440b      	add	r3, r1
 8000e14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e18:	e00a      	b.n	8000e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4908      	ldr	r1, [pc, #32]	@ (8000e40 <__NVIC_SetPriority+0x50>)
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	f003 030f 	and.w	r3, r3, #15
 8000e26:	3b04      	subs	r3, #4
 8000e28:	0112      	lsls	r2, r2, #4
 8000e2a:	b2d2      	uxtb	r2, r2
 8000e2c:	440b      	add	r3, r1
 8000e2e:	761a      	strb	r2, [r3, #24]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000e100 	.word	0xe000e100
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b089      	sub	sp, #36	@ 0x24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f1c3 0307 	rsb	r3, r3, #7
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	bf28      	it	cs
 8000e62:	2304      	movcs	r3, #4
 8000e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3304      	adds	r3, #4
 8000e6a:	2b06      	cmp	r3, #6
 8000e6c:	d902      	bls.n	8000e74 <NVIC_EncodePriority+0x30>
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3b03      	subs	r3, #3
 8000e72:	e000      	b.n	8000e76 <NVIC_EncodePriority+0x32>
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e78:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43da      	mvns	r2, r3
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	401a      	ands	r2, r3
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa01 f303 	lsl.w	r3, r1, r3
 8000e96:	43d9      	mvns	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	4313      	orrs	r3, r2
         );
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3724      	adds	r7, #36	@ 0x24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
	...

08000eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3b01      	subs	r3, #1
 8000eb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ebc:	d301      	bcc.n	8000ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00f      	b.n	8000ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8000eec <SysTick_Config+0x40>)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eca:	210f      	movs	r1, #15
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f7ff ff8e 	bl	8000df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed4:	4b05      	ldr	r3, [pc, #20]	@ (8000eec <SysTick_Config+0x40>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eda:	4b04      	ldr	r3, [pc, #16]	@ (8000eec <SysTick_Config+0x40>)
 8000edc:	2207      	movs	r2, #7
 8000ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	e000e010 	.word	0xe000e010

08000ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff ff47 	bl	8000d8c <__NVIC_SetPriorityGrouping>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b086      	sub	sp, #24
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
 8000f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f18:	f7ff ff5c 	bl	8000dd4 <__NVIC_GetPriorityGrouping>
 8000f1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	68b9      	ldr	r1, [r7, #8]
 8000f22:	6978      	ldr	r0, [r7, #20]
 8000f24:	f7ff ff8e 	bl	8000e44 <NVIC_EncodePriority>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ff5d 	bl	8000df0 <__NVIC_SetPriority>
}
 8000f36:	bf00      	nop
 8000f38:	3718      	adds	r7, #24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff ffb0 	bl	8000eac <SysTick_Config>
 8000f4c:	4603      	mov	r3, r0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b087      	sub	sp, #28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f66:	e17f      	b.n	8001268 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	fa01 f303 	lsl.w	r3, r1, r3
 8000f74:	4013      	ands	r3, r2
 8000f76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f000 8171 	beq.w	8001262 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d005      	beq.n	8000f98 <HAL_GPIO_Init+0x40>
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0303 	and.w	r3, r3, #3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d130      	bne.n	8000ffa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	68da      	ldr	r2, [r3, #12]
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fce:	2201      	movs	r2, #1
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4013      	ands	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	091b      	lsrs	r3, r3, #4
 8000fe4:	f003 0201 	and.w	r2, r3, #1
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f003 0303 	and.w	r3, r3, #3
 8001002:	2b03      	cmp	r3, #3
 8001004:	d118      	bne.n	8001038 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800100a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800100c:	2201      	movs	r2, #1
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	08db      	lsrs	r3, r3, #3
 8001022:	f003 0201 	and.w	r2, r3, #1
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	2b03      	cmp	r3, #3
 8001042:	d017      	beq.n	8001074 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	2203      	movs	r2, #3
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	689a      	ldr	r2, [r3, #8]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	2b02      	cmp	r3, #2
 800107e:	d123      	bne.n	80010c8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	08da      	lsrs	r2, r3, #3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3208      	adds	r2, #8
 8001088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	f003 0307 	and.w	r3, r3, #7
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	220f      	movs	r2, #15
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4013      	ands	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	691a      	ldr	r2, [r3, #16]
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	08da      	lsrs	r2, r3, #3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3208      	adds	r2, #8
 80010c2:	6939      	ldr	r1, [r7, #16]
 80010c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	2203      	movs	r2, #3
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 0203 	and.w	r2, r3, #3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001104:	2b00      	cmp	r3, #0
 8001106:	f000 80ac 	beq.w	8001262 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110a:	4b5f      	ldr	r3, [pc, #380]	@ (8001288 <HAL_GPIO_Init+0x330>)
 800110c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800110e:	4a5e      	ldr	r2, [pc, #376]	@ (8001288 <HAL_GPIO_Init+0x330>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6613      	str	r3, [r2, #96]	@ 0x60
 8001116:	4b5c      	ldr	r3, [pc, #368]	@ (8001288 <HAL_GPIO_Init+0x330>)
 8001118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001122:	4a5a      	ldr	r2, [pc, #360]	@ (800128c <HAL_GPIO_Init+0x334>)
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	089b      	lsrs	r3, r3, #2
 8001128:	3302      	adds	r3, #2
 800112a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	220f      	movs	r2, #15
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43db      	mvns	r3, r3
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	4013      	ands	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800114c:	d025      	beq.n	800119a <HAL_GPIO_Init+0x242>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4f      	ldr	r2, [pc, #316]	@ (8001290 <HAL_GPIO_Init+0x338>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d01f      	beq.n	8001196 <HAL_GPIO_Init+0x23e>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a4e      	ldr	r2, [pc, #312]	@ (8001294 <HAL_GPIO_Init+0x33c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d019      	beq.n	8001192 <HAL_GPIO_Init+0x23a>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a4d      	ldr	r2, [pc, #308]	@ (8001298 <HAL_GPIO_Init+0x340>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d013      	beq.n	800118e <HAL_GPIO_Init+0x236>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a4c      	ldr	r2, [pc, #304]	@ (800129c <HAL_GPIO_Init+0x344>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d00d      	beq.n	800118a <HAL_GPIO_Init+0x232>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a4b      	ldr	r2, [pc, #300]	@ (80012a0 <HAL_GPIO_Init+0x348>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d007      	beq.n	8001186 <HAL_GPIO_Init+0x22e>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a4a      	ldr	r2, [pc, #296]	@ (80012a4 <HAL_GPIO_Init+0x34c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d101      	bne.n	8001182 <HAL_GPIO_Init+0x22a>
 800117e:	2306      	movs	r3, #6
 8001180:	e00c      	b.n	800119c <HAL_GPIO_Init+0x244>
 8001182:	2307      	movs	r3, #7
 8001184:	e00a      	b.n	800119c <HAL_GPIO_Init+0x244>
 8001186:	2305      	movs	r3, #5
 8001188:	e008      	b.n	800119c <HAL_GPIO_Init+0x244>
 800118a:	2304      	movs	r3, #4
 800118c:	e006      	b.n	800119c <HAL_GPIO_Init+0x244>
 800118e:	2303      	movs	r3, #3
 8001190:	e004      	b.n	800119c <HAL_GPIO_Init+0x244>
 8001192:	2302      	movs	r3, #2
 8001194:	e002      	b.n	800119c <HAL_GPIO_Init+0x244>
 8001196:	2301      	movs	r3, #1
 8001198:	e000      	b.n	800119c <HAL_GPIO_Init+0x244>
 800119a:	2300      	movs	r3, #0
 800119c:	697a      	ldr	r2, [r7, #20]
 800119e:	f002 0203 	and.w	r2, r2, #3
 80011a2:	0092      	lsls	r2, r2, #2
 80011a4:	4093      	lsls	r3, r2
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011ac:	4937      	ldr	r1, [pc, #220]	@ (800128c <HAL_GPIO_Init+0x334>)
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	089b      	lsrs	r3, r3, #2
 80011b2:	3302      	adds	r3, #2
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011ba:	4b3b      	ldr	r3, [pc, #236]	@ (80012a8 <HAL_GPIO_Init+0x350>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	43db      	mvns	r3, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d003      	beq.n	80011de <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4313      	orrs	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011de:	4a32      	ldr	r2, [pc, #200]	@ (80012a8 <HAL_GPIO_Init+0x350>)
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011e4:	4b30      	ldr	r3, [pc, #192]	@ (80012a8 <HAL_GPIO_Init+0x350>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d003      	beq.n	8001208 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001208:	4a27      	ldr	r2, [pc, #156]	@ (80012a8 <HAL_GPIO_Init+0x350>)
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800120e:	4b26      	ldr	r3, [pc, #152]	@ (80012a8 <HAL_GPIO_Init+0x350>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	43db      	mvns	r3, r3
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001232:	4a1d      	ldr	r2, [pc, #116]	@ (80012a8 <HAL_GPIO_Init+0x350>)
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001238:	4b1b      	ldr	r3, [pc, #108]	@ (80012a8 <HAL_GPIO_Init+0x350>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	43db      	mvns	r3, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800125c:	4a12      	ldr	r2, [pc, #72]	@ (80012a8 <HAL_GPIO_Init+0x350>)
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	3301      	adds	r3, #1
 8001266:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	fa22 f303 	lsr.w	r3, r2, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	f47f ae78 	bne.w	8000f68 <HAL_GPIO_Init+0x10>
  }
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	371c      	adds	r7, #28
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40021000 	.word	0x40021000
 800128c:	40010000 	.word	0x40010000
 8001290:	48000400 	.word	0x48000400
 8001294:	48000800 	.word	0x48000800
 8001298:	48000c00 	.word	0x48000c00
 800129c:	48001000 	.word	0x48001000
 80012a0:	48001400 	.word	0x48001400
 80012a4:	48001800 	.word	0x48001800
 80012a8:	40010400 	.word	0x40010400

080012ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	460b      	mov	r3, r1
 80012b6:	807b      	strh	r3, [r7, #2]
 80012b8:	4613      	mov	r3, r2
 80012ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012bc:	787b      	ldrb	r3, [r7, #1]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012c2:	887a      	ldrh	r2, [r7, #2]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012c8:	e002      	b.n	80012d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ca:	887a      	ldrh	r2, [r7, #2]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012d0:	bf00      	nop
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d101      	bne.n	80012ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e08d      	b.n	800140a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d106      	bne.n	8001308 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff fb46 	bl	8000994 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2224      	movs	r2, #36	@ 0x24
 800130c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 0201 	bic.w	r2, r2, #1
 800131e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800132c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689a      	ldr	r2, [r3, #8]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800133c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d107      	bne.n	8001356 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	e006      	b.n	8001364 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001362:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	2b02      	cmp	r3, #2
 800136a:	d108      	bne.n	800137e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	e007      	b.n	800138e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800138c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	6812      	ldr	r2, [r2, #0]
 8001398:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800139c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	68da      	ldr	r2, [r3, #12]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80013b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	691a      	ldr	r2, [r3, #16]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	699b      	ldr	r3, [r3, #24]
 80013c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	69d9      	ldr	r1, [r3, #28]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a1a      	ldr	r2, [r3, #32]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	430a      	orrs	r2, r1
 80013da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f042 0201 	orr.w	r2, r2, #1
 80013ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2220      	movs	r2, #32
 80013f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2200      	movs	r2, #0
 80013fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af02      	add	r7, sp, #8
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	461a      	mov	r2, r3
 8001420:	460b      	mov	r3, r1
 8001422:	817b      	strh	r3, [r7, #10]
 8001424:	4613      	mov	r3, r2
 8001426:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b20      	cmp	r3, #32
 8001432:	f040 80fd 	bne.w	8001630 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800143c:	2b01      	cmp	r3, #1
 800143e:	d101      	bne.n	8001444 <HAL_I2C_Master_Transmit+0x30>
 8001440:	2302      	movs	r3, #2
 8001442:	e0f6      	b.n	8001632 <HAL_I2C_Master_Transmit+0x21e>
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800144c:	f7ff fc6e 	bl	8000d2c <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	2319      	movs	r3, #25
 8001458:	2201      	movs	r2, #1
 800145a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f000 fa0a 	bl	8001878 <I2C_WaitOnFlagUntilTimeout>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e0e1      	b.n	8001632 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	2221      	movs	r2, #33	@ 0x21
 8001472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2210      	movs	r2, #16
 800147a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2200      	movs	r2, #0
 8001482:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	893a      	ldrh	r2, [r7, #8]
 800148e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2200      	movs	r2, #0
 8001494:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800149a:	b29b      	uxth	r3, r3
 800149c:	2bff      	cmp	r3, #255	@ 0xff
 800149e:	d906      	bls.n	80014ae <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	22ff      	movs	r2, #255	@ 0xff
 80014a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80014a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	e007      	b.n	80014be <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014b2:	b29a      	uxth	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80014b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014bc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d024      	beq.n	8001510 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ca:	781a      	ldrb	r2, [r3, #0]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d6:	1c5a      	adds	r2, r3, #1
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	3b01      	subs	r3, #1
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014ee:	3b01      	subs	r3, #1
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	3301      	adds	r3, #1
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	8979      	ldrh	r1, [r7, #10]
 8001502:	4b4e      	ldr	r3, [pc, #312]	@ (800163c <HAL_I2C_Master_Transmit+0x228>)
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f000 fbf1 	bl	8001cf0 <I2C_TransferConfig>
 800150e:	e066      	b.n	80015de <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001514:	b2da      	uxtb	r2, r3
 8001516:	8979      	ldrh	r1, [r7, #10]
 8001518:	4b48      	ldr	r3, [pc, #288]	@ (800163c <HAL_I2C_Master_Transmit+0x228>)
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f000 fbe6 	bl	8001cf0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001524:	e05b      	b.n	80015de <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	6a39      	ldr	r1, [r7, #32]
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f000 f9f3 	bl	8001916 <I2C_WaitOnTXISFlagUntilTimeout>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e07b      	b.n	8001632 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800153e:	781a      	ldrb	r2, [r3, #0]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800154a:	1c5a      	adds	r2, r3, #1
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001554:	b29b      	uxth	r3, r3
 8001556:	3b01      	subs	r3, #1
 8001558:	b29a      	uxth	r2, r3
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001562:	3b01      	subs	r3, #1
 8001564:	b29a      	uxth	r2, r3
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800156e:	b29b      	uxth	r3, r3
 8001570:	2b00      	cmp	r3, #0
 8001572:	d034      	beq.n	80015de <HAL_I2C_Master_Transmit+0x1ca>
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001578:	2b00      	cmp	r3, #0
 800157a:	d130      	bne.n	80015de <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	6a3b      	ldr	r3, [r7, #32]
 8001582:	2200      	movs	r2, #0
 8001584:	2180      	movs	r1, #128	@ 0x80
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 f976 	bl	8001878 <I2C_WaitOnFlagUntilTimeout>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e04d      	b.n	8001632 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800159a:	b29b      	uxth	r3, r3
 800159c:	2bff      	cmp	r3, #255	@ 0xff
 800159e:	d90e      	bls.n	80015be <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	22ff      	movs	r2, #255	@ 0xff
 80015a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	8979      	ldrh	r1, [r7, #10]
 80015ae:	2300      	movs	r3, #0
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80015b6:	68f8      	ldr	r0, [r7, #12]
 80015b8:	f000 fb9a 	bl	8001cf0 <I2C_TransferConfig>
 80015bc:	e00f      	b.n	80015de <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	8979      	ldrh	r1, [r7, #10]
 80015d0:	2300      	movs	r3, #0
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f000 fb89 	bl	8001cf0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d19e      	bne.n	8001526 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	6a39      	ldr	r1, [r7, #32]
 80015ec:	68f8      	ldr	r0, [r7, #12]
 80015ee:	f000 f9d9 	bl	80019a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e01a      	b.n	8001632 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2220      	movs	r2, #32
 8001602:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6859      	ldr	r1, [r3, #4]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	4b0c      	ldr	r3, [pc, #48]	@ (8001640 <HAL_I2C_Master_Transmit+0x22c>)
 8001610:	400b      	ands	r3, r1
 8001612:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2220      	movs	r2, #32
 8001618:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	e000      	b.n	8001632 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8001630:	2302      	movs	r3, #2
  }
}
 8001632:	4618      	mov	r0, r3
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	80002000 	.word	0x80002000
 8001640:	fe00e800 	.word	0xfe00e800

08001644 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b088      	sub	sp, #32
 8001648:	af02      	add	r7, sp, #8
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	607a      	str	r2, [r7, #4]
 800164e:	461a      	mov	r2, r3
 8001650:	460b      	mov	r3, r1
 8001652:	817b      	strh	r3, [r7, #10]
 8001654:	4613      	mov	r3, r2
 8001656:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b20      	cmp	r3, #32
 8001662:	f040 80db 	bne.w	800181c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800166c:	2b01      	cmp	r3, #1
 800166e:	d101      	bne.n	8001674 <HAL_I2C_Master_Receive+0x30>
 8001670:	2302      	movs	r3, #2
 8001672:	e0d4      	b.n	800181e <HAL_I2C_Master_Receive+0x1da>
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800167c:	f7ff fb56 	bl	8000d2c <HAL_GetTick>
 8001680:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	2319      	movs	r3, #25
 8001688:	2201      	movs	r2, #1
 800168a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800168e:	68f8      	ldr	r0, [r7, #12]
 8001690:	f000 f8f2 	bl	8001878 <I2C_WaitOnFlagUntilTimeout>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e0bf      	b.n	800181e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2222      	movs	r2, #34	@ 0x22
 80016a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2210      	movs	r2, #16
 80016aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	893a      	ldrh	r2, [r7, #8]
 80016be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2200      	movs	r2, #0
 80016c4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	2bff      	cmp	r3, #255	@ 0xff
 80016ce:	d90e      	bls.n	80016ee <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	22ff      	movs	r2, #255	@ 0xff
 80016d4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016da:	b2da      	uxtb	r2, r3
 80016dc:	8979      	ldrh	r1, [r7, #10]
 80016de:	4b52      	ldr	r3, [pc, #328]	@ (8001828 <HAL_I2C_Master_Receive+0x1e4>)
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f000 fb02 	bl	8001cf0 <I2C_TransferConfig>
 80016ec:	e06d      	b.n	80017ca <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	8979      	ldrh	r1, [r7, #10]
 8001700:	4b49      	ldr	r3, [pc, #292]	@ (8001828 <HAL_I2C_Master_Receive+0x1e4>)
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f000 faf1 	bl	8001cf0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800170e:	e05c      	b.n	80017ca <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	6a39      	ldr	r1, [r7, #32]
 8001714:	68f8      	ldr	r0, [r7, #12]
 8001716:	f000 f989 	bl	8001a2c <I2C_WaitOnRXNEFlagUntilTimeout>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e07c      	b.n	800181e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001736:	1c5a      	adds	r2, r3, #1
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001740:	3b01      	subs	r3, #1
 8001742:	b29a      	uxth	r2, r3
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800174c:	b29b      	uxth	r3, r3
 800174e:	3b01      	subs	r3, #1
 8001750:	b29a      	uxth	r2, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800175a:	b29b      	uxth	r3, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	d034      	beq.n	80017ca <HAL_I2C_Master_Receive+0x186>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001764:	2b00      	cmp	r3, #0
 8001766:	d130      	bne.n	80017ca <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	6a3b      	ldr	r3, [r7, #32]
 800176e:	2200      	movs	r2, #0
 8001770:	2180      	movs	r1, #128	@ 0x80
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	f000 f880 	bl	8001878 <I2C_WaitOnFlagUntilTimeout>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e04d      	b.n	800181e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001786:	b29b      	uxth	r3, r3
 8001788:	2bff      	cmp	r3, #255	@ 0xff
 800178a:	d90e      	bls.n	80017aa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	22ff      	movs	r2, #255	@ 0xff
 8001790:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001796:	b2da      	uxtb	r2, r3
 8001798:	8979      	ldrh	r1, [r7, #10]
 800179a:	2300      	movs	r3, #0
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f000 faa4 	bl	8001cf0 <I2C_TransferConfig>
 80017a8:	e00f      	b.n	80017ca <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	8979      	ldrh	r1, [r7, #10]
 80017bc:	2300      	movs	r3, #0
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f000 fa93 	bl	8001cf0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d19d      	bne.n	8001710 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	6a39      	ldr	r1, [r7, #32]
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f000 f8e3 	bl	80019a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e01a      	b.n	800181e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2220      	movs	r2, #32
 80017ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6859      	ldr	r1, [r3, #4]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	4b0c      	ldr	r3, [pc, #48]	@ (800182c <HAL_I2C_Master_Receive+0x1e8>)
 80017fc:	400b      	ands	r3, r1
 80017fe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2220      	movs	r2, #32
 8001804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	e000      	b.n	800181e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800181c:	2302      	movs	r3, #2
  }
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	80002400 	.word	0x80002400
 800182c:	fe00e800 	.word	0xfe00e800

08001830 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b02      	cmp	r3, #2
 8001844:	d103      	bne.n	800184e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2200      	movs	r2, #0
 800184c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b01      	cmp	r3, #1
 800185a:	d007      	beq.n	800186c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	699a      	ldr	r2, [r3, #24]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 0201 	orr.w	r2, r2, #1
 800186a:	619a      	str	r2, [r3, #24]
  }
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	4613      	mov	r3, r2
 8001886:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001888:	e031      	b.n	80018ee <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001890:	d02d      	beq.n	80018ee <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001892:	f7ff fa4b 	bl	8000d2c <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d302      	bcc.n	80018a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d122      	bne.n	80018ee <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	699a      	ldr	r2, [r3, #24]
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	4013      	ands	r3, r2
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	bf0c      	ite	eq
 80018b8:	2301      	moveq	r3, #1
 80018ba:	2300      	movne	r3, #0
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	461a      	mov	r2, r3
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d113      	bne.n	80018ee <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ca:	f043 0220 	orr.w	r2, r3, #32
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2220      	movs	r2, #32
 80018d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e00f      	b.n	800190e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	699a      	ldr	r2, [r3, #24]
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	4013      	ands	r3, r2
 80018f8:	68ba      	ldr	r2, [r7, #8]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	bf0c      	ite	eq
 80018fe:	2301      	moveq	r3, #1
 8001900:	2300      	movne	r3, #0
 8001902:	b2db      	uxtb	r3, r3
 8001904:	461a      	mov	r2, r3
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	429a      	cmp	r2, r3
 800190a:	d0be      	beq.n	800188a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b084      	sub	sp, #16
 800191a:	af00      	add	r7, sp, #0
 800191c:	60f8      	str	r0, [r7, #12]
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001922:	e033      	b.n	800198c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	68b9      	ldr	r1, [r7, #8]
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f000 f901 	bl	8001b30 <I2C_IsErrorOccurred>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e031      	b.n	800199c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800193e:	d025      	beq.n	800198c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001940:	f7ff f9f4 	bl	8000d2c <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	68ba      	ldr	r2, [r7, #8]
 800194c:	429a      	cmp	r2, r3
 800194e:	d302      	bcc.n	8001956 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d11a      	bne.n	800198c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b02      	cmp	r3, #2
 8001962:	d013      	beq.n	800198c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001968:	f043 0220 	orr.w	r2, r3, #32
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2220      	movs	r2, #32
 8001974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e007      	b.n	800199c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b02      	cmp	r3, #2
 8001998:	d1c4      	bne.n	8001924 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019b0:	e02f      	b.n	8001a12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	68b9      	ldr	r1, [r7, #8]
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f000 f8ba 	bl	8001b30 <I2C_IsErrorOccurred>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e02d      	b.n	8001a22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019c6:	f7ff f9b1 	bl	8000d2c <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	68ba      	ldr	r2, [r7, #8]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d302      	bcc.n	80019dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d11a      	bne.n	8001a12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	f003 0320 	and.w	r3, r3, #32
 80019e6:	2b20      	cmp	r3, #32
 80019e8:	d013      	beq.n	8001a12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ee:	f043 0220 	orr.w	r2, r3, #32
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2220      	movs	r2, #32
 80019fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e007      	b.n	8001a22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	f003 0320 	and.w	r3, r3, #32
 8001a1c:	2b20      	cmp	r3, #32
 8001a1e:	d1c8      	bne.n	80019b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a38:	e06b      	b.n	8001b12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	68b9      	ldr	r1, [r7, #8]
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f000 f876 	bl	8001b30 <I2C_IsErrorOccurred>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e069      	b.n	8001b22 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	f003 0320 	and.w	r3, r3, #32
 8001a58:	2b20      	cmp	r3, #32
 8001a5a:	d138      	bne.n	8001ace <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	d105      	bne.n	8001a76 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001a72:	2300      	movs	r3, #0
 8001a74:	e055      	b.n	8001b22 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	f003 0310 	and.w	r3, r3, #16
 8001a80:	2b10      	cmp	r3, #16
 8001a82:	d107      	bne.n	8001a94 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2210      	movs	r2, #16
 8001a8a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2204      	movs	r2, #4
 8001a90:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a92:	e002      	b.n	8001a9a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	6859      	ldr	r1, [r3, #4]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b1f      	ldr	r3, [pc, #124]	@ (8001b2c <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8001aae:	400b      	ands	r3, r1
 8001ab0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2220      	movs	r2, #32
 8001ab6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e029      	b.n	8001b22 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ace:	f7ff f92d 	bl	8000d2c <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	68ba      	ldr	r2, [r7, #8]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d302      	bcc.n	8001ae4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d116      	bne.n	8001b12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d00f      	beq.n	8001b12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af6:	f043 0220 	orr.w	r2, r3, #32
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2220      	movs	r2, #32
 8001b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e007      	b.n	8001b22 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d18c      	bne.n	8001a3a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	fe00e800 	.word	0xfe00e800

08001b30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	@ 0x28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	f003 0310 	and.w	r3, r3, #16
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d068      	beq.n	8001c2e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2210      	movs	r2, #16
 8001b62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b64:	e049      	b.n	8001bfa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b6c:	d045      	beq.n	8001bfa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b6e:	f7ff f8dd 	bl	8000d2c <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	68ba      	ldr	r2, [r7, #8]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d302      	bcc.n	8001b84 <I2C_IsErrorOccurred+0x54>
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d13a      	bne.n	8001bfa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001b96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ba2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ba6:	d121      	bne.n	8001bec <I2C_IsErrorOccurred+0xbc>
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001bae:	d01d      	beq.n	8001bec <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001bb0:	7cfb      	ldrb	r3, [r7, #19]
 8001bb2:	2b20      	cmp	r3, #32
 8001bb4:	d01a      	beq.n	8001bec <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001bc4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001bc6:	f7ff f8b1 	bl	8000d2c <HAL_GetTick>
 8001bca:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bcc:	e00e      	b.n	8001bec <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001bce:	f7ff f8ad 	bl	8000d2c <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b19      	cmp	r3, #25
 8001bda:	d907      	bls.n	8001bec <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001bdc:	6a3b      	ldr	r3, [r7, #32]
 8001bde:	f043 0320 	orr.w	r3, r3, #32
 8001be2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001bea:	e006      	b.n	8001bfa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	f003 0320 	and.w	r3, r3, #32
 8001bf6:	2b20      	cmp	r3, #32
 8001bf8:	d1e9      	bne.n	8001bce <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	f003 0320 	and.w	r3, r3, #32
 8001c04:	2b20      	cmp	r3, #32
 8001c06:	d003      	beq.n	8001c10 <I2C_IsErrorOccurred+0xe0>
 8001c08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0aa      	beq.n	8001b66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001c10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d103      	bne.n	8001c20 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001c20:	6a3b      	ldr	r3, [r7, #32]
 8001c22:	f043 0304 	orr.w	r3, r3, #4
 8001c26:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00b      	beq.n	8001c58 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001c40:	6a3b      	ldr	r3, [r7, #32]
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c50:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00b      	beq.n	8001c7a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001c62:	6a3b      	ldr	r3, [r7, #32]
 8001c64:	f043 0308 	orr.w	r3, r3, #8
 8001c68:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c72:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00b      	beq.n	8001c9c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001c84:	6a3b      	ldr	r3, [r7, #32]
 8001c86:	f043 0302 	orr.w	r3, r3, #2
 8001c8a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001c9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d01c      	beq.n	8001cde <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ca4:	68f8      	ldr	r0, [r7, #12]
 8001ca6:	f7ff fdc3 	bl	8001830 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6859      	ldr	r1, [r3, #4]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8001cec <I2C_IsErrorOccurred+0x1bc>)
 8001cb6:	400b      	ands	r3, r1
 8001cb8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2220      	movs	r2, #32
 8001cca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8001cde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3728      	adds	r7, #40	@ 0x28
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	fe00e800 	.word	0xfe00e800

08001cf0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b087      	sub	sp, #28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	607b      	str	r3, [r7, #4]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	817b      	strh	r3, [r7, #10]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d02:	897b      	ldrh	r3, [r7, #10]
 8001d04:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d08:	7a7b      	ldrb	r3, [r7, #9]
 8001d0a:	041b      	lsls	r3, r3, #16
 8001d0c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d10:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d16:	6a3b      	ldr	r3, [r7, #32]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d1e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	6a3b      	ldr	r3, [r7, #32]
 8001d28:	0d5b      	lsrs	r3, r3, #21
 8001d2a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001d2e:	4b08      	ldr	r3, [pc, #32]	@ (8001d50 <I2C_TransferConfig+0x60>)
 8001d30:	430b      	orrs	r3, r1
 8001d32:	43db      	mvns	r3, r3
 8001d34:	ea02 0103 	and.w	r1, r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001d42:	bf00      	nop
 8001d44:	371c      	adds	r7, #28
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	03ff63ff 	.word	0x03ff63ff

08001d54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b20      	cmp	r3, #32
 8001d68:	d138      	bne.n	8001ddc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d74:	2302      	movs	r3, #2
 8001d76:	e032      	b.n	8001dde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2224      	movs	r2, #36	@ 0x24
 8001d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0201 	bic.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001da6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6819      	ldr	r1, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	e000      	b.n	8001dde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ddc:	2302      	movs	r3, #2
  }
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b085      	sub	sp, #20
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b20      	cmp	r3, #32
 8001dfe:	d139      	bne.n	8001e74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d101      	bne.n	8001e0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	e033      	b.n	8001e76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2224      	movs	r2, #36	@ 0x24
 8001e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0201 	bic.w	r2, r2, #1
 8001e2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	021b      	lsls	r3, r3, #8
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f042 0201 	orr.w	r2, r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2220      	movs	r2, #32
 8001e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	e000      	b.n	8001e76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e74:	2302      	movs	r3, #2
  }
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
	...

08001e84 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e88:	4b04      	ldr	r3, [pc, #16]	@ (8001e9c <HAL_PWREx_GetVoltageRange+0x18>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40007000 	.word	0x40007000

08001ea0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001eae:	d130      	bne.n	8001f12 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eb0:	4b23      	ldr	r3, [pc, #140]	@ (8001f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001eb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ebc:	d038      	beq.n	8001f30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ebe:	4b20      	ldr	r3, [pc, #128]	@ (8001f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ec6:	4a1e      	ldr	r2, [pc, #120]	@ (8001f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ec8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ecc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ece:	4b1d      	ldr	r3, [pc, #116]	@ (8001f44 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2232      	movs	r2, #50	@ 0x32
 8001ed4:	fb02 f303 	mul.w	r3, r2, r3
 8001ed8:	4a1b      	ldr	r2, [pc, #108]	@ (8001f48 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001eda:	fba2 2303 	umull	r2, r3, r2, r3
 8001ede:	0c9b      	lsrs	r3, r3, #18
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ee4:	e002      	b.n	8001eec <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eec:	4b14      	ldr	r3, [pc, #80]	@ (8001f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ef8:	d102      	bne.n	8001f00 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f2      	bne.n	8001ee6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f00:	4b0f      	ldr	r3, [pc, #60]	@ (8001f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f0c:	d110      	bne.n	8001f30 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e00f      	b.n	8001f32 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f12:	4b0b      	ldr	r3, [pc, #44]	@ (8001f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f1e:	d007      	beq.n	8001f30 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f20:	4b07      	ldr	r3, [pc, #28]	@ (8001f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f28:	4a05      	ldr	r2, [pc, #20]	@ (8001f40 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f2e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	40007000 	.word	0x40007000
 8001f44:	20000004 	.word	0x20000004
 8001f48:	431bde83 	.word	0x431bde83

08001f4c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b088      	sub	sp, #32
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e3ca      	b.n	80026f4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f5e:	4b97      	ldr	r3, [pc, #604]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 030c 	and.w	r3, r3, #12
 8001f66:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f68:	4b94      	ldr	r3, [pc, #592]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 80e4 	beq.w	8002148 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d007      	beq.n	8001f96 <HAL_RCC_OscConfig+0x4a>
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	2b0c      	cmp	r3, #12
 8001f8a:	f040 808b 	bne.w	80020a4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	f040 8087 	bne.w	80020a4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f96:	4b89      	ldr	r3, [pc, #548]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d005      	beq.n	8001fae <HAL_RCC_OscConfig+0x62>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e3a2      	b.n	80026f4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a1a      	ldr	r2, [r3, #32]
 8001fb2:	4b82      	ldr	r3, [pc, #520]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0308 	and.w	r3, r3, #8
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d004      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x7c>
 8001fbe:	4b7f      	ldr	r3, [pc, #508]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fc6:	e005      	b.n	8001fd4 <HAL_RCC_OscConfig+0x88>
 8001fc8:	4b7c      	ldr	r3, [pc, #496]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 8001fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fce:	091b      	lsrs	r3, r3, #4
 8001fd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d223      	bcs.n	8002020 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f000 fd55 	bl	8002a8c <RCC_SetFlashLatencyFromMSIRange>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e383      	b.n	80026f4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fec:	4b73      	ldr	r3, [pc, #460]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a72      	ldr	r2, [pc, #456]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 8001ff2:	f043 0308 	orr.w	r3, r3, #8
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	4b70      	ldr	r3, [pc, #448]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	496d      	ldr	r1, [pc, #436]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800200a:	4b6c      	ldr	r3, [pc, #432]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	021b      	lsls	r3, r3, #8
 8002018:	4968      	ldr	r1, [pc, #416]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 800201a:	4313      	orrs	r3, r2
 800201c:	604b      	str	r3, [r1, #4]
 800201e:	e025      	b.n	800206c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002020:	4b66      	ldr	r3, [pc, #408]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a65      	ldr	r2, [pc, #404]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 8002026:	f043 0308 	orr.w	r3, r3, #8
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	4b63      	ldr	r3, [pc, #396]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	4960      	ldr	r1, [pc, #384]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 800203a:	4313      	orrs	r3, r2
 800203c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800203e:	4b5f      	ldr	r3, [pc, #380]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	021b      	lsls	r3, r3, #8
 800204c:	495b      	ldr	r1, [pc, #364]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 800204e:	4313      	orrs	r3, r2
 8002050:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d109      	bne.n	800206c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	4618      	mov	r0, r3
 800205e:	f000 fd15 	bl	8002a8c <RCC_SetFlashLatencyFromMSIRange>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e343      	b.n	80026f4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800206c:	f000 fc4a 	bl	8002904 <HAL_RCC_GetSysClockFreq>
 8002070:	4602      	mov	r2, r0
 8002072:	4b52      	ldr	r3, [pc, #328]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	091b      	lsrs	r3, r3, #4
 8002078:	f003 030f 	and.w	r3, r3, #15
 800207c:	4950      	ldr	r1, [pc, #320]	@ (80021c0 <HAL_RCC_OscConfig+0x274>)
 800207e:	5ccb      	ldrb	r3, [r1, r3]
 8002080:	f003 031f 	and.w	r3, r3, #31
 8002084:	fa22 f303 	lsr.w	r3, r2, r3
 8002088:	4a4e      	ldr	r2, [pc, #312]	@ (80021c4 <HAL_RCC_OscConfig+0x278>)
 800208a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800208c:	4b4e      	ldr	r3, [pc, #312]	@ (80021c8 <HAL_RCC_OscConfig+0x27c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe fdfb 	bl	8000c8c <HAL_InitTick>
 8002096:	4603      	mov	r3, r0
 8002098:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800209a:	7bfb      	ldrb	r3, [r7, #15]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d052      	beq.n	8002146 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80020a0:	7bfb      	ldrb	r3, [r7, #15]
 80020a2:	e327      	b.n	80026f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d032      	beq.n	8002112 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020ac:	4b43      	ldr	r3, [pc, #268]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a42      	ldr	r2, [pc, #264]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020b8:	f7fe fe38 	bl	8000d2c <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020c0:	f7fe fe34 	bl	8000d2c <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e310      	b.n	80026f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020d2:	4b3a      	ldr	r3, [pc, #232]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020de:	4b37      	ldr	r3, [pc, #220]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a36      	ldr	r2, [pc, #216]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 80020e4:	f043 0308 	orr.w	r3, r3, #8
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	4b34      	ldr	r3, [pc, #208]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	4931      	ldr	r1, [pc, #196]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020fc:	4b2f      	ldr	r3, [pc, #188]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	021b      	lsls	r3, r3, #8
 800210a:	492c      	ldr	r1, [pc, #176]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 800210c:	4313      	orrs	r3, r2
 800210e:	604b      	str	r3, [r1, #4]
 8002110:	e01a      	b.n	8002148 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002112:	4b2a      	ldr	r3, [pc, #168]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a29      	ldr	r2, [pc, #164]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 8002118:	f023 0301 	bic.w	r3, r3, #1
 800211c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800211e:	f7fe fe05 	bl	8000d2c <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002126:	f7fe fe01 	bl	8000d2c <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e2dd      	b.n	80026f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002138:	4b20      	ldr	r3, [pc, #128]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1f0      	bne.n	8002126 <HAL_RCC_OscConfig+0x1da>
 8002144:	e000      	b.n	8002148 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002146:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b00      	cmp	r3, #0
 8002152:	d074      	beq.n	800223e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	2b08      	cmp	r3, #8
 8002158:	d005      	beq.n	8002166 <HAL_RCC_OscConfig+0x21a>
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	2b0c      	cmp	r3, #12
 800215e:	d10e      	bne.n	800217e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	2b03      	cmp	r3, #3
 8002164:	d10b      	bne.n	800217e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002166:	4b15      	ldr	r3, [pc, #84]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d064      	beq.n	800223c <HAL_RCC_OscConfig+0x2f0>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d160      	bne.n	800223c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e2ba      	b.n	80026f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002186:	d106      	bne.n	8002196 <HAL_RCC_OscConfig+0x24a>
 8002188:	4b0c      	ldr	r3, [pc, #48]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0b      	ldr	r2, [pc, #44]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 800218e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002192:	6013      	str	r3, [r2, #0]
 8002194:	e026      	b.n	80021e4 <HAL_RCC_OscConfig+0x298>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800219e:	d115      	bne.n	80021cc <HAL_RCC_OscConfig+0x280>
 80021a0:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a05      	ldr	r2, [pc, #20]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 80021a6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	4b03      	ldr	r3, [pc, #12]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a02      	ldr	r2, [pc, #8]	@ (80021bc <HAL_RCC_OscConfig+0x270>)
 80021b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	e014      	b.n	80021e4 <HAL_RCC_OscConfig+0x298>
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000
 80021c0:	080099a4 	.word	0x080099a4
 80021c4:	20000004 	.word	0x20000004
 80021c8:	20000008 	.word	0x20000008
 80021cc:	4ba0      	ldr	r3, [pc, #640]	@ (8002450 <HAL_RCC_OscConfig+0x504>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a9f      	ldr	r2, [pc, #636]	@ (8002450 <HAL_RCC_OscConfig+0x504>)
 80021d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021d6:	6013      	str	r3, [r2, #0]
 80021d8:	4b9d      	ldr	r3, [pc, #628]	@ (8002450 <HAL_RCC_OscConfig+0x504>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a9c      	ldr	r2, [pc, #624]	@ (8002450 <HAL_RCC_OscConfig+0x504>)
 80021de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d013      	beq.n	8002214 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ec:	f7fe fd9e 	bl	8000d2c <HAL_GetTick>
 80021f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f4:	f7fe fd9a 	bl	8000d2c <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b64      	cmp	r3, #100	@ 0x64
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e276      	b.n	80026f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002206:	4b92      	ldr	r3, [pc, #584]	@ (8002450 <HAL_RCC_OscConfig+0x504>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCC_OscConfig+0x2a8>
 8002212:	e014      	b.n	800223e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002214:	f7fe fd8a 	bl	8000d2c <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800221c:	f7fe fd86 	bl	8000d2c <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b64      	cmp	r3, #100	@ 0x64
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e262      	b.n	80026f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800222e:	4b88      	ldr	r3, [pc, #544]	@ (8002450 <HAL_RCC_OscConfig+0x504>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1f0      	bne.n	800221c <HAL_RCC_OscConfig+0x2d0>
 800223a:	e000      	b.n	800223e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800223c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d060      	beq.n	800230c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	2b04      	cmp	r3, #4
 800224e:	d005      	beq.n	800225c <HAL_RCC_OscConfig+0x310>
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	2b0c      	cmp	r3, #12
 8002254:	d119      	bne.n	800228a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2b02      	cmp	r3, #2
 800225a:	d116      	bne.n	800228a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800225c:	4b7c      	ldr	r3, [pc, #496]	@ (8002450 <HAL_RCC_OscConfig+0x504>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002264:	2b00      	cmp	r3, #0
 8002266:	d005      	beq.n	8002274 <HAL_RCC_OscConfig+0x328>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e23f      	b.n	80026f4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002274:	4b76      	ldr	r3, [pc, #472]	@ (8002450 <HAL_RCC_OscConfig+0x504>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	061b      	lsls	r3, r3, #24
 8002282:	4973      	ldr	r1, [pc, #460]	@ (8002450 <HAL_RCC_OscConfig+0x504>)
 8002284:	4313      	orrs	r3, r2
 8002286:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002288:	e040      	b.n	800230c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d023      	beq.n	80022da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002292:	4b6f      	ldr	r3, [pc, #444]	@ (8002450 <HAL_RCC_OscConfig+0x504>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a6e      	ldr	r2, [pc, #440]	@ (8002450 <HAL_RCC_OscConfig+0x504>)
 8002298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800229c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229e:	f7fe fd45 	bl	8000d2c <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a6:	f7fe fd41 	bl	8000d2c <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e21d      	b.n	80026f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022b8:	4b65      	ldr	r3, [pc, #404]	@ (8002450 <HAL_RCC_OscConfig+0x504>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0f0      	beq.n	80022a6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c4:	4b62      	ldr	r3, [pc, #392]	@ (8002450 <HAL_RCC_OscConfig+0x504>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	061b      	lsls	r3, r3, #24
 80022d2:	495f      	ldr	r1, [pc, #380]	@ (8002450 <HAL_RCC_OscConfig+0x504>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	604b      	str	r3, [r1, #4]
 80022d8:	e018      	b.n	800230c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022da:	4b5d      	ldr	r3, [pc, #372]	@ (8002450 <HAL_RCC_OscConfig+0x504>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a5c      	ldr	r2, [pc, #368]	@ (8002450 <HAL_RCC_OscConfig+0x504>)
 80022e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e6:	f7fe fd21 	bl	8000d2c <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ee:	f7fe fd1d 	bl	8000d2c <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e1f9      	b.n	80026f4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002300:	4b53      	ldr	r3, [pc, #332]	@ (8002450 <HAL_RCC_OscConfig+0x504>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1f0      	bne.n	80022ee <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	2b00      	cmp	r3, #0
 8002316:	d03c      	beq.n	8002392 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	695b      	ldr	r3, [r3, #20]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d01c      	beq.n	800235a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002320:	4b4b      	ldr	r3, [pc, #300]	@ (8002450 <HAL_RCC_OscConfig+0x504>)
 8002322:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002326:	4a4a      	ldr	r2, [pc, #296]	@ (8002450 <HAL_RCC_OscConfig+0x504>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002330:	f7fe fcfc 	bl	8000d2c <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002338:	f7fe fcf8 	bl	8000d2c <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e1d4      	b.n	80026f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800234a:	4b41      	ldr	r3, [pc, #260]	@ (8002450 <HAL_RCC_OscConfig+0x504>)
 800234c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0ef      	beq.n	8002338 <HAL_RCC_OscConfig+0x3ec>
 8002358:	e01b      	b.n	8002392 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800235a:	4b3d      	ldr	r3, [pc, #244]	@ (8002450 <HAL_RCC_OscConfig+0x504>)
 800235c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002360:	4a3b      	ldr	r2, [pc, #236]	@ (8002450 <HAL_RCC_OscConfig+0x504>)
 8002362:	f023 0301 	bic.w	r3, r3, #1
 8002366:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800236a:	f7fe fcdf 	bl	8000d2c <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002372:	f7fe fcdb 	bl	8000d2c <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e1b7      	b.n	80026f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002384:	4b32      	ldr	r3, [pc, #200]	@ (8002450 <HAL_RCC_OscConfig+0x504>)
 8002386:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1ef      	bne.n	8002372 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 80a6 	beq.w	80024ec <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023a0:	2300      	movs	r3, #0
 80023a2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80023a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002450 <HAL_RCC_OscConfig+0x504>)
 80023a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10d      	bne.n	80023cc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b0:	4b27      	ldr	r3, [pc, #156]	@ (8002450 <HAL_RCC_OscConfig+0x504>)
 80023b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023b4:	4a26      	ldr	r2, [pc, #152]	@ (8002450 <HAL_RCC_OscConfig+0x504>)
 80023b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80023bc:	4b24      	ldr	r3, [pc, #144]	@ (8002450 <HAL_RCC_OscConfig+0x504>)
 80023be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023c8:	2301      	movs	r3, #1
 80023ca:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023cc:	4b21      	ldr	r3, [pc, #132]	@ (8002454 <HAL_RCC_OscConfig+0x508>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d118      	bne.n	800240a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002454 <HAL_RCC_OscConfig+0x508>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002454 <HAL_RCC_OscConfig+0x508>)
 80023de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023e4:	f7fe fca2 	bl	8000d2c <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ec:	f7fe fc9e 	bl	8000d2c <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e17a      	b.n	80026f4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023fe:	4b15      	ldr	r3, [pc, #84]	@ (8002454 <HAL_RCC_OscConfig+0x508>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002406:	2b00      	cmp	r3, #0
 8002408:	d0f0      	beq.n	80023ec <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d108      	bne.n	8002424 <HAL_RCC_OscConfig+0x4d8>
 8002412:	4b0f      	ldr	r3, [pc, #60]	@ (8002450 <HAL_RCC_OscConfig+0x504>)
 8002414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002418:	4a0d      	ldr	r2, [pc, #52]	@ (8002450 <HAL_RCC_OscConfig+0x504>)
 800241a:	f043 0301 	orr.w	r3, r3, #1
 800241e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002422:	e029      	b.n	8002478 <HAL_RCC_OscConfig+0x52c>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	2b05      	cmp	r3, #5
 800242a:	d115      	bne.n	8002458 <HAL_RCC_OscConfig+0x50c>
 800242c:	4b08      	ldr	r3, [pc, #32]	@ (8002450 <HAL_RCC_OscConfig+0x504>)
 800242e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002432:	4a07      	ldr	r2, [pc, #28]	@ (8002450 <HAL_RCC_OscConfig+0x504>)
 8002434:	f043 0304 	orr.w	r3, r3, #4
 8002438:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800243c:	4b04      	ldr	r3, [pc, #16]	@ (8002450 <HAL_RCC_OscConfig+0x504>)
 800243e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002442:	4a03      	ldr	r2, [pc, #12]	@ (8002450 <HAL_RCC_OscConfig+0x504>)
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800244c:	e014      	b.n	8002478 <HAL_RCC_OscConfig+0x52c>
 800244e:	bf00      	nop
 8002450:	40021000 	.word	0x40021000
 8002454:	40007000 	.word	0x40007000
 8002458:	4b9c      	ldr	r3, [pc, #624]	@ (80026cc <HAL_RCC_OscConfig+0x780>)
 800245a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800245e:	4a9b      	ldr	r2, [pc, #620]	@ (80026cc <HAL_RCC_OscConfig+0x780>)
 8002460:	f023 0301 	bic.w	r3, r3, #1
 8002464:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002468:	4b98      	ldr	r3, [pc, #608]	@ (80026cc <HAL_RCC_OscConfig+0x780>)
 800246a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800246e:	4a97      	ldr	r2, [pc, #604]	@ (80026cc <HAL_RCC_OscConfig+0x780>)
 8002470:	f023 0304 	bic.w	r3, r3, #4
 8002474:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d016      	beq.n	80024ae <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002480:	f7fe fc54 	bl	8000d2c <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002486:	e00a      	b.n	800249e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002488:	f7fe fc50 	bl	8000d2c <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002496:	4293      	cmp	r3, r2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e12a      	b.n	80026f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800249e:	4b8b      	ldr	r3, [pc, #556]	@ (80026cc <HAL_RCC_OscConfig+0x780>)
 80024a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0ed      	beq.n	8002488 <HAL_RCC_OscConfig+0x53c>
 80024ac:	e015      	b.n	80024da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ae:	f7fe fc3d 	bl	8000d2c <HAL_GetTick>
 80024b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024b4:	e00a      	b.n	80024cc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024b6:	f7fe fc39 	bl	8000d2c <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e113      	b.n	80026f4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024cc:	4b7f      	ldr	r3, [pc, #508]	@ (80026cc <HAL_RCC_OscConfig+0x780>)
 80024ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1ed      	bne.n	80024b6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024da:	7ffb      	ldrb	r3, [r7, #31]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d105      	bne.n	80024ec <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e0:	4b7a      	ldr	r3, [pc, #488]	@ (80026cc <HAL_RCC_OscConfig+0x780>)
 80024e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e4:	4a79      	ldr	r2, [pc, #484]	@ (80026cc <HAL_RCC_OscConfig+0x780>)
 80024e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024ea:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 80fe 	beq.w	80026f2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	f040 80d0 	bne.w	80026a0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002500:	4b72      	ldr	r3, [pc, #456]	@ (80026cc <HAL_RCC_OscConfig+0x780>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	f003 0203 	and.w	r2, r3, #3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002510:	429a      	cmp	r2, r3
 8002512:	d130      	bne.n	8002576 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251e:	3b01      	subs	r3, #1
 8002520:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002522:	429a      	cmp	r2, r3
 8002524:	d127      	bne.n	8002576 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002530:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002532:	429a      	cmp	r2, r3
 8002534:	d11f      	bne.n	8002576 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002540:	2a07      	cmp	r2, #7
 8002542:	bf14      	ite	ne
 8002544:	2201      	movne	r2, #1
 8002546:	2200      	moveq	r2, #0
 8002548:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800254a:	4293      	cmp	r3, r2
 800254c:	d113      	bne.n	8002576 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002558:	085b      	lsrs	r3, r3, #1
 800255a:	3b01      	subs	r3, #1
 800255c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800255e:	429a      	cmp	r2, r3
 8002560:	d109      	bne.n	8002576 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256c:	085b      	lsrs	r3, r3, #1
 800256e:	3b01      	subs	r3, #1
 8002570:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002572:	429a      	cmp	r2, r3
 8002574:	d06e      	beq.n	8002654 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	2b0c      	cmp	r3, #12
 800257a:	d069      	beq.n	8002650 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800257c:	4b53      	ldr	r3, [pc, #332]	@ (80026cc <HAL_RCC_OscConfig+0x780>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d105      	bne.n	8002594 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002588:	4b50      	ldr	r3, [pc, #320]	@ (80026cc <HAL_RCC_OscConfig+0x780>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e0ad      	b.n	80026f4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002598:	4b4c      	ldr	r3, [pc, #304]	@ (80026cc <HAL_RCC_OscConfig+0x780>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a4b      	ldr	r2, [pc, #300]	@ (80026cc <HAL_RCC_OscConfig+0x780>)
 800259e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025a2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025a4:	f7fe fbc2 	bl	8000d2c <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ac:	f7fe fbbe 	bl	8000d2c <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e09a      	b.n	80026f4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025be:	4b43      	ldr	r3, [pc, #268]	@ (80026cc <HAL_RCC_OscConfig+0x780>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f0      	bne.n	80025ac <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025ca:	4b40      	ldr	r3, [pc, #256]	@ (80026cc <HAL_RCC_OscConfig+0x780>)
 80025cc:	68da      	ldr	r2, [r3, #12]
 80025ce:	4b40      	ldr	r3, [pc, #256]	@ (80026d0 <HAL_RCC_OscConfig+0x784>)
 80025d0:	4013      	ands	r3, r2
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80025da:	3a01      	subs	r2, #1
 80025dc:	0112      	lsls	r2, r2, #4
 80025de:	4311      	orrs	r1, r2
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80025e4:	0212      	lsls	r2, r2, #8
 80025e6:	4311      	orrs	r1, r2
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80025ec:	0852      	lsrs	r2, r2, #1
 80025ee:	3a01      	subs	r2, #1
 80025f0:	0552      	lsls	r2, r2, #21
 80025f2:	4311      	orrs	r1, r2
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80025f8:	0852      	lsrs	r2, r2, #1
 80025fa:	3a01      	subs	r2, #1
 80025fc:	0652      	lsls	r2, r2, #25
 80025fe:	4311      	orrs	r1, r2
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002604:	0912      	lsrs	r2, r2, #4
 8002606:	0452      	lsls	r2, r2, #17
 8002608:	430a      	orrs	r2, r1
 800260a:	4930      	ldr	r1, [pc, #192]	@ (80026cc <HAL_RCC_OscConfig+0x780>)
 800260c:	4313      	orrs	r3, r2
 800260e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002610:	4b2e      	ldr	r3, [pc, #184]	@ (80026cc <HAL_RCC_OscConfig+0x780>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a2d      	ldr	r2, [pc, #180]	@ (80026cc <HAL_RCC_OscConfig+0x780>)
 8002616:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800261a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800261c:	4b2b      	ldr	r3, [pc, #172]	@ (80026cc <HAL_RCC_OscConfig+0x780>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	4a2a      	ldr	r2, [pc, #168]	@ (80026cc <HAL_RCC_OscConfig+0x780>)
 8002622:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002626:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002628:	f7fe fb80 	bl	8000d2c <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002630:	f7fe fb7c 	bl	8000d2c <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e058      	b.n	80026f4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002642:	4b22      	ldr	r3, [pc, #136]	@ (80026cc <HAL_RCC_OscConfig+0x780>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800264e:	e050      	b.n	80026f2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e04f      	b.n	80026f4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002654:	4b1d      	ldr	r3, [pc, #116]	@ (80026cc <HAL_RCC_OscConfig+0x780>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d148      	bne.n	80026f2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002660:	4b1a      	ldr	r3, [pc, #104]	@ (80026cc <HAL_RCC_OscConfig+0x780>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a19      	ldr	r2, [pc, #100]	@ (80026cc <HAL_RCC_OscConfig+0x780>)
 8002666:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800266a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800266c:	4b17      	ldr	r3, [pc, #92]	@ (80026cc <HAL_RCC_OscConfig+0x780>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4a16      	ldr	r2, [pc, #88]	@ (80026cc <HAL_RCC_OscConfig+0x780>)
 8002672:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002676:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002678:	f7fe fb58 	bl	8000d2c <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002680:	f7fe fb54 	bl	8000d2c <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e030      	b.n	80026f4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002692:	4b0e      	ldr	r3, [pc, #56]	@ (80026cc <HAL_RCC_OscConfig+0x780>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f0      	beq.n	8002680 <HAL_RCC_OscConfig+0x734>
 800269e:	e028      	b.n	80026f2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	2b0c      	cmp	r3, #12
 80026a4:	d023      	beq.n	80026ee <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a6:	4b09      	ldr	r3, [pc, #36]	@ (80026cc <HAL_RCC_OscConfig+0x780>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a08      	ldr	r2, [pc, #32]	@ (80026cc <HAL_RCC_OscConfig+0x780>)
 80026ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b2:	f7fe fb3b 	bl	8000d2c <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026b8:	e00c      	b.n	80026d4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ba:	f7fe fb37 	bl	8000d2c <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d905      	bls.n	80026d4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e013      	b.n	80026f4 <HAL_RCC_OscConfig+0x7a8>
 80026cc:	40021000 	.word	0x40021000
 80026d0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026d4:	4b09      	ldr	r3, [pc, #36]	@ (80026fc <HAL_RCC_OscConfig+0x7b0>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1ec      	bne.n	80026ba <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80026e0:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <HAL_RCC_OscConfig+0x7b0>)
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	4905      	ldr	r1, [pc, #20]	@ (80026fc <HAL_RCC_OscConfig+0x7b0>)
 80026e6:	4b06      	ldr	r3, [pc, #24]	@ (8002700 <HAL_RCC_OscConfig+0x7b4>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	60cb      	str	r3, [r1, #12]
 80026ec:	e001      	b.n	80026f2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3720      	adds	r7, #32
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40021000 	.word	0x40021000
 8002700:	feeefffc 	.word	0xfeeefffc

08002704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0e7      	b.n	80028e8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002718:	4b75      	ldr	r3, [pc, #468]	@ (80028f0 <HAL_RCC_ClockConfig+0x1ec>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0307 	and.w	r3, r3, #7
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	429a      	cmp	r2, r3
 8002724:	d910      	bls.n	8002748 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002726:	4b72      	ldr	r3, [pc, #456]	@ (80028f0 <HAL_RCC_ClockConfig+0x1ec>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f023 0207 	bic.w	r2, r3, #7
 800272e:	4970      	ldr	r1, [pc, #448]	@ (80028f0 <HAL_RCC_ClockConfig+0x1ec>)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	4313      	orrs	r3, r2
 8002734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002736:	4b6e      	ldr	r3, [pc, #440]	@ (80028f0 <HAL_RCC_ClockConfig+0x1ec>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	429a      	cmp	r2, r3
 8002742:	d001      	beq.n	8002748 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0cf      	b.n	80028e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d010      	beq.n	8002776 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	4b66      	ldr	r3, [pc, #408]	@ (80028f4 <HAL_RCC_ClockConfig+0x1f0>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002760:	429a      	cmp	r2, r3
 8002762:	d908      	bls.n	8002776 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002764:	4b63      	ldr	r3, [pc, #396]	@ (80028f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	4960      	ldr	r1, [pc, #384]	@ (80028f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002772:	4313      	orrs	r3, r2
 8002774:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d04c      	beq.n	800281c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b03      	cmp	r3, #3
 8002788:	d107      	bne.n	800279a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800278a:	4b5a      	ldr	r3, [pc, #360]	@ (80028f4 <HAL_RCC_ClockConfig+0x1f0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d121      	bne.n	80027da <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e0a6      	b.n	80028e8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d107      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027a2:	4b54      	ldr	r3, [pc, #336]	@ (80028f4 <HAL_RCC_ClockConfig+0x1f0>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d115      	bne.n	80027da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e09a      	b.n	80028e8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d107      	bne.n	80027ca <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027ba:	4b4e      	ldr	r3, [pc, #312]	@ (80028f4 <HAL_RCC_ClockConfig+0x1f0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d109      	bne.n	80027da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e08e      	b.n	80028e8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027ca:	4b4a      	ldr	r3, [pc, #296]	@ (80028f4 <HAL_RCC_ClockConfig+0x1f0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e086      	b.n	80028e8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027da:	4b46      	ldr	r3, [pc, #280]	@ (80028f4 <HAL_RCC_ClockConfig+0x1f0>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f023 0203 	bic.w	r2, r3, #3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	4943      	ldr	r1, [pc, #268]	@ (80028f4 <HAL_RCC_ClockConfig+0x1f0>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027ec:	f7fe fa9e 	bl	8000d2c <HAL_GetTick>
 80027f0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f2:	e00a      	b.n	800280a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f4:	f7fe fa9a 	bl	8000d2c <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002802:	4293      	cmp	r3, r2
 8002804:	d901      	bls.n	800280a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e06e      	b.n	80028e8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280a:	4b3a      	ldr	r3, [pc, #232]	@ (80028f4 <HAL_RCC_ClockConfig+0x1f0>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 020c 	and.w	r2, r3, #12
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	429a      	cmp	r2, r3
 800281a:	d1eb      	bne.n	80027f4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d010      	beq.n	800284a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	4b31      	ldr	r3, [pc, #196]	@ (80028f4 <HAL_RCC_ClockConfig+0x1f0>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002834:	429a      	cmp	r2, r3
 8002836:	d208      	bcs.n	800284a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002838:	4b2e      	ldr	r3, [pc, #184]	@ (80028f4 <HAL_RCC_ClockConfig+0x1f0>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	492b      	ldr	r1, [pc, #172]	@ (80028f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002846:	4313      	orrs	r3, r2
 8002848:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800284a:	4b29      	ldr	r3, [pc, #164]	@ (80028f0 <HAL_RCC_ClockConfig+0x1ec>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	429a      	cmp	r2, r3
 8002856:	d210      	bcs.n	800287a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002858:	4b25      	ldr	r3, [pc, #148]	@ (80028f0 <HAL_RCC_ClockConfig+0x1ec>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f023 0207 	bic.w	r2, r3, #7
 8002860:	4923      	ldr	r1, [pc, #140]	@ (80028f0 <HAL_RCC_ClockConfig+0x1ec>)
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	4313      	orrs	r3, r2
 8002866:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002868:	4b21      	ldr	r3, [pc, #132]	@ (80028f0 <HAL_RCC_ClockConfig+0x1ec>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d001      	beq.n	800287a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e036      	b.n	80028e8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0304 	and.w	r3, r3, #4
 8002882:	2b00      	cmp	r3, #0
 8002884:	d008      	beq.n	8002898 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002886:	4b1b      	ldr	r3, [pc, #108]	@ (80028f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	4918      	ldr	r1, [pc, #96]	@ (80028f4 <HAL_RCC_ClockConfig+0x1f0>)
 8002894:	4313      	orrs	r3, r2
 8002896:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0308 	and.w	r3, r3, #8
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d009      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028a4:	4b13      	ldr	r3, [pc, #76]	@ (80028f4 <HAL_RCC_ClockConfig+0x1f0>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	4910      	ldr	r1, [pc, #64]	@ (80028f4 <HAL_RCC_ClockConfig+0x1f0>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028b8:	f000 f824 	bl	8002904 <HAL_RCC_GetSysClockFreq>
 80028bc:	4602      	mov	r2, r0
 80028be:	4b0d      	ldr	r3, [pc, #52]	@ (80028f4 <HAL_RCC_ClockConfig+0x1f0>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	091b      	lsrs	r3, r3, #4
 80028c4:	f003 030f 	and.w	r3, r3, #15
 80028c8:	490b      	ldr	r1, [pc, #44]	@ (80028f8 <HAL_RCC_ClockConfig+0x1f4>)
 80028ca:	5ccb      	ldrb	r3, [r1, r3]
 80028cc:	f003 031f 	and.w	r3, r3, #31
 80028d0:	fa22 f303 	lsr.w	r3, r2, r3
 80028d4:	4a09      	ldr	r2, [pc, #36]	@ (80028fc <HAL_RCC_ClockConfig+0x1f8>)
 80028d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028d8:	4b09      	ldr	r3, [pc, #36]	@ (8002900 <HAL_RCC_ClockConfig+0x1fc>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fe f9d5 	bl	8000c8c <HAL_InitTick>
 80028e2:	4603      	mov	r3, r0
 80028e4:	72fb      	strb	r3, [r7, #11]

  return status;
 80028e6:	7afb      	ldrb	r3, [r7, #11]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3710      	adds	r7, #16
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40022000 	.word	0x40022000
 80028f4:	40021000 	.word	0x40021000
 80028f8:	080099a4 	.word	0x080099a4
 80028fc:	20000004 	.word	0x20000004
 8002900:	20000008 	.word	0x20000008

08002904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002904:	b480      	push	{r7}
 8002906:	b089      	sub	sp, #36	@ 0x24
 8002908:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
 800290e:	2300      	movs	r3, #0
 8002910:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002912:	4b3e      	ldr	r3, [pc, #248]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 030c 	and.w	r3, r3, #12
 800291a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800291c:	4b3b      	ldr	r3, [pc, #236]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x108>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <HAL_RCC_GetSysClockFreq+0x34>
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	2b0c      	cmp	r3, #12
 8002930:	d121      	bne.n	8002976 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d11e      	bne.n	8002976 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002938:	4b34      	ldr	r3, [pc, #208]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x108>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0308 	and.w	r3, r3, #8
 8002940:	2b00      	cmp	r3, #0
 8002942:	d107      	bne.n	8002954 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002944:	4b31      	ldr	r3, [pc, #196]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002946:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800294a:	0a1b      	lsrs	r3, r3, #8
 800294c:	f003 030f 	and.w	r3, r3, #15
 8002950:	61fb      	str	r3, [r7, #28]
 8002952:	e005      	b.n	8002960 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002954:	4b2d      	ldr	r3, [pc, #180]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	091b      	lsrs	r3, r3, #4
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002960:	4a2b      	ldr	r2, [pc, #172]	@ (8002a10 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002968:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10d      	bne.n	800298c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002974:	e00a      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	2b04      	cmp	r3, #4
 800297a:	d102      	bne.n	8002982 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800297c:	4b25      	ldr	r3, [pc, #148]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0x110>)
 800297e:	61bb      	str	r3, [r7, #24]
 8002980:	e004      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	2b08      	cmp	r3, #8
 8002986:	d101      	bne.n	800298c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002988:	4b23      	ldr	r3, [pc, #140]	@ (8002a18 <HAL_RCC_GetSysClockFreq+0x114>)
 800298a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	2b0c      	cmp	r3, #12
 8002990:	d134      	bne.n	80029fc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002992:	4b1e      	ldr	r3, [pc, #120]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x108>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d003      	beq.n	80029aa <HAL_RCC_GetSysClockFreq+0xa6>
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	2b03      	cmp	r3, #3
 80029a6:	d003      	beq.n	80029b0 <HAL_RCC_GetSysClockFreq+0xac>
 80029a8:	e005      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80029aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0x110>)
 80029ac:	617b      	str	r3, [r7, #20]
      break;
 80029ae:	e005      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80029b0:	4b19      	ldr	r3, [pc, #100]	@ (8002a18 <HAL_RCC_GetSysClockFreq+0x114>)
 80029b2:	617b      	str	r3, [r7, #20]
      break;
 80029b4:	e002      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	617b      	str	r3, [r7, #20]
      break;
 80029ba:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029bc:	4b13      	ldr	r3, [pc, #76]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x108>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	091b      	lsrs	r3, r3, #4
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	3301      	adds	r3, #1
 80029c8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029ca:	4b10      	ldr	r3, [pc, #64]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x108>)
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	0a1b      	lsrs	r3, r3, #8
 80029d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	fb03 f202 	mul.w	r2, r3, r2
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029e2:	4b0a      	ldr	r3, [pc, #40]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x108>)
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	0e5b      	lsrs	r3, r3, #25
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	3301      	adds	r3, #1
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029fc:	69bb      	ldr	r3, [r7, #24]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3724      	adds	r7, #36	@ 0x24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	080099bc 	.word	0x080099bc
 8002a14:	00f42400 	.word	0x00f42400
 8002a18:	007a1200 	.word	0x007a1200

08002a1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a20:	4b03      	ldr	r3, [pc, #12]	@ (8002a30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a22:	681b      	ldr	r3, [r3, #0]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	20000004 	.word	0x20000004

08002a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a38:	f7ff fff0 	bl	8002a1c <HAL_RCC_GetHCLKFreq>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	4b06      	ldr	r3, [pc, #24]	@ (8002a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	0a1b      	lsrs	r3, r3, #8
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	4904      	ldr	r1, [pc, #16]	@ (8002a5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a4a:	5ccb      	ldrb	r3, [r1, r3]
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	080099b4 	.word	0x080099b4

08002a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a64:	f7ff ffda 	bl	8002a1c <HAL_RCC_GetHCLKFreq>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	4b06      	ldr	r3, [pc, #24]	@ (8002a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	0adb      	lsrs	r3, r3, #11
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	4904      	ldr	r1, [pc, #16]	@ (8002a88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a76:	5ccb      	ldrb	r3, [r1, r3]
 8002a78:	f003 031f 	and.w	r3, r3, #31
 8002a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40021000 	.word	0x40021000
 8002a88:	080099b4 	.word	0x080099b4

08002a8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a94:	2300      	movs	r3, #0
 8002a96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a98:	4b2a      	ldr	r3, [pc, #168]	@ (8002b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002aa4:	f7ff f9ee 	bl	8001e84 <HAL_PWREx_GetVoltageRange>
 8002aa8:	6178      	str	r0, [r7, #20]
 8002aaa:	e014      	b.n	8002ad6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002aac:	4b25      	ldr	r3, [pc, #148]	@ (8002b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab0:	4a24      	ldr	r2, [pc, #144]	@ (8002b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ab2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ab6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ab8:	4b22      	ldr	r3, [pc, #136]	@ (8002b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002abc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ac4:	f7ff f9de 	bl	8001e84 <HAL_PWREx_GetVoltageRange>
 8002ac8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002aca:	4b1e      	ldr	r3, [pc, #120]	@ (8002b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ace:	4a1d      	ldr	r2, [pc, #116]	@ (8002b44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ad0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ad4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002adc:	d10b      	bne.n	8002af6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b80      	cmp	r3, #128	@ 0x80
 8002ae2:	d919      	bls.n	8002b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2ba0      	cmp	r3, #160	@ 0xa0
 8002ae8:	d902      	bls.n	8002af0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002aea:	2302      	movs	r3, #2
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	e013      	b.n	8002b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002af0:	2301      	movs	r3, #1
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	e010      	b.n	8002b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b80      	cmp	r3, #128	@ 0x80
 8002afa:	d902      	bls.n	8002b02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002afc:	2303      	movs	r3, #3
 8002afe:	613b      	str	r3, [r7, #16]
 8002b00:	e00a      	b.n	8002b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b80      	cmp	r3, #128	@ 0x80
 8002b06:	d102      	bne.n	8002b0e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b08:	2302      	movs	r3, #2
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	e004      	b.n	8002b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b70      	cmp	r3, #112	@ 0x70
 8002b12:	d101      	bne.n	8002b18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b14:	2301      	movs	r3, #1
 8002b16:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b18:	4b0b      	ldr	r3, [pc, #44]	@ (8002b48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f023 0207 	bic.w	r2, r3, #7
 8002b20:	4909      	ldr	r1, [pc, #36]	@ (8002b48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b28:	4b07      	ldr	r3, [pc, #28]	@ (8002b48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d001      	beq.n	8002b3a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e000      	b.n	8002b3c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3718      	adds	r7, #24
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40021000 	.word	0x40021000
 8002b48:	40022000 	.word	0x40022000

08002b4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b086      	sub	sp, #24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b54:	2300      	movs	r3, #0
 8002b56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b58:	2300      	movs	r3, #0
 8002b5a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d041      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b6c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002b70:	d02a      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002b72:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002b76:	d824      	bhi.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b78:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002b7c:	d008      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b7e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002b82:	d81e      	bhi.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00a      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002b88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b8c:	d010      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b8e:	e018      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b90:	4b86      	ldr	r3, [pc, #536]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	4a85      	ldr	r2, [pc, #532]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b9a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b9c:	e015      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 fabb 	bl	8003120 <RCCEx_PLLSAI1_Config>
 8002baa:	4603      	mov	r3, r0
 8002bac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bae:	e00c      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	3320      	adds	r3, #32
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 fba6 	bl	8003308 <RCCEx_PLLSAI2_Config>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bc0:	e003      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	74fb      	strb	r3, [r7, #19]
      break;
 8002bc6:	e000      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002bc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bca:	7cfb      	ldrb	r3, [r7, #19]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10b      	bne.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bd0:	4b76      	ldr	r3, [pc, #472]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002bde:	4973      	ldr	r1, [pc, #460]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002be6:	e001      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be8:	7cfb      	ldrb	r3, [r7, #19]
 8002bea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d041      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bfc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002c00:	d02a      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002c02:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002c06:	d824      	bhi.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c0c:	d008      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c12:	d81e      	bhi.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00a      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002c18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c1c:	d010      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c1e:	e018      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c20:	4b62      	ldr	r3, [pc, #392]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	4a61      	ldr	r2, [pc, #388]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c2a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c2c:	e015      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3304      	adds	r3, #4
 8002c32:	2100      	movs	r1, #0
 8002c34:	4618      	mov	r0, r3
 8002c36:	f000 fa73 	bl	8003120 <RCCEx_PLLSAI1_Config>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c3e:	e00c      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3320      	adds	r3, #32
 8002c44:	2100      	movs	r1, #0
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 fb5e 	bl	8003308 <RCCEx_PLLSAI2_Config>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c50:	e003      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	74fb      	strb	r3, [r7, #19]
      break;
 8002c56:	e000      	b.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002c58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c5a:	7cfb      	ldrb	r3, [r7, #19]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10b      	bne.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c60:	4b52      	ldr	r3, [pc, #328]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c66:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c6e:	494f      	ldr	r1, [pc, #316]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002c76:	e001      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c78:	7cfb      	ldrb	r3, [r7, #19]
 8002c7a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 80a0 	beq.w	8002dca <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c8e:	4b47      	ldr	r3, [pc, #284]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00d      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca4:	4b41      	ldr	r3, [pc, #260]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ca8:	4a40      	ldr	r2, [pc, #256]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002caa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cae:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cb0:	4b3e      	ldr	r3, [pc, #248]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cc0:	4b3b      	ldr	r3, [pc, #236]	@ (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a3a      	ldr	r2, [pc, #232]	@ (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ccc:	f7fe f82e 	bl	8000d2c <HAL_GetTick>
 8002cd0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002cd2:	e009      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd4:	f7fe f82a 	bl	8000d2c <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d902      	bls.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	74fb      	strb	r3, [r7, #19]
        break;
 8002ce6:	e005      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ce8:	4b31      	ldr	r3, [pc, #196]	@ (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0ef      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002cf4:	7cfb      	ldrb	r3, [r7, #19]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d15c      	bne.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d04:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d01f      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d019      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d18:	4b24      	ldr	r3, [pc, #144]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d22:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d24:	4b21      	ldr	r3, [pc, #132]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d2a:	4a20      	ldr	r2, [pc, #128]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d34:	4b1d      	ldr	r3, [pc, #116]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d3a:	4a1c      	ldr	r2, [pc, #112]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d44:	4a19      	ldr	r2, [pc, #100]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d016      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d56:	f7fd ffe9 	bl	8000d2c <HAL_GetTick>
 8002d5a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d5c:	e00b      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5e:	f7fd ffe5 	bl	8000d2c <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d902      	bls.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	74fb      	strb	r3, [r7, #19]
            break;
 8002d74:	e006      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d76:	4b0d      	ldr	r3, [pc, #52]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0ec      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002d84:	7cfb      	ldrb	r3, [r7, #19]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10c      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d8a:	4b08      	ldr	r3, [pc, #32]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d9a:	4904      	ldr	r1, [pc, #16]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002da2:	e009      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002da4:	7cfb      	ldrb	r3, [r7, #19]
 8002da6:	74bb      	strb	r3, [r7, #18]
 8002da8:	e006      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002daa:	bf00      	nop
 8002dac:	40021000 	.word	0x40021000
 8002db0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db4:	7cfb      	ldrb	r3, [r7, #19]
 8002db6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002db8:	7c7b      	ldrb	r3, [r7, #17]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d105      	bne.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dbe:	4b9e      	ldr	r3, [pc, #632]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc2:	4a9d      	ldr	r2, [pc, #628]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dc8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00a      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dd6:	4b98      	ldr	r3, [pc, #608]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ddc:	f023 0203 	bic.w	r2, r3, #3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de4:	4994      	ldr	r1, [pc, #592]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00a      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002df8:	4b8f      	ldr	r3, [pc, #572]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dfe:	f023 020c 	bic.w	r2, r3, #12
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e06:	498c      	ldr	r1, [pc, #560]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e1a:	4b87      	ldr	r3, [pc, #540]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e20:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e28:	4983      	ldr	r1, [pc, #524]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00a      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e3c:	4b7e      	ldr	r3, [pc, #504]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e42:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4a:	497b      	ldr	r1, [pc, #492]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0310 	and.w	r3, r3, #16
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00a      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e5e:	4b76      	ldr	r3, [pc, #472]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e6c:	4972      	ldr	r1, [pc, #456]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0320 	and.w	r3, r3, #32
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00a      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e80:	4b6d      	ldr	r3, [pc, #436]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e86:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e8e:	496a      	ldr	r1, [pc, #424]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00a      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ea2:	4b65      	ldr	r3, [pc, #404]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb0:	4961      	ldr	r1, [pc, #388]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00a      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ec4:	4b5c      	ldr	r3, [pc, #368]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ed2:	4959      	ldr	r1, [pc, #356]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00a      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ee6:	4b54      	ldr	r3, [pc, #336]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eec:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ef4:	4950      	ldr	r1, [pc, #320]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00a      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f08:	4b4b      	ldr	r3, [pc, #300]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f16:	4948      	ldr	r1, [pc, #288]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00a      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f2a:	4b43      	ldr	r3, [pc, #268]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f30:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f38:	493f      	ldr	r1, [pc, #252]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d028      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f4c:	4b3a      	ldr	r3, [pc, #232]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f5a:	4937      	ldr	r1, [pc, #220]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f6a:	d106      	bne.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f6c:	4b32      	ldr	r3, [pc, #200]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	4a31      	ldr	r2, [pc, #196]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f76:	60d3      	str	r3, [r2, #12]
 8002f78:	e011      	b.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f82:	d10c      	bne.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3304      	adds	r3, #4
 8002f88:	2101      	movs	r1, #1
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 f8c8 	bl	8003120 <RCCEx_PLLSAI1_Config>
 8002f90:	4603      	mov	r3, r0
 8002f92:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f94:	7cfb      	ldrb	r3, [r7, #19]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002f9a:	7cfb      	ldrb	r3, [r7, #19]
 8002f9c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d028      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002faa:	4b23      	ldr	r3, [pc, #140]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb8:	491f      	ldr	r1, [pc, #124]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fc8:	d106      	bne.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fca:	4b1b      	ldr	r3, [pc, #108]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	4a1a      	ldr	r2, [pc, #104]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fd4:	60d3      	str	r3, [r2, #12]
 8002fd6:	e011      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fdc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002fe0:	d10c      	bne.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f000 f899 	bl	8003120 <RCCEx_PLLSAI1_Config>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ff2:	7cfb      	ldrb	r3, [r7, #19]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002ff8:	7cfb      	ldrb	r3, [r7, #19]
 8002ffa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d02b      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003008:	4b0b      	ldr	r3, [pc, #44]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800300a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800300e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003016:	4908      	ldr	r1, [pc, #32]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003018:	4313      	orrs	r3, r2
 800301a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003022:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003026:	d109      	bne.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003028:	4b03      	ldr	r3, [pc, #12]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	4a02      	ldr	r2, [pc, #8]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800302e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003032:	60d3      	str	r3, [r2, #12]
 8003034:	e014      	b.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003036:	bf00      	nop
 8003038:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003040:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003044:	d10c      	bne.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3304      	adds	r3, #4
 800304a:	2101      	movs	r1, #1
 800304c:	4618      	mov	r0, r3
 800304e:	f000 f867 	bl	8003120 <RCCEx_PLLSAI1_Config>
 8003052:	4603      	mov	r3, r0
 8003054:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003056:	7cfb      	ldrb	r3, [r7, #19]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800305c:	7cfb      	ldrb	r3, [r7, #19]
 800305e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d02f      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800306c:	4b2b      	ldr	r3, [pc, #172]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800306e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003072:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800307a:	4928      	ldr	r1, [pc, #160]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800307c:	4313      	orrs	r3, r2
 800307e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003086:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800308a:	d10d      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3304      	adds	r3, #4
 8003090:	2102      	movs	r1, #2
 8003092:	4618      	mov	r0, r3
 8003094:	f000 f844 	bl	8003120 <RCCEx_PLLSAI1_Config>
 8003098:	4603      	mov	r3, r0
 800309a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800309c:	7cfb      	ldrb	r3, [r7, #19]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d014      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80030a2:	7cfb      	ldrb	r3, [r7, #19]
 80030a4:	74bb      	strb	r3, [r7, #18]
 80030a6:	e011      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80030ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030b0:	d10c      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3320      	adds	r3, #32
 80030b6:	2102      	movs	r1, #2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 f925 	bl	8003308 <RCCEx_PLLSAI2_Config>
 80030be:	4603      	mov	r3, r0
 80030c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030c2:	7cfb      	ldrb	r3, [r7, #19]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80030c8:	7cfb      	ldrb	r3, [r7, #19]
 80030ca:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00a      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80030d8:	4b10      	ldr	r3, [pc, #64]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030de:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030e6:	490d      	ldr	r1, [pc, #52]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00b      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030fa:	4b08      	ldr	r3, [pc, #32]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003100:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800310a:	4904      	ldr	r1, [pc, #16]	@ (800311c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003112:	7cbb      	ldrb	r3, [r7, #18]
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40021000 	.word	0x40021000

08003120 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800312e:	4b75      	ldr	r3, [pc, #468]	@ (8003304 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d018      	beq.n	800316c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800313a:	4b72      	ldr	r3, [pc, #456]	@ (8003304 <RCCEx_PLLSAI1_Config+0x1e4>)
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	f003 0203 	and.w	r2, r3, #3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	429a      	cmp	r2, r3
 8003148:	d10d      	bne.n	8003166 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
       ||
 800314e:	2b00      	cmp	r3, #0
 8003150:	d009      	beq.n	8003166 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003152:	4b6c      	ldr	r3, [pc, #432]	@ (8003304 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	091b      	lsrs	r3, r3, #4
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
       ||
 8003162:	429a      	cmp	r2, r3
 8003164:	d047      	beq.n	80031f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	73fb      	strb	r3, [r7, #15]
 800316a:	e044      	b.n	80031f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b03      	cmp	r3, #3
 8003172:	d018      	beq.n	80031a6 <RCCEx_PLLSAI1_Config+0x86>
 8003174:	2b03      	cmp	r3, #3
 8003176:	d825      	bhi.n	80031c4 <RCCEx_PLLSAI1_Config+0xa4>
 8003178:	2b01      	cmp	r3, #1
 800317a:	d002      	beq.n	8003182 <RCCEx_PLLSAI1_Config+0x62>
 800317c:	2b02      	cmp	r3, #2
 800317e:	d009      	beq.n	8003194 <RCCEx_PLLSAI1_Config+0x74>
 8003180:	e020      	b.n	80031c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003182:	4b60      	ldr	r3, [pc, #384]	@ (8003304 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d11d      	bne.n	80031ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003192:	e01a      	b.n	80031ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003194:	4b5b      	ldr	r3, [pc, #364]	@ (8003304 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800319c:	2b00      	cmp	r3, #0
 800319e:	d116      	bne.n	80031ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031a4:	e013      	b.n	80031ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031a6:	4b57      	ldr	r3, [pc, #348]	@ (8003304 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10f      	bne.n	80031d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031b2:	4b54      	ldr	r3, [pc, #336]	@ (8003304 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031c2:	e006      	b.n	80031d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	73fb      	strb	r3, [r7, #15]
      break;
 80031c8:	e004      	b.n	80031d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031ca:	bf00      	nop
 80031cc:	e002      	b.n	80031d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031ce:	bf00      	nop
 80031d0:	e000      	b.n	80031d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10d      	bne.n	80031f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031da:	4b4a      	ldr	r3, [pc, #296]	@ (8003304 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6819      	ldr	r1, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	430b      	orrs	r3, r1
 80031f0:	4944      	ldr	r1, [pc, #272]	@ (8003304 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d17d      	bne.n	80032f8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80031fc:	4b41      	ldr	r3, [pc, #260]	@ (8003304 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a40      	ldr	r2, [pc, #256]	@ (8003304 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003202:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003206:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003208:	f7fd fd90 	bl	8000d2c <HAL_GetTick>
 800320c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800320e:	e009      	b.n	8003224 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003210:	f7fd fd8c 	bl	8000d2c <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d902      	bls.n	8003224 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	73fb      	strb	r3, [r7, #15]
        break;
 8003222:	e005      	b.n	8003230 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003224:	4b37      	ldr	r3, [pc, #220]	@ (8003304 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1ef      	bne.n	8003210 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003230:	7bfb      	ldrb	r3, [r7, #15]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d160      	bne.n	80032f8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d111      	bne.n	8003260 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800323c:	4b31      	ldr	r3, [pc, #196]	@ (8003304 <RCCEx_PLLSAI1_Config+0x1e4>)
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003244:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6892      	ldr	r2, [r2, #8]
 800324c:	0211      	lsls	r1, r2, #8
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	68d2      	ldr	r2, [r2, #12]
 8003252:	0912      	lsrs	r2, r2, #4
 8003254:	0452      	lsls	r2, r2, #17
 8003256:	430a      	orrs	r2, r1
 8003258:	492a      	ldr	r1, [pc, #168]	@ (8003304 <RCCEx_PLLSAI1_Config+0x1e4>)
 800325a:	4313      	orrs	r3, r2
 800325c:	610b      	str	r3, [r1, #16]
 800325e:	e027      	b.n	80032b0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d112      	bne.n	800328c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003266:	4b27      	ldr	r3, [pc, #156]	@ (8003304 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800326e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6892      	ldr	r2, [r2, #8]
 8003276:	0211      	lsls	r1, r2, #8
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6912      	ldr	r2, [r2, #16]
 800327c:	0852      	lsrs	r2, r2, #1
 800327e:	3a01      	subs	r2, #1
 8003280:	0552      	lsls	r2, r2, #21
 8003282:	430a      	orrs	r2, r1
 8003284:	491f      	ldr	r1, [pc, #124]	@ (8003304 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003286:	4313      	orrs	r3, r2
 8003288:	610b      	str	r3, [r1, #16]
 800328a:	e011      	b.n	80032b0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800328c:	4b1d      	ldr	r3, [pc, #116]	@ (8003304 <RCCEx_PLLSAI1_Config+0x1e4>)
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003294:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6892      	ldr	r2, [r2, #8]
 800329c:	0211      	lsls	r1, r2, #8
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6952      	ldr	r2, [r2, #20]
 80032a2:	0852      	lsrs	r2, r2, #1
 80032a4:	3a01      	subs	r2, #1
 80032a6:	0652      	lsls	r2, r2, #25
 80032a8:	430a      	orrs	r2, r1
 80032aa:	4916      	ldr	r1, [pc, #88]	@ (8003304 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80032b0:	4b14      	ldr	r3, [pc, #80]	@ (8003304 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a13      	ldr	r2, [pc, #76]	@ (8003304 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80032ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032bc:	f7fd fd36 	bl	8000d2c <HAL_GetTick>
 80032c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032c2:	e009      	b.n	80032d8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032c4:	f7fd fd32 	bl	8000d2c <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d902      	bls.n	80032d8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	73fb      	strb	r3, [r7, #15]
          break;
 80032d6:	e005      	b.n	80032e4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003304 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0ef      	beq.n	80032c4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80032e4:	7bfb      	ldrb	r3, [r7, #15]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d106      	bne.n	80032f8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80032ea:	4b06      	ldr	r3, [pc, #24]	@ (8003304 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ec:	691a      	ldr	r2, [r3, #16]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	4904      	ldr	r1, [pc, #16]	@ (8003304 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80032f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40021000 	.word	0x40021000

08003308 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003312:	2300      	movs	r3, #0
 8003314:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003316:	4b6a      	ldr	r3, [pc, #424]	@ (80034c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f003 0303 	and.w	r3, r3, #3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d018      	beq.n	8003354 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003322:	4b67      	ldr	r3, [pc, #412]	@ (80034c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	f003 0203 	and.w	r2, r3, #3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d10d      	bne.n	800334e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
       ||
 8003336:	2b00      	cmp	r3, #0
 8003338:	d009      	beq.n	800334e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800333a:	4b61      	ldr	r3, [pc, #388]	@ (80034c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	091b      	lsrs	r3, r3, #4
 8003340:	f003 0307 	and.w	r3, r3, #7
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
       ||
 800334a:	429a      	cmp	r2, r3
 800334c:	d047      	beq.n	80033de <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	73fb      	strb	r3, [r7, #15]
 8003352:	e044      	b.n	80033de <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2b03      	cmp	r3, #3
 800335a:	d018      	beq.n	800338e <RCCEx_PLLSAI2_Config+0x86>
 800335c:	2b03      	cmp	r3, #3
 800335e:	d825      	bhi.n	80033ac <RCCEx_PLLSAI2_Config+0xa4>
 8003360:	2b01      	cmp	r3, #1
 8003362:	d002      	beq.n	800336a <RCCEx_PLLSAI2_Config+0x62>
 8003364:	2b02      	cmp	r3, #2
 8003366:	d009      	beq.n	800337c <RCCEx_PLLSAI2_Config+0x74>
 8003368:	e020      	b.n	80033ac <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800336a:	4b55      	ldr	r3, [pc, #340]	@ (80034c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d11d      	bne.n	80033b2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800337a:	e01a      	b.n	80033b2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800337c:	4b50      	ldr	r3, [pc, #320]	@ (80034c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003384:	2b00      	cmp	r3, #0
 8003386:	d116      	bne.n	80033b6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800338c:	e013      	b.n	80033b6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800338e:	4b4c      	ldr	r3, [pc, #304]	@ (80034c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10f      	bne.n	80033ba <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800339a:	4b49      	ldr	r3, [pc, #292]	@ (80034c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d109      	bne.n	80033ba <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033aa:	e006      	b.n	80033ba <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	73fb      	strb	r3, [r7, #15]
      break;
 80033b0:	e004      	b.n	80033bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80033b2:	bf00      	nop
 80033b4:	e002      	b.n	80033bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80033b6:	bf00      	nop
 80033b8:	e000      	b.n	80033bc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80033ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10d      	bne.n	80033de <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033c2:	4b3f      	ldr	r3, [pc, #252]	@ (80034c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6819      	ldr	r1, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	3b01      	subs	r3, #1
 80033d4:	011b      	lsls	r3, r3, #4
 80033d6:	430b      	orrs	r3, r1
 80033d8:	4939      	ldr	r1, [pc, #228]	@ (80034c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033de:	7bfb      	ldrb	r3, [r7, #15]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d167      	bne.n	80034b4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80033e4:	4b36      	ldr	r3, [pc, #216]	@ (80034c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a35      	ldr	r2, [pc, #212]	@ (80034c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033f0:	f7fd fc9c 	bl	8000d2c <HAL_GetTick>
 80033f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033f6:	e009      	b.n	800340c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033f8:	f7fd fc98 	bl	8000d2c <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d902      	bls.n	800340c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	73fb      	strb	r3, [r7, #15]
        break;
 800340a:	e005      	b.n	8003418 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800340c:	4b2c      	ldr	r3, [pc, #176]	@ (80034c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1ef      	bne.n	80033f8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003418:	7bfb      	ldrb	r3, [r7, #15]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d14a      	bne.n	80034b4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d111      	bne.n	8003448 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003424:	4b26      	ldr	r3, [pc, #152]	@ (80034c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800342c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6892      	ldr	r2, [r2, #8]
 8003434:	0211      	lsls	r1, r2, #8
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	68d2      	ldr	r2, [r2, #12]
 800343a:	0912      	lsrs	r2, r2, #4
 800343c:	0452      	lsls	r2, r2, #17
 800343e:	430a      	orrs	r2, r1
 8003440:	491f      	ldr	r1, [pc, #124]	@ (80034c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003442:	4313      	orrs	r3, r2
 8003444:	614b      	str	r3, [r1, #20]
 8003446:	e011      	b.n	800346c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003448:	4b1d      	ldr	r3, [pc, #116]	@ (80034c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003450:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6892      	ldr	r2, [r2, #8]
 8003458:	0211      	lsls	r1, r2, #8
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6912      	ldr	r2, [r2, #16]
 800345e:	0852      	lsrs	r2, r2, #1
 8003460:	3a01      	subs	r2, #1
 8003462:	0652      	lsls	r2, r2, #25
 8003464:	430a      	orrs	r2, r1
 8003466:	4916      	ldr	r1, [pc, #88]	@ (80034c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003468:	4313      	orrs	r3, r2
 800346a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800346c:	4b14      	ldr	r3, [pc, #80]	@ (80034c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a13      	ldr	r2, [pc, #76]	@ (80034c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003472:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003476:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003478:	f7fd fc58 	bl	8000d2c <HAL_GetTick>
 800347c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800347e:	e009      	b.n	8003494 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003480:	f7fd fc54 	bl	8000d2c <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d902      	bls.n	8003494 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	73fb      	strb	r3, [r7, #15]
          break;
 8003492:	e005      	b.n	80034a0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003494:	4b0a      	ldr	r3, [pc, #40]	@ (80034c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0ef      	beq.n	8003480 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d106      	bne.n	80034b4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80034a6:	4b06      	ldr	r3, [pc, #24]	@ (80034c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034a8:	695a      	ldr	r2, [r3, #20]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	4904      	ldr	r1, [pc, #16]	@ (80034c0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40021000 	.word	0x40021000

080034c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e040      	b.n	8003558 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d106      	bne.n	80034ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7fd fab2 	bl	8000a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2224      	movs	r2, #36	@ 0x24
 80034f0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0201 	bic.w	r2, r2, #1
 8003500:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fb6a 	bl	8003be4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f8af 	bl	8003674 <UART_SetConfig>
 8003516:	4603      	mov	r3, r0
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e01b      	b.n	8003558 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800352e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800353e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 fbe9 	bl	8003d28 <UART_CheckIdleState>
 8003556:	4603      	mov	r3, r0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08a      	sub	sp, #40	@ 0x28
 8003564:	af02      	add	r7, sp, #8
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	603b      	str	r3, [r7, #0]
 800356c:	4613      	mov	r3, r2
 800356e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003574:	2b20      	cmp	r3, #32
 8003576:	d177      	bne.n	8003668 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <HAL_UART_Transmit+0x24>
 800357e:	88fb      	ldrh	r3, [r7, #6]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e070      	b.n	800366a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2221      	movs	r2, #33	@ 0x21
 8003594:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003596:	f7fd fbc9 	bl	8000d2c <HAL_GetTick>
 800359a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	88fa      	ldrh	r2, [r7, #6]
 80035a0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	88fa      	ldrh	r2, [r7, #6]
 80035a8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035b4:	d108      	bne.n	80035c8 <HAL_UART_Transmit+0x68>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d104      	bne.n	80035c8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80035be:	2300      	movs	r3, #0
 80035c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	61bb      	str	r3, [r7, #24]
 80035c6:	e003      	b.n	80035d0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035cc:	2300      	movs	r3, #0
 80035ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035d0:	e02f      	b.n	8003632 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	2200      	movs	r2, #0
 80035da:	2180      	movs	r1, #128	@ 0x80
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 fc4b 	bl	8003e78 <UART_WaitOnFlagUntilTimeout>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d004      	beq.n	80035f2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e03b      	b.n	800366a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10b      	bne.n	8003610 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	881a      	ldrh	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003604:	b292      	uxth	r2, r2
 8003606:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	3302      	adds	r3, #2
 800360c:	61bb      	str	r3, [r7, #24]
 800360e:	e007      	b.n	8003620 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	781a      	ldrb	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	3301      	adds	r3, #1
 800361e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003626:	b29b      	uxth	r3, r3
 8003628:	3b01      	subs	r3, #1
 800362a:	b29a      	uxth	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003638:	b29b      	uxth	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1c9      	bne.n	80035d2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	9300      	str	r3, [sp, #0]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	2200      	movs	r2, #0
 8003646:	2140      	movs	r1, #64	@ 0x40
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 fc15 	bl	8003e78 <UART_WaitOnFlagUntilTimeout>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d004      	beq.n	800365e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2220      	movs	r2, #32
 8003658:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e005      	b.n	800366a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2220      	movs	r2, #32
 8003662:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003664:	2300      	movs	r3, #0
 8003666:	e000      	b.n	800366a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003668:	2302      	movs	r3, #2
  }
}
 800366a:	4618      	mov	r0, r3
 800366c:	3720      	adds	r7, #32
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
	...

08003674 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003678:	b08a      	sub	sp, #40	@ 0x28
 800367a:	af00      	add	r7, sp, #0
 800367c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	691b      	ldr	r3, [r3, #16]
 800368c:	431a      	orrs	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	431a      	orrs	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	4313      	orrs	r3, r2
 800369a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	4ba4      	ldr	r3, [pc, #656]	@ (8003934 <UART_SetConfig+0x2c0>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	6812      	ldr	r2, [r2, #0]
 80036aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036ac:	430b      	orrs	r3, r1
 80036ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	68da      	ldr	r2, [r3, #12]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a99      	ldr	r2, [pc, #612]	@ (8003938 <UART_SetConfig+0x2c4>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d004      	beq.n	80036e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036dc:	4313      	orrs	r3, r2
 80036de:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036f0:	430a      	orrs	r2, r1
 80036f2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a90      	ldr	r2, [pc, #576]	@ (800393c <UART_SetConfig+0x2c8>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d126      	bne.n	800374c <UART_SetConfig+0xd8>
 80036fe:	4b90      	ldr	r3, [pc, #576]	@ (8003940 <UART_SetConfig+0x2cc>)
 8003700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	2b03      	cmp	r3, #3
 800370a:	d81b      	bhi.n	8003744 <UART_SetConfig+0xd0>
 800370c:	a201      	add	r2, pc, #4	@ (adr r2, 8003714 <UART_SetConfig+0xa0>)
 800370e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003712:	bf00      	nop
 8003714:	08003725 	.word	0x08003725
 8003718:	08003735 	.word	0x08003735
 800371c:	0800372d 	.word	0x0800372d
 8003720:	0800373d 	.word	0x0800373d
 8003724:	2301      	movs	r3, #1
 8003726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800372a:	e116      	b.n	800395a <UART_SetConfig+0x2e6>
 800372c:	2302      	movs	r3, #2
 800372e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003732:	e112      	b.n	800395a <UART_SetConfig+0x2e6>
 8003734:	2304      	movs	r3, #4
 8003736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800373a:	e10e      	b.n	800395a <UART_SetConfig+0x2e6>
 800373c:	2308      	movs	r3, #8
 800373e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003742:	e10a      	b.n	800395a <UART_SetConfig+0x2e6>
 8003744:	2310      	movs	r3, #16
 8003746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800374a:	e106      	b.n	800395a <UART_SetConfig+0x2e6>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a7c      	ldr	r2, [pc, #496]	@ (8003944 <UART_SetConfig+0x2d0>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d138      	bne.n	80037c8 <UART_SetConfig+0x154>
 8003756:	4b7a      	ldr	r3, [pc, #488]	@ (8003940 <UART_SetConfig+0x2cc>)
 8003758:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800375c:	f003 030c 	and.w	r3, r3, #12
 8003760:	2b0c      	cmp	r3, #12
 8003762:	d82d      	bhi.n	80037c0 <UART_SetConfig+0x14c>
 8003764:	a201      	add	r2, pc, #4	@ (adr r2, 800376c <UART_SetConfig+0xf8>)
 8003766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376a:	bf00      	nop
 800376c:	080037a1 	.word	0x080037a1
 8003770:	080037c1 	.word	0x080037c1
 8003774:	080037c1 	.word	0x080037c1
 8003778:	080037c1 	.word	0x080037c1
 800377c:	080037b1 	.word	0x080037b1
 8003780:	080037c1 	.word	0x080037c1
 8003784:	080037c1 	.word	0x080037c1
 8003788:	080037c1 	.word	0x080037c1
 800378c:	080037a9 	.word	0x080037a9
 8003790:	080037c1 	.word	0x080037c1
 8003794:	080037c1 	.word	0x080037c1
 8003798:	080037c1 	.word	0x080037c1
 800379c:	080037b9 	.word	0x080037b9
 80037a0:	2300      	movs	r3, #0
 80037a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037a6:	e0d8      	b.n	800395a <UART_SetConfig+0x2e6>
 80037a8:	2302      	movs	r3, #2
 80037aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037ae:	e0d4      	b.n	800395a <UART_SetConfig+0x2e6>
 80037b0:	2304      	movs	r3, #4
 80037b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037b6:	e0d0      	b.n	800395a <UART_SetConfig+0x2e6>
 80037b8:	2308      	movs	r3, #8
 80037ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037be:	e0cc      	b.n	800395a <UART_SetConfig+0x2e6>
 80037c0:	2310      	movs	r3, #16
 80037c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037c6:	e0c8      	b.n	800395a <UART_SetConfig+0x2e6>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a5e      	ldr	r2, [pc, #376]	@ (8003948 <UART_SetConfig+0x2d4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d125      	bne.n	800381e <UART_SetConfig+0x1aa>
 80037d2:	4b5b      	ldr	r3, [pc, #364]	@ (8003940 <UART_SetConfig+0x2cc>)
 80037d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80037dc:	2b30      	cmp	r3, #48	@ 0x30
 80037de:	d016      	beq.n	800380e <UART_SetConfig+0x19a>
 80037e0:	2b30      	cmp	r3, #48	@ 0x30
 80037e2:	d818      	bhi.n	8003816 <UART_SetConfig+0x1a2>
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	d00a      	beq.n	80037fe <UART_SetConfig+0x18a>
 80037e8:	2b20      	cmp	r3, #32
 80037ea:	d814      	bhi.n	8003816 <UART_SetConfig+0x1a2>
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <UART_SetConfig+0x182>
 80037f0:	2b10      	cmp	r3, #16
 80037f2:	d008      	beq.n	8003806 <UART_SetConfig+0x192>
 80037f4:	e00f      	b.n	8003816 <UART_SetConfig+0x1a2>
 80037f6:	2300      	movs	r3, #0
 80037f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80037fc:	e0ad      	b.n	800395a <UART_SetConfig+0x2e6>
 80037fe:	2302      	movs	r3, #2
 8003800:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003804:	e0a9      	b.n	800395a <UART_SetConfig+0x2e6>
 8003806:	2304      	movs	r3, #4
 8003808:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800380c:	e0a5      	b.n	800395a <UART_SetConfig+0x2e6>
 800380e:	2308      	movs	r3, #8
 8003810:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003814:	e0a1      	b.n	800395a <UART_SetConfig+0x2e6>
 8003816:	2310      	movs	r3, #16
 8003818:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800381c:	e09d      	b.n	800395a <UART_SetConfig+0x2e6>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a4a      	ldr	r2, [pc, #296]	@ (800394c <UART_SetConfig+0x2d8>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d125      	bne.n	8003874 <UART_SetConfig+0x200>
 8003828:	4b45      	ldr	r3, [pc, #276]	@ (8003940 <UART_SetConfig+0x2cc>)
 800382a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800382e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003832:	2bc0      	cmp	r3, #192	@ 0xc0
 8003834:	d016      	beq.n	8003864 <UART_SetConfig+0x1f0>
 8003836:	2bc0      	cmp	r3, #192	@ 0xc0
 8003838:	d818      	bhi.n	800386c <UART_SetConfig+0x1f8>
 800383a:	2b80      	cmp	r3, #128	@ 0x80
 800383c:	d00a      	beq.n	8003854 <UART_SetConfig+0x1e0>
 800383e:	2b80      	cmp	r3, #128	@ 0x80
 8003840:	d814      	bhi.n	800386c <UART_SetConfig+0x1f8>
 8003842:	2b00      	cmp	r3, #0
 8003844:	d002      	beq.n	800384c <UART_SetConfig+0x1d8>
 8003846:	2b40      	cmp	r3, #64	@ 0x40
 8003848:	d008      	beq.n	800385c <UART_SetConfig+0x1e8>
 800384a:	e00f      	b.n	800386c <UART_SetConfig+0x1f8>
 800384c:	2300      	movs	r3, #0
 800384e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003852:	e082      	b.n	800395a <UART_SetConfig+0x2e6>
 8003854:	2302      	movs	r3, #2
 8003856:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800385a:	e07e      	b.n	800395a <UART_SetConfig+0x2e6>
 800385c:	2304      	movs	r3, #4
 800385e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003862:	e07a      	b.n	800395a <UART_SetConfig+0x2e6>
 8003864:	2308      	movs	r3, #8
 8003866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800386a:	e076      	b.n	800395a <UART_SetConfig+0x2e6>
 800386c:	2310      	movs	r3, #16
 800386e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003872:	e072      	b.n	800395a <UART_SetConfig+0x2e6>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a35      	ldr	r2, [pc, #212]	@ (8003950 <UART_SetConfig+0x2dc>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d12a      	bne.n	80038d4 <UART_SetConfig+0x260>
 800387e:	4b30      	ldr	r3, [pc, #192]	@ (8003940 <UART_SetConfig+0x2cc>)
 8003880:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003884:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003888:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800388c:	d01a      	beq.n	80038c4 <UART_SetConfig+0x250>
 800388e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003892:	d81b      	bhi.n	80038cc <UART_SetConfig+0x258>
 8003894:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003898:	d00c      	beq.n	80038b4 <UART_SetConfig+0x240>
 800389a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800389e:	d815      	bhi.n	80038cc <UART_SetConfig+0x258>
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <UART_SetConfig+0x238>
 80038a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038a8:	d008      	beq.n	80038bc <UART_SetConfig+0x248>
 80038aa:	e00f      	b.n	80038cc <UART_SetConfig+0x258>
 80038ac:	2300      	movs	r3, #0
 80038ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038b2:	e052      	b.n	800395a <UART_SetConfig+0x2e6>
 80038b4:	2302      	movs	r3, #2
 80038b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038ba:	e04e      	b.n	800395a <UART_SetConfig+0x2e6>
 80038bc:	2304      	movs	r3, #4
 80038be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038c2:	e04a      	b.n	800395a <UART_SetConfig+0x2e6>
 80038c4:	2308      	movs	r3, #8
 80038c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038ca:	e046      	b.n	800395a <UART_SetConfig+0x2e6>
 80038cc:	2310      	movs	r3, #16
 80038ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80038d2:	e042      	b.n	800395a <UART_SetConfig+0x2e6>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a17      	ldr	r2, [pc, #92]	@ (8003938 <UART_SetConfig+0x2c4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d13a      	bne.n	8003954 <UART_SetConfig+0x2e0>
 80038de:	4b18      	ldr	r3, [pc, #96]	@ (8003940 <UART_SetConfig+0x2cc>)
 80038e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038e4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80038e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038ec:	d01a      	beq.n	8003924 <UART_SetConfig+0x2b0>
 80038ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80038f2:	d81b      	bhi.n	800392c <UART_SetConfig+0x2b8>
 80038f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038f8:	d00c      	beq.n	8003914 <UART_SetConfig+0x2a0>
 80038fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038fe:	d815      	bhi.n	800392c <UART_SetConfig+0x2b8>
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <UART_SetConfig+0x298>
 8003904:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003908:	d008      	beq.n	800391c <UART_SetConfig+0x2a8>
 800390a:	e00f      	b.n	800392c <UART_SetConfig+0x2b8>
 800390c:	2300      	movs	r3, #0
 800390e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003912:	e022      	b.n	800395a <UART_SetConfig+0x2e6>
 8003914:	2302      	movs	r3, #2
 8003916:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800391a:	e01e      	b.n	800395a <UART_SetConfig+0x2e6>
 800391c:	2304      	movs	r3, #4
 800391e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003922:	e01a      	b.n	800395a <UART_SetConfig+0x2e6>
 8003924:	2308      	movs	r3, #8
 8003926:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800392a:	e016      	b.n	800395a <UART_SetConfig+0x2e6>
 800392c:	2310      	movs	r3, #16
 800392e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003932:	e012      	b.n	800395a <UART_SetConfig+0x2e6>
 8003934:	efff69f3 	.word	0xefff69f3
 8003938:	40008000 	.word	0x40008000
 800393c:	40013800 	.word	0x40013800
 8003940:	40021000 	.word	0x40021000
 8003944:	40004400 	.word	0x40004400
 8003948:	40004800 	.word	0x40004800
 800394c:	40004c00 	.word	0x40004c00
 8003950:	40005000 	.word	0x40005000
 8003954:	2310      	movs	r3, #16
 8003956:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a9f      	ldr	r2, [pc, #636]	@ (8003bdc <UART_SetConfig+0x568>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d17a      	bne.n	8003a5a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003964:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003968:	2b08      	cmp	r3, #8
 800396a:	d824      	bhi.n	80039b6 <UART_SetConfig+0x342>
 800396c:	a201      	add	r2, pc, #4	@ (adr r2, 8003974 <UART_SetConfig+0x300>)
 800396e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003972:	bf00      	nop
 8003974:	08003999 	.word	0x08003999
 8003978:	080039b7 	.word	0x080039b7
 800397c:	080039a1 	.word	0x080039a1
 8003980:	080039b7 	.word	0x080039b7
 8003984:	080039a7 	.word	0x080039a7
 8003988:	080039b7 	.word	0x080039b7
 800398c:	080039b7 	.word	0x080039b7
 8003990:	080039b7 	.word	0x080039b7
 8003994:	080039af 	.word	0x080039af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003998:	f7ff f84c 	bl	8002a34 <HAL_RCC_GetPCLK1Freq>
 800399c:	61f8      	str	r0, [r7, #28]
        break;
 800399e:	e010      	b.n	80039c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039a0:	4b8f      	ldr	r3, [pc, #572]	@ (8003be0 <UART_SetConfig+0x56c>)
 80039a2:	61fb      	str	r3, [r7, #28]
        break;
 80039a4:	e00d      	b.n	80039c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039a6:	f7fe ffad 	bl	8002904 <HAL_RCC_GetSysClockFreq>
 80039aa:	61f8      	str	r0, [r7, #28]
        break;
 80039ac:	e009      	b.n	80039c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039b2:	61fb      	str	r3, [r7, #28]
        break;
 80039b4:	e005      	b.n	80039c2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80039b6:	2300      	movs	r3, #0
 80039b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80039c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 80fb 	beq.w	8003bc0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	685a      	ldr	r2, [r3, #4]
 80039ce:	4613      	mov	r3, r2
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	4413      	add	r3, r2
 80039d4:	69fa      	ldr	r2, [r7, #28]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d305      	bcc.n	80039e6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80039e0:	69fa      	ldr	r2, [r7, #28]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d903      	bls.n	80039ee <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80039ec:	e0e8      	b.n	8003bc0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	2200      	movs	r2, #0
 80039f2:	461c      	mov	r4, r3
 80039f4:	4615      	mov	r5, r2
 80039f6:	f04f 0200 	mov.w	r2, #0
 80039fa:	f04f 0300 	mov.w	r3, #0
 80039fe:	022b      	lsls	r3, r5, #8
 8003a00:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003a04:	0222      	lsls	r2, r4, #8
 8003a06:	68f9      	ldr	r1, [r7, #12]
 8003a08:	6849      	ldr	r1, [r1, #4]
 8003a0a:	0849      	lsrs	r1, r1, #1
 8003a0c:	2000      	movs	r0, #0
 8003a0e:	4688      	mov	r8, r1
 8003a10:	4681      	mov	r9, r0
 8003a12:	eb12 0a08 	adds.w	sl, r2, r8
 8003a16:	eb43 0b09 	adc.w	fp, r3, r9
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	603b      	str	r3, [r7, #0]
 8003a22:	607a      	str	r2, [r7, #4]
 8003a24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a28:	4650      	mov	r0, sl
 8003a2a:	4659      	mov	r1, fp
 8003a2c:	f7fc fc28 	bl	8000280 <__aeabi_uldivmod>
 8003a30:	4602      	mov	r2, r0
 8003a32:	460b      	mov	r3, r1
 8003a34:	4613      	mov	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a3e:	d308      	bcc.n	8003a52 <UART_SetConfig+0x3de>
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a46:	d204      	bcs.n	8003a52 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	60da      	str	r2, [r3, #12]
 8003a50:	e0b6      	b.n	8003bc0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003a58:	e0b2      	b.n	8003bc0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a62:	d15e      	bne.n	8003b22 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003a64:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d828      	bhi.n	8003abe <UART_SetConfig+0x44a>
 8003a6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a74 <UART_SetConfig+0x400>)
 8003a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a72:	bf00      	nop
 8003a74:	08003a99 	.word	0x08003a99
 8003a78:	08003aa1 	.word	0x08003aa1
 8003a7c:	08003aa9 	.word	0x08003aa9
 8003a80:	08003abf 	.word	0x08003abf
 8003a84:	08003aaf 	.word	0x08003aaf
 8003a88:	08003abf 	.word	0x08003abf
 8003a8c:	08003abf 	.word	0x08003abf
 8003a90:	08003abf 	.word	0x08003abf
 8003a94:	08003ab7 	.word	0x08003ab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a98:	f7fe ffcc 	bl	8002a34 <HAL_RCC_GetPCLK1Freq>
 8003a9c:	61f8      	str	r0, [r7, #28]
        break;
 8003a9e:	e014      	b.n	8003aca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003aa0:	f7fe ffde 	bl	8002a60 <HAL_RCC_GetPCLK2Freq>
 8003aa4:	61f8      	str	r0, [r7, #28]
        break;
 8003aa6:	e010      	b.n	8003aca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003aa8:	4b4d      	ldr	r3, [pc, #308]	@ (8003be0 <UART_SetConfig+0x56c>)
 8003aaa:	61fb      	str	r3, [r7, #28]
        break;
 8003aac:	e00d      	b.n	8003aca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aae:	f7fe ff29 	bl	8002904 <HAL_RCC_GetSysClockFreq>
 8003ab2:	61f8      	str	r0, [r7, #28]
        break;
 8003ab4:	e009      	b.n	8003aca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ab6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003aba:	61fb      	str	r3, [r7, #28]
        break;
 8003abc:	e005      	b.n	8003aca <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003ac8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d077      	beq.n	8003bc0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	005a      	lsls	r2, r3, #1
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	085b      	lsrs	r3, r3, #1
 8003ada:	441a      	add	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	2b0f      	cmp	r3, #15
 8003aea:	d916      	bls.n	8003b1a <UART_SetConfig+0x4a6>
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003af2:	d212      	bcs.n	8003b1a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	f023 030f 	bic.w	r3, r3, #15
 8003afc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	085b      	lsrs	r3, r3, #1
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	8afb      	ldrh	r3, [r7, #22]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	8afa      	ldrh	r2, [r7, #22]
 8003b16:	60da      	str	r2, [r3, #12]
 8003b18:	e052      	b.n	8003bc0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003b20:	e04e      	b.n	8003bc0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b22:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003b26:	2b08      	cmp	r3, #8
 8003b28:	d827      	bhi.n	8003b7a <UART_SetConfig+0x506>
 8003b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b30 <UART_SetConfig+0x4bc>)
 8003b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b30:	08003b55 	.word	0x08003b55
 8003b34:	08003b5d 	.word	0x08003b5d
 8003b38:	08003b65 	.word	0x08003b65
 8003b3c:	08003b7b 	.word	0x08003b7b
 8003b40:	08003b6b 	.word	0x08003b6b
 8003b44:	08003b7b 	.word	0x08003b7b
 8003b48:	08003b7b 	.word	0x08003b7b
 8003b4c:	08003b7b 	.word	0x08003b7b
 8003b50:	08003b73 	.word	0x08003b73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b54:	f7fe ff6e 	bl	8002a34 <HAL_RCC_GetPCLK1Freq>
 8003b58:	61f8      	str	r0, [r7, #28]
        break;
 8003b5a:	e014      	b.n	8003b86 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b5c:	f7fe ff80 	bl	8002a60 <HAL_RCC_GetPCLK2Freq>
 8003b60:	61f8      	str	r0, [r7, #28]
        break;
 8003b62:	e010      	b.n	8003b86 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b64:	4b1e      	ldr	r3, [pc, #120]	@ (8003be0 <UART_SetConfig+0x56c>)
 8003b66:	61fb      	str	r3, [r7, #28]
        break;
 8003b68:	e00d      	b.n	8003b86 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b6a:	f7fe fecb 	bl	8002904 <HAL_RCC_GetSysClockFreq>
 8003b6e:	61f8      	str	r0, [r7, #28]
        break;
 8003b70:	e009      	b.n	8003b86 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b76:	61fb      	str	r3, [r7, #28]
        break;
 8003b78:	e005      	b.n	8003b86 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003b84:	bf00      	nop
    }

    if (pclk != 0U)
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d019      	beq.n	8003bc0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	085a      	lsrs	r2, r3, #1
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	441a      	add	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	2b0f      	cmp	r3, #15
 8003ba4:	d909      	bls.n	8003bba <UART_SetConfig+0x546>
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bac:	d205      	bcs.n	8003bba <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	60da      	str	r2, [r3, #12]
 8003bb8:	e002      	b.n	8003bc0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003bcc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3728      	adds	r7, #40	@ 0x28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bda:	bf00      	nop
 8003bdc:	40008000 	.word	0x40008000
 8003be0:	00f42400 	.word	0x00f42400

08003be4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf0:	f003 0308 	and.w	r3, r3, #8
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00a      	beq.n	8003c0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00a      	beq.n	8003c30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00a      	beq.n	8003c52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c56:	f003 0304 	and.w	r3, r3, #4
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00a      	beq.n	8003c74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c78:	f003 0310 	and.w	r3, r3, #16
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00a      	beq.n	8003c96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9a:	f003 0320 	and.w	r3, r3, #32
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d01a      	beq.n	8003cfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ce2:	d10a      	bne.n	8003cfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	605a      	str	r2, [r3, #4]
  }
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b098      	sub	sp, #96	@ 0x60
 8003d2c:	af02      	add	r7, sp, #8
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d38:	f7fc fff8 	bl	8000d2c <HAL_GetTick>
 8003d3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0308 	and.w	r3, r3, #8
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d12e      	bne.n	8003daa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d54:	2200      	movs	r2, #0
 8003d56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f88c 	bl	8003e78 <UART_WaitOnFlagUntilTimeout>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d021      	beq.n	8003daa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d6e:	e853 3f00 	ldrex	r3, [r3]
 8003d72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	461a      	mov	r2, r3
 8003d82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d84:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d86:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d8c:	e841 2300 	strex	r3, r2, [r1]
 8003d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1e6      	bne.n	8003d66 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e062      	b.n	8003e70 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b04      	cmp	r3, #4
 8003db6:	d149      	bne.n	8003e4c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003db8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f000 f856 	bl	8003e78 <UART_WaitOnFlagUntilTimeout>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d03c      	beq.n	8003e4c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dda:	e853 3f00 	ldrex	r3, [r3]
 8003dde:	623b      	str	r3, [r7, #32]
   return(result);
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	461a      	mov	r2, r3
 8003dee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003df0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003df2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003df6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003df8:	e841 2300 	strex	r3, r2, [r1]
 8003dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1e6      	bne.n	8003dd2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	3308      	adds	r3, #8
 8003e0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	e853 3f00 	ldrex	r3, [r3]
 8003e12:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f023 0301 	bic.w	r3, r3, #1
 8003e1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	3308      	adds	r3, #8
 8003e22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e24:	61fa      	str	r2, [r7, #28]
 8003e26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e28:	69b9      	ldr	r1, [r7, #24]
 8003e2a:	69fa      	ldr	r2, [r7, #28]
 8003e2c:	e841 2300 	strex	r3, r2, [r1]
 8003e30:	617b      	str	r3, [r7, #20]
   return(result);
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1e5      	bne.n	8003e04 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e011      	b.n	8003e70 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2220      	movs	r2, #32
 8003e56:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3758      	adds	r7, #88	@ 0x58
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	603b      	str	r3, [r7, #0]
 8003e84:	4613      	mov	r3, r2
 8003e86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e88:	e049      	b.n	8003f1e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e90:	d045      	beq.n	8003f1e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e92:	f7fc ff4b 	bl	8000d2c <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d302      	bcc.n	8003ea8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e048      	b.n	8003f3e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0304 	and.w	r3, r3, #4
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d031      	beq.n	8003f1e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	f003 0308 	and.w	r3, r3, #8
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d110      	bne.n	8003eea <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2208      	movs	r2, #8
 8003ece:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 f838 	bl	8003f46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2208      	movs	r2, #8
 8003eda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e029      	b.n	8003f3e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ef4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ef8:	d111      	bne.n	8003f1e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 f81e 	bl	8003f46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2220      	movs	r2, #32
 8003f0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e00f      	b.n	8003f3e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69da      	ldr	r2, [r3, #28]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	4013      	ands	r3, r2
 8003f28:	68ba      	ldr	r2, [r7, #8]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	bf0c      	ite	eq
 8003f2e:	2301      	moveq	r3, #1
 8003f30:	2300      	movne	r3, #0
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	461a      	mov	r2, r3
 8003f36:	79fb      	ldrb	r3, [r7, #7]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d0a6      	beq.n	8003e8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}

08003f46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f46:	b480      	push	{r7}
 8003f48:	b095      	sub	sp, #84	@ 0x54
 8003f4a:	af00      	add	r7, sp, #0
 8003f4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f56:	e853 3f00 	ldrex	r3, [r3]
 8003f5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	461a      	mov	r2, r3
 8003f6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f6e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f74:	e841 2300 	strex	r3, r2, [r1]
 8003f78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1e6      	bne.n	8003f4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3308      	adds	r3, #8
 8003f86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	e853 3f00 	ldrex	r3, [r3]
 8003f8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	f023 0301 	bic.w	r3, r3, #1
 8003f96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	3308      	adds	r3, #8
 8003f9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fa0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003fa6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fa8:	e841 2300 	strex	r3, r2, [r1]
 8003fac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1e5      	bne.n	8003f80 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d118      	bne.n	8003fee <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	e853 3f00 	ldrex	r3, [r3]
 8003fc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f023 0310 	bic.w	r3, r3, #16
 8003fd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fda:	61bb      	str	r3, [r7, #24]
 8003fdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fde:	6979      	ldr	r1, [r7, #20]
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	e841 2300 	strex	r3, r2, [r1]
 8003fe6:	613b      	str	r3, [r7, #16]
   return(result);
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1e6      	bne.n	8003fbc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004002:	bf00      	nop
 8004004:	3754      	adds	r7, #84	@ 0x54
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b084      	sub	sp, #16
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004018:	2300      	movs	r3, #0
 800401a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800401c:	6839      	ldr	r1, [r7, #0]
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f001 fca1 	bl	8005966 <VL53L0X_get_offset_calibration_data_micro_meter>
 8004024:	4603      	mov	r3, r0
 8004026:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8004028:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8004034:	b5b0      	push	{r4, r5, r7, lr}
 8004036:	b096      	sub	sp, #88	@ 0x58
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800403c:	2300      	movs	r3, #0
 800403e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8004042:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004046:	2b00      	cmp	r3, #0
 8004048:	d107      	bne.n	800405a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800404a:	2200      	movs	r2, #0
 800404c:	2188      	movs	r1, #136	@ 0x88
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f004 fe96 	bl	8008d80 <VL53L0X_WrByte>
 8004054:	4603      	mov	r3, r0
 8004056:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004068:	f8a3 2152 	strh.w	r2, [r3, #338]	@ 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8004072:	f8a3 2154 	strh.w	r2, [r3, #340]	@ 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a9e      	ldr	r2, [pc, #632]	@ (80042f4 <VL53L0X_DataInit+0x2c0>)
 800407a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a9d      	ldr	r2, [pc, #628]	@ (80042f8 <VL53L0X_DataInit+0x2c4>)
 8004082:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800408c:	f107 0310 	add.w	r3, r7, #16
 8004090:	4619      	mov	r1, r3
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 fac0 	bl	8004618 <VL53L0X_GetDeviceParameters>
 8004098:	4603      	mov	r3, r0
 800409a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 800409e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d112      	bne.n	80040cc <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 80040a6:	2300      	movs	r3, #0
 80040a8:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 80040aa:	2300      	movs	r3, #0
 80040ac:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f103 0410 	add.w	r4, r3, #16
 80040b4:	f107 0510 	add.w	r5, r7, #16
 80040b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80040c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2264      	movs	r2, #100	@ 0x64
 80040d0:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f44f 7261 	mov.w	r2, #900	@ 0x384
 80040da:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80040e4:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80040ee:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2150 	strb.w	r2, [r3, #336]	@ 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80040fa:	2201      	movs	r2, #1
 80040fc:	2180      	movs	r1, #128	@ 0x80
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f004 fe3e 	bl	8008d80 <VL53L0X_WrByte>
 8004104:	4603      	mov	r3, r0
 8004106:	461a      	mov	r2, r3
 8004108:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800410c:	4313      	orrs	r3, r2
 800410e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004112:	2201      	movs	r2, #1
 8004114:	21ff      	movs	r1, #255	@ 0xff
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f004 fe32 	bl	8008d80 <VL53L0X_WrByte>
 800411c:	4603      	mov	r3, r0
 800411e:	461a      	mov	r2, r3
 8004120:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004124:	4313      	orrs	r3, r2
 8004126:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800412a:	2200      	movs	r2, #0
 800412c:	2100      	movs	r1, #0
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f004 fe26 	bl	8008d80 <VL53L0X_WrByte>
 8004134:	4603      	mov	r3, r0
 8004136:	461a      	mov	r2, r3
 8004138:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800413c:	4313      	orrs	r3, r2
 800413e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8004142:	f107 030f 	add.w	r3, r7, #15
 8004146:	461a      	mov	r2, r3
 8004148:	2191      	movs	r1, #145	@ 0x91
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f004 fe9a 	bl	8008e84 <VL53L0X_RdByte>
 8004150:	4603      	mov	r3, r0
 8004152:	461a      	mov	r2, r3
 8004154:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004158:	4313      	orrs	r3, r2
 800415a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800415e:	7bfa      	ldrb	r2, [r7, #15]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f883 213a 	strb.w	r2, [r3, #314]	@ 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004166:	2201      	movs	r2, #1
 8004168:	2100      	movs	r1, #0
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f004 fe08 	bl	8008d80 <VL53L0X_WrByte>
 8004170:	4603      	mov	r3, r0
 8004172:	461a      	mov	r2, r3
 8004174:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004178:	4313      	orrs	r3, r2
 800417a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800417e:	2200      	movs	r2, #0
 8004180:	21ff      	movs	r1, #255	@ 0xff
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f004 fdfc 	bl	8008d80 <VL53L0X_WrByte>
 8004188:	4603      	mov	r3, r0
 800418a:	461a      	mov	r2, r3
 800418c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004190:	4313      	orrs	r3, r2
 8004192:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004196:	2200      	movs	r2, #0
 8004198:	2180      	movs	r1, #128	@ 0x80
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f004 fdf0 	bl	8008d80 <VL53L0X_WrByte>
 80041a0:	4603      	mov	r3, r0
 80041a2:	461a      	mov	r2, r3
 80041a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80041ae:	2300      	movs	r3, #0
 80041b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80041b2:	e014      	b.n	80041de <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 80041b4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d114      	bne.n	80041e6 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 80041bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041be:	b29b      	uxth	r3, r3
 80041c0:	2201      	movs	r2, #1
 80041c2:	4619      	mov	r1, r3
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 fd31 	bl	8004c2c <VL53L0X_SetLimitCheckEnable>
 80041ca:	4603      	mov	r3, r0
 80041cc:	461a      	mov	r2, r3
 80041ce:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80041d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041da:	3301      	adds	r3, #1
 80041dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80041de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041e0:	2b05      	cmp	r3, #5
 80041e2:	dde7      	ble.n	80041b4 <VL53L0X_DataInit+0x180>
 80041e4:	e000      	b.n	80041e8 <VL53L0X_DataInit+0x1b4>
		else
			break;
 80041e6:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 80041e8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d107      	bne.n	8004200 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80041f0:	2200      	movs	r2, #0
 80041f2:	2102      	movs	r1, #2
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 fd19 	bl	8004c2c <VL53L0X_SetLimitCheckEnable>
 80041fa:	4603      	mov	r3, r0
 80041fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004200:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004204:	2b00      	cmp	r3, #0
 8004206:	d107      	bne.n	8004218 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004208:	2200      	movs	r2, #0
 800420a:	2103      	movs	r1, #3
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 fd0d 	bl	8004c2c <VL53L0X_SetLimitCheckEnable>
 8004212:	4603      	mov	r3, r0
 8004214:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004218:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800421c:	2b00      	cmp	r3, #0
 800421e:	d107      	bne.n	8004230 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004220:	2200      	movs	r2, #0
 8004222:	2104      	movs	r1, #4
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 fd01 	bl	8004c2c <VL53L0X_SetLimitCheckEnable>
 800422a:	4603      	mov	r3, r0
 800422c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8004230:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004234:	2b00      	cmp	r3, #0
 8004236:	d107      	bne.n	8004248 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8004238:	2200      	movs	r2, #0
 800423a:	2105      	movs	r1, #5
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 fcf5 	bl	8004c2c <VL53L0X_SetLimitCheckEnable>
 8004242:	4603      	mov	r3, r0
 8004244:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8004248:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800424c:	2b00      	cmp	r3, #0
 800424e:	d108      	bne.n	8004262 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004250:	f44f 1290 	mov.w	r2, #1179648	@ 0x120000
 8004254:	2100      	movs	r1, #0
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 fd98 	bl	8004d8c <VL53L0X_SetLimitCheckValue>
 800425c:	4603      	mov	r3, r0
 800425e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004262:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004266:	2b00      	cmp	r3, #0
 8004268:	d108      	bne.n	800427c <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800426a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800426e:	2101      	movs	r1, #1
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 fd8b 	bl	8004d8c <VL53L0X_SetLimitCheckValue>
 8004276:	4603      	mov	r3, r0
 8004278:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800427c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8004280:	2b00      	cmp	r3, #0
 8004282:	d108      	bne.n	8004296 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8004284:	f44f 120c 	mov.w	r2, #2293760	@ 0x230000
 8004288:	2102      	movs	r1, #2
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 fd7e 	bl	8004d8c <VL53L0X_SetLimitCheckValue>
 8004290:	4603      	mov	r3, r0
 8004292:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004296:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800429a:	2b00      	cmp	r3, #0
 800429c:	d107      	bne.n	80042ae <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800429e:	2200      	movs	r2, #0
 80042a0:	2103      	movs	r1, #3
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 fd72 	bl	8004d8c <VL53L0X_SetLimitCheckValue>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80042ae:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10f      	bne.n	80042d6 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	22ff      	movs	r2, #255	@ 0xff
 80042ba:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80042be:	22ff      	movs	r2, #255	@ 0xff
 80042c0:	2101      	movs	r1, #1
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f004 fd5c 	bl	8008d80 <VL53L0X_WrByte>
 80042c8:	4603      	mov	r3, r0
 80042ca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 80042d6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d103      	bne.n	80042e6 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 80042e6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3758      	adds	r7, #88	@ 0x58
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bdb0      	pop	{r4, r5, r7, pc}
 80042f2:	bf00      	nop
 80042f4:	00016b85 	.word	0x00016b85
 80042f8:	000970a4 	.word	0x000970a4

080042fc <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80042fc:	b5b0      	push	{r4, r5, r7, lr}
 80042fe:	b09e      	sub	sp, #120	@ 0x78
 8004300:	af02      	add	r7, sp, #8
 8004302:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004304:	2300      	movs	r3, #0
 8004306:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800430a:	f107 031c 	add.w	r3, r7, #28
 800430e:	2240      	movs	r2, #64	@ 0x40
 8004310:	2100      	movs	r1, #0
 8004312:	4618      	mov	r0, r3
 8004314:	f004 fe82 	bl	800901c <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8004318:	2300      	movs	r3, #0
 800431a:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800431c:	2300      	movs	r3, #0
 800431e:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8004320:	2300      	movs	r3, #0
 8004322:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint32_t count = 0;
 8004326:	2300      	movs	r3, #0
 8004328:	663b      	str	r3, [r7, #96]	@ 0x60
	uint8_t isApertureSpads = 0;
 800432a:	2300      	movs	r3, #0
 800432c:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800432e:	2300      	movs	r3, #0
 8004330:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8004332:	2300      	movs	r3, #0
 8004334:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8004338:	2101      	movs	r1, #1
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f002 fa69 	bl	8006812 <VL53L0X_get_info_from_device>
 8004340:	4603      	mov	r3, r0
 8004342:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 800434c:	663b      	str	r3, [r7, #96]	@ 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8004354:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8004358:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800435c:	2b01      	cmp	r3, #1
 800435e:	d80d      	bhi.n	800437c <VL53L0X_StaticInit+0x80>
 8004360:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004364:	2b01      	cmp	r3, #1
 8004366:	d102      	bne.n	800436e <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8004368:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800436a:	2b20      	cmp	r3, #32
 800436c:	d806      	bhi.n	800437c <VL53L0X_StaticInit+0x80>
 800436e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10e      	bne.n	8004394 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8004376:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004378:	2b0c      	cmp	r3, #12
 800437a:	d90b      	bls.n	8004394 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800437c:	f107 0218 	add.w	r2, r7, #24
 8004380:	f107 0314 	add.w	r3, r7, #20
 8004384:	4619      	mov	r1, r3
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f001 fce8 	bl	8005d5c <VL53L0X_perform_ref_spad_management>
 800438c:	4603      	mov	r3, r0
 800438e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8004392:	e009      	b.n	80043a8 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8004394:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8004398:	461a      	mov	r2, r3
 800439a:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f001 fee9 	bl	8006174 <VL53L0X_set_reference_spads>
 80043a2:	4603      	mov	r3, r0
 80043a4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 80043a8:	4b93      	ldr	r3, [pc, #588]	@ (80045f8 <VL53L0X_StaticInit+0x2fc>)
 80043aa:	66bb      	str	r3, [r7, #104]	@ 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 80043ac:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10f      	bne.n	80043d4 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 80043ba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 80043be:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d104      	bne.n	80043d0 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80043cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043ce:	e001      	b.n	80043d4 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 80043d0:	4b89      	ldr	r3, [pc, #548]	@ (80045f8 <VL53L0X_StaticInit+0x2fc>)
 80043d2:	66bb      	str	r3, [r7, #104]	@ 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 80043d4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d106      	bne.n	80043ea <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80043dc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f003 fdb8 	bl	8007f54 <VL53L0X_load_tuning_settings>
 80043e4:	4603      	mov	r3, r0
 80043e6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80043ea:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10a      	bne.n	8004408 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80043f2:	2300      	movs	r3, #0
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	2304      	movs	r3, #4
 80043f8:	2200      	movs	r2, #0
 80043fa:	2100      	movs	r1, #0
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f001 f8e5 	bl	80055cc <VL53L0X_SetGpioConfig>
 8004402:	4603      	mov	r3, r0
 8004404:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004408:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800440c:	2b00      	cmp	r3, #0
 800440e:	d121      	bne.n	8004454 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004410:	2201      	movs	r2, #1
 8004412:	21ff      	movs	r1, #255	@ 0xff
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f004 fcb3 	bl	8008d80 <VL53L0X_WrByte>
 800441a:	4603      	mov	r3, r0
 800441c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8004420:	f107 031a 	add.w	r3, r7, #26
 8004424:	461a      	mov	r2, r3
 8004426:	2184      	movs	r1, #132	@ 0x84
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f004 fd55 	bl	8008ed8 <VL53L0X_RdWord>
 800442e:	4603      	mov	r3, r0
 8004430:	461a      	mov	r2, r3
 8004432:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8004436:	4313      	orrs	r3, r2
 8004438:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800443c:	2200      	movs	r2, #0
 800443e:	21ff      	movs	r1, #255	@ 0xff
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f004 fc9d 	bl	8008d80 <VL53L0X_WrByte>
 8004446:	4603      	mov	r3, r0
 8004448:	461a      	mov	r2, r3
 800444a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800444e:	4313      	orrs	r3, r2
 8004450:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004454:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8004458:	2b00      	cmp	r3, #0
 800445a:	d104      	bne.n	8004466 <VL53L0X_StaticInit+0x16a>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800445c:	8b7b      	ldrh	r3, [r7, #26]
 800445e:	011a      	lsls	r2, r3, #4
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8004466:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800446a:	2b00      	cmp	r3, #0
 800446c:	d108      	bne.n	8004480 <VL53L0X_StaticInit+0x184>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800446e:	f107 031c 	add.w	r3, r7, #28
 8004472:	4619      	mov	r1, r3
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f000 f8cf 	bl	8004618 <VL53L0X_GetDeviceParameters>
 800447a:	4603      	mov	r3, r0
 800447c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8004480:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8004484:	2b00      	cmp	r3, #0
 8004486:	d110      	bne.n	80044aa <VL53L0X_StaticInit+0x1ae>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8004488:	f107 0319 	add.w	r3, r7, #25
 800448c:	4619      	mov	r1, r3
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f991 	bl	80047b6 <VL53L0X_GetFractionEnable>
 8004494:	4603      	mov	r3, r0
 8004496:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 800449a:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d103      	bne.n	80044aa <VL53L0X_StaticInit+0x1ae>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80044a2:	7e7a      	ldrb	r2, [r7, #25]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 80044aa:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10e      	bne.n	80044d0 <VL53L0X_StaticInit+0x1d4>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f103 0410 	add.w	r4, r3, #16
 80044b8:	f107 051c 	add.w	r5, r7, #28
 80044bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80044cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 80044d0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d111      	bne.n	80044fc <VL53L0X_StaticInit+0x200>
		Status = VL53L0X_RdByte(Dev,
 80044d8:	f107 0319 	add.w	r3, r7, #25
 80044dc:	461a      	mov	r2, r3
 80044de:	2101      	movs	r1, #1
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f004 fccf 	bl	8008e84 <VL53L0X_RdByte>
 80044e6:	4603      	mov	r3, r0
 80044e8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80044ec:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d103      	bne.n	80044fc <VL53L0X_StaticInit+0x200>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80044f4:	7e7a      	ldrb	r2, [r7, #25]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80044fc:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8004500:	2b00      	cmp	r3, #0
 8004502:	d107      	bne.n	8004514 <VL53L0X_StaticInit+0x218>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8004504:	2200      	movs	r2, #0
 8004506:	2100      	movs	r1, #0
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f9c9 	bl	80048a0 <VL53L0X_SetSequenceStepEnable>
 800450e:	4603      	mov	r3, r0
 8004510:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8004514:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8004518:	2b00      	cmp	r3, #0
 800451a:	d107      	bne.n	800452c <VL53L0X_StaticInit+0x230>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800451c:	2200      	movs	r2, #0
 800451e:	2102      	movs	r1, #2
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f9bd 	bl	80048a0 <VL53L0X_SetSequenceStepEnable>
 8004526:	4603      	mov	r3, r0
 8004528:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800452c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8004530:	2b00      	cmp	r3, #0
 8004532:	d103      	bne.n	800453c <VL53L0X_StaticInit+0x240>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2203      	movs	r2, #3
 8004538:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800453c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8004540:	2b00      	cmp	r3, #0
 8004542:	d109      	bne.n	8004558 <VL53L0X_StaticInit+0x25c>
		Status = VL53L0X_GetVcselPulsePeriod(
 8004544:	f107 0313 	add.w	r3, r7, #19
 8004548:	461a      	mov	r2, r3
 800454a:	2100      	movs	r1, #0
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 f98f 	bl	8004870 <VL53L0X_GetVcselPulsePeriod>
 8004552:	4603      	mov	r3, r0
 8004554:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004558:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800455c:	2b00      	cmp	r3, #0
 800455e:	d103      	bne.n	8004568 <VL53L0X_StaticInit+0x26c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004560:	7cfa      	ldrb	r2, [r7, #19]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8004568:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800456c:	2b00      	cmp	r3, #0
 800456e:	d109      	bne.n	8004584 <VL53L0X_StaticInit+0x288>
		Status = VL53L0X_GetVcselPulsePeriod(
 8004570:	f107 0313 	add.w	r3, r7, #19
 8004574:	461a      	mov	r2, r3
 8004576:	2101      	movs	r1, #1
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f979 	bl	8004870 <VL53L0X_GetVcselPulsePeriod>
 800457e:	4603      	mov	r3, r0
 8004580:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004584:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8004588:	2b00      	cmp	r3, #0
 800458a:	d103      	bne.n	8004594 <VL53L0X_StaticInit+0x298>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800458c:	7cfa      	ldrb	r2, [r7, #19]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8004594:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8004598:	2b00      	cmp	r3, #0
 800459a:	d109      	bne.n	80045b0 <VL53L0X_StaticInit+0x2b4>
		Status = get_sequence_step_timeout(
 800459c:	f107 030c 	add.w	r3, r7, #12
 80045a0:	461a      	mov	r2, r3
 80045a2:	2103      	movs	r1, #3
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f002 feb3 	bl	8007310 <get_sequence_step_timeout>
 80045aa:	4603      	mov	r3, r0
 80045ac:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80045b0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d103      	bne.n	80045c0 <VL53L0X_StaticInit+0x2c4>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80045c0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d109      	bne.n	80045dc <VL53L0X_StaticInit+0x2e0>
		Status = get_sequence_step_timeout(
 80045c8:	f107 030c 	add.w	r3, r7, #12
 80045cc:	461a      	mov	r2, r3
 80045ce:	2104      	movs	r1, #4
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f002 fe9d 	bl	8007310 <get_sequence_step_timeout>
 80045d6:	4603      	mov	r3, r0
 80045d8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80045dc:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d103      	bne.n	80045ec <VL53L0X_StaticInit+0x2f0>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80045ec:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3770      	adds	r7, #112	@ 0x70
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bdb0      	pop	{r4, r5, r7, pc}
 80045f8:	20000010 	.word	0x20000010

080045fc <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8004604:	239d      	movs	r3, #157	@ 0x9d
 8004606:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8004608:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004622:	2300      	movs	r3, #0
 8004624:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	4619      	mov	r1, r3
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f8b0 	bl	8004790 <VL53L0X_GetDeviceMode>
 8004630:	4603      	mov	r3, r0
 8004632:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d107      	bne.n	800464c <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	3308      	adds	r3, #8
 8004640:	4619      	mov	r1, r3
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 fa76 	bl	8004b34 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8004648:	4603      	mov	r3, r0
 800464a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800464c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d102      	bne.n	800465a <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	2200      	movs	r2, #0
 8004658:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800465a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d107      	bne.n	8004672 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	3310      	adds	r3, #16
 8004666:	4619      	mov	r1, r3
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 faac 	bl	8004bc6 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800466e:	4603      	mov	r3, r0
 8004670:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8004672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d107      	bne.n	800468a <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	3314      	adds	r3, #20
 800467e:	4619      	mov	r1, r3
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7ff fcc4 	bl	800400e <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8004686:	4603      	mov	r3, r0
 8004688:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800468a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d134      	bne.n	80046fc <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8004692:	2300      	movs	r3, #0
 8004694:	60bb      	str	r3, [r7, #8]
 8004696:	e02a      	b.n	80046ee <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8004698:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d12a      	bne.n	80046f6 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	b299      	uxth	r1, r3
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	3308      	adds	r3, #8
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	683a      	ldr	r2, [r7, #0]
 80046ac:	4413      	add	r3, r2
 80046ae:	3304      	adds	r3, #4
 80046b0:	461a      	mov	r2, r3
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 fbcc 	bl	8004e50 <VL53L0X_GetLimitCheckValue>
 80046b8:	4603      	mov	r3, r0
 80046ba:	461a      	mov	r2, r3
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
 80046be:	4313      	orrs	r3, r2
 80046c0:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80046c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d117      	bne.n	80046fa <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	b299      	uxth	r1, r3
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	3318      	adds	r3, #24
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	4413      	add	r3, r2
 80046d6:	461a      	mov	r2, r3
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 fb33 	bl	8004d44 <VL53L0X_GetLimitCheckEnable>
 80046de:	4603      	mov	r3, r0
 80046e0:	461a      	mov	r2, r3
 80046e2:	7bfb      	ldrb	r3, [r7, #15]
 80046e4:	4313      	orrs	r3, r2
 80046e6:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	3301      	adds	r3, #1
 80046ec:	60bb      	str	r3, [r7, #8]
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2b05      	cmp	r3, #5
 80046f2:	ddd1      	ble.n	8004698 <VL53L0X_GetDeviceParameters+0x80>
 80046f4:	e002      	b.n	80046fc <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80046f6:	bf00      	nop
 80046f8:	e000      	b.n	80046fc <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80046fa:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80046fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d107      	bne.n	8004714 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	333c      	adds	r3, #60	@ 0x3c
 8004708:	4619      	mov	r1, r3
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 fc2e 	bl	8004f6c <VL53L0X_GetWrapAroundCheckEnable>
 8004710:	4603      	mov	r3, r0
 8004712:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8004714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d107      	bne.n	800472c <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	3304      	adds	r3, #4
 8004720:	4619      	mov	r1, r3
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f879 	bl	800481a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8004728:	4603      	mov	r3, r0
 800472a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800472c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	460b      	mov	r3, r1
 8004742:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004744:	2300      	movs	r3, #0
 8004746:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8004748:	78fb      	ldrb	r3, [r7, #3]
 800474a:	2b15      	cmp	r3, #21
 800474c:	bf8c      	ite	hi
 800474e:	2201      	movhi	r2, #1
 8004750:	2200      	movls	r2, #0
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	2a00      	cmp	r2, #0
 8004756:	d10f      	bne.n	8004778 <VL53L0X_SetDeviceMode+0x40>
 8004758:	4a0c      	ldr	r2, [pc, #48]	@ (800478c <VL53L0X_SetDeviceMode+0x54>)
 800475a:	fa22 f303 	lsr.w	r3, r2, r3
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	bf14      	ite	ne
 8004766:	2301      	movne	r3, #1
 8004768:	2300      	moveq	r3, #0
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <VL53L0X_SetDeviceMode+0x40>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	78fa      	ldrb	r2, [r7, #3]
 8004774:	741a      	strb	r2, [r3, #16]
		break;
 8004776:	e001      	b.n	800477c <VL53L0X_SetDeviceMode+0x44>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8004778:	23f8      	movs	r3, #248	@ 0xf8
 800477a:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800477c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004780:	4618      	mov	r0, r3
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	0030000b 	.word	0x0030000b

08004790 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800479a:	2300      	movs	r3, #0
 800479c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	7c1a      	ldrb	r2, [r3, #16]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80047a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b084      	sub	sp, #16
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
 80047be:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80047c0:	2300      	movs	r3, #0
 80047c2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	2109      	movs	r1, #9
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f004 fb5b 	bl	8008e84 <VL53L0X_RdByte>
 80047ce:	4603      	mov	r3, r0
 80047d0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80047d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d106      	bne.n	80047e8 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80047e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80047fe:	2300      	movs	r3, #0
 8004800:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8004802:	6839      	ldr	r1, [r7, #0]
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f003 fa13 	bl	8007c30 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800480a:	4603      	mov	r3, r0
 800480c:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800480e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004812:	4618      	mov	r0, r3
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b084      	sub	sp, #16
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
 8004822:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004824:	2300      	movs	r3, #0
 8004826:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8004828:	6839      	ldr	r1, [r7, #0]
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f003 fae0 	bl	8007df0 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8004830:	4603      	mov	r3, r0
 8004832:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8004834:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3710      	adds	r7, #16
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	460b      	mov	r3, r1
 800484a:	70fb      	strb	r3, [r7, #3]
 800484c:	4613      	mov	r3, r2
 800484e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004850:	2300      	movs	r3, #0
 8004852:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8004854:	78ba      	ldrb	r2, [r7, #2]
 8004856:	78fb      	ldrb	r3, [r7, #3]
 8004858:	4619      	mov	r1, r3
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f002 ff2a 	bl	80076b4 <VL53L0X_set_vcsel_pulse_period>
 8004860:	4603      	mov	r3, r0
 8004862:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8004864:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004868:	4618      	mov	r0, r3
 800486a:	3710      	adds	r7, #16
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	460b      	mov	r3, r1
 800487a:	607a      	str	r2, [r7, #4]
 800487c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800487e:	2300      	movs	r3, #0
 8004880:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8004882:	7afb      	ldrb	r3, [r7, #11]
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	4619      	mov	r1, r3
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f003 f99a 	bl	8007bc2 <VL53L0X_get_vcsel_pulse_period>
 800488e:	4603      	mov	r3, r0
 8004890:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8004892:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004896:	4618      	mov	r0, r3
 8004898:	3718      	adds	r7, #24
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	460b      	mov	r3, r1
 80048aa:	70fb      	strb	r3, [r7, #3]
 80048ac:	4613      	mov	r3, r2
 80048ae:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80048b0:	2300      	movs	r3, #0
 80048b2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80048b4:	2300      	movs	r3, #0
 80048b6:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80048b8:	2300      	movs	r3, #0
 80048ba:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80048bc:	f107 030f 	add.w	r3, r7, #15
 80048c0:	461a      	mov	r2, r3
 80048c2:	2101      	movs	r1, #1
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f004 fadd 	bl	8008e84 <VL53L0X_RdByte>
 80048ca:	4603      	mov	r3, r0
 80048cc:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80048ce:	7bfb      	ldrb	r3, [r7, #15]
 80048d0:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80048d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d159      	bne.n	800498e <VL53L0X_SetSequenceStepEnable+0xee>
		if (SequenceStepEnabled == 1) {
 80048da:	78bb      	ldrb	r3, [r7, #2]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d12b      	bne.n	8004938 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80048e0:	78fb      	ldrb	r3, [r7, #3]
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d825      	bhi.n	8004932 <VL53L0X_SetSequenceStepEnable+0x92>
 80048e6:	a201      	add	r2, pc, #4	@ (adr r2, 80048ec <VL53L0X_SetSequenceStepEnable+0x4c>)
 80048e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ec:	08004901 	.word	0x08004901
 80048f0:	0800490b 	.word	0x0800490b
 80048f4:	08004915 	.word	0x08004915
 80048f8:	0800491f 	.word	0x0800491f
 80048fc:	08004929 	.word	0x08004929
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8004900:	7dbb      	ldrb	r3, [r7, #22]
 8004902:	f043 0310 	orr.w	r3, r3, #16
 8004906:	75bb      	strb	r3, [r7, #22]
				break;
 8004908:	e041      	b.n	800498e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800490a:	7dbb      	ldrb	r3, [r7, #22]
 800490c:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8004910:	75bb      	strb	r3, [r7, #22]
				break;
 8004912:	e03c      	b.n	800498e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8004914:	7dbb      	ldrb	r3, [r7, #22]
 8004916:	f043 0304 	orr.w	r3, r3, #4
 800491a:	75bb      	strb	r3, [r7, #22]
				break;
 800491c:	e037      	b.n	800498e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800491e:	7dbb      	ldrb	r3, [r7, #22]
 8004920:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004924:	75bb      	strb	r3, [r7, #22]
				break;
 8004926:	e032      	b.n	800498e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8004928:	7dbb      	ldrb	r3, [r7, #22]
 800492a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800492e:	75bb      	strb	r3, [r7, #22]
				break;
 8004930:	e02d      	b.n	800498e <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004932:	23fc      	movs	r3, #252	@ 0xfc
 8004934:	75fb      	strb	r3, [r7, #23]
 8004936:	e02a      	b.n	800498e <VL53L0X_SetSequenceStepEnable+0xee>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8004938:	78fb      	ldrb	r3, [r7, #3]
 800493a:	2b04      	cmp	r3, #4
 800493c:	d825      	bhi.n	800498a <VL53L0X_SetSequenceStepEnable+0xea>
 800493e:	a201      	add	r2, pc, #4	@ (adr r2, 8004944 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8004940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004944:	08004959 	.word	0x08004959
 8004948:	08004963 	.word	0x08004963
 800494c:	0800496d 	.word	0x0800496d
 8004950:	08004977 	.word	0x08004977
 8004954:	08004981 	.word	0x08004981
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8004958:	7dbb      	ldrb	r3, [r7, #22]
 800495a:	f023 0310 	bic.w	r3, r3, #16
 800495e:	75bb      	strb	r3, [r7, #22]
				break;
 8004960:	e015      	b.n	800498e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8004962:	7dbb      	ldrb	r3, [r7, #22]
 8004964:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8004968:	75bb      	strb	r3, [r7, #22]
				break;
 800496a:	e010      	b.n	800498e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800496c:	7dbb      	ldrb	r3, [r7, #22]
 800496e:	f023 0304 	bic.w	r3, r3, #4
 8004972:	75bb      	strb	r3, [r7, #22]
				break;
 8004974:	e00b      	b.n	800498e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8004976:	7dbb      	ldrb	r3, [r7, #22]
 8004978:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800497c:	75bb      	strb	r3, [r7, #22]
				break;
 800497e:	e006      	b.n	800498e <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8004980:	7dbb      	ldrb	r3, [r7, #22]
 8004982:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004986:	75bb      	strb	r3, [r7, #22]
				break;
 8004988:	e001      	b.n	800498e <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800498a:	23fc      	movs	r3, #252	@ 0xfc
 800498c:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 800498e:	7bfb      	ldrb	r3, [r7, #15]
 8004990:	7dba      	ldrb	r2, [r7, #22]
 8004992:	429a      	cmp	r2, r3
 8004994:	d01e      	beq.n	80049d4 <VL53L0X_SetSequenceStepEnable+0x134>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8004996:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d107      	bne.n	80049ae <VL53L0X_SetSequenceStepEnable+0x10e>
			Status = VL53L0X_WrByte(Dev,
 800499e:	7dbb      	ldrb	r3, [r7, #22]
 80049a0:	461a      	mov	r2, r3
 80049a2:	2101      	movs	r1, #1
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f004 f9eb 	bl	8008d80 <VL53L0X_WrByte>
 80049aa:	4603      	mov	r3, r0
 80049ac:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80049ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d103      	bne.n	80049be <VL53L0X_SetSequenceStepEnable+0x11e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	7dba      	ldrb	r2, [r7, #22]
 80049ba:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80049be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d106      	bne.n	80049d4 <VL53L0X_SetSequenceStepEnable+0x134>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80049cc:	6939      	ldr	r1, [r7, #16]
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7ff ff10 	bl	80047f4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80049d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3718      	adds	r7, #24
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	607b      	str	r3, [r7, #4]
 80049ea:	460b      	mov	r3, r1
 80049ec:	72fb      	strb	r3, [r7, #11]
 80049ee:	4613      	mov	r3, r2
 80049f0:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80049f2:	2300      	movs	r3, #0
 80049f4:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80049fc:	7afb      	ldrb	r3, [r7, #11]
 80049fe:	2b04      	cmp	r3, #4
 8004a00:	d836      	bhi.n	8004a70 <sequence_step_enabled+0x90>
 8004a02:	a201      	add	r2, pc, #4	@ (adr r2, 8004a08 <sequence_step_enabled+0x28>)
 8004a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a08:	08004a1d 	.word	0x08004a1d
 8004a0c:	08004a2f 	.word	0x08004a2f
 8004a10:	08004a41 	.word	0x08004a41
 8004a14:	08004a53 	.word	0x08004a53
 8004a18:	08004a65 	.word	0x08004a65
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8004a1c:	7abb      	ldrb	r3, [r7, #10]
 8004a1e:	111b      	asrs	r3, r3, #4
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	701a      	strb	r2, [r3, #0]
		break;
 8004a2c:	e022      	b.n	8004a74 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8004a2e:	7abb      	ldrb	r3, [r7, #10]
 8004a30:	10db      	asrs	r3, r3, #3
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	701a      	strb	r2, [r3, #0]
		break;
 8004a3e:	e019      	b.n	8004a74 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8004a40:	7abb      	ldrb	r3, [r7, #10]
 8004a42:	109b      	asrs	r3, r3, #2
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	701a      	strb	r2, [r3, #0]
		break;
 8004a50:	e010      	b.n	8004a74 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8004a52:	7abb      	ldrb	r3, [r7, #10]
 8004a54:	119b      	asrs	r3, r3, #6
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	701a      	strb	r2, [r3, #0]
		break;
 8004a62:	e007      	b.n	8004a74 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8004a64:	7abb      	ldrb	r3, [r7, #10]
 8004a66:	09db      	lsrs	r3, r3, #7
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	701a      	strb	r2, [r3, #0]
		break;
 8004a6e:	e001      	b.n	8004a74 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004a70:	23fc      	movs	r3, #252	@ 0xfc
 8004a72:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004a74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	371c      	adds	r7, #28
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8004a92:	2300      	movs	r3, #0
 8004a94:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8004a96:	f107 030e 	add.w	r3, r7, #14
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	2101      	movs	r1, #1
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f004 f9f0 	bl	8008e84 <VL53L0X_RdByte>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8004aa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d107      	bne.n	8004ac0 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8004ab0:	7bba      	ldrb	r2, [r7, #14]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f7ff ff92 	bl	80049e0 <sequence_step_enabled>
 8004abc:	4603      	mov	r3, r0
 8004abe:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004ac0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d108      	bne.n	8004ada <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8004ac8:	7bba      	ldrb	r2, [r7, #14]
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	3302      	adds	r3, #2
 8004ace:	2101      	movs	r1, #1
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7ff ff85 	bl	80049e0 <sequence_step_enabled>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d108      	bne.n	8004af4 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8004ae2:	7bba      	ldrb	r2, [r7, #14]
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	2102      	movs	r1, #2
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7ff ff78 	bl	80049e0 <sequence_step_enabled>
 8004af0:	4603      	mov	r3, r0
 8004af2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d108      	bne.n	8004b0e <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8004afc:	7bba      	ldrb	r2, [r7, #14]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	3303      	adds	r3, #3
 8004b02:	2103      	movs	r1, #3
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7ff ff6b 	bl	80049e0 <sequence_step_enabled>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d108      	bne.n	8004b28 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8004b16:	7bba      	ldrb	r2, [r7, #14]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	2104      	movs	r1, #4
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7ff ff5e 	bl	80049e0 <sequence_step_enabled>
 8004b24:	4603      	mov	r3, r0
 8004b26:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8004b42:	f107 030c 	add.w	r3, r7, #12
 8004b46:	461a      	mov	r2, r3
 8004b48:	21f8      	movs	r1, #248	@ 0xf8
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f004 f9c4 	bl	8008ed8 <VL53L0X_RdWord>
 8004b50:	4603      	mov	r3, r0
 8004b52:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8004b54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d108      	bne.n	8004b6e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8004b5c:	f107 0308 	add.w	r3, r7, #8
 8004b60:	461a      	mov	r2, r3
 8004b62:	2104      	movs	r1, #4
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f004 f9ed 	bl	8008f44 <VL53L0X_RdDWord>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10c      	bne.n	8004b90 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8004b76:	89bb      	ldrh	r3, [r7, #12]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d005      	beq.n	8004b88 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	89ba      	ldrh	r2, [r7, #12]
 8004b80:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	7f1b      	ldrb	r3, [r3, #28]
 8004bae:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	7bba      	ldrb	r2, [r7, #14]
 8004bb4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8004bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b086      	sub	sp, #24
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
 8004bce:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8004bd4:	f107 030e 	add.w	r3, r7, #14
 8004bd8:	461a      	mov	r2, r3
 8004bda:	2120      	movs	r1, #32
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f004 f97b 	bl	8008ed8 <VL53L0X_RdWord>
 8004be2:	4603      	mov	r3, r0
 8004be4:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8004be6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d118      	bne.n	8004c20 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8004bee:	89fb      	ldrh	r3, [r7, #14]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d109      	bne.n	8004c08 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	771a      	strb	r2, [r3, #28]
 8004c06:	e00b      	b.n	8004c20 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8004c08:	89fb      	ldrh	r3, [r7, #14]
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004c20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3718      	adds	r7, #24
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	460b      	mov	r3, r1
 8004c36:	807b      	strh	r3, [r7, #2]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8004c40:	2300      	movs	r3, #0
 8004c42:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8004c44:	2300      	movs	r3, #0
 8004c46:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004c4c:	887b      	ldrh	r3, [r7, #2]
 8004c4e:	2b05      	cmp	r3, #5
 8004c50:	d902      	bls.n	8004c58 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004c52:	23fc      	movs	r3, #252	@ 0xfc
 8004c54:	75fb      	strb	r3, [r7, #23]
 8004c56:	e05b      	b.n	8004d10 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8004c58:	787b      	ldrb	r3, [r7, #1]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d106      	bne.n	8004c6c <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8004c62:	2300      	movs	r3, #0
 8004c64:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8004c66:	2301      	movs	r3, #1
 8004c68:	73bb      	strb	r3, [r7, #14]
 8004c6a:	e00a      	b.n	8004c82 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004c6c:	887b      	ldrh	r3, [r7, #2]
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	330c      	adds	r3, #12
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8004c82:	887b      	ldrh	r3, [r7, #2]
 8004c84:	2b05      	cmp	r3, #5
 8004c86:	d841      	bhi.n	8004d0c <VL53L0X_SetLimitCheckEnable+0xe0>
 8004c88:	a201      	add	r2, pc, #4	@ (adr r2, 8004c90 <VL53L0X_SetLimitCheckEnable+0x64>)
 8004c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8e:	bf00      	nop
 8004c90:	08004ca9 	.word	0x08004ca9
 8004c94:	08004cb3 	.word	0x08004cb3
 8004c98:	08004cc9 	.word	0x08004cc9
 8004c9c:	08004cd3 	.word	0x08004cd3
 8004ca0:	08004cdd 	.word	0x08004cdd
 8004ca4:	08004cf5 	.word	0x08004cf5

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	7bfa      	ldrb	r2, [r7, #15]
 8004cac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8004cb0:	e02e      	b.n	8004d10 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	461a      	mov	r2, r3
 8004cba:	2144      	movs	r1, #68	@ 0x44
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f004 f883 	bl	8008dc8 <VL53L0X_WrWord>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	75fb      	strb	r3, [r7, #23]

			break;
 8004cc6:	e023      	b.n	8004d10 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	7bfa      	ldrb	r2, [r7, #15]
 8004ccc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8004cd0:	e01e      	b.n	8004d10 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	7bfa      	ldrb	r2, [r7, #15]
 8004cd6:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8004cda:	e019      	b.n	8004d10 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8004cdc:	7bbb      	ldrb	r3, [r7, #14]
 8004cde:	005b      	lsls	r3, r3, #1
 8004ce0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8004ce2:	7b7b      	ldrb	r3, [r7, #13]
 8004ce4:	22fe      	movs	r2, #254	@ 0xfe
 8004ce6:	2160      	movs	r1, #96	@ 0x60
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f004 f897 	bl	8008e1c <VL53L0X_UpdateByte>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8004cf2:	e00d      	b.n	8004d10 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8004cf4:	7bbb      	ldrb	r3, [r7, #14]
 8004cf6:	011b      	lsls	r3, r3, #4
 8004cf8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8004cfa:	7b7b      	ldrb	r3, [r7, #13]
 8004cfc:	22ef      	movs	r2, #239	@ 0xef
 8004cfe:	2160      	movs	r1, #96	@ 0x60
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f004 f88b 	bl	8008e1c <VL53L0X_UpdateByte>
 8004d06:	4603      	mov	r3, r0
 8004d08:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8004d0a:	e001      	b.n	8004d10 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004d0c:	23fc      	movs	r3, #252	@ 0xfc
 8004d0e:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004d10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10f      	bne.n	8004d38 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8004d18:	787b      	ldrb	r3, [r7, #1]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d106      	bne.n	8004d2c <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004d1e:	887b      	ldrh	r3, [r7, #2]
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	4413      	add	r3, r2
 8004d24:	2200      	movs	r2, #0
 8004d26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8004d2a:	e005      	b.n	8004d38 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004d2c:	887b      	ldrh	r3, [r7, #2]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	4413      	add	r3, r2
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004d38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	607a      	str	r2, [r7, #4]
 8004d50:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d52:	2300      	movs	r3, #0
 8004d54:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004d56:	897b      	ldrh	r3, [r7, #10]
 8004d58:	2b05      	cmp	r3, #5
 8004d5a:	d905      	bls.n	8004d68 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004d5c:	23fc      	movs	r3, #252	@ 0xfc
 8004d5e:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	701a      	strb	r2, [r3, #0]
 8004d66:	e008      	b.n	8004d7a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004d68:	897b      	ldrh	r3, [r7, #10]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d72:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	7dba      	ldrb	r2, [r7, #22]
 8004d78:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004d7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	371c      	adds	r7, #28
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
	...

08004d8c <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	460b      	mov	r3, r1
 8004d96:	607a      	str	r2, [r7, #4]
 8004d98:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8004d9e:	897b      	ldrh	r3, [r7, #10]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	4413      	add	r3, r2
 8004da4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004da8:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8004daa:	7dbb      	ldrb	r3, [r7, #22]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d107      	bne.n	8004dc0 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004db0:	897b      	ldrh	r3, [r7, #10]
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	330c      	adds	r3, #12
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	605a      	str	r2, [r3, #4]
 8004dbe:	e040      	b.n	8004e42 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8004dc0:	897b      	ldrh	r3, [r7, #10]
 8004dc2:	2b05      	cmp	r3, #5
 8004dc4:	d830      	bhi.n	8004e28 <VL53L0X_SetLimitCheckValue+0x9c>
 8004dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8004dcc <VL53L0X_SetLimitCheckValue+0x40>)
 8004dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dcc:	08004de5 	.word	0x08004de5
 8004dd0:	08004ded 	.word	0x08004ded
 8004dd4:	08004e03 	.word	0x08004e03
 8004dd8:	08004e0b 	.word	0x08004e0b
 8004ddc:	08004e13 	.word	0x08004e13
 8004de0:	08004e13 	.word	0x08004e13

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	635a      	str	r2, [r3, #52]	@ 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8004dea:	e01f      	b.n	8004e2c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004df0:	b29b      	uxth	r3, r3
 8004df2:	461a      	mov	r2, r3
 8004df4:	2144      	movs	r1, #68	@ 0x44
 8004df6:	68f8      	ldr	r0, [r7, #12]
 8004df8:	f003 ffe6 	bl	8008dc8 <VL53L0X_WrWord>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8004e00:	e014      	b.n	8004e2c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	63da      	str	r2, [r3, #60]	@ 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8004e08:	e010      	b.n	8004e2c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	641a      	str	r2, [r3, #64]	@ 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8004e10:	e00c      	b.n	8004e2c <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	461a      	mov	r2, r3
 8004e1a:	2164      	movs	r1, #100	@ 0x64
 8004e1c:	68f8      	ldr	r0, [r7, #12]
 8004e1e:	f003 ffd3 	bl	8008dc8 <VL53L0X_WrWord>
 8004e22:	4603      	mov	r3, r0
 8004e24:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8004e26:	e001      	b.n	8004e2c <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004e28:	23fc      	movs	r3, #252	@ 0xfc
 8004e2a:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8004e2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d106      	bne.n	8004e42 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004e34:	897b      	ldrh	r3, [r7, #10]
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	330c      	adds	r3, #12
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	4413      	add	r3, r2
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004e42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3718      	adds	r7, #24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop

08004e50 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b088      	sub	sp, #32
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	460b      	mov	r3, r1
 8004e5a:	607a      	str	r2, [r7, #4]
 8004e5c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8004e62:	2300      	movs	r3, #0
 8004e64:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8004e66:	897b      	ldrh	r3, [r7, #10]
 8004e68:	2b05      	cmp	r3, #5
 8004e6a:	d847      	bhi.n	8004efc <VL53L0X_GetLimitCheckValue+0xac>
 8004e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e74 <VL53L0X_GetLimitCheckValue+0x24>)
 8004e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e72:	bf00      	nop
 8004e74:	08004e8d 	.word	0x08004e8d
 8004e78:	08004e99 	.word	0x08004e99
 8004e7c:	08004ebf 	.word	0x08004ebf
 8004e80:	08004ecb 	.word	0x08004ecb
 8004e84:	08004ed7 	.word	0x08004ed7
 8004e88:	08004ed7 	.word	0x08004ed7

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e90:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8004e92:	2300      	movs	r3, #0
 8004e94:	77bb      	strb	r3, [r7, #30]
		break;
 8004e96:	e033      	b.n	8004f00 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8004e98:	f107 0316 	add.w	r3, r7, #22
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	2144      	movs	r1, #68	@ 0x44
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f004 f819 	bl	8008ed8 <VL53L0X_RdWord>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8004eaa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d102      	bne.n	8004eb8 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8004eb2:	8afb      	ldrh	r3, [r7, #22]
 8004eb4:	025b      	lsls	r3, r3, #9
 8004eb6:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	77bb      	strb	r3, [r7, #30]
		break;
 8004ebc:	e020      	b.n	8004f00 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ec2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	77bb      	strb	r3, [r7, #30]
		break;
 8004ec8:	e01a      	b.n	8004f00 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ece:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	77bb      	strb	r3, [r7, #30]
		break;
 8004ed4:	e014      	b.n	8004f00 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8004ed6:	f107 0316 	add.w	r3, r7, #22
 8004eda:	461a      	mov	r2, r3
 8004edc:	2164      	movs	r1, #100	@ 0x64
 8004ede:	68f8      	ldr	r0, [r7, #12]
 8004ee0:	f003 fffa 	bl	8008ed8 <VL53L0X_RdWord>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8004ee8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d102      	bne.n	8004ef6 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8004ef0:	8afb      	ldrh	r3, [r7, #22]
 8004ef2:	025b      	lsls	r3, r3, #9
 8004ef4:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	77bb      	strb	r3, [r7, #30]
		break;
 8004efa:	e001      	b.n	8004f00 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004efc:	23fc      	movs	r3, #252	@ 0xfc
 8004efe:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004f00:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d12a      	bne.n	8004f5e <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8004f08:	7fbb      	ldrb	r3, [r7, #30]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d124      	bne.n	8004f58 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d110      	bne.n	8004f36 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8004f14:	897b      	ldrh	r3, [r7, #10]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	330c      	adds	r3, #12
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004f28:	897b      	ldrh	r3, [r7, #10]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8004f34:	e013      	b.n	8004f5e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004f3c:	897b      	ldrh	r3, [r7, #10]
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	330c      	adds	r3, #12
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004f4a:	897b      	ldrh	r3, [r7, #10]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4413      	add	r3, r2
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8004f56:	e002      	b.n	8004f5e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004f5e:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3720      	adds	r7, #32
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop

08004f6c <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f76:	2300      	movs	r3, #0
 8004f78:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8004f7a:	f107 030e 	add.w	r3, r7, #14
 8004f7e:	461a      	mov	r2, r3
 8004f80:	2101      	movs	r1, #1
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f003 ff7e 	bl	8008e84 <VL53L0X_RdByte>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8004f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10e      	bne.n	8004fb2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8004f94:	7bba      	ldrb	r2, [r7, #14]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		if (data & (0x01 << 7))
 8004f9c:	7bbb      	ldrb	r3, [r7, #14]
 8004f9e:	b25b      	sxtb	r3, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	da03      	bge.n	8004fac <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	701a      	strb	r2, [r3, #0]
 8004faa:	e002      	b.n	8004fb2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d104      	bne.n	8004fc4 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	781a      	ldrb	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8004fdc:	f107 030e 	add.w	r3, r7, #14
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7ff fbd4 	bl	8004790 <VL53L0X_GetDeviceMode>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8004fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d107      	bne.n	8005004 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8004ff4:	7bbb      	ldrb	r3, [r7, #14]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d104      	bne.n	8005004 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f898 	bl	8005130 <VL53L0X_StartMeasurement>
 8005000:	4603      	mov	r3, r0
 8005002:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8005004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d104      	bne.n	8005016 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f001 fb33 	bl	8006678 <VL53L0X_measurement_poll_for_completion>
 8005012:	4603      	mov	r3, r0
 8005014:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8005016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d106      	bne.n	800502c <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800501e:	7bbb      	ldrb	r3, [r7, #14]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d103      	bne.n	800502c <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2203      	movs	r2, #3
 8005028:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800502c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005044:	2300      	movs	r3, #0
 8005046:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8005048:	2301      	movs	r3, #1
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	68b9      	ldr	r1, [r7, #8]
 800504e:	68f8      	ldr	r0, [r7, #12]
 8005050:	f001 fad5 	bl	80065fe <VL53L0X_perform_ref_calibration>
 8005054:	4603      	mov	r3, r0
 8005056:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8005058:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3718      	adds	r7, #24
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	460b      	mov	r3, r1
 800506e:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005070:	2300      	movs	r3, #0
 8005072:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 800507a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800507c:	7dbb      	ldrb	r3, [r7, #22]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d005      	beq.n	800508e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8005082:	7dbb      	ldrb	r3, [r7, #22]
 8005084:	2b02      	cmp	r3, #2
 8005086:	d002      	beq.n	800508e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8005088:	7dbb      	ldrb	r3, [r7, #22]
 800508a:	2b03      	cmp	r3, #3
 800508c:	d147      	bne.n	800511e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800508e:	f107 030c 	add.w	r3, r7, #12
 8005092:	f107 0210 	add.w	r2, r7, #16
 8005096:	2101      	movs	r1, #1
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 fbb9 	bl	8005810 <VL53L0X_GetInterruptThresholds>
 800509e:	4603      	mov	r3, r0
 80050a0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 80050a8:	d803      	bhi.n	80050b2 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 80050aa:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 80050ac:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 80050b0:	d935      	bls.n	800511e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 80050b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d131      	bne.n	800511e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 80050ba:	78fb      	ldrb	r3, [r7, #3]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d006      	beq.n	80050ce <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 80050c0:	491a      	ldr	r1, [pc, #104]	@ (800512c <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f002 ff46 	bl	8007f54 <VL53L0X_load_tuning_settings>
 80050c8:	4603      	mov	r3, r0
 80050ca:	75fb      	strb	r3, [r7, #23]
 80050cc:	e027      	b.n	800511e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 80050ce:	2204      	movs	r2, #4
 80050d0:	21ff      	movs	r1, #255	@ 0xff
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f003 fe54 	bl	8008d80 <VL53L0X_WrByte>
 80050d8:	4603      	mov	r3, r0
 80050da:	461a      	mov	r2, r3
 80050dc:	7dfb      	ldrb	r3, [r7, #23]
 80050de:	4313      	orrs	r3, r2
 80050e0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 80050e2:	2200      	movs	r2, #0
 80050e4:	2170      	movs	r1, #112	@ 0x70
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f003 fe4a 	bl	8008d80 <VL53L0X_WrByte>
 80050ec:	4603      	mov	r3, r0
 80050ee:	461a      	mov	r2, r3
 80050f0:	7dfb      	ldrb	r3, [r7, #23]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80050f6:	2200      	movs	r2, #0
 80050f8:	21ff      	movs	r1, #255	@ 0xff
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f003 fe40 	bl	8008d80 <VL53L0X_WrByte>
 8005100:	4603      	mov	r3, r0
 8005102:	461a      	mov	r2, r3
 8005104:	7dfb      	ldrb	r3, [r7, #23]
 8005106:	4313      	orrs	r3, r2
 8005108:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800510a:	2200      	movs	r2, #0
 800510c:	2180      	movs	r1, #128	@ 0x80
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f003 fe36 	bl	8008d80 <VL53L0X_WrByte>
 8005114:	4603      	mov	r3, r0
 8005116:	461a      	mov	r2, r3
 8005118:	7dfb      	ldrb	r3, [r7, #23]
 800511a:	4313      	orrs	r3, r2
 800511c:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800511e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8005122:	4618      	mov	r0, r3
 8005124:	3718      	adds	r7, #24
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20000104 	.word	0x20000104

08005130 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005138:	2300      	movs	r3, #0
 800513a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800513c:	2301      	movs	r3, #1
 800513e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8005140:	f107 030e 	add.w	r3, r7, #14
 8005144:	4619      	mov	r1, r3
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7ff fb22 	bl	8004790 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800514c:	2201      	movs	r2, #1
 800514e:	2180      	movs	r1, #128	@ 0x80
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f003 fe15 	bl	8008d80 <VL53L0X_WrByte>
 8005156:	4603      	mov	r3, r0
 8005158:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800515a:	2201      	movs	r2, #1
 800515c:	21ff      	movs	r1, #255	@ 0xff
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f003 fe0e 	bl	8008d80 <VL53L0X_WrByte>
 8005164:	4603      	mov	r3, r0
 8005166:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005168:	2200      	movs	r2, #0
 800516a:	2100      	movs	r1, #0
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f003 fe07 	bl	8008d80 <VL53L0X_WrByte>
 8005172:	4603      	mov	r3, r0
 8005174:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 313a 	ldrb.w	r3, [r3, #314]	@ 0x13a
 800517c:	461a      	mov	r2, r3
 800517e:	2191      	movs	r1, #145	@ 0x91
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f003 fdfd 	bl	8008d80 <VL53L0X_WrByte>
 8005186:	4603      	mov	r3, r0
 8005188:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800518a:	2201      	movs	r2, #1
 800518c:	2100      	movs	r1, #0
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f003 fdf6 	bl	8008d80 <VL53L0X_WrByte>
 8005194:	4603      	mov	r3, r0
 8005196:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005198:	2200      	movs	r2, #0
 800519a:	21ff      	movs	r1, #255	@ 0xff
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f003 fdef 	bl	8008d80 <VL53L0X_WrByte>
 80051a2:	4603      	mov	r3, r0
 80051a4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 80051a6:	2200      	movs	r2, #0
 80051a8:	2180      	movs	r1, #128	@ 0x80
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f003 fde8 	bl	8008d80 <VL53L0X_WrByte>
 80051b0:	4603      	mov	r3, r0
 80051b2:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 80051b4:	7bbb      	ldrb	r3, [r7, #14]
 80051b6:	2b03      	cmp	r3, #3
 80051b8:	d054      	beq.n	8005264 <VL53L0X_StartMeasurement+0x134>
 80051ba:	2b03      	cmp	r3, #3
 80051bc:	dc6c      	bgt.n	8005298 <VL53L0X_StartMeasurement+0x168>
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d002      	beq.n	80051c8 <VL53L0X_StartMeasurement+0x98>
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d034      	beq.n	8005230 <VL53L0X_StartMeasurement+0x100>
 80051c6:	e067      	b.n	8005298 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 80051c8:	2201      	movs	r2, #1
 80051ca:	2100      	movs	r1, #0
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f003 fdd7 	bl	8008d80 <VL53L0X_WrByte>
 80051d2:	4603      	mov	r3, r0
 80051d4:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
 80051d8:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 80051da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d15d      	bne.n	800529e <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 80051e2:	2300      	movs	r3, #0
 80051e4:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d008      	beq.n	80051fe <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 80051ec:	f107 030d 	add.w	r3, r7, #13
 80051f0:	461a      	mov	r2, r3
 80051f2:	2100      	movs	r1, #0
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f003 fe45 	bl	8008e84 <VL53L0X_RdByte>
 80051fa:	4603      	mov	r3, r0
 80051fc:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	3301      	adds	r3, #1
 8005202:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8005204:	7b7a      	ldrb	r2, [r7, #13]
 8005206:	7bfb      	ldrb	r3, [r7, #15]
 8005208:	4013      	ands	r3, r2
 800520a:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800520c:	7bfa      	ldrb	r2, [r7, #15]
 800520e:	429a      	cmp	r2, r3
 8005210:	d107      	bne.n	8005222 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8005212:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d103      	bne.n	8005222 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8005220:	d3e1      	bcc.n	80051e6 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8005228:	d339      	bcc.n	800529e <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800522a:	23f9      	movs	r3, #249	@ 0xf9
 800522c:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800522e:	e036      	b.n	800529e <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8005230:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d105      	bne.n	8005244 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8005238:	2101      	movs	r1, #1
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7ff ff12 	bl	8005064 <VL53L0X_CheckAndLoadInterruptSettings>
 8005240:	4603      	mov	r3, r0
 8005242:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005244:	2202      	movs	r2, #2
 8005246:	2100      	movs	r1, #0
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f003 fd99 	bl	8008d80 <VL53L0X_WrByte>
 800524e:	4603      	mov	r3, r0
 8005250:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8005252:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d123      	bne.n	80052a2 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2204      	movs	r2, #4
 800525e:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 8005262:	e01e      	b.n	80052a2 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8005264:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d105      	bne.n	8005278 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800526c:	2101      	movs	r1, #1
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7ff fef8 	bl	8005064 <VL53L0X_CheckAndLoadInterruptSettings>
 8005274:	4603      	mov	r3, r0
 8005276:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8005278:	2204      	movs	r2, #4
 800527a:	2100      	movs	r1, #0
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f003 fd7f 	bl	8008d80 <VL53L0X_WrByte>
 8005282:	4603      	mov	r3, r0
 8005284:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8005286:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d10b      	bne.n	80052a6 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2204      	movs	r2, #4
 8005292:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 8005296:	e006      	b.n	80052a6 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8005298:	23f8      	movs	r3, #248	@ 0xf8
 800529a:	75fb      	strb	r3, [r7, #23]
 800529c:	e004      	b.n	80052a8 <VL53L0X_StartMeasurement+0x178>
		break;
 800529e:	bf00      	nop
 80052a0:	e002      	b.n	80052a8 <VL53L0X_StartMeasurement+0x178>
		break;
 80052a2:	bf00      	nop
 80052a4:	e000      	b.n	80052a8 <VL53L0X_StartMeasurement+0x178>
		break;
 80052a6:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80052a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3718      	adds	r7, #24
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80052be:	2300      	movs	r3, #0
 80052c0:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 80052c8:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 80052ca:	7bbb      	ldrb	r3, [r7, #14]
 80052cc:	2b04      	cmp	r3, #4
 80052ce:	d112      	bne.n	80052f6 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 80052d0:	f107 0308 	add.w	r3, r7, #8
 80052d4:	4619      	mov	r1, r3
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 fb0e 	bl	80058f8 <VL53L0X_GetInterruptMaskStatus>
 80052dc:	4603      	mov	r3, r0
 80052de:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b04      	cmp	r3, #4
 80052e4:	d103      	bne.n	80052ee <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	2201      	movs	r2, #1
 80052ea:	701a      	strb	r2, [r3, #0]
 80052ec:	e01c      	b.n	8005328 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2200      	movs	r2, #0
 80052f2:	701a      	strb	r2, [r3, #0]
 80052f4:	e018      	b.n	8005328 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 80052f6:	f107 030d 	add.w	r3, r7, #13
 80052fa:	461a      	mov	r2, r3
 80052fc:	2114      	movs	r1, #20
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f003 fdc0 	bl	8008e84 <VL53L0X_RdByte>
 8005304:	4603      	mov	r3, r0
 8005306:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8005308:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10b      	bne.n	8005328 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8005310:	7b7b      	ldrb	r3, [r7, #13]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2201      	movs	r2, #1
 800531e:	701a      	strb	r2, [r3, #0]
 8005320:	e002      	b.n	8005328 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2200      	movs	r2, #0
 8005326:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005328:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005334:	b5b0      	push	{r4, r5, r7, lr}
 8005336:	b096      	sub	sp, #88	@ 0x58
 8005338:	af02      	add	r7, sp, #8
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800533e:	2300      	movs	r3, #0
 8005340:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8005344:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8005348:	230c      	movs	r3, #12
 800534a:	2114      	movs	r1, #20
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f003 fceb 	bl	8008d28 <VL53L0X_ReadMulti>
 8005352:	4603      	mov	r3, r0
 8005354:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8005358:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800535c:	2b00      	cmp	r3, #0
 800535e:	f040 80c8 	bne.w	80054f2 <VL53L0X_GetRangingMeasurementData+0x1be>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2200      	movs	r2, #0
 8005366:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	2200      	movs	r2, #0
 800536c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800536e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8005372:	021b      	lsls	r3, r3, #8
 8005374:	b29b      	uxth	r3, r3
 8005376:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800537a:	4413      	add	r3, r2
 800537c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	2200      	movs	r2, #0
 8005384:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8005386:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800538a:	021b      	lsls	r3, r3, #8
 800538c:	b29b      	uxth	r3, r3
 800538e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8005392:	4413      	add	r3, r2
 8005394:	b29b      	uxth	r3, r3
 8005396:	025b      	lsls	r3, r3, #9
 8005398:	647b      	str	r3, [r7, #68]	@ 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800539e:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80053a0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80053a4:	021b      	lsls	r3, r3, #8
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 80053ac:	4413      	add	r3, r2
 80053ae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80053b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80053b6:	025a      	lsls	r2, r3, #9
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 80053bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80053c0:	021b      	lsls	r3, r3, #8
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80053c8:	4413      	add	r3, r2
 80053ca:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80053d4:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 80053d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80053da:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f8b3 3152 	ldrh.w	r3, [r3, #338]	@ 0x152
 80053e4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 80053ec:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 80053f0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80053f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80053f6:	d046      	beq.n	8005486 <VL53L0X_GetRangingMeasurementData+0x152>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 80053f8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80053fa:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80053fe:	fb02 f303 	mul.w	r3, r2, r3
 8005402:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8005406:	4a58      	ldr	r2, [pc, #352]	@ (8005568 <VL53L0X_GetRangingMeasurementData+0x234>)
 8005408:	fb82 1203 	smull	r1, r2, r2, r3
 800540c:	1192      	asrs	r2, r2, #6
 800540e:	17db      	asrs	r3, r3, #31
 8005410:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8005412:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	873b      	strh	r3, [r7, #56]	@ 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	7f1b      	ldrb	r3, [r3, #28]
 8005420:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8005424:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005428:	2b00      	cmp	r3, #0
 800542a:	d02c      	beq.n	8005486 <VL53L0X_GetRangingMeasurementData+0x152>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800542c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800542e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8005432:	fb02 f303 	mul.w	r3, r2, r3
 8005436:	121a      	asrs	r2, r3, #8
					<= 0) {
 8005438:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
				if ((SignalRate
 800543a:	429a      	cmp	r2, r3
 800543c:	d10d      	bne.n	800545a <VL53L0X_GetRangingMeasurementData+0x126>
					if (RangeFractionalEnable)
 800543e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8005442:	2b00      	cmp	r3, #0
 8005444:	d004      	beq.n	8005450 <VL53L0X_GetRangingMeasurementData+0x11c>
						XtalkRangeMilliMeter = 8888;
 8005446:	f242 23b8 	movw	r3, #8888	@ 0x22b8
 800544a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800544e:	e016      	b.n	800547e <VL53L0X_GetRangingMeasurementData+0x14a>
					else
						XtalkRangeMilliMeter = 8888
 8005450:	f648 23e0 	movw	r3, #35552	@ 0x8ae0
 8005454:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005458:	e011      	b.n	800547e <VL53L0X_GetRangingMeasurementData+0x14a>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800545a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800545e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005460:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8005464:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005466:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 800546a:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800546e:	121b      	asrs	r3, r3, #8
 8005470:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8005472:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005474:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8005476:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800547a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800547e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005482:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8005486:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00d      	beq.n	80054aa <VL53L0X_GetRangingMeasurementData+0x176>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800548e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005492:	089b      	lsrs	r3, r3, #2
 8005494:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800549a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	019b      	lsls	r3, r3, #6
 80054a2:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	75da      	strb	r2, [r3, #23]
 80054a8:	e006      	b.n	80054b8 <VL53L0X_GetRangingMeasurementData+0x184>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80054b0:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2200      	movs	r2, #0
 80054b6:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80054b8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80054bc:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 80054c0:	f107 0336 	add.w	r3, r7, #54	@ 0x36
 80054c4:	9301      	str	r3, [sp, #4]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	4613      	mov	r3, r2
 80054cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f003 f9de 	bl	8008890 <VL53L0X_get_pal_range_status>
 80054d4:	4603      	mov	r3, r0
 80054d6:	461a      	mov	r2, r3
 80054d8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80054dc:	4313      	orrs	r3, r2
 80054de:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 80054e2:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d103      	bne.n	80054f2 <VL53L0X_GetRangingMeasurementData+0x1be>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 80054ea:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80054f2:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d12f      	bne.n	800555a <VL53L0X_GetRangingMeasurementData+0x226>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f107 040c 	add.w	r4, r7, #12
 8005500:	f103 0550 	add.w	r5, r3, #80	@ 0x50
 8005504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005508:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800550c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8005514:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800551a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8005522:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8005528:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800552e:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8005534:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800553a:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8005540:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f103 0450 	add.w	r4, r3, #80	@ 0x50
 800554a:	f107 050c 	add.w	r5, r7, #12
 800554e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005552:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005556:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800555a:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 800555e:	4618      	mov	r0, r3
 8005560:	3750      	adds	r7, #80	@ 0x50
 8005562:	46bd      	mov	sp, r7
 8005564:	bdb0      	pop	{r4, r5, r7, pc}
 8005566:	bf00      	nop
 8005568:	10624dd3 	.word	0x10624dd3

0800556c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005576:	2300      	movs	r3, #0
 8005578:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800557a:	2100      	movs	r1, #0
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f7ff f8db 	bl	8004738 <VL53L0X_SetDeviceMode>
 8005582:	4603      	mov	r3, r0
 8005584:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d104      	bne.n	8005598 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f7ff fd1e 	bl	8004fd0 <VL53L0X_PerformSingleMeasurement>
 8005594:	4603      	mov	r3, r0
 8005596:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8005598:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d105      	bne.n	80055ac <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80055a0:	6839      	ldr	r1, [r7, #0]
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7ff fec6 	bl	8005334 <VL53L0X_GetRangingMeasurementData>
 80055a8:	4603      	mov	r3, r0
 80055aa:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80055ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d105      	bne.n	80055c0 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80055b4:	2100      	movs	r1, #0
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f95e 	bl	8005878 <VL53L0X_ClearInterruptMask>
 80055bc:	4603      	mov	r3, r0
 80055be:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80055c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	4608      	mov	r0, r1
 80055d6:	4611      	mov	r1, r2
 80055d8:	461a      	mov	r2, r3
 80055da:	4603      	mov	r3, r0
 80055dc:	70fb      	strb	r3, [r7, #3]
 80055de:	460b      	mov	r3, r1
 80055e0:	70bb      	strb	r3, [r7, #2]
 80055e2:	4613      	mov	r3, r2
 80055e4:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80055e6:	2300      	movs	r3, #0
 80055e8:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 80055ea:	78fb      	ldrb	r3, [r7, #3]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d002      	beq.n	80055f6 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80055f0:	23f6      	movs	r3, #246	@ 0xf6
 80055f2:	73fb      	strb	r3, [r7, #15]
 80055f4:	e105      	b.n	8005802 <VL53L0X_SetGpioConfig+0x236>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80055f6:	78bb      	ldrb	r3, [r7, #2]
 80055f8:	2b14      	cmp	r3, #20
 80055fa:	d110      	bne.n	800561e <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80055fc:	7e3b      	ldrb	r3, [r7, #24]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d102      	bne.n	8005608 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8005602:	2310      	movs	r3, #16
 8005604:	73bb      	strb	r3, [r7, #14]
 8005606:	e001      	b.n	800560c <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8005608:	2301      	movs	r3, #1
 800560a:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800560c:	7bbb      	ldrb	r3, [r7, #14]
 800560e:	461a      	mov	r2, r3
 8005610:	2184      	movs	r1, #132	@ 0x84
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f003 fbb4 	bl	8008d80 <VL53L0X_WrByte>
 8005618:	4603      	mov	r3, r0
 800561a:	73fb      	strb	r3, [r7, #15]
 800561c:	e0f1      	b.n	8005802 <VL53L0X_SetGpioConfig+0x236>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800561e:	78bb      	ldrb	r3, [r7, #2]
 8005620:	2b15      	cmp	r3, #21
 8005622:	f040 8097 	bne.w	8005754 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8005626:	2201      	movs	r2, #1
 8005628:	21ff      	movs	r1, #255	@ 0xff
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f003 fba8 	bl	8008d80 <VL53L0X_WrByte>
 8005630:	4603      	mov	r3, r0
 8005632:	461a      	mov	r2, r3
 8005634:	7bfb      	ldrb	r3, [r7, #15]
 8005636:	4313      	orrs	r3, r2
 8005638:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800563a:	2200      	movs	r2, #0
 800563c:	2100      	movs	r1, #0
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f003 fb9e 	bl	8008d80 <VL53L0X_WrByte>
 8005644:	4603      	mov	r3, r0
 8005646:	461a      	mov	r2, r3
 8005648:	7bfb      	ldrb	r3, [r7, #15]
 800564a:	4313      	orrs	r3, r2
 800564c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800564e:	2200      	movs	r2, #0
 8005650:	21ff      	movs	r1, #255	@ 0xff
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f003 fb94 	bl	8008d80 <VL53L0X_WrByte>
 8005658:	4603      	mov	r3, r0
 800565a:	461a      	mov	r2, r3
 800565c:	7bfb      	ldrb	r3, [r7, #15]
 800565e:	4313      	orrs	r3, r2
 8005660:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005662:	2201      	movs	r2, #1
 8005664:	2180      	movs	r1, #128	@ 0x80
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f003 fb8a 	bl	8008d80 <VL53L0X_WrByte>
 800566c:	4603      	mov	r3, r0
 800566e:	461a      	mov	r2, r3
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	4313      	orrs	r3, r2
 8005674:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8005676:	2202      	movs	r2, #2
 8005678:	2185      	movs	r1, #133	@ 0x85
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f003 fb80 	bl	8008d80 <VL53L0X_WrByte>
 8005680:	4603      	mov	r3, r0
 8005682:	461a      	mov	r2, r3
 8005684:	7bfb      	ldrb	r3, [r7, #15]
 8005686:	4313      	orrs	r3, r2
 8005688:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800568a:	2204      	movs	r2, #4
 800568c:	21ff      	movs	r1, #255	@ 0xff
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f003 fb76 	bl	8008d80 <VL53L0X_WrByte>
 8005694:	4603      	mov	r3, r0
 8005696:	461a      	mov	r2, r3
 8005698:	7bfb      	ldrb	r3, [r7, #15]
 800569a:	4313      	orrs	r3, r2
 800569c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800569e:	2200      	movs	r2, #0
 80056a0:	21cd      	movs	r1, #205	@ 0xcd
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f003 fb6c 	bl	8008d80 <VL53L0X_WrByte>
 80056a8:	4603      	mov	r3, r0
 80056aa:	461a      	mov	r2, r3
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80056b2:	2211      	movs	r2, #17
 80056b4:	21cc      	movs	r1, #204	@ 0xcc
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f003 fb62 	bl	8008d80 <VL53L0X_WrByte>
 80056bc:	4603      	mov	r3, r0
 80056be:	461a      	mov	r2, r3
 80056c0:	7bfb      	ldrb	r3, [r7, #15]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80056c6:	2207      	movs	r2, #7
 80056c8:	21ff      	movs	r1, #255	@ 0xff
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f003 fb58 	bl	8008d80 <VL53L0X_WrByte>
 80056d0:	4603      	mov	r3, r0
 80056d2:	461a      	mov	r2, r3
 80056d4:	7bfb      	ldrb	r3, [r7, #15]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80056da:	2200      	movs	r2, #0
 80056dc:	21be      	movs	r1, #190	@ 0xbe
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f003 fb4e 	bl	8008d80 <VL53L0X_WrByte>
 80056e4:	4603      	mov	r3, r0
 80056e6:	461a      	mov	r2, r3
 80056e8:	7bfb      	ldrb	r3, [r7, #15]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80056ee:	2206      	movs	r2, #6
 80056f0:	21ff      	movs	r1, #255	@ 0xff
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f003 fb44 	bl	8008d80 <VL53L0X_WrByte>
 80056f8:	4603      	mov	r3, r0
 80056fa:	461a      	mov	r2, r3
 80056fc:	7bfb      	ldrb	r3, [r7, #15]
 80056fe:	4313      	orrs	r3, r2
 8005700:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8005702:	2209      	movs	r2, #9
 8005704:	21cc      	movs	r1, #204	@ 0xcc
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f003 fb3a 	bl	8008d80 <VL53L0X_WrByte>
 800570c:	4603      	mov	r3, r0
 800570e:	461a      	mov	r2, r3
 8005710:	7bfb      	ldrb	r3, [r7, #15]
 8005712:	4313      	orrs	r3, r2
 8005714:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005716:	2200      	movs	r2, #0
 8005718:	21ff      	movs	r1, #255	@ 0xff
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f003 fb30 	bl	8008d80 <VL53L0X_WrByte>
 8005720:	4603      	mov	r3, r0
 8005722:	461a      	mov	r2, r3
 8005724:	7bfb      	ldrb	r3, [r7, #15]
 8005726:	4313      	orrs	r3, r2
 8005728:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800572a:	2201      	movs	r2, #1
 800572c:	21ff      	movs	r1, #255	@ 0xff
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f003 fb26 	bl	8008d80 <VL53L0X_WrByte>
 8005734:	4603      	mov	r3, r0
 8005736:	461a      	mov	r2, r3
 8005738:	7bfb      	ldrb	r3, [r7, #15]
 800573a:	4313      	orrs	r3, r2
 800573c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800573e:	2200      	movs	r2, #0
 8005740:	2100      	movs	r1, #0
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f003 fb1c 	bl	8008d80 <VL53L0X_WrByte>
 8005748:	4603      	mov	r3, r0
 800574a:	461a      	mov	r2, r3
 800574c:	7bfb      	ldrb	r3, [r7, #15]
 800574e:	4313      	orrs	r3, r2
 8005750:	73fb      	strb	r3, [r7, #15]
 8005752:	e056      	b.n	8005802 <VL53L0X_SetGpioConfig+0x236>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8005754:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d120      	bne.n	800579e <VL53L0X_SetGpioConfig+0x1d2>
			switch (Functionality) {
 800575c:	787b      	ldrb	r3, [r7, #1]
 800575e:	2b04      	cmp	r3, #4
 8005760:	d81b      	bhi.n	800579a <VL53L0X_SetGpioConfig+0x1ce>
 8005762:	a201      	add	r2, pc, #4	@ (adr r2, 8005768 <VL53L0X_SetGpioConfig+0x19c>)
 8005764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005768:	0800577d 	.word	0x0800577d
 800576c:	08005783 	.word	0x08005783
 8005770:	08005789 	.word	0x08005789
 8005774:	0800578f 	.word	0x0800578f
 8005778:	08005795 	.word	0x08005795
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800577c:	2300      	movs	r3, #0
 800577e:	73bb      	strb	r3, [r7, #14]
				break;
 8005780:	e00d      	b.n	800579e <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8005782:	2301      	movs	r3, #1
 8005784:	73bb      	strb	r3, [r7, #14]
				break;
 8005786:	e00a      	b.n	800579e <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8005788:	2302      	movs	r3, #2
 800578a:	73bb      	strb	r3, [r7, #14]
				break;
 800578c:	e007      	b.n	800579e <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800578e:	2303      	movs	r3, #3
 8005790:	73bb      	strb	r3, [r7, #14]
				break;
 8005792:	e004      	b.n	800579e <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8005794:	2304      	movs	r3, #4
 8005796:	73bb      	strb	r3, [r7, #14]
				break;
 8005798:	e001      	b.n	800579e <VL53L0X_SetGpioConfig+0x1d2>
			default:
				Status =
 800579a:	23f5      	movs	r3, #245	@ 0xf5
 800579c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}

		if (Status == VL53L0X_ERROR_NONE)
 800579e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d107      	bne.n	80057b6 <VL53L0X_SetGpioConfig+0x1ea>
			Status = VL53L0X_WrByte(Dev,
 80057a6:	7bbb      	ldrb	r3, [r7, #14]
 80057a8:	461a      	mov	r2, r3
 80057aa:	210a      	movs	r1, #10
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f003 fae7 	bl	8008d80 <VL53L0X_WrByte>
 80057b2:	4603      	mov	r3, r0
 80057b4:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80057b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10f      	bne.n	80057de <VL53L0X_SetGpioConfig+0x212>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80057be:	7e3b      	ldrb	r3, [r7, #24]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d102      	bne.n	80057ca <VL53L0X_SetGpioConfig+0x1fe>
				data = 0;
 80057c4:	2300      	movs	r3, #0
 80057c6:	73bb      	strb	r3, [r7, #14]
 80057c8:	e001      	b.n	80057ce <VL53L0X_SetGpioConfig+0x202>
			else
				data = (uint8_t)(1 << 4);
 80057ca:	2310      	movs	r3, #16
 80057cc:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80057ce:	7bbb      	ldrb	r3, [r7, #14]
 80057d0:	22ef      	movs	r2, #239	@ 0xef
 80057d2:	2184      	movs	r1, #132	@ 0x84
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f003 fb21 	bl	8008e1c <VL53L0X_UpdateByte>
 80057da:	4603      	mov	r3, r0
 80057dc:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 80057de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d103      	bne.n	80057ee <VL53L0X_SetGpioConfig+0x222>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	787a      	ldrb	r2, [r7, #1]
 80057ea:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 80057ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d105      	bne.n	8005802 <VL53L0X_SetGpioConfig+0x236>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80057f6:	2100      	movs	r1, #0
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f83d 	bl	8005878 <VL53L0X_ClearInterruptMask>
 80057fe:	4603      	mov	r3, r0
 8005800:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005802:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005806:	4618      	mov	r0, r3
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop

08005810 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	607a      	str	r2, [r7, #4]
 800581a:	603b      	str	r3, [r7, #0]
 800581c:	460b      	mov	r3, r1
 800581e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005820:	2300      	movs	r3, #0
 8005822:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8005824:	f107 0314 	add.w	r3, r7, #20
 8005828:	461a      	mov	r2, r3
 800582a:	210e      	movs	r1, #14
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f003 fb53 	bl	8008ed8 <VL53L0X_RdWord>
 8005832:	4603      	mov	r3, r0
 8005834:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005836:	8abb      	ldrh	r3, [r7, #20]
 8005838:	045a      	lsls	r2, r3, #17
 800583a:	4b0e      	ldr	r3, [pc, #56]	@ (8005874 <VL53L0X_GetInterruptThresholds+0x64>)
 800583c:	4013      	ands	r3, r2
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8005842:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10e      	bne.n	8005868 <VL53L0X_GetInterruptThresholds+0x58>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800584a:	f107 0314 	add.w	r3, r7, #20
 800584e:	461a      	mov	r2, r3
 8005850:	210c      	movs	r1, #12
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f003 fb40 	bl	8008ed8 <VL53L0X_RdWord>
 8005858:	4603      	mov	r3, r0
 800585a:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800585c:	8abb      	ldrh	r3, [r7, #20]
 800585e:	045a      	lsls	r2, r3, #17
 8005860:	4b04      	ldr	r3, [pc, #16]	@ (8005874 <VL53L0X_GetInterruptThresholds+0x64>)
 8005862:	4013      	ands	r3, r2
		*pThresholdHigh =
 8005864:	683a      	ldr	r2, [r7, #0]
 8005866:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005868:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3718      	adds	r7, #24
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	1ffe0000 	.word	0x1ffe0000

08005878 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005882:	2300      	movs	r3, #0
 8005884:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8005886:	2300      	movs	r3, #0
 8005888:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800588a:	2201      	movs	r2, #1
 800588c:	210b      	movs	r1, #11
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f003 fa76 	bl	8008d80 <VL53L0X_WrByte>
 8005894:	4603      	mov	r3, r0
 8005896:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8005898:	2200      	movs	r2, #0
 800589a:	210b      	movs	r1, #11
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f003 fa6f 	bl	8008d80 <VL53L0X_WrByte>
 80058a2:	4603      	mov	r3, r0
 80058a4:	461a      	mov	r2, r3
 80058a6:	7bfb      	ldrb	r3, [r7, #15]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80058ac:	f107 030d 	add.w	r3, r7, #13
 80058b0:	461a      	mov	r2, r3
 80058b2:	2113      	movs	r1, #19
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f003 fae5 	bl	8008e84 <VL53L0X_RdByte>
 80058ba:	4603      	mov	r3, r0
 80058bc:	461a      	mov	r2, r3
 80058be:	7bfb      	ldrb	r3, [r7, #15]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80058c4:	7bbb      	ldrb	r3, [r7, #14]
 80058c6:	3301      	adds	r3, #1
 80058c8:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80058ca:	7b7b      	ldrb	r3, [r7, #13]
 80058cc:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d006      	beq.n	80058e2 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 80058d4:	7bbb      	ldrb	r3, [r7, #14]
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d803      	bhi.n	80058e2 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 80058da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d0d3      	beq.n	800588a <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 80058e2:	7bbb      	ldrb	r3, [r7, #14]
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d901      	bls.n	80058ec <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 80058e8:	23f4      	movs	r3, #244	@ 0xf4
 80058ea:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80058ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005902:	2300      	movs	r3, #0
 8005904:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8005906:	f107 030e 	add.w	r3, r7, #14
 800590a:	461a      	mov	r2, r3
 800590c:	2113      	movs	r1, #19
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f003 fab8 	bl	8008e84 <VL53L0X_RdByte>
 8005914:	4603      	mov	r3, r0
 8005916:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8005918:	7bbb      	ldrb	r3, [r7, #14]
 800591a:	f003 0207 	and.w	r2, r3, #7
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8005922:	7bbb      	ldrb	r3, [r7, #14]
 8005924:	f003 0318 	and.w	r3, r3, #24
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800592c:	23fa      	movs	r3, #250	@ 0xfa
 800592e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8005930:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005934:	4618      	mov	r0, r3
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005948:	2300      	movs	r3, #0
 800594a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	68b9      	ldr	r1, [r7, #8]
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f000 fa03 	bl	8005d5c <VL53L0X_perform_ref_spad_management>
 8005956:	4603      	mov	r3, r0
 8005958:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800595a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b084      	sub	sp, #16
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
 800596e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005970:	2300      	movs	r3, #0
 8005972:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8005974:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8005978:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800597a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800597e:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8005980:	f107 0308 	add.w	r3, r7, #8
 8005984:	461a      	mov	r2, r3
 8005986:	2128      	movs	r1, #40	@ 0x28
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f003 faa5 	bl	8008ed8 <VL53L0X_RdWord>
 800598e:	4603      	mov	r3, r0
 8005990:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8005992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d11e      	bne.n	80059d8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800599a:	893b      	ldrh	r3, [r7, #8]
 800599c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80059a4:	893b      	ldrh	r3, [r7, #8]
 80059a6:	461a      	mov	r2, r3
 80059a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	dd0b      	ble.n	80059c8 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80059b0:	893a      	ldrh	r2, [r7, #8]
 80059b2:	897b      	ldrh	r3, [r7, #10]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	b21b      	sxth	r3, r3
 80059ba:	461a      	mov	r2, r3
					* 250;
 80059bc:	23fa      	movs	r3, #250	@ 0xfa
 80059be:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	601a      	str	r2, [r3, #0]
 80059c6:	e007      	b.n	80059d8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80059c8:	893b      	ldrh	r3, [r7, #8]
 80059ca:	b21b      	sxth	r3, r3
 80059cc:	461a      	mov	r2, r3
 80059ce:	23fa      	movs	r3, #250	@ 0xfa
 80059d0:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	601a      	str	r2, [r3, #0]

	}

	return Status;
 80059d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b08b      	sub	sp, #44	@ 0x2c
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
 80059f0:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 80059f2:	2308      	movs	r3, #8
 80059f4:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 80059f6:	2300      	movs	r3, #0
 80059f8:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005a00:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0a:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	fbb3 f2f2 	udiv	r2, r3, r2
 8005a14:	69b9      	ldr	r1, [r7, #24]
 8005a16:	fb01 f202 	mul.w	r2, r1, r2
 8005a1a:	1a9b      	subs	r3, r3, r2
 8005a1c:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a22:	e030      	b.n	8005a86 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8005a24:	2300      	movs	r3, #0
 8005a26:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a2c:	4413      	add	r3, r2
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8005a32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d11e      	bne.n	8005a78 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8005a3a:	7ffa      	ldrb	r2, [r7, #31]
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	fa42 f303 	asr.w	r3, r2, r3
 8005a42:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8005a48:	e016      	b.n	8005a78 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8005a4a:	7ffb      	ldrb	r3, [r7, #31]
 8005a4c:	f003 0301 	and.w	r3, r3, #1
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00b      	beq.n	8005a6c <get_next_good_spad+0x88>
				success = 1;
 8005a54:	2301      	movs	r3, #1
 8005a56:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8005a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5a:	69ba      	ldr	r2, [r7, #24]
 8005a5c:	fb03 f202 	mul.w	r2, r3, r2
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	4413      	add	r3, r2
 8005a64:	461a      	mov	r2, r3
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	601a      	str	r2, [r3, #0]
				break;
 8005a6a:	e009      	b.n	8005a80 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8005a6c:	7ffb      	ldrb	r3, [r7, #31]
 8005a6e:	085b      	lsrs	r3, r3, #1
 8005a70:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8005a72:	6a3b      	ldr	r3, [r7, #32]
 8005a74:	3301      	adds	r3, #1
 8005a76:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8005a78:	6a3a      	ldr	r2, [r7, #32]
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d3e4      	bcc.n	8005a4a <get_next_good_spad+0x66>
				coarseIndex++) {
 8005a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a82:	3301      	adds	r3, #1
 8005a84:	627b      	str	r3, [r7, #36]	@ 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8005a86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d202      	bcs.n	8005a94 <get_next_good_spad+0xb0>
 8005a8e:	7fbb      	ldrb	r3, [r7, #30]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d0c7      	beq.n	8005a24 <get_next_good_spad+0x40>
		}
	}
}
 8005a94:	bf00      	nop
 8005a96:	372c      	adds	r7, #44	@ 0x2c
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	099b      	lsrs	r3, r3, #6
 8005ab0:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8005ab2:	4a07      	ldr	r2, [pc, #28]	@ (8005ad0 <is_aperture+0x30>)
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <is_aperture+0x22>
		isAperture = 0;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8005ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3714      	adds	r7, #20
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr
 8005ad0:	200002bc 	.word	0x200002bc

08005ad4 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b089      	sub	sp, #36	@ 0x24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8005ae4:	2308      	movs	r3, #8
 8005ae6:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af0:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	69ba      	ldr	r2, [r7, #24]
 8005af6:	fbb3 f2f2 	udiv	r2, r3, r2
 8005afa:	69b9      	ldr	r1, [r7, #24]
 8005afc:	fb01 f202 	mul.w	r2, r1, r2
 8005b00:	1a9b      	subs	r3, r3, r2
 8005b02:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d302      	bcc.n	8005b12 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005b0c:	23ce      	movs	r3, #206	@ 0xce
 8005b0e:	77fb      	strb	r3, [r7, #31]
 8005b10:	e010      	b.n	8005b34 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	4413      	add	r3, r2
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	b25a      	sxtb	r2, r3
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	fa01 f303 	lsl.w	r3, r1, r3
 8005b24:	b25b      	sxtb	r3, r3
 8005b26:	4313      	orrs	r3, r2
 8005b28:	b259      	sxtb	r1, r3
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	4413      	add	r3, r2
 8005b30:	b2ca      	uxtb	r2, r1
 8005b32:	701a      	strb	r2, [r3, #0]

	return status;
 8005b34:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3724      	adds	r7, #36	@ 0x24
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8005b4e:	2306      	movs	r3, #6
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	21b0      	movs	r1, #176	@ 0xb0
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f003 f8b7 	bl	8008cc8 <VL53L0X_WriteMulti>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8005b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b084      	sub	sp, #16
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
 8005b72:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8005b74:	2306      	movs	r3, #6
 8005b76:	683a      	ldr	r2, [r7, #0]
 8005b78:	21b0      	movs	r1, #176	@ 0xb0
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f003 f8d4 	bl	8008d28 <VL53L0X_ReadMulti>
 8005b80:	4603      	mov	r3, r0
 8005b82:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8005b84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b08c      	sub	sp, #48	@ 0x30
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	607a      	str	r2, [r7, #4]
 8005b9a:	603b      	str	r3, [r7, #0]
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8005ba6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ba8:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8005baa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bac:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8005bae:	2300      	movs	r3, #0
 8005bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bb2:	e02b      	b.n	8005c0c <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8005bb4:	f107 031c 	add.w	r3, r7, #28
 8005bb8:	6a3a      	ldr	r2, [r7, #32]
 8005bba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f7ff ff11 	bl	80059e4 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc8:	d103      	bne.n	8005bd2 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005bca:	23ce      	movs	r3, #206	@ 0xce
 8005bcc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 8005bd0:	e020      	b.n	8005c14 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bd8:	4413      	add	r3, r2
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7ff ff60 	bl	8005aa0 <is_aperture>
 8005be0:	4603      	mov	r3, r0
 8005be2:	461a      	mov	r2, r3
 8005be4:	7afb      	ldrb	r3, [r7, #11]
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d003      	beq.n	8005bf2 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005bea:	23ce      	movs	r3, #206	@ 0xce
 8005bec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 8005bf0:	e010      	b.n	8005c14 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8005bf6:	6a3a      	ldr	r2, [r7, #32]
 8005bf8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005bfa:	6838      	ldr	r0, [r7, #0]
 8005bfc:	f7ff ff6a 	bl	8005ad4 <enable_spad_bit>
		currentSpad++;
 8005c00:	6a3b      	ldr	r3, [r7, #32]
 8005c02:	3301      	adds	r3, #1
 8005c04:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8005c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c08:	3301      	adds	r3, #1
 8005c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d3cf      	bcc.n	8005bb4 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8005c14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c16:	6a3a      	ldr	r2, [r7, #32]
 8005c18:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8005c1a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d106      	bne.n	8005c30 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8005c22:	6839      	ldr	r1, [r7, #0]
 8005c24:	68f8      	ldr	r0, [r7, #12]
 8005c26:	f7ff ff8d 	bl	8005b44 <set_ref_spad_map>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8005c30:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d121      	bne.n	8005c7c <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8005c38:	f107 0314 	add.w	r3, r7, #20
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f7ff ff93 	bl	8005b6a <get_ref_spad_map>
 8005c44:	4603      	mov	r3, r0
 8005c46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		i = 0;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8005c4e:	e011      	b.n	8005c74 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8005c50:	683a      	ldr	r2, [r7, #0]
 8005c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c54:	4413      	add	r3, r2
 8005c56:	781a      	ldrb	r2, [r3, #0]
 8005c58:	f107 0114 	add.w	r1, r7, #20
 8005c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5e:	440b      	add	r3, r1
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d003      	beq.n	8005c6e <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005c66:	23ce      	movs	r3, #206	@ 0xce
 8005c68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				break;
 8005c6c:	e006      	b.n	8005c7c <enable_ref_spads+0xec>
			}
			i++;
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c70:	3301      	adds	r3, #1
 8005c72:	627b      	str	r3, [r7, #36]	@ 0x24
		while (i < size) {
 8005c74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d3e9      	bcc.n	8005c50 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8005c7c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3730      	adds	r7, #48	@ 0x30
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b08a      	sub	sp, #40	@ 0x28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8005c92:	2300      	movs	r3, #0
 8005c94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8005ca4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8005ca8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d107      	bne.n	8005cc0 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8005cb0:	22c0      	movs	r2, #192	@ 0xc0
 8005cb2:	2101      	movs	r1, #1
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f003 f863 	bl	8008d80 <VL53L0X_WrByte>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8005cc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d108      	bne.n	8005cda <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8005cc8:	f107 0308 	add.w	r3, r7, #8
 8005ccc:	4619      	mov	r1, r3
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f7ff fc4c 	bl	800556c <VL53L0X_PerformSingleRangingMeasurement>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8005cda:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d107      	bne.n	8005cf2 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	21ff      	movs	r1, #255	@ 0xff
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f003 f84a 	bl	8008d80 <VL53L0X_WrByte>
 8005cec:	4603      	mov	r3, r0
 8005cee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE)
 8005cf2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d107      	bne.n	8005d0a <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	21b6      	movs	r1, #182	@ 0xb6
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f003 f8ea 	bl	8008ed8 <VL53L0X_RdWord>
 8005d04:	4603      	mov	r3, r0
 8005d06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8005d0a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d107      	bne.n	8005d22 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005d12:	2200      	movs	r2, #0
 8005d14:	21ff      	movs	r1, #255	@ 0xff
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f003 f832 	bl	8008d80 <VL53L0X_WrByte>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8005d22:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d112      	bne.n	8005d50 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005d2a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d2e:	461a      	mov	r2, r3
 8005d30:	2101      	movs	r1, #1
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f003 f824 	bl	8008d80 <VL53L0X_WrByte>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8005d3e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d104      	bne.n	8005d50 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8005d4c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
	}

	return status;
 8005d50:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3728      	adds	r7, #40	@ 0x28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8005d5c:	b590      	push	{r4, r7, lr}
 8005d5e:	b09d      	sub	sp, #116	@ 0x74
 8005d60:	af06      	add	r7, sp, #24
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 8005d6e:	23b4      	movs	r3, #180	@ 0xb4
 8005d70:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	uint32_t minimumSpadCount = 3;
 8005d74:	2303      	movs	r3, #3
 8005d76:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t maxSpadCount = 44;
 8005d78:	232c      	movs	r3, #44	@ 0x2c
 8005d7a:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t currentSpadIndex = 0;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	653b      	str	r3, [r7, #80]	@ 0x50
	uint32_t lastSpadIndex = 0;
 8005d80:	2300      	movs	r3, #0
 8005d82:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 8005d84:	2300      	movs	r3, #0
 8005d86:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 8005d88:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8005d8c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t index = 0;
 8005d92:	2300      	movs	r3, #0
 8005d94:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint32_t spadArraySize = 6;
 8005d96:	2306      	movs	r3, #6
 8005d98:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t signalRateDiff = 0;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t lastSignalRateDiff = 0;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	647b      	str	r3, [r7, #68]	@ 0x44
	uint8_t complete = 0;
 8005da2:	2300      	movs	r3, #0
 8005da4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	uint8_t VhvSettings = 0;
 8005da8:	2300      	movs	r3, #0
 8005daa:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8005dac:	2300      	movs	r3, #0
 8005dae:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8005db0:	2300      	movs	r3, #0
 8005db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8005db4:	2300      	movs	r3, #0
 8005db6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f8b3 313c 	ldrh.w	r3, [r3, #316]	@ 0x13c
 8005dc0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dc6:	e009      	b.n	8005ddc <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005dcc:	4413      	add	r3, r2
 8005dce:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8005dd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005dd8:	3301      	adds	r3, #1
 8005dda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ddc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d3f1      	bcc.n	8005dc8 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005de4:	2201      	movs	r2, #1
 8005de6:	21ff      	movs	r1, #255	@ 0xff
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f002 ffc9 	bl	8008d80 <VL53L0X_WrByte>
 8005dee:	4603      	mov	r3, r0
 8005df0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8005df4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d107      	bne.n	8005e0c <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	214f      	movs	r1, #79	@ 0x4f
 8005e00:	68f8      	ldr	r0, [r7, #12]
 8005e02:	f002 ffbd 	bl	8008d80 <VL53L0X_WrByte>
 8005e06:	4603      	mov	r3, r0
 8005e08:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8005e0c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d107      	bne.n	8005e24 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8005e14:	222c      	movs	r2, #44	@ 0x2c
 8005e16:	214e      	movs	r1, #78	@ 0x4e
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f002 ffb1 	bl	8008d80 <VL53L0X_WrByte>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8005e24:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d107      	bne.n	8005e3c <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	21ff      	movs	r1, #255	@ 0xff
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f002 ffa5 	bl	8008d80 <VL53L0X_WrByte>
 8005e36:	4603      	mov	r3, r0
 8005e38:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8005e3c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d109      	bne.n	8005e58 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8005e44:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8005e48:	461a      	mov	r2, r3
 8005e4a:	21b6      	movs	r1, #182	@ 0xb6
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f002 ff97 	bl	8008d80 <VL53L0X_WrByte>
 8005e52:	4603      	mov	r3, r0
 8005e54:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8005e58:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d107      	bne.n	8005e70 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8005e60:	2200      	movs	r2, #0
 8005e62:	2180      	movs	r1, #128	@ 0x80
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f002 ff8b 	bl	8008d80 <VL53L0X_WrByte>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8005e70:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10a      	bne.n	8005e8e <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8005e78:	f107 0210 	add.w	r2, r7, #16
 8005e7c:	f107 0111 	add.w	r1, r7, #17
 8005e80:	2300      	movs	r3, #0
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f000 fbbb 	bl	80065fe <VL53L0X_perform_ref_calibration>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8005e8e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d121      	bne.n	8005eda <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8005e96:	2300      	movs	r3, #0
 8005e98:	653b      	str	r3, [r7, #80]	@ 0x50
		lastSpadIndex = currentSpadIndex;
 8005e9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e9c:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	64fb      	str	r3, [r7, #76]	@ 0x4c
		Status = enable_ref_spads(Dev,
 8005ea2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ea4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f503 7492 	add.w	r4, r3, #292	@ 0x124
		Status = enable_ref_spads(Dev,
 8005eb2:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8005eb6:	f107 0218 	add.w	r2, r7, #24
 8005eba:	9204      	str	r2, [sp, #16]
 8005ebc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ebe:	9203      	str	r2, [sp, #12]
 8005ec0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005ec2:	9202      	str	r2, [sp, #8]
 8005ec4:	9301      	str	r3, [sp, #4]
 8005ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	4623      	mov	r3, r4
 8005ecc:	4602      	mov	r2, r0
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f7ff fe5e 	bl	8005b90 <enable_ref_spads>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005eda:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d174      	bne.n	8005fcc <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	653b      	str	r3, [r7, #80]	@ 0x50

		Status = perform_ref_signal_measurement(Dev,
 8005ee6:	f107 0312 	add.w	r3, r7, #18
 8005eea:	4619      	mov	r1, r3
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f7ff fecb 	bl	8005c88 <perform_ref_signal_measurement>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8005ef8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d161      	bne.n	8005fc4 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8005f00:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8005f02:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d25d      	bcs.n	8005fc4 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8005f08:	2300      	movs	r3, #0
 8005f0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f0c:	e009      	b.n	8005f22 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8005f18:	2200      	movs	r2, #0
 8005f1a:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8005f1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f1e:	3301      	adds	r3, #1
 8005f20:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d3f1      	bcc.n	8005f0e <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8005f2a:	e002      	b.n	8005f32 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8005f2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f2e:	3301      	adds	r3, #1
 8005f30:	653b      	str	r3, [r7, #80]	@ 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8005f32:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 8005f36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f38:	4413      	add	r3, r2
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7ff fdb0 	bl	8005aa0 <is_aperture>
 8005f40:	4603      	mov	r3, r0
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d103      	bne.n	8005f4e <VL53L0X_perform_ref_spad_management+0x1f2>
 8005f46:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d3ee      	bcc.n	8005f2c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	64fb      	str	r3, [r7, #76]	@ 0x4c

			Status = enable_ref_spads(Dev,
 8005f52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f54:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f503 7492 	add.w	r4, r3, #292	@ 0x124
			Status = enable_ref_spads(Dev,
 8005f62:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8005f66:	f107 0218 	add.w	r2, r7, #24
 8005f6a:	9204      	str	r2, [sp, #16]
 8005f6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f6e:	9203      	str	r2, [sp, #12]
 8005f70:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005f72:	9202      	str	r2, [sp, #8]
 8005f74:	9301      	str	r3, [sp, #4]
 8005f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	4623      	mov	r3, r4
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f7ff fe06 	bl	8005b90 <enable_ref_spads>
 8005f84:	4603      	mov	r3, r0
 8005f86:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8005f8a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d11b      	bne.n	8005fca <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	653b      	str	r3, [r7, #80]	@ 0x50
				Status = perform_ref_signal_measurement(Dev,
 8005f96:	f107 0312 	add.w	r3, r7, #18
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f7ff fe73 	bl	8005c88 <perform_ref_signal_measurement>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8005fa8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d10c      	bne.n	8005fca <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8005fb0:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8005fb2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d208      	bcs.n	8005fca <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
					refSpadCount_int = minimumSpadCount;
 8005fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8005fc2:	e002      	b.n	8005fca <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fc8:	e000      	b.n	8005fcc <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8005fca:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8005fcc:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f040 80af 	bne.w	8006134 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8005fd6:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8005fd8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	f240 80aa 	bls.w	8006134 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8005fe0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005fe2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		refSpadCount_int	= minimumSpadCount;
 8005fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f503 7192 	add.w	r1, r3, #292	@ 0x124
 8005ff0:	f107 031c 	add.w	r3, r7, #28
 8005ff4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f003 f84c 	bl	8009094 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8005ffc:	8a7b      	ldrh	r3, [r7, #18]
 8005ffe:	461a      	mov	r2, r3
 8006000:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006002:	1ad3      	subs	r3, r2, r3
 8006004:	2b00      	cmp	r3, #0
 8006006:	bfb8      	it	lt
 8006008:	425b      	neglt	r3, r3
 800600a:	647b      	str	r3, [r7, #68]	@ 0x44
			targetRefRate);
		complete = 0;
 800600c:	2300      	movs	r3, #0
 800600e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

		while (!complete) {
 8006012:	e086      	b.n	8006122 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
			get_next_good_spad(
 800601a:	f107 0314 	add.w	r3, r7, #20
 800601e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006020:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006022:	f7ff fcdf 	bl	80059e4 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602c:	d103      	bne.n	8006036 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800602e:	23ce      	movs	r3, #206	@ 0xce
 8006030:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				break;
 8006034:	e07e      	b.n	8006134 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8006036:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	4413      	add	r3, r2
 800603e:	4618      	mov	r0, r3
 8006040:	f7ff fd2e 	bl	8005aa0 <is_aperture>
 8006044:	4603      	mov	r3, r0
 8006046:	461a      	mov	r2, r3
 8006048:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800604a:	4293      	cmp	r3, r2
 800604c:	d003      	beq.n	8006056 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800604e:	2301      	movs	r3, #1
 8006050:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
				break;
 8006054:	e06e      	b.n	8006134 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8006056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006058:	3301      	adds	r3, #1
 800605a:	63fb      	str	r3, [r7, #60]	@ 0x3c

			currentSpadIndex = nextGoodSpad;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	653b      	str	r3, [r7, #80]	@ 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f503 7392 	add.w	r3, r3, #292	@ 0x124
			Status = enable_spad_bit(
 8006066:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006068:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800606a:	4618      	mov	r0, r3
 800606c:	f7ff fd32 	bl	8005ad4 <enable_spad_bit>
 8006070:	4603      	mov	r3, r0
 8006072:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8006076:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800607a:	2b00      	cmp	r3, #0
 800607c:	d10c      	bne.n	8006098 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800607e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006080:	3301      	adds	r3, #1
 8006082:	653b      	str	r3, [r7, #80]	@ 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f503 7392 	add.w	r3, r3, #292	@ 0x124
				Status = set_ref_spad_map(Dev,
 800608a:	4619      	mov	r1, r3
 800608c:	68f8      	ldr	r0, [r7, #12]
 800608e:	f7ff fd59 	bl	8005b44 <set_ref_spad_map>
 8006092:	4603      	mov	r3, r0
 8006094:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8006098:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800609c:	2b00      	cmp	r3, #0
 800609e:	d146      	bne.n	800612e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 80060a0:	f107 0312 	add.w	r3, r7, #18
 80060a4:	4619      	mov	r1, r3
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f7ff fdee 	bl	8005c88 <perform_ref_signal_measurement>
 80060ac:	4603      	mov	r3, r0
 80060ae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 80060b2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d13b      	bne.n	8006132 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 80060ba:	8a7b      	ldrh	r3, [r7, #18]
 80060bc:	461a      	mov	r2, r3
 80060be:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	bfb8      	it	lt
 80060c6:	425b      	neglt	r3, r3
 80060c8:	627b      	str	r3, [r7, #36]	@ 0x24

			if (peakSignalRateRef > targetRefRate) {
 80060ca:	8a7b      	ldrh	r3, [r7, #18]
 80060cc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d21c      	bcs.n	800610c <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 80060d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d914      	bls.n	8006104 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 80060da:	f107 031c 	add.w	r3, r7, #28
 80060de:	4619      	mov	r1, r3
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f7ff fd2f 	bl	8005b44 <set_ref_spad_map>
 80060e6:	4603      	mov	r3, r0
 80060e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	f503 7392 	add.w	r3, r3, #292	@ 0x124
					memcpy(
 80060f2:	f107 011c 	add.w	r1, r7, #28
 80060f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060f8:	4618      	mov	r0, r3
 80060fa:	f002 ffcb 	bl	8009094 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 80060fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006100:	3b01      	subs	r3, #1
 8006102:	63fb      	str	r3, [r7, #60]	@ 0x3c
				}
				complete = 1;
 8006104:	2301      	movs	r3, #1
 8006106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800610a:	e00a      	b.n	8006122 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800610c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610e:	647b      	str	r3, [r7, #68]	@ 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f503 7192 	add.w	r1, r3, #292	@ 0x124
				memcpy(lastSpadArray,
 8006116:	f107 031c 	add.w	r3, r7, #28
 800611a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800611c:	4618      	mov	r0, r3
 800611e:	f002 ffb9 	bl	8009094 <memcpy>
		while (!complete) {
 8006122:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006126:	2b00      	cmp	r3, #0
 8006128:	f43f af74 	beq.w	8006014 <VL53L0X_perform_ref_spad_management+0x2b8>
 800612c:	e002      	b.n	8006134 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800612e:	bf00      	nop
 8006130:	e000      	b.n	8006134 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8006132:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006134:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8006138:	2b00      	cmp	r3, #0
 800613a:	d115      	bne.n	8006168 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006140:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8006148:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	b2da      	uxtb	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	781a      	ldrb	r2, [r3, #0]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8006168:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 800616c:	4618      	mov	r0, r3
 800616e:	375c      	adds	r7, #92	@ 0x5c
 8006170:	46bd      	mov	sp, r7
 8006172:	bd90      	pop	{r4, r7, pc}

08006174 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8006174:	b590      	push	{r4, r7, lr}
 8006176:	b093      	sub	sp, #76	@ 0x4c
 8006178:	af06      	add	r7, sp, #24
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	4613      	mov	r3, r2
 8006180:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006182:	2300      	movs	r3, #0
 8006184:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t currentSpadIndex = 0;
 8006188:	2300      	movs	r3, #0
 800618a:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t startSelect = 0xB4;
 800618c:	23b4      	movs	r3, #180	@ 0xb4
 800618e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t spadArraySize = 6;
 8006192:	2306      	movs	r3, #6
 8006194:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8006196:	232c      	movs	r3, #44	@ 0x2c
 8006198:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800619a:	2201      	movs	r2, #1
 800619c:	21ff      	movs	r1, #255	@ 0xff
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f002 fdee 	bl	8008d80 <VL53L0X_WrByte>
 80061a4:	4603      	mov	r3, r0
 80061a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80061aa:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d107      	bne.n	80061c2 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 80061b2:	2200      	movs	r2, #0
 80061b4:	214f      	movs	r1, #79	@ 0x4f
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f002 fde2 	bl	8008d80 <VL53L0X_WrByte>
 80061bc:	4603      	mov	r3, r0
 80061be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80061c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d107      	bne.n	80061da <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 80061ca:	222c      	movs	r2, #44	@ 0x2c
 80061cc:	214e      	movs	r1, #78	@ 0x4e
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f002 fdd6 	bl	8008d80 <VL53L0X_WrByte>
 80061d4:	4603      	mov	r3, r0
 80061d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80061da:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d107      	bne.n	80061f2 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80061e2:	2200      	movs	r2, #0
 80061e4:	21ff      	movs	r1, #255	@ 0xff
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f002 fdca 	bl	8008d80 <VL53L0X_WrByte>
 80061ec:	4603      	mov	r3, r0
 80061ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80061f2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d109      	bne.n	800620e <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 80061fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80061fe:	461a      	mov	r2, r3
 8006200:	21b6      	movs	r1, #182	@ 0xb6
 8006202:	68f8      	ldr	r0, [r7, #12]
 8006204:	f002 fdbc 	bl	8008d80 <VL53L0X_WrByte>
 8006208:	4603      	mov	r3, r0
 800620a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800620e:	2300      	movs	r3, #0
 8006210:	627b      	str	r3, [r7, #36]	@ 0x24
 8006212:	e009      	b.n	8006228 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006218:	4413      	add	r3, r2
 800621a:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800621e:	2200      	movs	r2, #0
 8006220:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8006222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006224:	3301      	adds	r3, #1
 8006226:	627b      	str	r3, [r7, #36]	@ 0x24
 8006228:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	429a      	cmp	r2, r3
 800622e:	d3f1      	bcc.n	8006214 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8006230:	79fb      	ldrb	r3, [r7, #7]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d011      	beq.n	800625a <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8006236:	e002      	b.n	800623e <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8006238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800623a:	3301      	adds	r3, #1
 800623c:	62bb      	str	r3, [r7, #40]	@ 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800623e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8006242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006244:	4413      	add	r3, r2
 8006246:	4618      	mov	r0, r3
 8006248:	f7ff fc2a 	bl	8005aa0 <is_aperture>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d103      	bne.n	800625a <VL53L0X_set_reference_spads+0xe6>
 8006252:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	429a      	cmp	r2, r3
 8006258:	d3ee      	bcc.n	8006238 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f503 7492 	add.w	r4, r3, #292	@ 0x124
	Status = enable_ref_spads(Dev,
 8006266:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800626a:	79f9      	ldrb	r1, [r7, #7]
 800626c:	f107 0214 	add.w	r2, r7, #20
 8006270:	9204      	str	r2, [sp, #16]
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	9203      	str	r2, [sp, #12]
 8006276:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006278:	9202      	str	r2, [sp, #8]
 800627a:	9301      	str	r3, [sp, #4]
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	9300      	str	r3, [sp, #0]
 8006280:	4623      	mov	r3, r4
 8006282:	4602      	mov	r2, r0
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f7ff fc83 	bl	8005b90 <enable_ref_spads>
 800628a:	4603      	mov	r3, r0
 800628c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8006290:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8006294:	2b00      	cmp	r3, #0
 8006296:	d10c      	bne.n	80062b2 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	b2da      	uxtb	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	79fa      	ldrb	r2, [r7, #7]
 80062ae:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 80062b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3734      	adds	r7, #52	@ 0x34
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd90      	pop	{r4, r7, pc}

080062be <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b084      	sub	sp, #16
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
 80062c6:	460b      	mov	r3, r1
 80062c8:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80062ca:	2300      	movs	r3, #0
 80062cc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80062ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d10a      	bne.n	80062ec <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80062d6:	78fb      	ldrb	r3, [r7, #3]
 80062d8:	f043 0301 	orr.w	r3, r3, #1
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	461a      	mov	r2, r3
 80062e0:	2100      	movs	r1, #0
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f002 fd4c 	bl	8008d80 <VL53L0X_WrByte>
 80062e8:	4603      	mov	r3, r0
 80062ea:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 80062ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d104      	bne.n	80062fe <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f9bf 	bl	8006678 <VL53L0X_measurement_poll_for_completion>
 80062fa:	4603      	mov	r3, r0
 80062fc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80062fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d105      	bne.n	8006312 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8006306:	2100      	movs	r1, #0
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f7ff fab5 	bl	8005878 <VL53L0X_ClearInterruptMask>
 800630e:	4603      	mov	r3, r0
 8006310:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d106      	bne.n	8006328 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800631a:	2200      	movs	r2, #0
 800631c:	2100      	movs	r1, #0
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f002 fd2e 	bl	8008d80 <VL53L0X_WrByte>
 8006324:	4603      	mov	r3, r0
 8006326:	73fb      	strb	r3, [r7, #15]

	return Status;
 8006328:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	4608      	mov	r0, r1
 800633e:	4611      	mov	r1, r2
 8006340:	461a      	mov	r2, r3
 8006342:	4603      	mov	r3, r0
 8006344:	70fb      	strb	r3, [r7, #3]
 8006346:	460b      	mov	r3, r1
 8006348:	70bb      	strb	r3, [r7, #2]
 800634a:	4613      	mov	r3, r2
 800634c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800634e:	2300      	movs	r3, #0
 8006350:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8006352:	2300      	movs	r3, #0
 8006354:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006356:	2201      	movs	r2, #1
 8006358:	21ff      	movs	r1, #255	@ 0xff
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f002 fd10 	bl	8008d80 <VL53L0X_WrByte>
 8006360:	4603      	mov	r3, r0
 8006362:	461a      	mov	r2, r3
 8006364:	7bfb      	ldrb	r3, [r7, #15]
 8006366:	4313      	orrs	r3, r2
 8006368:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800636a:	2200      	movs	r2, #0
 800636c:	2100      	movs	r1, #0
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f002 fd06 	bl	8008d80 <VL53L0X_WrByte>
 8006374:	4603      	mov	r3, r0
 8006376:	461a      	mov	r2, r3
 8006378:	7bfb      	ldrb	r3, [r7, #15]
 800637a:	4313      	orrs	r3, r2
 800637c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800637e:	2200      	movs	r2, #0
 8006380:	21ff      	movs	r1, #255	@ 0xff
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f002 fcfc 	bl	8008d80 <VL53L0X_WrByte>
 8006388:	4603      	mov	r3, r0
 800638a:	461a      	mov	r2, r3
 800638c:	7bfb      	ldrb	r3, [r7, #15]
 800638e:	4313      	orrs	r3, r2
 8006390:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8006392:	78fb      	ldrb	r3, [r7, #3]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d01e      	beq.n	80063d6 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8006398:	f897 3020 	ldrb.w	r3, [r7, #32]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d009      	beq.n	80063b4 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80063a0:	69ba      	ldr	r2, [r7, #24]
 80063a2:	21cb      	movs	r1, #203	@ 0xcb
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f002 fd6d 	bl	8008e84 <VL53L0X_RdByte>
 80063aa:	4603      	mov	r3, r0
 80063ac:	461a      	mov	r2, r3
 80063ae:	7bfb      	ldrb	r3, [r7, #15]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80063b4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d02a      	beq.n	8006412 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 80063bc:	f107 030e 	add.w	r3, r7, #14
 80063c0:	461a      	mov	r2, r3
 80063c2:	21ee      	movs	r1, #238	@ 0xee
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f002 fd5d 	bl	8008e84 <VL53L0X_RdByte>
 80063ca:	4603      	mov	r3, r0
 80063cc:	461a      	mov	r2, r3
 80063ce:	7bfb      	ldrb	r3, [r7, #15]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	73fb      	strb	r3, [r7, #15]
 80063d4:	e01d      	b.n	8006412 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 80063d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00a      	beq.n	80063f4 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 80063de:	78bb      	ldrb	r3, [r7, #2]
 80063e0:	461a      	mov	r2, r3
 80063e2:	21cb      	movs	r1, #203	@ 0xcb
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f002 fccb 	bl	8008d80 <VL53L0X_WrByte>
 80063ea:	4603      	mov	r3, r0
 80063ec:	461a      	mov	r2, r3
 80063ee:	7bfb      	ldrb	r3, [r7, #15]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80063f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00a      	beq.n	8006412 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 80063fc:	787b      	ldrb	r3, [r7, #1]
 80063fe:	2280      	movs	r2, #128	@ 0x80
 8006400:	21ee      	movs	r1, #238	@ 0xee
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f002 fd0a 	bl	8008e1c <VL53L0X_UpdateByte>
 8006408:	4603      	mov	r3, r0
 800640a:	461a      	mov	r2, r3
 800640c:	7bfb      	ldrb	r3, [r7, #15]
 800640e:	4313      	orrs	r3, r2
 8006410:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006412:	2201      	movs	r2, #1
 8006414:	21ff      	movs	r1, #255	@ 0xff
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f002 fcb2 	bl	8008d80 <VL53L0X_WrByte>
 800641c:	4603      	mov	r3, r0
 800641e:	461a      	mov	r2, r3
 8006420:	7bfb      	ldrb	r3, [r7, #15]
 8006422:	4313      	orrs	r3, r2
 8006424:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006426:	2201      	movs	r2, #1
 8006428:	2100      	movs	r1, #0
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f002 fca8 	bl	8008d80 <VL53L0X_WrByte>
 8006430:	4603      	mov	r3, r0
 8006432:	461a      	mov	r2, r3
 8006434:	7bfb      	ldrb	r3, [r7, #15]
 8006436:	4313      	orrs	r3, r2
 8006438:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800643a:	2200      	movs	r2, #0
 800643c:	21ff      	movs	r1, #255	@ 0xff
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f002 fc9e 	bl	8008d80 <VL53L0X_WrByte>
 8006444:	4603      	mov	r3, r0
 8006446:	461a      	mov	r2, r3
 8006448:	7bfb      	ldrb	r3, [r7, #15]
 800644a:	4313      	orrs	r3, r2
 800644c:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800644e:	7bbb      	ldrb	r3, [r7, #14]
 8006450:	f023 0310 	bic.w	r3, r3, #16
 8006454:	b2da      	uxtb	r2, r3
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	701a      	strb	r2, [r3, #0]

	return Status;
 800645a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b08a      	sub	sp, #40	@ 0x28
 800646a:	af04      	add	r7, sp, #16
 800646c:	60f8      	str	r0, [r7, #12]
 800646e:	60b9      	str	r1, [r7, #8]
 8006470:	4611      	mov	r1, r2
 8006472:	461a      	mov	r2, r3
 8006474:	460b      	mov	r3, r1
 8006476:	71fb      	strb	r3, [r7, #7]
 8006478:	4613      	mov	r3, r2
 800647a:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800647c:	2300      	movs	r3, #0
 800647e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006480:	2300      	movs	r3, #0
 8006482:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8006484:	2300      	movs	r3, #0
 8006486:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8006488:	2300      	movs	r3, #0
 800648a:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800648c:	2300      	movs	r3, #0
 800648e:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006490:	79bb      	ldrb	r3, [r7, #6]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d003      	beq.n	800649e <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800649c:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800649e:	2201      	movs	r2, #1
 80064a0:	2101      	movs	r1, #1
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f002 fc6c 	bl	8008d80 <VL53L0X_WrByte>
 80064a8:	4603      	mov	r3, r0
 80064aa:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80064ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d105      	bne.n	80064c0 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80064b4:	2140      	movs	r1, #64	@ 0x40
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f7ff ff01 	bl	80062be <VL53L0X_perform_single_ref_calibration>
 80064bc:	4603      	mov	r3, r0
 80064be:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80064c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d115      	bne.n	80064f4 <VL53L0X_perform_vhv_calibration+0x8e>
 80064c8:	79fb      	ldrb	r3, [r7, #7]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d112      	bne.n	80064f4 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80064ce:	7d39      	ldrb	r1, [r7, #20]
 80064d0:	7d7a      	ldrb	r2, [r7, #21]
 80064d2:	2300      	movs	r3, #0
 80064d4:	9303      	str	r3, [sp, #12]
 80064d6:	2301      	movs	r3, #1
 80064d8:	9302      	str	r3, [sp, #8]
 80064da:	f107 0313 	add.w	r3, r7, #19
 80064de:	9301      	str	r3, [sp, #4]
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	460b      	mov	r3, r1
 80064e6:	2101      	movs	r1, #1
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f7ff ff23 	bl	8006334 <VL53L0X_ref_calibration_io>
 80064ee:	4603      	mov	r3, r0
 80064f0:	75fb      	strb	r3, [r7, #23]
 80064f2:	e002      	b.n	80064fa <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	2200      	movs	r2, #0
 80064f8:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80064fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d112      	bne.n	8006528 <VL53L0X_perform_vhv_calibration+0xc2>
 8006502:	79bb      	ldrb	r3, [r7, #6]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00f      	beq.n	8006528 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006508:	7dbb      	ldrb	r3, [r7, #22]
 800650a:	461a      	mov	r2, r3
 800650c:	2101      	movs	r1, #1
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f002 fc36 	bl	8008d80 <VL53L0X_WrByte>
 8006514:	4603      	mov	r3, r0
 8006516:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006518:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d103      	bne.n	8006528 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	7dba      	ldrb	r2, [r7, #22]
 8006524:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 8006528:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3718      	adds	r7, #24
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}

08006534 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b08a      	sub	sp, #40	@ 0x28
 8006538:	af04      	add	r7, sp, #16
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	4611      	mov	r1, r2
 8006540:	461a      	mov	r2, r3
 8006542:	460b      	mov	r3, r1
 8006544:	71fb      	strb	r3, [r7, #7]
 8006546:	4613      	mov	r3, r2
 8006548:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800654a:	2300      	movs	r3, #0
 800654c:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800654e:	2300      	movs	r3, #0
 8006550:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8006552:	2300      	movs	r3, #0
 8006554:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8006556:	2300      	movs	r3, #0
 8006558:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800655a:	79bb      	ldrb	r3, [r7, #6]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d003      	beq.n	8006568 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8006566:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8006568:	2202      	movs	r2, #2
 800656a:	2101      	movs	r1, #1
 800656c:	68f8      	ldr	r0, [r7, #12]
 800656e:	f002 fc07 	bl	8008d80 <VL53L0X_WrByte>
 8006572:	4603      	mov	r3, r0
 8006574:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8006576:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d105      	bne.n	800658a <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800657e:	2100      	movs	r1, #0
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f7ff fe9c 	bl	80062be <VL53L0X_perform_single_ref_calibration>
 8006586:	4603      	mov	r3, r0
 8006588:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800658a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d115      	bne.n	80065be <VL53L0X_perform_phase_calibration+0x8a>
 8006592:	79fb      	ldrb	r3, [r7, #7]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d112      	bne.n	80065be <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8006598:	7d39      	ldrb	r1, [r7, #20]
 800659a:	7d7a      	ldrb	r2, [r7, #21]
 800659c:	2301      	movs	r3, #1
 800659e:	9303      	str	r3, [sp, #12]
 80065a0:	2300      	movs	r3, #0
 80065a2:	9302      	str	r3, [sp, #8]
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	9301      	str	r3, [sp, #4]
 80065a8:	f107 0313 	add.w	r3, r7, #19
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	460b      	mov	r3, r1
 80065b0:	2101      	movs	r1, #1
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f7ff febe 	bl	8006334 <VL53L0X_ref_calibration_io>
 80065b8:	4603      	mov	r3, r0
 80065ba:	75fb      	strb	r3, [r7, #23]
 80065bc:	e002      	b.n	80065c4 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	2200      	movs	r2, #0
 80065c2:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80065c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d112      	bne.n	80065f2 <VL53L0X_perform_phase_calibration+0xbe>
 80065cc:	79bb      	ldrb	r3, [r7, #6]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00f      	beq.n	80065f2 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80065d2:	7dbb      	ldrb	r3, [r7, #22]
 80065d4:	461a      	mov	r2, r3
 80065d6:	2101      	movs	r1, #1
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f002 fbd1 	bl	8008d80 <VL53L0X_WrByte>
 80065de:	4603      	mov	r3, r0
 80065e0:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80065e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d103      	bne.n	80065f2 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	7dba      	ldrb	r2, [r7, #22]
 80065ee:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 80065f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b086      	sub	sp, #24
 8006602:	af00      	add	r7, sp, #0
 8006604:	60f8      	str	r0, [r7, #12]
 8006606:	60b9      	str	r1, [r7, #8]
 8006608:	607a      	str	r2, [r7, #4]
 800660a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800660c:	2300      	movs	r3, #0
 800660e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006610:	2300      	movs	r3, #0
 8006612:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800661a:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800661c:	78fa      	ldrb	r2, [r7, #3]
 800661e:	2300      	movs	r3, #0
 8006620:	68b9      	ldr	r1, [r7, #8]
 8006622:	68f8      	ldr	r0, [r7, #12]
 8006624:	f7ff ff1f 	bl	8006466 <VL53L0X_perform_vhv_calibration>
 8006628:	4603      	mov	r3, r0
 800662a:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800662c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d107      	bne.n	8006644 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8006634:	78fa      	ldrb	r2, [r7, #3]
 8006636:	2300      	movs	r3, #0
 8006638:	6879      	ldr	r1, [r7, #4]
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f7ff ff7a 	bl	8006534 <VL53L0X_perform_phase_calibration>
 8006640:	4603      	mov	r3, r0
 8006642:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8006644:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10f      	bne.n	800666c <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800664c:	7dbb      	ldrb	r3, [r7, #22]
 800664e:	461a      	mov	r2, r3
 8006650:	2101      	movs	r1, #1
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f002 fb94 	bl	8008d80 <VL53L0X_WrByte>
 8006658:	4603      	mov	r3, r0
 800665a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800665c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d103      	bne.n	800666c <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	7dba      	ldrb	r2, [r7, #22]
 8006668:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 800666c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006670:	4618      	mov	r0, r3
 8006672:	3718      	adds	r7, #24
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b086      	sub	sp, #24
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006680:	2300      	movs	r3, #0
 8006682:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8006684:	2300      	movs	r3, #0
 8006686:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8006688:	2300      	movs	r3, #0
 800668a:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800668c:	f107 030f 	add.w	r3, r7, #15
 8006690:	4619      	mov	r1, r3
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7fe fe0e 	bl	80052b4 <VL53L0X_GetMeasurementDataReady>
 8006698:	4603      	mov	r3, r0
 800669a:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800669c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d110      	bne.n	80066c6 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d00f      	beq.n	80066ca <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	3301      	adds	r3, #1
 80066ae:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80066b6:	d302      	bcc.n	80066be <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 80066b8:	23f9      	movs	r3, #249	@ 0xf9
 80066ba:	75fb      	strb	r3, [r7, #23]
			break;
 80066bc:	e006      	b.n	80066cc <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f002 fc7c 	bl	8008fbc <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80066c4:	e7e2      	b.n	800668c <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 80066c6:	bf00      	nop
 80066c8:	e000      	b.n	80066cc <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 80066ca:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 80066cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3718      	adds	r7, #24
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80066d8:	b480      	push	{r7}
 80066da:	b085      	sub	sp, #20
 80066dc:	af00      	add	r7, sp, #0
 80066de:	4603      	mov	r3, r0
 80066e0:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80066e2:	2300      	movs	r3, #0
 80066e4:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80066e6:	79fb      	ldrb	r3, [r7, #7]
 80066e8:	3301      	adds	r3, #1
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	005b      	lsls	r3, r3, #1
 80066ee:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80066f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3714      	adds	r7, #20
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 80066fe:	b480      	push	{r7}
 8006700:	b085      	sub	sp, #20
 8006702:	af00      	add	r7, sp, #0
 8006704:	4603      	mov	r3, r0
 8006706:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8006708:	2300      	movs	r3, #0
 800670a:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800670c:	79fb      	ldrb	r3, [r7, #7]
 800670e:	085b      	lsrs	r3, r3, #1
 8006710:	b2db      	uxtb	r3, r3
 8006712:	3b01      	subs	r3, #1
 8006714:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8006716:	7bfb      	ldrb	r3, [r7, #15]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800672c:	2300      	movs	r3, #0
 800672e:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8006730:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006734:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8006736:	e002      	b.n	800673e <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	089b      	lsrs	r3, r3, #2
 800673c:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	429a      	cmp	r2, r3
 8006744:	d8f8      	bhi.n	8006738 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8006746:	e017      	b.n	8006778 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	4413      	add	r3, r2
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	429a      	cmp	r2, r3
 8006752:	d30b      	bcc.n	800676c <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	4413      	add	r3, r2
 800675a:	687a      	ldr	r2, [r7, #4]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	085b      	lsrs	r3, r3, #1
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	4413      	add	r3, r2
 8006768:	60fb      	str	r3, [r7, #12]
 800676a:	e002      	b.n	8006772 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	085b      	lsrs	r3, r3, #1
 8006770:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	089b      	lsrs	r3, r3, #2
 8006776:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d1e4      	bne.n	8006748 <VL53L0X_isqrt+0x24>
	}

	return res;
 800677e:	68fb      	ldr	r3, [r7, #12]
}
 8006780:	4618      	mov	r0, r3
 8006782:	3714      	adds	r7, #20
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006794:	2300      	movs	r3, #0
 8006796:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8006798:	2200      	movs	r2, #0
 800679a:	2183      	movs	r1, #131	@ 0x83
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f002 faef 	bl	8008d80 <VL53L0X_WrByte>
 80067a2:	4603      	mov	r3, r0
 80067a4:	461a      	mov	r2, r3
 80067a6:	7dfb      	ldrb	r3, [r7, #23]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80067ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d11e      	bne.n	80067f2 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80067b4:	2300      	movs	r3, #0
 80067b6:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80067b8:	f107 030f 	add.w	r3, r7, #15
 80067bc:	461a      	mov	r2, r3
 80067be:	2183      	movs	r1, #131	@ 0x83
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f002 fb5f 	bl	8008e84 <VL53L0X_RdByte>
 80067c6:	4603      	mov	r3, r0
 80067c8:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80067ca:	7bfb      	ldrb	r3, [r7, #15]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10a      	bne.n	80067e6 <VL53L0X_device_read_strobe+0x5a>
 80067d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d106      	bne.n	80067e6 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	3301      	adds	r3, #1
 80067dc:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80067e4:	d3e8      	bcc.n	80067b8 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80067ec:	d301      	bcc.n	80067f2 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 80067ee:	23f9      	movs	r3, #249	@ 0xf9
 80067f0:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80067f2:	2201      	movs	r2, #1
 80067f4:	2183      	movs	r1, #131	@ 0x83
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f002 fac2 	bl	8008d80 <VL53L0X_WrByte>
 80067fc:	4603      	mov	r3, r0
 80067fe:	461a      	mov	r2, r3
 8006800:	7dfb      	ldrb	r3, [r7, #23]
 8006802:	4313      	orrs	r3, r2
 8006804:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8006806:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800680a:	4618      	mov	r0, r3
 800680c:	3718      	adds	r7, #24
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b098      	sub	sp, #96	@ 0x60
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
 800681a:	460b      	mov	r3, r1
 800681c:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800681e:	2300      	movs	r3, #0
 8006820:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8006824:	2300      	movs	r3, #0
 8006826:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	uint8_t ReferenceSpadType = 0;
 800682a:	2300      	movs	r3, #0
 800682c:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
	uint32_t PartUIDUpper = 0;
 8006830:	2300      	movs	r3, #0
 8006832:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PartUIDLower = 0;
 8006834:	2300      	movs	r3, #0
 8006836:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8006838:	2300      	movs	r3, #0
 800683a:	64bb      	str	r3, [r7, #72]	@ 0x48
	int16_t OffsetMicroMeters = 0;
 800683c:	2300      	movs	r3, #0
 800683e:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8006842:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8006846:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8006848:	2300      	movs	r3, #0
 800684a:	657b      	str	r3, [r7, #84]	@ 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800684c:	2300      	movs	r3, #0
 800684e:	653b      	str	r3, [r7, #80]	@ 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8006850:	2300      	movs	r3, #0
 8006852:	643b      	str	r3, [r7, #64]	@ 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800685a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800685e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006862:	2b07      	cmp	r3, #7
 8006864:	f000 8408 	beq.w	8007078 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006868:	2201      	movs	r2, #1
 800686a:	2180      	movs	r1, #128	@ 0x80
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f002 fa87 	bl	8008d80 <VL53L0X_WrByte>
 8006872:	4603      	mov	r3, r0
 8006874:	461a      	mov	r2, r3
 8006876:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800687a:	4313      	orrs	r3, r2
 800687c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006880:	2201      	movs	r2, #1
 8006882:	21ff      	movs	r1, #255	@ 0xff
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f002 fa7b 	bl	8008d80 <VL53L0X_WrByte>
 800688a:	4603      	mov	r3, r0
 800688c:	461a      	mov	r2, r3
 800688e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006892:	4313      	orrs	r3, r2
 8006894:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006898:	2200      	movs	r2, #0
 800689a:	2100      	movs	r1, #0
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f002 fa6f 	bl	8008d80 <VL53L0X_WrByte>
 80068a2:	4603      	mov	r3, r0
 80068a4:	461a      	mov	r2, r3
 80068a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80068aa:	4313      	orrs	r3, r2
 80068ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80068b0:	2206      	movs	r2, #6
 80068b2:	21ff      	movs	r1, #255	@ 0xff
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f002 fa63 	bl	8008d80 <VL53L0X_WrByte>
 80068ba:	4603      	mov	r3, r0
 80068bc:	461a      	mov	r2, r3
 80068be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80068c2:	4313      	orrs	r3, r2
 80068c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80068c8:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 80068cc:	461a      	mov	r2, r3
 80068ce:	2183      	movs	r1, #131	@ 0x83
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f002 fad7 	bl	8008e84 <VL53L0X_RdByte>
 80068d6:	4603      	mov	r3, r0
 80068d8:	461a      	mov	r2, r3
 80068da:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80068de:	4313      	orrs	r3, r2
 80068e0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80068e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80068e8:	f043 0304 	orr.w	r3, r3, #4
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	461a      	mov	r2, r3
 80068f0:	2183      	movs	r1, #131	@ 0x83
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f002 fa44 	bl	8008d80 <VL53L0X_WrByte>
 80068f8:	4603      	mov	r3, r0
 80068fa:	461a      	mov	r2, r3
 80068fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006900:	4313      	orrs	r3, r2
 8006902:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8006906:	2207      	movs	r2, #7
 8006908:	21ff      	movs	r1, #255	@ 0xff
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f002 fa38 	bl	8008d80 <VL53L0X_WrByte>
 8006910:	4603      	mov	r3, r0
 8006912:	461a      	mov	r2, r3
 8006914:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006918:	4313      	orrs	r3, r2
 800691a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800691e:	2201      	movs	r2, #1
 8006920:	2181      	movs	r1, #129	@ 0x81
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f002 fa2c 	bl	8008d80 <VL53L0X_WrByte>
 8006928:	4603      	mov	r3, r0
 800692a:	461a      	mov	r2, r3
 800692c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006930:	4313      	orrs	r3, r2
 8006932:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f002 fb40 	bl	8008fbc <VL53L0X_PollingDelay>
 800693c:	4603      	mov	r3, r0
 800693e:	461a      	mov	r2, r3
 8006940:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006944:	4313      	orrs	r3, r2
 8006946:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800694a:	2201      	movs	r2, #1
 800694c:	2180      	movs	r1, #128	@ 0x80
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f002 fa16 	bl	8008d80 <VL53L0X_WrByte>
 8006954:	4603      	mov	r3, r0
 8006956:	461a      	mov	r2, r3
 8006958:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800695c:	4313      	orrs	r3, r2
 800695e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		if (((option & 1) == 1) &&
 8006962:	78fb      	ldrb	r3, [r7, #3]
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 8098 	beq.w	8006a9e <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800696e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006972:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8006976:	2b00      	cmp	r3, #0
 8006978:	f040 8091 	bne.w	8006a9e <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800697c:	226b      	movs	r2, #107	@ 0x6b
 800697e:	2194      	movs	r1, #148	@ 0x94
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f002 f9fd 	bl	8008d80 <VL53L0X_WrByte>
 8006986:	4603      	mov	r3, r0
 8006988:	461a      	mov	r2, r3
 800698a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800698e:	4313      	orrs	r3, r2
 8006990:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f7ff fef9 	bl	800678c <VL53L0X_device_read_strobe>
 800699a:	4603      	mov	r3, r0
 800699c:	461a      	mov	r2, r3
 800699e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80069a2:	4313      	orrs	r3, r2
 80069a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80069a8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80069ac:	461a      	mov	r2, r3
 80069ae:	2190      	movs	r1, #144	@ 0x90
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f002 fac7 	bl	8008f44 <VL53L0X_RdDWord>
 80069b6:	4603      	mov	r3, r0
 80069b8:	461a      	mov	r2, r3
 80069ba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80069be:	4313      	orrs	r3, r2
 80069c0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80069c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c6:	0a1b      	lsrs	r3, r3, #8
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069ce:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80069d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d4:	0bdb      	lsrs	r3, r3, #15
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80069e0:	2224      	movs	r2, #36	@ 0x24
 80069e2:	2194      	movs	r1, #148	@ 0x94
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f002 f9cb 	bl	8008d80 <VL53L0X_WrByte>
 80069ea:	4603      	mov	r3, r0
 80069ec:	461a      	mov	r2, r3
 80069ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80069f2:	4313      	orrs	r3, r2
 80069f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f7ff fec7 	bl	800678c <VL53L0X_device_read_strobe>
 80069fe:	4603      	mov	r3, r0
 8006a00:	461a      	mov	r2, r3
 8006a02:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006a06:	4313      	orrs	r3, r2
 8006a08:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006a0c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006a10:	461a      	mov	r2, r3
 8006a12:	2190      	movs	r1, #144	@ 0x90
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f002 fa95 	bl	8008f44 <VL53L0X_RdDWord>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006a22:	4313      	orrs	r3, r2
 8006a24:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8006a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2a:	0e1b      	lsrs	r3, r3, #24
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8006a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a32:	0c1b      	lsrs	r3, r3, #16
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8006a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a3a:	0a1b      	lsrs	r3, r3, #8
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8006a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8006a46:	2225      	movs	r2, #37	@ 0x25
 8006a48:	2194      	movs	r1, #148	@ 0x94
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f002 f998 	bl	8008d80 <VL53L0X_WrByte>
 8006a50:	4603      	mov	r3, r0
 8006a52:	461a      	mov	r2, r3
 8006a54:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7ff fe94 	bl	800678c <VL53L0X_device_read_strobe>
 8006a64:	4603      	mov	r3, r0
 8006a66:	461a      	mov	r2, r3
 8006a68:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006a72:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006a76:	461a      	mov	r2, r3
 8006a78:	2190      	movs	r1, #144	@ 0x90
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f002 fa62 	bl	8008f44 <VL53L0X_RdDWord>
 8006a80:	4603      	mov	r3, r0
 8006a82:	461a      	mov	r2, r3
 8006a84:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a90:	0e1b      	lsrs	r3, r3, #24
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8006a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a98:	0c1b      	lsrs	r3, r3, #16
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8006a9e:	78fb      	ldrb	r3, [r7, #3]
 8006aa0:	f003 0302 	and.w	r3, r3, #2
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f000 8189 	beq.w	8006dbc <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8006aaa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006aae:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f040 8182 	bne.w	8006dbc <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8006ab8:	2202      	movs	r2, #2
 8006aba:	2194      	movs	r1, #148	@ 0x94
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f002 f95f 	bl	8008d80 <VL53L0X_WrByte>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006aca:	4313      	orrs	r3, r2
 8006acc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f7ff fe5b 	bl	800678c <VL53L0X_device_read_strobe>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	461a      	mov	r2, r3
 8006ada:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8006ae4:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8006ae8:	461a      	mov	r2, r3
 8006aea:	2190      	movs	r1, #144	@ 0x90
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f002 f9c9 	bl	8008e84 <VL53L0X_RdByte>
 8006af2:	4603      	mov	r3, r0
 8006af4:	461a      	mov	r2, r3
 8006af6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006afa:	4313      	orrs	r3, r2
 8006afc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006b00:	227b      	movs	r2, #123	@ 0x7b
 8006b02:	2194      	movs	r1, #148	@ 0x94
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f002 f93b 	bl	8008d80 <VL53L0X_WrByte>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b12:	4313      	orrs	r3, r2
 8006b14:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f7ff fe37 	bl	800678c <VL53L0X_device_read_strobe>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	461a      	mov	r2, r3
 8006b22:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b26:	4313      	orrs	r3, r2
 8006b28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8006b2c:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8006b30:	461a      	mov	r2, r3
 8006b32:	2190      	movs	r1, #144	@ 0x90
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f002 f9a5 	bl	8008e84 <VL53L0X_RdByte>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b42:	4313      	orrs	r3, r2
 8006b44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8006b48:	2277      	movs	r2, #119	@ 0x77
 8006b4a:	2194      	movs	r1, #148	@ 0x94
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f002 f917 	bl	8008d80 <VL53L0X_WrByte>
 8006b52:	4603      	mov	r3, r0
 8006b54:	461a      	mov	r2, r3
 8006b56:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f7ff fe13 	bl	800678c <VL53L0X_device_read_strobe>
 8006b66:	4603      	mov	r3, r0
 8006b68:	461a      	mov	r2, r3
 8006b6a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006b74:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006b78:	461a      	mov	r2, r3
 8006b7a:	2190      	movs	r1, #144	@ 0x90
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f002 f9e1 	bl	8008f44 <VL53L0X_RdDWord>
 8006b82:	4603      	mov	r3, r0
 8006b84:	461a      	mov	r2, r3
 8006b86:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8006b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b92:	0e5b      	lsrs	r3, r3, #25
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba0:	0c9b      	lsrs	r3, r3, #18
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8006bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bae:	0adb      	lsrs	r3, r3, #11
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8006bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bbc:	091b      	lsrs	r3, r3, #4
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	00db      	lsls	r3, r3, #3
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8006bda:	2278      	movs	r2, #120	@ 0x78
 8006bdc:	2194      	movs	r1, #148	@ 0x94
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f002 f8ce 	bl	8008d80 <VL53L0X_WrByte>
 8006be4:	4603      	mov	r3, r0
 8006be6:	461a      	mov	r2, r3
 8006be8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006bec:	4313      	orrs	r3, r2
 8006bee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7ff fdca 	bl	800678c <VL53L0X_device_read_strobe>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006c00:	4313      	orrs	r3, r2
 8006c02:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006c06:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	2190      	movs	r1, #144	@ 0x90
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f002 f998 	bl	8008f44 <VL53L0X_RdDWord>
 8006c14:	4603      	mov	r3, r0
 8006c16:	461a      	mov	r2, r3
 8006c18:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8006c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c24:	0f5b      	lsrs	r3, r3, #29
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c2c:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8006c2e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006c32:	4413      	add	r3, r2
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8006c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3a:	0d9b      	lsrs	r3, r3, #22
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8006c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c48:	0bdb      	lsrs	r3, r3, #15
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8006c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c56:	0a1b      	lsrs	r3, r3, #8
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8006c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c64:	085b      	lsrs	r3, r3, #1
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8006c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	019b      	lsls	r3, r3, #6
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006c82:	2279      	movs	r2, #121	@ 0x79
 8006c84:	2194      	movs	r1, #148	@ 0x94
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f002 f87a 	bl	8008d80 <VL53L0X_WrByte>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	461a      	mov	r2, r3
 8006c90:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006c94:	4313      	orrs	r3, r2
 8006c96:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7ff fd76 	bl	800678c <VL53L0X_device_read_strobe>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006cae:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	2190      	movs	r1, #144	@ 0x90
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f002 f944 	bl	8008f44 <VL53L0X_RdDWord>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 8006cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ccc:	0e9b      	lsrs	r3, r3, #26
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cd4:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8006cd6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006cda:	4413      	add	r3, r2
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8006ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ce2:	0cdb      	lsrs	r3, r3, #19
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8006cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf0:	0b1b      	lsrs	r3, r3, #12
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8006cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cfe:	095b      	lsrs	r3, r3, #5
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8006d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8006d1c:	227a      	movs	r2, #122	@ 0x7a
 8006d1e:	2194      	movs	r1, #148	@ 0x94
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f002 f82d 	bl	8008d80 <VL53L0X_WrByte>
 8006d26:	4603      	mov	r3, r0
 8006d28:	461a      	mov	r2, r3
 8006d2a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f7ff fd29 	bl	800678c <VL53L0X_device_read_strobe>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006d42:	4313      	orrs	r3, r2
 8006d44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006d48:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	2190      	movs	r1, #144	@ 0x90
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f002 f8f7 	bl	8008f44 <VL53L0X_RdDWord>
 8006d56:	4603      	mov	r3, r0
 8006d58:	461a      	mov	r2, r3
 8006d5a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8006d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d66:	0f9b      	lsrs	r3, r3, #30
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d6e:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8006d70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006d74:	4413      	add	r3, r2
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8006d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d7c:	0ddb      	lsrs	r3, r3, #23
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 8006d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d8a:	0c1b      	lsrs	r3, r3, #16
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 8006d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d98:	0a5b      	lsrs	r3, r3, #9
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 8006da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da8:	089b      	lsrs	r3, r3, #2
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			ProductId[18] = '\0';
 8006db6:	2300      	movs	r3, #0
 8006db8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

		}

		if (((option & 4) == 4) &&
 8006dbc:	78fb      	ldrb	r3, [r7, #3]
 8006dbe:	f003 0304 	and.w	r3, r3, #4
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f000 80f1 	beq.w	8006faa <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8006dc8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006dcc:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	f040 80ea 	bne.w	8006faa <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8006dd6:	227b      	movs	r2, #123	@ 0x7b
 8006dd8:	2194      	movs	r1, #148	@ 0x94
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f001 ffd0 	bl	8008d80 <VL53L0X_WrByte>
 8006de0:	4603      	mov	r3, r0
 8006de2:	461a      	mov	r2, r3
 8006de4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006de8:	4313      	orrs	r3, r2
 8006dea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7ff fccc 	bl	800678c <VL53L0X_device_read_strobe>
 8006df4:	4603      	mov	r3, r0
 8006df6:	461a      	mov	r2, r3
 8006df8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8006e02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006e06:	461a      	mov	r2, r3
 8006e08:	2190      	movs	r1, #144	@ 0x90
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f002 f89a 	bl	8008f44 <VL53L0X_RdDWord>
 8006e10:	4603      	mov	r3, r0
 8006e12:	461a      	mov	r2, r3
 8006e14:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8006e1e:	227c      	movs	r2, #124	@ 0x7c
 8006e20:	2194      	movs	r1, #148	@ 0x94
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f001 ffac 	bl	8008d80 <VL53L0X_WrByte>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006e30:	4313      	orrs	r3, r2
 8006e32:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7ff fca8 	bl	800678c <VL53L0X_device_read_strobe>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	461a      	mov	r2, r3
 8006e40:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006e44:	4313      	orrs	r3, r2
 8006e46:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8006e4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e4e:	461a      	mov	r2, r3
 8006e50:	2190      	movs	r1, #144	@ 0x90
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f002 f876 	bl	8008f44 <VL53L0X_RdDWord>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006e60:	4313      	orrs	r3, r2
 8006e62:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8006e66:	2273      	movs	r2, #115	@ 0x73
 8006e68:	2194      	movs	r1, #148	@ 0x94
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f001 ff88 	bl	8008d80 <VL53L0X_WrByte>
 8006e70:	4603      	mov	r3, r0
 8006e72:	461a      	mov	r2, r3
 8006e74:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7ff fc84 	bl	800678c <VL53L0X_device_read_strobe>
 8006e84:	4603      	mov	r3, r0
 8006e86:	461a      	mov	r2, r3
 8006e88:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006e92:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006e96:	461a      	mov	r2, r3
 8006e98:	2190      	movs	r1, #144	@ 0x90
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f002 f852 	bl	8008f44 <VL53L0X_RdDWord>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8006eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb0:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8006eb6:	2274      	movs	r2, #116	@ 0x74
 8006eb8:	2194      	movs	r1, #148	@ 0x94
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f001 ff60 	bl	8008d80 <VL53L0X_WrByte>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f7ff fc5c 	bl	800678c <VL53L0X_device_read_strobe>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006edc:	4313      	orrs	r3, r2
 8006ede:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006ee2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	2190      	movs	r1, #144	@ 0x90
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f002 f82a 	bl	8008f44 <VL53L0X_RdDWord>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8006efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f00:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8006f02:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006f04:	4313      	orrs	r3, r2
 8006f06:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8006f08:	2275      	movs	r2, #117	@ 0x75
 8006f0a:	2194      	movs	r1, #148	@ 0x94
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f001 ff37 	bl	8008d80 <VL53L0X_WrByte>
 8006f12:	4603      	mov	r3, r0
 8006f14:	461a      	mov	r2, r3
 8006f16:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f7ff fc33 	bl	800678c <VL53L0X_device_read_strobe>
 8006f26:	4603      	mov	r3, r0
 8006f28:	461a      	mov	r2, r3
 8006f2a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006f34:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006f38:	461a      	mov	r2, r3
 8006f3a:	2190      	movs	r1, #144	@ 0x90
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f002 f801 	bl	8008f44 <VL53L0X_RdDWord>
 8006f42:	4603      	mov	r3, r0
 8006f44:	461a      	mov	r2, r3
 8006f46:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8006f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f52:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	657b      	str	r3, [r7, #84]	@ 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8006f58:	2276      	movs	r2, #118	@ 0x76
 8006f5a:	2194      	movs	r1, #148	@ 0x94
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f001 ff0f 	bl	8008d80 <VL53L0X_WrByte>
 8006f62:	4603      	mov	r3, r0
 8006f64:	461a      	mov	r2, r3
 8006f66:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f7ff fc0b 	bl	800678c <VL53L0X_device_read_strobe>
 8006f76:	4603      	mov	r3, r0
 8006f78:	461a      	mov	r2, r3
 8006f7a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006f84:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006f88:	461a      	mov	r2, r3
 8006f8a:	2190      	movs	r1, #144	@ 0x90
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f001 ffd9 	bl	8008f44 <VL53L0X_RdDWord>
 8006f92:	4603      	mov	r3, r0
 8006f94:	461a      	mov	r2, r3
 8006f96:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8006fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa2:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8006fa4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	657b      	str	r3, [r7, #84]	@ 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8006faa:	2200      	movs	r2, #0
 8006fac:	2181      	movs	r1, #129	@ 0x81
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	f001 fee6 	bl	8008d80 <VL53L0X_WrByte>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006fc2:	2206      	movs	r2, #6
 8006fc4:	21ff      	movs	r1, #255	@ 0xff
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f001 feda 	bl	8008d80 <VL53L0X_WrByte>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	461a      	mov	r2, r3
 8006fd0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006fda:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 8006fde:	461a      	mov	r2, r3
 8006fe0:	2183      	movs	r1, #131	@ 0x83
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f001 ff4e 	bl	8008e84 <VL53L0X_RdByte>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	461a      	mov	r2, r3
 8006fec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8006ff6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006ffa:	f023 0304 	bic.w	r3, r3, #4
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	461a      	mov	r2, r3
 8007002:	2183      	movs	r1, #131	@ 0x83
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f001 febb 	bl	8008d80 <VL53L0X_WrByte>
 800700a:	4603      	mov	r3, r0
 800700c:	461a      	mov	r2, r3
 800700e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007012:	4313      	orrs	r3, r2
 8007014:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007018:	2201      	movs	r2, #1
 800701a:	21ff      	movs	r1, #255	@ 0xff
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f001 feaf 	bl	8008d80 <VL53L0X_WrByte>
 8007022:	4603      	mov	r3, r0
 8007024:	461a      	mov	r2, r3
 8007026:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800702a:	4313      	orrs	r3, r2
 800702c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007030:	2201      	movs	r2, #1
 8007032:	2100      	movs	r1, #0
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f001 fea3 	bl	8008d80 <VL53L0X_WrByte>
 800703a:	4603      	mov	r3, r0
 800703c:	461a      	mov	r2, r3
 800703e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007042:	4313      	orrs	r3, r2
 8007044:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007048:	2200      	movs	r2, #0
 800704a:	21ff      	movs	r1, #255	@ 0xff
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f001 fe97 	bl	8008d80 <VL53L0X_WrByte>
 8007052:	4603      	mov	r3, r0
 8007054:	461a      	mov	r2, r3
 8007056:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800705a:	4313      	orrs	r3, r2
 800705c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007060:	2200      	movs	r2, #0
 8007062:	2180      	movs	r1, #128	@ 0x80
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f001 fe8b 	bl	8008d80 <VL53L0X_WrByte>
 800706a:	4603      	mov	r3, r0
 800706c:	461a      	mov	r2, r3
 800706e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007072:	4313      	orrs	r3, r2
 8007074:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8007078:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
 800707c:	2b00      	cmp	r3, #0
 800707e:	f040 808f 	bne.w	80071a0 <VL53L0X_get_info_from_device+0x98e>
 8007082:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007086:	2b07      	cmp	r3, #7
 8007088:	f000 808a 	beq.w	80071a0 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800708c:	78fb      	ldrb	r3, [r7, #3]
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b00      	cmp	r3, #0
 8007094:	d024      	beq.n	80070e0 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8007096:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800709a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d11e      	bne.n	80070e0 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f897 205e 	ldrb.w	r2, [r7, #94]	@ 0x5e
 80070a8:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 80070b2:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80070b6:	2300      	movs	r3, #0
 80070b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070ba:	e00e      	b.n	80070da <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 80070bc:	f107 0208 	add.w	r2, r7, #8
 80070c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070c2:	4413      	add	r3, r2
 80070c4:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070ca:	4413      	add	r3, r2
 80070cc:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 80070d0:	460a      	mov	r2, r1
 80070d2:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80070d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070d6:	3301      	adds	r3, #1
 80070d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80070dc:	2b05      	cmp	r3, #5
 80070de:	dded      	ble.n	80070bc <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 80070e0:	78fb      	ldrb	r3, [r7, #3]
 80070e2:	f003 0302 	and.w	r3, r3, #2
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d018      	beq.n	800711c <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80070ea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80070ee:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d112      	bne.n	800711c <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80070f6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007100:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f883 20f2 	strb.w	r2, [r3, #242]	@ 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	33f3      	adds	r3, #243	@ 0xf3
 800710e:	63bb      	str	r3, [r7, #56]	@ 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8007110:	f107 0310 	add.w	r3, r7, #16
 8007114:	4619      	mov	r1, r3
 8007116:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007118:	f001 ffb4 	bl	8009084 <strcpy>

		}

		if (((option & 4) == 4) &&
 800711c:	78fb      	ldrb	r3, [r7, #3]
 800711e:	f003 0304 	and.w	r3, r3, #4
 8007122:	2b00      	cmp	r3, #0
 8007124:	d030      	beq.n	8007188 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8007126:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800712a:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800712e:	2b00      	cmp	r3, #0
 8007130:	d12a      	bne.n	8007188 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007132:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800713a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8007142:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007144:	025b      	lsls	r3, r3, #9
 8007146:	643b      	str	r3, [r7, #64]	@ 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800714c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8007150:	2300      	movs	r3, #0
 8007152:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8007156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007158:	2b00      	cmp	r3, #0
 800715a:	d011      	beq.n	8007180 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800715c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800715e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007160:	1ad3      	subs	r3, r2, r3
 8007162:	64bb      	str	r3, [r7, #72]	@ 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8007164:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007166:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800716a:	fb02 f303 	mul.w	r3, r2, r3
 800716e:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8007170:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
					OffsetMicroMeters *= -1;
 8007174:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8007178:	425b      	negs	r3, r3
 800717a:	b29b      	uxth	r3, r3
 800717c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			}

			PALDevDataSet(Dev,
 8007180:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	@ 0x5a
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8007188:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800718c:	78fb      	ldrb	r3, [r7, #3]
 800718e:	4313      	orrs	r3, r2
 8007190:	b2db      	uxtb	r3, r3
 8007192:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8007196:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80071a0:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3760      	adds	r7, #96	@ 0x60
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b087      	sub	sp, #28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	460b      	mov	r3, r1
 80071b6:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 80071b8:	f240 6277 	movw	r2, #1655	@ 0x677
 80071bc:	f04f 0300 	mov.w	r3, #0
 80071c0:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 80071c4:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 80071c8:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 80071ca:	78fb      	ldrb	r3, [r7, #3]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	fb02 f303 	mul.w	r3, r2, r3
 80071d8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 80071da:	68bb      	ldr	r3, [r7, #8]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	371c      	adds	r7, #28
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b087      	sub	sp, #28
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 80071f0:	2300      	movs	r3, #0
 80071f2:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 80071f4:	2300      	movs	r3, #0
 80071f6:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 80071f8:	2300      	movs	r3, #0
 80071fa:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d015      	beq.n	800722e <VL53L0X_encode_timeout+0x46>
		ls_byte = timeout_macro_clks - 1;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	3b01      	subs	r3, #1
 8007206:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007208:	e005      	b.n	8007216 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	085b      	lsrs	r3, r3, #1
 800720e:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8007210:	89fb      	ldrh	r3, [r7, #14]
 8007212:	3301      	adds	r3, #1
 8007214:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	2bff      	cmp	r3, #255	@ 0xff
 800721a:	d8f6      	bhi.n	800720a <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800721c:	89fb      	ldrh	r3, [r7, #14]
 800721e:	021b      	lsls	r3, r3, #8
 8007220:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	b29b      	uxth	r3, r3
 8007226:	b2db      	uxtb	r3, r3
 8007228:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800722a:	4413      	add	r3, r2
 800722c:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800722e:	8afb      	ldrh	r3, [r7, #22]

}
 8007230:	4618      	mov	r0, r3
 8007232:	371c      	adds	r7, #28
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800723c:	b480      	push	{r7}
 800723e:	b085      	sub	sp, #20
 8007240:	af00      	add	r7, sp, #0
 8007242:	4603      	mov	r3, r0
 8007244:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8007246:	2300      	movs	r3, #0
 8007248:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800724a:	88fb      	ldrh	r3, [r7, #6]
 800724c:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800724e:	88fa      	ldrh	r2, [r7, #6]
 8007250:	0a12      	lsrs	r2, r2, #8
 8007252:	b292      	uxth	r2, r2
 8007254:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8007256:	3301      	adds	r3, #1
 8007258:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800725a:	68fb      	ldr	r3, [r7, #12]
}
 800725c:	4618      	mov	r0, r3
 800725e:	3714      	adds	r7, #20
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b088      	sub	sp, #32
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	4613      	mov	r3, r2
 8007274:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8007276:	2300      	movs	r3, #0
 8007278:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800727a:	79fb      	ldrb	r3, [r7, #7]
 800727c:	4619      	mov	r1, r3
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f7ff ff94 	bl	80071ac <VL53L0X_calc_macro_period_ps>
 8007284:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800728c:	4a0a      	ldr	r2, [pc, #40]	@ (80072b8 <VL53L0X_calc_timeout_mclks+0x50>)
 800728e:	fba2 2303 	umull	r2, r3, r2, r3
 8007292:	099b      	lsrs	r3, r3, #6
 8007294:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800729c:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	085b      	lsrs	r3, r3, #1
 80072a4:	441a      	add	r2, r3
	timeout_period_mclks =
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ac:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 80072ae:	69fb      	ldr	r3, [r7, #28]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3720      	adds	r7, #32
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	10624dd3 	.word	0x10624dd3

080072bc <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b086      	sub	sp, #24
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	460b      	mov	r3, r1
 80072c6:	807b      	strh	r3, [r7, #2]
 80072c8:	4613      	mov	r3, r2
 80072ca:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 80072cc:	2300      	movs	r3, #0
 80072ce:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80072d0:	787b      	ldrb	r3, [r7, #1]
 80072d2:	4619      	mov	r1, r3
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f7ff ff69 	bl	80071ac <VL53L0X_calc_macro_period_ps>
 80072da:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80072e2:	4a0a      	ldr	r2, [pc, #40]	@ (800730c <VL53L0X_calc_timeout_us+0x50>)
 80072e4:	fba2 2303 	umull	r2, r3, r2, r3
 80072e8:	099b      	lsrs	r3, r3, #6
 80072ea:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 80072ec:	887b      	ldrh	r3, [r7, #2]
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	fb02 f303 	mul.w	r3, r2, r3
 80072f4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
	actual_timeout_period_us =
 80072f8:	4a04      	ldr	r2, [pc, #16]	@ (800730c <VL53L0X_calc_timeout_us+0x50>)
 80072fa:	fba2 2303 	umull	r2, r3, r2, r3
 80072fe:	099b      	lsrs	r3, r3, #6
 8007300:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8007302:	697b      	ldr	r3, [r7, #20]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3718      	adds	r7, #24
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	10624dd3 	.word	0x10624dd3

08007310 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b08c      	sub	sp, #48	@ 0x30
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	460b      	mov	r3, r1
 800731a:	607a      	str	r2, [r7, #4]
 800731c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800731e:	2300      	movs	r3, #0
 8007320:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8007324:	2300      	movs	r3, #0
 8007326:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800732a:	2300      	movs	r3, #0
 800732c:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800732e:	2300      	movs	r3, #0
 8007330:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8007332:	2300      	movs	r3, #0
 8007334:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8007336:	7afb      	ldrb	r3, [r7, #11]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d005      	beq.n	8007348 <get_sequence_step_timeout+0x38>
 800733c:	7afb      	ldrb	r3, [r7, #11]
 800733e:	2b01      	cmp	r3, #1
 8007340:	d002      	beq.n	8007348 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8007342:	7afb      	ldrb	r3, [r7, #11]
 8007344:	2b02      	cmp	r3, #2
 8007346:	d127      	bne.n	8007398 <get_sequence_step_timeout+0x88>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007348:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800734c:	461a      	mov	r2, r3
 800734e:	2100      	movs	r1, #0
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	f7fd fa8d 	bl	8004870 <VL53L0X_GetVcselPulsePeriod>
 8007356:	4603      	mov	r3, r0
 8007358:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800735c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8007360:	2b00      	cmp	r3, #0
 8007362:	d109      	bne.n	8007378 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8007364:	f107 0320 	add.w	r3, r7, #32
 8007368:	461a      	mov	r2, r3
 800736a:	2146      	movs	r1, #70	@ 0x46
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f001 fd89 	bl	8008e84 <VL53L0X_RdByte>
 8007372:	4603      	mov	r3, r0
 8007374:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8007378:	f897 3020 	ldrb.w	r3, [r7, #32]
 800737c:	4618      	mov	r0, r3
 800737e:	f7ff ff5d 	bl	800723c <VL53L0X_decode_timeout>
 8007382:	4603      	mov	r3, r0
 8007384:	847b      	strh	r3, [r7, #34]	@ 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8007386:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800738a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800738c:	4619      	mov	r1, r3
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f7ff ff94 	bl	80072bc <VL53L0X_calc_timeout_us>
 8007394:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007396:	e092      	b.n	80074be <get_sequence_step_timeout+0x1ae>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007398:	7afb      	ldrb	r3, [r7, #11]
 800739a:	2b03      	cmp	r3, #3
 800739c:	d135      	bne.n	800740a <get_sequence_step_timeout+0xfa>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800739e:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 80073a2:	461a      	mov	r2, r3
 80073a4:	2100      	movs	r1, #0
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f7fd fa62 	bl	8004870 <VL53L0X_GetVcselPulsePeriod>
 80073ac:	4603      	mov	r3, r0
 80073ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80073b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	f040 8081 	bne.w	80074be <get_sequence_step_timeout+0x1ae>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80073bc:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 80073c0:	461a      	mov	r2, r3
 80073c2:	2100      	movs	r1, #0
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f7fd fa53 	bl	8004870 <VL53L0X_GetVcselPulsePeriod>
 80073ca:	4603      	mov	r3, r0
 80073cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 80073d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d109      	bne.n	80073ec <get_sequence_step_timeout+0xdc>
				Status = VL53L0X_RdWord(Dev,
 80073d8:	f107 031e 	add.w	r3, r7, #30
 80073dc:	461a      	mov	r2, r3
 80073de:	2151      	movs	r1, #81	@ 0x51
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	f001 fd79 	bl	8008ed8 <VL53L0X_RdWord>
 80073e6:	4603      	mov	r3, r0
 80073e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80073ec:	8bfb      	ldrh	r3, [r7, #30]
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7ff ff24 	bl	800723c <VL53L0X_decode_timeout>
 80073f4:	4603      	mov	r3, r0
 80073f6:	84fb      	strh	r3, [r7, #38]	@ 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80073f8:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80073fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80073fe:	4619      	mov	r1, r3
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f7ff ff5b 	bl	80072bc <VL53L0X_calc_timeout_us>
 8007406:	62b8      	str	r0, [r7, #40]	@ 0x28
 8007408:	e059      	b.n	80074be <get_sequence_step_timeout+0x1ae>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800740a:	7afb      	ldrb	r3, [r7, #11]
 800740c:	2b04      	cmp	r3, #4
 800740e:	d156      	bne.n	80074be <get_sequence_step_timeout+0x1ae>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007410:	f107 0314 	add.w	r3, r7, #20
 8007414:	4619      	mov	r1, r3
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f7fd fb34 	bl	8004a84 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800741c:	2300      	movs	r3, #0
 800741e:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8007420:	7dfb      	ldrb	r3, [r7, #23]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d01d      	beq.n	8007462 <get_sequence_step_timeout+0x152>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007426:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800742a:	461a      	mov	r2, r3
 800742c:	2100      	movs	r1, #0
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f7fd fa1e 	bl	8004870 <VL53L0X_GetVcselPulsePeriod>
 8007434:	4603      	mov	r3, r0
 8007436:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800743a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10f      	bne.n	8007462 <get_sequence_step_timeout+0x152>
				Status = VL53L0X_RdWord(Dev,
 8007442:	f107 031e 	add.w	r3, r7, #30
 8007446:	461a      	mov	r2, r3
 8007448:	2151      	movs	r1, #81	@ 0x51
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f001 fd44 	bl	8008ed8 <VL53L0X_RdWord>
 8007450:	4603      	mov	r3, r0
 8007452:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8007456:	8bfb      	ldrh	r3, [r7, #30]
 8007458:	4618      	mov	r0, r3
 800745a:	f7ff feef 	bl	800723c <VL53L0X_decode_timeout>
 800745e:	4603      	mov	r3, r0
 8007460:	84fb      	strh	r3, [r7, #38]	@ 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007462:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8007466:	2b00      	cmp	r3, #0
 8007468:	d109      	bne.n	800747e <get_sequence_step_timeout+0x16e>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800746a:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800746e:	461a      	mov	r2, r3
 8007470:	2101      	movs	r1, #1
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f7fd f9fc 	bl	8004870 <VL53L0X_GetVcselPulsePeriod>
 8007478:	4603      	mov	r3, r0
 800747a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800747e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8007482:	2b00      	cmp	r3, #0
 8007484:	d10f      	bne.n	80074a6 <get_sequence_step_timeout+0x196>
			Status = VL53L0X_RdWord(Dev,
 8007486:	f107 031c 	add.w	r3, r7, #28
 800748a:	461a      	mov	r2, r3
 800748c:	2171      	movs	r1, #113	@ 0x71
 800748e:	68f8      	ldr	r0, [r7, #12]
 8007490:	f001 fd22 	bl	8008ed8 <VL53L0X_RdWord>
 8007494:	4603      	mov	r3, r0
 8007496:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800749a:	8bbb      	ldrh	r3, [r7, #28]
 800749c:	4618      	mov	r0, r3
 800749e:	f7ff fecd 	bl	800723c <VL53L0X_decode_timeout>
 80074a2:	4603      	mov	r3, r0
 80074a4:	84bb      	strh	r3, [r7, #36]	@ 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 80074a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80074a8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80074ae:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80074b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80074b4:	4619      	mov	r1, r3
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f7ff ff00 	bl	80072bc <VL53L0X_calc_timeout_us>
 80074bc:	62b8      	str	r0, [r7, #40]	@ 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80074c2:	601a      	str	r2, [r3, #0]

	return Status;
 80074c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3730      	adds	r7, #48	@ 0x30
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b08a      	sub	sp, #40	@ 0x28
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	460b      	mov	r3, r1
 80074da:	607a      	str	r2, [r7, #4]
 80074dc:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80074de:	2300      	movs	r3, #0
 80074e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 80074e4:	7afb      	ldrb	r3, [r7, #11]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d005      	beq.n	80074f6 <set_sequence_step_timeout+0x26>
 80074ea:	7afb      	ldrb	r3, [r7, #11]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d002      	beq.n	80074f6 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 80074f0:	7afb      	ldrb	r3, [r7, #11]
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d138      	bne.n	8007568 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80074f6:	f107 031b 	add.w	r3, r7, #27
 80074fa:	461a      	mov	r2, r3
 80074fc:	2100      	movs	r1, #0
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	f7fd f9b6 	bl	8004870 <VL53L0X_GetVcselPulsePeriod>
 8007504:	4603      	mov	r3, r0
 8007506:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800750a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800750e:	2b00      	cmp	r3, #0
 8007510:	d11a      	bne.n	8007548 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8007512:	7efb      	ldrb	r3, [r7, #27]
 8007514:	461a      	mov	r2, r3
 8007516:	6879      	ldr	r1, [r7, #4]
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	f7ff fea5 	bl	8007268 <VL53L0X_calc_timeout_mclks>
 800751e:	4603      	mov	r3, r0
 8007520:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8007522:	8bbb      	ldrh	r3, [r7, #28]
 8007524:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007528:	d903      	bls.n	8007532 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800752a:	23ff      	movs	r3, #255	@ 0xff
 800752c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007530:	e004      	b.n	800753c <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8007532:	8bbb      	ldrh	r3, [r7, #28]
 8007534:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8007536:	3b01      	subs	r3, #1
 8007538:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800753c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007540:	b29a      	uxth	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007548:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800754c:	2b00      	cmp	r3, #0
 800754e:	f040 80ab 	bne.w	80076a8 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8007552:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007556:	461a      	mov	r2, r3
 8007558:	2146      	movs	r1, #70	@ 0x46
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f001 fc10 	bl	8008d80 <VL53L0X_WrByte>
 8007560:	4603      	mov	r3, r0
 8007562:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8007566:	e09f      	b.n	80076a8 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007568:	7afb      	ldrb	r3, [r7, #11]
 800756a:	2b03      	cmp	r3, #3
 800756c:	d135      	bne.n	80075da <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800756e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007572:	2b00      	cmp	r3, #0
 8007574:	d11b      	bne.n	80075ae <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007576:	f107 031b 	add.w	r3, r7, #27
 800757a:	461a      	mov	r2, r3
 800757c:	2100      	movs	r1, #0
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f7fd f976 	bl	8004870 <VL53L0X_GetVcselPulsePeriod>
 8007584:	4603      	mov	r3, r0
 8007586:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800758a:	7efb      	ldrb	r3, [r7, #27]
 800758c:	461a      	mov	r2, r3
 800758e:	6879      	ldr	r1, [r7, #4]
 8007590:	68f8      	ldr	r0, [r7, #12]
 8007592:	f7ff fe69 	bl	8007268 <VL53L0X_calc_timeout_mclks>
 8007596:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8007598:	84bb      	strh	r3, [r7, #36]	@ 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800759a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800759c:	4618      	mov	r0, r3
 800759e:	f7ff fe23 	bl	80071e8 <VL53L0X_encode_timeout>
 80075a2:	4603      	mov	r3, r0
 80075a4:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80075a6:	8b3a      	ldrh	r2, [r7, #24]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80075ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d108      	bne.n	80075c8 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 80075b6:	8b3b      	ldrh	r3, [r7, #24]
 80075b8:	461a      	mov	r2, r3
 80075ba:	2151      	movs	r1, #81	@ 0x51
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f001 fc03 	bl	8008dc8 <VL53L0X_WrWord>
 80075c2:	4603      	mov	r3, r0
 80075c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80075c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d16b      	bne.n	80076a8 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 80075d8:	e066      	b.n	80076a8 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80075da:	7afb      	ldrb	r3, [r7, #11]
 80075dc:	2b04      	cmp	r3, #4
 80075de:	d160      	bne.n	80076a2 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 80075e0:	f107 0310 	add.w	r3, r7, #16
 80075e4:	4619      	mov	r1, r3
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f7fd fa4c 	bl	8004a84 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 80075ec:	2300      	movs	r3, #0
 80075ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 80075f0:	7cfb      	ldrb	r3, [r7, #19]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d01d      	beq.n	8007632 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80075f6:	f107 031b 	add.w	r3, r7, #27
 80075fa:	461a      	mov	r2, r3
 80075fc:	2100      	movs	r1, #0
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f7fd f936 	bl	8004870 <VL53L0X_GetVcselPulsePeriod>
 8007604:	4603      	mov	r3, r0
 8007606:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800760a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800760e:	2b00      	cmp	r3, #0
 8007610:	d10f      	bne.n	8007632 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8007612:	f107 0318 	add.w	r3, r7, #24
 8007616:	461a      	mov	r2, r3
 8007618:	2151      	movs	r1, #81	@ 0x51
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f001 fc5c 	bl	8008ed8 <VL53L0X_RdWord>
 8007620:	4603      	mov	r3, r0
 8007622:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8007626:	8b3b      	ldrh	r3, [r7, #24]
 8007628:	4618      	mov	r0, r3
 800762a:	f7ff fe07 	bl	800723c <VL53L0X_decode_timeout>
 800762e:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8007630:	84bb      	strh	r3, [r7, #36]	@ 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8007632:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007636:	2b00      	cmp	r3, #0
 8007638:	d109      	bne.n	800764e <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800763a:	f107 031b 	add.w	r3, r7, #27
 800763e:	461a      	mov	r2, r3
 8007640:	2101      	movs	r1, #1
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f7fd f914 	bl	8004870 <VL53L0X_GetVcselPulsePeriod>
 8007648:	4603      	mov	r3, r0
 800764a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800764e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007652:	2b00      	cmp	r3, #0
 8007654:	d128      	bne.n	80076a8 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8007656:	7efb      	ldrb	r3, [r7, #27]
 8007658:	461a      	mov	r2, r3
 800765a:	6879      	ldr	r1, [r7, #4]
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f7ff fe03 	bl	8007268 <VL53L0X_calc_timeout_mclks>
 8007662:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8007664:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007666:	6a3a      	ldr	r2, [r7, #32]
 8007668:	4413      	add	r3, r2
 800766a:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800766c:	6a38      	ldr	r0, [r7, #32]
 800766e:	f7ff fdbb 	bl	80071e8 <VL53L0X_encode_timeout>
 8007672:	4603      	mov	r3, r0
 8007674:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8007676:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800767a:	2b00      	cmp	r3, #0
 800767c:	d108      	bne.n	8007690 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800767e:	8bfb      	ldrh	r3, [r7, #30]
 8007680:	461a      	mov	r2, r3
 8007682:	2171      	movs	r1, #113	@ 0x71
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f001 fb9f 	bl	8008dc8 <VL53L0X_WrWord>
 800768a:	4603      	mov	r3, r0
 800768c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8007690:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007694:	2b00      	cmp	r3, #0
 8007696:	d107      	bne.n	80076a8 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
 80076a0:	e002      	b.n	80076a8 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80076a2:	23fc      	movs	r3, #252	@ 0xfc
 80076a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	}
	return Status;
 80076a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3728      	adds	r7, #40	@ 0x28
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b08a      	sub	sp, #40	@ 0x28
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	460b      	mov	r3, r1
 80076be:	70fb      	strb	r3, [r7, #3]
 80076c0:	4613      	mov	r3, r2
 80076c2:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076c4:	2300      	movs	r3, #0
 80076c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 80076ca:	230c      	movs	r3, #12
 80076cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 80076d0:	2312      	movs	r3, #18
 80076d2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 80076d6:	2308      	movs	r3, #8
 80076d8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 80076dc:	230e      	movs	r3, #14
 80076de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 80076e2:	2300      	movs	r3, #0
 80076e4:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 80076e6:	78bb      	ldrb	r3, [r7, #2]
 80076e8:	f003 0301 	and.w	r3, r3, #1
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d003      	beq.n	80076fa <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80076f2:	23fc      	movs	r3, #252	@ 0xfc
 80076f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80076f8:	e020      	b.n	800773c <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 80076fa:	78fb      	ldrb	r3, [r7, #3]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10d      	bne.n	800771c <VL53L0X_set_vcsel_pulse_period+0x68>
 8007700:	78ba      	ldrb	r2, [r7, #2]
 8007702:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007706:	429a      	cmp	r2, r3
 8007708:	d304      	bcc.n	8007714 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800770a:	78ba      	ldrb	r2, [r7, #2]
 800770c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007710:	429a      	cmp	r2, r3
 8007712:	d903      	bls.n	800771c <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007714:	23fc      	movs	r3, #252	@ 0xfc
 8007716:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800771a:	e00f      	b.n	800773c <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800771c:	78fb      	ldrb	r3, [r7, #3]
 800771e:	2b01      	cmp	r3, #1
 8007720:	d10c      	bne.n	800773c <VL53L0X_set_vcsel_pulse_period+0x88>
 8007722:	78ba      	ldrb	r2, [r7, #2]
 8007724:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007728:	429a      	cmp	r2, r3
 800772a:	d304      	bcc.n	8007736 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800772c:	78ba      	ldrb	r2, [r7, #2]
 800772e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007732:	429a      	cmp	r2, r3
 8007734:	d902      	bls.n	800773c <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007736:	23fc      	movs	r3, #252	@ 0xfc
 8007738:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800773c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007740:	2b00      	cmp	r3, #0
 8007742:	d002      	beq.n	800774a <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8007744:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007748:	e237      	b.n	8007bba <VL53L0X_set_vcsel_pulse_period+0x506>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800774a:	78fb      	ldrb	r3, [r7, #3]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d150      	bne.n	80077f2 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8007750:	78bb      	ldrb	r3, [r7, #2]
 8007752:	2b0c      	cmp	r3, #12
 8007754:	d110      	bne.n	8007778 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8007756:	2218      	movs	r2, #24
 8007758:	2157      	movs	r1, #87	@ 0x57
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f001 fb10 	bl	8008d80 <VL53L0X_WrByte>
 8007760:	4603      	mov	r3, r0
 8007762:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8007766:	2208      	movs	r2, #8
 8007768:	2156      	movs	r1, #86	@ 0x56
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f001 fb08 	bl	8008d80 <VL53L0X_WrByte>
 8007770:	4603      	mov	r3, r0
 8007772:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007776:	e17f      	b.n	8007a78 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8007778:	78bb      	ldrb	r3, [r7, #2]
 800777a:	2b0e      	cmp	r3, #14
 800777c:	d110      	bne.n	80077a0 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800777e:	2230      	movs	r2, #48	@ 0x30
 8007780:	2157      	movs	r1, #87	@ 0x57
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f001 fafc 	bl	8008d80 <VL53L0X_WrByte>
 8007788:	4603      	mov	r3, r0
 800778a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800778e:	2208      	movs	r2, #8
 8007790:	2156      	movs	r1, #86	@ 0x56
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f001 faf4 	bl	8008d80 <VL53L0X_WrByte>
 8007798:	4603      	mov	r3, r0
 800779a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800779e:	e16b      	b.n	8007a78 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 80077a0:	78bb      	ldrb	r3, [r7, #2]
 80077a2:	2b10      	cmp	r3, #16
 80077a4:	d110      	bne.n	80077c8 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 80077a6:	2240      	movs	r2, #64	@ 0x40
 80077a8:	2157      	movs	r1, #87	@ 0x57
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f001 fae8 	bl	8008d80 <VL53L0X_WrByte>
 80077b0:	4603      	mov	r3, r0
 80077b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 80077b6:	2208      	movs	r2, #8
 80077b8:	2156      	movs	r1, #86	@ 0x56
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f001 fae0 	bl	8008d80 <VL53L0X_WrByte>
 80077c0:	4603      	mov	r3, r0
 80077c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80077c6:	e157      	b.n	8007a78 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 80077c8:	78bb      	ldrb	r3, [r7, #2]
 80077ca:	2b12      	cmp	r3, #18
 80077cc:	f040 8154 	bne.w	8007a78 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80077d0:	2250      	movs	r2, #80	@ 0x50
 80077d2:	2157      	movs	r1, #87	@ 0x57
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f001 fad3 	bl	8008d80 <VL53L0X_WrByte>
 80077da:	4603      	mov	r3, r0
 80077dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 80077e0:	2208      	movs	r2, #8
 80077e2:	2156      	movs	r1, #86	@ 0x56
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f001 facb 	bl	8008d80 <VL53L0X_WrByte>
 80077ea:	4603      	mov	r3, r0
 80077ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80077f0:	e142      	b.n	8007a78 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 80077f2:	78fb      	ldrb	r3, [r7, #3]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	f040 813f 	bne.w	8007a78 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 80077fa:	78bb      	ldrb	r3, [r7, #2]
 80077fc:	2b08      	cmp	r3, #8
 80077fe:	d14c      	bne.n	800789a <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8007800:	2210      	movs	r2, #16
 8007802:	2148      	movs	r1, #72	@ 0x48
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f001 fabb 	bl	8008d80 <VL53L0X_WrByte>
 800780a:	4603      	mov	r3, r0
 800780c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8007810:	2208      	movs	r2, #8
 8007812:	2147      	movs	r1, #71	@ 0x47
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f001 fab3 	bl	8008d80 <VL53L0X_WrByte>
 800781a:	4603      	mov	r3, r0
 800781c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8007820:	2202      	movs	r2, #2
 8007822:	2132      	movs	r1, #50	@ 0x32
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f001 faab 	bl	8008d80 <VL53L0X_WrByte>
 800782a:	4603      	mov	r3, r0
 800782c:	461a      	mov	r2, r3
 800782e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007832:	4313      	orrs	r3, r2
 8007834:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8007838:	220c      	movs	r2, #12
 800783a:	2130      	movs	r1, #48	@ 0x30
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f001 fa9f 	bl	8008d80 <VL53L0X_WrByte>
 8007842:	4603      	mov	r3, r0
 8007844:	461a      	mov	r2, r3
 8007846:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800784a:	4313      	orrs	r3, r2
 800784c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007850:	2201      	movs	r2, #1
 8007852:	21ff      	movs	r1, #255	@ 0xff
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f001 fa93 	bl	8008d80 <VL53L0X_WrByte>
 800785a:	4603      	mov	r3, r0
 800785c:	461a      	mov	r2, r3
 800785e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007862:	4313      	orrs	r3, r2
 8007864:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007868:	2230      	movs	r2, #48	@ 0x30
 800786a:	2130      	movs	r1, #48	@ 0x30
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f001 fa87 	bl	8008d80 <VL53L0X_WrByte>
 8007872:	4603      	mov	r3, r0
 8007874:	461a      	mov	r2, r3
 8007876:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800787a:	4313      	orrs	r3, r2
 800787c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007880:	2200      	movs	r2, #0
 8007882:	21ff      	movs	r1, #255	@ 0xff
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f001 fa7b 	bl	8008d80 <VL53L0X_WrByte>
 800788a:	4603      	mov	r3, r0
 800788c:	461a      	mov	r2, r3
 800788e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007892:	4313      	orrs	r3, r2
 8007894:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007898:	e0ee      	b.n	8007a78 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800789a:	78bb      	ldrb	r3, [r7, #2]
 800789c:	2b0a      	cmp	r3, #10
 800789e:	d14c      	bne.n	800793a <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 80078a0:	2228      	movs	r2, #40	@ 0x28
 80078a2:	2148      	movs	r1, #72	@ 0x48
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f001 fa6b 	bl	8008d80 <VL53L0X_WrByte>
 80078aa:	4603      	mov	r3, r0
 80078ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 80078b0:	2208      	movs	r2, #8
 80078b2:	2147      	movs	r1, #71	@ 0x47
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f001 fa63 	bl	8008d80 <VL53L0X_WrByte>
 80078ba:	4603      	mov	r3, r0
 80078bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80078c0:	2203      	movs	r2, #3
 80078c2:	2132      	movs	r1, #50	@ 0x32
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f001 fa5b 	bl	8008d80 <VL53L0X_WrByte>
 80078ca:	4603      	mov	r3, r0
 80078cc:	461a      	mov	r2, r3
 80078ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078d2:	4313      	orrs	r3, r2
 80078d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80078d8:	2209      	movs	r2, #9
 80078da:	2130      	movs	r1, #48	@ 0x30
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f001 fa4f 	bl	8008d80 <VL53L0X_WrByte>
 80078e2:	4603      	mov	r3, r0
 80078e4:	461a      	mov	r2, r3
 80078e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078ea:	4313      	orrs	r3, r2
 80078ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80078f0:	2201      	movs	r2, #1
 80078f2:	21ff      	movs	r1, #255	@ 0xff
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f001 fa43 	bl	8008d80 <VL53L0X_WrByte>
 80078fa:	4603      	mov	r3, r0
 80078fc:	461a      	mov	r2, r3
 80078fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007902:	4313      	orrs	r3, r2
 8007904:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007908:	2220      	movs	r2, #32
 800790a:	2130      	movs	r1, #48	@ 0x30
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f001 fa37 	bl	8008d80 <VL53L0X_WrByte>
 8007912:	4603      	mov	r3, r0
 8007914:	461a      	mov	r2, r3
 8007916:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800791a:	4313      	orrs	r3, r2
 800791c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007920:	2200      	movs	r2, #0
 8007922:	21ff      	movs	r1, #255	@ 0xff
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f001 fa2b 	bl	8008d80 <VL53L0X_WrByte>
 800792a:	4603      	mov	r3, r0
 800792c:	461a      	mov	r2, r3
 800792e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007932:	4313      	orrs	r3, r2
 8007934:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007938:	e09e      	b.n	8007a78 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800793a:	78bb      	ldrb	r3, [r7, #2]
 800793c:	2b0c      	cmp	r3, #12
 800793e:	d14c      	bne.n	80079da <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8007940:	2238      	movs	r2, #56	@ 0x38
 8007942:	2148      	movs	r1, #72	@ 0x48
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f001 fa1b 	bl	8008d80 <VL53L0X_WrByte>
 800794a:	4603      	mov	r3, r0
 800794c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8007950:	2208      	movs	r2, #8
 8007952:	2147      	movs	r1, #71	@ 0x47
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f001 fa13 	bl	8008d80 <VL53L0X_WrByte>
 800795a:	4603      	mov	r3, r0
 800795c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8007960:	2203      	movs	r2, #3
 8007962:	2132      	movs	r1, #50	@ 0x32
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f001 fa0b 	bl	8008d80 <VL53L0X_WrByte>
 800796a:	4603      	mov	r3, r0
 800796c:	461a      	mov	r2, r3
 800796e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007972:	4313      	orrs	r3, r2
 8007974:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8007978:	2208      	movs	r2, #8
 800797a:	2130      	movs	r1, #48	@ 0x30
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f001 f9ff 	bl	8008d80 <VL53L0X_WrByte>
 8007982:	4603      	mov	r3, r0
 8007984:	461a      	mov	r2, r3
 8007986:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800798a:	4313      	orrs	r3, r2
 800798c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007990:	2201      	movs	r2, #1
 8007992:	21ff      	movs	r1, #255	@ 0xff
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f001 f9f3 	bl	8008d80 <VL53L0X_WrByte>
 800799a:	4603      	mov	r3, r0
 800799c:	461a      	mov	r2, r3
 800799e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079a2:	4313      	orrs	r3, r2
 80079a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 80079a8:	2220      	movs	r2, #32
 80079aa:	2130      	movs	r1, #48	@ 0x30
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f001 f9e7 	bl	8008d80 <VL53L0X_WrByte>
 80079b2:	4603      	mov	r3, r0
 80079b4:	461a      	mov	r2, r3
 80079b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079ba:	4313      	orrs	r3, r2
 80079bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80079c0:	2200      	movs	r2, #0
 80079c2:	21ff      	movs	r1, #255	@ 0xff
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f001 f9db 	bl	8008d80 <VL53L0X_WrByte>
 80079ca:	4603      	mov	r3, r0
 80079cc:	461a      	mov	r2, r3
 80079ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079d2:	4313      	orrs	r3, r2
 80079d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80079d8:	e04e      	b.n	8007a78 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 80079da:	78bb      	ldrb	r3, [r7, #2]
 80079dc:	2b0e      	cmp	r3, #14
 80079de:	d14b      	bne.n	8007a78 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 80079e0:	2248      	movs	r2, #72	@ 0x48
 80079e2:	2148      	movs	r1, #72	@ 0x48
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f001 f9cb 	bl	8008d80 <VL53L0X_WrByte>
 80079ea:	4603      	mov	r3, r0
 80079ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 80079f0:	2208      	movs	r2, #8
 80079f2:	2147      	movs	r1, #71	@ 0x47
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f001 f9c3 	bl	8008d80 <VL53L0X_WrByte>
 80079fa:	4603      	mov	r3, r0
 80079fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8007a00:	2203      	movs	r2, #3
 8007a02:	2132      	movs	r1, #50	@ 0x32
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f001 f9bb 	bl	8008d80 <VL53L0X_WrByte>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a12:	4313      	orrs	r3, r2
 8007a14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8007a18:	2207      	movs	r2, #7
 8007a1a:	2130      	movs	r1, #48	@ 0x30
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f001 f9af 	bl	8008d80 <VL53L0X_WrByte>
 8007a22:	4603      	mov	r3, r0
 8007a24:	461a      	mov	r2, r3
 8007a26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007a30:	2201      	movs	r2, #1
 8007a32:	21ff      	movs	r1, #255	@ 0xff
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f001 f9a3 	bl	8008d80 <VL53L0X_WrByte>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a42:	4313      	orrs	r3, r2
 8007a44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 8007a48:	2220      	movs	r2, #32
 8007a4a:	2130      	movs	r1, #48	@ 0x30
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f001 f997 	bl	8008d80 <VL53L0X_WrByte>
 8007a52:	4603      	mov	r3, r0
 8007a54:	461a      	mov	r2, r3
 8007a56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007a60:	2200      	movs	r2, #0
 8007a62:	21ff      	movs	r1, #255	@ 0xff
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f001 f98b 	bl	8008d80 <VL53L0X_WrByte>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a72:	4313      	orrs	r3, r2
 8007a74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8007a78:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d17e      	bne.n	8007b7e <VL53L0X_set_vcsel_pulse_period+0x4ca>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8007a80:	78bb      	ldrb	r3, [r7, #2]
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7fe fe3b 	bl	80066fe <VL53L0X_encode_vcsel_period>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8007a8e:	78fb      	ldrb	r3, [r7, #3]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d002      	beq.n	8007a9a <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d045      	beq.n	8007b24 <VL53L0X_set_vcsel_pulse_period+0x470>
 8007a98:	e06e      	b.n	8007b78 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8007a9a:	f107 0314 	add.w	r3, r7, #20
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	2103      	movs	r1, #3
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f7ff fc34 	bl	8007310 <get_sequence_step_timeout>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007aae:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d109      	bne.n	8007aca <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8007ab6:	f107 0310 	add.w	r3, r7, #16
 8007aba:	461a      	mov	r2, r3
 8007abc:	2102      	movs	r1, #2
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7ff fc26 	bl	8007310 <get_sequence_step_timeout>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007aca:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d109      	bne.n	8007ae6 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8007ad2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	2150      	movs	r1, #80	@ 0x50
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f001 f950 	bl	8008d80 <VL53L0X_WrByte>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8007ae6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d108      	bne.n	8007b00 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	461a      	mov	r2, r3
 8007af2:	2103      	movs	r1, #3
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f7ff fceb 	bl	80074d0 <set_sequence_step_timeout>
 8007afa:	4603      	mov	r3, r0
 8007afc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8007b00:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d108      	bne.n	8007b1a <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	2102      	movs	r1, #2
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f7ff fcde 	bl	80074d0 <set_sequence_step_timeout>
 8007b14:	4603      	mov	r3, r0
 8007b16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	78ba      	ldrb	r2, [r7, #2]
 8007b1e:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8007b22:	e02c      	b.n	8007b7e <VL53L0X_set_vcsel_pulse_period+0x4ca>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8007b24:	f107 0318 	add.w	r3, r7, #24
 8007b28:	461a      	mov	r2, r3
 8007b2a:	2104      	movs	r1, #4
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f7ff fbef 	bl	8007310 <get_sequence_step_timeout>
 8007b32:	4603      	mov	r3, r0
 8007b34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8007b38:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d109      	bne.n	8007b54 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8007b40:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8007b44:	461a      	mov	r2, r3
 8007b46:	2170      	movs	r1, #112	@ 0x70
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f001 f919 	bl	8008d80 <VL53L0X_WrByte>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8007b54:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d108      	bne.n	8007b6e <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	461a      	mov	r2, r3
 8007b60:	2104      	movs	r1, #4
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7ff fcb4 	bl	80074d0 <set_sequence_step_timeout>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	78ba      	ldrb	r2, [r7, #2]
 8007b72:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8007b76:	e002      	b.n	8007b7e <VL53L0X_set_vcsel_pulse_period+0x4ca>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007b78:	23fc      	movs	r3, #252	@ 0xfc
 8007b7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
	}

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8007b7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d109      	bne.n	8007b9a <VL53L0X_set_vcsel_pulse_period+0x4e6>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	695b      	ldr	r3, [r3, #20]
 8007b8a:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8007b8c:	69f9      	ldr	r1, [r7, #28]
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f7fc fe30 	bl	80047f4 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8007b94:	4603      	mov	r3, r0
 8007b96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8007b9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d109      	bne.n	8007bb6 <VL53L0X_set_vcsel_pulse_period+0x502>
		Status = VL53L0X_perform_phase_calibration(
 8007ba2:	f107 010f 	add.w	r1, r7, #15
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	2200      	movs	r2, #0
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f7fe fcc2 	bl	8006534 <VL53L0X_perform_phase_calibration>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8007bb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3728      	adds	r7, #40	@ 0x28
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b086      	sub	sp, #24
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	60f8      	str	r0, [r7, #12]
 8007bca:	460b      	mov	r3, r1
 8007bcc:	607a      	str	r2, [r7, #4]
 8007bce:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8007bd4:	7afb      	ldrb	r3, [r7, #11]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d002      	beq.n	8007be0 <VL53L0X_get_vcsel_pulse_period+0x1e>
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d00a      	beq.n	8007bf4 <VL53L0X_get_vcsel_pulse_period+0x32>
 8007bde:	e013      	b.n	8007c08 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8007be0:	f107 0316 	add.w	r3, r7, #22
 8007be4:	461a      	mov	r2, r3
 8007be6:	2150      	movs	r1, #80	@ 0x50
 8007be8:	68f8      	ldr	r0, [r7, #12]
 8007bea:	f001 f94b 	bl	8008e84 <VL53L0X_RdByte>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8007bf2:	e00b      	b.n	8007c0c <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8007bf4:	f107 0316 	add.w	r3, r7, #22
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	2170      	movs	r1, #112	@ 0x70
 8007bfc:	68f8      	ldr	r0, [r7, #12]
 8007bfe:	f001 f941 	bl	8008e84 <VL53L0X_RdByte>
 8007c02:	4603      	mov	r3, r0
 8007c04:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8007c06:	e001      	b.n	8007c0c <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007c08:	23fc      	movs	r3, #252	@ 0xfc
 8007c0a:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8007c0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d107      	bne.n	8007c24 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8007c14:	7dbb      	ldrb	r3, [r7, #22]
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7fe fd5e 	bl	80066d8 <VL53L0X_decode_vcsel_period>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	701a      	strb	r2, [r3, #0]

	return Status;
 8007c24:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3718      	adds	r7, #24
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b092      	sub	sp, #72	@ 0x48
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8007c40:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8007c44:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8007c46:	f240 7376 	movw	r3, #1910	@ 0x776
 8007c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8007c4c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8007c50:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8007c52:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8007c56:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8007c58:	f240 234e 	movw	r3, #590	@ 0x24e
 8007c5c:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8007c5e:	f240 23b2 	movw	r3, #690	@ 0x2b2
 8007c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8007c64:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8007c68:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8007c6a:	f240 2326 	movw	r3, #550	@ 0x226
 8007c6e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8007c70:	2300      	movs	r3, #0
 8007c72:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8007c74:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8007c78:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8007c7e:	683a      	ldr	r2, [r7, #0]
 8007c80:	6a3b      	ldr	r3, [r7, #32]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d205      	bcs.n	8007c92 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007c86:	23fc      	movs	r3, #252	@ 0xfc
 8007c88:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		return Status;
 8007c8c:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8007c90:	e0aa      	b.n	8007de8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8007c92:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c96:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8007c98:	683a      	ldr	r2, [r7, #0]
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	643b      	str	r3, [r7, #64]	@ 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007c9e:	f107 0314 	add.w	r3, r7, #20
 8007ca2:	4619      	mov	r1, r3
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f7fc feed 	bl	8004a84 <VL53L0X_GetSequenceStepEnables>
 8007caa:	4603      	mov	r3, r0
 8007cac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 8007cb0:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d15b      	bne.n	8007d70 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 8007cb8:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d105      	bne.n	8007cca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8007cbe:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d102      	bne.n	8007cca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8007cc4:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d052      	beq.n	8007d70 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 8007cca:	f107 0310 	add.w	r3, r7, #16
 8007cce:	461a      	mov	r2, r3
 8007cd0:	2102      	movs	r1, #2
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7ff fb1c 	bl	8007310 <get_sequence_step_timeout>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8007cde:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d002      	beq.n	8007cec <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8007ce6:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8007cea:	e07d      	b.n	8007de8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 8007cec:	7d3b      	ldrb	r3, [r7, #20]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00f      	beq.n	8007d12 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8007cf2:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8007cf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cf6:	4413      	add	r3, r2
 8007cf8:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 8007cfa:	69fa      	ldr	r2, [r7, #28]
 8007cfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d204      	bcs.n	8007d0c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8007d02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d0a:	e002      	b.n	8007d12 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007d0c:	23fc      	movs	r3, #252	@ 0xfc
 8007d0e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8007d12:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d002      	beq.n	8007d20 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8007d1a:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8007d1e:	e063      	b.n	8007de8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8007d20:	7dbb      	ldrb	r3, [r7, #22]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d011      	beq.n	8007d4a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8007d26:	693a      	ldr	r2, [r7, #16]
 8007d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d2a:	4413      	add	r3, r2
 8007d2c:	005b      	lsls	r3, r3, #1
 8007d2e:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007d30:	69fa      	ldr	r2, [r7, #28]
 8007d32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d204      	bcs.n	8007d42 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8007d38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	1ad3      	subs	r3, r2, r3
 8007d3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d40:	e016      	b.n	8007d70 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007d42:	23fc      	movs	r3, #252	@ 0xfc
 8007d44:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8007d48:	e012      	b.n	8007d70 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8007d4a:	7d7b      	ldrb	r3, [r7, #21]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d00f      	beq.n	8007d70 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d54:	4413      	add	r3, r2
 8007d56:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007d58:	69fa      	ldr	r2, [r7, #28]
 8007d5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d204      	bcs.n	8007d6a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8007d60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d68:	e002      	b.n	8007d70 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007d6a:	23fc      	movs	r3, #252	@ 0xfc
 8007d6c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 8007d70:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d002      	beq.n	8007d7e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8007d78:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8007d7c:	e034      	b.n	8007de8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 8007d7e:	7dfb      	ldrb	r3, [r7, #23]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d019      	beq.n	8007db8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8007d84:	f107 030c 	add.w	r3, r7, #12
 8007d88:	461a      	mov	r2, r3
 8007d8a:	2103      	movs	r1, #3
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f7ff fabf 	bl	8007310 <get_sequence_step_timeout>
 8007d92:	4603      	mov	r3, r0
 8007d94:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d9c:	4413      	add	r3, r2
 8007d9e:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007da0:	69fa      	ldr	r2, [r7, #28]
 8007da2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d204      	bcs.n	8007db2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8007da8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	643b      	str	r3, [r7, #64]	@ 0x40
 8007db0:	e002      	b.n	8007db8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007db2:	23fc      	movs	r3, #252	@ 0xfc
 8007db4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 8007db8:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d111      	bne.n	8007de4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8007dc0:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00e      	beq.n	8007de4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8007dc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	643b      	str	r3, [r7, #64]	@ 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 8007dce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007dd0:	2104      	movs	r1, #4
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f7ff fb7c 	bl	80074d0 <set_sequence_step_timeout>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8007de4:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3748      	adds	r7, #72	@ 0x48
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b090      	sub	sp, #64	@ 0x40
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8007e00:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8007e04:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8007e06:	f240 7376 	movw	r3, #1910	@ 0x776
 8007e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8007e0c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8007e10:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8007e12:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8007e16:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8007e18:	f240 234e 	movw	r3, #590	@ 0x24e
 8007e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8007e1e:	f240 23b2 	movw	r3, #690	@ 0x2b2
 8007e22:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8007e24:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8007e28:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8007e2a:	f240 2326 	movw	r3, #550	@ 0x226
 8007e2e:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8007e30:	2300      	movs	r3, #0
 8007e32:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8007e34:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e38:	441a      	add	r2, r3
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8007e3e:	f107 0318 	add.w	r3, r7, #24
 8007e42:	4619      	mov	r1, r3
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f7fc fe1d 	bl	8004a84 <VL53L0X_GetSequenceStepEnables>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8007e50:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d002      	beq.n	8007e5e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8007e58:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007e5c:	e075      	b.n	8007f4a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8007e5e:	7e3b      	ldrb	r3, [r7, #24]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d105      	bne.n	8007e70 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8007e64:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d102      	bne.n	8007e70 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8007e6a:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d030      	beq.n	8007ed2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8007e70:	f107 0310 	add.w	r3, r7, #16
 8007e74:	461a      	mov	r2, r3
 8007e76:	2102      	movs	r1, #2
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f7ff fa49 	bl	8007310 <get_sequence_step_timeout>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8007e84:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d122      	bne.n	8007ed2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8007e8c:	7e3b      	ldrb	r3, [r7, #24]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d007      	beq.n	8007ea2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8007e96:	6939      	ldr	r1, [r7, #16]
 8007e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e9a:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8007e9c:	441a      	add	r2, r3
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8007ea2:	7ebb      	ldrb	r3, [r7, #26]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d009      	beq.n	8007ebc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8007eac:	6939      	ldr	r1, [r7, #16]
 8007eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb0:	440b      	add	r3, r1
 8007eb2:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8007eb4:	441a      	add	r2, r3
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	601a      	str	r2, [r3, #0]
 8007eba:	e00a      	b.n	8007ed2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8007ebc:	7e7b      	ldrb	r3, [r7, #25]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d007      	beq.n	8007ed2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8007ec6:	6939      	ldr	r1, [r7, #16]
 8007ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eca:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8007ecc:	441a      	add	r2, r3
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007ed2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d114      	bne.n	8007f04 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8007eda:	7efb      	ldrb	r3, [r7, #27]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d011      	beq.n	8007f04 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8007ee0:	f107 030c 	add.w	r3, r7, #12
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	2103      	movs	r1, #3
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f7ff fa11 	bl	8007310 <get_sequence_step_timeout>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8007ef8:	68f9      	ldr	r1, [r7, #12]
 8007efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efc:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8007efe:	441a      	add	r2, r3
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007f04:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d114      	bne.n	8007f36 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8007f0c:	7f3b      	ldrb	r3, [r7, #28]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d011      	beq.n	8007f36 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8007f12:	f107 0314 	add.w	r3, r7, #20
 8007f16:	461a      	mov	r2, r3
 8007f18:	2104      	movs	r1, #4
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7ff f9f8 	bl	8007310 <get_sequence_step_timeout>
 8007f20:	4603      	mov	r3, r0
 8007f22:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8007f2a:	6979      	ldr	r1, [r7, #20]
 8007f2c:	6a3b      	ldr	r3, [r7, #32]
 8007f2e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8007f30:	441a      	add	r2, r3
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007f36:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d103      	bne.n	8007f46 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007f46:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3740      	adds	r7, #64	@ 0x40
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
	...

08007f54 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b088      	sub	sp, #32
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8007f62:	2300      	movs	r3, #0
 8007f64:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8007f66:	e0c6      	b.n	80080f6 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	683a      	ldr	r2, [r7, #0]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	74fb      	strb	r3, [r7, #19]
		Index++;
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	3301      	adds	r3, #1
 8007f76:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8007f78:	7cfb      	ldrb	r3, [r7, #19]
 8007f7a:	2bff      	cmp	r3, #255	@ 0xff
 8007f7c:	f040 808d 	bne.w	800809a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	683a      	ldr	r2, [r7, #0]
 8007f84:	4413      	add	r3, r2
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	747b      	strb	r3, [r7, #17]
			Index++;
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	3301      	adds	r3, #1
 8007f8e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8007f90:	7c7b      	ldrb	r3, [r7, #17]
 8007f92:	2b03      	cmp	r3, #3
 8007f94:	d87e      	bhi.n	8008094 <VL53L0X_load_tuning_settings+0x140>
 8007f96:	a201      	add	r2, pc, #4	@ (adr r2, 8007f9c <VL53L0X_load_tuning_settings+0x48>)
 8007f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9c:	08007fad 	.word	0x08007fad
 8007fa0:	08007fe7 	.word	0x08007fe7
 8007fa4:	08008021 	.word	0x08008021
 8007fa8:	0800805b 	.word	0x0800805b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	683a      	ldr	r2, [r7, #0]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	743b      	strb	r3, [r7, #16]
				Index++;
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	683a      	ldr	r2, [r7, #0]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007fcc:	7c3b      	ldrb	r3, [r7, #16]
 8007fce:	b29b      	uxth	r3, r3
 8007fd0:	021b      	lsls	r3, r3, #8
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	7bfb      	ldrb	r3, [r7, #15]
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	4413      	add	r3, r2
 8007fda:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	89ba      	ldrh	r2, [r7, #12]
 8007fe0:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
				break;
 8007fe4:	e087      	b.n	80080f6 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	683a      	ldr	r2, [r7, #0]
 8007fea:	4413      	add	r3, r2
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	743b      	strb	r3, [r7, #16]
				Index++;
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	683a      	ldr	r2, [r7, #0]
 8007ffa:	4413      	add	r3, r2
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	3301      	adds	r3, #1
 8008004:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008006:	7c3b      	ldrb	r3, [r7, #16]
 8008008:	b29b      	uxth	r3, r3
 800800a:	021b      	lsls	r3, r3, #8
 800800c:	b29a      	uxth	r2, r3
 800800e:	7bfb      	ldrb	r3, [r7, #15]
 8008010:	b29b      	uxth	r3, r3
 8008012:	4413      	add	r3, r2
 8008014:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	89ba      	ldrh	r2, [r7, #12]
 800801a:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
					Temp16);
				break;
 800801e:	e06a      	b.n	80080f6 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	683a      	ldr	r2, [r7, #0]
 8008024:	4413      	add	r3, r2
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	743b      	strb	r3, [r7, #16]
				Index++;
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	3301      	adds	r3, #1
 800802e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	683a      	ldr	r2, [r7, #0]
 8008034:	4413      	add	r3, r2
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	73fb      	strb	r3, [r7, #15]
				Index++;
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	3301      	adds	r3, #1
 800803e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8008040:	7c3b      	ldrb	r3, [r7, #16]
 8008042:	b29b      	uxth	r3, r3
 8008044:	021b      	lsls	r3, r3, #8
 8008046:	b29a      	uxth	r2, r3
 8008048:	7bfb      	ldrb	r3, [r7, #15]
 800804a:	b29b      	uxth	r3, r3
 800804c:	4413      	add	r3, r2
 800804e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	89ba      	ldrh	r2, [r7, #12]
 8008054:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
				break;
 8008058:	e04d      	b.n	80080f6 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	683a      	ldr	r2, [r7, #0]
 800805e:	4413      	add	r3, r2
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	743b      	strb	r3, [r7, #16]
				Index++;
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	3301      	adds	r3, #1
 8008068:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	683a      	ldr	r2, [r7, #0]
 800806e:	4413      	add	r3, r2
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	73fb      	strb	r3, [r7, #15]
				Index++;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	3301      	adds	r3, #1
 8008078:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800807a:	7c3b      	ldrb	r3, [r7, #16]
 800807c:	b29b      	uxth	r3, r3
 800807e:	021b      	lsls	r3, r3, #8
 8008080:	b29a      	uxth	r2, r3
 8008082:	7bfb      	ldrb	r3, [r7, #15]
 8008084:	b29b      	uxth	r3, r3
 8008086:	4413      	add	r3, r2
 8008088:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	89ba      	ldrh	r2, [r7, #12]
 800808e:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c
				break;
 8008092:	e030      	b.n	80080f6 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008094:	23fc      	movs	r3, #252	@ 0xfc
 8008096:	77fb      	strb	r3, [r7, #31]
 8008098:	e02d      	b.n	80080f6 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800809a:	7cfb      	ldrb	r3, [r7, #19]
 800809c:	2b04      	cmp	r3, #4
 800809e:	d828      	bhi.n	80080f2 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	683a      	ldr	r2, [r7, #0]
 80080a4:	4413      	add	r3, r2
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	74bb      	strb	r3, [r7, #18]
			Index++;
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	3301      	adds	r3, #1
 80080ae:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 80080b0:	2300      	movs	r3, #0
 80080b2:	61bb      	str	r3, [r7, #24]
 80080b4:	e00f      	b.n	80080d6 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	683a      	ldr	r2, [r7, #0]
 80080ba:	4413      	add	r3, r2
 80080bc:	7819      	ldrb	r1, [r3, #0]
 80080be:	f107 0208 	add.w	r2, r7, #8
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	4413      	add	r3, r2
 80080c6:	460a      	mov	r2, r1
 80080c8:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	3301      	adds	r3, #1
 80080ce:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	3301      	adds	r3, #1
 80080d4:	61bb      	str	r3, [r7, #24]
 80080d6:	7cfb      	ldrb	r3, [r7, #19]
 80080d8:	69ba      	ldr	r2, [r7, #24]
 80080da:	429a      	cmp	r2, r3
 80080dc:	dbeb      	blt.n	80080b6 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 80080de:	7cfb      	ldrb	r3, [r7, #19]
 80080e0:	f107 0208 	add.w	r2, r7, #8
 80080e4:	7cb9      	ldrb	r1, [r7, #18]
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 fdee 	bl	8008cc8 <VL53L0X_WriteMulti>
 80080ec:	4603      	mov	r3, r0
 80080ee:	77fb      	strb	r3, [r7, #31]
 80080f0:	e001      	b.n	80080f6 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80080f2:	23fc      	movs	r3, #252	@ 0xfc
 80080f4:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	683a      	ldr	r2, [r7, #0]
 80080fa:	4413      	add	r3, r2
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d004      	beq.n	800810c <VL53L0X_load_tuning_settings+0x1b8>
 8008102:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008106:	2b00      	cmp	r3, #0
 8008108:	f43f af2e 	beq.w	8007f68 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800810c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3720      	adds	r7, #32
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b088      	sub	sp, #32
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008124:	2300      	movs	r3, #0
 8008126:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800812e:	f107 0313 	add.w	r3, r7, #19
 8008132:	4619      	mov	r1, r3
 8008134:	68f8      	ldr	r0, [r7, #12]
 8008136:	f7fc fd31 	bl	8004b9c <VL53L0X_GetXTalkCompensationEnable>
 800813a:	4603      	mov	r3, r0
 800813c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800813e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d111      	bne.n	800816a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8008146:	7cfb      	ldrb	r3, [r7, #19]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00e      	beq.n	800816a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6a1b      	ldr	r3, [r3, #32]
 8008150:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	8a9b      	ldrh	r3, [r3, #20]
 8008156:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	fb02 f303 	mul.w	r3, r2, r3
 800815e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	3380      	adds	r3, #128	@ 0x80
 8008164:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800816a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800816e:	4618      	mov	r0, r3
 8008170:	3720      	adds	r7, #32
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b086      	sub	sp, #24
 800817a:	af00      	add	r7, sp, #0
 800817c:	60f8      	str	r0, [r7, #12]
 800817e:	60b9      	str	r1, [r7, #8]
 8008180:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008182:	2300      	movs	r3, #0
 8008184:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800818e:	f107 0310 	add.w	r3, r7, #16
 8008192:	461a      	mov	r2, r3
 8008194:	68b9      	ldr	r1, [r7, #8]
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f7ff ffbe 	bl	8008118 <VL53L0X_get_total_xtalk_rate>
 800819c:	4603      	mov	r3, r0
 800819e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 80081a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d105      	bne.n	80081b4 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	441a      	add	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	601a      	str	r2, [r3, #0]

	return Status;
 80081b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3718      	adds	r7, #24
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b09a      	sub	sp, #104	@ 0x68
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	607a      	str	r2, [r7, #4]
 80081cc:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 80081ce:	2312      	movs	r3, #18
 80081d0:	657b      	str	r3, [r7, #84]	@ 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 80081d2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80081d6:	653b      	str	r3, [r7, #80]	@ 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 80081d8:	2342      	movs	r3, #66	@ 0x42
 80081da:	64fb      	str	r3, [r7, #76]	@ 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 80081dc:	2306      	movs	r3, #6
 80081de:	64bb      	str	r3, [r7, #72]	@ 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 80081e0:	2307      	movs	r3, #7
 80081e2:	647b      	str	r3, [r7, #68]	@ 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80081e4:	2300      	movs	r3, #0
 80081e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f8b3 3154 	ldrh.w	r3, [r3, #340]	@ 0x154
	dmaxCalRange_mm =
 80081f0:	63fb      	str	r3, [r7, #60]	@ 0x3c

	dmaxCalSignalRateRtn_mcps =
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 80081f8:	63bb      	str	r3, [r7, #56]	@ 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 80081fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80081fe:	fb02 f303 	mul.w	r3, r2, r3
 8008202:	637b      	str	r3, [r7, #52]	@ 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8008204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008206:	3380      	adds	r3, #128	@ 0x80
 8008208:	0a1b      	lsrs	r3, r3, #8
 800820a:	637b      	str	r3, [r7, #52]	@ 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800820c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800820e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008210:	fb02 f303 	mul.w	r3, r2, r3
 8008214:	637b      	str	r3, [r7, #52]	@ 0x34

	minSignalNeeded_p1 = 0;
 8008216:	2300      	movs	r3, #0
 8008218:	667b      	str	r3, [r7, #100]	@ 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d01a      	beq.n	8008256 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	029b      	lsls	r3, r3, #10
 8008224:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800822a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800822c:	4413      	add	r3, r2
 800822e:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8008230:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	fbb2 f3f3 	udiv	r3, r2, r3
 8008238:	667b      	str	r3, [r7, #100]	@ 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800823a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800823c:	4613      	mov	r3, r2
 800823e:	005b      	lsls	r3, r3, #1
 8008240:	4413      	add	r3, r2
 8008242:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8008244:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008246:	fb03 f303 	mul.w	r3, r3, r3
 800824a:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800824c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800824e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8008252:	0c1b      	lsrs	r3, r3, #16
 8008254:	667b      	str	r3, [r7, #100]	@ 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800825a:	fb02 f303 	mul.w	r3, r2, r3
 800825e:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8008260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008262:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8008266:	0c1b      	lsrs	r3, r3, #16
 8008268:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800826a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800826c:	fb03 f303 	mul.w	r3, r3, r3
 8008270:	62fb      	str	r3, [r7, #44]	@ 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8008272:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008274:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8008278:	0c1b      	lsrs	r3, r3, #16
 800827a:	62bb      	str	r3, [r7, #40]	@ 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800827c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800827e:	085a      	lsrs	r2, r3, #1
 8008280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008282:	441a      	add	r2, r3
 8008284:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008286:	fbb2 f3f3 	udiv	r3, r2, r3
 800828a:	62bb      	str	r3, [r7, #40]	@ 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800828c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800828e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008290:	fb02 f303 	mul.w	r3, r2, r3
 8008294:	62bb      	str	r3, [r7, #40]	@ 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8008296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800829c:	d302      	bcc.n	80082a4 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800829e:	4b54      	ldr	r3, [pc, #336]	@ (80083f0 <VL53L0X_calc_dmax+0x230>)
 80082a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80082a2:	e015      	b.n	80082d0 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 80082a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082a6:	085a      	lsrs	r2, r3, #1
 80082a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80082aa:	441a      	add	r2, r3
 80082ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80082b2:	677b      	str	r3, [r7, #116]	@ 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 80082b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80082b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80082b8:	fb02 f303 	mul.w	r3, r2, r3
 80082bc:	677b      	str	r3, [r7, #116]	@ 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 80082be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80082c0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80082c4:	0c1b      	lsrs	r3, r3, #16
 80082c6:	663b      	str	r3, [r7, #96]	@ 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 80082c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80082ca:	fb03 f303 	mul.w	r3, r3, r3
 80082ce:	663b      	str	r3, [r7, #96]	@ 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 80082d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082d2:	039b      	lsls	r3, r3, #14
 80082d4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80082d8:	4a46      	ldr	r2, [pc, #280]	@ (80083f4 <VL53L0X_calc_dmax+0x234>)
 80082da:	fba2 2303 	umull	r2, r3, r2, r3
 80082de:	099b      	lsrs	r3, r3, #6
 80082e0:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 80082e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e4:	fb03 f303 	mul.w	r3, r3, r3
 80082e8:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 80082ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082ec:	fb03 f303 	mul.w	r3, r3, r3
 80082f0:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 80082f2:	6a3b      	ldr	r3, [r7, #32]
 80082f4:	3308      	adds	r3, #8
 80082f6:	091b      	lsrs	r3, r3, #4
 80082f8:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 80082fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082fc:	6a3b      	ldr	r3, [r7, #32]
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	627b      	str	r3, [r7, #36]	@ 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8008302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008304:	4613      	mov	r3, r2
 8008306:	005b      	lsls	r3, r3, #1
 8008308:	4413      	add	r3, r2
 800830a:	011b      	lsls	r3, r3, #4
 800830c:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800830e:	69fb      	ldr	r3, [r7, #28]
 8008310:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8008314:	0b9b      	lsrs	r3, r3, #14
 8008316:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8008318:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800831a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800831c:	4413      	add	r3, r2
 800831e:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8008320:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008322:	085b      	lsrs	r3, r3, #1
 8008324:	69ba      	ldr	r2, [r7, #24]
 8008326:	4413      	add	r3, r2
 8008328:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800832a:	69ba      	ldr	r2, [r7, #24]
 800832c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800832e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008332:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	039b      	lsls	r3, r3, #14
 8008338:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	085b      	lsrs	r3, r3, #1
 800833e:	69ba      	ldr	r2, [r7, #24]
 8008340:	4413      	add	r3, r2
 8008342:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8008344:	69ba      	ldr	r2, [r7, #24]
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	fbb2 f3f3 	udiv	r3, r2, r3
 800834c:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008352:	fb02 f303 	mul.w	r3, r2, r3
 8008356:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800835e:	4a25      	ldr	r2, [pc, #148]	@ (80083f4 <VL53L0X_calc_dmax+0x234>)
 8008360:	fba2 2303 	umull	r2, r3, r2, r3
 8008364:	099b      	lsrs	r3, r3, #6
 8008366:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8008368:	69bb      	ldr	r3, [r7, #24]
 800836a:	011b      	lsls	r3, r3, #4
 800836c:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8008374:	4a1f      	ldr	r2, [pc, #124]	@ (80083f4 <VL53L0X_calc_dmax+0x234>)
 8008376:	fba2 2303 	umull	r2, r3, r2, r3
 800837a:	099b      	lsrs	r3, r3, #6
 800837c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800837e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008380:	3380      	adds	r3, #128	@ 0x80
 8008382:	0a1b      	lsrs	r3, r3, #8
 8008384:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d008      	beq.n	800839e <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	085a      	lsrs	r2, r3, #1
 8008390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008392:	441a      	add	r2, r3
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	fbb2 f3f3 	udiv	r3, r2, r3
 800839a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800839c:	e001      	b.n	80083a2 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800839e:	2300      	movs	r3, #0
 80083a0:	65bb      	str	r3, [r7, #88]	@ 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 80083a2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80083a4:	f7fe f9be 	bl	8006724 <VL53L0X_isqrt>
 80083a8:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d008      	beq.n	80083c2 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	085a      	lsrs	r2, r3, #1
 80083b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083b6:	441a      	add	r2, r3
 80083b8:	69bb      	ldr	r3, [r7, #24]
 80083ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80083be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80083c0:	e001      	b.n	80083c6 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 80083c2:	2300      	movs	r3, #0
 80083c4:	65fb      	str	r3, [r7, #92]	@ 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 80083c6:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80083c8:	f7fe f9ac 	bl	8006724 <VL53L0X_isqrt>
 80083cc:	65f8      	str	r0, [r7, #92]	@ 0x5c

	*pdmax_mm = dmaxDark;
 80083ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80083d0:	693a      	ldr	r2, [r7, #16]
 80083d2:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 80083d4:	693a      	ldr	r2, [r7, #16]
 80083d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80083d8:	429a      	cmp	r2, r3
 80083da:	d902      	bls.n	80083e2 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 80083dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80083de:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80083e0:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 80083e2:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3768      	adds	r7, #104	@ 0x68
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	fff00000 	.word	0xfff00000
 80083f4:	10624dd3 	.word	0x10624dd3

080083f8 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b0b4      	sub	sp, #208	@ 0xd0
 80083fc:	af04      	add	r7, sp, #16
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	607a      	str	r2, [r7, #4]
 8008404:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8008406:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800840a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800840e:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8008412:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8008416:	f44f 13c8 	mov.w	r3, #1638400	@ 0x190000
 800841a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800841e:	f241 235c 	movw	r3, #4700	@ 0x125c
 8008422:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8008426:	4b9e      	ldr	r3, [pc, #632]	@ (80086a0 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8008428:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800842c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8008430:	67fb      	str	r3, [r7, #124]	@ 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8008432:	f04f 4270 	mov.w	r2, #4026531840	@ 0xf0000000
 8008436:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800843a:	fbb2 f3f3 	udiv	r3, r2, r3
 800843e:	67bb      	str	r3, [r7, #120]	@ 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8008440:	4b98      	ldr	r3, [pc, #608]	@ (80086a4 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8008442:	677b      	str	r3, [r7, #116]	@ 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8008444:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008448:	673b      	str	r3, [r7, #112]	@ 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800844a:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 800844e:	66fb      	str	r3, [r7, #108]	@ 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8008450:	f240 6377 	movw	r3, #1655	@ 0x677
 8008454:	66bb      	str	r3, [r7, #104]	@ 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008456:	2300      	movs	r3, #0
 8008458:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	6a1b      	ldr	r3, [r3, #32]
 8008460:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800846a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800846e:	0c1b      	lsrs	r3, r3, #16
 8008470:	667b      	str	r3, [r7, #100]	@ 0x64

	correctedSignalRate_mcps =
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	663b      	str	r3, [r7, #96]	@ 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8008478:	f107 0310 	add.w	r3, r7, #16
 800847c:	461a      	mov	r2, r3
 800847e:	68b9      	ldr	r1, [r7, #8]
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f7ff fe78 	bl	8008176 <VL53L0X_get_total_signal_rate>
 8008486:	4603      	mov	r3, r0
 8008488:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800848c:	f107 0314 	add.w	r3, r7, #20
 8008490:	461a      	mov	r2, r3
 8008492:	68b9      	ldr	r1, [r7, #8]
 8008494:	68f8      	ldr	r0, [r7, #12]
 8008496:	f7ff fe3f 	bl	8008118 <VL53L0X_get_total_xtalk_rate>
 800849a:	4603      	mov	r3, r0
 800849c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80084a6:	fb02 f303 	mul.w	r3, r2, r3
 80084aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 80084ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084ae:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80084b2:	0c1b      	lsrs	r3, r3, #16
 80084b4:	65fb      	str	r3, [r7, #92]	@ 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80084bc:	fb02 f303 	mul.w	r3, r2, r3
 80084c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 80084c4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 80084c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d902      	bls.n	80084d4 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 80084ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 80084d4:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d168      	bne.n	80085ae <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80084e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 80084ec:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 80084f0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80084f4:	461a      	mov	r2, r3
 80084f6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	f7fe feb4 	bl	8007268 <VL53L0X_calc_timeout_mclks>
 8008500:	6578      	str	r0, [r7, #84]	@ 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008508:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 8008512:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8008516:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800851a:	461a      	mov	r2, r3
 800851c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f7fe fea1 	bl	8007268 <VL53L0X_calc_timeout_mclks>
 8008526:	64f8      	str	r0, [r7, #76]	@ 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8008528:	2303      	movs	r3, #3
 800852a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		if (finalRangeVcselPCLKS == 8)
 800852e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8008532:	2b08      	cmp	r3, #8
 8008534:	d102      	bne.n	800853c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8008536:	2302      	movs	r3, #2
 8008538:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800853c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800853e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008540:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8008542:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008546:	fb02 f303 	mul.w	r3, r2, r3
 800854a:	02db      	lsls	r3, r3, #11
 800854c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8008550:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008554:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8008558:	4a53      	ldr	r2, [pc, #332]	@ (80086a8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800855a:	fba2 2303 	umull	r2, r3, r2, r3
 800855e:	099b      	lsrs	r3, r3, #6
 8008560:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8008564:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008568:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800856a:	fb02 f303 	mul.w	r3, r2, r3
 800856e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8008572:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008576:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800857a:	4a4b      	ldr	r2, [pc, #300]	@ (80086a8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800857c:	fba2 2303 	umull	r2, r3, r2, r3
 8008580:	099b      	lsrs	r3, r3, #6
 8008582:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	3380      	adds	r3, #128	@ 0x80
 800858a:	0a1b      	lsrs	r3, r3, #8
 800858c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800858e:	693a      	ldr	r2, [r7, #16]
 8008590:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008594:	fb02 f303 	mul.w	r3, r2, r3
 8008598:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800859c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80085a0:	3380      	adds	r3, #128	@ 0x80
 80085a2:	0a1b      	lsrs	r3, r3, #8
 80085a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	021b      	lsls	r3, r3, #8
 80085ac:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 80085ae:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d002      	beq.n	80085bc <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 80085b6:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 80085ba:	e15e      	b.n	800887a <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 80085bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d10c      	bne.n	80085dc <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80085c8:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80085d0:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
		*pDmax_mm = 0;
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	2200      	movs	r2, #0
 80085d8:	601a      	str	r2, [r3, #0]
 80085da:	e14c      	b.n	8008876 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 80085dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d102      	bne.n	80085ea <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 80085e4:	2301      	movs	r3, #1
 80085e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 80085ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80085ee:	64bb      	str	r3, [r7, #72]	@ 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 80085f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085f2:	041a      	lsls	r2, r3, #16
 80085f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80085f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80085fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 80085fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008602:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008604:	429a      	cmp	r2, r3
 8008606:	d902      	bls.n	800860e <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8008608:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800860a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800860e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008612:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8008616:	fb02 f303 	mul.w	r3, r2, r3
 800861a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800861e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8008622:	4613      	mov	r3, r2
 8008624:	005b      	lsls	r3, r3, #1
 8008626:	4413      	add	r3, r2
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	4618      	mov	r0, r3
 800862c:	f7fe f87a 	bl	8006724 <VL53L0X_isqrt>
 8008630:	4603      	mov	r3, r0
 8008632:	005b      	lsls	r3, r3, #1
 8008634:	647b      	str	r3, [r7, #68]	@ 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	891b      	ldrh	r3, [r3, #8]
 800863a:	461a      	mov	r2, r3
 800863c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800863e:	fb02 f303 	mul.w	r3, r2, r3
 8008642:	643b      	str	r3, [r7, #64]	@ 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008644:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008646:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8008648:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800864c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800864e:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8008650:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8008654:	4a14      	ldr	r2, [pc, #80]	@ (80086a8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008656:	fba2 2303 	umull	r2, r3, r2, r3
 800865a:	099b      	lsrs	r3, r3, #6
 800865c:	63fb      	str	r3, [r7, #60]	@ 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800865e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008660:	041b      	lsls	r3, r3, #16
 8008662:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8008666:	4a10      	ldr	r2, [pc, #64]	@ (80086a8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 8008668:	fba2 2303 	umull	r2, r3, r2, r3
 800866c:	099b      	lsrs	r3, r3, #6
 800866e:	63bb      	str	r3, [r7, #56]	@ 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8008670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008672:	021b      	lsls	r3, r3, #8
 8008674:	63fb      	str	r3, [r7, #60]	@ 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8008676:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800867a:	fbb2 f3f3 	udiv	r3, r2, r3
 800867e:	2b00      	cmp	r3, #0
 8008680:	bfb8      	it	lt
 8008682:	425b      	neglt	r3, r3
 8008684:	637b      	str	r3, [r7, #52]	@ 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8008686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008688:	021b      	lsls	r3, r3, #8
 800868a:	637b      	str	r3, [r7, #52]	@ 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	7e1b      	ldrb	r3, [r3, #24]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00b      	beq.n	80086ac <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8008694:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008698:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800869c:	e033      	b.n	8008706 <VL53L0X_calc_sigma_estimate+0x30e>
 800869e:	bf00      	nop
 80086a0:	028f87ae 	.word	0x028f87ae
 80086a4:	0006999a 	.word	0x0006999a
 80086a8:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 80086ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80086ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80086b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80086b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 80086ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086bc:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 80086c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086c4:	fb02 f303 	mul.w	r3, r2, r3
 80086c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 80086cc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80086d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80086d2:	4413      	add	r3, r2
 80086d4:	0c1b      	lsrs	r3, r3, #16
 80086d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 80086da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086de:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80086e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 80086e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086ea:	085b      	lsrs	r3, r3, #1
 80086ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 80086f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80086f4:	fb03 f303 	mul.w	r3, r3, r3
 80086f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 80086fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008700:	0b9b      	lsrs	r3, r3, #14
 8008702:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8008706:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800870a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800870c:	fb02 f303 	mul.w	r3, r2, r3
 8008710:	633b      	str	r3, [r7, #48]	@ 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8008712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008714:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8008718:	0c1b      	lsrs	r3, r3, #16
 800871a:	633b      	str	r3, [r7, #48]	@ 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800871c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800871e:	fb03 f303 	mul.w	r3, r3, r3
 8008722:	633b      	str	r3, [r7, #48]	@ 0x30

		sqr2 = sigmaEstimateP2;
 8008724:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008728:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800872a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800872c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8008730:	0c1b      	lsrs	r3, r3, #16
 8008732:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8008734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008736:	fb03 f303 	mul.w	r3, r3, r3
 800873a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800873c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800873e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008740:	4413      	add	r3, r2
 8008742:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8008744:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008746:	f7fd ffed 	bl	8006724 <VL53L0X_isqrt>
 800874a:	6278      	str	r0, [r7, #36]	@ 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800874c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800874e:	041b      	lsls	r3, r3, #16
 8008750:	627b      	str	r3, [r7, #36]	@ 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8008752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008754:	3332      	adds	r3, #50	@ 0x32
 8008756:	4a4b      	ldr	r2, [pc, #300]	@ (8008884 <VL53L0X_calc_sigma_estimate+0x48c>)
 8008758:	fba2 2303 	umull	r2, r3, r2, r3
 800875c:	095a      	lsrs	r2, r3, #5
 800875e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008760:	fbb2 f3f3 	udiv	r3, r2, r3
 8008764:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8008768:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800876c:	f640 32b5 	movw	r2, #2997	@ 0xbb5
 8008770:	fb02 f303 	mul.w	r3, r2, r3
 8008774:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8008778:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800877c:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8008780:	3308      	adds	r3, #8
 8008782:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		sigmaEstRtn		 /= 10000;
 8008786:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800878a:	4a3f      	ldr	r2, [pc, #252]	@ (8008888 <VL53L0X_calc_sigma_estimate+0x490>)
 800878c:	fba2 2303 	umull	r2, r3, r2, r3
 8008790:	0b5b      	lsrs	r3, r3, #13
 8008792:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8008796:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800879a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800879c:	429a      	cmp	r2, r3
 800879e:	d902      	bls.n	80087a6 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 80087a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80087a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 80087a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80087aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80087ae:	4413      	add	r3, r2
 80087b0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 80087b4:	4a35      	ldr	r2, [pc, #212]	@ (800888c <VL53L0X_calc_sigma_estimate+0x494>)
 80087b6:	fba2 2303 	umull	r2, r3, r2, r3
 80087ba:	099b      	lsrs	r3, r3, #6
 80087bc:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 80087be:	6a3b      	ldr	r3, [r7, #32]
 80087c0:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 80087c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80087c6:	441a      	add	r2, r3
 80087c8:	6a3b      	ldr	r3, [r7, #32]
 80087ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7fd ffa8 	bl	8006724 <VL53L0X_isqrt>
 80087d4:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 80087d6:	69fb      	ldr	r3, [r7, #28]
 80087d8:	021b      	lsls	r3, r3, #8
 80087da:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80087e2:	4a2a      	ldr	r2, [pc, #168]	@ (800888c <VL53L0X_calc_sigma_estimate+0x494>)
 80087e4:	fba2 2303 	umull	r2, r3, r2, r3
 80087e8:	099b      	lsrs	r3, r3, #6
 80087ea:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 80087ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80087f0:	fb03 f303 	mul.w	r3, r3, r3
 80087f4:	633b      	str	r3, [r7, #48]	@ 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	fb03 f303 	mul.w	r3, r3, r3
 80087fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 80087fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008802:	4413      	add	r3, r2
 8008804:	4618      	mov	r0, r3
 8008806:	f7fd ff8d 	bl	8006724 <VL53L0X_isqrt>
 800880a:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008812:	fb02 f303 	mul.w	r3, r2, r3
 8008816:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800881a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800881c:	2b00      	cmp	r3, #0
 800881e:	d009      	beq.n	8008834 <VL53L0X_calc_sigma_estimate+0x43c>
 8008820:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008824:	2b00      	cmp	r3, #0
 8008826:	d005      	beq.n	8008834 <VL53L0X_calc_sigma_estimate+0x43c>
 8008828:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800882c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008830:	429a      	cmp	r2, r3
 8008832:	d903      	bls.n	800883c <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8008834:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008838:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8008842:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
		Status = VL53L0X_calc_dmax(
 800884e:	6939      	ldr	r1, [r7, #16]
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	9303      	str	r3, [sp, #12]
 8008854:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008858:	9302      	str	r3, [sp, #8]
 800885a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800885e:	9301      	str	r3, [sp, #4]
 8008860:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008868:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	f7ff fca8 	bl	80081c0 <VL53L0X_calc_dmax>
 8008870:	4603      	mov	r3, r0
 8008872:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008876:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
}
 800887a:	4618      	mov	r0, r3
 800887c:	37c0      	adds	r7, #192	@ 0xc0
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	51eb851f 	.word	0x51eb851f
 8008888:	d1b71759 	.word	0xd1b71759
 800888c:	10624dd3 	.word	0x10624dd3

08008890 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b090      	sub	sp, #64	@ 0x40
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	607a      	str	r2, [r7, #4]
 800889a:	461a      	mov	r2, r3
 800889c:	460b      	mov	r3, r1
 800889e:	72fb      	strb	r3, [r7, #11]
 80088a0:	4613      	mov	r3, r2
 80088a2:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80088a4:	2300      	movs	r3, #0
 80088a6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 80088aa:	2300      	movs	r3, #0
 80088ac:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	uint8_t SignalRefClipflag = 0;
 80088b0:	2300      	movs	r3, #0
 80088b2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 80088b6:	2300      	movs	r3, #0
 80088b8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 80088bc:	2300      	movs	r3, #0
 80088be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 80088c2:	2300      	movs	r3, #0
 80088c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 80088c8:	2300      	movs	r3, #0
 80088ca:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 80088ce:	2300      	movs	r3, #0
 80088d0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 80088d4:	2300      	movs	r3, #0
 80088d6:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint16_t tmpWord = 0;
 80088da:	2300      	movs	r3, #0
 80088dc:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 80088de:	2300      	movs	r3, #0
 80088e0:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 80088e2:	7afb      	ldrb	r3, [r7, #11]
 80088e4:	10db      	asrs	r3, r3, #3
 80088e6:	b2db      	uxtb	r3, r3
 80088e8:	f003 030f 	and.w	r3, r3, #15
 80088ec:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

	if (DeviceRangeStatusInternal == 0 ||
 80088f0:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d017      	beq.n	8008928 <VL53L0X_get_pal_range_status+0x98>
 80088f8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80088fc:	2b05      	cmp	r3, #5
 80088fe:	d013      	beq.n	8008928 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8008900:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008904:	2b07      	cmp	r3, #7
 8008906:	d00f      	beq.n	8008928 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8008908:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800890c:	2b0c      	cmp	r3, #12
 800890e:	d00b      	beq.n	8008928 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8008910:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008914:	2b0d      	cmp	r3, #13
 8008916:	d007      	beq.n	8008928 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8008918:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800891c:	2b0e      	cmp	r3, #14
 800891e:	d003      	beq.n	8008928 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8008920:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008924:	2b0f      	cmp	r3, #15
 8008926:	d103      	bne.n	8008930 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8008928:	2301      	movs	r3, #1
 800892a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800892e:	e002      	b.n	8008936 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8008930:	2300      	movs	r3, #0
 8008932:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008936:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800893a:	2b00      	cmp	r3, #0
 800893c:	d109      	bne.n	8008952 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800893e:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8008942:	461a      	mov	r2, r3
 8008944:	2100      	movs	r1, #0
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f7fc f9fc 	bl	8004d44 <VL53L0X_GetLimitCheckEnable>
 800894c:	4603      	mov	r3, r0
 800894e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8008952:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008956:	2b00      	cmp	r3, #0
 8008958:	d02e      	beq.n	80089b8 <VL53L0X_get_pal_range_status+0x128>
 800895a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800895e:	2b00      	cmp	r3, #0
 8008960:	d12a      	bne.n	80089b8 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8008962:	f107 0310 	add.w	r3, r7, #16
 8008966:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800896a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800896c:	68f8      	ldr	r0, [r7, #12]
 800896e:	f7ff fd43 	bl	80083f8 <VL53L0X_calc_sigma_estimate>
 8008972:	4603      	mov	r3, r0
 8008974:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8008978:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800897c:	2b00      	cmp	r3, #0
 800897e:	d103      	bne.n	8008988 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	b29a      	uxth	r2, r3
 8008984:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008986:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8008988:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800898c:	2b00      	cmp	r3, #0
 800898e:	d113      	bne.n	80089b8 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8008990:	f107 0320 	add.w	r3, r7, #32
 8008994:	461a      	mov	r2, r3
 8008996:	2100      	movs	r1, #0
 8008998:	68f8      	ldr	r0, [r7, #12]
 800899a:	f7fc fa59 	bl	8004e50 <VL53L0X_GetLimitCheckValue>
 800899e:	4603      	mov	r3, r0
 80089a0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 80089a4:	6a3b      	ldr	r3, [r7, #32]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d006      	beq.n	80089b8 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 80089aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089ac:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d902      	bls.n	80089b8 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 80089b2:	2301      	movs	r3, #1
 80089b4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80089b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d109      	bne.n	80089d4 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80089c0:	f107 0329 	add.w	r3, r7, #41	@ 0x29
 80089c4:	461a      	mov	r2, r3
 80089c6:	2102      	movs	r1, #2
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f7fc f9bb 	bl	8004d44 <VL53L0X_GetLimitCheckEnable>
 80089ce:	4603      	mov	r3, r0
 80089d0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 80089d4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d044      	beq.n	8008a66 <VL53L0X_get_pal_range_status+0x1d6>
 80089dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d140      	bne.n	8008a66 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80089e4:	f107 031c 	add.w	r3, r7, #28
 80089e8:	461a      	mov	r2, r3
 80089ea:	2102      	movs	r1, #2
 80089ec:	68f8      	ldr	r0, [r7, #12]
 80089ee:	f7fc fa2f 	bl	8004e50 <VL53L0X_GetLimitCheckValue>
 80089f2:	4603      	mov	r3, r0
 80089f4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 80089f8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d107      	bne.n	8008a10 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008a00:	2201      	movs	r2, #1
 8008a02:	21ff      	movs	r1, #255	@ 0xff
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f000 f9bb 	bl	8008d80 <VL53L0X_WrByte>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8008a10:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d109      	bne.n	8008a2c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8008a18:	f107 0316 	add.w	r3, r7, #22
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	21b6      	movs	r1, #182	@ 0xb6
 8008a20:	68f8      	ldr	r0, [r7, #12]
 8008a22:	f000 fa59 	bl	8008ed8 <VL53L0X_RdWord>
 8008a26:	4603      	mov	r3, r0
 8008a28:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 8008a2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d107      	bne.n	8008a44 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008a34:	2200      	movs	r2, #0
 8008a36:	21ff      	movs	r1, #255	@ 0xff
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f000 f9a1 	bl	8008d80 <VL53L0X_WrByte>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8008a44:	8afb      	ldrh	r3, [r7, #22]
 8008a46:	025b      	lsls	r3, r3, #9
 8008a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a4e:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148

		if ((SignalRefClipValue > 0) &&
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d006      	beq.n	8008a66 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8008a58:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8008a5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d902      	bls.n	8008a66 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8008a60:	2301      	movs	r3, #1
 8008a62:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008a66:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d109      	bne.n	8008a82 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008a6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008a72:	461a      	mov	r2, r3
 8008a74:	2103      	movs	r1, #3
 8008a76:	68f8      	ldr	r0, [r7, #12]
 8008a78:	f7fc f964 	bl	8004d44 <VL53L0X_GetLimitCheckEnable>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8008a82:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d023      	beq.n	8008ad2 <VL53L0X_get_pal_range_status+0x242>
 8008a8a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d11f      	bne.n	8008ad2 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8008a92:	893b      	ldrh	r3, [r7, #8]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d102      	bne.n	8008a9e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a9c:	e005      	b.n	8008aaa <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	021a      	lsls	r2, r3, #8
 8008aa2:	893b      	ldrh	r3, [r7, #8]
 8008aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aa8:	637b      	str	r3, [r7, #52]	@ 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8008aaa:	f107 0318 	add.w	r3, r7, #24
 8008aae:	461a      	mov	r2, r3
 8008ab0:	2103      	movs	r1, #3
 8008ab2:	68f8      	ldr	r0, [r7, #12]
 8008ab4:	f7fc f9cc 	bl	8004e50 <VL53L0X_GetLimitCheckValue>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d006      	beq.n	8008ad2 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8008ac4:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8008ac6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d202      	bcs.n	8008ad2 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8008acc:	2301      	movs	r3, #1
 8008ace:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008ad2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d14a      	bne.n	8008b70 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 8008ada:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008ade:	2b01      	cmp	r3, #1
 8008ae0:	d103      	bne.n	8008aea <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8008ae2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ae4:	22ff      	movs	r2, #255	@ 0xff
 8008ae6:	701a      	strb	r2, [r3, #0]
 8008ae8:	e042      	b.n	8008b70 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 8008aea:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d007      	beq.n	8008b02 <VL53L0X_get_pal_range_status+0x272>
 8008af2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008af6:	2b02      	cmp	r3, #2
 8008af8:	d003      	beq.n	8008b02 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 8008afa:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008afe:	2b03      	cmp	r3, #3
 8008b00:	d103      	bne.n	8008b0a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8008b02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b04:	2205      	movs	r2, #5
 8008b06:	701a      	strb	r2, [r3, #0]
 8008b08:	e032      	b.n	8008b70 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 8008b0a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008b0e:	2b06      	cmp	r3, #6
 8008b10:	d003      	beq.n	8008b1a <VL53L0X_get_pal_range_status+0x28a>
 8008b12:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008b16:	2b09      	cmp	r3, #9
 8008b18:	d103      	bne.n	8008b22 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 8008b1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b1c:	2204      	movs	r2, #4
 8008b1e:	701a      	strb	r2, [r3, #0]
 8008b20:	e026      	b.n	8008b70 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8008b22:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008b26:	2b08      	cmp	r3, #8
 8008b28:	d007      	beq.n	8008b3a <VL53L0X_get_pal_range_status+0x2aa>
 8008b2a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008b2e:	2b0a      	cmp	r3, #10
 8008b30:	d003      	beq.n	8008b3a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8008b32:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d103      	bne.n	8008b42 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8008b3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b3c:	2203      	movs	r2, #3
 8008b3e:	701a      	strb	r2, [r3, #0]
 8008b40:	e016      	b.n	8008b70 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8008b42:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008b46:	2b04      	cmp	r3, #4
 8008b48:	d003      	beq.n	8008b52 <VL53L0X_get_pal_range_status+0x2c2>
 8008b4a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d103      	bne.n	8008b5a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8008b52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b54:	2202      	movs	r2, #2
 8008b56:	701a      	strb	r2, [r3, #0]
 8008b58:	e00a      	b.n	8008b70 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8008b5a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d103      	bne.n	8008b6a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8008b62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b64:	2201      	movs	r2, #1
 8008b66:	701a      	strb	r2, [r3, #0]
 8008b68:	e002      	b.n	8008b70 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8008b6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8008b70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d102      	bne.n	8008b7e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8008b78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8008b7e:	f107 032a 	add.w	r3, r7, #42	@ 0x2a
 8008b82:	461a      	mov	r2, r3
 8008b84:	2101      	movs	r1, #1
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	f7fc f8dc 	bl	8004d44 <VL53L0X_GetLimitCheckEnable>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8008b92:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d14f      	bne.n	8008c3a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8008b9a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d003      	beq.n	8008baa <VL53L0X_get_pal_range_status+0x31a>
 8008ba2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d103      	bne.n	8008bb2 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 8008baa:	2301      	movs	r3, #1
 8008bac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8008bb0:	e002      	b.n	8008bb8 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8008bbe:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8008bc2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8008bc6:	2b04      	cmp	r3, #4
 8008bc8:	d003      	beq.n	8008bd2 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8008bca:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d103      	bne.n	8008bda <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8008bd8:	e002      	b.n	8008be0 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8008be6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 8008bea:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d003      	beq.n	8008bfa <VL53L0X_get_pal_range_status+0x36a>
 8008bf2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d103      	bne.n	8008c02 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8008c00:	e002      	b.n	8008c08 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8008c02:	2300      	movs	r3, #0
 8008c04:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8008c0e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8008c12:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d003      	beq.n	8008c22 <VL53L0X_get_pal_range_status+0x392>
 8008c1a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8008c1e:	2b01      	cmp	r3, #1
 8008c20:	d103      	bne.n	8008c2a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8008c22:	2301      	movs	r3, #1
 8008c24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8008c28:	e002      	b.n	8008c30 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8008c36:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008c3a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f

}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3740      	adds	r7, #64	@ 0x40
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b088      	sub	sp, #32
 8008c4a:	af02      	add	r7, sp, #8
 8008c4c:	60f8      	str	r0, [r7, #12]
 8008c4e:	60b9      	str	r1, [r7, #8]
 8008c50:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	330a      	adds	r3, #10
 8008c56:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8008c64:	4619      	mov	r1, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	b29a      	uxth	r2, r3
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	9300      	str	r3, [sp, #0]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	68ba      	ldr	r2, [r7, #8]
 8008c72:	f7f8 fbcf 	bl	8001414 <HAL_I2C_Master_Transmit>
 8008c76:	4603      	mov	r3, r0
 8008c78:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8008c7a:	693b      	ldr	r3, [r7, #16]
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3718      	adds	r7, #24
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b088      	sub	sp, #32
 8008c88:	af02      	add	r7, sp, #8
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	60b9      	str	r1, [r7, #8]
 8008c8e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	330a      	adds	r3, #10
 8008c94:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8008ca2:	f043 0301 	orr.w	r3, r3, #1
 8008ca6:	b2db      	uxtb	r3, r3
 8008ca8:	4619      	mov	r1, r3
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	9300      	str	r3, [sp, #0]
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	68ba      	ldr	r2, [r7, #8]
 8008cb6:	f7f8 fcc5 	bl	8001644 <HAL_I2C_Master_Receive>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 8008cbe:	693b      	ldr	r3, [r7, #16]
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3718      	adds	r7, #24
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	607a      	str	r2, [r7, #4]
 8008cd2:	603b      	str	r3, [r7, #0]
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	2b3f      	cmp	r3, #63	@ 0x3f
 8008ce0:	d902      	bls.n	8008ce8 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8008ce2:	f06f 0303 	mvn.w	r3, #3
 8008ce6:	e016      	b.n	8008d16 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8008ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8008d20 <VL53L0X_WriteMulti+0x58>)
 8008cea:	7afb      	ldrb	r3, [r7, #11]
 8008cec:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8008cee:	683a      	ldr	r2, [r7, #0]
 8008cf0:	6879      	ldr	r1, [r7, #4]
 8008cf2:	480c      	ldr	r0, [pc, #48]	@ (8008d24 <VL53L0X_WriteMulti+0x5c>)
 8008cf4:	f000 f9ce 	bl	8009094 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	4908      	ldr	r1, [pc, #32]	@ (8008d20 <VL53L0X_WriteMulti+0x58>)
 8008d00:	68f8      	ldr	r0, [r7, #12]
 8008d02:	f7ff ffa0 	bl	8008c46 <_I2CWrite>
 8008d06:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d001      	beq.n	8008d12 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008d0e:	23ec      	movs	r3, #236	@ 0xec
 8008d10:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8008d12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3718      	adds	r7, #24
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	2000060c 	.word	0x2000060c
 8008d24:	2000060d 	.word	0x2000060d

08008d28 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b086      	sub	sp, #24
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	607a      	str	r2, [r7, #4]
 8008d32:	603b      	str	r3, [r7, #0]
 8008d34:	460b      	mov	r3, r1
 8008d36:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8008d3c:	f107 030b 	add.w	r3, r7, #11
 8008d40:	2201      	movs	r2, #1
 8008d42:	4619      	mov	r1, r3
 8008d44:	68f8      	ldr	r0, [r7, #12]
 8008d46:	f7ff ff7e 	bl	8008c46 <_I2CWrite>
 8008d4a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d002      	beq.n	8008d58 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008d52:	23ec      	movs	r3, #236	@ 0xec
 8008d54:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008d56:	e00c      	b.n	8008d72 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8008d58:	683a      	ldr	r2, [r7, #0]
 8008d5a:	6879      	ldr	r1, [r7, #4]
 8008d5c:	68f8      	ldr	r0, [r7, #12]
 8008d5e:	f7ff ff91 	bl	8008c84 <_I2CRead>
 8008d62:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d002      	beq.n	8008d70 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008d6a:	23ec      	movs	r3, #236	@ 0xec
 8008d6c:	75fb      	strb	r3, [r7, #23]
 8008d6e:	e000      	b.n	8008d72 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8008d70:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8008d72:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3718      	adds	r7, #24
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
	...

08008d80 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	460b      	mov	r3, r1
 8008d8a:	70fb      	strb	r3, [r7, #3]
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008d90:	2300      	movs	r3, #0
 8008d92:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8008d94:	4a0b      	ldr	r2, [pc, #44]	@ (8008dc4 <VL53L0X_WrByte+0x44>)
 8008d96:	78fb      	ldrb	r3, [r7, #3]
 8008d98:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8008d9a:	4a0a      	ldr	r2, [pc, #40]	@ (8008dc4 <VL53L0X_WrByte+0x44>)
 8008d9c:	78bb      	ldrb	r3, [r7, #2]
 8008d9e:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8008da0:	2202      	movs	r2, #2
 8008da2:	4908      	ldr	r1, [pc, #32]	@ (8008dc4 <VL53L0X_WrByte+0x44>)
 8008da4:	6878      	ldr	r0, [r7, #4]
 8008da6:	f7ff ff4e 	bl	8008c46 <_I2CWrite>
 8008daa:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d001      	beq.n	8008db6 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008db2:	23ec      	movs	r3, #236	@ 0xec
 8008db4:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8008db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	2000060c 	.word	0x2000060c

08008dc8 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	70fb      	strb	r3, [r7, #3]
 8008dd4:	4613      	mov	r3, r2
 8008dd6:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8008ddc:	4a0e      	ldr	r2, [pc, #56]	@ (8008e18 <VL53L0X_WrWord+0x50>)
 8008dde:	78fb      	ldrb	r3, [r7, #3]
 8008de0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8008de2:	883b      	ldrh	r3, [r7, #0]
 8008de4:	0a1b      	lsrs	r3, r3, #8
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	b2da      	uxtb	r2, r3
 8008dea:	4b0b      	ldr	r3, [pc, #44]	@ (8008e18 <VL53L0X_WrWord+0x50>)
 8008dec:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8008dee:	883b      	ldrh	r3, [r7, #0]
 8008df0:	b2da      	uxtb	r2, r3
 8008df2:	4b09      	ldr	r3, [pc, #36]	@ (8008e18 <VL53L0X_WrWord+0x50>)
 8008df4:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8008df6:	2203      	movs	r2, #3
 8008df8:	4907      	ldr	r1, [pc, #28]	@ (8008e18 <VL53L0X_WrWord+0x50>)
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f7ff ff23 	bl	8008c46 <_I2CWrite>
 8008e00:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d001      	beq.n	8008e0c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008e08:	23ec      	movs	r3, #236	@ 0xec
 8008e0a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8008e0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3710      	adds	r7, #16
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	2000060c 	.word	0x2000060c

08008e1c <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	4608      	mov	r0, r1
 8008e26:	4611      	mov	r1, r2
 8008e28:	461a      	mov	r2, r3
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	70fb      	strb	r3, [r7, #3]
 8008e2e:	460b      	mov	r3, r1
 8008e30:	70bb      	strb	r3, [r7, #2]
 8008e32:	4613      	mov	r3, r2
 8008e34:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e36:	2300      	movs	r3, #0
 8008e38:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8008e3a:	f107 020e 	add.w	r2, r7, #14
 8008e3e:	78fb      	ldrb	r3, [r7, #3]
 8008e40:	4619      	mov	r1, r3
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 f81e 	bl	8008e84 <VL53L0X_RdByte>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 8008e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d110      	bne.n	8008e76 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8008e54:	7bba      	ldrb	r2, [r7, #14]
 8008e56:	78bb      	ldrb	r3, [r7, #2]
 8008e58:	4013      	ands	r3, r2
 8008e5a:	b2da      	uxtb	r2, r3
 8008e5c:	787b      	ldrb	r3, [r7, #1]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8008e64:	7bba      	ldrb	r2, [r7, #14]
 8008e66:	78fb      	ldrb	r3, [r7, #3]
 8008e68:	4619      	mov	r1, r3
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f7ff ff88 	bl	8008d80 <VL53L0X_WrByte>
 8008e70:	4603      	mov	r3, r0
 8008e72:	73fb      	strb	r3, [r7, #15]
 8008e74:	e000      	b.n	8008e78 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8008e76:	bf00      	nop
done:
    return Status;
 8008e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3710      	adds	r7, #16
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b086      	sub	sp, #24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	607a      	str	r2, [r7, #4]
 8008e90:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e92:	2300      	movs	r3, #0
 8008e94:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8008e96:	f107 030b 	add.w	r3, r7, #11
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	68f8      	ldr	r0, [r7, #12]
 8008ea0:	f7ff fed1 	bl	8008c46 <_I2CWrite>
 8008ea4:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d002      	beq.n	8008eb2 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008eac:	23ec      	movs	r3, #236	@ 0xec
 8008eae:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008eb0:	e00c      	b.n	8008ecc <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	6879      	ldr	r1, [r7, #4]
 8008eb6:	68f8      	ldr	r0, [r7, #12]
 8008eb8:	f7ff fee4 	bl	8008c84 <_I2CRead>
 8008ebc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d002      	beq.n	8008eca <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008ec4:	23ec      	movs	r3, #236	@ 0xec
 8008ec6:	75fb      	strb	r3, [r7, #23]
 8008ec8:	e000      	b.n	8008ecc <VL53L0X_RdByte+0x48>
    }
done:
 8008eca:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8008ecc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3718      	adds	r7, #24
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}

08008ed8 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b086      	sub	sp, #24
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	607a      	str	r2, [r7, #4]
 8008ee4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8008eea:	f107 030b 	add.w	r3, r7, #11
 8008eee:	2201      	movs	r2, #1
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	68f8      	ldr	r0, [r7, #12]
 8008ef4:	f7ff fea7 	bl	8008c46 <_I2CWrite>
 8008ef8:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d002      	beq.n	8008f06 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008f00:	23ec      	movs	r3, #236	@ 0xec
 8008f02:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008f04:	e015      	b.n	8008f32 <VL53L0X_RdWord+0x5a>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8008f06:	2202      	movs	r2, #2
 8008f08:	490d      	ldr	r1, [pc, #52]	@ (8008f40 <VL53L0X_RdWord+0x68>)
 8008f0a:	68f8      	ldr	r0, [r7, #12]
 8008f0c:	f7ff feba 	bl	8008c84 <_I2CRead>
 8008f10:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d002      	beq.n	8008f1e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008f18:	23ec      	movs	r3, #236	@ 0xec
 8008f1a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008f1c:	e009      	b.n	8008f32 <VL53L0X_RdWord+0x5a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8008f1e:	4b08      	ldr	r3, [pc, #32]	@ (8008f40 <VL53L0X_RdWord+0x68>)
 8008f20:	781b      	ldrb	r3, [r3, #0]
 8008f22:	021b      	lsls	r3, r3, #8
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	4a06      	ldr	r2, [pc, #24]	@ (8008f40 <VL53L0X_RdWord+0x68>)
 8008f28:	7852      	ldrb	r2, [r2, #1]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	b29a      	uxth	r2, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8008f32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f36:	4618      	mov	r0, r3
 8008f38:	3718      	adds	r7, #24
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	bf00      	nop
 8008f40:	2000060c 	.word	0x2000060c

08008f44 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b086      	sub	sp, #24
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	607a      	str	r2, [r7, #4]
 8008f50:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f52:	2300      	movs	r3, #0
 8008f54:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8008f56:	f107 030b 	add.w	r3, r7, #11
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	4619      	mov	r1, r3
 8008f5e:	68f8      	ldr	r0, [r7, #12]
 8008f60:	f7ff fe71 	bl	8008c46 <_I2CWrite>
 8008f64:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d002      	beq.n	8008f72 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008f6c:	23ec      	movs	r3, #236	@ 0xec
 8008f6e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008f70:	e01b      	b.n	8008faa <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8008f72:	2204      	movs	r2, #4
 8008f74:	4910      	ldr	r1, [pc, #64]	@ (8008fb8 <VL53L0X_RdDWord+0x74>)
 8008f76:	68f8      	ldr	r0, [r7, #12]
 8008f78:	f7ff fe84 	bl	8008c84 <_I2CRead>
 8008f7c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d002      	beq.n	8008f8a <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008f84:	23ec      	movs	r3, #236	@ 0xec
 8008f86:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008f88:	e00f      	b.n	8008faa <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8008f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8008fb8 <VL53L0X_RdDWord+0x74>)
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	061a      	lsls	r2, r3, #24
 8008f90:	4b09      	ldr	r3, [pc, #36]	@ (8008fb8 <VL53L0X_RdDWord+0x74>)
 8008f92:	785b      	ldrb	r3, [r3, #1]
 8008f94:	041b      	lsls	r3, r3, #16
 8008f96:	441a      	add	r2, r3
 8008f98:	4b07      	ldr	r3, [pc, #28]	@ (8008fb8 <VL53L0X_RdDWord+0x74>)
 8008f9a:	789b      	ldrb	r3, [r3, #2]
 8008f9c:	021b      	lsls	r3, r3, #8
 8008f9e:	4413      	add	r3, r2
 8008fa0:	4a05      	ldr	r2, [pc, #20]	@ (8008fb8 <VL53L0X_RdDWord+0x74>)
 8008fa2:	78d2      	ldrb	r2, [r2, #3]
 8008fa4:	441a      	add	r2, r3
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 8008faa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3718      	adds	r7, #24
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	2000060c 	.word	0x2000060c

08008fbc <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8008fc8:	2002      	movs	r0, #2
 8008fca:	f7f7 febb 	bl	8000d44 <HAL_Delay>
    return status;
 8008fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
	...

08008fdc <siprintf>:
 8008fdc:	b40e      	push	{r1, r2, r3}
 8008fde:	b500      	push	{lr}
 8008fe0:	b09c      	sub	sp, #112	@ 0x70
 8008fe2:	ab1d      	add	r3, sp, #116	@ 0x74
 8008fe4:	9002      	str	r0, [sp, #8]
 8008fe6:	9006      	str	r0, [sp, #24]
 8008fe8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008fec:	4809      	ldr	r0, [pc, #36]	@ (8009014 <siprintf+0x38>)
 8008fee:	9107      	str	r1, [sp, #28]
 8008ff0:	9104      	str	r1, [sp, #16]
 8008ff2:	4909      	ldr	r1, [pc, #36]	@ (8009018 <siprintf+0x3c>)
 8008ff4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ff8:	9105      	str	r1, [sp, #20]
 8008ffa:	6800      	ldr	r0, [r0, #0]
 8008ffc:	9301      	str	r3, [sp, #4]
 8008ffe:	a902      	add	r1, sp, #8
 8009000:	f000 f9aa 	bl	8009358 <_svfiprintf_r>
 8009004:	9b02      	ldr	r3, [sp, #8]
 8009006:	2200      	movs	r2, #0
 8009008:	701a      	strb	r2, [r3, #0]
 800900a:	b01c      	add	sp, #112	@ 0x70
 800900c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009010:	b003      	add	sp, #12
 8009012:	4770      	bx	lr
 8009014:	200002cc 	.word	0x200002cc
 8009018:	ffff0208 	.word	0xffff0208

0800901c <memset>:
 800901c:	4402      	add	r2, r0
 800901e:	4603      	mov	r3, r0
 8009020:	4293      	cmp	r3, r2
 8009022:	d100      	bne.n	8009026 <memset+0xa>
 8009024:	4770      	bx	lr
 8009026:	f803 1b01 	strb.w	r1, [r3], #1
 800902a:	e7f9      	b.n	8009020 <memset+0x4>

0800902c <__errno>:
 800902c:	4b01      	ldr	r3, [pc, #4]	@ (8009034 <__errno+0x8>)
 800902e:	6818      	ldr	r0, [r3, #0]
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	200002cc 	.word	0x200002cc

08009038 <__libc_init_array>:
 8009038:	b570      	push	{r4, r5, r6, lr}
 800903a:	4d0d      	ldr	r5, [pc, #52]	@ (8009070 <__libc_init_array+0x38>)
 800903c:	4c0d      	ldr	r4, [pc, #52]	@ (8009074 <__libc_init_array+0x3c>)
 800903e:	1b64      	subs	r4, r4, r5
 8009040:	10a4      	asrs	r4, r4, #2
 8009042:	2600      	movs	r6, #0
 8009044:	42a6      	cmp	r6, r4
 8009046:	d109      	bne.n	800905c <__libc_init_array+0x24>
 8009048:	4d0b      	ldr	r5, [pc, #44]	@ (8009078 <__libc_init_array+0x40>)
 800904a:	4c0c      	ldr	r4, [pc, #48]	@ (800907c <__libc_init_array+0x44>)
 800904c:	f000 fc6e 	bl	800992c <_init>
 8009050:	1b64      	subs	r4, r4, r5
 8009052:	10a4      	asrs	r4, r4, #2
 8009054:	2600      	movs	r6, #0
 8009056:	42a6      	cmp	r6, r4
 8009058:	d105      	bne.n	8009066 <__libc_init_array+0x2e>
 800905a:	bd70      	pop	{r4, r5, r6, pc}
 800905c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009060:	4798      	blx	r3
 8009062:	3601      	adds	r6, #1
 8009064:	e7ee      	b.n	8009044 <__libc_init_array+0xc>
 8009066:	f855 3b04 	ldr.w	r3, [r5], #4
 800906a:	4798      	blx	r3
 800906c:	3601      	adds	r6, #1
 800906e:	e7f2      	b.n	8009056 <__libc_init_array+0x1e>
 8009070:	08009a28 	.word	0x08009a28
 8009074:	08009a28 	.word	0x08009a28
 8009078:	08009a28 	.word	0x08009a28
 800907c:	08009a2c 	.word	0x08009a2c

08009080 <__retarget_lock_acquire_recursive>:
 8009080:	4770      	bx	lr

08009082 <__retarget_lock_release_recursive>:
 8009082:	4770      	bx	lr

08009084 <strcpy>:
 8009084:	4603      	mov	r3, r0
 8009086:	f811 2b01 	ldrb.w	r2, [r1], #1
 800908a:	f803 2b01 	strb.w	r2, [r3], #1
 800908e:	2a00      	cmp	r2, #0
 8009090:	d1f9      	bne.n	8009086 <strcpy+0x2>
 8009092:	4770      	bx	lr

08009094 <memcpy>:
 8009094:	440a      	add	r2, r1
 8009096:	4291      	cmp	r1, r2
 8009098:	f100 33ff 	add.w	r3, r0, #4294967295
 800909c:	d100      	bne.n	80090a0 <memcpy+0xc>
 800909e:	4770      	bx	lr
 80090a0:	b510      	push	{r4, lr}
 80090a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090aa:	4291      	cmp	r1, r2
 80090ac:	d1f9      	bne.n	80090a2 <memcpy+0xe>
 80090ae:	bd10      	pop	{r4, pc}

080090b0 <_free_r>:
 80090b0:	b538      	push	{r3, r4, r5, lr}
 80090b2:	4605      	mov	r5, r0
 80090b4:	2900      	cmp	r1, #0
 80090b6:	d041      	beq.n	800913c <_free_r+0x8c>
 80090b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090bc:	1f0c      	subs	r4, r1, #4
 80090be:	2b00      	cmp	r3, #0
 80090c0:	bfb8      	it	lt
 80090c2:	18e4      	addlt	r4, r4, r3
 80090c4:	f000 f8e0 	bl	8009288 <__malloc_lock>
 80090c8:	4a1d      	ldr	r2, [pc, #116]	@ (8009140 <_free_r+0x90>)
 80090ca:	6813      	ldr	r3, [r2, #0]
 80090cc:	b933      	cbnz	r3, 80090dc <_free_r+0x2c>
 80090ce:	6063      	str	r3, [r4, #4]
 80090d0:	6014      	str	r4, [r2, #0]
 80090d2:	4628      	mov	r0, r5
 80090d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090d8:	f000 b8dc 	b.w	8009294 <__malloc_unlock>
 80090dc:	42a3      	cmp	r3, r4
 80090de:	d908      	bls.n	80090f2 <_free_r+0x42>
 80090e0:	6820      	ldr	r0, [r4, #0]
 80090e2:	1821      	adds	r1, r4, r0
 80090e4:	428b      	cmp	r3, r1
 80090e6:	bf01      	itttt	eq
 80090e8:	6819      	ldreq	r1, [r3, #0]
 80090ea:	685b      	ldreq	r3, [r3, #4]
 80090ec:	1809      	addeq	r1, r1, r0
 80090ee:	6021      	streq	r1, [r4, #0]
 80090f0:	e7ed      	b.n	80090ce <_free_r+0x1e>
 80090f2:	461a      	mov	r2, r3
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	b10b      	cbz	r3, 80090fc <_free_r+0x4c>
 80090f8:	42a3      	cmp	r3, r4
 80090fa:	d9fa      	bls.n	80090f2 <_free_r+0x42>
 80090fc:	6811      	ldr	r1, [r2, #0]
 80090fe:	1850      	adds	r0, r2, r1
 8009100:	42a0      	cmp	r0, r4
 8009102:	d10b      	bne.n	800911c <_free_r+0x6c>
 8009104:	6820      	ldr	r0, [r4, #0]
 8009106:	4401      	add	r1, r0
 8009108:	1850      	adds	r0, r2, r1
 800910a:	4283      	cmp	r3, r0
 800910c:	6011      	str	r1, [r2, #0]
 800910e:	d1e0      	bne.n	80090d2 <_free_r+0x22>
 8009110:	6818      	ldr	r0, [r3, #0]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	6053      	str	r3, [r2, #4]
 8009116:	4408      	add	r0, r1
 8009118:	6010      	str	r0, [r2, #0]
 800911a:	e7da      	b.n	80090d2 <_free_r+0x22>
 800911c:	d902      	bls.n	8009124 <_free_r+0x74>
 800911e:	230c      	movs	r3, #12
 8009120:	602b      	str	r3, [r5, #0]
 8009122:	e7d6      	b.n	80090d2 <_free_r+0x22>
 8009124:	6820      	ldr	r0, [r4, #0]
 8009126:	1821      	adds	r1, r4, r0
 8009128:	428b      	cmp	r3, r1
 800912a:	bf04      	itt	eq
 800912c:	6819      	ldreq	r1, [r3, #0]
 800912e:	685b      	ldreq	r3, [r3, #4]
 8009130:	6063      	str	r3, [r4, #4]
 8009132:	bf04      	itt	eq
 8009134:	1809      	addeq	r1, r1, r0
 8009136:	6021      	streq	r1, [r4, #0]
 8009138:	6054      	str	r4, [r2, #4]
 800913a:	e7ca      	b.n	80090d2 <_free_r+0x22>
 800913c:	bd38      	pop	{r3, r4, r5, pc}
 800913e:	bf00      	nop
 8009140:	20000790 	.word	0x20000790

08009144 <sbrk_aligned>:
 8009144:	b570      	push	{r4, r5, r6, lr}
 8009146:	4e0f      	ldr	r6, [pc, #60]	@ (8009184 <sbrk_aligned+0x40>)
 8009148:	460c      	mov	r4, r1
 800914a:	6831      	ldr	r1, [r6, #0]
 800914c:	4605      	mov	r5, r0
 800914e:	b911      	cbnz	r1, 8009156 <sbrk_aligned+0x12>
 8009150:	f000 fba6 	bl	80098a0 <_sbrk_r>
 8009154:	6030      	str	r0, [r6, #0]
 8009156:	4621      	mov	r1, r4
 8009158:	4628      	mov	r0, r5
 800915a:	f000 fba1 	bl	80098a0 <_sbrk_r>
 800915e:	1c43      	adds	r3, r0, #1
 8009160:	d103      	bne.n	800916a <sbrk_aligned+0x26>
 8009162:	f04f 34ff 	mov.w	r4, #4294967295
 8009166:	4620      	mov	r0, r4
 8009168:	bd70      	pop	{r4, r5, r6, pc}
 800916a:	1cc4      	adds	r4, r0, #3
 800916c:	f024 0403 	bic.w	r4, r4, #3
 8009170:	42a0      	cmp	r0, r4
 8009172:	d0f8      	beq.n	8009166 <sbrk_aligned+0x22>
 8009174:	1a21      	subs	r1, r4, r0
 8009176:	4628      	mov	r0, r5
 8009178:	f000 fb92 	bl	80098a0 <_sbrk_r>
 800917c:	3001      	adds	r0, #1
 800917e:	d1f2      	bne.n	8009166 <sbrk_aligned+0x22>
 8009180:	e7ef      	b.n	8009162 <sbrk_aligned+0x1e>
 8009182:	bf00      	nop
 8009184:	2000078c 	.word	0x2000078c

08009188 <_malloc_r>:
 8009188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800918c:	1ccd      	adds	r5, r1, #3
 800918e:	f025 0503 	bic.w	r5, r5, #3
 8009192:	3508      	adds	r5, #8
 8009194:	2d0c      	cmp	r5, #12
 8009196:	bf38      	it	cc
 8009198:	250c      	movcc	r5, #12
 800919a:	2d00      	cmp	r5, #0
 800919c:	4606      	mov	r6, r0
 800919e:	db01      	blt.n	80091a4 <_malloc_r+0x1c>
 80091a0:	42a9      	cmp	r1, r5
 80091a2:	d904      	bls.n	80091ae <_malloc_r+0x26>
 80091a4:	230c      	movs	r3, #12
 80091a6:	6033      	str	r3, [r6, #0]
 80091a8:	2000      	movs	r0, #0
 80091aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009284 <_malloc_r+0xfc>
 80091b2:	f000 f869 	bl	8009288 <__malloc_lock>
 80091b6:	f8d8 3000 	ldr.w	r3, [r8]
 80091ba:	461c      	mov	r4, r3
 80091bc:	bb44      	cbnz	r4, 8009210 <_malloc_r+0x88>
 80091be:	4629      	mov	r1, r5
 80091c0:	4630      	mov	r0, r6
 80091c2:	f7ff ffbf 	bl	8009144 <sbrk_aligned>
 80091c6:	1c43      	adds	r3, r0, #1
 80091c8:	4604      	mov	r4, r0
 80091ca:	d158      	bne.n	800927e <_malloc_r+0xf6>
 80091cc:	f8d8 4000 	ldr.w	r4, [r8]
 80091d0:	4627      	mov	r7, r4
 80091d2:	2f00      	cmp	r7, #0
 80091d4:	d143      	bne.n	800925e <_malloc_r+0xd6>
 80091d6:	2c00      	cmp	r4, #0
 80091d8:	d04b      	beq.n	8009272 <_malloc_r+0xea>
 80091da:	6823      	ldr	r3, [r4, #0]
 80091dc:	4639      	mov	r1, r7
 80091de:	4630      	mov	r0, r6
 80091e0:	eb04 0903 	add.w	r9, r4, r3
 80091e4:	f000 fb5c 	bl	80098a0 <_sbrk_r>
 80091e8:	4581      	cmp	r9, r0
 80091ea:	d142      	bne.n	8009272 <_malloc_r+0xea>
 80091ec:	6821      	ldr	r1, [r4, #0]
 80091ee:	1a6d      	subs	r5, r5, r1
 80091f0:	4629      	mov	r1, r5
 80091f2:	4630      	mov	r0, r6
 80091f4:	f7ff ffa6 	bl	8009144 <sbrk_aligned>
 80091f8:	3001      	adds	r0, #1
 80091fa:	d03a      	beq.n	8009272 <_malloc_r+0xea>
 80091fc:	6823      	ldr	r3, [r4, #0]
 80091fe:	442b      	add	r3, r5
 8009200:	6023      	str	r3, [r4, #0]
 8009202:	f8d8 3000 	ldr.w	r3, [r8]
 8009206:	685a      	ldr	r2, [r3, #4]
 8009208:	bb62      	cbnz	r2, 8009264 <_malloc_r+0xdc>
 800920a:	f8c8 7000 	str.w	r7, [r8]
 800920e:	e00f      	b.n	8009230 <_malloc_r+0xa8>
 8009210:	6822      	ldr	r2, [r4, #0]
 8009212:	1b52      	subs	r2, r2, r5
 8009214:	d420      	bmi.n	8009258 <_malloc_r+0xd0>
 8009216:	2a0b      	cmp	r2, #11
 8009218:	d917      	bls.n	800924a <_malloc_r+0xc2>
 800921a:	1961      	adds	r1, r4, r5
 800921c:	42a3      	cmp	r3, r4
 800921e:	6025      	str	r5, [r4, #0]
 8009220:	bf18      	it	ne
 8009222:	6059      	strne	r1, [r3, #4]
 8009224:	6863      	ldr	r3, [r4, #4]
 8009226:	bf08      	it	eq
 8009228:	f8c8 1000 	streq.w	r1, [r8]
 800922c:	5162      	str	r2, [r4, r5]
 800922e:	604b      	str	r3, [r1, #4]
 8009230:	4630      	mov	r0, r6
 8009232:	f000 f82f 	bl	8009294 <__malloc_unlock>
 8009236:	f104 000b 	add.w	r0, r4, #11
 800923a:	1d23      	adds	r3, r4, #4
 800923c:	f020 0007 	bic.w	r0, r0, #7
 8009240:	1ac2      	subs	r2, r0, r3
 8009242:	bf1c      	itt	ne
 8009244:	1a1b      	subne	r3, r3, r0
 8009246:	50a3      	strne	r3, [r4, r2]
 8009248:	e7af      	b.n	80091aa <_malloc_r+0x22>
 800924a:	6862      	ldr	r2, [r4, #4]
 800924c:	42a3      	cmp	r3, r4
 800924e:	bf0c      	ite	eq
 8009250:	f8c8 2000 	streq.w	r2, [r8]
 8009254:	605a      	strne	r2, [r3, #4]
 8009256:	e7eb      	b.n	8009230 <_malloc_r+0xa8>
 8009258:	4623      	mov	r3, r4
 800925a:	6864      	ldr	r4, [r4, #4]
 800925c:	e7ae      	b.n	80091bc <_malloc_r+0x34>
 800925e:	463c      	mov	r4, r7
 8009260:	687f      	ldr	r7, [r7, #4]
 8009262:	e7b6      	b.n	80091d2 <_malloc_r+0x4a>
 8009264:	461a      	mov	r2, r3
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	42a3      	cmp	r3, r4
 800926a:	d1fb      	bne.n	8009264 <_malloc_r+0xdc>
 800926c:	2300      	movs	r3, #0
 800926e:	6053      	str	r3, [r2, #4]
 8009270:	e7de      	b.n	8009230 <_malloc_r+0xa8>
 8009272:	230c      	movs	r3, #12
 8009274:	6033      	str	r3, [r6, #0]
 8009276:	4630      	mov	r0, r6
 8009278:	f000 f80c 	bl	8009294 <__malloc_unlock>
 800927c:	e794      	b.n	80091a8 <_malloc_r+0x20>
 800927e:	6005      	str	r5, [r0, #0]
 8009280:	e7d6      	b.n	8009230 <_malloc_r+0xa8>
 8009282:	bf00      	nop
 8009284:	20000790 	.word	0x20000790

08009288 <__malloc_lock>:
 8009288:	4801      	ldr	r0, [pc, #4]	@ (8009290 <__malloc_lock+0x8>)
 800928a:	f7ff bef9 	b.w	8009080 <__retarget_lock_acquire_recursive>
 800928e:	bf00      	nop
 8009290:	20000788 	.word	0x20000788

08009294 <__malloc_unlock>:
 8009294:	4801      	ldr	r0, [pc, #4]	@ (800929c <__malloc_unlock+0x8>)
 8009296:	f7ff bef4 	b.w	8009082 <__retarget_lock_release_recursive>
 800929a:	bf00      	nop
 800929c:	20000788 	.word	0x20000788

080092a0 <__ssputs_r>:
 80092a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092a4:	688e      	ldr	r6, [r1, #8]
 80092a6:	461f      	mov	r7, r3
 80092a8:	42be      	cmp	r6, r7
 80092aa:	680b      	ldr	r3, [r1, #0]
 80092ac:	4682      	mov	sl, r0
 80092ae:	460c      	mov	r4, r1
 80092b0:	4690      	mov	r8, r2
 80092b2:	d82d      	bhi.n	8009310 <__ssputs_r+0x70>
 80092b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80092b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80092bc:	d026      	beq.n	800930c <__ssputs_r+0x6c>
 80092be:	6965      	ldr	r5, [r4, #20]
 80092c0:	6909      	ldr	r1, [r1, #16]
 80092c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80092c6:	eba3 0901 	sub.w	r9, r3, r1
 80092ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80092ce:	1c7b      	adds	r3, r7, #1
 80092d0:	444b      	add	r3, r9
 80092d2:	106d      	asrs	r5, r5, #1
 80092d4:	429d      	cmp	r5, r3
 80092d6:	bf38      	it	cc
 80092d8:	461d      	movcc	r5, r3
 80092da:	0553      	lsls	r3, r2, #21
 80092dc:	d527      	bpl.n	800932e <__ssputs_r+0x8e>
 80092de:	4629      	mov	r1, r5
 80092e0:	f7ff ff52 	bl	8009188 <_malloc_r>
 80092e4:	4606      	mov	r6, r0
 80092e6:	b360      	cbz	r0, 8009342 <__ssputs_r+0xa2>
 80092e8:	6921      	ldr	r1, [r4, #16]
 80092ea:	464a      	mov	r2, r9
 80092ec:	f7ff fed2 	bl	8009094 <memcpy>
 80092f0:	89a3      	ldrh	r3, [r4, #12]
 80092f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80092f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092fa:	81a3      	strh	r3, [r4, #12]
 80092fc:	6126      	str	r6, [r4, #16]
 80092fe:	6165      	str	r5, [r4, #20]
 8009300:	444e      	add	r6, r9
 8009302:	eba5 0509 	sub.w	r5, r5, r9
 8009306:	6026      	str	r6, [r4, #0]
 8009308:	60a5      	str	r5, [r4, #8]
 800930a:	463e      	mov	r6, r7
 800930c:	42be      	cmp	r6, r7
 800930e:	d900      	bls.n	8009312 <__ssputs_r+0x72>
 8009310:	463e      	mov	r6, r7
 8009312:	6820      	ldr	r0, [r4, #0]
 8009314:	4632      	mov	r2, r6
 8009316:	4641      	mov	r1, r8
 8009318:	f000 faa8 	bl	800986c <memmove>
 800931c:	68a3      	ldr	r3, [r4, #8]
 800931e:	1b9b      	subs	r3, r3, r6
 8009320:	60a3      	str	r3, [r4, #8]
 8009322:	6823      	ldr	r3, [r4, #0]
 8009324:	4433      	add	r3, r6
 8009326:	6023      	str	r3, [r4, #0]
 8009328:	2000      	movs	r0, #0
 800932a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800932e:	462a      	mov	r2, r5
 8009330:	f000 fac6 	bl	80098c0 <_realloc_r>
 8009334:	4606      	mov	r6, r0
 8009336:	2800      	cmp	r0, #0
 8009338:	d1e0      	bne.n	80092fc <__ssputs_r+0x5c>
 800933a:	6921      	ldr	r1, [r4, #16]
 800933c:	4650      	mov	r0, sl
 800933e:	f7ff feb7 	bl	80090b0 <_free_r>
 8009342:	230c      	movs	r3, #12
 8009344:	f8ca 3000 	str.w	r3, [sl]
 8009348:	89a3      	ldrh	r3, [r4, #12]
 800934a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800934e:	81a3      	strh	r3, [r4, #12]
 8009350:	f04f 30ff 	mov.w	r0, #4294967295
 8009354:	e7e9      	b.n	800932a <__ssputs_r+0x8a>
	...

08009358 <_svfiprintf_r>:
 8009358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935c:	4698      	mov	r8, r3
 800935e:	898b      	ldrh	r3, [r1, #12]
 8009360:	061b      	lsls	r3, r3, #24
 8009362:	b09d      	sub	sp, #116	@ 0x74
 8009364:	4607      	mov	r7, r0
 8009366:	460d      	mov	r5, r1
 8009368:	4614      	mov	r4, r2
 800936a:	d510      	bpl.n	800938e <_svfiprintf_r+0x36>
 800936c:	690b      	ldr	r3, [r1, #16]
 800936e:	b973      	cbnz	r3, 800938e <_svfiprintf_r+0x36>
 8009370:	2140      	movs	r1, #64	@ 0x40
 8009372:	f7ff ff09 	bl	8009188 <_malloc_r>
 8009376:	6028      	str	r0, [r5, #0]
 8009378:	6128      	str	r0, [r5, #16]
 800937a:	b930      	cbnz	r0, 800938a <_svfiprintf_r+0x32>
 800937c:	230c      	movs	r3, #12
 800937e:	603b      	str	r3, [r7, #0]
 8009380:	f04f 30ff 	mov.w	r0, #4294967295
 8009384:	b01d      	add	sp, #116	@ 0x74
 8009386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800938a:	2340      	movs	r3, #64	@ 0x40
 800938c:	616b      	str	r3, [r5, #20]
 800938e:	2300      	movs	r3, #0
 8009390:	9309      	str	r3, [sp, #36]	@ 0x24
 8009392:	2320      	movs	r3, #32
 8009394:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009398:	f8cd 800c 	str.w	r8, [sp, #12]
 800939c:	2330      	movs	r3, #48	@ 0x30
 800939e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800953c <_svfiprintf_r+0x1e4>
 80093a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80093a6:	f04f 0901 	mov.w	r9, #1
 80093aa:	4623      	mov	r3, r4
 80093ac:	469a      	mov	sl, r3
 80093ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093b2:	b10a      	cbz	r2, 80093b8 <_svfiprintf_r+0x60>
 80093b4:	2a25      	cmp	r2, #37	@ 0x25
 80093b6:	d1f9      	bne.n	80093ac <_svfiprintf_r+0x54>
 80093b8:	ebba 0b04 	subs.w	fp, sl, r4
 80093bc:	d00b      	beq.n	80093d6 <_svfiprintf_r+0x7e>
 80093be:	465b      	mov	r3, fp
 80093c0:	4622      	mov	r2, r4
 80093c2:	4629      	mov	r1, r5
 80093c4:	4638      	mov	r0, r7
 80093c6:	f7ff ff6b 	bl	80092a0 <__ssputs_r>
 80093ca:	3001      	adds	r0, #1
 80093cc:	f000 80a7 	beq.w	800951e <_svfiprintf_r+0x1c6>
 80093d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093d2:	445a      	add	r2, fp
 80093d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80093d6:	f89a 3000 	ldrb.w	r3, [sl]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	f000 809f 	beq.w	800951e <_svfiprintf_r+0x1c6>
 80093e0:	2300      	movs	r3, #0
 80093e2:	f04f 32ff 	mov.w	r2, #4294967295
 80093e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093ea:	f10a 0a01 	add.w	sl, sl, #1
 80093ee:	9304      	str	r3, [sp, #16]
 80093f0:	9307      	str	r3, [sp, #28]
 80093f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80093f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80093f8:	4654      	mov	r4, sl
 80093fa:	2205      	movs	r2, #5
 80093fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009400:	484e      	ldr	r0, [pc, #312]	@ (800953c <_svfiprintf_r+0x1e4>)
 8009402:	f7f6 feed 	bl	80001e0 <memchr>
 8009406:	9a04      	ldr	r2, [sp, #16]
 8009408:	b9d8      	cbnz	r0, 8009442 <_svfiprintf_r+0xea>
 800940a:	06d0      	lsls	r0, r2, #27
 800940c:	bf44      	itt	mi
 800940e:	2320      	movmi	r3, #32
 8009410:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009414:	0711      	lsls	r1, r2, #28
 8009416:	bf44      	itt	mi
 8009418:	232b      	movmi	r3, #43	@ 0x2b
 800941a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800941e:	f89a 3000 	ldrb.w	r3, [sl]
 8009422:	2b2a      	cmp	r3, #42	@ 0x2a
 8009424:	d015      	beq.n	8009452 <_svfiprintf_r+0xfa>
 8009426:	9a07      	ldr	r2, [sp, #28]
 8009428:	4654      	mov	r4, sl
 800942a:	2000      	movs	r0, #0
 800942c:	f04f 0c0a 	mov.w	ip, #10
 8009430:	4621      	mov	r1, r4
 8009432:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009436:	3b30      	subs	r3, #48	@ 0x30
 8009438:	2b09      	cmp	r3, #9
 800943a:	d94b      	bls.n	80094d4 <_svfiprintf_r+0x17c>
 800943c:	b1b0      	cbz	r0, 800946c <_svfiprintf_r+0x114>
 800943e:	9207      	str	r2, [sp, #28]
 8009440:	e014      	b.n	800946c <_svfiprintf_r+0x114>
 8009442:	eba0 0308 	sub.w	r3, r0, r8
 8009446:	fa09 f303 	lsl.w	r3, r9, r3
 800944a:	4313      	orrs	r3, r2
 800944c:	9304      	str	r3, [sp, #16]
 800944e:	46a2      	mov	sl, r4
 8009450:	e7d2      	b.n	80093f8 <_svfiprintf_r+0xa0>
 8009452:	9b03      	ldr	r3, [sp, #12]
 8009454:	1d19      	adds	r1, r3, #4
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	9103      	str	r1, [sp, #12]
 800945a:	2b00      	cmp	r3, #0
 800945c:	bfbb      	ittet	lt
 800945e:	425b      	neglt	r3, r3
 8009460:	f042 0202 	orrlt.w	r2, r2, #2
 8009464:	9307      	strge	r3, [sp, #28]
 8009466:	9307      	strlt	r3, [sp, #28]
 8009468:	bfb8      	it	lt
 800946a:	9204      	strlt	r2, [sp, #16]
 800946c:	7823      	ldrb	r3, [r4, #0]
 800946e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009470:	d10a      	bne.n	8009488 <_svfiprintf_r+0x130>
 8009472:	7863      	ldrb	r3, [r4, #1]
 8009474:	2b2a      	cmp	r3, #42	@ 0x2a
 8009476:	d132      	bne.n	80094de <_svfiprintf_r+0x186>
 8009478:	9b03      	ldr	r3, [sp, #12]
 800947a:	1d1a      	adds	r2, r3, #4
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	9203      	str	r2, [sp, #12]
 8009480:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009484:	3402      	adds	r4, #2
 8009486:	9305      	str	r3, [sp, #20]
 8009488:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800954c <_svfiprintf_r+0x1f4>
 800948c:	7821      	ldrb	r1, [r4, #0]
 800948e:	2203      	movs	r2, #3
 8009490:	4650      	mov	r0, sl
 8009492:	f7f6 fea5 	bl	80001e0 <memchr>
 8009496:	b138      	cbz	r0, 80094a8 <_svfiprintf_r+0x150>
 8009498:	9b04      	ldr	r3, [sp, #16]
 800949a:	eba0 000a 	sub.w	r0, r0, sl
 800949e:	2240      	movs	r2, #64	@ 0x40
 80094a0:	4082      	lsls	r2, r0
 80094a2:	4313      	orrs	r3, r2
 80094a4:	3401      	adds	r4, #1
 80094a6:	9304      	str	r3, [sp, #16]
 80094a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094ac:	4824      	ldr	r0, [pc, #144]	@ (8009540 <_svfiprintf_r+0x1e8>)
 80094ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80094b2:	2206      	movs	r2, #6
 80094b4:	f7f6 fe94 	bl	80001e0 <memchr>
 80094b8:	2800      	cmp	r0, #0
 80094ba:	d036      	beq.n	800952a <_svfiprintf_r+0x1d2>
 80094bc:	4b21      	ldr	r3, [pc, #132]	@ (8009544 <_svfiprintf_r+0x1ec>)
 80094be:	bb1b      	cbnz	r3, 8009508 <_svfiprintf_r+0x1b0>
 80094c0:	9b03      	ldr	r3, [sp, #12]
 80094c2:	3307      	adds	r3, #7
 80094c4:	f023 0307 	bic.w	r3, r3, #7
 80094c8:	3308      	adds	r3, #8
 80094ca:	9303      	str	r3, [sp, #12]
 80094cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094ce:	4433      	add	r3, r6
 80094d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80094d2:	e76a      	b.n	80093aa <_svfiprintf_r+0x52>
 80094d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80094d8:	460c      	mov	r4, r1
 80094da:	2001      	movs	r0, #1
 80094dc:	e7a8      	b.n	8009430 <_svfiprintf_r+0xd8>
 80094de:	2300      	movs	r3, #0
 80094e0:	3401      	adds	r4, #1
 80094e2:	9305      	str	r3, [sp, #20]
 80094e4:	4619      	mov	r1, r3
 80094e6:	f04f 0c0a 	mov.w	ip, #10
 80094ea:	4620      	mov	r0, r4
 80094ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094f0:	3a30      	subs	r2, #48	@ 0x30
 80094f2:	2a09      	cmp	r2, #9
 80094f4:	d903      	bls.n	80094fe <_svfiprintf_r+0x1a6>
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d0c6      	beq.n	8009488 <_svfiprintf_r+0x130>
 80094fa:	9105      	str	r1, [sp, #20]
 80094fc:	e7c4      	b.n	8009488 <_svfiprintf_r+0x130>
 80094fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8009502:	4604      	mov	r4, r0
 8009504:	2301      	movs	r3, #1
 8009506:	e7f0      	b.n	80094ea <_svfiprintf_r+0x192>
 8009508:	ab03      	add	r3, sp, #12
 800950a:	9300      	str	r3, [sp, #0]
 800950c:	462a      	mov	r2, r5
 800950e:	4b0e      	ldr	r3, [pc, #56]	@ (8009548 <_svfiprintf_r+0x1f0>)
 8009510:	a904      	add	r1, sp, #16
 8009512:	4638      	mov	r0, r7
 8009514:	f3af 8000 	nop.w
 8009518:	1c42      	adds	r2, r0, #1
 800951a:	4606      	mov	r6, r0
 800951c:	d1d6      	bne.n	80094cc <_svfiprintf_r+0x174>
 800951e:	89ab      	ldrh	r3, [r5, #12]
 8009520:	065b      	lsls	r3, r3, #25
 8009522:	f53f af2d 	bmi.w	8009380 <_svfiprintf_r+0x28>
 8009526:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009528:	e72c      	b.n	8009384 <_svfiprintf_r+0x2c>
 800952a:	ab03      	add	r3, sp, #12
 800952c:	9300      	str	r3, [sp, #0]
 800952e:	462a      	mov	r2, r5
 8009530:	4b05      	ldr	r3, [pc, #20]	@ (8009548 <_svfiprintf_r+0x1f0>)
 8009532:	a904      	add	r1, sp, #16
 8009534:	4638      	mov	r0, r7
 8009536:	f000 f879 	bl	800962c <_printf_i>
 800953a:	e7ed      	b.n	8009518 <_svfiprintf_r+0x1c0>
 800953c:	080099ec 	.word	0x080099ec
 8009540:	080099f6 	.word	0x080099f6
 8009544:	00000000 	.word	0x00000000
 8009548:	080092a1 	.word	0x080092a1
 800954c:	080099f2 	.word	0x080099f2

08009550 <_printf_common>:
 8009550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009554:	4616      	mov	r6, r2
 8009556:	4698      	mov	r8, r3
 8009558:	688a      	ldr	r2, [r1, #8]
 800955a:	690b      	ldr	r3, [r1, #16]
 800955c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009560:	4293      	cmp	r3, r2
 8009562:	bfb8      	it	lt
 8009564:	4613      	movlt	r3, r2
 8009566:	6033      	str	r3, [r6, #0]
 8009568:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800956c:	4607      	mov	r7, r0
 800956e:	460c      	mov	r4, r1
 8009570:	b10a      	cbz	r2, 8009576 <_printf_common+0x26>
 8009572:	3301      	adds	r3, #1
 8009574:	6033      	str	r3, [r6, #0]
 8009576:	6823      	ldr	r3, [r4, #0]
 8009578:	0699      	lsls	r1, r3, #26
 800957a:	bf42      	ittt	mi
 800957c:	6833      	ldrmi	r3, [r6, #0]
 800957e:	3302      	addmi	r3, #2
 8009580:	6033      	strmi	r3, [r6, #0]
 8009582:	6825      	ldr	r5, [r4, #0]
 8009584:	f015 0506 	ands.w	r5, r5, #6
 8009588:	d106      	bne.n	8009598 <_printf_common+0x48>
 800958a:	f104 0a19 	add.w	sl, r4, #25
 800958e:	68e3      	ldr	r3, [r4, #12]
 8009590:	6832      	ldr	r2, [r6, #0]
 8009592:	1a9b      	subs	r3, r3, r2
 8009594:	42ab      	cmp	r3, r5
 8009596:	dc26      	bgt.n	80095e6 <_printf_common+0x96>
 8009598:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800959c:	6822      	ldr	r2, [r4, #0]
 800959e:	3b00      	subs	r3, #0
 80095a0:	bf18      	it	ne
 80095a2:	2301      	movne	r3, #1
 80095a4:	0692      	lsls	r2, r2, #26
 80095a6:	d42b      	bmi.n	8009600 <_printf_common+0xb0>
 80095a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80095ac:	4641      	mov	r1, r8
 80095ae:	4638      	mov	r0, r7
 80095b0:	47c8      	blx	r9
 80095b2:	3001      	adds	r0, #1
 80095b4:	d01e      	beq.n	80095f4 <_printf_common+0xa4>
 80095b6:	6823      	ldr	r3, [r4, #0]
 80095b8:	6922      	ldr	r2, [r4, #16]
 80095ba:	f003 0306 	and.w	r3, r3, #6
 80095be:	2b04      	cmp	r3, #4
 80095c0:	bf02      	ittt	eq
 80095c2:	68e5      	ldreq	r5, [r4, #12]
 80095c4:	6833      	ldreq	r3, [r6, #0]
 80095c6:	1aed      	subeq	r5, r5, r3
 80095c8:	68a3      	ldr	r3, [r4, #8]
 80095ca:	bf0c      	ite	eq
 80095cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095d0:	2500      	movne	r5, #0
 80095d2:	4293      	cmp	r3, r2
 80095d4:	bfc4      	itt	gt
 80095d6:	1a9b      	subgt	r3, r3, r2
 80095d8:	18ed      	addgt	r5, r5, r3
 80095da:	2600      	movs	r6, #0
 80095dc:	341a      	adds	r4, #26
 80095de:	42b5      	cmp	r5, r6
 80095e0:	d11a      	bne.n	8009618 <_printf_common+0xc8>
 80095e2:	2000      	movs	r0, #0
 80095e4:	e008      	b.n	80095f8 <_printf_common+0xa8>
 80095e6:	2301      	movs	r3, #1
 80095e8:	4652      	mov	r2, sl
 80095ea:	4641      	mov	r1, r8
 80095ec:	4638      	mov	r0, r7
 80095ee:	47c8      	blx	r9
 80095f0:	3001      	adds	r0, #1
 80095f2:	d103      	bne.n	80095fc <_printf_common+0xac>
 80095f4:	f04f 30ff 	mov.w	r0, #4294967295
 80095f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095fc:	3501      	adds	r5, #1
 80095fe:	e7c6      	b.n	800958e <_printf_common+0x3e>
 8009600:	18e1      	adds	r1, r4, r3
 8009602:	1c5a      	adds	r2, r3, #1
 8009604:	2030      	movs	r0, #48	@ 0x30
 8009606:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800960a:	4422      	add	r2, r4
 800960c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009610:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009614:	3302      	adds	r3, #2
 8009616:	e7c7      	b.n	80095a8 <_printf_common+0x58>
 8009618:	2301      	movs	r3, #1
 800961a:	4622      	mov	r2, r4
 800961c:	4641      	mov	r1, r8
 800961e:	4638      	mov	r0, r7
 8009620:	47c8      	blx	r9
 8009622:	3001      	adds	r0, #1
 8009624:	d0e6      	beq.n	80095f4 <_printf_common+0xa4>
 8009626:	3601      	adds	r6, #1
 8009628:	e7d9      	b.n	80095de <_printf_common+0x8e>
	...

0800962c <_printf_i>:
 800962c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009630:	7e0f      	ldrb	r7, [r1, #24]
 8009632:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009634:	2f78      	cmp	r7, #120	@ 0x78
 8009636:	4691      	mov	r9, r2
 8009638:	4680      	mov	r8, r0
 800963a:	460c      	mov	r4, r1
 800963c:	469a      	mov	sl, r3
 800963e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009642:	d807      	bhi.n	8009654 <_printf_i+0x28>
 8009644:	2f62      	cmp	r7, #98	@ 0x62
 8009646:	d80a      	bhi.n	800965e <_printf_i+0x32>
 8009648:	2f00      	cmp	r7, #0
 800964a:	f000 80d2 	beq.w	80097f2 <_printf_i+0x1c6>
 800964e:	2f58      	cmp	r7, #88	@ 0x58
 8009650:	f000 80b9 	beq.w	80097c6 <_printf_i+0x19a>
 8009654:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009658:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800965c:	e03a      	b.n	80096d4 <_printf_i+0xa8>
 800965e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009662:	2b15      	cmp	r3, #21
 8009664:	d8f6      	bhi.n	8009654 <_printf_i+0x28>
 8009666:	a101      	add	r1, pc, #4	@ (adr r1, 800966c <_printf_i+0x40>)
 8009668:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800966c:	080096c5 	.word	0x080096c5
 8009670:	080096d9 	.word	0x080096d9
 8009674:	08009655 	.word	0x08009655
 8009678:	08009655 	.word	0x08009655
 800967c:	08009655 	.word	0x08009655
 8009680:	08009655 	.word	0x08009655
 8009684:	080096d9 	.word	0x080096d9
 8009688:	08009655 	.word	0x08009655
 800968c:	08009655 	.word	0x08009655
 8009690:	08009655 	.word	0x08009655
 8009694:	08009655 	.word	0x08009655
 8009698:	080097d9 	.word	0x080097d9
 800969c:	08009703 	.word	0x08009703
 80096a0:	08009793 	.word	0x08009793
 80096a4:	08009655 	.word	0x08009655
 80096a8:	08009655 	.word	0x08009655
 80096ac:	080097fb 	.word	0x080097fb
 80096b0:	08009655 	.word	0x08009655
 80096b4:	08009703 	.word	0x08009703
 80096b8:	08009655 	.word	0x08009655
 80096bc:	08009655 	.word	0x08009655
 80096c0:	0800979b 	.word	0x0800979b
 80096c4:	6833      	ldr	r3, [r6, #0]
 80096c6:	1d1a      	adds	r2, r3, #4
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	6032      	str	r2, [r6, #0]
 80096cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80096d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80096d4:	2301      	movs	r3, #1
 80096d6:	e09d      	b.n	8009814 <_printf_i+0x1e8>
 80096d8:	6833      	ldr	r3, [r6, #0]
 80096da:	6820      	ldr	r0, [r4, #0]
 80096dc:	1d19      	adds	r1, r3, #4
 80096de:	6031      	str	r1, [r6, #0]
 80096e0:	0606      	lsls	r6, r0, #24
 80096e2:	d501      	bpl.n	80096e8 <_printf_i+0xbc>
 80096e4:	681d      	ldr	r5, [r3, #0]
 80096e6:	e003      	b.n	80096f0 <_printf_i+0xc4>
 80096e8:	0645      	lsls	r5, r0, #25
 80096ea:	d5fb      	bpl.n	80096e4 <_printf_i+0xb8>
 80096ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80096f0:	2d00      	cmp	r5, #0
 80096f2:	da03      	bge.n	80096fc <_printf_i+0xd0>
 80096f4:	232d      	movs	r3, #45	@ 0x2d
 80096f6:	426d      	negs	r5, r5
 80096f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096fc:	4859      	ldr	r0, [pc, #356]	@ (8009864 <_printf_i+0x238>)
 80096fe:	230a      	movs	r3, #10
 8009700:	e011      	b.n	8009726 <_printf_i+0xfa>
 8009702:	6821      	ldr	r1, [r4, #0]
 8009704:	6833      	ldr	r3, [r6, #0]
 8009706:	0608      	lsls	r0, r1, #24
 8009708:	f853 5b04 	ldr.w	r5, [r3], #4
 800970c:	d402      	bmi.n	8009714 <_printf_i+0xe8>
 800970e:	0649      	lsls	r1, r1, #25
 8009710:	bf48      	it	mi
 8009712:	b2ad      	uxthmi	r5, r5
 8009714:	2f6f      	cmp	r7, #111	@ 0x6f
 8009716:	4853      	ldr	r0, [pc, #332]	@ (8009864 <_printf_i+0x238>)
 8009718:	6033      	str	r3, [r6, #0]
 800971a:	bf14      	ite	ne
 800971c:	230a      	movne	r3, #10
 800971e:	2308      	moveq	r3, #8
 8009720:	2100      	movs	r1, #0
 8009722:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009726:	6866      	ldr	r6, [r4, #4]
 8009728:	60a6      	str	r6, [r4, #8]
 800972a:	2e00      	cmp	r6, #0
 800972c:	bfa2      	ittt	ge
 800972e:	6821      	ldrge	r1, [r4, #0]
 8009730:	f021 0104 	bicge.w	r1, r1, #4
 8009734:	6021      	strge	r1, [r4, #0]
 8009736:	b90d      	cbnz	r5, 800973c <_printf_i+0x110>
 8009738:	2e00      	cmp	r6, #0
 800973a:	d04b      	beq.n	80097d4 <_printf_i+0x1a8>
 800973c:	4616      	mov	r6, r2
 800973e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009742:	fb03 5711 	mls	r7, r3, r1, r5
 8009746:	5dc7      	ldrb	r7, [r0, r7]
 8009748:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800974c:	462f      	mov	r7, r5
 800974e:	42bb      	cmp	r3, r7
 8009750:	460d      	mov	r5, r1
 8009752:	d9f4      	bls.n	800973e <_printf_i+0x112>
 8009754:	2b08      	cmp	r3, #8
 8009756:	d10b      	bne.n	8009770 <_printf_i+0x144>
 8009758:	6823      	ldr	r3, [r4, #0]
 800975a:	07df      	lsls	r7, r3, #31
 800975c:	d508      	bpl.n	8009770 <_printf_i+0x144>
 800975e:	6923      	ldr	r3, [r4, #16]
 8009760:	6861      	ldr	r1, [r4, #4]
 8009762:	4299      	cmp	r1, r3
 8009764:	bfde      	ittt	le
 8009766:	2330      	movle	r3, #48	@ 0x30
 8009768:	f806 3c01 	strble.w	r3, [r6, #-1]
 800976c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009770:	1b92      	subs	r2, r2, r6
 8009772:	6122      	str	r2, [r4, #16]
 8009774:	f8cd a000 	str.w	sl, [sp]
 8009778:	464b      	mov	r3, r9
 800977a:	aa03      	add	r2, sp, #12
 800977c:	4621      	mov	r1, r4
 800977e:	4640      	mov	r0, r8
 8009780:	f7ff fee6 	bl	8009550 <_printf_common>
 8009784:	3001      	adds	r0, #1
 8009786:	d14a      	bne.n	800981e <_printf_i+0x1f2>
 8009788:	f04f 30ff 	mov.w	r0, #4294967295
 800978c:	b004      	add	sp, #16
 800978e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009792:	6823      	ldr	r3, [r4, #0]
 8009794:	f043 0320 	orr.w	r3, r3, #32
 8009798:	6023      	str	r3, [r4, #0]
 800979a:	4833      	ldr	r0, [pc, #204]	@ (8009868 <_printf_i+0x23c>)
 800979c:	2778      	movs	r7, #120	@ 0x78
 800979e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80097a2:	6823      	ldr	r3, [r4, #0]
 80097a4:	6831      	ldr	r1, [r6, #0]
 80097a6:	061f      	lsls	r7, r3, #24
 80097a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80097ac:	d402      	bmi.n	80097b4 <_printf_i+0x188>
 80097ae:	065f      	lsls	r7, r3, #25
 80097b0:	bf48      	it	mi
 80097b2:	b2ad      	uxthmi	r5, r5
 80097b4:	6031      	str	r1, [r6, #0]
 80097b6:	07d9      	lsls	r1, r3, #31
 80097b8:	bf44      	itt	mi
 80097ba:	f043 0320 	orrmi.w	r3, r3, #32
 80097be:	6023      	strmi	r3, [r4, #0]
 80097c0:	b11d      	cbz	r5, 80097ca <_printf_i+0x19e>
 80097c2:	2310      	movs	r3, #16
 80097c4:	e7ac      	b.n	8009720 <_printf_i+0xf4>
 80097c6:	4827      	ldr	r0, [pc, #156]	@ (8009864 <_printf_i+0x238>)
 80097c8:	e7e9      	b.n	800979e <_printf_i+0x172>
 80097ca:	6823      	ldr	r3, [r4, #0]
 80097cc:	f023 0320 	bic.w	r3, r3, #32
 80097d0:	6023      	str	r3, [r4, #0]
 80097d2:	e7f6      	b.n	80097c2 <_printf_i+0x196>
 80097d4:	4616      	mov	r6, r2
 80097d6:	e7bd      	b.n	8009754 <_printf_i+0x128>
 80097d8:	6833      	ldr	r3, [r6, #0]
 80097da:	6825      	ldr	r5, [r4, #0]
 80097dc:	6961      	ldr	r1, [r4, #20]
 80097de:	1d18      	adds	r0, r3, #4
 80097e0:	6030      	str	r0, [r6, #0]
 80097e2:	062e      	lsls	r6, r5, #24
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	d501      	bpl.n	80097ec <_printf_i+0x1c0>
 80097e8:	6019      	str	r1, [r3, #0]
 80097ea:	e002      	b.n	80097f2 <_printf_i+0x1c6>
 80097ec:	0668      	lsls	r0, r5, #25
 80097ee:	d5fb      	bpl.n	80097e8 <_printf_i+0x1bc>
 80097f0:	8019      	strh	r1, [r3, #0]
 80097f2:	2300      	movs	r3, #0
 80097f4:	6123      	str	r3, [r4, #16]
 80097f6:	4616      	mov	r6, r2
 80097f8:	e7bc      	b.n	8009774 <_printf_i+0x148>
 80097fa:	6833      	ldr	r3, [r6, #0]
 80097fc:	1d1a      	adds	r2, r3, #4
 80097fe:	6032      	str	r2, [r6, #0]
 8009800:	681e      	ldr	r6, [r3, #0]
 8009802:	6862      	ldr	r2, [r4, #4]
 8009804:	2100      	movs	r1, #0
 8009806:	4630      	mov	r0, r6
 8009808:	f7f6 fcea 	bl	80001e0 <memchr>
 800980c:	b108      	cbz	r0, 8009812 <_printf_i+0x1e6>
 800980e:	1b80      	subs	r0, r0, r6
 8009810:	6060      	str	r0, [r4, #4]
 8009812:	6863      	ldr	r3, [r4, #4]
 8009814:	6123      	str	r3, [r4, #16]
 8009816:	2300      	movs	r3, #0
 8009818:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800981c:	e7aa      	b.n	8009774 <_printf_i+0x148>
 800981e:	6923      	ldr	r3, [r4, #16]
 8009820:	4632      	mov	r2, r6
 8009822:	4649      	mov	r1, r9
 8009824:	4640      	mov	r0, r8
 8009826:	47d0      	blx	sl
 8009828:	3001      	adds	r0, #1
 800982a:	d0ad      	beq.n	8009788 <_printf_i+0x15c>
 800982c:	6823      	ldr	r3, [r4, #0]
 800982e:	079b      	lsls	r3, r3, #30
 8009830:	d413      	bmi.n	800985a <_printf_i+0x22e>
 8009832:	68e0      	ldr	r0, [r4, #12]
 8009834:	9b03      	ldr	r3, [sp, #12]
 8009836:	4298      	cmp	r0, r3
 8009838:	bfb8      	it	lt
 800983a:	4618      	movlt	r0, r3
 800983c:	e7a6      	b.n	800978c <_printf_i+0x160>
 800983e:	2301      	movs	r3, #1
 8009840:	4632      	mov	r2, r6
 8009842:	4649      	mov	r1, r9
 8009844:	4640      	mov	r0, r8
 8009846:	47d0      	blx	sl
 8009848:	3001      	adds	r0, #1
 800984a:	d09d      	beq.n	8009788 <_printf_i+0x15c>
 800984c:	3501      	adds	r5, #1
 800984e:	68e3      	ldr	r3, [r4, #12]
 8009850:	9903      	ldr	r1, [sp, #12]
 8009852:	1a5b      	subs	r3, r3, r1
 8009854:	42ab      	cmp	r3, r5
 8009856:	dcf2      	bgt.n	800983e <_printf_i+0x212>
 8009858:	e7eb      	b.n	8009832 <_printf_i+0x206>
 800985a:	2500      	movs	r5, #0
 800985c:	f104 0619 	add.w	r6, r4, #25
 8009860:	e7f5      	b.n	800984e <_printf_i+0x222>
 8009862:	bf00      	nop
 8009864:	080099fd 	.word	0x080099fd
 8009868:	08009a0e 	.word	0x08009a0e

0800986c <memmove>:
 800986c:	4288      	cmp	r0, r1
 800986e:	b510      	push	{r4, lr}
 8009870:	eb01 0402 	add.w	r4, r1, r2
 8009874:	d902      	bls.n	800987c <memmove+0x10>
 8009876:	4284      	cmp	r4, r0
 8009878:	4623      	mov	r3, r4
 800987a:	d807      	bhi.n	800988c <memmove+0x20>
 800987c:	1e43      	subs	r3, r0, #1
 800987e:	42a1      	cmp	r1, r4
 8009880:	d008      	beq.n	8009894 <memmove+0x28>
 8009882:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009886:	f803 2f01 	strb.w	r2, [r3, #1]!
 800988a:	e7f8      	b.n	800987e <memmove+0x12>
 800988c:	4402      	add	r2, r0
 800988e:	4601      	mov	r1, r0
 8009890:	428a      	cmp	r2, r1
 8009892:	d100      	bne.n	8009896 <memmove+0x2a>
 8009894:	bd10      	pop	{r4, pc}
 8009896:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800989a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800989e:	e7f7      	b.n	8009890 <memmove+0x24>

080098a0 <_sbrk_r>:
 80098a0:	b538      	push	{r3, r4, r5, lr}
 80098a2:	4d06      	ldr	r5, [pc, #24]	@ (80098bc <_sbrk_r+0x1c>)
 80098a4:	2300      	movs	r3, #0
 80098a6:	4604      	mov	r4, r0
 80098a8:	4608      	mov	r0, r1
 80098aa:	602b      	str	r3, [r5, #0]
 80098ac:	f7f7 f95c 	bl	8000b68 <_sbrk>
 80098b0:	1c43      	adds	r3, r0, #1
 80098b2:	d102      	bne.n	80098ba <_sbrk_r+0x1a>
 80098b4:	682b      	ldr	r3, [r5, #0]
 80098b6:	b103      	cbz	r3, 80098ba <_sbrk_r+0x1a>
 80098b8:	6023      	str	r3, [r4, #0]
 80098ba:	bd38      	pop	{r3, r4, r5, pc}
 80098bc:	20000784 	.word	0x20000784

080098c0 <_realloc_r>:
 80098c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098c4:	4680      	mov	r8, r0
 80098c6:	4615      	mov	r5, r2
 80098c8:	460c      	mov	r4, r1
 80098ca:	b921      	cbnz	r1, 80098d6 <_realloc_r+0x16>
 80098cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098d0:	4611      	mov	r1, r2
 80098d2:	f7ff bc59 	b.w	8009188 <_malloc_r>
 80098d6:	b92a      	cbnz	r2, 80098e4 <_realloc_r+0x24>
 80098d8:	f7ff fbea 	bl	80090b0 <_free_r>
 80098dc:	2400      	movs	r4, #0
 80098de:	4620      	mov	r0, r4
 80098e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098e4:	f000 f81a 	bl	800991c <_malloc_usable_size_r>
 80098e8:	4285      	cmp	r5, r0
 80098ea:	4606      	mov	r6, r0
 80098ec:	d802      	bhi.n	80098f4 <_realloc_r+0x34>
 80098ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80098f2:	d8f4      	bhi.n	80098de <_realloc_r+0x1e>
 80098f4:	4629      	mov	r1, r5
 80098f6:	4640      	mov	r0, r8
 80098f8:	f7ff fc46 	bl	8009188 <_malloc_r>
 80098fc:	4607      	mov	r7, r0
 80098fe:	2800      	cmp	r0, #0
 8009900:	d0ec      	beq.n	80098dc <_realloc_r+0x1c>
 8009902:	42b5      	cmp	r5, r6
 8009904:	462a      	mov	r2, r5
 8009906:	4621      	mov	r1, r4
 8009908:	bf28      	it	cs
 800990a:	4632      	movcs	r2, r6
 800990c:	f7ff fbc2 	bl	8009094 <memcpy>
 8009910:	4621      	mov	r1, r4
 8009912:	4640      	mov	r0, r8
 8009914:	f7ff fbcc 	bl	80090b0 <_free_r>
 8009918:	463c      	mov	r4, r7
 800991a:	e7e0      	b.n	80098de <_realloc_r+0x1e>

0800991c <_malloc_usable_size_r>:
 800991c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009920:	1f18      	subs	r0, r3, #4
 8009922:	2b00      	cmp	r3, #0
 8009924:	bfbc      	itt	lt
 8009926:	580b      	ldrlt	r3, [r1, r0]
 8009928:	18c0      	addlt	r0, r0, r3
 800992a:	4770      	bx	lr

0800992c <_init>:
 800992c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800992e:	bf00      	nop
 8009930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009932:	bc08      	pop	{r3}
 8009934:	469e      	mov	lr, r3
 8009936:	4770      	bx	lr

08009938 <_fini>:
 8009938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993a:	bf00      	nop
 800993c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800993e:	bc08      	pop	{r3}
 8009940:	469e      	mov	lr, r3
 8009942:	4770      	bx	lr
