
test-23.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f1a4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  0800f348  0800f348  00010348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f7b0  0800f7b0  00011494  2**0
                  CONTENTS
  4 .ARM          00000008  0800f7b0  0800f7b0  000107b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f7b8  0800f7b8  00011494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f7b8  0800f7b8  000107b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f7bc  0800f7bc  000107bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000494  20000000  0800f7c0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a4  20000494  0800fc54  00011494  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a38  0800fc54  00011a38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00011494  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d620  00000000  00000000  000114c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dd8  00000000  00000000  0002eae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a0  00000000  00000000  000328c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011ab  00000000  00000000  00033f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000068e5  00000000  00000000  0003510b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b292  00000000  00000000  0003b9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009aa3c  00000000  00000000  00056c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f16be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007248  00000000  00000000  000f1704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  000f894c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000494 	.word	0x20000494
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f32c 	.word	0x0800f32c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000498 	.word	0x20000498
 80001dc:	0800f32c 	.word	0x0800f32c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <_ZN12MotorControlC1EP15TB6612FNG_MotorP13PololuEncodermfff>:
 * @date Jun 2, 2024
 */

#include "MotorControl.h"

MotorControl::MotorControl(
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	61f8      	str	r0, [r7, #28]
 8000eb0:	61b9      	str	r1, [r7, #24]
 8000eb2:	617a      	str	r2, [r7, #20]
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	ed87 0a03 	vstr	s0, [r7, #12]
 8000eba:	edc7 0a02 	vstr	s1, [r7, #8]
 8000ebe:	ed87 1a01 	vstr	s2, [r7, #4]
		: motor(motor),
		  encoder(encoder),
		  control_frequency_Hz(control_frequency_Hz),
		  K_P(K_P),
		  K_I(K_I),
		  K_D(K_D)
 8000ec2:	4a16      	ldr	r2, [pc, #88]	@ (8000f1c <_ZN12MotorControlC1EP15TB6612FNG_MotorP13PololuEncodermfff+0x74>)
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	601a      	str	r2, [r3, #0]
		: motor(motor),
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	605a      	str	r2, [r3, #4]
		  encoder(encoder),
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	609a      	str	r2, [r3, #8]
		  control_frequency_Hz(control_frequency_Hz),
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	60da      	str	r2, [r3, #12]
		  K_P(K_P),
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	68fa      	ldr	r2, [r7, #12]
 8000ede:	611a      	str	r2, [r3, #16]
		  K_I(K_I),
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	615a      	str	r2, [r3, #20]
		  K_D(K_D)
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	619a      	str	r2, [r3, #24]
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f04f 0200 	mov.w	r2, #0
 8000ef2:	61da      	str	r2, [r3, #28]
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f04f 0200 	mov.w	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	625a      	str	r2, [r3, #36]	@ 0x24
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	2200      	movs	r2, #0
 8000f08:	859a      	strh	r2, [r3, #44]	@ 0x2c
{
	reinitialize();
 8000f0a:	69f8      	ldr	r0, [r7, #28]
 8000f0c:	f000 f8ff 	bl	800110e <_ZN12MotorControl12reinitializeEv>
}
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	4618      	mov	r0, r3
 8000f14:	3720      	adds	r7, #32
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	0800f3cc 	.word	0x0800f3cc

08000f20 <_ZN12MotorControlD1Ev>:

MotorControl::~MotorControl()
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	4a06      	ldr	r2, [pc, #24]	@ (8000f44 <_ZN12MotorControlD1Ev+0x24>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	601a      	str	r2, [r3, #0]
{
	motor->stop();
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 fe1d 	bl	8001b72 <_ZN15TB6612FNG_Motor4stopEv>
}
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	0800f3cc 	.word	0x0800f3cc

08000f48 <_ZN12MotorControlD0Ev>:
MotorControl::~MotorControl()
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
}
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff ffe5 	bl	8000f20 <_ZN12MotorControlD1Ev>
 8000f56:	2134      	movs	r1, #52	@ 0x34
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f00b fb72 	bl	800c642 <_ZdlPvj>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <_ZN12MotorControl3runEf>:
    HAL_UART_Transmit(uart_handle, (uint8_t*)my_message, string_length, HAL_MAX_DELAY);
    encoder->debug_message(uart_handle);
}

void MotorControl::run(float setpoint)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	ed87 0a00 	vstr	s0, [r7]
	// Store to the class
	SP = setpoint;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	631a      	str	r2, [r3, #48]	@ 0x30

	// Grab the latest data from the encoder.
	encoder->update();
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 f946 	bl	8001210 <_ZN13PololuEncoder6updateEv>
	float process_value = encoder->get_speed(control_frequency_Hz);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689a      	ldr	r2, [r3, #8]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4610      	mov	r0, r2
 8000f90:	f000 f998 	bl	80012c4 <_ZN13PololuEncoder9get_speedEm>
 8000f94:	ed87 0a03 	vstr	s0, [r7, #12]

	// Get the effort and send to motor
	get_effort_sat(setpoint, process_value);
 8000f98:	edd7 0a03 	vldr	s1, [r7, #12]
 8000f9c:	ed97 0a00 	vldr	s0, [r7]
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f000 f80f 	bl	8000fc4 <_ZN12MotorControl14get_effort_satEff>
	motor->set_duty(effort, saturation_limit);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6858      	ldr	r0, [r3, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f9b3 102c 	ldrsh.w	r1, [r3, #44]	@ 0x2c
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	f000 fd5c 	bl	8001a74 <_ZN15TB6612FNG_Motor8set_dutyEss>
}
 8000fbc:	bf00      	nop
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <_ZN12MotorControl14get_effort_satEff>:

int16_t MotorControl::get_effort_sat(
					float setpoint,
					float process_value
					)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	@ 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fd0:	edc7 0a01 	vstr	s1, [r7, #4]
	// Calculating error for P control
	error = setpoint - process_value; // RPM, a float
 8000fd4:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	edc3 7a08 	vstr	s15, [r3, #32]

	// Calculating running error for I control
	running_error += error/(control_frequency_Hz); // RPM*s, float arithmetic cast to an int
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	ed93 6a08 	vldr	s12, [r3, #32]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	ee07 3a90 	vmov	s15, r3
 8000ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000ffe:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001002:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
//	{
//		running_error += 0;
//	}

	// Calculating error slope for D control
	error_slope = (error-last_error)*((float)control_frequency_Hz); // RPM/s, a float
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	edd3 7a07 	vldr	s15, [r3, #28]
 8001018:	ee37 7a67 	vsub.f32	s14, s14, s15
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	ee07 3a90 	vmov	s15, r3
 8001024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001028:	ee67 7a27 	vmul.f32	s15, s14, s15
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	last_error = error;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	6a1a      	ldr	r2, [r3, #32]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	61da      	str	r2, [r3, #28]

	// Controller effort
    float P_effort = K_P*error;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	edd3 7a08 	vldr	s15, [r3, #32]
 8001046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800104a:	edc7 7a07 	vstr	s15, [r7, #28]
    float I_effort = K_I*running_error;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	ed93 7a05 	vldr	s14, [r3, #20]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800105a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800105e:	edc7 7a06 	vstr	s15, [r7, #24]
    float D_effort = K_D*error_slope;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	ed93 7a06 	vldr	s14, [r3, #24]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800106e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001072:	edc7 7a05 	vstr	s15, [r7, #20]
    float effort_unsat = P_effort + I_effort + D_effort;
 8001076:	ed97 7a07 	vldr	s14, [r7, #28]
 800107a:	edd7 7a06 	vldr	s15, [r7, #24]
 800107e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001082:	ed97 7a05 	vldr	s14, [r7, #20]
 8001086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108a:	edc7 7a04 	vstr	s15, [r7, #16]

    // Saturation
	if (effort_unsat > (float)saturation_limit)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8001094:	ee07 3a90 	vmov	s15, r3
 8001098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800109c:	ed97 7a04 	vldr	s14, [r7, #16]
 80010a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a8:	dd05      	ble.n	80010b6 <_ZN12MotorControl14get_effort_satEff+0xf2>
	{
		effort = saturation_limit;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	@ 0x2e
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	859a      	strh	r2, [r3, #44]	@ 0x2c
 80010b4:	e022      	b.n	80010fc <_ZN12MotorControl14get_effort_satEff+0x138>
	}
	else if (effort_unsat < -1*(float)saturation_limit)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 80010bc:	ee07 3a90 	vmov	s15, r3
 80010c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010c4:	eef1 7a67 	vneg.f32	s15, s15
 80010c8:	ed97 7a04 	vldr	s14, [r7, #16]
 80010cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d4:	d509      	bpl.n	80010ea <_ZN12MotorControl14get_effort_satEff+0x126>
	{
		effort = -saturation_limit;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 80010dc:	b29b      	uxth	r3, r3
 80010de:	425b      	negs	r3, r3
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	859a      	strh	r2, [r3, #44]	@ 0x2c
 80010e8:	e008      	b.n	80010fc <_ZN12MotorControl14get_effort_satEff+0x138>
	}
	else
	{
		effort = (int16_t)effort_unsat;
 80010ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80010ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010f2:	ee17 3a90 	vmov	r3, s15
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	859a      	strh	r2, [r3, #44]	@ 0x2c
	}

	return effort;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
}
 8001102:	4618      	mov	r0, r3
 8001104:	3724      	adds	r7, #36	@ 0x24
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <_ZN12MotorControl12reinitializeEv>:

void MotorControl::reinitialize()
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
	// Stop motor
	motor->set_duty(0);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2264      	movs	r2, #100	@ 0x64
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f000 fca8 	bl	8001a74 <_ZN15TB6612FNG_Motor8set_dutyEss>

	// Reset important stuff
	last_error = 0;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f04f 0200 	mov.w	r2, #0
 800112a:	61da      	str	r2, [r3, #28]
    error = 0;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
    effort = 0;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	859a      	strh	r2, [r3, #44]	@ 0x2c
    running_error = 0; // Most important
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	625a      	str	r2, [r3, #36]	@ 0x24

    // Grab the new saturation limit.
    saturation_limit = motor->timer_handle->Instance->ARR; // Assuming no prescalar is used.
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800114c:	b21a      	sxth	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	85da      	strh	r2, [r3, #46]	@ 0x2e
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb>:
 * @date Jun 2, 2024
 */

#include "PololuEncoder.h"

PololuEncoder::PololuEncoder(
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	4611      	mov	r1, r2
 8001168:	ed87 0a00 	vstr	s0, [r7]
 800116c:	461a      	mov	r2, r3
 800116e:	460b      	mov	r3, r1
 8001170:	80fb      	strh	r3, [r7, #6]
 8001172:	4613      	mov	r3, r2
 8001174:	717b      	strb	r3, [r7, #5]
		)
		: timer_handle(timer_handle),
		  CPR(CPR),
		  gear_ratio(gear_ratio),
		  timer_bit_size(timer_bit_size),
		  interrupt_mode(interrupt_mode)
 8001176:	4a25      	ldr	r2, [pc, #148]	@ (800120c <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0xb0>)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	601a      	str	r2, [r3, #0]
		: timer_handle(timer_handle),
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	605a      	str	r2, [r3, #4]
		  CPR(CPR),
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	88fa      	ldrh	r2, [r7, #6]
 8001186:	811a      	strh	r2, [r3, #8]
		  gear_ratio(gear_ratio),
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	60da      	str	r2, [r3, #12]
		  timer_bit_size(timer_bit_size),
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	797a      	ldrb	r2, [r7, #5]
 8001192:	741a      	strb	r2, [r3, #16]
		  interrupt_mode(interrupt_mode)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	7e3a      	ldrb	r2, [r7, #24]
 8001198:	745a      	strb	r2, [r3, #17]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2200      	movs	r2, #0
 800119e:	825a      	strh	r2, [r3, #18]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2200      	movs	r2, #0
 80011a4:	829a      	strh	r2, [r3, #20]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2200      	movs	r2, #0
 80011aa:	82da      	strh	r2, [r3, #22]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2200      	movs	r2, #0
 80011b0:	619a      	str	r2, [r3, #24]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f04f 0200 	mov.w	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
{
	// Start encoder
	if (interrupt_mode)
 80011ba:	7e3b      	ldrb	r3, [r7, #24]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d004      	beq.n	80011ca <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0x6e>
	{
		HAL_TIM_Encoder_Start_IT(timer_handle, TIM_CHANNEL_ALL);
 80011c0:	213c      	movs	r1, #60	@ 0x3c
 80011c2:	68b8      	ldr	r0, [r7, #8]
 80011c4:	f004 fcf7 	bl	8005bb6 <HAL_TIM_Encoder_Start_IT>
 80011c8:	e003      	b.n	80011d2 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0x76>
	}
	else
	{
		HAL_TIM_Encoder_Start(timer_handle, TIM_CHANNEL_ALL);
 80011ca:	213c      	movs	r1, #60	@ 0x3c
 80011cc:	68b8      	ldr	r0, [r7, #8]
 80011ce:	f004 fbcd 	bl	800596c <HAL_TIM_Encoder_Start>
	}

	// Number of bits for the select timer
	if (timer_bit_size == 32)
 80011d2:	797b      	ldrb	r3, [r7, #5]
 80011d4:	2b20      	cmp	r3, #32
 80011d6:	d104      	bne.n	80011e2 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0x86>
	{
		max_count = 0xffffffff;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f04f 32ff 	mov.w	r2, #4294967295
 80011de:	621a      	str	r2, [r3, #32]
 80011e0:	e003      	b.n	80011ea <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0x8e>
	}
	else
	{
		max_count = 0xffff;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011e8:	621a      	str	r2, [r3, #32]
	}

	// Set pertinent values for later.
	half_max_count = max_count/2;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6a1b      	ldr	r3, [r3, #32]
 80011ee:	085b      	lsrs	r3, r3, #1
 80011f0:	461a      	mov	r2, r3
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	625a      	str	r2, [r3, #36]	@ 0x24
	neg_half_max_count = -half_max_count;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011fa:	425a      	negs	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	0800f3dc 	.word	0x0800f3dc

08001210 <_ZN13PololuEncoder6updateEv>:

void PololuEncoder::update()
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	// Read encoder
	if (not interrupt_mode)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	7c5b      	ldrb	r3, [r3, #17]
 800121c:	f083 0301 	eor.w	r3, r3, #1
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d006      	beq.n	8001234 <_ZN13PololuEncoder6updateEv+0x24>
	{
		count = __HAL_TIM_GET_COUNTER(timer_handle);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800122e:	b29a      	uxth	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	82da      	strh	r2, [r3, #22]
	}
	delta = (int32_t) (count-last_count);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	8ada      	ldrh	r2, [r3, #22]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	8a9b      	ldrh	r3, [r3, #20]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	b29b      	uxth	r3, r3
 8001240:	b21a      	sxth	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	825a      	strh	r2, [r3, #18]
	last_count = count;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	8ada      	ldrh	r2, [r3, #22]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	829a      	strh	r2, [r3, #20]

	// Fix delta from timer overflow
	if (delta > half_max_count)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001254:	461a      	mov	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800125a:	429a      	cmp	r2, r3
 800125c:	dd0e      	ble.n	800127c <_ZN13PololuEncoder6updateEv+0x6c>
	{
		// We've overflowed in the negative direction.
		delta -= max_count + 1;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001264:	b29a      	uxth	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a1b      	ldr	r3, [r3, #32]
 800126a:	b29b      	uxth	r3, r3
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	b29b      	uxth	r3, r3
 8001270:	3b01      	subs	r3, #1
 8001272:	b29b      	uxth	r3, r3
 8001274:	b21a      	sxth	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	825a      	strh	r2, [r3, #18]
 800127a:	e015      	b.n	80012a8 <_ZN13PololuEncoder6updateEv+0x98>
	}
	else if (delta < neg_half_max_count)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001282:	461a      	mov	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001288:	429a      	cmp	r2, r3
 800128a:	da0d      	bge.n	80012a8 <_ZN13PololuEncoder6updateEv+0x98>
	{
	    // We've overflowed in the positive direciton.
		delta += max_count + 1;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001292:	b29a      	uxth	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	b29b      	uxth	r3, r3
 800129a:	4413      	add	r3, r2
 800129c:	b29b      	uxth	r3, r3
 800129e:	3301      	adds	r3, #1
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	b21a      	sxth	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	825a      	strh	r2, [r3, #18]
	}

	// Finish up
	position += delta;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80012b2:	441a      	add	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	619a      	str	r2, [r3, #24]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <_ZN13PololuEncoder9get_speedEm>:
{
	return delta;
}

float PololuEncoder::get_speed(uint32_t control_frequency_Hz)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
	float numerator = delta*(float)control_frequency_Hz*60;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80012d4:	ee07 3a90 	vmov	s15, r3
 80012d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	ee07 3a90 	vmov	s15, r3
 80012e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ea:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800133c <_ZN13PololuEncoder9get_speedEm+0x78>
 80012ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012f2:	edc7 7a03 	vstr	s15, [r7, #12]
	float denominator = (float)CPR*gear_ratio;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80012fc:	ee07 3a90 	vmov	s15, r3
 8001300:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	edd3 7a03 	vldr	s15, [r3, #12]
 800130a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800130e:	edc7 7a02 	vstr	s15, [r7, #8]
    speed = numerator/denominator; //RPM
 8001312:	edd7 6a03 	vldr	s13, [r7, #12]
 8001316:	ed97 7a02 	vldr	s14, [r7, #8]
 800131a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	edc3 7a07 	vstr	s15, [r3, #28]
    return speed;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	ee07 3a90 	vmov	s15, r3
}
 800132c:	eeb0 0a67 	vmov.f32	s0, s15
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	42700000 	.word	0x42700000

08001340 <_ZN13PololuEncoderD1Ev>:
                             VALUE_WIDTH, delta,
							 VALUE_WIDTH+3, speed);
    HAL_UART_Transmit(uart_handle, (uint8_t*)my_message, string_length, HAL_MAX_DELAY);
}

PololuEncoder::~PololuEncoder()
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	4a0c      	ldr	r2, [pc, #48]	@ (800137c <_ZN13PololuEncoderD1Ev+0x3c>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	601a      	str	r2, [r3, #0]
{
	// Stop encoder
	if (interrupt_mode)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	7c5b      	ldrb	r3, [r3, #17]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d006      	beq.n	8001364 <_ZN13PololuEncoderD1Ev+0x24>
	{
		HAL_TIM_Encoder_Stop_IT(timer_handle, TIM_CHANNEL_ALL);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	213c      	movs	r1, #60	@ 0x3c
 800135c:	4618      	mov	r0, r3
 800135e:	f004 fcd8 	bl	8005d12 <HAL_TIM_Encoder_Stop_IT>
 8001362:	e005      	b.n	8001370 <_ZN13PololuEncoderD1Ev+0x30>
	}
	else
	{
		HAL_TIM_Encoder_Stop(timer_handle, TIM_CHANNEL_ALL);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	213c      	movs	r1, #60	@ 0x3c
 800136a:	4618      	mov	r0, r3
 800136c:	f004 fb8c 	bl	8005a88 <HAL_TIM_Encoder_Stop>
	}
}
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	0800f3dc 	.word	0x0800f3dc

08001380 <_ZN13PololuEncoderD0Ev>:
PololuEncoder::~PololuEncoder()
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
}
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ffd9 	bl	8001340 <_ZN13PololuEncoderD1Ev>
 800138e:	212c      	movs	r1, #44	@ 0x2c
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f00b f956 	bl	800c642 <_ZdlPvj>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <_ZN11PololuServoC1EP17TIM_HandleTypeDefmtmtttt>:
 * @date Jun 3, 2024
 */

#include "PololuServo.h"

PololuServo::PololuServo(TIM_HandleTypeDef* timer_handle,
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
 80013ac:	807b      	strh	r3, [r7, #2]
						  PWM_period_us(PWM_period_us),
						  CPU_clock_speed_MHz(CPU_clock_speed_MHz),
						  maximum_angle_magnitude(maximum_angle_magnitude),
						  full_left_pulse_width_us(full_left_pulse_width_us),
						  neutral_pulse_width_us(neutral_pulse_width_us),
						  full_right_pulse_width_us(full_right_pulse_width_us)
 80013ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001428 <_ZN11PololuServoC1EP17TIM_HandleTypeDefmtmtttt+0x88>)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	601a      	str	r2, [r3, #0]
						: timer_handle(timer_handle),
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	605a      	str	r2, [r3, #4]
						  timer_channel(timer_channel),
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	609a      	str	r2, [r3, #8]
						  PWM_period_us(PWM_period_us),
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	887a      	ldrh	r2, [r7, #2]
 80013c4:	819a      	strh	r2, [r3, #12]
						  CPU_clock_speed_MHz(CPU_clock_speed_MHz),
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	611a      	str	r2, [r3, #16]
						  maximum_angle_magnitude(maximum_angle_magnitude),
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	8bba      	ldrh	r2, [r7, #28]
 80013d0:	829a      	strh	r2, [r3, #20]
						  full_left_pulse_width_us(full_left_pulse_width_us),
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	8c3a      	ldrh	r2, [r7, #32]
 80013d6:	82da      	strh	r2, [r3, #22]
						  neutral_pulse_width_us(neutral_pulse_width_us),
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013dc:	831a      	strh	r2, [r3, #24]
						  full_right_pulse_width_us(full_right_pulse_width_us)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80013e2:	835a      	strh	r2, [r3, #26]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80013ea:	839a      	strh	r2, [r3, #28]
{
	// Set correct PWM period.
	timer_handle->Instance->ARR = autoreload_value;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	8b9a      	ldrh	r2, [r3, #28]
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	62da      	str	r2, [r3, #44]	@ 0x2c
	timer_handle->Instance->PSC = (CPU_clock_speed_MHz * PWM_period_us)/autoreload_value;
 80013f6:	887b      	ldrh	r3, [r7, #2]
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	fb03 f202 	mul.w	r2, r3, r2
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	8b9b      	ldrh	r3, [r3, #28]
 8001402:	4619      	mov	r1, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	fbb2 f2f1 	udiv	r2, r2, r1
 800140c:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_TIM_PWM_Start(timer_handle, timer_channel);
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	68b8      	ldr	r0, [r7, #8]
 8001412:	f003 fecf 	bl	80051b4 <HAL_TIM_PWM_Start>

	// Home servo
	set_position(0);
 8001416:	2100      	movs	r1, #0
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f000 f807 	bl	800142c <_ZN11PololuServo12set_positionEs>
}
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	0800f3ec 	.word	0x0800f3ec

0800142c <_ZN11PololuServo12set_positionEs>:

void PololuServo::set_position(int16_t position_deg) // should be int8_t
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	807b      	strh	r3, [r7, #2]
	// Saturate requested position
	if (position_deg > maximum_angle_magnitude){
 8001438:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	8a92      	ldrh	r2, [r2, #20]
 8001440:	4293      	cmp	r3, r2
 8001442:	dd03      	ble.n	800144c <_ZN11PololuServo12set_positionEs+0x20>
		position_deg = maximum_angle_magnitude;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	8a9b      	ldrh	r3, [r3, #20]
 8001448:	807b      	strh	r3, [r7, #2]
 800144a:	e00b      	b.n	8001464 <_ZN11PololuServo12set_positionEs+0x38>
	}
	else if (position_deg < -maximum_angle_magnitude)
 800144c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	8a9b      	ldrh	r3, [r3, #20]
 8001454:	425b      	negs	r3, r3
 8001456:	429a      	cmp	r2, r3
 8001458:	da04      	bge.n	8001464 <_ZN11PololuServo12set_positionEs+0x38>
	{
		position_deg = -maximum_angle_magnitude;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	8a9b      	ldrh	r3, [r3, #20]
 800145e:	425b      	negs	r3, r3
 8001460:	b29b      	uxth	r3, r3
 8001462:	807b      	strh	r3, [r7, #2]
	}

	// Convert the postion requested from degrees to a pulse width in microseconds.
	float slope;
	if (position_deg>=0)
 8001464:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001468:	2b00      	cmp	r3, #0
 800146a:	db18      	blt.n	800149e <_ZN11PololuServo12set_positionEs+0x72>
	{
		slope = ((float)full_right_pulse_width_us - (float)neutral_pulse_width_us)/(float)maximum_angle_magnitude;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	8b5b      	ldrh	r3, [r3, #26]
 8001470:	ee07 3a90 	vmov	s15, r3
 8001474:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	8b1b      	ldrh	r3, [r3, #24]
 800147c:	ee07 3a90 	vmov	s15, r3
 8001480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001484:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	8a9b      	ldrh	r3, [r3, #20]
 800148c:	ee07 3a90 	vmov	s15, r3
 8001490:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001494:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001498:	edc7 7a03 	vstr	s15, [r7, #12]
 800149c:	e017      	b.n	80014ce <_ZN11PololuServo12set_positionEs+0xa2>
	}
	else
	{
		slope = ((float)neutral_pulse_width_us - (float)full_left_pulse_width_us)/(float)maximum_angle_magnitude;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	8b1b      	ldrh	r3, [r3, #24]
 80014a2:	ee07 3a90 	vmov	s15, r3
 80014a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	8adb      	ldrh	r3, [r3, #22]
 80014ae:	ee07 3a90 	vmov	s15, r3
 80014b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014b6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	8a9b      	ldrh	r3, [r3, #20]
 80014be:	ee07 3a90 	vmov	s15, r3
 80014c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014ca:	edc7 7a03 	vstr	s15, [r7, #12]
	//	{
	//		slope *= -1;
	//	}

	// Calculate compare value from pulse width
	uint16_t pulse_width = slope*position_deg + neutral_pulse_width_us;
 80014ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014d2:	ee07 3a90 	vmov	s15, r3
 80014d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014da:	edd7 7a03 	vldr	s15, [r7, #12]
 80014de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	8b1b      	ldrh	r3, [r3, #24]
 80014e6:	ee07 3a90 	vmov	s15, r3
 80014ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014f6:	ee17 3a90 	vmov	r3, s15
 80014fa:	817b      	strh	r3, [r7, #10]
	uint16_t compare_value = pulse_width*autoreload_value/PWM_period_us;
 80014fc:	897b      	ldrh	r3, [r7, #10]
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	8b92      	ldrh	r2, [r2, #28]
 8001502:	fb02 f303 	mul.w	r3, r2, r3
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	8992      	ldrh	r2, [r2, #12]
 800150a:	fb93 f3f2 	sdiv	r3, r3, r2
 800150e:	813b      	strh	r3, [r7, #8]
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d105      	bne.n	8001524 <_ZN11PololuServo12set_positionEs+0xf8>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	893a      	ldrh	r2, [r7, #8]
 8001520:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001522:	e018      	b.n	8001556 <_ZN11PololuServo12set_positionEs+0x12a>
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2b04      	cmp	r3, #4
 800152a:	d105      	bne.n	8001538 <_ZN11PololuServo12set_positionEs+0x10c>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	893a      	ldrh	r2, [r7, #8]
 8001534:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001536:	e00e      	b.n	8001556 <_ZN11PololuServo12set_positionEs+0x12a>
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	2b08      	cmp	r3, #8
 800153e:	d105      	bne.n	800154c <_ZN11PololuServo12set_positionEs+0x120>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	893a      	ldrh	r2, [r7, #8]
 8001548:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800154a:	e004      	b.n	8001556 <_ZN11PololuServo12set_positionEs+0x12a>
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	893a      	ldrh	r2, [r7, #8]
 8001554:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001556:	bf00      	nop
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <_ZN11PololuServoD1Ev>:

PololuServo::~PololuServo() {
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	4a04      	ldr	r2, [pc, #16]	@ (8001580 <_ZN11PololuServoD1Ev+0x1c>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	0800f3ec 	.word	0x0800f3ec

08001584 <_ZN11PololuServoD0Ev>:
PololuServo::~PololuServo() {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
}
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ffe9 	bl	8001564 <_ZN11PololuServoD1Ev>
 8001592:	2120      	movs	r1, #32
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f00b f854 	bl	800c642 <_ZdlPvj>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb>:
 * @param neutral_us_width Width of the neutral signal in microseconds.
 * @param full_forward_us_width Width of the full forward signal in microseconds.
 * @param rescale_forward_magnitude Maximum value for rescaling the forward signal. Overridden if fed into RemoteControlControl.
 * @param rescale_reverse_magnitude Minimum value for rescaling the reverse signal. Overridden if fed into RemoteControlControl.
 */
RCChannel::RCChannel(
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	4613      	mov	r3, r2
 80015b2:	80fb      	strh	r3, [r7, #6]
	full_reverse_us_width(full_reverse_us_width),
	neutral_us_width(neutral_us_width),
	full_forward_us_width(full_forward_us_width),
	rescale_forward_magnitude(rescale_forward_magnitude),
	rescale_reverse_magnitude(rescale_reverse_magnitude),
	saturate(saturate)
 80015b4:	4a3c      	ldr	r2, [pc, #240]	@ (80016a8 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0x104>)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2200      	movs	r2, #0
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2200      	movs	r2, #0
 80015ca:	60da      	str	r2, [r3, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2200      	movs	r2, #0
 80015d0:	611a      	str	r2, [r3, #16]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2200      	movs	r2, #0
 80015d6:	615a      	str	r2, [r3, #20]
	pin_group(pin_group),
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	619a      	str	r2, [r3, #24]
	pin(pin),
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	88fa      	ldrh	r2, [r7, #6]
 80015e2:	839a      	strh	r2, [r3, #28]
	timer_handle(timer_handle),
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	621a      	str	r2, [r3, #32]
	timer_channel(timer_channel),
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6a3a      	ldr	r2, [r7, #32]
 80015ee:	625a      	str	r2, [r3, #36]	@ 0x24
	RC_signal_period_us(RC_signal_period_us),
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015f4:	629a      	str	r2, [r3, #40]	@ 0x28
	CPU_clock_speed_MHz(CPU_clock_speed_MHz),
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015fa:	62da      	str	r2, [r3, #44]	@ 0x2c
	full_reverse_us_width(full_reverse_us_width),
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001600:	631a      	str	r2, [r3, #48]	@ 0x30
	neutral_us_width(neutral_us_width),
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001606:	635a      	str	r2, [r3, #52]	@ 0x34
	full_forward_us_width(full_forward_us_width),
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800160c:	639a      	str	r2, [r3, #56]	@ 0x38
	rescale_forward_magnitude(rescale_forward_magnitude),
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001612:	63da      	str	r2, [r3, #60]	@ 0x3c
	rescale_reverse_magnitude(rescale_reverse_magnitude),
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001618:	641a      	str	r2, [r3, #64]	@ 0x40
	saturate(saturate)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001620:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
{
	// Critical. Starts the first interrupt.
	HAL_TIM_IC_Start_IT(timer_handle, timer_channel);
 800162c:	6a39      	ldr	r1, [r7, #32]
 800162e:	6838      	ldr	r0, [r7, #0]
 8001630:	f003 ff2e 	bl	8005490 <HAL_TIM_IC_Start_IT>

	// Set minuend depending on whether it's a 16-bit or 32-bit timer.
	// This is specific to the STM32F411CUE6!!
	if (((timer_handle->Instance) == TIM2) or ((timer_handle->Instance) == TIM5))
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800163c:	d004      	beq.n	8001648 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0xa4>
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a1a      	ldr	r2, [pc, #104]	@ (80016ac <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0x108>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d104      	bne.n	8001652 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0xae>
	{
		minuend = 0xffffffff;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f04f 32ff 	mov.w	r2, #4294967295
 800164e:	649a      	str	r2, [r3, #72]	@ 0x48
 8001650:	e003      	b.n	800165a <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0xb6>
	}
	else
	{
		minuend = 0xffff;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001658:	649a      	str	r2, [r3, #72]	@ 0x48
	}

	// For later scaling
	uint32_t prescalar = timer_handle->Instance->PSC + 1;
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001660:	3301      	adds	r3, #1
 8001662:	617b      	str	r3, [r7, #20]
	float refClock = CPU_clock_speed_MHz/prescalar;
 8001664:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	fbb2 f3f3 	udiv	r3, r2, r3
 800166c:	ee07 3a90 	vmov	s15, r3
 8001670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001674:	edc7 7a04 	vstr	s15, [r7, #16]
	mFactor = 1/refClock;
 8001678:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800167c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001680:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

	// Needed later
	forward_range = full_forward_us_width - neutral_us_width;
 800168a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800168c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800168e:	1ad2      	subs	r2, r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	659a      	str	r2, [r3, #88]	@ 0x58
	reverse_range = neutral_us_width - full_reverse_us_width;
 8001694:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001698:	1ad2      	subs	r2, r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	655a      	str	r2, [r3, #84]	@ 0x54
}
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4618      	mov	r0, r3
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	0800f3fc 	.word	0x0800f3fc
 80016ac:	40000c00 	.word	0x40000c00

080016b0 <_ZN9RCChannel8callbackEv>:
 * 
 * @note This function assumes that the timer handle and channel have been properly initialized.
 * Please set the associated timer channel to input capture mode, direct. 
 * Leave the auto-reload value as large as possible.
 */
void RCChannel::callback(){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	// Was it a rising edge or a falling edge?
	GPIO_PinState pinState = HAL_GPIO_ReadPin(pin_group, pin);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	699a      	ldr	r2, [r3, #24]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	8b9b      	ldrh	r3, [r3, #28]
 80016c0:	4619      	mov	r1, r3
 80016c2:	4610      	mov	r0, r2
 80016c4:	f002 f818 	bl	80036f8 <HAL_GPIO_ReadPin>
 80016c8:	4603      	mov	r3, r0
 80016ca:	73fb      	strb	r3, [r7, #15]

	if(pinState == GPIO_PIN_SET) // Rising edge
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d10c      	bne.n	80016ec <_ZN9RCChannel8callbackEv+0x3c>
		{
			// Read
			first_value = HAL_TIM_ReadCapturedValue(timer_handle, timer_channel);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1a      	ldr	r2, [r3, #32]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016da:	4619      	mov	r1, r3
 80016dc:	4610      	mov	r0, r2
 80016de:	f004 fee3 	bl	80064a8 <HAL_TIM_ReadCapturedValue>
 80016e2:	4603      	mov	r3, r0
 80016e4:	461a      	mov	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	605a      	str	r2, [r3, #4]
		}

 	// Finally
 	first_capture = true;
 	}
}
 80016ea:	e07a      	b.n	80017e2 <_ZN9RCChannel8callbackEv+0x132>
 		second_value = HAL_TIM_ReadCapturedValue(timer_handle, timer_channel);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a1a      	ldr	r2, [r3, #32]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f4:	4619      	mov	r1, r3
 80016f6:	4610      	mov	r0, r2
 80016f8:	f004 fed6 	bl	80064a8 <HAL_TIM_ReadCapturedValue>
 80016fc:	4603      	mov	r3, r0
 80016fe:	461a      	mov	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	609a      	str	r2, [r3, #8]
 		if(first_value > second_value)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	429a      	cmp	r2, r3
 800170e:	dd0c      	ble.n	800172a <_ZN9RCChannel8callbackEv+0x7a>
 			difference = minuend - first_value + second_value + 1;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	6852      	ldr	r2, [r2, #4]
 8001718:	1a9b      	subs	r3, r3, r2
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6892      	ldr	r2, [r2, #8]
 800171e:	4413      	add	r3, r2
 8001720:	3301      	adds	r3, #1
 8001722:	461a      	mov	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	e006      	b.n	8001738 <_ZN9RCChannel8callbackEv+0x88>
 			difference = second_value - first_value;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	1ad2      	subs	r2, r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	60da      	str	r2, [r3, #12]
 		us_width = difference;//*mFactor;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	611a      	str	r2, [r3, #16]
		int32_t centered_value = us_width - neutral_us_width;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691a      	ldr	r2, [r3, #16]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	60bb      	str	r3, [r7, #8]
 		if(centered_value >= 0)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	2b00      	cmp	r3, #0
 8001750:	db23      	blt.n	800179a <_ZN9RCChannel8callbackEv+0xea>
 			value = centered_value*rescale_forward_magnitude/forward_range;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	fb03 f202 	mul.w	r2, r3, r2
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001760:	fb92 f2f3 	sdiv	r2, r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	615a      	str	r2, [r3, #20]
			if(value>rescale_forward_magnitude && saturate)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	695a      	ldr	r2, [r3, #20]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001770:	429a      	cmp	r2, r3
 8001772:	dd0d      	ble.n	8001790 <_ZN9RCChannel8callbackEv+0xe0>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800177a:	2b00      	cmp	r3, #0
 800177c:	d008      	beq.n	8001790 <_ZN9RCChannel8callbackEv+0xe0>
				value = rescale_forward_magnitude;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	615a      	str	r2, [r3, #20]
	 			saturate_flag = true;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800178e:	e024      	b.n	80017da <_ZN9RCChannel8callbackEv+0x12a>
	 			saturate_flag = false;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001798:	e01f      	b.n	80017da <_ZN9RCChannel8callbackEv+0x12a>
			value =  centered_value*rescale_reverse_magnitude/reverse_range;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	fb03 f202 	mul.w	r2, r3, r2
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017a8:	fb92 f2f3 	sdiv	r2, r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	615a      	str	r2, [r3, #20]
	 		if(value<-rescale_reverse_magnitude)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	695a      	ldr	r2, [r3, #20]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b8:	425b      	negs	r3, r3
 80017ba:	429a      	cmp	r2, r3
 80017bc:	da09      	bge.n	80017d2 <_ZN9RCChannel8callbackEv+0x122>
	 			value = -rescale_reverse_magnitude;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c2:	425a      	negs	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	615a      	str	r2, [r3, #20]
	 			saturate_flag = true;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80017d0:	e003      	b.n	80017da <_ZN9RCChannel8callbackEv+0x12a>
	 			saturate_flag = false;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 	first_capture = true;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <_ZN9RCChannelD1Ev>:
/**
 * @brief Destructor for the RCChannel class.
 * 
 * This destructor stops the interrupts for the RCChannel object.
 */
RCChannel::~RCChannel() {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	4a07      	ldr	r2, [pc, #28]	@ (8001814 <_ZN9RCChannelD1Ev+0x28>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	601a      	str	r2, [r3, #0]
	// Stop interrupts
	HAL_TIM_IC_Stop_IT(timer_handle, timer_channel);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1a      	ldr	r2, [r3, #32]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001802:	4619      	mov	r1, r3
 8001804:	4610      	mov	r0, r2
 8001806:	f003 ff5d 	bl	80056c4 <HAL_TIM_IC_Stop_IT>
}
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	0800f3fc 	.word	0x0800f3fc

08001818 <_ZN9RCChannelD0Ev>:
RCChannel::~RCChannel() {
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
}
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ffe3 	bl	80017ec <_ZN9RCChannelD1Ev>
 8001826:	215c      	movs	r1, #92	@ 0x5c
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f00a ff0a 	bl	800c642 <_ZdlPvj>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4618      	mov	r0, r3
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <_ZN20RemoteControlControlC1EP9RCChannelP12MotorControlt>:
/**
 * @brief Constructs a RemoteControlControl object with the given remote control channel and motor driver.
 * @param rc_channel Pointer to the RCChannel object.
 * @param motor Pointer to a TB6612FNG_Motor object.
 */
RemoteControlControl::RemoteControlControl(
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
 8001844:	807b      	strh	r3, [r7, #2]
		RCChannel* rc_channel,
		MotorControl* motor_controller,
		uint16_t maximum_speed)
	: rc_channel(rc_channel),
	  motor_controller(motor_controller),
	  maximum_speed(maximum_speed)
 8001846:	4a09      	ldr	r2, [pc, #36]	@ (800186c <_ZN20RemoteControlControlC1EP9RCChannelP12MotorControlt+0x34>)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	601a      	str	r2, [r3, #0]
	: rc_channel(rc_channel),
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	605a      	str	r2, [r3, #4]
	  motor_controller(motor_controller),
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	609a      	str	r2, [r3, #8]
	  maximum_speed(maximum_speed)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	887a      	ldrh	r2, [r7, #2]
 800185c:	819a      	strh	r2, [r3, #12]
{
//	// Reassign the magnitudes.
//	rc_channel->rescale_forward_magnitude = maximum_speed;
//	rc_channel->rescale_reverse_magnitude = maximum_speed;
}
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4618      	mov	r0, r3
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	0800f40c 	.word	0x0800f40c

08001870 <_ZN20RemoteControlControl12update_motorEv>:
/**
 * @brief Updates a TB6612FNG_Motor object based on the remote control channel value.
 * Run this function in your HAL_TIM_IC_CaptureCallback() function to update the motor as often as your RC sends new values.
 */
void RemoteControlControl::update_motor()
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	// Read from the remote control channel
	int32_t value = rc_channel->value;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	60fb      	str	r3, [r7, #12]

	// Rescale to maximum speed.
	if (value>=0)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2b00      	cmp	r3, #0
 8001884:	db19      	blt.n	80018ba <_ZN20RemoteControlControl12update_motorEv+0x4a>
	{
		setpoint = (float)value*(float)maximum_speed/((float)rc_channel->rescale_forward_magnitude);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	ee07 3a90 	vmov	s15, r3
 800188c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	899b      	ldrh	r3, [r3, #12]
 8001894:	ee07 3a90 	vmov	s15, r3
 8001898:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800189c:	ee67 6a27 	vmul.f32	s13, s14, s15
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018a6:	ee07 3a90 	vmov	s15, r3
 80018aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	edc3 7a04 	vstr	s15, [r3, #16]
 80018b8:	e018      	b.n	80018ec <_ZN20RemoteControlControl12update_motorEv+0x7c>
	}
	else
	{
		setpoint = (float)value*(float)maximum_speed/((float)rc_channel->rescale_reverse_magnitude);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	ee07 3a90 	vmov	s15, r3
 80018c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	899b      	ldrh	r3, [r3, #12]
 80018c8:	ee07 3a90 	vmov	s15, r3
 80018cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018d0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018da:	ee07 3a90 	vmov	s15, r3
 80018de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	edc3 7a04 	vstr	s15, [r3, #16]
	}

	// Update the controller
	motor_controller->run(setpoint);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	edd3 7a04 	vldr	s15, [r3, #16]
 80018f6:	eeb0 0a67 	vmov.f32	s0, s15
 80018fa:	4610      	mov	r0, r2
 80018fc:	f7ff fb34 	bl	8000f68 <_ZN12MotorControl3runEf>
}
 8001900:	bf00      	nop
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <_ZN20RemoteControlControlD1Ev>:


/**
 * @brief Destructs the RemoteControlControl object and releases any dynamically allocated resources.
 */
RemoteControlControl::~RemoteControlControl()
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	4a13      	ldr	r2, [pc, #76]	@ (8001960 <_ZN20RemoteControlControlD1Ev+0x58>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	601a      	str	r2, [r3, #0]
{
	// Deallocate memory for rc_channel if it was dynamically allocated
	if (rc_channel != nullptr)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00b      	beq.n	8001936 <_ZN20RemoteControlControlD1Ev+0x2e>
	{
		delete rc_channel;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d004      	beq.n	8001930 <_ZN20RemoteControlControlD1Ev+0x28>
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	3204      	adds	r2, #4
 800192a:	6812      	ldr	r2, [r2, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	4790      	blx	r2
		rc_channel = nullptr; // Optional: Set to nullptr to avoid dangling pointers
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2200      	movs	r2, #0
 8001934:	605a      	str	r2, [r3, #4]
	}

	// Deallocate memory for motor if it was dynamically allocated
	if (motor_controller != nullptr)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00b      	beq.n	8001956 <_ZN20RemoteControlControlD1Ev+0x4e>
	{
		delete motor_controller;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d004      	beq.n	8001950 <_ZN20RemoteControlControlD1Ev+0x48>
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	3204      	adds	r2, #4
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	4790      	blx	r2
		motor_controller = nullptr; // Optional: Set to nullptr to avoid dangling pointers
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
	}
}
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	0800f40c 	.word	0x0800f40c

08001964 <_ZN20RemoteControlControlD0Ev>:
RemoteControlControl::~RemoteControlControl()
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
}
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ffcb 	bl	8001908 <_ZN20RemoteControlControlD1Ev>
 8001972:	2114      	movs	r1, #20
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f00a fe64 	bl	800c642 <_ZdlPvj>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm>:
 * @param timer_channel The channel number to be used with the timer (like TIM_CHANNEL_1).
 * @param CPU_clock_speed_MHz The CPU clock speed in MHz (like 96).
 * @param PWM_frequency_Hz The PWM frequency in Hz (20,000 to 100,000 allowed).
 */

TB6612FNG_Motor::TB6612FNG_Motor(
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	4613      	mov	r3, r2
 8001992:	80fb      	strh	r3, [r7, #6]

	: IN1_pin_group(IN1_pin_group), IN1_pin(IN1_pin),
	  IN2_pin_group(IN2_pin_group), IN2_pin(IN2_pin),
	  timer_handle(timer_handle), timer_channel(timer_channel),
	  CPU_clock_speed_MHz(CPU_clock_speed_MHz),
	  PWM_frequency_Hz(PWM_frequency_Hz)
 8001994:	4a23      	ldr	r2, [pc, #140]	@ (8001a24 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa0>)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	601a      	str	r2, [r3, #0]
	: IN1_pin_group(IN1_pin_group), IN1_pin(IN1_pin),
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	68ba      	ldr	r2, [r7, #8]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	88fa      	ldrh	r2, [r7, #6]
 80019a4:	811a      	strh	r2, [r3, #8]
	  IN2_pin_group(IN2_pin_group), IN2_pin(IN2_pin),
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	60da      	str	r2, [r3, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8b3a      	ldrh	r2, [r7, #24]
 80019b0:	821a      	strh	r2, [r3, #16]
	  timer_handle(timer_handle), timer_channel(timer_channel),
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	69fa      	ldr	r2, [r7, #28]
 80019b6:	615a      	str	r2, [r3, #20]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	6a3a      	ldr	r2, [r7, #32]
 80019bc:	619a      	str	r2, [r3, #24]
	  CPU_clock_speed_MHz(CPU_clock_speed_MHz),
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019c2:	61da      	str	r2, [r3, #28]
	  PWM_frequency_Hz(PWM_frequency_Hz)
 80019c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	841a      	strh	r2, [r3, #32]
{
	// Make sure the motor is off to start
	stop();
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f000 f8d0 	bl	8001b72 <_ZN15TB6612FNG_Motor4stopEv>

	// Make sure the PWM frequency is within bounds
	if(PWM_frequency_Hz < 20000)
 80019d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019d4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80019d8:	4293      	cmp	r3, r2
 80019da:	d803      	bhi.n	80019e4 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0x60>
	{
		// Too low. Human can hear this.
		PWM_frequency_Hz = 20000;
 80019dc:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80019e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019e2:	e005      	b.n	80019f0 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0x6c>
	}
	else if(PWM_frequency_Hz > 100000)
 80019e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019e6:	4a10      	ldr	r2, [pc, #64]	@ (8001a28 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa4>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d901      	bls.n	80019f0 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0x6c>
	{
		// Very high. May interfere with other tasks.
		PWM_frequency_Hz = 100000;
 80019ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001a28 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa4>)
 80019ee:	62bb      	str	r3, [r7, #40]	@ 0x28
	}

	// Set the auto-reload value based on the CPU clock speed and the desired PWM frequency
	auto_reload_value =( CPU_clock_speed_MHz * 1000000 / PWM_frequency_Hz ) - 1;
 80019f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f2:	4a0e      	ldr	r2, [pc, #56]	@ (8001a2c <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa8>)
 80019f4:	fb03 f202 	mul.w	r2, r3, r2
 80019f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	3b01      	subs	r3, #1
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	845a      	strh	r2, [r3, #34]	@ 0x22
	timer_handle->Instance->ARR = auto_reload_value;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Start the PWM generation
	start();
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f000 f89d 	bl	8001b52 <_ZN15TB6612FNG_Motor5startEv>
}
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	0800f41c 	.word	0x0800f41c
 8001a28:	000186a0 	.word	0x000186a0
 8001a2c:	000f4240 	.word	0x000f4240

08001a30 <_ZN15TB6612FNG_MotorD1Ev>:

/**
 * @brief Destructor for the TB6612FNG_Motor class.
 */
TB6612FNG_Motor::~TB6612FNG_Motor()
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	4a05      	ldr	r2, [pc, #20]	@ (8001a50 <_ZN15TB6612FNG_MotorD1Ev+0x20>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	601a      	str	r2, [r3, #0]
{
	stop();
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 f897 	bl	8001b72 <_ZN15TB6612FNG_Motor4stopEv>
}
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	0800f41c 	.word	0x0800f41c

08001a54 <_ZN15TB6612FNG_MotorD0Ev>:
TB6612FNG_Motor::~TB6612FNG_Motor()
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
}
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ffe7 	bl	8001a30 <_ZN15TB6612FNG_MotorD1Ev>
 8001a62:	2124      	movs	r1, #36	@ 0x24
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f00a fdec 	bl	800c642 <_ZdlPvj>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <_ZN15TB6612FNG_Motor8set_dutyEss>:
/**
 * @brief Sets the duty cycle of the motor.
 * @param speed The duty cycle value, ranging from -100 to 100 by default.
 */
void TB6612FNG_Motor::set_duty(int16_t duty, int16_t maximum_value)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	807b      	strh	r3, [r7, #2]
 8001a80:	4613      	mov	r3, r2
 8001a82:	803b      	strh	r3, [r7, #0]
	// Raise the appropriate pins
	if(duty >= 0)
 8001a84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	db10      	blt.n	8001aae <_ZN15TB6612FNG_Motor8set_dutyEss+0x3a>
	{
		HAL_GPIO_WritePin(IN1_pin_group, IN1_pin, GPIO_PIN_SET);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6858      	ldr	r0, [r3, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	891b      	ldrh	r3, [r3, #8]
 8001a94:	2201      	movs	r2, #1
 8001a96:	4619      	mov	r1, r3
 8001a98:	f001 fe46 	bl	8003728 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_pin_group, IN2_pin, GPIO_PIN_RESET);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68d8      	ldr	r0, [r3, #12]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	8a1b      	ldrh	r3, [r3, #16]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f001 fe3e 	bl	8003728 <HAL_GPIO_WritePin>
 8001aac:	e00f      	b.n	8001ace <_ZN15TB6612FNG_Motor8set_dutyEss+0x5a>
	}
	else
	{
		HAL_GPIO_WritePin(IN1_pin_group, IN1_pin, GPIO_PIN_RESET);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6858      	ldr	r0, [r3, #4]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	891b      	ldrh	r3, [r3, #8]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f001 fe35 	bl	8003728 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_pin_group, IN2_pin, GPIO_PIN_SET);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68d8      	ldr	r0, [r3, #12]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	8a1b      	ldrh	r3, [r3, #16]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f001 fe2d 	bl	8003728 <HAL_GPIO_WritePin>
	}

	uint16_t duty_magnitude;
	if(duty<0)
 8001ace:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	da03      	bge.n	8001ade <_ZN15TB6612FNG_Motor8set_dutyEss+0x6a>
	{
		duty_magnitude = duty*-1;
 8001ad6:	887b      	ldrh	r3, [r7, #2]
 8001ad8:	425b      	negs	r3, r3
 8001ada:	81fb      	strh	r3, [r7, #14]
 8001adc:	e001      	b.n	8001ae2 <_ZN15TB6612FNG_Motor8set_dutyEss+0x6e>
	}
	else
	{
		duty_magnitude = duty;
 8001ade:	887b      	ldrh	r3, [r7, #2]
 8001ae0:	81fb      	strh	r3, [r7, #14]
	}

	// Check if duty cycle is within bounds
	if(duty_magnitude > maximum_value)
 8001ae2:	89fa      	ldrh	r2, [r7, #14]
 8001ae4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	dd01      	ble.n	8001af0 <_ZN15TB6612FNG_Motor8set_dutyEss+0x7c>
	{
		duty = maximum_value;
 8001aec:	883b      	ldrh	r3, [r7, #0]
 8001aee:	807b      	strh	r3, [r7, #2]
	}


	// Set the compare value
	uint16_t compare_value = duty_magnitude * auto_reload_value / maximum_value;
 8001af0:	89fb      	ldrh	r3, [r7, #14]
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8001af6:	fb03 f202 	mul.w	r2, r3, r2
 8001afa:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001afe:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b02:	81bb      	strh	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d105      	bne.n	8001b18 <_ZN15TB6612FNG_Motor8set_dutyEss+0xa4>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	89ba      	ldrh	r2, [r7, #12]
 8001b14:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001b16:	e018      	b.n	8001b4a <_ZN15TB6612FNG_Motor8set_dutyEss+0xd6>
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	2b04      	cmp	r3, #4
 8001b1e:	d105      	bne.n	8001b2c <_ZN15TB6612FNG_Motor8set_dutyEss+0xb8>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	89ba      	ldrh	r2, [r7, #12]
 8001b28:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001b2a:	e00e      	b.n	8001b4a <_ZN15TB6612FNG_Motor8set_dutyEss+0xd6>
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d105      	bne.n	8001b40 <_ZN15TB6612FNG_Motor8set_dutyEss+0xcc>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	89ba      	ldrh	r2, [r7, #12]
 8001b3c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001b3e:	e004      	b.n	8001b4a <_ZN15TB6612FNG_Motor8set_dutyEss+0xd6>
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	89ba      	ldrh	r2, [r7, #12]
 8001b48:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001b4a:	bf00      	nop
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <_ZN15TB6612FNG_Motor5startEv>:

/**
 * @brief starts the motor by starting PWM generation.
 */
void TB6612FNG_Motor::start()
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(timer_handle, timer_channel);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695a      	ldr	r2, [r3, #20]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	4619      	mov	r1, r3
 8001b64:	4610      	mov	r0, r2
 8001b66:	f003 fb25 	bl	80051b4 <HAL_TIM_PWM_Start>
}
 8001b6a:	bf00      	nop
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <_ZN15TB6612FNG_Motor4stopEv>:

/**
 * @brief stops the motor by stopping PWM generation.
 */
void TB6612FNG_Motor::stop()
{	
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(IN1_pin_group, IN1_pin, GPIO_PIN_RESET);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6858      	ldr	r0, [r3, #4]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	891b      	ldrh	r3, [r3, #8]
 8001b82:	2200      	movs	r2, #0
 8001b84:	4619      	mov	r1, r3
 8001b86:	f001 fdcf 	bl	8003728 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_pin_group, IN2_pin, GPIO_PIN_RESET);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68d8      	ldr	r0, [r3, #12]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	8a1b      	ldrh	r3, [r3, #16]
 8001b92:	2200      	movs	r2, #0
 8001b94:	4619      	mov	r1, r3
 8001b96:	f001 fdc7 	bl	8003728 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(timer_handle, timer_channel);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	695a      	ldr	r2, [r3, #20]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	f003 fbb5 	bl	8005314 <HAL_TIM_PWM_Stop>
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <HAL_GPIO_EXTI_Callback>:
void I2C_Scan(UART_HandleTypeDef* uart_handle);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	80fb      	strh	r3, [r7, #6]
   // Your interrupt handling code here
	if(initialized)
 8001bbe:	4b08      	ldr	r3, [pc, #32]	@ (8001be0 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d008      	beq.n	8001bd8 <HAL_GPIO_EXTI_Callback+0x24>
	{
		if(GPIO_PIN == GPIO_PIN_13)
 8001bc6:	88fb      	ldrh	r3, [r7, #6]
 8001bc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001bcc:	d104      	bne.n	8001bd8 <HAL_GPIO_EXTI_Callback+0x24>
		{
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8001bce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001bd2:	4804      	ldr	r0, [pc, #16]	@ (8001be4 <HAL_GPIO_EXTI_Callback+0x30>)
 8001bd4:	f001 fdc1 	bl	800375a <HAL_GPIO_TogglePin>
		}
	}
}
 8001bd8:	bf00      	nop
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	200006d4 	.word	0x200006d4
 8001be4:	40020400 	.word	0x40020400

08001be8 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
	if (initialized) // Timers must be initalized before this code can run successfully.
 8001bf0:	4b12      	ldr	r3, [pc, #72]	@ (8001c3c <HAL_TIM_IC_CaptureCallback+0x54>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d01d      	beq.n	8001c34 <HAL_TIM_IC_CaptureCallback+0x4c>
	{
		if((htim->Instance = TIM1))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a11      	ldr	r2, [pc, #68]	@ (8001c40 <HAL_TIM_IC_CaptureCallback+0x58>)
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	bf14      	ite	ne
 8001c06:	2301      	movne	r3, #1
 8001c08:	2300      	moveq	r3, #0
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d011      	beq.n	8001c34 <HAL_TIM_IC_CaptureCallback+0x4c>
		{
			if ( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 )
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	7f1b      	ldrb	r3, [r3, #28]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d104      	bne.n	8001c22 <HAL_TIM_IC_CaptureCallback+0x3a>
			{
				SteeringChannel->callback();
 8001c18:	4b0a      	ldr	r3, [pc, #40]	@ (8001c44 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fd47 	bl	80016b0 <_ZN9RCChannel8callbackEv>
			}

			if ( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	7f1b      	ldrb	r3, [r3, #28]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d104      	bne.n	8001c34 <HAL_TIM_IC_CaptureCallback+0x4c>
			{
				ThrottleChannel->callback();
 8001c2a:	4b07      	ldr	r3, [pc, #28]	@ (8001c48 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff fd3e 	bl	80016b0 <_ZN9RCChannel8callbackEv>
			}
		}
	}
}
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	200006d4 	.word	0x200006d4
 8001c40:	40010000 	.word	0x40010000
 8001c44:	200006e0 	.word	0x200006e0
 8001c48:	200006dc 	.word	0x200006dc

08001c4c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // Not needed
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a07      	ldr	r2, [pc, #28]	@ (8001c78 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d106      	bne.n	8001c6c <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		My_Encoder->count = __HAL_TIM_GET_COUNTER(htim);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c64:	4b05      	ldr	r3, [pc, #20]	@ (8001c7c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	b292      	uxth	r2, r2
 8001c6a:	82da      	strh	r2, [r3, #22]
	}
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	40000c00 	.word	0x40000c00
 8001c7c:	200006e8 	.word	0x200006e8

08001c80 <_Z10Servo_Taskh>:

uint8_t Servo_Task(uint8_t state)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
	switch(state)
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d002      	beq.n	8001c96 <_Z10Servo_Taskh+0x16>
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d009      	beq.n	8001ca8 <_Z10Servo_Taskh+0x28>
 8001c94:	e010      	b.n	8001cb8 <_Z10Servo_Taskh+0x38>
	{
		case 1:
	  		My_Servo->set_position(-30);
 8001c96:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc4 <_Z10Servo_Taskh+0x44>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f06f 011d 	mvn.w	r1, #29
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff fbc4 	bl	800142c <_ZN11PololuServo12set_positionEs>
	  		return 2;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e008      	b.n	8001cba <_Z10Servo_Taskh+0x3a>
		case 2:
	  		My_Servo->set_position(30);
 8001ca8:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <_Z10Servo_Taskh+0x44>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	211e      	movs	r1, #30
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fbbc 	bl	800142c <_ZN11PololuServo12set_positionEs>
	  		return 1;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <_Z10Servo_Taskh+0x3a>
		default:
			return 0;
 8001cb8:	2300      	movs	r3, #0
	}
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	200006f0 	.word	0x200006f0

08001cc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ccc:	b09f      	sub	sp, #124	@ 0x7c
 8001cce:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cd0:	f001 f9e6 	bl	80030a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cd4:	f000 fab6 	bl	8002244 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cd8:	f000 fdb0 	bl	800283c <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8001cdc:	f000 fd80 	bl	80027e0 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 8001ce0:	f000 fbf2 	bl	80024c8 <_ZL12MX_TIM2_Initv>
  MX_TIM5_Init();
 8001ce4:	f000 fd1e 	bl	8002724 <_ZL12MX_TIM5_Initv>
  MX_TIM1_Init();
 8001ce8:	f000 fb52 	bl	8002390 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8001cec:	f000 fc7a 	bl	80025e4 <_ZL12MX_TIM3_Initv>
  MX_I2C1_Init();
 8001cf0:	f000 fb1a 	bl	8002328 <_ZL12MX_I2C1_Initv>
		  GPIOB, GPIO_PIN_14,
		  GPIOB, GPIO_PIN_15,
		  &htim2, TIM_CHANNEL_1,
		  CPU_CLOCK_SPEED_MHZ,
		  MOTOR_PWM_HZ
		  );
 8001cf4:	2024      	movs	r0, #36	@ 0x24
 8001cf6:	f00a fca6 	bl	800c646 <_Znwj>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	461c      	mov	r4, r3
 8001cfe:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001d02:	9304      	str	r3, [sp, #16]
 8001d04:	2364      	movs	r3, #100	@ 0x64
 8001d06:	9303      	str	r3, [sp, #12]
 8001d08:	2300      	movs	r3, #0
 8001d0a:	9302      	str	r3, [sp, #8]
 8001d0c:	4bba      	ldr	r3, [pc, #744]	@ (8001ff8 <main+0x330>)
 8001d0e:	9301      	str	r3, [sp, #4]
 8001d10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	4bb9      	ldr	r3, [pc, #740]	@ (8001ffc <main+0x334>)
 8001d18:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d1c:	49b7      	ldr	r1, [pc, #732]	@ (8001ffc <main+0x334>)
 8001d1e:	4620      	mov	r0, r4
 8001d20:	f7ff fe30 	bl	8001984 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm>
  My_Motor = new TB6612FNG_Motor
 8001d24:	4bb6      	ldr	r3, [pc, #728]	@ (8002000 <main+0x338>)
 8001d26:	601c      	str	r4, [r3, #0]
  		  1520,      // Calibrated neutral
  		  2035,      // Calibrated full left
  		  10000,       // New max positive
		  10000,       // New max negative (magnitude)
		  true     // Saturate if signal is over full? True by default. False good for debugging.
		  );
 8001d28:	205c      	movs	r0, #92	@ 0x5c
 8001d2a:	f00a fc8c 	bl	800c646 <_Znwj>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	461c      	mov	r4, r3
 8001d32:	2301      	movs	r3, #1
 8001d34:	9308      	str	r3, [sp, #32]
 8001d36:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001d3a:	9307      	str	r3, [sp, #28]
 8001d3c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001d40:	9306      	str	r3, [sp, #24]
 8001d42:	f240 73f3 	movw	r3, #2035	@ 0x7f3
 8001d46:	9305      	str	r3, [sp, #20]
 8001d48:	f44f 63be 	mov.w	r3, #1520	@ 0x5f0
 8001d4c:	9304      	str	r3, [sp, #16]
 8001d4e:	f240 33ea 	movw	r3, #1002	@ 0x3ea
 8001d52:	9303      	str	r3, [sp, #12]
 8001d54:	2364      	movs	r3, #100	@ 0x64
 8001d56:	9302      	str	r3, [sp, #8]
 8001d58:	f244 435c 	movw	r3, #17500	@ 0x445c
 8001d5c:	9301      	str	r3, [sp, #4]
 8001d5e:	2300      	movs	r3, #0
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	4ba8      	ldr	r3, [pc, #672]	@ (8002004 <main+0x33c>)
 8001d64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d68:	49a7      	ldr	r1, [pc, #668]	@ (8002008 <main+0x340>)
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	f7ff fc1a 	bl	80015a4 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb>
  SteeringChannel = new RCChannel
 8001d70:	4ba6      	ldr	r3, [pc, #664]	@ (800200c <main+0x344>)
 8001d72:	601c      	str	r4, [r3, #0]
		  		  1533,  // Calibrated neutral
		  		  2017,  // Calibrated full speed
		  		  10000,   // New max positive
				  10000,    // New max negative (magnitude)
				  true  // Saturate if signal is over full? True by default. False good for debugging.
		  	  	  );
 8001d74:	205c      	movs	r0, #92	@ 0x5c
 8001d76:	f00a fc66 	bl	800c646 <_Znwj>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	461c      	mov	r4, r3
 8001d7e:	2301      	movs	r3, #1
 8001d80:	9308      	str	r3, [sp, #32]
 8001d82:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001d86:	9307      	str	r3, [sp, #28]
 8001d88:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001d8c:	9306      	str	r3, [sp, #24]
 8001d8e:	f240 73e1 	movw	r3, #2017	@ 0x7e1
 8001d92:	9305      	str	r3, [sp, #20]
 8001d94:	f240 53fd 	movw	r3, #1533	@ 0x5fd
 8001d98:	9304      	str	r3, [sp, #16]
 8001d9a:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8001d9e:	9303      	str	r3, [sp, #12]
 8001da0:	2364      	movs	r3, #100	@ 0x64
 8001da2:	9302      	str	r3, [sp, #8]
 8001da4:	f244 435c 	movw	r3, #17500	@ 0x445c
 8001da8:	9301      	str	r3, [sp, #4]
 8001daa:	2304      	movs	r3, #4
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	4b95      	ldr	r3, [pc, #596]	@ (8002004 <main+0x33c>)
 8001db0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001db4:	4994      	ldr	r1, [pc, #592]	@ (8002008 <main+0x340>)
 8001db6:	4620      	mov	r0, r4
 8001db8:	f7ff fbf4 	bl	80015a4 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb>
  ThrottleChannel = new RCChannel
 8001dbc:	4b94      	ldr	r3, [pc, #592]	@ (8002010 <main+0x348>)
 8001dbe:	601c      	str	r4, [r3, #0]
		  &htim5,
		  20,
		  488.3f,
		  16,
		  false // true doesn't work yet!
		  );
 8001dc0:	202c      	movs	r0, #44	@ 0x2c
 8001dc2:	f00a fc40 	bl	800c646 <_Znwj>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	461c      	mov	r4, r3
 8001dca:	2300      	movs	r3, #0
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	2310      	movs	r3, #16
 8001dd0:	ed9f 0a90 	vldr	s0, [pc, #576]	@ 8002014 <main+0x34c>
 8001dd4:	2214      	movs	r2, #20
 8001dd6:	4990      	ldr	r1, [pc, #576]	@ (8002018 <main+0x350>)
 8001dd8:	4620      	mov	r0, r4
 8001dda:	f7ff f9bf 	bl	800115c <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb>
  My_Encoder = new PololuEncoder
 8001dde:	4b8f      	ldr	r3, [pc, #572]	@ (800201c <main+0x354>)
 8001de0:	601c      	str	r4, [r3, #0]
		  My_Encoder,
		  CONTROL_FREQUENCY_HZ,
		  100.0f,
		  650.0f,
		  0.0f
		  );
 8001de2:	2034      	movs	r0, #52	@ 0x34
 8001de4:	f00a fc2f 	bl	800c646 <_Znwj>
 8001de8:	4603      	mov	r3, r0
 8001dea:	461c      	mov	r4, r3
 8001dec:	4b84      	ldr	r3, [pc, #528]	@ (8002000 <main+0x338>)
 8001dee:	6819      	ldr	r1, [r3, #0]
 8001df0:	4b8a      	ldr	r3, [pc, #552]	@ (800201c <main+0x354>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	ed9f 1a8a 	vldr	s2, [pc, #552]	@ 8002020 <main+0x358>
 8001df8:	eddf 0a8a 	vldr	s1, [pc, #552]	@ 8002024 <main+0x35c>
 8001dfc:	ed9f 0a8a 	vldr	s0, [pc, #552]	@ 8002028 <main+0x360>
 8001e00:	2308      	movs	r3, #8
 8001e02:	4620      	mov	r0, r4
 8001e04:	f7ff f850 	bl	8000ea8 <_ZN12MotorControlC1EP15TB6612FNG_MotorP13PololuEncodermfff>
  My_Controller = new MotorControl
 8001e08:	4b88      	ldr	r3, [pc, #544]	@ (800202c <main+0x364>)
 8001e0a:	601c      	str	r4, [r3, #0]
  Throttle = new RemoteControlControl
		  (
		  ThrottleChannel,
		  My_Controller,
		  30
		  );
 8001e0c:	2014      	movs	r0, #20
 8001e0e:	f00a fc1a 	bl	800c646 <_Znwj>
 8001e12:	4603      	mov	r3, r0
 8001e14:	461c      	mov	r4, r3
 8001e16:	4b7e      	ldr	r3, [pc, #504]	@ (8002010 <main+0x348>)
 8001e18:	6819      	ldr	r1, [r3, #0]
 8001e1a:	4b84      	ldr	r3, [pc, #528]	@ (800202c <main+0x364>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	231e      	movs	r3, #30
 8001e20:	4620      	mov	r0, r4
 8001e22:	f7ff fd09 	bl	8001838 <_ZN20RemoteControlControlC1EP9RCChannelP12MotorControlt>
  Throttle = new RemoteControlControl
 8001e26:	4b82      	ldr	r3, [pc, #520]	@ (8002030 <main+0x368>)
 8001e28:	601c      	str	r4, [r3, #0]
	  	  CPU_CLOCK_SPEED_MHZ,
		  60,
		  1000,
		  1500,
		  2000
		  );
 8001e2a:	2020      	movs	r0, #32
 8001e2c:	f00a fc0b 	bl	800c646 <_Znwj>
 8001e30:	4603      	mov	r3, r0
 8001e32:	461c      	mov	r4, r3
 8001e34:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001e38:	9304      	str	r3, [sp, #16]
 8001e3a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001e3e:	9303      	str	r3, [sp, #12]
 8001e40:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e44:	9302      	str	r3, [sp, #8]
 8001e46:	233c      	movs	r3, #60	@ 0x3c
 8001e48:	9301      	str	r3, [sp, #4]
 8001e4a:	2364      	movs	r3, #100	@ 0x64
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	f244 435c 	movw	r3, #17500	@ 0x445c
 8001e52:	2200      	movs	r2, #0
 8001e54:	4977      	ldr	r1, [pc, #476]	@ (8002034 <main+0x36c>)
 8001e56:	4620      	mov	r0, r4
 8001e58:	f7ff faa2 	bl	80013a0 <_ZN11PololuServoC1EP17TIM_HandleTypeDefmtmtttt>
  My_Servo = new PololuServo
 8001e5c:	4b76      	ldr	r3, [pc, #472]	@ (8002038 <main+0x370>)
 8001e5e:	601c      	str	r4, [r3, #0]
//		  0x29
//		  );

  // Not shutdown pin for ToF_Sensor

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001e60:	2201      	movs	r2, #1
 8001e62:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001e66:	4865      	ldr	r0, [pc, #404]	@ (8001ffc <main+0x334>)
 8001e68:	f001 fc5e 	bl	8003728 <HAL_GPIO_WritePin>
  VL53L0X_Init();
 8001e6c:	f000 fd40 	bl	80028f0 <_ZL12VL53L0X_Initv>


  uint8_t task = 0; // Start on task 0
 8001e70:	2300      	movs	r3, #0
 8001e72:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  int number_of_states = 5;
 8001e76:	2305      	movs	r3, #5
 8001e78:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t last_tick_state[number_of_states] = {0};
 8001e7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001e7c:	1e4b      	subs	r3, r1, #1
 8001e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e80:	460a      	mov	r2, r1
 8001e82:	2300      	movs	r3, #0
 8001e84:	4690      	mov	r8, r2
 8001e86:	4699      	mov	r9, r3
 8001e88:	f04f 0200 	mov.w	r2, #0
 8001e8c:	f04f 0300 	mov.w	r3, #0
 8001e90:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001e94:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001e98:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001e9c:	460a      	mov	r2, r1
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613a      	str	r2, [r7, #16]
 8001ea2:	617b      	str	r3, [r7, #20]
 8001ea4:	f04f 0200 	mov.w	r2, #0
 8001ea8:	f04f 0300 	mov.w	r3, #0
 8001eac:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001eb0:	4648      	mov	r0, r9
 8001eb2:	0143      	lsls	r3, r0, #5
 8001eb4:	4640      	mov	r0, r8
 8001eb6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001eba:	4640      	mov	r0, r8
 8001ebc:	0142      	lsls	r2, r0, #5
 8001ebe:	460b      	mov	r3, r1
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	3307      	adds	r3, #7
 8001ec4:	08db      	lsrs	r3, r3, #3
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	ebad 0d03 	sub.w	sp, sp, r3
 8001ecc:	ab0a      	add	r3, sp, #40	@ 0x28
 8001ece:	3303      	adds	r3, #3
 8001ed0:	089b      	lsrs	r3, r3, #2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ed8:	3901      	subs	r1, #1
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	1d1a      	adds	r2, r3, #4
 8001ee0:	1e4b      	subs	r3, r1, #1
 8001ee2:	e003      	b.n	8001eec <main+0x224>
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	6011      	str	r1, [r2, #0]
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	3204      	adds	r2, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	daf9      	bge.n	8001ee4 <main+0x21c>
  uint16_t task_frequencies[number_of_states] = {0};
 8001ef0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001ef2:	1e4b      	subs	r3, r1, #1
 8001ef4:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ef6:	460a      	mov	r2, r1
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60ba      	str	r2, [r7, #8]
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	f04f 0200 	mov.w	r2, #0
 8001f02:	f04f 0300 	mov.w	r3, #0
 8001f06:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001f0a:	4648      	mov	r0, r9
 8001f0c:	0103      	lsls	r3, r0, #4
 8001f0e:	4640      	mov	r0, r8
 8001f10:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001f14:	4640      	mov	r0, r8
 8001f16:	0102      	lsls	r2, r0, #4
 8001f18:	460a      	mov	r2, r1
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	603a      	str	r2, [r7, #0]
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	f04f 0200 	mov.w	r2, #0
 8001f24:	f04f 0300 	mov.w	r3, #0
 8001f28:	e9d7 8900 	ldrd	r8, r9, [r7]
 8001f2c:	4648      	mov	r0, r9
 8001f2e:	0103      	lsls	r3, r0, #4
 8001f30:	4640      	mov	r0, r8
 8001f32:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8001f36:	4640      	mov	r0, r8
 8001f38:	0102      	lsls	r2, r0, #4
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	3307      	adds	r3, #7
 8001f40:	08db      	lsrs	r3, r3, #3
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	ebad 0d03 	sub.w	sp, sp, r3
 8001f48:	ab0a      	add	r3, sp, #40	@ 0x28
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	085b      	lsrs	r3, r3, #1
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f54:	3901      	subs	r1, #1
 8001f56:	2200      	movs	r2, #0
 8001f58:	801a      	strh	r2, [r3, #0]
 8001f5a:	1c9a      	adds	r2, r3, #2
 8001f5c:	1e4b      	subs	r3, r1, #1
 8001f5e:	e003      	b.n	8001f68 <main+0x2a0>
 8001f60:	2100      	movs	r1, #0
 8001f62:	8011      	strh	r1, [r2, #0]
 8001f64:	3b01      	subs	r3, #1
 8001f66:	3202      	adds	r2, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	daf9      	bge.n	8001f60 <main+0x298>
  task_frequencies[1] = 1; // Hz
 8001f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f6e:	2201      	movs	r2, #1
 8001f70:	805a      	strh	r2, [r3, #2]
  task_frequencies[2] = CONTROL_FREQUENCY_HZ; // Hz
 8001f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f74:	2208      	movs	r2, #8
 8001f76:	809a      	strh	r2, [r3, #4]
  task_frequencies[3] = 2; // Hz
 8001f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	80da      	strh	r2, [r3, #6]
  task_frequencies[4] = 5;
 8001f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f80:	2205      	movs	r2, #5
 8001f82:	811a      	strh	r2, [r3, #8]
  uint16_t task_periods[number_of_states] = {0};
 8001f84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001f86:	1e4b      	subs	r3, r1, #1
 8001f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f8a:	460a      	mov	r2, r1
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	4615      	mov	r5, r2
 8001f90:	461e      	mov	r6, r3
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	0133      	lsls	r3, r6, #4
 8001f9c:	ea43 7315 	orr.w	r3, r3, r5, lsr #28
 8001fa0:	012a      	lsls	r2, r5, #4
 8001fa2:	460a      	mov	r2, r1
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	4692      	mov	sl, r2
 8001fa8:	469b      	mov	fp, r3
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	f04f 0300 	mov.w	r3, #0
 8001fb2:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8001fb6:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8001fba:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	3307      	adds	r3, #7
 8001fc4:	08db      	lsrs	r3, r3, #3
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	ebad 0d03 	sub.w	sp, sp, r3
 8001fcc:	ab0a      	add	r3, sp, #40	@ 0x28
 8001fce:	3301      	adds	r3, #1
 8001fd0:	085b      	lsrs	r3, r3, #1
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fd8:	3901      	subs	r1, #1
 8001fda:	2200      	movs	r2, #0
 8001fdc:	801a      	strh	r2, [r3, #0]
 8001fde:	1c9a      	adds	r2, r3, #2
 8001fe0:	1e4b      	subs	r3, r1, #1
 8001fe2:	e003      	b.n	8001fec <main+0x324>
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	8011      	strh	r1, [r2, #0]
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	3202      	adds	r2, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	daf9      	bge.n	8001fe4 <main+0x31c>

  // Loop to calculate periods based on frequencies
  for (int index = 0; index < number_of_states; index++) {
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ff4:	e03f      	b.n	8002076 <main+0x3ae>
 8001ff6:	bf00      	nop
 8001ff8:	2000054c 	.word	0x2000054c
 8001ffc:	40020400 	.word	0x40020400
 8002000:	200006d8 	.word	0x200006d8
 8002004:	20000504 	.word	0x20000504
 8002008:	40020000 	.word	0x40020000
 800200c:	200006e0 	.word	0x200006e0
 8002010:	200006dc 	.word	0x200006dc
 8002014:	43f42666 	.word	0x43f42666
 8002018:	200005dc 	.word	0x200005dc
 800201c:	200006e8 	.word	0x200006e8
 8002020:	00000000 	.word	0x00000000
 8002024:	44228000 	.word	0x44228000
 8002028:	42c80000 	.word	0x42c80000
 800202c:	200006ec 	.word	0x200006ec
 8002030:	200006e4 	.word	0x200006e4
 8002034:	20000594 	.word	0x20000594
 8002038:	200006f0 	.word	0x200006f0
      if (task_frequencies[index] != 0) {
 800203c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800203e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002040:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00e      	beq.n	8002066 <main+0x39e>
          task_periods[index] = 1000 / task_frequencies[index];
 8002048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800204a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800204c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002050:	461a      	mov	r2, r3
 8002052:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002056:	fb93 f3f2 	sdiv	r3, r3, r2
 800205a:	b299      	uxth	r1, r3
 800205c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800205e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002060:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8002064:	e004      	b.n	8002070 <main+0x3a8>
      } else {
          task_periods[index] = 0; // Avoid division by zero
 8002066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002068:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800206a:	2100      	movs	r1, #0
 800206c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (int index = 0; index < number_of_states; index++) {
 8002070:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002072:	3301      	adds	r3, #1
 8002074:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002076:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002078:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800207a:	429a      	cmp	r2, r3
 800207c:	dbde      	blt.n	800203c <main+0x374>
      }
  }

  uint8_t task_1_state = 1;
 800207e:	2301      	movs	r3, #1
 8002080:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint16_t range_reading = -1;
 8002084:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002088:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t block_range_mm = 128;
 800208a:	2380      	movs	r3, #128	@ 0x80
 800208c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  bool ready_for_new_block = true;
 800208e:	2301      	movs	r3, #1
 8002090:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint32_t current_tick = HAL_GetTick();
 8002094:	f001 f86a 	bl	800316c <HAL_GetTick>
 8002098:	61f8      	str	r0, [r7, #28]

	  switch(task)
 800209a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800209e:	2b04      	cmp	r3, #4
 80020a0:	f200 80b0 	bhi.w	8002204 <main+0x53c>
 80020a4:	a201      	add	r2, pc, #4	@ (adr r2, 80020ac <main+0x3e4>)
 80020a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020aa:	bf00      	nop
 80020ac:	080020c1 	.word	0x080020c1
 80020b0:	080020f9 	.word	0x080020f9
 80020b4:	08002127 	.word	0x08002127
 80020b8:	0800214f 	.word	0x0800214f
 80020bc:	080021c9 	.word	0x080021c9
	  {
	  	  case 0:
	  		  // Init
	  		  HAL_Delay(300);
 80020c0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80020c4:	f001 f85e 	bl	8003184 <HAL_Delay>
	  		  My_Controller->run(0);
 80020c8:	4b51      	ldr	r3, [pc, #324]	@ (8002210 <main+0x548>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	ed9f 0a51 	vldr	s0, [pc, #324]	@ 8002214 <main+0x54c>
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe ff49 	bl	8000f68 <_ZN12MotorControl3runEf>
	  		  My_Servo->set_position(0);
 80020d6:	4b50      	ldr	r3, [pc, #320]	@ (8002218 <main+0x550>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2100      	movs	r1, #0
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff f9a5 	bl	800142c <_ZN11PololuServo12set_positionEs>
	  		  HAL_Delay(500);
 80020e2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80020e6:	f001 f84d 	bl	8003184 <HAL_Delay>
	  		  initialized = true;
 80020ea:	4b4c      	ldr	r3, [pc, #304]	@ (800221c <main+0x554>)
 80020ec:	2201      	movs	r2, #1
 80020ee:	701a      	strb	r2, [r3, #0]

	  		  // State change
	  		  task = 1;
 80020f0:	2301      	movs	r3, #1
 80020f2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	  		  break;
 80020f6:	e089      	b.n	800220c <main+0x544>

	  	  case 1: // Servo Control
			  if (current_tick - last_tick_state[1] >= task_periods[1])
 80020f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	69fa      	ldr	r2, [r7, #28]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002102:	8852      	ldrh	r2, [r2, #2]
 8002104:	4293      	cmp	r3, r2
 8002106:	d30a      	bcc.n	800211e <main+0x456>
			  {
				  last_tick_state[1] = current_tick;
 8002108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800210a:	69fa      	ldr	r2, [r7, #28]
 800210c:	605a      	str	r2, [r3, #4]
				  task_1_state = Servo_Task(task_1_state);
 800210e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fdb4 	bl	8001c80 <_Z10Servo_Taskh>
 8002118:	4603      	mov	r3, r0
 800211a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			  }

			  // State change
			  task = 2;
 800211e:	2302      	movs	r3, #2
 8002120:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			  break;
 8002124:	e072      	b.n	800220c <main+0x544>

	  	  case 2: // Motor Controller
	  		  if (current_tick - last_tick_state[2] >= task_periods[2])
 8002126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	69fa      	ldr	r2, [r7, #28]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002130:	8892      	ldrh	r2, [r2, #4]
 8002132:	4293      	cmp	r3, r2
 8002134:	d307      	bcc.n	8002146 <main+0x47e>
	  		  {
	  			  last_tick_state[2] = current_tick;
 8002136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002138:	69fa      	ldr	r2, [r7, #28]
 800213a:	609a      	str	r2, [r3, #8]
	  			  Throttle->update_motor();
 800213c:	4b38      	ldr	r3, [pc, #224]	@ (8002220 <main+0x558>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff fb95 	bl	8001870 <_ZN20RemoteControlControl12update_motorEv>
	  		  }

	  		  // State change
	  		  task = 3;
 8002146:	2303      	movs	r3, #3
 8002148:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	  		  break;
 800214c:	e05e      	b.n	800220c <main+0x544>

	  	  case 3:
			  if (current_tick - last_tick_state[3] >= task_periods[3])
 800214e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	69fa      	ldr	r2, [r7, #28]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002158:	88d2      	ldrh	r2, [r2, #6]
 800215a:	4293      	cmp	r3, r2
 800215c:	d330      	bcc.n	80021c0 <main+0x4f8>
			  {
				  last_tick_state[3] = current_tick;
 800215e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002160:	69fa      	ldr	r2, [r7, #28]
 8002162:	60da      	str	r2, [r3, #12]
				  //range_reading = My_ToF_Sensor->read(&huart2, true);

				  VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 8002164:	4b2f      	ldr	r3, [pc, #188]	@ (8002224 <main+0x55c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	492f      	ldr	r1, [pc, #188]	@ (8002228 <main+0x560>)
 800216a:	4618      	mov	r0, r3
 800216c:	f006 fd32 	bl	8008bd4 <VL53L0X_PerformSingleRangingMeasurement>
					if(RangingData.RangeStatus == 0) {
 8002170:	4b2d      	ldr	r3, [pc, #180]	@ (8002228 <main+0x560>)
 8002172:	7e1b      	ldrb	r3, [r3, #24]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d113      	bne.n	80021a0 <main+0x4d8>
						string_length = sprintf(my_message, "Measured distance: %i\n\r", RangingData.RangeMilliMeter);
 8002178:	4b2b      	ldr	r3, [pc, #172]	@ (8002228 <main+0x560>)
 800217a:	891b      	ldrh	r3, [r3, #8]
 800217c:	461a      	mov	r2, r3
 800217e:	492b      	ldr	r1, [pc, #172]	@ (800222c <main+0x564>)
 8002180:	482b      	ldr	r0, [pc, #172]	@ (8002230 <main+0x568>)
 8002182:	f00b f85b 	bl	800d23c <siprintf>
 8002186:	4603      	mov	r3, r0
 8002188:	4a2a      	ldr	r2, [pc, #168]	@ (8002234 <main+0x56c>)
 800218a:	6013      	str	r3, [r2, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)my_message, string_length, HAL_MAX_DELAY);
 800218c:	4b29      	ldr	r3, [pc, #164]	@ (8002234 <main+0x56c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	b29a      	uxth	r2, r3
 8002192:	f04f 33ff 	mov.w	r3, #4294967295
 8002196:	4926      	ldr	r1, [pc, #152]	@ (8002230 <main+0x568>)
 8002198:	4827      	ldr	r0, [pc, #156]	@ (8002238 <main+0x570>)
 800219a:	f004 feaf 	bl	8006efc <HAL_UART_Transmit>
 800219e:	e00f      	b.n	80021c0 <main+0x4f8>
					} else {
						string_length = sprintf(my_message, "Error\r\n");
 80021a0:	4926      	ldr	r1, [pc, #152]	@ (800223c <main+0x574>)
 80021a2:	4823      	ldr	r0, [pc, #140]	@ (8002230 <main+0x568>)
 80021a4:	f00b f84a 	bl	800d23c <siprintf>
 80021a8:	4603      	mov	r3, r0
 80021aa:	4a22      	ldr	r2, [pc, #136]	@ (8002234 <main+0x56c>)
 80021ac:	6013      	str	r3, [r2, #0]
						HAL_UART_Transmit(&huart2, (uint8_t*)my_message, string_length, HAL_MAX_DELAY);
 80021ae:	4b21      	ldr	r3, [pc, #132]	@ (8002234 <main+0x56c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	f04f 33ff 	mov.w	r3, #4294967295
 80021b8:	491d      	ldr	r1, [pc, #116]	@ (8002230 <main+0x568>)
 80021ba:	481f      	ldr	r0, [pc, #124]	@ (8002238 <main+0x570>)
 80021bc:	f004 fe9e 	bl	8006efc <HAL_UART_Transmit>
					}
			  }

			  // State Changes
			  task = 4;
 80021c0:	2304      	movs	r3, #4
 80021c2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			  break;
 80021c6:	e021      	b.n	800220c <main+0x544>

	  	  case 4: // Debug messages
	  		  if (current_tick - last_tick_state[4] >= task_periods[4])
 80021c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	69fa      	ldr	r2, [r7, #28]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80021d2:	8912      	ldrh	r2, [r2, #8]
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d311      	bcc.n	80021fc <main+0x534>
	  		  {
	  			  last_tick_state[4] = current_tick;
 80021d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021da:	69fa      	ldr	r2, [r7, #28]
 80021dc:	611a      	str	r2, [r3, #16]
	  			  // My_Controller->debug_message(&huart2);
	  			  // Throttle->debug_message(&huart2);

	  			  // Is a block within range?
				  if (range_reading < block_range_mm)
 80021de:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80021e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d20a      	bcs.n	80021fc <main+0x534>
				  {
					  sprintf(my_message, "A block is within range\r\n");
 80021e6:	4916      	ldr	r1, [pc, #88]	@ (8002240 <main+0x578>)
 80021e8:	4811      	ldr	r0, [pc, #68]	@ (8002230 <main+0x568>)
 80021ea:	f00b f827 	bl	800d23c <siprintf>
					  HAL_UART_Transmit(&huart2, (uint8_t*)my_message, MESSAGE_LENGTH, HAL_MAX_DELAY);
 80021ee:	f04f 33ff 	mov.w	r3, #4294967295
 80021f2:	2264      	movs	r2, #100	@ 0x64
 80021f4:	490e      	ldr	r1, [pc, #56]	@ (8002230 <main+0x568>)
 80021f6:	4810      	ldr	r0, [pc, #64]	@ (8002238 <main+0x570>)
 80021f8:	f004 fe80 	bl	8006efc <HAL_UART_Transmit>
				  }
	  		  }

	  		  // State change
	  		  task = 1;
 80021fc:	2301      	movs	r3, #1
 80021fe:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	  		  break;
 8002202:	e003      	b.n	800220c <main+0x544>

	  	  default:
	  		  task = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	  		  break;
 800220a:	bf00      	nop
	  }
  }
 800220c:	e742      	b.n	8002094 <main+0x3cc>
 800220e:	bf00      	nop
 8002210:	200006ec 	.word	0x200006ec
 8002214:	00000000 	.word	0x00000000
 8002218:	200006f0 	.word	0x200006f0
 800221c:	200006d4 	.word	0x200006d4
 8002220:	200006e4 	.word	0x200006e4
 8002224:	20000000 	.word	0x20000000
 8002228:	200006f4 	.word	0x200006f4
 800222c:	0800f348 	.word	0x0800f348
 8002230:	2000066c 	.word	0x2000066c
 8002234:	200006d0 	.word	0x200006d0
 8002238:	20000624 	.word	0x20000624
 800223c:	0800f360 	.word	0x0800f360
 8002240:	0800f368 	.word	0x0800f368

08002244 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b094      	sub	sp, #80	@ 0x50
 8002248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800224a:	f107 0320 	add.w	r3, r7, #32
 800224e:	2230      	movs	r2, #48	@ 0x30
 8002250:	2100      	movs	r1, #0
 8002252:	4618      	mov	r0, r3
 8002254:	f00b f855 	bl	800d302 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002258:	f107 030c 	add.w	r3, r7, #12
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002268:	2300      	movs	r3, #0
 800226a:	60bb      	str	r3, [r7, #8]
 800226c:	4b2c      	ldr	r3, [pc, #176]	@ (8002320 <_Z18SystemClock_Configv+0xdc>)
 800226e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002270:	4a2b      	ldr	r2, [pc, #172]	@ (8002320 <_Z18SystemClock_Configv+0xdc>)
 8002272:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002276:	6413      	str	r3, [r2, #64]	@ 0x40
 8002278:	4b29      	ldr	r3, [pc, #164]	@ (8002320 <_Z18SystemClock_Configv+0xdc>)
 800227a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002284:	2300      	movs	r3, #0
 8002286:	607b      	str	r3, [r7, #4]
 8002288:	4b26      	ldr	r3, [pc, #152]	@ (8002324 <_Z18SystemClock_Configv+0xe0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a25      	ldr	r2, [pc, #148]	@ (8002324 <_Z18SystemClock_Configv+0xe0>)
 800228e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	4b23      	ldr	r3, [pc, #140]	@ (8002324 <_Z18SystemClock_Configv+0xe0>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800229c:	607b      	str	r3, [r7, #4]
 800229e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80022a0:	2302      	movs	r3, #2
 80022a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80022a4:	2301      	movs	r3, #1
 80022a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80022a8:	2310      	movs	r3, #16
 80022aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022ac:	2302      	movs	r3, #2
 80022ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80022b0:	2300      	movs	r3, #0
 80022b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80022b4:	2308      	movs	r3, #8
 80022b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80022b8:	2364      	movs	r3, #100	@ 0x64
 80022ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022bc:	2302      	movs	r3, #2
 80022be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80022c0:	2304      	movs	r3, #4
 80022c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022c4:	f107 0320 	add.w	r3, r7, #32
 80022c8:	4618      	mov	r0, r3
 80022ca:	f002 fa73 	bl	80047b4 <HAL_RCC_OscConfig>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	bf14      	ite	ne
 80022d4:	2301      	movne	r3, #1
 80022d6:	2300      	moveq	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80022de:	f000 fb73 	bl	80029c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022e2:	230f      	movs	r3, #15
 80022e4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022e6:	2302      	movs	r3, #2
 80022e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80022ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022f4:	2300      	movs	r3, #0
 80022f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80022f8:	f107 030c 	add.w	r3, r7, #12
 80022fc:	2103      	movs	r1, #3
 80022fe:	4618      	mov	r0, r3
 8002300:	f002 fcd0 	bl	8004ca4 <HAL_RCC_ClockConfig>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	bf14      	ite	ne
 800230a:	2301      	movne	r3, #1
 800230c:	2300      	moveq	r3, #0
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8002314:	f000 fb58 	bl	80029c8 <Error_Handler>
  }
}
 8002318:	bf00      	nop
 800231a:	3750      	adds	r7, #80	@ 0x50
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40023800 	.word	0x40023800
 8002324:	40007000 	.word	0x40007000

08002328 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800232c:	4b15      	ldr	r3, [pc, #84]	@ (8002384 <_ZL12MX_I2C1_Initv+0x5c>)
 800232e:	4a16      	ldr	r2, [pc, #88]	@ (8002388 <_ZL12MX_I2C1_Initv+0x60>)
 8002330:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002332:	4b14      	ldr	r3, [pc, #80]	@ (8002384 <_ZL12MX_I2C1_Initv+0x5c>)
 8002334:	4a15      	ldr	r2, [pc, #84]	@ (800238c <_ZL12MX_I2C1_Initv+0x64>)
 8002336:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002338:	4b12      	ldr	r3, [pc, #72]	@ (8002384 <_ZL12MX_I2C1_Initv+0x5c>)
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800233e:	4b11      	ldr	r3, [pc, #68]	@ (8002384 <_ZL12MX_I2C1_Initv+0x5c>)
 8002340:	2200      	movs	r2, #0
 8002342:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002344:	4b0f      	ldr	r3, [pc, #60]	@ (8002384 <_ZL12MX_I2C1_Initv+0x5c>)
 8002346:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800234a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800234c:	4b0d      	ldr	r3, [pc, #52]	@ (8002384 <_ZL12MX_I2C1_Initv+0x5c>)
 800234e:	2200      	movs	r2, #0
 8002350:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002352:	4b0c      	ldr	r3, [pc, #48]	@ (8002384 <_ZL12MX_I2C1_Initv+0x5c>)
 8002354:	2200      	movs	r2, #0
 8002356:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002358:	4b0a      	ldr	r3, [pc, #40]	@ (8002384 <_ZL12MX_I2C1_Initv+0x5c>)
 800235a:	2200      	movs	r2, #0
 800235c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800235e:	4b09      	ldr	r3, [pc, #36]	@ (8002384 <_ZL12MX_I2C1_Initv+0x5c>)
 8002360:	2200      	movs	r2, #0
 8002362:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002364:	4807      	ldr	r0, [pc, #28]	@ (8002384 <_ZL12MX_I2C1_Initv+0x5c>)
 8002366:	f001 fa2b 	bl	80037c0 <HAL_I2C_Init>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	bf14      	ite	ne
 8002370:	2301      	movne	r3, #1
 8002372:	2300      	moveq	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800237a:	f000 fb25 	bl	80029c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	200004b0 	.word	0x200004b0
 8002388:	40005400 	.word	0x40005400
 800238c:	000186a0 	.word	0x000186a0

08002390 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08a      	sub	sp, #40	@ 0x28
 8002394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002396:	f107 0318 	add.w	r3, r7, #24
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	605a      	str	r2, [r3, #4]
 80023a0:	609a      	str	r2, [r3, #8]
 80023a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023a4:	f107 0310 	add.w	r3, r7, #16
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80023ae:	463b      	mov	r3, r7
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023ba:	4b41      	ldr	r3, [pc, #260]	@ (80024c0 <_ZL12MX_TIM1_Initv+0x130>)
 80023bc:	4a41      	ldr	r2, [pc, #260]	@ (80024c4 <_ZL12MX_TIM1_Initv+0x134>)
 80023be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 80023c0:	4b3f      	ldr	r3, [pc, #252]	@ (80024c0 <_ZL12MX_TIM1_Initv+0x130>)
 80023c2:	2263      	movs	r2, #99	@ 0x63
 80023c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c6:	4b3e      	ldr	r3, [pc, #248]	@ (80024c0 <_ZL12MX_TIM1_Initv+0x130>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80023cc:	4b3c      	ldr	r3, [pc, #240]	@ (80024c0 <_ZL12MX_TIM1_Initv+0x130>)
 80023ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023d4:	4b3a      	ldr	r3, [pc, #232]	@ (80024c0 <_ZL12MX_TIM1_Initv+0x130>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023da:	4b39      	ldr	r3, [pc, #228]	@ (80024c0 <_ZL12MX_TIM1_Initv+0x130>)
 80023dc:	2200      	movs	r2, #0
 80023de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e0:	4b37      	ldr	r3, [pc, #220]	@ (80024c0 <_ZL12MX_TIM1_Initv+0x130>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023e6:	4836      	ldr	r0, [pc, #216]	@ (80024c0 <_ZL12MX_TIM1_Initv+0x130>)
 80023e8:	f002 fe3c 	bl	8005064 <HAL_TIM_Base_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	bf14      	ite	ne
 80023f2:	2301      	movne	r3, #1
 80023f4:	2300      	moveq	r3, #0
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <_ZL12MX_TIM1_Initv+0x70>
  {
    Error_Handler();
 80023fc:	f000 fae4 	bl	80029c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002400:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002404:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002406:	f107 0318 	add.w	r3, r7, #24
 800240a:	4619      	mov	r1, r3
 800240c:	482c      	ldr	r0, [pc, #176]	@ (80024c0 <_ZL12MX_TIM1_Initv+0x130>)
 800240e:	f003 ff83 	bl	8006318 <HAL_TIM_ConfigClockSource>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	bf14      	ite	ne
 8002418:	2301      	movne	r3, #1
 800241a:	2300      	moveq	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <_ZL12MX_TIM1_Initv+0x96>
  {
    Error_Handler();
 8002422:	f000 fad1 	bl	80029c8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8002426:	4826      	ldr	r0, [pc, #152]	@ (80024c0 <_ZL12MX_TIM1_Initv+0x130>)
 8002428:	f002 ffd8 	bl	80053dc <HAL_TIM_IC_Init>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	bf14      	ite	ne
 8002432:	2301      	movne	r3, #1
 8002434:	2300      	moveq	r3, #0
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <_ZL12MX_TIM1_Initv+0xb0>
  {
    Error_Handler();
 800243c:	f000 fac4 	bl	80029c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002440:	2300      	movs	r3, #0
 8002442:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002448:	f107 0310 	add.w	r3, r7, #16
 800244c:	4619      	mov	r1, r3
 800244e:	481c      	ldr	r0, [pc, #112]	@ (80024c0 <_ZL12MX_TIM1_Initv+0x130>)
 8002450:	f004 fc82 	bl	8006d58 <HAL_TIMEx_MasterConfigSynchronization>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	bf14      	ite	ne
 800245a:	2301      	movne	r3, #1
 800245c:	2300      	moveq	r3, #0
 800245e:	b2db      	uxtb	r3, r3
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <_ZL12MX_TIM1_Initv+0xd8>
  {
    Error_Handler();
 8002464:	f000 fab0 	bl	80029c8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002468:	230a      	movs	r3, #10
 800246a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800246c:	2301      	movs	r3, #1
 800246e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002470:	2300      	movs	r3, #0
 8002472:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002478:	463b      	mov	r3, r7
 800247a:	2200      	movs	r2, #0
 800247c:	4619      	mov	r1, r3
 800247e:	4810      	ldr	r0, [pc, #64]	@ (80024c0 <_ZL12MX_TIM1_Initv+0x130>)
 8002480:	f003 fdec 	bl	800605c <HAL_TIM_IC_ConfigChannel>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	bf14      	ite	ne
 800248a:	2301      	movne	r3, #1
 800248c:	2300      	moveq	r3, #0
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <_ZL12MX_TIM1_Initv+0x108>
  {
    Error_Handler();
 8002494:	f000 fa98 	bl	80029c8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002498:	463b      	mov	r3, r7
 800249a:	2204      	movs	r2, #4
 800249c:	4619      	mov	r1, r3
 800249e:	4808      	ldr	r0, [pc, #32]	@ (80024c0 <_ZL12MX_TIM1_Initv+0x130>)
 80024a0:	f003 fddc 	bl	800605c <HAL_TIM_IC_ConfigChannel>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	bf14      	ite	ne
 80024aa:	2301      	movne	r3, #1
 80024ac:	2300      	moveq	r3, #0
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <_ZL12MX_TIM1_Initv+0x128>
  {
    Error_Handler();
 80024b4:	f000 fa88 	bl	80029c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80024b8:	bf00      	nop
 80024ba:	3728      	adds	r7, #40	@ 0x28
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	20000504 	.word	0x20000504
 80024c4:	40010000 	.word	0x40010000

080024c8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08e      	sub	sp, #56	@ 0x38
 80024cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	605a      	str	r2, [r3, #4]
 80024d8:	609a      	str	r2, [r3, #8]
 80024da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024dc:	f107 0320 	add.w	r3, r7, #32
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024e6:	1d3b      	adds	r3, r7, #4
 80024e8:	2200      	movs	r2, #0
 80024ea:	601a      	str	r2, [r3, #0]
 80024ec:	605a      	str	r2, [r3, #4]
 80024ee:	609a      	str	r2, [r3, #8]
 80024f0:	60da      	str	r2, [r3, #12]
 80024f2:	611a      	str	r2, [r3, #16]
 80024f4:	615a      	str	r2, [r3, #20]
 80024f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024f8:	4b39      	ldr	r3, [pc, #228]	@ (80025e0 <_ZL12MX_TIM2_Initv+0x118>)
 80024fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80024fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002500:	4b37      	ldr	r3, [pc, #220]	@ (80025e0 <_ZL12MX_TIM2_Initv+0x118>)
 8002502:	2200      	movs	r2, #0
 8002504:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002506:	4b36      	ldr	r3, [pc, #216]	@ (80025e0 <_ZL12MX_TIM2_Initv+0x118>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 800250c:	4b34      	ldr	r3, [pc, #208]	@ (80025e0 <_ZL12MX_TIM2_Initv+0x118>)
 800250e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002512:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002514:	4b32      	ldr	r3, [pc, #200]	@ (80025e0 <_ZL12MX_TIM2_Initv+0x118>)
 8002516:	2200      	movs	r2, #0
 8002518:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800251a:	4b31      	ldr	r3, [pc, #196]	@ (80025e0 <_ZL12MX_TIM2_Initv+0x118>)
 800251c:	2200      	movs	r2, #0
 800251e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002520:	482f      	ldr	r0, [pc, #188]	@ (80025e0 <_ZL12MX_TIM2_Initv+0x118>)
 8002522:	f002 fd9f 	bl	8005064 <HAL_TIM_Base_Init>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	bf14      	ite	ne
 800252c:	2301      	movne	r3, #1
 800252e:	2300      	moveq	r3, #0
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 8002536:	f000 fa47 	bl	80029c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800253a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800253e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002540:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002544:	4619      	mov	r1, r3
 8002546:	4826      	ldr	r0, [pc, #152]	@ (80025e0 <_ZL12MX_TIM2_Initv+0x118>)
 8002548:	f003 fee6 	bl	8006318 <HAL_TIM_ConfigClockSource>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	bf14      	ite	ne
 8002552:	2301      	movne	r3, #1
 8002554:	2300      	moveq	r3, #0
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 800255c:	f000 fa34 	bl	80029c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002560:	481f      	ldr	r0, [pc, #124]	@ (80025e0 <_ZL12MX_TIM2_Initv+0x118>)
 8002562:	f002 fdce 	bl	8005102 <HAL_TIM_PWM_Init>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	bf14      	ite	ne
 800256c:	2301      	movne	r3, #1
 800256e:	2300      	moveq	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 8002576:	f000 fa27 	bl	80029c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800257a:	2300      	movs	r3, #0
 800257c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800257e:	2300      	movs	r3, #0
 8002580:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002582:	f107 0320 	add.w	r3, r7, #32
 8002586:	4619      	mov	r1, r3
 8002588:	4815      	ldr	r0, [pc, #84]	@ (80025e0 <_ZL12MX_TIM2_Initv+0x118>)
 800258a:	f004 fbe5 	bl	8006d58 <HAL_TIMEx_MasterConfigSynchronization>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	bf14      	ite	ne
 8002594:	2301      	movne	r3, #1
 8002596:	2300      	moveq	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 800259e:	f000 fa13 	bl	80029c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025a2:	2360      	movs	r3, #96	@ 0x60
 80025a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025b2:	1d3b      	adds	r3, r7, #4
 80025b4:	2200      	movs	r2, #0
 80025b6:	4619      	mov	r1, r3
 80025b8:	4809      	ldr	r0, [pc, #36]	@ (80025e0 <_ZL12MX_TIM2_Initv+0x118>)
 80025ba:	f003 fdeb 	bl	8006194 <HAL_TIM_PWM_ConfigChannel>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	bf14      	ite	ne
 80025c4:	2301      	movne	r3, #1
 80025c6:	2300      	moveq	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 80025ce:	f000 f9fb 	bl	80029c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80025d2:	4803      	ldr	r0, [pc, #12]	@ (80025e0 <_ZL12MX_TIM2_Initv+0x118>)
 80025d4:	f000 fb50 	bl	8002c78 <HAL_TIM_MspPostInit>

}
 80025d8:	bf00      	nop
 80025da:	3738      	adds	r7, #56	@ 0x38
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	2000054c 	.word	0x2000054c

080025e4 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08e      	sub	sp, #56	@ 0x38
 80025e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	605a      	str	r2, [r3, #4]
 80025f4:	609a      	str	r2, [r3, #8]
 80025f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025f8:	f107 0320 	add.w	r3, r7, #32
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002602:	1d3b      	adds	r3, r7, #4
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
 8002610:	615a      	str	r2, [r3, #20]
 8002612:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002614:	4b41      	ldr	r3, [pc, #260]	@ (800271c <_ZL12MX_TIM3_Initv+0x138>)
 8002616:	4a42      	ldr	r2, [pc, #264]	@ (8002720 <_ZL12MX_TIM3_Initv+0x13c>)
 8002618:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800261a:	4b40      	ldr	r3, [pc, #256]	@ (800271c <_ZL12MX_TIM3_Initv+0x138>)
 800261c:	2200      	movs	r2, #0
 800261e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002620:	4b3e      	ldr	r3, [pc, #248]	@ (800271c <_ZL12MX_TIM3_Initv+0x138>)
 8002622:	2200      	movs	r2, #0
 8002624:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 8002626:	4b3d      	ldr	r3, [pc, #244]	@ (800271c <_ZL12MX_TIM3_Initv+0x138>)
 8002628:	f241 3287 	movw	r2, #4999	@ 0x1387
 800262c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800262e:	4b3b      	ldr	r3, [pc, #236]	@ (800271c <_ZL12MX_TIM3_Initv+0x138>)
 8002630:	2200      	movs	r2, #0
 8002632:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002634:	4b39      	ldr	r3, [pc, #228]	@ (800271c <_ZL12MX_TIM3_Initv+0x138>)
 8002636:	2200      	movs	r2, #0
 8002638:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800263a:	4838      	ldr	r0, [pc, #224]	@ (800271c <_ZL12MX_TIM3_Initv+0x138>)
 800263c:	f002 fd12 	bl	8005064 <HAL_TIM_Base_Init>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	bf14      	ite	ne
 8002646:	2301      	movne	r3, #1
 8002648:	2300      	moveq	r3, #0
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 8002650:	f000 f9ba 	bl	80029c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002654:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002658:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800265a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800265e:	4619      	mov	r1, r3
 8002660:	482e      	ldr	r0, [pc, #184]	@ (800271c <_ZL12MX_TIM3_Initv+0x138>)
 8002662:	f003 fe59 	bl	8006318 <HAL_TIM_ConfigClockSource>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	bf14      	ite	ne
 800266c:	2301      	movne	r3, #1
 800266e:	2300      	moveq	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 8002676:	f000 f9a7 	bl	80029c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800267a:	4828      	ldr	r0, [pc, #160]	@ (800271c <_ZL12MX_TIM3_Initv+0x138>)
 800267c:	f002 fd41 	bl	8005102 <HAL_TIM_PWM_Init>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	bf14      	ite	ne
 8002686:	2301      	movne	r3, #1
 8002688:	2300      	moveq	r3, #0
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 8002690:	f000 f99a 	bl	80029c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002694:	2300      	movs	r3, #0
 8002696:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002698:	2300      	movs	r3, #0
 800269a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800269c:	f107 0320 	add.w	r3, r7, #32
 80026a0:	4619      	mov	r1, r3
 80026a2:	481e      	ldr	r0, [pc, #120]	@ (800271c <_ZL12MX_TIM3_Initv+0x138>)
 80026a4:	f004 fb58 	bl	8006d58 <HAL_TIMEx_MasterConfigSynchronization>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	bf14      	ite	ne
 80026ae:	2301      	movne	r3, #1
 80026b0:	2300      	moveq	r3, #0
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 80026b8:	f000 f986 	bl	80029c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026bc:	2360      	movs	r3, #96	@ 0x60
 80026be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026c4:	2300      	movs	r3, #0
 80026c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026cc:	1d3b      	adds	r3, r7, #4
 80026ce:	2200      	movs	r2, #0
 80026d0:	4619      	mov	r1, r3
 80026d2:	4812      	ldr	r0, [pc, #72]	@ (800271c <_ZL12MX_TIM3_Initv+0x138>)
 80026d4:	f003 fd5e 	bl	8006194 <HAL_TIM_PWM_ConfigChannel>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	bf14      	ite	ne
 80026de:	2301      	movne	r3, #1
 80026e0:	2300      	moveq	r3, #0
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 80026e8:	f000 f96e 	bl	80029c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026ec:	1d3b      	adds	r3, r7, #4
 80026ee:	2204      	movs	r2, #4
 80026f0:	4619      	mov	r1, r3
 80026f2:	480a      	ldr	r0, [pc, #40]	@ (800271c <_ZL12MX_TIM3_Initv+0x138>)
 80026f4:	f003 fd4e 	bl	8006194 <HAL_TIM_PWM_ConfigChannel>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	bf14      	ite	ne
 80026fe:	2301      	movne	r3, #1
 8002700:	2300      	moveq	r3, #0
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <_ZL12MX_TIM3_Initv+0x128>
  {
    Error_Handler();
 8002708:	f000 f95e 	bl	80029c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800270c:	4803      	ldr	r0, [pc, #12]	@ (800271c <_ZL12MX_TIM3_Initv+0x138>)
 800270e:	f000 fab3 	bl	8002c78 <HAL_TIM_MspPostInit>

}
 8002712:	bf00      	nop
 8002714:	3738      	adds	r7, #56	@ 0x38
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	20000594 	.word	0x20000594
 8002720:	40000400 	.word	0x40000400

08002724 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08c      	sub	sp, #48	@ 0x30
 8002728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800272a:	f107 030c 	add.w	r3, r7, #12
 800272e:	2224      	movs	r2, #36	@ 0x24
 8002730:	2100      	movs	r1, #0
 8002732:	4618      	mov	r0, r3
 8002734:	f00a fde5 	bl	800d302 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002738:	1d3b      	adds	r3, r7, #4
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002740:	4b25      	ldr	r3, [pc, #148]	@ (80027d8 <_ZL12MX_TIM5_Initv+0xb4>)
 8002742:	4a26      	ldr	r2, [pc, #152]	@ (80027dc <_ZL12MX_TIM5_Initv+0xb8>)
 8002744:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002746:	4b24      	ldr	r3, [pc, #144]	@ (80027d8 <_ZL12MX_TIM5_Initv+0xb4>)
 8002748:	2200      	movs	r2, #0
 800274a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800274c:	4b22      	ldr	r3, [pc, #136]	@ (80027d8 <_ZL12MX_TIM5_Initv+0xb4>)
 800274e:	2200      	movs	r2, #0
 8002750:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002752:	4b21      	ldr	r3, [pc, #132]	@ (80027d8 <_ZL12MX_TIM5_Initv+0xb4>)
 8002754:	f04f 32ff 	mov.w	r2, #4294967295
 8002758:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800275a:	4b1f      	ldr	r3, [pc, #124]	@ (80027d8 <_ZL12MX_TIM5_Initv+0xb4>)
 800275c:	2200      	movs	r2, #0
 800275e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002760:	4b1d      	ldr	r3, [pc, #116]	@ (80027d8 <_ZL12MX_TIM5_Initv+0xb4>)
 8002762:	2200      	movs	r2, #0
 8002764:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002766:	2303      	movs	r3, #3
 8002768:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800276a:	2300      	movs	r3, #0
 800276c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800276e:	2301      	movs	r3, #1
 8002770:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002772:	2300      	movs	r3, #0
 8002774:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800277a:	2300      	movs	r3, #0
 800277c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800277e:	2301      	movs	r3, #1
 8002780:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002782:	2300      	movs	r3, #0
 8002784:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800278a:	f107 030c 	add.w	r3, r7, #12
 800278e:	4619      	mov	r1, r3
 8002790:	4811      	ldr	r0, [pc, #68]	@ (80027d8 <_ZL12MX_TIM5_Initv+0xb4>)
 8002792:	f003 f845 	bl	8005820 <HAL_TIM_Encoder_Init>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	bf14      	ite	ne
 800279c:	2301      	movne	r3, #1
 800279e:	2300      	moveq	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <_ZL12MX_TIM5_Initv+0x86>
  {
    Error_Handler();
 80027a6:	f000 f90f 	bl	80029c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027aa:	2300      	movs	r3, #0
 80027ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027ae:	2300      	movs	r3, #0
 80027b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80027b2:	1d3b      	adds	r3, r7, #4
 80027b4:	4619      	mov	r1, r3
 80027b6:	4808      	ldr	r0, [pc, #32]	@ (80027d8 <_ZL12MX_TIM5_Initv+0xb4>)
 80027b8:	f004 face 	bl	8006d58 <HAL_TIMEx_MasterConfigSynchronization>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	bf14      	ite	ne
 80027c2:	2301      	movne	r3, #1
 80027c4:	2300      	moveq	r3, #0
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <_ZL12MX_TIM5_Initv+0xac>
  {
    Error_Handler();
 80027cc:	f000 f8fc 	bl	80029c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80027d0:	bf00      	nop
 80027d2:	3730      	adds	r7, #48	@ 0x30
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	200005dc 	.word	0x200005dc
 80027dc:	40000c00 	.word	0x40000c00

080027e0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80027e4:	4b13      	ldr	r3, [pc, #76]	@ (8002834 <_ZL19MX_USART2_UART_Initv+0x54>)
 80027e6:	4a14      	ldr	r2, [pc, #80]	@ (8002838 <_ZL19MX_USART2_UART_Initv+0x58>)
 80027e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80027ea:	4b12      	ldr	r3, [pc, #72]	@ (8002834 <_ZL19MX_USART2_UART_Initv+0x54>)
 80027ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80027f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80027f2:	4b10      	ldr	r3, [pc, #64]	@ (8002834 <_ZL19MX_USART2_UART_Initv+0x54>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80027f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002834 <_ZL19MX_USART2_UART_Initv+0x54>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80027fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002834 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002800:	2200      	movs	r2, #0
 8002802:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002804:	4b0b      	ldr	r3, [pc, #44]	@ (8002834 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002806:	220c      	movs	r2, #12
 8002808:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800280a:	4b0a      	ldr	r3, [pc, #40]	@ (8002834 <_ZL19MX_USART2_UART_Initv+0x54>)
 800280c:	2200      	movs	r2, #0
 800280e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002810:	4b08      	ldr	r3, [pc, #32]	@ (8002834 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002812:	2200      	movs	r2, #0
 8002814:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002816:	4807      	ldr	r0, [pc, #28]	@ (8002834 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002818:	f004 fb20 	bl	8006e5c <HAL_UART_Init>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	bf14      	ite	ne
 8002822:	2301      	movne	r3, #1
 8002824:	2300      	moveq	r3, #0
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 800282c:	f000 f8cc 	bl	80029c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002830:	bf00      	nop
 8002832:	bd80      	pop	{r7, pc}
 8002834:	20000624 	.word	0x20000624
 8002838:	40004400 	.word	0x40004400

0800283c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002842:	f107 030c 	add.w	r3, r7, #12
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	605a      	str	r2, [r3, #4]
 800284c:	609a      	str	r2, [r3, #8]
 800284e:	60da      	str	r2, [r3, #12]
 8002850:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	4b24      	ldr	r3, [pc, #144]	@ (80028e8 <_ZL12MX_GPIO_Initv+0xac>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285a:	4a23      	ldr	r2, [pc, #140]	@ (80028e8 <_ZL12MX_GPIO_Initv+0xac>)
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	6313      	str	r3, [r2, #48]	@ 0x30
 8002862:	4b21      	ldr	r3, [pc, #132]	@ (80028e8 <_ZL12MX_GPIO_Initv+0xac>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	60bb      	str	r3, [r7, #8]
 800286c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	607b      	str	r3, [r7, #4]
 8002872:	4b1d      	ldr	r3, [pc, #116]	@ (80028e8 <_ZL12MX_GPIO_Initv+0xac>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002876:	4a1c      	ldr	r2, [pc, #112]	@ (80028e8 <_ZL12MX_GPIO_Initv+0xac>)
 8002878:	f043 0302 	orr.w	r3, r3, #2
 800287c:	6313      	str	r3, [r2, #48]	@ 0x30
 800287e:	4b1a      	ldr	r3, [pc, #104]	@ (80028e8 <_ZL12MX_GPIO_Initv+0xac>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	607b      	str	r3, [r7, #4]
 8002888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800288a:	2200      	movs	r2, #0
 800288c:	f44f 4154 	mov.w	r1, #54272	@ 0xd400
 8002890:	4816      	ldr	r0, [pc, #88]	@ (80028ec <_ZL12MX_GPIO_Initv+0xb0>)
 8002892:	f000 ff49 	bl	8003728 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB10 PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8002896:	f44f 4354 	mov.w	r3, #54272	@ 0xd400
 800289a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800289c:	2301      	movs	r3, #1
 800289e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a4:	2300      	movs	r3, #0
 80028a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a8:	f107 030c 	add.w	r3, r7, #12
 80028ac:	4619      	mov	r1, r3
 80028ae:	480f      	ldr	r0, [pc, #60]	@ (80028ec <_ZL12MX_GPIO_Initv+0xb0>)
 80028b0:	f000 fd9e 	bl	80033f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80028b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028ba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80028be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c4:	f107 030c 	add.w	r3, r7, #12
 80028c8:	4619      	mov	r1, r3
 80028ca:	4808      	ldr	r0, [pc, #32]	@ (80028ec <_ZL12MX_GPIO_Initv+0xb0>)
 80028cc:	f000 fd90 	bl	80033f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80028d0:	2200      	movs	r2, #0
 80028d2:	2100      	movs	r1, #0
 80028d4:	2028      	movs	r0, #40	@ 0x28
 80028d6:	f000 fd54 	bl	8003382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80028da:	2028      	movs	r0, #40	@ 0x28
 80028dc:	f000 fd6d 	bl	80033ba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028e0:	bf00      	nop
 80028e2:	3720      	adds	r7, #32
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40023800 	.word	0x40023800
 80028ec:	40020400 	.word	0x40020400

080028f0 <_ZL12VL53L0X_Initv>:
    HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), HAL_MAX_DELAY);
    HAL_Delay(1000); // Unnecessary
}

// VL53L0X time-of-flight sensor initialization
static void VL53L0X_Init(void) {
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
	uint32_t refSpadCount;
	uint8_t isApertureSpads;
	uint8_t VhvSettings;
	uint8_t PhaseCal;

	Dev->I2cHandle = &hi2c1;
 80028f6:	4b32      	ldr	r3, [pc, #200]	@ (80029c0 <_ZL12VL53L0X_Initv+0xd0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a32      	ldr	r2, [pc, #200]	@ (80029c4 <_ZL12VL53L0X_Initv+0xd4>)
 80028fc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
	Dev->I2cDevAddr = 0x29 << 1;
 8002900:	4b2f      	ldr	r3, [pc, #188]	@ (80029c0 <_ZL12VL53L0X_Initv+0xd0>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2252      	movs	r2, #82	@ 0x52
 8002906:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160

	VL53L0X_WaitDeviceBooted(Dev);
 800290a:	4b2d      	ldr	r3, [pc, #180]	@ (80029c0 <_ZL12VL53L0X_Initv+0xd0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f005 f9a8 	bl	8007c64 <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit(Dev);
 8002914:	4b2a      	ldr	r3, [pc, #168]	@ (80029c0 <_ZL12VL53L0X_Initv+0xd0>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f004 febf 	bl	800769c <VL53L0X_DataInit>
	VL53L0X_StaticInit(Dev);
 800291e:	4b28      	ldr	r3, [pc, #160]	@ (80029c0 <_ZL12VL53L0X_Initv+0xd0>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f005 f81e 	bl	8007964 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8002928:	4b25      	ldr	r3, [pc, #148]	@ (80029c0 <_ZL12VL53L0X_Initv+0xd0>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	1c7a      	adds	r2, r7, #1
 800292e:	1cb9      	adds	r1, r7, #2
 8002930:	4618      	mov	r0, r3
 8002932:	f005 feb5 	bl	80086a0 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8002936:	4b22      	ldr	r3, [pc, #136]	@ (80029c0 <_ZL12VL53L0X_Initv+0xd0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	1cfa      	adds	r2, r7, #3
 800293c:	1d39      	adds	r1, r7, #4
 800293e:	4618      	mov	r0, r3
 8002940:	f006 fb30 	bl	8008fa4 <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8002944:	4b1e      	ldr	r3, [pc, #120]	@ (80029c0 <_ZL12VL53L0X_Initv+0xd0>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2100      	movs	r1, #0
 800294a:	4618      	mov	r0, r3
 800294c:	f005 fa28 	bl	8007da0 <VL53L0X_SetDeviceMode>

	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8002950:	4b1b      	ldr	r3, [pc, #108]	@ (80029c0 <_ZL12VL53L0X_Initv+0xd0>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2201      	movs	r2, #1
 8002956:	2100      	movs	r1, #0
 8002958:	4618      	mov	r0, r3
 800295a:	f005 fc9b 	bl	8008294 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 800295e:	4b18      	ldr	r3, [pc, #96]	@ (80029c0 <_ZL12VL53L0X_Initv+0xd0>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2201      	movs	r2, #1
 8002964:	2101      	movs	r1, #1
 8002966:	4618      	mov	r0, r3
 8002968:	f005 fc94 	bl	8008294 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t) (0.1*65536));
 800296c:	4b14      	ldr	r3, [pc, #80]	@ (80029c0 <_ZL12VL53L0X_Initv+0xd0>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f641 1299 	movw	r2, #6553	@ 0x1999
 8002974:	2101      	movs	r1, #1
 8002976:	4618      	mov	r0, r3
 8002978:	f005 fd3c 	bl	80083f4 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t) (60*65536));
 800297c:	4b10      	ldr	r3, [pc, #64]	@ (80029c0 <_ZL12VL53L0X_Initv+0xd0>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8002984:	2100      	movs	r1, #0
 8002986:	4618      	mov	r0, r3
 8002988:	f005 fd34 	bl	80083f4 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 800298c:	4b0c      	ldr	r3, [pc, #48]	@ (80029c0 <_ZL12VL53L0X_Initv+0xd0>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f248 01e8 	movw	r1, #33000	@ 0x80e8
 8002994:	4618      	mov	r0, r3
 8002996:	f005 fa61 	bl	8007e5c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 800299a:	4b09      	ldr	r3, [pc, #36]	@ (80029c0 <_ZL12VL53L0X_Initv+0xd0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2212      	movs	r2, #18
 80029a0:	2100      	movs	r1, #0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f005 fa80 	bl	8007ea8 <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80029a8:	4b05      	ldr	r3, [pc, #20]	@ (80029c0 <_ZL12VL53L0X_Initv+0xd0>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	220e      	movs	r2, #14
 80029ae:	2101      	movs	r1, #1
 80029b0:	4618      	mov	r0, r3
 80029b2:	f005 fa79 	bl	8007ea8 <VL53L0X_SetVcselPulsePeriod>
}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000000 	.word	0x20000000
 80029c4:	200004b0 	.word	0x200004b0

080029c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029cc:	b672      	cpsid	i
}
 80029ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029d0:	bf00      	nop
 80029d2:	e7fd      	b.n	80029d0 <Error_Handler+0x8>

080029d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	607b      	str	r3, [r7, #4]
 80029de:	4b10      	ldr	r3, [pc, #64]	@ (8002a20 <HAL_MspInit+0x4c>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002a20 <HAL_MspInit+0x4c>)
 80029e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80029ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002a20 <HAL_MspInit+0x4c>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029f2:	607b      	str	r3, [r7, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	603b      	str	r3, [r7, #0]
 80029fa:	4b09      	ldr	r3, [pc, #36]	@ (8002a20 <HAL_MspInit+0x4c>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fe:	4a08      	ldr	r2, [pc, #32]	@ (8002a20 <HAL_MspInit+0x4c>)
 8002a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a06:	4b06      	ldr	r3, [pc, #24]	@ (8002a20 <HAL_MspInit+0x4c>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	40023800 	.word	0x40023800

08002a24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08a      	sub	sp, #40	@ 0x28
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a2c:	f107 0314 	add.w	r3, r7, #20
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	605a      	str	r2, [r3, #4]
 8002a36:	609a      	str	r2, [r3, #8]
 8002a38:	60da      	str	r2, [r3, #12]
 8002a3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a19      	ldr	r2, [pc, #100]	@ (8002aa8 <HAL_I2C_MspInit+0x84>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d12c      	bne.n	8002aa0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	4b18      	ldr	r3, [pc, #96]	@ (8002aac <HAL_I2C_MspInit+0x88>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4e:	4a17      	ldr	r2, [pc, #92]	@ (8002aac <HAL_I2C_MspInit+0x88>)
 8002a50:	f043 0302 	orr.w	r3, r3, #2
 8002a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a56:	4b15      	ldr	r3, [pc, #84]	@ (8002aac <HAL_I2C_MspInit+0x88>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	613b      	str	r3, [r7, #16]
 8002a60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a62:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a68:	2312      	movs	r3, #18
 8002a6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a70:	2303      	movs	r3, #3
 8002a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a74:	2304      	movs	r3, #4
 8002a76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a78:	f107 0314 	add.w	r3, r7, #20
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	480c      	ldr	r0, [pc, #48]	@ (8002ab0 <HAL_I2C_MspInit+0x8c>)
 8002a80:	f000 fcb6 	bl	80033f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a84:	2300      	movs	r3, #0
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	4b08      	ldr	r3, [pc, #32]	@ (8002aac <HAL_I2C_MspInit+0x88>)
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8c:	4a07      	ldr	r2, [pc, #28]	@ (8002aac <HAL_I2C_MspInit+0x88>)
 8002a8e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a92:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a94:	4b05      	ldr	r3, [pc, #20]	@ (8002aac <HAL_I2C_MspInit+0x88>)
 8002a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002aa0:	bf00      	nop
 8002aa2:	3728      	adds	r7, #40	@ 0x28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40005400 	.word	0x40005400
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	40020400 	.word	0x40020400

08002ab4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08c      	sub	sp, #48	@ 0x30
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002abc:	f107 031c 	add.w	r3, r7, #28
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	60da      	str	r2, [r3, #12]
 8002aca:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a3d      	ldr	r2, [pc, #244]	@ (8002bc8 <HAL_TIM_Base_MspInit+0x114>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d14d      	bne.n	8002b72 <HAL_TIM_Base_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61bb      	str	r3, [r7, #24]
 8002ada:	4b3c      	ldr	r3, [pc, #240]	@ (8002bcc <HAL_TIM_Base_MspInit+0x118>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ade:	4a3b      	ldr	r2, [pc, #236]	@ (8002bcc <HAL_TIM_Base_MspInit+0x118>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ae6:	4b39      	ldr	r3, [pc, #228]	@ (8002bcc <HAL_TIM_Base_MspInit+0x118>)
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	61bb      	str	r3, [r7, #24]
 8002af0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	4b35      	ldr	r3, [pc, #212]	@ (8002bcc <HAL_TIM_Base_MspInit+0x118>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afa:	4a34      	ldr	r2, [pc, #208]	@ (8002bcc <HAL_TIM_Base_MspInit+0x118>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b02:	4b32      	ldr	r3, [pc, #200]	@ (8002bcc <HAL_TIM_Base_MspInit+0x118>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b0e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b14:	2302      	movs	r3, #2
 8002b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b20:	2301      	movs	r3, #1
 8002b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b24:	f107 031c 	add.w	r3, r7, #28
 8002b28:	4619      	mov	r1, r3
 8002b2a:	4829      	ldr	r0, [pc, #164]	@ (8002bd0 <HAL_TIM_Base_MspInit+0x11c>)
 8002b2c:	f000 fc60 	bl	80033f0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002b30:	2200      	movs	r2, #0
 8002b32:	2100      	movs	r1, #0
 8002b34:	2018      	movs	r0, #24
 8002b36:	f000 fc24 	bl	8003382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002b3a:	2018      	movs	r0, #24
 8002b3c:	f000 fc3d 	bl	80033ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002b40:	2200      	movs	r2, #0
 8002b42:	2100      	movs	r1, #0
 8002b44:	2019      	movs	r0, #25
 8002b46:	f000 fc1c 	bl	8003382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002b4a:	2019      	movs	r0, #25
 8002b4c:	f000 fc35 	bl	80033ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002b50:	2200      	movs	r2, #0
 8002b52:	2100      	movs	r1, #0
 8002b54:	201a      	movs	r0, #26
 8002b56:	f000 fc14 	bl	8003382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002b5a:	201a      	movs	r0, #26
 8002b5c:	f000 fc2d 	bl	80033ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002b60:	2200      	movs	r2, #0
 8002b62:	2100      	movs	r1, #0
 8002b64:	201b      	movs	r0, #27
 8002b66:	f000 fc0c 	bl	8003382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002b6a:	201b      	movs	r0, #27
 8002b6c:	f000 fc25 	bl	80033ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002b70:	e026      	b.n	8002bc0 <HAL_TIM_Base_MspInit+0x10c>
  else if(htim_base->Instance==TIM2)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b7a:	d10e      	bne.n	8002b9a <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	613b      	str	r3, [r7, #16]
 8002b80:	4b12      	ldr	r3, [pc, #72]	@ (8002bcc <HAL_TIM_Base_MspInit+0x118>)
 8002b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b84:	4a11      	ldr	r2, [pc, #68]	@ (8002bcc <HAL_TIM_Base_MspInit+0x118>)
 8002b86:	f043 0301 	orr.w	r3, r3, #1
 8002b8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002bcc <HAL_TIM_Base_MspInit+0x118>)
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	613b      	str	r3, [r7, #16]
 8002b96:	693b      	ldr	r3, [r7, #16]
}
 8002b98:	e012      	b.n	8002bc0 <HAL_TIM_Base_MspInit+0x10c>
  else if(htim_base->Instance==TIM3)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a0d      	ldr	r2, [pc, #52]	@ (8002bd4 <HAL_TIM_Base_MspInit+0x120>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d10d      	bne.n	8002bc0 <HAL_TIM_Base_MspInit+0x10c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	4b08      	ldr	r3, [pc, #32]	@ (8002bcc <HAL_TIM_Base_MspInit+0x118>)
 8002baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bac:	4a07      	ldr	r2, [pc, #28]	@ (8002bcc <HAL_TIM_Base_MspInit+0x118>)
 8002bae:	f043 0302 	orr.w	r3, r3, #2
 8002bb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bb4:	4b05      	ldr	r3, [pc, #20]	@ (8002bcc <HAL_TIM_Base_MspInit+0x118>)
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
}
 8002bc0:	bf00      	nop
 8002bc2:	3730      	adds	r7, #48	@ 0x30
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40010000 	.word	0x40010000
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	40020000 	.word	0x40020000
 8002bd4:	40000400 	.word	0x40000400

08002bd8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08a      	sub	sp, #40	@ 0x28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be0:	f107 0314 	add.w	r3, r7, #20
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	60da      	str	r2, [r3, #12]
 8002bee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a1d      	ldr	r2, [pc, #116]	@ (8002c6c <HAL_TIM_Encoder_MspInit+0x94>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d133      	bne.n	8002c62 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	613b      	str	r3, [r7, #16]
 8002bfe:	4b1c      	ldr	r3, [pc, #112]	@ (8002c70 <HAL_TIM_Encoder_MspInit+0x98>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c02:	4a1b      	ldr	r2, [pc, #108]	@ (8002c70 <HAL_TIM_Encoder_MspInit+0x98>)
 8002c04:	f043 0308 	orr.w	r3, r3, #8
 8002c08:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c0a:	4b19      	ldr	r3, [pc, #100]	@ (8002c70 <HAL_TIM_Encoder_MspInit+0x98>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	613b      	str	r3, [r7, #16]
 8002c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	4b15      	ldr	r3, [pc, #84]	@ (8002c70 <HAL_TIM_Encoder_MspInit+0x98>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1e:	4a14      	ldr	r2, [pc, #80]	@ (8002c70 <HAL_TIM_Encoder_MspInit+0x98>)
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c26:	4b12      	ldr	r3, [pc, #72]	@ (8002c70 <HAL_TIM_Encoder_MspInit+0x98>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c32:	2303      	movs	r3, #3
 8002c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c36:	2302      	movs	r3, #2
 8002c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002c42:	2302      	movs	r3, #2
 8002c44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c46:	f107 0314 	add.w	r3, r7, #20
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4809      	ldr	r0, [pc, #36]	@ (8002c74 <HAL_TIM_Encoder_MspInit+0x9c>)
 8002c4e:	f000 fbcf 	bl	80033f0 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002c52:	2200      	movs	r2, #0
 8002c54:	2100      	movs	r1, #0
 8002c56:	2032      	movs	r0, #50	@ 0x32
 8002c58:	f000 fb93 	bl	8003382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002c5c:	2032      	movs	r0, #50	@ 0x32
 8002c5e:	f000 fbac 	bl	80033ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002c62:	bf00      	nop
 8002c64:	3728      	adds	r7, #40	@ 0x28
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40000c00 	.word	0x40000c00
 8002c70:	40023800 	.word	0x40023800
 8002c74:	40020000 	.word	0x40020000

08002c78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b08a      	sub	sp, #40	@ 0x28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c80:	f107 0314 	add.w	r3, r7, #20
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c98:	d11f      	bne.n	8002cda <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	4b22      	ldr	r3, [pc, #136]	@ (8002d28 <HAL_TIM_MspPostInit+0xb0>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca2:	4a21      	ldr	r2, [pc, #132]	@ (8002d28 <HAL_TIM_MspPostInit+0xb0>)
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002caa:	4b1f      	ldr	r3, [pc, #124]	@ (8002d28 <HAL_TIM_MspPostInit+0xb0>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cae:	f003 0301 	and.w	r3, r3, #1
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002cb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ccc:	f107 0314 	add.w	r3, r7, #20
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4816      	ldr	r0, [pc, #88]	@ (8002d2c <HAL_TIM_MspPostInit+0xb4>)
 8002cd4:	f000 fb8c 	bl	80033f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002cd8:	e022      	b.n	8002d20 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a14      	ldr	r2, [pc, #80]	@ (8002d30 <HAL_TIM_MspPostInit+0xb8>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d11d      	bne.n	8002d20 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8002d28 <HAL_TIM_MspPostInit+0xb0>)
 8002cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cec:	4a0e      	ldr	r2, [pc, #56]	@ (8002d28 <HAL_TIM_MspPostInit+0xb0>)
 8002cee:	f043 0302 	orr.w	r3, r3, #2
 8002cf2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d28 <HAL_TIM_MspPostInit+0xb0>)
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002d00:	2330      	movs	r3, #48	@ 0x30
 8002d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d04:	2302      	movs	r3, #2
 8002d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d10:	2302      	movs	r3, #2
 8002d12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d14:	f107 0314 	add.w	r3, r7, #20
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4806      	ldr	r0, [pc, #24]	@ (8002d34 <HAL_TIM_MspPostInit+0xbc>)
 8002d1c:	f000 fb68 	bl	80033f0 <HAL_GPIO_Init>
}
 8002d20:	bf00      	nop
 8002d22:	3728      	adds	r7, #40	@ 0x28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	40020000 	.word	0x40020000
 8002d30:	40000400 	.word	0x40000400
 8002d34:	40020400 	.word	0x40020400

08002d38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08a      	sub	sp, #40	@ 0x28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d40:	f107 0314 	add.w	r3, r7, #20
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	609a      	str	r2, [r3, #8]
 8002d4c:	60da      	str	r2, [r3, #12]
 8002d4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a19      	ldr	r2, [pc, #100]	@ (8002dbc <HAL_UART_MspInit+0x84>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d12b      	bne.n	8002db2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	4b18      	ldr	r3, [pc, #96]	@ (8002dc0 <HAL_UART_MspInit+0x88>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d62:	4a17      	ldr	r2, [pc, #92]	@ (8002dc0 <HAL_UART_MspInit+0x88>)
 8002d64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d68:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d6a:	4b15      	ldr	r3, [pc, #84]	@ (8002dc0 <HAL_UART_MspInit+0x88>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d72:	613b      	str	r3, [r7, #16]
 8002d74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	4b11      	ldr	r3, [pc, #68]	@ (8002dc0 <HAL_UART_MspInit+0x88>)
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7e:	4a10      	ldr	r2, [pc, #64]	@ (8002dc0 <HAL_UART_MspInit+0x88>)
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d86:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc0 <HAL_UART_MspInit+0x88>)
 8002d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d92:	230c      	movs	r3, #12
 8002d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d96:	2302      	movs	r3, #2
 8002d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002da2:	2307      	movs	r3, #7
 8002da4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da6:	f107 0314 	add.w	r3, r7, #20
 8002daa:	4619      	mov	r1, r3
 8002dac:	4805      	ldr	r0, [pc, #20]	@ (8002dc4 <HAL_UART_MspInit+0x8c>)
 8002dae:	f000 fb1f 	bl	80033f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002db2:	bf00      	nop
 8002db4:	3728      	adds	r7, #40	@ 0x28
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40004400 	.word	0x40004400
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	40020000 	.word	0x40020000

08002dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002dcc:	bf00      	nop
 8002dce:	e7fd      	b.n	8002dcc <NMI_Handler+0x4>

08002dd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dd4:	bf00      	nop
 8002dd6:	e7fd      	b.n	8002dd4 <HardFault_Handler+0x4>

08002dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ddc:	bf00      	nop
 8002dde:	e7fd      	b.n	8002ddc <MemManage_Handler+0x4>

08002de0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002de4:	bf00      	nop
 8002de6:	e7fd      	b.n	8002de4 <BusFault_Handler+0x4>

08002de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dec:	bf00      	nop
 8002dee:	e7fd      	b.n	8002dec <UsageFault_Handler+0x4>

08002df0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002df4:	bf00      	nop
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dfe:	b480      	push	{r7}
 8002e00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e02:	bf00      	nop
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e10:	bf00      	nop
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e1e:	f000 f991 	bl	8003144 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e2c:	4802      	ldr	r0, [pc, #8]	@ (8002e38 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002e2e:	f003 f825 	bl	8005e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000504 	.word	0x20000504

08002e3c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e40:	4802      	ldr	r0, [pc, #8]	@ (8002e4c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002e42:	f003 f81b 	bl	8005e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	20000504 	.word	0x20000504

08002e50 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e54:	4802      	ldr	r0, [pc, #8]	@ (8002e60 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002e56:	f003 f811 	bl	8005e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	20000504 	.word	0x20000504

08002e64 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e68:	4802      	ldr	r0, [pc, #8]	@ (8002e74 <TIM1_CC_IRQHandler+0x10>)
 8002e6a:	f003 f807 	bl	8005e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	20000504 	.word	0x20000504

08002e78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002e7c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002e80:	f000 fc86 	bl	8003790 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e84:	bf00      	nop
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002e8c:	4802      	ldr	r0, [pc, #8]	@ (8002e98 <TIM5_IRQHandler+0x10>)
 8002e8e:	f002 fff5 	bl	8005e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002e92:	bf00      	nop
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	200005dc 	.word	0x200005dc

08002e9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  return 1;
 8002ea0:	2301      	movs	r3, #1
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <_kill>:

int _kill(int pid, int sig)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002eb6:	f00a facb 	bl	800d450 <__errno>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2216      	movs	r2, #22
 8002ebe:	601a      	str	r2, [r3, #0]
  return -1;
 8002ec0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <_exit>:

void _exit (int status)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7ff ffe7 	bl	8002eac <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ede:	bf00      	nop
 8002ee0:	e7fd      	b.n	8002ede <_exit+0x12>

08002ee2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b086      	sub	sp, #24
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	60b9      	str	r1, [r7, #8]
 8002eec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]
 8002ef2:	e00a      	b.n	8002f0a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ef4:	f3af 8000 	nop.w
 8002ef8:	4601      	mov	r1, r0
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	1c5a      	adds	r2, r3, #1
 8002efe:	60ba      	str	r2, [r7, #8]
 8002f00:	b2ca      	uxtb	r2, r1
 8002f02:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	3301      	adds	r3, #1
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	dbf0      	blt.n	8002ef4 <_read+0x12>
  }

  return len;
 8002f12:	687b      	ldr	r3, [r7, #4]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	e009      	b.n	8002f42 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	60ba      	str	r2, [r7, #8]
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	dbf1      	blt.n	8002f2e <_write+0x12>
  }
  return len;
 8002f4a:	687b      	ldr	r3, [r7, #4]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <_close>:

int _close(int file)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f7c:	605a      	str	r2, [r3, #4]
  return 0;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <_isatty>:

int _isatty(int file)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f94:	2301      	movs	r3, #1
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b085      	sub	sp, #20
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	60f8      	str	r0, [r7, #12]
 8002faa:	60b9      	str	r1, [r7, #8]
 8002fac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b086      	sub	sp, #24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fc4:	4a14      	ldr	r2, [pc, #80]	@ (8003018 <_sbrk+0x5c>)
 8002fc6:	4b15      	ldr	r3, [pc, #84]	@ (800301c <_sbrk+0x60>)
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fd0:	4b13      	ldr	r3, [pc, #76]	@ (8003020 <_sbrk+0x64>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d102      	bne.n	8002fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fd8:	4b11      	ldr	r3, [pc, #68]	@ (8003020 <_sbrk+0x64>)
 8002fda:	4a12      	ldr	r2, [pc, #72]	@ (8003024 <_sbrk+0x68>)
 8002fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fde:	4b10      	ldr	r3, [pc, #64]	@ (8003020 <_sbrk+0x64>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d207      	bcs.n	8002ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fec:	f00a fa30 	bl	800d450 <__errno>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	220c      	movs	r2, #12
 8002ff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffa:	e009      	b.n	8003010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ffc:	4b08      	ldr	r3, [pc, #32]	@ (8003020 <_sbrk+0x64>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003002:	4b07      	ldr	r3, [pc, #28]	@ (8003020 <_sbrk+0x64>)
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4413      	add	r3, r2
 800300a:	4a05      	ldr	r2, [pc, #20]	@ (8003020 <_sbrk+0x64>)
 800300c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800300e:	68fb      	ldr	r3, [r7, #12]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	20020000 	.word	0x20020000
 800301c:	00000400 	.word	0x00000400
 8003020:	200008a0 	.word	0x200008a0
 8003024:	20000a38 	.word	0x20000a38

08003028 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800302c:	4b06      	ldr	r3, [pc, #24]	@ (8003048 <SystemInit+0x20>)
 800302e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003032:	4a05      	ldr	r2, [pc, #20]	@ (8003048 <SystemInit+0x20>)
 8003034:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003038:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800303c:	bf00      	nop
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800304c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003084 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003050:	f7ff ffea 	bl	8003028 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003054:	480c      	ldr	r0, [pc, #48]	@ (8003088 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003056:	490d      	ldr	r1, [pc, #52]	@ (800308c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003058:	4a0d      	ldr	r2, [pc, #52]	@ (8003090 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800305a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800305c:	e002      	b.n	8003064 <LoopCopyDataInit>

0800305e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800305e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003062:	3304      	adds	r3, #4

08003064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003068:	d3f9      	bcc.n	800305e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800306a:	4a0a      	ldr	r2, [pc, #40]	@ (8003094 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800306c:	4c0a      	ldr	r4, [pc, #40]	@ (8003098 <LoopFillZerobss+0x22>)
  movs r3, #0
 800306e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003070:	e001      	b.n	8003076 <LoopFillZerobss>

08003072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003074:	3204      	adds	r2, #4

08003076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003078:	d3fb      	bcc.n	8003072 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800307a:	f00a f9ef 	bl	800d45c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800307e:	f7fe fe23 	bl	8001cc8 <main>
  bx  lr    
 8003082:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003084:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003088:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800308c:	20000494 	.word	0x20000494
  ldr r2, =_sidata
 8003090:	0800f7c0 	.word	0x0800f7c0
  ldr r2, =_sbss
 8003094:	20000494 	.word	0x20000494
  ldr r4, =_ebss
 8003098:	20000a38 	.word	0x20000a38

0800309c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800309c:	e7fe      	b.n	800309c <ADC_IRQHandler>
	...

080030a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030a4:	4b0e      	ldr	r3, [pc, #56]	@ (80030e0 <HAL_Init+0x40>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a0d      	ldr	r2, [pc, #52]	@ (80030e0 <HAL_Init+0x40>)
 80030aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030b0:	4b0b      	ldr	r3, [pc, #44]	@ (80030e0 <HAL_Init+0x40>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a0a      	ldr	r2, [pc, #40]	@ (80030e0 <HAL_Init+0x40>)
 80030b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030bc:	4b08      	ldr	r3, [pc, #32]	@ (80030e0 <HAL_Init+0x40>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a07      	ldr	r2, [pc, #28]	@ (80030e0 <HAL_Init+0x40>)
 80030c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030c8:	2003      	movs	r0, #3
 80030ca:	f000 f94f 	bl	800336c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030ce:	200f      	movs	r0, #15
 80030d0:	f000 f808 	bl	80030e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030d4:	f7ff fc7e 	bl	80029d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40023c00 	.word	0x40023c00

080030e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030ec:	4b12      	ldr	r3, [pc, #72]	@ (8003138 <HAL_InitTick+0x54>)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	4b12      	ldr	r3, [pc, #72]	@ (800313c <HAL_InitTick+0x58>)
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	4619      	mov	r1, r3
 80030f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80030fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003102:	4618      	mov	r0, r3
 8003104:	f000 f967 	bl	80033d6 <HAL_SYSTICK_Config>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e00e      	b.n	8003130 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b0f      	cmp	r3, #15
 8003116:	d80a      	bhi.n	800312e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003118:	2200      	movs	r2, #0
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	f04f 30ff 	mov.w	r0, #4294967295
 8003120:	f000 f92f 	bl	8003382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003124:	4a06      	ldr	r2, [pc, #24]	@ (8003140 <HAL_InitTick+0x5c>)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	e000      	b.n	8003130 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
}
 8003130:	4618      	mov	r0, r3
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	20000004 	.word	0x20000004
 800313c:	2000000c 	.word	0x2000000c
 8003140:	20000008 	.word	0x20000008

08003144 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003148:	4b06      	ldr	r3, [pc, #24]	@ (8003164 <HAL_IncTick+0x20>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	461a      	mov	r2, r3
 800314e:	4b06      	ldr	r3, [pc, #24]	@ (8003168 <HAL_IncTick+0x24>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4413      	add	r3, r2
 8003154:	4a04      	ldr	r2, [pc, #16]	@ (8003168 <HAL_IncTick+0x24>)
 8003156:	6013      	str	r3, [r2, #0]
}
 8003158:	bf00      	nop
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	2000000c 	.word	0x2000000c
 8003168:	200008a4 	.word	0x200008a4

0800316c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  return uwTick;
 8003170:	4b03      	ldr	r3, [pc, #12]	@ (8003180 <HAL_GetTick+0x14>)
 8003172:	681b      	ldr	r3, [r3, #0]
}
 8003174:	4618      	mov	r0, r3
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	200008a4 	.word	0x200008a4

08003184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800318c:	f7ff ffee 	bl	800316c <HAL_GetTick>
 8003190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319c:	d005      	beq.n	80031aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800319e:	4b0a      	ldr	r3, [pc, #40]	@ (80031c8 <HAL_Delay+0x44>)
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	461a      	mov	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	4413      	add	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031aa:	bf00      	nop
 80031ac:	f7ff ffde 	bl	800316c <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d8f7      	bhi.n	80031ac <HAL_Delay+0x28>
  {
  }
}
 80031bc:	bf00      	nop
 80031be:	bf00      	nop
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	2000000c 	.word	0x2000000c

080031cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003210 <__NVIC_SetPriorityGrouping+0x44>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031e8:	4013      	ands	r3, r2
 80031ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031fe:	4a04      	ldr	r2, [pc, #16]	@ (8003210 <__NVIC_SetPriorityGrouping+0x44>)
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	60d3      	str	r3, [r2, #12]
}
 8003204:	bf00      	nop
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	e000ed00 	.word	0xe000ed00

08003214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003218:	4b04      	ldr	r3, [pc, #16]	@ (800322c <__NVIC_GetPriorityGrouping+0x18>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	0a1b      	lsrs	r3, r3, #8
 800321e:	f003 0307 	and.w	r3, r3, #7
}
 8003222:	4618      	mov	r0, r3
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	e000ed00 	.word	0xe000ed00

08003230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	4603      	mov	r3, r0
 8003238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800323a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323e:	2b00      	cmp	r3, #0
 8003240:	db0b      	blt.n	800325a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003242:	79fb      	ldrb	r3, [r7, #7]
 8003244:	f003 021f 	and.w	r2, r3, #31
 8003248:	4907      	ldr	r1, [pc, #28]	@ (8003268 <__NVIC_EnableIRQ+0x38>)
 800324a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	2001      	movs	r0, #1
 8003252:	fa00 f202 	lsl.w	r2, r0, r2
 8003256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	e000e100 	.word	0xe000e100

0800326c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	6039      	str	r1, [r7, #0]
 8003276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327c:	2b00      	cmp	r3, #0
 800327e:	db0a      	blt.n	8003296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	b2da      	uxtb	r2, r3
 8003284:	490c      	ldr	r1, [pc, #48]	@ (80032b8 <__NVIC_SetPriority+0x4c>)
 8003286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328a:	0112      	lsls	r2, r2, #4
 800328c:	b2d2      	uxtb	r2, r2
 800328e:	440b      	add	r3, r1
 8003290:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003294:	e00a      	b.n	80032ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	b2da      	uxtb	r2, r3
 800329a:	4908      	ldr	r1, [pc, #32]	@ (80032bc <__NVIC_SetPriority+0x50>)
 800329c:	79fb      	ldrb	r3, [r7, #7]
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	3b04      	subs	r3, #4
 80032a4:	0112      	lsls	r2, r2, #4
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	440b      	add	r3, r1
 80032aa:	761a      	strb	r2, [r3, #24]
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	e000e100 	.word	0xe000e100
 80032bc:	e000ed00 	.word	0xe000ed00

080032c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b089      	sub	sp, #36	@ 0x24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f1c3 0307 	rsb	r3, r3, #7
 80032da:	2b04      	cmp	r3, #4
 80032dc:	bf28      	it	cs
 80032de:	2304      	movcs	r3, #4
 80032e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	3304      	adds	r3, #4
 80032e6:	2b06      	cmp	r3, #6
 80032e8:	d902      	bls.n	80032f0 <NVIC_EncodePriority+0x30>
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	3b03      	subs	r3, #3
 80032ee:	e000      	b.n	80032f2 <NVIC_EncodePriority+0x32>
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f4:	f04f 32ff 	mov.w	r2, #4294967295
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43da      	mvns	r2, r3
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	401a      	ands	r2, r3
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003308:	f04f 31ff 	mov.w	r1, #4294967295
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	fa01 f303 	lsl.w	r3, r1, r3
 8003312:	43d9      	mvns	r1, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003318:	4313      	orrs	r3, r2
         );
}
 800331a:	4618      	mov	r0, r3
 800331c:	3724      	adds	r7, #36	@ 0x24
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
	...

08003328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3b01      	subs	r3, #1
 8003334:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003338:	d301      	bcc.n	800333e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800333a:	2301      	movs	r3, #1
 800333c:	e00f      	b.n	800335e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800333e:	4a0a      	ldr	r2, [pc, #40]	@ (8003368 <SysTick_Config+0x40>)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3b01      	subs	r3, #1
 8003344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003346:	210f      	movs	r1, #15
 8003348:	f04f 30ff 	mov.w	r0, #4294967295
 800334c:	f7ff ff8e 	bl	800326c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003350:	4b05      	ldr	r3, [pc, #20]	@ (8003368 <SysTick_Config+0x40>)
 8003352:	2200      	movs	r2, #0
 8003354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003356:	4b04      	ldr	r3, [pc, #16]	@ (8003368 <SysTick_Config+0x40>)
 8003358:	2207      	movs	r2, #7
 800335a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3708      	adds	r7, #8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	e000e010 	.word	0xe000e010

0800336c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7ff ff29 	bl	80031cc <__NVIC_SetPriorityGrouping>
}
 800337a:	bf00      	nop
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003382:	b580      	push	{r7, lr}
 8003384:	b086      	sub	sp, #24
 8003386:	af00      	add	r7, sp, #0
 8003388:	4603      	mov	r3, r0
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	607a      	str	r2, [r7, #4]
 800338e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003390:	2300      	movs	r3, #0
 8003392:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003394:	f7ff ff3e 	bl	8003214 <__NVIC_GetPriorityGrouping>
 8003398:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	68b9      	ldr	r1, [r7, #8]
 800339e:	6978      	ldr	r0, [r7, #20]
 80033a0:	f7ff ff8e 	bl	80032c0 <NVIC_EncodePriority>
 80033a4:	4602      	mov	r2, r0
 80033a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033aa:	4611      	mov	r1, r2
 80033ac:	4618      	mov	r0, r3
 80033ae:	f7ff ff5d 	bl	800326c <__NVIC_SetPriority>
}
 80033b2:	bf00      	nop
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b082      	sub	sp, #8
 80033be:	af00      	add	r7, sp, #0
 80033c0:	4603      	mov	r3, r0
 80033c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff ff31 	bl	8003230 <__NVIC_EnableIRQ>
}
 80033ce:	bf00      	nop
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b082      	sub	sp, #8
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7ff ffa2 	bl	8003328 <SysTick_Config>
 80033e4:	4603      	mov	r3, r0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b089      	sub	sp, #36	@ 0x24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033fe:	2300      	movs	r3, #0
 8003400:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003402:	2300      	movs	r3, #0
 8003404:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003406:	2300      	movs	r3, #0
 8003408:	61fb      	str	r3, [r7, #28]
 800340a:	e159      	b.n	80036c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800340c:	2201      	movs	r2, #1
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	4013      	ands	r3, r2
 800341e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	429a      	cmp	r2, r3
 8003426:	f040 8148 	bne.w	80036ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f003 0303 	and.w	r3, r3, #3
 8003432:	2b01      	cmp	r3, #1
 8003434:	d005      	beq.n	8003442 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800343e:	2b02      	cmp	r3, #2
 8003440:	d130      	bne.n	80034a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	2203      	movs	r2, #3
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43db      	mvns	r3, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4013      	ands	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4313      	orrs	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003478:	2201      	movs	r2, #1
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	fa02 f303 	lsl.w	r3, r2, r3
 8003480:	43db      	mvns	r3, r3
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4013      	ands	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	091b      	lsrs	r3, r3, #4
 800348e:	f003 0201 	and.w	r2, r3, #1
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4313      	orrs	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f003 0303 	and.w	r3, r3, #3
 80034ac:	2b03      	cmp	r3, #3
 80034ae:	d017      	beq.n	80034e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	2203      	movs	r2, #3
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	69ba      	ldr	r2, [r7, #24]
 80034c4:	4013      	ands	r3, r2
 80034c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 0303 	and.w	r3, r3, #3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d123      	bne.n	8003534 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	08da      	lsrs	r2, r3, #3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3208      	adds	r2, #8
 80034f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	220f      	movs	r2, #15
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	43db      	mvns	r3, r3
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4013      	ands	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	fa02 f303 	lsl.w	r3, r2, r3
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4313      	orrs	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	08da      	lsrs	r2, r3, #3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	3208      	adds	r2, #8
 800352e:	69b9      	ldr	r1, [r7, #24]
 8003530:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	2203      	movs	r2, #3
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	43db      	mvns	r3, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4013      	ands	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f003 0203 	and.w	r2, r3, #3
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4313      	orrs	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 80a2 	beq.w	80036ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	4b57      	ldr	r3, [pc, #348]	@ (80036d8 <HAL_GPIO_Init+0x2e8>)
 800357c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800357e:	4a56      	ldr	r2, [pc, #344]	@ (80036d8 <HAL_GPIO_Init+0x2e8>)
 8003580:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003584:	6453      	str	r3, [r2, #68]	@ 0x44
 8003586:	4b54      	ldr	r3, [pc, #336]	@ (80036d8 <HAL_GPIO_Init+0x2e8>)
 8003588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003592:	4a52      	ldr	r2, [pc, #328]	@ (80036dc <HAL_GPIO_Init+0x2ec>)
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	089b      	lsrs	r3, r3, #2
 8003598:	3302      	adds	r3, #2
 800359a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800359e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f003 0303 	and.w	r3, r3, #3
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	220f      	movs	r2, #15
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	43db      	mvns	r3, r3
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	4013      	ands	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a49      	ldr	r2, [pc, #292]	@ (80036e0 <HAL_GPIO_Init+0x2f0>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d019      	beq.n	80035f2 <HAL_GPIO_Init+0x202>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a48      	ldr	r2, [pc, #288]	@ (80036e4 <HAL_GPIO_Init+0x2f4>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d013      	beq.n	80035ee <HAL_GPIO_Init+0x1fe>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a47      	ldr	r2, [pc, #284]	@ (80036e8 <HAL_GPIO_Init+0x2f8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d00d      	beq.n	80035ea <HAL_GPIO_Init+0x1fa>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a46      	ldr	r2, [pc, #280]	@ (80036ec <HAL_GPIO_Init+0x2fc>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d007      	beq.n	80035e6 <HAL_GPIO_Init+0x1f6>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a45      	ldr	r2, [pc, #276]	@ (80036f0 <HAL_GPIO_Init+0x300>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d101      	bne.n	80035e2 <HAL_GPIO_Init+0x1f2>
 80035de:	2304      	movs	r3, #4
 80035e0:	e008      	b.n	80035f4 <HAL_GPIO_Init+0x204>
 80035e2:	2307      	movs	r3, #7
 80035e4:	e006      	b.n	80035f4 <HAL_GPIO_Init+0x204>
 80035e6:	2303      	movs	r3, #3
 80035e8:	e004      	b.n	80035f4 <HAL_GPIO_Init+0x204>
 80035ea:	2302      	movs	r3, #2
 80035ec:	e002      	b.n	80035f4 <HAL_GPIO_Init+0x204>
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <HAL_GPIO_Init+0x204>
 80035f2:	2300      	movs	r3, #0
 80035f4:	69fa      	ldr	r2, [r7, #28]
 80035f6:	f002 0203 	and.w	r2, r2, #3
 80035fa:	0092      	lsls	r2, r2, #2
 80035fc:	4093      	lsls	r3, r2
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	4313      	orrs	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003604:	4935      	ldr	r1, [pc, #212]	@ (80036dc <HAL_GPIO_Init+0x2ec>)
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	089b      	lsrs	r3, r3, #2
 800360a:	3302      	adds	r3, #2
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003612:	4b38      	ldr	r3, [pc, #224]	@ (80036f4 <HAL_GPIO_Init+0x304>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	43db      	mvns	r3, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4013      	ands	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003636:	4a2f      	ldr	r2, [pc, #188]	@ (80036f4 <HAL_GPIO_Init+0x304>)
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800363c:	4b2d      	ldr	r3, [pc, #180]	@ (80036f4 <HAL_GPIO_Init+0x304>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	43db      	mvns	r3, r3
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	4013      	ands	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	4313      	orrs	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003660:	4a24      	ldr	r2, [pc, #144]	@ (80036f4 <HAL_GPIO_Init+0x304>)
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003666:	4b23      	ldr	r3, [pc, #140]	@ (80036f4 <HAL_GPIO_Init+0x304>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	43db      	mvns	r3, r3
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4013      	ands	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800368a:	4a1a      	ldr	r2, [pc, #104]	@ (80036f4 <HAL_GPIO_Init+0x304>)
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003690:	4b18      	ldr	r3, [pc, #96]	@ (80036f4 <HAL_GPIO_Init+0x304>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	43db      	mvns	r3, r3
 800369a:	69ba      	ldr	r2, [r7, #24]
 800369c:	4013      	ands	r3, r2
 800369e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036b4:	4a0f      	ldr	r2, [pc, #60]	@ (80036f4 <HAL_GPIO_Init+0x304>)
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	3301      	adds	r3, #1
 80036be:	61fb      	str	r3, [r7, #28]
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	2b0f      	cmp	r3, #15
 80036c4:	f67f aea2 	bls.w	800340c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036c8:	bf00      	nop
 80036ca:	bf00      	nop
 80036cc:	3724      	adds	r7, #36	@ 0x24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40023800 	.word	0x40023800
 80036dc:	40013800 	.word	0x40013800
 80036e0:	40020000 	.word	0x40020000
 80036e4:	40020400 	.word	0x40020400
 80036e8:	40020800 	.word	0x40020800
 80036ec:	40020c00 	.word	0x40020c00
 80036f0:	40021000 	.word	0x40021000
 80036f4:	40013c00 	.word	0x40013c00

080036f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691a      	ldr	r2, [r3, #16]
 8003708:	887b      	ldrh	r3, [r7, #2]
 800370a:	4013      	ands	r3, r2
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003710:	2301      	movs	r3, #1
 8003712:	73fb      	strb	r3, [r7, #15]
 8003714:	e001      	b.n	800371a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003716:	2300      	movs	r3, #0
 8003718:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800371a:	7bfb      	ldrb	r3, [r7, #15]
}
 800371c:	4618      	mov	r0, r3
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	807b      	strh	r3, [r7, #2]
 8003734:	4613      	mov	r3, r2
 8003736:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003738:	787b      	ldrb	r3, [r7, #1]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800373e:	887a      	ldrh	r2, [r7, #2]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003744:	e003      	b.n	800374e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003746:	887b      	ldrh	r3, [r7, #2]
 8003748:	041a      	lsls	r2, r3, #16
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	619a      	str	r2, [r3, #24]
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800375a:	b480      	push	{r7}
 800375c:	b085      	sub	sp, #20
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
 8003762:	460b      	mov	r3, r1
 8003764:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800376c:	887a      	ldrh	r2, [r7, #2]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	4013      	ands	r3, r2
 8003772:	041a      	lsls	r2, r3, #16
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	43d9      	mvns	r1, r3
 8003778:	887b      	ldrh	r3, [r7, #2]
 800377a:	400b      	ands	r3, r1
 800377c:	431a      	orrs	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	619a      	str	r2, [r3, #24]
}
 8003782:	bf00      	nop
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
	...

08003790 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800379a:	4b08      	ldr	r3, [pc, #32]	@ (80037bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800379c:	695a      	ldr	r2, [r3, #20]
 800379e:	88fb      	ldrh	r3, [r7, #6]
 80037a0:	4013      	ands	r3, r2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d006      	beq.n	80037b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037a6:	4a05      	ldr	r2, [pc, #20]	@ (80037bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037a8:	88fb      	ldrh	r3, [r7, #6]
 80037aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037ac:	88fb      	ldrh	r3, [r7, #6]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fe fa00 	bl	8001bb4 <HAL_GPIO_EXTI_Callback>
  }
}
 80037b4:	bf00      	nop
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	40013c00 	.word	0x40013c00

080037c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e12b      	b.n	8003a2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d106      	bne.n	80037ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff f91c 	bl	8002a24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2224      	movs	r2, #36	@ 0x24
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0201 	bic.w	r2, r2, #1
 8003802:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003812:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003822:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003824:	f001 fbf6 	bl	8005014 <HAL_RCC_GetPCLK1Freq>
 8003828:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	4a81      	ldr	r2, [pc, #516]	@ (8003a34 <HAL_I2C_Init+0x274>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d807      	bhi.n	8003844 <HAL_I2C_Init+0x84>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4a80      	ldr	r2, [pc, #512]	@ (8003a38 <HAL_I2C_Init+0x278>)
 8003838:	4293      	cmp	r3, r2
 800383a:	bf94      	ite	ls
 800383c:	2301      	movls	r3, #1
 800383e:	2300      	movhi	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	e006      	b.n	8003852 <HAL_I2C_Init+0x92>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4a7d      	ldr	r2, [pc, #500]	@ (8003a3c <HAL_I2C_Init+0x27c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	bf94      	ite	ls
 800384c:	2301      	movls	r3, #1
 800384e:	2300      	movhi	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e0e7      	b.n	8003a2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4a78      	ldr	r2, [pc, #480]	@ (8003a40 <HAL_I2C_Init+0x280>)
 800385e:	fba2 2303 	umull	r2, r3, r2, r3
 8003862:	0c9b      	lsrs	r3, r3, #18
 8003864:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	430a      	orrs	r2, r1
 8003878:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	4a6a      	ldr	r2, [pc, #424]	@ (8003a34 <HAL_I2C_Init+0x274>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d802      	bhi.n	8003894 <HAL_I2C_Init+0xd4>
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	3301      	adds	r3, #1
 8003892:	e009      	b.n	80038a8 <HAL_I2C_Init+0xe8>
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800389a:	fb02 f303 	mul.w	r3, r2, r3
 800389e:	4a69      	ldr	r2, [pc, #420]	@ (8003a44 <HAL_I2C_Init+0x284>)
 80038a0:	fba2 2303 	umull	r2, r3, r2, r3
 80038a4:	099b      	lsrs	r3, r3, #6
 80038a6:	3301      	adds	r3, #1
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6812      	ldr	r2, [r2, #0]
 80038ac:	430b      	orrs	r3, r1
 80038ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80038ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	495c      	ldr	r1, [pc, #368]	@ (8003a34 <HAL_I2C_Init+0x274>)
 80038c4:	428b      	cmp	r3, r1
 80038c6:	d819      	bhi.n	80038fc <HAL_I2C_Init+0x13c>
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	1e59      	subs	r1, r3, #1
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80038d6:	1c59      	adds	r1, r3, #1
 80038d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80038dc:	400b      	ands	r3, r1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00a      	beq.n	80038f8 <HAL_I2C_Init+0x138>
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	1e59      	subs	r1, r3, #1
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80038f0:	3301      	adds	r3, #1
 80038f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f6:	e051      	b.n	800399c <HAL_I2C_Init+0x1dc>
 80038f8:	2304      	movs	r3, #4
 80038fa:	e04f      	b.n	800399c <HAL_I2C_Init+0x1dc>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d111      	bne.n	8003928 <HAL_I2C_Init+0x168>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	1e58      	subs	r0, r3, #1
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6859      	ldr	r1, [r3, #4]
 800390c:	460b      	mov	r3, r1
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	440b      	add	r3, r1
 8003912:	fbb0 f3f3 	udiv	r3, r0, r3
 8003916:	3301      	adds	r3, #1
 8003918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800391c:	2b00      	cmp	r3, #0
 800391e:	bf0c      	ite	eq
 8003920:	2301      	moveq	r3, #1
 8003922:	2300      	movne	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	e012      	b.n	800394e <HAL_I2C_Init+0x18e>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	1e58      	subs	r0, r3, #1
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6859      	ldr	r1, [r3, #4]
 8003930:	460b      	mov	r3, r1
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	0099      	lsls	r1, r3, #2
 8003938:	440b      	add	r3, r1
 800393a:	fbb0 f3f3 	udiv	r3, r0, r3
 800393e:	3301      	adds	r3, #1
 8003940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003944:	2b00      	cmp	r3, #0
 8003946:	bf0c      	ite	eq
 8003948:	2301      	moveq	r3, #1
 800394a:	2300      	movne	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <HAL_I2C_Init+0x196>
 8003952:	2301      	movs	r3, #1
 8003954:	e022      	b.n	800399c <HAL_I2C_Init+0x1dc>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10e      	bne.n	800397c <HAL_I2C_Init+0x1bc>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	1e58      	subs	r0, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6859      	ldr	r1, [r3, #4]
 8003966:	460b      	mov	r3, r1
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	440b      	add	r3, r1
 800396c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003970:	3301      	adds	r3, #1
 8003972:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003976:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800397a:	e00f      	b.n	800399c <HAL_I2C_Init+0x1dc>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	1e58      	subs	r0, r3, #1
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6859      	ldr	r1, [r3, #4]
 8003984:	460b      	mov	r3, r1
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	0099      	lsls	r1, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003992:	3301      	adds	r3, #1
 8003994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003998:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800399c:	6879      	ldr	r1, [r7, #4]
 800399e:	6809      	ldr	r1, [r1, #0]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69da      	ldr	r2, [r3, #28]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80039ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	6911      	ldr	r1, [r2, #16]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	68d2      	ldr	r2, [r2, #12]
 80039d6:	4311      	orrs	r1, r2
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	6812      	ldr	r2, [r2, #0]
 80039dc:	430b      	orrs	r3, r1
 80039de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	695a      	ldr	r2, [r3, #20]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f042 0201 	orr.w	r2, r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2220      	movs	r2, #32
 8003a16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	000186a0 	.word	0x000186a0
 8003a38:	001e847f 	.word	0x001e847f
 8003a3c:	003d08ff 	.word	0x003d08ff
 8003a40:	431bde83 	.word	0x431bde83
 8003a44:	10624dd3 	.word	0x10624dd3

08003a48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	607a      	str	r2, [r7, #4]
 8003a52:	461a      	mov	r2, r3
 8003a54:	460b      	mov	r3, r1
 8003a56:	817b      	strh	r3, [r7, #10]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a5c:	f7ff fb86 	bl	800316c <HAL_GetTick>
 8003a60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b20      	cmp	r3, #32
 8003a6c:	f040 80e0 	bne.w	8003c30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	2319      	movs	r3, #25
 8003a76:	2201      	movs	r2, #1
 8003a78:	4970      	ldr	r1, [pc, #448]	@ (8003c3c <HAL_I2C_Master_Transmit+0x1f4>)
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 fc64 	bl	8004348 <I2C_WaitOnFlagUntilTimeout>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003a86:	2302      	movs	r3, #2
 8003a88:	e0d3      	b.n	8003c32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d101      	bne.n	8003a98 <HAL_I2C_Master_Transmit+0x50>
 8003a94:	2302      	movs	r3, #2
 8003a96:	e0cc      	b.n	8003c32 <HAL_I2C_Master_Transmit+0x1ea>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d007      	beq.n	8003abe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f042 0201 	orr.w	r2, r2, #1
 8003abc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003acc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2221      	movs	r2, #33	@ 0x21
 8003ad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2210      	movs	r2, #16
 8003ada:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	893a      	ldrh	r2, [r7, #8]
 8003aee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4a50      	ldr	r2, [pc, #320]	@ (8003c40 <HAL_I2C_Master_Transmit+0x1f8>)
 8003afe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b00:	8979      	ldrh	r1, [r7, #10]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	6a3a      	ldr	r2, [r7, #32]
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 face 	bl	80040a8 <I2C_MasterRequestWrite>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e08d      	b.n	8003c32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b16:	2300      	movs	r3, #0
 8003b18:	613b      	str	r3, [r7, #16]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	613b      	str	r3, [r7, #16]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	613b      	str	r3, [r7, #16]
 8003b2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003b2c:	e066      	b.n	8003bfc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	6a39      	ldr	r1, [r7, #32]
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 fd22 	bl	800457c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00d      	beq.n	8003b5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d107      	bne.n	8003b56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e06b      	b.n	8003c32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5e:	781a      	ldrb	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b82:	3b01      	subs	r3, #1
 8003b84:	b29a      	uxth	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b04      	cmp	r3, #4
 8003b96:	d11b      	bne.n	8003bd0 <HAL_I2C_Master_Transmit+0x188>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d017      	beq.n	8003bd0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	781a      	ldrb	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb0:	1c5a      	adds	r2, r3, #1
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	6a39      	ldr	r1, [r7, #32]
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 fd19 	bl	800460c <I2C_WaitOnBTFFlagUntilTimeout>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00d      	beq.n	8003bfc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be4:	2b04      	cmp	r3, #4
 8003be6:	d107      	bne.n	8003bf8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bf6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e01a      	b.n	8003c32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d194      	bne.n	8003b2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	e000      	b.n	8003c32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003c30:	2302      	movs	r3, #2
  }
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	00100002 	.word	0x00100002
 8003c40:	ffff0000 	.word	0xffff0000

08003c44 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08c      	sub	sp, #48	@ 0x30
 8003c48:	af02      	add	r7, sp, #8
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	607a      	str	r2, [r7, #4]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	460b      	mov	r3, r1
 8003c52:	817b      	strh	r3, [r7, #10]
 8003c54:	4613      	mov	r3, r2
 8003c56:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c58:	f7ff fa88 	bl	800316c <HAL_GetTick>
 8003c5c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b20      	cmp	r3, #32
 8003c68:	f040 8217 	bne.w	800409a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	2319      	movs	r3, #25
 8003c72:	2201      	movs	r2, #1
 8003c74:	497c      	ldr	r1, [pc, #496]	@ (8003e68 <HAL_I2C_Master_Receive+0x224>)
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 fb66 	bl	8004348 <I2C_WaitOnFlagUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003c82:	2302      	movs	r3, #2
 8003c84:	e20a      	b.n	800409c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d101      	bne.n	8003c94 <HAL_I2C_Master_Receive+0x50>
 8003c90:	2302      	movs	r3, #2
 8003c92:	e203      	b.n	800409c <HAL_I2C_Master_Receive+0x458>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d007      	beq.n	8003cba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f042 0201 	orr.w	r2, r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cc8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2222      	movs	r2, #34	@ 0x22
 8003cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2210      	movs	r2, #16
 8003cd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	893a      	ldrh	r2, [r7, #8]
 8003cea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4a5c      	ldr	r2, [pc, #368]	@ (8003e6c <HAL_I2C_Master_Receive+0x228>)
 8003cfa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003cfc:	8979      	ldrh	r1, [r7, #10]
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 fa52 	bl	80041ac <I2C_MasterRequestRead>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e1c4      	b.n	800409c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d113      	bne.n	8003d42 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	623b      	str	r3, [r7, #32]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	623b      	str	r3, [r7, #32]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	623b      	str	r3, [r7, #32]
 8003d2e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	e198      	b.n	8004074 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d11b      	bne.n	8003d82 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61fb      	str	r3, [r7, #28]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	61fb      	str	r3, [r7, #28]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	61fb      	str	r3, [r7, #28]
 8003d6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	e178      	b.n	8004074 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d11b      	bne.n	8003dc2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d98:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003da8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003daa:	2300      	movs	r3, #0
 8003dac:	61bb      	str	r3, [r7, #24]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	695b      	ldr	r3, [r3, #20]
 8003db4:	61bb      	str	r3, [r7, #24]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	61bb      	str	r3, [r7, #24]
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	e158      	b.n	8004074 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003dd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	617b      	str	r3, [r7, #20]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	617b      	str	r3, [r7, #20]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	617b      	str	r3, [r7, #20]
 8003de6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003de8:	e144      	b.n	8004074 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dee:	2b03      	cmp	r3, #3
 8003df0:	f200 80f1 	bhi.w	8003fd6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d123      	bne.n	8003e44 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dfe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 fc4b 	bl	800469c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e145      	b.n	800409c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	691a      	ldr	r2, [r3, #16]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e42:	e117      	b.n	8004074 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d14e      	bne.n	8003eea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4e:	9300      	str	r3, [sp, #0]
 8003e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e52:	2200      	movs	r2, #0
 8003e54:	4906      	ldr	r1, [pc, #24]	@ (8003e70 <HAL_I2C_Master_Receive+0x22c>)
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 fa76 	bl	8004348 <I2C_WaitOnFlagUntilTimeout>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d008      	beq.n	8003e74 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e11a      	b.n	800409c <HAL_I2C_Master_Receive+0x458>
 8003e66:	bf00      	nop
 8003e68:	00100002 	.word	0x00100002
 8003e6c:	ffff0000 	.word	0xffff0000
 8003e70:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	691a      	ldr	r2, [r3, #16]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	691a      	ldr	r2, [r3, #16]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec0:	b2d2      	uxtb	r2, r2
 8003ec2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec8:	1c5a      	adds	r2, r3, #1
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ee8:	e0c4      	b.n	8004074 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	496c      	ldr	r1, [pc, #432]	@ (80040a4 <HAL_I2C_Master_Receive+0x460>)
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f000 fa27 	bl	8004348 <I2C_WaitOnFlagUntilTimeout>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e0cb      	b.n	800409c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691a      	ldr	r2, [r3, #16]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	4955      	ldr	r1, [pc, #340]	@ (80040a4 <HAL_I2C_Master_Receive+0x460>)
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 f9f9 	bl	8004348 <I2C_WaitOnFlagUntilTimeout>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e09d      	b.n	800409c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	691a      	ldr	r2, [r3, #16]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f82:	1c5a      	adds	r2, r3, #1
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	691a      	ldr	r2, [r3, #16]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb4:	1c5a      	adds	r2, r3, #1
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003fd4:	e04e      	b.n	8004074 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 fb5e 	bl	800469c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e058      	b.n	800409c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	691a      	ldr	r2, [r3, #16]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004006:	3b01      	subs	r3, #1
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004012:	b29b      	uxth	r3, r3
 8004014:	3b01      	subs	r3, #1
 8004016:	b29a      	uxth	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	f003 0304 	and.w	r3, r3, #4
 8004026:	2b04      	cmp	r3, #4
 8004028:	d124      	bne.n	8004074 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800402e:	2b03      	cmp	r3, #3
 8004030:	d107      	bne.n	8004042 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004040:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	691a      	ldr	r2, [r3, #16]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004078:	2b00      	cmp	r3, #0
 800407a:	f47f aeb6 	bne.w	8003dea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2220      	movs	r2, #32
 8004082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	e000      	b.n	800409c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800409a:	2302      	movs	r3, #2
  }
}
 800409c:	4618      	mov	r0, r3
 800409e:	3728      	adds	r7, #40	@ 0x28
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	00010004 	.word	0x00010004

080040a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b088      	sub	sp, #32
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	607a      	str	r2, [r7, #4]
 80040b2:	603b      	str	r3, [r7, #0]
 80040b4:	460b      	mov	r3, r1
 80040b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	d006      	beq.n	80040d2 <I2C_MasterRequestWrite+0x2a>
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d003      	beq.n	80040d2 <I2C_MasterRequestWrite+0x2a>
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80040d0:	d108      	bne.n	80040e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	e00b      	b.n	80040fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e8:	2b12      	cmp	r3, #18
 80040ea:	d107      	bne.n	80040fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 f91d 	bl	8004348 <I2C_WaitOnFlagUntilTimeout>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00d      	beq.n	8004130 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800411e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004122:	d103      	bne.n	800412c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800412a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e035      	b.n	800419c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004138:	d108      	bne.n	800414c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800413a:	897b      	ldrh	r3, [r7, #10]
 800413c:	b2db      	uxtb	r3, r3
 800413e:	461a      	mov	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004148:	611a      	str	r2, [r3, #16]
 800414a:	e01b      	b.n	8004184 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800414c:	897b      	ldrh	r3, [r7, #10]
 800414e:	11db      	asrs	r3, r3, #7
 8004150:	b2db      	uxtb	r3, r3
 8004152:	f003 0306 	and.w	r3, r3, #6
 8004156:	b2db      	uxtb	r3, r3
 8004158:	f063 030f 	orn	r3, r3, #15
 800415c:	b2da      	uxtb	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	490e      	ldr	r1, [pc, #56]	@ (80041a4 <I2C_MasterRequestWrite+0xfc>)
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 f966 	bl	800443c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e010      	b.n	800419c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800417a:	897b      	ldrh	r3, [r7, #10]
 800417c:	b2da      	uxtb	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	4907      	ldr	r1, [pc, #28]	@ (80041a8 <I2C_MasterRequestWrite+0x100>)
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 f956 	bl	800443c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3718      	adds	r7, #24
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	00010008 	.word	0x00010008
 80041a8:	00010002 	.word	0x00010002

080041ac <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b088      	sub	sp, #32
 80041b0:	af02      	add	r7, sp, #8
 80041b2:	60f8      	str	r0, [r7, #12]
 80041b4:	607a      	str	r2, [r7, #4]
 80041b6:	603b      	str	r3, [r7, #0]
 80041b8:	460b      	mov	r3, r1
 80041ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80041d0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d006      	beq.n	80041e6 <I2C_MasterRequestRead+0x3a>
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d003      	beq.n	80041e6 <I2C_MasterRequestRead+0x3a>
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80041e4:	d108      	bne.n	80041f8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	e00b      	b.n	8004210 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041fc:	2b11      	cmp	r3, #17
 80041fe:	d107      	bne.n	8004210 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800420e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f893 	bl	8004348 <I2C_WaitOnFlagUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00d      	beq.n	8004244 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004232:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004236:	d103      	bne.n	8004240 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800423e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e079      	b.n	8004338 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800424c:	d108      	bne.n	8004260 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800424e:	897b      	ldrh	r3, [r7, #10]
 8004250:	b2db      	uxtb	r3, r3
 8004252:	f043 0301 	orr.w	r3, r3, #1
 8004256:	b2da      	uxtb	r2, r3
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	611a      	str	r2, [r3, #16]
 800425e:	e05f      	b.n	8004320 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004260:	897b      	ldrh	r3, [r7, #10]
 8004262:	11db      	asrs	r3, r3, #7
 8004264:	b2db      	uxtb	r3, r3
 8004266:	f003 0306 	and.w	r3, r3, #6
 800426a:	b2db      	uxtb	r3, r3
 800426c:	f063 030f 	orn	r3, r3, #15
 8004270:	b2da      	uxtb	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	4930      	ldr	r1, [pc, #192]	@ (8004340 <I2C_MasterRequestRead+0x194>)
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f000 f8dc 	bl	800443c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e054      	b.n	8004338 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800428e:	897b      	ldrh	r3, [r7, #10]
 8004290:	b2da      	uxtb	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	4929      	ldr	r1, [pc, #164]	@ (8004344 <I2C_MasterRequestRead+0x198>)
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 f8cc 	bl	800443c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e044      	b.n	8004338 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ae:	2300      	movs	r3, #0
 80042b0:	613b      	str	r3, [r7, #16]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	613b      	str	r3, [r7, #16]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	613b      	str	r3, [r7, #16]
 80042c2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042d2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 f831 	bl	8004348 <I2C_WaitOnFlagUntilTimeout>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00d      	beq.n	8004308 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042fa:	d103      	bne.n	8004304 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004302:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	e017      	b.n	8004338 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004308:	897b      	ldrh	r3, [r7, #10]
 800430a:	11db      	asrs	r3, r3, #7
 800430c:	b2db      	uxtb	r3, r3
 800430e:	f003 0306 	and.w	r3, r3, #6
 8004312:	b2db      	uxtb	r3, r3
 8004314:	f063 030e 	orn	r3, r3, #14
 8004318:	b2da      	uxtb	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	4907      	ldr	r1, [pc, #28]	@ (8004344 <I2C_MasterRequestRead+0x198>)
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f000 f888 	bl	800443c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e000      	b.n	8004338 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004336:	2300      	movs	r3, #0
}
 8004338:	4618      	mov	r0, r3
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	00010008 	.word	0x00010008
 8004344:	00010002 	.word	0x00010002

08004348 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	603b      	str	r3, [r7, #0]
 8004354:	4613      	mov	r3, r2
 8004356:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004358:	e048      	b.n	80043ec <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004360:	d044      	beq.n	80043ec <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004362:	f7fe ff03 	bl	800316c <HAL_GetTick>
 8004366:	4602      	mov	r2, r0
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	429a      	cmp	r2, r3
 8004370:	d302      	bcc.n	8004378 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d139      	bne.n	80043ec <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	0c1b      	lsrs	r3, r3, #16
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b01      	cmp	r3, #1
 8004380:	d10d      	bne.n	800439e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	43da      	mvns	r2, r3
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	4013      	ands	r3, r2
 800438e:	b29b      	uxth	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	bf0c      	ite	eq
 8004394:	2301      	moveq	r3, #1
 8004396:	2300      	movne	r3, #0
 8004398:	b2db      	uxtb	r3, r3
 800439a:	461a      	mov	r2, r3
 800439c:	e00c      	b.n	80043b8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	43da      	mvns	r2, r3
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	4013      	ands	r3, r2
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	bf0c      	ite	eq
 80043b0:	2301      	moveq	r3, #1
 80043b2:	2300      	movne	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	461a      	mov	r2, r3
 80043b8:	79fb      	ldrb	r3, [r7, #7]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d116      	bne.n	80043ec <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d8:	f043 0220 	orr.w	r2, r3, #32
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e023      	b.n	8004434 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	0c1b      	lsrs	r3, r3, #16
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d10d      	bne.n	8004412 <I2C_WaitOnFlagUntilTimeout+0xca>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	43da      	mvns	r2, r3
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	4013      	ands	r3, r2
 8004402:	b29b      	uxth	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	bf0c      	ite	eq
 8004408:	2301      	moveq	r3, #1
 800440a:	2300      	movne	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	461a      	mov	r2, r3
 8004410:	e00c      	b.n	800442c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	43da      	mvns	r2, r3
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	4013      	ands	r3, r2
 800441e:	b29b      	uxth	r3, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	bf0c      	ite	eq
 8004424:	2301      	moveq	r3, #1
 8004426:	2300      	movne	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	461a      	mov	r2, r3
 800442c:	79fb      	ldrb	r3, [r7, #7]
 800442e:	429a      	cmp	r2, r3
 8004430:	d093      	beq.n	800435a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
 8004448:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800444a:	e071      	b.n	8004530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004456:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800445a:	d123      	bne.n	80044a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800446a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004474:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2220      	movs	r2, #32
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004490:	f043 0204 	orr.w	r2, r3, #4
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e067      	b.n	8004574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044aa:	d041      	beq.n	8004530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ac:	f7fe fe5e 	bl	800316c <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d302      	bcc.n	80044c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d136      	bne.n	8004530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	0c1b      	lsrs	r3, r3, #16
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d10c      	bne.n	80044e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	43da      	mvns	r2, r3
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4013      	ands	r3, r2
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	bf14      	ite	ne
 80044de:	2301      	movne	r3, #1
 80044e0:	2300      	moveq	r3, #0
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	e00b      	b.n	80044fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	43da      	mvns	r2, r3
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	4013      	ands	r3, r2
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	bf14      	ite	ne
 80044f8:	2301      	movne	r3, #1
 80044fa:	2300      	moveq	r3, #0
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d016      	beq.n	8004530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2220      	movs	r2, #32
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451c:	f043 0220 	orr.w	r2, r3, #32
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e021      	b.n	8004574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	0c1b      	lsrs	r3, r3, #16
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b01      	cmp	r3, #1
 8004538:	d10c      	bne.n	8004554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	43da      	mvns	r2, r3
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	4013      	ands	r3, r2
 8004546:	b29b      	uxth	r3, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	bf14      	ite	ne
 800454c:	2301      	movne	r3, #1
 800454e:	2300      	moveq	r3, #0
 8004550:	b2db      	uxtb	r3, r3
 8004552:	e00b      	b.n	800456c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	43da      	mvns	r2, r3
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	4013      	ands	r3, r2
 8004560:	b29b      	uxth	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	bf14      	ite	ne
 8004566:	2301      	movne	r3, #1
 8004568:	2300      	moveq	r3, #0
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b00      	cmp	r3, #0
 800456e:	f47f af6d 	bne.w	800444c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}

0800457c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004588:	e034      	b.n	80045f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 f8e3 	bl	8004756 <I2C_IsAcknowledgeFailed>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e034      	b.n	8004604 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a0:	d028      	beq.n	80045f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a2:	f7fe fde3 	bl	800316c <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d302      	bcc.n	80045b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d11d      	bne.n	80045f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045c2:	2b80      	cmp	r3, #128	@ 0x80
 80045c4:	d016      	beq.n	80045f4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e0:	f043 0220 	orr.w	r2, r3, #32
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e007      	b.n	8004604 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045fe:	2b80      	cmp	r3, #128	@ 0x80
 8004600:	d1c3      	bne.n	800458a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004618:	e034      	b.n	8004684 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 f89b 	bl	8004756 <I2C_IsAcknowledgeFailed>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e034      	b.n	8004694 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004630:	d028      	beq.n	8004684 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004632:	f7fe fd9b 	bl	800316c <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	429a      	cmp	r2, r3
 8004640:	d302      	bcc.n	8004648 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d11d      	bne.n	8004684 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	f003 0304 	and.w	r3, r3, #4
 8004652:	2b04      	cmp	r3, #4
 8004654:	d016      	beq.n	8004684 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2220      	movs	r2, #32
 8004660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004670:	f043 0220 	orr.w	r2, r3, #32
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e007      	b.n	8004694 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	f003 0304 	and.w	r3, r3, #4
 800468e:	2b04      	cmp	r3, #4
 8004690:	d1c3      	bne.n	800461a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046a8:	e049      	b.n	800473e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	f003 0310 	and.w	r3, r3, #16
 80046b4:	2b10      	cmp	r3, #16
 80046b6:	d119      	bne.n	80046ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f06f 0210 	mvn.w	r2, #16
 80046c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2220      	movs	r2, #32
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e030      	b.n	800474e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ec:	f7fe fd3e 	bl	800316c <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d302      	bcc.n	8004702 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d11d      	bne.n	800473e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800470c:	2b40      	cmp	r3, #64	@ 0x40
 800470e:	d016      	beq.n	800473e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2220      	movs	r2, #32
 800471a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472a:	f043 0220 	orr.w	r2, r3, #32
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e007      	b.n	800474e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004748:	2b40      	cmp	r3, #64	@ 0x40
 800474a:	d1ae      	bne.n	80046aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004756:	b480      	push	{r7}
 8004758:	b083      	sub	sp, #12
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004768:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800476c:	d11b      	bne.n	80047a6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004776:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2220      	movs	r2, #32
 8004782:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004792:	f043 0204 	orr.w	r2, r3, #4
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e000      	b.n	80047a8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b086      	sub	sp, #24
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e267      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d075      	beq.n	80048be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047d2:	4b88      	ldr	r3, [pc, #544]	@ (80049f4 <HAL_RCC_OscConfig+0x240>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f003 030c 	and.w	r3, r3, #12
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d00c      	beq.n	80047f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047de:	4b85      	ldr	r3, [pc, #532]	@ (80049f4 <HAL_RCC_OscConfig+0x240>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047e6:	2b08      	cmp	r3, #8
 80047e8:	d112      	bne.n	8004810 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ea:	4b82      	ldr	r3, [pc, #520]	@ (80049f4 <HAL_RCC_OscConfig+0x240>)
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047f6:	d10b      	bne.n	8004810 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f8:	4b7e      	ldr	r3, [pc, #504]	@ (80049f4 <HAL_RCC_OscConfig+0x240>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d05b      	beq.n	80048bc <HAL_RCC_OscConfig+0x108>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d157      	bne.n	80048bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e242      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004818:	d106      	bne.n	8004828 <HAL_RCC_OscConfig+0x74>
 800481a:	4b76      	ldr	r3, [pc, #472]	@ (80049f4 <HAL_RCC_OscConfig+0x240>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a75      	ldr	r2, [pc, #468]	@ (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004820:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004824:	6013      	str	r3, [r2, #0]
 8004826:	e01d      	b.n	8004864 <HAL_RCC_OscConfig+0xb0>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004830:	d10c      	bne.n	800484c <HAL_RCC_OscConfig+0x98>
 8004832:	4b70      	ldr	r3, [pc, #448]	@ (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a6f      	ldr	r2, [pc, #444]	@ (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004838:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	4b6d      	ldr	r3, [pc, #436]	@ (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a6c      	ldr	r2, [pc, #432]	@ (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004844:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004848:	6013      	str	r3, [r2, #0]
 800484a:	e00b      	b.n	8004864 <HAL_RCC_OscConfig+0xb0>
 800484c:	4b69      	ldr	r3, [pc, #420]	@ (80049f4 <HAL_RCC_OscConfig+0x240>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a68      	ldr	r2, [pc, #416]	@ (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004852:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004856:	6013      	str	r3, [r2, #0]
 8004858:	4b66      	ldr	r3, [pc, #408]	@ (80049f4 <HAL_RCC_OscConfig+0x240>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a65      	ldr	r2, [pc, #404]	@ (80049f4 <HAL_RCC_OscConfig+0x240>)
 800485e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004862:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d013      	beq.n	8004894 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486c:	f7fe fc7e 	bl	800316c <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004874:	f7fe fc7a 	bl	800316c <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b64      	cmp	r3, #100	@ 0x64
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e207      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004886:	4b5b      	ldr	r3, [pc, #364]	@ (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d0f0      	beq.n	8004874 <HAL_RCC_OscConfig+0xc0>
 8004892:	e014      	b.n	80048be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004894:	f7fe fc6a 	bl	800316c <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800489c:	f7fe fc66 	bl	800316c <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b64      	cmp	r3, #100	@ 0x64
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e1f3      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ae:	4b51      	ldr	r3, [pc, #324]	@ (80049f4 <HAL_RCC_OscConfig+0x240>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1f0      	bne.n	800489c <HAL_RCC_OscConfig+0xe8>
 80048ba:	e000      	b.n	80048be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d063      	beq.n	8004992 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048ca:	4b4a      	ldr	r3, [pc, #296]	@ (80049f4 <HAL_RCC_OscConfig+0x240>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 030c 	and.w	r3, r3, #12
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00b      	beq.n	80048ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048d6:	4b47      	ldr	r3, [pc, #284]	@ (80049f4 <HAL_RCC_OscConfig+0x240>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048de:	2b08      	cmp	r3, #8
 80048e0:	d11c      	bne.n	800491c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048e2:	4b44      	ldr	r3, [pc, #272]	@ (80049f4 <HAL_RCC_OscConfig+0x240>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d116      	bne.n	800491c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ee:	4b41      	ldr	r3, [pc, #260]	@ (80049f4 <HAL_RCC_OscConfig+0x240>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d005      	beq.n	8004906 <HAL_RCC_OscConfig+0x152>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d001      	beq.n	8004906 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e1c7      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004906:	4b3b      	ldr	r3, [pc, #236]	@ (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	4937      	ldr	r1, [pc, #220]	@ (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004916:	4313      	orrs	r3, r2
 8004918:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800491a:	e03a      	b.n	8004992 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d020      	beq.n	8004966 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004924:	4b34      	ldr	r3, [pc, #208]	@ (80049f8 <HAL_RCC_OscConfig+0x244>)
 8004926:	2201      	movs	r2, #1
 8004928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492a:	f7fe fc1f 	bl	800316c <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004930:	e008      	b.n	8004944 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004932:	f7fe fc1b 	bl	800316c <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b02      	cmp	r3, #2
 800493e:	d901      	bls.n	8004944 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004940:	2303      	movs	r3, #3
 8004942:	e1a8      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004944:	4b2b      	ldr	r3, [pc, #172]	@ (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d0f0      	beq.n	8004932 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004950:	4b28      	ldr	r3, [pc, #160]	@ (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	4925      	ldr	r1, [pc, #148]	@ (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004960:	4313      	orrs	r3, r2
 8004962:	600b      	str	r3, [r1, #0]
 8004964:	e015      	b.n	8004992 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004966:	4b24      	ldr	r3, [pc, #144]	@ (80049f8 <HAL_RCC_OscConfig+0x244>)
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496c:	f7fe fbfe 	bl	800316c <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004974:	f7fe fbfa 	bl	800316c <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e187      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004986:	4b1b      	ldr	r3, [pc, #108]	@ (80049f4 <HAL_RCC_OscConfig+0x240>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1f0      	bne.n	8004974 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0308 	and.w	r3, r3, #8
 800499a:	2b00      	cmp	r3, #0
 800499c:	d036      	beq.n	8004a0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d016      	beq.n	80049d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049a6:	4b15      	ldr	r3, [pc, #84]	@ (80049fc <HAL_RCC_OscConfig+0x248>)
 80049a8:	2201      	movs	r2, #1
 80049aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ac:	f7fe fbde 	bl	800316c <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049b4:	f7fe fbda 	bl	800316c <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e167      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049c6:	4b0b      	ldr	r3, [pc, #44]	@ (80049f4 <HAL_RCC_OscConfig+0x240>)
 80049c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0f0      	beq.n	80049b4 <HAL_RCC_OscConfig+0x200>
 80049d2:	e01b      	b.n	8004a0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049d4:	4b09      	ldr	r3, [pc, #36]	@ (80049fc <HAL_RCC_OscConfig+0x248>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049da:	f7fe fbc7 	bl	800316c <HAL_GetTick>
 80049de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049e0:	e00e      	b.n	8004a00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049e2:	f7fe fbc3 	bl	800316c <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d907      	bls.n	8004a00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e150      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
 80049f4:	40023800 	.word	0x40023800
 80049f8:	42470000 	.word	0x42470000
 80049fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a00:	4b88      	ldr	r3, [pc, #544]	@ (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004a02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1ea      	bne.n	80049e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 8097 	beq.w	8004b48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a1e:	4b81      	ldr	r3, [pc, #516]	@ (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10f      	bne.n	8004a4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60bb      	str	r3, [r7, #8]
 8004a2e:	4b7d      	ldr	r3, [pc, #500]	@ (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a32:	4a7c      	ldr	r2, [pc, #496]	@ (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a38:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a3a:	4b7a      	ldr	r3, [pc, #488]	@ (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a42:	60bb      	str	r3, [r7, #8]
 8004a44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a46:	2301      	movs	r3, #1
 8004a48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a4a:	4b77      	ldr	r3, [pc, #476]	@ (8004c28 <HAL_RCC_OscConfig+0x474>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d118      	bne.n	8004a88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a56:	4b74      	ldr	r3, [pc, #464]	@ (8004c28 <HAL_RCC_OscConfig+0x474>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a73      	ldr	r2, [pc, #460]	@ (8004c28 <HAL_RCC_OscConfig+0x474>)
 8004a5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a62:	f7fe fb83 	bl	800316c <HAL_GetTick>
 8004a66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a68:	e008      	b.n	8004a7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a6a:	f7fe fb7f 	bl	800316c <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e10c      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a7c:	4b6a      	ldr	r3, [pc, #424]	@ (8004c28 <HAL_RCC_OscConfig+0x474>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d0f0      	beq.n	8004a6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d106      	bne.n	8004a9e <HAL_RCC_OscConfig+0x2ea>
 8004a90:	4b64      	ldr	r3, [pc, #400]	@ (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a94:	4a63      	ldr	r2, [pc, #396]	@ (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004a96:	f043 0301 	orr.w	r3, r3, #1
 8004a9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a9c:	e01c      	b.n	8004ad8 <HAL_RCC_OscConfig+0x324>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	2b05      	cmp	r3, #5
 8004aa4:	d10c      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x30c>
 8004aa6:	4b5f      	ldr	r3, [pc, #380]	@ (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aaa:	4a5e      	ldr	r2, [pc, #376]	@ (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004aac:	f043 0304 	orr.w	r3, r3, #4
 8004ab0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ab2:	4b5c      	ldr	r3, [pc, #368]	@ (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ab6:	4a5b      	ldr	r2, [pc, #364]	@ (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004ab8:	f043 0301 	orr.w	r3, r3, #1
 8004abc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004abe:	e00b      	b.n	8004ad8 <HAL_RCC_OscConfig+0x324>
 8004ac0:	4b58      	ldr	r3, [pc, #352]	@ (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ac4:	4a57      	ldr	r2, [pc, #348]	@ (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004ac6:	f023 0301 	bic.w	r3, r3, #1
 8004aca:	6713      	str	r3, [r2, #112]	@ 0x70
 8004acc:	4b55      	ldr	r3, [pc, #340]	@ (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ad0:	4a54      	ldr	r2, [pc, #336]	@ (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004ad2:	f023 0304 	bic.w	r3, r3, #4
 8004ad6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d015      	beq.n	8004b0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae0:	f7fe fb44 	bl	800316c <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae6:	e00a      	b.n	8004afe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ae8:	f7fe fb40 	bl	800316c <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e0cb      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004afe:	4b49      	ldr	r3, [pc, #292]	@ (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0ee      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x334>
 8004b0a:	e014      	b.n	8004b36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b0c:	f7fe fb2e 	bl	800316c <HAL_GetTick>
 8004b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b12:	e00a      	b.n	8004b2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b14:	f7fe fb2a 	bl	800316c <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e0b5      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b2a:	4b3e      	ldr	r3, [pc, #248]	@ (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1ee      	bne.n	8004b14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b36:	7dfb      	ldrb	r3, [r7, #23]
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d105      	bne.n	8004b48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b3c:	4b39      	ldr	r3, [pc, #228]	@ (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b40:	4a38      	ldr	r2, [pc, #224]	@ (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004b42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b46:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f000 80a1 	beq.w	8004c94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b52:	4b34      	ldr	r3, [pc, #208]	@ (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f003 030c 	and.w	r3, r3, #12
 8004b5a:	2b08      	cmp	r3, #8
 8004b5c:	d05c      	beq.n	8004c18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	699b      	ldr	r3, [r3, #24]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d141      	bne.n	8004bea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b66:	4b31      	ldr	r3, [pc, #196]	@ (8004c2c <HAL_RCC_OscConfig+0x478>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b6c:	f7fe fafe 	bl	800316c <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b74:	f7fe fafa 	bl	800316c <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e087      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b86:	4b27      	ldr	r3, [pc, #156]	@ (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1f0      	bne.n	8004b74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	69da      	ldr	r2, [r3, #28]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba0:	019b      	lsls	r3, r3, #6
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ba8:	085b      	lsrs	r3, r3, #1
 8004baa:	3b01      	subs	r3, #1
 8004bac:	041b      	lsls	r3, r3, #16
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb4:	061b      	lsls	r3, r3, #24
 8004bb6:	491b      	ldr	r1, [pc, #108]	@ (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8004c2c <HAL_RCC_OscConfig+0x478>)
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc2:	f7fe fad3 	bl	800316c <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bca:	f7fe facf 	bl	800316c <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e05c      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bdc:	4b11      	ldr	r3, [pc, #68]	@ (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0f0      	beq.n	8004bca <HAL_RCC_OscConfig+0x416>
 8004be8:	e054      	b.n	8004c94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bea:	4b10      	ldr	r3, [pc, #64]	@ (8004c2c <HAL_RCC_OscConfig+0x478>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf0:	f7fe fabc 	bl	800316c <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bf8:	f7fe fab8 	bl	800316c <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e045      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c0a:	4b06      	ldr	r3, [pc, #24]	@ (8004c24 <HAL_RCC_OscConfig+0x470>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1f0      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x444>
 8004c16:	e03d      	b.n	8004c94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d107      	bne.n	8004c30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	e038      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
 8004c24:	40023800 	.word	0x40023800
 8004c28:	40007000 	.word	0x40007000
 8004c2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c30:	4b1b      	ldr	r3, [pc, #108]	@ (8004ca0 <HAL_RCC_OscConfig+0x4ec>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	699b      	ldr	r3, [r3, #24]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d028      	beq.n	8004c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d121      	bne.n	8004c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d11a      	bne.n	8004c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c5a:	68fa      	ldr	r2, [r7, #12]
 8004c5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004c60:	4013      	ands	r3, r2
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d111      	bne.n	8004c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c76:	085b      	lsrs	r3, r3, #1
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d107      	bne.n	8004c90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d001      	beq.n	8004c94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e000      	b.n	8004c96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40023800 	.word	0x40023800

08004ca4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e0cc      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cb8:	4b68      	ldr	r3, [pc, #416]	@ (8004e5c <HAL_RCC_ClockConfig+0x1b8>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0307 	and.w	r3, r3, #7
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d90c      	bls.n	8004ce0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cc6:	4b65      	ldr	r3, [pc, #404]	@ (8004e5c <HAL_RCC_ClockConfig+0x1b8>)
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	b2d2      	uxtb	r2, r2
 8004ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cce:	4b63      	ldr	r3, [pc, #396]	@ (8004e5c <HAL_RCC_ClockConfig+0x1b8>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	683a      	ldr	r2, [r7, #0]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	d001      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e0b8      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d020      	beq.n	8004d2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d005      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cf8:	4b59      	ldr	r3, [pc, #356]	@ (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	4a58      	ldr	r2, [pc, #352]	@ (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004d02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0308 	and.w	r3, r3, #8
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d005      	beq.n	8004d1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d10:	4b53      	ldr	r3, [pc, #332]	@ (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	4a52      	ldr	r2, [pc, #328]	@ (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004d16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004d1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d1c:	4b50      	ldr	r3, [pc, #320]	@ (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	494d      	ldr	r1, [pc, #308]	@ (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d044      	beq.n	8004dc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d107      	bne.n	8004d52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d42:	4b47      	ldr	r3, [pc, #284]	@ (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d119      	bne.n	8004d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e07f      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d003      	beq.n	8004d62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d5e:	2b03      	cmp	r3, #3
 8004d60:	d107      	bne.n	8004d72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d62:	4b3f      	ldr	r3, [pc, #252]	@ (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d109      	bne.n	8004d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e06f      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d72:	4b3b      	ldr	r3, [pc, #236]	@ (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0302 	and.w	r3, r3, #2
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e067      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d82:	4b37      	ldr	r3, [pc, #220]	@ (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f023 0203 	bic.w	r2, r3, #3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	4934      	ldr	r1, [pc, #208]	@ (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d94:	f7fe f9ea 	bl	800316c <HAL_GetTick>
 8004d98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d9a:	e00a      	b.n	8004db2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d9c:	f7fe f9e6 	bl	800316c <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e04f      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004db2:	4b2b      	ldr	r3, [pc, #172]	@ (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 020c 	and.w	r2, r3, #12
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d1eb      	bne.n	8004d9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dc4:	4b25      	ldr	r3, [pc, #148]	@ (8004e5c <HAL_RCC_ClockConfig+0x1b8>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0307 	and.w	r3, r3, #7
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d20c      	bcs.n	8004dec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dd2:	4b22      	ldr	r3, [pc, #136]	@ (8004e5c <HAL_RCC_ClockConfig+0x1b8>)
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dda:	4b20      	ldr	r3, [pc, #128]	@ (8004e5c <HAL_RCC_ClockConfig+0x1b8>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0307 	and.w	r3, r3, #7
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d001      	beq.n	8004dec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e032      	b.n	8004e52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0304 	and.w	r3, r3, #4
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d008      	beq.n	8004e0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004df8:	4b19      	ldr	r3, [pc, #100]	@ (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	4916      	ldr	r1, [pc, #88]	@ (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d009      	beq.n	8004e2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e16:	4b12      	ldr	r3, [pc, #72]	@ (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	490e      	ldr	r1, [pc, #56]	@ (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e2a:	f000 f821 	bl	8004e70 <HAL_RCC_GetSysClockFreq>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	4b0b      	ldr	r3, [pc, #44]	@ (8004e60 <HAL_RCC_ClockConfig+0x1bc>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	091b      	lsrs	r3, r3, #4
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	490a      	ldr	r1, [pc, #40]	@ (8004e64 <HAL_RCC_ClockConfig+0x1c0>)
 8004e3c:	5ccb      	ldrb	r3, [r1, r3]
 8004e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e42:	4a09      	ldr	r2, [pc, #36]	@ (8004e68 <HAL_RCC_ClockConfig+0x1c4>)
 8004e44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e46:	4b09      	ldr	r3, [pc, #36]	@ (8004e6c <HAL_RCC_ClockConfig+0x1c8>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fe f94a 	bl	80030e4 <HAL_InitTick>

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	40023c00 	.word	0x40023c00
 8004e60:	40023800 	.word	0x40023800
 8004e64:	0800f424 	.word	0x0800f424
 8004e68:	20000004 	.word	0x20000004
 8004e6c:	20000008 	.word	0x20000008

08004e70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e74:	b090      	sub	sp, #64	@ 0x40
 8004e76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e80:	2300      	movs	r3, #0
 8004e82:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e88:	4b59      	ldr	r3, [pc, #356]	@ (8004ff0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f003 030c 	and.w	r3, r3, #12
 8004e90:	2b08      	cmp	r3, #8
 8004e92:	d00d      	beq.n	8004eb0 <HAL_RCC_GetSysClockFreq+0x40>
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	f200 80a1 	bhi.w	8004fdc <HAL_RCC_GetSysClockFreq+0x16c>
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d002      	beq.n	8004ea4 <HAL_RCC_GetSysClockFreq+0x34>
 8004e9e:	2b04      	cmp	r3, #4
 8004ea0:	d003      	beq.n	8004eaa <HAL_RCC_GetSysClockFreq+0x3a>
 8004ea2:	e09b      	b.n	8004fdc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ea4:	4b53      	ldr	r3, [pc, #332]	@ (8004ff4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004ea8:	e09b      	b.n	8004fe2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004eaa:	4b53      	ldr	r3, [pc, #332]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004eac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004eae:	e098      	b.n	8004fe2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004eb0:	4b4f      	ldr	r3, [pc, #316]	@ (8004ff0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004eb8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004eba:	4b4d      	ldr	r3, [pc, #308]	@ (8004ff0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d028      	beq.n	8004f18 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ec6:	4b4a      	ldr	r3, [pc, #296]	@ (8004ff0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	099b      	lsrs	r3, r3, #6
 8004ecc:	2200      	movs	r2, #0
 8004ece:	623b      	str	r3, [r7, #32]
 8004ed0:	627a      	str	r2, [r7, #36]	@ 0x24
 8004ed2:	6a3b      	ldr	r3, [r7, #32]
 8004ed4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004ed8:	2100      	movs	r1, #0
 8004eda:	4b47      	ldr	r3, [pc, #284]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004edc:	fb03 f201 	mul.w	r2, r3, r1
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	fb00 f303 	mul.w	r3, r0, r3
 8004ee6:	4413      	add	r3, r2
 8004ee8:	4a43      	ldr	r2, [pc, #268]	@ (8004ff8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004eea:	fba0 1202 	umull	r1, r2, r0, r2
 8004eee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ef0:	460a      	mov	r2, r1
 8004ef2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004ef4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ef6:	4413      	add	r3, r2
 8004ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004efc:	2200      	movs	r2, #0
 8004efe:	61bb      	str	r3, [r7, #24]
 8004f00:	61fa      	str	r2, [r7, #28]
 8004f02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004f0a:	f7fb fe55 	bl	8000bb8 <__aeabi_uldivmod>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	460b      	mov	r3, r1
 8004f12:	4613      	mov	r3, r2
 8004f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f16:	e053      	b.n	8004fc0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f18:	4b35      	ldr	r3, [pc, #212]	@ (8004ff0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	099b      	lsrs	r3, r3, #6
 8004f1e:	2200      	movs	r2, #0
 8004f20:	613b      	str	r3, [r7, #16]
 8004f22:	617a      	str	r2, [r7, #20]
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004f2a:	f04f 0b00 	mov.w	fp, #0
 8004f2e:	4652      	mov	r2, sl
 8004f30:	465b      	mov	r3, fp
 8004f32:	f04f 0000 	mov.w	r0, #0
 8004f36:	f04f 0100 	mov.w	r1, #0
 8004f3a:	0159      	lsls	r1, r3, #5
 8004f3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f40:	0150      	lsls	r0, r2, #5
 8004f42:	4602      	mov	r2, r0
 8004f44:	460b      	mov	r3, r1
 8004f46:	ebb2 080a 	subs.w	r8, r2, sl
 8004f4a:	eb63 090b 	sbc.w	r9, r3, fp
 8004f4e:	f04f 0200 	mov.w	r2, #0
 8004f52:	f04f 0300 	mov.w	r3, #0
 8004f56:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004f5a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004f5e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004f62:	ebb2 0408 	subs.w	r4, r2, r8
 8004f66:	eb63 0509 	sbc.w	r5, r3, r9
 8004f6a:	f04f 0200 	mov.w	r2, #0
 8004f6e:	f04f 0300 	mov.w	r3, #0
 8004f72:	00eb      	lsls	r3, r5, #3
 8004f74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f78:	00e2      	lsls	r2, r4, #3
 8004f7a:	4614      	mov	r4, r2
 8004f7c:	461d      	mov	r5, r3
 8004f7e:	eb14 030a 	adds.w	r3, r4, sl
 8004f82:	603b      	str	r3, [r7, #0]
 8004f84:	eb45 030b 	adc.w	r3, r5, fp
 8004f88:	607b      	str	r3, [r7, #4]
 8004f8a:	f04f 0200 	mov.w	r2, #0
 8004f8e:	f04f 0300 	mov.w	r3, #0
 8004f92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f96:	4629      	mov	r1, r5
 8004f98:	028b      	lsls	r3, r1, #10
 8004f9a:	4621      	mov	r1, r4
 8004f9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004fa0:	4621      	mov	r1, r4
 8004fa2:	028a      	lsls	r2, r1, #10
 8004fa4:	4610      	mov	r0, r2
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004faa:	2200      	movs	r2, #0
 8004fac:	60bb      	str	r3, [r7, #8]
 8004fae:	60fa      	str	r2, [r7, #12]
 8004fb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fb4:	f7fb fe00 	bl	8000bb8 <__aeabi_uldivmod>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	460b      	mov	r3, r1
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ff0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	0c1b      	lsrs	r3, r3, #16
 8004fc6:	f003 0303 	and.w	r3, r3, #3
 8004fca:	3301      	adds	r3, #1
 8004fcc:	005b      	lsls	r3, r3, #1
 8004fce:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004fd0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004fda:	e002      	b.n	8004fe2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fdc:	4b05      	ldr	r3, [pc, #20]	@ (8004ff4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004fde:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004fe0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3740      	adds	r7, #64	@ 0x40
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fee:	bf00      	nop
 8004ff0:	40023800 	.word	0x40023800
 8004ff4:	00f42400 	.word	0x00f42400
 8004ff8:	017d7840 	.word	0x017d7840

08004ffc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005000:	4b03      	ldr	r3, [pc, #12]	@ (8005010 <HAL_RCC_GetHCLKFreq+0x14>)
 8005002:	681b      	ldr	r3, [r3, #0]
}
 8005004:	4618      	mov	r0, r3
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	20000004 	.word	0x20000004

08005014 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005018:	f7ff fff0 	bl	8004ffc <HAL_RCC_GetHCLKFreq>
 800501c:	4602      	mov	r2, r0
 800501e:	4b05      	ldr	r3, [pc, #20]	@ (8005034 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	0a9b      	lsrs	r3, r3, #10
 8005024:	f003 0307 	and.w	r3, r3, #7
 8005028:	4903      	ldr	r1, [pc, #12]	@ (8005038 <HAL_RCC_GetPCLK1Freq+0x24>)
 800502a:	5ccb      	ldrb	r3, [r1, r3]
 800502c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005030:	4618      	mov	r0, r3
 8005032:	bd80      	pop	{r7, pc}
 8005034:	40023800 	.word	0x40023800
 8005038:	0800f434 	.word	0x0800f434

0800503c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005040:	f7ff ffdc 	bl	8004ffc <HAL_RCC_GetHCLKFreq>
 8005044:	4602      	mov	r2, r0
 8005046:	4b05      	ldr	r3, [pc, #20]	@ (800505c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	0b5b      	lsrs	r3, r3, #13
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	4903      	ldr	r1, [pc, #12]	@ (8005060 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005052:	5ccb      	ldrb	r3, [r1, r3]
 8005054:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005058:	4618      	mov	r0, r3
 800505a:	bd80      	pop	{r7, pc}
 800505c:	40023800 	.word	0x40023800
 8005060:	0800f434 	.word	0x0800f434

08005064 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e041      	b.n	80050fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d106      	bne.n	8005090 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7fd fd12 	bl	8002ab4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3304      	adds	r3, #4
 80050a0:	4619      	mov	r1, r3
 80050a2:	4610      	mov	r0, r2
 80050a4:	f001 fa62 	bl	800656c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b082      	sub	sp, #8
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d101      	bne.n	8005114 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e041      	b.n	8005198 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d106      	bne.n	800512e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f839 	bl	80051a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2202      	movs	r2, #2
 8005132:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	3304      	adds	r3, #4
 800513e:	4619      	mov	r1, r3
 8005140:	4610      	mov	r0, r2
 8005142:	f001 fa13 	bl	800656c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d109      	bne.n	80051d8 <HAL_TIM_PWM_Start+0x24>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	bf14      	ite	ne
 80051d0:	2301      	movne	r3, #1
 80051d2:	2300      	moveq	r3, #0
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	e022      	b.n	800521e <HAL_TIM_PWM_Start+0x6a>
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	2b04      	cmp	r3, #4
 80051dc:	d109      	bne.n	80051f2 <HAL_TIM_PWM_Start+0x3e>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	bf14      	ite	ne
 80051ea:	2301      	movne	r3, #1
 80051ec:	2300      	moveq	r3, #0
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	e015      	b.n	800521e <HAL_TIM_PWM_Start+0x6a>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b08      	cmp	r3, #8
 80051f6:	d109      	bne.n	800520c <HAL_TIM_PWM_Start+0x58>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b01      	cmp	r3, #1
 8005202:	bf14      	ite	ne
 8005204:	2301      	movne	r3, #1
 8005206:	2300      	moveq	r3, #0
 8005208:	b2db      	uxtb	r3, r3
 800520a:	e008      	b.n	800521e <HAL_TIM_PWM_Start+0x6a>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b01      	cmp	r3, #1
 8005216:	bf14      	ite	ne
 8005218:	2301      	movne	r3, #1
 800521a:	2300      	moveq	r3, #0
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e068      	b.n	80052f8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d104      	bne.n	8005236 <HAL_TIM_PWM_Start+0x82>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2202      	movs	r2, #2
 8005230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005234:	e013      	b.n	800525e <HAL_TIM_PWM_Start+0xaa>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	2b04      	cmp	r3, #4
 800523a:	d104      	bne.n	8005246 <HAL_TIM_PWM_Start+0x92>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005244:	e00b      	b.n	800525e <HAL_TIM_PWM_Start+0xaa>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b08      	cmp	r3, #8
 800524a:	d104      	bne.n	8005256 <HAL_TIM_PWM_Start+0xa2>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005254:	e003      	b.n	800525e <HAL_TIM_PWM_Start+0xaa>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2202      	movs	r2, #2
 800525a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2201      	movs	r2, #1
 8005264:	6839      	ldr	r1, [r7, #0]
 8005266:	4618      	mov	r0, r3
 8005268:	f001 fd50 	bl	8006d0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a23      	ldr	r2, [pc, #140]	@ (8005300 <HAL_TIM_PWM_Start+0x14c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d107      	bne.n	8005286 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005284:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a1d      	ldr	r2, [pc, #116]	@ (8005300 <HAL_TIM_PWM_Start+0x14c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d018      	beq.n	80052c2 <HAL_TIM_PWM_Start+0x10e>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005298:	d013      	beq.n	80052c2 <HAL_TIM_PWM_Start+0x10e>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a19      	ldr	r2, [pc, #100]	@ (8005304 <HAL_TIM_PWM_Start+0x150>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d00e      	beq.n	80052c2 <HAL_TIM_PWM_Start+0x10e>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a17      	ldr	r2, [pc, #92]	@ (8005308 <HAL_TIM_PWM_Start+0x154>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d009      	beq.n	80052c2 <HAL_TIM_PWM_Start+0x10e>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a16      	ldr	r2, [pc, #88]	@ (800530c <HAL_TIM_PWM_Start+0x158>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d004      	beq.n	80052c2 <HAL_TIM_PWM_Start+0x10e>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a14      	ldr	r2, [pc, #80]	@ (8005310 <HAL_TIM_PWM_Start+0x15c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d111      	bne.n	80052e6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f003 0307 	and.w	r3, r3, #7
 80052cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2b06      	cmp	r3, #6
 80052d2:	d010      	beq.n	80052f6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0201 	orr.w	r2, r2, #1
 80052e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052e4:	e007      	b.n	80052f6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f042 0201 	orr.w	r2, r2, #1
 80052f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40010000 	.word	0x40010000
 8005304:	40000400 	.word	0x40000400
 8005308:	40000800 	.word	0x40000800
 800530c:	40000c00 	.word	0x40000c00
 8005310:	40014000 	.word	0x40014000

08005314 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2200      	movs	r2, #0
 8005324:	6839      	ldr	r1, [r7, #0]
 8005326:	4618      	mov	r0, r3
 8005328:	f001 fcf0 	bl	8006d0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a29      	ldr	r2, [pc, #164]	@ (80053d8 <HAL_TIM_PWM_Stop+0xc4>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d117      	bne.n	8005366 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6a1a      	ldr	r2, [r3, #32]
 800533c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005340:	4013      	ands	r3, r2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10f      	bne.n	8005366 <HAL_TIM_PWM_Stop+0x52>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6a1a      	ldr	r2, [r3, #32]
 800534c:	f240 4344 	movw	r3, #1092	@ 0x444
 8005350:	4013      	ands	r3, r2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d107      	bne.n	8005366 <HAL_TIM_PWM_Stop+0x52>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005364:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6a1a      	ldr	r2, [r3, #32]
 800536c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005370:	4013      	ands	r3, r2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10f      	bne.n	8005396 <HAL_TIM_PWM_Stop+0x82>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6a1a      	ldr	r2, [r3, #32]
 800537c:	f240 4344 	movw	r3, #1092	@ 0x444
 8005380:	4013      	ands	r3, r2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d107      	bne.n	8005396 <HAL_TIM_PWM_Stop+0x82>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0201 	bic.w	r2, r2, #1
 8005394:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d104      	bne.n	80053a6 <HAL_TIM_PWM_Stop+0x92>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053a4:	e013      	b.n	80053ce <HAL_TIM_PWM_Stop+0xba>
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	d104      	bne.n	80053b6 <HAL_TIM_PWM_Stop+0xa2>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053b4:	e00b      	b.n	80053ce <HAL_TIM_PWM_Stop+0xba>
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b08      	cmp	r3, #8
 80053ba:	d104      	bne.n	80053c6 <HAL_TIM_PWM_Stop+0xb2>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053c4:	e003      	b.n	80053ce <HAL_TIM_PWM_Stop+0xba>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	40010000 	.word	0x40010000

080053dc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e041      	b.n	8005472 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d106      	bne.n	8005408 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f839 	bl	800547a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	3304      	adds	r3, #4
 8005418:	4619      	mov	r1, r3
 800541a:	4610      	mov	r0, r2
 800541c:	f001 f8a6 	bl	800656c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005482:	bf00      	nop
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
	...

08005490 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800549a:	2300      	movs	r3, #0
 800549c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d104      	bne.n	80054ae <HAL_TIM_IC_Start_IT+0x1e>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	e013      	b.n	80054d6 <HAL_TIM_IC_Start_IT+0x46>
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	2b04      	cmp	r3, #4
 80054b2:	d104      	bne.n	80054be <HAL_TIM_IC_Start_IT+0x2e>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	e00b      	b.n	80054d6 <HAL_TIM_IC_Start_IT+0x46>
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	2b08      	cmp	r3, #8
 80054c2:	d104      	bne.n	80054ce <HAL_TIM_IC_Start_IT+0x3e>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	e003      	b.n	80054d6 <HAL_TIM_IC_Start_IT+0x46>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d104      	bne.n	80054e8 <HAL_TIM_IC_Start_IT+0x58>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	e013      	b.n	8005510 <HAL_TIM_IC_Start_IT+0x80>
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	d104      	bne.n	80054f8 <HAL_TIM_IC_Start_IT+0x68>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	e00b      	b.n	8005510 <HAL_TIM_IC_Start_IT+0x80>
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	2b08      	cmp	r3, #8
 80054fc:	d104      	bne.n	8005508 <HAL_TIM_IC_Start_IT+0x78>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005504:	b2db      	uxtb	r3, r3
 8005506:	e003      	b.n	8005510 <HAL_TIM_IC_Start_IT+0x80>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800550e:	b2db      	uxtb	r3, r3
 8005510:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005512:	7bbb      	ldrb	r3, [r7, #14]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d102      	bne.n	800551e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005518:	7b7b      	ldrb	r3, [r7, #13]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d001      	beq.n	8005522 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e0c2      	b.n	80056a8 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d104      	bne.n	8005532 <HAL_TIM_IC_Start_IT+0xa2>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005530:	e013      	b.n	800555a <HAL_TIM_IC_Start_IT+0xca>
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	2b04      	cmp	r3, #4
 8005536:	d104      	bne.n	8005542 <HAL_TIM_IC_Start_IT+0xb2>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005540:	e00b      	b.n	800555a <HAL_TIM_IC_Start_IT+0xca>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b08      	cmp	r3, #8
 8005546:	d104      	bne.n	8005552 <HAL_TIM_IC_Start_IT+0xc2>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005550:	e003      	b.n	800555a <HAL_TIM_IC_Start_IT+0xca>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2202      	movs	r2, #2
 8005556:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d104      	bne.n	800556a <HAL_TIM_IC_Start_IT+0xda>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005568:	e013      	b.n	8005592 <HAL_TIM_IC_Start_IT+0x102>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b04      	cmp	r3, #4
 800556e:	d104      	bne.n	800557a <HAL_TIM_IC_Start_IT+0xea>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005578:	e00b      	b.n	8005592 <HAL_TIM_IC_Start_IT+0x102>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b08      	cmp	r3, #8
 800557e:	d104      	bne.n	800558a <HAL_TIM_IC_Start_IT+0xfa>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005588:	e003      	b.n	8005592 <HAL_TIM_IC_Start_IT+0x102>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2202      	movs	r2, #2
 800558e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b0c      	cmp	r3, #12
 8005596:	d841      	bhi.n	800561c <HAL_TIM_IC_Start_IT+0x18c>
 8005598:	a201      	add	r2, pc, #4	@ (adr r2, 80055a0 <HAL_TIM_IC_Start_IT+0x110>)
 800559a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559e:	bf00      	nop
 80055a0:	080055d5 	.word	0x080055d5
 80055a4:	0800561d 	.word	0x0800561d
 80055a8:	0800561d 	.word	0x0800561d
 80055ac:	0800561d 	.word	0x0800561d
 80055b0:	080055e7 	.word	0x080055e7
 80055b4:	0800561d 	.word	0x0800561d
 80055b8:	0800561d 	.word	0x0800561d
 80055bc:	0800561d 	.word	0x0800561d
 80055c0:	080055f9 	.word	0x080055f9
 80055c4:	0800561d 	.word	0x0800561d
 80055c8:	0800561d 	.word	0x0800561d
 80055cc:	0800561d 	.word	0x0800561d
 80055d0:	0800560b 	.word	0x0800560b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f042 0202 	orr.w	r2, r2, #2
 80055e2:	60da      	str	r2, [r3, #12]
      break;
 80055e4:	e01d      	b.n	8005622 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f042 0204 	orr.w	r2, r2, #4
 80055f4:	60da      	str	r2, [r3, #12]
      break;
 80055f6:	e014      	b.n	8005622 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68da      	ldr	r2, [r3, #12]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f042 0208 	orr.w	r2, r2, #8
 8005606:	60da      	str	r2, [r3, #12]
      break;
 8005608:	e00b      	b.n	8005622 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f042 0210 	orr.w	r2, r2, #16
 8005618:	60da      	str	r2, [r3, #12]
      break;
 800561a:	e002      	b.n	8005622 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	73fb      	strb	r3, [r7, #15]
      break;
 8005620:	bf00      	nop
  }

  if (status == HAL_OK)
 8005622:	7bfb      	ldrb	r3, [r7, #15]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d13e      	bne.n	80056a6 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2201      	movs	r2, #1
 800562e:	6839      	ldr	r1, [r7, #0]
 8005630:	4618      	mov	r0, r3
 8005632:	f001 fb6b 	bl	8006d0c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a1d      	ldr	r2, [pc, #116]	@ (80056b0 <HAL_TIM_IC_Start_IT+0x220>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d018      	beq.n	8005672 <HAL_TIM_IC_Start_IT+0x1e2>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005648:	d013      	beq.n	8005672 <HAL_TIM_IC_Start_IT+0x1e2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a19      	ldr	r2, [pc, #100]	@ (80056b4 <HAL_TIM_IC_Start_IT+0x224>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d00e      	beq.n	8005672 <HAL_TIM_IC_Start_IT+0x1e2>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a17      	ldr	r2, [pc, #92]	@ (80056b8 <HAL_TIM_IC_Start_IT+0x228>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d009      	beq.n	8005672 <HAL_TIM_IC_Start_IT+0x1e2>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a16      	ldr	r2, [pc, #88]	@ (80056bc <HAL_TIM_IC_Start_IT+0x22c>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d004      	beq.n	8005672 <HAL_TIM_IC_Start_IT+0x1e2>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a14      	ldr	r2, [pc, #80]	@ (80056c0 <HAL_TIM_IC_Start_IT+0x230>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d111      	bne.n	8005696 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f003 0307 	and.w	r3, r3, #7
 800567c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	2b06      	cmp	r3, #6
 8005682:	d010      	beq.n	80056a6 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f042 0201 	orr.w	r2, r2, #1
 8005692:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005694:	e007      	b.n	80056a6 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f042 0201 	orr.w	r2, r2, #1
 80056a4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80056a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	40010000 	.word	0x40010000
 80056b4:	40000400 	.word	0x40000400
 80056b8:	40000800 	.word	0x40000800
 80056bc:	40000c00 	.word	0x40000c00
 80056c0:	40014000 	.word	0x40014000

080056c4 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056ce:	2300      	movs	r3, #0
 80056d0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b0c      	cmp	r3, #12
 80056d6:	d841      	bhi.n	800575c <HAL_TIM_IC_Stop_IT+0x98>
 80056d8:	a201      	add	r2, pc, #4	@ (adr r2, 80056e0 <HAL_TIM_IC_Stop_IT+0x1c>)
 80056da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056de:	bf00      	nop
 80056e0:	08005715 	.word	0x08005715
 80056e4:	0800575d 	.word	0x0800575d
 80056e8:	0800575d 	.word	0x0800575d
 80056ec:	0800575d 	.word	0x0800575d
 80056f0:	08005727 	.word	0x08005727
 80056f4:	0800575d 	.word	0x0800575d
 80056f8:	0800575d 	.word	0x0800575d
 80056fc:	0800575d 	.word	0x0800575d
 8005700:	08005739 	.word	0x08005739
 8005704:	0800575d 	.word	0x0800575d
 8005708:	0800575d 	.word	0x0800575d
 800570c:	0800575d 	.word	0x0800575d
 8005710:	0800574b 	.word	0x0800574b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f022 0202 	bic.w	r2, r2, #2
 8005722:	60da      	str	r2, [r3, #12]
      break;
 8005724:	e01d      	b.n	8005762 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68da      	ldr	r2, [r3, #12]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 0204 	bic.w	r2, r2, #4
 8005734:	60da      	str	r2, [r3, #12]
      break;
 8005736:	e014      	b.n	8005762 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68da      	ldr	r2, [r3, #12]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f022 0208 	bic.w	r2, r2, #8
 8005746:	60da      	str	r2, [r3, #12]
      break;
 8005748:	e00b      	b.n	8005762 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	68da      	ldr	r2, [r3, #12]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 0210 	bic.w	r2, r2, #16
 8005758:	60da      	str	r2, [r3, #12]
      break;
 800575a:	e002      	b.n	8005762 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	73fb      	strb	r3, [r7, #15]
      break;
 8005760:	bf00      	nop
  }

  if (status == HAL_OK)
 8005762:	7bfb      	ldrb	r3, [r7, #15]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d156      	bne.n	8005816 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2200      	movs	r2, #0
 800576e:	6839      	ldr	r1, [r7, #0]
 8005770:	4618      	mov	r0, r3
 8005772:	f001 facb 	bl	8006d0c <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6a1a      	ldr	r2, [r3, #32]
 800577c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005780:	4013      	ands	r3, r2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10f      	bne.n	80057a6 <HAL_TIM_IC_Stop_IT+0xe2>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6a1a      	ldr	r2, [r3, #32]
 800578c:	f240 4344 	movw	r3, #1092	@ 0x444
 8005790:	4013      	ands	r3, r2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d107      	bne.n	80057a6 <HAL_TIM_IC_Stop_IT+0xe2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0201 	bic.w	r2, r2, #1
 80057a4:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d104      	bne.n	80057b6 <HAL_TIM_IC_Stop_IT+0xf2>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057b4:	e013      	b.n	80057de <HAL_TIM_IC_Stop_IT+0x11a>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	2b04      	cmp	r3, #4
 80057ba:	d104      	bne.n	80057c6 <HAL_TIM_IC_Stop_IT+0x102>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057c4:	e00b      	b.n	80057de <HAL_TIM_IC_Stop_IT+0x11a>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b08      	cmp	r3, #8
 80057ca:	d104      	bne.n	80057d6 <HAL_TIM_IC_Stop_IT+0x112>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057d4:	e003      	b.n	80057de <HAL_TIM_IC_Stop_IT+0x11a>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d104      	bne.n	80057ee <HAL_TIM_IC_Stop_IT+0x12a>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057ec:	e013      	b.n	8005816 <HAL_TIM_IC_Stop_IT+0x152>
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	2b04      	cmp	r3, #4
 80057f2:	d104      	bne.n	80057fe <HAL_TIM_IC_Stop_IT+0x13a>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057fc:	e00b      	b.n	8005816 <HAL_TIM_IC_Stop_IT+0x152>
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	2b08      	cmp	r3, #8
 8005802:	d104      	bne.n	800580e <HAL_TIM_IC_Stop_IT+0x14a>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800580c:	e003      	b.n	8005816 <HAL_TIM_IC_Stop_IT+0x152>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 8005816:	7bfb      	ldrb	r3, [r7, #15]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d101      	bne.n	8005834 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e097      	b.n	8005964 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800583a:	b2db      	uxtb	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d106      	bne.n	800584e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2200      	movs	r2, #0
 8005844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f7fd f9c5 	bl	8002bd8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2202      	movs	r2, #2
 8005852:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	6812      	ldr	r2, [r2, #0]
 8005860:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005864:	f023 0307 	bic.w	r3, r3, #7
 8005868:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	3304      	adds	r3, #4
 8005872:	4619      	mov	r1, r3
 8005874:	4610      	mov	r0, r2
 8005876:	f000 fe79 	bl	800656c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6a1b      	ldr	r3, [r3, #32]
 8005890:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	4313      	orrs	r3, r2
 800589a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058a2:	f023 0303 	bic.w	r3, r3, #3
 80058a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	021b      	lsls	r3, r3, #8
 80058b2:	4313      	orrs	r3, r2
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80058c0:	f023 030c 	bic.w	r3, r3, #12
 80058c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80058cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	68da      	ldr	r2, [r3, #12]
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	021b      	lsls	r3, r3, #8
 80058dc:	4313      	orrs	r3, r2
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	011a      	lsls	r2, r3, #4
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	031b      	lsls	r3, r3, #12
 80058f0:	4313      	orrs	r3, r2
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80058fe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005906:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	011b      	lsls	r3, r3, #4
 8005912:	4313      	orrs	r3, r2
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	4313      	orrs	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3718      	adds	r7, #24
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800597c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005984:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800598c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005994:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d110      	bne.n	80059be <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800599c:	7bfb      	ldrb	r3, [r7, #15]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d102      	bne.n	80059a8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80059a2:	7b7b      	ldrb	r3, [r7, #13]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d001      	beq.n	80059ac <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e069      	b.n	8005a80 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059bc:	e031      	b.n	8005a22 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	2b04      	cmp	r3, #4
 80059c2:	d110      	bne.n	80059e6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80059c4:	7bbb      	ldrb	r3, [r7, #14]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d102      	bne.n	80059d0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80059ca:	7b3b      	ldrb	r3, [r7, #12]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d001      	beq.n	80059d4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e055      	b.n	8005a80 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2202      	movs	r2, #2
 80059e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059e4:	e01d      	b.n	8005a22 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059e6:	7bfb      	ldrb	r3, [r7, #15]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d108      	bne.n	80059fe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80059ec:	7bbb      	ldrb	r3, [r7, #14]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d105      	bne.n	80059fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059f2:	7b7b      	ldrb	r3, [r7, #13]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d102      	bne.n	80059fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80059f8:	7b3b      	ldrb	r3, [r7, #12]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d001      	beq.n	8005a02 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e03e      	b.n	8005a80 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2202      	movs	r2, #2
 8005a06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2202      	movs	r2, #2
 8005a16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d003      	beq.n	8005a30 <HAL_TIM_Encoder_Start+0xc4>
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	d008      	beq.n	8005a40 <HAL_TIM_Encoder_Start+0xd4>
 8005a2e:	e00f      	b.n	8005a50 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	2201      	movs	r2, #1
 8005a36:	2100      	movs	r1, #0
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f001 f967 	bl	8006d0c <TIM_CCxChannelCmd>
      break;
 8005a3e:	e016      	b.n	8005a6e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2201      	movs	r2, #1
 8005a46:	2104      	movs	r1, #4
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f001 f95f 	bl	8006d0c <TIM_CCxChannelCmd>
      break;
 8005a4e:	e00e      	b.n	8005a6e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2201      	movs	r2, #1
 8005a56:	2100      	movs	r1, #0
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f001 f957 	bl	8006d0c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2201      	movs	r2, #1
 8005a64:	2104      	movs	r1, #4
 8005a66:	4618      	mov	r0, r3
 8005a68:	f001 f950 	bl	8006d0c <TIM_CCxChannelCmd>
      break;
 8005a6c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f042 0201 	orr.w	r2, r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <HAL_TIM_Encoder_Stop+0x18>
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	2b04      	cmp	r3, #4
 8005a9c:	d008      	beq.n	8005ab0 <HAL_TIM_Encoder_Stop+0x28>
 8005a9e:	e00f      	b.n	8005ac0 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f001 f92f 	bl	8006d0c <TIM_CCxChannelCmd>
      break;
 8005aae:	e016      	b.n	8005ade <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	2104      	movs	r1, #4
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f001 f927 	bl	8006d0c <TIM_CCxChannelCmd>
      break;
 8005abe:	e00e      	b.n	8005ade <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f001 f91f 	bl	8006d0c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	2104      	movs	r1, #4
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f001 f918 	bl	8006d0c <TIM_CCxChannelCmd>
      break;
 8005adc:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	6a1a      	ldr	r2, [r3, #32]
 8005ae4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005ae8:	4013      	ands	r3, r2
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10f      	bne.n	8005b0e <HAL_TIM_Encoder_Stop+0x86>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	6a1a      	ldr	r2, [r3, #32]
 8005af4:	f240 4344 	movw	r3, #1092	@ 0x444
 8005af8:	4013      	ands	r3, r2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d107      	bne.n	8005b0e <HAL_TIM_Encoder_Stop+0x86>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f022 0201 	bic.w	r2, r2, #1
 8005b0c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <HAL_TIM_Encoder_Stop+0x92>
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	2b04      	cmp	r3, #4
 8005b18:	d138      	bne.n	8005b8c <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d104      	bne.n	8005b2a <HAL_TIM_Encoder_Stop+0xa2>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b28:	e013      	b.n	8005b52 <HAL_TIM_Encoder_Stop+0xca>
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b04      	cmp	r3, #4
 8005b2e:	d104      	bne.n	8005b3a <HAL_TIM_Encoder_Stop+0xb2>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b38:	e00b      	b.n	8005b52 <HAL_TIM_Encoder_Stop+0xca>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b08      	cmp	r3, #8
 8005b3e:	d104      	bne.n	8005b4a <HAL_TIM_Encoder_Stop+0xc2>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b48:	e003      	b.n	8005b52 <HAL_TIM_Encoder_Stop+0xca>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d104      	bne.n	8005b62 <HAL_TIM_Encoder_Stop+0xda>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b60:	e024      	b.n	8005bac <HAL_TIM_Encoder_Stop+0x124>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b04      	cmp	r3, #4
 8005b66:	d104      	bne.n	8005b72 <HAL_TIM_Encoder_Stop+0xea>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b70:	e01c      	b.n	8005bac <HAL_TIM_Encoder_Stop+0x124>
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2b08      	cmp	r3, #8
 8005b76:	d104      	bne.n	8005b82 <HAL_TIM_Encoder_Stop+0xfa>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b80:	e014      	b.n	8005bac <HAL_TIM_Encoder_Stop+0x124>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b8a:	e00f      	b.n	8005bac <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b084      	sub	sp, #16
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
 8005bbe:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005bc6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005bce:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005bd6:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005bde:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d110      	bne.n	8005c08 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005be6:	7bfb      	ldrb	r3, [r7, #15]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d102      	bne.n	8005bf2 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bec:	7b7b      	ldrb	r3, [r7, #13]
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d001      	beq.n	8005bf6 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e089      	b.n	8005d0a <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2202      	movs	r2, #2
 8005c02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c06:	e031      	b.n	8005c6c <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	2b04      	cmp	r3, #4
 8005c0c:	d110      	bne.n	8005c30 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c0e:	7bbb      	ldrb	r3, [r7, #14]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d102      	bne.n	8005c1a <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c14:	7b3b      	ldrb	r3, [r7, #12]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d001      	beq.n	8005c1e <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e075      	b.n	8005d0a <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2202      	movs	r2, #2
 8005c22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2202      	movs	r2, #2
 8005c2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c2e:	e01d      	b.n	8005c6c <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d108      	bne.n	8005c48 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c36:	7bbb      	ldrb	r3, [r7, #14]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d105      	bne.n	8005c48 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005c3c:	7b7b      	ldrb	r3, [r7, #13]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d102      	bne.n	8005c48 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005c42:	7b3b      	ldrb	r3, [r7, #12]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d001      	beq.n	8005c4c <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e05e      	b.n	8005d0a <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2202      	movs	r2, #2
 8005c58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2202      	movs	r2, #2
 8005c68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <HAL_TIM_Encoder_Start_IT+0xc4>
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b04      	cmp	r3, #4
 8005c76:	d010      	beq.n	8005c9a <HAL_TIM_Encoder_Start_IT+0xe4>
 8005c78:	e01f      	b.n	8005cba <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	2100      	movs	r1, #0
 8005c82:	4618      	mov	r0, r3
 8005c84:	f001 f842 	bl	8006d0c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68da      	ldr	r2, [r3, #12]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f042 0202 	orr.w	r2, r2, #2
 8005c96:	60da      	str	r2, [r3, #12]
      break;
 8005c98:	e02e      	b.n	8005cf8 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	2104      	movs	r1, #4
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f001 f832 	bl	8006d0c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68da      	ldr	r2, [r3, #12]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f042 0204 	orr.w	r2, r2, #4
 8005cb6:	60da      	str	r2, [r3, #12]
      break;
 8005cb8:	e01e      	b.n	8005cf8 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f001 f822 	bl	8006d0c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	2104      	movs	r1, #4
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f001 f81b 	bl	8006d0c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68da      	ldr	r2, [r3, #12]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f042 0202 	orr.w	r2, r2, #2
 8005ce4:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68da      	ldr	r2, [r3, #12]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f042 0204 	orr.w	r2, r2, #4
 8005cf4:	60da      	str	r2, [r3, #12]
      break;
 8005cf6:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f042 0201 	orr.w	r2, r2, #1
 8005d06:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b082      	sub	sp, #8
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
 8005d1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10f      	bne.n	8005d42 <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2200      	movs	r2, #0
 8005d28:	2100      	movs	r1, #0
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 ffee 	bl	8006d0c <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 0202 	bic.w	r2, r2, #2
 8005d3e:	60da      	str	r2, [r3, #12]
 8005d40:	e030      	b.n	8005da4 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b04      	cmp	r3, #4
 8005d46:	d10f      	bne.n	8005d68 <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	2104      	movs	r1, #4
 8005d50:	4618      	mov	r0, r3
 8005d52:	f000 ffdb 	bl	8006d0c <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68da      	ldr	r2, [r3, #12]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 0204 	bic.w	r2, r2, #4
 8005d64:	60da      	str	r2, [r3, #12]
 8005d66:	e01d      	b.n	8005da4 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	2100      	movs	r1, #0
 8005d70:	4618      	mov	r0, r3
 8005d72:	f000 ffcb 	bl	8006d0c <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	2104      	movs	r1, #4
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 ffc4 	bl	8006d0c <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68da      	ldr	r2, [r3, #12]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 0202 	bic.w	r2, r2, #2
 8005d92:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68da      	ldr	r2, [r3, #12]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 0204 	bic.w	r2, r2, #4
 8005da2:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6a1a      	ldr	r2, [r3, #32]
 8005daa:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005dae:	4013      	ands	r3, r2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10f      	bne.n	8005dd4 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6a1a      	ldr	r2, [r3, #32]
 8005dba:	f240 4344 	movw	r3, #1092	@ 0x444
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d107      	bne.n	8005dd4 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 0201 	bic.w	r2, r2, #1
 8005dd2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d002      	beq.n	8005de0 <HAL_TIM_Encoder_Stop_IT+0xce>
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	2b04      	cmp	r3, #4
 8005dde:	d138      	bne.n	8005e52 <HAL_TIM_Encoder_Stop_IT+0x140>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d104      	bne.n	8005df0 <HAL_TIM_Encoder_Stop_IT+0xde>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005dee:	e013      	b.n	8005e18 <HAL_TIM_Encoder_Stop_IT+0x106>
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	d104      	bne.n	8005e00 <HAL_TIM_Encoder_Stop_IT+0xee>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005dfe:	e00b      	b.n	8005e18 <HAL_TIM_Encoder_Stop_IT+0x106>
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	2b08      	cmp	r3, #8
 8005e04:	d104      	bne.n	8005e10 <HAL_TIM_Encoder_Stop_IT+0xfe>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e0e:	e003      	b.n	8005e18 <HAL_TIM_Encoder_Stop_IT+0x106>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d104      	bne.n	8005e28 <HAL_TIM_Encoder_Stop_IT+0x116>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e26:	e024      	b.n	8005e72 <HAL_TIM_Encoder_Stop_IT+0x160>
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	2b04      	cmp	r3, #4
 8005e2c:	d104      	bne.n	8005e38 <HAL_TIM_Encoder_Stop_IT+0x126>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e36:	e01c      	b.n	8005e72 <HAL_TIM_Encoder_Stop_IT+0x160>
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	2b08      	cmp	r3, #8
 8005e3c:	d104      	bne.n	8005e48 <HAL_TIM_Encoder_Stop_IT+0x136>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e46:	e014      	b.n	8005e72 <HAL_TIM_Encoder_Stop_IT+0x160>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e50:	e00f      	b.n	8005e72 <HAL_TIM_Encoder_Stop_IT+0x160>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3708      	adds	r7, #8
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f003 0302 	and.w	r3, r3, #2
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d020      	beq.n	8005ee0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d01b      	beq.n	8005ee0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f06f 0202 	mvn.w	r2, #2
 8005eb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	f003 0303 	and.w	r3, r3, #3
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d003      	beq.n	8005ece <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7fb fe8e 	bl	8001be8 <HAL_TIM_IC_CaptureCallback>
 8005ecc:	e005      	b.n	8005eda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 fb2e 	bl	8006530 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 fb35 	bl	8006544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	f003 0304 	and.w	r3, r3, #4
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d020      	beq.n	8005f2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f003 0304 	and.w	r3, r3, #4
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d01b      	beq.n	8005f2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f06f 0204 	mvn.w	r2, #4
 8005efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2202      	movs	r2, #2
 8005f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d003      	beq.n	8005f1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7fb fe68 	bl	8001be8 <HAL_TIM_IC_CaptureCallback>
 8005f18:	e005      	b.n	8005f26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 fb08 	bl	8006530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 fb0f 	bl	8006544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	f003 0308 	and.w	r3, r3, #8
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d020      	beq.n	8005f78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f003 0308 	and.w	r3, r3, #8
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d01b      	beq.n	8005f78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f06f 0208 	mvn.w	r2, #8
 8005f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2204      	movs	r2, #4
 8005f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	69db      	ldr	r3, [r3, #28]
 8005f56:	f003 0303 	and.w	r3, r3, #3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7fb fe42 	bl	8001be8 <HAL_TIM_IC_CaptureCallback>
 8005f64:	e005      	b.n	8005f72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fae2 	bl	8006530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fae9 	bl	8006544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	f003 0310 	and.w	r3, r3, #16
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d020      	beq.n	8005fc4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f003 0310 	and.w	r3, r3, #16
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d01b      	beq.n	8005fc4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f06f 0210 	mvn.w	r2, #16
 8005f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2208      	movs	r2, #8
 8005f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d003      	beq.n	8005fb2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f7fb fe1c 	bl	8001be8 <HAL_TIM_IC_CaptureCallback>
 8005fb0:	e005      	b.n	8005fbe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 fabc 	bl	8006530 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fac3 	bl	8006544 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	f003 0301 	and.w	r3, r3, #1
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00c      	beq.n	8005fe8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d007      	beq.n	8005fe8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f06f 0201 	mvn.w	r2, #1
 8005fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7fb fe32 	bl	8001c4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00c      	beq.n	800600c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d007      	beq.n	800600c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 ff1e 	bl	8006e48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00c      	beq.n	8006030 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800601c:	2b00      	cmp	r3, #0
 800601e:	d007      	beq.n	8006030 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fa94 	bl	8006558 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f003 0320 	and.w	r3, r3, #32
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00c      	beq.n	8006054 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f003 0320 	and.w	r3, r3, #32
 8006040:	2b00      	cmp	r3, #0
 8006042:	d007      	beq.n	8006054 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f06f 0220 	mvn.w	r2, #32
 800604c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fef0 	bl	8006e34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006054:	bf00      	nop
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006068:	2300      	movs	r3, #0
 800606a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006072:	2b01      	cmp	r3, #1
 8006074:	d101      	bne.n	800607a <HAL_TIM_IC_ConfigChannel+0x1e>
 8006076:	2302      	movs	r3, #2
 8006078:	e088      	b.n	800618c <HAL_TIM_IC_ConfigChannel+0x130>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2201      	movs	r2, #1
 800607e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d11b      	bne.n	80060c0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006098:	f000 fc80 	bl	800699c <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	699a      	ldr	r2, [r3, #24]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f022 020c 	bic.w	r2, r2, #12
 80060aa:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6999      	ldr	r1, [r3, #24]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	689a      	ldr	r2, [r3, #8]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	619a      	str	r2, [r3, #24]
 80060be:	e060      	b.n	8006182 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b04      	cmp	r3, #4
 80060c4:	d11c      	bne.n	8006100 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80060d6:	f000 fcf8 	bl	8006aca <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	699a      	ldr	r2, [r3, #24]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80060e8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6999      	ldr	r1, [r3, #24]
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	021a      	lsls	r2, r3, #8
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	430a      	orrs	r2, r1
 80060fc:	619a      	str	r2, [r3, #24]
 80060fe:	e040      	b.n	8006182 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b08      	cmp	r3, #8
 8006104:	d11b      	bne.n	800613e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006116:	f000 fd45 	bl	8006ba4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	69da      	ldr	r2, [r3, #28]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f022 020c 	bic.w	r2, r2, #12
 8006128:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	69d9      	ldr	r1, [r3, #28]
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	689a      	ldr	r2, [r3, #8]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	430a      	orrs	r2, r1
 800613a:	61da      	str	r2, [r3, #28]
 800613c:	e021      	b.n	8006182 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2b0c      	cmp	r3, #12
 8006142:	d11c      	bne.n	800617e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006154:	f000 fd62 	bl	8006c1c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	69da      	ldr	r2, [r3, #28]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006166:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	69d9      	ldr	r1, [r3, #28]
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	021a      	lsls	r2, r3, #8
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	430a      	orrs	r2, r1
 800617a:	61da      	str	r2, [r3, #28]
 800617c:	e001      	b.n	8006182 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800618a:	7dfb      	ldrb	r3, [r7, #23]
}
 800618c:	4618      	mov	r0, r3
 800618e:	3718      	adds	r7, #24
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061a0:	2300      	movs	r3, #0
 80061a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d101      	bne.n	80061b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80061ae:	2302      	movs	r3, #2
 80061b0:	e0ae      	b.n	8006310 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2b0c      	cmp	r3, #12
 80061be:	f200 809f 	bhi.w	8006300 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80061c2:	a201      	add	r2, pc, #4	@ (adr r2, 80061c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c8:	080061fd 	.word	0x080061fd
 80061cc:	08006301 	.word	0x08006301
 80061d0:	08006301 	.word	0x08006301
 80061d4:	08006301 	.word	0x08006301
 80061d8:	0800623d 	.word	0x0800623d
 80061dc:	08006301 	.word	0x08006301
 80061e0:	08006301 	.word	0x08006301
 80061e4:	08006301 	.word	0x08006301
 80061e8:	0800627f 	.word	0x0800627f
 80061ec:	08006301 	.word	0x08006301
 80061f0:	08006301 	.word	0x08006301
 80061f4:	08006301 	.word	0x08006301
 80061f8:	080062bf 	.word	0x080062bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68b9      	ldr	r1, [r7, #8]
 8006202:	4618      	mov	r0, r3
 8006204:	f000 fa3e 	bl	8006684 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	699a      	ldr	r2, [r3, #24]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f042 0208 	orr.w	r2, r2, #8
 8006216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	699a      	ldr	r2, [r3, #24]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 0204 	bic.w	r2, r2, #4
 8006226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6999      	ldr	r1, [r3, #24]
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	691a      	ldr	r2, [r3, #16]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	430a      	orrs	r2, r1
 8006238:	619a      	str	r2, [r3, #24]
      break;
 800623a:	e064      	b.n	8006306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68b9      	ldr	r1, [r7, #8]
 8006242:	4618      	mov	r0, r3
 8006244:	f000 fa84 	bl	8006750 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	699a      	ldr	r2, [r3, #24]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	699a      	ldr	r2, [r3, #24]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6999      	ldr	r1, [r3, #24]
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	021a      	lsls	r2, r3, #8
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	430a      	orrs	r2, r1
 800627a:	619a      	str	r2, [r3, #24]
      break;
 800627c:	e043      	b.n	8006306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	68b9      	ldr	r1, [r7, #8]
 8006284:	4618      	mov	r0, r3
 8006286:	f000 facf 	bl	8006828 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	69da      	ldr	r2, [r3, #28]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f042 0208 	orr.w	r2, r2, #8
 8006298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	69da      	ldr	r2, [r3, #28]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 0204 	bic.w	r2, r2, #4
 80062a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	69d9      	ldr	r1, [r3, #28]
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	691a      	ldr	r2, [r3, #16]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	430a      	orrs	r2, r1
 80062ba:	61da      	str	r2, [r3, #28]
      break;
 80062bc:	e023      	b.n	8006306 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	68b9      	ldr	r1, [r7, #8]
 80062c4:	4618      	mov	r0, r3
 80062c6:	f000 fb19 	bl	80068fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	69da      	ldr	r2, [r3, #28]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	69da      	ldr	r2, [r3, #28]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	69d9      	ldr	r1, [r3, #28]
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	021a      	lsls	r2, r3, #8
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	430a      	orrs	r2, r1
 80062fc:	61da      	str	r2, [r3, #28]
      break;
 80062fe:	e002      	b.n	8006306 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	75fb      	strb	r3, [r7, #23]
      break;
 8006304:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800630e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006310:	4618      	mov	r0, r3
 8006312:	3718      	adds	r7, #24
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006322:	2300      	movs	r3, #0
 8006324:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800632c:	2b01      	cmp	r3, #1
 800632e:	d101      	bne.n	8006334 <HAL_TIM_ConfigClockSource+0x1c>
 8006330:	2302      	movs	r3, #2
 8006332:	e0b4      	b.n	800649e <HAL_TIM_ConfigClockSource+0x186>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2202      	movs	r2, #2
 8006340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006352:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800635a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800636c:	d03e      	beq.n	80063ec <HAL_TIM_ConfigClockSource+0xd4>
 800636e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006372:	f200 8087 	bhi.w	8006484 <HAL_TIM_ConfigClockSource+0x16c>
 8006376:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800637a:	f000 8086 	beq.w	800648a <HAL_TIM_ConfigClockSource+0x172>
 800637e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006382:	d87f      	bhi.n	8006484 <HAL_TIM_ConfigClockSource+0x16c>
 8006384:	2b70      	cmp	r3, #112	@ 0x70
 8006386:	d01a      	beq.n	80063be <HAL_TIM_ConfigClockSource+0xa6>
 8006388:	2b70      	cmp	r3, #112	@ 0x70
 800638a:	d87b      	bhi.n	8006484 <HAL_TIM_ConfigClockSource+0x16c>
 800638c:	2b60      	cmp	r3, #96	@ 0x60
 800638e:	d050      	beq.n	8006432 <HAL_TIM_ConfigClockSource+0x11a>
 8006390:	2b60      	cmp	r3, #96	@ 0x60
 8006392:	d877      	bhi.n	8006484 <HAL_TIM_ConfigClockSource+0x16c>
 8006394:	2b50      	cmp	r3, #80	@ 0x50
 8006396:	d03c      	beq.n	8006412 <HAL_TIM_ConfigClockSource+0xfa>
 8006398:	2b50      	cmp	r3, #80	@ 0x50
 800639a:	d873      	bhi.n	8006484 <HAL_TIM_ConfigClockSource+0x16c>
 800639c:	2b40      	cmp	r3, #64	@ 0x40
 800639e:	d058      	beq.n	8006452 <HAL_TIM_ConfigClockSource+0x13a>
 80063a0:	2b40      	cmp	r3, #64	@ 0x40
 80063a2:	d86f      	bhi.n	8006484 <HAL_TIM_ConfigClockSource+0x16c>
 80063a4:	2b30      	cmp	r3, #48	@ 0x30
 80063a6:	d064      	beq.n	8006472 <HAL_TIM_ConfigClockSource+0x15a>
 80063a8:	2b30      	cmp	r3, #48	@ 0x30
 80063aa:	d86b      	bhi.n	8006484 <HAL_TIM_ConfigClockSource+0x16c>
 80063ac:	2b20      	cmp	r3, #32
 80063ae:	d060      	beq.n	8006472 <HAL_TIM_ConfigClockSource+0x15a>
 80063b0:	2b20      	cmp	r3, #32
 80063b2:	d867      	bhi.n	8006484 <HAL_TIM_ConfigClockSource+0x16c>
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d05c      	beq.n	8006472 <HAL_TIM_ConfigClockSource+0x15a>
 80063b8:	2b10      	cmp	r3, #16
 80063ba:	d05a      	beq.n	8006472 <HAL_TIM_ConfigClockSource+0x15a>
 80063bc:	e062      	b.n	8006484 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063ce:	f000 fc7d 	bl	8006ccc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80063e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68ba      	ldr	r2, [r7, #8]
 80063e8:	609a      	str	r2, [r3, #8]
      break;
 80063ea:	e04f      	b.n	800648c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80063fc:	f000 fc66 	bl	8006ccc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689a      	ldr	r2, [r3, #8]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800640e:	609a      	str	r2, [r3, #8]
      break;
 8006410:	e03c      	b.n	800648c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800641e:	461a      	mov	r2, r3
 8006420:	f000 fb24 	bl	8006a6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	2150      	movs	r1, #80	@ 0x50
 800642a:	4618      	mov	r0, r3
 800642c:	f000 fc33 	bl	8006c96 <TIM_ITRx_SetConfig>
      break;
 8006430:	e02c      	b.n	800648c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800643e:	461a      	mov	r2, r3
 8006440:	f000 fb80 	bl	8006b44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2160      	movs	r1, #96	@ 0x60
 800644a:	4618      	mov	r0, r3
 800644c:	f000 fc23 	bl	8006c96 <TIM_ITRx_SetConfig>
      break;
 8006450:	e01c      	b.n	800648c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800645e:	461a      	mov	r2, r3
 8006460:	f000 fb04 	bl	8006a6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2140      	movs	r1, #64	@ 0x40
 800646a:	4618      	mov	r0, r3
 800646c:	f000 fc13 	bl	8006c96 <TIM_ITRx_SetConfig>
      break;
 8006470:	e00c      	b.n	800648c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4619      	mov	r1, r3
 800647c:	4610      	mov	r0, r2
 800647e:	f000 fc0a 	bl	8006c96 <TIM_ITRx_SetConfig>
      break;
 8006482:	e003      	b.n	800648c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	73fb      	strb	r3, [r7, #15]
      break;
 8006488:	e000      	b.n	800648c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800648a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800649c:	7bfb      	ldrb	r3, [r7, #15]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
	...

080064a8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80064b2:	2300      	movs	r3, #0
 80064b4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	2b0c      	cmp	r3, #12
 80064ba:	d831      	bhi.n	8006520 <HAL_TIM_ReadCapturedValue+0x78>
 80064bc:	a201      	add	r2, pc, #4	@ (adr r2, 80064c4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80064be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c2:	bf00      	nop
 80064c4:	080064f9 	.word	0x080064f9
 80064c8:	08006521 	.word	0x08006521
 80064cc:	08006521 	.word	0x08006521
 80064d0:	08006521 	.word	0x08006521
 80064d4:	08006503 	.word	0x08006503
 80064d8:	08006521 	.word	0x08006521
 80064dc:	08006521 	.word	0x08006521
 80064e0:	08006521 	.word	0x08006521
 80064e4:	0800650d 	.word	0x0800650d
 80064e8:	08006521 	.word	0x08006521
 80064ec:	08006521 	.word	0x08006521
 80064f0:	08006521 	.word	0x08006521
 80064f4:	08006517 	.word	0x08006517
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064fe:	60fb      	str	r3, [r7, #12]

      break;
 8006500:	e00f      	b.n	8006522 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006508:	60fb      	str	r3, [r7, #12]

      break;
 800650a:	e00a      	b.n	8006522 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006512:	60fb      	str	r3, [r7, #12]

      break;
 8006514:	e005      	b.n	8006522 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800651c:	60fb      	str	r3, [r7, #12]

      break;
 800651e:	e000      	b.n	8006522 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006520:	bf00      	nop
  }

  return tmpreg;
 8006522:	68fb      	ldr	r3, [r7, #12]
}
 8006524:	4618      	mov	r0, r3
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a3a      	ldr	r2, [pc, #232]	@ (8006668 <TIM_Base_SetConfig+0xfc>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d00f      	beq.n	80065a4 <TIM_Base_SetConfig+0x38>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800658a:	d00b      	beq.n	80065a4 <TIM_Base_SetConfig+0x38>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a37      	ldr	r2, [pc, #220]	@ (800666c <TIM_Base_SetConfig+0x100>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d007      	beq.n	80065a4 <TIM_Base_SetConfig+0x38>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a36      	ldr	r2, [pc, #216]	@ (8006670 <TIM_Base_SetConfig+0x104>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d003      	beq.n	80065a4 <TIM_Base_SetConfig+0x38>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a35      	ldr	r2, [pc, #212]	@ (8006674 <TIM_Base_SetConfig+0x108>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d108      	bne.n	80065b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a2b      	ldr	r2, [pc, #172]	@ (8006668 <TIM_Base_SetConfig+0xfc>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d01b      	beq.n	80065f6 <TIM_Base_SetConfig+0x8a>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065c4:	d017      	beq.n	80065f6 <TIM_Base_SetConfig+0x8a>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4a28      	ldr	r2, [pc, #160]	@ (800666c <TIM_Base_SetConfig+0x100>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d013      	beq.n	80065f6 <TIM_Base_SetConfig+0x8a>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	4a27      	ldr	r2, [pc, #156]	@ (8006670 <TIM_Base_SetConfig+0x104>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d00f      	beq.n	80065f6 <TIM_Base_SetConfig+0x8a>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a26      	ldr	r2, [pc, #152]	@ (8006674 <TIM_Base_SetConfig+0x108>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d00b      	beq.n	80065f6 <TIM_Base_SetConfig+0x8a>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a25      	ldr	r2, [pc, #148]	@ (8006678 <TIM_Base_SetConfig+0x10c>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d007      	beq.n	80065f6 <TIM_Base_SetConfig+0x8a>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	4a24      	ldr	r2, [pc, #144]	@ (800667c <TIM_Base_SetConfig+0x110>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d003      	beq.n	80065f6 <TIM_Base_SetConfig+0x8a>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a23      	ldr	r2, [pc, #140]	@ (8006680 <TIM_Base_SetConfig+0x114>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d108      	bne.n	8006608 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	4313      	orrs	r3, r2
 8006606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	4313      	orrs	r3, r2
 8006614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	689a      	ldr	r2, [r3, #8]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a0e      	ldr	r2, [pc, #56]	@ (8006668 <TIM_Base_SetConfig+0xfc>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d103      	bne.n	800663c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	691a      	ldr	r2, [r3, #16]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b01      	cmp	r3, #1
 800664c:	d105      	bne.n	800665a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	f023 0201 	bic.w	r2, r3, #1
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	611a      	str	r2, [r3, #16]
  }
}
 800665a:	bf00      	nop
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	40010000 	.word	0x40010000
 800666c:	40000400 	.word	0x40000400
 8006670:	40000800 	.word	0x40000800
 8006674:	40000c00 	.word	0x40000c00
 8006678:	40014000 	.word	0x40014000
 800667c:	40014400 	.word	0x40014400
 8006680:	40014800 	.word	0x40014800

08006684 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006684:	b480      	push	{r7}
 8006686:	b087      	sub	sp, #28
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	f023 0201 	bic.w	r2, r3, #1
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 0303 	bic.w	r3, r3, #3
 80066ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68fa      	ldr	r2, [r7, #12]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	f023 0302 	bic.w	r3, r3, #2
 80066cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	4313      	orrs	r3, r2
 80066d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4a1c      	ldr	r2, [pc, #112]	@ (800674c <TIM_OC1_SetConfig+0xc8>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d10c      	bne.n	80066fa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	f023 0308 	bic.w	r3, r3, #8
 80066e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f023 0304 	bic.w	r3, r3, #4
 80066f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a13      	ldr	r2, [pc, #76]	@ (800674c <TIM_OC1_SetConfig+0xc8>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d111      	bne.n	8006726 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	4313      	orrs	r3, r2
 800671a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	4313      	orrs	r3, r2
 8006724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	685a      	ldr	r2, [r3, #4]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	621a      	str	r2, [r3, #32]
}
 8006740:	bf00      	nop
 8006742:	371c      	adds	r7, #28
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr
 800674c:	40010000 	.word	0x40010000

08006750 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006750:	b480      	push	{r7}
 8006752:	b087      	sub	sp, #28
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a1b      	ldr	r3, [r3, #32]
 8006764:	f023 0210 	bic.w	r2, r3, #16
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800677e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	021b      	lsls	r3, r3, #8
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	4313      	orrs	r3, r2
 8006792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	f023 0320 	bic.w	r3, r3, #32
 800679a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	011b      	lsls	r3, r3, #4
 80067a2:	697a      	ldr	r2, [r7, #20]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a1e      	ldr	r2, [pc, #120]	@ (8006824 <TIM_OC2_SetConfig+0xd4>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d10d      	bne.n	80067cc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	011b      	lsls	r3, r3, #4
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a15      	ldr	r2, [pc, #84]	@ (8006824 <TIM_OC2_SetConfig+0xd4>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d113      	bne.n	80067fc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	695b      	ldr	r3, [r3, #20]
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	685a      	ldr	r2, [r3, #4]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	621a      	str	r2, [r3, #32]
}
 8006816:	bf00      	nop
 8006818:	371c      	adds	r7, #28
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	40010000 	.word	0x40010000

08006828 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006828:	b480      	push	{r7}
 800682a:	b087      	sub	sp, #28
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a1b      	ldr	r3, [r3, #32]
 800683c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f023 0303 	bic.w	r3, r3, #3
 800685e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	4313      	orrs	r3, r2
 8006868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	021b      	lsls	r3, r3, #8
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	4313      	orrs	r3, r2
 800687c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a1d      	ldr	r2, [pc, #116]	@ (80068f8 <TIM_OC3_SetConfig+0xd0>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d10d      	bne.n	80068a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800688c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	021b      	lsls	r3, r3, #8
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	4313      	orrs	r3, r2
 8006898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a14      	ldr	r2, [pc, #80]	@ (80068f8 <TIM_OC3_SetConfig+0xd0>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d113      	bne.n	80068d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80068b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	011b      	lsls	r3, r3, #4
 80068c0:	693a      	ldr	r2, [r7, #16]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	011b      	lsls	r3, r3, #4
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	685a      	ldr	r2, [r3, #4]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	621a      	str	r2, [r3, #32]
}
 80068ec:	bf00      	nop
 80068ee:	371c      	adds	r7, #28
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	40010000 	.word	0x40010000

080068fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b087      	sub	sp, #28
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a1b      	ldr	r3, [r3, #32]
 8006910:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	69db      	ldr	r3, [r3, #28]
 8006922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800692a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	021b      	lsls	r3, r3, #8
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	4313      	orrs	r3, r2
 800693e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006946:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	031b      	lsls	r3, r3, #12
 800694e:	693a      	ldr	r2, [r7, #16]
 8006950:	4313      	orrs	r3, r2
 8006952:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	4a10      	ldr	r2, [pc, #64]	@ (8006998 <TIM_OC4_SetConfig+0x9c>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d109      	bne.n	8006970 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006962:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	695b      	ldr	r3, [r3, #20]
 8006968:	019b      	lsls	r3, r3, #6
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	4313      	orrs	r3, r2
 800696e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	693a      	ldr	r2, [r7, #16]
 8006988:	621a      	str	r2, [r3, #32]
}
 800698a:	bf00      	nop
 800698c:	371c      	adds	r7, #28
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	40010000 	.word	0x40010000

0800699c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800699c:	b480      	push	{r7}
 800699e:	b087      	sub	sp, #28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
 80069a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6a1b      	ldr	r3, [r3, #32]
 80069b4:	f023 0201 	bic.w	r2, r3, #1
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	4a24      	ldr	r2, [pc, #144]	@ (8006a58 <TIM_TI1_SetConfig+0xbc>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d013      	beq.n	80069f2 <TIM_TI1_SetConfig+0x56>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069d0:	d00f      	beq.n	80069f2 <TIM_TI1_SetConfig+0x56>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	4a21      	ldr	r2, [pc, #132]	@ (8006a5c <TIM_TI1_SetConfig+0xc0>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d00b      	beq.n	80069f2 <TIM_TI1_SetConfig+0x56>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	4a20      	ldr	r2, [pc, #128]	@ (8006a60 <TIM_TI1_SetConfig+0xc4>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d007      	beq.n	80069f2 <TIM_TI1_SetConfig+0x56>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	4a1f      	ldr	r2, [pc, #124]	@ (8006a64 <TIM_TI1_SetConfig+0xc8>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d003      	beq.n	80069f2 <TIM_TI1_SetConfig+0x56>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	4a1e      	ldr	r2, [pc, #120]	@ (8006a68 <TIM_TI1_SetConfig+0xcc>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d101      	bne.n	80069f6 <TIM_TI1_SetConfig+0x5a>
 80069f2:	2301      	movs	r3, #1
 80069f4:	e000      	b.n	80069f8 <TIM_TI1_SetConfig+0x5c>
 80069f6:	2300      	movs	r3, #0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d008      	beq.n	8006a0e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	f023 0303 	bic.w	r3, r3, #3
 8006a02:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	617b      	str	r3, [r7, #20]
 8006a0c:	e003      	b.n	8006a16 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	f043 0301 	orr.w	r3, r3, #1
 8006a14:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	011b      	lsls	r3, r3, #4
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	f023 030a 	bic.w	r3, r3, #10
 8006a30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	f003 030a 	and.w	r3, r3, #10
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	697a      	ldr	r2, [r7, #20]
 8006a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	621a      	str	r2, [r3, #32]
}
 8006a4a:	bf00      	nop
 8006a4c:	371c      	adds	r7, #28
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr
 8006a56:	bf00      	nop
 8006a58:	40010000 	.word	0x40010000
 8006a5c:	40000400 	.word	0x40000400
 8006a60:	40000800 	.word	0x40000800
 8006a64:	40000c00 	.word	0x40000c00
 8006a68:	40014000 	.word	0x40014000

08006a6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b087      	sub	sp, #28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	6a1b      	ldr	r3, [r3, #32]
 8006a82:	f023 0201 	bic.w	r2, r3, #1
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	699b      	ldr	r3, [r3, #24]
 8006a8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	011b      	lsls	r3, r3, #4
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f023 030a 	bic.w	r3, r3, #10
 8006aa8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	621a      	str	r2, [r3, #32]
}
 8006abe:	bf00      	nop
 8006ac0:	371c      	adds	r7, #28
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b087      	sub	sp, #28
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	60f8      	str	r0, [r7, #12]
 8006ad2:	60b9      	str	r1, [r7, #8]
 8006ad4:	607a      	str	r2, [r7, #4]
 8006ad6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6a1b      	ldr	r3, [r3, #32]
 8006adc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6a1b      	ldr	r3, [r3, #32]
 8006ae2:	f023 0210 	bic.w	r2, r3, #16
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	021b      	lsls	r3, r3, #8
 8006afc:	693a      	ldr	r2, [r7, #16]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	031b      	lsls	r3, r3, #12
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b1c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	011b      	lsls	r3, r3, #4
 8006b22:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	621a      	str	r2, [r3, #32]
}
 8006b38:	bf00      	nop
 8006b3a:	371c      	adds	r7, #28
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b087      	sub	sp, #28
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6a1b      	ldr	r3, [r3, #32]
 8006b54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	f023 0210 	bic.w	r2, r3, #16
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	031b      	lsls	r3, r3, #12
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006b80:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	011b      	lsls	r3, r3, #4
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	621a      	str	r2, [r3, #32]
}
 8006b98:	bf00      	nop
 8006b9a:	371c      	adds	r7, #28
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b087      	sub	sp, #28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
 8006bb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6a1b      	ldr	r3, [r3, #32]
 8006bb6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6a1b      	ldr	r3, [r3, #32]
 8006bbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	69db      	ldr	r3, [r3, #28]
 8006bc8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	f023 0303 	bic.w	r3, r3, #3
 8006bd0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006bd2:	693a      	ldr	r2, [r7, #16]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006be0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	011b      	lsls	r3, r3, #4
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006bf4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	021b      	lsls	r3, r3, #8
 8006bfa:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006bfe:	697a      	ldr	r2, [r7, #20]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	693a      	ldr	r2, [r7, #16]
 8006c08:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	621a      	str	r2, [r3, #32]
}
 8006c10:	bf00      	nop
 8006c12:	371c      	adds	r7, #28
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
 8006c28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6a1b      	ldr	r3, [r3, #32]
 8006c34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	69db      	ldr	r3, [r3, #28]
 8006c40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c48:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	021b      	lsls	r3, r3, #8
 8006c4e:	693a      	ldr	r2, [r7, #16]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c5a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	031b      	lsls	r3, r3, #12
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	693a      	ldr	r2, [r7, #16]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006c6e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	031b      	lsls	r3, r3, #12
 8006c74:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006c78:	697a      	ldr	r2, [r7, #20]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	621a      	str	r2, [r3, #32]
}
 8006c8a:	bf00      	nop
 8006c8c:	371c      	adds	r7, #28
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr

08006c96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006c96:	b480      	push	{r7}
 8006c98:	b085      	sub	sp, #20
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
 8006c9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	689b      	ldr	r3, [r3, #8]
 8006ca4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	f043 0307 	orr.w	r3, r3, #7
 8006cb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	609a      	str	r2, [r3, #8]
}
 8006cc0:	bf00      	nop
 8006cc2:	3714      	adds	r7, #20
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b087      	sub	sp, #28
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
 8006cd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ce6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	021a      	lsls	r2, r3, #8
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	431a      	orrs	r2, r3
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	697a      	ldr	r2, [r7, #20]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	697a      	ldr	r2, [r7, #20]
 8006cfe:	609a      	str	r2, [r3, #8]
}
 8006d00:	bf00      	nop
 8006d02:	371c      	adds	r7, #28
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b087      	sub	sp, #28
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	f003 031f 	and.w	r3, r3, #31
 8006d1e:	2201      	movs	r2, #1
 8006d20:	fa02 f303 	lsl.w	r3, r2, r3
 8006d24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6a1a      	ldr	r2, [r3, #32]
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	43db      	mvns	r3, r3
 8006d2e:	401a      	ands	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	6a1a      	ldr	r2, [r3, #32]
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	f003 031f 	and.w	r3, r3, #31
 8006d3e:	6879      	ldr	r1, [r7, #4]
 8006d40:	fa01 f303 	lsl.w	r3, r1, r3
 8006d44:	431a      	orrs	r2, r3
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	621a      	str	r2, [r3, #32]
}
 8006d4a:	bf00      	nop
 8006d4c:	371c      	adds	r7, #28
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
	...

08006d58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d101      	bne.n	8006d70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006d6c:	2302      	movs	r3, #2
 8006d6e:	e050      	b.n	8006e12 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a1c      	ldr	r2, [pc, #112]	@ (8006e20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d018      	beq.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dbc:	d013      	beq.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a18      	ldr	r2, [pc, #96]	@ (8006e24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d00e      	beq.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a16      	ldr	r2, [pc, #88]	@ (8006e28 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d009      	beq.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a15      	ldr	r2, [pc, #84]	@ (8006e2c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d004      	beq.n	8006de6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a13      	ldr	r2, [pc, #76]	@ (8006e30 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d10c      	bne.n	8006e00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006dec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3714      	adds	r7, #20
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	40010000 	.word	0x40010000
 8006e24:	40000400 	.word	0x40000400
 8006e28:	40000800 	.word	0x40000800
 8006e2c:	40000c00 	.word	0x40000c00
 8006e30:	40014000 	.word	0x40014000

08006e34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e042      	b.n	8006ef4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d106      	bne.n	8006e88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f7fb ff58 	bl	8002d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2224      	movs	r2, #36	@ 0x24
 8006e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68da      	ldr	r2, [r3, #12]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f000 f973 	bl	800718c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	691a      	ldr	r2, [r3, #16]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006eb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	695a      	ldr	r2, [r3, #20]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006ec4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68da      	ldr	r2, [r3, #12]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ed4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2220      	movs	r2, #32
 8006ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3708      	adds	r7, #8
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b08a      	sub	sp, #40	@ 0x28
 8006f00:	af02      	add	r7, sp, #8
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	603b      	str	r3, [r7, #0]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f16:	b2db      	uxtb	r3, r3
 8006f18:	2b20      	cmp	r3, #32
 8006f1a:	d175      	bne.n	8007008 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d002      	beq.n	8006f28 <HAL_UART_Transmit+0x2c>
 8006f22:	88fb      	ldrh	r3, [r7, #6]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d101      	bne.n	8006f2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e06e      	b.n	800700a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2221      	movs	r2, #33	@ 0x21
 8006f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006f3a:	f7fc f917 	bl	800316c <HAL_GetTick>
 8006f3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	88fa      	ldrh	r2, [r7, #6]
 8006f44:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	88fa      	ldrh	r2, [r7, #6]
 8006f4a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f54:	d108      	bne.n	8006f68 <HAL_UART_Transmit+0x6c>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d104      	bne.n	8006f68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	61bb      	str	r3, [r7, #24]
 8006f66:	e003      	b.n	8006f70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f70:	e02e      	b.n	8006fd0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	2180      	movs	r1, #128	@ 0x80
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f000 f848 	bl	8007012 <UART_WaitOnFlagUntilTimeout>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d005      	beq.n	8006f94 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2220      	movs	r2, #32
 8006f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e03a      	b.n	800700a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10b      	bne.n	8006fb2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	881b      	ldrh	r3, [r3, #0]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fa8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	3302      	adds	r3, #2
 8006fae:	61bb      	str	r3, [r7, #24]
 8006fb0:	e007      	b.n	8006fc2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	781a      	ldrb	r2, [r3, #0]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006fbc:	69fb      	ldr	r3, [r7, #28]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1cb      	bne.n	8006f72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	9300      	str	r3, [sp, #0]
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	2140      	movs	r1, #64	@ 0x40
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 f814 	bl	8007012 <UART_WaitOnFlagUntilTimeout>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d005      	beq.n	8006ffc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e006      	b.n	800700a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2220      	movs	r2, #32
 8007000:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007004:	2300      	movs	r3, #0
 8007006:	e000      	b.n	800700a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007008:	2302      	movs	r3, #2
  }
}
 800700a:	4618      	mov	r0, r3
 800700c:	3720      	adds	r7, #32
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b086      	sub	sp, #24
 8007016:	af00      	add	r7, sp, #0
 8007018:	60f8      	str	r0, [r7, #12]
 800701a:	60b9      	str	r1, [r7, #8]
 800701c:	603b      	str	r3, [r7, #0]
 800701e:	4613      	mov	r3, r2
 8007020:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007022:	e03b      	b.n	800709c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007024:	6a3b      	ldr	r3, [r7, #32]
 8007026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800702a:	d037      	beq.n	800709c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800702c:	f7fc f89e 	bl	800316c <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	6a3a      	ldr	r2, [r7, #32]
 8007038:	429a      	cmp	r2, r3
 800703a:	d302      	bcc.n	8007042 <UART_WaitOnFlagUntilTimeout+0x30>
 800703c:	6a3b      	ldr	r3, [r7, #32]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d101      	bne.n	8007046 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	e03a      	b.n	80070bc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	f003 0304 	and.w	r3, r3, #4
 8007050:	2b00      	cmp	r3, #0
 8007052:	d023      	beq.n	800709c <UART_WaitOnFlagUntilTimeout+0x8a>
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	2b80      	cmp	r3, #128	@ 0x80
 8007058:	d020      	beq.n	800709c <UART_WaitOnFlagUntilTimeout+0x8a>
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	2b40      	cmp	r3, #64	@ 0x40
 800705e:	d01d      	beq.n	800709c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0308 	and.w	r3, r3, #8
 800706a:	2b08      	cmp	r3, #8
 800706c:	d116      	bne.n	800709c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800706e:	2300      	movs	r3, #0
 8007070:	617b      	str	r3, [r7, #20]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	617b      	str	r3, [r7, #20]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	617b      	str	r3, [r7, #20]
 8007082:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007084:	68f8      	ldr	r0, [r7, #12]
 8007086:	f000 f81d 	bl	80070c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2208      	movs	r2, #8
 800708e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e00f      	b.n	80070bc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	4013      	ands	r3, r2
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	bf0c      	ite	eq
 80070ac:	2301      	moveq	r3, #1
 80070ae:	2300      	movne	r3, #0
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	461a      	mov	r2, r3
 80070b4:	79fb      	ldrb	r3, [r7, #7]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d0b4      	beq.n	8007024 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3718      	adds	r7, #24
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b095      	sub	sp, #84	@ 0x54
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	330c      	adds	r3, #12
 80070d2:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070d6:	e853 3f00 	ldrex	r3, [r3]
 80070da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	330c      	adds	r3, #12
 80070ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80070ec:	643a      	str	r2, [r7, #64]	@ 0x40
 80070ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80070f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070f4:	e841 2300 	strex	r3, r2, [r1]
 80070f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1e5      	bne.n	80070cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	3314      	adds	r3, #20
 8007106:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007108:	6a3b      	ldr	r3, [r7, #32]
 800710a:	e853 3f00 	ldrex	r3, [r3]
 800710e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	f023 0301 	bic.w	r3, r3, #1
 8007116:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	3314      	adds	r3, #20
 800711e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007120:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007122:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007124:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007126:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007128:	e841 2300 	strex	r3, r2, [r1]
 800712c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800712e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007130:	2b00      	cmp	r3, #0
 8007132:	d1e5      	bne.n	8007100 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007138:	2b01      	cmp	r3, #1
 800713a:	d119      	bne.n	8007170 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	330c      	adds	r3, #12
 8007142:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	e853 3f00 	ldrex	r3, [r3]
 800714a:	60bb      	str	r3, [r7, #8]
   return(result);
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	f023 0310 	bic.w	r3, r3, #16
 8007152:	647b      	str	r3, [r7, #68]	@ 0x44
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	330c      	adds	r3, #12
 800715a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800715c:	61ba      	str	r2, [r7, #24]
 800715e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007160:	6979      	ldr	r1, [r7, #20]
 8007162:	69ba      	ldr	r2, [r7, #24]
 8007164:	e841 2300 	strex	r3, r2, [r1]
 8007168:	613b      	str	r3, [r7, #16]
   return(result);
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1e5      	bne.n	800713c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2220      	movs	r2, #32
 8007174:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800717e:	bf00      	nop
 8007180:	3754      	adds	r7, #84	@ 0x54
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr
	...

0800718c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800718c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007190:	b0c0      	sub	sp, #256	@ 0x100
 8007192:	af00      	add	r7, sp, #0
 8007194:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80071a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071a8:	68d9      	ldr	r1, [r3, #12]
 80071aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	ea40 0301 	orr.w	r3, r0, r1
 80071b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80071b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ba:	689a      	ldr	r2, [r3, #8]
 80071bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071c0:	691b      	ldr	r3, [r3, #16]
 80071c2:	431a      	orrs	r2, r3
 80071c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	431a      	orrs	r2, r3
 80071cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071d0:	69db      	ldr	r3, [r3, #28]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80071d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80071e4:	f021 010c 	bic.w	r1, r1, #12
 80071e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80071f2:	430b      	orrs	r3, r1
 80071f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80071f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	695b      	ldr	r3, [r3, #20]
 80071fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007206:	6999      	ldr	r1, [r3, #24]
 8007208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	ea40 0301 	orr.w	r3, r0, r1
 8007212:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	4b8f      	ldr	r3, [pc, #572]	@ (8007458 <UART_SetConfig+0x2cc>)
 800721c:	429a      	cmp	r2, r3
 800721e:	d005      	beq.n	800722c <UART_SetConfig+0xa0>
 8007220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	4b8d      	ldr	r3, [pc, #564]	@ (800745c <UART_SetConfig+0x2d0>)
 8007228:	429a      	cmp	r2, r3
 800722a:	d104      	bne.n	8007236 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800722c:	f7fd ff06 	bl	800503c <HAL_RCC_GetPCLK2Freq>
 8007230:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007234:	e003      	b.n	800723e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007236:	f7fd feed 	bl	8005014 <HAL_RCC_GetPCLK1Freq>
 800723a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800723e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007242:	69db      	ldr	r3, [r3, #28]
 8007244:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007248:	f040 810c 	bne.w	8007464 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800724c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007250:	2200      	movs	r2, #0
 8007252:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007256:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800725a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800725e:	4622      	mov	r2, r4
 8007260:	462b      	mov	r3, r5
 8007262:	1891      	adds	r1, r2, r2
 8007264:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007266:	415b      	adcs	r3, r3
 8007268:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800726a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800726e:	4621      	mov	r1, r4
 8007270:	eb12 0801 	adds.w	r8, r2, r1
 8007274:	4629      	mov	r1, r5
 8007276:	eb43 0901 	adc.w	r9, r3, r1
 800727a:	f04f 0200 	mov.w	r2, #0
 800727e:	f04f 0300 	mov.w	r3, #0
 8007282:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007286:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800728a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800728e:	4690      	mov	r8, r2
 8007290:	4699      	mov	r9, r3
 8007292:	4623      	mov	r3, r4
 8007294:	eb18 0303 	adds.w	r3, r8, r3
 8007298:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800729c:	462b      	mov	r3, r5
 800729e:	eb49 0303 	adc.w	r3, r9, r3
 80072a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80072a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80072b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80072b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80072ba:	460b      	mov	r3, r1
 80072bc:	18db      	adds	r3, r3, r3
 80072be:	653b      	str	r3, [r7, #80]	@ 0x50
 80072c0:	4613      	mov	r3, r2
 80072c2:	eb42 0303 	adc.w	r3, r2, r3
 80072c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80072c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80072cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80072d0:	f7f9 fc72 	bl	8000bb8 <__aeabi_uldivmod>
 80072d4:	4602      	mov	r2, r0
 80072d6:	460b      	mov	r3, r1
 80072d8:	4b61      	ldr	r3, [pc, #388]	@ (8007460 <UART_SetConfig+0x2d4>)
 80072da:	fba3 2302 	umull	r2, r3, r3, r2
 80072de:	095b      	lsrs	r3, r3, #5
 80072e0:	011c      	lsls	r4, r3, #4
 80072e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072e6:	2200      	movs	r2, #0
 80072e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80072ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80072f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80072f4:	4642      	mov	r2, r8
 80072f6:	464b      	mov	r3, r9
 80072f8:	1891      	adds	r1, r2, r2
 80072fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80072fc:	415b      	adcs	r3, r3
 80072fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007300:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007304:	4641      	mov	r1, r8
 8007306:	eb12 0a01 	adds.w	sl, r2, r1
 800730a:	4649      	mov	r1, r9
 800730c:	eb43 0b01 	adc.w	fp, r3, r1
 8007310:	f04f 0200 	mov.w	r2, #0
 8007314:	f04f 0300 	mov.w	r3, #0
 8007318:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800731c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007320:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007324:	4692      	mov	sl, r2
 8007326:	469b      	mov	fp, r3
 8007328:	4643      	mov	r3, r8
 800732a:	eb1a 0303 	adds.w	r3, sl, r3
 800732e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007332:	464b      	mov	r3, r9
 8007334:	eb4b 0303 	adc.w	r3, fp, r3
 8007338:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800733c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007348:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800734c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007350:	460b      	mov	r3, r1
 8007352:	18db      	adds	r3, r3, r3
 8007354:	643b      	str	r3, [r7, #64]	@ 0x40
 8007356:	4613      	mov	r3, r2
 8007358:	eb42 0303 	adc.w	r3, r2, r3
 800735c:	647b      	str	r3, [r7, #68]	@ 0x44
 800735e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007362:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007366:	f7f9 fc27 	bl	8000bb8 <__aeabi_uldivmod>
 800736a:	4602      	mov	r2, r0
 800736c:	460b      	mov	r3, r1
 800736e:	4611      	mov	r1, r2
 8007370:	4b3b      	ldr	r3, [pc, #236]	@ (8007460 <UART_SetConfig+0x2d4>)
 8007372:	fba3 2301 	umull	r2, r3, r3, r1
 8007376:	095b      	lsrs	r3, r3, #5
 8007378:	2264      	movs	r2, #100	@ 0x64
 800737a:	fb02 f303 	mul.w	r3, r2, r3
 800737e:	1acb      	subs	r3, r1, r3
 8007380:	00db      	lsls	r3, r3, #3
 8007382:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007386:	4b36      	ldr	r3, [pc, #216]	@ (8007460 <UART_SetConfig+0x2d4>)
 8007388:	fba3 2302 	umull	r2, r3, r3, r2
 800738c:	095b      	lsrs	r3, r3, #5
 800738e:	005b      	lsls	r3, r3, #1
 8007390:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007394:	441c      	add	r4, r3
 8007396:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800739a:	2200      	movs	r2, #0
 800739c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80073a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80073a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80073a8:	4642      	mov	r2, r8
 80073aa:	464b      	mov	r3, r9
 80073ac:	1891      	adds	r1, r2, r2
 80073ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80073b0:	415b      	adcs	r3, r3
 80073b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80073b8:	4641      	mov	r1, r8
 80073ba:	1851      	adds	r1, r2, r1
 80073bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80073be:	4649      	mov	r1, r9
 80073c0:	414b      	adcs	r3, r1
 80073c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80073c4:	f04f 0200 	mov.w	r2, #0
 80073c8:	f04f 0300 	mov.w	r3, #0
 80073cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80073d0:	4659      	mov	r1, fp
 80073d2:	00cb      	lsls	r3, r1, #3
 80073d4:	4651      	mov	r1, sl
 80073d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073da:	4651      	mov	r1, sl
 80073dc:	00ca      	lsls	r2, r1, #3
 80073de:	4610      	mov	r0, r2
 80073e0:	4619      	mov	r1, r3
 80073e2:	4603      	mov	r3, r0
 80073e4:	4642      	mov	r2, r8
 80073e6:	189b      	adds	r3, r3, r2
 80073e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80073ec:	464b      	mov	r3, r9
 80073ee:	460a      	mov	r2, r1
 80073f0:	eb42 0303 	adc.w	r3, r2, r3
 80073f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007404:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007408:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800740c:	460b      	mov	r3, r1
 800740e:	18db      	adds	r3, r3, r3
 8007410:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007412:	4613      	mov	r3, r2
 8007414:	eb42 0303 	adc.w	r3, r2, r3
 8007418:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800741a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800741e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007422:	f7f9 fbc9 	bl	8000bb8 <__aeabi_uldivmod>
 8007426:	4602      	mov	r2, r0
 8007428:	460b      	mov	r3, r1
 800742a:	4b0d      	ldr	r3, [pc, #52]	@ (8007460 <UART_SetConfig+0x2d4>)
 800742c:	fba3 1302 	umull	r1, r3, r3, r2
 8007430:	095b      	lsrs	r3, r3, #5
 8007432:	2164      	movs	r1, #100	@ 0x64
 8007434:	fb01 f303 	mul.w	r3, r1, r3
 8007438:	1ad3      	subs	r3, r2, r3
 800743a:	00db      	lsls	r3, r3, #3
 800743c:	3332      	adds	r3, #50	@ 0x32
 800743e:	4a08      	ldr	r2, [pc, #32]	@ (8007460 <UART_SetConfig+0x2d4>)
 8007440:	fba2 2303 	umull	r2, r3, r2, r3
 8007444:	095b      	lsrs	r3, r3, #5
 8007446:	f003 0207 	and.w	r2, r3, #7
 800744a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4422      	add	r2, r4
 8007452:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007454:	e106      	b.n	8007664 <UART_SetConfig+0x4d8>
 8007456:	bf00      	nop
 8007458:	40011000 	.word	0x40011000
 800745c:	40011400 	.word	0x40011400
 8007460:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007464:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007468:	2200      	movs	r2, #0
 800746a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800746e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007472:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007476:	4642      	mov	r2, r8
 8007478:	464b      	mov	r3, r9
 800747a:	1891      	adds	r1, r2, r2
 800747c:	6239      	str	r1, [r7, #32]
 800747e:	415b      	adcs	r3, r3
 8007480:	627b      	str	r3, [r7, #36]	@ 0x24
 8007482:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007486:	4641      	mov	r1, r8
 8007488:	1854      	adds	r4, r2, r1
 800748a:	4649      	mov	r1, r9
 800748c:	eb43 0501 	adc.w	r5, r3, r1
 8007490:	f04f 0200 	mov.w	r2, #0
 8007494:	f04f 0300 	mov.w	r3, #0
 8007498:	00eb      	lsls	r3, r5, #3
 800749a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800749e:	00e2      	lsls	r2, r4, #3
 80074a0:	4614      	mov	r4, r2
 80074a2:	461d      	mov	r5, r3
 80074a4:	4643      	mov	r3, r8
 80074a6:	18e3      	adds	r3, r4, r3
 80074a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80074ac:	464b      	mov	r3, r9
 80074ae:	eb45 0303 	adc.w	r3, r5, r3
 80074b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80074b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80074c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80074c6:	f04f 0200 	mov.w	r2, #0
 80074ca:	f04f 0300 	mov.w	r3, #0
 80074ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80074d2:	4629      	mov	r1, r5
 80074d4:	008b      	lsls	r3, r1, #2
 80074d6:	4621      	mov	r1, r4
 80074d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074dc:	4621      	mov	r1, r4
 80074de:	008a      	lsls	r2, r1, #2
 80074e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80074e4:	f7f9 fb68 	bl	8000bb8 <__aeabi_uldivmod>
 80074e8:	4602      	mov	r2, r0
 80074ea:	460b      	mov	r3, r1
 80074ec:	4b60      	ldr	r3, [pc, #384]	@ (8007670 <UART_SetConfig+0x4e4>)
 80074ee:	fba3 2302 	umull	r2, r3, r3, r2
 80074f2:	095b      	lsrs	r3, r3, #5
 80074f4:	011c      	lsls	r4, r3, #4
 80074f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074fa:	2200      	movs	r2, #0
 80074fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007500:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007504:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007508:	4642      	mov	r2, r8
 800750a:	464b      	mov	r3, r9
 800750c:	1891      	adds	r1, r2, r2
 800750e:	61b9      	str	r1, [r7, #24]
 8007510:	415b      	adcs	r3, r3
 8007512:	61fb      	str	r3, [r7, #28]
 8007514:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007518:	4641      	mov	r1, r8
 800751a:	1851      	adds	r1, r2, r1
 800751c:	6139      	str	r1, [r7, #16]
 800751e:	4649      	mov	r1, r9
 8007520:	414b      	adcs	r3, r1
 8007522:	617b      	str	r3, [r7, #20]
 8007524:	f04f 0200 	mov.w	r2, #0
 8007528:	f04f 0300 	mov.w	r3, #0
 800752c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007530:	4659      	mov	r1, fp
 8007532:	00cb      	lsls	r3, r1, #3
 8007534:	4651      	mov	r1, sl
 8007536:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800753a:	4651      	mov	r1, sl
 800753c:	00ca      	lsls	r2, r1, #3
 800753e:	4610      	mov	r0, r2
 8007540:	4619      	mov	r1, r3
 8007542:	4603      	mov	r3, r0
 8007544:	4642      	mov	r2, r8
 8007546:	189b      	adds	r3, r3, r2
 8007548:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800754c:	464b      	mov	r3, r9
 800754e:	460a      	mov	r2, r1
 8007550:	eb42 0303 	adc.w	r3, r2, r3
 8007554:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007562:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007564:	f04f 0200 	mov.w	r2, #0
 8007568:	f04f 0300 	mov.w	r3, #0
 800756c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007570:	4649      	mov	r1, r9
 8007572:	008b      	lsls	r3, r1, #2
 8007574:	4641      	mov	r1, r8
 8007576:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800757a:	4641      	mov	r1, r8
 800757c:	008a      	lsls	r2, r1, #2
 800757e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007582:	f7f9 fb19 	bl	8000bb8 <__aeabi_uldivmod>
 8007586:	4602      	mov	r2, r0
 8007588:	460b      	mov	r3, r1
 800758a:	4611      	mov	r1, r2
 800758c:	4b38      	ldr	r3, [pc, #224]	@ (8007670 <UART_SetConfig+0x4e4>)
 800758e:	fba3 2301 	umull	r2, r3, r3, r1
 8007592:	095b      	lsrs	r3, r3, #5
 8007594:	2264      	movs	r2, #100	@ 0x64
 8007596:	fb02 f303 	mul.w	r3, r2, r3
 800759a:	1acb      	subs	r3, r1, r3
 800759c:	011b      	lsls	r3, r3, #4
 800759e:	3332      	adds	r3, #50	@ 0x32
 80075a0:	4a33      	ldr	r2, [pc, #204]	@ (8007670 <UART_SetConfig+0x4e4>)
 80075a2:	fba2 2303 	umull	r2, r3, r2, r3
 80075a6:	095b      	lsrs	r3, r3, #5
 80075a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80075ac:	441c      	add	r4, r3
 80075ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075b2:	2200      	movs	r2, #0
 80075b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80075b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80075b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80075bc:	4642      	mov	r2, r8
 80075be:	464b      	mov	r3, r9
 80075c0:	1891      	adds	r1, r2, r2
 80075c2:	60b9      	str	r1, [r7, #8]
 80075c4:	415b      	adcs	r3, r3
 80075c6:	60fb      	str	r3, [r7, #12]
 80075c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80075cc:	4641      	mov	r1, r8
 80075ce:	1851      	adds	r1, r2, r1
 80075d0:	6039      	str	r1, [r7, #0]
 80075d2:	4649      	mov	r1, r9
 80075d4:	414b      	adcs	r3, r1
 80075d6:	607b      	str	r3, [r7, #4]
 80075d8:	f04f 0200 	mov.w	r2, #0
 80075dc:	f04f 0300 	mov.w	r3, #0
 80075e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80075e4:	4659      	mov	r1, fp
 80075e6:	00cb      	lsls	r3, r1, #3
 80075e8:	4651      	mov	r1, sl
 80075ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80075ee:	4651      	mov	r1, sl
 80075f0:	00ca      	lsls	r2, r1, #3
 80075f2:	4610      	mov	r0, r2
 80075f4:	4619      	mov	r1, r3
 80075f6:	4603      	mov	r3, r0
 80075f8:	4642      	mov	r2, r8
 80075fa:	189b      	adds	r3, r3, r2
 80075fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80075fe:	464b      	mov	r3, r9
 8007600:	460a      	mov	r2, r1
 8007602:	eb42 0303 	adc.w	r3, r2, r3
 8007606:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	663b      	str	r3, [r7, #96]	@ 0x60
 8007612:	667a      	str	r2, [r7, #100]	@ 0x64
 8007614:	f04f 0200 	mov.w	r2, #0
 8007618:	f04f 0300 	mov.w	r3, #0
 800761c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007620:	4649      	mov	r1, r9
 8007622:	008b      	lsls	r3, r1, #2
 8007624:	4641      	mov	r1, r8
 8007626:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800762a:	4641      	mov	r1, r8
 800762c:	008a      	lsls	r2, r1, #2
 800762e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007632:	f7f9 fac1 	bl	8000bb8 <__aeabi_uldivmod>
 8007636:	4602      	mov	r2, r0
 8007638:	460b      	mov	r3, r1
 800763a:	4b0d      	ldr	r3, [pc, #52]	@ (8007670 <UART_SetConfig+0x4e4>)
 800763c:	fba3 1302 	umull	r1, r3, r3, r2
 8007640:	095b      	lsrs	r3, r3, #5
 8007642:	2164      	movs	r1, #100	@ 0x64
 8007644:	fb01 f303 	mul.w	r3, r1, r3
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	011b      	lsls	r3, r3, #4
 800764c:	3332      	adds	r3, #50	@ 0x32
 800764e:	4a08      	ldr	r2, [pc, #32]	@ (8007670 <UART_SetConfig+0x4e4>)
 8007650:	fba2 2303 	umull	r2, r3, r2, r3
 8007654:	095b      	lsrs	r3, r3, #5
 8007656:	f003 020f 	and.w	r2, r3, #15
 800765a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4422      	add	r2, r4
 8007662:	609a      	str	r2, [r3, #8]
}
 8007664:	bf00      	nop
 8007666:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800766a:	46bd      	mov	sp, r7
 800766c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007670:	51eb851f 	.word	0x51eb851f

08007674 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800767e:	2300      	movs	r3, #0
 8007680:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8007682:	6839      	ldr	r1, [r7, #0]
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f001 fca2 	bl	8008fce <VL53L0X_get_offset_calibration_data_micro_meter>
 800768a:	4603      	mov	r3, r0
 800768c:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800768e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007692:	4618      	mov	r0, r3
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
	...

0800769c <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800769c:	b5b0      	push	{r4, r5, r7, lr}
 800769e:	b096      	sub	sp, #88	@ 0x58
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076a4:	2300      	movs	r3, #0
 80076a6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 80076aa:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d107      	bne.n	80076c2 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80076b2:	2200      	movs	r2, #0
 80076b4:	2188      	movs	r1, #136	@ 0x88
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f004 fe96 	bl	800c3e8 <VL53L0X_WrByte>
 80076bc:	4603      	mov	r3, r0
 80076be:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80076d0:	f8a3 2152 	strh.w	r2, [r3, #338]	@ 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80076da:	f8a3 2154 	strh.w	r2, [r3, #340]	@ 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4a9e      	ldr	r2, [pc, #632]	@ (800795c <VL53L0X_DataInit+0x2c0>)
 80076e2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	4a9d      	ldr	r2, [pc, #628]	@ (8007960 <VL53L0X_DataInit+0x2c4>)
 80076ea:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80076f4:	f107 0310 	add.w	r3, r7, #16
 80076f8:	4619      	mov	r1, r3
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 fac0 	bl	8007c80 <VL53L0X_GetDeviceParameters>
 8007700:	4603      	mov	r3, r0
 8007702:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8007706:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800770a:	2b00      	cmp	r3, #0
 800770c:	d112      	bne.n	8007734 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800770e:	2300      	movs	r3, #0
 8007710:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8007712:	2300      	movs	r3, #0
 8007714:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f103 0410 	add.w	r4, r3, #16
 800771c:	f107 0510 	add.w	r5, r7, #16
 8007720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800772a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800772c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007730:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2264      	movs	r2, #100	@ 0x64
 8007738:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f44f 7261 	mov.w	r2, #900	@ 0x384
 8007742:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800774c:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8007756:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2201      	movs	r2, #1
 800775e:	f883 2150 	strb.w	r2, [r3, #336]	@ 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007762:	2201      	movs	r2, #1
 8007764:	2180      	movs	r1, #128	@ 0x80
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f004 fe3e 	bl	800c3e8 <VL53L0X_WrByte>
 800776c:	4603      	mov	r3, r0
 800776e:	461a      	mov	r2, r3
 8007770:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007774:	4313      	orrs	r3, r2
 8007776:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800777a:	2201      	movs	r2, #1
 800777c:	21ff      	movs	r1, #255	@ 0xff
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f004 fe32 	bl	800c3e8 <VL53L0X_WrByte>
 8007784:	4603      	mov	r3, r0
 8007786:	461a      	mov	r2, r3
 8007788:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800778c:	4313      	orrs	r3, r2
 800778e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007792:	2200      	movs	r2, #0
 8007794:	2100      	movs	r1, #0
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f004 fe26 	bl	800c3e8 <VL53L0X_WrByte>
 800779c:	4603      	mov	r3, r0
 800779e:	461a      	mov	r2, r3
 80077a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80077a4:	4313      	orrs	r3, r2
 80077a6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 80077aa:	f107 030f 	add.w	r3, r7, #15
 80077ae:	461a      	mov	r2, r3
 80077b0:	2191      	movs	r1, #145	@ 0x91
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f004 fe9a 	bl	800c4ec <VL53L0X_RdByte>
 80077b8:	4603      	mov	r3, r0
 80077ba:	461a      	mov	r2, r3
 80077bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80077c0:	4313      	orrs	r3, r2
 80077c2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 80077c6:	7bfa      	ldrb	r2, [r7, #15]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f883 213a 	strb.w	r2, [r3, #314]	@ 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 80077ce:	2201      	movs	r2, #1
 80077d0:	2100      	movs	r1, #0
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f004 fe08 	bl	800c3e8 <VL53L0X_WrByte>
 80077d8:	4603      	mov	r3, r0
 80077da:	461a      	mov	r2, r3
 80077dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80077e0:	4313      	orrs	r3, r2
 80077e2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80077e6:	2200      	movs	r2, #0
 80077e8:	21ff      	movs	r1, #255	@ 0xff
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f004 fdfc 	bl	800c3e8 <VL53L0X_WrByte>
 80077f0:	4603      	mov	r3, r0
 80077f2:	461a      	mov	r2, r3
 80077f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80077f8:	4313      	orrs	r3, r2
 80077fa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80077fe:	2200      	movs	r2, #0
 8007800:	2180      	movs	r1, #128	@ 0x80
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f004 fdf0 	bl	800c3e8 <VL53L0X_WrByte>
 8007808:	4603      	mov	r3, r0
 800780a:	461a      	mov	r2, r3
 800780c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007810:	4313      	orrs	r3, r2
 8007812:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007816:	2300      	movs	r3, #0
 8007818:	653b      	str	r3, [r7, #80]	@ 0x50
 800781a:	e014      	b.n	8007846 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800781c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8007820:	2b00      	cmp	r3, #0
 8007822:	d114      	bne.n	800784e <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8007824:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007826:	b29b      	uxth	r3, r3
 8007828:	2201      	movs	r2, #1
 800782a:	4619      	mov	r1, r3
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fd31 	bl	8008294 <VL53L0X_SetLimitCheckEnable>
 8007832:	4603      	mov	r3, r0
 8007834:	461a      	mov	r2, r3
 8007836:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800783a:	4313      	orrs	r3, r2
 800783c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007840:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007842:	3301      	adds	r3, #1
 8007844:	653b      	str	r3, [r7, #80]	@ 0x50
 8007846:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007848:	2b05      	cmp	r3, #5
 800784a:	dde7      	ble.n	800781c <VL53L0X_DataInit+0x180>
 800784c:	e000      	b.n	8007850 <VL53L0X_DataInit+0x1b4>
		else
			break;
 800784e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8007850:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8007854:	2b00      	cmp	r3, #0
 8007856:	d107      	bne.n	8007868 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007858:	2200      	movs	r2, #0
 800785a:	2102      	movs	r1, #2
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fd19 	bl	8008294 <VL53L0X_SetLimitCheckEnable>
 8007862:	4603      	mov	r3, r0
 8007864:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007868:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800786c:	2b00      	cmp	r3, #0
 800786e:	d107      	bne.n	8007880 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007870:	2200      	movs	r2, #0
 8007872:	2103      	movs	r1, #3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fd0d 	bl	8008294 <VL53L0X_SetLimitCheckEnable>
 800787a:	4603      	mov	r3, r0
 800787c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007880:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8007884:	2b00      	cmp	r3, #0
 8007886:	d107      	bne.n	8007898 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007888:	2200      	movs	r2, #0
 800788a:	2104      	movs	r1, #4
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fd01 	bl	8008294 <VL53L0X_SetLimitCheckEnable>
 8007892:	4603      	mov	r3, r0
 8007894:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007898:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800789c:	2b00      	cmp	r3, #0
 800789e:	d107      	bne.n	80078b0 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80078a0:	2200      	movs	r2, #0
 80078a2:	2105      	movs	r1, #5
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 fcf5 	bl	8008294 <VL53L0X_SetLimitCheckEnable>
 80078aa:	4603      	mov	r3, r0
 80078ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 80078b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d108      	bne.n	80078ca <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80078b8:	f44f 1290 	mov.w	r2, #1179648	@ 0x120000
 80078bc:	2100      	movs	r1, #0
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fd98 	bl	80083f4 <VL53L0X_SetLimitCheckValue>
 80078c4:	4603      	mov	r3, r0
 80078c6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80078ca:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d108      	bne.n	80078e4 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80078d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80078d6:	2101      	movs	r1, #1
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 fd8b 	bl	80083f4 <VL53L0X_SetLimitCheckValue>
 80078de:	4603      	mov	r3, r0
 80078e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80078e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d108      	bne.n	80078fe <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80078ec:	f44f 120c 	mov.w	r2, #2293760	@ 0x230000
 80078f0:	2102      	movs	r1, #2
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fd7e 	bl	80083f4 <VL53L0X_SetLimitCheckValue>
 80078f8:	4603      	mov	r3, r0
 80078fa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80078fe:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8007902:	2b00      	cmp	r3, #0
 8007904:	d107      	bne.n	8007916 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007906:	2200      	movs	r2, #0
 8007908:	2103      	movs	r1, #3
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 fd72 	bl	80083f4 <VL53L0X_SetLimitCheckValue>
 8007910:	4603      	mov	r3, r0
 8007912:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007916:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10f      	bne.n	800793e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	22ff      	movs	r2, #255	@ 0xff
 8007922:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007926:	22ff      	movs	r2, #255	@ 0xff
 8007928:	2101      	movs	r1, #1
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f004 fd5c 	bl	800c3e8 <VL53L0X_WrByte>
 8007930:	4603      	mov	r3, r0
 8007932:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2201      	movs	r2, #1
 800793a:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800793e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8007942:	2b00      	cmp	r3, #0
 8007944:	d103      	bne.n	800794e <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800794e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 8007952:	4618      	mov	r0, r3
 8007954:	3758      	adds	r7, #88	@ 0x58
 8007956:	46bd      	mov	sp, r7
 8007958:	bdb0      	pop	{r4, r5, r7, pc}
 800795a:	bf00      	nop
 800795c:	00016b85 	.word	0x00016b85
 8007960:	000970a4 	.word	0x000970a4

08007964 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8007964:	b5b0      	push	{r4, r5, r7, lr}
 8007966:	b09e      	sub	sp, #120	@ 0x78
 8007968:	af02      	add	r7, sp, #8
 800796a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800796c:	2300      	movs	r3, #0
 800796e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8007972:	f107 031c 	add.w	r3, r7, #28
 8007976:	2240      	movs	r2, #64	@ 0x40
 8007978:	2100      	movs	r1, #0
 800797a:	4618      	mov	r0, r3
 800797c:	f005 fcc1 	bl	800d302 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8007980:	2300      	movs	r3, #0
 8007982:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8007984:	2300      	movs	r3, #0
 8007986:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8007988:	2300      	movs	r3, #0
 800798a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint32_t count = 0;
 800798e:	2300      	movs	r3, #0
 8007990:	663b      	str	r3, [r7, #96]	@ 0x60
	uint8_t isApertureSpads = 0;
 8007992:	2300      	movs	r3, #0
 8007994:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8007996:	2300      	movs	r3, #0
 8007998:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800799a:	2300      	movs	r3, #0
 800799c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80079a0:	2101      	movs	r1, #1
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f002 fa69 	bl	8009e7a <VL53L0X_get_info_from_device>
 80079a8:	4603      	mov	r3, r0
 80079aa:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 80079b4:	663b      	str	r3, [r7, #96]	@ 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 80079bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 80079c0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d80d      	bhi.n	80079e4 <VL53L0X_StaticInit+0x80>
 80079c8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d102      	bne.n	80079d6 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 80079d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079d2:	2b20      	cmp	r3, #32
 80079d4:	d806      	bhi.n	80079e4 <VL53L0X_StaticInit+0x80>
 80079d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10e      	bne.n	80079fc <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 80079de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80079e0:	2b0c      	cmp	r3, #12
 80079e2:	d90b      	bls.n	80079fc <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80079e4:	f107 0218 	add.w	r2, r7, #24
 80079e8:	f107 0314 	add.w	r3, r7, #20
 80079ec:	4619      	mov	r1, r3
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f001 fce8 	bl	80093c4 <VL53L0X_perform_ref_spad_management>
 80079f4:	4603      	mov	r3, r0
 80079f6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80079fa:	e009      	b.n	8007a10 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80079fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007a00:	461a      	mov	r2, r3
 8007a02:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f001 fee9 	bl	80097dc <VL53L0X_set_reference_spads>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8007a10:	4b93      	ldr	r3, [pc, #588]	@ (8007c60 <VL53L0X_StaticInit+0x2fc>)
 8007a12:	66bb      	str	r3, [r7, #104]	@ 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8007a14:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d10f      	bne.n	8007a3c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 8007a22:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8007a26:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d104      	bne.n	8007a38 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8007a34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a36:	e001      	b.n	8007a3c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8007a38:	4b89      	ldr	r3, [pc, #548]	@ (8007c60 <VL53L0X_StaticInit+0x2fc>)
 8007a3a:	66bb      	str	r3, [r7, #104]	@ 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8007a3c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d106      	bne.n	8007a52 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8007a44:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f003 fdb8 	bl	800b5bc <VL53L0X_load_tuning_settings>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8007a52:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10a      	bne.n	8007a70 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	9300      	str	r3, [sp, #0]
 8007a5e:	2304      	movs	r3, #4
 8007a60:	2200      	movs	r2, #0
 8007a62:	2100      	movs	r1, #0
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f001 f8e5 	bl	8008c34 <VL53L0X_SetGpioConfig>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007a70:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d121      	bne.n	8007abc <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007a78:	2201      	movs	r2, #1
 8007a7a:	21ff      	movs	r1, #255	@ 0xff
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f004 fcb3 	bl	800c3e8 <VL53L0X_WrByte>
 8007a82:	4603      	mov	r3, r0
 8007a84:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8007a88:	f107 031a 	add.w	r3, r7, #26
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	2184      	movs	r1, #132	@ 0x84
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f004 fd55 	bl	800c540 <VL53L0X_RdWord>
 8007a96:	4603      	mov	r3, r0
 8007a98:	461a      	mov	r2, r3
 8007a9a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	21ff      	movs	r1, #255	@ 0xff
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f004 fc9d 	bl	800c3e8 <VL53L0X_WrByte>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007abc:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d104      	bne.n	8007ace <VL53L0X_StaticInit+0x16a>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8007ac4:	8b7b      	ldrh	r3, [r7, #26]
 8007ac6:	011a      	lsls	r2, r3, #4
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8007ace:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d108      	bne.n	8007ae8 <VL53L0X_StaticInit+0x184>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8007ad6:	f107 031c 	add.w	r3, r7, #28
 8007ada:	4619      	mov	r1, r3
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f000 f8cf 	bl	8007c80 <VL53L0X_GetDeviceParameters>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8007ae8:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d110      	bne.n	8007b12 <VL53L0X_StaticInit+0x1ae>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8007af0:	f107 0319 	add.w	r3, r7, #25
 8007af4:	4619      	mov	r1, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 f991 	bl	8007e1e <VL53L0X_GetFractionEnable>
 8007afc:	4603      	mov	r3, r0
 8007afe:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8007b02:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d103      	bne.n	8007b12 <VL53L0X_StaticInit+0x1ae>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8007b0a:	7e7a      	ldrb	r2, [r7, #25]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8007b12:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10e      	bne.n	8007b38 <VL53L0X_StaticInit+0x1d4>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f103 0410 	add.w	r4, r3, #16
 8007b20:	f107 051c 	add.w	r5, r7, #28
 8007b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b30:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007b34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8007b38:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d111      	bne.n	8007b64 <VL53L0X_StaticInit+0x200>
		Status = VL53L0X_RdByte(Dev,
 8007b40:	f107 0319 	add.w	r3, r7, #25
 8007b44:	461a      	mov	r2, r3
 8007b46:	2101      	movs	r1, #1
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f004 fccf 	bl	800c4ec <VL53L0X_RdByte>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8007b54:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d103      	bne.n	8007b64 <VL53L0X_StaticInit+0x200>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8007b5c:	7e7a      	ldrb	r2, [r7, #25]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8007b64:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d107      	bne.n	8007b7c <VL53L0X_StaticInit+0x218>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	2100      	movs	r1, #0
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f9c9 	bl	8007f08 <VL53L0X_SetSequenceStepEnable>
 8007b76:	4603      	mov	r3, r0
 8007b78:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8007b7c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d107      	bne.n	8007b94 <VL53L0X_StaticInit+0x230>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8007b84:	2200      	movs	r2, #0
 8007b86:	2102      	movs	r1, #2
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f9bd 	bl	8007f08 <VL53L0X_SetSequenceStepEnable>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8007b94:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d103      	bne.n	8007ba4 <VL53L0X_StaticInit+0x240>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2203      	movs	r2, #3
 8007ba0:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8007ba4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d109      	bne.n	8007bc0 <VL53L0X_StaticInit+0x25c>
		Status = VL53L0X_GetVcselPulsePeriod(
 8007bac:	f107 0313 	add.w	r3, r7, #19
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f98f 	bl	8007ed8 <VL53L0X_GetVcselPulsePeriod>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007bc0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d103      	bne.n	8007bd0 <VL53L0X_StaticInit+0x26c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007bc8:	7cfa      	ldrb	r2, [r7, #19]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8007bd0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d109      	bne.n	8007bec <VL53L0X_StaticInit+0x288>
		Status = VL53L0X_GetVcselPulsePeriod(
 8007bd8:	f107 0313 	add.w	r3, r7, #19
 8007bdc:	461a      	mov	r2, r3
 8007bde:	2101      	movs	r1, #1
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f979 	bl	8007ed8 <VL53L0X_GetVcselPulsePeriod>
 8007be6:	4603      	mov	r3, r0
 8007be8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007bec:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d103      	bne.n	8007bfc <VL53L0X_StaticInit+0x298>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007bf4:	7cfa      	ldrb	r2, [r7, #19]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8007bfc:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d109      	bne.n	8007c18 <VL53L0X_StaticInit+0x2b4>
		Status = get_sequence_step_timeout(
 8007c04:	f107 030c 	add.w	r3, r7, #12
 8007c08:	461a      	mov	r2, r3
 8007c0a:	2103      	movs	r1, #3
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f002 feb3 	bl	800a978 <get_sequence_step_timeout>
 8007c12:	4603      	mov	r3, r0
 8007c14:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007c18:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d103      	bne.n	8007c28 <VL53L0X_StaticInit+0x2c4>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8007c28:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d109      	bne.n	8007c44 <VL53L0X_StaticInit+0x2e0>
		Status = get_sequence_step_timeout(
 8007c30:	f107 030c 	add.w	r3, r7, #12
 8007c34:	461a      	mov	r2, r3
 8007c36:	2104      	movs	r1, #4
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f002 fe9d 	bl	800a978 <get_sequence_step_timeout>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007c44:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d103      	bne.n	8007c54 <VL53L0X_StaticInit+0x2f0>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007c54:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3770      	adds	r7, #112	@ 0x70
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bdb0      	pop	{r4, r5, r7, pc}
 8007c60:	20000010 	.word	0x20000010

08007c64 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b085      	sub	sp, #20
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8007c6c:	239d      	movs	r3, #157	@ 0x9d
 8007c6e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8007c70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3714      	adds	r7, #20
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	4619      	mov	r1, r3
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 f8b0 	bl	8007df8 <VL53L0X_GetDeviceMode>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007c9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d107      	bne.n	8007cb4 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	3308      	adds	r3, #8
 8007ca8:	4619      	mov	r1, r3
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 fa76 	bl	800819c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8007cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d102      	bne.n	8007cc2 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8007cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d107      	bne.n	8007cda <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	3310      	adds	r3, #16
 8007cce:	4619      	mov	r1, r3
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f000 faac 	bl	800822e <VL53L0X_GetXTalkCompensationRateMegaCps>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8007cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d107      	bne.n	8007cf2 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	3314      	adds	r3, #20
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f7ff fcc3 	bl	8007674 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8007cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d134      	bne.n	8007d64 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	60bb      	str	r3, [r7, #8]
 8007cfe:	e02a      	b.n	8007d56 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8007d00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d12a      	bne.n	8007d5e <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	b299      	uxth	r1, r3
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	3308      	adds	r3, #8
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	683a      	ldr	r2, [r7, #0]
 8007d14:	4413      	add	r3, r2
 8007d16:	3304      	adds	r3, #4
 8007d18:	461a      	mov	r2, r3
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fbcc 	bl	80084b8 <VL53L0X_GetLimitCheckValue>
 8007d20:	4603      	mov	r3, r0
 8007d22:	461a      	mov	r2, r3
 8007d24:	7bfb      	ldrb	r3, [r7, #15]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8007d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d117      	bne.n	8007d62 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	b299      	uxth	r1, r3
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	3318      	adds	r3, #24
 8007d3a:	683a      	ldr	r2, [r7, #0]
 8007d3c:	4413      	add	r3, r2
 8007d3e:	461a      	mov	r2, r3
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 fb33 	bl	80083ac <VL53L0X_GetLimitCheckEnable>
 8007d46:	4603      	mov	r3, r0
 8007d48:	461a      	mov	r2, r3
 8007d4a:	7bfb      	ldrb	r3, [r7, #15]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	3301      	adds	r3, #1
 8007d54:	60bb      	str	r3, [r7, #8]
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	2b05      	cmp	r3, #5
 8007d5a:	ddd1      	ble.n	8007d00 <VL53L0X_GetDeviceParameters+0x80>
 8007d5c:	e002      	b.n	8007d64 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8007d5e:	bf00      	nop
 8007d60:	e000      	b.n	8007d64 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8007d62:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d107      	bne.n	8007d7c <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	333c      	adds	r3, #60	@ 0x3c
 8007d70:	4619      	mov	r1, r3
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fc2e 	bl	80085d4 <VL53L0X_GetWrapAroundCheckEnable>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8007d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d107      	bne.n	8007d94 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	3304      	adds	r3, #4
 8007d88:	4619      	mov	r1, r3
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f879 	bl	8007e82 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8007d90:	4603      	mov	r3, r0
 8007d92:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007d94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	460b      	mov	r3, r1
 8007daa:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007dac:	2300      	movs	r3, #0
 8007dae:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8007db0:	78fb      	ldrb	r3, [r7, #3]
 8007db2:	2b15      	cmp	r3, #21
 8007db4:	bf8c      	ite	hi
 8007db6:	2201      	movhi	r2, #1
 8007db8:	2200      	movls	r2, #0
 8007dba:	b2d2      	uxtb	r2, r2
 8007dbc:	2a00      	cmp	r2, #0
 8007dbe:	d10f      	bne.n	8007de0 <VL53L0X_SetDeviceMode+0x40>
 8007dc0:	4a0c      	ldr	r2, [pc, #48]	@ (8007df4 <VL53L0X_SetDeviceMode+0x54>)
 8007dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8007dc6:	f003 0301 	and.w	r3, r3, #1
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	bf14      	ite	ne
 8007dce:	2301      	movne	r3, #1
 8007dd0:	2300      	moveq	r3, #0
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d003      	beq.n	8007de0 <VL53L0X_SetDeviceMode+0x40>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	78fa      	ldrb	r2, [r7, #3]
 8007ddc:	741a      	strb	r2, [r3, #16]
		break;
 8007dde:	e001      	b.n	8007de4 <VL53L0X_SetDeviceMode+0x44>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8007de0:	23f8      	movs	r3, #248	@ 0xf8
 8007de2:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007de4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3714      	adds	r7, #20
 8007dec:	46bd      	mov	sp, r7
 8007dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df2:	4770      	bx	lr
 8007df4:	0030000b 	.word	0x0030000b

08007df8 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b085      	sub	sp, #20
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e02:	2300      	movs	r3, #0
 8007e04:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	7c1a      	ldrb	r2, [r3, #16]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3714      	adds	r7, #20
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr

08007e1e <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b084      	sub	sp, #16
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
 8007e26:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8007e2c:	683a      	ldr	r2, [r7, #0]
 8007e2e:	2109      	movs	r1, #9
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f004 fb5b 	bl	800c4ec <VL53L0X_RdByte>
 8007e36:	4603      	mov	r3, r0
 8007e38:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d106      	bne.n	8007e50 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007e50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3710      	adds	r7, #16
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e66:	2300      	movs	r3, #0
 8007e68:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8007e6a:	6839      	ldr	r1, [r7, #0]
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f003 fa13 	bl	800b298 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8007e72:	4603      	mov	r3, r0
 8007e74:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8007e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b084      	sub	sp, #16
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
 8007e8a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8007e90:	6839      	ldr	r1, [r7, #0]
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f003 fae0 	bl	800b458 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8007e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	70fb      	strb	r3, [r7, #3]
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8007ebc:	78ba      	ldrb	r2, [r7, #2]
 8007ebe:	78fb      	ldrb	r3, [r7, #3]
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f002 ff2a 	bl	800ad1c <VL53L0X_set_vcsel_pulse_period>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8007ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b086      	sub	sp, #24
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	607a      	str	r2, [r7, #4]
 8007ee4:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8007eea:	7afb      	ldrb	r3, [r7, #11]
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	4619      	mov	r1, r3
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f003 f99a 	bl	800b22a <VL53L0X_get_vcsel_pulse_period>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8007efa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3718      	adds	r7, #24
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
	...

08007f08 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b086      	sub	sp, #24
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	460b      	mov	r3, r1
 8007f12:	70fb      	strb	r3, [r7, #3]
 8007f14:	4613      	mov	r3, r2
 8007f16:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8007f20:	2300      	movs	r3, #0
 8007f22:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007f24:	f107 030f 	add.w	r3, r7, #15
 8007f28:	461a      	mov	r2, r3
 8007f2a:	2101      	movs	r1, #1
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f004 fadd 	bl	800c4ec <VL53L0X_RdByte>
 8007f32:	4603      	mov	r3, r0
 8007f34:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8007f36:	7bfb      	ldrb	r3, [r7, #15]
 8007f38:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8007f3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d159      	bne.n	8007ff6 <VL53L0X_SetSequenceStepEnable+0xee>
		if (SequenceStepEnabled == 1) {
 8007f42:	78bb      	ldrb	r3, [r7, #2]
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d12b      	bne.n	8007fa0 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8007f48:	78fb      	ldrb	r3, [r7, #3]
 8007f4a:	2b04      	cmp	r3, #4
 8007f4c:	d825      	bhi.n	8007f9a <VL53L0X_SetSequenceStepEnable+0x92>
 8007f4e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f54 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8007f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f54:	08007f69 	.word	0x08007f69
 8007f58:	08007f73 	.word	0x08007f73
 8007f5c:	08007f7d 	.word	0x08007f7d
 8007f60:	08007f87 	.word	0x08007f87
 8007f64:	08007f91 	.word	0x08007f91
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8007f68:	7dbb      	ldrb	r3, [r7, #22]
 8007f6a:	f043 0310 	orr.w	r3, r3, #16
 8007f6e:	75bb      	strb	r3, [r7, #22]
				break;
 8007f70:	e041      	b.n	8007ff6 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8007f72:	7dbb      	ldrb	r3, [r7, #22]
 8007f74:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8007f78:	75bb      	strb	r3, [r7, #22]
				break;
 8007f7a:	e03c      	b.n	8007ff6 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8007f7c:	7dbb      	ldrb	r3, [r7, #22]
 8007f7e:	f043 0304 	orr.w	r3, r3, #4
 8007f82:	75bb      	strb	r3, [r7, #22]
				break;
 8007f84:	e037      	b.n	8007ff6 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8007f86:	7dbb      	ldrb	r3, [r7, #22]
 8007f88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f8c:	75bb      	strb	r3, [r7, #22]
				break;
 8007f8e:	e032      	b.n	8007ff6 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8007f90:	7dbb      	ldrb	r3, [r7, #22]
 8007f92:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007f96:	75bb      	strb	r3, [r7, #22]
				break;
 8007f98:	e02d      	b.n	8007ff6 <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007f9a:	23fc      	movs	r3, #252	@ 0xfc
 8007f9c:	75fb      	strb	r3, [r7, #23]
 8007f9e:	e02a      	b.n	8007ff6 <VL53L0X_SetSequenceStepEnable+0xee>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8007fa0:	78fb      	ldrb	r3, [r7, #3]
 8007fa2:	2b04      	cmp	r3, #4
 8007fa4:	d825      	bhi.n	8007ff2 <VL53L0X_SetSequenceStepEnable+0xea>
 8007fa6:	a201      	add	r2, pc, #4	@ (adr r2, 8007fac <VL53L0X_SetSequenceStepEnable+0xa4>)
 8007fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fac:	08007fc1 	.word	0x08007fc1
 8007fb0:	08007fcb 	.word	0x08007fcb
 8007fb4:	08007fd5 	.word	0x08007fd5
 8007fb8:	08007fdf 	.word	0x08007fdf
 8007fbc:	08007fe9 	.word	0x08007fe9
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8007fc0:	7dbb      	ldrb	r3, [r7, #22]
 8007fc2:	f023 0310 	bic.w	r3, r3, #16
 8007fc6:	75bb      	strb	r3, [r7, #22]
				break;
 8007fc8:	e015      	b.n	8007ff6 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8007fca:	7dbb      	ldrb	r3, [r7, #22]
 8007fcc:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8007fd0:	75bb      	strb	r3, [r7, #22]
				break;
 8007fd2:	e010      	b.n	8007ff6 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8007fd4:	7dbb      	ldrb	r3, [r7, #22]
 8007fd6:	f023 0304 	bic.w	r3, r3, #4
 8007fda:	75bb      	strb	r3, [r7, #22]
				break;
 8007fdc:	e00b      	b.n	8007ff6 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8007fde:	7dbb      	ldrb	r3, [r7, #22]
 8007fe0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007fe4:	75bb      	strb	r3, [r7, #22]
				break;
 8007fe6:	e006      	b.n	8007ff6 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8007fe8:	7dbb      	ldrb	r3, [r7, #22]
 8007fea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fee:	75bb      	strb	r3, [r7, #22]
				break;
 8007ff0:	e001      	b.n	8007ff6 <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007ff2:	23fc      	movs	r3, #252	@ 0xfc
 8007ff4:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 8007ff6:	7bfb      	ldrb	r3, [r7, #15]
 8007ff8:	7dba      	ldrb	r2, [r7, #22]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d01e      	beq.n	800803c <VL53L0X_SetSequenceStepEnable+0x134>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8007ffe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d107      	bne.n	8008016 <VL53L0X_SetSequenceStepEnable+0x10e>
			Status = VL53L0X_WrByte(Dev,
 8008006:	7dbb      	ldrb	r3, [r7, #22]
 8008008:	461a      	mov	r2, r3
 800800a:	2101      	movs	r1, #1
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f004 f9eb 	bl	800c3e8 <VL53L0X_WrByte>
 8008012:	4603      	mov	r3, r0
 8008014:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8008016:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d103      	bne.n	8008026 <VL53L0X_SetSequenceStepEnable+0x11e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	7dba      	ldrb	r2, [r7, #22]
 8008022:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8008026:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d106      	bne.n	800803c <VL53L0X_SetSequenceStepEnable+0x134>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	695b      	ldr	r3, [r3, #20]
 8008032:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8008034:	6939      	ldr	r1, [r7, #16]
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f7ff ff10 	bl	8007e5c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800803c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008040:	4618      	mov	r0, r3
 8008042:	3718      	adds	r7, #24
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8008048:	b480      	push	{r7}
 800804a:	b087      	sub	sp, #28
 800804c:	af00      	add	r7, sp, #0
 800804e:	60f8      	str	r0, [r7, #12]
 8008050:	607b      	str	r3, [r7, #4]
 8008052:	460b      	mov	r3, r1
 8008054:	72fb      	strb	r3, [r7, #11]
 8008056:	4613      	mov	r3, r2
 8008058:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800805a:	2300      	movs	r3, #0
 800805c:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8008064:	7afb      	ldrb	r3, [r7, #11]
 8008066:	2b04      	cmp	r3, #4
 8008068:	d836      	bhi.n	80080d8 <sequence_step_enabled+0x90>
 800806a:	a201      	add	r2, pc, #4	@ (adr r2, 8008070 <sequence_step_enabled+0x28>)
 800806c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008070:	08008085 	.word	0x08008085
 8008074:	08008097 	.word	0x08008097
 8008078:	080080a9 	.word	0x080080a9
 800807c:	080080bb 	.word	0x080080bb
 8008080:	080080cd 	.word	0x080080cd
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8008084:	7abb      	ldrb	r3, [r7, #10]
 8008086:	111b      	asrs	r3, r3, #4
 8008088:	b2db      	uxtb	r3, r3
 800808a:	f003 0301 	and.w	r3, r3, #1
 800808e:	b2da      	uxtb	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	701a      	strb	r2, [r3, #0]
		break;
 8008094:	e022      	b.n	80080dc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8008096:	7abb      	ldrb	r3, [r7, #10]
 8008098:	10db      	asrs	r3, r3, #3
 800809a:	b2db      	uxtb	r3, r3
 800809c:	f003 0301 	and.w	r3, r3, #1
 80080a0:	b2da      	uxtb	r2, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	701a      	strb	r2, [r3, #0]
		break;
 80080a6:	e019      	b.n	80080dc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80080a8:	7abb      	ldrb	r3, [r7, #10]
 80080aa:	109b      	asrs	r3, r3, #2
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	f003 0301 	and.w	r3, r3, #1
 80080b2:	b2da      	uxtb	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	701a      	strb	r2, [r3, #0]
		break;
 80080b8:	e010      	b.n	80080dc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80080ba:	7abb      	ldrb	r3, [r7, #10]
 80080bc:	119b      	asrs	r3, r3, #6
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	f003 0301 	and.w	r3, r3, #1
 80080c4:	b2da      	uxtb	r2, r3
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	701a      	strb	r2, [r3, #0]
		break;
 80080ca:	e007      	b.n	80080dc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80080cc:	7abb      	ldrb	r3, [r7, #10]
 80080ce:	09db      	lsrs	r3, r3, #7
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	701a      	strb	r2, [r3, #0]
		break;
 80080d6:	e001      	b.n	80080dc <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80080d8:	23fc      	movs	r3, #252	@ 0xfc
 80080da:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80080dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	371c      	adds	r7, #28
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b084      	sub	sp, #16
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80080f6:	2300      	movs	r3, #0
 80080f8:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80080fa:	2300      	movs	r3, #0
 80080fc:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80080fe:	f107 030e 	add.w	r3, r7, #14
 8008102:	461a      	mov	r2, r3
 8008104:	2101      	movs	r1, #1
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f004 f9f0 	bl	800c4ec <VL53L0X_RdByte>
 800810c:	4603      	mov	r3, r0
 800810e:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8008110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d107      	bne.n	8008128 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8008118:	7bba      	ldrb	r2, [r7, #14]
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	2100      	movs	r1, #0
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7ff ff92 	bl	8008048 <sequence_step_enabled>
 8008124:	4603      	mov	r3, r0
 8008126:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d108      	bne.n	8008142 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8008130:	7bba      	ldrb	r2, [r7, #14]
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	3302      	adds	r3, #2
 8008136:	2101      	movs	r1, #1
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f7ff ff85 	bl	8008048 <sequence_step_enabled>
 800813e:	4603      	mov	r3, r0
 8008140:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d108      	bne.n	800815c <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800814a:	7bba      	ldrb	r2, [r7, #14]
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	3301      	adds	r3, #1
 8008150:	2102      	movs	r1, #2
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f7ff ff78 	bl	8008048 <sequence_step_enabled>
 8008158:	4603      	mov	r3, r0
 800815a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800815c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d108      	bne.n	8008176 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8008164:	7bba      	ldrb	r2, [r7, #14]
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	3303      	adds	r3, #3
 800816a:	2103      	movs	r1, #3
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f7ff ff6b 	bl	8008048 <sequence_step_enabled>
 8008172:	4603      	mov	r3, r0
 8008174:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d108      	bne.n	8008190 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800817e:	7bba      	ldrb	r2, [r7, #14]
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	3304      	adds	r3, #4
 8008184:	2104      	movs	r1, #4
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f7ff ff5e 	bl	8008048 <sequence_step_enabled>
 800818c:	4603      	mov	r3, r0
 800818e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008190:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3710      	adds	r7, #16
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80081a6:	2300      	movs	r3, #0
 80081a8:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80081aa:	f107 030c 	add.w	r3, r7, #12
 80081ae:	461a      	mov	r2, r3
 80081b0:	21f8      	movs	r1, #248	@ 0xf8
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f004 f9c4 	bl	800c540 <VL53L0X_RdWord>
 80081b8:	4603      	mov	r3, r0
 80081ba:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80081bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d108      	bne.n	80081d6 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80081c4:	f107 0308 	add.w	r3, r7, #8
 80081c8:	461a      	mov	r2, r3
 80081ca:	2104      	movs	r1, #4
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f004 f9ed 	bl	800c5ac <VL53L0X_RdDWord>
 80081d2:	4603      	mov	r3, r0
 80081d4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80081d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d10c      	bne.n	80081f8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80081de:	89bb      	ldrh	r3, [r7, #12]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d005      	beq.n	80081f0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	89ba      	ldrh	r2, [r7, #12]
 80081e8:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80081f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3710      	adds	r7, #16
 8008200:	46bd      	mov	sp, r7
 8008202:	bd80      	pop	{r7, pc}

08008204 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800820e:	2300      	movs	r3, #0
 8008210:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	7f1b      	ldrb	r3, [r3, #28]
 8008216:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	7bba      	ldrb	r2, [r7, #14]
 800821c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800821e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008222:	4618      	mov	r0, r3
 8008224:	3714      	adds	r7, #20
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr

0800822e <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b086      	sub	sp, #24
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
 8008236:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008238:	2300      	movs	r3, #0
 800823a:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800823c:	f107 030e 	add.w	r3, r7, #14
 8008240:	461a      	mov	r2, r3
 8008242:	2120      	movs	r1, #32
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f004 f97b 	bl	800c540 <VL53L0X_RdWord>
 800824a:	4603      	mov	r3, r0
 800824c:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800824e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d118      	bne.n	8008288 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8008256:	89fb      	ldrh	r3, [r7, #14]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d109      	bne.n	8008270 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6a1b      	ldr	r3, [r3, #32]
 8008260:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	771a      	strb	r2, [r3, #28]
 800826e:	e00b      	b.n	8008288 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8008270:	89fb      	ldrh	r3, [r7, #14]
 8008272:	00db      	lsls	r3, r3, #3
 8008274:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	693a      	ldr	r2, [r7, #16]
 800827a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	693a      	ldr	r2, [r7, #16]
 8008280:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2201      	movs	r2, #1
 8008286:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008288:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800828c:	4618      	mov	r0, r3
 800828e:	3718      	adds	r7, #24
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b086      	sub	sp, #24
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	460b      	mov	r3, r1
 800829e:	807b      	strh	r3, [r7, #2]
 80082a0:	4613      	mov	r3, r2
 80082a2:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80082a4:	2300      	movs	r3, #0
 80082a6:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80082a8:	2300      	movs	r3, #0
 80082aa:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80082ac:	2300      	movs	r3, #0
 80082ae:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80082b0:	2300      	movs	r3, #0
 80082b2:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80082b4:	887b      	ldrh	r3, [r7, #2]
 80082b6:	2b05      	cmp	r3, #5
 80082b8:	d902      	bls.n	80082c0 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80082ba:	23fc      	movs	r3, #252	@ 0xfc
 80082bc:	75fb      	strb	r3, [r7, #23]
 80082be:	e05b      	b.n	8008378 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80082c0:	787b      	ldrb	r3, [r7, #1]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d106      	bne.n	80082d4 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80082c6:	2300      	movs	r3, #0
 80082c8:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80082ca:	2300      	movs	r3, #0
 80082cc:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80082ce:	2301      	movs	r3, #1
 80082d0:	73bb      	strb	r3, [r7, #14]
 80082d2:	e00a      	b.n	80082ea <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80082d4:	887b      	ldrh	r3, [r7, #2]
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	330c      	adds	r3, #12
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	4413      	add	r3, r2
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 80082e2:	2300      	movs	r3, #0
 80082e4:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 80082e6:	2301      	movs	r3, #1
 80082e8:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 80082ea:	887b      	ldrh	r3, [r7, #2]
 80082ec:	2b05      	cmp	r3, #5
 80082ee:	d841      	bhi.n	8008374 <VL53L0X_SetLimitCheckEnable+0xe0>
 80082f0:	a201      	add	r2, pc, #4	@ (adr r2, 80082f8 <VL53L0X_SetLimitCheckEnable+0x64>)
 80082f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f6:	bf00      	nop
 80082f8:	08008311 	.word	0x08008311
 80082fc:	0800831b 	.word	0x0800831b
 8008300:	08008331 	.word	0x08008331
 8008304:	0800833b 	.word	0x0800833b
 8008308:	08008345 	.word	0x08008345
 800830c:	0800835d 	.word	0x0800835d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	7bfa      	ldrb	r2, [r7, #15]
 8008314:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8008318:	e02e      	b.n	8008378 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800831a:	693b      	ldr	r3, [r7, #16]
 800831c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800831e:	b29b      	uxth	r3, r3
 8008320:	461a      	mov	r2, r3
 8008322:	2144      	movs	r1, #68	@ 0x44
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f004 f883 	bl	800c430 <VL53L0X_WrWord>
 800832a:	4603      	mov	r3, r0
 800832c:	75fb      	strb	r3, [r7, #23]

			break;
 800832e:	e023      	b.n	8008378 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	7bfa      	ldrb	r2, [r7, #15]
 8008334:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8008338:	e01e      	b.n	8008378 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	7bfa      	ldrb	r2, [r7, #15]
 800833e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8008342:	e019      	b.n	8008378 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8008344:	7bbb      	ldrb	r3, [r7, #14]
 8008346:	005b      	lsls	r3, r3, #1
 8008348:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800834a:	7b7b      	ldrb	r3, [r7, #13]
 800834c:	22fe      	movs	r2, #254	@ 0xfe
 800834e:	2160      	movs	r1, #96	@ 0x60
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f004 f897 	bl	800c484 <VL53L0X_UpdateByte>
 8008356:	4603      	mov	r3, r0
 8008358:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800835a:	e00d      	b.n	8008378 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800835c:	7bbb      	ldrb	r3, [r7, #14]
 800835e:	011b      	lsls	r3, r3, #4
 8008360:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8008362:	7b7b      	ldrb	r3, [r7, #13]
 8008364:	22ef      	movs	r2, #239	@ 0xef
 8008366:	2160      	movs	r1, #96	@ 0x60
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f004 f88b 	bl	800c484 <VL53L0X_UpdateByte>
 800836e:	4603      	mov	r3, r0
 8008370:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8008372:	e001      	b.n	8008378 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008374:	23fc      	movs	r3, #252	@ 0xfc
 8008376:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008378:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d10f      	bne.n	80083a0 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8008380:	787b      	ldrb	r3, [r7, #1]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d106      	bne.n	8008394 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008386:	887b      	ldrh	r3, [r7, #2]
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	4413      	add	r3, r2
 800838c:	2200      	movs	r2, #0
 800838e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8008392:	e005      	b.n	80083a0 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008394:	887b      	ldrh	r3, [r7, #2]
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	4413      	add	r3, r2
 800839a:	2201      	movs	r2, #1
 800839c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80083a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3718      	adds	r7, #24
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b087      	sub	sp, #28
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	460b      	mov	r3, r1
 80083b6:	607a      	str	r2, [r7, #4]
 80083b8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083ba:	2300      	movs	r3, #0
 80083bc:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80083be:	897b      	ldrh	r3, [r7, #10]
 80083c0:	2b05      	cmp	r3, #5
 80083c2:	d905      	bls.n	80083d0 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80083c4:	23fc      	movs	r3, #252	@ 0xfc
 80083c6:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	701a      	strb	r2, [r3, #0]
 80083ce:	e008      	b.n	80083e2 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80083d0:	897b      	ldrh	r3, [r7, #10]
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	4413      	add	r3, r2
 80083d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083da:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	7dba      	ldrb	r2, [r7, #22]
 80083e0:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80083e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	371c      	adds	r7, #28
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr
	...

080083f4 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b086      	sub	sp, #24
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	460b      	mov	r3, r1
 80083fe:	607a      	str	r2, [r7, #4]
 8008400:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008402:	2300      	movs	r3, #0
 8008404:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8008406:	897b      	ldrh	r3, [r7, #10]
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	4413      	add	r3, r2
 800840c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008410:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8008412:	7dbb      	ldrb	r3, [r7, #22]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d107      	bne.n	8008428 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008418:	897b      	ldrh	r3, [r7, #10]
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	330c      	adds	r3, #12
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	4413      	add	r3, r2
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	605a      	str	r2, [r3, #4]
 8008426:	e040      	b.n	80084aa <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8008428:	897b      	ldrh	r3, [r7, #10]
 800842a:	2b05      	cmp	r3, #5
 800842c:	d830      	bhi.n	8008490 <VL53L0X_SetLimitCheckValue+0x9c>
 800842e:	a201      	add	r2, pc, #4	@ (adr r2, 8008434 <VL53L0X_SetLimitCheckValue+0x40>)
 8008430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008434:	0800844d 	.word	0x0800844d
 8008438:	08008455 	.word	0x08008455
 800843c:	0800846b 	.word	0x0800846b
 8008440:	08008473 	.word	0x08008473
 8008444:	0800847b 	.word	0x0800847b
 8008448:	0800847b 	.word	0x0800847b

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	687a      	ldr	r2, [r7, #4]
 8008450:	635a      	str	r2, [r3, #52]	@ 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8008452:	e01f      	b.n	8008494 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8008458:	b29b      	uxth	r3, r3
 800845a:	461a      	mov	r2, r3
 800845c:	2144      	movs	r1, #68	@ 0x44
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f003 ffe6 	bl	800c430 <VL53L0X_WrWord>
 8008464:	4603      	mov	r3, r0
 8008466:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8008468:	e014      	b.n	8008494 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	63da      	str	r2, [r3, #60]	@ 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8008470:	e010      	b.n	8008494 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	641a      	str	r2, [r3, #64]	@ 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8008478:	e00c      	b.n	8008494 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800847e:	b29b      	uxth	r3, r3
 8008480:	461a      	mov	r2, r3
 8008482:	2164      	movs	r1, #100	@ 0x64
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f003 ffd3 	bl	800c430 <VL53L0X_WrWord>
 800848a:	4603      	mov	r3, r0
 800848c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800848e:	e001      	b.n	8008494 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008490:	23fc      	movs	r3, #252	@ 0xfc
 8008492:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8008494:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d106      	bne.n	80084aa <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800849c:	897b      	ldrh	r3, [r7, #10]
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	330c      	adds	r3, #12
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	4413      	add	r3, r2
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80084aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3718      	adds	r7, #24
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop

080084b8 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b088      	sub	sp, #32
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	460b      	mov	r3, r1
 80084c2:	607a      	str	r2, [r7, #4]
 80084c4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084c6:	2300      	movs	r3, #0
 80084c8:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 80084ca:	2300      	movs	r3, #0
 80084cc:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80084ce:	897b      	ldrh	r3, [r7, #10]
 80084d0:	2b05      	cmp	r3, #5
 80084d2:	d847      	bhi.n	8008564 <VL53L0X_GetLimitCheckValue+0xac>
 80084d4:	a201      	add	r2, pc, #4	@ (adr r2, 80084dc <VL53L0X_GetLimitCheckValue+0x24>)
 80084d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084da:	bf00      	nop
 80084dc:	080084f5 	.word	0x080084f5
 80084e0:	08008501 	.word	0x08008501
 80084e4:	08008527 	.word	0x08008527
 80084e8:	08008533 	.word	0x08008533
 80084ec:	0800853f 	.word	0x0800853f
 80084f0:	0800853f 	.word	0x0800853f

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084f8:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80084fa:	2300      	movs	r3, #0
 80084fc:	77bb      	strb	r3, [r7, #30]
		break;
 80084fe:	e033      	b.n	8008568 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8008500:	f107 0316 	add.w	r3, r7, #22
 8008504:	461a      	mov	r2, r3
 8008506:	2144      	movs	r1, #68	@ 0x44
 8008508:	68f8      	ldr	r0, [r7, #12]
 800850a:	f004 f819 	bl	800c540 <VL53L0X_RdWord>
 800850e:	4603      	mov	r3, r0
 8008510:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8008512:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d102      	bne.n	8008520 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800851a:	8afb      	ldrh	r3, [r7, #22]
 800851c:	025b      	lsls	r3, r3, #9
 800851e:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8008520:	2301      	movs	r3, #1
 8008522:	77bb      	strb	r3, [r7, #30]
		break;
 8008524:	e020      	b.n	8008568 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800852a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800852c:	2300      	movs	r3, #0
 800852e:	77bb      	strb	r3, [r7, #30]
		break;
 8008530:	e01a      	b.n	8008568 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008536:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8008538:	2300      	movs	r3, #0
 800853a:	77bb      	strb	r3, [r7, #30]
		break;
 800853c:	e014      	b.n	8008568 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800853e:	f107 0316 	add.w	r3, r7, #22
 8008542:	461a      	mov	r2, r3
 8008544:	2164      	movs	r1, #100	@ 0x64
 8008546:	68f8      	ldr	r0, [r7, #12]
 8008548:	f003 fffa 	bl	800c540 <VL53L0X_RdWord>
 800854c:	4603      	mov	r3, r0
 800854e:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8008550:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d102      	bne.n	800855e <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8008558:	8afb      	ldrh	r3, [r7, #22]
 800855a:	025b      	lsls	r3, r3, #9
 800855c:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800855e:	2300      	movs	r3, #0
 8008560:	77bb      	strb	r3, [r7, #30]
		break;
 8008562:	e001      	b.n	8008568 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008564:	23fc      	movs	r3, #252	@ 0xfc
 8008566:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008568:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d12a      	bne.n	80085c6 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8008570:	7fbb      	ldrb	r3, [r7, #30]
 8008572:	2b01      	cmp	r3, #1
 8008574:	d124      	bne.n	80085c0 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d110      	bne.n	800859e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800857c:	897b      	ldrh	r3, [r7, #10]
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	330c      	adds	r3, #12
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	4413      	add	r3, r2
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	69ba      	ldr	r2, [r7, #24]
 800858e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008590:	897b      	ldrh	r3, [r7, #10]
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	4413      	add	r3, r2
 8008596:	2200      	movs	r2, #0
 8008598:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800859c:	e013      	b.n	80085c6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	69ba      	ldr	r2, [r7, #24]
 80085a2:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80085a4:	897b      	ldrh	r3, [r7, #10]
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	330c      	adds	r3, #12
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4413      	add	r3, r2
 80085ae:	69ba      	ldr	r2, [r7, #24]
 80085b0:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80085b2:	897b      	ldrh	r3, [r7, #10]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	4413      	add	r3, r2
 80085b8:	2201      	movs	r2, #1
 80085ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 80085be:	e002      	b.n	80085c6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	69ba      	ldr	r2, [r7, #24]
 80085c4:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80085c6:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3720      	adds	r7, #32
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop

080085d4 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80085de:	2300      	movs	r3, #0
 80085e0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80085e2:	f107 030e 	add.w	r3, r7, #14
 80085e6:	461a      	mov	r2, r3
 80085e8:	2101      	movs	r1, #1
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f003 ff7e 	bl	800c4ec <VL53L0X_RdByte>
 80085f0:	4603      	mov	r3, r0
 80085f2:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80085f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10e      	bne.n	800861a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80085fc:	7bba      	ldrb	r2, [r7, #14]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		if (data & (0x01 << 7))
 8008604:	7bbb      	ldrb	r3, [r7, #14]
 8008606:	b25b      	sxtb	r3, r3
 8008608:	2b00      	cmp	r3, #0
 800860a:	da03      	bge.n	8008614 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	2201      	movs	r2, #1
 8008610:	701a      	strb	r2, [r3, #0]
 8008612:	e002      	b.n	800861a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	2200      	movs	r2, #0
 8008618:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800861a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d104      	bne.n	800862c <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	781a      	ldrb	r2, [r3, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800862c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008630:	4618      	mov	r0, r3
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008640:	2300      	movs	r3, #0
 8008642:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8008644:	f107 030e 	add.w	r3, r7, #14
 8008648:	4619      	mov	r1, r3
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f7ff fbd4 	bl	8007df8 <VL53L0X_GetDeviceMode>
 8008650:	4603      	mov	r3, r0
 8008652:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8008654:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d107      	bne.n	800866c <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800865c:	7bbb      	ldrb	r3, [r7, #14]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d104      	bne.n	800866c <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 f898 	bl	8008798 <VL53L0X_StartMeasurement>
 8008668:	4603      	mov	r3, r0
 800866a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800866c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d104      	bne.n	800867e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f001 fb33 	bl	8009ce0 <VL53L0X_measurement_poll_for_completion>
 800867a:	4603      	mov	r3, r0
 800867c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800867e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d106      	bne.n	8008694 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8008686:	7bbb      	ldrb	r3, [r7, #14]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d103      	bne.n	8008694 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2203      	movs	r2, #3
 8008690:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8008694:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086ac:	2300      	movs	r3, #0
 80086ae:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80086b0:	2301      	movs	r3, #1
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	68b9      	ldr	r1, [r7, #8]
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f001 fad5 	bl	8009c66 <VL53L0X_perform_ref_calibration>
 80086bc:	4603      	mov	r3, r0
 80086be:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 80086c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3718      	adds	r7, #24
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}

080086cc <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b086      	sub	sp, #24
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	460b      	mov	r3, r1
 80086d6:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80086d8:	2300      	movs	r3, #0
 80086da:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 80086e2:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 80086e4:	7dbb      	ldrb	r3, [r7, #22]
 80086e6:	2b01      	cmp	r3, #1
 80086e8:	d005      	beq.n	80086f6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 80086ea:	7dbb      	ldrb	r3, [r7, #22]
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d002      	beq.n	80086f6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 80086f0:	7dbb      	ldrb	r3, [r7, #22]
 80086f2:	2b03      	cmp	r3, #3
 80086f4:	d147      	bne.n	8008786 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 80086f6:	f107 030c 	add.w	r3, r7, #12
 80086fa:	f107 0210 	add.w	r2, r7, #16
 80086fe:	2101      	movs	r1, #1
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 fbb9 	bl	8008e78 <VL53L0X_GetInterruptThresholds>
 8008706:	4603      	mov	r3, r0
 8008708:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 8008710:	d803      	bhi.n	800871a <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8008712:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8008714:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 8008718:	d935      	bls.n	8008786 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800871a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d131      	bne.n	8008786 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8008722:	78fb      	ldrb	r3, [r7, #3]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d006      	beq.n	8008736 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8008728:	491a      	ldr	r1, [pc, #104]	@ (8008794 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f002 ff46 	bl	800b5bc <VL53L0X_load_tuning_settings>
 8008730:	4603      	mov	r3, r0
 8008732:	75fb      	strb	r3, [r7, #23]
 8008734:	e027      	b.n	8008786 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8008736:	2204      	movs	r2, #4
 8008738:	21ff      	movs	r1, #255	@ 0xff
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f003 fe54 	bl	800c3e8 <VL53L0X_WrByte>
 8008740:	4603      	mov	r3, r0
 8008742:	461a      	mov	r2, r3
 8008744:	7dfb      	ldrb	r3, [r7, #23]
 8008746:	4313      	orrs	r3, r2
 8008748:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800874a:	2200      	movs	r2, #0
 800874c:	2170      	movs	r1, #112	@ 0x70
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f003 fe4a 	bl	800c3e8 <VL53L0X_WrByte>
 8008754:	4603      	mov	r3, r0
 8008756:	461a      	mov	r2, r3
 8008758:	7dfb      	ldrb	r3, [r7, #23]
 800875a:	4313      	orrs	r3, r2
 800875c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800875e:	2200      	movs	r2, #0
 8008760:	21ff      	movs	r1, #255	@ 0xff
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f003 fe40 	bl	800c3e8 <VL53L0X_WrByte>
 8008768:	4603      	mov	r3, r0
 800876a:	461a      	mov	r2, r3
 800876c:	7dfb      	ldrb	r3, [r7, #23]
 800876e:	4313      	orrs	r3, r2
 8008770:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008772:	2200      	movs	r2, #0
 8008774:	2180      	movs	r1, #128	@ 0x80
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f003 fe36 	bl	800c3e8 <VL53L0X_WrByte>
 800877c:	4603      	mov	r3, r0
 800877e:	461a      	mov	r2, r3
 8008780:	7dfb      	ldrb	r3, [r7, #23]
 8008782:	4313      	orrs	r3, r2
 8008784:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8008786:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800878a:	4618      	mov	r0, r3
 800878c:	3718      	adds	r7, #24
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	20000104 	.word	0x20000104

08008798 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80087a0:	2300      	movs	r3, #0
 80087a2:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 80087a4:	2301      	movs	r3, #1
 80087a6:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80087a8:	f107 030e 	add.w	r3, r7, #14
 80087ac:	4619      	mov	r1, r3
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f7ff fb22 	bl	8007df8 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 80087b4:	2201      	movs	r2, #1
 80087b6:	2180      	movs	r1, #128	@ 0x80
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f003 fe15 	bl	800c3e8 <VL53L0X_WrByte>
 80087be:	4603      	mov	r3, r0
 80087c0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80087c2:	2201      	movs	r2, #1
 80087c4:	21ff      	movs	r1, #255	@ 0xff
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f003 fe0e 	bl	800c3e8 <VL53L0X_WrByte>
 80087cc:	4603      	mov	r3, r0
 80087ce:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 80087d0:	2200      	movs	r2, #0
 80087d2:	2100      	movs	r1, #0
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f003 fe07 	bl	800c3e8 <VL53L0X_WrByte>
 80087da:	4603      	mov	r3, r0
 80087dc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 313a 	ldrb.w	r3, [r3, #314]	@ 0x13a
 80087e4:	461a      	mov	r2, r3
 80087e6:	2191      	movs	r1, #145	@ 0x91
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f003 fdfd 	bl	800c3e8 <VL53L0X_WrByte>
 80087ee:	4603      	mov	r3, r0
 80087f0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80087f2:	2201      	movs	r2, #1
 80087f4:	2100      	movs	r1, #0
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f003 fdf6 	bl	800c3e8 <VL53L0X_WrByte>
 80087fc:	4603      	mov	r3, r0
 80087fe:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008800:	2200      	movs	r2, #0
 8008802:	21ff      	movs	r1, #255	@ 0xff
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f003 fdef 	bl	800c3e8 <VL53L0X_WrByte>
 800880a:	4603      	mov	r3, r0
 800880c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800880e:	2200      	movs	r2, #0
 8008810:	2180      	movs	r1, #128	@ 0x80
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f003 fde8 	bl	800c3e8 <VL53L0X_WrByte>
 8008818:	4603      	mov	r3, r0
 800881a:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800881c:	7bbb      	ldrb	r3, [r7, #14]
 800881e:	2b03      	cmp	r3, #3
 8008820:	d054      	beq.n	80088cc <VL53L0X_StartMeasurement+0x134>
 8008822:	2b03      	cmp	r3, #3
 8008824:	dc6c      	bgt.n	8008900 <VL53L0X_StartMeasurement+0x168>
 8008826:	2b00      	cmp	r3, #0
 8008828:	d002      	beq.n	8008830 <VL53L0X_StartMeasurement+0x98>
 800882a:	2b01      	cmp	r3, #1
 800882c:	d034      	beq.n	8008898 <VL53L0X_StartMeasurement+0x100>
 800882e:	e067      	b.n	8008900 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8008830:	2201      	movs	r2, #1
 8008832:	2100      	movs	r1, #0
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f003 fdd7 	bl	800c3e8 <VL53L0X_WrByte>
 800883a:	4603      	mov	r3, r0
 800883c:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800883e:	7bfb      	ldrb	r3, [r7, #15]
 8008840:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8008842:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d15d      	bne.n	8008906 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800884a:	2300      	movs	r3, #0
 800884c:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d008      	beq.n	8008866 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8008854:	f107 030d 	add.w	r3, r7, #13
 8008858:	461a      	mov	r2, r3
 800885a:	2100      	movs	r1, #0
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f003 fe45 	bl	800c4ec <VL53L0X_RdByte>
 8008862:	4603      	mov	r3, r0
 8008864:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	3301      	adds	r3, #1
 800886a:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800886c:	7b7a      	ldrb	r2, [r7, #13]
 800886e:	7bfb      	ldrb	r3, [r7, #15]
 8008870:	4013      	ands	r3, r2
 8008872:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8008874:	7bfa      	ldrb	r2, [r7, #15]
 8008876:	429a      	cmp	r2, r3
 8008878:	d107      	bne.n	800888a <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800887a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d103      	bne.n	800888a <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8008888:	d3e1      	bcc.n	800884e <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8008890:	d339      	bcc.n	8008906 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8008892:	23f9      	movs	r3, #249	@ 0xf9
 8008894:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8008896:	e036      	b.n	8008906 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8008898:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d105      	bne.n	80088ac <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80088a0:	2101      	movs	r1, #1
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f7ff ff12 	bl	80086cc <VL53L0X_CheckAndLoadInterruptSettings>
 80088a8:	4603      	mov	r3, r0
 80088aa:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80088ac:	2202      	movs	r2, #2
 80088ae:	2100      	movs	r1, #0
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f003 fd99 	bl	800c3e8 <VL53L0X_WrByte>
 80088b6:	4603      	mov	r3, r0
 80088b8:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 80088ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d123      	bne.n	800890a <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2204      	movs	r2, #4
 80088c6:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 80088ca:	e01e      	b.n	800890a <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80088cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d105      	bne.n	80088e0 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80088d4:	2101      	movs	r1, #1
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7ff fef8 	bl	80086cc <VL53L0X_CheckAndLoadInterruptSettings>
 80088dc:	4603      	mov	r3, r0
 80088de:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80088e0:	2204      	movs	r2, #4
 80088e2:	2100      	movs	r1, #0
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f003 fd7f 	bl	800c3e8 <VL53L0X_WrByte>
 80088ea:	4603      	mov	r3, r0
 80088ec:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80088ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d10b      	bne.n	800890e <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2204      	movs	r2, #4
 80088fa:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 80088fe:	e006      	b.n	800890e <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8008900:	23f8      	movs	r3, #248	@ 0xf8
 8008902:	75fb      	strb	r3, [r7, #23]
 8008904:	e004      	b.n	8008910 <VL53L0X_StartMeasurement+0x178>
		break;
 8008906:	bf00      	nop
 8008908:	e002      	b.n	8008910 <VL53L0X_StartMeasurement+0x178>
		break;
 800890a:	bf00      	nop
 800890c:	e000      	b.n	8008910 <VL53L0X_StartMeasurement+0x178>
		break;
 800890e:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8008910:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008914:	4618      	mov	r0, r3
 8008916:	3718      	adds	r7, #24
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008926:	2300      	movs	r3, #0
 8008928:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 8008930:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8008932:	7bbb      	ldrb	r3, [r7, #14]
 8008934:	2b04      	cmp	r3, #4
 8008936:	d112      	bne.n	800895e <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8008938:	f107 0308 	add.w	r3, r7, #8
 800893c:	4619      	mov	r1, r3
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f000 fb0e 	bl	8008f60 <VL53L0X_GetInterruptMaskStatus>
 8008944:	4603      	mov	r3, r0
 8008946:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	2b04      	cmp	r3, #4
 800894c:	d103      	bne.n	8008956 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	2201      	movs	r2, #1
 8008952:	701a      	strb	r2, [r3, #0]
 8008954:	e01c      	b.n	8008990 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	2200      	movs	r2, #0
 800895a:	701a      	strb	r2, [r3, #0]
 800895c:	e018      	b.n	8008990 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800895e:	f107 030d 	add.w	r3, r7, #13
 8008962:	461a      	mov	r2, r3
 8008964:	2114      	movs	r1, #20
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f003 fdc0 	bl	800c4ec <VL53L0X_RdByte>
 800896c:	4603      	mov	r3, r0
 800896e:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8008970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d10b      	bne.n	8008990 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8008978:	7b7b      	ldrb	r3, [r7, #13]
 800897a:	f003 0301 	and.w	r3, r3, #1
 800897e:	2b00      	cmp	r3, #0
 8008980:	d003      	beq.n	800898a <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	2201      	movs	r2, #1
 8008986:	701a      	strb	r2, [r3, #0]
 8008988:	e002      	b.n	8008990 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	2200      	movs	r2, #0
 800898e:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008990:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008994:	4618      	mov	r0, r3
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800899c:	b5b0      	push	{r4, r5, r7, lr}
 800899e:	b096      	sub	sp, #88	@ 0x58
 80089a0:	af02      	add	r7, sp, #8
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80089a6:	2300      	movs	r3, #0
 80089a8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80089ac:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80089b0:	230c      	movs	r3, #12
 80089b2:	2114      	movs	r1, #20
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f003 fceb 	bl	800c390 <VL53L0X_ReadMulti>
 80089ba:	4603      	mov	r3, r0
 80089bc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 80089c0:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f040 80c8 	bne.w	8008b5a <VL53L0X_GetRangingMeasurementData+0x1be>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	2200      	movs	r2, #0
 80089ce:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	2200      	movs	r2, #0
 80089d4:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80089d6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80089da:	021b      	lsls	r3, r3, #8
 80089dc:	b29b      	uxth	r3, r3
 80089de:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80089e2:	4413      	add	r3, r2
 80089e4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	2200      	movs	r2, #0
 80089ec:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80089ee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80089f2:	021b      	lsls	r3, r3, #8
 80089f4:	b29b      	uxth	r3, r3
 80089f6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80089fa:	4413      	add	r3, r2
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	025b      	lsls	r3, r3, #9
 8008a00:	647b      	str	r3, [r7, #68]	@ 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008a06:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8008a08:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8008a0c:	021b      	lsls	r3, r3, #8
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 8008a14:	4413      	add	r3, r2
 8008a16:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8008a1a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008a1e:	025a      	lsls	r2, r3, #9
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8008a24:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008a28:	021b      	lsls	r3, r3, #8
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8008a30:	4413      	add	r3, r2
 8008a32:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8008a3c:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8008a3e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008a42:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8b3 3152 	ldrh.w	r3, [r3, #338]	@ 0x152
 8008a4c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8008a54:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8008a58:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008a5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008a5e:	d046      	beq.n	8008aee <VL53L0X_GetRangingMeasurementData+0x152>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8008a60:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008a62:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8008a66:	fb02 f303 	mul.w	r3, r2, r3
 8008a6a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8008a6e:	4a58      	ldr	r2, [pc, #352]	@ (8008bd0 <VL53L0X_GetRangingMeasurementData+0x234>)
 8008a70:	fb82 1203 	smull	r1, r2, r2, r3
 8008a74:	1192      	asrs	r2, r2, #6
 8008a76:	17db      	asrs	r3, r3, #31
 8008a78:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8008a7a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6a1b      	ldr	r3, [r3, #32]
 8008a82:	873b      	strh	r3, [r7, #56]	@ 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	7f1b      	ldrb	r3, [r3, #28]
 8008a88:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8008a8c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d02c      	beq.n	8008aee <VL53L0X_GetRangingMeasurementData+0x152>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8008a94:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008a96:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8008a9a:	fb02 f303 	mul.w	r3, r2, r3
 8008a9e:	121a      	asrs	r2, r3, #8
					<= 0) {
 8008aa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
				if ((SignalRate
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d10d      	bne.n	8008ac2 <VL53L0X_GetRangingMeasurementData+0x126>
					if (RangeFractionalEnable)
 8008aa6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d004      	beq.n	8008ab8 <VL53L0X_GetRangingMeasurementData+0x11c>
						XtalkRangeMilliMeter = 8888;
 8008aae:	f242 23b8 	movw	r3, #8888	@ 0x22b8
 8008ab2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8008ab6:	e016      	b.n	8008ae6 <VL53L0X_GetRangingMeasurementData+0x14a>
					else
						XtalkRangeMilliMeter = 8888
 8008ab8:	f648 23e0 	movw	r3, #35552	@ 0x8ae0
 8008abc:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8008ac0:	e011      	b.n	8008ae6 <VL53L0X_GetRangingMeasurementData+0x14a>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8008ac2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8008ac6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ac8:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8008acc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008ace:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 8008ad2:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8008ad6:	121b      	asrs	r3, r3, #8
 8008ad8:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8008ada:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008adc:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8008ade:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8008ae2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8008ae6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008aea:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8008aee:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00d      	beq.n	8008b12 <VL53L0X_GetRangingMeasurementData+0x176>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8008af6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8008afa:	089b      	lsrs	r3, r3, #2
 8008afc:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8008b02:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	019b      	lsls	r3, r3, #6
 8008b0a:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	75da      	strb	r2, [r3, #23]
 8008b10:	e006      	b.n	8008b20 <VL53L0X_GetRangingMeasurementData+0x184>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8008b18:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8008b20:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8008b24:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 8008b28:	f107 0336 	add.w	r3, r7, #54	@ 0x36
 8008b2c:	9301      	str	r3, [sp, #4]
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	9300      	str	r3, [sp, #0]
 8008b32:	4613      	mov	r3, r2
 8008b34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f003 f9de 	bl	800bef8 <VL53L0X_get_pal_range_status>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	461a      	mov	r2, r3
 8008b40:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008b44:	4313      	orrs	r3, r2
 8008b46:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8008b4a:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d103      	bne.n	8008b5a <VL53L0X_GetRangingMeasurementData+0x1be>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8008b52:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008b5a:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d12f      	bne.n	8008bc2 <VL53L0X_GetRangingMeasurementData+0x226>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f107 040c 	add.w	r4, r7, #12
 8008b68:	f103 0550 	add.w	r5, r3, #80	@ 0x50
 8008b6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008b74:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8008b7c:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8008b82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8008b8a:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8008b90:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8008b96:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8008b9c:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8008ba2:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8008ba8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f103 0450 	add.w	r4, r3, #80	@ 0x50
 8008bb2:	f107 050c 	add.w	r5, r7, #12
 8008bb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008bb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008bba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008bbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008bc2:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3750      	adds	r7, #80	@ 0x50
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bdb0      	pop	{r4, r5, r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	10624dd3 	.word	0x10624dd3

08008bd4 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b084      	sub	sp, #16
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008bde:	2300      	movs	r3, #0
 8008be0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8008be2:	2100      	movs	r1, #0
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f7ff f8db 	bl	8007da0 <VL53L0X_SetDeviceMode>
 8008bea:	4603      	mov	r3, r0
 8008bec:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d104      	bne.n	8008c00 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f7ff fd1e 	bl	8008638 <VL53L0X_PerformSingleMeasurement>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8008c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d105      	bne.n	8008c14 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8008c08:	6839      	ldr	r1, [r7, #0]
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f7ff fec6 	bl	800899c <VL53L0X_GetRangingMeasurementData>
 8008c10:	4603      	mov	r3, r0
 8008c12:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8008c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d105      	bne.n	8008c28 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 f95e 	bl	8008ee0 <VL53L0X_ClearInterruptMask>
 8008c24:	4603      	mov	r3, r0
 8008c26:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8008c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3710      	adds	r7, #16
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	4608      	mov	r0, r1
 8008c3e:	4611      	mov	r1, r2
 8008c40:	461a      	mov	r2, r3
 8008c42:	4603      	mov	r3, r0
 8008c44:	70fb      	strb	r3, [r7, #3]
 8008c46:	460b      	mov	r3, r1
 8008c48:	70bb      	strb	r3, [r7, #2]
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8008c52:	78fb      	ldrb	r3, [r7, #3]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d002      	beq.n	8008c5e <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8008c58:	23f6      	movs	r3, #246	@ 0xf6
 8008c5a:	73fb      	strb	r3, [r7, #15]
 8008c5c:	e105      	b.n	8008e6a <VL53L0X_SetGpioConfig+0x236>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8008c5e:	78bb      	ldrb	r3, [r7, #2]
 8008c60:	2b14      	cmp	r3, #20
 8008c62:	d110      	bne.n	8008c86 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8008c64:	7e3b      	ldrb	r3, [r7, #24]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d102      	bne.n	8008c70 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8008c6a:	2310      	movs	r3, #16
 8008c6c:	73bb      	strb	r3, [r7, #14]
 8008c6e:	e001      	b.n	8008c74 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8008c70:	2301      	movs	r3, #1
 8008c72:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8008c74:	7bbb      	ldrb	r3, [r7, #14]
 8008c76:	461a      	mov	r2, r3
 8008c78:	2184      	movs	r1, #132	@ 0x84
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f003 fbb4 	bl	800c3e8 <VL53L0X_WrByte>
 8008c80:	4603      	mov	r3, r0
 8008c82:	73fb      	strb	r3, [r7, #15]
 8008c84:	e0f1      	b.n	8008e6a <VL53L0X_SetGpioConfig+0x236>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8008c86:	78bb      	ldrb	r3, [r7, #2]
 8008c88:	2b15      	cmp	r3, #21
 8008c8a:	f040 8097 	bne.w	8008dbc <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008c8e:	2201      	movs	r2, #1
 8008c90:	21ff      	movs	r1, #255	@ 0xff
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f003 fba8 	bl	800c3e8 <VL53L0X_WrByte>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	7bfb      	ldrb	r3, [r7, #15]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	2100      	movs	r1, #0
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f003 fb9e 	bl	800c3e8 <VL53L0X_WrByte>
 8008cac:	4603      	mov	r3, r0
 8008cae:	461a      	mov	r2, r3
 8008cb0:	7bfb      	ldrb	r3, [r7, #15]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	21ff      	movs	r1, #255	@ 0xff
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f003 fb94 	bl	800c3e8 <VL53L0X_WrByte>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	7bfb      	ldrb	r3, [r7, #15]
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008cca:	2201      	movs	r2, #1
 8008ccc:	2180      	movs	r1, #128	@ 0x80
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f003 fb8a 	bl	800c3e8 <VL53L0X_WrByte>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	7bfb      	ldrb	r3, [r7, #15]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8008cde:	2202      	movs	r2, #2
 8008ce0:	2185      	movs	r1, #133	@ 0x85
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f003 fb80 	bl	800c3e8 <VL53L0X_WrByte>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	461a      	mov	r2, r3
 8008cec:	7bfb      	ldrb	r3, [r7, #15]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8008cf2:	2204      	movs	r2, #4
 8008cf4:	21ff      	movs	r1, #255	@ 0xff
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f003 fb76 	bl	800c3e8 <VL53L0X_WrByte>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	461a      	mov	r2, r3
 8008d00:	7bfb      	ldrb	r3, [r7, #15]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8008d06:	2200      	movs	r2, #0
 8008d08:	21cd      	movs	r1, #205	@ 0xcd
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f003 fb6c 	bl	800c3e8 <VL53L0X_WrByte>
 8008d10:	4603      	mov	r3, r0
 8008d12:	461a      	mov	r2, r3
 8008d14:	7bfb      	ldrb	r3, [r7, #15]
 8008d16:	4313      	orrs	r3, r2
 8008d18:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8008d1a:	2211      	movs	r2, #17
 8008d1c:	21cc      	movs	r1, #204	@ 0xcc
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f003 fb62 	bl	800c3e8 <VL53L0X_WrByte>
 8008d24:	4603      	mov	r3, r0
 8008d26:	461a      	mov	r2, r3
 8008d28:	7bfb      	ldrb	r3, [r7, #15]
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8008d2e:	2207      	movs	r2, #7
 8008d30:	21ff      	movs	r1, #255	@ 0xff
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f003 fb58 	bl	800c3e8 <VL53L0X_WrByte>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	7bfb      	ldrb	r3, [r7, #15]
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8008d42:	2200      	movs	r2, #0
 8008d44:	21be      	movs	r1, #190	@ 0xbe
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f003 fb4e 	bl	800c3e8 <VL53L0X_WrByte>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	461a      	mov	r2, r3
 8008d50:	7bfb      	ldrb	r3, [r7, #15]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8008d56:	2206      	movs	r2, #6
 8008d58:	21ff      	movs	r1, #255	@ 0xff
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f003 fb44 	bl	800c3e8 <VL53L0X_WrByte>
 8008d60:	4603      	mov	r3, r0
 8008d62:	461a      	mov	r2, r3
 8008d64:	7bfb      	ldrb	r3, [r7, #15]
 8008d66:	4313      	orrs	r3, r2
 8008d68:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8008d6a:	2209      	movs	r2, #9
 8008d6c:	21cc      	movs	r1, #204	@ 0xcc
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f003 fb3a 	bl	800c3e8 <VL53L0X_WrByte>
 8008d74:	4603      	mov	r3, r0
 8008d76:	461a      	mov	r2, r3
 8008d78:	7bfb      	ldrb	r3, [r7, #15]
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008d7e:	2200      	movs	r2, #0
 8008d80:	21ff      	movs	r1, #255	@ 0xff
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f003 fb30 	bl	800c3e8 <VL53L0X_WrByte>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	7bfb      	ldrb	r3, [r7, #15]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008d92:	2201      	movs	r2, #1
 8008d94:	21ff      	movs	r1, #255	@ 0xff
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f003 fb26 	bl	800c3e8 <VL53L0X_WrByte>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	461a      	mov	r2, r3
 8008da0:	7bfb      	ldrb	r3, [r7, #15]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008da6:	2200      	movs	r2, #0
 8008da8:	2100      	movs	r1, #0
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f003 fb1c 	bl	800c3e8 <VL53L0X_WrByte>
 8008db0:	4603      	mov	r3, r0
 8008db2:	461a      	mov	r2, r3
 8008db4:	7bfb      	ldrb	r3, [r7, #15]
 8008db6:	4313      	orrs	r3, r2
 8008db8:	73fb      	strb	r3, [r7, #15]
 8008dba:	e056      	b.n	8008e6a <VL53L0X_SetGpioConfig+0x236>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8008dbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d120      	bne.n	8008e06 <VL53L0X_SetGpioConfig+0x1d2>
			switch (Functionality) {
 8008dc4:	787b      	ldrb	r3, [r7, #1]
 8008dc6:	2b04      	cmp	r3, #4
 8008dc8:	d81b      	bhi.n	8008e02 <VL53L0X_SetGpioConfig+0x1ce>
 8008dca:	a201      	add	r2, pc, #4	@ (adr r2, 8008dd0 <VL53L0X_SetGpioConfig+0x19c>)
 8008dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd0:	08008de5 	.word	0x08008de5
 8008dd4:	08008deb 	.word	0x08008deb
 8008dd8:	08008df1 	.word	0x08008df1
 8008ddc:	08008df7 	.word	0x08008df7
 8008de0:	08008dfd 	.word	0x08008dfd
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8008de4:	2300      	movs	r3, #0
 8008de6:	73bb      	strb	r3, [r7, #14]
				break;
 8008de8:	e00d      	b.n	8008e06 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8008dea:	2301      	movs	r3, #1
 8008dec:	73bb      	strb	r3, [r7, #14]
				break;
 8008dee:	e00a      	b.n	8008e06 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8008df0:	2302      	movs	r3, #2
 8008df2:	73bb      	strb	r3, [r7, #14]
				break;
 8008df4:	e007      	b.n	8008e06 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8008df6:	2303      	movs	r3, #3
 8008df8:	73bb      	strb	r3, [r7, #14]
				break;
 8008dfa:	e004      	b.n	8008e06 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8008dfc:	2304      	movs	r3, #4
 8008dfe:	73bb      	strb	r3, [r7, #14]
				break;
 8008e00:	e001      	b.n	8008e06 <VL53L0X_SetGpioConfig+0x1d2>
			default:
				Status =
 8008e02:	23f5      	movs	r3, #245	@ 0xf5
 8008e04:	73fb      	strb	r3, [r7, #15]
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}

		if (Status == VL53L0X_ERROR_NONE)
 8008e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d107      	bne.n	8008e1e <VL53L0X_SetGpioConfig+0x1ea>
			Status = VL53L0X_WrByte(Dev,
 8008e0e:	7bbb      	ldrb	r3, [r7, #14]
 8008e10:	461a      	mov	r2, r3
 8008e12:	210a      	movs	r1, #10
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f003 fae7 	bl	800c3e8 <VL53L0X_WrByte>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8008e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d10f      	bne.n	8008e46 <VL53L0X_SetGpioConfig+0x212>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8008e26:	7e3b      	ldrb	r3, [r7, #24]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d102      	bne.n	8008e32 <VL53L0X_SetGpioConfig+0x1fe>
				data = 0;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	73bb      	strb	r3, [r7, #14]
 8008e30:	e001      	b.n	8008e36 <VL53L0X_SetGpioConfig+0x202>
			else
				data = (uint8_t)(1 << 4);
 8008e32:	2310      	movs	r3, #16
 8008e34:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8008e36:	7bbb      	ldrb	r3, [r7, #14]
 8008e38:	22ef      	movs	r2, #239	@ 0xef
 8008e3a:	2184      	movs	r1, #132	@ 0x84
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f003 fb21 	bl	800c484 <VL53L0X_UpdateByte>
 8008e42:	4603      	mov	r3, r0
 8008e44:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8008e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d103      	bne.n	8008e56 <VL53L0X_SetGpioConfig+0x222>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	787a      	ldrb	r2, [r7, #1]
 8008e52:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8008e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d105      	bne.n	8008e6a <VL53L0X_SetGpioConfig+0x236>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008e5e:	2100      	movs	r1, #0
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 f83d 	bl	8008ee0 <VL53L0X_ClearInterruptMask>
 8008e66:	4603      	mov	r3, r0
 8008e68:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop

08008e78 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b086      	sub	sp, #24
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	607a      	str	r2, [r7, #4]
 8008e82:	603b      	str	r3, [r7, #0]
 8008e84:	460b      	mov	r3, r1
 8008e86:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8008e8c:	f107 0314 	add.w	r3, r7, #20
 8008e90:	461a      	mov	r2, r3
 8008e92:	210e      	movs	r1, #14
 8008e94:	68f8      	ldr	r0, [r7, #12]
 8008e96:	f003 fb53 	bl	800c540 <VL53L0X_RdWord>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8008e9e:	8abb      	ldrh	r3, [r7, #20]
 8008ea0:	045a      	lsls	r2, r3, #17
 8008ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8008edc <VL53L0X_GetInterruptThresholds+0x64>)
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8008eaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10e      	bne.n	8008ed0 <VL53L0X_GetInterruptThresholds+0x58>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8008eb2:	f107 0314 	add.w	r3, r7, #20
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	210c      	movs	r1, #12
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f003 fb40 	bl	800c540 <VL53L0X_RdWord>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8008ec4:	8abb      	ldrh	r3, [r7, #20]
 8008ec6:	045a      	lsls	r2, r3, #17
 8008ec8:	4b04      	ldr	r3, [pc, #16]	@ (8008edc <VL53L0X_GetInterruptThresholds+0x64>)
 8008eca:	4013      	ands	r3, r2
		*pThresholdHigh =
 8008ecc:	683a      	ldr	r2, [r7, #0]
 8008ece:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008ed0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3718      	adds	r7, #24
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	1ffe0000 	.word	0x1ffe0000

08008ee0 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008eea:	2300      	movs	r3, #0
 8008eec:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	210b      	movs	r1, #11
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f003 fa76 	bl	800c3e8 <VL53L0X_WrByte>
 8008efc:	4603      	mov	r3, r0
 8008efe:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8008f00:	2200      	movs	r2, #0
 8008f02:	210b      	movs	r1, #11
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f003 fa6f 	bl	800c3e8 <VL53L0X_WrByte>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	7bfb      	ldrb	r3, [r7, #15]
 8008f10:	4313      	orrs	r3, r2
 8008f12:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8008f14:	f107 030d 	add.w	r3, r7, #13
 8008f18:	461a      	mov	r2, r3
 8008f1a:	2113      	movs	r1, #19
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f003 fae5 	bl	800c4ec <VL53L0X_RdByte>
 8008f22:	4603      	mov	r3, r0
 8008f24:	461a      	mov	r2, r3
 8008f26:	7bfb      	ldrb	r3, [r7, #15]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8008f2c:	7bbb      	ldrb	r3, [r7, #14]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8008f32:	7b7b      	ldrb	r3, [r7, #13]
 8008f34:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d006      	beq.n	8008f4a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8008f3c:	7bbb      	ldrb	r3, [r7, #14]
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d803      	bhi.n	8008f4a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8008f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d0d3      	beq.n	8008ef2 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8008f4a:	7bbb      	ldrb	r3, [r7, #14]
 8008f4c:	2b02      	cmp	r3, #2
 8008f4e:	d901      	bls.n	8008f54 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8008f50:	23f4      	movs	r3, #244	@ 0xf4
 8008f52:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3710      	adds	r7, #16
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}

08008f60 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8008f6e:	f107 030e 	add.w	r3, r7, #14
 8008f72:	461a      	mov	r2, r3
 8008f74:	2113      	movs	r1, #19
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f003 fab8 	bl	800c4ec <VL53L0X_RdByte>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8008f80:	7bbb      	ldrb	r3, [r7, #14]
 8008f82:	f003 0207 	and.w	r2, r3, #7
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8008f8a:	7bbb      	ldrb	r3, [r7, #14]
 8008f8c:	f003 0318 	and.w	r3, r3, #24
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d001      	beq.n	8008f98 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8008f94:	23fa      	movs	r3, #250	@ 0xfa
 8008f96:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008f98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3710      	adds	r7, #16
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b086      	sub	sp, #24
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	68b9      	ldr	r1, [r7, #8]
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f000 fa03 	bl	80093c4 <VL53L0X_perform_ref_spad_management>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8008fc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3718      	adds	r7, #24
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}

08008fce <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b084      	sub	sp, #16
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
 8008fd6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8008fdc:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8008fe0:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8008fe2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008fe6:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8008fe8:	f107 0308 	add.w	r3, r7, #8
 8008fec:	461a      	mov	r2, r3
 8008fee:	2128      	movs	r1, #40	@ 0x28
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f003 faa5 	bl	800c540 <VL53L0X_RdWord>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8008ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d11e      	bne.n	8009040 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8009002:	893b      	ldrh	r3, [r7, #8]
 8009004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009008:	b29b      	uxth	r3, r3
 800900a:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800900c:	893b      	ldrh	r3, [r7, #8]
 800900e:	461a      	mov	r2, r3
 8009010:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009014:	429a      	cmp	r2, r3
 8009016:	dd0b      	ble.n	8009030 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8009018:	893a      	ldrh	r2, [r7, #8]
 800901a:	897b      	ldrh	r3, [r7, #10]
 800901c:	1ad3      	subs	r3, r2, r3
 800901e:	b29b      	uxth	r3, r3
 8009020:	b21b      	sxth	r3, r3
 8009022:	461a      	mov	r2, r3
					* 250;
 8009024:	23fa      	movs	r3, #250	@ 0xfa
 8009026:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	601a      	str	r2, [r3, #0]
 800902e:	e007      	b.n	8009040 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8009030:	893b      	ldrh	r3, [r7, #8]
 8009032:	b21b      	sxth	r3, r3
 8009034:	461a      	mov	r2, r3
 8009036:	23fa      	movs	r3, #250	@ 0xfa
 8009038:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8009040:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800904c:	b480      	push	{r7}
 800904e:	b08b      	sub	sp, #44	@ 0x2c
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
 8009058:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800905a:	2308      	movs	r3, #8
 800905c:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800905e:	2300      	movs	r3, #0
 8009060:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	f04f 32ff 	mov.w	r2, #4294967295
 8009068:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009072:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	69ba      	ldr	r2, [r7, #24]
 8009078:	fbb3 f2f2 	udiv	r2, r3, r2
 800907c:	69b9      	ldr	r1, [r7, #24]
 800907e:	fb01 f202 	mul.w	r2, r1, r2
 8009082:	1a9b      	subs	r3, r3, r2
 8009084:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	627b      	str	r3, [r7, #36]	@ 0x24
 800908a:	e030      	b.n	80090ee <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800908c:	2300      	movs	r3, #0
 800908e:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8009090:	68fa      	ldr	r2, [r7, #12]
 8009092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009094:	4413      	add	r3, r2
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800909a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d11e      	bne.n	80090e0 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 80090a2:	7ffa      	ldrb	r2, [r7, #31]
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	fa42 f303 	asr.w	r3, r2, r3
 80090aa:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80090b0:	e016      	b.n	80090e0 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80090b2:	7ffb      	ldrb	r3, [r7, #31]
 80090b4:	f003 0301 	and.w	r3, r3, #1
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00b      	beq.n	80090d4 <get_next_good_spad+0x88>
				success = 1;
 80090bc:	2301      	movs	r3, #1
 80090be:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80090c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c2:	69ba      	ldr	r2, [r7, #24]
 80090c4:	fb03 f202 	mul.w	r2, r3, r2
 80090c8:	6a3b      	ldr	r3, [r7, #32]
 80090ca:	4413      	add	r3, r2
 80090cc:	461a      	mov	r2, r3
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	601a      	str	r2, [r3, #0]
				break;
 80090d2:	e009      	b.n	80090e8 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80090d4:	7ffb      	ldrb	r3, [r7, #31]
 80090d6:	085b      	lsrs	r3, r3, #1
 80090d8:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80090da:	6a3b      	ldr	r3, [r7, #32]
 80090dc:	3301      	adds	r3, #1
 80090de:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80090e0:	6a3a      	ldr	r2, [r7, #32]
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d3e4      	bcc.n	80090b2 <get_next_good_spad+0x66>
				coarseIndex++) {
 80090e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ea:	3301      	adds	r3, #1
 80090ec:	627b      	str	r3, [r7, #36]	@ 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80090ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d202      	bcs.n	80090fc <get_next_good_spad+0xb0>
 80090f6:	7fbb      	ldrb	r3, [r7, #30]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d0c7      	beq.n	800908c <get_next_good_spad+0x40>
		}
	}
}
 80090fc:	bf00      	nop
 80090fe:	372c      	adds	r7, #44	@ 0x2c
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8009110:	2301      	movs	r3, #1
 8009112:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	099b      	lsrs	r3, r3, #6
 8009118:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800911a:	4a07      	ldr	r2, [pc, #28]	@ (8009138 <is_aperture+0x30>)
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d101      	bne.n	800912a <is_aperture+0x22>
		isAperture = 0;
 8009126:	2300      	movs	r3, #0
 8009128:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800912a:	7bfb      	ldrb	r3, [r7, #15]
}
 800912c:	4618      	mov	r0, r3
 800912e:	3714      	adds	r7, #20
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr
 8009138:	200002bc 	.word	0x200002bc

0800913c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800913c:	b480      	push	{r7}
 800913e:	b089      	sub	sp, #36	@ 0x24
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009148:	2300      	movs	r3, #0
 800914a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800914c:	2308      	movs	r3, #8
 800914e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	fbb2 f3f3 	udiv	r3, r2, r3
 8009158:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	69ba      	ldr	r2, [r7, #24]
 800915e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009162:	69b9      	ldr	r1, [r7, #24]
 8009164:	fb01 f202 	mul.w	r2, r1, r2
 8009168:	1a9b      	subs	r3, r3, r2
 800916a:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800916c:	697a      	ldr	r2, [r7, #20]
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	429a      	cmp	r2, r3
 8009172:	d302      	bcc.n	800917a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009174:	23ce      	movs	r3, #206	@ 0xce
 8009176:	77fb      	strb	r3, [r7, #31]
 8009178:	e010      	b.n	800919c <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800917a:	68fa      	ldr	r2, [r7, #12]
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	4413      	add	r3, r2
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	b25a      	sxtb	r2, r3
 8009184:	2101      	movs	r1, #1
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	fa01 f303 	lsl.w	r3, r1, r3
 800918c:	b25b      	sxtb	r3, r3
 800918e:	4313      	orrs	r3, r2
 8009190:	b259      	sxtb	r1, r3
 8009192:	68fa      	ldr	r2, [r7, #12]
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	4413      	add	r3, r2
 8009198:	b2ca      	uxtb	r2, r1
 800919a:	701a      	strb	r2, [r3, #0]

	return status;
 800919c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3724      	adds	r7, #36	@ 0x24
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80091b6:	2306      	movs	r3, #6
 80091b8:	683a      	ldr	r2, [r7, #0]
 80091ba:	21b0      	movs	r1, #176	@ 0xb0
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f003 f8b7 	bl	800c330 <VL53L0X_WriteMulti>
 80091c2:	4603      	mov	r3, r0
 80091c4:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80091c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b084      	sub	sp, #16
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
 80091da:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80091dc:	2306      	movs	r3, #6
 80091de:	683a      	ldr	r2, [r7, #0]
 80091e0:	21b0      	movs	r1, #176	@ 0xb0
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f003 f8d4 	bl	800c390 <VL53L0X_ReadMulti>
 80091e8:	4603      	mov	r3, r0
 80091ea:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80091ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b08c      	sub	sp, #48	@ 0x30
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	607a      	str	r2, [r7, #4]
 8009202:	603b      	str	r3, [r7, #0]
 8009204:	460b      	mov	r3, r1
 8009206:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009208:	2300      	movs	r3, #0
 800920a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800920e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009210:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8009212:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009214:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8009216:	2300      	movs	r3, #0
 8009218:	62bb      	str	r3, [r7, #40]	@ 0x28
 800921a:	e02b      	b.n	8009274 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800921c:	f107 031c 	add.w	r3, r7, #28
 8009220:	6a3a      	ldr	r2, [r7, #32]
 8009222:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f7ff ff11 	bl	800904c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800922a:	69fb      	ldr	r3, [r7, #28]
 800922c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009230:	d103      	bne.n	800923a <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009232:	23ce      	movs	r3, #206	@ 0xce
 8009234:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 8009238:	e020      	b.n	800927c <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800923a:	69fb      	ldr	r3, [r7, #28]
 800923c:	461a      	mov	r2, r3
 800923e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009240:	4413      	add	r3, r2
 8009242:	4618      	mov	r0, r3
 8009244:	f7ff ff60 	bl	8009108 <is_aperture>
 8009248:	4603      	mov	r3, r0
 800924a:	461a      	mov	r2, r3
 800924c:	7afb      	ldrb	r3, [r7, #11]
 800924e:	4293      	cmp	r3, r2
 8009250:	d003      	beq.n	800925a <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009252:	23ce      	movs	r3, #206	@ 0xce
 8009254:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 8009258:	e010      	b.n	800927c <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800925e:	6a3a      	ldr	r2, [r7, #32]
 8009260:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009262:	6838      	ldr	r0, [r7, #0]
 8009264:	f7ff ff6a 	bl	800913c <enable_spad_bit>
		currentSpad++;
 8009268:	6a3b      	ldr	r3, [r7, #32]
 800926a:	3301      	adds	r3, #1
 800926c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800926e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009270:	3301      	adds	r3, #1
 8009272:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009274:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009276:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009278:	429a      	cmp	r2, r3
 800927a:	d3cf      	bcc.n	800921c <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800927c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800927e:	6a3a      	ldr	r2, [r7, #32]
 8009280:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8009282:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8009286:	2b00      	cmp	r3, #0
 8009288:	d106      	bne.n	8009298 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800928a:	6839      	ldr	r1, [r7, #0]
 800928c:	68f8      	ldr	r0, [r7, #12]
 800928e:	f7ff ff8d 	bl	80091ac <set_ref_spad_map>
 8009292:	4603      	mov	r3, r0
 8009294:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8009298:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800929c:	2b00      	cmp	r3, #0
 800929e:	d121      	bne.n	80092e4 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80092a0:	f107 0314 	add.w	r3, r7, #20
 80092a4:	4619      	mov	r1, r3
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	f7ff ff93 	bl	80091d2 <get_ref_spad_map>
 80092ac:	4603      	mov	r3, r0
 80092ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		i = 0;
 80092b2:	2300      	movs	r3, #0
 80092b4:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80092b6:	e011      	b.n	80092dc <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80092b8:	683a      	ldr	r2, [r7, #0]
 80092ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092bc:	4413      	add	r3, r2
 80092be:	781a      	ldrb	r2, [r3, #0]
 80092c0:	f107 0114 	add.w	r1, r7, #20
 80092c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c6:	440b      	add	r3, r1
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d003      	beq.n	80092d6 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80092ce:	23ce      	movs	r3, #206	@ 0xce
 80092d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				break;
 80092d4:	e006      	b.n	80092e4 <enable_ref_spads+0xec>
			}
			i++;
 80092d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d8:	3301      	adds	r3, #1
 80092da:	627b      	str	r3, [r7, #36]	@ 0x24
		while (i < size) {
 80092dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d3e9      	bcc.n	80092b8 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80092e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3730      	adds	r7, #48	@ 0x30
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b08a      	sub	sp, #40	@ 0x28
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80092fa:	2300      	movs	r3, #0
 80092fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8009300:	2300      	movs	r3, #0
 8009302:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800930c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8009310:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009314:	2b00      	cmp	r3, #0
 8009316:	d107      	bne.n	8009328 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8009318:	22c0      	movs	r2, #192	@ 0xc0
 800931a:	2101      	movs	r1, #1
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f003 f863 	bl	800c3e8 <VL53L0X_WrByte>
 8009322:	4603      	mov	r3, r0
 8009324:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8009328:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800932c:	2b00      	cmp	r3, #0
 800932e:	d108      	bne.n	8009342 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8009330:	f107 0308 	add.w	r3, r7, #8
 8009334:	4619      	mov	r1, r3
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f7ff fc4c 	bl	8008bd4 <VL53L0X_PerformSingleRangingMeasurement>
 800933c:	4603      	mov	r3, r0
 800933e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 8009342:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009346:	2b00      	cmp	r3, #0
 8009348:	d107      	bne.n	800935a <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800934a:	2201      	movs	r2, #1
 800934c:	21ff      	movs	r1, #255	@ 0xff
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f003 f84a 	bl	800c3e8 <VL53L0X_WrByte>
 8009354:	4603      	mov	r3, r0
 8009356:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE)
 800935a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800935e:	2b00      	cmp	r3, #0
 8009360:	d107      	bne.n	8009372 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8009362:	683a      	ldr	r2, [r7, #0]
 8009364:	21b6      	movs	r1, #182	@ 0xb6
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f003 f8ea 	bl	800c540 <VL53L0X_RdWord>
 800936c:	4603      	mov	r3, r0
 800936e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8009372:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009376:	2b00      	cmp	r3, #0
 8009378:	d107      	bne.n	800938a <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800937a:	2200      	movs	r2, #0
 800937c:	21ff      	movs	r1, #255	@ 0xff
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f003 f832 	bl	800c3e8 <VL53L0X_WrByte>
 8009384:	4603      	mov	r3, r0
 8009386:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800938a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800938e:	2b00      	cmp	r3, #0
 8009390:	d112      	bne.n	80093b8 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009392:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009396:	461a      	mov	r2, r3
 8009398:	2101      	movs	r1, #1
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f003 f824 	bl	800c3e8 <VL53L0X_WrByte>
 80093a0:	4603      	mov	r3, r0
 80093a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80093a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d104      	bne.n	80093b8 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80093b4:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
	}

	return status;
 80093b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3728      	adds	r7, #40	@ 0x28
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80093c4:	b590      	push	{r4, r7, lr}
 80093c6:	b09d      	sub	sp, #116	@ 0x74
 80093c8:	af06      	add	r7, sp, #24
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80093d0:	2300      	movs	r3, #0
 80093d2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80093d6:	23b4      	movs	r3, #180	@ 0xb4
 80093d8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	uint32_t minimumSpadCount = 3;
 80093dc:	2303      	movs	r3, #3
 80093de:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t maxSpadCount = 44;
 80093e0:	232c      	movs	r3, #44	@ 0x2c
 80093e2:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t currentSpadIndex = 0;
 80093e4:	2300      	movs	r3, #0
 80093e6:	653b      	str	r3, [r7, #80]	@ 0x50
	uint32_t lastSpadIndex = 0;
 80093e8:	2300      	movs	r3, #0
 80093ea:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80093ec:	2300      	movs	r3, #0
 80093ee:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80093f0:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80093f4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80093f6:	2300      	movs	r3, #0
 80093f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t index = 0;
 80093fa:	2300      	movs	r3, #0
 80093fc:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint32_t spadArraySize = 6;
 80093fe:	2306      	movs	r3, #6
 8009400:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t signalRateDiff = 0;
 8009402:	2300      	movs	r3, #0
 8009404:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t lastSignalRateDiff = 0;
 8009406:	2300      	movs	r3, #0
 8009408:	647b      	str	r3, [r7, #68]	@ 0x44
	uint8_t complete = 0;
 800940a:	2300      	movs	r3, #0
 800940c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	uint8_t VhvSettings = 0;
 8009410:	2300      	movs	r3, #0
 8009412:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8009414:	2300      	movs	r3, #0
 8009416:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8009418:	2300      	movs	r3, #0
 800941a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800941c:	2300      	movs	r3, #0
 800941e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f8b3 313c 	ldrh.w	r3, [r3, #316]	@ 0x13c
 8009428:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800942a:	2300      	movs	r3, #0
 800942c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800942e:	e009      	b.n	8009444 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009430:	68fa      	ldr	r2, [r7, #12]
 8009432:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009434:	4413      	add	r3, r2
 8009436:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800943a:	2200      	movs	r2, #0
 800943c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800943e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009440:	3301      	adds	r3, #1
 8009442:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009444:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009448:	429a      	cmp	r2, r3
 800944a:	d3f1      	bcc.n	8009430 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800944c:	2201      	movs	r2, #1
 800944e:	21ff      	movs	r1, #255	@ 0xff
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f002 ffc9 	bl	800c3e8 <VL53L0X_WrByte>
 8009456:	4603      	mov	r3, r0
 8009458:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800945c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8009460:	2b00      	cmp	r3, #0
 8009462:	d107      	bne.n	8009474 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8009464:	2200      	movs	r2, #0
 8009466:	214f      	movs	r1, #79	@ 0x4f
 8009468:	68f8      	ldr	r0, [r7, #12]
 800946a:	f002 ffbd 	bl	800c3e8 <VL53L0X_WrByte>
 800946e:	4603      	mov	r3, r0
 8009470:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8009474:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8009478:	2b00      	cmp	r3, #0
 800947a:	d107      	bne.n	800948c <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800947c:	222c      	movs	r2, #44	@ 0x2c
 800947e:	214e      	movs	r1, #78	@ 0x4e
 8009480:	68f8      	ldr	r0, [r7, #12]
 8009482:	f002 ffb1 	bl	800c3e8 <VL53L0X_WrByte>
 8009486:	4603      	mov	r3, r0
 8009488:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800948c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8009490:	2b00      	cmp	r3, #0
 8009492:	d107      	bne.n	80094a4 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009494:	2200      	movs	r2, #0
 8009496:	21ff      	movs	r1, #255	@ 0xff
 8009498:	68f8      	ldr	r0, [r7, #12]
 800949a:	f002 ffa5 	bl	800c3e8 <VL53L0X_WrByte>
 800949e:	4603      	mov	r3, r0
 80094a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80094a4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d109      	bne.n	80094c0 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80094ac:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80094b0:	461a      	mov	r2, r3
 80094b2:	21b6      	movs	r1, #182	@ 0xb6
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f002 ff97 	bl	800c3e8 <VL53L0X_WrByte>
 80094ba:	4603      	mov	r3, r0
 80094bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80094c0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d107      	bne.n	80094d8 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80094c8:	2200      	movs	r2, #0
 80094ca:	2180      	movs	r1, #128	@ 0x80
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f002 ff8b 	bl	800c3e8 <VL53L0X_WrByte>
 80094d2:	4603      	mov	r3, r0
 80094d4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80094d8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d10a      	bne.n	80094f6 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80094e0:	f107 0210 	add.w	r2, r7, #16
 80094e4:	f107 0111 	add.w	r1, r7, #17
 80094e8:	2300      	movs	r3, #0
 80094ea:	68f8      	ldr	r0, [r7, #12]
 80094ec:	f000 fbbb 	bl	8009c66 <VL53L0X_perform_ref_calibration>
 80094f0:	4603      	mov	r3, r0
 80094f2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80094f6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d121      	bne.n	8009542 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80094fe:	2300      	movs	r3, #0
 8009500:	653b      	str	r3, [r7, #80]	@ 0x50
		lastSpadIndex = currentSpadIndex;
 8009502:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009504:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8009506:	2300      	movs	r3, #0
 8009508:	64fb      	str	r3, [r7, #76]	@ 0x4c
		Status = enable_ref_spads(Dev,
 800950a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800950c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f503 7492 	add.w	r4, r3, #292	@ 0x124
		Status = enable_ref_spads(Dev,
 800951a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800951e:	f107 0218 	add.w	r2, r7, #24
 8009522:	9204      	str	r2, [sp, #16]
 8009524:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009526:	9203      	str	r2, [sp, #12]
 8009528:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800952a:	9202      	str	r2, [sp, #8]
 800952c:	9301      	str	r3, [sp, #4]
 800952e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009530:	9300      	str	r3, [sp, #0]
 8009532:	4623      	mov	r3, r4
 8009534:	4602      	mov	r2, r0
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f7ff fe5e 	bl	80091f8 <enable_ref_spads>
 800953c:	4603      	mov	r3, r0
 800953e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009542:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8009546:	2b00      	cmp	r3, #0
 8009548:	d174      	bne.n	8009634 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800954a:	69bb      	ldr	r3, [r7, #24]
 800954c:	653b      	str	r3, [r7, #80]	@ 0x50

		Status = perform_ref_signal_measurement(Dev,
 800954e:	f107 0312 	add.w	r3, r7, #18
 8009552:	4619      	mov	r1, r3
 8009554:	68f8      	ldr	r0, [r7, #12]
 8009556:	f7ff fecb 	bl	80092f0 <perform_ref_signal_measurement>
 800955a:	4603      	mov	r3, r0
 800955c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8009560:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8009564:	2b00      	cmp	r3, #0
 8009566:	d161      	bne.n	800962c <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8009568:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800956a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800956c:	429a      	cmp	r2, r3
 800956e:	d25d      	bcs.n	800962c <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8009570:	2300      	movs	r3, #0
 8009572:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009574:	e009      	b.n	800958a <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009576:	68fa      	ldr	r2, [r7, #12]
 8009578:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800957a:	4413      	add	r3, r2
 800957c:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8009580:	2200      	movs	r2, #0
 8009582:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8009584:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009586:	3301      	adds	r3, #1
 8009588:	64bb      	str	r3, [r7, #72]	@ 0x48
 800958a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800958c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800958e:	429a      	cmp	r2, r3
 8009590:	d3f1      	bcc.n	8009576 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8009592:	e002      	b.n	800959a <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8009594:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009596:	3301      	adds	r3, #1
 8009598:	653b      	str	r3, [r7, #80]	@ 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800959a:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800959e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095a0:	4413      	add	r3, r2
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7ff fdb0 	bl	8009108 <is_aperture>
 80095a8:	4603      	mov	r3, r0
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d103      	bne.n	80095b6 <VL53L0X_perform_ref_spad_management+0x1f2>
 80095ae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80095b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d3ee      	bcc.n	8009594 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80095b6:	2301      	movs	r3, #1
 80095b8:	64fb      	str	r3, [r7, #76]	@ 0x4c

			Status = enable_ref_spads(Dev,
 80095ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095bc:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f503 7492 	add.w	r4, r3, #292	@ 0x124
			Status = enable_ref_spads(Dev,
 80095ca:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80095ce:	f107 0218 	add.w	r2, r7, #24
 80095d2:	9204      	str	r2, [sp, #16]
 80095d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095d6:	9203      	str	r2, [sp, #12]
 80095d8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80095da:	9202      	str	r2, [sp, #8]
 80095dc:	9301      	str	r3, [sp, #4]
 80095de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e0:	9300      	str	r3, [sp, #0]
 80095e2:	4623      	mov	r3, r4
 80095e4:	4602      	mov	r2, r0
 80095e6:	68f8      	ldr	r0, [r7, #12]
 80095e8:	f7ff fe06 	bl	80091f8 <enable_ref_spads>
 80095ec:	4603      	mov	r3, r0
 80095ee:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80095f2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d11b      	bne.n	8009632 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 80095fa:	69bb      	ldr	r3, [r7, #24]
 80095fc:	653b      	str	r3, [r7, #80]	@ 0x50
				Status = perform_ref_signal_measurement(Dev,
 80095fe:	f107 0312 	add.w	r3, r7, #18
 8009602:	4619      	mov	r1, r3
 8009604:	68f8      	ldr	r0, [r7, #12]
 8009606:	f7ff fe73 	bl	80092f0 <perform_ref_signal_measurement>
 800960a:	4603      	mov	r3, r0
 800960c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8009610:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8009614:	2b00      	cmp	r3, #0
 8009616:	d10c      	bne.n	8009632 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8009618:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800961a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800961c:	429a      	cmp	r2, r3
 800961e:	d208      	bcs.n	8009632 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8009620:	2301      	movs	r3, #1
 8009622:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
					refSpadCount_int = minimumSpadCount;
 8009626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009628:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800962a:	e002      	b.n	8009632 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800962c:	2300      	movs	r3, #0
 800962e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009630:	e000      	b.n	8009634 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8009632:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8009634:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8009638:	2b00      	cmp	r3, #0
 800963a:	f040 80af 	bne.w	800979c <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800963e:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8009640:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009642:	429a      	cmp	r2, r3
 8009644:	f240 80aa 	bls.w	800979c <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8009648:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800964a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		refSpadCount_int	= minimumSpadCount;
 800964e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009650:	63fb      	str	r3, [r7, #60]	@ 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f503 7192 	add.w	r1, r3, #292	@ 0x124
 8009658:	f107 031c 	add.w	r3, r7, #28
 800965c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800965e:	4618      	mov	r0, r3
 8009660:	f003 ff2b 	bl	800d4ba <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8009664:	8a7b      	ldrh	r3, [r7, #18]
 8009666:	461a      	mov	r2, r3
 8009668:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800966a:	1ad3      	subs	r3, r2, r3
 800966c:	2b00      	cmp	r3, #0
 800966e:	bfb8      	it	lt
 8009670:	425b      	neglt	r3, r3
 8009672:	647b      	str	r3, [r7, #68]	@ 0x44
			targetRefRate);
		complete = 0;
 8009674:	2300      	movs	r3, #0
 8009676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

		while (!complete) {
 800967a:	e086      	b.n	800978a <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
			get_next_good_spad(
 8009682:	f107 0314 	add.w	r3, r7, #20
 8009686:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009688:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800968a:	f7ff fcdf 	bl	800904c <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009694:	d103      	bne.n	800969e <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009696:	23ce      	movs	r3, #206	@ 0xce
 8009698:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				break;
 800969c:	e07e      	b.n	800979c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800969e:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 80096a2:	697a      	ldr	r2, [r7, #20]
 80096a4:	4413      	add	r3, r2
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7ff fd2e 	bl	8009108 <is_aperture>
 80096ac:	4603      	mov	r3, r0
 80096ae:	461a      	mov	r2, r3
 80096b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d003      	beq.n	80096be <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 80096b6:	2301      	movs	r3, #1
 80096b8:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
				break;
 80096bc:	e06e      	b.n	800979c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 80096be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096c0:	3301      	adds	r3, #1
 80096c2:	63fb      	str	r3, [r7, #60]	@ 0x3c

			currentSpadIndex = nextGoodSpad;
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	653b      	str	r3, [r7, #80]	@ 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	f503 7392 	add.w	r3, r3, #292	@ 0x124
			Status = enable_spad_bit(
 80096ce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80096d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7ff fd32 	bl	800913c <enable_spad_bit>
 80096d8:	4603      	mov	r3, r0
 80096da:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80096de:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d10c      	bne.n	8009700 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 80096e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096e8:	3301      	adds	r3, #1
 80096ea:	653b      	str	r3, [r7, #80]	@ 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	f503 7392 	add.w	r3, r3, #292	@ 0x124
				Status = set_ref_spad_map(Dev,
 80096f2:	4619      	mov	r1, r3
 80096f4:	68f8      	ldr	r0, [r7, #12]
 80096f6:	f7ff fd59 	bl	80091ac <set_ref_spad_map>
 80096fa:	4603      	mov	r3, r0
 80096fc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8009700:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8009704:	2b00      	cmp	r3, #0
 8009706:	d146      	bne.n	8009796 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8009708:	f107 0312 	add.w	r3, r7, #18
 800970c:	4619      	mov	r1, r3
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	f7ff fdee 	bl	80092f0 <perform_ref_signal_measurement>
 8009714:	4603      	mov	r3, r0
 8009716:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800971a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800971e:	2b00      	cmp	r3, #0
 8009720:	d13b      	bne.n	800979a <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8009722:	8a7b      	ldrh	r3, [r7, #18]
 8009724:	461a      	mov	r2, r3
 8009726:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009728:	1ad3      	subs	r3, r2, r3
 800972a:	2b00      	cmp	r3, #0
 800972c:	bfb8      	it	lt
 800972e:	425b      	neglt	r3, r3
 8009730:	627b      	str	r3, [r7, #36]	@ 0x24

			if (peakSignalRateRef > targetRefRate) {
 8009732:	8a7b      	ldrh	r3, [r7, #18]
 8009734:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009736:	429a      	cmp	r2, r3
 8009738:	d21c      	bcs.n	8009774 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800973a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800973c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800973e:	429a      	cmp	r2, r3
 8009740:	d914      	bls.n	800976c <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8009742:	f107 031c 	add.w	r3, r7, #28
 8009746:	4619      	mov	r1, r3
 8009748:	68f8      	ldr	r0, [r7, #12]
 800974a:	f7ff fd2f 	bl	80091ac <set_ref_spad_map>
 800974e:	4603      	mov	r3, r0
 8009750:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f503 7392 	add.w	r3, r3, #292	@ 0x124
					memcpy(
 800975a:	f107 011c 	add.w	r1, r7, #28
 800975e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009760:	4618      	mov	r0, r3
 8009762:	f003 feaa 	bl	800d4ba <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8009766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009768:	3b01      	subs	r3, #1
 800976a:	63fb      	str	r3, [r7, #60]	@ 0x3c
				}
				complete = 1;
 800976c:	2301      	movs	r3, #1
 800976e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009772:	e00a      	b.n	800978a <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8009774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009776:	647b      	str	r3, [r7, #68]	@ 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f503 7192 	add.w	r1, r3, #292	@ 0x124
				memcpy(lastSpadArray,
 800977e:	f107 031c 	add.w	r3, r7, #28
 8009782:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009784:	4618      	mov	r0, r3
 8009786:	f003 fe98 	bl	800d4ba <memcpy>
		while (!complete) {
 800978a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800978e:	2b00      	cmp	r3, #0
 8009790:	f43f af74 	beq.w	800967c <VL53L0X_perform_ref_spad_management+0x2b8>
 8009794:	e002      	b.n	800979c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8009796:	bf00      	nop
 8009798:	e000      	b.n	800979c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800979a:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800979c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d115      	bne.n	80097d0 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80097a8:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 80097b0:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2201      	movs	r2, #1
 80097b6:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	b2da      	uxtb	r2, r3
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	781a      	ldrb	r2, [r3, #0]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 80097d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	375c      	adds	r7, #92	@ 0x5c
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd90      	pop	{r4, r7, pc}

080097dc <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 80097dc:	b590      	push	{r4, r7, lr}
 80097de:	b093      	sub	sp, #76	@ 0x4c
 80097e0:	af06      	add	r7, sp, #24
 80097e2:	60f8      	str	r0, [r7, #12]
 80097e4:	60b9      	str	r1, [r7, #8]
 80097e6:	4613      	mov	r3, r2
 80097e8:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80097ea:	2300      	movs	r3, #0
 80097ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t currentSpadIndex = 0;
 80097f0:	2300      	movs	r3, #0
 80097f2:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t startSelect = 0xB4;
 80097f4:	23b4      	movs	r3, #180	@ 0xb4
 80097f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t spadArraySize = 6;
 80097fa:	2306      	movs	r3, #6
 80097fc:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 80097fe:	232c      	movs	r3, #44	@ 0x2c
 8009800:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009802:	2201      	movs	r2, #1
 8009804:	21ff      	movs	r1, #255	@ 0xff
 8009806:	68f8      	ldr	r0, [r7, #12]
 8009808:	f002 fdee 	bl	800c3e8 <VL53L0X_WrByte>
 800980c:	4603      	mov	r3, r0
 800980e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8009812:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8009816:	2b00      	cmp	r3, #0
 8009818:	d107      	bne.n	800982a <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800981a:	2200      	movs	r2, #0
 800981c:	214f      	movs	r1, #79	@ 0x4f
 800981e:	68f8      	ldr	r0, [r7, #12]
 8009820:	f002 fde2 	bl	800c3e8 <VL53L0X_WrByte>
 8009824:	4603      	mov	r3, r0
 8009826:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800982a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800982e:	2b00      	cmp	r3, #0
 8009830:	d107      	bne.n	8009842 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8009832:	222c      	movs	r2, #44	@ 0x2c
 8009834:	214e      	movs	r1, #78	@ 0x4e
 8009836:	68f8      	ldr	r0, [r7, #12]
 8009838:	f002 fdd6 	bl	800c3e8 <VL53L0X_WrByte>
 800983c:	4603      	mov	r3, r0
 800983e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8009842:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8009846:	2b00      	cmp	r3, #0
 8009848:	d107      	bne.n	800985a <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800984a:	2200      	movs	r2, #0
 800984c:	21ff      	movs	r1, #255	@ 0xff
 800984e:	68f8      	ldr	r0, [r7, #12]
 8009850:	f002 fdca 	bl	800c3e8 <VL53L0X_WrByte>
 8009854:	4603      	mov	r3, r0
 8009856:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800985a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800985e:	2b00      	cmp	r3, #0
 8009860:	d109      	bne.n	8009876 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8009862:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009866:	461a      	mov	r2, r3
 8009868:	21b6      	movs	r1, #182	@ 0xb6
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f002 fdbc 	bl	800c3e8 <VL53L0X_WrByte>
 8009870:	4603      	mov	r3, r0
 8009872:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8009876:	2300      	movs	r3, #0
 8009878:	627b      	str	r3, [r7, #36]	@ 0x24
 800987a:	e009      	b.n	8009890 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800987c:	68fa      	ldr	r2, [r7, #12]
 800987e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009880:	4413      	add	r3, r2
 8009882:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8009886:	2200      	movs	r2, #0
 8009888:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800988a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800988c:	3301      	adds	r3, #1
 800988e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	429a      	cmp	r2, r3
 8009896:	d3f1      	bcc.n	800987c <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8009898:	79fb      	ldrb	r3, [r7, #7]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d011      	beq.n	80098c2 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800989e:	e002      	b.n	80098a6 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 80098a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a2:	3301      	adds	r3, #1
 80098a4:	62bb      	str	r3, [r7, #40]	@ 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 80098a6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80098aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ac:	4413      	add	r3, r2
 80098ae:	4618      	mov	r0, r3
 80098b0:	f7ff fc2a 	bl	8009108 <is_aperture>
 80098b4:	4603      	mov	r3, r0
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d103      	bne.n	80098c2 <VL53L0X_set_reference_spads+0xe6>
 80098ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80098bc:	69bb      	ldr	r3, [r7, #24]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d3ee      	bcc.n	80098a0 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	f503 7492 	add.w	r4, r3, #292	@ 0x124
	Status = enable_ref_spads(Dev,
 80098ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80098d2:	79f9      	ldrb	r1, [r7, #7]
 80098d4:	f107 0214 	add.w	r2, r7, #20
 80098d8:	9204      	str	r2, [sp, #16]
 80098da:	68ba      	ldr	r2, [r7, #8]
 80098dc:	9203      	str	r2, [sp, #12]
 80098de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80098e0:	9202      	str	r2, [sp, #8]
 80098e2:	9301      	str	r3, [sp, #4]
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	9300      	str	r3, [sp, #0]
 80098e8:	4623      	mov	r3, r4
 80098ea:	4602      	mov	r2, r0
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f7ff fc83 	bl	80091f8 <enable_ref_spads>
 80098f2:	4603      	mov	r3, r0
 80098f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 80098f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d10c      	bne.n	800991a <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2201      	movs	r2, #1
 8009904:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	b2da      	uxtb	r2, r3
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	79fa      	ldrb	r2, [r7, #7]
 8009916:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800991a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800991e:	4618      	mov	r0, r3
 8009920:	3734      	adds	r7, #52	@ 0x34
 8009922:	46bd      	mov	sp, r7
 8009924:	bd90      	pop	{r4, r7, pc}

08009926 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8009926:	b580      	push	{r7, lr}
 8009928:	b084      	sub	sp, #16
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
 800992e:	460b      	mov	r3, r1
 8009930:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009932:	2300      	movs	r3, #0
 8009934:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d10a      	bne.n	8009954 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800993e:	78fb      	ldrb	r3, [r7, #3]
 8009940:	f043 0301 	orr.w	r3, r3, #1
 8009944:	b2db      	uxtb	r3, r3
 8009946:	461a      	mov	r2, r3
 8009948:	2100      	movs	r1, #0
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f002 fd4c 	bl	800c3e8 <VL53L0X_WrByte>
 8009950:	4603      	mov	r3, r0
 8009952:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8009954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d104      	bne.n	8009966 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 f9bf 	bl	8009ce0 <VL53L0X_measurement_poll_for_completion>
 8009962:	4603      	mov	r3, r0
 8009964:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d105      	bne.n	800997a <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800996e:	2100      	movs	r1, #0
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f7ff fab5 	bl	8008ee0 <VL53L0X_ClearInterruptMask>
 8009976:	4603      	mov	r3, r0
 8009978:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800997a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d106      	bne.n	8009990 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8009982:	2200      	movs	r2, #0
 8009984:	2100      	movs	r1, #0
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f002 fd2e 	bl	800c3e8 <VL53L0X_WrByte>
 800998c:	4603      	mov	r3, r0
 800998e:	73fb      	strb	r3, [r7, #15]

	return Status;
 8009990:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}

0800999c <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	4608      	mov	r0, r1
 80099a6:	4611      	mov	r1, r2
 80099a8:	461a      	mov	r2, r3
 80099aa:	4603      	mov	r3, r0
 80099ac:	70fb      	strb	r3, [r7, #3]
 80099ae:	460b      	mov	r3, r1
 80099b0:	70bb      	strb	r3, [r7, #2]
 80099b2:	4613      	mov	r3, r2
 80099b4:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80099b6:	2300      	movs	r3, #0
 80099b8:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 80099ba:	2300      	movs	r3, #0
 80099bc:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80099be:	2201      	movs	r2, #1
 80099c0:	21ff      	movs	r1, #255	@ 0xff
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f002 fd10 	bl	800c3e8 <VL53L0X_WrByte>
 80099c8:	4603      	mov	r3, r0
 80099ca:	461a      	mov	r2, r3
 80099cc:	7bfb      	ldrb	r3, [r7, #15]
 80099ce:	4313      	orrs	r3, r2
 80099d0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80099d2:	2200      	movs	r2, #0
 80099d4:	2100      	movs	r1, #0
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f002 fd06 	bl	800c3e8 <VL53L0X_WrByte>
 80099dc:	4603      	mov	r3, r0
 80099de:	461a      	mov	r2, r3
 80099e0:	7bfb      	ldrb	r3, [r7, #15]
 80099e2:	4313      	orrs	r3, r2
 80099e4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80099e6:	2200      	movs	r2, #0
 80099e8:	21ff      	movs	r1, #255	@ 0xff
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f002 fcfc 	bl	800c3e8 <VL53L0X_WrByte>
 80099f0:	4603      	mov	r3, r0
 80099f2:	461a      	mov	r2, r3
 80099f4:	7bfb      	ldrb	r3, [r7, #15]
 80099f6:	4313      	orrs	r3, r2
 80099f8:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 80099fa:	78fb      	ldrb	r3, [r7, #3]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d01e      	beq.n	8009a3e <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8009a00:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d009      	beq.n	8009a1c <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8009a08:	69ba      	ldr	r2, [r7, #24]
 8009a0a:	21cb      	movs	r1, #203	@ 0xcb
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f002 fd6d 	bl	800c4ec <VL53L0X_RdByte>
 8009a12:	4603      	mov	r3, r0
 8009a14:	461a      	mov	r2, r3
 8009a16:	7bfb      	ldrb	r3, [r7, #15]
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8009a1c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d02a      	beq.n	8009a7a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8009a24:	f107 030e 	add.w	r3, r7, #14
 8009a28:	461a      	mov	r2, r3
 8009a2a:	21ee      	movs	r1, #238	@ 0xee
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f002 fd5d 	bl	800c4ec <VL53L0X_RdByte>
 8009a32:	4603      	mov	r3, r0
 8009a34:	461a      	mov	r2, r3
 8009a36:	7bfb      	ldrb	r3, [r7, #15]
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	73fb      	strb	r3, [r7, #15]
 8009a3c:	e01d      	b.n	8009a7a <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8009a3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d00a      	beq.n	8009a5c <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8009a46:	78bb      	ldrb	r3, [r7, #2]
 8009a48:	461a      	mov	r2, r3
 8009a4a:	21cb      	movs	r1, #203	@ 0xcb
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f002 fccb 	bl	800c3e8 <VL53L0X_WrByte>
 8009a52:	4603      	mov	r3, r0
 8009a54:	461a      	mov	r2, r3
 8009a56:	7bfb      	ldrb	r3, [r7, #15]
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8009a5c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d00a      	beq.n	8009a7a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8009a64:	787b      	ldrb	r3, [r7, #1]
 8009a66:	2280      	movs	r2, #128	@ 0x80
 8009a68:	21ee      	movs	r1, #238	@ 0xee
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f002 fd0a 	bl	800c484 <VL53L0X_UpdateByte>
 8009a70:	4603      	mov	r3, r0
 8009a72:	461a      	mov	r2, r3
 8009a74:	7bfb      	ldrb	r3, [r7, #15]
 8009a76:	4313      	orrs	r3, r2
 8009a78:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	21ff      	movs	r1, #255	@ 0xff
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f002 fcb2 	bl	800c3e8 <VL53L0X_WrByte>
 8009a84:	4603      	mov	r3, r0
 8009a86:	461a      	mov	r2, r3
 8009a88:	7bfb      	ldrb	r3, [r7, #15]
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009a8e:	2201      	movs	r2, #1
 8009a90:	2100      	movs	r1, #0
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f002 fca8 	bl	800c3e8 <VL53L0X_WrByte>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	7bfb      	ldrb	r3, [r7, #15]
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	21ff      	movs	r1, #255	@ 0xff
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f002 fc9e 	bl	800c3e8 <VL53L0X_WrByte>
 8009aac:	4603      	mov	r3, r0
 8009aae:	461a      	mov	r2, r3
 8009ab0:	7bfb      	ldrb	r3, [r7, #15]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8009ab6:	7bbb      	ldrb	r3, [r7, #14]
 8009ab8:	f023 0310 	bic.w	r3, r3, #16
 8009abc:	b2da      	uxtb	r2, r3
 8009abe:	69fb      	ldr	r3, [r7, #28]
 8009ac0:	701a      	strb	r2, [r3, #0]

	return Status;
 8009ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3710      	adds	r7, #16
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}

08009ace <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8009ace:	b580      	push	{r7, lr}
 8009ad0:	b08a      	sub	sp, #40	@ 0x28
 8009ad2:	af04      	add	r7, sp, #16
 8009ad4:	60f8      	str	r0, [r7, #12]
 8009ad6:	60b9      	str	r1, [r7, #8]
 8009ad8:	4611      	mov	r1, r2
 8009ada:	461a      	mov	r2, r3
 8009adc:	460b      	mov	r3, r1
 8009ade:	71fb      	strb	r3, [r7, #7]
 8009ae0:	4613      	mov	r3, r2
 8009ae2:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8009aec:	2300      	movs	r3, #0
 8009aee:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8009af0:	2300      	movs	r3, #0
 8009af2:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8009af4:	2300      	movs	r3, #0
 8009af6:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8009af8:	79bb      	ldrb	r3, [r7, #6]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d003      	beq.n	8009b06 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8009b04:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8009b06:	2201      	movs	r2, #1
 8009b08:	2101      	movs	r1, #1
 8009b0a:	68f8      	ldr	r0, [r7, #12]
 8009b0c:	f002 fc6c 	bl	800c3e8 <VL53L0X_WrByte>
 8009b10:	4603      	mov	r3, r0
 8009b12:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8009b14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d105      	bne.n	8009b28 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8009b1c:	2140      	movs	r1, #64	@ 0x40
 8009b1e:	68f8      	ldr	r0, [r7, #12]
 8009b20:	f7ff ff01 	bl	8009926 <VL53L0X_perform_single_ref_calibration>
 8009b24:	4603      	mov	r3, r0
 8009b26:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8009b28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d115      	bne.n	8009b5c <VL53L0X_perform_vhv_calibration+0x8e>
 8009b30:	79fb      	ldrb	r3, [r7, #7]
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d112      	bne.n	8009b5c <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8009b36:	7d39      	ldrb	r1, [r7, #20]
 8009b38:	7d7a      	ldrb	r2, [r7, #21]
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	9303      	str	r3, [sp, #12]
 8009b3e:	2301      	movs	r3, #1
 8009b40:	9302      	str	r3, [sp, #8]
 8009b42:	f107 0313 	add.w	r3, r7, #19
 8009b46:	9301      	str	r3, [sp, #4]
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	9300      	str	r3, [sp, #0]
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	2101      	movs	r1, #1
 8009b50:	68f8      	ldr	r0, [r7, #12]
 8009b52:	f7ff ff23 	bl	800999c <VL53L0X_ref_calibration_io>
 8009b56:	4603      	mov	r3, r0
 8009b58:	75fb      	strb	r3, [r7, #23]
 8009b5a:	e002      	b.n	8009b62 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8009b62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d112      	bne.n	8009b90 <VL53L0X_perform_vhv_calibration+0xc2>
 8009b6a:	79bb      	ldrb	r3, [r7, #6]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00f      	beq.n	8009b90 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009b70:	7dbb      	ldrb	r3, [r7, #22]
 8009b72:	461a      	mov	r2, r3
 8009b74:	2101      	movs	r1, #1
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	f002 fc36 	bl	800c3e8 <VL53L0X_WrByte>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8009b80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d103      	bne.n	8009b90 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	7dba      	ldrb	r2, [r7, #22]
 8009b8c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 8009b90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3718      	adds	r7, #24
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b08a      	sub	sp, #40	@ 0x28
 8009ba0:	af04      	add	r7, sp, #16
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	4611      	mov	r1, r2
 8009ba8:	461a      	mov	r2, r3
 8009baa:	460b      	mov	r3, r1
 8009bac:	71fb      	strb	r3, [r7, #7]
 8009bae:	4613      	mov	r3, r2
 8009bb0:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8009bc2:	79bb      	ldrb	r3, [r7, #6]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d003      	beq.n	8009bd0 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8009bce:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8009bd0:	2202      	movs	r2, #2
 8009bd2:	2101      	movs	r1, #1
 8009bd4:	68f8      	ldr	r0, [r7, #12]
 8009bd6:	f002 fc07 	bl	800c3e8 <VL53L0X_WrByte>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8009bde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d105      	bne.n	8009bf2 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8009be6:	2100      	movs	r1, #0
 8009be8:	68f8      	ldr	r0, [r7, #12]
 8009bea:	f7ff fe9c 	bl	8009926 <VL53L0X_perform_single_ref_calibration>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8009bf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d115      	bne.n	8009c26 <VL53L0X_perform_phase_calibration+0x8a>
 8009bfa:	79fb      	ldrb	r3, [r7, #7]
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d112      	bne.n	8009c26 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8009c00:	7d39      	ldrb	r1, [r7, #20]
 8009c02:	7d7a      	ldrb	r2, [r7, #21]
 8009c04:	2301      	movs	r3, #1
 8009c06:	9303      	str	r3, [sp, #12]
 8009c08:	2300      	movs	r3, #0
 8009c0a:	9302      	str	r3, [sp, #8]
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	9301      	str	r3, [sp, #4]
 8009c10:	f107 0313 	add.w	r3, r7, #19
 8009c14:	9300      	str	r3, [sp, #0]
 8009c16:	460b      	mov	r3, r1
 8009c18:	2101      	movs	r1, #1
 8009c1a:	68f8      	ldr	r0, [r7, #12]
 8009c1c:	f7ff febe 	bl	800999c <VL53L0X_ref_calibration_io>
 8009c20:	4603      	mov	r3, r0
 8009c22:	75fb      	strb	r3, [r7, #23]
 8009c24:	e002      	b.n	8009c2c <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8009c2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d112      	bne.n	8009c5a <VL53L0X_perform_phase_calibration+0xbe>
 8009c34:	79bb      	ldrb	r3, [r7, #6]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d00f      	beq.n	8009c5a <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009c3a:	7dbb      	ldrb	r3, [r7, #22]
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	2101      	movs	r1, #1
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	f002 fbd1 	bl	800c3e8 <VL53L0X_WrByte>
 8009c46:	4603      	mov	r3, r0
 8009c48:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8009c4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d103      	bne.n	8009c5a <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	7dba      	ldrb	r2, [r7, #22]
 8009c56:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 8009c5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3718      	adds	r7, #24
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}

08009c66 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8009c66:	b580      	push	{r7, lr}
 8009c68:	b086      	sub	sp, #24
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	60f8      	str	r0, [r7, #12]
 8009c6e:	60b9      	str	r1, [r7, #8]
 8009c70:	607a      	str	r2, [r7, #4]
 8009c72:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c74:	2300      	movs	r3, #0
 8009c76:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8009c82:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8009c84:	78fa      	ldrb	r2, [r7, #3]
 8009c86:	2300      	movs	r3, #0
 8009c88:	68b9      	ldr	r1, [r7, #8]
 8009c8a:	68f8      	ldr	r0, [r7, #12]
 8009c8c:	f7ff ff1f 	bl	8009ace <VL53L0X_perform_vhv_calibration>
 8009c90:	4603      	mov	r3, r0
 8009c92:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8009c94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d107      	bne.n	8009cac <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8009c9c:	78fa      	ldrb	r2, [r7, #3]
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	6879      	ldr	r1, [r7, #4]
 8009ca2:	68f8      	ldr	r0, [r7, #12]
 8009ca4:	f7ff ff7a 	bl	8009b9c <VL53L0X_perform_phase_calibration>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8009cac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d10f      	bne.n	8009cd4 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009cb4:	7dbb      	ldrb	r3, [r7, #22]
 8009cb6:	461a      	mov	r2, r3
 8009cb8:	2101      	movs	r1, #1
 8009cba:	68f8      	ldr	r0, [r7, #12]
 8009cbc:	f002 fb94 	bl	800c3e8 <VL53L0X_WrByte>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8009cc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d103      	bne.n	8009cd4 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	7dba      	ldrb	r2, [r7, #22]
 8009cd0:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 8009cd4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3718      	adds	r7, #24
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b086      	sub	sp, #24
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8009cec:	2300      	movs	r3, #0
 8009cee:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8009cf4:	f107 030f 	add.w	r3, r7, #15
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f7fe fe0e 	bl	800891c <VL53L0X_GetMeasurementDataReady>
 8009d00:	4603      	mov	r3, r0
 8009d02:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8009d04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d110      	bne.n	8009d2e <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8009d0c:	7bfb      	ldrb	r3, [r7, #15]
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d00f      	beq.n	8009d32 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	3301      	adds	r3, #1
 8009d16:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8009d1e:	d302      	bcc.n	8009d26 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8009d20:	23f9      	movs	r3, #249	@ 0xf9
 8009d22:	75fb      	strb	r3, [r7, #23]
			break;
 8009d24:	e006      	b.n	8009d34 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f002 fc7c 	bl	800c624 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8009d2c:	e7e2      	b.n	8009cf4 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8009d2e:	bf00      	nop
 8009d30:	e000      	b.n	8009d34 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8009d32:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8009d34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3718      	adds	r7, #24
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b085      	sub	sp, #20
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	4603      	mov	r3, r0
 8009d48:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8009d4e:	79fb      	ldrb	r3, [r7, #7]
 8009d50:	3301      	adds	r3, #1
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	005b      	lsls	r3, r3, #1
 8009d56:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8009d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3714      	adds	r7, #20
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr

08009d66 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8009d66:	b480      	push	{r7}
 8009d68:	b085      	sub	sp, #20
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8009d70:	2300      	movs	r3, #0
 8009d72:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8009d74:	79fb      	ldrb	r3, [r7, #7]
 8009d76:	085b      	lsrs	r3, r3, #1
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8009d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3714      	adds	r7, #20
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr

08009d8c <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b085      	sub	sp, #20
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8009d94:	2300      	movs	r3, #0
 8009d96:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8009d98:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009d9c:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8009d9e:	e002      	b.n	8009da6 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	089b      	lsrs	r3, r3, #2
 8009da4:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8009da6:	68ba      	ldr	r2, [r7, #8]
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	429a      	cmp	r2, r3
 8009dac:	d8f8      	bhi.n	8009da0 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8009dae:	e017      	b.n	8009de0 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8009db0:	68fa      	ldr	r2, [r7, #12]
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	4413      	add	r3, r2
 8009db6:	687a      	ldr	r2, [r7, #4]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d30b      	bcc.n	8009dd4 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8009dbc:	68fa      	ldr	r2, [r7, #12]
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	4413      	add	r3, r2
 8009dc2:	687a      	ldr	r2, [r7, #4]
 8009dc4:	1ad3      	subs	r3, r2, r3
 8009dc6:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	085b      	lsrs	r3, r3, #1
 8009dcc:	68ba      	ldr	r2, [r7, #8]
 8009dce:	4413      	add	r3, r2
 8009dd0:	60fb      	str	r3, [r7, #12]
 8009dd2:	e002      	b.n	8009dda <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	085b      	lsrs	r3, r3, #1
 8009dd8:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	089b      	lsrs	r3, r3, #2
 8009dde:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d1e4      	bne.n	8009db0 <VL53L0X_isqrt+0x24>
	}

	return res;
 8009de6:	68fb      	ldr	r3, [r7, #12]
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3714      	adds	r7, #20
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b086      	sub	sp, #24
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8009e00:	2200      	movs	r2, #0
 8009e02:	2183      	movs	r1, #131	@ 0x83
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f002 faef 	bl	800c3e8 <VL53L0X_WrByte>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	7dfb      	ldrb	r3, [r7, #23]
 8009e10:	4313      	orrs	r3, r2
 8009e12:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8009e14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d11e      	bne.n	8009e5a <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8009e20:	f107 030f 	add.w	r3, r7, #15
 8009e24:	461a      	mov	r2, r3
 8009e26:	2183      	movs	r1, #131	@ 0x83
 8009e28:	6878      	ldr	r0, [r7, #4]
 8009e2a:	f002 fb5f 	bl	800c4ec <VL53L0X_RdByte>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8009e32:	7bfb      	ldrb	r3, [r7, #15]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d10a      	bne.n	8009e4e <VL53L0X_device_read_strobe+0x5a>
 8009e38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d106      	bne.n	8009e4e <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	3301      	adds	r3, #1
 8009e44:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8009e4c:	d3e8      	bcc.n	8009e20 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8009e54:	d301      	bcc.n	8009e5a <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8009e56:	23f9      	movs	r3, #249	@ 0xf9
 8009e58:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	2183      	movs	r1, #131	@ 0x83
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f002 fac2 	bl	800c3e8 <VL53L0X_WrByte>
 8009e64:	4603      	mov	r3, r0
 8009e66:	461a      	mov	r2, r3
 8009e68:	7dfb      	ldrb	r3, [r7, #23]
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8009e6e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3718      	adds	r7, #24
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b098      	sub	sp, #96	@ 0x60
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
 8009e82:	460b      	mov	r3, r1
 8009e84:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e86:	2300      	movs	r3, #0
 8009e88:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	uint8_t ReferenceSpadType = 0;
 8009e92:	2300      	movs	r3, #0
 8009e94:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
	uint32_t PartUIDUpper = 0;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PartUIDLower = 0;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	64bb      	str	r3, [r7, #72]	@ 0x48
	int16_t OffsetMicroMeters = 0;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8009eaa:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8009eae:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	657b      	str	r3, [r7, #84]	@ 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	653b      	str	r3, [r7, #80]	@ 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	643b      	str	r3, [r7, #64]	@ 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009ec2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8009ec6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009eca:	2b07      	cmp	r3, #7
 8009ecc:	f000 8408 	beq.w	800a6e0 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	2180      	movs	r1, #128	@ 0x80
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f002 fa87 	bl	800c3e8 <VL53L0X_WrByte>
 8009eda:	4603      	mov	r3, r0
 8009edc:	461a      	mov	r2, r3
 8009ede:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009ee2:	4313      	orrs	r3, r2
 8009ee4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009ee8:	2201      	movs	r2, #1
 8009eea:	21ff      	movs	r1, #255	@ 0xff
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f002 fa7b 	bl	800c3e8 <VL53L0X_WrByte>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009efa:	4313      	orrs	r3, r2
 8009efc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009f00:	2200      	movs	r2, #0
 8009f02:	2100      	movs	r1, #0
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f002 fa6f 	bl	800c3e8 <VL53L0X_WrByte>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	461a      	mov	r2, r3
 8009f0e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009f12:	4313      	orrs	r3, r2
 8009f14:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8009f18:	2206      	movs	r2, #6
 8009f1a:	21ff      	movs	r1, #255	@ 0xff
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f002 fa63 	bl	800c3e8 <VL53L0X_WrByte>
 8009f22:	4603      	mov	r3, r0
 8009f24:	461a      	mov	r2, r3
 8009f26:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8009f30:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 8009f34:	461a      	mov	r2, r3
 8009f36:	2183      	movs	r1, #131	@ 0x83
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f002 fad7 	bl	800c4ec <VL53L0X_RdByte>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	461a      	mov	r2, r3
 8009f42:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009f46:	4313      	orrs	r3, r2
 8009f48:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8009f4c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009f50:	f043 0304 	orr.w	r3, r3, #4
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	461a      	mov	r2, r3
 8009f58:	2183      	movs	r1, #131	@ 0x83
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f002 fa44 	bl	800c3e8 <VL53L0X_WrByte>
 8009f60:	4603      	mov	r3, r0
 8009f62:	461a      	mov	r2, r3
 8009f64:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8009f6e:	2207      	movs	r2, #7
 8009f70:	21ff      	movs	r1, #255	@ 0xff
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f002 fa38 	bl	800c3e8 <VL53L0X_WrByte>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009f80:	4313      	orrs	r3, r2
 8009f82:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8009f86:	2201      	movs	r2, #1
 8009f88:	2181      	movs	r1, #129	@ 0x81
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f002 fa2c 	bl	800c3e8 <VL53L0X_WrByte>
 8009f90:	4603      	mov	r3, r0
 8009f92:	461a      	mov	r2, r3
 8009f94:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f002 fb40 	bl	800c624 <VL53L0X_PollingDelay>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009fac:	4313      	orrs	r3, r2
 8009fae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	2180      	movs	r1, #128	@ 0x80
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f002 fa16 	bl	800c3e8 <VL53L0X_WrByte>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		if (((option & 1) == 1) &&
 8009fca:	78fb      	ldrb	r3, [r7, #3]
 8009fcc:	f003 0301 	and.w	r3, r3, #1
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f000 8098 	beq.w	800a106 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8009fd6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009fda:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	f040 8091 	bne.w	800a106 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8009fe4:	226b      	movs	r2, #107	@ 0x6b
 8009fe6:	2194      	movs	r1, #148	@ 0x94
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f002 f9fd 	bl	800c3e8 <VL53L0X_WrByte>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f7ff fef9 	bl	8009df4 <VL53L0X_device_read_strobe>
 800a002:	4603      	mov	r3, r0
 800a004:	461a      	mov	r2, r3
 800a006:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a00a:	4313      	orrs	r3, r2
 800a00c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a010:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a014:	461a      	mov	r2, r3
 800a016:	2190      	movs	r1, #144	@ 0x90
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f002 fac7 	bl	800c5ac <VL53L0X_RdDWord>
 800a01e:	4603      	mov	r3, r0
 800a020:	461a      	mov	r2, r3
 800a022:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a026:	4313      	orrs	r3, r2
 800a028:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800a02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a02e:	0a1b      	lsrs	r3, r3, #8
 800a030:	b2db      	uxtb	r3, r3
 800a032:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a036:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800a03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a03c:	0bdb      	lsrs	r3, r3, #15
 800a03e:	b2db      	uxtb	r3, r3
 800a040:	f003 0301 	and.w	r3, r3, #1
 800a044:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800a048:	2224      	movs	r2, #36	@ 0x24
 800a04a:	2194      	movs	r1, #148	@ 0x94
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f002 f9cb 	bl	800c3e8 <VL53L0X_WrByte>
 800a052:	4603      	mov	r3, r0
 800a054:	461a      	mov	r2, r3
 800a056:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a05a:	4313      	orrs	r3, r2
 800a05c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f7ff fec7 	bl	8009df4 <VL53L0X_device_read_strobe>
 800a066:	4603      	mov	r3, r0
 800a068:	461a      	mov	r2, r3
 800a06a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a06e:	4313      	orrs	r3, r2
 800a070:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a074:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a078:	461a      	mov	r2, r3
 800a07a:	2190      	movs	r1, #144	@ 0x90
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f002 fa95 	bl	800c5ac <VL53L0X_RdDWord>
 800a082:	4603      	mov	r3, r0
 800a084:	461a      	mov	r2, r3
 800a086:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a08a:	4313      	orrs	r3, r2
 800a08c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800a090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a092:	0e1b      	lsrs	r3, r3, #24
 800a094:	b2db      	uxtb	r3, r3
 800a096:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800a098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a09a:	0c1b      	lsrs	r3, r3, #16
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800a0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0a2:	0a1b      	lsrs	r3, r3, #8
 800a0a4:	b2db      	uxtb	r3, r3
 800a0a6:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800a0a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0aa:	b2db      	uxtb	r3, r3
 800a0ac:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800a0ae:	2225      	movs	r2, #37	@ 0x25
 800a0b0:	2194      	movs	r1, #148	@ 0x94
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f002 f998 	bl	800c3e8 <VL53L0X_WrByte>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f7ff fe94 	bl	8009df4 <VL53L0X_device_read_strobe>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a0da:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a0de:	461a      	mov	r2, r3
 800a0e0:	2190      	movs	r1, #144	@ 0x90
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f002 fa62 	bl	800c5ac <VL53L0X_RdDWord>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a0f0:	4313      	orrs	r3, r2
 800a0f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800a0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f8:	0e1b      	lsrs	r3, r3, #24
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800a0fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a100:	0c1b      	lsrs	r3, r3, #16
 800a102:	b2db      	uxtb	r3, r3
 800a104:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800a106:	78fb      	ldrb	r3, [r7, #3]
 800a108:	f003 0302 	and.w	r3, r3, #2
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	f000 8189 	beq.w	800a424 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800a112:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a116:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	f040 8182 	bne.w	800a424 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800a120:	2202      	movs	r2, #2
 800a122:	2194      	movs	r1, #148	@ 0x94
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f002 f95f 	bl	800c3e8 <VL53L0X_WrByte>
 800a12a:	4603      	mov	r3, r0
 800a12c:	461a      	mov	r2, r3
 800a12e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a132:	4313      	orrs	r3, r2
 800a134:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f7ff fe5b 	bl	8009df4 <VL53L0X_device_read_strobe>
 800a13e:	4603      	mov	r3, r0
 800a140:	461a      	mov	r2, r3
 800a142:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a146:	4313      	orrs	r3, r2
 800a148:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800a14c:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 800a150:	461a      	mov	r2, r3
 800a152:	2190      	movs	r1, #144	@ 0x90
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f002 f9c9 	bl	800c4ec <VL53L0X_RdByte>
 800a15a:	4603      	mov	r3, r0
 800a15c:	461a      	mov	r2, r3
 800a15e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a162:	4313      	orrs	r3, r2
 800a164:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800a168:	227b      	movs	r2, #123	@ 0x7b
 800a16a:	2194      	movs	r1, #148	@ 0x94
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f002 f93b 	bl	800c3e8 <VL53L0X_WrByte>
 800a172:	4603      	mov	r3, r0
 800a174:	461a      	mov	r2, r3
 800a176:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a17a:	4313      	orrs	r3, r2
 800a17c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f7ff fe37 	bl	8009df4 <VL53L0X_device_read_strobe>
 800a186:	4603      	mov	r3, r0
 800a188:	461a      	mov	r2, r3
 800a18a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a18e:	4313      	orrs	r3, r2
 800a190:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800a194:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 800a198:	461a      	mov	r2, r3
 800a19a:	2190      	movs	r1, #144	@ 0x90
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f002 f9a5 	bl	800c4ec <VL53L0X_RdByte>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800a1b0:	2277      	movs	r2, #119	@ 0x77
 800a1b2:	2194      	movs	r1, #148	@ 0x94
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f002 f917 	bl	800c3e8 <VL53L0X_WrByte>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	461a      	mov	r2, r3
 800a1be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f7ff fe13 	bl	8009df4 <VL53L0X_device_read_strobe>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a1dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	2190      	movs	r1, #144	@ 0x90
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f002 f9e1 	bl	800c5ac <VL53L0X_RdDWord>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	461a      	mov	r2, r3
 800a1ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800a1f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1fa:	0e5b      	lsrs	r3, r3, #25
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a202:	b2db      	uxtb	r3, r3
 800a204:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800a206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a208:	0c9b      	lsrs	r3, r3, #18
 800a20a:	b2db      	uxtb	r3, r3
 800a20c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a210:	b2db      	uxtb	r3, r3
 800a212:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800a214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a216:	0adb      	lsrs	r3, r3, #11
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800a222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a224:	091b      	lsrs	r3, r3, #4
 800a226:	b2db      	uxtb	r3, r3
 800a228:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a22c:	b2db      	uxtb	r3, r3
 800a22e:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800a230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a232:	b2db      	uxtb	r3, r3
 800a234:	00db      	lsls	r3, r3, #3
 800a236:	b2db      	uxtb	r3, r3
 800a238:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800a242:	2278      	movs	r2, #120	@ 0x78
 800a244:	2194      	movs	r1, #148	@ 0x94
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f002 f8ce 	bl	800c3e8 <VL53L0X_WrByte>
 800a24c:	4603      	mov	r3, r0
 800a24e:	461a      	mov	r2, r3
 800a250:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a254:	4313      	orrs	r3, r2
 800a256:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f7ff fdca 	bl	8009df4 <VL53L0X_device_read_strobe>
 800a260:	4603      	mov	r3, r0
 800a262:	461a      	mov	r2, r3
 800a264:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a268:	4313      	orrs	r3, r2
 800a26a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a26e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a272:	461a      	mov	r2, r3
 800a274:	2190      	movs	r1, #144	@ 0x90
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f002 f998 	bl	800c5ac <VL53L0X_RdDWord>
 800a27c:	4603      	mov	r3, r0
 800a27e:	461a      	mov	r2, r3
 800a280:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a284:	4313      	orrs	r3, r2
 800a286:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800a28a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a28c:	0f5b      	lsrs	r3, r3, #29
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a294:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800a296:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a29a:	4413      	add	r3, r2
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800a2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a2:	0d9b      	lsrs	r3, r3, #22
 800a2a4:	b2db      	uxtb	r3, r3
 800a2a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2aa:	b2db      	uxtb	r3, r3
 800a2ac:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800a2ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b0:	0bdb      	lsrs	r3, r3, #15
 800a2b2:	b2db      	uxtb	r3, r3
 800a2b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800a2bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2be:	0a1b      	lsrs	r3, r3, #8
 800a2c0:	b2db      	uxtb	r3, r3
 800a2c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800a2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2cc:	085b      	lsrs	r3, r3, #1
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2d4:	b2db      	uxtb	r3, r3
 800a2d6:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800a2d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	019b      	lsls	r3, r3, #6
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800a2ea:	2279      	movs	r2, #121	@ 0x79
 800a2ec:	2194      	movs	r1, #148	@ 0x94
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f002 f87a 	bl	800c3e8 <VL53L0X_WrByte>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f7ff fd76 	bl	8009df4 <VL53L0X_device_read_strobe>
 800a308:	4603      	mov	r3, r0
 800a30a:	461a      	mov	r2, r3
 800a30c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a310:	4313      	orrs	r3, r2
 800a312:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a316:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a31a:	461a      	mov	r2, r3
 800a31c:	2190      	movs	r1, #144	@ 0x90
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f002 f944 	bl	800c5ac <VL53L0X_RdDWord>
 800a324:	4603      	mov	r3, r0
 800a326:	461a      	mov	r2, r3
 800a328:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a32c:	4313      	orrs	r3, r2
 800a32e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800a332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a334:	0e9b      	lsrs	r3, r3, #26
 800a336:	b2db      	uxtb	r3, r3
 800a338:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a33c:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800a33e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a342:	4413      	add	r3, r2
 800a344:	b2db      	uxtb	r3, r3
 800a346:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800a348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a34a:	0cdb      	lsrs	r3, r3, #19
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a352:	b2db      	uxtb	r3, r3
 800a354:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800a356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a358:	0b1b      	lsrs	r3, r3, #12
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a360:	b2db      	uxtb	r3, r3
 800a362:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800a364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a366:	095b      	lsrs	r3, r3, #5
 800a368:	b2db      	uxtb	r3, r3
 800a36a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a36e:	b2db      	uxtb	r3, r3
 800a370:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800a372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a374:	b2db      	uxtb	r3, r3
 800a376:	009b      	lsls	r3, r3, #2
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 800a37e:	b2db      	uxtb	r3, r3
 800a380:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800a384:	227a      	movs	r2, #122	@ 0x7a
 800a386:	2194      	movs	r1, #148	@ 0x94
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f002 f82d 	bl	800c3e8 <VL53L0X_WrByte>
 800a38e:	4603      	mov	r3, r0
 800a390:	461a      	mov	r2, r3
 800a392:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a396:	4313      	orrs	r3, r2
 800a398:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f7ff fd29 	bl	8009df4 <VL53L0X_device_read_strobe>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	461a      	mov	r2, r3
 800a3a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a3b0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	2190      	movs	r1, #144	@ 0x90
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f002 f8f7 	bl	800c5ac <VL53L0X_RdDWord>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800a3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ce:	0f9b      	lsrs	r3, r3, #30
 800a3d0:	b2db      	uxtb	r3, r3
 800a3d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3d6:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800a3d8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a3dc:	4413      	add	r3, r2
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800a3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e4:	0ddb      	lsrs	r3, r3, #23
 800a3e6:	b2db      	uxtb	r3, r3
 800a3e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800a3f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f2:	0c1b      	lsrs	r3, r3, #16
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800a3fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a400:	0a5b      	lsrs	r3, r3, #9
 800a402:	b2db      	uxtb	r3, r3
 800a404:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a408:	b2db      	uxtb	r3, r3
 800a40a:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800a40e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a410:	089b      	lsrs	r3, r3, #2
 800a412:	b2db      	uxtb	r3, r3
 800a414:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a418:	b2db      	uxtb	r3, r3
 800a41a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			ProductId[18] = '\0';
 800a41e:	2300      	movs	r3, #0
 800a420:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

		}

		if (((option & 4) == 4) &&
 800a424:	78fb      	ldrb	r3, [r7, #3]
 800a426:	f003 0304 	and.w	r3, r3, #4
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	f000 80f1 	beq.w	800a612 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800a430:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a434:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800a438:	2b00      	cmp	r3, #0
 800a43a:	f040 80ea 	bne.w	800a612 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800a43e:	227b      	movs	r2, #123	@ 0x7b
 800a440:	2194      	movs	r1, #148	@ 0x94
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f001 ffd0 	bl	800c3e8 <VL53L0X_WrByte>
 800a448:	4603      	mov	r3, r0
 800a44a:	461a      	mov	r2, r3
 800a44c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a450:	4313      	orrs	r3, r2
 800a452:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f7ff fccc 	bl	8009df4 <VL53L0X_device_read_strobe>
 800a45c:	4603      	mov	r3, r0
 800a45e:	461a      	mov	r2, r3
 800a460:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a464:	4313      	orrs	r3, r2
 800a466:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800a46a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a46e:	461a      	mov	r2, r3
 800a470:	2190      	movs	r1, #144	@ 0x90
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f002 f89a 	bl	800c5ac <VL53L0X_RdDWord>
 800a478:	4603      	mov	r3, r0
 800a47a:	461a      	mov	r2, r3
 800a47c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a480:	4313      	orrs	r3, r2
 800a482:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800a486:	227c      	movs	r2, #124	@ 0x7c
 800a488:	2194      	movs	r1, #148	@ 0x94
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f001 ffac 	bl	800c3e8 <VL53L0X_WrByte>
 800a490:	4603      	mov	r3, r0
 800a492:	461a      	mov	r2, r3
 800a494:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a498:	4313      	orrs	r3, r2
 800a49a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f7ff fca8 	bl	8009df4 <VL53L0X_device_read_strobe>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a4ac:	4313      	orrs	r3, r2
 800a4ae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800a4b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	2190      	movs	r1, #144	@ 0x90
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f002 f876 	bl	800c5ac <VL53L0X_RdDWord>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800a4ce:	2273      	movs	r2, #115	@ 0x73
 800a4d0:	2194      	movs	r1, #148	@ 0x94
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f001 ff88 	bl	800c3e8 <VL53L0X_WrByte>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	461a      	mov	r2, r3
 800a4dc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a4e0:	4313      	orrs	r3, r2
 800a4e2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f7ff fc84 	bl	8009df4 <VL53L0X_device_read_strobe>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a4fa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a4fe:	461a      	mov	r2, r3
 800a500:	2190      	movs	r1, #144	@ 0x90
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f002 f852 	bl	800c5ac <VL53L0X_RdDWord>
 800a508:	4603      	mov	r3, r0
 800a50a:	461a      	mov	r2, r3
 800a50c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a510:	4313      	orrs	r3, r2
 800a512:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800a516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a518:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800a51a:	b29b      	uxth	r3, r3
 800a51c:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800a51e:	2274      	movs	r2, #116	@ 0x74
 800a520:	2194      	movs	r1, #148	@ 0x94
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f001 ff60 	bl	800c3e8 <VL53L0X_WrByte>
 800a528:	4603      	mov	r3, r0
 800a52a:	461a      	mov	r2, r3
 800a52c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a530:	4313      	orrs	r3, r2
 800a532:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f7ff fc5c 	bl	8009df4 <VL53L0X_device_read_strobe>
 800a53c:	4603      	mov	r3, r0
 800a53e:	461a      	mov	r2, r3
 800a540:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a544:	4313      	orrs	r3, r2
 800a546:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a54a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a54e:	461a      	mov	r2, r3
 800a550:	2190      	movs	r1, #144	@ 0x90
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f002 f82a 	bl	800c5ac <VL53L0X_RdDWord>
 800a558:	4603      	mov	r3, r0
 800a55a:	461a      	mov	r2, r3
 800a55c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a560:	4313      	orrs	r3, r2
 800a562:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800a566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a568:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800a56a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a56c:	4313      	orrs	r3, r2
 800a56e:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800a570:	2275      	movs	r2, #117	@ 0x75
 800a572:	2194      	movs	r1, #148	@ 0x94
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f001 ff37 	bl	800c3e8 <VL53L0X_WrByte>
 800a57a:	4603      	mov	r3, r0
 800a57c:	461a      	mov	r2, r3
 800a57e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a582:	4313      	orrs	r3, r2
 800a584:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f7ff fc33 	bl	8009df4 <VL53L0X_device_read_strobe>
 800a58e:	4603      	mov	r3, r0
 800a590:	461a      	mov	r2, r3
 800a592:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a596:	4313      	orrs	r3, r2
 800a598:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a59c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	2190      	movs	r1, #144	@ 0x90
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f002 f801 	bl	800c5ac <VL53L0X_RdDWord>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800a5b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ba:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	657b      	str	r3, [r7, #84]	@ 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800a5c0:	2276      	movs	r2, #118	@ 0x76
 800a5c2:	2194      	movs	r1, #148	@ 0x94
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f001 ff0f 	bl	800c3e8 <VL53L0X_WrByte>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f7ff fc0b 	bl	8009df4 <VL53L0X_device_read_strobe>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	461a      	mov	r2, r3
 800a5e2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a5ec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	2190      	movs	r1, #144	@ 0x90
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f001 ffd9 	bl	800c5ac <VL53L0X_RdDWord>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a602:	4313      	orrs	r3, r2
 800a604:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800a608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a60a:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800a60c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a60e:	4313      	orrs	r3, r2
 800a610:	657b      	str	r3, [r7, #84]	@ 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800a612:	2200      	movs	r2, #0
 800a614:	2181      	movs	r1, #129	@ 0x81
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f001 fee6 	bl	800c3e8 <VL53L0X_WrByte>
 800a61c:	4603      	mov	r3, r0
 800a61e:	461a      	mov	r2, r3
 800a620:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a624:	4313      	orrs	r3, r2
 800a626:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800a62a:	2206      	movs	r2, #6
 800a62c:	21ff      	movs	r1, #255	@ 0xff
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f001 feda 	bl	800c3e8 <VL53L0X_WrByte>
 800a634:	4603      	mov	r3, r0
 800a636:	461a      	mov	r2, r3
 800a638:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a63c:	4313      	orrs	r3, r2
 800a63e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800a642:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 800a646:	461a      	mov	r2, r3
 800a648:	2183      	movs	r1, #131	@ 0x83
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f001 ff4e 	bl	800c4ec <VL53L0X_RdByte>
 800a650:	4603      	mov	r3, r0
 800a652:	461a      	mov	r2, r3
 800a654:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a658:	4313      	orrs	r3, r2
 800a65a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800a65e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a662:	f023 0304 	bic.w	r3, r3, #4
 800a666:	b2db      	uxtb	r3, r3
 800a668:	461a      	mov	r2, r3
 800a66a:	2183      	movs	r1, #131	@ 0x83
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f001 febb 	bl	800c3e8 <VL53L0X_WrByte>
 800a672:	4603      	mov	r3, r0
 800a674:	461a      	mov	r2, r3
 800a676:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a67a:	4313      	orrs	r3, r2
 800a67c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a680:	2201      	movs	r2, #1
 800a682:	21ff      	movs	r1, #255	@ 0xff
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f001 feaf 	bl	800c3e8 <VL53L0X_WrByte>
 800a68a:	4603      	mov	r3, r0
 800a68c:	461a      	mov	r2, r3
 800a68e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a692:	4313      	orrs	r3, r2
 800a694:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a698:	2201      	movs	r2, #1
 800a69a:	2100      	movs	r1, #0
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f001 fea3 	bl	800c3e8 <VL53L0X_WrByte>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	21ff      	movs	r1, #255	@ 0xff
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f001 fe97 	bl	800c3e8 <VL53L0X_WrByte>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	461a      	mov	r2, r3
 800a6be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	2180      	movs	r1, #128	@ 0x80
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f001 fe8b 	bl	800c3e8 <VL53L0X_WrByte>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	461a      	mov	r2, r3
 800a6d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800a6e0:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f040 808f 	bne.w	800a808 <VL53L0X_get_info_from_device+0x98e>
 800a6ea:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a6ee:	2b07      	cmp	r3, #7
 800a6f0:	f000 808a 	beq.w	800a808 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800a6f4:	78fb      	ldrb	r3, [r7, #3]
 800a6f6:	f003 0301 	and.w	r3, r3, #1
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d024      	beq.n	800a748 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800a6fe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a702:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800a706:	2b00      	cmp	r3, #0
 800a708:	d11e      	bne.n	800a748 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f897 205e 	ldrb.w	r2, [r7, #94]	@ 0x5e
 800a710:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 800a71a:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800a71e:	2300      	movs	r3, #0
 800a720:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a722:	e00e      	b.n	800a742 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800a724:	f107 0208 	add.w	r2, r7, #8
 800a728:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a72a:	4413      	add	r3, r2
 800a72c:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a732:	4413      	add	r3, r2
 800a734:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 800a738:	460a      	mov	r2, r1
 800a73a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800a73c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a73e:	3301      	adds	r3, #1
 800a740:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a742:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a744:	2b05      	cmp	r3, #5
 800a746:	dded      	ble.n	800a724 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800a748:	78fb      	ldrb	r3, [r7, #3]
 800a74a:	f003 0302 	and.w	r3, r3, #2
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d018      	beq.n	800a784 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800a752:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a756:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d112      	bne.n	800a784 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a75e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a768:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f883 20f2 	strb.w	r2, [r3, #242]	@ 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	33f3      	adds	r3, #243	@ 0xf3
 800a776:	63bb      	str	r3, [r7, #56]	@ 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800a778:	f107 0310 	add.w	r3, r7, #16
 800a77c:	4619      	mov	r1, r3
 800a77e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a780:	f002 fe93 	bl	800d4aa <strcpy>

		}

		if (((option & 4) == 4) &&
 800a784:	78fb      	ldrb	r3, [r7, #3]
 800a786:	f003 0304 	and.w	r3, r3, #4
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d030      	beq.n	800a7f0 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800a78e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800a792:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800a796:	2b00      	cmp	r3, #0
 800a798:	d12a      	bne.n	800a7f0 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a79a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a7a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800a7aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7ac:	025b      	lsls	r3, r3, #9
 800a7ae:	643b      	str	r3, [r7, #64]	@ 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a7b4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800a7be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d011      	beq.n	800a7e8 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800a7c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a7c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a7c8:	1ad3      	subs	r3, r2, r3
 800a7ca:	64bb      	str	r3, [r7, #72]	@ 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800a7cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a7ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a7d2:	fb02 f303 	mul.w	r3, r2, r3
 800a7d6:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800a7d8:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
					OffsetMicroMeters *= -1;
 800a7dc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800a7e0:	425b      	negs	r3, r3
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			}

			PALDevDataSet(Dev,
 800a7e8:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	@ 0x5a
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800a7f0:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800a7f4:	78fb      	ldrb	r3, [r7, #3]
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800a7fe:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a808:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3760      	adds	r7, #96	@ 0x60
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800a814:	b480      	push	{r7}
 800a816:	b087      	sub	sp, #28
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	460b      	mov	r3, r1
 800a81e:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800a820:	f240 6277 	movw	r2, #1655	@ 0x677
 800a824:	f04f 0300 	mov.w	r3, #0
 800a828:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800a82c:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 800a830:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800a832:	78fb      	ldrb	r3, [r7, #3]
 800a834:	68fa      	ldr	r2, [r7, #12]
 800a836:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800a83a:	693a      	ldr	r2, [r7, #16]
 800a83c:	fb02 f303 	mul.w	r3, r2, r3
 800a840:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800a842:	68bb      	ldr	r3, [r7, #8]
}
 800a844:	4618      	mov	r0, r3
 800a846:	371c      	adds	r7, #28
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr

0800a850 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800a850:	b480      	push	{r7}
 800a852:	b087      	sub	sp, #28
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800a858:	2300      	movs	r3, #0
 800a85a:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800a85c:	2300      	movs	r3, #0
 800a85e:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800a860:	2300      	movs	r3, #0
 800a862:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d015      	beq.n	800a896 <VL53L0X_encode_timeout+0x46>
		ls_byte = timeout_macro_clks - 1;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	3b01      	subs	r3, #1
 800a86e:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800a870:	e005      	b.n	800a87e <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	085b      	lsrs	r3, r3, #1
 800a876:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800a878:	89fb      	ldrh	r3, [r7, #14]
 800a87a:	3301      	adds	r3, #1
 800a87c:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	2bff      	cmp	r3, #255	@ 0xff
 800a882:	d8f6      	bhi.n	800a872 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800a884:	89fb      	ldrh	r3, [r7, #14]
 800a886:	021b      	lsls	r3, r3, #8
 800a888:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	b2db      	uxtb	r3, r3
 800a890:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800a892:	4413      	add	r3, r2
 800a894:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800a896:	8afb      	ldrh	r3, [r7, #22]

}
 800a898:	4618      	mov	r0, r3
 800a89a:	371c      	adds	r7, #28
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b085      	sub	sp, #20
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800a8b2:	88fb      	ldrh	r3, [r7, #6]
 800a8b4:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800a8b6:	88fa      	ldrh	r2, [r7, #6]
 800a8b8:	0a12      	lsrs	r2, r2, #8
 800a8ba:	b292      	uxth	r2, r2
 800a8bc:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800a8be:	3301      	adds	r3, #1
 800a8c0:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3714      	adds	r7, #20
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr

0800a8d0 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b088      	sub	sp, #32
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	60f8      	str	r0, [r7, #12]
 800a8d8:	60b9      	str	r1, [r7, #8]
 800a8da:	4613      	mov	r3, r2
 800a8dc:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800a8e2:	79fb      	ldrb	r3, [r7, #7]
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	68f8      	ldr	r0, [r7, #12]
 800a8e8:	f7ff ff94 	bl	800a814 <VL53L0X_calc_macro_period_ps>
 800a8ec:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800a8f4:	4a0a      	ldr	r2, [pc, #40]	@ (800a920 <VL53L0X_calc_timeout_mclks+0x50>)
 800a8f6:	fba2 2303 	umull	r2, r3, r2, r3
 800a8fa:	099b      	lsrs	r3, r3, #6
 800a8fc:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a904:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	085b      	lsrs	r3, r3, #1
 800a90c:	441a      	add	r2, r3
	timeout_period_mclks =
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	fbb2 f3f3 	udiv	r3, r2, r3
 800a914:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800a916:	69fb      	ldr	r3, [r7, #28]
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3720      	adds	r7, #32
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	10624dd3 	.word	0x10624dd3

0800a924 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b086      	sub	sp, #24
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	460b      	mov	r3, r1
 800a92e:	807b      	strh	r3, [r7, #2]
 800a930:	4613      	mov	r3, r2
 800a932:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800a934:	2300      	movs	r3, #0
 800a936:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800a938:	787b      	ldrb	r3, [r7, #1]
 800a93a:	4619      	mov	r1, r3
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f7ff ff69 	bl	800a814 <VL53L0X_calc_macro_period_ps>
 800a942:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800a94a:	4a0a      	ldr	r2, [pc, #40]	@ (800a974 <VL53L0X_calc_timeout_us+0x50>)
 800a94c:	fba2 2303 	umull	r2, r3, r2, r3
 800a950:	099b      	lsrs	r3, r3, #6
 800a952:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800a954:	887b      	ldrh	r3, [r7, #2]
 800a956:	68fa      	ldr	r2, [r7, #12]
 800a958:	fb02 f303 	mul.w	r3, r2, r3
 800a95c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
	actual_timeout_period_us =
 800a960:	4a04      	ldr	r2, [pc, #16]	@ (800a974 <VL53L0X_calc_timeout_us+0x50>)
 800a962:	fba2 2303 	umull	r2, r3, r2, r3
 800a966:	099b      	lsrs	r3, r3, #6
 800a968:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800a96a:	697b      	ldr	r3, [r7, #20]
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3718      	adds	r7, #24
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}
 800a974:	10624dd3 	.word	0x10624dd3

0800a978 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b08c      	sub	sp, #48	@ 0x30
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	60f8      	str	r0, [r7, #12]
 800a980:	460b      	mov	r3, r1
 800a982:	607a      	str	r2, [r7, #4]
 800a984:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a986:	2300      	movs	r3, #0
 800a988:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800a98c:	2300      	movs	r3, #0
 800a98e:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800a992:	2300      	movs	r3, #0
 800a994:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800a996:	2300      	movs	r3, #0
 800a998:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800a99a:	2300      	movs	r3, #0
 800a99c:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800a99e:	7afb      	ldrb	r3, [r7, #11]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d005      	beq.n	800a9b0 <get_sequence_step_timeout+0x38>
 800a9a4:	7afb      	ldrb	r3, [r7, #11]
 800a9a6:	2b01      	cmp	r3, #1
 800a9a8:	d002      	beq.n	800a9b0 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800a9aa:	7afb      	ldrb	r3, [r7, #11]
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	d127      	bne.n	800aa00 <get_sequence_step_timeout+0x88>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a9b0:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	2100      	movs	r1, #0
 800a9b8:	68f8      	ldr	r0, [r7, #12]
 800a9ba:	f7fd fa8d 	bl	8007ed8 <VL53L0X_GetVcselPulsePeriod>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800a9c4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d109      	bne.n	800a9e0 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800a9cc:	f107 0320 	add.w	r3, r7, #32
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	2146      	movs	r1, #70	@ 0x46
 800a9d4:	68f8      	ldr	r0, [r7, #12]
 800a9d6:	f001 fd89 	bl	800c4ec <VL53L0X_RdByte>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800a9e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f7ff ff5d 	bl	800a8a4 <VL53L0X_decode_timeout>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	847b      	strh	r3, [r7, #34]	@ 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a9ee:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800a9f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	68f8      	ldr	r0, [r7, #12]
 800a9f8:	f7ff ff94 	bl	800a924 <VL53L0X_calc_timeout_us>
 800a9fc:	62b8      	str	r0, [r7, #40]	@ 0x28
 800a9fe:	e092      	b.n	800ab26 <get_sequence_step_timeout+0x1ae>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800aa00:	7afb      	ldrb	r3, [r7, #11]
 800aa02:	2b03      	cmp	r3, #3
 800aa04:	d135      	bne.n	800aa72 <get_sequence_step_timeout+0xfa>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800aa06:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800aa0a:	461a      	mov	r2, r3
 800aa0c:	2100      	movs	r1, #0
 800aa0e:	68f8      	ldr	r0, [r7, #12]
 800aa10:	f7fd fa62 	bl	8007ed8 <VL53L0X_GetVcselPulsePeriod>
 800aa14:	4603      	mov	r3, r0
 800aa16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800aa1a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	f040 8081 	bne.w	800ab26 <get_sequence_step_timeout+0x1ae>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800aa24:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800aa28:	461a      	mov	r2, r3
 800aa2a:	2100      	movs	r1, #0
 800aa2c:	68f8      	ldr	r0, [r7, #12]
 800aa2e:	f7fd fa53 	bl	8007ed8 <VL53L0X_GetVcselPulsePeriod>
 800aa32:	4603      	mov	r3, r0
 800aa34:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800aa38:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d109      	bne.n	800aa54 <get_sequence_step_timeout+0xdc>
				Status = VL53L0X_RdWord(Dev,
 800aa40:	f107 031e 	add.w	r3, r7, #30
 800aa44:	461a      	mov	r2, r3
 800aa46:	2151      	movs	r1, #81	@ 0x51
 800aa48:	68f8      	ldr	r0, [r7, #12]
 800aa4a:	f001 fd79 	bl	800c540 <VL53L0X_RdWord>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800aa54:	8bfb      	ldrh	r3, [r7, #30]
 800aa56:	4618      	mov	r0, r3
 800aa58:	f7ff ff24 	bl	800a8a4 <VL53L0X_decode_timeout>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	84fb      	strh	r3, [r7, #38]	@ 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800aa60:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800aa64:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800aa66:	4619      	mov	r1, r3
 800aa68:	68f8      	ldr	r0, [r7, #12]
 800aa6a:	f7ff ff5b 	bl	800a924 <VL53L0X_calc_timeout_us>
 800aa6e:	62b8      	str	r0, [r7, #40]	@ 0x28
 800aa70:	e059      	b.n	800ab26 <get_sequence_step_timeout+0x1ae>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800aa72:	7afb      	ldrb	r3, [r7, #11]
 800aa74:	2b04      	cmp	r3, #4
 800aa76:	d156      	bne.n	800ab26 <get_sequence_step_timeout+0x1ae>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800aa78:	f107 0314 	add.w	r3, r7, #20
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	68f8      	ldr	r0, [r7, #12]
 800aa80:	f7fd fb34 	bl	80080ec <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800aa84:	2300      	movs	r3, #0
 800aa86:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800aa88:	7dfb      	ldrb	r3, [r7, #23]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d01d      	beq.n	800aaca <get_sequence_step_timeout+0x152>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800aa8e:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800aa92:	461a      	mov	r2, r3
 800aa94:	2100      	movs	r1, #0
 800aa96:	68f8      	ldr	r0, [r7, #12]
 800aa98:	f7fd fa1e 	bl	8007ed8 <VL53L0X_GetVcselPulsePeriod>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800aaa2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d10f      	bne.n	800aaca <get_sequence_step_timeout+0x152>
				Status = VL53L0X_RdWord(Dev,
 800aaaa:	f107 031e 	add.w	r3, r7, #30
 800aaae:	461a      	mov	r2, r3
 800aab0:	2151      	movs	r1, #81	@ 0x51
 800aab2:	68f8      	ldr	r0, [r7, #12]
 800aab4:	f001 fd44 	bl	800c540 <VL53L0X_RdWord>
 800aab8:	4603      	mov	r3, r0
 800aaba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800aabe:	8bfb      	ldrh	r3, [r7, #30]
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7ff feef 	bl	800a8a4 <VL53L0X_decode_timeout>
 800aac6:	4603      	mov	r3, r0
 800aac8:	84fb      	strh	r3, [r7, #38]	@ 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800aaca:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d109      	bne.n	800aae6 <get_sequence_step_timeout+0x16e>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800aad2:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800aad6:	461a      	mov	r2, r3
 800aad8:	2101      	movs	r1, #1
 800aada:	68f8      	ldr	r0, [r7, #12]
 800aadc:	f7fd f9fc 	bl	8007ed8 <VL53L0X_GetVcselPulsePeriod>
 800aae0:	4603      	mov	r3, r0
 800aae2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800aae6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d10f      	bne.n	800ab0e <get_sequence_step_timeout+0x196>
			Status = VL53L0X_RdWord(Dev,
 800aaee:	f107 031c 	add.w	r3, r7, #28
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	2171      	movs	r1, #113	@ 0x71
 800aaf6:	68f8      	ldr	r0, [r7, #12]
 800aaf8:	f001 fd22 	bl	800c540 <VL53L0X_RdWord>
 800aafc:	4603      	mov	r3, r0
 800aafe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800ab02:	8bbb      	ldrh	r3, [r7, #28]
 800ab04:	4618      	mov	r0, r3
 800ab06:	f7ff fecd 	bl	800a8a4 <VL53L0X_decode_timeout>
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800ab0e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ab10:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ab12:	1ad3      	subs	r3, r2, r3
 800ab14:	84bb      	strh	r3, [r7, #36]	@ 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800ab16:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800ab1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	68f8      	ldr	r0, [r7, #12]
 800ab20:	f7ff ff00 	bl	800a924 <VL53L0X_calc_timeout_us>
 800ab24:	62b8      	str	r0, [r7, #40]	@ 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab2a:	601a      	str	r2, [r3, #0]

	return Status;
 800ab2c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3730      	adds	r7, #48	@ 0x30
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b08a      	sub	sp, #40	@ 0x28
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	60f8      	str	r0, [r7, #12]
 800ab40:	460b      	mov	r3, r1
 800ab42:	607a      	str	r2, [r7, #4]
 800ab44:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab46:	2300      	movs	r3, #0
 800ab48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800ab4c:	7afb      	ldrb	r3, [r7, #11]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d005      	beq.n	800ab5e <set_sequence_step_timeout+0x26>
 800ab52:	7afb      	ldrb	r3, [r7, #11]
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	d002      	beq.n	800ab5e <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800ab58:	7afb      	ldrb	r3, [r7, #11]
 800ab5a:	2b02      	cmp	r3, #2
 800ab5c:	d138      	bne.n	800abd0 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ab5e:	f107 031b 	add.w	r3, r7, #27
 800ab62:	461a      	mov	r2, r3
 800ab64:	2100      	movs	r1, #0
 800ab66:	68f8      	ldr	r0, [r7, #12]
 800ab68:	f7fd f9b6 	bl	8007ed8 <VL53L0X_GetVcselPulsePeriod>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800ab72:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d11a      	bne.n	800abb0 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800ab7a:	7efb      	ldrb	r3, [r7, #27]
 800ab7c:	461a      	mov	r2, r3
 800ab7e:	6879      	ldr	r1, [r7, #4]
 800ab80:	68f8      	ldr	r0, [r7, #12]
 800ab82:	f7ff fea5 	bl	800a8d0 <VL53L0X_calc_timeout_mclks>
 800ab86:	4603      	mov	r3, r0
 800ab88:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800ab8a:	8bbb      	ldrh	r3, [r7, #28]
 800ab8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab90:	d903      	bls.n	800ab9a <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800ab92:	23ff      	movs	r3, #255	@ 0xff
 800ab94:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ab98:	e004      	b.n	800aba4 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800ab9a:	8bbb      	ldrh	r3, [r7, #28]
 800ab9c:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800ab9e:	3b01      	subs	r3, #1
 800aba0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800aba4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aba8:	b29a      	uxth	r2, r3
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800abb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	f040 80ab 	bne.w	800ad10 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800abba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800abbe:	461a      	mov	r2, r3
 800abc0:	2146      	movs	r1, #70	@ 0x46
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	f001 fc10 	bl	800c3e8 <VL53L0X_WrByte>
 800abc8:	4603      	mov	r3, r0
 800abca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800abce:	e09f      	b.n	800ad10 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800abd0:	7afb      	ldrb	r3, [r7, #11]
 800abd2:	2b03      	cmp	r3, #3
 800abd4:	d135      	bne.n	800ac42 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800abd6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d11b      	bne.n	800ac16 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800abde:	f107 031b 	add.w	r3, r7, #27
 800abe2:	461a      	mov	r2, r3
 800abe4:	2100      	movs	r1, #0
 800abe6:	68f8      	ldr	r0, [r7, #12]
 800abe8:	f7fd f976 	bl	8007ed8 <VL53L0X_GetVcselPulsePeriod>
 800abec:	4603      	mov	r3, r0
 800abee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800abf2:	7efb      	ldrb	r3, [r7, #27]
 800abf4:	461a      	mov	r2, r3
 800abf6:	6879      	ldr	r1, [r7, #4]
 800abf8:	68f8      	ldr	r0, [r7, #12]
 800abfa:	f7ff fe69 	bl	800a8d0 <VL53L0X_calc_timeout_mclks>
 800abfe:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800ac00:	84bb      	strh	r3, [r7, #36]	@ 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800ac02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ac04:	4618      	mov	r0, r3
 800ac06:	f7ff fe23 	bl	800a850 <VL53L0X_encode_timeout>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ac0e:	8b3a      	ldrh	r2, [r7, #24]
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800ac16:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d108      	bne.n	800ac30 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800ac1e:	8b3b      	ldrh	r3, [r7, #24]
 800ac20:	461a      	mov	r2, r3
 800ac22:	2151      	movs	r1, #81	@ 0x51
 800ac24:	68f8      	ldr	r0, [r7, #12]
 800ac26:	f001 fc03 	bl	800c430 <VL53L0X_WrWord>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800ac30:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d16b      	bne.n	800ad10 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800ac40:	e066      	b.n	800ad10 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800ac42:	7afb      	ldrb	r3, [r7, #11]
 800ac44:	2b04      	cmp	r3, #4
 800ac46:	d160      	bne.n	800ad0a <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800ac48:	f107 0310 	add.w	r3, r7, #16
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	68f8      	ldr	r0, [r7, #12]
 800ac50:	f7fd fa4c 	bl	80080ec <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800ac54:	2300      	movs	r3, #0
 800ac56:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800ac58:	7cfb      	ldrb	r3, [r7, #19]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d01d      	beq.n	800ac9a <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ac5e:	f107 031b 	add.w	r3, r7, #27
 800ac62:	461a      	mov	r2, r3
 800ac64:	2100      	movs	r1, #0
 800ac66:	68f8      	ldr	r0, [r7, #12]
 800ac68:	f7fd f936 	bl	8007ed8 <VL53L0X_GetVcselPulsePeriod>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800ac72:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d10f      	bne.n	800ac9a <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800ac7a:	f107 0318 	add.w	r3, r7, #24
 800ac7e:	461a      	mov	r2, r3
 800ac80:	2151      	movs	r1, #81	@ 0x51
 800ac82:	68f8      	ldr	r0, [r7, #12]
 800ac84:	f001 fc5c 	bl	800c540 <VL53L0X_RdWord>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800ac8e:	8b3b      	ldrh	r3, [r7, #24]
 800ac90:	4618      	mov	r0, r3
 800ac92:	f7ff fe07 	bl	800a8a4 <VL53L0X_decode_timeout>
 800ac96:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800ac98:	84bb      	strh	r3, [r7, #36]	@ 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800ac9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d109      	bne.n	800acb6 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800aca2:	f107 031b 	add.w	r3, r7, #27
 800aca6:	461a      	mov	r2, r3
 800aca8:	2101      	movs	r1, #1
 800acaa:	68f8      	ldr	r0, [r7, #12]
 800acac:	f7fd f914 	bl	8007ed8 <VL53L0X_GetVcselPulsePeriod>
 800acb0:	4603      	mov	r3, r0
 800acb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800acb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d128      	bne.n	800ad10 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800acbe:	7efb      	ldrb	r3, [r7, #27]
 800acc0:	461a      	mov	r2, r3
 800acc2:	6879      	ldr	r1, [r7, #4]
 800acc4:	68f8      	ldr	r0, [r7, #12]
 800acc6:	f7ff fe03 	bl	800a8d0 <VL53L0X_calc_timeout_mclks>
 800acca:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800accc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800acce:	6a3a      	ldr	r2, [r7, #32]
 800acd0:	4413      	add	r3, r2
 800acd2:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800acd4:	6a38      	ldr	r0, [r7, #32]
 800acd6:	f7ff fdbb 	bl	800a850 <VL53L0X_encode_timeout>
 800acda:	4603      	mov	r3, r0
 800acdc:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800acde:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d108      	bne.n	800acf8 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800ace6:	8bfb      	ldrh	r3, [r7, #30]
 800ace8:	461a      	mov	r2, r3
 800acea:	2171      	movs	r1, #113	@ 0x71
 800acec:	68f8      	ldr	r0, [r7, #12]
 800acee:	f001 fb9f 	bl	800c430 <VL53L0X_WrWord>
 800acf2:	4603      	mov	r3, r0
 800acf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800acf8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d107      	bne.n	800ad10 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	687a      	ldr	r2, [r7, #4]
 800ad04:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
 800ad08:	e002      	b.n	800ad10 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ad0a:	23fc      	movs	r3, #252	@ 0xfc
 800ad0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	}
	return Status;
 800ad10:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3728      	adds	r7, #40	@ 0x28
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b08a      	sub	sp, #40	@ 0x28
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	460b      	mov	r3, r1
 800ad26:	70fb      	strb	r3, [r7, #3]
 800ad28:	4613      	mov	r3, r2
 800ad2a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800ad32:	230c      	movs	r3, #12
 800ad34:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800ad38:	2312      	movs	r3, #18
 800ad3a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800ad3e:	2308      	movs	r3, #8
 800ad40:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800ad44:	230e      	movs	r3, #14
 800ad46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800ad4e:	78bb      	ldrb	r3, [r7, #2]
 800ad50:	f003 0301 	and.w	r3, r3, #1
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d003      	beq.n	800ad62 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ad5a:	23fc      	movs	r3, #252	@ 0xfc
 800ad5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ad60:	e020      	b.n	800ada4 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800ad62:	78fb      	ldrb	r3, [r7, #3]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d10d      	bne.n	800ad84 <VL53L0X_set_vcsel_pulse_period+0x68>
 800ad68:	78ba      	ldrb	r2, [r7, #2]
 800ad6a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d304      	bcc.n	800ad7c <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800ad72:	78ba      	ldrb	r2, [r7, #2]
 800ad74:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ad78:	429a      	cmp	r2, r3
 800ad7a:	d903      	bls.n	800ad84 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ad7c:	23fc      	movs	r3, #252	@ 0xfc
 800ad7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ad82:	e00f      	b.n	800ada4 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800ad84:	78fb      	ldrb	r3, [r7, #3]
 800ad86:	2b01      	cmp	r3, #1
 800ad88:	d10c      	bne.n	800ada4 <VL53L0X_set_vcsel_pulse_period+0x88>
 800ad8a:	78ba      	ldrb	r2, [r7, #2]
 800ad8c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d304      	bcc.n	800ad9e <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800ad94:	78ba      	ldrb	r2, [r7, #2]
 800ad96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ad9a:	429a      	cmp	r2, r3
 800ad9c:	d902      	bls.n	800ada4 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ad9e:	23fc      	movs	r3, #252	@ 0xfc
 800ada0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800ada4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d002      	beq.n	800adb2 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800adac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800adb0:	e237      	b.n	800b222 <VL53L0X_set_vcsel_pulse_period+0x506>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800adb2:	78fb      	ldrb	r3, [r7, #3]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d150      	bne.n	800ae5a <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800adb8:	78bb      	ldrb	r3, [r7, #2]
 800adba:	2b0c      	cmp	r3, #12
 800adbc:	d110      	bne.n	800ade0 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800adbe:	2218      	movs	r2, #24
 800adc0:	2157      	movs	r1, #87	@ 0x57
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f001 fb10 	bl	800c3e8 <VL53L0X_WrByte>
 800adc8:	4603      	mov	r3, r0
 800adca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800adce:	2208      	movs	r2, #8
 800add0:	2156      	movs	r1, #86	@ 0x56
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f001 fb08 	bl	800c3e8 <VL53L0X_WrByte>
 800add8:	4603      	mov	r3, r0
 800adda:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800adde:	e17f      	b.n	800b0e0 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800ade0:	78bb      	ldrb	r3, [r7, #2]
 800ade2:	2b0e      	cmp	r3, #14
 800ade4:	d110      	bne.n	800ae08 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800ade6:	2230      	movs	r2, #48	@ 0x30
 800ade8:	2157      	movs	r1, #87	@ 0x57
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f001 fafc 	bl	800c3e8 <VL53L0X_WrByte>
 800adf0:	4603      	mov	r3, r0
 800adf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800adf6:	2208      	movs	r2, #8
 800adf8:	2156      	movs	r1, #86	@ 0x56
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f001 faf4 	bl	800c3e8 <VL53L0X_WrByte>
 800ae00:	4603      	mov	r3, r0
 800ae02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ae06:	e16b      	b.n	800b0e0 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800ae08:	78bb      	ldrb	r3, [r7, #2]
 800ae0a:	2b10      	cmp	r3, #16
 800ae0c:	d110      	bne.n	800ae30 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800ae0e:	2240      	movs	r2, #64	@ 0x40
 800ae10:	2157      	movs	r1, #87	@ 0x57
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f001 fae8 	bl	800c3e8 <VL53L0X_WrByte>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800ae1e:	2208      	movs	r2, #8
 800ae20:	2156      	movs	r1, #86	@ 0x56
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f001 fae0 	bl	800c3e8 <VL53L0X_WrByte>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ae2e:	e157      	b.n	800b0e0 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800ae30:	78bb      	ldrb	r3, [r7, #2]
 800ae32:	2b12      	cmp	r3, #18
 800ae34:	f040 8154 	bne.w	800b0e0 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800ae38:	2250      	movs	r2, #80	@ 0x50
 800ae3a:	2157      	movs	r1, #87	@ 0x57
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f001 fad3 	bl	800c3e8 <VL53L0X_WrByte>
 800ae42:	4603      	mov	r3, r0
 800ae44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800ae48:	2208      	movs	r2, #8
 800ae4a:	2156      	movs	r1, #86	@ 0x56
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f001 facb 	bl	800c3e8 <VL53L0X_WrByte>
 800ae52:	4603      	mov	r3, r0
 800ae54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ae58:	e142      	b.n	800b0e0 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800ae5a:	78fb      	ldrb	r3, [r7, #3]
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	f040 813f 	bne.w	800b0e0 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800ae62:	78bb      	ldrb	r3, [r7, #2]
 800ae64:	2b08      	cmp	r3, #8
 800ae66:	d14c      	bne.n	800af02 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800ae68:	2210      	movs	r2, #16
 800ae6a:	2148      	movs	r1, #72	@ 0x48
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f001 fabb 	bl	800c3e8 <VL53L0X_WrByte>
 800ae72:	4603      	mov	r3, r0
 800ae74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800ae78:	2208      	movs	r2, #8
 800ae7a:	2147      	movs	r1, #71	@ 0x47
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f001 fab3 	bl	800c3e8 <VL53L0X_WrByte>
 800ae82:	4603      	mov	r3, r0
 800ae84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800ae88:	2202      	movs	r2, #2
 800ae8a:	2132      	movs	r1, #50	@ 0x32
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f001 faab 	bl	800c3e8 <VL53L0X_WrByte>
 800ae92:	4603      	mov	r3, r0
 800ae94:	461a      	mov	r2, r3
 800ae96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800aea0:	220c      	movs	r2, #12
 800aea2:	2130      	movs	r1, #48	@ 0x30
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f001 fa9f 	bl	800c3e8 <VL53L0X_WrByte>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	461a      	mov	r2, r3
 800aeae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800aeb8:	2201      	movs	r2, #1
 800aeba:	21ff      	movs	r1, #255	@ 0xff
 800aebc:	6878      	ldr	r0, [r7, #4]
 800aebe:	f001 fa93 	bl	800c3e8 <VL53L0X_WrByte>
 800aec2:	4603      	mov	r3, r0
 800aec4:	461a      	mov	r2, r3
 800aec6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aeca:	4313      	orrs	r3, r2
 800aecc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 800aed0:	2230      	movs	r2, #48	@ 0x30
 800aed2:	2130      	movs	r1, #48	@ 0x30
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f001 fa87 	bl	800c3e8 <VL53L0X_WrByte>
 800aeda:	4603      	mov	r3, r0
 800aedc:	461a      	mov	r2, r3
 800aede:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aee2:	4313      	orrs	r3, r2
 800aee4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800aee8:	2200      	movs	r2, #0
 800aeea:	21ff      	movs	r1, #255	@ 0xff
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f001 fa7b 	bl	800c3e8 <VL53L0X_WrByte>
 800aef2:	4603      	mov	r3, r0
 800aef4:	461a      	mov	r2, r3
 800aef6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aefa:	4313      	orrs	r3, r2
 800aefc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800af00:	e0ee      	b.n	800b0e0 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800af02:	78bb      	ldrb	r3, [r7, #2]
 800af04:	2b0a      	cmp	r3, #10
 800af06:	d14c      	bne.n	800afa2 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800af08:	2228      	movs	r2, #40	@ 0x28
 800af0a:	2148      	movs	r1, #72	@ 0x48
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f001 fa6b 	bl	800c3e8 <VL53L0X_WrByte>
 800af12:	4603      	mov	r3, r0
 800af14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800af18:	2208      	movs	r2, #8
 800af1a:	2147      	movs	r1, #71	@ 0x47
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f001 fa63 	bl	800c3e8 <VL53L0X_WrByte>
 800af22:	4603      	mov	r3, r0
 800af24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800af28:	2203      	movs	r2, #3
 800af2a:	2132      	movs	r1, #50	@ 0x32
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f001 fa5b 	bl	800c3e8 <VL53L0X_WrByte>
 800af32:	4603      	mov	r3, r0
 800af34:	461a      	mov	r2, r3
 800af36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af3a:	4313      	orrs	r3, r2
 800af3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800af40:	2209      	movs	r2, #9
 800af42:	2130      	movs	r1, #48	@ 0x30
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f001 fa4f 	bl	800c3e8 <VL53L0X_WrByte>
 800af4a:	4603      	mov	r3, r0
 800af4c:	461a      	mov	r2, r3
 800af4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af52:	4313      	orrs	r3, r2
 800af54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800af58:	2201      	movs	r2, #1
 800af5a:	21ff      	movs	r1, #255	@ 0xff
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f001 fa43 	bl	800c3e8 <VL53L0X_WrByte>
 800af62:	4603      	mov	r3, r0
 800af64:	461a      	mov	r2, r3
 800af66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af6a:	4313      	orrs	r3, r2
 800af6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 800af70:	2220      	movs	r2, #32
 800af72:	2130      	movs	r1, #48	@ 0x30
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f001 fa37 	bl	800c3e8 <VL53L0X_WrByte>
 800af7a:	4603      	mov	r3, r0
 800af7c:	461a      	mov	r2, r3
 800af7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af82:	4313      	orrs	r3, r2
 800af84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800af88:	2200      	movs	r2, #0
 800af8a:	21ff      	movs	r1, #255	@ 0xff
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f001 fa2b 	bl	800c3e8 <VL53L0X_WrByte>
 800af92:	4603      	mov	r3, r0
 800af94:	461a      	mov	r2, r3
 800af96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af9a:	4313      	orrs	r3, r2
 800af9c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800afa0:	e09e      	b.n	800b0e0 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800afa2:	78bb      	ldrb	r3, [r7, #2]
 800afa4:	2b0c      	cmp	r3, #12
 800afa6:	d14c      	bne.n	800b042 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800afa8:	2238      	movs	r2, #56	@ 0x38
 800afaa:	2148      	movs	r1, #72	@ 0x48
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f001 fa1b 	bl	800c3e8 <VL53L0X_WrByte>
 800afb2:	4603      	mov	r3, r0
 800afb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800afb8:	2208      	movs	r2, #8
 800afba:	2147      	movs	r1, #71	@ 0x47
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f001 fa13 	bl	800c3e8 <VL53L0X_WrByte>
 800afc2:	4603      	mov	r3, r0
 800afc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800afc8:	2203      	movs	r2, #3
 800afca:	2132      	movs	r1, #50	@ 0x32
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f001 fa0b 	bl	800c3e8 <VL53L0X_WrByte>
 800afd2:	4603      	mov	r3, r0
 800afd4:	461a      	mov	r2, r3
 800afd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800afda:	4313      	orrs	r3, r2
 800afdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800afe0:	2208      	movs	r2, #8
 800afe2:	2130      	movs	r1, #48	@ 0x30
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f001 f9ff 	bl	800c3e8 <VL53L0X_WrByte>
 800afea:	4603      	mov	r3, r0
 800afec:	461a      	mov	r2, r3
 800afee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aff2:	4313      	orrs	r3, r2
 800aff4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800aff8:	2201      	movs	r2, #1
 800affa:	21ff      	movs	r1, #255	@ 0xff
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f001 f9f3 	bl	800c3e8 <VL53L0X_WrByte>
 800b002:	4603      	mov	r3, r0
 800b004:	461a      	mov	r2, r3
 800b006:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b00a:	4313      	orrs	r3, r2
 800b00c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 800b010:	2220      	movs	r2, #32
 800b012:	2130      	movs	r1, #48	@ 0x30
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f001 f9e7 	bl	800c3e8 <VL53L0X_WrByte>
 800b01a:	4603      	mov	r3, r0
 800b01c:	461a      	mov	r2, r3
 800b01e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b022:	4313      	orrs	r3, r2
 800b024:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b028:	2200      	movs	r2, #0
 800b02a:	21ff      	movs	r1, #255	@ 0xff
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f001 f9db 	bl	800c3e8 <VL53L0X_WrByte>
 800b032:	4603      	mov	r3, r0
 800b034:	461a      	mov	r2, r3
 800b036:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b03a:	4313      	orrs	r3, r2
 800b03c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b040:	e04e      	b.n	800b0e0 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800b042:	78bb      	ldrb	r3, [r7, #2]
 800b044:	2b0e      	cmp	r3, #14
 800b046:	d14b      	bne.n	800b0e0 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800b048:	2248      	movs	r2, #72	@ 0x48
 800b04a:	2148      	movs	r1, #72	@ 0x48
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f001 f9cb 	bl	800c3e8 <VL53L0X_WrByte>
 800b052:	4603      	mov	r3, r0
 800b054:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800b058:	2208      	movs	r2, #8
 800b05a:	2147      	movs	r1, #71	@ 0x47
 800b05c:	6878      	ldr	r0, [r7, #4]
 800b05e:	f001 f9c3 	bl	800c3e8 <VL53L0X_WrByte>
 800b062:	4603      	mov	r3, r0
 800b064:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800b068:	2203      	movs	r2, #3
 800b06a:	2132      	movs	r1, #50	@ 0x32
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f001 f9bb 	bl	800c3e8 <VL53L0X_WrByte>
 800b072:	4603      	mov	r3, r0
 800b074:	461a      	mov	r2, r3
 800b076:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b07a:	4313      	orrs	r3, r2
 800b07c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800b080:	2207      	movs	r2, #7
 800b082:	2130      	movs	r1, #48	@ 0x30
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f001 f9af 	bl	800c3e8 <VL53L0X_WrByte>
 800b08a:	4603      	mov	r3, r0
 800b08c:	461a      	mov	r2, r3
 800b08e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b092:	4313      	orrs	r3, r2
 800b094:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b098:	2201      	movs	r2, #1
 800b09a:	21ff      	movs	r1, #255	@ 0xff
 800b09c:	6878      	ldr	r0, [r7, #4]
 800b09e:	f001 f9a3 	bl	800c3e8 <VL53L0X_WrByte>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 800b0b0:	2220      	movs	r2, #32
 800b0b2:	2130      	movs	r1, #48	@ 0x30
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f001 f997 	bl	800c3e8 <VL53L0X_WrByte>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	461a      	mov	r2, r3
 800b0be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	21ff      	movs	r1, #255	@ 0xff
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f001 f98b 	bl	800c3e8 <VL53L0X_WrByte>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	461a      	mov	r2, r3
 800b0d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800b0e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d17e      	bne.n	800b1e6 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800b0e8:	78bb      	ldrb	r3, [r7, #2]
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7fe fe3b 	bl	8009d66 <VL53L0X_encode_vcsel_period>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800b0f6:	78fb      	ldrb	r3, [r7, #3]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d002      	beq.n	800b102 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d045      	beq.n	800b18c <VL53L0X_set_vcsel_pulse_period+0x470>
 800b100:	e06e      	b.n	800b1e0 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800b102:	f107 0314 	add.w	r3, r7, #20
 800b106:	461a      	mov	r2, r3
 800b108:	2103      	movs	r1, #3
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f7ff fc34 	bl	800a978 <get_sequence_step_timeout>
 800b110:	4603      	mov	r3, r0
 800b112:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800b116:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d109      	bne.n	800b132 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800b11e:	f107 0310 	add.w	r3, r7, #16
 800b122:	461a      	mov	r2, r3
 800b124:	2102      	movs	r1, #2
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f7ff fc26 	bl	800a978 <get_sequence_step_timeout>
 800b12c:	4603      	mov	r3, r0
 800b12e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800b132:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b136:	2b00      	cmp	r3, #0
 800b138:	d109      	bne.n	800b14e <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800b13a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800b13e:	461a      	mov	r2, r3
 800b140:	2150      	movs	r1, #80	@ 0x50
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f001 f950 	bl	800c3e8 <VL53L0X_WrByte>
 800b148:	4603      	mov	r3, r0
 800b14a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800b14e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b152:	2b00      	cmp	r3, #0
 800b154:	d108      	bne.n	800b168 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	461a      	mov	r2, r3
 800b15a:	2103      	movs	r1, #3
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f7ff fceb 	bl	800ab38 <set_sequence_step_timeout>
 800b162:	4603      	mov	r3, r0
 800b164:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800b168:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d108      	bne.n	800b182 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	461a      	mov	r2, r3
 800b174:	2102      	movs	r1, #2
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f7ff fcde 	bl	800ab38 <set_sequence_step_timeout>
 800b17c:	4603      	mov	r3, r0
 800b17e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	78ba      	ldrb	r2, [r7, #2]
 800b186:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800b18a:	e02c      	b.n	800b1e6 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800b18c:	f107 0318 	add.w	r3, r7, #24
 800b190:	461a      	mov	r2, r3
 800b192:	2104      	movs	r1, #4
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f7ff fbef 	bl	800a978 <get_sequence_step_timeout>
 800b19a:	4603      	mov	r3, r0
 800b19c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800b1a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d109      	bne.n	800b1bc <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800b1a8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	2170      	movs	r1, #112	@ 0x70
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f001 f919 	bl	800c3e8 <VL53L0X_WrByte>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800b1bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d108      	bne.n	800b1d6 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800b1c4:	69bb      	ldr	r3, [r7, #24]
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	2104      	movs	r1, #4
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f7ff fcb4 	bl	800ab38 <set_sequence_step_timeout>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	78ba      	ldrb	r2, [r7, #2]
 800b1da:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800b1de:	e002      	b.n	800b1e6 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b1e0:	23fc      	movs	r3, #252	@ 0xfc
 800b1e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
	}

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800b1e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d109      	bne.n	800b202 <VL53L0X_set_vcsel_pulse_period+0x4e6>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	695b      	ldr	r3, [r3, #20]
 800b1f2:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800b1f4:	69f9      	ldr	r1, [r7, #28]
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f7fc fe30 	bl	8007e5c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800b202:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b206:	2b00      	cmp	r3, #0
 800b208:	d109      	bne.n	800b21e <VL53L0X_set_vcsel_pulse_period+0x502>
		Status = VL53L0X_perform_phase_calibration(
 800b20a:	f107 010f 	add.w	r1, r7, #15
 800b20e:	2301      	movs	r3, #1
 800b210:	2200      	movs	r2, #0
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f7fe fcc2 	bl	8009b9c <VL53L0X_perform_phase_calibration>
 800b218:	4603      	mov	r3, r0
 800b21a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800b21e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800b222:	4618      	mov	r0, r3
 800b224:	3728      	adds	r7, #40	@ 0x28
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}

0800b22a <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800b22a:	b580      	push	{r7, lr}
 800b22c:	b086      	sub	sp, #24
 800b22e:	af00      	add	r7, sp, #0
 800b230:	60f8      	str	r0, [r7, #12]
 800b232:	460b      	mov	r3, r1
 800b234:	607a      	str	r2, [r7, #4]
 800b236:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b238:	2300      	movs	r3, #0
 800b23a:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800b23c:	7afb      	ldrb	r3, [r7, #11]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d002      	beq.n	800b248 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800b242:	2b01      	cmp	r3, #1
 800b244:	d00a      	beq.n	800b25c <VL53L0X_get_vcsel_pulse_period+0x32>
 800b246:	e013      	b.n	800b270 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800b248:	f107 0316 	add.w	r3, r7, #22
 800b24c:	461a      	mov	r2, r3
 800b24e:	2150      	movs	r1, #80	@ 0x50
 800b250:	68f8      	ldr	r0, [r7, #12]
 800b252:	f001 f94b 	bl	800c4ec <VL53L0X_RdByte>
 800b256:	4603      	mov	r3, r0
 800b258:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800b25a:	e00b      	b.n	800b274 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800b25c:	f107 0316 	add.w	r3, r7, #22
 800b260:	461a      	mov	r2, r3
 800b262:	2170      	movs	r1, #112	@ 0x70
 800b264:	68f8      	ldr	r0, [r7, #12]
 800b266:	f001 f941 	bl	800c4ec <VL53L0X_RdByte>
 800b26a:	4603      	mov	r3, r0
 800b26c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800b26e:	e001      	b.n	800b274 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b270:	23fc      	movs	r3, #252	@ 0xfc
 800b272:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800b274:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d107      	bne.n	800b28c <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800b27c:	7dbb      	ldrb	r3, [r7, #22]
 800b27e:	4618      	mov	r0, r3
 800b280:	f7fe fd5e 	bl	8009d40 <VL53L0X_decode_vcsel_period>
 800b284:	4603      	mov	r3, r0
 800b286:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	701a      	strb	r2, [r3, #0]

	return Status;
 800b28c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b290:	4618      	mov	r0, r3
 800b292:	3718      	adds	r7, #24
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b092      	sub	sp, #72	@ 0x48
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800b2a8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800b2ac:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800b2ae:	f240 7376 	movw	r3, #1910	@ 0x776
 800b2b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800b2b4:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800b2b8:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800b2ba:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800b2be:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800b2c0:	f240 234e 	movw	r3, #590	@ 0x24e
 800b2c4:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800b2c6:	f240 23b2 	movw	r3, #690	@ 0x2b2
 800b2ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800b2cc:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800b2d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800b2d2:	f240 2326 	movw	r3, #550	@ 0x226
 800b2d6:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800b2dc:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800b2e0:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800b2e6:	683a      	ldr	r2, [r7, #0]
 800b2e8:	6a3b      	ldr	r3, [r7, #32]
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d205      	bcs.n	800b2fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b2ee:	23fc      	movs	r3, #252	@ 0xfc
 800b2f0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		return Status;
 800b2f4:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800b2f8:	e0aa      	b.n	800b450 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800b2fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2fe:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800b300:	683a      	ldr	r2, [r7, #0]
 800b302:	1ad3      	subs	r3, r2, r3
 800b304:	643b      	str	r3, [r7, #64]	@ 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800b306:	f107 0314 	add.w	r3, r7, #20
 800b30a:	4619      	mov	r1, r3
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f7fc feed 	bl	80080ec <VL53L0X_GetSequenceStepEnables>
 800b312:	4603      	mov	r3, r0
 800b314:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800b318:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d15b      	bne.n	800b3d8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800b320:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800b322:	2b00      	cmp	r3, #0
 800b324:	d105      	bne.n	800b332 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800b326:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d102      	bne.n	800b332 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800b32c:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d052      	beq.n	800b3d8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800b332:	f107 0310 	add.w	r3, r7, #16
 800b336:	461a      	mov	r2, r3
 800b338:	2102      	movs	r1, #2
 800b33a:	6878      	ldr	r0, [r7, #4]
 800b33c:	f7ff fb1c 	bl	800a978 <get_sequence_step_timeout>
 800b340:	4603      	mov	r3, r0
 800b342:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800b346:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d002      	beq.n	800b354 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800b34e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800b352:	e07d      	b.n	800b450 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800b354:	7d3b      	ldrb	r3, [r7, #20]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d00f      	beq.n	800b37a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800b35a:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800b35c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b35e:	4413      	add	r3, r2
 800b360:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800b362:	69fa      	ldr	r2, [r7, #28]
 800b364:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b366:	429a      	cmp	r2, r3
 800b368:	d204      	bcs.n	800b374 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800b36a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b36c:	69fb      	ldr	r3, [r7, #28]
 800b36e:	1ad3      	subs	r3, r2, r3
 800b370:	643b      	str	r3, [r7, #64]	@ 0x40
 800b372:	e002      	b.n	800b37a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b374:	23fc      	movs	r3, #252	@ 0xfc
 800b376:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800b37a:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d002      	beq.n	800b388 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800b382:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800b386:	e063      	b.n	800b450 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800b388:	7dbb      	ldrb	r3, [r7, #22]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d011      	beq.n	800b3b2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800b38e:	693a      	ldr	r2, [r7, #16]
 800b390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b392:	4413      	add	r3, r2
 800b394:	005b      	lsls	r3, r3, #1
 800b396:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800b398:	69fa      	ldr	r2, [r7, #28]
 800b39a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d204      	bcs.n	800b3aa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800b3a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b3a2:	69fb      	ldr	r3, [r7, #28]
 800b3a4:	1ad3      	subs	r3, r2, r3
 800b3a6:	643b      	str	r3, [r7, #64]	@ 0x40
 800b3a8:	e016      	b.n	800b3d8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b3aa:	23fc      	movs	r3, #252	@ 0xfc
 800b3ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b3b0:	e012      	b.n	800b3d8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800b3b2:	7d7b      	ldrb	r3, [r7, #21]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d00f      	beq.n	800b3d8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b3bc:	4413      	add	r3, r2
 800b3be:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800b3c0:	69fa      	ldr	r2, [r7, #28]
 800b3c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d204      	bcs.n	800b3d2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800b3c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b3ca:	69fb      	ldr	r3, [r7, #28]
 800b3cc:	1ad3      	subs	r3, r2, r3
 800b3ce:	643b      	str	r3, [r7, #64]	@ 0x40
 800b3d0:	e002      	b.n	800b3d8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b3d2:	23fc      	movs	r3, #252	@ 0xfc
 800b3d4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800b3d8:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d002      	beq.n	800b3e6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800b3e0:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800b3e4:	e034      	b.n	800b450 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800b3e6:	7dfb      	ldrb	r3, [r7, #23]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d019      	beq.n	800b420 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800b3ec:	f107 030c 	add.w	r3, r7, #12
 800b3f0:	461a      	mov	r2, r3
 800b3f2:	2103      	movs	r1, #3
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f7ff fabf 	bl	800a978 <get_sequence_step_timeout>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b404:	4413      	add	r3, r2
 800b406:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800b408:	69fa      	ldr	r2, [r7, #28]
 800b40a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d204      	bcs.n	800b41a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800b410:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b412:	69fb      	ldr	r3, [r7, #28]
 800b414:	1ad3      	subs	r3, r2, r3
 800b416:	643b      	str	r3, [r7, #64]	@ 0x40
 800b418:	e002      	b.n	800b420 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b41a:	23fc      	movs	r3, #252	@ 0xfc
 800b41c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800b420:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800b424:	2b00      	cmp	r3, #0
 800b426:	d111      	bne.n	800b44c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800b428:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d00e      	beq.n	800b44c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800b42e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b432:	1ad3      	subs	r3, r2, r3
 800b434:	643b      	str	r3, [r7, #64]	@ 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800b436:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b438:	2104      	movs	r1, #4
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f7ff fb7c 	bl	800ab38 <set_sequence_step_timeout>
 800b440:	4603      	mov	r3, r0
 800b442:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	683a      	ldr	r2, [r7, #0]
 800b44a:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800b44c:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 800b450:	4618      	mov	r0, r3
 800b452:	3748      	adds	r7, #72	@ 0x48
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}

0800b458 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b090      	sub	sp, #64	@ 0x40
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b462:	2300      	movs	r3, #0
 800b464:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800b468:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800b46c:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800b46e:	f240 7376 	movw	r3, #1910	@ 0x776
 800b472:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800b474:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800b478:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800b47a:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800b47e:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800b480:	f240 234e 	movw	r3, #590	@ 0x24e
 800b484:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800b486:	f240 23b2 	movw	r3, #690	@ 0x2b2
 800b48a:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800b48c:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800b490:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800b492:	f240 2326 	movw	r3, #550	@ 0x226
 800b496:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800b498:	2300      	movs	r3, #0
 800b49a:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800b49c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b49e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4a0:	441a      	add	r2, r3
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800b4a6:	f107 0318 	add.w	r3, r7, #24
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f7fc fe1d 	bl	80080ec <VL53L0X_GetSequenceStepEnables>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800b4b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d002      	beq.n	800b4c6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800b4c0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800b4c4:	e075      	b.n	800b5b2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800b4c6:	7e3b      	ldrb	r3, [r7, #24]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d105      	bne.n	800b4d8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800b4cc:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d102      	bne.n	800b4d8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800b4d2:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d030      	beq.n	800b53a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800b4d8:	f107 0310 	add.w	r3, r7, #16
 800b4dc:	461a      	mov	r2, r3
 800b4de:	2102      	movs	r1, #2
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f7ff fa49 	bl	800a978 <get_sequence_step_timeout>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800b4ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d122      	bne.n	800b53a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800b4f4:	7e3b      	ldrb	r3, [r7, #24]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d007      	beq.n	800b50a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800b4fe:	6939      	ldr	r1, [r7, #16]
 800b500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b502:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800b504:	441a      	add	r2, r3
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800b50a:	7ebb      	ldrb	r3, [r7, #26]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d009      	beq.n	800b524 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800b514:	6939      	ldr	r1, [r7, #16]
 800b516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b518:	440b      	add	r3, r1
 800b51a:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800b51c:	441a      	add	r2, r3
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	601a      	str	r2, [r3, #0]
 800b522:	e00a      	b.n	800b53a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800b524:	7e7b      	ldrb	r3, [r7, #25]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d007      	beq.n	800b53a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800b52e:	6939      	ldr	r1, [r7, #16]
 800b530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b532:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800b534:	441a      	add	r2, r3
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b53a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d114      	bne.n	800b56c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800b542:	7efb      	ldrb	r3, [r7, #27]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d011      	beq.n	800b56c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800b548:	f107 030c 	add.w	r3, r7, #12
 800b54c:	461a      	mov	r2, r3
 800b54e:	2103      	movs	r1, #3
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f7ff fa11 	bl	800a978 <get_sequence_step_timeout>
 800b556:	4603      	mov	r3, r0
 800b558:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800b560:	68f9      	ldr	r1, [r7, #12]
 800b562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b564:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800b566:	441a      	add	r2, r3
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b56c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800b570:	2b00      	cmp	r3, #0
 800b572:	d114      	bne.n	800b59e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800b574:	7f3b      	ldrb	r3, [r7, #28]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d011      	beq.n	800b59e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800b57a:	f107 0314 	add.w	r3, r7, #20
 800b57e:	461a      	mov	r2, r3
 800b580:	2104      	movs	r1, #4
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f7ff f9f8 	bl	800a978 <get_sequence_step_timeout>
 800b588:	4603      	mov	r3, r0
 800b58a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800b592:	6979      	ldr	r1, [r7, #20]
 800b594:	6a3b      	ldr	r3, [r7, #32]
 800b596:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800b598:	441a      	add	r2, r3
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b59e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d103      	bne.n	800b5ae <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	681a      	ldr	r2, [r3, #0]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b5ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	3740      	adds	r7, #64	@ 0x40
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	bd80      	pop	{r7, pc}
	...

0800b5bc <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b088      	sub	sp, #32
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800b5ce:	e0c6      	b.n	800b75e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	683a      	ldr	r2, [r7, #0]
 800b5d4:	4413      	add	r3, r2
 800b5d6:	781b      	ldrb	r3, [r3, #0]
 800b5d8:	74fb      	strb	r3, [r7, #19]
		Index++;
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	3301      	adds	r3, #1
 800b5de:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800b5e0:	7cfb      	ldrb	r3, [r7, #19]
 800b5e2:	2bff      	cmp	r3, #255	@ 0xff
 800b5e4:	f040 808d 	bne.w	800b702 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	683a      	ldr	r2, [r7, #0]
 800b5ec:	4413      	add	r3, r2
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	747b      	strb	r3, [r7, #17]
			Index++;
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	3301      	adds	r3, #1
 800b5f6:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800b5f8:	7c7b      	ldrb	r3, [r7, #17]
 800b5fa:	2b03      	cmp	r3, #3
 800b5fc:	d87e      	bhi.n	800b6fc <VL53L0X_load_tuning_settings+0x140>
 800b5fe:	a201      	add	r2, pc, #4	@ (adr r2, 800b604 <VL53L0X_load_tuning_settings+0x48>)
 800b600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b604:	0800b615 	.word	0x0800b615
 800b608:	0800b64f 	.word	0x0800b64f
 800b60c:	0800b689 	.word	0x0800b689
 800b610:	0800b6c3 	.word	0x0800b6c3
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	683a      	ldr	r2, [r7, #0]
 800b618:	4413      	add	r3, r2
 800b61a:	781b      	ldrb	r3, [r3, #0]
 800b61c:	743b      	strb	r3, [r7, #16]
				Index++;
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	3301      	adds	r3, #1
 800b622:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	683a      	ldr	r2, [r7, #0]
 800b628:	4413      	add	r3, r2
 800b62a:	781b      	ldrb	r3, [r3, #0]
 800b62c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	3301      	adds	r3, #1
 800b632:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b634:	7c3b      	ldrb	r3, [r7, #16]
 800b636:	b29b      	uxth	r3, r3
 800b638:	021b      	lsls	r3, r3, #8
 800b63a:	b29a      	uxth	r2, r3
 800b63c:	7bfb      	ldrb	r3, [r7, #15]
 800b63e:	b29b      	uxth	r3, r3
 800b640:	4413      	add	r3, r2
 800b642:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	89ba      	ldrh	r2, [r7, #12]
 800b648:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
				break;
 800b64c:	e087      	b.n	800b75e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	683a      	ldr	r2, [r7, #0]
 800b652:	4413      	add	r3, r2
 800b654:	781b      	ldrb	r3, [r3, #0]
 800b656:	743b      	strb	r3, [r7, #16]
				Index++;
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	3301      	adds	r3, #1
 800b65c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	683a      	ldr	r2, [r7, #0]
 800b662:	4413      	add	r3, r2
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	3301      	adds	r3, #1
 800b66c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b66e:	7c3b      	ldrb	r3, [r7, #16]
 800b670:	b29b      	uxth	r3, r3
 800b672:	021b      	lsls	r3, r3, #8
 800b674:	b29a      	uxth	r2, r3
 800b676:	7bfb      	ldrb	r3, [r7, #15]
 800b678:	b29b      	uxth	r3, r3
 800b67a:	4413      	add	r3, r2
 800b67c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	89ba      	ldrh	r2, [r7, #12]
 800b682:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
					Temp16);
				break;
 800b686:	e06a      	b.n	800b75e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	683a      	ldr	r2, [r7, #0]
 800b68c:	4413      	add	r3, r2
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	743b      	strb	r3, [r7, #16]
				Index++;
 800b692:	697b      	ldr	r3, [r7, #20]
 800b694:	3301      	adds	r3, #1
 800b696:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b698:	697b      	ldr	r3, [r7, #20]
 800b69a:	683a      	ldr	r2, [r7, #0]
 800b69c:	4413      	add	r3, r2
 800b69e:	781b      	ldrb	r3, [r3, #0]
 800b6a0:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b6a2:	697b      	ldr	r3, [r7, #20]
 800b6a4:	3301      	adds	r3, #1
 800b6a6:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b6a8:	7c3b      	ldrb	r3, [r7, #16]
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	021b      	lsls	r3, r3, #8
 800b6ae:	b29a      	uxth	r2, r3
 800b6b0:	7bfb      	ldrb	r3, [r7, #15]
 800b6b2:	b29b      	uxth	r3, r3
 800b6b4:	4413      	add	r3, r2
 800b6b6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	89ba      	ldrh	r2, [r7, #12]
 800b6bc:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
				break;
 800b6c0:	e04d      	b.n	800b75e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	683a      	ldr	r2, [r7, #0]
 800b6c6:	4413      	add	r3, r2
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	743b      	strb	r3, [r7, #16]
				Index++;
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	683a      	ldr	r2, [r7, #0]
 800b6d6:	4413      	add	r3, r2
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	73fb      	strb	r3, [r7, #15]
				Index++;
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	3301      	adds	r3, #1
 800b6e0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800b6e2:	7c3b      	ldrb	r3, [r7, #16]
 800b6e4:	b29b      	uxth	r3, r3
 800b6e6:	021b      	lsls	r3, r3, #8
 800b6e8:	b29a      	uxth	r2, r3
 800b6ea:	7bfb      	ldrb	r3, [r7, #15]
 800b6ec:	b29b      	uxth	r3, r3
 800b6ee:	4413      	add	r3, r2
 800b6f0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	89ba      	ldrh	r2, [r7, #12]
 800b6f6:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c
				break;
 800b6fa:	e030      	b.n	800b75e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b6fc:	23fc      	movs	r3, #252	@ 0xfc
 800b6fe:	77fb      	strb	r3, [r7, #31]
 800b700:	e02d      	b.n	800b75e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800b702:	7cfb      	ldrb	r3, [r7, #19]
 800b704:	2b04      	cmp	r3, #4
 800b706:	d828      	bhi.n	800b75a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	683a      	ldr	r2, [r7, #0]
 800b70c:	4413      	add	r3, r2
 800b70e:	781b      	ldrb	r3, [r3, #0]
 800b710:	74bb      	strb	r3, [r7, #18]
			Index++;
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	3301      	adds	r3, #1
 800b716:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800b718:	2300      	movs	r3, #0
 800b71a:	61bb      	str	r3, [r7, #24]
 800b71c:	e00f      	b.n	800b73e <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800b71e:	697b      	ldr	r3, [r7, #20]
 800b720:	683a      	ldr	r2, [r7, #0]
 800b722:	4413      	add	r3, r2
 800b724:	7819      	ldrb	r1, [r3, #0]
 800b726:	f107 0208 	add.w	r2, r7, #8
 800b72a:	69bb      	ldr	r3, [r7, #24]
 800b72c:	4413      	add	r3, r2
 800b72e:	460a      	mov	r2, r1
 800b730:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	3301      	adds	r3, #1
 800b736:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800b738:	69bb      	ldr	r3, [r7, #24]
 800b73a:	3301      	adds	r3, #1
 800b73c:	61bb      	str	r3, [r7, #24]
 800b73e:	7cfb      	ldrb	r3, [r7, #19]
 800b740:	69ba      	ldr	r2, [r7, #24]
 800b742:	429a      	cmp	r2, r3
 800b744:	dbeb      	blt.n	800b71e <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800b746:	7cfb      	ldrb	r3, [r7, #19]
 800b748:	f107 0208 	add.w	r2, r7, #8
 800b74c:	7cb9      	ldrb	r1, [r7, #18]
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 fdee 	bl	800c330 <VL53L0X_WriteMulti>
 800b754:	4603      	mov	r3, r0
 800b756:	77fb      	strb	r3, [r7, #31]
 800b758:	e001      	b.n	800b75e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b75a:	23fc      	movs	r3, #252	@ 0xfc
 800b75c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	683a      	ldr	r2, [r7, #0]
 800b762:	4413      	add	r3, r2
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d004      	beq.n	800b774 <VL53L0X_load_tuning_settings+0x1b8>
 800b76a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	f43f af2e 	beq.w	800b5d0 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b774:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3720      	adds	r7, #32
 800b77c:	46bd      	mov	sp, r7
 800b77e:	bd80      	pop	{r7, pc}

0800b780 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b088      	sub	sp, #32
 800b784:	af00      	add	r7, sp, #0
 800b786:	60f8      	str	r0, [r7, #12]
 800b788:	60b9      	str	r1, [r7, #8]
 800b78a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b78c:	2300      	movs	r3, #0
 800b78e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2200      	movs	r2, #0
 800b794:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800b796:	f107 0313 	add.w	r3, r7, #19
 800b79a:	4619      	mov	r1, r3
 800b79c:	68f8      	ldr	r0, [r7, #12]
 800b79e:	f7fc fd31 	bl	8008204 <VL53L0X_GetXTalkCompensationEnable>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800b7a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d111      	bne.n	800b7d2 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800b7ae:	7cfb      	ldrb	r3, [r7, #19]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d00e      	beq.n	800b7d2 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	6a1b      	ldr	r3, [r3, #32]
 800b7b8:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	8a9b      	ldrh	r3, [r3, #20]
 800b7be:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800b7c0:	69bb      	ldr	r3, [r7, #24]
 800b7c2:	fb02 f303 	mul.w	r3, r2, r3
 800b7c6:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	3380      	adds	r3, #128	@ 0x80
 800b7cc:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800b7d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3720      	adds	r7, #32
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}

0800b7de <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800b7de:	b580      	push	{r7, lr}
 800b7e0:	b086      	sub	sp, #24
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	60f8      	str	r0, [r7, #12]
 800b7e6:	60b9      	str	r1, [r7, #8]
 800b7e8:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800b7f6:	f107 0310 	add.w	r3, r7, #16
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	68b9      	ldr	r1, [r7, #8]
 800b7fe:	68f8      	ldr	r0, [r7, #12]
 800b800:	f7ff ffbe 	bl	800b780 <VL53L0X_get_total_xtalk_rate>
 800b804:	4603      	mov	r3, r0
 800b806:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800b808:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d105      	bne.n	800b81c <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681a      	ldr	r2, [r3, #0]
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	441a      	add	r2, r3
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	601a      	str	r2, [r3, #0]

	return Status;
 800b81c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b820:	4618      	mov	r0, r3
 800b822:	3718      	adds	r7, #24
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}

0800b828 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b09a      	sub	sp, #104	@ 0x68
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	60f8      	str	r0, [r7, #12]
 800b830:	60b9      	str	r1, [r7, #8]
 800b832:	607a      	str	r2, [r7, #4]
 800b834:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800b836:	2312      	movs	r3, #18
 800b838:	657b      	str	r3, [r7, #84]	@ 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800b83a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800b83e:	653b      	str	r3, [r7, #80]	@ 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800b840:	2342      	movs	r3, #66	@ 0x42
 800b842:	64fb      	str	r3, [r7, #76]	@ 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800b844:	2306      	movs	r3, #6
 800b846:	64bb      	str	r3, [r7, #72]	@ 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800b848:	2307      	movs	r3, #7
 800b84a:	647b      	str	r3, [r7, #68]	@ 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b84c:	2300      	movs	r3, #0
 800b84e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	f8b3 3154 	ldrh.w	r3, [r3, #340]	@ 0x154
	dmaxCalRange_mm =
 800b858:	63fb      	str	r3, [r7, #60]	@ 0x3c

	dmaxCalSignalRateRtn_mcps =
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800b860:	63bb      	str	r3, [r7, #56]	@ 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800b862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b864:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b866:	fb02 f303 	mul.w	r3, r2, r3
 800b86a:	637b      	str	r3, [r7, #52]	@ 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800b86c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b86e:	3380      	adds	r3, #128	@ 0x80
 800b870:	0a1b      	lsrs	r3, r3, #8
 800b872:	637b      	str	r3, [r7, #52]	@ 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800b874:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b876:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b878:	fb02 f303 	mul.w	r3, r2, r3
 800b87c:	637b      	str	r3, [r7, #52]	@ 0x34

	minSignalNeeded_p1 = 0;
 800b87e:	2300      	movs	r3, #0
 800b880:	667b      	str	r3, [r7, #100]	@ 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d01a      	beq.n	800b8be <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	029b      	lsls	r3, r3, #10
 800b88c:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800b892:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b894:	4413      	add	r3, r2
 800b896:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800b898:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8a0:	667b      	str	r3, [r7, #100]	@ 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800b8a2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b8a4:	4613      	mov	r3, r2
 800b8a6:	005b      	lsls	r3, r3, #1
 800b8a8:	4413      	add	r3, r2
 800b8aa:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800b8ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b8ae:	fb03 f303 	mul.w	r3, r3, r3
 800b8b2:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800b8b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b8b6:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800b8ba:	0c1b      	lsrs	r3, r3, #16
 800b8bc:	667b      	str	r3, [r7, #100]	@ 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b8c2:	fb02 f303 	mul.w	r3, r2, r3
 800b8c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800b8c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8ca:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800b8ce:	0c1b      	lsrs	r3, r3, #16
 800b8d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800b8d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8d4:	fb03 f303 	mul.w	r3, r3, r3
 800b8d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800b8da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b8dc:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800b8e0:	0c1b      	lsrs	r3, r3, #16
 800b8e2:	62bb      	str	r3, [r7, #40]	@ 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800b8e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b8e6:	085a      	lsrs	r2, r3, #1
 800b8e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8ea:	441a      	add	r2, r3
 800b8ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b8ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8f2:	62bb      	str	r3, [r7, #40]	@ 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800b8f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b8f8:	fb02 f303 	mul.w	r3, r2, r3
 800b8fc:	62bb      	str	r3, [r7, #40]	@ 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800b8fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b904:	d302      	bcc.n	800b90c <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800b906:	4b54      	ldr	r3, [pc, #336]	@ (800ba58 <VL53L0X_calc_dmax+0x230>)
 800b908:	663b      	str	r3, [r7, #96]	@ 0x60
 800b90a:	e015      	b.n	800b938 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800b90c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b90e:	085a      	lsrs	r2, r3, #1
 800b910:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b912:	441a      	add	r2, r3
 800b914:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b916:	fbb2 f3f3 	udiv	r3, r2, r3
 800b91a:	677b      	str	r3, [r7, #116]	@ 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800b91c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b91e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b920:	fb02 f303 	mul.w	r3, r2, r3
 800b924:	677b      	str	r3, [r7, #116]	@ 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800b926:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b928:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800b92c:	0c1b      	lsrs	r3, r3, #16
 800b92e:	663b      	str	r3, [r7, #96]	@ 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800b930:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b932:	fb03 f303 	mul.w	r3, r3, r3
 800b936:	663b      	str	r3, [r7, #96]	@ 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800b938:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b93a:	039b      	lsls	r3, r3, #14
 800b93c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800b940:	4a46      	ldr	r2, [pc, #280]	@ (800ba5c <VL53L0X_calc_dmax+0x234>)
 800b942:	fba2 2303 	umull	r2, r3, r2, r3
 800b946:	099b      	lsrs	r3, r3, #6
 800b948:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800b94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b94c:	fb03 f303 	mul.w	r3, r3, r3
 800b950:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800b952:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b954:	fb03 f303 	mul.w	r3, r3, r3
 800b958:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800b95a:	6a3b      	ldr	r3, [r7, #32]
 800b95c:	3308      	adds	r3, #8
 800b95e:	091b      	lsrs	r3, r3, #4
 800b960:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800b962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b964:	6a3b      	ldr	r3, [r7, #32]
 800b966:	1ad3      	subs	r3, r2, r3
 800b968:	627b      	str	r3, [r7, #36]	@ 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800b96a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b96c:	4613      	mov	r3, r2
 800b96e:	005b      	lsls	r3, r3, #1
 800b970:	4413      	add	r3, r2
 800b972:	011b      	lsls	r3, r3, #4
 800b974:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800b976:	69fb      	ldr	r3, [r7, #28]
 800b978:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b97c:	0b9b      	lsrs	r3, r3, #14
 800b97e:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800b980:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b982:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b984:	4413      	add	r3, r2
 800b986:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800b988:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b98a:	085b      	lsrs	r3, r3, #1
 800b98c:	69ba      	ldr	r2, [r7, #24]
 800b98e:	4413      	add	r3, r2
 800b990:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800b992:	69ba      	ldr	r2, [r7, #24]
 800b994:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b996:	fbb2 f3f3 	udiv	r3, r2, r3
 800b99a:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800b99c:	69bb      	ldr	r3, [r7, #24]
 800b99e:	039b      	lsls	r3, r3, #14
 800b9a0:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800b9a2:	69fb      	ldr	r3, [r7, #28]
 800b9a4:	085b      	lsrs	r3, r3, #1
 800b9a6:	69ba      	ldr	r2, [r7, #24]
 800b9a8:	4413      	add	r3, r2
 800b9aa:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800b9ac:	69ba      	ldr	r2, [r7, #24]
 800b9ae:	69fb      	ldr	r3, [r7, #28]
 800b9b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9b4:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800b9b6:	69bb      	ldr	r3, [r7, #24]
 800b9b8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b9ba:	fb02 f303 	mul.w	r3, r2, r3
 800b9be:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800b9c0:	69bb      	ldr	r3, [r7, #24]
 800b9c2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800b9c6:	4a25      	ldr	r2, [pc, #148]	@ (800ba5c <VL53L0X_calc_dmax+0x234>)
 800b9c8:	fba2 2303 	umull	r2, r3, r2, r3
 800b9cc:	099b      	lsrs	r3, r3, #6
 800b9ce:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800b9d0:	69bb      	ldr	r3, [r7, #24]
 800b9d2:	011b      	lsls	r3, r3, #4
 800b9d4:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800b9d6:	69bb      	ldr	r3, [r7, #24]
 800b9d8:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800b9dc:	4a1f      	ldr	r2, [pc, #124]	@ (800ba5c <VL53L0X_calc_dmax+0x234>)
 800b9de:	fba2 2303 	umull	r2, r3, r2, r3
 800b9e2:	099b      	lsrs	r3, r3, #6
 800b9e4:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800b9e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b9e8:	3380      	adds	r3, #128	@ 0x80
 800b9ea:	0a1b      	lsrs	r3, r3, #8
 800b9ec:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d008      	beq.n	800ba06 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	085a      	lsrs	r2, r3, #1
 800b9f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9fa:	441a      	add	r2, r3
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba02:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ba04:	e001      	b.n	800ba0a <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800ba06:	2300      	movs	r3, #0
 800ba08:	65bb      	str	r3, [r7, #88]	@ 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800ba0a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800ba0c:	f7fe f9be 	bl	8009d8c <VL53L0X_isqrt>
 800ba10:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800ba12:	69bb      	ldr	r3, [r7, #24]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d008      	beq.n	800ba2a <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800ba18:	69bb      	ldr	r3, [r7, #24]
 800ba1a:	085a      	lsrs	r2, r3, #1
 800ba1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba1e:	441a      	add	r2, r3
 800ba20:	69bb      	ldr	r3, [r7, #24]
 800ba22:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ba28:	e001      	b.n	800ba2e <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	65fb      	str	r3, [r7, #92]	@ 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800ba2e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800ba30:	f7fe f9ac 	bl	8009d8c <VL53L0X_isqrt>
 800ba34:	65f8      	str	r0, [r7, #92]	@ 0x5c

	*pdmax_mm = dmaxDark;
 800ba36:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ba38:	693a      	ldr	r2, [r7, #16]
 800ba3a:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800ba3c:	693a      	ldr	r2, [r7, #16]
 800ba3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ba40:	429a      	cmp	r2, r3
 800ba42:	d902      	bls.n	800ba4a <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800ba44:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ba46:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ba48:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800ba4a:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3768      	adds	r7, #104	@ 0x68
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
 800ba56:	bf00      	nop
 800ba58:	fff00000 	.word	0xfff00000
 800ba5c:	10624dd3 	.word	0x10624dd3

0800ba60 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b0b4      	sub	sp, #208	@ 0xd0
 800ba64:	af04      	add	r7, sp, #16
 800ba66:	60f8      	str	r0, [r7, #12]
 800ba68:	60b9      	str	r1, [r7, #8]
 800ba6a:	607a      	str	r2, [r7, #4]
 800ba6c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800ba6e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800ba72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800ba76:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800ba7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800ba7e:	f44f 13c8 	mov.w	r3, #1638400	@ 0x190000
 800ba82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800ba86:	f241 235c 	movw	r3, #4700	@ 0x125c
 800ba8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800ba8e:	4b9e      	ldr	r3, [pc, #632]	@ (800bd08 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800ba90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800ba94:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800ba98:	67fb      	str	r3, [r7, #124]	@ 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800ba9a:	f04f 4270 	mov.w	r2, #4026531840	@ 0xf0000000
 800ba9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800baa2:	fbb2 f3f3 	udiv	r3, r2, r3
 800baa6:	67bb      	str	r3, [r7, #120]	@ 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800baa8:	4b98      	ldr	r3, [pc, #608]	@ (800bd0c <VL53L0X_calc_sigma_estimate+0x2ac>)
 800baaa:	677b      	str	r3, [r7, #116]	@ 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800baac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bab0:	673b      	str	r3, [r7, #112]	@ 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800bab2:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 800bab6:	66fb      	str	r3, [r7, #108]	@ 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800bab8:	f240 6377 	movw	r3, #1655	@ 0x677
 800babc:	66bb      	str	r3, [r7, #104]	@ 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800babe:	2300      	movs	r3, #0
 800bac0:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	6a1b      	ldr	r3, [r3, #32]
 800bac8:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	691b      	ldr	r3, [r3, #16]
 800bace:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800bad2:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800bad6:	0c1b      	lsrs	r3, r3, #16
 800bad8:	667b      	str	r3, [r7, #100]	@ 0x64

	correctedSignalRate_mcps =
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	68db      	ldr	r3, [r3, #12]
 800bade:	663b      	str	r3, [r7, #96]	@ 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800bae0:	f107 0310 	add.w	r3, r7, #16
 800bae4:	461a      	mov	r2, r3
 800bae6:	68b9      	ldr	r1, [r7, #8]
 800bae8:	68f8      	ldr	r0, [r7, #12]
 800baea:	f7ff fe78 	bl	800b7de <VL53L0X_get_total_signal_rate>
 800baee:	4603      	mov	r3, r0
 800baf0:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800baf4:	f107 0314 	add.w	r3, r7, #20
 800baf8:	461a      	mov	r2, r3
 800bafa:	68b9      	ldr	r1, [r7, #8]
 800bafc:	68f8      	ldr	r0, [r7, #12]
 800bafe:	f7ff fe3f 	bl	800b780 <VL53L0X_get_total_xtalk_rate>
 800bb02:	4603      	mov	r3, r0
 800bb04:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800bb0e:	fb02 f303 	mul.w	r3, r2, r3
 800bb12:	65fb      	str	r3, [r7, #92]	@ 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800bb14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb16:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800bb1a:	0c1b      	lsrs	r3, r3, #16
 800bb1c:	65fb      	str	r3, [r7, #92]	@ 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800bb24:	fb02 f303 	mul.w	r3, r2, r3
 800bb28:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800bb2c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800bb30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d902      	bls.n	800bb3c <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800bb36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb38:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800bb3c:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d168      	bne.n	800bc16 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800bb4a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800bb54:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800bb58:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 800bb62:	68f8      	ldr	r0, [r7, #12]
 800bb64:	f7fe feb4 	bl	800a8d0 <VL53L0X_calc_timeout_mclks>
 800bb68:	6578      	str	r0, [r7, #84]	@ 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800bb70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 800bb7a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800bb7e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800bb82:	461a      	mov	r2, r3
 800bb84:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 800bb88:	68f8      	ldr	r0, [r7, #12]
 800bb8a:	f7fe fea1 	bl	800a8d0 <VL53L0X_calc_timeout_mclks>
 800bb8e:	64f8      	str	r0, [r7, #76]	@ 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800bb90:	2303      	movs	r3, #3
 800bb92:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		if (finalRangeVcselPCLKS == 8)
 800bb96:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800bb9a:	2b08      	cmp	r3, #8
 800bb9c:	d102      	bne.n	800bba4 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800bb9e:	2302      	movs	r3, #2
 800bba0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800bba4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bba6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bba8:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800bbaa:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800bbae:	fb02 f303 	mul.w	r3, r2, r3
 800bbb2:	02db      	lsls	r3, r3, #11
 800bbb4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800bbb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800bbbc:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800bbc0:	4a53      	ldr	r2, [pc, #332]	@ (800bd10 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800bbc2:	fba2 2303 	umull	r2, r3, r2, r3
 800bbc6:	099b      	lsrs	r3, r3, #6
 800bbc8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800bbcc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800bbd0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bbd2:	fb02 f303 	mul.w	r3, r2, r3
 800bbd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800bbda:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800bbde:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800bbe2:	4a4b      	ldr	r2, [pc, #300]	@ (800bd10 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800bbe4:	fba2 2303 	umull	r2, r3, r2, r3
 800bbe8:	099b      	lsrs	r3, r3, #6
 800bbea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	3380      	adds	r3, #128	@ 0x80
 800bbf2:	0a1b      	lsrs	r3, r3, #8
 800bbf4:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800bbf6:	693a      	ldr	r2, [r7, #16]
 800bbf8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800bbfc:	fb02 f303 	mul.w	r3, r2, r3
 800bc00:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800bc04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800bc08:	3380      	adds	r3, #128	@ 0x80
 800bc0a:	0a1b      	lsrs	r3, r3, #8
 800bc0c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	021b      	lsls	r3, r3, #8
 800bc14:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800bc16:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d002      	beq.n	800bc24 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800bc1e:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800bc22:	e15e      	b.n	800bee2 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800bc24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d10c      	bne.n	800bc44 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bc30:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800bc38:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
		*pDmax_mm = 0;
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	601a      	str	r2, [r3, #0]
 800bc42:	e14c      	b.n	800bede <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800bc44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d102      	bne.n	800bc52 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800bc52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bc56:	64bb      	str	r3, [r7, #72]	@ 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800bc58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bc5a:	041a      	lsls	r2, r3, #16
 800bc5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bc5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800bc66:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800bc6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d902      	bls.n	800bc76 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800bc70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bc72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800bc76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bc7a:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800bc7e:	fb02 f303 	mul.w	r3, r2, r3
 800bc82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800bc86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800bc8a:	4613      	mov	r3, r2
 800bc8c:	005b      	lsls	r3, r3, #1
 800bc8e:	4413      	add	r3, r2
 800bc90:	009b      	lsls	r3, r3, #2
 800bc92:	4618      	mov	r0, r3
 800bc94:	f7fe f87a 	bl	8009d8c <VL53L0X_isqrt>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	005b      	lsls	r3, r3, #1
 800bc9c:	647b      	str	r3, [r7, #68]	@ 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	891b      	ldrh	r3, [r3, #8]
 800bca2:	461a      	mov	r2, r3
 800bca4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800bca6:	fb02 f303 	mul.w	r3, r2, r3
 800bcaa:	643b      	str	r3, [r7, #64]	@ 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800bcac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bcae:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800bcb0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800bcb4:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800bcb6:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800bcb8:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800bcbc:	4a14      	ldr	r2, [pc, #80]	@ (800bd10 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800bcbe:	fba2 2303 	umull	r2, r3, r2, r3
 800bcc2:	099b      	lsrs	r3, r3, #6
 800bcc4:	63fb      	str	r3, [r7, #60]	@ 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800bcc6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bcc8:	041b      	lsls	r3, r3, #16
 800bcca:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800bcce:	4a10      	ldr	r2, [pc, #64]	@ (800bd10 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800bcd0:	fba2 2303 	umull	r2, r3, r2, r3
 800bcd4:	099b      	lsrs	r3, r3, #6
 800bcd6:	63bb      	str	r3, [r7, #56]	@ 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800bcd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcda:	021b      	lsls	r3, r3, #8
 800bcdc:	63fb      	str	r3, [r7, #60]	@ 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800bcde:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bce2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	bfb8      	it	lt
 800bcea:	425b      	neglt	r3, r3
 800bcec:	637b      	str	r3, [r7, #52]	@ 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800bcee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcf0:	021b      	lsls	r3, r3, #8
 800bcf2:	637b      	str	r3, [r7, #52]	@ 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	7e1b      	ldrb	r3, [r3, #24]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d00b      	beq.n	800bd14 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800bcfc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800bd00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bd04:	e033      	b.n	800bd6e <VL53L0X_calc_sigma_estimate+0x30e>
 800bd06:	bf00      	nop
 800bd08:	028f87ae 	.word	0x028f87ae
 800bd0c:	0006999a 	.word	0x0006999a
 800bd10:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800bd14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bd16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bd1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800bd22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd24:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 800bd28:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bd2c:	fb02 f303 	mul.w	r3, r2, r3
 800bd30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800bd34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800bd38:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bd3a:	4413      	add	r3, r2
 800bd3c:	0c1b      	lsrs	r3, r3, #16
 800bd3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800bd42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bd46:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800bd4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800bd4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bd52:	085b      	lsrs	r3, r3, #1
 800bd54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800bd58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bd5c:	fb03 f303 	mul.w	r3, r3, r3
 800bd60:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800bd64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bd68:	0b9b      	lsrs	r3, r3, #14
 800bd6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800bd6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bd72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bd74:	fb02 f303 	mul.w	r3, r2, r3
 800bd78:	633b      	str	r3, [r7, #48]	@ 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800bd7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd7c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800bd80:	0c1b      	lsrs	r3, r3, #16
 800bd82:	633b      	str	r3, [r7, #48]	@ 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800bd84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd86:	fb03 f303 	mul.w	r3, r3, r3
 800bd8a:	633b      	str	r3, [r7, #48]	@ 0x30

		sqr2 = sigmaEstimateP2;
 800bd8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bd90:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800bd92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd94:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800bd98:	0c1b      	lsrs	r3, r3, #16
 800bd9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800bd9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd9e:	fb03 f303 	mul.w	r3, r3, r3
 800bda2:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800bda4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bda6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bda8:	4413      	add	r3, r2
 800bdaa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800bdac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bdae:	f7fd ffed 	bl	8009d8c <VL53L0X_isqrt>
 800bdb2:	6278      	str	r0, [r7, #36]	@ 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800bdb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdb6:	041b      	lsls	r3, r3, #16
 800bdb8:	627b      	str	r3, [r7, #36]	@ 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800bdba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdbc:	3332      	adds	r3, #50	@ 0x32
 800bdbe:	4a4b      	ldr	r2, [pc, #300]	@ (800beec <VL53L0X_calc_sigma_estimate+0x48c>)
 800bdc0:	fba2 2303 	umull	r2, r3, r2, r3
 800bdc4:	095a      	lsrs	r2, r3, #5
 800bdc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bdc8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800bdd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bdd4:	f640 32b5 	movw	r2, #2997	@ 0xbb5
 800bdd8:	fb02 f303 	mul.w	r3, r2, r3
 800bddc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800bde0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bde4:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800bde8:	3308      	adds	r3, #8
 800bdea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		sigmaEstRtn		 /= 10000;
 800bdee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bdf2:	4a3f      	ldr	r2, [pc, #252]	@ (800bef0 <VL53L0X_calc_sigma_estimate+0x490>)
 800bdf4:	fba2 2303 	umull	r2, r3, r2, r3
 800bdf8:	0b5b      	lsrs	r3, r3, #13
 800bdfa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800bdfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800be02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800be04:	429a      	cmp	r2, r3
 800be06:	d902      	bls.n	800be0e <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800be08:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800be0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800be0e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800be12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800be16:	4413      	add	r3, r2
 800be18:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800be1c:	4a35      	ldr	r2, [pc, #212]	@ (800bef4 <VL53L0X_calc_sigma_estimate+0x494>)
 800be1e:	fba2 2303 	umull	r2, r3, r2, r3
 800be22:	099b      	lsrs	r3, r3, #6
 800be24:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800be26:	6a3b      	ldr	r3, [r7, #32]
 800be28:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800be2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800be2e:	441a      	add	r2, r3
 800be30:	6a3b      	ldr	r3, [r7, #32]
 800be32:	fbb2 f3f3 	udiv	r3, r2, r3
 800be36:	4618      	mov	r0, r3
 800be38:	f7fd ffa8 	bl	8009d8c <VL53L0X_isqrt>
 800be3c:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800be3e:	69fb      	ldr	r3, [r7, #28]
 800be40:	021b      	lsls	r3, r3, #8
 800be42:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800be44:	69fb      	ldr	r3, [r7, #28]
 800be46:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800be4a:	4a2a      	ldr	r2, [pc, #168]	@ (800bef4 <VL53L0X_calc_sigma_estimate+0x494>)
 800be4c:	fba2 2303 	umull	r2, r3, r2, r3
 800be50:	099b      	lsrs	r3, r3, #6
 800be52:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800be54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800be58:	fb03 f303 	mul.w	r3, r3, r3
 800be5c:	633b      	str	r3, [r7, #48]	@ 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800be5e:	69fb      	ldr	r3, [r7, #28]
 800be60:	fb03 f303 	mul.w	r3, r3, r3
 800be64:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800be66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be6a:	4413      	add	r3, r2
 800be6c:	4618      	mov	r0, r3
 800be6e:	f7fd ff8d 	bl	8009d8c <VL53L0X_isqrt>
 800be72:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800be74:	69bb      	ldr	r3, [r7, #24]
 800be76:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800be7a:	fb02 f303 	mul.w	r3, r2, r3
 800be7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800be82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800be84:	2b00      	cmp	r3, #0
 800be86:	d009      	beq.n	800be9c <VL53L0X_calc_sigma_estimate+0x43c>
 800be88:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d005      	beq.n	800be9c <VL53L0X_calc_sigma_estimate+0x43c>
 800be90:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800be94:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800be98:	429a      	cmp	r2, r3
 800be9a:	d903      	bls.n	800bea4 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800be9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bea0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800beaa:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681a      	ldr	r2, [r3, #0]
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
		Status = VL53L0X_calc_dmax(
 800beb6:	6939      	ldr	r1, [r7, #16]
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	9303      	str	r3, [sp, #12]
 800bebc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800bec0:	9302      	str	r3, [sp, #8]
 800bec2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800bec6:	9301      	str	r3, [sp, #4]
 800bec8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800beca:	9300      	str	r3, [sp, #0]
 800becc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bed0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bed2:	68f8      	ldr	r0, [r7, #12]
 800bed4:	f7ff fca8 	bl	800b828 <VL53L0X_calc_dmax>
 800bed8:	4603      	mov	r3, r0
 800beda:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bede:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	37c0      	adds	r7, #192	@ 0xc0
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}
 800beea:	bf00      	nop
 800beec:	51eb851f 	.word	0x51eb851f
 800bef0:	d1b71759 	.word	0xd1b71759
 800bef4:	10624dd3 	.word	0x10624dd3

0800bef8 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b090      	sub	sp, #64	@ 0x40
 800befc:	af00      	add	r7, sp, #0
 800befe:	60f8      	str	r0, [r7, #12]
 800bf00:	607a      	str	r2, [r7, #4]
 800bf02:	461a      	mov	r2, r3
 800bf04:	460b      	mov	r3, r1
 800bf06:	72fb      	strb	r3, [r7, #11]
 800bf08:	4613      	mov	r3, r2
 800bf0a:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800bf12:	2300      	movs	r3, #0
 800bf14:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	uint8_t SignalRefClipflag = 0;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800bf24:	2300      	movs	r3, #0
 800bf26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800bf30:	2300      	movs	r3, #0
 800bf32:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800bf36:	2300      	movs	r3, #0
 800bf38:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint16_t tmpWord = 0;
 800bf42:	2300      	movs	r3, #0
 800bf44:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800bf46:	2300      	movs	r3, #0
 800bf48:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800bf4a:	7afb      	ldrb	r3, [r7, #11]
 800bf4c:	10db      	asrs	r3, r3, #3
 800bf4e:	b2db      	uxtb	r3, r3
 800bf50:	f003 030f 	and.w	r3, r3, #15
 800bf54:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800bf58:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d017      	beq.n	800bf90 <VL53L0X_get_pal_range_status+0x98>
 800bf60:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800bf64:	2b05      	cmp	r3, #5
 800bf66:	d013      	beq.n	800bf90 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800bf68:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800bf6c:	2b07      	cmp	r3, #7
 800bf6e:	d00f      	beq.n	800bf90 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800bf70:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800bf74:	2b0c      	cmp	r3, #12
 800bf76:	d00b      	beq.n	800bf90 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800bf78:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800bf7c:	2b0d      	cmp	r3, #13
 800bf7e:	d007      	beq.n	800bf90 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800bf80:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800bf84:	2b0e      	cmp	r3, #14
 800bf86:	d003      	beq.n	800bf90 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800bf88:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800bf8c:	2b0f      	cmp	r3, #15
 800bf8e:	d103      	bne.n	800bf98 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800bf90:	2301      	movs	r3, #1
 800bf92:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800bf96:	e002      	b.n	800bf9e <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800bf9e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d109      	bne.n	800bfba <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800bfa6:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800bfaa:	461a      	mov	r2, r3
 800bfac:	2100      	movs	r1, #0
 800bfae:	68f8      	ldr	r0, [r7, #12]
 800bfb0:	f7fc f9fc 	bl	80083ac <VL53L0X_GetLimitCheckEnable>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800bfba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d02e      	beq.n	800c020 <VL53L0X_get_pal_range_status+0x128>
 800bfc2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d12a      	bne.n	800c020 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800bfca:	f107 0310 	add.w	r3, r7, #16
 800bfce:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800bfd2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800bfd4:	68f8      	ldr	r0, [r7, #12]
 800bfd6:	f7ff fd43 	bl	800ba60 <VL53L0X_calc_sigma_estimate>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800bfe0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d103      	bne.n	800bff0 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	b29a      	uxth	r2, r3
 800bfec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bfee:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800bff0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d113      	bne.n	800c020 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800bff8:	f107 0320 	add.w	r3, r7, #32
 800bffc:	461a      	mov	r2, r3
 800bffe:	2100      	movs	r1, #0
 800c000:	68f8      	ldr	r0, [r7, #12]
 800c002:	f7fc fa59 	bl	80084b8 <VL53L0X_GetLimitCheckValue>
 800c006:	4603      	mov	r3, r0
 800c008:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800c00c:	6a3b      	ldr	r3, [r7, #32]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d006      	beq.n	800c020 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800c012:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c014:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800c016:	429a      	cmp	r2, r3
 800c018:	d902      	bls.n	800c020 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800c01a:	2301      	movs	r3, #1
 800c01c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800c020:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c024:	2b00      	cmp	r3, #0
 800c026:	d109      	bne.n	800c03c <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c028:	f107 0329 	add.w	r3, r7, #41	@ 0x29
 800c02c:	461a      	mov	r2, r3
 800c02e:	2102      	movs	r1, #2
 800c030:	68f8      	ldr	r0, [r7, #12]
 800c032:	f7fc f9bb 	bl	80083ac <VL53L0X_GetLimitCheckEnable>
 800c036:	4603      	mov	r3, r0
 800c038:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800c03c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800c040:	2b00      	cmp	r3, #0
 800c042:	d044      	beq.n	800c0ce <VL53L0X_get_pal_range_status+0x1d6>
 800c044:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d140      	bne.n	800c0ce <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800c04c:	f107 031c 	add.w	r3, r7, #28
 800c050:	461a      	mov	r2, r3
 800c052:	2102      	movs	r1, #2
 800c054:	68f8      	ldr	r0, [r7, #12]
 800c056:	f7fc fa2f 	bl	80084b8 <VL53L0X_GetLimitCheckValue>
 800c05a:	4603      	mov	r3, r0
 800c05c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800c060:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c064:	2b00      	cmp	r3, #0
 800c066:	d107      	bne.n	800c078 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c068:	2201      	movs	r2, #1
 800c06a:	21ff      	movs	r1, #255	@ 0xff
 800c06c:	68f8      	ldr	r0, [r7, #12]
 800c06e:	f000 f9bb 	bl	800c3e8 <VL53L0X_WrByte>
 800c072:	4603      	mov	r3, r0
 800c074:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800c078:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d109      	bne.n	800c094 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800c080:	f107 0316 	add.w	r3, r7, #22
 800c084:	461a      	mov	r2, r3
 800c086:	21b6      	movs	r1, #182	@ 0xb6
 800c088:	68f8      	ldr	r0, [r7, #12]
 800c08a:	f000 fa59 	bl	800c540 <VL53L0X_RdWord>
 800c08e:	4603      	mov	r3, r0
 800c090:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800c094:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d107      	bne.n	800c0ac <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c09c:	2200      	movs	r2, #0
 800c09e:	21ff      	movs	r1, #255	@ 0xff
 800c0a0:	68f8      	ldr	r0, [r7, #12]
 800c0a2:	f000 f9a1 	bl	800c3e8 <VL53L0X_WrByte>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800c0ac:	8afb      	ldrh	r3, [r7, #22]
 800c0ae:	025b      	lsls	r3, r3, #9
 800c0b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c0b6:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148

		if ((SignalRefClipValue > 0) &&
 800c0ba:	69fb      	ldr	r3, [r7, #28]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d006      	beq.n	800c0ce <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800c0c0:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800c0c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d902      	bls.n	800c0ce <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800c0ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d109      	bne.n	800c0ea <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c0d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800c0da:	461a      	mov	r2, r3
 800c0dc:	2103      	movs	r1, #3
 800c0de:	68f8      	ldr	r0, [r7, #12]
 800c0e0:	f7fc f964 	bl	80083ac <VL53L0X_GetLimitCheckEnable>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800c0ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d023      	beq.n	800c13a <VL53L0X_get_pal_range_status+0x242>
 800c0f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d11f      	bne.n	800c13a <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800c0fa:	893b      	ldrh	r3, [r7, #8]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d102      	bne.n	800c106 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800c100:	2300      	movs	r3, #0
 800c102:	637b      	str	r3, [r7, #52]	@ 0x34
 800c104:	e005      	b.n	800c112 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	021a      	lsls	r2, r3, #8
 800c10a:	893b      	ldrh	r3, [r7, #8]
 800c10c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c110:	637b      	str	r3, [r7, #52]	@ 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800c112:	f107 0318 	add.w	r3, r7, #24
 800c116:	461a      	mov	r2, r3
 800c118:	2103      	movs	r1, #3
 800c11a:	68f8      	ldr	r0, [r7, #12]
 800c11c:	f7fc f9cc 	bl	80084b8 <VL53L0X_GetLimitCheckValue>
 800c120:	4603      	mov	r3, r0
 800c122:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800c126:	69bb      	ldr	r3, [r7, #24]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d006      	beq.n	800c13a <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800c12c:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800c12e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c130:	429a      	cmp	r2, r3
 800c132:	d202      	bcs.n	800c13a <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800c134:	2301      	movs	r3, #1
 800c136:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c13a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d14a      	bne.n	800c1d8 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800c142:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800c146:	2b01      	cmp	r3, #1
 800c148:	d103      	bne.n	800c152 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800c14a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c14c:	22ff      	movs	r2, #255	@ 0xff
 800c14e:	701a      	strb	r2, [r3, #0]
 800c150:	e042      	b.n	800c1d8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800c152:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800c156:	2b01      	cmp	r3, #1
 800c158:	d007      	beq.n	800c16a <VL53L0X_get_pal_range_status+0x272>
 800c15a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800c15e:	2b02      	cmp	r3, #2
 800c160:	d003      	beq.n	800c16a <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800c162:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800c166:	2b03      	cmp	r3, #3
 800c168:	d103      	bne.n	800c172 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800c16a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c16c:	2205      	movs	r2, #5
 800c16e:	701a      	strb	r2, [r3, #0]
 800c170:	e032      	b.n	800c1d8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800c172:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800c176:	2b06      	cmp	r3, #6
 800c178:	d003      	beq.n	800c182 <VL53L0X_get_pal_range_status+0x28a>
 800c17a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800c17e:	2b09      	cmp	r3, #9
 800c180:	d103      	bne.n	800c18a <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800c182:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c184:	2204      	movs	r2, #4
 800c186:	701a      	strb	r2, [r3, #0]
 800c188:	e026      	b.n	800c1d8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800c18a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800c18e:	2b08      	cmp	r3, #8
 800c190:	d007      	beq.n	800c1a2 <VL53L0X_get_pal_range_status+0x2aa>
 800c192:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800c196:	2b0a      	cmp	r3, #10
 800c198:	d003      	beq.n	800c1a2 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800c19a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800c19e:	2b01      	cmp	r3, #1
 800c1a0:	d103      	bne.n	800c1aa <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800c1a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1a4:	2203      	movs	r2, #3
 800c1a6:	701a      	strb	r2, [r3, #0]
 800c1a8:	e016      	b.n	800c1d8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800c1aa:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800c1ae:	2b04      	cmp	r3, #4
 800c1b0:	d003      	beq.n	800c1ba <VL53L0X_get_pal_range_status+0x2c2>
 800c1b2:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800c1b6:	2b01      	cmp	r3, #1
 800c1b8:	d103      	bne.n	800c1c2 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800c1ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1bc:	2202      	movs	r2, #2
 800c1be:	701a      	strb	r2, [r3, #0]
 800c1c0:	e00a      	b.n	800c1d8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800c1c2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d103      	bne.n	800c1d2 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800c1ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1cc:	2201      	movs	r2, #1
 800c1ce:	701a      	strb	r2, [r3, #0]
 800c1d0:	e002      	b.n	800c1d8 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800c1d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800c1d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d102      	bne.n	800c1e6 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800c1e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c1e6:	f107 032a 	add.w	r3, r7, #42	@ 0x2a
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	2101      	movs	r1, #1
 800c1ee:	68f8      	ldr	r0, [r7, #12]
 800c1f0:	f7fc f8dc 	bl	80083ac <VL53L0X_GetLimitCheckEnable>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800c1fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d14f      	bne.n	800c2a2 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800c202:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c206:	2b00      	cmp	r3, #0
 800c208:	d003      	beq.n	800c212 <VL53L0X_get_pal_range_status+0x31a>
 800c20a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800c20e:	2b01      	cmp	r3, #1
 800c210:	d103      	bne.n	800c21a <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800c212:	2301      	movs	r3, #1
 800c214:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800c218:	e002      	b.n	800c220 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800c21a:	2300      	movs	r3, #0
 800c21c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800c226:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800c22a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800c22e:	2b04      	cmp	r3, #4
 800c230:	d003      	beq.n	800c23a <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800c232:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800c236:	2b00      	cmp	r3, #0
 800c238:	d103      	bne.n	800c242 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800c23a:	2301      	movs	r3, #1
 800c23c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800c240:	e002      	b.n	800c248 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800c242:	2300      	movs	r3, #0
 800c244:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800c24e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800c252:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800c256:	2b00      	cmp	r3, #0
 800c258:	d003      	beq.n	800c262 <VL53L0X_get_pal_range_status+0x36a>
 800c25a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800c25e:	2b01      	cmp	r3, #1
 800c260:	d103      	bne.n	800c26a <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800c262:	2301      	movs	r3, #1
 800c264:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800c268:	e002      	b.n	800c270 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800c26a:	2300      	movs	r3, #0
 800c26c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800c276:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800c27a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d003      	beq.n	800c28a <VL53L0X_get_pal_range_status+0x392>
 800c282:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800c286:	2b01      	cmp	r3, #1
 800c288:	d103      	bne.n	800c292 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800c28a:	2301      	movs	r3, #1
 800c28c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800c290:	e002      	b.n	800c298 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800c292:	2300      	movs	r3, #0
 800c294:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800c29e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c2a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f

}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3740      	adds	r7, #64	@ 0x40
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}

0800c2ae <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800c2ae:	b580      	push	{r7, lr}
 800c2b0:	b088      	sub	sp, #32
 800c2b2:	af02      	add	r7, sp, #8
 800c2b4:	60f8      	str	r0, [r7, #12]
 800c2b6:	60b9      	str	r1, [r7, #8]
 800c2b8:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	330a      	adds	r3, #10
 800c2be:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 800c2cc:	4619      	mov	r1, r3
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	b29a      	uxth	r2, r3
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	9300      	str	r3, [sp, #0]
 800c2d6:	4613      	mov	r3, r2
 800c2d8:	68ba      	ldr	r2, [r7, #8]
 800c2da:	f7f7 fbb5 	bl	8003a48 <HAL_I2C_Master_Transmit>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800c2e2:	693b      	ldr	r3, [r7, #16]
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3718      	adds	r7, #24
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b088      	sub	sp, #32
 800c2f0:	af02      	add	r7, sp, #8
 800c2f2:	60f8      	str	r0, [r7, #12]
 800c2f4:	60b9      	str	r1, [r7, #8]
 800c2f6:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	330a      	adds	r3, #10
 800c2fc:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 800c30a:	f043 0301 	orr.w	r3, r3, #1
 800c30e:	b2db      	uxtb	r3, r3
 800c310:	4619      	mov	r1, r3
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	b29a      	uxth	r2, r3
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	9300      	str	r3, [sp, #0]
 800c31a:	4613      	mov	r3, r2
 800c31c:	68ba      	ldr	r2, [r7, #8]
 800c31e:	f7f7 fc91 	bl	8003c44 <HAL_I2C_Master_Receive>
 800c322:	4603      	mov	r3, r0
 800c324:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800c326:	693b      	ldr	r3, [r7, #16]
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3718      	adds	r7, #24
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}

0800c330 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800c330:	b580      	push	{r7, lr}
 800c332:	b086      	sub	sp, #24
 800c334:	af00      	add	r7, sp, #0
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	607a      	str	r2, [r7, #4]
 800c33a:	603b      	str	r3, [r7, #0]
 800c33c:	460b      	mov	r3, r1
 800c33e:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c340:	2300      	movs	r3, #0
 800c342:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	2b3f      	cmp	r3, #63	@ 0x3f
 800c348:	d902      	bls.n	800c350 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800c34a:	f06f 0303 	mvn.w	r3, #3
 800c34e:	e016      	b.n	800c37e <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800c350:	4a0d      	ldr	r2, [pc, #52]	@ (800c388 <VL53L0X_WriteMulti+0x58>)
 800c352:	7afb      	ldrb	r3, [r7, #11]
 800c354:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800c356:	683a      	ldr	r2, [r7, #0]
 800c358:	6879      	ldr	r1, [r7, #4]
 800c35a:	480c      	ldr	r0, [pc, #48]	@ (800c38c <VL53L0X_WriteMulti+0x5c>)
 800c35c:	f001 f8ad 	bl	800d4ba <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	3301      	adds	r3, #1
 800c364:	461a      	mov	r2, r3
 800c366:	4908      	ldr	r1, [pc, #32]	@ (800c388 <VL53L0X_WriteMulti+0x58>)
 800c368:	68f8      	ldr	r0, [r7, #12]
 800c36a:	f7ff ffa0 	bl	800c2ae <_I2CWrite>
 800c36e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800c370:	693b      	ldr	r3, [r7, #16]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d001      	beq.n	800c37a <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c376:	23ec      	movs	r3, #236	@ 0xec
 800c378:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800c37a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3718      	adds	r7, #24
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
 800c386:	bf00      	nop
 800c388:	200008a8 	.word	0x200008a8
 800c38c:	200008a9 	.word	0x200008a9

0800c390 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800c390:	b580      	push	{r7, lr}
 800c392:	b086      	sub	sp, #24
 800c394:	af00      	add	r7, sp, #0
 800c396:	60f8      	str	r0, [r7, #12]
 800c398:	607a      	str	r2, [r7, #4]
 800c39a:	603b      	str	r3, [r7, #0]
 800c39c:	460b      	mov	r3, r1
 800c39e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800c3a4:	f107 030b 	add.w	r3, r7, #11
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	4619      	mov	r1, r3
 800c3ac:	68f8      	ldr	r0, [r7, #12]
 800c3ae:	f7ff ff7e 	bl	800c2ae <_I2CWrite>
 800c3b2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d002      	beq.n	800c3c0 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c3ba:	23ec      	movs	r3, #236	@ 0xec
 800c3bc:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c3be:	e00c      	b.n	800c3da <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800c3c0:	683a      	ldr	r2, [r7, #0]
 800c3c2:	6879      	ldr	r1, [r7, #4]
 800c3c4:	68f8      	ldr	r0, [r7, #12]
 800c3c6:	f7ff ff91 	bl	800c2ec <_I2CRead>
 800c3ca:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d002      	beq.n	800c3d8 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c3d2:	23ec      	movs	r3, #236	@ 0xec
 800c3d4:	75fb      	strb	r3, [r7, #23]
 800c3d6:	e000      	b.n	800c3da <VL53L0X_ReadMulti+0x4a>
    }
done:
 800c3d8:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800c3da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3718      	adds	r7, #24
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
	...

0800c3e8 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b084      	sub	sp, #16
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	460b      	mov	r3, r1
 800c3f2:	70fb      	strb	r3, [r7, #3]
 800c3f4:	4613      	mov	r3, r2
 800c3f6:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800c3fc:	4a0b      	ldr	r2, [pc, #44]	@ (800c42c <VL53L0X_WrByte+0x44>)
 800c3fe:	78fb      	ldrb	r3, [r7, #3]
 800c400:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800c402:	4a0a      	ldr	r2, [pc, #40]	@ (800c42c <VL53L0X_WrByte+0x44>)
 800c404:	78bb      	ldrb	r3, [r7, #2]
 800c406:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800c408:	2202      	movs	r2, #2
 800c40a:	4908      	ldr	r1, [pc, #32]	@ (800c42c <VL53L0X_WrByte+0x44>)
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f7ff ff4e 	bl	800c2ae <_I2CWrite>
 800c412:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d001      	beq.n	800c41e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c41a:	23ec      	movs	r3, #236	@ 0xec
 800c41c:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800c41e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c422:	4618      	mov	r0, r3
 800c424:	3710      	adds	r7, #16
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}
 800c42a:	bf00      	nop
 800c42c:	200008a8 	.word	0x200008a8

0800c430 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800c430:	b580      	push	{r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	460b      	mov	r3, r1
 800c43a:	70fb      	strb	r3, [r7, #3]
 800c43c:	4613      	mov	r3, r2
 800c43e:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c440:	2300      	movs	r3, #0
 800c442:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800c444:	4a0e      	ldr	r2, [pc, #56]	@ (800c480 <VL53L0X_WrWord+0x50>)
 800c446:	78fb      	ldrb	r3, [r7, #3]
 800c448:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800c44a:	883b      	ldrh	r3, [r7, #0]
 800c44c:	0a1b      	lsrs	r3, r3, #8
 800c44e:	b29b      	uxth	r3, r3
 800c450:	b2da      	uxtb	r2, r3
 800c452:	4b0b      	ldr	r3, [pc, #44]	@ (800c480 <VL53L0X_WrWord+0x50>)
 800c454:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800c456:	883b      	ldrh	r3, [r7, #0]
 800c458:	b2da      	uxtb	r2, r3
 800c45a:	4b09      	ldr	r3, [pc, #36]	@ (800c480 <VL53L0X_WrWord+0x50>)
 800c45c:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800c45e:	2203      	movs	r2, #3
 800c460:	4907      	ldr	r1, [pc, #28]	@ (800c480 <VL53L0X_WrWord+0x50>)
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f7ff ff23 	bl	800c2ae <_I2CWrite>
 800c468:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d001      	beq.n	800c474 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c470:	23ec      	movs	r3, #236	@ 0xec
 800c472:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800c474:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c478:	4618      	mov	r0, r3
 800c47a:	3710      	adds	r7, #16
 800c47c:	46bd      	mov	sp, r7
 800c47e:	bd80      	pop	{r7, pc}
 800c480:	200008a8 	.word	0x200008a8

0800c484 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800c484:	b580      	push	{r7, lr}
 800c486:	b084      	sub	sp, #16
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	4608      	mov	r0, r1
 800c48e:	4611      	mov	r1, r2
 800c490:	461a      	mov	r2, r3
 800c492:	4603      	mov	r3, r0
 800c494:	70fb      	strb	r3, [r7, #3]
 800c496:	460b      	mov	r3, r1
 800c498:	70bb      	strb	r3, [r7, #2]
 800c49a:	4613      	mov	r3, r2
 800c49c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800c4a2:	f107 020e 	add.w	r2, r7, #14
 800c4a6:	78fb      	ldrb	r3, [r7, #3]
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 f81e 	bl	800c4ec <VL53L0X_RdByte>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800c4b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d110      	bne.n	800c4de <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800c4bc:	7bba      	ldrb	r2, [r7, #14]
 800c4be:	78bb      	ldrb	r3, [r7, #2]
 800c4c0:	4013      	ands	r3, r2
 800c4c2:	b2da      	uxtb	r2, r3
 800c4c4:	787b      	ldrb	r3, [r7, #1]
 800c4c6:	4313      	orrs	r3, r2
 800c4c8:	b2db      	uxtb	r3, r3
 800c4ca:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800c4cc:	7bba      	ldrb	r2, [r7, #14]
 800c4ce:	78fb      	ldrb	r3, [r7, #3]
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f7ff ff88 	bl	800c3e8 <VL53L0X_WrByte>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	73fb      	strb	r3, [r7, #15]
 800c4dc:	e000      	b.n	800c4e0 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800c4de:	bf00      	nop
done:
    return Status;
 800c4e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3710      	adds	r7, #16
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}

0800c4ec <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b086      	sub	sp, #24
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	60f8      	str	r0, [r7, #12]
 800c4f4:	460b      	mov	r3, r1
 800c4f6:	607a      	str	r2, [r7, #4]
 800c4f8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800c4fe:	f107 030b 	add.w	r3, r7, #11
 800c502:	2201      	movs	r2, #1
 800c504:	4619      	mov	r1, r3
 800c506:	68f8      	ldr	r0, [r7, #12]
 800c508:	f7ff fed1 	bl	800c2ae <_I2CWrite>
 800c50c:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800c50e:	693b      	ldr	r3, [r7, #16]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d002      	beq.n	800c51a <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c514:	23ec      	movs	r3, #236	@ 0xec
 800c516:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c518:	e00c      	b.n	800c534 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800c51a:	2201      	movs	r2, #1
 800c51c:	6879      	ldr	r1, [r7, #4]
 800c51e:	68f8      	ldr	r0, [r7, #12]
 800c520:	f7ff fee4 	bl	800c2ec <_I2CRead>
 800c524:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d002      	beq.n	800c532 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c52c:	23ec      	movs	r3, #236	@ 0xec
 800c52e:	75fb      	strb	r3, [r7, #23]
 800c530:	e000      	b.n	800c534 <VL53L0X_RdByte+0x48>
    }
done:
 800c532:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800c534:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3718      	adds	r7, #24
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}

0800c540 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800c540:	b580      	push	{r7, lr}
 800c542:	b086      	sub	sp, #24
 800c544:	af00      	add	r7, sp, #0
 800c546:	60f8      	str	r0, [r7, #12]
 800c548:	460b      	mov	r3, r1
 800c54a:	607a      	str	r2, [r7, #4]
 800c54c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c54e:	2300      	movs	r3, #0
 800c550:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800c552:	f107 030b 	add.w	r3, r7, #11
 800c556:	2201      	movs	r2, #1
 800c558:	4619      	mov	r1, r3
 800c55a:	68f8      	ldr	r0, [r7, #12]
 800c55c:	f7ff fea7 	bl	800c2ae <_I2CWrite>
 800c560:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800c562:	693b      	ldr	r3, [r7, #16]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d002      	beq.n	800c56e <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c568:	23ec      	movs	r3, #236	@ 0xec
 800c56a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c56c:	e015      	b.n	800c59a <VL53L0X_RdWord+0x5a>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800c56e:	2202      	movs	r2, #2
 800c570:	490d      	ldr	r1, [pc, #52]	@ (800c5a8 <VL53L0X_RdWord+0x68>)
 800c572:	68f8      	ldr	r0, [r7, #12]
 800c574:	f7ff feba 	bl	800c2ec <_I2CRead>
 800c578:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d002      	beq.n	800c586 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c580:	23ec      	movs	r3, #236	@ 0xec
 800c582:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c584:	e009      	b.n	800c59a <VL53L0X_RdWord+0x5a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800c586:	4b08      	ldr	r3, [pc, #32]	@ (800c5a8 <VL53L0X_RdWord+0x68>)
 800c588:	781b      	ldrb	r3, [r3, #0]
 800c58a:	021b      	lsls	r3, r3, #8
 800c58c:	b29b      	uxth	r3, r3
 800c58e:	4a06      	ldr	r2, [pc, #24]	@ (800c5a8 <VL53L0X_RdWord+0x68>)
 800c590:	7852      	ldrb	r2, [r2, #1]
 800c592:	4413      	add	r3, r2
 800c594:	b29a      	uxth	r2, r3
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800c59a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c59e:	4618      	mov	r0, r3
 800c5a0:	3718      	adds	r7, #24
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}
 800c5a6:	bf00      	nop
 800c5a8:	200008a8 	.word	0x200008a8

0800c5ac <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b086      	sub	sp, #24
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	60f8      	str	r0, [r7, #12]
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	607a      	str	r2, [r7, #4]
 800c5b8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800c5be:	f107 030b 	add.w	r3, r7, #11
 800c5c2:	2201      	movs	r2, #1
 800c5c4:	4619      	mov	r1, r3
 800c5c6:	68f8      	ldr	r0, [r7, #12]
 800c5c8:	f7ff fe71 	bl	800c2ae <_I2CWrite>
 800c5cc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d002      	beq.n	800c5da <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c5d4:	23ec      	movs	r3, #236	@ 0xec
 800c5d6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c5d8:	e01b      	b.n	800c612 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800c5da:	2204      	movs	r2, #4
 800c5dc:	4910      	ldr	r1, [pc, #64]	@ (800c620 <VL53L0X_RdDWord+0x74>)
 800c5de:	68f8      	ldr	r0, [r7, #12]
 800c5e0:	f7ff fe84 	bl	800c2ec <_I2CRead>
 800c5e4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d002      	beq.n	800c5f2 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c5ec:	23ec      	movs	r3, #236	@ 0xec
 800c5ee:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c5f0:	e00f      	b.n	800c612 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800c5f2:	4b0b      	ldr	r3, [pc, #44]	@ (800c620 <VL53L0X_RdDWord+0x74>)
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	061a      	lsls	r2, r3, #24
 800c5f8:	4b09      	ldr	r3, [pc, #36]	@ (800c620 <VL53L0X_RdDWord+0x74>)
 800c5fa:	785b      	ldrb	r3, [r3, #1]
 800c5fc:	041b      	lsls	r3, r3, #16
 800c5fe:	441a      	add	r2, r3
 800c600:	4b07      	ldr	r3, [pc, #28]	@ (800c620 <VL53L0X_RdDWord+0x74>)
 800c602:	789b      	ldrb	r3, [r3, #2]
 800c604:	021b      	lsls	r3, r3, #8
 800c606:	4413      	add	r3, r2
 800c608:	4a05      	ldr	r2, [pc, #20]	@ (800c620 <VL53L0X_RdDWord+0x74>)
 800c60a:	78d2      	ldrb	r2, [r2, #3]
 800c60c:	441a      	add	r2, r3
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800c612:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c616:	4618      	mov	r0, r3
 800c618:	3718      	adds	r7, #24
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}
 800c61e:	bf00      	nop
 800c620:	200008a8 	.word	0x200008a8

0800c624 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800c624:	b580      	push	{r7, lr}
 800c626:	b084      	sub	sp, #16
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800c62c:	2300      	movs	r3, #0
 800c62e:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800c630:	2002      	movs	r0, #2
 800c632:	f7f6 fda7 	bl	8003184 <HAL_Delay>
    return status;
 800c636:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3710      	adds	r7, #16
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}

0800c642 <_ZdlPvj>:
 800c642:	f000 b811 	b.w	800c668 <_ZdlPv>

0800c646 <_Znwj>:
 800c646:	2801      	cmp	r0, #1
 800c648:	bf38      	it	cc
 800c64a:	2001      	movcc	r0, #1
 800c64c:	b510      	push	{r4, lr}
 800c64e:	4604      	mov	r4, r0
 800c650:	4620      	mov	r0, r4
 800c652:	f000 f81b 	bl	800c68c <malloc>
 800c656:	b100      	cbz	r0, 800c65a <_Znwj+0x14>
 800c658:	bd10      	pop	{r4, pc}
 800c65a:	f000 f807 	bl	800c66c <_ZSt15get_new_handlerv>
 800c65e:	b908      	cbnz	r0, 800c664 <_Znwj+0x1e>
 800c660:	f000 f80c 	bl	800c67c <abort>
 800c664:	4780      	blx	r0
 800c666:	e7f3      	b.n	800c650 <_Znwj+0xa>

0800c668 <_ZdlPv>:
 800c668:	f000 b818 	b.w	800c69c <free>

0800c66c <_ZSt15get_new_handlerv>:
 800c66c:	4b02      	ldr	r3, [pc, #8]	@ (800c678 <_ZSt15get_new_handlerv+0xc>)
 800c66e:	6818      	ldr	r0, [r3, #0]
 800c670:	f3bf 8f5b 	dmb	ish
 800c674:	4770      	bx	lr
 800c676:	bf00      	nop
 800c678:	200008e8 	.word	0x200008e8

0800c67c <abort>:
 800c67c:	b508      	push	{r3, lr}
 800c67e:	2006      	movs	r0, #6
 800c680:	f000 fe70 	bl	800d364 <raise>
 800c684:	2001      	movs	r0, #1
 800c686:	f7f6 fc21 	bl	8002ecc <_exit>
	...

0800c68c <malloc>:
 800c68c:	4b02      	ldr	r3, [pc, #8]	@ (800c698 <malloc+0xc>)
 800c68e:	4601      	mov	r1, r0
 800c690:	6818      	ldr	r0, [r3, #0]
 800c692:	f000 b82d 	b.w	800c6f0 <_malloc_r>
 800c696:	bf00      	nop
 800c698:	200002d8 	.word	0x200002d8

0800c69c <free>:
 800c69c:	4b02      	ldr	r3, [pc, #8]	@ (800c6a8 <free+0xc>)
 800c69e:	4601      	mov	r1, r0
 800c6a0:	6818      	ldr	r0, [r3, #0]
 800c6a2:	f001 bd65 	b.w	800e170 <_free_r>
 800c6a6:	bf00      	nop
 800c6a8:	200002d8 	.word	0x200002d8

0800c6ac <sbrk_aligned>:
 800c6ac:	b570      	push	{r4, r5, r6, lr}
 800c6ae:	4e0f      	ldr	r6, [pc, #60]	@ (800c6ec <sbrk_aligned+0x40>)
 800c6b0:	460c      	mov	r4, r1
 800c6b2:	6831      	ldr	r1, [r6, #0]
 800c6b4:	4605      	mov	r5, r0
 800c6b6:	b911      	cbnz	r1, 800c6be <sbrk_aligned+0x12>
 800c6b8:	f000 fea8 	bl	800d40c <_sbrk_r>
 800c6bc:	6030      	str	r0, [r6, #0]
 800c6be:	4621      	mov	r1, r4
 800c6c0:	4628      	mov	r0, r5
 800c6c2:	f000 fea3 	bl	800d40c <_sbrk_r>
 800c6c6:	1c43      	adds	r3, r0, #1
 800c6c8:	d103      	bne.n	800c6d2 <sbrk_aligned+0x26>
 800c6ca:	f04f 34ff 	mov.w	r4, #4294967295
 800c6ce:	4620      	mov	r0, r4
 800c6d0:	bd70      	pop	{r4, r5, r6, pc}
 800c6d2:	1cc4      	adds	r4, r0, #3
 800c6d4:	f024 0403 	bic.w	r4, r4, #3
 800c6d8:	42a0      	cmp	r0, r4
 800c6da:	d0f8      	beq.n	800c6ce <sbrk_aligned+0x22>
 800c6dc:	1a21      	subs	r1, r4, r0
 800c6de:	4628      	mov	r0, r5
 800c6e0:	f000 fe94 	bl	800d40c <_sbrk_r>
 800c6e4:	3001      	adds	r0, #1
 800c6e6:	d1f2      	bne.n	800c6ce <sbrk_aligned+0x22>
 800c6e8:	e7ef      	b.n	800c6ca <sbrk_aligned+0x1e>
 800c6ea:	bf00      	nop
 800c6ec:	200008ec 	.word	0x200008ec

0800c6f0 <_malloc_r>:
 800c6f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6f4:	1ccd      	adds	r5, r1, #3
 800c6f6:	f025 0503 	bic.w	r5, r5, #3
 800c6fa:	3508      	adds	r5, #8
 800c6fc:	2d0c      	cmp	r5, #12
 800c6fe:	bf38      	it	cc
 800c700:	250c      	movcc	r5, #12
 800c702:	2d00      	cmp	r5, #0
 800c704:	4606      	mov	r6, r0
 800c706:	db01      	blt.n	800c70c <_malloc_r+0x1c>
 800c708:	42a9      	cmp	r1, r5
 800c70a:	d904      	bls.n	800c716 <_malloc_r+0x26>
 800c70c:	230c      	movs	r3, #12
 800c70e:	6033      	str	r3, [r6, #0]
 800c710:	2000      	movs	r0, #0
 800c712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c716:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c7ec <_malloc_r+0xfc>
 800c71a:	f000 f869 	bl	800c7f0 <__malloc_lock>
 800c71e:	f8d8 3000 	ldr.w	r3, [r8]
 800c722:	461c      	mov	r4, r3
 800c724:	bb44      	cbnz	r4, 800c778 <_malloc_r+0x88>
 800c726:	4629      	mov	r1, r5
 800c728:	4630      	mov	r0, r6
 800c72a:	f7ff ffbf 	bl	800c6ac <sbrk_aligned>
 800c72e:	1c43      	adds	r3, r0, #1
 800c730:	4604      	mov	r4, r0
 800c732:	d158      	bne.n	800c7e6 <_malloc_r+0xf6>
 800c734:	f8d8 4000 	ldr.w	r4, [r8]
 800c738:	4627      	mov	r7, r4
 800c73a:	2f00      	cmp	r7, #0
 800c73c:	d143      	bne.n	800c7c6 <_malloc_r+0xd6>
 800c73e:	2c00      	cmp	r4, #0
 800c740:	d04b      	beq.n	800c7da <_malloc_r+0xea>
 800c742:	6823      	ldr	r3, [r4, #0]
 800c744:	4639      	mov	r1, r7
 800c746:	4630      	mov	r0, r6
 800c748:	eb04 0903 	add.w	r9, r4, r3
 800c74c:	f000 fe5e 	bl	800d40c <_sbrk_r>
 800c750:	4581      	cmp	r9, r0
 800c752:	d142      	bne.n	800c7da <_malloc_r+0xea>
 800c754:	6821      	ldr	r1, [r4, #0]
 800c756:	1a6d      	subs	r5, r5, r1
 800c758:	4629      	mov	r1, r5
 800c75a:	4630      	mov	r0, r6
 800c75c:	f7ff ffa6 	bl	800c6ac <sbrk_aligned>
 800c760:	3001      	adds	r0, #1
 800c762:	d03a      	beq.n	800c7da <_malloc_r+0xea>
 800c764:	6823      	ldr	r3, [r4, #0]
 800c766:	442b      	add	r3, r5
 800c768:	6023      	str	r3, [r4, #0]
 800c76a:	f8d8 3000 	ldr.w	r3, [r8]
 800c76e:	685a      	ldr	r2, [r3, #4]
 800c770:	bb62      	cbnz	r2, 800c7cc <_malloc_r+0xdc>
 800c772:	f8c8 7000 	str.w	r7, [r8]
 800c776:	e00f      	b.n	800c798 <_malloc_r+0xa8>
 800c778:	6822      	ldr	r2, [r4, #0]
 800c77a:	1b52      	subs	r2, r2, r5
 800c77c:	d420      	bmi.n	800c7c0 <_malloc_r+0xd0>
 800c77e:	2a0b      	cmp	r2, #11
 800c780:	d917      	bls.n	800c7b2 <_malloc_r+0xc2>
 800c782:	1961      	adds	r1, r4, r5
 800c784:	42a3      	cmp	r3, r4
 800c786:	6025      	str	r5, [r4, #0]
 800c788:	bf18      	it	ne
 800c78a:	6059      	strne	r1, [r3, #4]
 800c78c:	6863      	ldr	r3, [r4, #4]
 800c78e:	bf08      	it	eq
 800c790:	f8c8 1000 	streq.w	r1, [r8]
 800c794:	5162      	str	r2, [r4, r5]
 800c796:	604b      	str	r3, [r1, #4]
 800c798:	4630      	mov	r0, r6
 800c79a:	f000 f82f 	bl	800c7fc <__malloc_unlock>
 800c79e:	f104 000b 	add.w	r0, r4, #11
 800c7a2:	1d23      	adds	r3, r4, #4
 800c7a4:	f020 0007 	bic.w	r0, r0, #7
 800c7a8:	1ac2      	subs	r2, r0, r3
 800c7aa:	bf1c      	itt	ne
 800c7ac:	1a1b      	subne	r3, r3, r0
 800c7ae:	50a3      	strne	r3, [r4, r2]
 800c7b0:	e7af      	b.n	800c712 <_malloc_r+0x22>
 800c7b2:	6862      	ldr	r2, [r4, #4]
 800c7b4:	42a3      	cmp	r3, r4
 800c7b6:	bf0c      	ite	eq
 800c7b8:	f8c8 2000 	streq.w	r2, [r8]
 800c7bc:	605a      	strne	r2, [r3, #4]
 800c7be:	e7eb      	b.n	800c798 <_malloc_r+0xa8>
 800c7c0:	4623      	mov	r3, r4
 800c7c2:	6864      	ldr	r4, [r4, #4]
 800c7c4:	e7ae      	b.n	800c724 <_malloc_r+0x34>
 800c7c6:	463c      	mov	r4, r7
 800c7c8:	687f      	ldr	r7, [r7, #4]
 800c7ca:	e7b6      	b.n	800c73a <_malloc_r+0x4a>
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	42a3      	cmp	r3, r4
 800c7d2:	d1fb      	bne.n	800c7cc <_malloc_r+0xdc>
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	6053      	str	r3, [r2, #4]
 800c7d8:	e7de      	b.n	800c798 <_malloc_r+0xa8>
 800c7da:	230c      	movs	r3, #12
 800c7dc:	6033      	str	r3, [r6, #0]
 800c7de:	4630      	mov	r0, r6
 800c7e0:	f000 f80c 	bl	800c7fc <__malloc_unlock>
 800c7e4:	e794      	b.n	800c710 <_malloc_r+0x20>
 800c7e6:	6005      	str	r5, [r0, #0]
 800c7e8:	e7d6      	b.n	800c798 <_malloc_r+0xa8>
 800c7ea:	bf00      	nop
 800c7ec:	200008f0 	.word	0x200008f0

0800c7f0 <__malloc_lock>:
 800c7f0:	4801      	ldr	r0, [pc, #4]	@ (800c7f8 <__malloc_lock+0x8>)
 800c7f2:	f000 be58 	b.w	800d4a6 <__retarget_lock_acquire_recursive>
 800c7f6:	bf00      	nop
 800c7f8:	20000a34 	.word	0x20000a34

0800c7fc <__malloc_unlock>:
 800c7fc:	4801      	ldr	r0, [pc, #4]	@ (800c804 <__malloc_unlock+0x8>)
 800c7fe:	f000 be53 	b.w	800d4a8 <__retarget_lock_release_recursive>
 800c802:	bf00      	nop
 800c804:	20000a34 	.word	0x20000a34

0800c808 <__cvt>:
 800c808:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c80c:	ec57 6b10 	vmov	r6, r7, d0
 800c810:	2f00      	cmp	r7, #0
 800c812:	460c      	mov	r4, r1
 800c814:	4619      	mov	r1, r3
 800c816:	463b      	mov	r3, r7
 800c818:	bfbb      	ittet	lt
 800c81a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c81e:	461f      	movlt	r7, r3
 800c820:	2300      	movge	r3, #0
 800c822:	232d      	movlt	r3, #45	@ 0x2d
 800c824:	700b      	strb	r3, [r1, #0]
 800c826:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c828:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c82c:	4691      	mov	r9, r2
 800c82e:	f023 0820 	bic.w	r8, r3, #32
 800c832:	bfbc      	itt	lt
 800c834:	4632      	movlt	r2, r6
 800c836:	4616      	movlt	r6, r2
 800c838:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c83c:	d005      	beq.n	800c84a <__cvt+0x42>
 800c83e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c842:	d100      	bne.n	800c846 <__cvt+0x3e>
 800c844:	3401      	adds	r4, #1
 800c846:	2102      	movs	r1, #2
 800c848:	e000      	b.n	800c84c <__cvt+0x44>
 800c84a:	2103      	movs	r1, #3
 800c84c:	ab03      	add	r3, sp, #12
 800c84e:	9301      	str	r3, [sp, #4]
 800c850:	ab02      	add	r3, sp, #8
 800c852:	9300      	str	r3, [sp, #0]
 800c854:	ec47 6b10 	vmov	d0, r6, r7
 800c858:	4653      	mov	r3, sl
 800c85a:	4622      	mov	r2, r4
 800c85c:	f000 fec4 	bl	800d5e8 <_dtoa_r>
 800c860:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c864:	4605      	mov	r5, r0
 800c866:	d119      	bne.n	800c89c <__cvt+0x94>
 800c868:	f019 0f01 	tst.w	r9, #1
 800c86c:	d00e      	beq.n	800c88c <__cvt+0x84>
 800c86e:	eb00 0904 	add.w	r9, r0, r4
 800c872:	2200      	movs	r2, #0
 800c874:	2300      	movs	r3, #0
 800c876:	4630      	mov	r0, r6
 800c878:	4639      	mov	r1, r7
 800c87a:	f7f4 f92d 	bl	8000ad8 <__aeabi_dcmpeq>
 800c87e:	b108      	cbz	r0, 800c884 <__cvt+0x7c>
 800c880:	f8cd 900c 	str.w	r9, [sp, #12]
 800c884:	2230      	movs	r2, #48	@ 0x30
 800c886:	9b03      	ldr	r3, [sp, #12]
 800c888:	454b      	cmp	r3, r9
 800c88a:	d31e      	bcc.n	800c8ca <__cvt+0xc2>
 800c88c:	9b03      	ldr	r3, [sp, #12]
 800c88e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c890:	1b5b      	subs	r3, r3, r5
 800c892:	4628      	mov	r0, r5
 800c894:	6013      	str	r3, [r2, #0]
 800c896:	b004      	add	sp, #16
 800c898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c89c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c8a0:	eb00 0904 	add.w	r9, r0, r4
 800c8a4:	d1e5      	bne.n	800c872 <__cvt+0x6a>
 800c8a6:	7803      	ldrb	r3, [r0, #0]
 800c8a8:	2b30      	cmp	r3, #48	@ 0x30
 800c8aa:	d10a      	bne.n	800c8c2 <__cvt+0xba>
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	4630      	mov	r0, r6
 800c8b2:	4639      	mov	r1, r7
 800c8b4:	f7f4 f910 	bl	8000ad8 <__aeabi_dcmpeq>
 800c8b8:	b918      	cbnz	r0, 800c8c2 <__cvt+0xba>
 800c8ba:	f1c4 0401 	rsb	r4, r4, #1
 800c8be:	f8ca 4000 	str.w	r4, [sl]
 800c8c2:	f8da 3000 	ldr.w	r3, [sl]
 800c8c6:	4499      	add	r9, r3
 800c8c8:	e7d3      	b.n	800c872 <__cvt+0x6a>
 800c8ca:	1c59      	adds	r1, r3, #1
 800c8cc:	9103      	str	r1, [sp, #12]
 800c8ce:	701a      	strb	r2, [r3, #0]
 800c8d0:	e7d9      	b.n	800c886 <__cvt+0x7e>

0800c8d2 <__exponent>:
 800c8d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8d4:	2900      	cmp	r1, #0
 800c8d6:	bfba      	itte	lt
 800c8d8:	4249      	neglt	r1, r1
 800c8da:	232d      	movlt	r3, #45	@ 0x2d
 800c8dc:	232b      	movge	r3, #43	@ 0x2b
 800c8de:	2909      	cmp	r1, #9
 800c8e0:	7002      	strb	r2, [r0, #0]
 800c8e2:	7043      	strb	r3, [r0, #1]
 800c8e4:	dd29      	ble.n	800c93a <__exponent+0x68>
 800c8e6:	f10d 0307 	add.w	r3, sp, #7
 800c8ea:	461d      	mov	r5, r3
 800c8ec:	270a      	movs	r7, #10
 800c8ee:	461a      	mov	r2, r3
 800c8f0:	fbb1 f6f7 	udiv	r6, r1, r7
 800c8f4:	fb07 1416 	mls	r4, r7, r6, r1
 800c8f8:	3430      	adds	r4, #48	@ 0x30
 800c8fa:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c8fe:	460c      	mov	r4, r1
 800c900:	2c63      	cmp	r4, #99	@ 0x63
 800c902:	f103 33ff 	add.w	r3, r3, #4294967295
 800c906:	4631      	mov	r1, r6
 800c908:	dcf1      	bgt.n	800c8ee <__exponent+0x1c>
 800c90a:	3130      	adds	r1, #48	@ 0x30
 800c90c:	1e94      	subs	r4, r2, #2
 800c90e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c912:	1c41      	adds	r1, r0, #1
 800c914:	4623      	mov	r3, r4
 800c916:	42ab      	cmp	r3, r5
 800c918:	d30a      	bcc.n	800c930 <__exponent+0x5e>
 800c91a:	f10d 0309 	add.w	r3, sp, #9
 800c91e:	1a9b      	subs	r3, r3, r2
 800c920:	42ac      	cmp	r4, r5
 800c922:	bf88      	it	hi
 800c924:	2300      	movhi	r3, #0
 800c926:	3302      	adds	r3, #2
 800c928:	4403      	add	r3, r0
 800c92a:	1a18      	subs	r0, r3, r0
 800c92c:	b003      	add	sp, #12
 800c92e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c930:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c934:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c938:	e7ed      	b.n	800c916 <__exponent+0x44>
 800c93a:	2330      	movs	r3, #48	@ 0x30
 800c93c:	3130      	adds	r1, #48	@ 0x30
 800c93e:	7083      	strb	r3, [r0, #2]
 800c940:	70c1      	strb	r1, [r0, #3]
 800c942:	1d03      	adds	r3, r0, #4
 800c944:	e7f1      	b.n	800c92a <__exponent+0x58>
	...

0800c948 <_printf_float>:
 800c948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c94c:	b08d      	sub	sp, #52	@ 0x34
 800c94e:	460c      	mov	r4, r1
 800c950:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c954:	4616      	mov	r6, r2
 800c956:	461f      	mov	r7, r3
 800c958:	4605      	mov	r5, r0
 800c95a:	f000 fd0b 	bl	800d374 <_localeconv_r>
 800c95e:	6803      	ldr	r3, [r0, #0]
 800c960:	9304      	str	r3, [sp, #16]
 800c962:	4618      	mov	r0, r3
 800c964:	f7f3 fc8c 	bl	8000280 <strlen>
 800c968:	2300      	movs	r3, #0
 800c96a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c96c:	f8d8 3000 	ldr.w	r3, [r8]
 800c970:	9005      	str	r0, [sp, #20]
 800c972:	3307      	adds	r3, #7
 800c974:	f023 0307 	bic.w	r3, r3, #7
 800c978:	f103 0208 	add.w	r2, r3, #8
 800c97c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c980:	f8d4 b000 	ldr.w	fp, [r4]
 800c984:	f8c8 2000 	str.w	r2, [r8]
 800c988:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c98c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c990:	9307      	str	r3, [sp, #28]
 800c992:	f8cd 8018 	str.w	r8, [sp, #24]
 800c996:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c99a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c99e:	4b9c      	ldr	r3, [pc, #624]	@ (800cc10 <_printf_float+0x2c8>)
 800c9a0:	f04f 32ff 	mov.w	r2, #4294967295
 800c9a4:	f7f4 f8ca 	bl	8000b3c <__aeabi_dcmpun>
 800c9a8:	bb70      	cbnz	r0, 800ca08 <_printf_float+0xc0>
 800c9aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c9ae:	4b98      	ldr	r3, [pc, #608]	@ (800cc10 <_printf_float+0x2c8>)
 800c9b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c9b4:	f7f4 f8a4 	bl	8000b00 <__aeabi_dcmple>
 800c9b8:	bb30      	cbnz	r0, 800ca08 <_printf_float+0xc0>
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	2300      	movs	r3, #0
 800c9be:	4640      	mov	r0, r8
 800c9c0:	4649      	mov	r1, r9
 800c9c2:	f7f4 f893 	bl	8000aec <__aeabi_dcmplt>
 800c9c6:	b110      	cbz	r0, 800c9ce <_printf_float+0x86>
 800c9c8:	232d      	movs	r3, #45	@ 0x2d
 800c9ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c9ce:	4a91      	ldr	r2, [pc, #580]	@ (800cc14 <_printf_float+0x2cc>)
 800c9d0:	4b91      	ldr	r3, [pc, #580]	@ (800cc18 <_printf_float+0x2d0>)
 800c9d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c9d6:	bf94      	ite	ls
 800c9d8:	4690      	movls	r8, r2
 800c9da:	4698      	movhi	r8, r3
 800c9dc:	2303      	movs	r3, #3
 800c9de:	6123      	str	r3, [r4, #16]
 800c9e0:	f02b 0304 	bic.w	r3, fp, #4
 800c9e4:	6023      	str	r3, [r4, #0]
 800c9e6:	f04f 0900 	mov.w	r9, #0
 800c9ea:	9700      	str	r7, [sp, #0]
 800c9ec:	4633      	mov	r3, r6
 800c9ee:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c9f0:	4621      	mov	r1, r4
 800c9f2:	4628      	mov	r0, r5
 800c9f4:	f000 f9d2 	bl	800cd9c <_printf_common>
 800c9f8:	3001      	adds	r0, #1
 800c9fa:	f040 808d 	bne.w	800cb18 <_printf_float+0x1d0>
 800c9fe:	f04f 30ff 	mov.w	r0, #4294967295
 800ca02:	b00d      	add	sp, #52	@ 0x34
 800ca04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca08:	4642      	mov	r2, r8
 800ca0a:	464b      	mov	r3, r9
 800ca0c:	4640      	mov	r0, r8
 800ca0e:	4649      	mov	r1, r9
 800ca10:	f7f4 f894 	bl	8000b3c <__aeabi_dcmpun>
 800ca14:	b140      	cbz	r0, 800ca28 <_printf_float+0xe0>
 800ca16:	464b      	mov	r3, r9
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	bfbc      	itt	lt
 800ca1c:	232d      	movlt	r3, #45	@ 0x2d
 800ca1e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ca22:	4a7e      	ldr	r2, [pc, #504]	@ (800cc1c <_printf_float+0x2d4>)
 800ca24:	4b7e      	ldr	r3, [pc, #504]	@ (800cc20 <_printf_float+0x2d8>)
 800ca26:	e7d4      	b.n	800c9d2 <_printf_float+0x8a>
 800ca28:	6863      	ldr	r3, [r4, #4]
 800ca2a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ca2e:	9206      	str	r2, [sp, #24]
 800ca30:	1c5a      	adds	r2, r3, #1
 800ca32:	d13b      	bne.n	800caac <_printf_float+0x164>
 800ca34:	2306      	movs	r3, #6
 800ca36:	6063      	str	r3, [r4, #4]
 800ca38:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	6022      	str	r2, [r4, #0]
 800ca40:	9303      	str	r3, [sp, #12]
 800ca42:	ab0a      	add	r3, sp, #40	@ 0x28
 800ca44:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ca48:	ab09      	add	r3, sp, #36	@ 0x24
 800ca4a:	9300      	str	r3, [sp, #0]
 800ca4c:	6861      	ldr	r1, [r4, #4]
 800ca4e:	ec49 8b10 	vmov	d0, r8, r9
 800ca52:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ca56:	4628      	mov	r0, r5
 800ca58:	f7ff fed6 	bl	800c808 <__cvt>
 800ca5c:	9b06      	ldr	r3, [sp, #24]
 800ca5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ca60:	2b47      	cmp	r3, #71	@ 0x47
 800ca62:	4680      	mov	r8, r0
 800ca64:	d129      	bne.n	800caba <_printf_float+0x172>
 800ca66:	1cc8      	adds	r0, r1, #3
 800ca68:	db02      	blt.n	800ca70 <_printf_float+0x128>
 800ca6a:	6863      	ldr	r3, [r4, #4]
 800ca6c:	4299      	cmp	r1, r3
 800ca6e:	dd41      	ble.n	800caf4 <_printf_float+0x1ac>
 800ca70:	f1aa 0a02 	sub.w	sl, sl, #2
 800ca74:	fa5f fa8a 	uxtb.w	sl, sl
 800ca78:	3901      	subs	r1, #1
 800ca7a:	4652      	mov	r2, sl
 800ca7c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ca80:	9109      	str	r1, [sp, #36]	@ 0x24
 800ca82:	f7ff ff26 	bl	800c8d2 <__exponent>
 800ca86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ca88:	1813      	adds	r3, r2, r0
 800ca8a:	2a01      	cmp	r2, #1
 800ca8c:	4681      	mov	r9, r0
 800ca8e:	6123      	str	r3, [r4, #16]
 800ca90:	dc02      	bgt.n	800ca98 <_printf_float+0x150>
 800ca92:	6822      	ldr	r2, [r4, #0]
 800ca94:	07d2      	lsls	r2, r2, #31
 800ca96:	d501      	bpl.n	800ca9c <_printf_float+0x154>
 800ca98:	3301      	adds	r3, #1
 800ca9a:	6123      	str	r3, [r4, #16]
 800ca9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d0a2      	beq.n	800c9ea <_printf_float+0xa2>
 800caa4:	232d      	movs	r3, #45	@ 0x2d
 800caa6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800caaa:	e79e      	b.n	800c9ea <_printf_float+0xa2>
 800caac:	9a06      	ldr	r2, [sp, #24]
 800caae:	2a47      	cmp	r2, #71	@ 0x47
 800cab0:	d1c2      	bne.n	800ca38 <_printf_float+0xf0>
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d1c0      	bne.n	800ca38 <_printf_float+0xf0>
 800cab6:	2301      	movs	r3, #1
 800cab8:	e7bd      	b.n	800ca36 <_printf_float+0xee>
 800caba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cabe:	d9db      	bls.n	800ca78 <_printf_float+0x130>
 800cac0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800cac4:	d118      	bne.n	800caf8 <_printf_float+0x1b0>
 800cac6:	2900      	cmp	r1, #0
 800cac8:	6863      	ldr	r3, [r4, #4]
 800caca:	dd0b      	ble.n	800cae4 <_printf_float+0x19c>
 800cacc:	6121      	str	r1, [r4, #16]
 800cace:	b913      	cbnz	r3, 800cad6 <_printf_float+0x18e>
 800cad0:	6822      	ldr	r2, [r4, #0]
 800cad2:	07d0      	lsls	r0, r2, #31
 800cad4:	d502      	bpl.n	800cadc <_printf_float+0x194>
 800cad6:	3301      	adds	r3, #1
 800cad8:	440b      	add	r3, r1
 800cada:	6123      	str	r3, [r4, #16]
 800cadc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800cade:	f04f 0900 	mov.w	r9, #0
 800cae2:	e7db      	b.n	800ca9c <_printf_float+0x154>
 800cae4:	b913      	cbnz	r3, 800caec <_printf_float+0x1a4>
 800cae6:	6822      	ldr	r2, [r4, #0]
 800cae8:	07d2      	lsls	r2, r2, #31
 800caea:	d501      	bpl.n	800caf0 <_printf_float+0x1a8>
 800caec:	3302      	adds	r3, #2
 800caee:	e7f4      	b.n	800cada <_printf_float+0x192>
 800caf0:	2301      	movs	r3, #1
 800caf2:	e7f2      	b.n	800cada <_printf_float+0x192>
 800caf4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800caf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cafa:	4299      	cmp	r1, r3
 800cafc:	db05      	blt.n	800cb0a <_printf_float+0x1c2>
 800cafe:	6823      	ldr	r3, [r4, #0]
 800cb00:	6121      	str	r1, [r4, #16]
 800cb02:	07d8      	lsls	r0, r3, #31
 800cb04:	d5ea      	bpl.n	800cadc <_printf_float+0x194>
 800cb06:	1c4b      	adds	r3, r1, #1
 800cb08:	e7e7      	b.n	800cada <_printf_float+0x192>
 800cb0a:	2900      	cmp	r1, #0
 800cb0c:	bfd4      	ite	le
 800cb0e:	f1c1 0202 	rsble	r2, r1, #2
 800cb12:	2201      	movgt	r2, #1
 800cb14:	4413      	add	r3, r2
 800cb16:	e7e0      	b.n	800cada <_printf_float+0x192>
 800cb18:	6823      	ldr	r3, [r4, #0]
 800cb1a:	055a      	lsls	r2, r3, #21
 800cb1c:	d407      	bmi.n	800cb2e <_printf_float+0x1e6>
 800cb1e:	6923      	ldr	r3, [r4, #16]
 800cb20:	4642      	mov	r2, r8
 800cb22:	4631      	mov	r1, r6
 800cb24:	4628      	mov	r0, r5
 800cb26:	47b8      	blx	r7
 800cb28:	3001      	adds	r0, #1
 800cb2a:	d12b      	bne.n	800cb84 <_printf_float+0x23c>
 800cb2c:	e767      	b.n	800c9fe <_printf_float+0xb6>
 800cb2e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cb32:	f240 80dd 	bls.w	800ccf0 <_printf_float+0x3a8>
 800cb36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	f7f3 ffcb 	bl	8000ad8 <__aeabi_dcmpeq>
 800cb42:	2800      	cmp	r0, #0
 800cb44:	d033      	beq.n	800cbae <_printf_float+0x266>
 800cb46:	4a37      	ldr	r2, [pc, #220]	@ (800cc24 <_printf_float+0x2dc>)
 800cb48:	2301      	movs	r3, #1
 800cb4a:	4631      	mov	r1, r6
 800cb4c:	4628      	mov	r0, r5
 800cb4e:	47b8      	blx	r7
 800cb50:	3001      	adds	r0, #1
 800cb52:	f43f af54 	beq.w	800c9fe <_printf_float+0xb6>
 800cb56:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cb5a:	4543      	cmp	r3, r8
 800cb5c:	db02      	blt.n	800cb64 <_printf_float+0x21c>
 800cb5e:	6823      	ldr	r3, [r4, #0]
 800cb60:	07d8      	lsls	r0, r3, #31
 800cb62:	d50f      	bpl.n	800cb84 <_printf_float+0x23c>
 800cb64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cb68:	4631      	mov	r1, r6
 800cb6a:	4628      	mov	r0, r5
 800cb6c:	47b8      	blx	r7
 800cb6e:	3001      	adds	r0, #1
 800cb70:	f43f af45 	beq.w	800c9fe <_printf_float+0xb6>
 800cb74:	f04f 0900 	mov.w	r9, #0
 800cb78:	f108 38ff 	add.w	r8, r8, #4294967295
 800cb7c:	f104 0a1a 	add.w	sl, r4, #26
 800cb80:	45c8      	cmp	r8, r9
 800cb82:	dc09      	bgt.n	800cb98 <_printf_float+0x250>
 800cb84:	6823      	ldr	r3, [r4, #0]
 800cb86:	079b      	lsls	r3, r3, #30
 800cb88:	f100 8103 	bmi.w	800cd92 <_printf_float+0x44a>
 800cb8c:	68e0      	ldr	r0, [r4, #12]
 800cb8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cb90:	4298      	cmp	r0, r3
 800cb92:	bfb8      	it	lt
 800cb94:	4618      	movlt	r0, r3
 800cb96:	e734      	b.n	800ca02 <_printf_float+0xba>
 800cb98:	2301      	movs	r3, #1
 800cb9a:	4652      	mov	r2, sl
 800cb9c:	4631      	mov	r1, r6
 800cb9e:	4628      	mov	r0, r5
 800cba0:	47b8      	blx	r7
 800cba2:	3001      	adds	r0, #1
 800cba4:	f43f af2b 	beq.w	800c9fe <_printf_float+0xb6>
 800cba8:	f109 0901 	add.w	r9, r9, #1
 800cbac:	e7e8      	b.n	800cb80 <_printf_float+0x238>
 800cbae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	dc39      	bgt.n	800cc28 <_printf_float+0x2e0>
 800cbb4:	4a1b      	ldr	r2, [pc, #108]	@ (800cc24 <_printf_float+0x2dc>)
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	4631      	mov	r1, r6
 800cbba:	4628      	mov	r0, r5
 800cbbc:	47b8      	blx	r7
 800cbbe:	3001      	adds	r0, #1
 800cbc0:	f43f af1d 	beq.w	800c9fe <_printf_float+0xb6>
 800cbc4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cbc8:	ea59 0303 	orrs.w	r3, r9, r3
 800cbcc:	d102      	bne.n	800cbd4 <_printf_float+0x28c>
 800cbce:	6823      	ldr	r3, [r4, #0]
 800cbd0:	07d9      	lsls	r1, r3, #31
 800cbd2:	d5d7      	bpl.n	800cb84 <_printf_float+0x23c>
 800cbd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cbd8:	4631      	mov	r1, r6
 800cbda:	4628      	mov	r0, r5
 800cbdc:	47b8      	blx	r7
 800cbde:	3001      	adds	r0, #1
 800cbe0:	f43f af0d 	beq.w	800c9fe <_printf_float+0xb6>
 800cbe4:	f04f 0a00 	mov.w	sl, #0
 800cbe8:	f104 0b1a 	add.w	fp, r4, #26
 800cbec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbee:	425b      	negs	r3, r3
 800cbf0:	4553      	cmp	r3, sl
 800cbf2:	dc01      	bgt.n	800cbf8 <_printf_float+0x2b0>
 800cbf4:	464b      	mov	r3, r9
 800cbf6:	e793      	b.n	800cb20 <_printf_float+0x1d8>
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	465a      	mov	r2, fp
 800cbfc:	4631      	mov	r1, r6
 800cbfe:	4628      	mov	r0, r5
 800cc00:	47b8      	blx	r7
 800cc02:	3001      	adds	r0, #1
 800cc04:	f43f aefb 	beq.w	800c9fe <_printf_float+0xb6>
 800cc08:	f10a 0a01 	add.w	sl, sl, #1
 800cc0c:	e7ee      	b.n	800cbec <_printf_float+0x2a4>
 800cc0e:	bf00      	nop
 800cc10:	7fefffff 	.word	0x7fefffff
 800cc14:	0800f43c 	.word	0x0800f43c
 800cc18:	0800f440 	.word	0x0800f440
 800cc1c:	0800f444 	.word	0x0800f444
 800cc20:	0800f448 	.word	0x0800f448
 800cc24:	0800f44c 	.word	0x0800f44c
 800cc28:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cc2a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800cc2e:	4553      	cmp	r3, sl
 800cc30:	bfa8      	it	ge
 800cc32:	4653      	movge	r3, sl
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	4699      	mov	r9, r3
 800cc38:	dc36      	bgt.n	800cca8 <_printf_float+0x360>
 800cc3a:	f04f 0b00 	mov.w	fp, #0
 800cc3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cc42:	f104 021a 	add.w	r2, r4, #26
 800cc46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800cc48:	9306      	str	r3, [sp, #24]
 800cc4a:	eba3 0309 	sub.w	r3, r3, r9
 800cc4e:	455b      	cmp	r3, fp
 800cc50:	dc31      	bgt.n	800ccb6 <_printf_float+0x36e>
 800cc52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc54:	459a      	cmp	sl, r3
 800cc56:	dc3a      	bgt.n	800ccce <_printf_float+0x386>
 800cc58:	6823      	ldr	r3, [r4, #0]
 800cc5a:	07da      	lsls	r2, r3, #31
 800cc5c:	d437      	bmi.n	800ccce <_printf_float+0x386>
 800cc5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc60:	ebaa 0903 	sub.w	r9, sl, r3
 800cc64:	9b06      	ldr	r3, [sp, #24]
 800cc66:	ebaa 0303 	sub.w	r3, sl, r3
 800cc6a:	4599      	cmp	r9, r3
 800cc6c:	bfa8      	it	ge
 800cc6e:	4699      	movge	r9, r3
 800cc70:	f1b9 0f00 	cmp.w	r9, #0
 800cc74:	dc33      	bgt.n	800ccde <_printf_float+0x396>
 800cc76:	f04f 0800 	mov.w	r8, #0
 800cc7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cc7e:	f104 0b1a 	add.w	fp, r4, #26
 800cc82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc84:	ebaa 0303 	sub.w	r3, sl, r3
 800cc88:	eba3 0309 	sub.w	r3, r3, r9
 800cc8c:	4543      	cmp	r3, r8
 800cc8e:	f77f af79 	ble.w	800cb84 <_printf_float+0x23c>
 800cc92:	2301      	movs	r3, #1
 800cc94:	465a      	mov	r2, fp
 800cc96:	4631      	mov	r1, r6
 800cc98:	4628      	mov	r0, r5
 800cc9a:	47b8      	blx	r7
 800cc9c:	3001      	adds	r0, #1
 800cc9e:	f43f aeae 	beq.w	800c9fe <_printf_float+0xb6>
 800cca2:	f108 0801 	add.w	r8, r8, #1
 800cca6:	e7ec      	b.n	800cc82 <_printf_float+0x33a>
 800cca8:	4642      	mov	r2, r8
 800ccaa:	4631      	mov	r1, r6
 800ccac:	4628      	mov	r0, r5
 800ccae:	47b8      	blx	r7
 800ccb0:	3001      	adds	r0, #1
 800ccb2:	d1c2      	bne.n	800cc3a <_printf_float+0x2f2>
 800ccb4:	e6a3      	b.n	800c9fe <_printf_float+0xb6>
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	4631      	mov	r1, r6
 800ccba:	4628      	mov	r0, r5
 800ccbc:	9206      	str	r2, [sp, #24]
 800ccbe:	47b8      	blx	r7
 800ccc0:	3001      	adds	r0, #1
 800ccc2:	f43f ae9c 	beq.w	800c9fe <_printf_float+0xb6>
 800ccc6:	9a06      	ldr	r2, [sp, #24]
 800ccc8:	f10b 0b01 	add.w	fp, fp, #1
 800cccc:	e7bb      	b.n	800cc46 <_printf_float+0x2fe>
 800ccce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ccd2:	4631      	mov	r1, r6
 800ccd4:	4628      	mov	r0, r5
 800ccd6:	47b8      	blx	r7
 800ccd8:	3001      	adds	r0, #1
 800ccda:	d1c0      	bne.n	800cc5e <_printf_float+0x316>
 800ccdc:	e68f      	b.n	800c9fe <_printf_float+0xb6>
 800ccde:	9a06      	ldr	r2, [sp, #24]
 800cce0:	464b      	mov	r3, r9
 800cce2:	4442      	add	r2, r8
 800cce4:	4631      	mov	r1, r6
 800cce6:	4628      	mov	r0, r5
 800cce8:	47b8      	blx	r7
 800ccea:	3001      	adds	r0, #1
 800ccec:	d1c3      	bne.n	800cc76 <_printf_float+0x32e>
 800ccee:	e686      	b.n	800c9fe <_printf_float+0xb6>
 800ccf0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ccf4:	f1ba 0f01 	cmp.w	sl, #1
 800ccf8:	dc01      	bgt.n	800ccfe <_printf_float+0x3b6>
 800ccfa:	07db      	lsls	r3, r3, #31
 800ccfc:	d536      	bpl.n	800cd6c <_printf_float+0x424>
 800ccfe:	2301      	movs	r3, #1
 800cd00:	4642      	mov	r2, r8
 800cd02:	4631      	mov	r1, r6
 800cd04:	4628      	mov	r0, r5
 800cd06:	47b8      	blx	r7
 800cd08:	3001      	adds	r0, #1
 800cd0a:	f43f ae78 	beq.w	800c9fe <_printf_float+0xb6>
 800cd0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cd12:	4631      	mov	r1, r6
 800cd14:	4628      	mov	r0, r5
 800cd16:	47b8      	blx	r7
 800cd18:	3001      	adds	r0, #1
 800cd1a:	f43f ae70 	beq.w	800c9fe <_printf_float+0xb6>
 800cd1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cd22:	2200      	movs	r2, #0
 800cd24:	2300      	movs	r3, #0
 800cd26:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cd2a:	f7f3 fed5 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd2e:	b9c0      	cbnz	r0, 800cd62 <_printf_float+0x41a>
 800cd30:	4653      	mov	r3, sl
 800cd32:	f108 0201 	add.w	r2, r8, #1
 800cd36:	4631      	mov	r1, r6
 800cd38:	4628      	mov	r0, r5
 800cd3a:	47b8      	blx	r7
 800cd3c:	3001      	adds	r0, #1
 800cd3e:	d10c      	bne.n	800cd5a <_printf_float+0x412>
 800cd40:	e65d      	b.n	800c9fe <_printf_float+0xb6>
 800cd42:	2301      	movs	r3, #1
 800cd44:	465a      	mov	r2, fp
 800cd46:	4631      	mov	r1, r6
 800cd48:	4628      	mov	r0, r5
 800cd4a:	47b8      	blx	r7
 800cd4c:	3001      	adds	r0, #1
 800cd4e:	f43f ae56 	beq.w	800c9fe <_printf_float+0xb6>
 800cd52:	f108 0801 	add.w	r8, r8, #1
 800cd56:	45d0      	cmp	r8, sl
 800cd58:	dbf3      	blt.n	800cd42 <_printf_float+0x3fa>
 800cd5a:	464b      	mov	r3, r9
 800cd5c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800cd60:	e6df      	b.n	800cb22 <_printf_float+0x1da>
 800cd62:	f04f 0800 	mov.w	r8, #0
 800cd66:	f104 0b1a 	add.w	fp, r4, #26
 800cd6a:	e7f4      	b.n	800cd56 <_printf_float+0x40e>
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	4642      	mov	r2, r8
 800cd70:	e7e1      	b.n	800cd36 <_printf_float+0x3ee>
 800cd72:	2301      	movs	r3, #1
 800cd74:	464a      	mov	r2, r9
 800cd76:	4631      	mov	r1, r6
 800cd78:	4628      	mov	r0, r5
 800cd7a:	47b8      	blx	r7
 800cd7c:	3001      	adds	r0, #1
 800cd7e:	f43f ae3e 	beq.w	800c9fe <_printf_float+0xb6>
 800cd82:	f108 0801 	add.w	r8, r8, #1
 800cd86:	68e3      	ldr	r3, [r4, #12]
 800cd88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cd8a:	1a5b      	subs	r3, r3, r1
 800cd8c:	4543      	cmp	r3, r8
 800cd8e:	dcf0      	bgt.n	800cd72 <_printf_float+0x42a>
 800cd90:	e6fc      	b.n	800cb8c <_printf_float+0x244>
 800cd92:	f04f 0800 	mov.w	r8, #0
 800cd96:	f104 0919 	add.w	r9, r4, #25
 800cd9a:	e7f4      	b.n	800cd86 <_printf_float+0x43e>

0800cd9c <_printf_common>:
 800cd9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cda0:	4616      	mov	r6, r2
 800cda2:	4698      	mov	r8, r3
 800cda4:	688a      	ldr	r2, [r1, #8]
 800cda6:	690b      	ldr	r3, [r1, #16]
 800cda8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cdac:	4293      	cmp	r3, r2
 800cdae:	bfb8      	it	lt
 800cdb0:	4613      	movlt	r3, r2
 800cdb2:	6033      	str	r3, [r6, #0]
 800cdb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cdb8:	4607      	mov	r7, r0
 800cdba:	460c      	mov	r4, r1
 800cdbc:	b10a      	cbz	r2, 800cdc2 <_printf_common+0x26>
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	6033      	str	r3, [r6, #0]
 800cdc2:	6823      	ldr	r3, [r4, #0]
 800cdc4:	0699      	lsls	r1, r3, #26
 800cdc6:	bf42      	ittt	mi
 800cdc8:	6833      	ldrmi	r3, [r6, #0]
 800cdca:	3302      	addmi	r3, #2
 800cdcc:	6033      	strmi	r3, [r6, #0]
 800cdce:	6825      	ldr	r5, [r4, #0]
 800cdd0:	f015 0506 	ands.w	r5, r5, #6
 800cdd4:	d106      	bne.n	800cde4 <_printf_common+0x48>
 800cdd6:	f104 0a19 	add.w	sl, r4, #25
 800cdda:	68e3      	ldr	r3, [r4, #12]
 800cddc:	6832      	ldr	r2, [r6, #0]
 800cdde:	1a9b      	subs	r3, r3, r2
 800cde0:	42ab      	cmp	r3, r5
 800cde2:	dc26      	bgt.n	800ce32 <_printf_common+0x96>
 800cde4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cde8:	6822      	ldr	r2, [r4, #0]
 800cdea:	3b00      	subs	r3, #0
 800cdec:	bf18      	it	ne
 800cdee:	2301      	movne	r3, #1
 800cdf0:	0692      	lsls	r2, r2, #26
 800cdf2:	d42b      	bmi.n	800ce4c <_printf_common+0xb0>
 800cdf4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cdf8:	4641      	mov	r1, r8
 800cdfa:	4638      	mov	r0, r7
 800cdfc:	47c8      	blx	r9
 800cdfe:	3001      	adds	r0, #1
 800ce00:	d01e      	beq.n	800ce40 <_printf_common+0xa4>
 800ce02:	6823      	ldr	r3, [r4, #0]
 800ce04:	6922      	ldr	r2, [r4, #16]
 800ce06:	f003 0306 	and.w	r3, r3, #6
 800ce0a:	2b04      	cmp	r3, #4
 800ce0c:	bf02      	ittt	eq
 800ce0e:	68e5      	ldreq	r5, [r4, #12]
 800ce10:	6833      	ldreq	r3, [r6, #0]
 800ce12:	1aed      	subeq	r5, r5, r3
 800ce14:	68a3      	ldr	r3, [r4, #8]
 800ce16:	bf0c      	ite	eq
 800ce18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ce1c:	2500      	movne	r5, #0
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	bfc4      	itt	gt
 800ce22:	1a9b      	subgt	r3, r3, r2
 800ce24:	18ed      	addgt	r5, r5, r3
 800ce26:	2600      	movs	r6, #0
 800ce28:	341a      	adds	r4, #26
 800ce2a:	42b5      	cmp	r5, r6
 800ce2c:	d11a      	bne.n	800ce64 <_printf_common+0xc8>
 800ce2e:	2000      	movs	r0, #0
 800ce30:	e008      	b.n	800ce44 <_printf_common+0xa8>
 800ce32:	2301      	movs	r3, #1
 800ce34:	4652      	mov	r2, sl
 800ce36:	4641      	mov	r1, r8
 800ce38:	4638      	mov	r0, r7
 800ce3a:	47c8      	blx	r9
 800ce3c:	3001      	adds	r0, #1
 800ce3e:	d103      	bne.n	800ce48 <_printf_common+0xac>
 800ce40:	f04f 30ff 	mov.w	r0, #4294967295
 800ce44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce48:	3501      	adds	r5, #1
 800ce4a:	e7c6      	b.n	800cdda <_printf_common+0x3e>
 800ce4c:	18e1      	adds	r1, r4, r3
 800ce4e:	1c5a      	adds	r2, r3, #1
 800ce50:	2030      	movs	r0, #48	@ 0x30
 800ce52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ce56:	4422      	add	r2, r4
 800ce58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ce5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ce60:	3302      	adds	r3, #2
 800ce62:	e7c7      	b.n	800cdf4 <_printf_common+0x58>
 800ce64:	2301      	movs	r3, #1
 800ce66:	4622      	mov	r2, r4
 800ce68:	4641      	mov	r1, r8
 800ce6a:	4638      	mov	r0, r7
 800ce6c:	47c8      	blx	r9
 800ce6e:	3001      	adds	r0, #1
 800ce70:	d0e6      	beq.n	800ce40 <_printf_common+0xa4>
 800ce72:	3601      	adds	r6, #1
 800ce74:	e7d9      	b.n	800ce2a <_printf_common+0x8e>
	...

0800ce78 <_printf_i>:
 800ce78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce7c:	7e0f      	ldrb	r7, [r1, #24]
 800ce7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ce80:	2f78      	cmp	r7, #120	@ 0x78
 800ce82:	4691      	mov	r9, r2
 800ce84:	4680      	mov	r8, r0
 800ce86:	460c      	mov	r4, r1
 800ce88:	469a      	mov	sl, r3
 800ce8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ce8e:	d807      	bhi.n	800cea0 <_printf_i+0x28>
 800ce90:	2f62      	cmp	r7, #98	@ 0x62
 800ce92:	d80a      	bhi.n	800ceaa <_printf_i+0x32>
 800ce94:	2f00      	cmp	r7, #0
 800ce96:	f000 80d2 	beq.w	800d03e <_printf_i+0x1c6>
 800ce9a:	2f58      	cmp	r7, #88	@ 0x58
 800ce9c:	f000 80b9 	beq.w	800d012 <_printf_i+0x19a>
 800cea0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cea4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cea8:	e03a      	b.n	800cf20 <_printf_i+0xa8>
 800ceaa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ceae:	2b15      	cmp	r3, #21
 800ceb0:	d8f6      	bhi.n	800cea0 <_printf_i+0x28>
 800ceb2:	a101      	add	r1, pc, #4	@ (adr r1, 800ceb8 <_printf_i+0x40>)
 800ceb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ceb8:	0800cf11 	.word	0x0800cf11
 800cebc:	0800cf25 	.word	0x0800cf25
 800cec0:	0800cea1 	.word	0x0800cea1
 800cec4:	0800cea1 	.word	0x0800cea1
 800cec8:	0800cea1 	.word	0x0800cea1
 800cecc:	0800cea1 	.word	0x0800cea1
 800ced0:	0800cf25 	.word	0x0800cf25
 800ced4:	0800cea1 	.word	0x0800cea1
 800ced8:	0800cea1 	.word	0x0800cea1
 800cedc:	0800cea1 	.word	0x0800cea1
 800cee0:	0800cea1 	.word	0x0800cea1
 800cee4:	0800d025 	.word	0x0800d025
 800cee8:	0800cf4f 	.word	0x0800cf4f
 800ceec:	0800cfdf 	.word	0x0800cfdf
 800cef0:	0800cea1 	.word	0x0800cea1
 800cef4:	0800cea1 	.word	0x0800cea1
 800cef8:	0800d047 	.word	0x0800d047
 800cefc:	0800cea1 	.word	0x0800cea1
 800cf00:	0800cf4f 	.word	0x0800cf4f
 800cf04:	0800cea1 	.word	0x0800cea1
 800cf08:	0800cea1 	.word	0x0800cea1
 800cf0c:	0800cfe7 	.word	0x0800cfe7
 800cf10:	6833      	ldr	r3, [r6, #0]
 800cf12:	1d1a      	adds	r2, r3, #4
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	6032      	str	r2, [r6, #0]
 800cf18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cf1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cf20:	2301      	movs	r3, #1
 800cf22:	e09d      	b.n	800d060 <_printf_i+0x1e8>
 800cf24:	6833      	ldr	r3, [r6, #0]
 800cf26:	6820      	ldr	r0, [r4, #0]
 800cf28:	1d19      	adds	r1, r3, #4
 800cf2a:	6031      	str	r1, [r6, #0]
 800cf2c:	0606      	lsls	r6, r0, #24
 800cf2e:	d501      	bpl.n	800cf34 <_printf_i+0xbc>
 800cf30:	681d      	ldr	r5, [r3, #0]
 800cf32:	e003      	b.n	800cf3c <_printf_i+0xc4>
 800cf34:	0645      	lsls	r5, r0, #25
 800cf36:	d5fb      	bpl.n	800cf30 <_printf_i+0xb8>
 800cf38:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cf3c:	2d00      	cmp	r5, #0
 800cf3e:	da03      	bge.n	800cf48 <_printf_i+0xd0>
 800cf40:	232d      	movs	r3, #45	@ 0x2d
 800cf42:	426d      	negs	r5, r5
 800cf44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cf48:	4859      	ldr	r0, [pc, #356]	@ (800d0b0 <_printf_i+0x238>)
 800cf4a:	230a      	movs	r3, #10
 800cf4c:	e011      	b.n	800cf72 <_printf_i+0xfa>
 800cf4e:	6821      	ldr	r1, [r4, #0]
 800cf50:	6833      	ldr	r3, [r6, #0]
 800cf52:	0608      	lsls	r0, r1, #24
 800cf54:	f853 5b04 	ldr.w	r5, [r3], #4
 800cf58:	d402      	bmi.n	800cf60 <_printf_i+0xe8>
 800cf5a:	0649      	lsls	r1, r1, #25
 800cf5c:	bf48      	it	mi
 800cf5e:	b2ad      	uxthmi	r5, r5
 800cf60:	2f6f      	cmp	r7, #111	@ 0x6f
 800cf62:	4853      	ldr	r0, [pc, #332]	@ (800d0b0 <_printf_i+0x238>)
 800cf64:	6033      	str	r3, [r6, #0]
 800cf66:	bf14      	ite	ne
 800cf68:	230a      	movne	r3, #10
 800cf6a:	2308      	moveq	r3, #8
 800cf6c:	2100      	movs	r1, #0
 800cf6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cf72:	6866      	ldr	r6, [r4, #4]
 800cf74:	60a6      	str	r6, [r4, #8]
 800cf76:	2e00      	cmp	r6, #0
 800cf78:	bfa2      	ittt	ge
 800cf7a:	6821      	ldrge	r1, [r4, #0]
 800cf7c:	f021 0104 	bicge.w	r1, r1, #4
 800cf80:	6021      	strge	r1, [r4, #0]
 800cf82:	b90d      	cbnz	r5, 800cf88 <_printf_i+0x110>
 800cf84:	2e00      	cmp	r6, #0
 800cf86:	d04b      	beq.n	800d020 <_printf_i+0x1a8>
 800cf88:	4616      	mov	r6, r2
 800cf8a:	fbb5 f1f3 	udiv	r1, r5, r3
 800cf8e:	fb03 5711 	mls	r7, r3, r1, r5
 800cf92:	5dc7      	ldrb	r7, [r0, r7]
 800cf94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cf98:	462f      	mov	r7, r5
 800cf9a:	42bb      	cmp	r3, r7
 800cf9c:	460d      	mov	r5, r1
 800cf9e:	d9f4      	bls.n	800cf8a <_printf_i+0x112>
 800cfa0:	2b08      	cmp	r3, #8
 800cfa2:	d10b      	bne.n	800cfbc <_printf_i+0x144>
 800cfa4:	6823      	ldr	r3, [r4, #0]
 800cfa6:	07df      	lsls	r7, r3, #31
 800cfa8:	d508      	bpl.n	800cfbc <_printf_i+0x144>
 800cfaa:	6923      	ldr	r3, [r4, #16]
 800cfac:	6861      	ldr	r1, [r4, #4]
 800cfae:	4299      	cmp	r1, r3
 800cfb0:	bfde      	ittt	le
 800cfb2:	2330      	movle	r3, #48	@ 0x30
 800cfb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cfb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cfbc:	1b92      	subs	r2, r2, r6
 800cfbe:	6122      	str	r2, [r4, #16]
 800cfc0:	f8cd a000 	str.w	sl, [sp]
 800cfc4:	464b      	mov	r3, r9
 800cfc6:	aa03      	add	r2, sp, #12
 800cfc8:	4621      	mov	r1, r4
 800cfca:	4640      	mov	r0, r8
 800cfcc:	f7ff fee6 	bl	800cd9c <_printf_common>
 800cfd0:	3001      	adds	r0, #1
 800cfd2:	d14a      	bne.n	800d06a <_printf_i+0x1f2>
 800cfd4:	f04f 30ff 	mov.w	r0, #4294967295
 800cfd8:	b004      	add	sp, #16
 800cfda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfde:	6823      	ldr	r3, [r4, #0]
 800cfe0:	f043 0320 	orr.w	r3, r3, #32
 800cfe4:	6023      	str	r3, [r4, #0]
 800cfe6:	4833      	ldr	r0, [pc, #204]	@ (800d0b4 <_printf_i+0x23c>)
 800cfe8:	2778      	movs	r7, #120	@ 0x78
 800cfea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cfee:	6823      	ldr	r3, [r4, #0]
 800cff0:	6831      	ldr	r1, [r6, #0]
 800cff2:	061f      	lsls	r7, r3, #24
 800cff4:	f851 5b04 	ldr.w	r5, [r1], #4
 800cff8:	d402      	bmi.n	800d000 <_printf_i+0x188>
 800cffa:	065f      	lsls	r7, r3, #25
 800cffc:	bf48      	it	mi
 800cffe:	b2ad      	uxthmi	r5, r5
 800d000:	6031      	str	r1, [r6, #0]
 800d002:	07d9      	lsls	r1, r3, #31
 800d004:	bf44      	itt	mi
 800d006:	f043 0320 	orrmi.w	r3, r3, #32
 800d00a:	6023      	strmi	r3, [r4, #0]
 800d00c:	b11d      	cbz	r5, 800d016 <_printf_i+0x19e>
 800d00e:	2310      	movs	r3, #16
 800d010:	e7ac      	b.n	800cf6c <_printf_i+0xf4>
 800d012:	4827      	ldr	r0, [pc, #156]	@ (800d0b0 <_printf_i+0x238>)
 800d014:	e7e9      	b.n	800cfea <_printf_i+0x172>
 800d016:	6823      	ldr	r3, [r4, #0]
 800d018:	f023 0320 	bic.w	r3, r3, #32
 800d01c:	6023      	str	r3, [r4, #0]
 800d01e:	e7f6      	b.n	800d00e <_printf_i+0x196>
 800d020:	4616      	mov	r6, r2
 800d022:	e7bd      	b.n	800cfa0 <_printf_i+0x128>
 800d024:	6833      	ldr	r3, [r6, #0]
 800d026:	6825      	ldr	r5, [r4, #0]
 800d028:	6961      	ldr	r1, [r4, #20]
 800d02a:	1d18      	adds	r0, r3, #4
 800d02c:	6030      	str	r0, [r6, #0]
 800d02e:	062e      	lsls	r6, r5, #24
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	d501      	bpl.n	800d038 <_printf_i+0x1c0>
 800d034:	6019      	str	r1, [r3, #0]
 800d036:	e002      	b.n	800d03e <_printf_i+0x1c6>
 800d038:	0668      	lsls	r0, r5, #25
 800d03a:	d5fb      	bpl.n	800d034 <_printf_i+0x1bc>
 800d03c:	8019      	strh	r1, [r3, #0]
 800d03e:	2300      	movs	r3, #0
 800d040:	6123      	str	r3, [r4, #16]
 800d042:	4616      	mov	r6, r2
 800d044:	e7bc      	b.n	800cfc0 <_printf_i+0x148>
 800d046:	6833      	ldr	r3, [r6, #0]
 800d048:	1d1a      	adds	r2, r3, #4
 800d04a:	6032      	str	r2, [r6, #0]
 800d04c:	681e      	ldr	r6, [r3, #0]
 800d04e:	6862      	ldr	r2, [r4, #4]
 800d050:	2100      	movs	r1, #0
 800d052:	4630      	mov	r0, r6
 800d054:	f7f3 f8c4 	bl	80001e0 <memchr>
 800d058:	b108      	cbz	r0, 800d05e <_printf_i+0x1e6>
 800d05a:	1b80      	subs	r0, r0, r6
 800d05c:	6060      	str	r0, [r4, #4]
 800d05e:	6863      	ldr	r3, [r4, #4]
 800d060:	6123      	str	r3, [r4, #16]
 800d062:	2300      	movs	r3, #0
 800d064:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d068:	e7aa      	b.n	800cfc0 <_printf_i+0x148>
 800d06a:	6923      	ldr	r3, [r4, #16]
 800d06c:	4632      	mov	r2, r6
 800d06e:	4649      	mov	r1, r9
 800d070:	4640      	mov	r0, r8
 800d072:	47d0      	blx	sl
 800d074:	3001      	adds	r0, #1
 800d076:	d0ad      	beq.n	800cfd4 <_printf_i+0x15c>
 800d078:	6823      	ldr	r3, [r4, #0]
 800d07a:	079b      	lsls	r3, r3, #30
 800d07c:	d413      	bmi.n	800d0a6 <_printf_i+0x22e>
 800d07e:	68e0      	ldr	r0, [r4, #12]
 800d080:	9b03      	ldr	r3, [sp, #12]
 800d082:	4298      	cmp	r0, r3
 800d084:	bfb8      	it	lt
 800d086:	4618      	movlt	r0, r3
 800d088:	e7a6      	b.n	800cfd8 <_printf_i+0x160>
 800d08a:	2301      	movs	r3, #1
 800d08c:	4632      	mov	r2, r6
 800d08e:	4649      	mov	r1, r9
 800d090:	4640      	mov	r0, r8
 800d092:	47d0      	blx	sl
 800d094:	3001      	adds	r0, #1
 800d096:	d09d      	beq.n	800cfd4 <_printf_i+0x15c>
 800d098:	3501      	adds	r5, #1
 800d09a:	68e3      	ldr	r3, [r4, #12]
 800d09c:	9903      	ldr	r1, [sp, #12]
 800d09e:	1a5b      	subs	r3, r3, r1
 800d0a0:	42ab      	cmp	r3, r5
 800d0a2:	dcf2      	bgt.n	800d08a <_printf_i+0x212>
 800d0a4:	e7eb      	b.n	800d07e <_printf_i+0x206>
 800d0a6:	2500      	movs	r5, #0
 800d0a8:	f104 0619 	add.w	r6, r4, #25
 800d0ac:	e7f5      	b.n	800d09a <_printf_i+0x222>
 800d0ae:	bf00      	nop
 800d0b0:	0800f44e 	.word	0x0800f44e
 800d0b4:	0800f45f 	.word	0x0800f45f

0800d0b8 <std>:
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	b510      	push	{r4, lr}
 800d0bc:	4604      	mov	r4, r0
 800d0be:	e9c0 3300 	strd	r3, r3, [r0]
 800d0c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d0c6:	6083      	str	r3, [r0, #8]
 800d0c8:	8181      	strh	r1, [r0, #12]
 800d0ca:	6643      	str	r3, [r0, #100]	@ 0x64
 800d0cc:	81c2      	strh	r2, [r0, #14]
 800d0ce:	6183      	str	r3, [r0, #24]
 800d0d0:	4619      	mov	r1, r3
 800d0d2:	2208      	movs	r2, #8
 800d0d4:	305c      	adds	r0, #92	@ 0x5c
 800d0d6:	f000 f914 	bl	800d302 <memset>
 800d0da:	4b0d      	ldr	r3, [pc, #52]	@ (800d110 <std+0x58>)
 800d0dc:	6263      	str	r3, [r4, #36]	@ 0x24
 800d0de:	4b0d      	ldr	r3, [pc, #52]	@ (800d114 <std+0x5c>)
 800d0e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d0e2:	4b0d      	ldr	r3, [pc, #52]	@ (800d118 <std+0x60>)
 800d0e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d0e6:	4b0d      	ldr	r3, [pc, #52]	@ (800d11c <std+0x64>)
 800d0e8:	6323      	str	r3, [r4, #48]	@ 0x30
 800d0ea:	4b0d      	ldr	r3, [pc, #52]	@ (800d120 <std+0x68>)
 800d0ec:	6224      	str	r4, [r4, #32]
 800d0ee:	429c      	cmp	r4, r3
 800d0f0:	d006      	beq.n	800d100 <std+0x48>
 800d0f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d0f6:	4294      	cmp	r4, r2
 800d0f8:	d002      	beq.n	800d100 <std+0x48>
 800d0fa:	33d0      	adds	r3, #208	@ 0xd0
 800d0fc:	429c      	cmp	r4, r3
 800d0fe:	d105      	bne.n	800d10c <std+0x54>
 800d100:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d108:	f000 b9cc 	b.w	800d4a4 <__retarget_lock_init_recursive>
 800d10c:	bd10      	pop	{r4, pc}
 800d10e:	bf00      	nop
 800d110:	0800d27d 	.word	0x0800d27d
 800d114:	0800d29f 	.word	0x0800d29f
 800d118:	0800d2d7 	.word	0x0800d2d7
 800d11c:	0800d2fb 	.word	0x0800d2fb
 800d120:	200008f4 	.word	0x200008f4

0800d124 <stdio_exit_handler>:
 800d124:	4a02      	ldr	r2, [pc, #8]	@ (800d130 <stdio_exit_handler+0xc>)
 800d126:	4903      	ldr	r1, [pc, #12]	@ (800d134 <stdio_exit_handler+0x10>)
 800d128:	4803      	ldr	r0, [pc, #12]	@ (800d138 <stdio_exit_handler+0x14>)
 800d12a:	f000 b869 	b.w	800d200 <_fwalk_sglue>
 800d12e:	bf00      	nop
 800d130:	200002cc 	.word	0x200002cc
 800d134:	0800ecc1 	.word	0x0800ecc1
 800d138:	200002dc 	.word	0x200002dc

0800d13c <cleanup_stdio>:
 800d13c:	6841      	ldr	r1, [r0, #4]
 800d13e:	4b0c      	ldr	r3, [pc, #48]	@ (800d170 <cleanup_stdio+0x34>)
 800d140:	4299      	cmp	r1, r3
 800d142:	b510      	push	{r4, lr}
 800d144:	4604      	mov	r4, r0
 800d146:	d001      	beq.n	800d14c <cleanup_stdio+0x10>
 800d148:	f001 fdba 	bl	800ecc0 <_fflush_r>
 800d14c:	68a1      	ldr	r1, [r4, #8]
 800d14e:	4b09      	ldr	r3, [pc, #36]	@ (800d174 <cleanup_stdio+0x38>)
 800d150:	4299      	cmp	r1, r3
 800d152:	d002      	beq.n	800d15a <cleanup_stdio+0x1e>
 800d154:	4620      	mov	r0, r4
 800d156:	f001 fdb3 	bl	800ecc0 <_fflush_r>
 800d15a:	68e1      	ldr	r1, [r4, #12]
 800d15c:	4b06      	ldr	r3, [pc, #24]	@ (800d178 <cleanup_stdio+0x3c>)
 800d15e:	4299      	cmp	r1, r3
 800d160:	d004      	beq.n	800d16c <cleanup_stdio+0x30>
 800d162:	4620      	mov	r0, r4
 800d164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d168:	f001 bdaa 	b.w	800ecc0 <_fflush_r>
 800d16c:	bd10      	pop	{r4, pc}
 800d16e:	bf00      	nop
 800d170:	200008f4 	.word	0x200008f4
 800d174:	2000095c 	.word	0x2000095c
 800d178:	200009c4 	.word	0x200009c4

0800d17c <global_stdio_init.part.0>:
 800d17c:	b510      	push	{r4, lr}
 800d17e:	4b0b      	ldr	r3, [pc, #44]	@ (800d1ac <global_stdio_init.part.0+0x30>)
 800d180:	4c0b      	ldr	r4, [pc, #44]	@ (800d1b0 <global_stdio_init.part.0+0x34>)
 800d182:	4a0c      	ldr	r2, [pc, #48]	@ (800d1b4 <global_stdio_init.part.0+0x38>)
 800d184:	601a      	str	r2, [r3, #0]
 800d186:	4620      	mov	r0, r4
 800d188:	2200      	movs	r2, #0
 800d18a:	2104      	movs	r1, #4
 800d18c:	f7ff ff94 	bl	800d0b8 <std>
 800d190:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d194:	2201      	movs	r2, #1
 800d196:	2109      	movs	r1, #9
 800d198:	f7ff ff8e 	bl	800d0b8 <std>
 800d19c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d1a0:	2202      	movs	r2, #2
 800d1a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1a6:	2112      	movs	r1, #18
 800d1a8:	f7ff bf86 	b.w	800d0b8 <std>
 800d1ac:	20000a2c 	.word	0x20000a2c
 800d1b0:	200008f4 	.word	0x200008f4
 800d1b4:	0800d125 	.word	0x0800d125

0800d1b8 <__sfp_lock_acquire>:
 800d1b8:	4801      	ldr	r0, [pc, #4]	@ (800d1c0 <__sfp_lock_acquire+0x8>)
 800d1ba:	f000 b974 	b.w	800d4a6 <__retarget_lock_acquire_recursive>
 800d1be:	bf00      	nop
 800d1c0:	20000a35 	.word	0x20000a35

0800d1c4 <__sfp_lock_release>:
 800d1c4:	4801      	ldr	r0, [pc, #4]	@ (800d1cc <__sfp_lock_release+0x8>)
 800d1c6:	f000 b96f 	b.w	800d4a8 <__retarget_lock_release_recursive>
 800d1ca:	bf00      	nop
 800d1cc:	20000a35 	.word	0x20000a35

0800d1d0 <__sinit>:
 800d1d0:	b510      	push	{r4, lr}
 800d1d2:	4604      	mov	r4, r0
 800d1d4:	f7ff fff0 	bl	800d1b8 <__sfp_lock_acquire>
 800d1d8:	6a23      	ldr	r3, [r4, #32]
 800d1da:	b11b      	cbz	r3, 800d1e4 <__sinit+0x14>
 800d1dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1e0:	f7ff bff0 	b.w	800d1c4 <__sfp_lock_release>
 800d1e4:	4b04      	ldr	r3, [pc, #16]	@ (800d1f8 <__sinit+0x28>)
 800d1e6:	6223      	str	r3, [r4, #32]
 800d1e8:	4b04      	ldr	r3, [pc, #16]	@ (800d1fc <__sinit+0x2c>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d1f5      	bne.n	800d1dc <__sinit+0xc>
 800d1f0:	f7ff ffc4 	bl	800d17c <global_stdio_init.part.0>
 800d1f4:	e7f2      	b.n	800d1dc <__sinit+0xc>
 800d1f6:	bf00      	nop
 800d1f8:	0800d13d 	.word	0x0800d13d
 800d1fc:	20000a2c 	.word	0x20000a2c

0800d200 <_fwalk_sglue>:
 800d200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d204:	4607      	mov	r7, r0
 800d206:	4688      	mov	r8, r1
 800d208:	4614      	mov	r4, r2
 800d20a:	2600      	movs	r6, #0
 800d20c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d210:	f1b9 0901 	subs.w	r9, r9, #1
 800d214:	d505      	bpl.n	800d222 <_fwalk_sglue+0x22>
 800d216:	6824      	ldr	r4, [r4, #0]
 800d218:	2c00      	cmp	r4, #0
 800d21a:	d1f7      	bne.n	800d20c <_fwalk_sglue+0xc>
 800d21c:	4630      	mov	r0, r6
 800d21e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d222:	89ab      	ldrh	r3, [r5, #12]
 800d224:	2b01      	cmp	r3, #1
 800d226:	d907      	bls.n	800d238 <_fwalk_sglue+0x38>
 800d228:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d22c:	3301      	adds	r3, #1
 800d22e:	d003      	beq.n	800d238 <_fwalk_sglue+0x38>
 800d230:	4629      	mov	r1, r5
 800d232:	4638      	mov	r0, r7
 800d234:	47c0      	blx	r8
 800d236:	4306      	orrs	r6, r0
 800d238:	3568      	adds	r5, #104	@ 0x68
 800d23a:	e7e9      	b.n	800d210 <_fwalk_sglue+0x10>

0800d23c <siprintf>:
 800d23c:	b40e      	push	{r1, r2, r3}
 800d23e:	b500      	push	{lr}
 800d240:	b09c      	sub	sp, #112	@ 0x70
 800d242:	ab1d      	add	r3, sp, #116	@ 0x74
 800d244:	9002      	str	r0, [sp, #8]
 800d246:	9006      	str	r0, [sp, #24]
 800d248:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d24c:	4809      	ldr	r0, [pc, #36]	@ (800d274 <siprintf+0x38>)
 800d24e:	9107      	str	r1, [sp, #28]
 800d250:	9104      	str	r1, [sp, #16]
 800d252:	4909      	ldr	r1, [pc, #36]	@ (800d278 <siprintf+0x3c>)
 800d254:	f853 2b04 	ldr.w	r2, [r3], #4
 800d258:	9105      	str	r1, [sp, #20]
 800d25a:	6800      	ldr	r0, [r0, #0]
 800d25c:	9301      	str	r3, [sp, #4]
 800d25e:	a902      	add	r1, sp, #8
 800d260:	f001 fbae 	bl	800e9c0 <_svfiprintf_r>
 800d264:	9b02      	ldr	r3, [sp, #8]
 800d266:	2200      	movs	r2, #0
 800d268:	701a      	strb	r2, [r3, #0]
 800d26a:	b01c      	add	sp, #112	@ 0x70
 800d26c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d270:	b003      	add	sp, #12
 800d272:	4770      	bx	lr
 800d274:	200002d8 	.word	0x200002d8
 800d278:	ffff0208 	.word	0xffff0208

0800d27c <__sread>:
 800d27c:	b510      	push	{r4, lr}
 800d27e:	460c      	mov	r4, r1
 800d280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d284:	f000 f89c 	bl	800d3c0 <_read_r>
 800d288:	2800      	cmp	r0, #0
 800d28a:	bfab      	itete	ge
 800d28c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d28e:	89a3      	ldrhlt	r3, [r4, #12]
 800d290:	181b      	addge	r3, r3, r0
 800d292:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d296:	bfac      	ite	ge
 800d298:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d29a:	81a3      	strhlt	r3, [r4, #12]
 800d29c:	bd10      	pop	{r4, pc}

0800d29e <__swrite>:
 800d29e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2a2:	461f      	mov	r7, r3
 800d2a4:	898b      	ldrh	r3, [r1, #12]
 800d2a6:	05db      	lsls	r3, r3, #23
 800d2a8:	4605      	mov	r5, r0
 800d2aa:	460c      	mov	r4, r1
 800d2ac:	4616      	mov	r6, r2
 800d2ae:	d505      	bpl.n	800d2bc <__swrite+0x1e>
 800d2b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2b4:	2302      	movs	r3, #2
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	f000 f870 	bl	800d39c <_lseek_r>
 800d2bc:	89a3      	ldrh	r3, [r4, #12]
 800d2be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d2c6:	81a3      	strh	r3, [r4, #12]
 800d2c8:	4632      	mov	r2, r6
 800d2ca:	463b      	mov	r3, r7
 800d2cc:	4628      	mov	r0, r5
 800d2ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2d2:	f000 b8ab 	b.w	800d42c <_write_r>

0800d2d6 <__sseek>:
 800d2d6:	b510      	push	{r4, lr}
 800d2d8:	460c      	mov	r4, r1
 800d2da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2de:	f000 f85d 	bl	800d39c <_lseek_r>
 800d2e2:	1c43      	adds	r3, r0, #1
 800d2e4:	89a3      	ldrh	r3, [r4, #12]
 800d2e6:	bf15      	itete	ne
 800d2e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d2ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d2ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d2f2:	81a3      	strheq	r3, [r4, #12]
 800d2f4:	bf18      	it	ne
 800d2f6:	81a3      	strhne	r3, [r4, #12]
 800d2f8:	bd10      	pop	{r4, pc}

0800d2fa <__sclose>:
 800d2fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2fe:	f000 b83d 	b.w	800d37c <_close_r>

0800d302 <memset>:
 800d302:	4402      	add	r2, r0
 800d304:	4603      	mov	r3, r0
 800d306:	4293      	cmp	r3, r2
 800d308:	d100      	bne.n	800d30c <memset+0xa>
 800d30a:	4770      	bx	lr
 800d30c:	f803 1b01 	strb.w	r1, [r3], #1
 800d310:	e7f9      	b.n	800d306 <memset+0x4>

0800d312 <_raise_r>:
 800d312:	291f      	cmp	r1, #31
 800d314:	b538      	push	{r3, r4, r5, lr}
 800d316:	4605      	mov	r5, r0
 800d318:	460c      	mov	r4, r1
 800d31a:	d904      	bls.n	800d326 <_raise_r+0x14>
 800d31c:	2316      	movs	r3, #22
 800d31e:	6003      	str	r3, [r0, #0]
 800d320:	f04f 30ff 	mov.w	r0, #4294967295
 800d324:	bd38      	pop	{r3, r4, r5, pc}
 800d326:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d328:	b112      	cbz	r2, 800d330 <_raise_r+0x1e>
 800d32a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d32e:	b94b      	cbnz	r3, 800d344 <_raise_r+0x32>
 800d330:	4628      	mov	r0, r5
 800d332:	f000 f869 	bl	800d408 <_getpid_r>
 800d336:	4622      	mov	r2, r4
 800d338:	4601      	mov	r1, r0
 800d33a:	4628      	mov	r0, r5
 800d33c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d340:	f000 b850 	b.w	800d3e4 <_kill_r>
 800d344:	2b01      	cmp	r3, #1
 800d346:	d00a      	beq.n	800d35e <_raise_r+0x4c>
 800d348:	1c59      	adds	r1, r3, #1
 800d34a:	d103      	bne.n	800d354 <_raise_r+0x42>
 800d34c:	2316      	movs	r3, #22
 800d34e:	6003      	str	r3, [r0, #0]
 800d350:	2001      	movs	r0, #1
 800d352:	e7e7      	b.n	800d324 <_raise_r+0x12>
 800d354:	2100      	movs	r1, #0
 800d356:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d35a:	4620      	mov	r0, r4
 800d35c:	4798      	blx	r3
 800d35e:	2000      	movs	r0, #0
 800d360:	e7e0      	b.n	800d324 <_raise_r+0x12>
	...

0800d364 <raise>:
 800d364:	4b02      	ldr	r3, [pc, #8]	@ (800d370 <raise+0xc>)
 800d366:	4601      	mov	r1, r0
 800d368:	6818      	ldr	r0, [r3, #0]
 800d36a:	f7ff bfd2 	b.w	800d312 <_raise_r>
 800d36e:	bf00      	nop
 800d370:	200002d8 	.word	0x200002d8

0800d374 <_localeconv_r>:
 800d374:	4800      	ldr	r0, [pc, #0]	@ (800d378 <_localeconv_r+0x4>)
 800d376:	4770      	bx	lr
 800d378:	20000418 	.word	0x20000418

0800d37c <_close_r>:
 800d37c:	b538      	push	{r3, r4, r5, lr}
 800d37e:	4d06      	ldr	r5, [pc, #24]	@ (800d398 <_close_r+0x1c>)
 800d380:	2300      	movs	r3, #0
 800d382:	4604      	mov	r4, r0
 800d384:	4608      	mov	r0, r1
 800d386:	602b      	str	r3, [r5, #0]
 800d388:	f7f5 fde4 	bl	8002f54 <_close>
 800d38c:	1c43      	adds	r3, r0, #1
 800d38e:	d102      	bne.n	800d396 <_close_r+0x1a>
 800d390:	682b      	ldr	r3, [r5, #0]
 800d392:	b103      	cbz	r3, 800d396 <_close_r+0x1a>
 800d394:	6023      	str	r3, [r4, #0]
 800d396:	bd38      	pop	{r3, r4, r5, pc}
 800d398:	20000a30 	.word	0x20000a30

0800d39c <_lseek_r>:
 800d39c:	b538      	push	{r3, r4, r5, lr}
 800d39e:	4d07      	ldr	r5, [pc, #28]	@ (800d3bc <_lseek_r+0x20>)
 800d3a0:	4604      	mov	r4, r0
 800d3a2:	4608      	mov	r0, r1
 800d3a4:	4611      	mov	r1, r2
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	602a      	str	r2, [r5, #0]
 800d3aa:	461a      	mov	r2, r3
 800d3ac:	f7f5 fdf9 	bl	8002fa2 <_lseek>
 800d3b0:	1c43      	adds	r3, r0, #1
 800d3b2:	d102      	bne.n	800d3ba <_lseek_r+0x1e>
 800d3b4:	682b      	ldr	r3, [r5, #0]
 800d3b6:	b103      	cbz	r3, 800d3ba <_lseek_r+0x1e>
 800d3b8:	6023      	str	r3, [r4, #0]
 800d3ba:	bd38      	pop	{r3, r4, r5, pc}
 800d3bc:	20000a30 	.word	0x20000a30

0800d3c0 <_read_r>:
 800d3c0:	b538      	push	{r3, r4, r5, lr}
 800d3c2:	4d07      	ldr	r5, [pc, #28]	@ (800d3e0 <_read_r+0x20>)
 800d3c4:	4604      	mov	r4, r0
 800d3c6:	4608      	mov	r0, r1
 800d3c8:	4611      	mov	r1, r2
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	602a      	str	r2, [r5, #0]
 800d3ce:	461a      	mov	r2, r3
 800d3d0:	f7f5 fd87 	bl	8002ee2 <_read>
 800d3d4:	1c43      	adds	r3, r0, #1
 800d3d6:	d102      	bne.n	800d3de <_read_r+0x1e>
 800d3d8:	682b      	ldr	r3, [r5, #0]
 800d3da:	b103      	cbz	r3, 800d3de <_read_r+0x1e>
 800d3dc:	6023      	str	r3, [r4, #0]
 800d3de:	bd38      	pop	{r3, r4, r5, pc}
 800d3e0:	20000a30 	.word	0x20000a30

0800d3e4 <_kill_r>:
 800d3e4:	b538      	push	{r3, r4, r5, lr}
 800d3e6:	4d07      	ldr	r5, [pc, #28]	@ (800d404 <_kill_r+0x20>)
 800d3e8:	2300      	movs	r3, #0
 800d3ea:	4604      	mov	r4, r0
 800d3ec:	4608      	mov	r0, r1
 800d3ee:	4611      	mov	r1, r2
 800d3f0:	602b      	str	r3, [r5, #0]
 800d3f2:	f7f5 fd5b 	bl	8002eac <_kill>
 800d3f6:	1c43      	adds	r3, r0, #1
 800d3f8:	d102      	bne.n	800d400 <_kill_r+0x1c>
 800d3fa:	682b      	ldr	r3, [r5, #0]
 800d3fc:	b103      	cbz	r3, 800d400 <_kill_r+0x1c>
 800d3fe:	6023      	str	r3, [r4, #0]
 800d400:	bd38      	pop	{r3, r4, r5, pc}
 800d402:	bf00      	nop
 800d404:	20000a30 	.word	0x20000a30

0800d408 <_getpid_r>:
 800d408:	f7f5 bd48 	b.w	8002e9c <_getpid>

0800d40c <_sbrk_r>:
 800d40c:	b538      	push	{r3, r4, r5, lr}
 800d40e:	4d06      	ldr	r5, [pc, #24]	@ (800d428 <_sbrk_r+0x1c>)
 800d410:	2300      	movs	r3, #0
 800d412:	4604      	mov	r4, r0
 800d414:	4608      	mov	r0, r1
 800d416:	602b      	str	r3, [r5, #0]
 800d418:	f7f5 fdd0 	bl	8002fbc <_sbrk>
 800d41c:	1c43      	adds	r3, r0, #1
 800d41e:	d102      	bne.n	800d426 <_sbrk_r+0x1a>
 800d420:	682b      	ldr	r3, [r5, #0]
 800d422:	b103      	cbz	r3, 800d426 <_sbrk_r+0x1a>
 800d424:	6023      	str	r3, [r4, #0]
 800d426:	bd38      	pop	{r3, r4, r5, pc}
 800d428:	20000a30 	.word	0x20000a30

0800d42c <_write_r>:
 800d42c:	b538      	push	{r3, r4, r5, lr}
 800d42e:	4d07      	ldr	r5, [pc, #28]	@ (800d44c <_write_r+0x20>)
 800d430:	4604      	mov	r4, r0
 800d432:	4608      	mov	r0, r1
 800d434:	4611      	mov	r1, r2
 800d436:	2200      	movs	r2, #0
 800d438:	602a      	str	r2, [r5, #0]
 800d43a:	461a      	mov	r2, r3
 800d43c:	f7f5 fd6e 	bl	8002f1c <_write>
 800d440:	1c43      	adds	r3, r0, #1
 800d442:	d102      	bne.n	800d44a <_write_r+0x1e>
 800d444:	682b      	ldr	r3, [r5, #0]
 800d446:	b103      	cbz	r3, 800d44a <_write_r+0x1e>
 800d448:	6023      	str	r3, [r4, #0]
 800d44a:	bd38      	pop	{r3, r4, r5, pc}
 800d44c:	20000a30 	.word	0x20000a30

0800d450 <__errno>:
 800d450:	4b01      	ldr	r3, [pc, #4]	@ (800d458 <__errno+0x8>)
 800d452:	6818      	ldr	r0, [r3, #0]
 800d454:	4770      	bx	lr
 800d456:	bf00      	nop
 800d458:	200002d8 	.word	0x200002d8

0800d45c <__libc_init_array>:
 800d45c:	b570      	push	{r4, r5, r6, lr}
 800d45e:	4d0d      	ldr	r5, [pc, #52]	@ (800d494 <__libc_init_array+0x38>)
 800d460:	4c0d      	ldr	r4, [pc, #52]	@ (800d498 <__libc_init_array+0x3c>)
 800d462:	1b64      	subs	r4, r4, r5
 800d464:	10a4      	asrs	r4, r4, #2
 800d466:	2600      	movs	r6, #0
 800d468:	42a6      	cmp	r6, r4
 800d46a:	d109      	bne.n	800d480 <__libc_init_array+0x24>
 800d46c:	4d0b      	ldr	r5, [pc, #44]	@ (800d49c <__libc_init_array+0x40>)
 800d46e:	4c0c      	ldr	r4, [pc, #48]	@ (800d4a0 <__libc_init_array+0x44>)
 800d470:	f001 ff5c 	bl	800f32c <_init>
 800d474:	1b64      	subs	r4, r4, r5
 800d476:	10a4      	asrs	r4, r4, #2
 800d478:	2600      	movs	r6, #0
 800d47a:	42a6      	cmp	r6, r4
 800d47c:	d105      	bne.n	800d48a <__libc_init_array+0x2e>
 800d47e:	bd70      	pop	{r4, r5, r6, pc}
 800d480:	f855 3b04 	ldr.w	r3, [r5], #4
 800d484:	4798      	blx	r3
 800d486:	3601      	adds	r6, #1
 800d488:	e7ee      	b.n	800d468 <__libc_init_array+0xc>
 800d48a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d48e:	4798      	blx	r3
 800d490:	3601      	adds	r6, #1
 800d492:	e7f2      	b.n	800d47a <__libc_init_array+0x1e>
 800d494:	0800f7b8 	.word	0x0800f7b8
 800d498:	0800f7b8 	.word	0x0800f7b8
 800d49c:	0800f7b8 	.word	0x0800f7b8
 800d4a0:	0800f7bc 	.word	0x0800f7bc

0800d4a4 <__retarget_lock_init_recursive>:
 800d4a4:	4770      	bx	lr

0800d4a6 <__retarget_lock_acquire_recursive>:
 800d4a6:	4770      	bx	lr

0800d4a8 <__retarget_lock_release_recursive>:
 800d4a8:	4770      	bx	lr

0800d4aa <strcpy>:
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d4b0:	f803 2b01 	strb.w	r2, [r3], #1
 800d4b4:	2a00      	cmp	r2, #0
 800d4b6:	d1f9      	bne.n	800d4ac <strcpy+0x2>
 800d4b8:	4770      	bx	lr

0800d4ba <memcpy>:
 800d4ba:	440a      	add	r2, r1
 800d4bc:	4291      	cmp	r1, r2
 800d4be:	f100 33ff 	add.w	r3, r0, #4294967295
 800d4c2:	d100      	bne.n	800d4c6 <memcpy+0xc>
 800d4c4:	4770      	bx	lr
 800d4c6:	b510      	push	{r4, lr}
 800d4c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d4d0:	4291      	cmp	r1, r2
 800d4d2:	d1f9      	bne.n	800d4c8 <memcpy+0xe>
 800d4d4:	bd10      	pop	{r4, pc}

0800d4d6 <quorem>:
 800d4d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4da:	6903      	ldr	r3, [r0, #16]
 800d4dc:	690c      	ldr	r4, [r1, #16]
 800d4de:	42a3      	cmp	r3, r4
 800d4e0:	4607      	mov	r7, r0
 800d4e2:	db7e      	blt.n	800d5e2 <quorem+0x10c>
 800d4e4:	3c01      	subs	r4, #1
 800d4e6:	f101 0814 	add.w	r8, r1, #20
 800d4ea:	00a3      	lsls	r3, r4, #2
 800d4ec:	f100 0514 	add.w	r5, r0, #20
 800d4f0:	9300      	str	r3, [sp, #0]
 800d4f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d4f6:	9301      	str	r3, [sp, #4]
 800d4f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d4fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d500:	3301      	adds	r3, #1
 800d502:	429a      	cmp	r2, r3
 800d504:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d508:	fbb2 f6f3 	udiv	r6, r2, r3
 800d50c:	d32e      	bcc.n	800d56c <quorem+0x96>
 800d50e:	f04f 0a00 	mov.w	sl, #0
 800d512:	46c4      	mov	ip, r8
 800d514:	46ae      	mov	lr, r5
 800d516:	46d3      	mov	fp, sl
 800d518:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d51c:	b298      	uxth	r0, r3
 800d51e:	fb06 a000 	mla	r0, r6, r0, sl
 800d522:	0c02      	lsrs	r2, r0, #16
 800d524:	0c1b      	lsrs	r3, r3, #16
 800d526:	fb06 2303 	mla	r3, r6, r3, r2
 800d52a:	f8de 2000 	ldr.w	r2, [lr]
 800d52e:	b280      	uxth	r0, r0
 800d530:	b292      	uxth	r2, r2
 800d532:	1a12      	subs	r2, r2, r0
 800d534:	445a      	add	r2, fp
 800d536:	f8de 0000 	ldr.w	r0, [lr]
 800d53a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d53e:	b29b      	uxth	r3, r3
 800d540:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d544:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d548:	b292      	uxth	r2, r2
 800d54a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d54e:	45e1      	cmp	r9, ip
 800d550:	f84e 2b04 	str.w	r2, [lr], #4
 800d554:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d558:	d2de      	bcs.n	800d518 <quorem+0x42>
 800d55a:	9b00      	ldr	r3, [sp, #0]
 800d55c:	58eb      	ldr	r3, [r5, r3]
 800d55e:	b92b      	cbnz	r3, 800d56c <quorem+0x96>
 800d560:	9b01      	ldr	r3, [sp, #4]
 800d562:	3b04      	subs	r3, #4
 800d564:	429d      	cmp	r5, r3
 800d566:	461a      	mov	r2, r3
 800d568:	d32f      	bcc.n	800d5ca <quorem+0xf4>
 800d56a:	613c      	str	r4, [r7, #16]
 800d56c:	4638      	mov	r0, r7
 800d56e:	f001 f8c3 	bl	800e6f8 <__mcmp>
 800d572:	2800      	cmp	r0, #0
 800d574:	db25      	blt.n	800d5c2 <quorem+0xec>
 800d576:	4629      	mov	r1, r5
 800d578:	2000      	movs	r0, #0
 800d57a:	f858 2b04 	ldr.w	r2, [r8], #4
 800d57e:	f8d1 c000 	ldr.w	ip, [r1]
 800d582:	fa1f fe82 	uxth.w	lr, r2
 800d586:	fa1f f38c 	uxth.w	r3, ip
 800d58a:	eba3 030e 	sub.w	r3, r3, lr
 800d58e:	4403      	add	r3, r0
 800d590:	0c12      	lsrs	r2, r2, #16
 800d592:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d596:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d59a:	b29b      	uxth	r3, r3
 800d59c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d5a0:	45c1      	cmp	r9, r8
 800d5a2:	f841 3b04 	str.w	r3, [r1], #4
 800d5a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d5aa:	d2e6      	bcs.n	800d57a <quorem+0xa4>
 800d5ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d5b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d5b4:	b922      	cbnz	r2, 800d5c0 <quorem+0xea>
 800d5b6:	3b04      	subs	r3, #4
 800d5b8:	429d      	cmp	r5, r3
 800d5ba:	461a      	mov	r2, r3
 800d5bc:	d30b      	bcc.n	800d5d6 <quorem+0x100>
 800d5be:	613c      	str	r4, [r7, #16]
 800d5c0:	3601      	adds	r6, #1
 800d5c2:	4630      	mov	r0, r6
 800d5c4:	b003      	add	sp, #12
 800d5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ca:	6812      	ldr	r2, [r2, #0]
 800d5cc:	3b04      	subs	r3, #4
 800d5ce:	2a00      	cmp	r2, #0
 800d5d0:	d1cb      	bne.n	800d56a <quorem+0x94>
 800d5d2:	3c01      	subs	r4, #1
 800d5d4:	e7c6      	b.n	800d564 <quorem+0x8e>
 800d5d6:	6812      	ldr	r2, [r2, #0]
 800d5d8:	3b04      	subs	r3, #4
 800d5da:	2a00      	cmp	r2, #0
 800d5dc:	d1ef      	bne.n	800d5be <quorem+0xe8>
 800d5de:	3c01      	subs	r4, #1
 800d5e0:	e7ea      	b.n	800d5b8 <quorem+0xe2>
 800d5e2:	2000      	movs	r0, #0
 800d5e4:	e7ee      	b.n	800d5c4 <quorem+0xee>
	...

0800d5e8 <_dtoa_r>:
 800d5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ec:	69c7      	ldr	r7, [r0, #28]
 800d5ee:	b099      	sub	sp, #100	@ 0x64
 800d5f0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d5f4:	ec55 4b10 	vmov	r4, r5, d0
 800d5f8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d5fa:	9109      	str	r1, [sp, #36]	@ 0x24
 800d5fc:	4683      	mov	fp, r0
 800d5fe:	920e      	str	r2, [sp, #56]	@ 0x38
 800d600:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d602:	b97f      	cbnz	r7, 800d624 <_dtoa_r+0x3c>
 800d604:	2010      	movs	r0, #16
 800d606:	f7ff f841 	bl	800c68c <malloc>
 800d60a:	4602      	mov	r2, r0
 800d60c:	f8cb 001c 	str.w	r0, [fp, #28]
 800d610:	b920      	cbnz	r0, 800d61c <_dtoa_r+0x34>
 800d612:	4ba7      	ldr	r3, [pc, #668]	@ (800d8b0 <_dtoa_r+0x2c8>)
 800d614:	21ef      	movs	r1, #239	@ 0xef
 800d616:	48a7      	ldr	r0, [pc, #668]	@ (800d8b4 <_dtoa_r+0x2cc>)
 800d618:	f001 fb94 	bl	800ed44 <__assert_func>
 800d61c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d620:	6007      	str	r7, [r0, #0]
 800d622:	60c7      	str	r7, [r0, #12]
 800d624:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d628:	6819      	ldr	r1, [r3, #0]
 800d62a:	b159      	cbz	r1, 800d644 <_dtoa_r+0x5c>
 800d62c:	685a      	ldr	r2, [r3, #4]
 800d62e:	604a      	str	r2, [r1, #4]
 800d630:	2301      	movs	r3, #1
 800d632:	4093      	lsls	r3, r2
 800d634:	608b      	str	r3, [r1, #8]
 800d636:	4658      	mov	r0, fp
 800d638:	f000 fe24 	bl	800e284 <_Bfree>
 800d63c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d640:	2200      	movs	r2, #0
 800d642:	601a      	str	r2, [r3, #0]
 800d644:	1e2b      	subs	r3, r5, #0
 800d646:	bfb9      	ittee	lt
 800d648:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d64c:	9303      	strlt	r3, [sp, #12]
 800d64e:	2300      	movge	r3, #0
 800d650:	6033      	strge	r3, [r6, #0]
 800d652:	9f03      	ldr	r7, [sp, #12]
 800d654:	4b98      	ldr	r3, [pc, #608]	@ (800d8b8 <_dtoa_r+0x2d0>)
 800d656:	bfbc      	itt	lt
 800d658:	2201      	movlt	r2, #1
 800d65a:	6032      	strlt	r2, [r6, #0]
 800d65c:	43bb      	bics	r3, r7
 800d65e:	d112      	bne.n	800d686 <_dtoa_r+0x9e>
 800d660:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d662:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d666:	6013      	str	r3, [r2, #0]
 800d668:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d66c:	4323      	orrs	r3, r4
 800d66e:	f000 854d 	beq.w	800e10c <_dtoa_r+0xb24>
 800d672:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d674:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d8cc <_dtoa_r+0x2e4>
 800d678:	2b00      	cmp	r3, #0
 800d67a:	f000 854f 	beq.w	800e11c <_dtoa_r+0xb34>
 800d67e:	f10a 0303 	add.w	r3, sl, #3
 800d682:	f000 bd49 	b.w	800e118 <_dtoa_r+0xb30>
 800d686:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d68a:	2200      	movs	r2, #0
 800d68c:	ec51 0b17 	vmov	r0, r1, d7
 800d690:	2300      	movs	r3, #0
 800d692:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d696:	f7f3 fa1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800d69a:	4680      	mov	r8, r0
 800d69c:	b158      	cbz	r0, 800d6b6 <_dtoa_r+0xce>
 800d69e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	6013      	str	r3, [r2, #0]
 800d6a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d6a6:	b113      	cbz	r3, 800d6ae <_dtoa_r+0xc6>
 800d6a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d6aa:	4b84      	ldr	r3, [pc, #528]	@ (800d8bc <_dtoa_r+0x2d4>)
 800d6ac:	6013      	str	r3, [r2, #0]
 800d6ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d8d0 <_dtoa_r+0x2e8>
 800d6b2:	f000 bd33 	b.w	800e11c <_dtoa_r+0xb34>
 800d6b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d6ba:	aa16      	add	r2, sp, #88	@ 0x58
 800d6bc:	a917      	add	r1, sp, #92	@ 0x5c
 800d6be:	4658      	mov	r0, fp
 800d6c0:	f001 f8ca 	bl	800e858 <__d2b>
 800d6c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d6c8:	4681      	mov	r9, r0
 800d6ca:	2e00      	cmp	r6, #0
 800d6cc:	d077      	beq.n	800d7be <_dtoa_r+0x1d6>
 800d6ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d6d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d6d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d6d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d6dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d6e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d6e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	4b74      	ldr	r3, [pc, #464]	@ (800d8c0 <_dtoa_r+0x2d8>)
 800d6ee:	f7f2 fdd3 	bl	8000298 <__aeabi_dsub>
 800d6f2:	a369      	add	r3, pc, #420	@ (adr r3, 800d898 <_dtoa_r+0x2b0>)
 800d6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f8:	f7f2 ff86 	bl	8000608 <__aeabi_dmul>
 800d6fc:	a368      	add	r3, pc, #416	@ (adr r3, 800d8a0 <_dtoa_r+0x2b8>)
 800d6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d702:	f7f2 fdcb 	bl	800029c <__adddf3>
 800d706:	4604      	mov	r4, r0
 800d708:	4630      	mov	r0, r6
 800d70a:	460d      	mov	r5, r1
 800d70c:	f7f2 ff12 	bl	8000534 <__aeabi_i2d>
 800d710:	a365      	add	r3, pc, #404	@ (adr r3, 800d8a8 <_dtoa_r+0x2c0>)
 800d712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d716:	f7f2 ff77 	bl	8000608 <__aeabi_dmul>
 800d71a:	4602      	mov	r2, r0
 800d71c:	460b      	mov	r3, r1
 800d71e:	4620      	mov	r0, r4
 800d720:	4629      	mov	r1, r5
 800d722:	f7f2 fdbb 	bl	800029c <__adddf3>
 800d726:	4604      	mov	r4, r0
 800d728:	460d      	mov	r5, r1
 800d72a:	f7f3 fa1d 	bl	8000b68 <__aeabi_d2iz>
 800d72e:	2200      	movs	r2, #0
 800d730:	4607      	mov	r7, r0
 800d732:	2300      	movs	r3, #0
 800d734:	4620      	mov	r0, r4
 800d736:	4629      	mov	r1, r5
 800d738:	f7f3 f9d8 	bl	8000aec <__aeabi_dcmplt>
 800d73c:	b140      	cbz	r0, 800d750 <_dtoa_r+0x168>
 800d73e:	4638      	mov	r0, r7
 800d740:	f7f2 fef8 	bl	8000534 <__aeabi_i2d>
 800d744:	4622      	mov	r2, r4
 800d746:	462b      	mov	r3, r5
 800d748:	f7f3 f9c6 	bl	8000ad8 <__aeabi_dcmpeq>
 800d74c:	b900      	cbnz	r0, 800d750 <_dtoa_r+0x168>
 800d74e:	3f01      	subs	r7, #1
 800d750:	2f16      	cmp	r7, #22
 800d752:	d851      	bhi.n	800d7f8 <_dtoa_r+0x210>
 800d754:	4b5b      	ldr	r3, [pc, #364]	@ (800d8c4 <_dtoa_r+0x2dc>)
 800d756:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d75e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d762:	f7f3 f9c3 	bl	8000aec <__aeabi_dcmplt>
 800d766:	2800      	cmp	r0, #0
 800d768:	d048      	beq.n	800d7fc <_dtoa_r+0x214>
 800d76a:	3f01      	subs	r7, #1
 800d76c:	2300      	movs	r3, #0
 800d76e:	9312      	str	r3, [sp, #72]	@ 0x48
 800d770:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d772:	1b9b      	subs	r3, r3, r6
 800d774:	1e5a      	subs	r2, r3, #1
 800d776:	bf44      	itt	mi
 800d778:	f1c3 0801 	rsbmi	r8, r3, #1
 800d77c:	2300      	movmi	r3, #0
 800d77e:	9208      	str	r2, [sp, #32]
 800d780:	bf54      	ite	pl
 800d782:	f04f 0800 	movpl.w	r8, #0
 800d786:	9308      	strmi	r3, [sp, #32]
 800d788:	2f00      	cmp	r7, #0
 800d78a:	db39      	blt.n	800d800 <_dtoa_r+0x218>
 800d78c:	9b08      	ldr	r3, [sp, #32]
 800d78e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d790:	443b      	add	r3, r7
 800d792:	9308      	str	r3, [sp, #32]
 800d794:	2300      	movs	r3, #0
 800d796:	930a      	str	r3, [sp, #40]	@ 0x28
 800d798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d79a:	2b09      	cmp	r3, #9
 800d79c:	d864      	bhi.n	800d868 <_dtoa_r+0x280>
 800d79e:	2b05      	cmp	r3, #5
 800d7a0:	bfc4      	itt	gt
 800d7a2:	3b04      	subgt	r3, #4
 800d7a4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d7a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7a8:	f1a3 0302 	sub.w	r3, r3, #2
 800d7ac:	bfcc      	ite	gt
 800d7ae:	2400      	movgt	r4, #0
 800d7b0:	2401      	movle	r4, #1
 800d7b2:	2b03      	cmp	r3, #3
 800d7b4:	d863      	bhi.n	800d87e <_dtoa_r+0x296>
 800d7b6:	e8df f003 	tbb	[pc, r3]
 800d7ba:	372a      	.short	0x372a
 800d7bc:	5535      	.short	0x5535
 800d7be:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d7c2:	441e      	add	r6, r3
 800d7c4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d7c8:	2b20      	cmp	r3, #32
 800d7ca:	bfc1      	itttt	gt
 800d7cc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d7d0:	409f      	lslgt	r7, r3
 800d7d2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d7d6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d7da:	bfd6      	itet	le
 800d7dc:	f1c3 0320 	rsble	r3, r3, #32
 800d7e0:	ea47 0003 	orrgt.w	r0, r7, r3
 800d7e4:	fa04 f003 	lslle.w	r0, r4, r3
 800d7e8:	f7f2 fe94 	bl	8000514 <__aeabi_ui2d>
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d7f2:	3e01      	subs	r6, #1
 800d7f4:	9214      	str	r2, [sp, #80]	@ 0x50
 800d7f6:	e777      	b.n	800d6e8 <_dtoa_r+0x100>
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	e7b8      	b.n	800d76e <_dtoa_r+0x186>
 800d7fc:	9012      	str	r0, [sp, #72]	@ 0x48
 800d7fe:	e7b7      	b.n	800d770 <_dtoa_r+0x188>
 800d800:	427b      	negs	r3, r7
 800d802:	930a      	str	r3, [sp, #40]	@ 0x28
 800d804:	2300      	movs	r3, #0
 800d806:	eba8 0807 	sub.w	r8, r8, r7
 800d80a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d80c:	e7c4      	b.n	800d798 <_dtoa_r+0x1b0>
 800d80e:	2300      	movs	r3, #0
 800d810:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d812:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d814:	2b00      	cmp	r3, #0
 800d816:	dc35      	bgt.n	800d884 <_dtoa_r+0x29c>
 800d818:	2301      	movs	r3, #1
 800d81a:	9300      	str	r3, [sp, #0]
 800d81c:	9307      	str	r3, [sp, #28]
 800d81e:	461a      	mov	r2, r3
 800d820:	920e      	str	r2, [sp, #56]	@ 0x38
 800d822:	e00b      	b.n	800d83c <_dtoa_r+0x254>
 800d824:	2301      	movs	r3, #1
 800d826:	e7f3      	b.n	800d810 <_dtoa_r+0x228>
 800d828:	2300      	movs	r3, #0
 800d82a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d82c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d82e:	18fb      	adds	r3, r7, r3
 800d830:	9300      	str	r3, [sp, #0]
 800d832:	3301      	adds	r3, #1
 800d834:	2b01      	cmp	r3, #1
 800d836:	9307      	str	r3, [sp, #28]
 800d838:	bfb8      	it	lt
 800d83a:	2301      	movlt	r3, #1
 800d83c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d840:	2100      	movs	r1, #0
 800d842:	2204      	movs	r2, #4
 800d844:	f102 0514 	add.w	r5, r2, #20
 800d848:	429d      	cmp	r5, r3
 800d84a:	d91f      	bls.n	800d88c <_dtoa_r+0x2a4>
 800d84c:	6041      	str	r1, [r0, #4]
 800d84e:	4658      	mov	r0, fp
 800d850:	f000 fcd8 	bl	800e204 <_Balloc>
 800d854:	4682      	mov	sl, r0
 800d856:	2800      	cmp	r0, #0
 800d858:	d13c      	bne.n	800d8d4 <_dtoa_r+0x2ec>
 800d85a:	4b1b      	ldr	r3, [pc, #108]	@ (800d8c8 <_dtoa_r+0x2e0>)
 800d85c:	4602      	mov	r2, r0
 800d85e:	f240 11af 	movw	r1, #431	@ 0x1af
 800d862:	e6d8      	b.n	800d616 <_dtoa_r+0x2e>
 800d864:	2301      	movs	r3, #1
 800d866:	e7e0      	b.n	800d82a <_dtoa_r+0x242>
 800d868:	2401      	movs	r4, #1
 800d86a:	2300      	movs	r3, #0
 800d86c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d86e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d870:	f04f 33ff 	mov.w	r3, #4294967295
 800d874:	9300      	str	r3, [sp, #0]
 800d876:	9307      	str	r3, [sp, #28]
 800d878:	2200      	movs	r2, #0
 800d87a:	2312      	movs	r3, #18
 800d87c:	e7d0      	b.n	800d820 <_dtoa_r+0x238>
 800d87e:	2301      	movs	r3, #1
 800d880:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d882:	e7f5      	b.n	800d870 <_dtoa_r+0x288>
 800d884:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d886:	9300      	str	r3, [sp, #0]
 800d888:	9307      	str	r3, [sp, #28]
 800d88a:	e7d7      	b.n	800d83c <_dtoa_r+0x254>
 800d88c:	3101      	adds	r1, #1
 800d88e:	0052      	lsls	r2, r2, #1
 800d890:	e7d8      	b.n	800d844 <_dtoa_r+0x25c>
 800d892:	bf00      	nop
 800d894:	f3af 8000 	nop.w
 800d898:	636f4361 	.word	0x636f4361
 800d89c:	3fd287a7 	.word	0x3fd287a7
 800d8a0:	8b60c8b3 	.word	0x8b60c8b3
 800d8a4:	3fc68a28 	.word	0x3fc68a28
 800d8a8:	509f79fb 	.word	0x509f79fb
 800d8ac:	3fd34413 	.word	0x3fd34413
 800d8b0:	0800f47d 	.word	0x0800f47d
 800d8b4:	0800f494 	.word	0x0800f494
 800d8b8:	7ff00000 	.word	0x7ff00000
 800d8bc:	0800f44d 	.word	0x0800f44d
 800d8c0:	3ff80000 	.word	0x3ff80000
 800d8c4:	0800f590 	.word	0x0800f590
 800d8c8:	0800f4ec 	.word	0x0800f4ec
 800d8cc:	0800f479 	.word	0x0800f479
 800d8d0:	0800f44c 	.word	0x0800f44c
 800d8d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d8d8:	6018      	str	r0, [r3, #0]
 800d8da:	9b07      	ldr	r3, [sp, #28]
 800d8dc:	2b0e      	cmp	r3, #14
 800d8de:	f200 80a4 	bhi.w	800da2a <_dtoa_r+0x442>
 800d8e2:	2c00      	cmp	r4, #0
 800d8e4:	f000 80a1 	beq.w	800da2a <_dtoa_r+0x442>
 800d8e8:	2f00      	cmp	r7, #0
 800d8ea:	dd33      	ble.n	800d954 <_dtoa_r+0x36c>
 800d8ec:	4bad      	ldr	r3, [pc, #692]	@ (800dba4 <_dtoa_r+0x5bc>)
 800d8ee:	f007 020f 	and.w	r2, r7, #15
 800d8f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d8f6:	ed93 7b00 	vldr	d7, [r3]
 800d8fa:	05f8      	lsls	r0, r7, #23
 800d8fc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d900:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d904:	d516      	bpl.n	800d934 <_dtoa_r+0x34c>
 800d906:	4ba8      	ldr	r3, [pc, #672]	@ (800dba8 <_dtoa_r+0x5c0>)
 800d908:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d90c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d910:	f7f2 ffa4 	bl	800085c <__aeabi_ddiv>
 800d914:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d918:	f004 040f 	and.w	r4, r4, #15
 800d91c:	2603      	movs	r6, #3
 800d91e:	4da2      	ldr	r5, [pc, #648]	@ (800dba8 <_dtoa_r+0x5c0>)
 800d920:	b954      	cbnz	r4, 800d938 <_dtoa_r+0x350>
 800d922:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d92a:	f7f2 ff97 	bl	800085c <__aeabi_ddiv>
 800d92e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d932:	e028      	b.n	800d986 <_dtoa_r+0x39e>
 800d934:	2602      	movs	r6, #2
 800d936:	e7f2      	b.n	800d91e <_dtoa_r+0x336>
 800d938:	07e1      	lsls	r1, r4, #31
 800d93a:	d508      	bpl.n	800d94e <_dtoa_r+0x366>
 800d93c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d940:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d944:	f7f2 fe60 	bl	8000608 <__aeabi_dmul>
 800d948:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d94c:	3601      	adds	r6, #1
 800d94e:	1064      	asrs	r4, r4, #1
 800d950:	3508      	adds	r5, #8
 800d952:	e7e5      	b.n	800d920 <_dtoa_r+0x338>
 800d954:	f000 80d2 	beq.w	800dafc <_dtoa_r+0x514>
 800d958:	427c      	negs	r4, r7
 800d95a:	4b92      	ldr	r3, [pc, #584]	@ (800dba4 <_dtoa_r+0x5bc>)
 800d95c:	4d92      	ldr	r5, [pc, #584]	@ (800dba8 <_dtoa_r+0x5c0>)
 800d95e:	f004 020f 	and.w	r2, r4, #15
 800d962:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d96a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d96e:	f7f2 fe4b 	bl	8000608 <__aeabi_dmul>
 800d972:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d976:	1124      	asrs	r4, r4, #4
 800d978:	2300      	movs	r3, #0
 800d97a:	2602      	movs	r6, #2
 800d97c:	2c00      	cmp	r4, #0
 800d97e:	f040 80b2 	bne.w	800dae6 <_dtoa_r+0x4fe>
 800d982:	2b00      	cmp	r3, #0
 800d984:	d1d3      	bne.n	800d92e <_dtoa_r+0x346>
 800d986:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d988:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	f000 80b7 	beq.w	800db00 <_dtoa_r+0x518>
 800d992:	4b86      	ldr	r3, [pc, #536]	@ (800dbac <_dtoa_r+0x5c4>)
 800d994:	2200      	movs	r2, #0
 800d996:	4620      	mov	r0, r4
 800d998:	4629      	mov	r1, r5
 800d99a:	f7f3 f8a7 	bl	8000aec <__aeabi_dcmplt>
 800d99e:	2800      	cmp	r0, #0
 800d9a0:	f000 80ae 	beq.w	800db00 <_dtoa_r+0x518>
 800d9a4:	9b07      	ldr	r3, [sp, #28]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	f000 80aa 	beq.w	800db00 <_dtoa_r+0x518>
 800d9ac:	9b00      	ldr	r3, [sp, #0]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	dd37      	ble.n	800da22 <_dtoa_r+0x43a>
 800d9b2:	1e7b      	subs	r3, r7, #1
 800d9b4:	9304      	str	r3, [sp, #16]
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	4b7d      	ldr	r3, [pc, #500]	@ (800dbb0 <_dtoa_r+0x5c8>)
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	4629      	mov	r1, r5
 800d9be:	f7f2 fe23 	bl	8000608 <__aeabi_dmul>
 800d9c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9c6:	9c00      	ldr	r4, [sp, #0]
 800d9c8:	3601      	adds	r6, #1
 800d9ca:	4630      	mov	r0, r6
 800d9cc:	f7f2 fdb2 	bl	8000534 <__aeabi_i2d>
 800d9d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d9d4:	f7f2 fe18 	bl	8000608 <__aeabi_dmul>
 800d9d8:	4b76      	ldr	r3, [pc, #472]	@ (800dbb4 <_dtoa_r+0x5cc>)
 800d9da:	2200      	movs	r2, #0
 800d9dc:	f7f2 fc5e 	bl	800029c <__adddf3>
 800d9e0:	4605      	mov	r5, r0
 800d9e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d9e6:	2c00      	cmp	r4, #0
 800d9e8:	f040 808d 	bne.w	800db06 <_dtoa_r+0x51e>
 800d9ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9f0:	4b71      	ldr	r3, [pc, #452]	@ (800dbb8 <_dtoa_r+0x5d0>)
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	f7f2 fc50 	bl	8000298 <__aeabi_dsub>
 800d9f8:	4602      	mov	r2, r0
 800d9fa:	460b      	mov	r3, r1
 800d9fc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800da00:	462a      	mov	r2, r5
 800da02:	4633      	mov	r3, r6
 800da04:	f7f3 f890 	bl	8000b28 <__aeabi_dcmpgt>
 800da08:	2800      	cmp	r0, #0
 800da0a:	f040 828b 	bne.w	800df24 <_dtoa_r+0x93c>
 800da0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da12:	462a      	mov	r2, r5
 800da14:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800da18:	f7f3 f868 	bl	8000aec <__aeabi_dcmplt>
 800da1c:	2800      	cmp	r0, #0
 800da1e:	f040 8128 	bne.w	800dc72 <_dtoa_r+0x68a>
 800da22:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800da26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800da2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	f2c0 815a 	blt.w	800dce6 <_dtoa_r+0x6fe>
 800da32:	2f0e      	cmp	r7, #14
 800da34:	f300 8157 	bgt.w	800dce6 <_dtoa_r+0x6fe>
 800da38:	4b5a      	ldr	r3, [pc, #360]	@ (800dba4 <_dtoa_r+0x5bc>)
 800da3a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800da3e:	ed93 7b00 	vldr	d7, [r3]
 800da42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800da44:	2b00      	cmp	r3, #0
 800da46:	ed8d 7b00 	vstr	d7, [sp]
 800da4a:	da03      	bge.n	800da54 <_dtoa_r+0x46c>
 800da4c:	9b07      	ldr	r3, [sp, #28]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	f340 8101 	ble.w	800dc56 <_dtoa_r+0x66e>
 800da54:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800da58:	4656      	mov	r6, sl
 800da5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da5e:	4620      	mov	r0, r4
 800da60:	4629      	mov	r1, r5
 800da62:	f7f2 fefb 	bl	800085c <__aeabi_ddiv>
 800da66:	f7f3 f87f 	bl	8000b68 <__aeabi_d2iz>
 800da6a:	4680      	mov	r8, r0
 800da6c:	f7f2 fd62 	bl	8000534 <__aeabi_i2d>
 800da70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800da74:	f7f2 fdc8 	bl	8000608 <__aeabi_dmul>
 800da78:	4602      	mov	r2, r0
 800da7a:	460b      	mov	r3, r1
 800da7c:	4620      	mov	r0, r4
 800da7e:	4629      	mov	r1, r5
 800da80:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800da84:	f7f2 fc08 	bl	8000298 <__aeabi_dsub>
 800da88:	f806 4b01 	strb.w	r4, [r6], #1
 800da8c:	9d07      	ldr	r5, [sp, #28]
 800da8e:	eba6 040a 	sub.w	r4, r6, sl
 800da92:	42a5      	cmp	r5, r4
 800da94:	4602      	mov	r2, r0
 800da96:	460b      	mov	r3, r1
 800da98:	f040 8117 	bne.w	800dcca <_dtoa_r+0x6e2>
 800da9c:	f7f2 fbfe 	bl	800029c <__adddf3>
 800daa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800daa4:	4604      	mov	r4, r0
 800daa6:	460d      	mov	r5, r1
 800daa8:	f7f3 f83e 	bl	8000b28 <__aeabi_dcmpgt>
 800daac:	2800      	cmp	r0, #0
 800daae:	f040 80f9 	bne.w	800dca4 <_dtoa_r+0x6bc>
 800dab2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dab6:	4620      	mov	r0, r4
 800dab8:	4629      	mov	r1, r5
 800daba:	f7f3 f80d 	bl	8000ad8 <__aeabi_dcmpeq>
 800dabe:	b118      	cbz	r0, 800dac8 <_dtoa_r+0x4e0>
 800dac0:	f018 0f01 	tst.w	r8, #1
 800dac4:	f040 80ee 	bne.w	800dca4 <_dtoa_r+0x6bc>
 800dac8:	4649      	mov	r1, r9
 800daca:	4658      	mov	r0, fp
 800dacc:	f000 fbda 	bl	800e284 <_Bfree>
 800dad0:	2300      	movs	r3, #0
 800dad2:	7033      	strb	r3, [r6, #0]
 800dad4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800dad6:	3701      	adds	r7, #1
 800dad8:	601f      	str	r7, [r3, #0]
 800dada:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dadc:	2b00      	cmp	r3, #0
 800dade:	f000 831d 	beq.w	800e11c <_dtoa_r+0xb34>
 800dae2:	601e      	str	r6, [r3, #0]
 800dae4:	e31a      	b.n	800e11c <_dtoa_r+0xb34>
 800dae6:	07e2      	lsls	r2, r4, #31
 800dae8:	d505      	bpl.n	800daf6 <_dtoa_r+0x50e>
 800daea:	e9d5 2300 	ldrd	r2, r3, [r5]
 800daee:	f7f2 fd8b 	bl	8000608 <__aeabi_dmul>
 800daf2:	3601      	adds	r6, #1
 800daf4:	2301      	movs	r3, #1
 800daf6:	1064      	asrs	r4, r4, #1
 800daf8:	3508      	adds	r5, #8
 800dafa:	e73f      	b.n	800d97c <_dtoa_r+0x394>
 800dafc:	2602      	movs	r6, #2
 800dafe:	e742      	b.n	800d986 <_dtoa_r+0x39e>
 800db00:	9c07      	ldr	r4, [sp, #28]
 800db02:	9704      	str	r7, [sp, #16]
 800db04:	e761      	b.n	800d9ca <_dtoa_r+0x3e2>
 800db06:	4b27      	ldr	r3, [pc, #156]	@ (800dba4 <_dtoa_r+0x5bc>)
 800db08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800db0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800db0e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800db12:	4454      	add	r4, sl
 800db14:	2900      	cmp	r1, #0
 800db16:	d053      	beq.n	800dbc0 <_dtoa_r+0x5d8>
 800db18:	4928      	ldr	r1, [pc, #160]	@ (800dbbc <_dtoa_r+0x5d4>)
 800db1a:	2000      	movs	r0, #0
 800db1c:	f7f2 fe9e 	bl	800085c <__aeabi_ddiv>
 800db20:	4633      	mov	r3, r6
 800db22:	462a      	mov	r2, r5
 800db24:	f7f2 fbb8 	bl	8000298 <__aeabi_dsub>
 800db28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800db2c:	4656      	mov	r6, sl
 800db2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db32:	f7f3 f819 	bl	8000b68 <__aeabi_d2iz>
 800db36:	4605      	mov	r5, r0
 800db38:	f7f2 fcfc 	bl	8000534 <__aeabi_i2d>
 800db3c:	4602      	mov	r2, r0
 800db3e:	460b      	mov	r3, r1
 800db40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db44:	f7f2 fba8 	bl	8000298 <__aeabi_dsub>
 800db48:	3530      	adds	r5, #48	@ 0x30
 800db4a:	4602      	mov	r2, r0
 800db4c:	460b      	mov	r3, r1
 800db4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800db52:	f806 5b01 	strb.w	r5, [r6], #1
 800db56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800db5a:	f7f2 ffc7 	bl	8000aec <__aeabi_dcmplt>
 800db5e:	2800      	cmp	r0, #0
 800db60:	d171      	bne.n	800dc46 <_dtoa_r+0x65e>
 800db62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800db66:	4911      	ldr	r1, [pc, #68]	@ (800dbac <_dtoa_r+0x5c4>)
 800db68:	2000      	movs	r0, #0
 800db6a:	f7f2 fb95 	bl	8000298 <__aeabi_dsub>
 800db6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800db72:	f7f2 ffbb 	bl	8000aec <__aeabi_dcmplt>
 800db76:	2800      	cmp	r0, #0
 800db78:	f040 8095 	bne.w	800dca6 <_dtoa_r+0x6be>
 800db7c:	42a6      	cmp	r6, r4
 800db7e:	f43f af50 	beq.w	800da22 <_dtoa_r+0x43a>
 800db82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800db86:	4b0a      	ldr	r3, [pc, #40]	@ (800dbb0 <_dtoa_r+0x5c8>)
 800db88:	2200      	movs	r2, #0
 800db8a:	f7f2 fd3d 	bl	8000608 <__aeabi_dmul>
 800db8e:	4b08      	ldr	r3, [pc, #32]	@ (800dbb0 <_dtoa_r+0x5c8>)
 800db90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800db94:	2200      	movs	r2, #0
 800db96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db9a:	f7f2 fd35 	bl	8000608 <__aeabi_dmul>
 800db9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dba2:	e7c4      	b.n	800db2e <_dtoa_r+0x546>
 800dba4:	0800f590 	.word	0x0800f590
 800dba8:	0800f568 	.word	0x0800f568
 800dbac:	3ff00000 	.word	0x3ff00000
 800dbb0:	40240000 	.word	0x40240000
 800dbb4:	401c0000 	.word	0x401c0000
 800dbb8:	40140000 	.word	0x40140000
 800dbbc:	3fe00000 	.word	0x3fe00000
 800dbc0:	4631      	mov	r1, r6
 800dbc2:	4628      	mov	r0, r5
 800dbc4:	f7f2 fd20 	bl	8000608 <__aeabi_dmul>
 800dbc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800dbcc:	9415      	str	r4, [sp, #84]	@ 0x54
 800dbce:	4656      	mov	r6, sl
 800dbd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dbd4:	f7f2 ffc8 	bl	8000b68 <__aeabi_d2iz>
 800dbd8:	4605      	mov	r5, r0
 800dbda:	f7f2 fcab 	bl	8000534 <__aeabi_i2d>
 800dbde:	4602      	mov	r2, r0
 800dbe0:	460b      	mov	r3, r1
 800dbe2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dbe6:	f7f2 fb57 	bl	8000298 <__aeabi_dsub>
 800dbea:	3530      	adds	r5, #48	@ 0x30
 800dbec:	f806 5b01 	strb.w	r5, [r6], #1
 800dbf0:	4602      	mov	r2, r0
 800dbf2:	460b      	mov	r3, r1
 800dbf4:	42a6      	cmp	r6, r4
 800dbf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dbfa:	f04f 0200 	mov.w	r2, #0
 800dbfe:	d124      	bne.n	800dc4a <_dtoa_r+0x662>
 800dc00:	4bac      	ldr	r3, [pc, #688]	@ (800deb4 <_dtoa_r+0x8cc>)
 800dc02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800dc06:	f7f2 fb49 	bl	800029c <__adddf3>
 800dc0a:	4602      	mov	r2, r0
 800dc0c:	460b      	mov	r3, r1
 800dc0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc12:	f7f2 ff89 	bl	8000b28 <__aeabi_dcmpgt>
 800dc16:	2800      	cmp	r0, #0
 800dc18:	d145      	bne.n	800dca6 <_dtoa_r+0x6be>
 800dc1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800dc1e:	49a5      	ldr	r1, [pc, #660]	@ (800deb4 <_dtoa_r+0x8cc>)
 800dc20:	2000      	movs	r0, #0
 800dc22:	f7f2 fb39 	bl	8000298 <__aeabi_dsub>
 800dc26:	4602      	mov	r2, r0
 800dc28:	460b      	mov	r3, r1
 800dc2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc2e:	f7f2 ff5d 	bl	8000aec <__aeabi_dcmplt>
 800dc32:	2800      	cmp	r0, #0
 800dc34:	f43f aef5 	beq.w	800da22 <_dtoa_r+0x43a>
 800dc38:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800dc3a:	1e73      	subs	r3, r6, #1
 800dc3c:	9315      	str	r3, [sp, #84]	@ 0x54
 800dc3e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dc42:	2b30      	cmp	r3, #48	@ 0x30
 800dc44:	d0f8      	beq.n	800dc38 <_dtoa_r+0x650>
 800dc46:	9f04      	ldr	r7, [sp, #16]
 800dc48:	e73e      	b.n	800dac8 <_dtoa_r+0x4e0>
 800dc4a:	4b9b      	ldr	r3, [pc, #620]	@ (800deb8 <_dtoa_r+0x8d0>)
 800dc4c:	f7f2 fcdc 	bl	8000608 <__aeabi_dmul>
 800dc50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc54:	e7bc      	b.n	800dbd0 <_dtoa_r+0x5e8>
 800dc56:	d10c      	bne.n	800dc72 <_dtoa_r+0x68a>
 800dc58:	4b98      	ldr	r3, [pc, #608]	@ (800debc <_dtoa_r+0x8d4>)
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc60:	f7f2 fcd2 	bl	8000608 <__aeabi_dmul>
 800dc64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dc68:	f7f2 ff54 	bl	8000b14 <__aeabi_dcmpge>
 800dc6c:	2800      	cmp	r0, #0
 800dc6e:	f000 8157 	beq.w	800df20 <_dtoa_r+0x938>
 800dc72:	2400      	movs	r4, #0
 800dc74:	4625      	mov	r5, r4
 800dc76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc78:	43db      	mvns	r3, r3
 800dc7a:	9304      	str	r3, [sp, #16]
 800dc7c:	4656      	mov	r6, sl
 800dc7e:	2700      	movs	r7, #0
 800dc80:	4621      	mov	r1, r4
 800dc82:	4658      	mov	r0, fp
 800dc84:	f000 fafe 	bl	800e284 <_Bfree>
 800dc88:	2d00      	cmp	r5, #0
 800dc8a:	d0dc      	beq.n	800dc46 <_dtoa_r+0x65e>
 800dc8c:	b12f      	cbz	r7, 800dc9a <_dtoa_r+0x6b2>
 800dc8e:	42af      	cmp	r7, r5
 800dc90:	d003      	beq.n	800dc9a <_dtoa_r+0x6b2>
 800dc92:	4639      	mov	r1, r7
 800dc94:	4658      	mov	r0, fp
 800dc96:	f000 faf5 	bl	800e284 <_Bfree>
 800dc9a:	4629      	mov	r1, r5
 800dc9c:	4658      	mov	r0, fp
 800dc9e:	f000 faf1 	bl	800e284 <_Bfree>
 800dca2:	e7d0      	b.n	800dc46 <_dtoa_r+0x65e>
 800dca4:	9704      	str	r7, [sp, #16]
 800dca6:	4633      	mov	r3, r6
 800dca8:	461e      	mov	r6, r3
 800dcaa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dcae:	2a39      	cmp	r2, #57	@ 0x39
 800dcb0:	d107      	bne.n	800dcc2 <_dtoa_r+0x6da>
 800dcb2:	459a      	cmp	sl, r3
 800dcb4:	d1f8      	bne.n	800dca8 <_dtoa_r+0x6c0>
 800dcb6:	9a04      	ldr	r2, [sp, #16]
 800dcb8:	3201      	adds	r2, #1
 800dcba:	9204      	str	r2, [sp, #16]
 800dcbc:	2230      	movs	r2, #48	@ 0x30
 800dcbe:	f88a 2000 	strb.w	r2, [sl]
 800dcc2:	781a      	ldrb	r2, [r3, #0]
 800dcc4:	3201      	adds	r2, #1
 800dcc6:	701a      	strb	r2, [r3, #0]
 800dcc8:	e7bd      	b.n	800dc46 <_dtoa_r+0x65e>
 800dcca:	4b7b      	ldr	r3, [pc, #492]	@ (800deb8 <_dtoa_r+0x8d0>)
 800dccc:	2200      	movs	r2, #0
 800dcce:	f7f2 fc9b 	bl	8000608 <__aeabi_dmul>
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	4604      	mov	r4, r0
 800dcd8:	460d      	mov	r5, r1
 800dcda:	f7f2 fefd 	bl	8000ad8 <__aeabi_dcmpeq>
 800dcde:	2800      	cmp	r0, #0
 800dce0:	f43f aebb 	beq.w	800da5a <_dtoa_r+0x472>
 800dce4:	e6f0      	b.n	800dac8 <_dtoa_r+0x4e0>
 800dce6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800dce8:	2a00      	cmp	r2, #0
 800dcea:	f000 80db 	beq.w	800dea4 <_dtoa_r+0x8bc>
 800dcee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dcf0:	2a01      	cmp	r2, #1
 800dcf2:	f300 80bf 	bgt.w	800de74 <_dtoa_r+0x88c>
 800dcf6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800dcf8:	2a00      	cmp	r2, #0
 800dcfa:	f000 80b7 	beq.w	800de6c <_dtoa_r+0x884>
 800dcfe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800dd02:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dd04:	4646      	mov	r6, r8
 800dd06:	9a08      	ldr	r2, [sp, #32]
 800dd08:	2101      	movs	r1, #1
 800dd0a:	441a      	add	r2, r3
 800dd0c:	4658      	mov	r0, fp
 800dd0e:	4498      	add	r8, r3
 800dd10:	9208      	str	r2, [sp, #32]
 800dd12:	f000 fb6b 	bl	800e3ec <__i2b>
 800dd16:	4605      	mov	r5, r0
 800dd18:	b15e      	cbz	r6, 800dd32 <_dtoa_r+0x74a>
 800dd1a:	9b08      	ldr	r3, [sp, #32]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	dd08      	ble.n	800dd32 <_dtoa_r+0x74a>
 800dd20:	42b3      	cmp	r3, r6
 800dd22:	9a08      	ldr	r2, [sp, #32]
 800dd24:	bfa8      	it	ge
 800dd26:	4633      	movge	r3, r6
 800dd28:	eba8 0803 	sub.w	r8, r8, r3
 800dd2c:	1af6      	subs	r6, r6, r3
 800dd2e:	1ad3      	subs	r3, r2, r3
 800dd30:	9308      	str	r3, [sp, #32]
 800dd32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd34:	b1f3      	cbz	r3, 800dd74 <_dtoa_r+0x78c>
 800dd36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	f000 80b7 	beq.w	800deac <_dtoa_r+0x8c4>
 800dd3e:	b18c      	cbz	r4, 800dd64 <_dtoa_r+0x77c>
 800dd40:	4629      	mov	r1, r5
 800dd42:	4622      	mov	r2, r4
 800dd44:	4658      	mov	r0, fp
 800dd46:	f000 fc11 	bl	800e56c <__pow5mult>
 800dd4a:	464a      	mov	r2, r9
 800dd4c:	4601      	mov	r1, r0
 800dd4e:	4605      	mov	r5, r0
 800dd50:	4658      	mov	r0, fp
 800dd52:	f000 fb61 	bl	800e418 <__multiply>
 800dd56:	4649      	mov	r1, r9
 800dd58:	9004      	str	r0, [sp, #16]
 800dd5a:	4658      	mov	r0, fp
 800dd5c:	f000 fa92 	bl	800e284 <_Bfree>
 800dd60:	9b04      	ldr	r3, [sp, #16]
 800dd62:	4699      	mov	r9, r3
 800dd64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd66:	1b1a      	subs	r2, r3, r4
 800dd68:	d004      	beq.n	800dd74 <_dtoa_r+0x78c>
 800dd6a:	4649      	mov	r1, r9
 800dd6c:	4658      	mov	r0, fp
 800dd6e:	f000 fbfd 	bl	800e56c <__pow5mult>
 800dd72:	4681      	mov	r9, r0
 800dd74:	2101      	movs	r1, #1
 800dd76:	4658      	mov	r0, fp
 800dd78:	f000 fb38 	bl	800e3ec <__i2b>
 800dd7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd7e:	4604      	mov	r4, r0
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	f000 81cf 	beq.w	800e124 <_dtoa_r+0xb3c>
 800dd86:	461a      	mov	r2, r3
 800dd88:	4601      	mov	r1, r0
 800dd8a:	4658      	mov	r0, fp
 800dd8c:	f000 fbee 	bl	800e56c <__pow5mult>
 800dd90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd92:	2b01      	cmp	r3, #1
 800dd94:	4604      	mov	r4, r0
 800dd96:	f300 8095 	bgt.w	800dec4 <_dtoa_r+0x8dc>
 800dd9a:	9b02      	ldr	r3, [sp, #8]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	f040 8087 	bne.w	800deb0 <_dtoa_r+0x8c8>
 800dda2:	9b03      	ldr	r3, [sp, #12]
 800dda4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	f040 8089 	bne.w	800dec0 <_dtoa_r+0x8d8>
 800ddae:	9b03      	ldr	r3, [sp, #12]
 800ddb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ddb4:	0d1b      	lsrs	r3, r3, #20
 800ddb6:	051b      	lsls	r3, r3, #20
 800ddb8:	b12b      	cbz	r3, 800ddc6 <_dtoa_r+0x7de>
 800ddba:	9b08      	ldr	r3, [sp, #32]
 800ddbc:	3301      	adds	r3, #1
 800ddbe:	9308      	str	r3, [sp, #32]
 800ddc0:	f108 0801 	add.w	r8, r8, #1
 800ddc4:	2301      	movs	r3, #1
 800ddc6:	930a      	str	r3, [sp, #40]	@ 0x28
 800ddc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	f000 81b0 	beq.w	800e130 <_dtoa_r+0xb48>
 800ddd0:	6923      	ldr	r3, [r4, #16]
 800ddd2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ddd6:	6918      	ldr	r0, [r3, #16]
 800ddd8:	f000 fabc 	bl	800e354 <__hi0bits>
 800dddc:	f1c0 0020 	rsb	r0, r0, #32
 800dde0:	9b08      	ldr	r3, [sp, #32]
 800dde2:	4418      	add	r0, r3
 800dde4:	f010 001f 	ands.w	r0, r0, #31
 800dde8:	d077      	beq.n	800deda <_dtoa_r+0x8f2>
 800ddea:	f1c0 0320 	rsb	r3, r0, #32
 800ddee:	2b04      	cmp	r3, #4
 800ddf0:	dd6b      	ble.n	800deca <_dtoa_r+0x8e2>
 800ddf2:	9b08      	ldr	r3, [sp, #32]
 800ddf4:	f1c0 001c 	rsb	r0, r0, #28
 800ddf8:	4403      	add	r3, r0
 800ddfa:	4480      	add	r8, r0
 800ddfc:	4406      	add	r6, r0
 800ddfe:	9308      	str	r3, [sp, #32]
 800de00:	f1b8 0f00 	cmp.w	r8, #0
 800de04:	dd05      	ble.n	800de12 <_dtoa_r+0x82a>
 800de06:	4649      	mov	r1, r9
 800de08:	4642      	mov	r2, r8
 800de0a:	4658      	mov	r0, fp
 800de0c:	f000 fc08 	bl	800e620 <__lshift>
 800de10:	4681      	mov	r9, r0
 800de12:	9b08      	ldr	r3, [sp, #32]
 800de14:	2b00      	cmp	r3, #0
 800de16:	dd05      	ble.n	800de24 <_dtoa_r+0x83c>
 800de18:	4621      	mov	r1, r4
 800de1a:	461a      	mov	r2, r3
 800de1c:	4658      	mov	r0, fp
 800de1e:	f000 fbff 	bl	800e620 <__lshift>
 800de22:	4604      	mov	r4, r0
 800de24:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800de26:	2b00      	cmp	r3, #0
 800de28:	d059      	beq.n	800dede <_dtoa_r+0x8f6>
 800de2a:	4621      	mov	r1, r4
 800de2c:	4648      	mov	r0, r9
 800de2e:	f000 fc63 	bl	800e6f8 <__mcmp>
 800de32:	2800      	cmp	r0, #0
 800de34:	da53      	bge.n	800dede <_dtoa_r+0x8f6>
 800de36:	1e7b      	subs	r3, r7, #1
 800de38:	9304      	str	r3, [sp, #16]
 800de3a:	4649      	mov	r1, r9
 800de3c:	2300      	movs	r3, #0
 800de3e:	220a      	movs	r2, #10
 800de40:	4658      	mov	r0, fp
 800de42:	f000 fa41 	bl	800e2c8 <__multadd>
 800de46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de48:	4681      	mov	r9, r0
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	f000 8172 	beq.w	800e134 <_dtoa_r+0xb4c>
 800de50:	2300      	movs	r3, #0
 800de52:	4629      	mov	r1, r5
 800de54:	220a      	movs	r2, #10
 800de56:	4658      	mov	r0, fp
 800de58:	f000 fa36 	bl	800e2c8 <__multadd>
 800de5c:	9b00      	ldr	r3, [sp, #0]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	4605      	mov	r5, r0
 800de62:	dc67      	bgt.n	800df34 <_dtoa_r+0x94c>
 800de64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de66:	2b02      	cmp	r3, #2
 800de68:	dc41      	bgt.n	800deee <_dtoa_r+0x906>
 800de6a:	e063      	b.n	800df34 <_dtoa_r+0x94c>
 800de6c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800de6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800de72:	e746      	b.n	800dd02 <_dtoa_r+0x71a>
 800de74:	9b07      	ldr	r3, [sp, #28]
 800de76:	1e5c      	subs	r4, r3, #1
 800de78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de7a:	42a3      	cmp	r3, r4
 800de7c:	bfbf      	itttt	lt
 800de7e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800de80:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800de82:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800de84:	1ae3      	sublt	r3, r4, r3
 800de86:	bfb4      	ite	lt
 800de88:	18d2      	addlt	r2, r2, r3
 800de8a:	1b1c      	subge	r4, r3, r4
 800de8c:	9b07      	ldr	r3, [sp, #28]
 800de8e:	bfbc      	itt	lt
 800de90:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800de92:	2400      	movlt	r4, #0
 800de94:	2b00      	cmp	r3, #0
 800de96:	bfb5      	itete	lt
 800de98:	eba8 0603 	sublt.w	r6, r8, r3
 800de9c:	9b07      	ldrge	r3, [sp, #28]
 800de9e:	2300      	movlt	r3, #0
 800dea0:	4646      	movge	r6, r8
 800dea2:	e730      	b.n	800dd06 <_dtoa_r+0x71e>
 800dea4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dea6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800dea8:	4646      	mov	r6, r8
 800deaa:	e735      	b.n	800dd18 <_dtoa_r+0x730>
 800deac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800deae:	e75c      	b.n	800dd6a <_dtoa_r+0x782>
 800deb0:	2300      	movs	r3, #0
 800deb2:	e788      	b.n	800ddc6 <_dtoa_r+0x7de>
 800deb4:	3fe00000 	.word	0x3fe00000
 800deb8:	40240000 	.word	0x40240000
 800debc:	40140000 	.word	0x40140000
 800dec0:	9b02      	ldr	r3, [sp, #8]
 800dec2:	e780      	b.n	800ddc6 <_dtoa_r+0x7de>
 800dec4:	2300      	movs	r3, #0
 800dec6:	930a      	str	r3, [sp, #40]	@ 0x28
 800dec8:	e782      	b.n	800ddd0 <_dtoa_r+0x7e8>
 800deca:	d099      	beq.n	800de00 <_dtoa_r+0x818>
 800decc:	9a08      	ldr	r2, [sp, #32]
 800dece:	331c      	adds	r3, #28
 800ded0:	441a      	add	r2, r3
 800ded2:	4498      	add	r8, r3
 800ded4:	441e      	add	r6, r3
 800ded6:	9208      	str	r2, [sp, #32]
 800ded8:	e792      	b.n	800de00 <_dtoa_r+0x818>
 800deda:	4603      	mov	r3, r0
 800dedc:	e7f6      	b.n	800decc <_dtoa_r+0x8e4>
 800dede:	9b07      	ldr	r3, [sp, #28]
 800dee0:	9704      	str	r7, [sp, #16]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	dc20      	bgt.n	800df28 <_dtoa_r+0x940>
 800dee6:	9300      	str	r3, [sp, #0]
 800dee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800deea:	2b02      	cmp	r3, #2
 800deec:	dd1e      	ble.n	800df2c <_dtoa_r+0x944>
 800deee:	9b00      	ldr	r3, [sp, #0]
 800def0:	2b00      	cmp	r3, #0
 800def2:	f47f aec0 	bne.w	800dc76 <_dtoa_r+0x68e>
 800def6:	4621      	mov	r1, r4
 800def8:	2205      	movs	r2, #5
 800defa:	4658      	mov	r0, fp
 800defc:	f000 f9e4 	bl	800e2c8 <__multadd>
 800df00:	4601      	mov	r1, r0
 800df02:	4604      	mov	r4, r0
 800df04:	4648      	mov	r0, r9
 800df06:	f000 fbf7 	bl	800e6f8 <__mcmp>
 800df0a:	2800      	cmp	r0, #0
 800df0c:	f77f aeb3 	ble.w	800dc76 <_dtoa_r+0x68e>
 800df10:	4656      	mov	r6, sl
 800df12:	2331      	movs	r3, #49	@ 0x31
 800df14:	f806 3b01 	strb.w	r3, [r6], #1
 800df18:	9b04      	ldr	r3, [sp, #16]
 800df1a:	3301      	adds	r3, #1
 800df1c:	9304      	str	r3, [sp, #16]
 800df1e:	e6ae      	b.n	800dc7e <_dtoa_r+0x696>
 800df20:	9c07      	ldr	r4, [sp, #28]
 800df22:	9704      	str	r7, [sp, #16]
 800df24:	4625      	mov	r5, r4
 800df26:	e7f3      	b.n	800df10 <_dtoa_r+0x928>
 800df28:	9b07      	ldr	r3, [sp, #28]
 800df2a:	9300      	str	r3, [sp, #0]
 800df2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800df2e:	2b00      	cmp	r3, #0
 800df30:	f000 8104 	beq.w	800e13c <_dtoa_r+0xb54>
 800df34:	2e00      	cmp	r6, #0
 800df36:	dd05      	ble.n	800df44 <_dtoa_r+0x95c>
 800df38:	4629      	mov	r1, r5
 800df3a:	4632      	mov	r2, r6
 800df3c:	4658      	mov	r0, fp
 800df3e:	f000 fb6f 	bl	800e620 <__lshift>
 800df42:	4605      	mov	r5, r0
 800df44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df46:	2b00      	cmp	r3, #0
 800df48:	d05a      	beq.n	800e000 <_dtoa_r+0xa18>
 800df4a:	6869      	ldr	r1, [r5, #4]
 800df4c:	4658      	mov	r0, fp
 800df4e:	f000 f959 	bl	800e204 <_Balloc>
 800df52:	4606      	mov	r6, r0
 800df54:	b928      	cbnz	r0, 800df62 <_dtoa_r+0x97a>
 800df56:	4b84      	ldr	r3, [pc, #528]	@ (800e168 <_dtoa_r+0xb80>)
 800df58:	4602      	mov	r2, r0
 800df5a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800df5e:	f7ff bb5a 	b.w	800d616 <_dtoa_r+0x2e>
 800df62:	692a      	ldr	r2, [r5, #16]
 800df64:	3202      	adds	r2, #2
 800df66:	0092      	lsls	r2, r2, #2
 800df68:	f105 010c 	add.w	r1, r5, #12
 800df6c:	300c      	adds	r0, #12
 800df6e:	f7ff faa4 	bl	800d4ba <memcpy>
 800df72:	2201      	movs	r2, #1
 800df74:	4631      	mov	r1, r6
 800df76:	4658      	mov	r0, fp
 800df78:	f000 fb52 	bl	800e620 <__lshift>
 800df7c:	f10a 0301 	add.w	r3, sl, #1
 800df80:	9307      	str	r3, [sp, #28]
 800df82:	9b00      	ldr	r3, [sp, #0]
 800df84:	4453      	add	r3, sl
 800df86:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df88:	9b02      	ldr	r3, [sp, #8]
 800df8a:	f003 0301 	and.w	r3, r3, #1
 800df8e:	462f      	mov	r7, r5
 800df90:	930a      	str	r3, [sp, #40]	@ 0x28
 800df92:	4605      	mov	r5, r0
 800df94:	9b07      	ldr	r3, [sp, #28]
 800df96:	4621      	mov	r1, r4
 800df98:	3b01      	subs	r3, #1
 800df9a:	4648      	mov	r0, r9
 800df9c:	9300      	str	r3, [sp, #0]
 800df9e:	f7ff fa9a 	bl	800d4d6 <quorem>
 800dfa2:	4639      	mov	r1, r7
 800dfa4:	9002      	str	r0, [sp, #8]
 800dfa6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dfaa:	4648      	mov	r0, r9
 800dfac:	f000 fba4 	bl	800e6f8 <__mcmp>
 800dfb0:	462a      	mov	r2, r5
 800dfb2:	9008      	str	r0, [sp, #32]
 800dfb4:	4621      	mov	r1, r4
 800dfb6:	4658      	mov	r0, fp
 800dfb8:	f000 fbba 	bl	800e730 <__mdiff>
 800dfbc:	68c2      	ldr	r2, [r0, #12]
 800dfbe:	4606      	mov	r6, r0
 800dfc0:	bb02      	cbnz	r2, 800e004 <_dtoa_r+0xa1c>
 800dfc2:	4601      	mov	r1, r0
 800dfc4:	4648      	mov	r0, r9
 800dfc6:	f000 fb97 	bl	800e6f8 <__mcmp>
 800dfca:	4602      	mov	r2, r0
 800dfcc:	4631      	mov	r1, r6
 800dfce:	4658      	mov	r0, fp
 800dfd0:	920e      	str	r2, [sp, #56]	@ 0x38
 800dfd2:	f000 f957 	bl	800e284 <_Bfree>
 800dfd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dfda:	9e07      	ldr	r6, [sp, #28]
 800dfdc:	ea43 0102 	orr.w	r1, r3, r2
 800dfe0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dfe2:	4319      	orrs	r1, r3
 800dfe4:	d110      	bne.n	800e008 <_dtoa_r+0xa20>
 800dfe6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dfea:	d029      	beq.n	800e040 <_dtoa_r+0xa58>
 800dfec:	9b08      	ldr	r3, [sp, #32]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	dd02      	ble.n	800dff8 <_dtoa_r+0xa10>
 800dff2:	9b02      	ldr	r3, [sp, #8]
 800dff4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800dff8:	9b00      	ldr	r3, [sp, #0]
 800dffa:	f883 8000 	strb.w	r8, [r3]
 800dffe:	e63f      	b.n	800dc80 <_dtoa_r+0x698>
 800e000:	4628      	mov	r0, r5
 800e002:	e7bb      	b.n	800df7c <_dtoa_r+0x994>
 800e004:	2201      	movs	r2, #1
 800e006:	e7e1      	b.n	800dfcc <_dtoa_r+0x9e4>
 800e008:	9b08      	ldr	r3, [sp, #32]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	db04      	blt.n	800e018 <_dtoa_r+0xa30>
 800e00e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e010:	430b      	orrs	r3, r1
 800e012:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e014:	430b      	orrs	r3, r1
 800e016:	d120      	bne.n	800e05a <_dtoa_r+0xa72>
 800e018:	2a00      	cmp	r2, #0
 800e01a:	dded      	ble.n	800dff8 <_dtoa_r+0xa10>
 800e01c:	4649      	mov	r1, r9
 800e01e:	2201      	movs	r2, #1
 800e020:	4658      	mov	r0, fp
 800e022:	f000 fafd 	bl	800e620 <__lshift>
 800e026:	4621      	mov	r1, r4
 800e028:	4681      	mov	r9, r0
 800e02a:	f000 fb65 	bl	800e6f8 <__mcmp>
 800e02e:	2800      	cmp	r0, #0
 800e030:	dc03      	bgt.n	800e03a <_dtoa_r+0xa52>
 800e032:	d1e1      	bne.n	800dff8 <_dtoa_r+0xa10>
 800e034:	f018 0f01 	tst.w	r8, #1
 800e038:	d0de      	beq.n	800dff8 <_dtoa_r+0xa10>
 800e03a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e03e:	d1d8      	bne.n	800dff2 <_dtoa_r+0xa0a>
 800e040:	9a00      	ldr	r2, [sp, #0]
 800e042:	2339      	movs	r3, #57	@ 0x39
 800e044:	7013      	strb	r3, [r2, #0]
 800e046:	4633      	mov	r3, r6
 800e048:	461e      	mov	r6, r3
 800e04a:	3b01      	subs	r3, #1
 800e04c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e050:	2a39      	cmp	r2, #57	@ 0x39
 800e052:	d052      	beq.n	800e0fa <_dtoa_r+0xb12>
 800e054:	3201      	adds	r2, #1
 800e056:	701a      	strb	r2, [r3, #0]
 800e058:	e612      	b.n	800dc80 <_dtoa_r+0x698>
 800e05a:	2a00      	cmp	r2, #0
 800e05c:	dd07      	ble.n	800e06e <_dtoa_r+0xa86>
 800e05e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e062:	d0ed      	beq.n	800e040 <_dtoa_r+0xa58>
 800e064:	9a00      	ldr	r2, [sp, #0]
 800e066:	f108 0301 	add.w	r3, r8, #1
 800e06a:	7013      	strb	r3, [r2, #0]
 800e06c:	e608      	b.n	800dc80 <_dtoa_r+0x698>
 800e06e:	9b07      	ldr	r3, [sp, #28]
 800e070:	9a07      	ldr	r2, [sp, #28]
 800e072:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e076:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e078:	4293      	cmp	r3, r2
 800e07a:	d028      	beq.n	800e0ce <_dtoa_r+0xae6>
 800e07c:	4649      	mov	r1, r9
 800e07e:	2300      	movs	r3, #0
 800e080:	220a      	movs	r2, #10
 800e082:	4658      	mov	r0, fp
 800e084:	f000 f920 	bl	800e2c8 <__multadd>
 800e088:	42af      	cmp	r7, r5
 800e08a:	4681      	mov	r9, r0
 800e08c:	f04f 0300 	mov.w	r3, #0
 800e090:	f04f 020a 	mov.w	r2, #10
 800e094:	4639      	mov	r1, r7
 800e096:	4658      	mov	r0, fp
 800e098:	d107      	bne.n	800e0aa <_dtoa_r+0xac2>
 800e09a:	f000 f915 	bl	800e2c8 <__multadd>
 800e09e:	4607      	mov	r7, r0
 800e0a0:	4605      	mov	r5, r0
 800e0a2:	9b07      	ldr	r3, [sp, #28]
 800e0a4:	3301      	adds	r3, #1
 800e0a6:	9307      	str	r3, [sp, #28]
 800e0a8:	e774      	b.n	800df94 <_dtoa_r+0x9ac>
 800e0aa:	f000 f90d 	bl	800e2c8 <__multadd>
 800e0ae:	4629      	mov	r1, r5
 800e0b0:	4607      	mov	r7, r0
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	220a      	movs	r2, #10
 800e0b6:	4658      	mov	r0, fp
 800e0b8:	f000 f906 	bl	800e2c8 <__multadd>
 800e0bc:	4605      	mov	r5, r0
 800e0be:	e7f0      	b.n	800e0a2 <_dtoa_r+0xaba>
 800e0c0:	9b00      	ldr	r3, [sp, #0]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	bfcc      	ite	gt
 800e0c6:	461e      	movgt	r6, r3
 800e0c8:	2601      	movle	r6, #1
 800e0ca:	4456      	add	r6, sl
 800e0cc:	2700      	movs	r7, #0
 800e0ce:	4649      	mov	r1, r9
 800e0d0:	2201      	movs	r2, #1
 800e0d2:	4658      	mov	r0, fp
 800e0d4:	f000 faa4 	bl	800e620 <__lshift>
 800e0d8:	4621      	mov	r1, r4
 800e0da:	4681      	mov	r9, r0
 800e0dc:	f000 fb0c 	bl	800e6f8 <__mcmp>
 800e0e0:	2800      	cmp	r0, #0
 800e0e2:	dcb0      	bgt.n	800e046 <_dtoa_r+0xa5e>
 800e0e4:	d102      	bne.n	800e0ec <_dtoa_r+0xb04>
 800e0e6:	f018 0f01 	tst.w	r8, #1
 800e0ea:	d1ac      	bne.n	800e046 <_dtoa_r+0xa5e>
 800e0ec:	4633      	mov	r3, r6
 800e0ee:	461e      	mov	r6, r3
 800e0f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e0f4:	2a30      	cmp	r2, #48	@ 0x30
 800e0f6:	d0fa      	beq.n	800e0ee <_dtoa_r+0xb06>
 800e0f8:	e5c2      	b.n	800dc80 <_dtoa_r+0x698>
 800e0fa:	459a      	cmp	sl, r3
 800e0fc:	d1a4      	bne.n	800e048 <_dtoa_r+0xa60>
 800e0fe:	9b04      	ldr	r3, [sp, #16]
 800e100:	3301      	adds	r3, #1
 800e102:	9304      	str	r3, [sp, #16]
 800e104:	2331      	movs	r3, #49	@ 0x31
 800e106:	f88a 3000 	strb.w	r3, [sl]
 800e10a:	e5b9      	b.n	800dc80 <_dtoa_r+0x698>
 800e10c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e10e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e16c <_dtoa_r+0xb84>
 800e112:	b11b      	cbz	r3, 800e11c <_dtoa_r+0xb34>
 800e114:	f10a 0308 	add.w	r3, sl, #8
 800e118:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e11a:	6013      	str	r3, [r2, #0]
 800e11c:	4650      	mov	r0, sl
 800e11e:	b019      	add	sp, #100	@ 0x64
 800e120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e126:	2b01      	cmp	r3, #1
 800e128:	f77f ae37 	ble.w	800dd9a <_dtoa_r+0x7b2>
 800e12c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e12e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e130:	2001      	movs	r0, #1
 800e132:	e655      	b.n	800dde0 <_dtoa_r+0x7f8>
 800e134:	9b00      	ldr	r3, [sp, #0]
 800e136:	2b00      	cmp	r3, #0
 800e138:	f77f aed6 	ble.w	800dee8 <_dtoa_r+0x900>
 800e13c:	4656      	mov	r6, sl
 800e13e:	4621      	mov	r1, r4
 800e140:	4648      	mov	r0, r9
 800e142:	f7ff f9c8 	bl	800d4d6 <quorem>
 800e146:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e14a:	f806 8b01 	strb.w	r8, [r6], #1
 800e14e:	9b00      	ldr	r3, [sp, #0]
 800e150:	eba6 020a 	sub.w	r2, r6, sl
 800e154:	4293      	cmp	r3, r2
 800e156:	ddb3      	ble.n	800e0c0 <_dtoa_r+0xad8>
 800e158:	4649      	mov	r1, r9
 800e15a:	2300      	movs	r3, #0
 800e15c:	220a      	movs	r2, #10
 800e15e:	4658      	mov	r0, fp
 800e160:	f000 f8b2 	bl	800e2c8 <__multadd>
 800e164:	4681      	mov	r9, r0
 800e166:	e7ea      	b.n	800e13e <_dtoa_r+0xb56>
 800e168:	0800f4ec 	.word	0x0800f4ec
 800e16c:	0800f470 	.word	0x0800f470

0800e170 <_free_r>:
 800e170:	b538      	push	{r3, r4, r5, lr}
 800e172:	4605      	mov	r5, r0
 800e174:	2900      	cmp	r1, #0
 800e176:	d041      	beq.n	800e1fc <_free_r+0x8c>
 800e178:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e17c:	1f0c      	subs	r4, r1, #4
 800e17e:	2b00      	cmp	r3, #0
 800e180:	bfb8      	it	lt
 800e182:	18e4      	addlt	r4, r4, r3
 800e184:	f7fe fb34 	bl	800c7f0 <__malloc_lock>
 800e188:	4a1d      	ldr	r2, [pc, #116]	@ (800e200 <_free_r+0x90>)
 800e18a:	6813      	ldr	r3, [r2, #0]
 800e18c:	b933      	cbnz	r3, 800e19c <_free_r+0x2c>
 800e18e:	6063      	str	r3, [r4, #4]
 800e190:	6014      	str	r4, [r2, #0]
 800e192:	4628      	mov	r0, r5
 800e194:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e198:	f7fe bb30 	b.w	800c7fc <__malloc_unlock>
 800e19c:	42a3      	cmp	r3, r4
 800e19e:	d908      	bls.n	800e1b2 <_free_r+0x42>
 800e1a0:	6820      	ldr	r0, [r4, #0]
 800e1a2:	1821      	adds	r1, r4, r0
 800e1a4:	428b      	cmp	r3, r1
 800e1a6:	bf01      	itttt	eq
 800e1a8:	6819      	ldreq	r1, [r3, #0]
 800e1aa:	685b      	ldreq	r3, [r3, #4]
 800e1ac:	1809      	addeq	r1, r1, r0
 800e1ae:	6021      	streq	r1, [r4, #0]
 800e1b0:	e7ed      	b.n	800e18e <_free_r+0x1e>
 800e1b2:	461a      	mov	r2, r3
 800e1b4:	685b      	ldr	r3, [r3, #4]
 800e1b6:	b10b      	cbz	r3, 800e1bc <_free_r+0x4c>
 800e1b8:	42a3      	cmp	r3, r4
 800e1ba:	d9fa      	bls.n	800e1b2 <_free_r+0x42>
 800e1bc:	6811      	ldr	r1, [r2, #0]
 800e1be:	1850      	adds	r0, r2, r1
 800e1c0:	42a0      	cmp	r0, r4
 800e1c2:	d10b      	bne.n	800e1dc <_free_r+0x6c>
 800e1c4:	6820      	ldr	r0, [r4, #0]
 800e1c6:	4401      	add	r1, r0
 800e1c8:	1850      	adds	r0, r2, r1
 800e1ca:	4283      	cmp	r3, r0
 800e1cc:	6011      	str	r1, [r2, #0]
 800e1ce:	d1e0      	bne.n	800e192 <_free_r+0x22>
 800e1d0:	6818      	ldr	r0, [r3, #0]
 800e1d2:	685b      	ldr	r3, [r3, #4]
 800e1d4:	6053      	str	r3, [r2, #4]
 800e1d6:	4408      	add	r0, r1
 800e1d8:	6010      	str	r0, [r2, #0]
 800e1da:	e7da      	b.n	800e192 <_free_r+0x22>
 800e1dc:	d902      	bls.n	800e1e4 <_free_r+0x74>
 800e1de:	230c      	movs	r3, #12
 800e1e0:	602b      	str	r3, [r5, #0]
 800e1e2:	e7d6      	b.n	800e192 <_free_r+0x22>
 800e1e4:	6820      	ldr	r0, [r4, #0]
 800e1e6:	1821      	adds	r1, r4, r0
 800e1e8:	428b      	cmp	r3, r1
 800e1ea:	bf04      	itt	eq
 800e1ec:	6819      	ldreq	r1, [r3, #0]
 800e1ee:	685b      	ldreq	r3, [r3, #4]
 800e1f0:	6063      	str	r3, [r4, #4]
 800e1f2:	bf04      	itt	eq
 800e1f4:	1809      	addeq	r1, r1, r0
 800e1f6:	6021      	streq	r1, [r4, #0]
 800e1f8:	6054      	str	r4, [r2, #4]
 800e1fa:	e7ca      	b.n	800e192 <_free_r+0x22>
 800e1fc:	bd38      	pop	{r3, r4, r5, pc}
 800e1fe:	bf00      	nop
 800e200:	200008f0 	.word	0x200008f0

0800e204 <_Balloc>:
 800e204:	b570      	push	{r4, r5, r6, lr}
 800e206:	69c6      	ldr	r6, [r0, #28]
 800e208:	4604      	mov	r4, r0
 800e20a:	460d      	mov	r5, r1
 800e20c:	b976      	cbnz	r6, 800e22c <_Balloc+0x28>
 800e20e:	2010      	movs	r0, #16
 800e210:	f7fe fa3c 	bl	800c68c <malloc>
 800e214:	4602      	mov	r2, r0
 800e216:	61e0      	str	r0, [r4, #28]
 800e218:	b920      	cbnz	r0, 800e224 <_Balloc+0x20>
 800e21a:	4b18      	ldr	r3, [pc, #96]	@ (800e27c <_Balloc+0x78>)
 800e21c:	4818      	ldr	r0, [pc, #96]	@ (800e280 <_Balloc+0x7c>)
 800e21e:	216b      	movs	r1, #107	@ 0x6b
 800e220:	f000 fd90 	bl	800ed44 <__assert_func>
 800e224:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e228:	6006      	str	r6, [r0, #0]
 800e22a:	60c6      	str	r6, [r0, #12]
 800e22c:	69e6      	ldr	r6, [r4, #28]
 800e22e:	68f3      	ldr	r3, [r6, #12]
 800e230:	b183      	cbz	r3, 800e254 <_Balloc+0x50>
 800e232:	69e3      	ldr	r3, [r4, #28]
 800e234:	68db      	ldr	r3, [r3, #12]
 800e236:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e23a:	b9b8      	cbnz	r0, 800e26c <_Balloc+0x68>
 800e23c:	2101      	movs	r1, #1
 800e23e:	fa01 f605 	lsl.w	r6, r1, r5
 800e242:	1d72      	adds	r2, r6, #5
 800e244:	0092      	lsls	r2, r2, #2
 800e246:	4620      	mov	r0, r4
 800e248:	f000 fd9a 	bl	800ed80 <_calloc_r>
 800e24c:	b160      	cbz	r0, 800e268 <_Balloc+0x64>
 800e24e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e252:	e00e      	b.n	800e272 <_Balloc+0x6e>
 800e254:	2221      	movs	r2, #33	@ 0x21
 800e256:	2104      	movs	r1, #4
 800e258:	4620      	mov	r0, r4
 800e25a:	f000 fd91 	bl	800ed80 <_calloc_r>
 800e25e:	69e3      	ldr	r3, [r4, #28]
 800e260:	60f0      	str	r0, [r6, #12]
 800e262:	68db      	ldr	r3, [r3, #12]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d1e4      	bne.n	800e232 <_Balloc+0x2e>
 800e268:	2000      	movs	r0, #0
 800e26a:	bd70      	pop	{r4, r5, r6, pc}
 800e26c:	6802      	ldr	r2, [r0, #0]
 800e26e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e272:	2300      	movs	r3, #0
 800e274:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e278:	e7f7      	b.n	800e26a <_Balloc+0x66>
 800e27a:	bf00      	nop
 800e27c:	0800f47d 	.word	0x0800f47d
 800e280:	0800f4fd 	.word	0x0800f4fd

0800e284 <_Bfree>:
 800e284:	b570      	push	{r4, r5, r6, lr}
 800e286:	69c6      	ldr	r6, [r0, #28]
 800e288:	4605      	mov	r5, r0
 800e28a:	460c      	mov	r4, r1
 800e28c:	b976      	cbnz	r6, 800e2ac <_Bfree+0x28>
 800e28e:	2010      	movs	r0, #16
 800e290:	f7fe f9fc 	bl	800c68c <malloc>
 800e294:	4602      	mov	r2, r0
 800e296:	61e8      	str	r0, [r5, #28]
 800e298:	b920      	cbnz	r0, 800e2a4 <_Bfree+0x20>
 800e29a:	4b09      	ldr	r3, [pc, #36]	@ (800e2c0 <_Bfree+0x3c>)
 800e29c:	4809      	ldr	r0, [pc, #36]	@ (800e2c4 <_Bfree+0x40>)
 800e29e:	218f      	movs	r1, #143	@ 0x8f
 800e2a0:	f000 fd50 	bl	800ed44 <__assert_func>
 800e2a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e2a8:	6006      	str	r6, [r0, #0]
 800e2aa:	60c6      	str	r6, [r0, #12]
 800e2ac:	b13c      	cbz	r4, 800e2be <_Bfree+0x3a>
 800e2ae:	69eb      	ldr	r3, [r5, #28]
 800e2b0:	6862      	ldr	r2, [r4, #4]
 800e2b2:	68db      	ldr	r3, [r3, #12]
 800e2b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e2b8:	6021      	str	r1, [r4, #0]
 800e2ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e2be:	bd70      	pop	{r4, r5, r6, pc}
 800e2c0:	0800f47d 	.word	0x0800f47d
 800e2c4:	0800f4fd 	.word	0x0800f4fd

0800e2c8 <__multadd>:
 800e2c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2cc:	690d      	ldr	r5, [r1, #16]
 800e2ce:	4607      	mov	r7, r0
 800e2d0:	460c      	mov	r4, r1
 800e2d2:	461e      	mov	r6, r3
 800e2d4:	f101 0c14 	add.w	ip, r1, #20
 800e2d8:	2000      	movs	r0, #0
 800e2da:	f8dc 3000 	ldr.w	r3, [ip]
 800e2de:	b299      	uxth	r1, r3
 800e2e0:	fb02 6101 	mla	r1, r2, r1, r6
 800e2e4:	0c1e      	lsrs	r6, r3, #16
 800e2e6:	0c0b      	lsrs	r3, r1, #16
 800e2e8:	fb02 3306 	mla	r3, r2, r6, r3
 800e2ec:	b289      	uxth	r1, r1
 800e2ee:	3001      	adds	r0, #1
 800e2f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e2f4:	4285      	cmp	r5, r0
 800e2f6:	f84c 1b04 	str.w	r1, [ip], #4
 800e2fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e2fe:	dcec      	bgt.n	800e2da <__multadd+0x12>
 800e300:	b30e      	cbz	r6, 800e346 <__multadd+0x7e>
 800e302:	68a3      	ldr	r3, [r4, #8]
 800e304:	42ab      	cmp	r3, r5
 800e306:	dc19      	bgt.n	800e33c <__multadd+0x74>
 800e308:	6861      	ldr	r1, [r4, #4]
 800e30a:	4638      	mov	r0, r7
 800e30c:	3101      	adds	r1, #1
 800e30e:	f7ff ff79 	bl	800e204 <_Balloc>
 800e312:	4680      	mov	r8, r0
 800e314:	b928      	cbnz	r0, 800e322 <__multadd+0x5a>
 800e316:	4602      	mov	r2, r0
 800e318:	4b0c      	ldr	r3, [pc, #48]	@ (800e34c <__multadd+0x84>)
 800e31a:	480d      	ldr	r0, [pc, #52]	@ (800e350 <__multadd+0x88>)
 800e31c:	21ba      	movs	r1, #186	@ 0xba
 800e31e:	f000 fd11 	bl	800ed44 <__assert_func>
 800e322:	6922      	ldr	r2, [r4, #16]
 800e324:	3202      	adds	r2, #2
 800e326:	f104 010c 	add.w	r1, r4, #12
 800e32a:	0092      	lsls	r2, r2, #2
 800e32c:	300c      	adds	r0, #12
 800e32e:	f7ff f8c4 	bl	800d4ba <memcpy>
 800e332:	4621      	mov	r1, r4
 800e334:	4638      	mov	r0, r7
 800e336:	f7ff ffa5 	bl	800e284 <_Bfree>
 800e33a:	4644      	mov	r4, r8
 800e33c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e340:	3501      	adds	r5, #1
 800e342:	615e      	str	r6, [r3, #20]
 800e344:	6125      	str	r5, [r4, #16]
 800e346:	4620      	mov	r0, r4
 800e348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e34c:	0800f4ec 	.word	0x0800f4ec
 800e350:	0800f4fd 	.word	0x0800f4fd

0800e354 <__hi0bits>:
 800e354:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e358:	4603      	mov	r3, r0
 800e35a:	bf36      	itet	cc
 800e35c:	0403      	lslcc	r3, r0, #16
 800e35e:	2000      	movcs	r0, #0
 800e360:	2010      	movcc	r0, #16
 800e362:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e366:	bf3c      	itt	cc
 800e368:	021b      	lslcc	r3, r3, #8
 800e36a:	3008      	addcc	r0, #8
 800e36c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e370:	bf3c      	itt	cc
 800e372:	011b      	lslcc	r3, r3, #4
 800e374:	3004      	addcc	r0, #4
 800e376:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e37a:	bf3c      	itt	cc
 800e37c:	009b      	lslcc	r3, r3, #2
 800e37e:	3002      	addcc	r0, #2
 800e380:	2b00      	cmp	r3, #0
 800e382:	db05      	blt.n	800e390 <__hi0bits+0x3c>
 800e384:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e388:	f100 0001 	add.w	r0, r0, #1
 800e38c:	bf08      	it	eq
 800e38e:	2020      	moveq	r0, #32
 800e390:	4770      	bx	lr

0800e392 <__lo0bits>:
 800e392:	6803      	ldr	r3, [r0, #0]
 800e394:	4602      	mov	r2, r0
 800e396:	f013 0007 	ands.w	r0, r3, #7
 800e39a:	d00b      	beq.n	800e3b4 <__lo0bits+0x22>
 800e39c:	07d9      	lsls	r1, r3, #31
 800e39e:	d421      	bmi.n	800e3e4 <__lo0bits+0x52>
 800e3a0:	0798      	lsls	r0, r3, #30
 800e3a2:	bf49      	itett	mi
 800e3a4:	085b      	lsrmi	r3, r3, #1
 800e3a6:	089b      	lsrpl	r3, r3, #2
 800e3a8:	2001      	movmi	r0, #1
 800e3aa:	6013      	strmi	r3, [r2, #0]
 800e3ac:	bf5c      	itt	pl
 800e3ae:	6013      	strpl	r3, [r2, #0]
 800e3b0:	2002      	movpl	r0, #2
 800e3b2:	4770      	bx	lr
 800e3b4:	b299      	uxth	r1, r3
 800e3b6:	b909      	cbnz	r1, 800e3bc <__lo0bits+0x2a>
 800e3b8:	0c1b      	lsrs	r3, r3, #16
 800e3ba:	2010      	movs	r0, #16
 800e3bc:	b2d9      	uxtb	r1, r3
 800e3be:	b909      	cbnz	r1, 800e3c4 <__lo0bits+0x32>
 800e3c0:	3008      	adds	r0, #8
 800e3c2:	0a1b      	lsrs	r3, r3, #8
 800e3c4:	0719      	lsls	r1, r3, #28
 800e3c6:	bf04      	itt	eq
 800e3c8:	091b      	lsreq	r3, r3, #4
 800e3ca:	3004      	addeq	r0, #4
 800e3cc:	0799      	lsls	r1, r3, #30
 800e3ce:	bf04      	itt	eq
 800e3d0:	089b      	lsreq	r3, r3, #2
 800e3d2:	3002      	addeq	r0, #2
 800e3d4:	07d9      	lsls	r1, r3, #31
 800e3d6:	d403      	bmi.n	800e3e0 <__lo0bits+0x4e>
 800e3d8:	085b      	lsrs	r3, r3, #1
 800e3da:	f100 0001 	add.w	r0, r0, #1
 800e3de:	d003      	beq.n	800e3e8 <__lo0bits+0x56>
 800e3e0:	6013      	str	r3, [r2, #0]
 800e3e2:	4770      	bx	lr
 800e3e4:	2000      	movs	r0, #0
 800e3e6:	4770      	bx	lr
 800e3e8:	2020      	movs	r0, #32
 800e3ea:	4770      	bx	lr

0800e3ec <__i2b>:
 800e3ec:	b510      	push	{r4, lr}
 800e3ee:	460c      	mov	r4, r1
 800e3f0:	2101      	movs	r1, #1
 800e3f2:	f7ff ff07 	bl	800e204 <_Balloc>
 800e3f6:	4602      	mov	r2, r0
 800e3f8:	b928      	cbnz	r0, 800e406 <__i2b+0x1a>
 800e3fa:	4b05      	ldr	r3, [pc, #20]	@ (800e410 <__i2b+0x24>)
 800e3fc:	4805      	ldr	r0, [pc, #20]	@ (800e414 <__i2b+0x28>)
 800e3fe:	f240 1145 	movw	r1, #325	@ 0x145
 800e402:	f000 fc9f 	bl	800ed44 <__assert_func>
 800e406:	2301      	movs	r3, #1
 800e408:	6144      	str	r4, [r0, #20]
 800e40a:	6103      	str	r3, [r0, #16]
 800e40c:	bd10      	pop	{r4, pc}
 800e40e:	bf00      	nop
 800e410:	0800f4ec 	.word	0x0800f4ec
 800e414:	0800f4fd 	.word	0x0800f4fd

0800e418 <__multiply>:
 800e418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e41c:	4614      	mov	r4, r2
 800e41e:	690a      	ldr	r2, [r1, #16]
 800e420:	6923      	ldr	r3, [r4, #16]
 800e422:	429a      	cmp	r2, r3
 800e424:	bfa8      	it	ge
 800e426:	4623      	movge	r3, r4
 800e428:	460f      	mov	r7, r1
 800e42a:	bfa4      	itt	ge
 800e42c:	460c      	movge	r4, r1
 800e42e:	461f      	movge	r7, r3
 800e430:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e434:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e438:	68a3      	ldr	r3, [r4, #8]
 800e43a:	6861      	ldr	r1, [r4, #4]
 800e43c:	eb0a 0609 	add.w	r6, sl, r9
 800e440:	42b3      	cmp	r3, r6
 800e442:	b085      	sub	sp, #20
 800e444:	bfb8      	it	lt
 800e446:	3101      	addlt	r1, #1
 800e448:	f7ff fedc 	bl	800e204 <_Balloc>
 800e44c:	b930      	cbnz	r0, 800e45c <__multiply+0x44>
 800e44e:	4602      	mov	r2, r0
 800e450:	4b44      	ldr	r3, [pc, #272]	@ (800e564 <__multiply+0x14c>)
 800e452:	4845      	ldr	r0, [pc, #276]	@ (800e568 <__multiply+0x150>)
 800e454:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e458:	f000 fc74 	bl	800ed44 <__assert_func>
 800e45c:	f100 0514 	add.w	r5, r0, #20
 800e460:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e464:	462b      	mov	r3, r5
 800e466:	2200      	movs	r2, #0
 800e468:	4543      	cmp	r3, r8
 800e46a:	d321      	bcc.n	800e4b0 <__multiply+0x98>
 800e46c:	f107 0114 	add.w	r1, r7, #20
 800e470:	f104 0214 	add.w	r2, r4, #20
 800e474:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e478:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e47c:	9302      	str	r3, [sp, #8]
 800e47e:	1b13      	subs	r3, r2, r4
 800e480:	3b15      	subs	r3, #21
 800e482:	f023 0303 	bic.w	r3, r3, #3
 800e486:	3304      	adds	r3, #4
 800e488:	f104 0715 	add.w	r7, r4, #21
 800e48c:	42ba      	cmp	r2, r7
 800e48e:	bf38      	it	cc
 800e490:	2304      	movcc	r3, #4
 800e492:	9301      	str	r3, [sp, #4]
 800e494:	9b02      	ldr	r3, [sp, #8]
 800e496:	9103      	str	r1, [sp, #12]
 800e498:	428b      	cmp	r3, r1
 800e49a:	d80c      	bhi.n	800e4b6 <__multiply+0x9e>
 800e49c:	2e00      	cmp	r6, #0
 800e49e:	dd03      	ble.n	800e4a8 <__multiply+0x90>
 800e4a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d05b      	beq.n	800e560 <__multiply+0x148>
 800e4a8:	6106      	str	r6, [r0, #16]
 800e4aa:	b005      	add	sp, #20
 800e4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4b0:	f843 2b04 	str.w	r2, [r3], #4
 800e4b4:	e7d8      	b.n	800e468 <__multiply+0x50>
 800e4b6:	f8b1 a000 	ldrh.w	sl, [r1]
 800e4ba:	f1ba 0f00 	cmp.w	sl, #0
 800e4be:	d024      	beq.n	800e50a <__multiply+0xf2>
 800e4c0:	f104 0e14 	add.w	lr, r4, #20
 800e4c4:	46a9      	mov	r9, r5
 800e4c6:	f04f 0c00 	mov.w	ip, #0
 800e4ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e4ce:	f8d9 3000 	ldr.w	r3, [r9]
 800e4d2:	fa1f fb87 	uxth.w	fp, r7
 800e4d6:	b29b      	uxth	r3, r3
 800e4d8:	fb0a 330b 	mla	r3, sl, fp, r3
 800e4dc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e4e0:	f8d9 7000 	ldr.w	r7, [r9]
 800e4e4:	4463      	add	r3, ip
 800e4e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e4ea:	fb0a c70b 	mla	r7, sl, fp, ip
 800e4ee:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e4f2:	b29b      	uxth	r3, r3
 800e4f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e4f8:	4572      	cmp	r2, lr
 800e4fa:	f849 3b04 	str.w	r3, [r9], #4
 800e4fe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e502:	d8e2      	bhi.n	800e4ca <__multiply+0xb2>
 800e504:	9b01      	ldr	r3, [sp, #4]
 800e506:	f845 c003 	str.w	ip, [r5, r3]
 800e50a:	9b03      	ldr	r3, [sp, #12]
 800e50c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e510:	3104      	adds	r1, #4
 800e512:	f1b9 0f00 	cmp.w	r9, #0
 800e516:	d021      	beq.n	800e55c <__multiply+0x144>
 800e518:	682b      	ldr	r3, [r5, #0]
 800e51a:	f104 0c14 	add.w	ip, r4, #20
 800e51e:	46ae      	mov	lr, r5
 800e520:	f04f 0a00 	mov.w	sl, #0
 800e524:	f8bc b000 	ldrh.w	fp, [ip]
 800e528:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e52c:	fb09 770b 	mla	r7, r9, fp, r7
 800e530:	4457      	add	r7, sl
 800e532:	b29b      	uxth	r3, r3
 800e534:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e538:	f84e 3b04 	str.w	r3, [lr], #4
 800e53c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e540:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e544:	f8be 3000 	ldrh.w	r3, [lr]
 800e548:	fb09 330a 	mla	r3, r9, sl, r3
 800e54c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e550:	4562      	cmp	r2, ip
 800e552:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e556:	d8e5      	bhi.n	800e524 <__multiply+0x10c>
 800e558:	9f01      	ldr	r7, [sp, #4]
 800e55a:	51eb      	str	r3, [r5, r7]
 800e55c:	3504      	adds	r5, #4
 800e55e:	e799      	b.n	800e494 <__multiply+0x7c>
 800e560:	3e01      	subs	r6, #1
 800e562:	e79b      	b.n	800e49c <__multiply+0x84>
 800e564:	0800f4ec 	.word	0x0800f4ec
 800e568:	0800f4fd 	.word	0x0800f4fd

0800e56c <__pow5mult>:
 800e56c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e570:	4615      	mov	r5, r2
 800e572:	f012 0203 	ands.w	r2, r2, #3
 800e576:	4607      	mov	r7, r0
 800e578:	460e      	mov	r6, r1
 800e57a:	d007      	beq.n	800e58c <__pow5mult+0x20>
 800e57c:	4c25      	ldr	r4, [pc, #148]	@ (800e614 <__pow5mult+0xa8>)
 800e57e:	3a01      	subs	r2, #1
 800e580:	2300      	movs	r3, #0
 800e582:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e586:	f7ff fe9f 	bl	800e2c8 <__multadd>
 800e58a:	4606      	mov	r6, r0
 800e58c:	10ad      	asrs	r5, r5, #2
 800e58e:	d03d      	beq.n	800e60c <__pow5mult+0xa0>
 800e590:	69fc      	ldr	r4, [r7, #28]
 800e592:	b97c      	cbnz	r4, 800e5b4 <__pow5mult+0x48>
 800e594:	2010      	movs	r0, #16
 800e596:	f7fe f879 	bl	800c68c <malloc>
 800e59a:	4602      	mov	r2, r0
 800e59c:	61f8      	str	r0, [r7, #28]
 800e59e:	b928      	cbnz	r0, 800e5ac <__pow5mult+0x40>
 800e5a0:	4b1d      	ldr	r3, [pc, #116]	@ (800e618 <__pow5mult+0xac>)
 800e5a2:	481e      	ldr	r0, [pc, #120]	@ (800e61c <__pow5mult+0xb0>)
 800e5a4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e5a8:	f000 fbcc 	bl	800ed44 <__assert_func>
 800e5ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e5b0:	6004      	str	r4, [r0, #0]
 800e5b2:	60c4      	str	r4, [r0, #12]
 800e5b4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e5b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e5bc:	b94c      	cbnz	r4, 800e5d2 <__pow5mult+0x66>
 800e5be:	f240 2171 	movw	r1, #625	@ 0x271
 800e5c2:	4638      	mov	r0, r7
 800e5c4:	f7ff ff12 	bl	800e3ec <__i2b>
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	f8c8 0008 	str.w	r0, [r8, #8]
 800e5ce:	4604      	mov	r4, r0
 800e5d0:	6003      	str	r3, [r0, #0]
 800e5d2:	f04f 0900 	mov.w	r9, #0
 800e5d6:	07eb      	lsls	r3, r5, #31
 800e5d8:	d50a      	bpl.n	800e5f0 <__pow5mult+0x84>
 800e5da:	4631      	mov	r1, r6
 800e5dc:	4622      	mov	r2, r4
 800e5de:	4638      	mov	r0, r7
 800e5e0:	f7ff ff1a 	bl	800e418 <__multiply>
 800e5e4:	4631      	mov	r1, r6
 800e5e6:	4680      	mov	r8, r0
 800e5e8:	4638      	mov	r0, r7
 800e5ea:	f7ff fe4b 	bl	800e284 <_Bfree>
 800e5ee:	4646      	mov	r6, r8
 800e5f0:	106d      	asrs	r5, r5, #1
 800e5f2:	d00b      	beq.n	800e60c <__pow5mult+0xa0>
 800e5f4:	6820      	ldr	r0, [r4, #0]
 800e5f6:	b938      	cbnz	r0, 800e608 <__pow5mult+0x9c>
 800e5f8:	4622      	mov	r2, r4
 800e5fa:	4621      	mov	r1, r4
 800e5fc:	4638      	mov	r0, r7
 800e5fe:	f7ff ff0b 	bl	800e418 <__multiply>
 800e602:	6020      	str	r0, [r4, #0]
 800e604:	f8c0 9000 	str.w	r9, [r0]
 800e608:	4604      	mov	r4, r0
 800e60a:	e7e4      	b.n	800e5d6 <__pow5mult+0x6a>
 800e60c:	4630      	mov	r0, r6
 800e60e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e612:	bf00      	nop
 800e614:	0800f558 	.word	0x0800f558
 800e618:	0800f47d 	.word	0x0800f47d
 800e61c:	0800f4fd 	.word	0x0800f4fd

0800e620 <__lshift>:
 800e620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e624:	460c      	mov	r4, r1
 800e626:	6849      	ldr	r1, [r1, #4]
 800e628:	6923      	ldr	r3, [r4, #16]
 800e62a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e62e:	68a3      	ldr	r3, [r4, #8]
 800e630:	4607      	mov	r7, r0
 800e632:	4691      	mov	r9, r2
 800e634:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e638:	f108 0601 	add.w	r6, r8, #1
 800e63c:	42b3      	cmp	r3, r6
 800e63e:	db0b      	blt.n	800e658 <__lshift+0x38>
 800e640:	4638      	mov	r0, r7
 800e642:	f7ff fddf 	bl	800e204 <_Balloc>
 800e646:	4605      	mov	r5, r0
 800e648:	b948      	cbnz	r0, 800e65e <__lshift+0x3e>
 800e64a:	4602      	mov	r2, r0
 800e64c:	4b28      	ldr	r3, [pc, #160]	@ (800e6f0 <__lshift+0xd0>)
 800e64e:	4829      	ldr	r0, [pc, #164]	@ (800e6f4 <__lshift+0xd4>)
 800e650:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e654:	f000 fb76 	bl	800ed44 <__assert_func>
 800e658:	3101      	adds	r1, #1
 800e65a:	005b      	lsls	r3, r3, #1
 800e65c:	e7ee      	b.n	800e63c <__lshift+0x1c>
 800e65e:	2300      	movs	r3, #0
 800e660:	f100 0114 	add.w	r1, r0, #20
 800e664:	f100 0210 	add.w	r2, r0, #16
 800e668:	4618      	mov	r0, r3
 800e66a:	4553      	cmp	r3, sl
 800e66c:	db33      	blt.n	800e6d6 <__lshift+0xb6>
 800e66e:	6920      	ldr	r0, [r4, #16]
 800e670:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e674:	f104 0314 	add.w	r3, r4, #20
 800e678:	f019 091f 	ands.w	r9, r9, #31
 800e67c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e680:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e684:	d02b      	beq.n	800e6de <__lshift+0xbe>
 800e686:	f1c9 0e20 	rsb	lr, r9, #32
 800e68a:	468a      	mov	sl, r1
 800e68c:	2200      	movs	r2, #0
 800e68e:	6818      	ldr	r0, [r3, #0]
 800e690:	fa00 f009 	lsl.w	r0, r0, r9
 800e694:	4310      	orrs	r0, r2
 800e696:	f84a 0b04 	str.w	r0, [sl], #4
 800e69a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e69e:	459c      	cmp	ip, r3
 800e6a0:	fa22 f20e 	lsr.w	r2, r2, lr
 800e6a4:	d8f3      	bhi.n	800e68e <__lshift+0x6e>
 800e6a6:	ebac 0304 	sub.w	r3, ip, r4
 800e6aa:	3b15      	subs	r3, #21
 800e6ac:	f023 0303 	bic.w	r3, r3, #3
 800e6b0:	3304      	adds	r3, #4
 800e6b2:	f104 0015 	add.w	r0, r4, #21
 800e6b6:	4584      	cmp	ip, r0
 800e6b8:	bf38      	it	cc
 800e6ba:	2304      	movcc	r3, #4
 800e6bc:	50ca      	str	r2, [r1, r3]
 800e6be:	b10a      	cbz	r2, 800e6c4 <__lshift+0xa4>
 800e6c0:	f108 0602 	add.w	r6, r8, #2
 800e6c4:	3e01      	subs	r6, #1
 800e6c6:	4638      	mov	r0, r7
 800e6c8:	612e      	str	r6, [r5, #16]
 800e6ca:	4621      	mov	r1, r4
 800e6cc:	f7ff fdda 	bl	800e284 <_Bfree>
 800e6d0:	4628      	mov	r0, r5
 800e6d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6d6:	f842 0f04 	str.w	r0, [r2, #4]!
 800e6da:	3301      	adds	r3, #1
 800e6dc:	e7c5      	b.n	800e66a <__lshift+0x4a>
 800e6de:	3904      	subs	r1, #4
 800e6e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6e4:	f841 2f04 	str.w	r2, [r1, #4]!
 800e6e8:	459c      	cmp	ip, r3
 800e6ea:	d8f9      	bhi.n	800e6e0 <__lshift+0xc0>
 800e6ec:	e7ea      	b.n	800e6c4 <__lshift+0xa4>
 800e6ee:	bf00      	nop
 800e6f0:	0800f4ec 	.word	0x0800f4ec
 800e6f4:	0800f4fd 	.word	0x0800f4fd

0800e6f8 <__mcmp>:
 800e6f8:	690a      	ldr	r2, [r1, #16]
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	6900      	ldr	r0, [r0, #16]
 800e6fe:	1a80      	subs	r0, r0, r2
 800e700:	b530      	push	{r4, r5, lr}
 800e702:	d10e      	bne.n	800e722 <__mcmp+0x2a>
 800e704:	3314      	adds	r3, #20
 800e706:	3114      	adds	r1, #20
 800e708:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e70c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e710:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e714:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e718:	4295      	cmp	r5, r2
 800e71a:	d003      	beq.n	800e724 <__mcmp+0x2c>
 800e71c:	d205      	bcs.n	800e72a <__mcmp+0x32>
 800e71e:	f04f 30ff 	mov.w	r0, #4294967295
 800e722:	bd30      	pop	{r4, r5, pc}
 800e724:	42a3      	cmp	r3, r4
 800e726:	d3f3      	bcc.n	800e710 <__mcmp+0x18>
 800e728:	e7fb      	b.n	800e722 <__mcmp+0x2a>
 800e72a:	2001      	movs	r0, #1
 800e72c:	e7f9      	b.n	800e722 <__mcmp+0x2a>
	...

0800e730 <__mdiff>:
 800e730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e734:	4689      	mov	r9, r1
 800e736:	4606      	mov	r6, r0
 800e738:	4611      	mov	r1, r2
 800e73a:	4648      	mov	r0, r9
 800e73c:	4614      	mov	r4, r2
 800e73e:	f7ff ffdb 	bl	800e6f8 <__mcmp>
 800e742:	1e05      	subs	r5, r0, #0
 800e744:	d112      	bne.n	800e76c <__mdiff+0x3c>
 800e746:	4629      	mov	r1, r5
 800e748:	4630      	mov	r0, r6
 800e74a:	f7ff fd5b 	bl	800e204 <_Balloc>
 800e74e:	4602      	mov	r2, r0
 800e750:	b928      	cbnz	r0, 800e75e <__mdiff+0x2e>
 800e752:	4b3f      	ldr	r3, [pc, #252]	@ (800e850 <__mdiff+0x120>)
 800e754:	f240 2137 	movw	r1, #567	@ 0x237
 800e758:	483e      	ldr	r0, [pc, #248]	@ (800e854 <__mdiff+0x124>)
 800e75a:	f000 faf3 	bl	800ed44 <__assert_func>
 800e75e:	2301      	movs	r3, #1
 800e760:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e764:	4610      	mov	r0, r2
 800e766:	b003      	add	sp, #12
 800e768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e76c:	bfbc      	itt	lt
 800e76e:	464b      	movlt	r3, r9
 800e770:	46a1      	movlt	r9, r4
 800e772:	4630      	mov	r0, r6
 800e774:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e778:	bfba      	itte	lt
 800e77a:	461c      	movlt	r4, r3
 800e77c:	2501      	movlt	r5, #1
 800e77e:	2500      	movge	r5, #0
 800e780:	f7ff fd40 	bl	800e204 <_Balloc>
 800e784:	4602      	mov	r2, r0
 800e786:	b918      	cbnz	r0, 800e790 <__mdiff+0x60>
 800e788:	4b31      	ldr	r3, [pc, #196]	@ (800e850 <__mdiff+0x120>)
 800e78a:	f240 2145 	movw	r1, #581	@ 0x245
 800e78e:	e7e3      	b.n	800e758 <__mdiff+0x28>
 800e790:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e794:	6926      	ldr	r6, [r4, #16]
 800e796:	60c5      	str	r5, [r0, #12]
 800e798:	f109 0310 	add.w	r3, r9, #16
 800e79c:	f109 0514 	add.w	r5, r9, #20
 800e7a0:	f104 0e14 	add.w	lr, r4, #20
 800e7a4:	f100 0b14 	add.w	fp, r0, #20
 800e7a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e7ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e7b0:	9301      	str	r3, [sp, #4]
 800e7b2:	46d9      	mov	r9, fp
 800e7b4:	f04f 0c00 	mov.w	ip, #0
 800e7b8:	9b01      	ldr	r3, [sp, #4]
 800e7ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e7be:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e7c2:	9301      	str	r3, [sp, #4]
 800e7c4:	fa1f f38a 	uxth.w	r3, sl
 800e7c8:	4619      	mov	r1, r3
 800e7ca:	b283      	uxth	r3, r0
 800e7cc:	1acb      	subs	r3, r1, r3
 800e7ce:	0c00      	lsrs	r0, r0, #16
 800e7d0:	4463      	add	r3, ip
 800e7d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e7d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e7da:	b29b      	uxth	r3, r3
 800e7dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e7e0:	4576      	cmp	r6, lr
 800e7e2:	f849 3b04 	str.w	r3, [r9], #4
 800e7e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e7ea:	d8e5      	bhi.n	800e7b8 <__mdiff+0x88>
 800e7ec:	1b33      	subs	r3, r6, r4
 800e7ee:	3b15      	subs	r3, #21
 800e7f0:	f023 0303 	bic.w	r3, r3, #3
 800e7f4:	3415      	adds	r4, #21
 800e7f6:	3304      	adds	r3, #4
 800e7f8:	42a6      	cmp	r6, r4
 800e7fa:	bf38      	it	cc
 800e7fc:	2304      	movcc	r3, #4
 800e7fe:	441d      	add	r5, r3
 800e800:	445b      	add	r3, fp
 800e802:	461e      	mov	r6, r3
 800e804:	462c      	mov	r4, r5
 800e806:	4544      	cmp	r4, r8
 800e808:	d30e      	bcc.n	800e828 <__mdiff+0xf8>
 800e80a:	f108 0103 	add.w	r1, r8, #3
 800e80e:	1b49      	subs	r1, r1, r5
 800e810:	f021 0103 	bic.w	r1, r1, #3
 800e814:	3d03      	subs	r5, #3
 800e816:	45a8      	cmp	r8, r5
 800e818:	bf38      	it	cc
 800e81a:	2100      	movcc	r1, #0
 800e81c:	440b      	add	r3, r1
 800e81e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e822:	b191      	cbz	r1, 800e84a <__mdiff+0x11a>
 800e824:	6117      	str	r7, [r2, #16]
 800e826:	e79d      	b.n	800e764 <__mdiff+0x34>
 800e828:	f854 1b04 	ldr.w	r1, [r4], #4
 800e82c:	46e6      	mov	lr, ip
 800e82e:	0c08      	lsrs	r0, r1, #16
 800e830:	fa1c fc81 	uxtah	ip, ip, r1
 800e834:	4471      	add	r1, lr
 800e836:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e83a:	b289      	uxth	r1, r1
 800e83c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e840:	f846 1b04 	str.w	r1, [r6], #4
 800e844:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e848:	e7dd      	b.n	800e806 <__mdiff+0xd6>
 800e84a:	3f01      	subs	r7, #1
 800e84c:	e7e7      	b.n	800e81e <__mdiff+0xee>
 800e84e:	bf00      	nop
 800e850:	0800f4ec 	.word	0x0800f4ec
 800e854:	0800f4fd 	.word	0x0800f4fd

0800e858 <__d2b>:
 800e858:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e85c:	460f      	mov	r7, r1
 800e85e:	2101      	movs	r1, #1
 800e860:	ec59 8b10 	vmov	r8, r9, d0
 800e864:	4616      	mov	r6, r2
 800e866:	f7ff fccd 	bl	800e204 <_Balloc>
 800e86a:	4604      	mov	r4, r0
 800e86c:	b930      	cbnz	r0, 800e87c <__d2b+0x24>
 800e86e:	4602      	mov	r2, r0
 800e870:	4b23      	ldr	r3, [pc, #140]	@ (800e900 <__d2b+0xa8>)
 800e872:	4824      	ldr	r0, [pc, #144]	@ (800e904 <__d2b+0xac>)
 800e874:	f240 310f 	movw	r1, #783	@ 0x30f
 800e878:	f000 fa64 	bl	800ed44 <__assert_func>
 800e87c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e880:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e884:	b10d      	cbz	r5, 800e88a <__d2b+0x32>
 800e886:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e88a:	9301      	str	r3, [sp, #4]
 800e88c:	f1b8 0300 	subs.w	r3, r8, #0
 800e890:	d023      	beq.n	800e8da <__d2b+0x82>
 800e892:	4668      	mov	r0, sp
 800e894:	9300      	str	r3, [sp, #0]
 800e896:	f7ff fd7c 	bl	800e392 <__lo0bits>
 800e89a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e89e:	b1d0      	cbz	r0, 800e8d6 <__d2b+0x7e>
 800e8a0:	f1c0 0320 	rsb	r3, r0, #32
 800e8a4:	fa02 f303 	lsl.w	r3, r2, r3
 800e8a8:	430b      	orrs	r3, r1
 800e8aa:	40c2      	lsrs	r2, r0
 800e8ac:	6163      	str	r3, [r4, #20]
 800e8ae:	9201      	str	r2, [sp, #4]
 800e8b0:	9b01      	ldr	r3, [sp, #4]
 800e8b2:	61a3      	str	r3, [r4, #24]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	bf0c      	ite	eq
 800e8b8:	2201      	moveq	r2, #1
 800e8ba:	2202      	movne	r2, #2
 800e8bc:	6122      	str	r2, [r4, #16]
 800e8be:	b1a5      	cbz	r5, 800e8ea <__d2b+0x92>
 800e8c0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e8c4:	4405      	add	r5, r0
 800e8c6:	603d      	str	r5, [r7, #0]
 800e8c8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e8cc:	6030      	str	r0, [r6, #0]
 800e8ce:	4620      	mov	r0, r4
 800e8d0:	b003      	add	sp, #12
 800e8d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8d6:	6161      	str	r1, [r4, #20]
 800e8d8:	e7ea      	b.n	800e8b0 <__d2b+0x58>
 800e8da:	a801      	add	r0, sp, #4
 800e8dc:	f7ff fd59 	bl	800e392 <__lo0bits>
 800e8e0:	9b01      	ldr	r3, [sp, #4]
 800e8e2:	6163      	str	r3, [r4, #20]
 800e8e4:	3020      	adds	r0, #32
 800e8e6:	2201      	movs	r2, #1
 800e8e8:	e7e8      	b.n	800e8bc <__d2b+0x64>
 800e8ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e8ee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e8f2:	6038      	str	r0, [r7, #0]
 800e8f4:	6918      	ldr	r0, [r3, #16]
 800e8f6:	f7ff fd2d 	bl	800e354 <__hi0bits>
 800e8fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e8fe:	e7e5      	b.n	800e8cc <__d2b+0x74>
 800e900:	0800f4ec 	.word	0x0800f4ec
 800e904:	0800f4fd 	.word	0x0800f4fd

0800e908 <__ssputs_r>:
 800e908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e90c:	688e      	ldr	r6, [r1, #8]
 800e90e:	461f      	mov	r7, r3
 800e910:	42be      	cmp	r6, r7
 800e912:	680b      	ldr	r3, [r1, #0]
 800e914:	4682      	mov	sl, r0
 800e916:	460c      	mov	r4, r1
 800e918:	4690      	mov	r8, r2
 800e91a:	d82d      	bhi.n	800e978 <__ssputs_r+0x70>
 800e91c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e920:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e924:	d026      	beq.n	800e974 <__ssputs_r+0x6c>
 800e926:	6965      	ldr	r5, [r4, #20]
 800e928:	6909      	ldr	r1, [r1, #16]
 800e92a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e92e:	eba3 0901 	sub.w	r9, r3, r1
 800e932:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e936:	1c7b      	adds	r3, r7, #1
 800e938:	444b      	add	r3, r9
 800e93a:	106d      	asrs	r5, r5, #1
 800e93c:	429d      	cmp	r5, r3
 800e93e:	bf38      	it	cc
 800e940:	461d      	movcc	r5, r3
 800e942:	0553      	lsls	r3, r2, #21
 800e944:	d527      	bpl.n	800e996 <__ssputs_r+0x8e>
 800e946:	4629      	mov	r1, r5
 800e948:	f7fd fed2 	bl	800c6f0 <_malloc_r>
 800e94c:	4606      	mov	r6, r0
 800e94e:	b360      	cbz	r0, 800e9aa <__ssputs_r+0xa2>
 800e950:	6921      	ldr	r1, [r4, #16]
 800e952:	464a      	mov	r2, r9
 800e954:	f7fe fdb1 	bl	800d4ba <memcpy>
 800e958:	89a3      	ldrh	r3, [r4, #12]
 800e95a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e95e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e962:	81a3      	strh	r3, [r4, #12]
 800e964:	6126      	str	r6, [r4, #16]
 800e966:	6165      	str	r5, [r4, #20]
 800e968:	444e      	add	r6, r9
 800e96a:	eba5 0509 	sub.w	r5, r5, r9
 800e96e:	6026      	str	r6, [r4, #0]
 800e970:	60a5      	str	r5, [r4, #8]
 800e972:	463e      	mov	r6, r7
 800e974:	42be      	cmp	r6, r7
 800e976:	d900      	bls.n	800e97a <__ssputs_r+0x72>
 800e978:	463e      	mov	r6, r7
 800e97a:	6820      	ldr	r0, [r4, #0]
 800e97c:	4632      	mov	r2, r6
 800e97e:	4641      	mov	r1, r8
 800e980:	f000 f9c6 	bl	800ed10 <memmove>
 800e984:	68a3      	ldr	r3, [r4, #8]
 800e986:	1b9b      	subs	r3, r3, r6
 800e988:	60a3      	str	r3, [r4, #8]
 800e98a:	6823      	ldr	r3, [r4, #0]
 800e98c:	4433      	add	r3, r6
 800e98e:	6023      	str	r3, [r4, #0]
 800e990:	2000      	movs	r0, #0
 800e992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e996:	462a      	mov	r2, r5
 800e998:	f000 fa18 	bl	800edcc <_realloc_r>
 800e99c:	4606      	mov	r6, r0
 800e99e:	2800      	cmp	r0, #0
 800e9a0:	d1e0      	bne.n	800e964 <__ssputs_r+0x5c>
 800e9a2:	6921      	ldr	r1, [r4, #16]
 800e9a4:	4650      	mov	r0, sl
 800e9a6:	f7ff fbe3 	bl	800e170 <_free_r>
 800e9aa:	230c      	movs	r3, #12
 800e9ac:	f8ca 3000 	str.w	r3, [sl]
 800e9b0:	89a3      	ldrh	r3, [r4, #12]
 800e9b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e9b6:	81a3      	strh	r3, [r4, #12]
 800e9b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e9bc:	e7e9      	b.n	800e992 <__ssputs_r+0x8a>
	...

0800e9c0 <_svfiprintf_r>:
 800e9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9c4:	4698      	mov	r8, r3
 800e9c6:	898b      	ldrh	r3, [r1, #12]
 800e9c8:	061b      	lsls	r3, r3, #24
 800e9ca:	b09d      	sub	sp, #116	@ 0x74
 800e9cc:	4607      	mov	r7, r0
 800e9ce:	460d      	mov	r5, r1
 800e9d0:	4614      	mov	r4, r2
 800e9d2:	d510      	bpl.n	800e9f6 <_svfiprintf_r+0x36>
 800e9d4:	690b      	ldr	r3, [r1, #16]
 800e9d6:	b973      	cbnz	r3, 800e9f6 <_svfiprintf_r+0x36>
 800e9d8:	2140      	movs	r1, #64	@ 0x40
 800e9da:	f7fd fe89 	bl	800c6f0 <_malloc_r>
 800e9de:	6028      	str	r0, [r5, #0]
 800e9e0:	6128      	str	r0, [r5, #16]
 800e9e2:	b930      	cbnz	r0, 800e9f2 <_svfiprintf_r+0x32>
 800e9e4:	230c      	movs	r3, #12
 800e9e6:	603b      	str	r3, [r7, #0]
 800e9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e9ec:	b01d      	add	sp, #116	@ 0x74
 800e9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9f2:	2340      	movs	r3, #64	@ 0x40
 800e9f4:	616b      	str	r3, [r5, #20]
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9fa:	2320      	movs	r3, #32
 800e9fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ea00:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea04:	2330      	movs	r3, #48	@ 0x30
 800ea06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800eba4 <_svfiprintf_r+0x1e4>
 800ea0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ea0e:	f04f 0901 	mov.w	r9, #1
 800ea12:	4623      	mov	r3, r4
 800ea14:	469a      	mov	sl, r3
 800ea16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea1a:	b10a      	cbz	r2, 800ea20 <_svfiprintf_r+0x60>
 800ea1c:	2a25      	cmp	r2, #37	@ 0x25
 800ea1e:	d1f9      	bne.n	800ea14 <_svfiprintf_r+0x54>
 800ea20:	ebba 0b04 	subs.w	fp, sl, r4
 800ea24:	d00b      	beq.n	800ea3e <_svfiprintf_r+0x7e>
 800ea26:	465b      	mov	r3, fp
 800ea28:	4622      	mov	r2, r4
 800ea2a:	4629      	mov	r1, r5
 800ea2c:	4638      	mov	r0, r7
 800ea2e:	f7ff ff6b 	bl	800e908 <__ssputs_r>
 800ea32:	3001      	adds	r0, #1
 800ea34:	f000 80a7 	beq.w	800eb86 <_svfiprintf_r+0x1c6>
 800ea38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ea3a:	445a      	add	r2, fp
 800ea3c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ea3e:	f89a 3000 	ldrb.w	r3, [sl]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	f000 809f 	beq.w	800eb86 <_svfiprintf_r+0x1c6>
 800ea48:	2300      	movs	r3, #0
 800ea4a:	f04f 32ff 	mov.w	r2, #4294967295
 800ea4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea52:	f10a 0a01 	add.w	sl, sl, #1
 800ea56:	9304      	str	r3, [sp, #16]
 800ea58:	9307      	str	r3, [sp, #28]
 800ea5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ea5e:	931a      	str	r3, [sp, #104]	@ 0x68
 800ea60:	4654      	mov	r4, sl
 800ea62:	2205      	movs	r2, #5
 800ea64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea68:	484e      	ldr	r0, [pc, #312]	@ (800eba4 <_svfiprintf_r+0x1e4>)
 800ea6a:	f7f1 fbb9 	bl	80001e0 <memchr>
 800ea6e:	9a04      	ldr	r2, [sp, #16]
 800ea70:	b9d8      	cbnz	r0, 800eaaa <_svfiprintf_r+0xea>
 800ea72:	06d0      	lsls	r0, r2, #27
 800ea74:	bf44      	itt	mi
 800ea76:	2320      	movmi	r3, #32
 800ea78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea7c:	0711      	lsls	r1, r2, #28
 800ea7e:	bf44      	itt	mi
 800ea80:	232b      	movmi	r3, #43	@ 0x2b
 800ea82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea86:	f89a 3000 	ldrb.w	r3, [sl]
 800ea8a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea8c:	d015      	beq.n	800eaba <_svfiprintf_r+0xfa>
 800ea8e:	9a07      	ldr	r2, [sp, #28]
 800ea90:	4654      	mov	r4, sl
 800ea92:	2000      	movs	r0, #0
 800ea94:	f04f 0c0a 	mov.w	ip, #10
 800ea98:	4621      	mov	r1, r4
 800ea9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea9e:	3b30      	subs	r3, #48	@ 0x30
 800eaa0:	2b09      	cmp	r3, #9
 800eaa2:	d94b      	bls.n	800eb3c <_svfiprintf_r+0x17c>
 800eaa4:	b1b0      	cbz	r0, 800ead4 <_svfiprintf_r+0x114>
 800eaa6:	9207      	str	r2, [sp, #28]
 800eaa8:	e014      	b.n	800ead4 <_svfiprintf_r+0x114>
 800eaaa:	eba0 0308 	sub.w	r3, r0, r8
 800eaae:	fa09 f303 	lsl.w	r3, r9, r3
 800eab2:	4313      	orrs	r3, r2
 800eab4:	9304      	str	r3, [sp, #16]
 800eab6:	46a2      	mov	sl, r4
 800eab8:	e7d2      	b.n	800ea60 <_svfiprintf_r+0xa0>
 800eaba:	9b03      	ldr	r3, [sp, #12]
 800eabc:	1d19      	adds	r1, r3, #4
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	9103      	str	r1, [sp, #12]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	bfbb      	ittet	lt
 800eac6:	425b      	neglt	r3, r3
 800eac8:	f042 0202 	orrlt.w	r2, r2, #2
 800eacc:	9307      	strge	r3, [sp, #28]
 800eace:	9307      	strlt	r3, [sp, #28]
 800ead0:	bfb8      	it	lt
 800ead2:	9204      	strlt	r2, [sp, #16]
 800ead4:	7823      	ldrb	r3, [r4, #0]
 800ead6:	2b2e      	cmp	r3, #46	@ 0x2e
 800ead8:	d10a      	bne.n	800eaf0 <_svfiprintf_r+0x130>
 800eada:	7863      	ldrb	r3, [r4, #1]
 800eadc:	2b2a      	cmp	r3, #42	@ 0x2a
 800eade:	d132      	bne.n	800eb46 <_svfiprintf_r+0x186>
 800eae0:	9b03      	ldr	r3, [sp, #12]
 800eae2:	1d1a      	adds	r2, r3, #4
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	9203      	str	r2, [sp, #12]
 800eae8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eaec:	3402      	adds	r4, #2
 800eaee:	9305      	str	r3, [sp, #20]
 800eaf0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ebb4 <_svfiprintf_r+0x1f4>
 800eaf4:	7821      	ldrb	r1, [r4, #0]
 800eaf6:	2203      	movs	r2, #3
 800eaf8:	4650      	mov	r0, sl
 800eafa:	f7f1 fb71 	bl	80001e0 <memchr>
 800eafe:	b138      	cbz	r0, 800eb10 <_svfiprintf_r+0x150>
 800eb00:	9b04      	ldr	r3, [sp, #16]
 800eb02:	eba0 000a 	sub.w	r0, r0, sl
 800eb06:	2240      	movs	r2, #64	@ 0x40
 800eb08:	4082      	lsls	r2, r0
 800eb0a:	4313      	orrs	r3, r2
 800eb0c:	3401      	adds	r4, #1
 800eb0e:	9304      	str	r3, [sp, #16]
 800eb10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb14:	4824      	ldr	r0, [pc, #144]	@ (800eba8 <_svfiprintf_r+0x1e8>)
 800eb16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eb1a:	2206      	movs	r2, #6
 800eb1c:	f7f1 fb60 	bl	80001e0 <memchr>
 800eb20:	2800      	cmp	r0, #0
 800eb22:	d036      	beq.n	800eb92 <_svfiprintf_r+0x1d2>
 800eb24:	4b21      	ldr	r3, [pc, #132]	@ (800ebac <_svfiprintf_r+0x1ec>)
 800eb26:	bb1b      	cbnz	r3, 800eb70 <_svfiprintf_r+0x1b0>
 800eb28:	9b03      	ldr	r3, [sp, #12]
 800eb2a:	3307      	adds	r3, #7
 800eb2c:	f023 0307 	bic.w	r3, r3, #7
 800eb30:	3308      	adds	r3, #8
 800eb32:	9303      	str	r3, [sp, #12]
 800eb34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb36:	4433      	add	r3, r6
 800eb38:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb3a:	e76a      	b.n	800ea12 <_svfiprintf_r+0x52>
 800eb3c:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb40:	460c      	mov	r4, r1
 800eb42:	2001      	movs	r0, #1
 800eb44:	e7a8      	b.n	800ea98 <_svfiprintf_r+0xd8>
 800eb46:	2300      	movs	r3, #0
 800eb48:	3401      	adds	r4, #1
 800eb4a:	9305      	str	r3, [sp, #20]
 800eb4c:	4619      	mov	r1, r3
 800eb4e:	f04f 0c0a 	mov.w	ip, #10
 800eb52:	4620      	mov	r0, r4
 800eb54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb58:	3a30      	subs	r2, #48	@ 0x30
 800eb5a:	2a09      	cmp	r2, #9
 800eb5c:	d903      	bls.n	800eb66 <_svfiprintf_r+0x1a6>
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d0c6      	beq.n	800eaf0 <_svfiprintf_r+0x130>
 800eb62:	9105      	str	r1, [sp, #20]
 800eb64:	e7c4      	b.n	800eaf0 <_svfiprintf_r+0x130>
 800eb66:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb6a:	4604      	mov	r4, r0
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	e7f0      	b.n	800eb52 <_svfiprintf_r+0x192>
 800eb70:	ab03      	add	r3, sp, #12
 800eb72:	9300      	str	r3, [sp, #0]
 800eb74:	462a      	mov	r2, r5
 800eb76:	4b0e      	ldr	r3, [pc, #56]	@ (800ebb0 <_svfiprintf_r+0x1f0>)
 800eb78:	a904      	add	r1, sp, #16
 800eb7a:	4638      	mov	r0, r7
 800eb7c:	f7fd fee4 	bl	800c948 <_printf_float>
 800eb80:	1c42      	adds	r2, r0, #1
 800eb82:	4606      	mov	r6, r0
 800eb84:	d1d6      	bne.n	800eb34 <_svfiprintf_r+0x174>
 800eb86:	89ab      	ldrh	r3, [r5, #12]
 800eb88:	065b      	lsls	r3, r3, #25
 800eb8a:	f53f af2d 	bmi.w	800e9e8 <_svfiprintf_r+0x28>
 800eb8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eb90:	e72c      	b.n	800e9ec <_svfiprintf_r+0x2c>
 800eb92:	ab03      	add	r3, sp, #12
 800eb94:	9300      	str	r3, [sp, #0]
 800eb96:	462a      	mov	r2, r5
 800eb98:	4b05      	ldr	r3, [pc, #20]	@ (800ebb0 <_svfiprintf_r+0x1f0>)
 800eb9a:	a904      	add	r1, sp, #16
 800eb9c:	4638      	mov	r0, r7
 800eb9e:	f7fe f96b 	bl	800ce78 <_printf_i>
 800eba2:	e7ed      	b.n	800eb80 <_svfiprintf_r+0x1c0>
 800eba4:	0800f658 	.word	0x0800f658
 800eba8:	0800f662 	.word	0x0800f662
 800ebac:	0800c949 	.word	0x0800c949
 800ebb0:	0800e909 	.word	0x0800e909
 800ebb4:	0800f65e 	.word	0x0800f65e

0800ebb8 <__sflush_r>:
 800ebb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ebbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebc0:	0716      	lsls	r6, r2, #28
 800ebc2:	4605      	mov	r5, r0
 800ebc4:	460c      	mov	r4, r1
 800ebc6:	d454      	bmi.n	800ec72 <__sflush_r+0xba>
 800ebc8:	684b      	ldr	r3, [r1, #4]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	dc02      	bgt.n	800ebd4 <__sflush_r+0x1c>
 800ebce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	dd48      	ble.n	800ec66 <__sflush_r+0xae>
 800ebd4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ebd6:	2e00      	cmp	r6, #0
 800ebd8:	d045      	beq.n	800ec66 <__sflush_r+0xae>
 800ebda:	2300      	movs	r3, #0
 800ebdc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ebe0:	682f      	ldr	r7, [r5, #0]
 800ebe2:	6a21      	ldr	r1, [r4, #32]
 800ebe4:	602b      	str	r3, [r5, #0]
 800ebe6:	d030      	beq.n	800ec4a <__sflush_r+0x92>
 800ebe8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ebea:	89a3      	ldrh	r3, [r4, #12]
 800ebec:	0759      	lsls	r1, r3, #29
 800ebee:	d505      	bpl.n	800ebfc <__sflush_r+0x44>
 800ebf0:	6863      	ldr	r3, [r4, #4]
 800ebf2:	1ad2      	subs	r2, r2, r3
 800ebf4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ebf6:	b10b      	cbz	r3, 800ebfc <__sflush_r+0x44>
 800ebf8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ebfa:	1ad2      	subs	r2, r2, r3
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ec00:	6a21      	ldr	r1, [r4, #32]
 800ec02:	4628      	mov	r0, r5
 800ec04:	47b0      	blx	r6
 800ec06:	1c43      	adds	r3, r0, #1
 800ec08:	89a3      	ldrh	r3, [r4, #12]
 800ec0a:	d106      	bne.n	800ec1a <__sflush_r+0x62>
 800ec0c:	6829      	ldr	r1, [r5, #0]
 800ec0e:	291d      	cmp	r1, #29
 800ec10:	d82b      	bhi.n	800ec6a <__sflush_r+0xb2>
 800ec12:	4a2a      	ldr	r2, [pc, #168]	@ (800ecbc <__sflush_r+0x104>)
 800ec14:	410a      	asrs	r2, r1
 800ec16:	07d6      	lsls	r6, r2, #31
 800ec18:	d427      	bmi.n	800ec6a <__sflush_r+0xb2>
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	6062      	str	r2, [r4, #4]
 800ec1e:	04d9      	lsls	r1, r3, #19
 800ec20:	6922      	ldr	r2, [r4, #16]
 800ec22:	6022      	str	r2, [r4, #0]
 800ec24:	d504      	bpl.n	800ec30 <__sflush_r+0x78>
 800ec26:	1c42      	adds	r2, r0, #1
 800ec28:	d101      	bne.n	800ec2e <__sflush_r+0x76>
 800ec2a:	682b      	ldr	r3, [r5, #0]
 800ec2c:	b903      	cbnz	r3, 800ec30 <__sflush_r+0x78>
 800ec2e:	6560      	str	r0, [r4, #84]	@ 0x54
 800ec30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec32:	602f      	str	r7, [r5, #0]
 800ec34:	b1b9      	cbz	r1, 800ec66 <__sflush_r+0xae>
 800ec36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ec3a:	4299      	cmp	r1, r3
 800ec3c:	d002      	beq.n	800ec44 <__sflush_r+0x8c>
 800ec3e:	4628      	mov	r0, r5
 800ec40:	f7ff fa96 	bl	800e170 <_free_r>
 800ec44:	2300      	movs	r3, #0
 800ec46:	6363      	str	r3, [r4, #52]	@ 0x34
 800ec48:	e00d      	b.n	800ec66 <__sflush_r+0xae>
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	4628      	mov	r0, r5
 800ec4e:	47b0      	blx	r6
 800ec50:	4602      	mov	r2, r0
 800ec52:	1c50      	adds	r0, r2, #1
 800ec54:	d1c9      	bne.n	800ebea <__sflush_r+0x32>
 800ec56:	682b      	ldr	r3, [r5, #0]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d0c6      	beq.n	800ebea <__sflush_r+0x32>
 800ec5c:	2b1d      	cmp	r3, #29
 800ec5e:	d001      	beq.n	800ec64 <__sflush_r+0xac>
 800ec60:	2b16      	cmp	r3, #22
 800ec62:	d11e      	bne.n	800eca2 <__sflush_r+0xea>
 800ec64:	602f      	str	r7, [r5, #0]
 800ec66:	2000      	movs	r0, #0
 800ec68:	e022      	b.n	800ecb0 <__sflush_r+0xf8>
 800ec6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec6e:	b21b      	sxth	r3, r3
 800ec70:	e01b      	b.n	800ecaa <__sflush_r+0xf2>
 800ec72:	690f      	ldr	r7, [r1, #16]
 800ec74:	2f00      	cmp	r7, #0
 800ec76:	d0f6      	beq.n	800ec66 <__sflush_r+0xae>
 800ec78:	0793      	lsls	r3, r2, #30
 800ec7a:	680e      	ldr	r6, [r1, #0]
 800ec7c:	bf08      	it	eq
 800ec7e:	694b      	ldreq	r3, [r1, #20]
 800ec80:	600f      	str	r7, [r1, #0]
 800ec82:	bf18      	it	ne
 800ec84:	2300      	movne	r3, #0
 800ec86:	eba6 0807 	sub.w	r8, r6, r7
 800ec8a:	608b      	str	r3, [r1, #8]
 800ec8c:	f1b8 0f00 	cmp.w	r8, #0
 800ec90:	dde9      	ble.n	800ec66 <__sflush_r+0xae>
 800ec92:	6a21      	ldr	r1, [r4, #32]
 800ec94:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ec96:	4643      	mov	r3, r8
 800ec98:	463a      	mov	r2, r7
 800ec9a:	4628      	mov	r0, r5
 800ec9c:	47b0      	blx	r6
 800ec9e:	2800      	cmp	r0, #0
 800eca0:	dc08      	bgt.n	800ecb4 <__sflush_r+0xfc>
 800eca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eca6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ecaa:	81a3      	strh	r3, [r4, #12]
 800ecac:	f04f 30ff 	mov.w	r0, #4294967295
 800ecb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecb4:	4407      	add	r7, r0
 800ecb6:	eba8 0800 	sub.w	r8, r8, r0
 800ecba:	e7e7      	b.n	800ec8c <__sflush_r+0xd4>
 800ecbc:	dfbffffe 	.word	0xdfbffffe

0800ecc0 <_fflush_r>:
 800ecc0:	b538      	push	{r3, r4, r5, lr}
 800ecc2:	690b      	ldr	r3, [r1, #16]
 800ecc4:	4605      	mov	r5, r0
 800ecc6:	460c      	mov	r4, r1
 800ecc8:	b913      	cbnz	r3, 800ecd0 <_fflush_r+0x10>
 800ecca:	2500      	movs	r5, #0
 800eccc:	4628      	mov	r0, r5
 800ecce:	bd38      	pop	{r3, r4, r5, pc}
 800ecd0:	b118      	cbz	r0, 800ecda <_fflush_r+0x1a>
 800ecd2:	6a03      	ldr	r3, [r0, #32]
 800ecd4:	b90b      	cbnz	r3, 800ecda <_fflush_r+0x1a>
 800ecd6:	f7fe fa7b 	bl	800d1d0 <__sinit>
 800ecda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d0f3      	beq.n	800ecca <_fflush_r+0xa>
 800ece2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ece4:	07d0      	lsls	r0, r2, #31
 800ece6:	d404      	bmi.n	800ecf2 <_fflush_r+0x32>
 800ece8:	0599      	lsls	r1, r3, #22
 800ecea:	d402      	bmi.n	800ecf2 <_fflush_r+0x32>
 800ecec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ecee:	f7fe fbda 	bl	800d4a6 <__retarget_lock_acquire_recursive>
 800ecf2:	4628      	mov	r0, r5
 800ecf4:	4621      	mov	r1, r4
 800ecf6:	f7ff ff5f 	bl	800ebb8 <__sflush_r>
 800ecfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ecfc:	07da      	lsls	r2, r3, #31
 800ecfe:	4605      	mov	r5, r0
 800ed00:	d4e4      	bmi.n	800eccc <_fflush_r+0xc>
 800ed02:	89a3      	ldrh	r3, [r4, #12]
 800ed04:	059b      	lsls	r3, r3, #22
 800ed06:	d4e1      	bmi.n	800eccc <_fflush_r+0xc>
 800ed08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed0a:	f7fe fbcd 	bl	800d4a8 <__retarget_lock_release_recursive>
 800ed0e:	e7dd      	b.n	800eccc <_fflush_r+0xc>

0800ed10 <memmove>:
 800ed10:	4288      	cmp	r0, r1
 800ed12:	b510      	push	{r4, lr}
 800ed14:	eb01 0402 	add.w	r4, r1, r2
 800ed18:	d902      	bls.n	800ed20 <memmove+0x10>
 800ed1a:	4284      	cmp	r4, r0
 800ed1c:	4623      	mov	r3, r4
 800ed1e:	d807      	bhi.n	800ed30 <memmove+0x20>
 800ed20:	1e43      	subs	r3, r0, #1
 800ed22:	42a1      	cmp	r1, r4
 800ed24:	d008      	beq.n	800ed38 <memmove+0x28>
 800ed26:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ed2e:	e7f8      	b.n	800ed22 <memmove+0x12>
 800ed30:	4402      	add	r2, r0
 800ed32:	4601      	mov	r1, r0
 800ed34:	428a      	cmp	r2, r1
 800ed36:	d100      	bne.n	800ed3a <memmove+0x2a>
 800ed38:	bd10      	pop	{r4, pc}
 800ed3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ed3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ed42:	e7f7      	b.n	800ed34 <memmove+0x24>

0800ed44 <__assert_func>:
 800ed44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ed46:	4614      	mov	r4, r2
 800ed48:	461a      	mov	r2, r3
 800ed4a:	4b09      	ldr	r3, [pc, #36]	@ (800ed70 <__assert_func+0x2c>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	4605      	mov	r5, r0
 800ed50:	68d8      	ldr	r0, [r3, #12]
 800ed52:	b954      	cbnz	r4, 800ed6a <__assert_func+0x26>
 800ed54:	4b07      	ldr	r3, [pc, #28]	@ (800ed74 <__assert_func+0x30>)
 800ed56:	461c      	mov	r4, r3
 800ed58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ed5c:	9100      	str	r1, [sp, #0]
 800ed5e:	462b      	mov	r3, r5
 800ed60:	4905      	ldr	r1, [pc, #20]	@ (800ed78 <__assert_func+0x34>)
 800ed62:	f000 f86f 	bl	800ee44 <fiprintf>
 800ed66:	f7fd fc89 	bl	800c67c <abort>
 800ed6a:	4b04      	ldr	r3, [pc, #16]	@ (800ed7c <__assert_func+0x38>)
 800ed6c:	e7f4      	b.n	800ed58 <__assert_func+0x14>
 800ed6e:	bf00      	nop
 800ed70:	200002d8 	.word	0x200002d8
 800ed74:	0800f6ae 	.word	0x0800f6ae
 800ed78:	0800f680 	.word	0x0800f680
 800ed7c:	0800f673 	.word	0x0800f673

0800ed80 <_calloc_r>:
 800ed80:	b570      	push	{r4, r5, r6, lr}
 800ed82:	fba1 5402 	umull	r5, r4, r1, r2
 800ed86:	b93c      	cbnz	r4, 800ed98 <_calloc_r+0x18>
 800ed88:	4629      	mov	r1, r5
 800ed8a:	f7fd fcb1 	bl	800c6f0 <_malloc_r>
 800ed8e:	4606      	mov	r6, r0
 800ed90:	b928      	cbnz	r0, 800ed9e <_calloc_r+0x1e>
 800ed92:	2600      	movs	r6, #0
 800ed94:	4630      	mov	r0, r6
 800ed96:	bd70      	pop	{r4, r5, r6, pc}
 800ed98:	220c      	movs	r2, #12
 800ed9a:	6002      	str	r2, [r0, #0]
 800ed9c:	e7f9      	b.n	800ed92 <_calloc_r+0x12>
 800ed9e:	462a      	mov	r2, r5
 800eda0:	4621      	mov	r1, r4
 800eda2:	f7fe faae 	bl	800d302 <memset>
 800eda6:	e7f5      	b.n	800ed94 <_calloc_r+0x14>

0800eda8 <__ascii_mbtowc>:
 800eda8:	b082      	sub	sp, #8
 800edaa:	b901      	cbnz	r1, 800edae <__ascii_mbtowc+0x6>
 800edac:	a901      	add	r1, sp, #4
 800edae:	b142      	cbz	r2, 800edc2 <__ascii_mbtowc+0x1a>
 800edb0:	b14b      	cbz	r3, 800edc6 <__ascii_mbtowc+0x1e>
 800edb2:	7813      	ldrb	r3, [r2, #0]
 800edb4:	600b      	str	r3, [r1, #0]
 800edb6:	7812      	ldrb	r2, [r2, #0]
 800edb8:	1e10      	subs	r0, r2, #0
 800edba:	bf18      	it	ne
 800edbc:	2001      	movne	r0, #1
 800edbe:	b002      	add	sp, #8
 800edc0:	4770      	bx	lr
 800edc2:	4610      	mov	r0, r2
 800edc4:	e7fb      	b.n	800edbe <__ascii_mbtowc+0x16>
 800edc6:	f06f 0001 	mvn.w	r0, #1
 800edca:	e7f8      	b.n	800edbe <__ascii_mbtowc+0x16>

0800edcc <_realloc_r>:
 800edcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edd0:	4680      	mov	r8, r0
 800edd2:	4615      	mov	r5, r2
 800edd4:	460c      	mov	r4, r1
 800edd6:	b921      	cbnz	r1, 800ede2 <_realloc_r+0x16>
 800edd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eddc:	4611      	mov	r1, r2
 800edde:	f7fd bc87 	b.w	800c6f0 <_malloc_r>
 800ede2:	b92a      	cbnz	r2, 800edf0 <_realloc_r+0x24>
 800ede4:	f7ff f9c4 	bl	800e170 <_free_r>
 800ede8:	2400      	movs	r4, #0
 800edea:	4620      	mov	r0, r4
 800edec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edf0:	f000 f83a 	bl	800ee68 <_malloc_usable_size_r>
 800edf4:	4285      	cmp	r5, r0
 800edf6:	4606      	mov	r6, r0
 800edf8:	d802      	bhi.n	800ee00 <_realloc_r+0x34>
 800edfa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800edfe:	d8f4      	bhi.n	800edea <_realloc_r+0x1e>
 800ee00:	4629      	mov	r1, r5
 800ee02:	4640      	mov	r0, r8
 800ee04:	f7fd fc74 	bl	800c6f0 <_malloc_r>
 800ee08:	4607      	mov	r7, r0
 800ee0a:	2800      	cmp	r0, #0
 800ee0c:	d0ec      	beq.n	800ede8 <_realloc_r+0x1c>
 800ee0e:	42b5      	cmp	r5, r6
 800ee10:	462a      	mov	r2, r5
 800ee12:	4621      	mov	r1, r4
 800ee14:	bf28      	it	cs
 800ee16:	4632      	movcs	r2, r6
 800ee18:	f7fe fb4f 	bl	800d4ba <memcpy>
 800ee1c:	4621      	mov	r1, r4
 800ee1e:	4640      	mov	r0, r8
 800ee20:	f7ff f9a6 	bl	800e170 <_free_r>
 800ee24:	463c      	mov	r4, r7
 800ee26:	e7e0      	b.n	800edea <_realloc_r+0x1e>

0800ee28 <__ascii_wctomb>:
 800ee28:	4603      	mov	r3, r0
 800ee2a:	4608      	mov	r0, r1
 800ee2c:	b141      	cbz	r1, 800ee40 <__ascii_wctomb+0x18>
 800ee2e:	2aff      	cmp	r2, #255	@ 0xff
 800ee30:	d904      	bls.n	800ee3c <__ascii_wctomb+0x14>
 800ee32:	228a      	movs	r2, #138	@ 0x8a
 800ee34:	601a      	str	r2, [r3, #0]
 800ee36:	f04f 30ff 	mov.w	r0, #4294967295
 800ee3a:	4770      	bx	lr
 800ee3c:	700a      	strb	r2, [r1, #0]
 800ee3e:	2001      	movs	r0, #1
 800ee40:	4770      	bx	lr
	...

0800ee44 <fiprintf>:
 800ee44:	b40e      	push	{r1, r2, r3}
 800ee46:	b503      	push	{r0, r1, lr}
 800ee48:	4601      	mov	r1, r0
 800ee4a:	ab03      	add	r3, sp, #12
 800ee4c:	4805      	ldr	r0, [pc, #20]	@ (800ee64 <fiprintf+0x20>)
 800ee4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee52:	6800      	ldr	r0, [r0, #0]
 800ee54:	9301      	str	r3, [sp, #4]
 800ee56:	f000 f839 	bl	800eecc <_vfiprintf_r>
 800ee5a:	b002      	add	sp, #8
 800ee5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee60:	b003      	add	sp, #12
 800ee62:	4770      	bx	lr
 800ee64:	200002d8 	.word	0x200002d8

0800ee68 <_malloc_usable_size_r>:
 800ee68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee6c:	1f18      	subs	r0, r3, #4
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	bfbc      	itt	lt
 800ee72:	580b      	ldrlt	r3, [r1, r0]
 800ee74:	18c0      	addlt	r0, r0, r3
 800ee76:	4770      	bx	lr

0800ee78 <__sfputc_r>:
 800ee78:	6893      	ldr	r3, [r2, #8]
 800ee7a:	3b01      	subs	r3, #1
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	b410      	push	{r4}
 800ee80:	6093      	str	r3, [r2, #8]
 800ee82:	da08      	bge.n	800ee96 <__sfputc_r+0x1e>
 800ee84:	6994      	ldr	r4, [r2, #24]
 800ee86:	42a3      	cmp	r3, r4
 800ee88:	db01      	blt.n	800ee8e <__sfputc_r+0x16>
 800ee8a:	290a      	cmp	r1, #10
 800ee8c:	d103      	bne.n	800ee96 <__sfputc_r+0x1e>
 800ee8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee92:	f000 b933 	b.w	800f0fc <__swbuf_r>
 800ee96:	6813      	ldr	r3, [r2, #0]
 800ee98:	1c58      	adds	r0, r3, #1
 800ee9a:	6010      	str	r0, [r2, #0]
 800ee9c:	7019      	strb	r1, [r3, #0]
 800ee9e:	4608      	mov	r0, r1
 800eea0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eea4:	4770      	bx	lr

0800eea6 <__sfputs_r>:
 800eea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eea8:	4606      	mov	r6, r0
 800eeaa:	460f      	mov	r7, r1
 800eeac:	4614      	mov	r4, r2
 800eeae:	18d5      	adds	r5, r2, r3
 800eeb0:	42ac      	cmp	r4, r5
 800eeb2:	d101      	bne.n	800eeb8 <__sfputs_r+0x12>
 800eeb4:	2000      	movs	r0, #0
 800eeb6:	e007      	b.n	800eec8 <__sfputs_r+0x22>
 800eeb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eebc:	463a      	mov	r2, r7
 800eebe:	4630      	mov	r0, r6
 800eec0:	f7ff ffda 	bl	800ee78 <__sfputc_r>
 800eec4:	1c43      	adds	r3, r0, #1
 800eec6:	d1f3      	bne.n	800eeb0 <__sfputs_r+0xa>
 800eec8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eecc <_vfiprintf_r>:
 800eecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eed0:	460d      	mov	r5, r1
 800eed2:	b09d      	sub	sp, #116	@ 0x74
 800eed4:	4614      	mov	r4, r2
 800eed6:	4698      	mov	r8, r3
 800eed8:	4606      	mov	r6, r0
 800eeda:	b118      	cbz	r0, 800eee4 <_vfiprintf_r+0x18>
 800eedc:	6a03      	ldr	r3, [r0, #32]
 800eede:	b90b      	cbnz	r3, 800eee4 <_vfiprintf_r+0x18>
 800eee0:	f7fe f976 	bl	800d1d0 <__sinit>
 800eee4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eee6:	07d9      	lsls	r1, r3, #31
 800eee8:	d405      	bmi.n	800eef6 <_vfiprintf_r+0x2a>
 800eeea:	89ab      	ldrh	r3, [r5, #12]
 800eeec:	059a      	lsls	r2, r3, #22
 800eeee:	d402      	bmi.n	800eef6 <_vfiprintf_r+0x2a>
 800eef0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eef2:	f7fe fad8 	bl	800d4a6 <__retarget_lock_acquire_recursive>
 800eef6:	89ab      	ldrh	r3, [r5, #12]
 800eef8:	071b      	lsls	r3, r3, #28
 800eefa:	d501      	bpl.n	800ef00 <_vfiprintf_r+0x34>
 800eefc:	692b      	ldr	r3, [r5, #16]
 800eefe:	b99b      	cbnz	r3, 800ef28 <_vfiprintf_r+0x5c>
 800ef00:	4629      	mov	r1, r5
 800ef02:	4630      	mov	r0, r6
 800ef04:	f000 f938 	bl	800f178 <__swsetup_r>
 800ef08:	b170      	cbz	r0, 800ef28 <_vfiprintf_r+0x5c>
 800ef0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ef0c:	07dc      	lsls	r4, r3, #31
 800ef0e:	d504      	bpl.n	800ef1a <_vfiprintf_r+0x4e>
 800ef10:	f04f 30ff 	mov.w	r0, #4294967295
 800ef14:	b01d      	add	sp, #116	@ 0x74
 800ef16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef1a:	89ab      	ldrh	r3, [r5, #12]
 800ef1c:	0598      	lsls	r0, r3, #22
 800ef1e:	d4f7      	bmi.n	800ef10 <_vfiprintf_r+0x44>
 800ef20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ef22:	f7fe fac1 	bl	800d4a8 <__retarget_lock_release_recursive>
 800ef26:	e7f3      	b.n	800ef10 <_vfiprintf_r+0x44>
 800ef28:	2300      	movs	r3, #0
 800ef2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef2c:	2320      	movs	r3, #32
 800ef2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ef32:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef36:	2330      	movs	r3, #48	@ 0x30
 800ef38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f0e8 <_vfiprintf_r+0x21c>
 800ef3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ef40:	f04f 0901 	mov.w	r9, #1
 800ef44:	4623      	mov	r3, r4
 800ef46:	469a      	mov	sl, r3
 800ef48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef4c:	b10a      	cbz	r2, 800ef52 <_vfiprintf_r+0x86>
 800ef4e:	2a25      	cmp	r2, #37	@ 0x25
 800ef50:	d1f9      	bne.n	800ef46 <_vfiprintf_r+0x7a>
 800ef52:	ebba 0b04 	subs.w	fp, sl, r4
 800ef56:	d00b      	beq.n	800ef70 <_vfiprintf_r+0xa4>
 800ef58:	465b      	mov	r3, fp
 800ef5a:	4622      	mov	r2, r4
 800ef5c:	4629      	mov	r1, r5
 800ef5e:	4630      	mov	r0, r6
 800ef60:	f7ff ffa1 	bl	800eea6 <__sfputs_r>
 800ef64:	3001      	adds	r0, #1
 800ef66:	f000 80a7 	beq.w	800f0b8 <_vfiprintf_r+0x1ec>
 800ef6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ef6c:	445a      	add	r2, fp
 800ef6e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ef70:	f89a 3000 	ldrb.w	r3, [sl]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	f000 809f 	beq.w	800f0b8 <_vfiprintf_r+0x1ec>
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ef80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef84:	f10a 0a01 	add.w	sl, sl, #1
 800ef88:	9304      	str	r3, [sp, #16]
 800ef8a:	9307      	str	r3, [sp, #28]
 800ef8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ef90:	931a      	str	r3, [sp, #104]	@ 0x68
 800ef92:	4654      	mov	r4, sl
 800ef94:	2205      	movs	r2, #5
 800ef96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef9a:	4853      	ldr	r0, [pc, #332]	@ (800f0e8 <_vfiprintf_r+0x21c>)
 800ef9c:	f7f1 f920 	bl	80001e0 <memchr>
 800efa0:	9a04      	ldr	r2, [sp, #16]
 800efa2:	b9d8      	cbnz	r0, 800efdc <_vfiprintf_r+0x110>
 800efa4:	06d1      	lsls	r1, r2, #27
 800efa6:	bf44      	itt	mi
 800efa8:	2320      	movmi	r3, #32
 800efaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800efae:	0713      	lsls	r3, r2, #28
 800efb0:	bf44      	itt	mi
 800efb2:	232b      	movmi	r3, #43	@ 0x2b
 800efb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800efb8:	f89a 3000 	ldrb.w	r3, [sl]
 800efbc:	2b2a      	cmp	r3, #42	@ 0x2a
 800efbe:	d015      	beq.n	800efec <_vfiprintf_r+0x120>
 800efc0:	9a07      	ldr	r2, [sp, #28]
 800efc2:	4654      	mov	r4, sl
 800efc4:	2000      	movs	r0, #0
 800efc6:	f04f 0c0a 	mov.w	ip, #10
 800efca:	4621      	mov	r1, r4
 800efcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800efd0:	3b30      	subs	r3, #48	@ 0x30
 800efd2:	2b09      	cmp	r3, #9
 800efd4:	d94b      	bls.n	800f06e <_vfiprintf_r+0x1a2>
 800efd6:	b1b0      	cbz	r0, 800f006 <_vfiprintf_r+0x13a>
 800efd8:	9207      	str	r2, [sp, #28]
 800efda:	e014      	b.n	800f006 <_vfiprintf_r+0x13a>
 800efdc:	eba0 0308 	sub.w	r3, r0, r8
 800efe0:	fa09 f303 	lsl.w	r3, r9, r3
 800efe4:	4313      	orrs	r3, r2
 800efe6:	9304      	str	r3, [sp, #16]
 800efe8:	46a2      	mov	sl, r4
 800efea:	e7d2      	b.n	800ef92 <_vfiprintf_r+0xc6>
 800efec:	9b03      	ldr	r3, [sp, #12]
 800efee:	1d19      	adds	r1, r3, #4
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	9103      	str	r1, [sp, #12]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	bfbb      	ittet	lt
 800eff8:	425b      	neglt	r3, r3
 800effa:	f042 0202 	orrlt.w	r2, r2, #2
 800effe:	9307      	strge	r3, [sp, #28]
 800f000:	9307      	strlt	r3, [sp, #28]
 800f002:	bfb8      	it	lt
 800f004:	9204      	strlt	r2, [sp, #16]
 800f006:	7823      	ldrb	r3, [r4, #0]
 800f008:	2b2e      	cmp	r3, #46	@ 0x2e
 800f00a:	d10a      	bne.n	800f022 <_vfiprintf_r+0x156>
 800f00c:	7863      	ldrb	r3, [r4, #1]
 800f00e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f010:	d132      	bne.n	800f078 <_vfiprintf_r+0x1ac>
 800f012:	9b03      	ldr	r3, [sp, #12]
 800f014:	1d1a      	adds	r2, r3, #4
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	9203      	str	r2, [sp, #12]
 800f01a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f01e:	3402      	adds	r4, #2
 800f020:	9305      	str	r3, [sp, #20]
 800f022:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f0f8 <_vfiprintf_r+0x22c>
 800f026:	7821      	ldrb	r1, [r4, #0]
 800f028:	2203      	movs	r2, #3
 800f02a:	4650      	mov	r0, sl
 800f02c:	f7f1 f8d8 	bl	80001e0 <memchr>
 800f030:	b138      	cbz	r0, 800f042 <_vfiprintf_r+0x176>
 800f032:	9b04      	ldr	r3, [sp, #16]
 800f034:	eba0 000a 	sub.w	r0, r0, sl
 800f038:	2240      	movs	r2, #64	@ 0x40
 800f03a:	4082      	lsls	r2, r0
 800f03c:	4313      	orrs	r3, r2
 800f03e:	3401      	adds	r4, #1
 800f040:	9304      	str	r3, [sp, #16]
 800f042:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f046:	4829      	ldr	r0, [pc, #164]	@ (800f0ec <_vfiprintf_r+0x220>)
 800f048:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f04c:	2206      	movs	r2, #6
 800f04e:	f7f1 f8c7 	bl	80001e0 <memchr>
 800f052:	2800      	cmp	r0, #0
 800f054:	d03f      	beq.n	800f0d6 <_vfiprintf_r+0x20a>
 800f056:	4b26      	ldr	r3, [pc, #152]	@ (800f0f0 <_vfiprintf_r+0x224>)
 800f058:	bb1b      	cbnz	r3, 800f0a2 <_vfiprintf_r+0x1d6>
 800f05a:	9b03      	ldr	r3, [sp, #12]
 800f05c:	3307      	adds	r3, #7
 800f05e:	f023 0307 	bic.w	r3, r3, #7
 800f062:	3308      	adds	r3, #8
 800f064:	9303      	str	r3, [sp, #12]
 800f066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f068:	443b      	add	r3, r7
 800f06a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f06c:	e76a      	b.n	800ef44 <_vfiprintf_r+0x78>
 800f06e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f072:	460c      	mov	r4, r1
 800f074:	2001      	movs	r0, #1
 800f076:	e7a8      	b.n	800efca <_vfiprintf_r+0xfe>
 800f078:	2300      	movs	r3, #0
 800f07a:	3401      	adds	r4, #1
 800f07c:	9305      	str	r3, [sp, #20]
 800f07e:	4619      	mov	r1, r3
 800f080:	f04f 0c0a 	mov.w	ip, #10
 800f084:	4620      	mov	r0, r4
 800f086:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f08a:	3a30      	subs	r2, #48	@ 0x30
 800f08c:	2a09      	cmp	r2, #9
 800f08e:	d903      	bls.n	800f098 <_vfiprintf_r+0x1cc>
 800f090:	2b00      	cmp	r3, #0
 800f092:	d0c6      	beq.n	800f022 <_vfiprintf_r+0x156>
 800f094:	9105      	str	r1, [sp, #20]
 800f096:	e7c4      	b.n	800f022 <_vfiprintf_r+0x156>
 800f098:	fb0c 2101 	mla	r1, ip, r1, r2
 800f09c:	4604      	mov	r4, r0
 800f09e:	2301      	movs	r3, #1
 800f0a0:	e7f0      	b.n	800f084 <_vfiprintf_r+0x1b8>
 800f0a2:	ab03      	add	r3, sp, #12
 800f0a4:	9300      	str	r3, [sp, #0]
 800f0a6:	462a      	mov	r2, r5
 800f0a8:	4b12      	ldr	r3, [pc, #72]	@ (800f0f4 <_vfiprintf_r+0x228>)
 800f0aa:	a904      	add	r1, sp, #16
 800f0ac:	4630      	mov	r0, r6
 800f0ae:	f7fd fc4b 	bl	800c948 <_printf_float>
 800f0b2:	4607      	mov	r7, r0
 800f0b4:	1c78      	adds	r0, r7, #1
 800f0b6:	d1d6      	bne.n	800f066 <_vfiprintf_r+0x19a>
 800f0b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f0ba:	07d9      	lsls	r1, r3, #31
 800f0bc:	d405      	bmi.n	800f0ca <_vfiprintf_r+0x1fe>
 800f0be:	89ab      	ldrh	r3, [r5, #12]
 800f0c0:	059a      	lsls	r2, r3, #22
 800f0c2:	d402      	bmi.n	800f0ca <_vfiprintf_r+0x1fe>
 800f0c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f0c6:	f7fe f9ef 	bl	800d4a8 <__retarget_lock_release_recursive>
 800f0ca:	89ab      	ldrh	r3, [r5, #12]
 800f0cc:	065b      	lsls	r3, r3, #25
 800f0ce:	f53f af1f 	bmi.w	800ef10 <_vfiprintf_r+0x44>
 800f0d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f0d4:	e71e      	b.n	800ef14 <_vfiprintf_r+0x48>
 800f0d6:	ab03      	add	r3, sp, #12
 800f0d8:	9300      	str	r3, [sp, #0]
 800f0da:	462a      	mov	r2, r5
 800f0dc:	4b05      	ldr	r3, [pc, #20]	@ (800f0f4 <_vfiprintf_r+0x228>)
 800f0de:	a904      	add	r1, sp, #16
 800f0e0:	4630      	mov	r0, r6
 800f0e2:	f7fd fec9 	bl	800ce78 <_printf_i>
 800f0e6:	e7e4      	b.n	800f0b2 <_vfiprintf_r+0x1e6>
 800f0e8:	0800f658 	.word	0x0800f658
 800f0ec:	0800f662 	.word	0x0800f662
 800f0f0:	0800c949 	.word	0x0800c949
 800f0f4:	0800eea7 	.word	0x0800eea7
 800f0f8:	0800f65e 	.word	0x0800f65e

0800f0fc <__swbuf_r>:
 800f0fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0fe:	460e      	mov	r6, r1
 800f100:	4614      	mov	r4, r2
 800f102:	4605      	mov	r5, r0
 800f104:	b118      	cbz	r0, 800f10e <__swbuf_r+0x12>
 800f106:	6a03      	ldr	r3, [r0, #32]
 800f108:	b90b      	cbnz	r3, 800f10e <__swbuf_r+0x12>
 800f10a:	f7fe f861 	bl	800d1d0 <__sinit>
 800f10e:	69a3      	ldr	r3, [r4, #24]
 800f110:	60a3      	str	r3, [r4, #8]
 800f112:	89a3      	ldrh	r3, [r4, #12]
 800f114:	071a      	lsls	r2, r3, #28
 800f116:	d501      	bpl.n	800f11c <__swbuf_r+0x20>
 800f118:	6923      	ldr	r3, [r4, #16]
 800f11a:	b943      	cbnz	r3, 800f12e <__swbuf_r+0x32>
 800f11c:	4621      	mov	r1, r4
 800f11e:	4628      	mov	r0, r5
 800f120:	f000 f82a 	bl	800f178 <__swsetup_r>
 800f124:	b118      	cbz	r0, 800f12e <__swbuf_r+0x32>
 800f126:	f04f 37ff 	mov.w	r7, #4294967295
 800f12a:	4638      	mov	r0, r7
 800f12c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f12e:	6823      	ldr	r3, [r4, #0]
 800f130:	6922      	ldr	r2, [r4, #16]
 800f132:	1a98      	subs	r0, r3, r2
 800f134:	6963      	ldr	r3, [r4, #20]
 800f136:	b2f6      	uxtb	r6, r6
 800f138:	4283      	cmp	r3, r0
 800f13a:	4637      	mov	r7, r6
 800f13c:	dc05      	bgt.n	800f14a <__swbuf_r+0x4e>
 800f13e:	4621      	mov	r1, r4
 800f140:	4628      	mov	r0, r5
 800f142:	f7ff fdbd 	bl	800ecc0 <_fflush_r>
 800f146:	2800      	cmp	r0, #0
 800f148:	d1ed      	bne.n	800f126 <__swbuf_r+0x2a>
 800f14a:	68a3      	ldr	r3, [r4, #8]
 800f14c:	3b01      	subs	r3, #1
 800f14e:	60a3      	str	r3, [r4, #8]
 800f150:	6823      	ldr	r3, [r4, #0]
 800f152:	1c5a      	adds	r2, r3, #1
 800f154:	6022      	str	r2, [r4, #0]
 800f156:	701e      	strb	r6, [r3, #0]
 800f158:	6962      	ldr	r2, [r4, #20]
 800f15a:	1c43      	adds	r3, r0, #1
 800f15c:	429a      	cmp	r2, r3
 800f15e:	d004      	beq.n	800f16a <__swbuf_r+0x6e>
 800f160:	89a3      	ldrh	r3, [r4, #12]
 800f162:	07db      	lsls	r3, r3, #31
 800f164:	d5e1      	bpl.n	800f12a <__swbuf_r+0x2e>
 800f166:	2e0a      	cmp	r6, #10
 800f168:	d1df      	bne.n	800f12a <__swbuf_r+0x2e>
 800f16a:	4621      	mov	r1, r4
 800f16c:	4628      	mov	r0, r5
 800f16e:	f7ff fda7 	bl	800ecc0 <_fflush_r>
 800f172:	2800      	cmp	r0, #0
 800f174:	d0d9      	beq.n	800f12a <__swbuf_r+0x2e>
 800f176:	e7d6      	b.n	800f126 <__swbuf_r+0x2a>

0800f178 <__swsetup_r>:
 800f178:	b538      	push	{r3, r4, r5, lr}
 800f17a:	4b29      	ldr	r3, [pc, #164]	@ (800f220 <__swsetup_r+0xa8>)
 800f17c:	4605      	mov	r5, r0
 800f17e:	6818      	ldr	r0, [r3, #0]
 800f180:	460c      	mov	r4, r1
 800f182:	b118      	cbz	r0, 800f18c <__swsetup_r+0x14>
 800f184:	6a03      	ldr	r3, [r0, #32]
 800f186:	b90b      	cbnz	r3, 800f18c <__swsetup_r+0x14>
 800f188:	f7fe f822 	bl	800d1d0 <__sinit>
 800f18c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f190:	0719      	lsls	r1, r3, #28
 800f192:	d422      	bmi.n	800f1da <__swsetup_r+0x62>
 800f194:	06da      	lsls	r2, r3, #27
 800f196:	d407      	bmi.n	800f1a8 <__swsetup_r+0x30>
 800f198:	2209      	movs	r2, #9
 800f19a:	602a      	str	r2, [r5, #0]
 800f19c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f1a0:	81a3      	strh	r3, [r4, #12]
 800f1a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f1a6:	e033      	b.n	800f210 <__swsetup_r+0x98>
 800f1a8:	0758      	lsls	r0, r3, #29
 800f1aa:	d512      	bpl.n	800f1d2 <__swsetup_r+0x5a>
 800f1ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f1ae:	b141      	cbz	r1, 800f1c2 <__swsetup_r+0x4a>
 800f1b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f1b4:	4299      	cmp	r1, r3
 800f1b6:	d002      	beq.n	800f1be <__swsetup_r+0x46>
 800f1b8:	4628      	mov	r0, r5
 800f1ba:	f7fe ffd9 	bl	800e170 <_free_r>
 800f1be:	2300      	movs	r3, #0
 800f1c0:	6363      	str	r3, [r4, #52]	@ 0x34
 800f1c2:	89a3      	ldrh	r3, [r4, #12]
 800f1c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f1c8:	81a3      	strh	r3, [r4, #12]
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	6063      	str	r3, [r4, #4]
 800f1ce:	6923      	ldr	r3, [r4, #16]
 800f1d0:	6023      	str	r3, [r4, #0]
 800f1d2:	89a3      	ldrh	r3, [r4, #12]
 800f1d4:	f043 0308 	orr.w	r3, r3, #8
 800f1d8:	81a3      	strh	r3, [r4, #12]
 800f1da:	6923      	ldr	r3, [r4, #16]
 800f1dc:	b94b      	cbnz	r3, 800f1f2 <__swsetup_r+0x7a>
 800f1de:	89a3      	ldrh	r3, [r4, #12]
 800f1e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f1e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f1e8:	d003      	beq.n	800f1f2 <__swsetup_r+0x7a>
 800f1ea:	4621      	mov	r1, r4
 800f1ec:	4628      	mov	r0, r5
 800f1ee:	f000 f83f 	bl	800f270 <__smakebuf_r>
 800f1f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1f6:	f013 0201 	ands.w	r2, r3, #1
 800f1fa:	d00a      	beq.n	800f212 <__swsetup_r+0x9a>
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	60a2      	str	r2, [r4, #8]
 800f200:	6962      	ldr	r2, [r4, #20]
 800f202:	4252      	negs	r2, r2
 800f204:	61a2      	str	r2, [r4, #24]
 800f206:	6922      	ldr	r2, [r4, #16]
 800f208:	b942      	cbnz	r2, 800f21c <__swsetup_r+0xa4>
 800f20a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f20e:	d1c5      	bne.n	800f19c <__swsetup_r+0x24>
 800f210:	bd38      	pop	{r3, r4, r5, pc}
 800f212:	0799      	lsls	r1, r3, #30
 800f214:	bf58      	it	pl
 800f216:	6962      	ldrpl	r2, [r4, #20]
 800f218:	60a2      	str	r2, [r4, #8]
 800f21a:	e7f4      	b.n	800f206 <__swsetup_r+0x8e>
 800f21c:	2000      	movs	r0, #0
 800f21e:	e7f7      	b.n	800f210 <__swsetup_r+0x98>
 800f220:	200002d8 	.word	0x200002d8

0800f224 <__swhatbuf_r>:
 800f224:	b570      	push	{r4, r5, r6, lr}
 800f226:	460c      	mov	r4, r1
 800f228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f22c:	2900      	cmp	r1, #0
 800f22e:	b096      	sub	sp, #88	@ 0x58
 800f230:	4615      	mov	r5, r2
 800f232:	461e      	mov	r6, r3
 800f234:	da0d      	bge.n	800f252 <__swhatbuf_r+0x2e>
 800f236:	89a3      	ldrh	r3, [r4, #12]
 800f238:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f23c:	f04f 0100 	mov.w	r1, #0
 800f240:	bf14      	ite	ne
 800f242:	2340      	movne	r3, #64	@ 0x40
 800f244:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f248:	2000      	movs	r0, #0
 800f24a:	6031      	str	r1, [r6, #0]
 800f24c:	602b      	str	r3, [r5, #0]
 800f24e:	b016      	add	sp, #88	@ 0x58
 800f250:	bd70      	pop	{r4, r5, r6, pc}
 800f252:	466a      	mov	r2, sp
 800f254:	f000 f848 	bl	800f2e8 <_fstat_r>
 800f258:	2800      	cmp	r0, #0
 800f25a:	dbec      	blt.n	800f236 <__swhatbuf_r+0x12>
 800f25c:	9901      	ldr	r1, [sp, #4]
 800f25e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f262:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f266:	4259      	negs	r1, r3
 800f268:	4159      	adcs	r1, r3
 800f26a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f26e:	e7eb      	b.n	800f248 <__swhatbuf_r+0x24>

0800f270 <__smakebuf_r>:
 800f270:	898b      	ldrh	r3, [r1, #12]
 800f272:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f274:	079d      	lsls	r5, r3, #30
 800f276:	4606      	mov	r6, r0
 800f278:	460c      	mov	r4, r1
 800f27a:	d507      	bpl.n	800f28c <__smakebuf_r+0x1c>
 800f27c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f280:	6023      	str	r3, [r4, #0]
 800f282:	6123      	str	r3, [r4, #16]
 800f284:	2301      	movs	r3, #1
 800f286:	6163      	str	r3, [r4, #20]
 800f288:	b003      	add	sp, #12
 800f28a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f28c:	ab01      	add	r3, sp, #4
 800f28e:	466a      	mov	r2, sp
 800f290:	f7ff ffc8 	bl	800f224 <__swhatbuf_r>
 800f294:	9f00      	ldr	r7, [sp, #0]
 800f296:	4605      	mov	r5, r0
 800f298:	4639      	mov	r1, r7
 800f29a:	4630      	mov	r0, r6
 800f29c:	f7fd fa28 	bl	800c6f0 <_malloc_r>
 800f2a0:	b948      	cbnz	r0, 800f2b6 <__smakebuf_r+0x46>
 800f2a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2a6:	059a      	lsls	r2, r3, #22
 800f2a8:	d4ee      	bmi.n	800f288 <__smakebuf_r+0x18>
 800f2aa:	f023 0303 	bic.w	r3, r3, #3
 800f2ae:	f043 0302 	orr.w	r3, r3, #2
 800f2b2:	81a3      	strh	r3, [r4, #12]
 800f2b4:	e7e2      	b.n	800f27c <__smakebuf_r+0xc>
 800f2b6:	89a3      	ldrh	r3, [r4, #12]
 800f2b8:	6020      	str	r0, [r4, #0]
 800f2ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f2be:	81a3      	strh	r3, [r4, #12]
 800f2c0:	9b01      	ldr	r3, [sp, #4]
 800f2c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f2c6:	b15b      	cbz	r3, 800f2e0 <__smakebuf_r+0x70>
 800f2c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f2cc:	4630      	mov	r0, r6
 800f2ce:	f000 f81d 	bl	800f30c <_isatty_r>
 800f2d2:	b128      	cbz	r0, 800f2e0 <__smakebuf_r+0x70>
 800f2d4:	89a3      	ldrh	r3, [r4, #12]
 800f2d6:	f023 0303 	bic.w	r3, r3, #3
 800f2da:	f043 0301 	orr.w	r3, r3, #1
 800f2de:	81a3      	strh	r3, [r4, #12]
 800f2e0:	89a3      	ldrh	r3, [r4, #12]
 800f2e2:	431d      	orrs	r5, r3
 800f2e4:	81a5      	strh	r5, [r4, #12]
 800f2e6:	e7cf      	b.n	800f288 <__smakebuf_r+0x18>

0800f2e8 <_fstat_r>:
 800f2e8:	b538      	push	{r3, r4, r5, lr}
 800f2ea:	4d07      	ldr	r5, [pc, #28]	@ (800f308 <_fstat_r+0x20>)
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	4604      	mov	r4, r0
 800f2f0:	4608      	mov	r0, r1
 800f2f2:	4611      	mov	r1, r2
 800f2f4:	602b      	str	r3, [r5, #0]
 800f2f6:	f7f3 fe39 	bl	8002f6c <_fstat>
 800f2fa:	1c43      	adds	r3, r0, #1
 800f2fc:	d102      	bne.n	800f304 <_fstat_r+0x1c>
 800f2fe:	682b      	ldr	r3, [r5, #0]
 800f300:	b103      	cbz	r3, 800f304 <_fstat_r+0x1c>
 800f302:	6023      	str	r3, [r4, #0]
 800f304:	bd38      	pop	{r3, r4, r5, pc}
 800f306:	bf00      	nop
 800f308:	20000a30 	.word	0x20000a30

0800f30c <_isatty_r>:
 800f30c:	b538      	push	{r3, r4, r5, lr}
 800f30e:	4d06      	ldr	r5, [pc, #24]	@ (800f328 <_isatty_r+0x1c>)
 800f310:	2300      	movs	r3, #0
 800f312:	4604      	mov	r4, r0
 800f314:	4608      	mov	r0, r1
 800f316:	602b      	str	r3, [r5, #0]
 800f318:	f7f3 fe38 	bl	8002f8c <_isatty>
 800f31c:	1c43      	adds	r3, r0, #1
 800f31e:	d102      	bne.n	800f326 <_isatty_r+0x1a>
 800f320:	682b      	ldr	r3, [r5, #0]
 800f322:	b103      	cbz	r3, 800f326 <_isatty_r+0x1a>
 800f324:	6023      	str	r3, [r4, #0]
 800f326:	bd38      	pop	{r3, r4, r5, pc}
 800f328:	20000a30 	.word	0x20000a30

0800f32c <_init>:
 800f32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f32e:	bf00      	nop
 800f330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f332:	bc08      	pop	{r3}
 800f334:	469e      	mov	lr, r3
 800f336:	4770      	bx	lr

0800f338 <_fini>:
 800f338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f33a:	bf00      	nop
 800f33c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f33e:	bc08      	pop	{r3}
 800f340:	469e      	mov	lr, r3
 800f342:	4770      	bx	lr
