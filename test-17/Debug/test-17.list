
test-17.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000512c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080052cc  080052cc  000062cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800538c  0800538c  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  0800538c  0800538c  0000638c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005394  08005394  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005394  08005394  00006394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005398  08005398  00006398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800539c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  2000005c  080053f8  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  080053f8  0000736c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e7f2  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000234f  00000000  00000000  0001587e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d20  00000000  00000000  00017bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a39  00000000  00000000  000188f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019695  00000000  00000000  00019329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee0f  00000000  00000000  000329be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090adb  00000000  00000000  000417cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d22a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e2c  00000000  00000000  000d22ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  000d6118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080052b4 	.word	0x080052b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080052b4 	.word	0x080052b4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll>:
 * @param neutral_us_width Width of the neutral signal in microseconds.
 * @param full_forward_us_width Width of the full forward signal in microseconds.
 * @param rescale_forward_magnitude Maximum value for rescaling the forward signal. Overridden if fed into RemoteControlControl.
 * @param rescale_reverse_magnitude Minimum value for rescaling the reverse signal. Overridden if fed into RemoteControlControl.
 */
RCChannel::RCChannel(
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
 800057c:	603b      	str	r3, [r7, #0]
	CPU_clock_speed_MHz(CPU_clock_speed_MHz),
	full_reverse_us_width(full_reverse_us_width),
	neutral_us_width(neutral_us_width),
	full_forward_us_width(full_forward_us_width),
	rescale_forward_magnitude(rescale_forward_magnitude),
	rescale_reverse_magnitude(rescale_reverse_magnitude)
 800057e:	4a37      	ldr	r2, [pc, #220]	@ (800065c <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll+0xec>)
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	2200      	movs	r2, #0
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	2200      	movs	r2, #0
 800059a:	611a      	str	r2, [r3, #16]
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	2200      	movs	r2, #0
 80005a0:	615a      	str	r2, [r3, #20]
	timer_handle(timer_handle),
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	68ba      	ldr	r2, [r7, #8]
 80005a6:	619a      	str	r2, [r3, #24]
	timer_channel(timer_channel),
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	61da      	str	r2, [r3, #28]
	RC_signal_period_us(RC_signal_period_us),
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	683a      	ldr	r2, [r7, #0]
 80005b2:	621a      	str	r2, [r3, #32]
	CPU_clock_speed_MHz(CPU_clock_speed_MHz),
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	6a3a      	ldr	r2, [r7, #32]
 80005b8:	625a      	str	r2, [r3, #36]	@ 0x24
	full_reverse_us_width(full_reverse_us_width),
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80005be:	629a      	str	r2, [r3, #40]	@ 0x28
	neutral_us_width(neutral_us_width),
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80005c4:	62da      	str	r2, [r3, #44]	@ 0x2c
	full_forward_us_width(full_forward_us_width),
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80005ca:	631a      	str	r2, [r3, #48]	@ 0x30
	rescale_forward_magnitude(rescale_forward_magnitude),
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80005d0:	635a      	str	r2, [r3, #52]	@ 0x34
	rescale_reverse_magnitude(rescale_reverse_magnitude)
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80005d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	2201      	movs	r2, #1
 80005dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
{
	// Critical. Starts the first interrupt.
	HAL_TIM_IC_Start_IT(timer_handle, timer_channel);
 80005e0:	6879      	ldr	r1, [r7, #4]
 80005e2:	68b8      	ldr	r0, [r7, #8]
 80005e4:	f002 fa20 	bl	8002a28 <HAL_TIM_IC_Start_IT>

	// Set minuend depending on whether it's a 16-bit or 32-bit timer.
	// This is specific to the STM32F411CUE6!!
	if (((timer_handle->Instance) == TIM2) or ((timer_handle->Instance) == TIM5))
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80005f0:	d004      	beq.n	80005fc <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll+0x8c>
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a1a      	ldr	r2, [pc, #104]	@ (8000660 <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll+0xf0>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d104      	bne.n	8000606 <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll+0x96>
	{
		minuend = 0xffffffff;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f04f 32ff 	mov.w	r2, #4294967295
 8000602:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000604:	e003      	b.n	800060e <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll+0x9e>
	}
	else
	{
		minuend = 0xffff;
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800060c:	63da      	str	r2, [r3, #60]	@ 0x3c
	}

	// For later scaling
	uint32_t prescalar = timer_handle->Instance->PSC + 1;
 800060e:	68bb      	ldr	r3, [r7, #8]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000614:	3301      	adds	r3, #1
 8000616:	617b      	str	r3, [r7, #20]
	float refClock = CPU_clock_speed_MHz/prescalar;
 8000618:	6a3a      	ldr	r2, [r7, #32]
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000620:	ee07 3a90 	vmov	s15, r3
 8000624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000628:	edc7 7a04 	vstr	s15, [r7, #16]
	mFactor = 1000000/refClock;
 800062c:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8000664 <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll+0xf4>
 8000630:	ed97 7a04 	vldr	s14, [r7, #16]
 8000634:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40

	// Needed later
	forward_range = full_forward_us_width - neutral_us_width;
 800063e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000642:	1ad2      	subs	r2, r2, r3
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	64da      	str	r2, [r3, #76]	@ 0x4c
	reverse_range = neutral_us_width - full_reverse_us_width;
 8000648:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800064a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800064c:	1ad2      	subs	r2, r2, r3
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	4618      	mov	r0, r3
 8000656:	3718      	adds	r7, #24
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	08005328 	.word	0x08005328
 8000660:	40000c00 	.word	0x40000c00
 8000664:	49742400 	.word	0x49742400

08000668 <_ZN9RCChannel8callbackEv>:
 * 
 * @note This function assumes that the timer handle and channel have been properly initialized.
 * Please set the associated timer channel to input capture mode, direct. 
 * Leave the auto-reload value as large as possible.
 */
void RCChannel::callback(){
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	if(first_capture)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8000676:	2b00      	cmp	r3, #0
 8000678:	d010      	beq.n	800069c <_ZN9RCChannel8callbackEv+0x34>
 	{
 		first_value = HAL_TIM_ReadCapturedValue(timer_handle, timer_channel);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	699a      	ldr	r2, [r3, #24]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	69db      	ldr	r3, [r3, #28]
 8000682:	4619      	mov	r1, r3
 8000684:	4610      	mov	r0, r2
 8000686:	f002 ffe1 	bl	800364c <HAL_TIM_ReadCapturedValue>
 800068a:	4603      	mov	r3, r0
 800068c:	461a      	mov	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	605a      	str	r2, [r3, #4]
 		first_capture = false;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2200      	movs	r2, #0
 8000696:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		}

 	// Finally
 	first_capture = true;
 	}
}
 800069a:	e073      	b.n	8000784 <_ZN9RCChannel8callbackEv+0x11c>
 		second_value = HAL_TIM_ReadCapturedValue(timer_handle, timer_channel);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	699a      	ldr	r2, [r3, #24]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	69db      	ldr	r3, [r3, #28]
 80006a4:	4619      	mov	r1, r3
 80006a6:	4610      	mov	r0, r2
 80006a8:	f002 ffd0 	bl	800364c <HAL_TIM_ReadCapturedValue>
 80006ac:	4603      	mov	r3, r0
 80006ae:	461a      	mov	r2, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 		if(first_value > second_value)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	685a      	ldr	r2, [r3, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	689b      	ldr	r3, [r3, #8]
 80006bc:	429a      	cmp	r2, r3
 80006be:	dd0c      	ble.n	80006da <_ZN9RCChannel8callbackEv+0x72>
 			difference = minuend - first_value + second_value + 1;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80006c4:	687a      	ldr	r2, [r7, #4]
 80006c6:	6852      	ldr	r2, [r2, #4]
 80006c8:	1a9b      	subs	r3, r3, r2
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	6892      	ldr	r2, [r2, #8]
 80006ce:	4413      	add	r3, r2
 80006d0:	3301      	adds	r3, #1
 80006d2:	461a      	mov	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	e006      	b.n	80006e8 <_ZN9RCChannel8callbackEv+0x80>
 			difference = second_value - first_value;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	689a      	ldr	r2, [r3, #8]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	1ad2      	subs	r2, r2, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	60da      	str	r2, [r3, #12]
 		us_width = difference;//*mFactor;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	68da      	ldr	r2, [r3, #12]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	611a      	str	r2, [r3, #16]
		if(us_width > RC_signal_period_us/2)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	691a      	ldr	r2, [r3, #16]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	6a1b      	ldr	r3, [r3, #32]
 80006f8:	0fd9      	lsrs	r1, r3, #31
 80006fa:	440b      	add	r3, r1
 80006fc:	105b      	asrs	r3, r3, #1
 80006fe:	429a      	cmp	r2, r3
 8000700:	dd06      	ble.n	8000710 <_ZN9RCChannel8callbackEv+0xa8>
			us_width = RC_signal_period_us - us_width;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6a1a      	ldr	r2, [r3, #32]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	691b      	ldr	r3, [r3, #16]
 800070a:	1ad2      	subs	r2, r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	611a      	str	r2, [r3, #16]
		int32_t centered_value = us_width - neutral_us_width;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	691a      	ldr	r2, [r3, #16]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000718:	1ad3      	subs	r3, r2, r3
 800071a:	60fb      	str	r3, [r7, #12]
 		if(centered_value >= 0)
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	2b00      	cmp	r3, #0
 8000720:	db15      	blt.n	800074e <_ZN9RCChannel8callbackEv+0xe6>
 			value = centered_value*rescale_forward_magnitude/forward_range;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000726:	68fa      	ldr	r2, [r7, #12]
 8000728:	fb03 f202 	mul.w	r2, r3, r2
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000730:	fb92 f2f3 	sdiv	r2, r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	615a      	str	r2, [r3, #20]
 	 		if(value>rescale_forward_magnitude)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	695a      	ldr	r2, [r3, #20]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000740:	429a      	cmp	r2, r3
 8000742:	dd1b      	ble.n	800077c <_ZN9RCChannel8callbackEv+0x114>
 	 			value = rescale_forward_magnitude;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	615a      	str	r2, [r3, #20]
 800074c:	e016      	b.n	800077c <_ZN9RCChannel8callbackEv+0x114>
			value =  centered_value*rescale_reverse_magnitude/reverse_range;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000752:	68fa      	ldr	r2, [r7, #12]
 8000754:	fb03 f202 	mul.w	r2, r3, r2
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800075c:	fb92 f2f3 	sdiv	r2, r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	615a      	str	r2, [r3, #20]
	 		if(value<-rescale_reverse_magnitude)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	695a      	ldr	r2, [r3, #20]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800076c:	425b      	negs	r3, r3
 800076e:	429a      	cmp	r2, r3
 8000770:	da04      	bge.n	800077c <_ZN9RCChannel8callbackEv+0x114>
	 			value = -rescale_reverse_magnitude;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000776:	425a      	negs	r2, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	615a      	str	r2, [r3, #20]
 	first_capture = true;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <_ZN9RCChannelD1Ev>:
/**
 * @brief Destructor for the RCChannel class.
 * 
 * This destructor stops the interrupts for the RCChannel object.
 */
RCChannel::~RCChannel() {
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	4a07      	ldr	r2, [pc, #28]	@ (80007b4 <_ZN9RCChannelD1Ev+0x28>)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	601a      	str	r2, [r3, #0]
	// Stop interrupts
	HAL_TIM_IC_Stop_IT(timer_handle, timer_channel);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	699a      	ldr	r2, [r3, #24]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	4619      	mov	r1, r3
 80007a4:	4610      	mov	r0, r2
 80007a6:	f002 fa59 	bl	8002c5c <HAL_TIM_IC_Stop_IT>
}
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4618      	mov	r0, r3
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	08005328 	.word	0x08005328

080007b8 <_ZN9RCChannelD0Ev>:
RCChannel::~RCChannel() {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
}
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff ffe3 	bl	800078c <_ZN9RCChannelD1Ev>
 80007c6:	2150      	movs	r1, #80	@ 0x50
 80007c8:	6878      	ldr	r0, [r7, #4]
 80007ca:	f004 f825 	bl	8004818 <_ZdlPvj>
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4618      	mov	r0, r3
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm>:
 * @param timer_channel The channel number to be used with the timer (like TIM_CHANNEL_1).
 * @param CPU_clock_speed_MHz The CPU clock speed in MHz (like 96).
 * @param PWM_frequency_Hz The PWM frequency in Hz (20,000 to 100,000 allowed).
 */

TB6612FNG_Motor::TB6612FNG_Motor(
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	4613      	mov	r3, r2
 80007e6:	80fb      	strh	r3, [r7, #6]

	: IN1_pin_group(IN1_pin_group), IN1_pin(IN1_pin),
	  IN2_pin_group(IN2_pin_group), IN2_pin(IN2_pin),
	  pTimer(pTimer), timer_channel(timer_channel),
	  CPU_clock_speed_MHz(CPU_clock_speed_MHz),
	  PWM_frequency_Hz(PWM_frequency_Hz)
 80007e8:	4a23      	ldr	r2, [pc, #140]	@ (8000878 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa0>)
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	601a      	str	r2, [r3, #0]
	: IN1_pin_group(IN1_pin_group), IN1_pin(IN1_pin),
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	68ba      	ldr	r2, [r7, #8]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	88fa      	ldrh	r2, [r7, #6]
 80007f8:	811a      	strh	r2, [r3, #8]
	  IN2_pin_group(IN2_pin_group), IN2_pin(IN2_pin),
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	683a      	ldr	r2, [r7, #0]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	8b3a      	ldrh	r2, [r7, #24]
 8000804:	821a      	strh	r2, [r3, #16]
	  pTimer(pTimer), timer_channel(timer_channel),
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	69fa      	ldr	r2, [r7, #28]
 800080a:	615a      	str	r2, [r3, #20]
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	6a3a      	ldr	r2, [r7, #32]
 8000810:	619a      	str	r2, [r3, #24]
	  CPU_clock_speed_MHz(CPU_clock_speed_MHz),
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000816:	61da      	str	r2, [r3, #28]
	  PWM_frequency_Hz(PWM_frequency_Hz)
 8000818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800081a:	b29a      	uxth	r2, r3
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	841a      	strh	r2, [r3, #32]
{
	// Make sure the motor is off to start
	stop();
 8000820:	68f8      	ldr	r0, [r7, #12]
 8000822:	f000 f8b8 	bl	8000996 <_ZN15TB6612FNG_Motor4stopEv>

	// Make sure the PWM frequency is within bounds
	if(PWM_frequency_Hz < 20000)
 8000826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000828:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800082c:	4293      	cmp	r3, r2
 800082e:	d803      	bhi.n	8000838 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0x60>
	{
		// Too low. Human can hear this.
		PWM_frequency_Hz = 20000;
 8000830:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000834:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000836:	e005      	b.n	8000844 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0x6c>
	}
	else if(PWM_frequency_Hz > 100000)
 8000838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800083a:	4a10      	ldr	r2, [pc, #64]	@ (800087c <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa4>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d901      	bls.n	8000844 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0x6c>
	{
		// Very high. May interfere with other tasks.
		PWM_frequency_Hz = 100000;
 8000840:	4b0e      	ldr	r3, [pc, #56]	@ (800087c <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa4>)
 8000842:	62bb      	str	r3, [r7, #40]	@ 0x28
	}

	// Set the auto-reload value based on the CPU clock speed and the desired PWM frequency
	auto_reload_value =( CPU_clock_speed_MHz * 1000000 / PWM_frequency_Hz ) - 1;
 8000844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000846:	4a0e      	ldr	r2, [pc, #56]	@ (8000880 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa8>)
 8000848:	fb03 f202 	mul.w	r2, r3, r2
 800084c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800084e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000852:	b29b      	uxth	r3, r3
 8000854:	3b01      	subs	r3, #1
 8000856:	b29a      	uxth	r2, r3
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	845a      	strh	r2, [r3, #34]	@ 0x22
	pTimer->Instance->ARR = auto_reload_value;
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Start the PWM generation
	start();
 8000866:	68f8      	ldr	r0, [r7, #12]
 8000868:	f000 f885 	bl	8000976 <_ZN15TB6612FNG_Motor5startEv>
}
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	4618      	mov	r0, r3
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	08005338 	.word	0x08005338
 800087c:	000186a0 	.word	0x000186a0
 8000880:	000f4240 	.word	0x000f4240

08000884 <_ZN15TB6612FNG_MotorD1Ev>:

/**
 * @brief Destructor for the TB6612FNG_Motor class.
 */
TB6612FNG_Motor::~TB6612FNG_Motor()
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	4a05      	ldr	r2, [pc, #20]	@ (80008a4 <_ZN15TB6612FNG_MotorD1Ev+0x20>)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	601a      	str	r2, [r3, #0]
{
	stop();
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f000 f87f 	bl	8000996 <_ZN15TB6612FNG_Motor4stopEv>
}
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	08005338 	.word	0x08005338

080008a8 <_ZN15TB6612FNG_MotorD0Ev>:
TB6612FNG_Motor::~TB6612FNG_Motor()
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
}
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f7ff ffe7 	bl	8000884 <_ZN15TB6612FNG_MotorD1Ev>
 80008b6:	2124      	movs	r1, #36	@ 0x24
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f003 ffad 	bl	8004818 <_ZdlPvj>
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4618      	mov	r0, r3
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <_ZN15TB6612FNG_Motor8set_dutyEtt>:
/**
 * @brief Sets the duty cycle of the motor.
 * @param speed The duty cycle value, ranging from -100 to 100 by default.
 */
void TB6612FNG_Motor::set_duty(uint16_t duty, uint16_t maximum_value)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	460b      	mov	r3, r1
 80008d2:	807b      	strh	r3, [r7, #2]
 80008d4:	4613      	mov	r3, r2
 80008d6:	803b      	strh	r3, [r7, #0]
	// Check if duty cycle is within bounds
	if(duty > maximum_value)
 80008d8:	887a      	ldrh	r2, [r7, #2]
 80008da:	883b      	ldrh	r3, [r7, #0]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d902      	bls.n	80008e6 <_ZN15TB6612FNG_Motor8set_dutyEtt+0x1e>
	{
		duty = maximum_value;
 80008e0:	883b      	ldrh	r3, [r7, #0]
 80008e2:	807b      	strh	r3, [r7, #2]
 80008e4:	e007      	b.n	80008f6 <_ZN15TB6612FNG_Motor8set_dutyEtt+0x2e>
	}
	else if(duty < -maximum_value)
 80008e6:	887a      	ldrh	r2, [r7, #2]
 80008e8:	883b      	ldrh	r3, [r7, #0]
 80008ea:	425b      	negs	r3, r3
 80008ec:	429a      	cmp	r2, r3
 80008ee:	da02      	bge.n	80008f6 <_ZN15TB6612FNG_Motor8set_dutyEtt+0x2e>
	{
		duty = -maximum_value;
 80008f0:	883b      	ldrh	r3, [r7, #0]
 80008f2:	425b      	negs	r3, r3
 80008f4:	807b      	strh	r3, [r7, #2]
	}

	// Raise the appropriate pins
	if(duty >= 0)
	{
		HAL_GPIO_WritePin(IN1_pin_group, IN1_pin, GPIO_PIN_SET);
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6858      	ldr	r0, [r3, #4]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	891b      	ldrh	r3, [r3, #8]
 80008fe:	2201      	movs	r2, #1
 8000900:	4619      	mov	r1, r3
 8000902:	f001 f9d7 	bl	8001cb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_pin_group, IN2_pin, GPIO_PIN_RESET);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	68d8      	ldr	r0, [r3, #12]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	8a1b      	ldrh	r3, [r3, #16]
 800090e:	2200      	movs	r2, #0
 8000910:	4619      	mov	r1, r3
 8000912:	f001 f9cf 	bl	8001cb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN1_pin_group, IN1_pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(IN2_pin_group, IN2_pin, GPIO_PIN_SET);
	}

	// Set the compare value
	uint32_t compare_value = duty * auto_reload_value / maximum_value;
 8000916:	887b      	ldrh	r3, [r7, #2]
 8000918:	687a      	ldr	r2, [r7, #4]
 800091a:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800091c:	fb03 f202 	mul.w	r2, r3, r2
 8000920:	883b      	ldrh	r3, [r7, #0]
 8000922:	fb92 f3f3 	sdiv	r3, r2, r3
 8000926:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(pTimer, timer_channel, compare_value);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d105      	bne.n	800093c <_ZN15TB6612FNG_Motor8set_dutyEtt+0x74>
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	695b      	ldr	r3, [r3, #20]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800093a:	e018      	b.n	800096e <_ZN15TB6612FNG_Motor8set_dutyEtt+0xa6>
	__HAL_TIM_SET_COMPARE(pTimer, timer_channel, compare_value);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	2b04      	cmp	r3, #4
 8000942:	d105      	bne.n	8000950 <_ZN15TB6612FNG_Motor8set_dutyEtt+0x88>
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	695b      	ldr	r3, [r3, #20]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	68fa      	ldr	r2, [r7, #12]
 800094c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800094e:	e00e      	b.n	800096e <_ZN15TB6612FNG_Motor8set_dutyEtt+0xa6>
	__HAL_TIM_SET_COMPARE(pTimer, timer_channel, compare_value);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	2b08      	cmp	r3, #8
 8000956:	d105      	bne.n	8000964 <_ZN15TB6612FNG_Motor8set_dutyEtt+0x9c>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	68fa      	ldr	r2, [r7, #12]
 8000960:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000962:	e004      	b.n	800096e <_ZN15TB6612FNG_Motor8set_dutyEtt+0xa6>
	__HAL_TIM_SET_COMPARE(pTimer, timer_channel, compare_value);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	695b      	ldr	r3, [r3, #20]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800096e:	bf00      	nop
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <_ZN15TB6612FNG_Motor5startEv>:

/**
 * @brief starts the motor by starting PWM generation.
 */
void TB6612FNG_Motor::start()
{
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(pTimer, timer_channel);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	695a      	ldr	r2, [r3, #20]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	4619      	mov	r1, r3
 8000988:	4610      	mov	r0, r2
 800098a:	f001 fedf 	bl	800274c <HAL_TIM_PWM_Start>
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <_ZN15TB6612FNG_Motor4stopEv>:

/**
 * @brief stops the motor by stopping PWM generation.
 */
void TB6612FNG_Motor::stop()
{	
 8000996:	b580      	push	{r7, lr}
 8000998:	b082      	sub	sp, #8
 800099a:	af00      	add	r7, sp, #0
 800099c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(IN1_pin_group, IN1_pin, GPIO_PIN_RESET);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	6858      	ldr	r0, [r3, #4]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	891b      	ldrh	r3, [r3, #8]
 80009a6:	2200      	movs	r2, #0
 80009a8:	4619      	mov	r1, r3
 80009aa:	f001 f983 	bl	8001cb4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_pin_group, IN2_pin, GPIO_PIN_RESET);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	68d8      	ldr	r0, [r3, #12]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	8a1b      	ldrh	r3, [r3, #16]
 80009b6:	2200      	movs	r2, #0
 80009b8:	4619      	mov	r1, r3
 80009ba:	f001 f97b 	bl	8001cb4 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(pTimer, timer_channel);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	695a      	ldr	r2, [r3, #20]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	4619      	mov	r1, r3
 80009c8:	4610      	mov	r0, r2
 80009ca:	f001 ff6f 	bl	80028ac <HAL_TIM_PWM_Stop>
}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
	...

080009d8 <HAL_GPIO_EXTI_Callback>:
RemoteControlControl* Steering;
int16_t encoder_delta;
uint16_t encoder_last_count;
int16_t encoder_position;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	80fb      	strh	r3, [r7, #6]
   // Your interrupt handling code here
	if(GPIO_PIN == GPIO_PIN_13)
 80009e2:	88fb      	ldrh	r3, [r7, #6]
 80009e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009e8:	d10f      	bne.n	8000a0a <HAL_GPIO_EXTI_Callback+0x32>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80009ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009ee:	4809      	ldr	r0, [pc, #36]	@ (8000a14 <HAL_GPIO_EXTI_Callback+0x3c>)
 80009f0:	f001 f979 	bl	8001ce6 <HAL_GPIO_TogglePin>
		sprintf(my_message, "Interrupt triggered.\r\n");
 80009f4:	4908      	ldr	r1, [pc, #32]	@ (8000a18 <HAL_GPIO_EXTI_Callback+0x40>)
 80009f6:	4809      	ldr	r0, [pc, #36]	@ (8000a1c <HAL_GPIO_EXTI_Callback+0x44>)
 80009f8:	f004 f826 	bl	8004a48 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)my_message, MESSAGE_LENGTH, HAL_MAX_DELAY);
 80009fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000a00:	2264      	movs	r2, #100	@ 0x64
 8000a02:	4906      	ldr	r1, [pc, #24]	@ (8000a1c <HAL_GPIO_EXTI_Callback+0x44>)
 8000a04:	4806      	ldr	r0, [pc, #24]	@ (8000a20 <HAL_GPIO_EXTI_Callback+0x48>)
 8000a06:	f003 fb4b 	bl	80040a0 <HAL_UART_Transmit>
	}
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40020400 	.word	0x40020400
 8000a18:	080052cc 	.word	0x080052cc
 8000a1c:	20000198 	.word	0x20000198
 8000a20:	20000150 	.word	0x20000150

08000a24 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
//	sprintf(my_message, "Timer input capture callback.\r\n");
//	HAL_UART_Transmit(&huart2, (uint8_t*)my_message, MESSAGE_LENGTH, HAL_MAX_DELAY);
	if (initialized)
 8000a2c:	4b12      	ldr	r3, [pc, #72]	@ (8000a78 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d01d      	beq.n	8000a70 <HAL_TIM_IC_CaptureCallback+0x4c>
		{
			if((htim->Instance = TIM1))
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a11      	ldr	r2, [pc, #68]	@ (8000a7c <HAL_TIM_IC_CaptureCallback+0x58>)
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	bf14      	ite	ne
 8000a42:	2301      	movne	r3, #1
 8000a44:	2300      	moveq	r3, #0
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d011      	beq.n	8000a70 <HAL_TIM_IC_CaptureCallback+0x4c>
			{
				if ( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 )
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	7f1b      	ldrb	r3, [r3, #28]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d104      	bne.n	8000a5e <HAL_TIM_IC_CaptureCallback+0x3a>
				{
					// Handle channel
					SteeringChannel->callback();
 8000a54:	4b0a      	ldr	r3, [pc, #40]	@ (8000a80 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff fe05 	bl	8000668 <_ZN9RCChannel8callbackEv>
					//Steering->update_motor();
				}

				if ( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	7f1b      	ldrb	r3, [r3, #28]
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	d104      	bne.n	8000a70 <HAL_TIM_IC_CaptureCallback+0x4c>
				{
					// Handle channel
					ThrottleChannel->callback();
 8000a66:	4b07      	ldr	r3, [pc, #28]	@ (8000a84 <HAL_TIM_IC_CaptureCallback+0x60>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fdfc 	bl	8000668 <_ZN9RCChannel8callbackEv>
					//Throttle->update_motor();
				}
			}
		}
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000200 	.word	0x20000200
 8000a7c:	40010000 	.word	0x40010000
 8000a80:	2000020c 	.word	0x2000020c
 8000a84:	20000208 	.word	0x20000208

08000a88 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	sprintf(my_message, "Timer interrupt triggered.\r\n");
 8000a90:	4917      	ldr	r1, [pc, #92]	@ (8000af0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000a92:	4818      	ldr	r0, [pc, #96]	@ (8000af4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000a94:	f003 ffd8 	bl	8004a48 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)my_message, MESSAGE_LENGTH, HAL_MAX_DELAY);
 8000a98:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9c:	2264      	movs	r2, #100	@ 0x64
 8000a9e:	4915      	ldr	r1, [pc, #84]	@ (8000af4 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000aa0:	4815      	ldr	r0, [pc, #84]	@ (8000af8 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000aa2:	f003 fafd 	bl	80040a0 <HAL_UART_Transmit>
	if (htim->Instance == TIM5)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a14      	ldr	r2, [pc, #80]	@ (8000afc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d11a      	bne.n	8000ae6 <HAL_TIM_PeriodElapsedCallback+0x5e>
	{
		uint16_t encoder_count = TIM5->CNT;
 8000ab0:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ab4:	81fb      	strh	r3, [r7, #14]
		encoder_delta = (int16_t) (encoder_last_count-encoder_count);
 8000ab6:	4b12      	ldr	r3, [pc, #72]	@ (8000b00 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000ab8:	881a      	ldrh	r2, [r3, #0]
 8000aba:	89fb      	ldrh	r3, [r7, #14]
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	b21a      	sxth	r2, r3
 8000ac2:	4b10      	ldr	r3, [pc, #64]	@ (8000b04 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000ac4:	801a      	strh	r2, [r3, #0]
		encoder_last_count = encoder_count;
 8000ac6:	4a0e      	ldr	r2, [pc, #56]	@ (8000b00 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000ac8:	89fb      	ldrh	r3, [r7, #14]
 8000aca:	8013      	strh	r3, [r2, #0]
		encoder_position += encoder_delta;
 8000acc:	4b0e      	ldr	r3, [pc, #56]	@ (8000b08 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000ace:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8000b04 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000ad6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	4413      	add	r3, r2
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	b21a      	sxth	r2, r3
 8000ae2:	4b09      	ldr	r3, [pc, #36]	@ (8000b08 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000ae4:	801a      	strh	r2, [r3, #0]

//		sprintf(my_message, "Encoder pos: %i.\r\n", position);
//		HAL_UART_Transmit(&huart2, (uint8_t*)my_message, MESSAGE_LENGTH, HAL_MAX_DELAY);
	}
}
 8000ae6:	bf00      	nop
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	080052e4 	.word	0x080052e4
 8000af4:	20000198 	.word	0x20000198
 8000af8:	20000150 	.word	0x20000150
 8000afc:	40000c00 	.word	0x40000c00
 8000b00:	20000212 	.word	0x20000212
 8000b04:	20000210 	.word	0x20000210
 8000b08:	20000214 	.word	0x20000214

08000b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b0c:	b590      	push	{r4, r7, lr}
 8000b0e:	b087      	sub	sp, #28
 8000b10:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b12:	f000 fda3 	bl	800165c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b16:	f000 f8a5 	bl	8000c64 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b1a:	f000 facb 	bl	80010b4 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8000b1e:	f000 fa9b 	bl	8001058 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 8000b22:	f000 f9ad 	bl	8000e80 <_ZL12MX_TIM2_Initv>
  MX_TIM5_Init();
 8000b26:	f000 fa39 	bl	8000f9c <_ZL12MX_TIM5_Initv>
  MX_TIM1_Init();
 8000b2a:	f000 f90d 	bl	8000d48 <_ZL12MX_TIM1_Initv>
  My_Motor = new TB6612FNG_Motor(
		  GPIOB, GPIO_PIN_14,
		  GPIOB, GPIO_PIN_15,
		  &htim2, TIM_CHANNEL_1,
		  CPU_CLOCK_MHZ,
		  MOTOR_PWM_HZ);
 8000b2e:	2024      	movs	r0, #36	@ 0x24
 8000b30:	f003 fe74 	bl	800481c <_Znwj>
 8000b34:	4603      	mov	r3, r0
 8000b36:	461c      	mov	r4, r3
 8000b38:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8000b3c:	9304      	str	r3, [sp, #16]
 8000b3e:	2364      	movs	r3, #100	@ 0x64
 8000b40:	9303      	str	r3, [sp, #12]
 8000b42:	2300      	movs	r3, #0
 8000b44:	9302      	str	r3, [sp, #8]
 8000b46:	4b3b      	ldr	r3, [pc, #236]	@ (8000c34 <main+0x128>)
 8000b48:	9301      	str	r3, [sp, #4]
 8000b4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	4b39      	ldr	r3, [pc, #228]	@ (8000c38 <main+0x12c>)
 8000b52:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b56:	4938      	ldr	r1, [pc, #224]	@ (8000c38 <main+0x12c>)
 8000b58:	4620      	mov	r0, r4
 8000b5a:	f7ff fe3d 	bl	80007d8 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm>
  My_Motor = new TB6612FNG_Motor(
 8000b5e:	4b37      	ldr	r3, [pc, #220]	@ (8000c3c <main+0x130>)
 8000b60:	601c      	str	r4, [r3, #0]
  My_Motor->set_duty();
 8000b62:	4b36      	ldr	r3, [pc, #216]	@ (8000c3c <main+0x130>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2264      	movs	r2, #100	@ 0x64
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff feac 	bl	80008c8 <_ZN15TB6612FNG_Motor8set_dutyEtt>
		  		  1025,  // Calibrated full reverse
		  		  1510,  // Calibrated neutral
		  		  2002,  // Calibrated full speed
		  		  100,   // New max positive
				  100    // New max negative (magnitude)
		  	  	  );
 8000b70:	2050      	movs	r0, #80	@ 0x50
 8000b72:	f003 fe53 	bl	800481c <_Znwj>
 8000b76:	4603      	mov	r3, r0
 8000b78:	461c      	mov	r4, r3
 8000b7a:	2364      	movs	r3, #100	@ 0x64
 8000b7c:	9305      	str	r3, [sp, #20]
 8000b7e:	2364      	movs	r3, #100	@ 0x64
 8000b80:	9304      	str	r3, [sp, #16]
 8000b82:	f240 73d2 	movw	r3, #2002	@ 0x7d2
 8000b86:	9303      	str	r3, [sp, #12]
 8000b88:	f240 53e6 	movw	r3, #1510	@ 0x5e6
 8000b8c:	9302      	str	r3, [sp, #8]
 8000b8e:	f240 4301 	movw	r3, #1025	@ 0x401
 8000b92:	9301      	str	r3, [sp, #4]
 8000b94:	2364      	movs	r3, #100	@ 0x64
 8000b96:	9300      	str	r3, [sp, #0]
 8000b98:	f244 435c 	movw	r3, #17500	@ 0x445c
 8000b9c:	2204      	movs	r2, #4
 8000b9e:	4928      	ldr	r1, [pc, #160]	@ (8000c40 <main+0x134>)
 8000ba0:	4620      	mov	r0, r4
 8000ba2:	f7ff fce5 	bl	8000570 <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll>
  ThrottleChannel = new RCChannel
 8000ba6:	4b27      	ldr	r3, [pc, #156]	@ (8000c44 <main+0x138>)
 8000ba8:	601c      	str	r4, [r3, #0]
  		  1000,       // Calibrated full right
  		  1514,      // Calibrated neutral
  		  2034,      // Calibrated full left
  		  100,       // New max positive
		  100        // New max negative (magnitude)
		  );
 8000baa:	2050      	movs	r0, #80	@ 0x50
 8000bac:	f003 fe36 	bl	800481c <_Znwj>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	461c      	mov	r4, r3
 8000bb4:	2364      	movs	r3, #100	@ 0x64
 8000bb6:	9305      	str	r3, [sp, #20]
 8000bb8:	2364      	movs	r3, #100	@ 0x64
 8000bba:	9304      	str	r3, [sp, #16]
 8000bbc:	f240 73f2 	movw	r3, #2034	@ 0x7f2
 8000bc0:	9303      	str	r3, [sp, #12]
 8000bc2:	f240 53ea 	movw	r3, #1514	@ 0x5ea
 8000bc6:	9302      	str	r3, [sp, #8]
 8000bc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bcc:	9301      	str	r3, [sp, #4]
 8000bce:	2364      	movs	r3, #100	@ 0x64
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	f244 435c 	movw	r3, #17500	@ 0x445c
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	4919      	ldr	r1, [pc, #100]	@ (8000c40 <main+0x134>)
 8000bda:	4620      	mov	r0, r4
 8000bdc:	f7ff fcc8 	bl	8000570 <_ZN9RCChannelC1EP17TIM_HandleTypeDefmlmlllll>
  SteeringChannel = new RCChannel
 8000be0:	4b19      	ldr	r3, [pc, #100]	@ (8000c48 <main+0x13c>)
 8000be2:	601c      	str	r4, [r3, #0]
//		  (
//		  ThrottleChannel,
//		  My_Motor
//		  );

  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8000be4:	213c      	movs	r1, #60	@ 0x3c
 8000be6:	4819      	ldr	r0, [pc, #100]	@ (8000c4c <main+0x140>)
 8000be8:	f002 f98c 	bl	8002f04 <HAL_TIM_Encoder_Start>
  initialized = true;
 8000bec:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <main+0x144>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	701a      	strb	r2, [r3, #0]
//	  string_length = snprintf(my_message, MESSAGE_LENGTH, "CH: %*li%%\r\n",
//	                             VALUE_WIDTH, (long signed int)ThrottleChannel->us_width);
//	  HAL_UART_Transmit(&huart2, (uint8_t*)my_message, string_length, HAL_MAX_DELAY);
//	  HAL_Delay(150);

	  HAL_Delay(250);
 8000bf2:	20fa      	movs	r0, #250	@ 0xfa
 8000bf4:	f000 fda4 	bl	8001740 <HAL_Delay>
//	  string_length = snprintf(my_message, MESSAGE_LENGTH, "CH1: %*li%%, CH2: %*li%%.\r\n",
//	                             VALUE_WIDTH, (long signed int)SteeringChannel->us_width, //value,
//	                             VALUE_WIDTH, (long signed int)ThrottleChannel->us_width); //value);
	  string_length = snprintf(my_message, MESSAGE_LENGTH, "CH1: %*li%%, CH2: %*li%%.\r\n",
 8000bf8:	4b13      	ldr	r3, [pc, #76]	@ (8000c48 <main+0x13c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
	                             VALUE_WIDTH, (long signed int)SteeringChannel->value,
 8000bfc:	695b      	ldr	r3, [r3, #20]
	  string_length = snprintf(my_message, MESSAGE_LENGTH, "CH1: %*li%%, CH2: %*li%%.\r\n",
 8000bfe:	4a11      	ldr	r2, [pc, #68]	@ (8000c44 <main+0x138>)
 8000c00:	6812      	ldr	r2, [r2, #0]
	                             VALUE_WIDTH, (long signed int)ThrottleChannel->value);
 8000c02:	6952      	ldr	r2, [r2, #20]
	  string_length = snprintf(my_message, MESSAGE_LENGTH, "CH1: %*li%%, CH2: %*li%%.\r\n",
 8000c04:	9202      	str	r2, [sp, #8]
 8000c06:	2205      	movs	r2, #5
 8000c08:	9201      	str	r2, [sp, #4]
 8000c0a:	9300      	str	r3, [sp, #0]
 8000c0c:	2305      	movs	r3, #5
 8000c0e:	4a11      	ldr	r2, [pc, #68]	@ (8000c54 <main+0x148>)
 8000c10:	2164      	movs	r1, #100	@ 0x64
 8000c12:	4811      	ldr	r0, [pc, #68]	@ (8000c58 <main+0x14c>)
 8000c14:	f003 fee4 	bl	80049e0 <sniprintf>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	4a10      	ldr	r2, [pc, #64]	@ (8000c5c <main+0x150>)
 8000c1c:	6013      	str	r3, [r2, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)my_message, string_length, HAL_MAX_DELAY);
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c5c <main+0x150>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	f04f 33ff 	mov.w	r3, #4294967295
 8000c28:	490b      	ldr	r1, [pc, #44]	@ (8000c58 <main+0x14c>)
 8000c2a:	480d      	ldr	r0, [pc, #52]	@ (8000c60 <main+0x154>)
 8000c2c:	f003 fa38 	bl	80040a0 <HAL_UART_Transmit>
	  HAL_Delay(250);
 8000c30:	bf00      	nop
 8000c32:	e7de      	b.n	8000bf2 <main+0xe6>
 8000c34:	200000c0 	.word	0x200000c0
 8000c38:	40020400 	.word	0x40020400
 8000c3c:	20000204 	.word	0x20000204
 8000c40:	20000078 	.word	0x20000078
 8000c44:	20000208 	.word	0x20000208
 8000c48:	2000020c 	.word	0x2000020c
 8000c4c:	20000108 	.word	0x20000108
 8000c50:	20000200 	.word	0x20000200
 8000c54:	08005304 	.word	0x08005304
 8000c58:	20000198 	.word	0x20000198
 8000c5c:	200001fc 	.word	0x200001fc
 8000c60:	20000150 	.word	0x20000150

08000c64 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b094      	sub	sp, #80	@ 0x50
 8000c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6a:	f107 0320 	add.w	r3, r7, #32
 8000c6e:	2230      	movs	r2, #48	@ 0x30
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f003 ff08 	bl	8004a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60bb      	str	r3, [r7, #8]
 8000c8c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d40 <_Z18SystemClock_Configv+0xdc>)
 8000c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c90:	4a2b      	ldr	r2, [pc, #172]	@ (8000d40 <_Z18SystemClock_Configv+0xdc>)
 8000c92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c96:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c98:	4b29      	ldr	r3, [pc, #164]	@ (8000d40 <_Z18SystemClock_Configv+0xdc>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	4b26      	ldr	r3, [pc, #152]	@ (8000d44 <_Z18SystemClock_Configv+0xe0>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a25      	ldr	r2, [pc, #148]	@ (8000d44 <_Z18SystemClock_Configv+0xe0>)
 8000cae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000cb2:	6013      	str	r3, [r2, #0]
 8000cb4:	4b23      	ldr	r3, [pc, #140]	@ (8000d44 <_Z18SystemClock_Configv+0xe0>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cc8:	2310      	movs	r3, #16
 8000cca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cd4:	2308      	movs	r3, #8
 8000cd6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000cd8:	2364      	movs	r3, #100	@ 0x64
 8000cda:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ce0:	2304      	movs	r3, #4
 8000ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce4:	f107 0320 	add.w	r3, r7, #32
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f001 f82f 	bl	8001d4c <HAL_RCC_OscConfig>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	bf14      	ite	ne
 8000cf4:	2301      	movne	r3, #1
 8000cf6:	2300      	moveq	r3, #0
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8000cfe:	f000 fa33 	bl	8001168 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d02:	230f      	movs	r3, #15
 8000d04:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d06:	2302      	movs	r3, #2
 8000d08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	2103      	movs	r1, #3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f001 fa8c 	bl	800223c <HAL_RCC_ClockConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	bf14      	ite	ne
 8000d2a:	2301      	movne	r3, #1
 8000d2c:	2300      	moveq	r3, #0
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8000d34:	f000 fa18 	bl	8001168 <Error_Handler>
  }
}
 8000d38:	bf00      	nop
 8000d3a:	3750      	adds	r7, #80	@ 0x50
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40007000 	.word	0x40007000

08000d48 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	@ 0x28
 8000d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d4e:	f107 0318 	add.w	r3, r7, #24
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d5c:	f107 0310 	add.w	r3, r7, #16
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d66:	463b      	mov	r3, r7
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d72:	4b41      	ldr	r3, [pc, #260]	@ (8000e78 <_ZL12MX_TIM1_Initv+0x130>)
 8000d74:	4a41      	ldr	r2, [pc, #260]	@ (8000e7c <_ZL12MX_TIM1_Initv+0x134>)
 8000d76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8000d78:	4b3f      	ldr	r3, [pc, #252]	@ (8000e78 <_ZL12MX_TIM1_Initv+0x130>)
 8000d7a:	2263      	movs	r2, #99	@ 0x63
 8000d7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7e:	4b3e      	ldr	r3, [pc, #248]	@ (8000e78 <_ZL12MX_TIM1_Initv+0x130>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d84:	4b3c      	ldr	r3, [pc, #240]	@ (8000e78 <_ZL12MX_TIM1_Initv+0x130>)
 8000d86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d8a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8c:	4b3a      	ldr	r3, [pc, #232]	@ (8000e78 <_ZL12MX_TIM1_Initv+0x130>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d92:	4b39      	ldr	r3, [pc, #228]	@ (8000e78 <_ZL12MX_TIM1_Initv+0x130>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d98:	4b37      	ldr	r3, [pc, #220]	@ (8000e78 <_ZL12MX_TIM1_Initv+0x130>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d9e:	4836      	ldr	r0, [pc, #216]	@ (8000e78 <_ZL12MX_TIM1_Initv+0x130>)
 8000da0:	f001 fc2c 	bl	80025fc <HAL_TIM_Base_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	bf14      	ite	ne
 8000daa:	2301      	movne	r3, #1
 8000dac:	2300      	moveq	r3, #0
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <_ZL12MX_TIM1_Initv+0x70>
  {
    Error_Handler();
 8000db4:	f000 f9d8 	bl	8001168 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dbc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dbe:	f107 0318 	add.w	r3, r7, #24
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	482c      	ldr	r0, [pc, #176]	@ (8000e78 <_ZL12MX_TIM1_Initv+0x130>)
 8000dc6:	f002 fb79 	bl	80034bc <HAL_TIM_ConfigClockSource>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	bf14      	ite	ne
 8000dd0:	2301      	movne	r3, #1
 8000dd2:	2300      	moveq	r3, #0
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <_ZL12MX_TIM1_Initv+0x96>
  {
    Error_Handler();
 8000dda:	f000 f9c5 	bl	8001168 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000dde:	4826      	ldr	r0, [pc, #152]	@ (8000e78 <_ZL12MX_TIM1_Initv+0x130>)
 8000de0:	f001 fdc8 	bl	8002974 <HAL_TIM_IC_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	bf14      	ite	ne
 8000dea:	2301      	movne	r3, #1
 8000dec:	2300      	moveq	r3, #0
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <_ZL12MX_TIM1_Initv+0xb0>
  {
    Error_Handler();
 8000df4:	f000 f9b8 	bl	8001168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	4619      	mov	r1, r3
 8000e06:	481c      	ldr	r0, [pc, #112]	@ (8000e78 <_ZL12MX_TIM1_Initv+0x130>)
 8000e08:	f003 f878 	bl	8003efc <HAL_TIMEx_MasterConfigSynchronization>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	bf14      	ite	ne
 8000e12:	2301      	movne	r3, #1
 8000e14:	2300      	moveq	r3, #0
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <_ZL12MX_TIM1_Initv+0xd8>
  {
    Error_Handler();
 8000e1c:	f000 f9a4 	bl	8001168 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000e20:	230a      	movs	r3, #10
 8000e22:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e24:	2301      	movs	r3, #1
 8000e26:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e30:	463b      	mov	r3, r7
 8000e32:	2200      	movs	r2, #0
 8000e34:	4619      	mov	r1, r3
 8000e36:	4810      	ldr	r0, [pc, #64]	@ (8000e78 <_ZL12MX_TIM1_Initv+0x130>)
 8000e38:	f002 f9e2 	bl	8003200 <HAL_TIM_IC_ConfigChannel>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	bf14      	ite	ne
 8000e42:	2301      	movne	r3, #1
 8000e44:	2300      	moveq	r3, #0
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <_ZL12MX_TIM1_Initv+0x108>
  {
    Error_Handler();
 8000e4c:	f000 f98c 	bl	8001168 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e50:	463b      	mov	r3, r7
 8000e52:	2204      	movs	r2, #4
 8000e54:	4619      	mov	r1, r3
 8000e56:	4808      	ldr	r0, [pc, #32]	@ (8000e78 <_ZL12MX_TIM1_Initv+0x130>)
 8000e58:	f002 f9d2 	bl	8003200 <HAL_TIM_IC_ConfigChannel>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	bf14      	ite	ne
 8000e62:	2301      	movne	r3, #1
 8000e64:	2300      	moveq	r3, #0
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <_ZL12MX_TIM1_Initv+0x128>
  {
    Error_Handler();
 8000e6c:	f000 f97c 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e70:	bf00      	nop
 8000e72:	3728      	adds	r7, #40	@ 0x28
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000078 	.word	0x20000078
 8000e7c:	40010000 	.word	0x40010000

08000e80 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08e      	sub	sp, #56	@ 0x38
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e94:	f107 0320 	add.w	r3, r7, #32
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
 8000eac:	615a      	str	r2, [r3, #20]
 8000eae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eb0:	4b39      	ldr	r3, [pc, #228]	@ (8000f98 <_ZL12MX_TIM2_Initv+0x118>)
 8000eb2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000eb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000eb8:	4b37      	ldr	r3, [pc, #220]	@ (8000f98 <_ZL12MX_TIM2_Initv+0x118>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ebe:	4b36      	ldr	r3, [pc, #216]	@ (8000f98 <_ZL12MX_TIM2_Initv+0x118>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 8000ec4:	4b34      	ldr	r3, [pc, #208]	@ (8000f98 <_ZL12MX_TIM2_Initv+0x118>)
 8000ec6:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000eca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ecc:	4b32      	ldr	r3, [pc, #200]	@ (8000f98 <_ZL12MX_TIM2_Initv+0x118>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed2:	4b31      	ldr	r3, [pc, #196]	@ (8000f98 <_ZL12MX_TIM2_Initv+0x118>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ed8:	482f      	ldr	r0, [pc, #188]	@ (8000f98 <_ZL12MX_TIM2_Initv+0x118>)
 8000eda:	f001 fb8f 	bl	80025fc <HAL_TIM_Base_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	bf14      	ite	ne
 8000ee4:	2301      	movne	r3, #1
 8000ee6:	2300      	moveq	r3, #0
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 8000eee:	f000 f93b 	bl	8001168 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ef8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000efc:	4619      	mov	r1, r3
 8000efe:	4826      	ldr	r0, [pc, #152]	@ (8000f98 <_ZL12MX_TIM2_Initv+0x118>)
 8000f00:	f002 fadc 	bl	80034bc <HAL_TIM_ConfigClockSource>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	bf14      	ite	ne
 8000f0a:	2301      	movne	r3, #1
 8000f0c:	2300      	moveq	r3, #0
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 8000f14:	f000 f928 	bl	8001168 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f18:	481f      	ldr	r0, [pc, #124]	@ (8000f98 <_ZL12MX_TIM2_Initv+0x118>)
 8000f1a:	f001 fbbe 	bl	800269a <HAL_TIM_PWM_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	bf14      	ite	ne
 8000f24:	2301      	movne	r3, #1
 8000f26:	2300      	moveq	r3, #0
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 8000f2e:	f000 f91b 	bl	8001168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f32:	2300      	movs	r3, #0
 8000f34:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f3a:	f107 0320 	add.w	r3, r7, #32
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4815      	ldr	r0, [pc, #84]	@ (8000f98 <_ZL12MX_TIM2_Initv+0x118>)
 8000f42:	f002 ffdb 	bl	8003efc <HAL_TIMEx_MasterConfigSynchronization>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	bf14      	ite	ne
 8000f4c:	2301      	movne	r3, #1
 8000f4e:	2300      	moveq	r3, #0
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8000f56:	f000 f907 	bl	8001168 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f5a:	2360      	movs	r3, #96	@ 0x60
 8000f5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4809      	ldr	r0, [pc, #36]	@ (8000f98 <_ZL12MX_TIM2_Initv+0x118>)
 8000f72:	f002 f9e1 	bl	8003338 <HAL_TIM_PWM_ConfigChannel>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	bf14      	ite	ne
 8000f7c:	2301      	movne	r3, #1
 8000f7e:	2300      	moveq	r3, #0
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 8000f86:	f000 f8ef 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f8a:	4803      	ldr	r0, [pc, #12]	@ (8000f98 <_ZL12MX_TIM2_Initv+0x118>)
 8000f8c:	f000 f9e6 	bl	800135c <HAL_TIM_MspPostInit>

}
 8000f90:	bf00      	nop
 8000f92:	3738      	adds	r7, #56	@ 0x38
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	200000c0 	.word	0x200000c0

08000f9c <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08c      	sub	sp, #48	@ 0x30
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fa2:	f107 030c 	add.w	r3, r7, #12
 8000fa6:	2224      	movs	r2, #36	@ 0x24
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f003 fd6c 	bl	8004a88 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000fb8:	4b25      	ldr	r3, [pc, #148]	@ (8001050 <_ZL12MX_TIM5_Initv+0xb4>)
 8000fba:	4a26      	ldr	r2, [pc, #152]	@ (8001054 <_ZL12MX_TIM5_Initv+0xb8>)
 8000fbc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000fbe:	4b24      	ldr	r3, [pc, #144]	@ (8001050 <_ZL12MX_TIM5_Initv+0xb4>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc4:	4b22      	ldr	r3, [pc, #136]	@ (8001050 <_ZL12MX_TIM5_Initv+0xb4>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000fca:	4b21      	ldr	r3, [pc, #132]	@ (8001050 <_ZL12MX_TIM5_Initv+0xb4>)
 8000fcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fd0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd2:	4b1f      	ldr	r3, [pc, #124]	@ (8001050 <_ZL12MX_TIM5_Initv+0xb4>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001050 <_ZL12MX_TIM5_Initv+0xb4>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001002:	f107 030c 	add.w	r3, r7, #12
 8001006:	4619      	mov	r1, r3
 8001008:	4811      	ldr	r0, [pc, #68]	@ (8001050 <_ZL12MX_TIM5_Initv+0xb4>)
 800100a:	f001 fed5 	bl	8002db8 <HAL_TIM_Encoder_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	bf14      	ite	ne
 8001014:	2301      	movne	r3, #1
 8001016:	2300      	moveq	r3, #0
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <_ZL12MX_TIM5_Initv+0x86>
  {
    Error_Handler();
 800101e:	f000 f8a3 	bl	8001168 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	4619      	mov	r1, r3
 800102e:	4808      	ldr	r0, [pc, #32]	@ (8001050 <_ZL12MX_TIM5_Initv+0xb4>)
 8001030:	f002 ff64 	bl	8003efc <HAL_TIMEx_MasterConfigSynchronization>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	bf14      	ite	ne
 800103a:	2301      	movne	r3, #1
 800103c:	2300      	moveq	r3, #0
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <_ZL12MX_TIM5_Initv+0xac>
  {
    Error_Handler();
 8001044:	f000 f890 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001048:	bf00      	nop
 800104a:	3730      	adds	r7, #48	@ 0x30
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000108 	.word	0x20000108
 8001054:	40000c00 	.word	0x40000c00

08001058 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800105c:	4b13      	ldr	r3, [pc, #76]	@ (80010ac <_ZL19MX_USART2_UART_Initv+0x54>)
 800105e:	4a14      	ldr	r2, [pc, #80]	@ (80010b0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001060:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001062:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <_ZL19MX_USART2_UART_Initv+0x54>)
 8001064:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001068:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800106a:	4b10      	ldr	r3, [pc, #64]	@ (80010ac <_ZL19MX_USART2_UART_Initv+0x54>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001070:	4b0e      	ldr	r3, [pc, #56]	@ (80010ac <_ZL19MX_USART2_UART_Initv+0x54>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001076:	4b0d      	ldr	r3, [pc, #52]	@ (80010ac <_ZL19MX_USART2_UART_Initv+0x54>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800107c:	4b0b      	ldr	r3, [pc, #44]	@ (80010ac <_ZL19MX_USART2_UART_Initv+0x54>)
 800107e:	220c      	movs	r2, #12
 8001080:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001082:	4b0a      	ldr	r3, [pc, #40]	@ (80010ac <_ZL19MX_USART2_UART_Initv+0x54>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001088:	4b08      	ldr	r3, [pc, #32]	@ (80010ac <_ZL19MX_USART2_UART_Initv+0x54>)
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800108e:	4807      	ldr	r0, [pc, #28]	@ (80010ac <_ZL19MX_USART2_UART_Initv+0x54>)
 8001090:	f002 ffb6 	bl	8004000 <HAL_UART_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	bf14      	ite	ne
 800109a:	2301      	movne	r3, #1
 800109c:	2300      	moveq	r3, #0
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80010a4:	f000 f860 	bl	8001168 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000150 	.word	0x20000150
 80010b0:	40004400 	.word	0x40004400

080010b4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ba:	f107 030c 	add.w	r3, r7, #12
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	4b24      	ldr	r3, [pc, #144]	@ (8001160 <_ZL12MX_GPIO_Initv+0xac>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	4a23      	ldr	r2, [pc, #140]	@ (8001160 <_ZL12MX_GPIO_Initv+0xac>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010da:	4b21      	ldr	r3, [pc, #132]	@ (8001160 <_ZL12MX_GPIO_Initv+0xac>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	607b      	str	r3, [r7, #4]
 80010ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001160 <_ZL12MX_GPIO_Initv+0xac>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001160 <_ZL12MX_GPIO_Initv+0xac>)
 80010f0:	f043 0302 	orr.w	r3, r3, #2
 80010f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001160 <_ZL12MX_GPIO_Initv+0xac>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	f44f 4150 	mov.w	r1, #53248	@ 0xd000
 8001108:	4816      	ldr	r0, [pc, #88]	@ (8001164 <_ZL12MX_GPIO_Initv+0xb0>)
 800110a:	f000 fdd3 	bl	8001cb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 800110e:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001112:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001114:	2301      	movs	r3, #1
 8001116:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	4619      	mov	r1, r3
 8001126:	480f      	ldr	r0, [pc, #60]	@ (8001164 <_ZL12MX_GPIO_Initv+0xb0>)
 8001128:	f000 fc40 	bl	80019ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800112c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001130:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001132:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001136:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	4619      	mov	r1, r3
 8001142:	4808      	ldr	r0, [pc, #32]	@ (8001164 <_ZL12MX_GPIO_Initv+0xb0>)
 8001144:	f000 fc32 	bl	80019ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001148:	2200      	movs	r2, #0
 800114a:	2100      	movs	r1, #0
 800114c:	2028      	movs	r0, #40	@ 0x28
 800114e:	f000 fbf6 	bl	800193e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001152:	2028      	movs	r0, #40	@ 0x28
 8001154:	f000 fc0f 	bl	8001976 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001158:	bf00      	nop
 800115a:	3720      	adds	r7, #32
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40023800 	.word	0x40023800
 8001164:	40020400 	.word	0x40020400

08001168 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800116c:	b672      	cpsid	i
}
 800116e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <Error_Handler+0x8>

08001174 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	4b10      	ldr	r3, [pc, #64]	@ (80011c0 <HAL_MspInit+0x4c>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001182:	4a0f      	ldr	r2, [pc, #60]	@ (80011c0 <HAL_MspInit+0x4c>)
 8001184:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001188:	6453      	str	r3, [r2, #68]	@ 0x44
 800118a:	4b0d      	ldr	r3, [pc, #52]	@ (80011c0 <HAL_MspInit+0x4c>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800118e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	603b      	str	r3, [r7, #0]
 800119a:	4b09      	ldr	r3, [pc, #36]	@ (80011c0 <HAL_MspInit+0x4c>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	4a08      	ldr	r2, [pc, #32]	@ (80011c0 <HAL_MspInit+0x4c>)
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a6:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <HAL_MspInit+0x4c>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800

080011c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	@ 0x28
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0314 	add.w	r3, r7, #20
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a33      	ldr	r2, [pc, #204]	@ (80012b0 <HAL_TIM_Base_MspInit+0xec>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d14d      	bne.n	8001282 <HAL_TIM_Base_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	4b32      	ldr	r3, [pc, #200]	@ (80012b4 <HAL_TIM_Base_MspInit+0xf0>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ee:	4a31      	ldr	r2, [pc, #196]	@ (80012b4 <HAL_TIM_Base_MspInit+0xf0>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011f6:	4b2f      	ldr	r3, [pc, #188]	@ (80012b4 <HAL_TIM_Base_MspInit+0xf0>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	4b2b      	ldr	r3, [pc, #172]	@ (80012b4 <HAL_TIM_Base_MspInit+0xf0>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	4a2a      	ldr	r2, [pc, #168]	@ (80012b4 <HAL_TIM_Base_MspInit+0xf0>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6313      	str	r3, [r2, #48]	@ 0x30
 8001212:	4b28      	ldr	r3, [pc, #160]	@ (80012b4 <HAL_TIM_Base_MspInit+0xf0>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800121e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001224:	2302      	movs	r3, #2
 8001226:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122c:	2300      	movs	r3, #0
 800122e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001230:	2301      	movs	r3, #1
 8001232:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	4619      	mov	r1, r3
 800123a:	481f      	ldr	r0, [pc, #124]	@ (80012b8 <HAL_TIM_Base_MspInit+0xf4>)
 800123c:	f000 fbb6 	bl	80019ac <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001240:	2200      	movs	r2, #0
 8001242:	2100      	movs	r1, #0
 8001244:	2018      	movs	r0, #24
 8001246:	f000 fb7a 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800124a:	2018      	movs	r0, #24
 800124c:	f000 fb93 	bl	8001976 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001250:	2200      	movs	r2, #0
 8001252:	2100      	movs	r1, #0
 8001254:	2019      	movs	r0, #25
 8001256:	f000 fb72 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800125a:	2019      	movs	r0, #25
 800125c:	f000 fb8b 	bl	8001976 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001260:	2200      	movs	r2, #0
 8001262:	2100      	movs	r1, #0
 8001264:	201a      	movs	r0, #26
 8001266:	f000 fb6a 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800126a:	201a      	movs	r0, #26
 800126c:	f000 fb83 	bl	8001976 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001270:	2200      	movs	r2, #0
 8001272:	2100      	movs	r1, #0
 8001274:	201b      	movs	r0, #27
 8001276:	f000 fb62 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800127a:	201b      	movs	r0, #27
 800127c:	f000 fb7b 	bl	8001976 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001280:	e012      	b.n	80012a8 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800128a:	d10d      	bne.n	80012a8 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	4b08      	ldr	r3, [pc, #32]	@ (80012b4 <HAL_TIM_Base_MspInit+0xf0>)
 8001292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001294:	4a07      	ldr	r2, [pc, #28]	@ (80012b4 <HAL_TIM_Base_MspInit+0xf0>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	6413      	str	r3, [r2, #64]	@ 0x40
 800129c:	4b05      	ldr	r3, [pc, #20]	@ (80012b4 <HAL_TIM_Base_MspInit+0xf0>)
 800129e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	60bb      	str	r3, [r7, #8]
 80012a6:	68bb      	ldr	r3, [r7, #8]
}
 80012a8:	bf00      	nop
 80012aa:	3728      	adds	r7, #40	@ 0x28
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40010000 	.word	0x40010000
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40020000 	.word	0x40020000

080012bc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	@ 0x28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001350 <HAL_TIM_Encoder_MspInit+0x94>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d133      	bne.n	8001346 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <HAL_TIM_Encoder_MspInit+0x98>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	4a1b      	ldr	r2, [pc, #108]	@ (8001354 <HAL_TIM_Encoder_MspInit+0x98>)
 80012e8:	f043 0308 	orr.w	r3, r3, #8
 80012ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ee:	4b19      	ldr	r3, [pc, #100]	@ (8001354 <HAL_TIM_Encoder_MspInit+0x98>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <HAL_TIM_Encoder_MspInit+0x98>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	4a14      	ldr	r2, [pc, #80]	@ (8001354 <HAL_TIM_Encoder_MspInit+0x98>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6313      	str	r3, [r2, #48]	@ 0x30
 800130a:	4b12      	ldr	r3, [pc, #72]	@ (8001354 <HAL_TIM_Encoder_MspInit+0x98>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001316:	2303      	movs	r3, #3
 8001318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001326:	2302      	movs	r3, #2
 8001328:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	4809      	ldr	r0, [pc, #36]	@ (8001358 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001332:	f000 fb3b 	bl	80019ac <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	2032      	movs	r0, #50	@ 0x32
 800133c:	f000 faff 	bl	800193e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001340:	2032      	movs	r0, #50	@ 0x32
 8001342:	f000 fb18 	bl	8001976 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001346:	bf00      	nop
 8001348:	3728      	adds	r7, #40	@ 0x28
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40000c00 	.word	0x40000c00
 8001354:	40023800 	.word	0x40023800
 8001358:	40020000 	.word	0x40020000

0800135c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 030c 	add.w	r3, r7, #12
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800137c:	d11e      	bne.n	80013bc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	4b10      	ldr	r3, [pc, #64]	@ (80013c4 <HAL_TIM_MspPostInit+0x68>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001386:	4a0f      	ldr	r2, [pc, #60]	@ (80013c4 <HAL_TIM_MspPostInit+0x68>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6313      	str	r3, [r2, #48]	@ 0x30
 800138e:	4b0d      	ldr	r3, [pc, #52]	@ (80013c4 <HAL_TIM_MspPostInit+0x68>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800139a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800139e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013ac:	2301      	movs	r3, #1
 80013ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	4619      	mov	r1, r3
 80013b6:	4804      	ldr	r0, [pc, #16]	@ (80013c8 <HAL_TIM_MspPostInit+0x6c>)
 80013b8:	f000 faf8 	bl	80019ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80013bc:	bf00      	nop
 80013be:	3720      	adds	r7, #32
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020000 	.word	0x40020000

080013cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08a      	sub	sp, #40	@ 0x28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a19      	ldr	r2, [pc, #100]	@ (8001450 <HAL_UART_MspInit+0x84>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d12b      	bne.n	8001446 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	613b      	str	r3, [r7, #16]
 80013f2:	4b18      	ldr	r3, [pc, #96]	@ (8001454 <HAL_UART_MspInit+0x88>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f6:	4a17      	ldr	r2, [pc, #92]	@ (8001454 <HAL_UART_MspInit+0x88>)
 80013f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013fe:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <HAL_UART_MspInit+0x88>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <HAL_UART_MspInit+0x88>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	4a10      	ldr	r2, [pc, #64]	@ (8001454 <HAL_UART_MspInit+0x88>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6313      	str	r3, [r2, #48]	@ 0x30
 800141a:	4b0e      	ldr	r3, [pc, #56]	@ (8001454 <HAL_UART_MspInit+0x88>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001426:	230c      	movs	r3, #12
 8001428:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	2302      	movs	r3, #2
 800142c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001432:	2303      	movs	r3, #3
 8001434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001436:	2307      	movs	r3, #7
 8001438:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143a:	f107 0314 	add.w	r3, r7, #20
 800143e:	4619      	mov	r1, r3
 8001440:	4805      	ldr	r0, [pc, #20]	@ (8001458 <HAL_UART_MspInit+0x8c>)
 8001442:	f000 fab3 	bl	80019ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001446:	bf00      	nop
 8001448:	3728      	adds	r7, #40	@ 0x28
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40004400 	.word	0x40004400
 8001454:	40023800 	.word	0x40023800
 8001458:	40020000 	.word	0x40020000

0800145c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <NMI_Handler+0x4>

08001464 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <HardFault_Handler+0x4>

0800146c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <MemManage_Handler+0x4>

08001474 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <BusFault_Handler+0x4>

0800147c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <UsageFault_Handler+0x4>

08001484 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001488:	bf00      	nop
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b2:	f000 f925 	bl	8001700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014c0:	4802      	ldr	r0, [pc, #8]	@ (80014cc <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80014c2:	f001 fdad 	bl	8003020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000078 	.word	0x20000078

080014d0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014d4:	4802      	ldr	r0, [pc, #8]	@ (80014e0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80014d6:	f001 fda3 	bl	8003020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000078 	.word	0x20000078

080014e4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014e8:	4802      	ldr	r0, [pc, #8]	@ (80014f4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80014ea:	f001 fd99 	bl	8003020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000078 	.word	0x20000078

080014f8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014fc:	4802      	ldr	r0, [pc, #8]	@ (8001508 <TIM1_CC_IRQHandler+0x10>)
 80014fe:	f001 fd8f 	bl	8003020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000078 	.word	0x20000078

0800150c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001510:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001514:	f000 fc02 	bl	8001d1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}

0800151c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001520:	4802      	ldr	r0, [pc, #8]	@ (800152c <TIM5_IRQHandler+0x10>)
 8001522:	f001 fd7d 	bl	8003020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000108 	.word	0x20000108

08001530 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  return 1;
 8001534:	2301      	movs	r3, #1
}
 8001536:	4618      	mov	r0, r3
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <_kill>:

int _kill(int pid, int sig)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800154a:	f003 faf9 	bl	8004b40 <__errno>
 800154e:	4603      	mov	r3, r0
 8001550:	2216      	movs	r2, #22
 8001552:	601a      	str	r2, [r3, #0]
  return -1;
 8001554:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001558:	4618      	mov	r0, r3
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <_exit>:

void _exit (int status)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001568:	f04f 31ff 	mov.w	r1, #4294967295
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ffe7 	bl	8001540 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001572:	bf00      	nop
 8001574:	e7fd      	b.n	8001572 <_exit+0x12>
	...

08001578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001580:	4a14      	ldr	r2, [pc, #80]	@ (80015d4 <_sbrk+0x5c>)
 8001582:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <_sbrk+0x60>)
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800158c:	4b13      	ldr	r3, [pc, #76]	@ (80015dc <_sbrk+0x64>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d102      	bne.n	800159a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001594:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <_sbrk+0x64>)
 8001596:	4a12      	ldr	r2, [pc, #72]	@ (80015e0 <_sbrk+0x68>)
 8001598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800159a:	4b10      	ldr	r3, [pc, #64]	@ (80015dc <_sbrk+0x64>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d207      	bcs.n	80015b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a8:	f003 faca 	bl	8004b40 <__errno>
 80015ac:	4603      	mov	r3, r0
 80015ae:	220c      	movs	r2, #12
 80015b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	e009      	b.n	80015cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b8:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015be:	4b07      	ldr	r3, [pc, #28]	@ (80015dc <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	4a05      	ldr	r2, [pc, #20]	@ (80015dc <_sbrk+0x64>)
 80015c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ca:	68fb      	ldr	r3, [r7, #12]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20020000 	.word	0x20020000
 80015d8:	00000400 	.word	0x00000400
 80015dc:	20000218 	.word	0x20000218
 80015e0:	20000370 	.word	0x20000370

080015e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e8:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <SystemInit+0x20>)
 80015ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015ee:	4a05      	ldr	r2, [pc, #20]	@ (8001604 <SystemInit+0x20>)
 80015f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001608:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001640 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800160c:	f7ff ffea 	bl	80015e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001610:	480c      	ldr	r0, [pc, #48]	@ (8001644 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001612:	490d      	ldr	r1, [pc, #52]	@ (8001648 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001614:	4a0d      	ldr	r2, [pc, #52]	@ (800164c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001618:	e002      	b.n	8001620 <LoopCopyDataInit>

0800161a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800161c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161e:	3304      	adds	r3, #4

08001620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001624:	d3f9      	bcc.n	800161a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001626:	4a0a      	ldr	r2, [pc, #40]	@ (8001650 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001628:	4c0a      	ldr	r4, [pc, #40]	@ (8001654 <LoopFillZerobss+0x22>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800162c:	e001      	b.n	8001632 <LoopFillZerobss>

0800162e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001630:	3204      	adds	r2, #4

08001632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001634:	d3fb      	bcc.n	800162e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001636:	f003 fa89 	bl	8004b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800163a:	f7ff fa67 	bl	8000b0c <main>
  bx  lr    
 800163e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001640:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001648:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800164c:	0800539c 	.word	0x0800539c
  ldr r2, =_sbss
 8001650:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001654:	2000036c 	.word	0x2000036c

08001658 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001658:	e7fe      	b.n	8001658 <ADC_IRQHandler>
	...

0800165c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001660:	4b0e      	ldr	r3, [pc, #56]	@ (800169c <HAL_Init+0x40>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a0d      	ldr	r2, [pc, #52]	@ (800169c <HAL_Init+0x40>)
 8001666:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800166a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800166c:	4b0b      	ldr	r3, [pc, #44]	@ (800169c <HAL_Init+0x40>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0a      	ldr	r2, [pc, #40]	@ (800169c <HAL_Init+0x40>)
 8001672:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001676:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001678:	4b08      	ldr	r3, [pc, #32]	@ (800169c <HAL_Init+0x40>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a07      	ldr	r2, [pc, #28]	@ (800169c <HAL_Init+0x40>)
 800167e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001682:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001684:	2003      	movs	r0, #3
 8001686:	f000 f94f 	bl	8001928 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800168a:	200f      	movs	r0, #15
 800168c:	f000 f808 	bl	80016a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001690:	f7ff fd70 	bl	8001174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001694:	2300      	movs	r3, #0
}
 8001696:	4618      	mov	r0, r3
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40023c00 	.word	0x40023c00

080016a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a8:	4b12      	ldr	r3, [pc, #72]	@ (80016f4 <HAL_InitTick+0x54>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b12      	ldr	r3, [pc, #72]	@ (80016f8 <HAL_InitTick+0x58>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	4619      	mov	r1, r3
 80016b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 f967 	bl	8001992 <HAL_SYSTICK_Config>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e00e      	b.n	80016ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b0f      	cmp	r3, #15
 80016d2:	d80a      	bhi.n	80016ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d4:	2200      	movs	r2, #0
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295
 80016dc:	f000 f92f 	bl	800193e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016e0:	4a06      	ldr	r2, [pc, #24]	@ (80016fc <HAL_InitTick+0x5c>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
 80016e8:	e000      	b.n	80016ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000000 	.word	0x20000000
 80016f8:	20000008 	.word	0x20000008
 80016fc:	20000004 	.word	0x20000004

08001700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001704:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <HAL_IncTick+0x20>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	461a      	mov	r2, r3
 800170a:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <HAL_IncTick+0x24>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4413      	add	r3, r2
 8001710:	4a04      	ldr	r2, [pc, #16]	@ (8001724 <HAL_IncTick+0x24>)
 8001712:	6013      	str	r3, [r2, #0]
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	20000008 	.word	0x20000008
 8001724:	2000021c 	.word	0x2000021c

08001728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return uwTick;
 800172c:	4b03      	ldr	r3, [pc, #12]	@ (800173c <HAL_GetTick+0x14>)
 800172e:	681b      	ldr	r3, [r3, #0]
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	2000021c 	.word	0x2000021c

08001740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001748:	f7ff ffee 	bl	8001728 <HAL_GetTick>
 800174c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001758:	d005      	beq.n	8001766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800175a:	4b0a      	ldr	r3, [pc, #40]	@ (8001784 <HAL_Delay+0x44>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	4413      	add	r3, r2
 8001764:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001766:	bf00      	nop
 8001768:	f7ff ffde 	bl	8001728 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	429a      	cmp	r2, r3
 8001776:	d8f7      	bhi.n	8001768 <HAL_Delay+0x28>
  {
  }
}
 8001778:	bf00      	nop
 800177a:	bf00      	nop
 800177c:	3710      	adds	r7, #16
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000008 	.word	0x20000008

08001788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f003 0307 	and.w	r3, r3, #7
 8001796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001798:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017a4:	4013      	ands	r3, r2
 80017a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ba:	4a04      	ldr	r2, [pc, #16]	@ (80017cc <__NVIC_SetPriorityGrouping+0x44>)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	60d3      	str	r3, [r2, #12]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d4:	4b04      	ldr	r3, [pc, #16]	@ (80017e8 <__NVIC_GetPriorityGrouping+0x18>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	0a1b      	lsrs	r3, r3, #8
 80017da:	f003 0307 	and.w	r3, r3, #7
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	db0b      	blt.n	8001816 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	f003 021f 	and.w	r2, r3, #31
 8001804:	4907      	ldr	r1, [pc, #28]	@ (8001824 <__NVIC_EnableIRQ+0x38>)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	095b      	lsrs	r3, r3, #5
 800180c:	2001      	movs	r0, #1
 800180e:	fa00 f202 	lsl.w	r2, r0, r2
 8001812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001816:	bf00      	nop
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	e000e100 	.word	0xe000e100

08001828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	2b00      	cmp	r3, #0
 800183a:	db0a      	blt.n	8001852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	490c      	ldr	r1, [pc, #48]	@ (8001874 <__NVIC_SetPriority+0x4c>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	0112      	lsls	r2, r2, #4
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	440b      	add	r3, r1
 800184c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001850:	e00a      	b.n	8001868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4908      	ldr	r1, [pc, #32]	@ (8001878 <__NVIC_SetPriority+0x50>)
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	3b04      	subs	r3, #4
 8001860:	0112      	lsls	r2, r2, #4
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	440b      	add	r3, r1
 8001866:	761a      	strb	r2, [r3, #24]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000e100 	.word	0xe000e100
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	@ 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f1c3 0307 	rsb	r3, r3, #7
 8001896:	2b04      	cmp	r3, #4
 8001898:	bf28      	it	cs
 800189a:	2304      	movcs	r3, #4
 800189c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3304      	adds	r3, #4
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d902      	bls.n	80018ac <NVIC_EncodePriority+0x30>
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3b03      	subs	r3, #3
 80018aa:	e000      	b.n	80018ae <NVIC_EncodePriority+0x32>
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	f04f 32ff 	mov.w	r2, #4294967295
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43da      	mvns	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	401a      	ands	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	43d9      	mvns	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	4313      	orrs	r3, r2
         );
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3724      	adds	r7, #36	@ 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018f4:	d301      	bcc.n	80018fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f6:	2301      	movs	r3, #1
 80018f8:	e00f      	b.n	800191a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001924 <SysTick_Config+0x40>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3b01      	subs	r3, #1
 8001900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001902:	210f      	movs	r1, #15
 8001904:	f04f 30ff 	mov.w	r0, #4294967295
 8001908:	f7ff ff8e 	bl	8001828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800190c:	4b05      	ldr	r3, [pc, #20]	@ (8001924 <SysTick_Config+0x40>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001912:	4b04      	ldr	r3, [pc, #16]	@ (8001924 <SysTick_Config+0x40>)
 8001914:	2207      	movs	r2, #7
 8001916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	e000e010 	.word	0xe000e010

08001928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ff29 	bl	8001788 <__NVIC_SetPriorityGrouping>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800193e:	b580      	push	{r7, lr}
 8001940:	b086      	sub	sp, #24
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
 800194a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001950:	f7ff ff3e 	bl	80017d0 <__NVIC_GetPriorityGrouping>
 8001954:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	68b9      	ldr	r1, [r7, #8]
 800195a:	6978      	ldr	r0, [r7, #20]
 800195c:	f7ff ff8e 	bl	800187c <NVIC_EncodePriority>
 8001960:	4602      	mov	r2, r0
 8001962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001966:	4611      	mov	r1, r2
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ff5d 	bl	8001828 <__NVIC_SetPriority>
}
 800196e:	bf00      	nop
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	4603      	mov	r3, r0
 800197e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff31 	bl	80017ec <__NVIC_EnableIRQ>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff ffa2 	bl	80018e4 <SysTick_Config>
 80019a0:	4603      	mov	r3, r0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	@ 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019be:	2300      	movs	r3, #0
 80019c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]
 80019c6:	e159      	b.n	8001c7c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019c8:	2201      	movs	r2, #1
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	f040 8148 	bne.w	8001c76 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d005      	beq.n	80019fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d130      	bne.n	8001a60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	2203      	movs	r2, #3
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4013      	ands	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	68da      	ldr	r2, [r3, #12]
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a34:	2201      	movs	r2, #1
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	091b      	lsrs	r3, r3, #4
 8001a4a:	f003 0201 	and.w	r2, r3, #1
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0303 	and.w	r3, r3, #3
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	d017      	beq.n	8001a9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	2203      	movs	r2, #3
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d123      	bne.n	8001af0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	08da      	lsrs	r2, r3, #3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3208      	adds	r2, #8
 8001ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	220f      	movs	r2, #15
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	08da      	lsrs	r2, r3, #3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	3208      	adds	r2, #8
 8001aea:	69b9      	ldr	r1, [r7, #24]
 8001aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	005b      	lsls	r3, r3, #1
 8001afa:	2203      	movs	r2, #3
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4013      	ands	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 0203 	and.w	r2, r3, #3
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80a2 	beq.w	8001c76 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	4b57      	ldr	r3, [pc, #348]	@ (8001c94 <HAL_GPIO_Init+0x2e8>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3a:	4a56      	ldr	r2, [pc, #344]	@ (8001c94 <HAL_GPIO_Init+0x2e8>)
 8001b3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b42:	4b54      	ldr	r3, [pc, #336]	@ (8001c94 <HAL_GPIO_Init+0x2e8>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b4e:	4a52      	ldr	r2, [pc, #328]	@ (8001c98 <HAL_GPIO_Init+0x2ec>)
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	089b      	lsrs	r3, r3, #2
 8001b54:	3302      	adds	r3, #2
 8001b56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	220f      	movs	r2, #15
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a49      	ldr	r2, [pc, #292]	@ (8001c9c <HAL_GPIO_Init+0x2f0>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d019      	beq.n	8001bae <HAL_GPIO_Init+0x202>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a48      	ldr	r2, [pc, #288]	@ (8001ca0 <HAL_GPIO_Init+0x2f4>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d013      	beq.n	8001baa <HAL_GPIO_Init+0x1fe>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a47      	ldr	r2, [pc, #284]	@ (8001ca4 <HAL_GPIO_Init+0x2f8>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d00d      	beq.n	8001ba6 <HAL_GPIO_Init+0x1fa>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a46      	ldr	r2, [pc, #280]	@ (8001ca8 <HAL_GPIO_Init+0x2fc>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d007      	beq.n	8001ba2 <HAL_GPIO_Init+0x1f6>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a45      	ldr	r2, [pc, #276]	@ (8001cac <HAL_GPIO_Init+0x300>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d101      	bne.n	8001b9e <HAL_GPIO_Init+0x1f2>
 8001b9a:	2304      	movs	r3, #4
 8001b9c:	e008      	b.n	8001bb0 <HAL_GPIO_Init+0x204>
 8001b9e:	2307      	movs	r3, #7
 8001ba0:	e006      	b.n	8001bb0 <HAL_GPIO_Init+0x204>
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e004      	b.n	8001bb0 <HAL_GPIO_Init+0x204>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e002      	b.n	8001bb0 <HAL_GPIO_Init+0x204>
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <HAL_GPIO_Init+0x204>
 8001bae:	2300      	movs	r3, #0
 8001bb0:	69fa      	ldr	r2, [r7, #28]
 8001bb2:	f002 0203 	and.w	r2, r2, #3
 8001bb6:	0092      	lsls	r2, r2, #2
 8001bb8:	4093      	lsls	r3, r2
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bc0:	4935      	ldr	r1, [pc, #212]	@ (8001c98 <HAL_GPIO_Init+0x2ec>)
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	089b      	lsrs	r3, r3, #2
 8001bc6:	3302      	adds	r3, #2
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bce:	4b38      	ldr	r3, [pc, #224]	@ (8001cb0 <HAL_GPIO_Init+0x304>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bf2:	4a2f      	ldr	r2, [pc, #188]	@ (8001cb0 <HAL_GPIO_Init+0x304>)
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8001cb0 <HAL_GPIO_Init+0x304>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c1c:	4a24      	ldr	r2, [pc, #144]	@ (8001cb0 <HAL_GPIO_Init+0x304>)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c22:	4b23      	ldr	r3, [pc, #140]	@ (8001cb0 <HAL_GPIO_Init+0x304>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c46:	4a1a      	ldr	r2, [pc, #104]	@ (8001cb0 <HAL_GPIO_Init+0x304>)
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c4c:	4b18      	ldr	r3, [pc, #96]	@ (8001cb0 <HAL_GPIO_Init+0x304>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c70:	4a0f      	ldr	r2, [pc, #60]	@ (8001cb0 <HAL_GPIO_Init+0x304>)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	61fb      	str	r3, [r7, #28]
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	2b0f      	cmp	r3, #15
 8001c80:	f67f aea2 	bls.w	80019c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c84:	bf00      	nop
 8001c86:	bf00      	nop
 8001c88:	3724      	adds	r7, #36	@ 0x24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40013800 	.word	0x40013800
 8001c9c:	40020000 	.word	0x40020000
 8001ca0:	40020400 	.word	0x40020400
 8001ca4:	40020800 	.word	0x40020800
 8001ca8:	40020c00 	.word	0x40020c00
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	40013c00 	.word	0x40013c00

08001cb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	460b      	mov	r3, r1
 8001cbe:	807b      	strh	r3, [r7, #2]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cc4:	787b      	ldrb	r3, [r7, #1]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cca:	887a      	ldrh	r2, [r7, #2]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cd0:	e003      	b.n	8001cda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cd2:	887b      	ldrh	r3, [r7, #2]
 8001cd4:	041a      	lsls	r2, r3, #16
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	619a      	str	r2, [r3, #24]
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b085      	sub	sp, #20
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	695b      	ldr	r3, [r3, #20]
 8001cf6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cf8:	887a      	ldrh	r2, [r7, #2]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	041a      	lsls	r2, r3, #16
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	43d9      	mvns	r1, r3
 8001d04:	887b      	ldrh	r3, [r7, #2]
 8001d06:	400b      	ands	r3, r1
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	619a      	str	r2, [r3, #24]
}
 8001d0e:	bf00      	nop
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d26:	4b08      	ldr	r3, [pc, #32]	@ (8001d48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d28:	695a      	ldr	r2, [r3, #20]
 8001d2a:	88fb      	ldrh	r3, [r7, #6]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d006      	beq.n	8001d40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d32:	4a05      	ldr	r2, [pc, #20]	@ (8001d48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d34:	88fb      	ldrh	r3, [r7, #6]
 8001d36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fe4c 	bl	80009d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d40:	bf00      	nop
 8001d42:	3708      	adds	r7, #8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	40013c00 	.word	0x40013c00

08001d4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e267      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d075      	beq.n	8001e56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d6a:	4b88      	ldr	r3, [pc, #544]	@ (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d00c      	beq.n	8001d90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d76:	4b85      	ldr	r3, [pc, #532]	@ (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d112      	bne.n	8001da8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d82:	4b82      	ldr	r3, [pc, #520]	@ (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d8e:	d10b      	bne.n	8001da8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d90:	4b7e      	ldr	r3, [pc, #504]	@ (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d05b      	beq.n	8001e54 <HAL_RCC_OscConfig+0x108>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d157      	bne.n	8001e54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e242      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001db0:	d106      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x74>
 8001db2:	4b76      	ldr	r3, [pc, #472]	@ (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a75      	ldr	r2, [pc, #468]	@ (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001db8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	e01d      	b.n	8001dfc <HAL_RCC_OscConfig+0xb0>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dc8:	d10c      	bne.n	8001de4 <HAL_RCC_OscConfig+0x98>
 8001dca:	4b70      	ldr	r3, [pc, #448]	@ (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a6f      	ldr	r2, [pc, #444]	@ (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001dd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	4b6d      	ldr	r3, [pc, #436]	@ (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a6c      	ldr	r2, [pc, #432]	@ (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	e00b      	b.n	8001dfc <HAL_RCC_OscConfig+0xb0>
 8001de4:	4b69      	ldr	r3, [pc, #420]	@ (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a68      	ldr	r2, [pc, #416]	@ (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001dea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	4b66      	ldr	r3, [pc, #408]	@ (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a65      	ldr	r2, [pc, #404]	@ (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001df6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d013      	beq.n	8001e2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e04:	f7ff fc90 	bl	8001728 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e0c:	f7ff fc8c 	bl	8001728 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b64      	cmp	r3, #100	@ 0x64
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e207      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1e:	4b5b      	ldr	r3, [pc, #364]	@ (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0xc0>
 8001e2a:	e014      	b.n	8001e56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2c:	f7ff fc7c 	bl	8001728 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e34:	f7ff fc78 	bl	8001728 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b64      	cmp	r3, #100	@ 0x64
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e1f3      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e46:	4b51      	ldr	r3, [pc, #324]	@ (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0xe8>
 8001e52:	e000      	b.n	8001e56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d063      	beq.n	8001f2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e62:	4b4a      	ldr	r3, [pc, #296]	@ (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 030c 	and.w	r3, r3, #12
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00b      	beq.n	8001e86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e6e:	4b47      	ldr	r3, [pc, #284]	@ (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d11c      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e7a:	4b44      	ldr	r3, [pc, #272]	@ (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d116      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e86:	4b41      	ldr	r3, [pc, #260]	@ (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d005      	beq.n	8001e9e <HAL_RCC_OscConfig+0x152>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d001      	beq.n	8001e9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e1c7      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4937      	ldr	r1, [pc, #220]	@ (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eb2:	e03a      	b.n	8001f2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d020      	beq.n	8001efe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ebc:	4b34      	ldr	r3, [pc, #208]	@ (8001f90 <HAL_RCC_OscConfig+0x244>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec2:	f7ff fc31 	bl	8001728 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eca:	f7ff fc2d 	bl	8001728 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e1a8      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001edc:	4b2b      	ldr	r3, [pc, #172]	@ (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0302 	and.w	r3, r3, #2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0f0      	beq.n	8001eca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee8:	4b28      	ldr	r3, [pc, #160]	@ (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	4925      	ldr	r1, [pc, #148]	@ (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	600b      	str	r3, [r1, #0]
 8001efc:	e015      	b.n	8001f2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001efe:	4b24      	ldr	r3, [pc, #144]	@ (8001f90 <HAL_RCC_OscConfig+0x244>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f04:	f7ff fc10 	bl	8001728 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f0c:	f7ff fc0c 	bl	8001728 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e187      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0308 	and.w	r3, r3, #8
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d036      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	695b      	ldr	r3, [r3, #20]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d016      	beq.n	8001f6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f3e:	4b15      	ldr	r3, [pc, #84]	@ (8001f94 <HAL_RCC_OscConfig+0x248>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f44:	f7ff fbf0 	bl	8001728 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f4c:	f7ff fbec 	bl	8001728 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e167      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f8c <HAL_RCC_OscConfig+0x240>)
 8001f60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0f0      	beq.n	8001f4c <HAL_RCC_OscConfig+0x200>
 8001f6a:	e01b      	b.n	8001fa4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f6c:	4b09      	ldr	r3, [pc, #36]	@ (8001f94 <HAL_RCC_OscConfig+0x248>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f72:	f7ff fbd9 	bl	8001728 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f78:	e00e      	b.n	8001f98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f7a:	f7ff fbd5 	bl	8001728 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d907      	bls.n	8001f98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e150      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	42470000 	.word	0x42470000
 8001f94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f98:	4b88      	ldr	r3, [pc, #544]	@ (80021bc <HAL_RCC_OscConfig+0x470>)
 8001f9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1ea      	bne.n	8001f7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 8097 	beq.w	80020e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fb6:	4b81      	ldr	r3, [pc, #516]	@ (80021bc <HAL_RCC_OscConfig+0x470>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10f      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	4b7d      	ldr	r3, [pc, #500]	@ (80021bc <HAL_RCC_OscConfig+0x470>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fca:	4a7c      	ldr	r2, [pc, #496]	@ (80021bc <HAL_RCC_OscConfig+0x470>)
 8001fcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fd2:	4b7a      	ldr	r3, [pc, #488]	@ (80021bc <HAL_RCC_OscConfig+0x470>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe2:	4b77      	ldr	r3, [pc, #476]	@ (80021c0 <HAL_RCC_OscConfig+0x474>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d118      	bne.n	8002020 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fee:	4b74      	ldr	r3, [pc, #464]	@ (80021c0 <HAL_RCC_OscConfig+0x474>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a73      	ldr	r2, [pc, #460]	@ (80021c0 <HAL_RCC_OscConfig+0x474>)
 8001ff4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ff8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ffa:	f7ff fb95 	bl	8001728 <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002002:	f7ff fb91 	bl	8001728 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e10c      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002014:	4b6a      	ldr	r3, [pc, #424]	@ (80021c0 <HAL_RCC_OscConfig+0x474>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0f0      	beq.n	8002002 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d106      	bne.n	8002036 <HAL_RCC_OscConfig+0x2ea>
 8002028:	4b64      	ldr	r3, [pc, #400]	@ (80021bc <HAL_RCC_OscConfig+0x470>)
 800202a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800202c:	4a63      	ldr	r2, [pc, #396]	@ (80021bc <HAL_RCC_OscConfig+0x470>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6713      	str	r3, [r2, #112]	@ 0x70
 8002034:	e01c      	b.n	8002070 <HAL_RCC_OscConfig+0x324>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	2b05      	cmp	r3, #5
 800203c:	d10c      	bne.n	8002058 <HAL_RCC_OscConfig+0x30c>
 800203e:	4b5f      	ldr	r3, [pc, #380]	@ (80021bc <HAL_RCC_OscConfig+0x470>)
 8002040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002042:	4a5e      	ldr	r2, [pc, #376]	@ (80021bc <HAL_RCC_OscConfig+0x470>)
 8002044:	f043 0304 	orr.w	r3, r3, #4
 8002048:	6713      	str	r3, [r2, #112]	@ 0x70
 800204a:	4b5c      	ldr	r3, [pc, #368]	@ (80021bc <HAL_RCC_OscConfig+0x470>)
 800204c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800204e:	4a5b      	ldr	r2, [pc, #364]	@ (80021bc <HAL_RCC_OscConfig+0x470>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	6713      	str	r3, [r2, #112]	@ 0x70
 8002056:	e00b      	b.n	8002070 <HAL_RCC_OscConfig+0x324>
 8002058:	4b58      	ldr	r3, [pc, #352]	@ (80021bc <HAL_RCC_OscConfig+0x470>)
 800205a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800205c:	4a57      	ldr	r2, [pc, #348]	@ (80021bc <HAL_RCC_OscConfig+0x470>)
 800205e:	f023 0301 	bic.w	r3, r3, #1
 8002062:	6713      	str	r3, [r2, #112]	@ 0x70
 8002064:	4b55      	ldr	r3, [pc, #340]	@ (80021bc <HAL_RCC_OscConfig+0x470>)
 8002066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002068:	4a54      	ldr	r2, [pc, #336]	@ (80021bc <HAL_RCC_OscConfig+0x470>)
 800206a:	f023 0304 	bic.w	r3, r3, #4
 800206e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d015      	beq.n	80020a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002078:	f7ff fb56 	bl	8001728 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800207e:	e00a      	b.n	8002096 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002080:	f7ff fb52 	bl	8001728 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800208e:	4293      	cmp	r3, r2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e0cb      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002096:	4b49      	ldr	r3, [pc, #292]	@ (80021bc <HAL_RCC_OscConfig+0x470>)
 8002098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0ee      	beq.n	8002080 <HAL_RCC_OscConfig+0x334>
 80020a2:	e014      	b.n	80020ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a4:	f7ff fb40 	bl	8001728 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020aa:	e00a      	b.n	80020c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ac:	f7ff fb3c 	bl	8001728 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e0b5      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c2:	4b3e      	ldr	r3, [pc, #248]	@ (80021bc <HAL_RCC_OscConfig+0x470>)
 80020c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1ee      	bne.n	80020ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020ce:	7dfb      	ldrb	r3, [r7, #23]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d105      	bne.n	80020e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d4:	4b39      	ldr	r3, [pc, #228]	@ (80021bc <HAL_RCC_OscConfig+0x470>)
 80020d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d8:	4a38      	ldr	r2, [pc, #224]	@ (80021bc <HAL_RCC_OscConfig+0x470>)
 80020da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 80a1 	beq.w	800222c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020ea:	4b34      	ldr	r3, [pc, #208]	@ (80021bc <HAL_RCC_OscConfig+0x470>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	2b08      	cmp	r3, #8
 80020f4:	d05c      	beq.n	80021b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d141      	bne.n	8002182 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020fe:	4b31      	ldr	r3, [pc, #196]	@ (80021c4 <HAL_RCC_OscConfig+0x478>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002104:	f7ff fb10 	bl	8001728 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800210c:	f7ff fb0c 	bl	8001728 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e087      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800211e:	4b27      	ldr	r3, [pc, #156]	@ (80021bc <HAL_RCC_OscConfig+0x470>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	69da      	ldr	r2, [r3, #28]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002138:	019b      	lsls	r3, r3, #6
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002140:	085b      	lsrs	r3, r3, #1
 8002142:	3b01      	subs	r3, #1
 8002144:	041b      	lsls	r3, r3, #16
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214c:	061b      	lsls	r3, r3, #24
 800214e:	491b      	ldr	r1, [pc, #108]	@ (80021bc <HAL_RCC_OscConfig+0x470>)
 8002150:	4313      	orrs	r3, r2
 8002152:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002154:	4b1b      	ldr	r3, [pc, #108]	@ (80021c4 <HAL_RCC_OscConfig+0x478>)
 8002156:	2201      	movs	r2, #1
 8002158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215a:	f7ff fae5 	bl	8001728 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002162:	f7ff fae1 	bl	8001728 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e05c      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002174:	4b11      	ldr	r3, [pc, #68]	@ (80021bc <HAL_RCC_OscConfig+0x470>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0f0      	beq.n	8002162 <HAL_RCC_OscConfig+0x416>
 8002180:	e054      	b.n	800222c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002182:	4b10      	ldr	r3, [pc, #64]	@ (80021c4 <HAL_RCC_OscConfig+0x478>)
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002188:	f7ff face 	bl	8001728 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002190:	f7ff faca 	bl	8001728 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e045      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a2:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <HAL_RCC_OscConfig+0x470>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x444>
 80021ae:	e03d      	b.n	800222c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d107      	bne.n	80021c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e038      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40007000 	.word	0x40007000
 80021c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002238 <HAL_RCC_OscConfig+0x4ec>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d028      	beq.n	8002228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d121      	bne.n	8002228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d11a      	bne.n	8002228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021f8:	4013      	ands	r3, r2
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002200:	4293      	cmp	r3, r2
 8002202:	d111      	bne.n	8002228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800220e:	085b      	lsrs	r3, r3, #1
 8002210:	3b01      	subs	r3, #1
 8002212:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002214:	429a      	cmp	r2, r3
 8002216:	d107      	bne.n	8002228 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002222:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002224:	429a      	cmp	r2, r3
 8002226:	d001      	beq.n	800222c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e000      	b.n	800222e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	40023800 	.word	0x40023800

0800223c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0cc      	b.n	80023ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002250:	4b68      	ldr	r3, [pc, #416]	@ (80023f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	d90c      	bls.n	8002278 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225e:	4b65      	ldr	r3, [pc, #404]	@ (80023f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002266:	4b63      	ldr	r3, [pc, #396]	@ (80023f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	429a      	cmp	r2, r3
 8002272:	d001      	beq.n	8002278 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e0b8      	b.n	80023ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d020      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	d005      	beq.n	800229c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002290:	4b59      	ldr	r3, [pc, #356]	@ (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	4a58      	ldr	r2, [pc, #352]	@ (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002296:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800229a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0308 	and.w	r3, r3, #8
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022a8:	4b53      	ldr	r3, [pc, #332]	@ (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	4a52      	ldr	r2, [pc, #328]	@ (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022b4:	4b50      	ldr	r3, [pc, #320]	@ (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	494d      	ldr	r1, [pc, #308]	@ (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d044      	beq.n	800235c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d107      	bne.n	80022ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022da:	4b47      	ldr	r3, [pc, #284]	@ (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d119      	bne.n	800231a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e07f      	b.n	80023ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d003      	beq.n	80022fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d107      	bne.n	800230a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022fa:	4b3f      	ldr	r3, [pc, #252]	@ (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d109      	bne.n	800231a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e06f      	b.n	80023ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230a:	4b3b      	ldr	r3, [pc, #236]	@ (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e067      	b.n	80023ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800231a:	4b37      	ldr	r3, [pc, #220]	@ (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f023 0203 	bic.w	r2, r3, #3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	4934      	ldr	r1, [pc, #208]	@ (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002328:	4313      	orrs	r3, r2
 800232a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800232c:	f7ff f9fc 	bl	8001728 <HAL_GetTick>
 8002330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002332:	e00a      	b.n	800234a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002334:	f7ff f9f8 	bl	8001728 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e04f      	b.n	80023ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234a:	4b2b      	ldr	r3, [pc, #172]	@ (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 020c 	and.w	r2, r3, #12
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	429a      	cmp	r2, r3
 800235a:	d1eb      	bne.n	8002334 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800235c:	4b25      	ldr	r3, [pc, #148]	@ (80023f4 <HAL_RCC_ClockConfig+0x1b8>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d20c      	bcs.n	8002384 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236a:	4b22      	ldr	r3, [pc, #136]	@ (80023f4 <HAL_RCC_ClockConfig+0x1b8>)
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002372:	4b20      	ldr	r3, [pc, #128]	@ (80023f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d001      	beq.n	8002384 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e032      	b.n	80023ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d008      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002390:	4b19      	ldr	r3, [pc, #100]	@ (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	4916      	ldr	r1, [pc, #88]	@ (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0308 	and.w	r3, r3, #8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d009      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ae:	4b12      	ldr	r3, [pc, #72]	@ (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	490e      	ldr	r1, [pc, #56]	@ (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023c2:	f000 f821 	bl	8002408 <HAL_RCC_GetSysClockFreq>
 80023c6:	4602      	mov	r2, r0
 80023c8:	4b0b      	ldr	r3, [pc, #44]	@ (80023f8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	091b      	lsrs	r3, r3, #4
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	490a      	ldr	r1, [pc, #40]	@ (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 80023d4:	5ccb      	ldrb	r3, [r1, r3]
 80023d6:	fa22 f303 	lsr.w	r3, r2, r3
 80023da:	4a09      	ldr	r2, [pc, #36]	@ (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023de:	4b09      	ldr	r3, [pc, #36]	@ (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff f95c 	bl	80016a0 <HAL_InitTick>

  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40023c00 	.word	0x40023c00
 80023f8:	40023800 	.word	0x40023800
 80023fc:	08005340 	.word	0x08005340
 8002400:	20000000 	.word	0x20000000
 8002404:	20000004 	.word	0x20000004

08002408 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800240c:	b090      	sub	sp, #64	@ 0x40
 800240e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002410:	2300      	movs	r3, #0
 8002412:	637b      	str	r3, [r7, #52]	@ 0x34
 8002414:	2300      	movs	r3, #0
 8002416:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002418:	2300      	movs	r3, #0
 800241a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002420:	4b59      	ldr	r3, [pc, #356]	@ (8002588 <HAL_RCC_GetSysClockFreq+0x180>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f003 030c 	and.w	r3, r3, #12
 8002428:	2b08      	cmp	r3, #8
 800242a:	d00d      	beq.n	8002448 <HAL_RCC_GetSysClockFreq+0x40>
 800242c:	2b08      	cmp	r3, #8
 800242e:	f200 80a1 	bhi.w	8002574 <HAL_RCC_GetSysClockFreq+0x16c>
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <HAL_RCC_GetSysClockFreq+0x34>
 8002436:	2b04      	cmp	r3, #4
 8002438:	d003      	beq.n	8002442 <HAL_RCC_GetSysClockFreq+0x3a>
 800243a:	e09b      	b.n	8002574 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800243c:	4b53      	ldr	r3, [pc, #332]	@ (800258c <HAL_RCC_GetSysClockFreq+0x184>)
 800243e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8002440:	e09b      	b.n	800257a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002442:	4b53      	ldr	r3, [pc, #332]	@ (8002590 <HAL_RCC_GetSysClockFreq+0x188>)
 8002444:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002446:	e098      	b.n	800257a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002448:	4b4f      	ldr	r3, [pc, #316]	@ (8002588 <HAL_RCC_GetSysClockFreq+0x180>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002450:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002452:	4b4d      	ldr	r3, [pc, #308]	@ (8002588 <HAL_RCC_GetSysClockFreq+0x180>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d028      	beq.n	80024b0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800245e:	4b4a      	ldr	r3, [pc, #296]	@ (8002588 <HAL_RCC_GetSysClockFreq+0x180>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	099b      	lsrs	r3, r3, #6
 8002464:	2200      	movs	r2, #0
 8002466:	623b      	str	r3, [r7, #32]
 8002468:	627a      	str	r2, [r7, #36]	@ 0x24
 800246a:	6a3b      	ldr	r3, [r7, #32]
 800246c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002470:	2100      	movs	r1, #0
 8002472:	4b47      	ldr	r3, [pc, #284]	@ (8002590 <HAL_RCC_GetSysClockFreq+0x188>)
 8002474:	fb03 f201 	mul.w	r2, r3, r1
 8002478:	2300      	movs	r3, #0
 800247a:	fb00 f303 	mul.w	r3, r0, r3
 800247e:	4413      	add	r3, r2
 8002480:	4a43      	ldr	r2, [pc, #268]	@ (8002590 <HAL_RCC_GetSysClockFreq+0x188>)
 8002482:	fba0 1202 	umull	r1, r2, r0, r2
 8002486:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002488:	460a      	mov	r2, r1
 800248a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800248c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800248e:	4413      	add	r3, r2
 8002490:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002494:	2200      	movs	r2, #0
 8002496:	61bb      	str	r3, [r7, #24]
 8002498:	61fa      	str	r2, [r7, #28]
 800249a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800249e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80024a2:	f7fd feed 	bl	8000280 <__aeabi_uldivmod>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	4613      	mov	r3, r2
 80024ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024ae:	e053      	b.n	8002558 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024b0:	4b35      	ldr	r3, [pc, #212]	@ (8002588 <HAL_RCC_GetSysClockFreq+0x180>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	099b      	lsrs	r3, r3, #6
 80024b6:	2200      	movs	r2, #0
 80024b8:	613b      	str	r3, [r7, #16]
 80024ba:	617a      	str	r2, [r7, #20]
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80024c2:	f04f 0b00 	mov.w	fp, #0
 80024c6:	4652      	mov	r2, sl
 80024c8:	465b      	mov	r3, fp
 80024ca:	f04f 0000 	mov.w	r0, #0
 80024ce:	f04f 0100 	mov.w	r1, #0
 80024d2:	0159      	lsls	r1, r3, #5
 80024d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024d8:	0150      	lsls	r0, r2, #5
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	ebb2 080a 	subs.w	r8, r2, sl
 80024e2:	eb63 090b 	sbc.w	r9, r3, fp
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	f04f 0300 	mov.w	r3, #0
 80024ee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80024f2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80024f6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80024fa:	ebb2 0408 	subs.w	r4, r2, r8
 80024fe:	eb63 0509 	sbc.w	r5, r3, r9
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	f04f 0300 	mov.w	r3, #0
 800250a:	00eb      	lsls	r3, r5, #3
 800250c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002510:	00e2      	lsls	r2, r4, #3
 8002512:	4614      	mov	r4, r2
 8002514:	461d      	mov	r5, r3
 8002516:	eb14 030a 	adds.w	r3, r4, sl
 800251a:	603b      	str	r3, [r7, #0]
 800251c:	eb45 030b 	adc.w	r3, r5, fp
 8002520:	607b      	str	r3, [r7, #4]
 8002522:	f04f 0200 	mov.w	r2, #0
 8002526:	f04f 0300 	mov.w	r3, #0
 800252a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800252e:	4629      	mov	r1, r5
 8002530:	028b      	lsls	r3, r1, #10
 8002532:	4621      	mov	r1, r4
 8002534:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002538:	4621      	mov	r1, r4
 800253a:	028a      	lsls	r2, r1, #10
 800253c:	4610      	mov	r0, r2
 800253e:	4619      	mov	r1, r3
 8002540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002542:	2200      	movs	r2, #0
 8002544:	60bb      	str	r3, [r7, #8]
 8002546:	60fa      	str	r2, [r7, #12]
 8002548:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800254c:	f7fd fe98 	bl	8000280 <__aeabi_uldivmod>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4613      	mov	r3, r2
 8002556:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002558:	4b0b      	ldr	r3, [pc, #44]	@ (8002588 <HAL_RCC_GetSysClockFreq+0x180>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	0c1b      	lsrs	r3, r3, #16
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	3301      	adds	r3, #1
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002568:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800256a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800256c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002570:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002572:	e002      	b.n	800257a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002574:	4b05      	ldr	r3, [pc, #20]	@ (800258c <HAL_RCC_GetSysClockFreq+0x184>)
 8002576:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002578:	bf00      	nop
    }
  }
  return sysclockfreq;
 800257a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800257c:	4618      	mov	r0, r3
 800257e:	3740      	adds	r7, #64	@ 0x40
 8002580:	46bd      	mov	sp, r7
 8002582:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002586:	bf00      	nop
 8002588:	40023800 	.word	0x40023800
 800258c:	00f42400 	.word	0x00f42400
 8002590:	017d7840 	.word	0x017d7840

08002594 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002598:	4b03      	ldr	r3, [pc, #12]	@ (80025a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800259a:	681b      	ldr	r3, [r3, #0]
}
 800259c:	4618      	mov	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20000000 	.word	0x20000000

080025ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025b0:	f7ff fff0 	bl	8002594 <HAL_RCC_GetHCLKFreq>
 80025b4:	4602      	mov	r2, r0
 80025b6:	4b05      	ldr	r3, [pc, #20]	@ (80025cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	0a9b      	lsrs	r3, r3, #10
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	4903      	ldr	r1, [pc, #12]	@ (80025d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025c2:	5ccb      	ldrb	r3, [r1, r3]
 80025c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40023800 	.word	0x40023800
 80025d0:	08005350 	.word	0x08005350

080025d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025d8:	f7ff ffdc 	bl	8002594 <HAL_RCC_GetHCLKFreq>
 80025dc:	4602      	mov	r2, r0
 80025de:	4b05      	ldr	r3, [pc, #20]	@ (80025f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	0b5b      	lsrs	r3, r3, #13
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	4903      	ldr	r1, [pc, #12]	@ (80025f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025ea:	5ccb      	ldrb	r3, [r1, r3]
 80025ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40023800 	.word	0x40023800
 80025f8:	08005350 	.word	0x08005350

080025fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e041      	b.n	8002692 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7fe fdce 	bl	80011c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	3304      	adds	r3, #4
 8002638:	4619      	mov	r1, r3
 800263a:	4610      	mov	r0, r2
 800263c:	f001 f868 	bl	8003710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e041      	b.n	8002730 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d106      	bne.n	80026c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f839 	bl	8002738 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2202      	movs	r2, #2
 80026ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3304      	adds	r3, #4
 80026d6:	4619      	mov	r1, r3
 80026d8:	4610      	mov	r0, r2
 80026da:	f001 f819 	bl	8003710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d109      	bne.n	8002770 <HAL_TIM_PWM_Start+0x24>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b01      	cmp	r3, #1
 8002766:	bf14      	ite	ne
 8002768:	2301      	movne	r3, #1
 800276a:	2300      	moveq	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	e022      	b.n	80027b6 <HAL_TIM_PWM_Start+0x6a>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	2b04      	cmp	r3, #4
 8002774:	d109      	bne.n	800278a <HAL_TIM_PWM_Start+0x3e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b01      	cmp	r3, #1
 8002780:	bf14      	ite	ne
 8002782:	2301      	movne	r3, #1
 8002784:	2300      	moveq	r3, #0
 8002786:	b2db      	uxtb	r3, r3
 8002788:	e015      	b.n	80027b6 <HAL_TIM_PWM_Start+0x6a>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2b08      	cmp	r3, #8
 800278e:	d109      	bne.n	80027a4 <HAL_TIM_PWM_Start+0x58>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b01      	cmp	r3, #1
 800279a:	bf14      	ite	ne
 800279c:	2301      	movne	r3, #1
 800279e:	2300      	moveq	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	e008      	b.n	80027b6 <HAL_TIM_PWM_Start+0x6a>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	bf14      	ite	ne
 80027b0:	2301      	movne	r3, #1
 80027b2:	2300      	moveq	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e068      	b.n	8002890 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d104      	bne.n	80027ce <HAL_TIM_PWM_Start+0x82>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2202      	movs	r2, #2
 80027c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027cc:	e013      	b.n	80027f6 <HAL_TIM_PWM_Start+0xaa>
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d104      	bne.n	80027de <HAL_TIM_PWM_Start+0x92>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027dc:	e00b      	b.n	80027f6 <HAL_TIM_PWM_Start+0xaa>
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d104      	bne.n	80027ee <HAL_TIM_PWM_Start+0xa2>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027ec:	e003      	b.n	80027f6 <HAL_TIM_PWM_Start+0xaa>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2202      	movs	r2, #2
 80027f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2201      	movs	r2, #1
 80027fc:	6839      	ldr	r1, [r7, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f001 fb56 	bl	8003eb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a23      	ldr	r2, [pc, #140]	@ (8002898 <HAL_TIM_PWM_Start+0x14c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d107      	bne.n	800281e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800281c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a1d      	ldr	r2, [pc, #116]	@ (8002898 <HAL_TIM_PWM_Start+0x14c>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d018      	beq.n	800285a <HAL_TIM_PWM_Start+0x10e>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002830:	d013      	beq.n	800285a <HAL_TIM_PWM_Start+0x10e>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a19      	ldr	r2, [pc, #100]	@ (800289c <HAL_TIM_PWM_Start+0x150>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d00e      	beq.n	800285a <HAL_TIM_PWM_Start+0x10e>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a17      	ldr	r2, [pc, #92]	@ (80028a0 <HAL_TIM_PWM_Start+0x154>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d009      	beq.n	800285a <HAL_TIM_PWM_Start+0x10e>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a16      	ldr	r2, [pc, #88]	@ (80028a4 <HAL_TIM_PWM_Start+0x158>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d004      	beq.n	800285a <HAL_TIM_PWM_Start+0x10e>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a14      	ldr	r2, [pc, #80]	@ (80028a8 <HAL_TIM_PWM_Start+0x15c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d111      	bne.n	800287e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2b06      	cmp	r3, #6
 800286a:	d010      	beq.n	800288e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0201 	orr.w	r2, r2, #1
 800287a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287c:	e007      	b.n	800288e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f042 0201 	orr.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40010000 	.word	0x40010000
 800289c:	40000400 	.word	0x40000400
 80028a0:	40000800 	.word	0x40000800
 80028a4:	40000c00 	.word	0x40000c00
 80028a8:	40014000 	.word	0x40014000

080028ac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2200      	movs	r2, #0
 80028bc:	6839      	ldr	r1, [r7, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f001 faf6 	bl	8003eb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a29      	ldr	r2, [pc, #164]	@ (8002970 <HAL_TIM_PWM_Stop+0xc4>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d117      	bne.n	80028fe <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6a1a      	ldr	r2, [r3, #32]
 80028d4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80028d8:	4013      	ands	r3, r2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10f      	bne.n	80028fe <HAL_TIM_PWM_Stop+0x52>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6a1a      	ldr	r2, [r3, #32]
 80028e4:	f240 4344 	movw	r3, #1092	@ 0x444
 80028e8:	4013      	ands	r3, r2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d107      	bne.n	80028fe <HAL_TIM_PWM_Stop+0x52>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6a1a      	ldr	r2, [r3, #32]
 8002904:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002908:	4013      	ands	r3, r2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10f      	bne.n	800292e <HAL_TIM_PWM_Stop+0x82>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6a1a      	ldr	r2, [r3, #32]
 8002914:	f240 4344 	movw	r3, #1092	@ 0x444
 8002918:	4013      	ands	r3, r2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d107      	bne.n	800292e <HAL_TIM_PWM_Stop+0x82>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0201 	bic.w	r2, r2, #1
 800292c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d104      	bne.n	800293e <HAL_TIM_PWM_Stop+0x92>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800293c:	e013      	b.n	8002966 <HAL_TIM_PWM_Stop+0xba>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2b04      	cmp	r3, #4
 8002942:	d104      	bne.n	800294e <HAL_TIM_PWM_Stop+0xa2>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800294c:	e00b      	b.n	8002966 <HAL_TIM_PWM_Stop+0xba>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b08      	cmp	r3, #8
 8002952:	d104      	bne.n	800295e <HAL_TIM_PWM_Stop+0xb2>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800295c:	e003      	b.n	8002966 <HAL_TIM_PWM_Stop+0xba>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40010000 	.word	0x40010000

08002974 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e041      	b.n	8002a0a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f839 	bl	8002a12 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2202      	movs	r2, #2
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3304      	adds	r3, #4
 80029b0:	4619      	mov	r1, r3
 80029b2:	4610      	mov	r0, r2
 80029b4:	f000 feac 	bl	8003710 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b083      	sub	sp, #12
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
	...

08002a28 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d104      	bne.n	8002a46 <HAL_TIM_IC_Start_IT+0x1e>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	e013      	b.n	8002a6e <HAL_TIM_IC_Start_IT+0x46>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	2b04      	cmp	r3, #4
 8002a4a:	d104      	bne.n	8002a56 <HAL_TIM_IC_Start_IT+0x2e>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	e00b      	b.n	8002a6e <HAL_TIM_IC_Start_IT+0x46>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d104      	bne.n	8002a66 <HAL_TIM_IC_Start_IT+0x3e>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	e003      	b.n	8002a6e <HAL_TIM_IC_Start_IT+0x46>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d104      	bne.n	8002a80 <HAL_TIM_IC_Start_IT+0x58>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	e013      	b.n	8002aa8 <HAL_TIM_IC_Start_IT+0x80>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d104      	bne.n	8002a90 <HAL_TIM_IC_Start_IT+0x68>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	e00b      	b.n	8002aa8 <HAL_TIM_IC_Start_IT+0x80>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	2b08      	cmp	r3, #8
 8002a94:	d104      	bne.n	8002aa0 <HAL_TIM_IC_Start_IT+0x78>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	e003      	b.n	8002aa8 <HAL_TIM_IC_Start_IT+0x80>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002aaa:	7bbb      	ldrb	r3, [r7, #14]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d102      	bne.n	8002ab6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ab0:	7b7b      	ldrb	r3, [r7, #13]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d001      	beq.n	8002aba <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e0c2      	b.n	8002c40 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d104      	bne.n	8002aca <HAL_TIM_IC_Start_IT+0xa2>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ac8:	e013      	b.n	8002af2 <HAL_TIM_IC_Start_IT+0xca>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d104      	bne.n	8002ada <HAL_TIM_IC_Start_IT+0xb2>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ad8:	e00b      	b.n	8002af2 <HAL_TIM_IC_Start_IT+0xca>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d104      	bne.n	8002aea <HAL_TIM_IC_Start_IT+0xc2>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2202      	movs	r2, #2
 8002ae4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ae8:	e003      	b.n	8002af2 <HAL_TIM_IC_Start_IT+0xca>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2202      	movs	r2, #2
 8002aee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d104      	bne.n	8002b02 <HAL_TIM_IC_Start_IT+0xda>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2202      	movs	r2, #2
 8002afc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b00:	e013      	b.n	8002b2a <HAL_TIM_IC_Start_IT+0x102>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b04      	cmp	r3, #4
 8002b06:	d104      	bne.n	8002b12 <HAL_TIM_IC_Start_IT+0xea>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b10:	e00b      	b.n	8002b2a <HAL_TIM_IC_Start_IT+0x102>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d104      	bne.n	8002b22 <HAL_TIM_IC_Start_IT+0xfa>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b20:	e003      	b.n	8002b2a <HAL_TIM_IC_Start_IT+0x102>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2202      	movs	r2, #2
 8002b26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2b0c      	cmp	r3, #12
 8002b2e:	d841      	bhi.n	8002bb4 <HAL_TIM_IC_Start_IT+0x18c>
 8002b30:	a201      	add	r2, pc, #4	@ (adr r2, 8002b38 <HAL_TIM_IC_Start_IT+0x110>)
 8002b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b36:	bf00      	nop
 8002b38:	08002b6d 	.word	0x08002b6d
 8002b3c:	08002bb5 	.word	0x08002bb5
 8002b40:	08002bb5 	.word	0x08002bb5
 8002b44:	08002bb5 	.word	0x08002bb5
 8002b48:	08002b7f 	.word	0x08002b7f
 8002b4c:	08002bb5 	.word	0x08002bb5
 8002b50:	08002bb5 	.word	0x08002bb5
 8002b54:	08002bb5 	.word	0x08002bb5
 8002b58:	08002b91 	.word	0x08002b91
 8002b5c:	08002bb5 	.word	0x08002bb5
 8002b60:	08002bb5 	.word	0x08002bb5
 8002b64:	08002bb5 	.word	0x08002bb5
 8002b68:	08002ba3 	.word	0x08002ba3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f042 0202 	orr.w	r2, r2, #2
 8002b7a:	60da      	str	r2, [r3, #12]
      break;
 8002b7c:	e01d      	b.n	8002bba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f042 0204 	orr.w	r2, r2, #4
 8002b8c:	60da      	str	r2, [r3, #12]
      break;
 8002b8e:	e014      	b.n	8002bba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0208 	orr.w	r2, r2, #8
 8002b9e:	60da      	str	r2, [r3, #12]
      break;
 8002ba0:	e00b      	b.n	8002bba <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 0210 	orr.w	r2, r2, #16
 8002bb0:	60da      	str	r2, [r3, #12]
      break;
 8002bb2:	e002      	b.n	8002bba <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8002bb8:	bf00      	nop
  }

  if (status == HAL_OK)
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d13e      	bne.n	8002c3e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	6839      	ldr	r1, [r7, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f001 f971 	bl	8003eb0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a1d      	ldr	r2, [pc, #116]	@ (8002c48 <HAL_TIM_IC_Start_IT+0x220>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d018      	beq.n	8002c0a <HAL_TIM_IC_Start_IT+0x1e2>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002be0:	d013      	beq.n	8002c0a <HAL_TIM_IC_Start_IT+0x1e2>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a19      	ldr	r2, [pc, #100]	@ (8002c4c <HAL_TIM_IC_Start_IT+0x224>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d00e      	beq.n	8002c0a <HAL_TIM_IC_Start_IT+0x1e2>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a17      	ldr	r2, [pc, #92]	@ (8002c50 <HAL_TIM_IC_Start_IT+0x228>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d009      	beq.n	8002c0a <HAL_TIM_IC_Start_IT+0x1e2>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a16      	ldr	r2, [pc, #88]	@ (8002c54 <HAL_TIM_IC_Start_IT+0x22c>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d004      	beq.n	8002c0a <HAL_TIM_IC_Start_IT+0x1e2>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a14      	ldr	r2, [pc, #80]	@ (8002c58 <HAL_TIM_IC_Start_IT+0x230>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d111      	bne.n	8002c2e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b06      	cmp	r3, #6
 8002c1a:	d010      	beq.n	8002c3e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0201 	orr.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c2c:	e007      	b.n	8002c3e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f042 0201 	orr.w	r2, r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40010000 	.word	0x40010000
 8002c4c:	40000400 	.word	0x40000400
 8002c50:	40000800 	.word	0x40000800
 8002c54:	40000c00 	.word	0x40000c00
 8002c58:	40014000 	.word	0x40014000

08002c5c <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c66:	2300      	movs	r3, #0
 8002c68:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	2b0c      	cmp	r3, #12
 8002c6e:	d841      	bhi.n	8002cf4 <HAL_TIM_IC_Stop_IT+0x98>
 8002c70:	a201      	add	r2, pc, #4	@ (adr r2, 8002c78 <HAL_TIM_IC_Stop_IT+0x1c>)
 8002c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c76:	bf00      	nop
 8002c78:	08002cad 	.word	0x08002cad
 8002c7c:	08002cf5 	.word	0x08002cf5
 8002c80:	08002cf5 	.word	0x08002cf5
 8002c84:	08002cf5 	.word	0x08002cf5
 8002c88:	08002cbf 	.word	0x08002cbf
 8002c8c:	08002cf5 	.word	0x08002cf5
 8002c90:	08002cf5 	.word	0x08002cf5
 8002c94:	08002cf5 	.word	0x08002cf5
 8002c98:	08002cd1 	.word	0x08002cd1
 8002c9c:	08002cf5 	.word	0x08002cf5
 8002ca0:	08002cf5 	.word	0x08002cf5
 8002ca4:	08002cf5 	.word	0x08002cf5
 8002ca8:	08002ce3 	.word	0x08002ce3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0202 	bic.w	r2, r2, #2
 8002cba:	60da      	str	r2, [r3, #12]
      break;
 8002cbc:	e01d      	b.n	8002cfa <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68da      	ldr	r2, [r3, #12]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0204 	bic.w	r2, r2, #4
 8002ccc:	60da      	str	r2, [r3, #12]
      break;
 8002cce:	e014      	b.n	8002cfa <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0208 	bic.w	r2, r2, #8
 8002cde:	60da      	str	r2, [r3, #12]
      break;
 8002ce0:	e00b      	b.n	8002cfa <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68da      	ldr	r2, [r3, #12]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0210 	bic.w	r2, r2, #16
 8002cf0:	60da      	str	r2, [r3, #12]
      break;
 8002cf2:	e002      	b.n	8002cfa <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf8:	bf00      	nop
  }

  if (status == HAL_OK)
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d156      	bne.n	8002dae <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2200      	movs	r2, #0
 8002d06:	6839      	ldr	r1, [r7, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f001 f8d1 	bl	8003eb0 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6a1a      	ldr	r2, [r3, #32]
 8002d14:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002d18:	4013      	ands	r3, r2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10f      	bne.n	8002d3e <HAL_TIM_IC_Stop_IT+0xe2>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6a1a      	ldr	r2, [r3, #32]
 8002d24:	f240 4344 	movw	r3, #1092	@ 0x444
 8002d28:	4013      	ands	r3, r2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d107      	bne.n	8002d3e <HAL_TIM_IC_Stop_IT+0xe2>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0201 	bic.w	r2, r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d104      	bne.n	8002d4e <HAL_TIM_IC_Stop_IT+0xf2>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d4c:	e013      	b.n	8002d76 <HAL_TIM_IC_Stop_IT+0x11a>
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d104      	bne.n	8002d5e <HAL_TIM_IC_Stop_IT+0x102>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d5c:	e00b      	b.n	8002d76 <HAL_TIM_IC_Stop_IT+0x11a>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d104      	bne.n	8002d6e <HAL_TIM_IC_Stop_IT+0x112>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d6c:	e003      	b.n	8002d76 <HAL_TIM_IC_Stop_IT+0x11a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d104      	bne.n	8002d86 <HAL_TIM_IC_Stop_IT+0x12a>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d84:	e013      	b.n	8002dae <HAL_TIM_IC_Stop_IT+0x152>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d104      	bne.n	8002d96 <HAL_TIM_IC_Stop_IT+0x13a>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d94:	e00b      	b.n	8002dae <HAL_TIM_IC_Stop_IT+0x152>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d104      	bne.n	8002da6 <HAL_TIM_IC_Stop_IT+0x14a>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002da4:	e003      	b.n	8002dae <HAL_TIM_IC_Stop_IT+0x152>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d101      	bne.n	8002dcc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e097      	b.n	8002efc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d106      	bne.n	8002de6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7fe fa6b 	bl	80012bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2202      	movs	r2, #2
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6812      	ldr	r2, [r2, #0]
 8002df8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002dfc:	f023 0307 	bic.w	r3, r3, #7
 8002e00:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	3304      	adds	r3, #4
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	4610      	mov	r0, r2
 8002e0e:	f000 fc7f 	bl	8003710 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e3a:	f023 0303 	bic.w	r3, r3, #3
 8002e3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	021b      	lsls	r3, r3, #8
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002e58:	f023 030c 	bic.w	r3, r3, #12
 8002e5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e64:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	021b      	lsls	r3, r3, #8
 8002e74:	4313      	orrs	r3, r2
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	011a      	lsls	r2, r3, #4
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	031b      	lsls	r3, r3, #12
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002e96:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8002e9e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685a      	ldr	r2, [r3, #4]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f14:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002f1c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002f24:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002f2c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d110      	bne.n	8002f56 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d102      	bne.n	8002f40 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f3a:	7b7b      	ldrb	r3, [r7, #13]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d001      	beq.n	8002f44 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e069      	b.n	8003018 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f54:	e031      	b.n	8002fba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	d110      	bne.n	8002f7e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f5c:	7bbb      	ldrb	r3, [r7, #14]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d102      	bne.n	8002f68 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f62:	7b3b      	ldrb	r3, [r7, #12]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d001      	beq.n	8002f6c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e055      	b.n	8003018 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f7c:	e01d      	b.n	8002fba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d108      	bne.n	8002f96 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f84:	7bbb      	ldrb	r3, [r7, #14]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d105      	bne.n	8002f96 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f8a:	7b7b      	ldrb	r3, [r7, #13]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d102      	bne.n	8002f96 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f90:	7b3b      	ldrb	r3, [r7, #12]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d001      	beq.n	8002f9a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e03e      	b.n	8003018 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2202      	movs	r2, #2
 8002fae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <HAL_TIM_Encoder_Start+0xc4>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d008      	beq.n	8002fd8 <HAL_TIM_Encoder_Start+0xd4>
 8002fc6:	e00f      	b.n	8002fe8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	2100      	movs	r1, #0
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f000 ff6d 	bl	8003eb0 <TIM_CCxChannelCmd>
      break;
 8002fd6:	e016      	b.n	8003006 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	2104      	movs	r1, #4
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 ff65 	bl	8003eb0 <TIM_CCxChannelCmd>
      break;
 8002fe6:	e00e      	b.n	8003006 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2201      	movs	r2, #1
 8002fee:	2100      	movs	r1, #0
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 ff5d 	bl	8003eb0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	2104      	movs	r1, #4
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 ff56 	bl	8003eb0 <TIM_CCxChannelCmd>
      break;
 8003004:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 0201 	orr.w	r2, r2, #1
 8003014:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d020      	beq.n	8003084 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d01b      	beq.n	8003084 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f06f 0202 	mvn.w	r2, #2
 8003054:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7fd fcda 	bl	8000a24 <HAL_TIM_IC_CaptureCallback>
 8003070:	e005      	b.n	800307e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fb2e 	bl	80036d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 fb35 	bl	80036e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	2b00      	cmp	r3, #0
 800308c:	d020      	beq.n	80030d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	d01b      	beq.n	80030d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f06f 0204 	mvn.w	r2, #4
 80030a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2202      	movs	r2, #2
 80030a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7fd fcb4 	bl	8000a24 <HAL_TIM_IC_CaptureCallback>
 80030bc:	e005      	b.n	80030ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 fb08 	bl	80036d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 fb0f 	bl	80036e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d020      	beq.n	800311c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f003 0308 	and.w	r3, r3, #8
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d01b      	beq.n	800311c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f06f 0208 	mvn.w	r2, #8
 80030ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2204      	movs	r2, #4
 80030f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7fd fc8e 	bl	8000a24 <HAL_TIM_IC_CaptureCallback>
 8003108:	e005      	b.n	8003116 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fae2 	bl	80036d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 fae9 	bl	80036e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	f003 0310 	and.w	r3, r3, #16
 8003122:	2b00      	cmp	r3, #0
 8003124:	d020      	beq.n	8003168 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f003 0310 	and.w	r3, r3, #16
 800312c:	2b00      	cmp	r3, #0
 800312e:	d01b      	beq.n	8003168 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f06f 0210 	mvn.w	r2, #16
 8003138:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2208      	movs	r2, #8
 800313e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7fd fc68 	bl	8000a24 <HAL_TIM_IC_CaptureCallback>
 8003154:	e005      	b.n	8003162 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 fabc 	bl	80036d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 fac3 	bl	80036e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00c      	beq.n	800318c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d007      	beq.n	800318c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f06f 0201 	mvn.w	r2, #1
 8003184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7fd fc7e 	bl	8000a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00c      	beq.n	80031b0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800319c:	2b00      	cmp	r3, #0
 800319e:	d007      	beq.n	80031b0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80031a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 ff1e 	bl	8003fec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00c      	beq.n	80031d4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d007      	beq.n	80031d4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80031cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 fa94 	bl	80036fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f003 0320 	and.w	r3, r3, #32
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00c      	beq.n	80031f8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f003 0320 	and.w	r3, r3, #32
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d007      	beq.n	80031f8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0220 	mvn.w	r2, #32
 80031f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 fef0 	bl	8003fd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031f8:	bf00      	nop
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	60b9      	str	r1, [r7, #8]
 800320a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800320c:	2300      	movs	r3, #0
 800320e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003216:	2b01      	cmp	r3, #1
 8003218:	d101      	bne.n	800321e <HAL_TIM_IC_ConfigChannel+0x1e>
 800321a:	2302      	movs	r3, #2
 800321c:	e088      	b.n	8003330 <HAL_TIM_IC_ConfigChannel+0x130>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2201      	movs	r2, #1
 8003222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d11b      	bne.n	8003264 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800323c:	f000 fc80 	bl	8003b40 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	699a      	ldr	r2, [r3, #24]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 020c 	bic.w	r2, r2, #12
 800324e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6999      	ldr	r1, [r3, #24]
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	619a      	str	r2, [r3, #24]
 8003262:	e060      	b.n	8003326 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b04      	cmp	r3, #4
 8003268:	d11c      	bne.n	80032a4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800327a:	f000 fcf8 	bl	8003c6e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	699a      	ldr	r2, [r3, #24]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800328c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6999      	ldr	r1, [r3, #24]
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	021a      	lsls	r2, r3, #8
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	619a      	str	r2, [r3, #24]
 80032a2:	e040      	b.n	8003326 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b08      	cmp	r3, #8
 80032a8:	d11b      	bne.n	80032e2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80032ba:	f000 fd45 	bl	8003d48 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	69da      	ldr	r2, [r3, #28]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 020c 	bic.w	r2, r2, #12
 80032cc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69d9      	ldr	r1, [r3, #28]
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	61da      	str	r2, [r3, #28]
 80032e0:	e021      	b.n	8003326 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b0c      	cmp	r3, #12
 80032e6:	d11c      	bne.n	8003322 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80032f8:	f000 fd62 	bl	8003dc0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	69da      	ldr	r2, [r3, #28]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800330a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	69d9      	ldr	r1, [r3, #28]
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	021a      	lsls	r2, r3, #8
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	61da      	str	r2, [r3, #28]
 8003320:	e001      	b.n	8003326 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800332e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003344:	2300      	movs	r3, #0
 8003346:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003352:	2302      	movs	r3, #2
 8003354:	e0ae      	b.n	80034b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b0c      	cmp	r3, #12
 8003362:	f200 809f 	bhi.w	80034a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003366:	a201      	add	r2, pc, #4	@ (adr r2, 800336c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336c:	080033a1 	.word	0x080033a1
 8003370:	080034a5 	.word	0x080034a5
 8003374:	080034a5 	.word	0x080034a5
 8003378:	080034a5 	.word	0x080034a5
 800337c:	080033e1 	.word	0x080033e1
 8003380:	080034a5 	.word	0x080034a5
 8003384:	080034a5 	.word	0x080034a5
 8003388:	080034a5 	.word	0x080034a5
 800338c:	08003423 	.word	0x08003423
 8003390:	080034a5 	.word	0x080034a5
 8003394:	080034a5 	.word	0x080034a5
 8003398:	080034a5 	.word	0x080034a5
 800339c:	08003463 	.word	0x08003463
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68b9      	ldr	r1, [r7, #8]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 fa3e 	bl	8003828 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699a      	ldr	r2, [r3, #24]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f042 0208 	orr.w	r2, r2, #8
 80033ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	699a      	ldr	r2, [r3, #24]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0204 	bic.w	r2, r2, #4
 80033ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6999      	ldr	r1, [r3, #24]
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	691a      	ldr	r2, [r3, #16]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	619a      	str	r2, [r3, #24]
      break;
 80033de:	e064      	b.n	80034aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68b9      	ldr	r1, [r7, #8]
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 fa84 	bl	80038f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699a      	ldr	r2, [r3, #24]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699a      	ldr	r2, [r3, #24]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800340a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6999      	ldr	r1, [r3, #24]
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	021a      	lsls	r2, r3, #8
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	619a      	str	r2, [r3, #24]
      break;
 8003420:	e043      	b.n	80034aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68b9      	ldr	r1, [r7, #8]
 8003428:	4618      	mov	r0, r3
 800342a:	f000 facf 	bl	80039cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	69da      	ldr	r2, [r3, #28]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f042 0208 	orr.w	r2, r2, #8
 800343c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	69da      	ldr	r2, [r3, #28]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0204 	bic.w	r2, r2, #4
 800344c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	69d9      	ldr	r1, [r3, #28]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	61da      	str	r2, [r3, #28]
      break;
 8003460:	e023      	b.n	80034aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68b9      	ldr	r1, [r7, #8]
 8003468:	4618      	mov	r0, r3
 800346a:	f000 fb19 	bl	8003aa0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	69da      	ldr	r2, [r3, #28]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800347c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	69da      	ldr	r2, [r3, #28]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800348c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	69d9      	ldr	r1, [r3, #28]
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	021a      	lsls	r2, r3, #8
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	61da      	str	r2, [r3, #28]
      break;
 80034a2:	e002      	b.n	80034aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	75fb      	strb	r3, [r7, #23]
      break;
 80034a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3718      	adds	r7, #24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_TIM_ConfigClockSource+0x1c>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e0b4      	b.n	8003642 <HAL_TIM_ConfigClockSource+0x186>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80034f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003510:	d03e      	beq.n	8003590 <HAL_TIM_ConfigClockSource+0xd4>
 8003512:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003516:	f200 8087 	bhi.w	8003628 <HAL_TIM_ConfigClockSource+0x16c>
 800351a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800351e:	f000 8086 	beq.w	800362e <HAL_TIM_ConfigClockSource+0x172>
 8003522:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003526:	d87f      	bhi.n	8003628 <HAL_TIM_ConfigClockSource+0x16c>
 8003528:	2b70      	cmp	r3, #112	@ 0x70
 800352a:	d01a      	beq.n	8003562 <HAL_TIM_ConfigClockSource+0xa6>
 800352c:	2b70      	cmp	r3, #112	@ 0x70
 800352e:	d87b      	bhi.n	8003628 <HAL_TIM_ConfigClockSource+0x16c>
 8003530:	2b60      	cmp	r3, #96	@ 0x60
 8003532:	d050      	beq.n	80035d6 <HAL_TIM_ConfigClockSource+0x11a>
 8003534:	2b60      	cmp	r3, #96	@ 0x60
 8003536:	d877      	bhi.n	8003628 <HAL_TIM_ConfigClockSource+0x16c>
 8003538:	2b50      	cmp	r3, #80	@ 0x50
 800353a:	d03c      	beq.n	80035b6 <HAL_TIM_ConfigClockSource+0xfa>
 800353c:	2b50      	cmp	r3, #80	@ 0x50
 800353e:	d873      	bhi.n	8003628 <HAL_TIM_ConfigClockSource+0x16c>
 8003540:	2b40      	cmp	r3, #64	@ 0x40
 8003542:	d058      	beq.n	80035f6 <HAL_TIM_ConfigClockSource+0x13a>
 8003544:	2b40      	cmp	r3, #64	@ 0x40
 8003546:	d86f      	bhi.n	8003628 <HAL_TIM_ConfigClockSource+0x16c>
 8003548:	2b30      	cmp	r3, #48	@ 0x30
 800354a:	d064      	beq.n	8003616 <HAL_TIM_ConfigClockSource+0x15a>
 800354c:	2b30      	cmp	r3, #48	@ 0x30
 800354e:	d86b      	bhi.n	8003628 <HAL_TIM_ConfigClockSource+0x16c>
 8003550:	2b20      	cmp	r3, #32
 8003552:	d060      	beq.n	8003616 <HAL_TIM_ConfigClockSource+0x15a>
 8003554:	2b20      	cmp	r3, #32
 8003556:	d867      	bhi.n	8003628 <HAL_TIM_ConfigClockSource+0x16c>
 8003558:	2b00      	cmp	r3, #0
 800355a:	d05c      	beq.n	8003616 <HAL_TIM_ConfigClockSource+0x15a>
 800355c:	2b10      	cmp	r3, #16
 800355e:	d05a      	beq.n	8003616 <HAL_TIM_ConfigClockSource+0x15a>
 8003560:	e062      	b.n	8003628 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003572:	f000 fc7d 	bl	8003e70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003584:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	609a      	str	r2, [r3, #8]
      break;
 800358e:	e04f      	b.n	8003630 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035a0:	f000 fc66 	bl	8003e70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035b2:	609a      	str	r2, [r3, #8]
      break;
 80035b4:	e03c      	b.n	8003630 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035c2:	461a      	mov	r2, r3
 80035c4:	f000 fb24 	bl	8003c10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2150      	movs	r1, #80	@ 0x50
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 fc33 	bl	8003e3a <TIM_ITRx_SetConfig>
      break;
 80035d4:	e02c      	b.n	8003630 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035e2:	461a      	mov	r2, r3
 80035e4:	f000 fb80 	bl	8003ce8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2160      	movs	r1, #96	@ 0x60
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 fc23 	bl	8003e3a <TIM_ITRx_SetConfig>
      break;
 80035f4:	e01c      	b.n	8003630 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003602:	461a      	mov	r2, r3
 8003604:	f000 fb04 	bl	8003c10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2140      	movs	r1, #64	@ 0x40
 800360e:	4618      	mov	r0, r3
 8003610:	f000 fc13 	bl	8003e3a <TIM_ITRx_SetConfig>
      break;
 8003614:	e00c      	b.n	8003630 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4619      	mov	r1, r3
 8003620:	4610      	mov	r0, r2
 8003622:	f000 fc0a 	bl	8003e3a <TIM_ITRx_SetConfig>
      break;
 8003626:	e003      	b.n	8003630 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	73fb      	strb	r3, [r7, #15]
      break;
 800362c:	e000      	b.n	8003630 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800362e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003640:	7bfb      	ldrb	r3, [r7, #15]
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
	...

0800364c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003656:	2300      	movs	r3, #0
 8003658:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	2b0c      	cmp	r3, #12
 800365e:	d831      	bhi.n	80036c4 <HAL_TIM_ReadCapturedValue+0x78>
 8003660:	a201      	add	r2, pc, #4	@ (adr r2, 8003668 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003666:	bf00      	nop
 8003668:	0800369d 	.word	0x0800369d
 800366c:	080036c5 	.word	0x080036c5
 8003670:	080036c5 	.word	0x080036c5
 8003674:	080036c5 	.word	0x080036c5
 8003678:	080036a7 	.word	0x080036a7
 800367c:	080036c5 	.word	0x080036c5
 8003680:	080036c5 	.word	0x080036c5
 8003684:	080036c5 	.word	0x080036c5
 8003688:	080036b1 	.word	0x080036b1
 800368c:	080036c5 	.word	0x080036c5
 8003690:	080036c5 	.word	0x080036c5
 8003694:	080036c5 	.word	0x080036c5
 8003698:	080036bb 	.word	0x080036bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036a2:	60fb      	str	r3, [r7, #12]

      break;
 80036a4:	e00f      	b.n	80036c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ac:	60fb      	str	r3, [r7, #12]

      break;
 80036ae:	e00a      	b.n	80036c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036b6:	60fb      	str	r3, [r7, #12]

      break;
 80036b8:	e005      	b.n	80036c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c0:	60fb      	str	r3, [r7, #12]

      break;
 80036c2:	e000      	b.n	80036c6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80036c4:	bf00      	nop
  }

  return tmpreg;
 80036c6:	68fb      	ldr	r3, [r7, #12]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	4a3a      	ldr	r2, [pc, #232]	@ (800380c <TIM_Base_SetConfig+0xfc>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d00f      	beq.n	8003748 <TIM_Base_SetConfig+0x38>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800372e:	d00b      	beq.n	8003748 <TIM_Base_SetConfig+0x38>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a37      	ldr	r2, [pc, #220]	@ (8003810 <TIM_Base_SetConfig+0x100>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d007      	beq.n	8003748 <TIM_Base_SetConfig+0x38>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a36      	ldr	r2, [pc, #216]	@ (8003814 <TIM_Base_SetConfig+0x104>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d003      	beq.n	8003748 <TIM_Base_SetConfig+0x38>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a35      	ldr	r2, [pc, #212]	@ (8003818 <TIM_Base_SetConfig+0x108>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d108      	bne.n	800375a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800374e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4313      	orrs	r3, r2
 8003758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a2b      	ldr	r2, [pc, #172]	@ (800380c <TIM_Base_SetConfig+0xfc>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d01b      	beq.n	800379a <TIM_Base_SetConfig+0x8a>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003768:	d017      	beq.n	800379a <TIM_Base_SetConfig+0x8a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a28      	ldr	r2, [pc, #160]	@ (8003810 <TIM_Base_SetConfig+0x100>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d013      	beq.n	800379a <TIM_Base_SetConfig+0x8a>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a27      	ldr	r2, [pc, #156]	@ (8003814 <TIM_Base_SetConfig+0x104>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00f      	beq.n	800379a <TIM_Base_SetConfig+0x8a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a26      	ldr	r2, [pc, #152]	@ (8003818 <TIM_Base_SetConfig+0x108>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d00b      	beq.n	800379a <TIM_Base_SetConfig+0x8a>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a25      	ldr	r2, [pc, #148]	@ (800381c <TIM_Base_SetConfig+0x10c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d007      	beq.n	800379a <TIM_Base_SetConfig+0x8a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a24      	ldr	r2, [pc, #144]	@ (8003820 <TIM_Base_SetConfig+0x110>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d003      	beq.n	800379a <TIM_Base_SetConfig+0x8a>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a23      	ldr	r2, [pc, #140]	@ (8003824 <TIM_Base_SetConfig+0x114>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d108      	bne.n	80037ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a0e      	ldr	r2, [pc, #56]	@ (800380c <TIM_Base_SetConfig+0xfc>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d103      	bne.n	80037e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d105      	bne.n	80037fe <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	f023 0201 	bic.w	r2, r3, #1
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	611a      	str	r2, [r3, #16]
  }
}
 80037fe:	bf00      	nop
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	40010000 	.word	0x40010000
 8003810:	40000400 	.word	0x40000400
 8003814:	40000800 	.word	0x40000800
 8003818:	40000c00 	.word	0x40000c00
 800381c:	40014000 	.word	0x40014000
 8003820:	40014400 	.word	0x40014400
 8003824:	40014800 	.word	0x40014800

08003828 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	f023 0201 	bic.w	r2, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f023 0303 	bic.w	r3, r3, #3
 800385e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f023 0302 	bic.w	r3, r3, #2
 8003870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	4313      	orrs	r3, r2
 800387a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a1c      	ldr	r2, [pc, #112]	@ (80038f0 <TIM_OC1_SetConfig+0xc8>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d10c      	bne.n	800389e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f023 0308 	bic.w	r3, r3, #8
 800388a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	697a      	ldr	r2, [r7, #20]
 8003892:	4313      	orrs	r3, r2
 8003894:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f023 0304 	bic.w	r3, r3, #4
 800389c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a13      	ldr	r2, [pc, #76]	@ (80038f0 <TIM_OC1_SetConfig+0xc8>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d111      	bne.n	80038ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	4313      	orrs	r3, r2
 80038be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	697a      	ldr	r2, [r7, #20]
 80038e2:	621a      	str	r2, [r3, #32]
}
 80038e4:	bf00      	nop
 80038e6:	371c      	adds	r7, #28
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	40010000 	.word	0x40010000

080038f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b087      	sub	sp, #28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	f023 0210 	bic.w	r2, r3, #16
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800392a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	021b      	lsls	r3, r3, #8
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	4313      	orrs	r3, r2
 8003936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	f023 0320 	bic.w	r3, r3, #32
 800393e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	4313      	orrs	r3, r2
 800394a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a1e      	ldr	r2, [pc, #120]	@ (80039c8 <TIM_OC2_SetConfig+0xd4>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d10d      	bne.n	8003970 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800395a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	011b      	lsls	r3, r3, #4
 8003962:	697a      	ldr	r2, [r7, #20]
 8003964:	4313      	orrs	r3, r2
 8003966:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800396e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a15      	ldr	r2, [pc, #84]	@ (80039c8 <TIM_OC2_SetConfig+0xd4>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d113      	bne.n	80039a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800397e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003986:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	4313      	orrs	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	4313      	orrs	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	621a      	str	r2, [r3, #32]
}
 80039ba:	bf00      	nop
 80039bc:	371c      	adds	r7, #28
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40010000 	.word	0x40010000

080039cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f023 0303 	bic.w	r3, r3, #3
 8003a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	021b      	lsls	r3, r3, #8
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a1d      	ldr	r2, [pc, #116]	@ (8003a9c <TIM_OC3_SetConfig+0xd0>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d10d      	bne.n	8003a46 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	021b      	lsls	r3, r3, #8
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a14      	ldr	r2, [pc, #80]	@ (8003a9c <TIM_OC3_SetConfig+0xd0>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d113      	bne.n	8003a76 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	621a      	str	r2, [r3, #32]
}
 8003a90:	bf00      	nop
 8003a92:	371c      	adds	r7, #28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	40010000 	.word	0x40010000

08003aa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	021b      	lsls	r3, r3, #8
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003aea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	031b      	lsls	r3, r3, #12
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a10      	ldr	r2, [pc, #64]	@ (8003b3c <TIM_OC4_SetConfig+0x9c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d109      	bne.n	8003b14 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	019b      	lsls	r3, r3, #6
 8003b0e:	697a      	ldr	r2, [r7, #20]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	621a      	str	r2, [r3, #32]
}
 8003b2e:	bf00      	nop
 8003b30:	371c      	adds	r7, #28
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40010000 	.word	0x40010000

08003b40 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
 8003b4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	f023 0201 	bic.w	r2, r3, #1
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4a24      	ldr	r2, [pc, #144]	@ (8003bfc <TIM_TI1_SetConfig+0xbc>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d013      	beq.n	8003b96 <TIM_TI1_SetConfig+0x56>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b74:	d00f      	beq.n	8003b96 <TIM_TI1_SetConfig+0x56>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	4a21      	ldr	r2, [pc, #132]	@ (8003c00 <TIM_TI1_SetConfig+0xc0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d00b      	beq.n	8003b96 <TIM_TI1_SetConfig+0x56>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4a20      	ldr	r2, [pc, #128]	@ (8003c04 <TIM_TI1_SetConfig+0xc4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d007      	beq.n	8003b96 <TIM_TI1_SetConfig+0x56>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4a1f      	ldr	r2, [pc, #124]	@ (8003c08 <TIM_TI1_SetConfig+0xc8>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d003      	beq.n	8003b96 <TIM_TI1_SetConfig+0x56>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4a1e      	ldr	r2, [pc, #120]	@ (8003c0c <TIM_TI1_SetConfig+0xcc>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d101      	bne.n	8003b9a <TIM_TI1_SetConfig+0x5a>
 8003b96:	2301      	movs	r3, #1
 8003b98:	e000      	b.n	8003b9c <TIM_TI1_SetConfig+0x5c>
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d008      	beq.n	8003bb2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f023 0303 	bic.w	r3, r3, #3
 8003ba6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	e003      	b.n	8003bba <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f043 0301 	orr.w	r3, r3, #1
 8003bb8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f023 030a 	bic.w	r3, r3, #10
 8003bd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	f003 030a 	and.w	r3, r3, #10
 8003bdc:	693a      	ldr	r2, [r7, #16]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	621a      	str	r2, [r3, #32]
}
 8003bee:	bf00      	nop
 8003bf0:	371c      	adds	r7, #28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	40010000 	.word	0x40010000
 8003c00:	40000400 	.word	0x40000400
 8003c04:	40000800 	.word	0x40000800
 8003c08:	40000c00 	.word	0x40000c00
 8003c0c:	40014000 	.word	0x40014000

08003c10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b087      	sub	sp, #28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	f023 0201 	bic.w	r2, r3, #1
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f023 030a 	bic.w	r3, r3, #10
 8003c4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	621a      	str	r2, [r3, #32]
}
 8003c62:	bf00      	nop
 8003c64:	371c      	adds	r7, #28
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c6e:	b480      	push	{r7}
 8003c70:	b087      	sub	sp, #28
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	60f8      	str	r0, [r7, #12]
 8003c76:	60b9      	str	r1, [r7, #8]
 8003c78:	607a      	str	r2, [r7, #4]
 8003c7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	f023 0210 	bic.w	r2, r3, #16
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	699b      	ldr	r3, [r3, #24]
 8003c92:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	021b      	lsls	r3, r3, #8
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003cac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	031b      	lsls	r3, r3, #12
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003cc0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	621a      	str	r2, [r3, #32]
}
 8003cdc:	bf00      	nop
 8003cde:	371c      	adds	r7, #28
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	f023 0210 	bic.w	r2, r3, #16
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	699b      	ldr	r3, [r3, #24]
 8003d0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003d12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	031b      	lsls	r3, r3, #12
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003d24:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	621a      	str	r2, [r3, #32]
}
 8003d3c:	bf00      	nop
 8003d3e:	371c      	adds	r7, #28
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b087      	sub	sp, #28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
 8003d54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f023 0303 	bic.w	r3, r3, #3
 8003d74:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d84:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	011b      	lsls	r3, r3, #4
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003d98:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	021b      	lsls	r3, r3, #8
 8003d9e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	621a      	str	r2, [r3, #32]
}
 8003db4:	bf00      	nop
 8003db6:	371c      	adds	r7, #28
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b087      	sub	sp, #28
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
 8003dcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	021b      	lsls	r3, r3, #8
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003dfe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	031b      	lsls	r3, r3, #12
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003e12:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	031b      	lsls	r3, r3, #12
 8003e18:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	693a      	ldr	r2, [r7, #16]
 8003e26:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	621a      	str	r2, [r3, #32]
}
 8003e2e:	bf00      	nop
 8003e30:	371c      	adds	r7, #28
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b085      	sub	sp, #20
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
 8003e42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f043 0307 	orr.w	r3, r3, #7
 8003e5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	609a      	str	r2, [r3, #8]
}
 8003e64:	bf00      	nop
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
 8003e7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	021a      	lsls	r2, r3, #8
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	431a      	orrs	r2, r3
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	609a      	str	r2, [r3, #8]
}
 8003ea4:	bf00      	nop
 8003ea6:	371c      	adds	r7, #28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	f003 031f 	and.w	r3, r3, #31
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6a1a      	ldr	r2, [r3, #32]
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	43db      	mvns	r3, r3
 8003ed2:	401a      	ands	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6a1a      	ldr	r2, [r3, #32]
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f003 031f 	and.w	r3, r3, #31
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	621a      	str	r2, [r3, #32]
}
 8003eee:	bf00      	nop
 8003ef0:	371c      	adds	r7, #28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
	...

08003efc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e050      	b.n	8003fb6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a1c      	ldr	r2, [pc, #112]	@ (8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d018      	beq.n	8003f8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f60:	d013      	beq.n	8003f8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a18      	ldr	r2, [pc, #96]	@ (8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d00e      	beq.n	8003f8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a16      	ldr	r2, [pc, #88]	@ (8003fcc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d009      	beq.n	8003f8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a15      	ldr	r2, [pc, #84]	@ (8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d004      	beq.n	8003f8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a13      	ldr	r2, [pc, #76]	@ (8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d10c      	bne.n	8003fa4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	40010000 	.word	0x40010000
 8003fc8:	40000400 	.word	0x40000400
 8003fcc:	40000800 	.word	0x40000800
 8003fd0:	40000c00 	.word	0x40000c00
 8003fd4:	40014000 	.word	0x40014000

08003fd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e042      	b.n	8004098 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d106      	bne.n	800402c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7fd f9d0 	bl	80013cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2224      	movs	r2, #36	@ 0x24
 8004030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68da      	ldr	r2, [r3, #12]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004042:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 f973 	bl	8004330 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	691a      	ldr	r2, [r3, #16]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004058:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	695a      	ldr	r2, [r3, #20]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004068:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68da      	ldr	r2, [r3, #12]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004078:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b08a      	sub	sp, #40	@ 0x28
 80040a4:	af02      	add	r7, sp, #8
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	603b      	str	r3, [r7, #0]
 80040ac:	4613      	mov	r3, r2
 80040ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b20      	cmp	r3, #32
 80040be:	d175      	bne.n	80041ac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d002      	beq.n	80040cc <HAL_UART_Transmit+0x2c>
 80040c6:	88fb      	ldrh	r3, [r7, #6]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d101      	bne.n	80040d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e06e      	b.n	80041ae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2221      	movs	r2, #33	@ 0x21
 80040da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040de:	f7fd fb23 	bl	8001728 <HAL_GetTick>
 80040e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	88fa      	ldrh	r2, [r7, #6]
 80040e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	88fa      	ldrh	r2, [r7, #6]
 80040ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040f8:	d108      	bne.n	800410c <HAL_UART_Transmit+0x6c>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d104      	bne.n	800410c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004102:	2300      	movs	r3, #0
 8004104:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	61bb      	str	r3, [r7, #24]
 800410a:	e003      	b.n	8004114 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004110:	2300      	movs	r3, #0
 8004112:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004114:	e02e      	b.n	8004174 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2200      	movs	r2, #0
 800411e:	2180      	movs	r1, #128	@ 0x80
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f000 f848 	bl	80041b6 <UART_WaitOnFlagUntilTimeout>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d005      	beq.n	8004138 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2220      	movs	r2, #32
 8004130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e03a      	b.n	80041ae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10b      	bne.n	8004156 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	881b      	ldrh	r3, [r3, #0]
 8004142:	461a      	mov	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800414c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	3302      	adds	r3, #2
 8004152:	61bb      	str	r3, [r7, #24]
 8004154:	e007      	b.n	8004166 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	781a      	ldrb	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	3301      	adds	r3, #1
 8004164:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800416a:	b29b      	uxth	r3, r3
 800416c:	3b01      	subs	r3, #1
 800416e:	b29a      	uxth	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004178:	b29b      	uxth	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1cb      	bne.n	8004116 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	9300      	str	r3, [sp, #0]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	2200      	movs	r2, #0
 8004186:	2140      	movs	r1, #64	@ 0x40
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 f814 	bl	80041b6 <UART_WaitOnFlagUntilTimeout>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d005      	beq.n	80041a0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2220      	movs	r2, #32
 8004198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e006      	b.n	80041ae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80041a8:	2300      	movs	r3, #0
 80041aa:	e000      	b.n	80041ae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80041ac:	2302      	movs	r3, #2
  }
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3720      	adds	r7, #32
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b086      	sub	sp, #24
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	603b      	str	r3, [r7, #0]
 80041c2:	4613      	mov	r3, r2
 80041c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041c6:	e03b      	b.n	8004240 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ce:	d037      	beq.n	8004240 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041d0:	f7fd faaa 	bl	8001728 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	6a3a      	ldr	r2, [r7, #32]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d302      	bcc.n	80041e6 <UART_WaitOnFlagUntilTimeout+0x30>
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e03a      	b.n	8004260 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d023      	beq.n	8004240 <UART_WaitOnFlagUntilTimeout+0x8a>
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2b80      	cmp	r3, #128	@ 0x80
 80041fc:	d020      	beq.n	8004240 <UART_WaitOnFlagUntilTimeout+0x8a>
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	2b40      	cmp	r3, #64	@ 0x40
 8004202:	d01d      	beq.n	8004240 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b08      	cmp	r3, #8
 8004210:	d116      	bne.n	8004240 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004212:	2300      	movs	r3, #0
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	617b      	str	r3, [r7, #20]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	617b      	str	r3, [r7, #20]
 8004226:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 f81d 	bl	8004268 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2208      	movs	r2, #8
 8004232:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e00f      	b.n	8004260 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	4013      	ands	r3, r2
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	429a      	cmp	r2, r3
 800424e:	bf0c      	ite	eq
 8004250:	2301      	moveq	r3, #1
 8004252:	2300      	movne	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	461a      	mov	r2, r3
 8004258:	79fb      	ldrb	r3, [r7, #7]
 800425a:	429a      	cmp	r2, r3
 800425c:	d0b4      	beq.n	80041c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	3718      	adds	r7, #24
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004268:	b480      	push	{r7}
 800426a:	b095      	sub	sp, #84	@ 0x54
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	330c      	adds	r3, #12
 8004276:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800427a:	e853 3f00 	ldrex	r3, [r3]
 800427e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004282:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004286:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	330c      	adds	r3, #12
 800428e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004290:	643a      	str	r2, [r7, #64]	@ 0x40
 8004292:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004294:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004296:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004298:	e841 2300 	strex	r3, r2, [r1]
 800429c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800429e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1e5      	bne.n	8004270 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3314      	adds	r3, #20
 80042aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	e853 3f00 	ldrex	r3, [r3]
 80042b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	f023 0301 	bic.w	r3, r3, #1
 80042ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3314      	adds	r3, #20
 80042c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042cc:	e841 2300 	strex	r3, r2, [r1]
 80042d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1e5      	bne.n	80042a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d119      	bne.n	8004314 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	330c      	adds	r3, #12
 80042e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	e853 3f00 	ldrex	r3, [r3]
 80042ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f023 0310 	bic.w	r3, r3, #16
 80042f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	330c      	adds	r3, #12
 80042fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004300:	61ba      	str	r2, [r7, #24]
 8004302:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	6979      	ldr	r1, [r7, #20]
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	e841 2300 	strex	r3, r2, [r1]
 800430c:	613b      	str	r3, [r7, #16]
   return(result);
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1e5      	bne.n	80042e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004322:	bf00      	nop
 8004324:	3754      	adds	r7, #84	@ 0x54
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
	...

08004330 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004334:	b0c0      	sub	sp, #256	@ 0x100
 8004336:	af00      	add	r7, sp, #0
 8004338:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800433c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800434c:	68d9      	ldr	r1, [r3, #12]
 800434e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	ea40 0301 	orr.w	r3, r0, r1
 8004358:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800435a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	431a      	orrs	r2, r3
 8004368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	431a      	orrs	r2, r3
 8004370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800437c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004388:	f021 010c 	bic.w	r1, r1, #12
 800438c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004396:	430b      	orrs	r3, r1
 8004398:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800439a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80043a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043aa:	6999      	ldr	r1, [r3, #24]
 80043ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	ea40 0301 	orr.w	r3, r0, r1
 80043b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	4b8f      	ldr	r3, [pc, #572]	@ (80045fc <UART_SetConfig+0x2cc>)
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d005      	beq.n	80043d0 <UART_SetConfig+0xa0>
 80043c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	4b8d      	ldr	r3, [pc, #564]	@ (8004600 <UART_SetConfig+0x2d0>)
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d104      	bne.n	80043da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043d0:	f7fe f900 	bl	80025d4 <HAL_RCC_GetPCLK2Freq>
 80043d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80043d8:	e003      	b.n	80043e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043da:	f7fe f8e7 	bl	80025ac <HAL_RCC_GetPCLK1Freq>
 80043de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043ec:	f040 810c 	bne.w	8004608 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043f4:	2200      	movs	r2, #0
 80043f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80043fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80043fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004402:	4622      	mov	r2, r4
 8004404:	462b      	mov	r3, r5
 8004406:	1891      	adds	r1, r2, r2
 8004408:	65b9      	str	r1, [r7, #88]	@ 0x58
 800440a:	415b      	adcs	r3, r3
 800440c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800440e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004412:	4621      	mov	r1, r4
 8004414:	eb12 0801 	adds.w	r8, r2, r1
 8004418:	4629      	mov	r1, r5
 800441a:	eb43 0901 	adc.w	r9, r3, r1
 800441e:	f04f 0200 	mov.w	r2, #0
 8004422:	f04f 0300 	mov.w	r3, #0
 8004426:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800442a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800442e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004432:	4690      	mov	r8, r2
 8004434:	4699      	mov	r9, r3
 8004436:	4623      	mov	r3, r4
 8004438:	eb18 0303 	adds.w	r3, r8, r3
 800443c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004440:	462b      	mov	r3, r5
 8004442:	eb49 0303 	adc.w	r3, r9, r3
 8004446:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800444a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004456:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800445a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800445e:	460b      	mov	r3, r1
 8004460:	18db      	adds	r3, r3, r3
 8004462:	653b      	str	r3, [r7, #80]	@ 0x50
 8004464:	4613      	mov	r3, r2
 8004466:	eb42 0303 	adc.w	r3, r2, r3
 800446a:	657b      	str	r3, [r7, #84]	@ 0x54
 800446c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004470:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004474:	f7fb ff04 	bl	8000280 <__aeabi_uldivmod>
 8004478:	4602      	mov	r2, r0
 800447a:	460b      	mov	r3, r1
 800447c:	4b61      	ldr	r3, [pc, #388]	@ (8004604 <UART_SetConfig+0x2d4>)
 800447e:	fba3 2302 	umull	r2, r3, r3, r2
 8004482:	095b      	lsrs	r3, r3, #5
 8004484:	011c      	lsls	r4, r3, #4
 8004486:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800448a:	2200      	movs	r2, #0
 800448c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004490:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004494:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004498:	4642      	mov	r2, r8
 800449a:	464b      	mov	r3, r9
 800449c:	1891      	adds	r1, r2, r2
 800449e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80044a0:	415b      	adcs	r3, r3
 80044a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80044a8:	4641      	mov	r1, r8
 80044aa:	eb12 0a01 	adds.w	sl, r2, r1
 80044ae:	4649      	mov	r1, r9
 80044b0:	eb43 0b01 	adc.w	fp, r3, r1
 80044b4:	f04f 0200 	mov.w	r2, #0
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044c8:	4692      	mov	sl, r2
 80044ca:	469b      	mov	fp, r3
 80044cc:	4643      	mov	r3, r8
 80044ce:	eb1a 0303 	adds.w	r3, sl, r3
 80044d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044d6:	464b      	mov	r3, r9
 80044d8:	eb4b 0303 	adc.w	r3, fp, r3
 80044dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80044e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80044f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80044f4:	460b      	mov	r3, r1
 80044f6:	18db      	adds	r3, r3, r3
 80044f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80044fa:	4613      	mov	r3, r2
 80044fc:	eb42 0303 	adc.w	r3, r2, r3
 8004500:	647b      	str	r3, [r7, #68]	@ 0x44
 8004502:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004506:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800450a:	f7fb feb9 	bl	8000280 <__aeabi_uldivmod>
 800450e:	4602      	mov	r2, r0
 8004510:	460b      	mov	r3, r1
 8004512:	4611      	mov	r1, r2
 8004514:	4b3b      	ldr	r3, [pc, #236]	@ (8004604 <UART_SetConfig+0x2d4>)
 8004516:	fba3 2301 	umull	r2, r3, r3, r1
 800451a:	095b      	lsrs	r3, r3, #5
 800451c:	2264      	movs	r2, #100	@ 0x64
 800451e:	fb02 f303 	mul.w	r3, r2, r3
 8004522:	1acb      	subs	r3, r1, r3
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800452a:	4b36      	ldr	r3, [pc, #216]	@ (8004604 <UART_SetConfig+0x2d4>)
 800452c:	fba3 2302 	umull	r2, r3, r3, r2
 8004530:	095b      	lsrs	r3, r3, #5
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004538:	441c      	add	r4, r3
 800453a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800453e:	2200      	movs	r2, #0
 8004540:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004544:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004548:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800454c:	4642      	mov	r2, r8
 800454e:	464b      	mov	r3, r9
 8004550:	1891      	adds	r1, r2, r2
 8004552:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004554:	415b      	adcs	r3, r3
 8004556:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004558:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800455c:	4641      	mov	r1, r8
 800455e:	1851      	adds	r1, r2, r1
 8004560:	6339      	str	r1, [r7, #48]	@ 0x30
 8004562:	4649      	mov	r1, r9
 8004564:	414b      	adcs	r3, r1
 8004566:	637b      	str	r3, [r7, #52]	@ 0x34
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004574:	4659      	mov	r1, fp
 8004576:	00cb      	lsls	r3, r1, #3
 8004578:	4651      	mov	r1, sl
 800457a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800457e:	4651      	mov	r1, sl
 8004580:	00ca      	lsls	r2, r1, #3
 8004582:	4610      	mov	r0, r2
 8004584:	4619      	mov	r1, r3
 8004586:	4603      	mov	r3, r0
 8004588:	4642      	mov	r2, r8
 800458a:	189b      	adds	r3, r3, r2
 800458c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004590:	464b      	mov	r3, r9
 8004592:	460a      	mov	r2, r1
 8004594:	eb42 0303 	adc.w	r3, r2, r3
 8004598:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800459c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80045a8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80045ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80045b0:	460b      	mov	r3, r1
 80045b2:	18db      	adds	r3, r3, r3
 80045b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045b6:	4613      	mov	r3, r2
 80045b8:	eb42 0303 	adc.w	r3, r2, r3
 80045bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80045c6:	f7fb fe5b 	bl	8000280 <__aeabi_uldivmod>
 80045ca:	4602      	mov	r2, r0
 80045cc:	460b      	mov	r3, r1
 80045ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004604 <UART_SetConfig+0x2d4>)
 80045d0:	fba3 1302 	umull	r1, r3, r3, r2
 80045d4:	095b      	lsrs	r3, r3, #5
 80045d6:	2164      	movs	r1, #100	@ 0x64
 80045d8:	fb01 f303 	mul.w	r3, r1, r3
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	3332      	adds	r3, #50	@ 0x32
 80045e2:	4a08      	ldr	r2, [pc, #32]	@ (8004604 <UART_SetConfig+0x2d4>)
 80045e4:	fba2 2303 	umull	r2, r3, r2, r3
 80045e8:	095b      	lsrs	r3, r3, #5
 80045ea:	f003 0207 	and.w	r2, r3, #7
 80045ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4422      	add	r2, r4
 80045f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045f8:	e106      	b.n	8004808 <UART_SetConfig+0x4d8>
 80045fa:	bf00      	nop
 80045fc:	40011000 	.word	0x40011000
 8004600:	40011400 	.word	0x40011400
 8004604:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004608:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800460c:	2200      	movs	r2, #0
 800460e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004612:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004616:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800461a:	4642      	mov	r2, r8
 800461c:	464b      	mov	r3, r9
 800461e:	1891      	adds	r1, r2, r2
 8004620:	6239      	str	r1, [r7, #32]
 8004622:	415b      	adcs	r3, r3
 8004624:	627b      	str	r3, [r7, #36]	@ 0x24
 8004626:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800462a:	4641      	mov	r1, r8
 800462c:	1854      	adds	r4, r2, r1
 800462e:	4649      	mov	r1, r9
 8004630:	eb43 0501 	adc.w	r5, r3, r1
 8004634:	f04f 0200 	mov.w	r2, #0
 8004638:	f04f 0300 	mov.w	r3, #0
 800463c:	00eb      	lsls	r3, r5, #3
 800463e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004642:	00e2      	lsls	r2, r4, #3
 8004644:	4614      	mov	r4, r2
 8004646:	461d      	mov	r5, r3
 8004648:	4643      	mov	r3, r8
 800464a:	18e3      	adds	r3, r4, r3
 800464c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004650:	464b      	mov	r3, r9
 8004652:	eb45 0303 	adc.w	r3, r5, r3
 8004656:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800465a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004666:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800466a:	f04f 0200 	mov.w	r2, #0
 800466e:	f04f 0300 	mov.w	r3, #0
 8004672:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004676:	4629      	mov	r1, r5
 8004678:	008b      	lsls	r3, r1, #2
 800467a:	4621      	mov	r1, r4
 800467c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004680:	4621      	mov	r1, r4
 8004682:	008a      	lsls	r2, r1, #2
 8004684:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004688:	f7fb fdfa 	bl	8000280 <__aeabi_uldivmod>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	4b60      	ldr	r3, [pc, #384]	@ (8004814 <UART_SetConfig+0x4e4>)
 8004692:	fba3 2302 	umull	r2, r3, r3, r2
 8004696:	095b      	lsrs	r3, r3, #5
 8004698:	011c      	lsls	r4, r3, #4
 800469a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800469e:	2200      	movs	r2, #0
 80046a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80046a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80046a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80046ac:	4642      	mov	r2, r8
 80046ae:	464b      	mov	r3, r9
 80046b0:	1891      	adds	r1, r2, r2
 80046b2:	61b9      	str	r1, [r7, #24]
 80046b4:	415b      	adcs	r3, r3
 80046b6:	61fb      	str	r3, [r7, #28]
 80046b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046bc:	4641      	mov	r1, r8
 80046be:	1851      	adds	r1, r2, r1
 80046c0:	6139      	str	r1, [r7, #16]
 80046c2:	4649      	mov	r1, r9
 80046c4:	414b      	adcs	r3, r1
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	f04f 0300 	mov.w	r3, #0
 80046d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046d4:	4659      	mov	r1, fp
 80046d6:	00cb      	lsls	r3, r1, #3
 80046d8:	4651      	mov	r1, sl
 80046da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046de:	4651      	mov	r1, sl
 80046e0:	00ca      	lsls	r2, r1, #3
 80046e2:	4610      	mov	r0, r2
 80046e4:	4619      	mov	r1, r3
 80046e6:	4603      	mov	r3, r0
 80046e8:	4642      	mov	r2, r8
 80046ea:	189b      	adds	r3, r3, r2
 80046ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046f0:	464b      	mov	r3, r9
 80046f2:	460a      	mov	r2, r1
 80046f4:	eb42 0303 	adc.w	r3, r2, r3
 80046f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80046fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004706:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004708:	f04f 0200 	mov.w	r2, #0
 800470c:	f04f 0300 	mov.w	r3, #0
 8004710:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004714:	4649      	mov	r1, r9
 8004716:	008b      	lsls	r3, r1, #2
 8004718:	4641      	mov	r1, r8
 800471a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800471e:	4641      	mov	r1, r8
 8004720:	008a      	lsls	r2, r1, #2
 8004722:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004726:	f7fb fdab 	bl	8000280 <__aeabi_uldivmod>
 800472a:	4602      	mov	r2, r0
 800472c:	460b      	mov	r3, r1
 800472e:	4611      	mov	r1, r2
 8004730:	4b38      	ldr	r3, [pc, #224]	@ (8004814 <UART_SetConfig+0x4e4>)
 8004732:	fba3 2301 	umull	r2, r3, r3, r1
 8004736:	095b      	lsrs	r3, r3, #5
 8004738:	2264      	movs	r2, #100	@ 0x64
 800473a:	fb02 f303 	mul.w	r3, r2, r3
 800473e:	1acb      	subs	r3, r1, r3
 8004740:	011b      	lsls	r3, r3, #4
 8004742:	3332      	adds	r3, #50	@ 0x32
 8004744:	4a33      	ldr	r2, [pc, #204]	@ (8004814 <UART_SetConfig+0x4e4>)
 8004746:	fba2 2303 	umull	r2, r3, r2, r3
 800474a:	095b      	lsrs	r3, r3, #5
 800474c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004750:	441c      	add	r4, r3
 8004752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004756:	2200      	movs	r2, #0
 8004758:	673b      	str	r3, [r7, #112]	@ 0x70
 800475a:	677a      	str	r2, [r7, #116]	@ 0x74
 800475c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004760:	4642      	mov	r2, r8
 8004762:	464b      	mov	r3, r9
 8004764:	1891      	adds	r1, r2, r2
 8004766:	60b9      	str	r1, [r7, #8]
 8004768:	415b      	adcs	r3, r3
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004770:	4641      	mov	r1, r8
 8004772:	1851      	adds	r1, r2, r1
 8004774:	6039      	str	r1, [r7, #0]
 8004776:	4649      	mov	r1, r9
 8004778:	414b      	adcs	r3, r1
 800477a:	607b      	str	r3, [r7, #4]
 800477c:	f04f 0200 	mov.w	r2, #0
 8004780:	f04f 0300 	mov.w	r3, #0
 8004784:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004788:	4659      	mov	r1, fp
 800478a:	00cb      	lsls	r3, r1, #3
 800478c:	4651      	mov	r1, sl
 800478e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004792:	4651      	mov	r1, sl
 8004794:	00ca      	lsls	r2, r1, #3
 8004796:	4610      	mov	r0, r2
 8004798:	4619      	mov	r1, r3
 800479a:	4603      	mov	r3, r0
 800479c:	4642      	mov	r2, r8
 800479e:	189b      	adds	r3, r3, r2
 80047a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047a2:	464b      	mov	r3, r9
 80047a4:	460a      	mov	r2, r1
 80047a6:	eb42 0303 	adc.w	r3, r2, r3
 80047aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80047ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80047b6:	667a      	str	r2, [r7, #100]	@ 0x64
 80047b8:	f04f 0200 	mov.w	r2, #0
 80047bc:	f04f 0300 	mov.w	r3, #0
 80047c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80047c4:	4649      	mov	r1, r9
 80047c6:	008b      	lsls	r3, r1, #2
 80047c8:	4641      	mov	r1, r8
 80047ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047ce:	4641      	mov	r1, r8
 80047d0:	008a      	lsls	r2, r1, #2
 80047d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80047d6:	f7fb fd53 	bl	8000280 <__aeabi_uldivmod>
 80047da:	4602      	mov	r2, r0
 80047dc:	460b      	mov	r3, r1
 80047de:	4b0d      	ldr	r3, [pc, #52]	@ (8004814 <UART_SetConfig+0x4e4>)
 80047e0:	fba3 1302 	umull	r1, r3, r3, r2
 80047e4:	095b      	lsrs	r3, r3, #5
 80047e6:	2164      	movs	r1, #100	@ 0x64
 80047e8:	fb01 f303 	mul.w	r3, r1, r3
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	011b      	lsls	r3, r3, #4
 80047f0:	3332      	adds	r3, #50	@ 0x32
 80047f2:	4a08      	ldr	r2, [pc, #32]	@ (8004814 <UART_SetConfig+0x4e4>)
 80047f4:	fba2 2303 	umull	r2, r3, r2, r3
 80047f8:	095b      	lsrs	r3, r3, #5
 80047fa:	f003 020f 	and.w	r2, r3, #15
 80047fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4422      	add	r2, r4
 8004806:	609a      	str	r2, [r3, #8]
}
 8004808:	bf00      	nop
 800480a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800480e:	46bd      	mov	sp, r7
 8004810:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004814:	51eb851f 	.word	0x51eb851f

08004818 <_ZdlPvj>:
 8004818:	f000 b811 	b.w	800483e <_ZdlPv>

0800481c <_Znwj>:
 800481c:	2801      	cmp	r0, #1
 800481e:	bf38      	it	cc
 8004820:	2001      	movcc	r0, #1
 8004822:	b510      	push	{r4, lr}
 8004824:	4604      	mov	r4, r0
 8004826:	4620      	mov	r0, r4
 8004828:	f000 f81c 	bl	8004864 <malloc>
 800482c:	b100      	cbz	r0, 8004830 <_Znwj+0x14>
 800482e:	bd10      	pop	{r4, pc}
 8004830:	f000 f808 	bl	8004844 <_ZSt15get_new_handlerv>
 8004834:	b908      	cbnz	r0, 800483a <_Znwj+0x1e>
 8004836:	f000 f80d 	bl	8004854 <abort>
 800483a:	4780      	blx	r0
 800483c:	e7f3      	b.n	8004826 <_Znwj+0xa>

0800483e <_ZdlPv>:
 800483e:	f000 b819 	b.w	8004874 <free>
	...

08004844 <_ZSt15get_new_handlerv>:
 8004844:	4b02      	ldr	r3, [pc, #8]	@ (8004850 <_ZSt15get_new_handlerv+0xc>)
 8004846:	6818      	ldr	r0, [r3, #0]
 8004848:	f3bf 8f5b 	dmb	ish
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	20000220 	.word	0x20000220

08004854 <abort>:
 8004854:	b508      	push	{r3, lr}
 8004856:	2006      	movs	r0, #6
 8004858:	f000 f946 	bl	8004ae8 <raise>
 800485c:	2001      	movs	r0, #1
 800485e:	f7fc fe7f 	bl	8001560 <_exit>
	...

08004864 <malloc>:
 8004864:	4b02      	ldr	r3, [pc, #8]	@ (8004870 <malloc+0xc>)
 8004866:	4601      	mov	r1, r0
 8004868:	6818      	ldr	r0, [r3, #0]
 800486a:	f000 b82d 	b.w	80048c8 <_malloc_r>
 800486e:	bf00      	nop
 8004870:	2000000c 	.word	0x2000000c

08004874 <free>:
 8004874:	4b02      	ldr	r3, [pc, #8]	@ (8004880 <free+0xc>)
 8004876:	4601      	mov	r1, r0
 8004878:	6818      	ldr	r0, [r3, #0]
 800487a:	f000 b98d 	b.w	8004b98 <_free_r>
 800487e:	bf00      	nop
 8004880:	2000000c 	.word	0x2000000c

08004884 <sbrk_aligned>:
 8004884:	b570      	push	{r4, r5, r6, lr}
 8004886:	4e0f      	ldr	r6, [pc, #60]	@ (80048c4 <sbrk_aligned+0x40>)
 8004888:	460c      	mov	r4, r1
 800488a:	6831      	ldr	r1, [r6, #0]
 800488c:	4605      	mov	r5, r0
 800488e:	b911      	cbnz	r1, 8004896 <sbrk_aligned+0x12>
 8004890:	f000 f946 	bl	8004b20 <_sbrk_r>
 8004894:	6030      	str	r0, [r6, #0]
 8004896:	4621      	mov	r1, r4
 8004898:	4628      	mov	r0, r5
 800489a:	f000 f941 	bl	8004b20 <_sbrk_r>
 800489e:	1c43      	adds	r3, r0, #1
 80048a0:	d103      	bne.n	80048aa <sbrk_aligned+0x26>
 80048a2:	f04f 34ff 	mov.w	r4, #4294967295
 80048a6:	4620      	mov	r0, r4
 80048a8:	bd70      	pop	{r4, r5, r6, pc}
 80048aa:	1cc4      	adds	r4, r0, #3
 80048ac:	f024 0403 	bic.w	r4, r4, #3
 80048b0:	42a0      	cmp	r0, r4
 80048b2:	d0f8      	beq.n	80048a6 <sbrk_aligned+0x22>
 80048b4:	1a21      	subs	r1, r4, r0
 80048b6:	4628      	mov	r0, r5
 80048b8:	f000 f932 	bl	8004b20 <_sbrk_r>
 80048bc:	3001      	adds	r0, #1
 80048be:	d1f2      	bne.n	80048a6 <sbrk_aligned+0x22>
 80048c0:	e7ef      	b.n	80048a2 <sbrk_aligned+0x1e>
 80048c2:	bf00      	nop
 80048c4:	20000224 	.word	0x20000224

080048c8 <_malloc_r>:
 80048c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048cc:	1ccd      	adds	r5, r1, #3
 80048ce:	f025 0503 	bic.w	r5, r5, #3
 80048d2:	3508      	adds	r5, #8
 80048d4:	2d0c      	cmp	r5, #12
 80048d6:	bf38      	it	cc
 80048d8:	250c      	movcc	r5, #12
 80048da:	2d00      	cmp	r5, #0
 80048dc:	4606      	mov	r6, r0
 80048de:	db01      	blt.n	80048e4 <_malloc_r+0x1c>
 80048e0:	42a9      	cmp	r1, r5
 80048e2:	d904      	bls.n	80048ee <_malloc_r+0x26>
 80048e4:	230c      	movs	r3, #12
 80048e6:	6033      	str	r3, [r6, #0]
 80048e8:	2000      	movs	r0, #0
 80048ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80049c4 <_malloc_r+0xfc>
 80048f2:	f000 f869 	bl	80049c8 <__malloc_lock>
 80048f6:	f8d8 3000 	ldr.w	r3, [r8]
 80048fa:	461c      	mov	r4, r3
 80048fc:	bb44      	cbnz	r4, 8004950 <_malloc_r+0x88>
 80048fe:	4629      	mov	r1, r5
 8004900:	4630      	mov	r0, r6
 8004902:	f7ff ffbf 	bl	8004884 <sbrk_aligned>
 8004906:	1c43      	adds	r3, r0, #1
 8004908:	4604      	mov	r4, r0
 800490a:	d158      	bne.n	80049be <_malloc_r+0xf6>
 800490c:	f8d8 4000 	ldr.w	r4, [r8]
 8004910:	4627      	mov	r7, r4
 8004912:	2f00      	cmp	r7, #0
 8004914:	d143      	bne.n	800499e <_malloc_r+0xd6>
 8004916:	2c00      	cmp	r4, #0
 8004918:	d04b      	beq.n	80049b2 <_malloc_r+0xea>
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	4639      	mov	r1, r7
 800491e:	4630      	mov	r0, r6
 8004920:	eb04 0903 	add.w	r9, r4, r3
 8004924:	f000 f8fc 	bl	8004b20 <_sbrk_r>
 8004928:	4581      	cmp	r9, r0
 800492a:	d142      	bne.n	80049b2 <_malloc_r+0xea>
 800492c:	6821      	ldr	r1, [r4, #0]
 800492e:	1a6d      	subs	r5, r5, r1
 8004930:	4629      	mov	r1, r5
 8004932:	4630      	mov	r0, r6
 8004934:	f7ff ffa6 	bl	8004884 <sbrk_aligned>
 8004938:	3001      	adds	r0, #1
 800493a:	d03a      	beq.n	80049b2 <_malloc_r+0xea>
 800493c:	6823      	ldr	r3, [r4, #0]
 800493e:	442b      	add	r3, r5
 8004940:	6023      	str	r3, [r4, #0]
 8004942:	f8d8 3000 	ldr.w	r3, [r8]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	bb62      	cbnz	r2, 80049a4 <_malloc_r+0xdc>
 800494a:	f8c8 7000 	str.w	r7, [r8]
 800494e:	e00f      	b.n	8004970 <_malloc_r+0xa8>
 8004950:	6822      	ldr	r2, [r4, #0]
 8004952:	1b52      	subs	r2, r2, r5
 8004954:	d420      	bmi.n	8004998 <_malloc_r+0xd0>
 8004956:	2a0b      	cmp	r2, #11
 8004958:	d917      	bls.n	800498a <_malloc_r+0xc2>
 800495a:	1961      	adds	r1, r4, r5
 800495c:	42a3      	cmp	r3, r4
 800495e:	6025      	str	r5, [r4, #0]
 8004960:	bf18      	it	ne
 8004962:	6059      	strne	r1, [r3, #4]
 8004964:	6863      	ldr	r3, [r4, #4]
 8004966:	bf08      	it	eq
 8004968:	f8c8 1000 	streq.w	r1, [r8]
 800496c:	5162      	str	r2, [r4, r5]
 800496e:	604b      	str	r3, [r1, #4]
 8004970:	4630      	mov	r0, r6
 8004972:	f000 f82f 	bl	80049d4 <__malloc_unlock>
 8004976:	f104 000b 	add.w	r0, r4, #11
 800497a:	1d23      	adds	r3, r4, #4
 800497c:	f020 0007 	bic.w	r0, r0, #7
 8004980:	1ac2      	subs	r2, r0, r3
 8004982:	bf1c      	itt	ne
 8004984:	1a1b      	subne	r3, r3, r0
 8004986:	50a3      	strne	r3, [r4, r2]
 8004988:	e7af      	b.n	80048ea <_malloc_r+0x22>
 800498a:	6862      	ldr	r2, [r4, #4]
 800498c:	42a3      	cmp	r3, r4
 800498e:	bf0c      	ite	eq
 8004990:	f8c8 2000 	streq.w	r2, [r8]
 8004994:	605a      	strne	r2, [r3, #4]
 8004996:	e7eb      	b.n	8004970 <_malloc_r+0xa8>
 8004998:	4623      	mov	r3, r4
 800499a:	6864      	ldr	r4, [r4, #4]
 800499c:	e7ae      	b.n	80048fc <_malloc_r+0x34>
 800499e:	463c      	mov	r4, r7
 80049a0:	687f      	ldr	r7, [r7, #4]
 80049a2:	e7b6      	b.n	8004912 <_malloc_r+0x4a>
 80049a4:	461a      	mov	r2, r3
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	42a3      	cmp	r3, r4
 80049aa:	d1fb      	bne.n	80049a4 <_malloc_r+0xdc>
 80049ac:	2300      	movs	r3, #0
 80049ae:	6053      	str	r3, [r2, #4]
 80049b0:	e7de      	b.n	8004970 <_malloc_r+0xa8>
 80049b2:	230c      	movs	r3, #12
 80049b4:	6033      	str	r3, [r6, #0]
 80049b6:	4630      	mov	r0, r6
 80049b8:	f000 f80c 	bl	80049d4 <__malloc_unlock>
 80049bc:	e794      	b.n	80048e8 <_malloc_r+0x20>
 80049be:	6005      	str	r5, [r0, #0]
 80049c0:	e7d6      	b.n	8004970 <_malloc_r+0xa8>
 80049c2:	bf00      	nop
 80049c4:	20000228 	.word	0x20000228

080049c8 <__malloc_lock>:
 80049c8:	4801      	ldr	r0, [pc, #4]	@ (80049d0 <__malloc_lock+0x8>)
 80049ca:	f000 b8e3 	b.w	8004b94 <__retarget_lock_acquire_recursive>
 80049ce:	bf00      	nop
 80049d0:	20000368 	.word	0x20000368

080049d4 <__malloc_unlock>:
 80049d4:	4801      	ldr	r0, [pc, #4]	@ (80049dc <__malloc_unlock+0x8>)
 80049d6:	f000 b8de 	b.w	8004b96 <__retarget_lock_release_recursive>
 80049da:	bf00      	nop
 80049dc:	20000368 	.word	0x20000368

080049e0 <sniprintf>:
 80049e0:	b40c      	push	{r2, r3}
 80049e2:	b530      	push	{r4, r5, lr}
 80049e4:	4b17      	ldr	r3, [pc, #92]	@ (8004a44 <sniprintf+0x64>)
 80049e6:	1e0c      	subs	r4, r1, #0
 80049e8:	681d      	ldr	r5, [r3, #0]
 80049ea:	b09d      	sub	sp, #116	@ 0x74
 80049ec:	da08      	bge.n	8004a00 <sniprintf+0x20>
 80049ee:	238b      	movs	r3, #139	@ 0x8b
 80049f0:	602b      	str	r3, [r5, #0]
 80049f2:	f04f 30ff 	mov.w	r0, #4294967295
 80049f6:	b01d      	add	sp, #116	@ 0x74
 80049f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049fc:	b002      	add	sp, #8
 80049fe:	4770      	bx	lr
 8004a00:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004a04:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004a08:	bf14      	ite	ne
 8004a0a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004a0e:	4623      	moveq	r3, r4
 8004a10:	9304      	str	r3, [sp, #16]
 8004a12:	9307      	str	r3, [sp, #28]
 8004a14:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004a18:	9002      	str	r0, [sp, #8]
 8004a1a:	9006      	str	r0, [sp, #24]
 8004a1c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004a20:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004a22:	ab21      	add	r3, sp, #132	@ 0x84
 8004a24:	a902      	add	r1, sp, #8
 8004a26:	4628      	mov	r0, r5
 8004a28:	9301      	str	r3, [sp, #4]
 8004a2a:	f000 f95b 	bl	8004ce4 <_svfiprintf_r>
 8004a2e:	1c43      	adds	r3, r0, #1
 8004a30:	bfbc      	itt	lt
 8004a32:	238b      	movlt	r3, #139	@ 0x8b
 8004a34:	602b      	strlt	r3, [r5, #0]
 8004a36:	2c00      	cmp	r4, #0
 8004a38:	d0dd      	beq.n	80049f6 <sniprintf+0x16>
 8004a3a:	9b02      	ldr	r3, [sp, #8]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	701a      	strb	r2, [r3, #0]
 8004a40:	e7d9      	b.n	80049f6 <sniprintf+0x16>
 8004a42:	bf00      	nop
 8004a44:	2000000c 	.word	0x2000000c

08004a48 <siprintf>:
 8004a48:	b40e      	push	{r1, r2, r3}
 8004a4a:	b500      	push	{lr}
 8004a4c:	b09c      	sub	sp, #112	@ 0x70
 8004a4e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004a50:	9002      	str	r0, [sp, #8]
 8004a52:	9006      	str	r0, [sp, #24]
 8004a54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004a58:	4809      	ldr	r0, [pc, #36]	@ (8004a80 <siprintf+0x38>)
 8004a5a:	9107      	str	r1, [sp, #28]
 8004a5c:	9104      	str	r1, [sp, #16]
 8004a5e:	4909      	ldr	r1, [pc, #36]	@ (8004a84 <siprintf+0x3c>)
 8004a60:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a64:	9105      	str	r1, [sp, #20]
 8004a66:	6800      	ldr	r0, [r0, #0]
 8004a68:	9301      	str	r3, [sp, #4]
 8004a6a:	a902      	add	r1, sp, #8
 8004a6c:	f000 f93a 	bl	8004ce4 <_svfiprintf_r>
 8004a70:	9b02      	ldr	r3, [sp, #8]
 8004a72:	2200      	movs	r2, #0
 8004a74:	701a      	strb	r2, [r3, #0]
 8004a76:	b01c      	add	sp, #112	@ 0x70
 8004a78:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a7c:	b003      	add	sp, #12
 8004a7e:	4770      	bx	lr
 8004a80:	2000000c 	.word	0x2000000c
 8004a84:	ffff0208 	.word	0xffff0208

08004a88 <memset>:
 8004a88:	4402      	add	r2, r0
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d100      	bne.n	8004a92 <memset+0xa>
 8004a90:	4770      	bx	lr
 8004a92:	f803 1b01 	strb.w	r1, [r3], #1
 8004a96:	e7f9      	b.n	8004a8c <memset+0x4>

08004a98 <_raise_r>:
 8004a98:	291f      	cmp	r1, #31
 8004a9a:	b538      	push	{r3, r4, r5, lr}
 8004a9c:	4605      	mov	r5, r0
 8004a9e:	460c      	mov	r4, r1
 8004aa0:	d904      	bls.n	8004aac <_raise_r+0x14>
 8004aa2:	2316      	movs	r3, #22
 8004aa4:	6003      	str	r3, [r0, #0]
 8004aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8004aaa:	bd38      	pop	{r3, r4, r5, pc}
 8004aac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004aae:	b112      	cbz	r2, 8004ab6 <_raise_r+0x1e>
 8004ab0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004ab4:	b94b      	cbnz	r3, 8004aca <_raise_r+0x32>
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	f000 f830 	bl	8004b1c <_getpid_r>
 8004abc:	4622      	mov	r2, r4
 8004abe:	4601      	mov	r1, r0
 8004ac0:	4628      	mov	r0, r5
 8004ac2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ac6:	f000 b817 	b.w	8004af8 <_kill_r>
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d00a      	beq.n	8004ae4 <_raise_r+0x4c>
 8004ace:	1c59      	adds	r1, r3, #1
 8004ad0:	d103      	bne.n	8004ada <_raise_r+0x42>
 8004ad2:	2316      	movs	r3, #22
 8004ad4:	6003      	str	r3, [r0, #0]
 8004ad6:	2001      	movs	r0, #1
 8004ad8:	e7e7      	b.n	8004aaa <_raise_r+0x12>
 8004ada:	2100      	movs	r1, #0
 8004adc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	4798      	blx	r3
 8004ae4:	2000      	movs	r0, #0
 8004ae6:	e7e0      	b.n	8004aaa <_raise_r+0x12>

08004ae8 <raise>:
 8004ae8:	4b02      	ldr	r3, [pc, #8]	@ (8004af4 <raise+0xc>)
 8004aea:	4601      	mov	r1, r0
 8004aec:	6818      	ldr	r0, [r3, #0]
 8004aee:	f7ff bfd3 	b.w	8004a98 <_raise_r>
 8004af2:	bf00      	nop
 8004af4:	2000000c 	.word	0x2000000c

08004af8 <_kill_r>:
 8004af8:	b538      	push	{r3, r4, r5, lr}
 8004afa:	4d07      	ldr	r5, [pc, #28]	@ (8004b18 <_kill_r+0x20>)
 8004afc:	2300      	movs	r3, #0
 8004afe:	4604      	mov	r4, r0
 8004b00:	4608      	mov	r0, r1
 8004b02:	4611      	mov	r1, r2
 8004b04:	602b      	str	r3, [r5, #0]
 8004b06:	f7fc fd1b 	bl	8001540 <_kill>
 8004b0a:	1c43      	adds	r3, r0, #1
 8004b0c:	d102      	bne.n	8004b14 <_kill_r+0x1c>
 8004b0e:	682b      	ldr	r3, [r5, #0]
 8004b10:	b103      	cbz	r3, 8004b14 <_kill_r+0x1c>
 8004b12:	6023      	str	r3, [r4, #0]
 8004b14:	bd38      	pop	{r3, r4, r5, pc}
 8004b16:	bf00      	nop
 8004b18:	20000364 	.word	0x20000364

08004b1c <_getpid_r>:
 8004b1c:	f7fc bd08 	b.w	8001530 <_getpid>

08004b20 <_sbrk_r>:
 8004b20:	b538      	push	{r3, r4, r5, lr}
 8004b22:	4d06      	ldr	r5, [pc, #24]	@ (8004b3c <_sbrk_r+0x1c>)
 8004b24:	2300      	movs	r3, #0
 8004b26:	4604      	mov	r4, r0
 8004b28:	4608      	mov	r0, r1
 8004b2a:	602b      	str	r3, [r5, #0]
 8004b2c:	f7fc fd24 	bl	8001578 <_sbrk>
 8004b30:	1c43      	adds	r3, r0, #1
 8004b32:	d102      	bne.n	8004b3a <_sbrk_r+0x1a>
 8004b34:	682b      	ldr	r3, [r5, #0]
 8004b36:	b103      	cbz	r3, 8004b3a <_sbrk_r+0x1a>
 8004b38:	6023      	str	r3, [r4, #0]
 8004b3a:	bd38      	pop	{r3, r4, r5, pc}
 8004b3c:	20000364 	.word	0x20000364

08004b40 <__errno>:
 8004b40:	4b01      	ldr	r3, [pc, #4]	@ (8004b48 <__errno+0x8>)
 8004b42:	6818      	ldr	r0, [r3, #0]
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	2000000c 	.word	0x2000000c

08004b4c <__libc_init_array>:
 8004b4c:	b570      	push	{r4, r5, r6, lr}
 8004b4e:	4d0d      	ldr	r5, [pc, #52]	@ (8004b84 <__libc_init_array+0x38>)
 8004b50:	4c0d      	ldr	r4, [pc, #52]	@ (8004b88 <__libc_init_array+0x3c>)
 8004b52:	1b64      	subs	r4, r4, r5
 8004b54:	10a4      	asrs	r4, r4, #2
 8004b56:	2600      	movs	r6, #0
 8004b58:	42a6      	cmp	r6, r4
 8004b5a:	d109      	bne.n	8004b70 <__libc_init_array+0x24>
 8004b5c:	4d0b      	ldr	r5, [pc, #44]	@ (8004b8c <__libc_init_array+0x40>)
 8004b5e:	4c0c      	ldr	r4, [pc, #48]	@ (8004b90 <__libc_init_array+0x44>)
 8004b60:	f000 fba8 	bl	80052b4 <_init>
 8004b64:	1b64      	subs	r4, r4, r5
 8004b66:	10a4      	asrs	r4, r4, #2
 8004b68:	2600      	movs	r6, #0
 8004b6a:	42a6      	cmp	r6, r4
 8004b6c:	d105      	bne.n	8004b7a <__libc_init_array+0x2e>
 8004b6e:	bd70      	pop	{r4, r5, r6, pc}
 8004b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b74:	4798      	blx	r3
 8004b76:	3601      	adds	r6, #1
 8004b78:	e7ee      	b.n	8004b58 <__libc_init_array+0xc>
 8004b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b7e:	4798      	blx	r3
 8004b80:	3601      	adds	r6, #1
 8004b82:	e7f2      	b.n	8004b6a <__libc_init_array+0x1e>
 8004b84:	08005394 	.word	0x08005394
 8004b88:	08005394 	.word	0x08005394
 8004b8c:	08005394 	.word	0x08005394
 8004b90:	08005398 	.word	0x08005398

08004b94 <__retarget_lock_acquire_recursive>:
 8004b94:	4770      	bx	lr

08004b96 <__retarget_lock_release_recursive>:
 8004b96:	4770      	bx	lr

08004b98 <_free_r>:
 8004b98:	b538      	push	{r3, r4, r5, lr}
 8004b9a:	4605      	mov	r5, r0
 8004b9c:	2900      	cmp	r1, #0
 8004b9e:	d041      	beq.n	8004c24 <_free_r+0x8c>
 8004ba0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ba4:	1f0c      	subs	r4, r1, #4
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	bfb8      	it	lt
 8004baa:	18e4      	addlt	r4, r4, r3
 8004bac:	f7ff ff0c 	bl	80049c8 <__malloc_lock>
 8004bb0:	4a1d      	ldr	r2, [pc, #116]	@ (8004c28 <_free_r+0x90>)
 8004bb2:	6813      	ldr	r3, [r2, #0]
 8004bb4:	b933      	cbnz	r3, 8004bc4 <_free_r+0x2c>
 8004bb6:	6063      	str	r3, [r4, #4]
 8004bb8:	6014      	str	r4, [r2, #0]
 8004bba:	4628      	mov	r0, r5
 8004bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bc0:	f7ff bf08 	b.w	80049d4 <__malloc_unlock>
 8004bc4:	42a3      	cmp	r3, r4
 8004bc6:	d908      	bls.n	8004bda <_free_r+0x42>
 8004bc8:	6820      	ldr	r0, [r4, #0]
 8004bca:	1821      	adds	r1, r4, r0
 8004bcc:	428b      	cmp	r3, r1
 8004bce:	bf01      	itttt	eq
 8004bd0:	6819      	ldreq	r1, [r3, #0]
 8004bd2:	685b      	ldreq	r3, [r3, #4]
 8004bd4:	1809      	addeq	r1, r1, r0
 8004bd6:	6021      	streq	r1, [r4, #0]
 8004bd8:	e7ed      	b.n	8004bb6 <_free_r+0x1e>
 8004bda:	461a      	mov	r2, r3
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	b10b      	cbz	r3, 8004be4 <_free_r+0x4c>
 8004be0:	42a3      	cmp	r3, r4
 8004be2:	d9fa      	bls.n	8004bda <_free_r+0x42>
 8004be4:	6811      	ldr	r1, [r2, #0]
 8004be6:	1850      	adds	r0, r2, r1
 8004be8:	42a0      	cmp	r0, r4
 8004bea:	d10b      	bne.n	8004c04 <_free_r+0x6c>
 8004bec:	6820      	ldr	r0, [r4, #0]
 8004bee:	4401      	add	r1, r0
 8004bf0:	1850      	adds	r0, r2, r1
 8004bf2:	4283      	cmp	r3, r0
 8004bf4:	6011      	str	r1, [r2, #0]
 8004bf6:	d1e0      	bne.n	8004bba <_free_r+0x22>
 8004bf8:	6818      	ldr	r0, [r3, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	6053      	str	r3, [r2, #4]
 8004bfe:	4408      	add	r0, r1
 8004c00:	6010      	str	r0, [r2, #0]
 8004c02:	e7da      	b.n	8004bba <_free_r+0x22>
 8004c04:	d902      	bls.n	8004c0c <_free_r+0x74>
 8004c06:	230c      	movs	r3, #12
 8004c08:	602b      	str	r3, [r5, #0]
 8004c0a:	e7d6      	b.n	8004bba <_free_r+0x22>
 8004c0c:	6820      	ldr	r0, [r4, #0]
 8004c0e:	1821      	adds	r1, r4, r0
 8004c10:	428b      	cmp	r3, r1
 8004c12:	bf04      	itt	eq
 8004c14:	6819      	ldreq	r1, [r3, #0]
 8004c16:	685b      	ldreq	r3, [r3, #4]
 8004c18:	6063      	str	r3, [r4, #4]
 8004c1a:	bf04      	itt	eq
 8004c1c:	1809      	addeq	r1, r1, r0
 8004c1e:	6021      	streq	r1, [r4, #0]
 8004c20:	6054      	str	r4, [r2, #4]
 8004c22:	e7ca      	b.n	8004bba <_free_r+0x22>
 8004c24:	bd38      	pop	{r3, r4, r5, pc}
 8004c26:	bf00      	nop
 8004c28:	20000228 	.word	0x20000228

08004c2c <__ssputs_r>:
 8004c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c30:	688e      	ldr	r6, [r1, #8]
 8004c32:	461f      	mov	r7, r3
 8004c34:	42be      	cmp	r6, r7
 8004c36:	680b      	ldr	r3, [r1, #0]
 8004c38:	4682      	mov	sl, r0
 8004c3a:	460c      	mov	r4, r1
 8004c3c:	4690      	mov	r8, r2
 8004c3e:	d82d      	bhi.n	8004c9c <__ssputs_r+0x70>
 8004c40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004c48:	d026      	beq.n	8004c98 <__ssputs_r+0x6c>
 8004c4a:	6965      	ldr	r5, [r4, #20]
 8004c4c:	6909      	ldr	r1, [r1, #16]
 8004c4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004c52:	eba3 0901 	sub.w	r9, r3, r1
 8004c56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004c5a:	1c7b      	adds	r3, r7, #1
 8004c5c:	444b      	add	r3, r9
 8004c5e:	106d      	asrs	r5, r5, #1
 8004c60:	429d      	cmp	r5, r3
 8004c62:	bf38      	it	cc
 8004c64:	461d      	movcc	r5, r3
 8004c66:	0553      	lsls	r3, r2, #21
 8004c68:	d527      	bpl.n	8004cba <__ssputs_r+0x8e>
 8004c6a:	4629      	mov	r1, r5
 8004c6c:	f7ff fe2c 	bl	80048c8 <_malloc_r>
 8004c70:	4606      	mov	r6, r0
 8004c72:	b360      	cbz	r0, 8004cce <__ssputs_r+0xa2>
 8004c74:	6921      	ldr	r1, [r4, #16]
 8004c76:	464a      	mov	r2, r9
 8004c78:	f000 fad8 	bl	800522c <memcpy>
 8004c7c:	89a3      	ldrh	r3, [r4, #12]
 8004c7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c86:	81a3      	strh	r3, [r4, #12]
 8004c88:	6126      	str	r6, [r4, #16]
 8004c8a:	6165      	str	r5, [r4, #20]
 8004c8c:	444e      	add	r6, r9
 8004c8e:	eba5 0509 	sub.w	r5, r5, r9
 8004c92:	6026      	str	r6, [r4, #0]
 8004c94:	60a5      	str	r5, [r4, #8]
 8004c96:	463e      	mov	r6, r7
 8004c98:	42be      	cmp	r6, r7
 8004c9a:	d900      	bls.n	8004c9e <__ssputs_r+0x72>
 8004c9c:	463e      	mov	r6, r7
 8004c9e:	6820      	ldr	r0, [r4, #0]
 8004ca0:	4632      	mov	r2, r6
 8004ca2:	4641      	mov	r1, r8
 8004ca4:	f000 faa8 	bl	80051f8 <memmove>
 8004ca8:	68a3      	ldr	r3, [r4, #8]
 8004caa:	1b9b      	subs	r3, r3, r6
 8004cac:	60a3      	str	r3, [r4, #8]
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	4433      	add	r3, r6
 8004cb2:	6023      	str	r3, [r4, #0]
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cba:	462a      	mov	r2, r5
 8004cbc:	f000 fac4 	bl	8005248 <_realloc_r>
 8004cc0:	4606      	mov	r6, r0
 8004cc2:	2800      	cmp	r0, #0
 8004cc4:	d1e0      	bne.n	8004c88 <__ssputs_r+0x5c>
 8004cc6:	6921      	ldr	r1, [r4, #16]
 8004cc8:	4650      	mov	r0, sl
 8004cca:	f7ff ff65 	bl	8004b98 <_free_r>
 8004cce:	230c      	movs	r3, #12
 8004cd0:	f8ca 3000 	str.w	r3, [sl]
 8004cd4:	89a3      	ldrh	r3, [r4, #12]
 8004cd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cda:	81a3      	strh	r3, [r4, #12]
 8004cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce0:	e7e9      	b.n	8004cb6 <__ssputs_r+0x8a>
	...

08004ce4 <_svfiprintf_r>:
 8004ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce8:	4698      	mov	r8, r3
 8004cea:	898b      	ldrh	r3, [r1, #12]
 8004cec:	061b      	lsls	r3, r3, #24
 8004cee:	b09d      	sub	sp, #116	@ 0x74
 8004cf0:	4607      	mov	r7, r0
 8004cf2:	460d      	mov	r5, r1
 8004cf4:	4614      	mov	r4, r2
 8004cf6:	d510      	bpl.n	8004d1a <_svfiprintf_r+0x36>
 8004cf8:	690b      	ldr	r3, [r1, #16]
 8004cfa:	b973      	cbnz	r3, 8004d1a <_svfiprintf_r+0x36>
 8004cfc:	2140      	movs	r1, #64	@ 0x40
 8004cfe:	f7ff fde3 	bl	80048c8 <_malloc_r>
 8004d02:	6028      	str	r0, [r5, #0]
 8004d04:	6128      	str	r0, [r5, #16]
 8004d06:	b930      	cbnz	r0, 8004d16 <_svfiprintf_r+0x32>
 8004d08:	230c      	movs	r3, #12
 8004d0a:	603b      	str	r3, [r7, #0]
 8004d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d10:	b01d      	add	sp, #116	@ 0x74
 8004d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d16:	2340      	movs	r3, #64	@ 0x40
 8004d18:	616b      	str	r3, [r5, #20]
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d1e:	2320      	movs	r3, #32
 8004d20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d24:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d28:	2330      	movs	r3, #48	@ 0x30
 8004d2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004ec8 <_svfiprintf_r+0x1e4>
 8004d2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d32:	f04f 0901 	mov.w	r9, #1
 8004d36:	4623      	mov	r3, r4
 8004d38:	469a      	mov	sl, r3
 8004d3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d3e:	b10a      	cbz	r2, 8004d44 <_svfiprintf_r+0x60>
 8004d40:	2a25      	cmp	r2, #37	@ 0x25
 8004d42:	d1f9      	bne.n	8004d38 <_svfiprintf_r+0x54>
 8004d44:	ebba 0b04 	subs.w	fp, sl, r4
 8004d48:	d00b      	beq.n	8004d62 <_svfiprintf_r+0x7e>
 8004d4a:	465b      	mov	r3, fp
 8004d4c:	4622      	mov	r2, r4
 8004d4e:	4629      	mov	r1, r5
 8004d50:	4638      	mov	r0, r7
 8004d52:	f7ff ff6b 	bl	8004c2c <__ssputs_r>
 8004d56:	3001      	adds	r0, #1
 8004d58:	f000 80a7 	beq.w	8004eaa <_svfiprintf_r+0x1c6>
 8004d5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d5e:	445a      	add	r2, fp
 8004d60:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d62:	f89a 3000 	ldrb.w	r3, [sl]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f000 809f 	beq.w	8004eaa <_svfiprintf_r+0x1c6>
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d76:	f10a 0a01 	add.w	sl, sl, #1
 8004d7a:	9304      	str	r3, [sp, #16]
 8004d7c:	9307      	str	r3, [sp, #28]
 8004d7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d82:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d84:	4654      	mov	r4, sl
 8004d86:	2205      	movs	r2, #5
 8004d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d8c:	484e      	ldr	r0, [pc, #312]	@ (8004ec8 <_svfiprintf_r+0x1e4>)
 8004d8e:	f7fb fa27 	bl	80001e0 <memchr>
 8004d92:	9a04      	ldr	r2, [sp, #16]
 8004d94:	b9d8      	cbnz	r0, 8004dce <_svfiprintf_r+0xea>
 8004d96:	06d0      	lsls	r0, r2, #27
 8004d98:	bf44      	itt	mi
 8004d9a:	2320      	movmi	r3, #32
 8004d9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004da0:	0711      	lsls	r1, r2, #28
 8004da2:	bf44      	itt	mi
 8004da4:	232b      	movmi	r3, #43	@ 0x2b
 8004da6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004daa:	f89a 3000 	ldrb.w	r3, [sl]
 8004dae:	2b2a      	cmp	r3, #42	@ 0x2a
 8004db0:	d015      	beq.n	8004dde <_svfiprintf_r+0xfa>
 8004db2:	9a07      	ldr	r2, [sp, #28]
 8004db4:	4654      	mov	r4, sl
 8004db6:	2000      	movs	r0, #0
 8004db8:	f04f 0c0a 	mov.w	ip, #10
 8004dbc:	4621      	mov	r1, r4
 8004dbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dc2:	3b30      	subs	r3, #48	@ 0x30
 8004dc4:	2b09      	cmp	r3, #9
 8004dc6:	d94b      	bls.n	8004e60 <_svfiprintf_r+0x17c>
 8004dc8:	b1b0      	cbz	r0, 8004df8 <_svfiprintf_r+0x114>
 8004dca:	9207      	str	r2, [sp, #28]
 8004dcc:	e014      	b.n	8004df8 <_svfiprintf_r+0x114>
 8004dce:	eba0 0308 	sub.w	r3, r0, r8
 8004dd2:	fa09 f303 	lsl.w	r3, r9, r3
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	9304      	str	r3, [sp, #16]
 8004dda:	46a2      	mov	sl, r4
 8004ddc:	e7d2      	b.n	8004d84 <_svfiprintf_r+0xa0>
 8004dde:	9b03      	ldr	r3, [sp, #12]
 8004de0:	1d19      	adds	r1, r3, #4
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	9103      	str	r1, [sp, #12]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	bfbb      	ittet	lt
 8004dea:	425b      	neglt	r3, r3
 8004dec:	f042 0202 	orrlt.w	r2, r2, #2
 8004df0:	9307      	strge	r3, [sp, #28]
 8004df2:	9307      	strlt	r3, [sp, #28]
 8004df4:	bfb8      	it	lt
 8004df6:	9204      	strlt	r2, [sp, #16]
 8004df8:	7823      	ldrb	r3, [r4, #0]
 8004dfa:	2b2e      	cmp	r3, #46	@ 0x2e
 8004dfc:	d10a      	bne.n	8004e14 <_svfiprintf_r+0x130>
 8004dfe:	7863      	ldrb	r3, [r4, #1]
 8004e00:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e02:	d132      	bne.n	8004e6a <_svfiprintf_r+0x186>
 8004e04:	9b03      	ldr	r3, [sp, #12]
 8004e06:	1d1a      	adds	r2, r3, #4
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	9203      	str	r2, [sp, #12]
 8004e0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e10:	3402      	adds	r4, #2
 8004e12:	9305      	str	r3, [sp, #20]
 8004e14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004ed8 <_svfiprintf_r+0x1f4>
 8004e18:	7821      	ldrb	r1, [r4, #0]
 8004e1a:	2203      	movs	r2, #3
 8004e1c:	4650      	mov	r0, sl
 8004e1e:	f7fb f9df 	bl	80001e0 <memchr>
 8004e22:	b138      	cbz	r0, 8004e34 <_svfiprintf_r+0x150>
 8004e24:	9b04      	ldr	r3, [sp, #16]
 8004e26:	eba0 000a 	sub.w	r0, r0, sl
 8004e2a:	2240      	movs	r2, #64	@ 0x40
 8004e2c:	4082      	lsls	r2, r0
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	3401      	adds	r4, #1
 8004e32:	9304      	str	r3, [sp, #16]
 8004e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e38:	4824      	ldr	r0, [pc, #144]	@ (8004ecc <_svfiprintf_r+0x1e8>)
 8004e3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e3e:	2206      	movs	r2, #6
 8004e40:	f7fb f9ce 	bl	80001e0 <memchr>
 8004e44:	2800      	cmp	r0, #0
 8004e46:	d036      	beq.n	8004eb6 <_svfiprintf_r+0x1d2>
 8004e48:	4b21      	ldr	r3, [pc, #132]	@ (8004ed0 <_svfiprintf_r+0x1ec>)
 8004e4a:	bb1b      	cbnz	r3, 8004e94 <_svfiprintf_r+0x1b0>
 8004e4c:	9b03      	ldr	r3, [sp, #12]
 8004e4e:	3307      	adds	r3, #7
 8004e50:	f023 0307 	bic.w	r3, r3, #7
 8004e54:	3308      	adds	r3, #8
 8004e56:	9303      	str	r3, [sp, #12]
 8004e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e5a:	4433      	add	r3, r6
 8004e5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e5e:	e76a      	b.n	8004d36 <_svfiprintf_r+0x52>
 8004e60:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e64:	460c      	mov	r4, r1
 8004e66:	2001      	movs	r0, #1
 8004e68:	e7a8      	b.n	8004dbc <_svfiprintf_r+0xd8>
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	3401      	adds	r4, #1
 8004e6e:	9305      	str	r3, [sp, #20]
 8004e70:	4619      	mov	r1, r3
 8004e72:	f04f 0c0a 	mov.w	ip, #10
 8004e76:	4620      	mov	r0, r4
 8004e78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e7c:	3a30      	subs	r2, #48	@ 0x30
 8004e7e:	2a09      	cmp	r2, #9
 8004e80:	d903      	bls.n	8004e8a <_svfiprintf_r+0x1a6>
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0c6      	beq.n	8004e14 <_svfiprintf_r+0x130>
 8004e86:	9105      	str	r1, [sp, #20]
 8004e88:	e7c4      	b.n	8004e14 <_svfiprintf_r+0x130>
 8004e8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e8e:	4604      	mov	r4, r0
 8004e90:	2301      	movs	r3, #1
 8004e92:	e7f0      	b.n	8004e76 <_svfiprintf_r+0x192>
 8004e94:	ab03      	add	r3, sp, #12
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	462a      	mov	r2, r5
 8004e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8004ed4 <_svfiprintf_r+0x1f0>)
 8004e9c:	a904      	add	r1, sp, #16
 8004e9e:	4638      	mov	r0, r7
 8004ea0:	f3af 8000 	nop.w
 8004ea4:	1c42      	adds	r2, r0, #1
 8004ea6:	4606      	mov	r6, r0
 8004ea8:	d1d6      	bne.n	8004e58 <_svfiprintf_r+0x174>
 8004eaa:	89ab      	ldrh	r3, [r5, #12]
 8004eac:	065b      	lsls	r3, r3, #25
 8004eae:	f53f af2d 	bmi.w	8004d0c <_svfiprintf_r+0x28>
 8004eb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004eb4:	e72c      	b.n	8004d10 <_svfiprintf_r+0x2c>
 8004eb6:	ab03      	add	r3, sp, #12
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	462a      	mov	r2, r5
 8004ebc:	4b05      	ldr	r3, [pc, #20]	@ (8004ed4 <_svfiprintf_r+0x1f0>)
 8004ebe:	a904      	add	r1, sp, #16
 8004ec0:	4638      	mov	r0, r7
 8004ec2:	f000 f879 	bl	8004fb8 <_printf_i>
 8004ec6:	e7ed      	b.n	8004ea4 <_svfiprintf_r+0x1c0>
 8004ec8:	08005358 	.word	0x08005358
 8004ecc:	08005362 	.word	0x08005362
 8004ed0:	00000000 	.word	0x00000000
 8004ed4:	08004c2d 	.word	0x08004c2d
 8004ed8:	0800535e 	.word	0x0800535e

08004edc <_printf_common>:
 8004edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ee0:	4616      	mov	r6, r2
 8004ee2:	4698      	mov	r8, r3
 8004ee4:	688a      	ldr	r2, [r1, #8]
 8004ee6:	690b      	ldr	r3, [r1, #16]
 8004ee8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004eec:	4293      	cmp	r3, r2
 8004eee:	bfb8      	it	lt
 8004ef0:	4613      	movlt	r3, r2
 8004ef2:	6033      	str	r3, [r6, #0]
 8004ef4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ef8:	4607      	mov	r7, r0
 8004efa:	460c      	mov	r4, r1
 8004efc:	b10a      	cbz	r2, 8004f02 <_printf_common+0x26>
 8004efe:	3301      	adds	r3, #1
 8004f00:	6033      	str	r3, [r6, #0]
 8004f02:	6823      	ldr	r3, [r4, #0]
 8004f04:	0699      	lsls	r1, r3, #26
 8004f06:	bf42      	ittt	mi
 8004f08:	6833      	ldrmi	r3, [r6, #0]
 8004f0a:	3302      	addmi	r3, #2
 8004f0c:	6033      	strmi	r3, [r6, #0]
 8004f0e:	6825      	ldr	r5, [r4, #0]
 8004f10:	f015 0506 	ands.w	r5, r5, #6
 8004f14:	d106      	bne.n	8004f24 <_printf_common+0x48>
 8004f16:	f104 0a19 	add.w	sl, r4, #25
 8004f1a:	68e3      	ldr	r3, [r4, #12]
 8004f1c:	6832      	ldr	r2, [r6, #0]
 8004f1e:	1a9b      	subs	r3, r3, r2
 8004f20:	42ab      	cmp	r3, r5
 8004f22:	dc26      	bgt.n	8004f72 <_printf_common+0x96>
 8004f24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f28:	6822      	ldr	r2, [r4, #0]
 8004f2a:	3b00      	subs	r3, #0
 8004f2c:	bf18      	it	ne
 8004f2e:	2301      	movne	r3, #1
 8004f30:	0692      	lsls	r2, r2, #26
 8004f32:	d42b      	bmi.n	8004f8c <_printf_common+0xb0>
 8004f34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f38:	4641      	mov	r1, r8
 8004f3a:	4638      	mov	r0, r7
 8004f3c:	47c8      	blx	r9
 8004f3e:	3001      	adds	r0, #1
 8004f40:	d01e      	beq.n	8004f80 <_printf_common+0xa4>
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	6922      	ldr	r2, [r4, #16]
 8004f46:	f003 0306 	and.w	r3, r3, #6
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	bf02      	ittt	eq
 8004f4e:	68e5      	ldreq	r5, [r4, #12]
 8004f50:	6833      	ldreq	r3, [r6, #0]
 8004f52:	1aed      	subeq	r5, r5, r3
 8004f54:	68a3      	ldr	r3, [r4, #8]
 8004f56:	bf0c      	ite	eq
 8004f58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f5c:	2500      	movne	r5, #0
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	bfc4      	itt	gt
 8004f62:	1a9b      	subgt	r3, r3, r2
 8004f64:	18ed      	addgt	r5, r5, r3
 8004f66:	2600      	movs	r6, #0
 8004f68:	341a      	adds	r4, #26
 8004f6a:	42b5      	cmp	r5, r6
 8004f6c:	d11a      	bne.n	8004fa4 <_printf_common+0xc8>
 8004f6e:	2000      	movs	r0, #0
 8004f70:	e008      	b.n	8004f84 <_printf_common+0xa8>
 8004f72:	2301      	movs	r3, #1
 8004f74:	4652      	mov	r2, sl
 8004f76:	4641      	mov	r1, r8
 8004f78:	4638      	mov	r0, r7
 8004f7a:	47c8      	blx	r9
 8004f7c:	3001      	adds	r0, #1
 8004f7e:	d103      	bne.n	8004f88 <_printf_common+0xac>
 8004f80:	f04f 30ff 	mov.w	r0, #4294967295
 8004f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f88:	3501      	adds	r5, #1
 8004f8a:	e7c6      	b.n	8004f1a <_printf_common+0x3e>
 8004f8c:	18e1      	adds	r1, r4, r3
 8004f8e:	1c5a      	adds	r2, r3, #1
 8004f90:	2030      	movs	r0, #48	@ 0x30
 8004f92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f96:	4422      	add	r2, r4
 8004f98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004fa0:	3302      	adds	r3, #2
 8004fa2:	e7c7      	b.n	8004f34 <_printf_common+0x58>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	4622      	mov	r2, r4
 8004fa8:	4641      	mov	r1, r8
 8004faa:	4638      	mov	r0, r7
 8004fac:	47c8      	blx	r9
 8004fae:	3001      	adds	r0, #1
 8004fb0:	d0e6      	beq.n	8004f80 <_printf_common+0xa4>
 8004fb2:	3601      	adds	r6, #1
 8004fb4:	e7d9      	b.n	8004f6a <_printf_common+0x8e>
	...

08004fb8 <_printf_i>:
 8004fb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fbc:	7e0f      	ldrb	r7, [r1, #24]
 8004fbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004fc0:	2f78      	cmp	r7, #120	@ 0x78
 8004fc2:	4691      	mov	r9, r2
 8004fc4:	4680      	mov	r8, r0
 8004fc6:	460c      	mov	r4, r1
 8004fc8:	469a      	mov	sl, r3
 8004fca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004fce:	d807      	bhi.n	8004fe0 <_printf_i+0x28>
 8004fd0:	2f62      	cmp	r7, #98	@ 0x62
 8004fd2:	d80a      	bhi.n	8004fea <_printf_i+0x32>
 8004fd4:	2f00      	cmp	r7, #0
 8004fd6:	f000 80d2 	beq.w	800517e <_printf_i+0x1c6>
 8004fda:	2f58      	cmp	r7, #88	@ 0x58
 8004fdc:	f000 80b9 	beq.w	8005152 <_printf_i+0x19a>
 8004fe0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004fe4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004fe8:	e03a      	b.n	8005060 <_printf_i+0xa8>
 8004fea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004fee:	2b15      	cmp	r3, #21
 8004ff0:	d8f6      	bhi.n	8004fe0 <_printf_i+0x28>
 8004ff2:	a101      	add	r1, pc, #4	@ (adr r1, 8004ff8 <_printf_i+0x40>)
 8004ff4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ff8:	08005051 	.word	0x08005051
 8004ffc:	08005065 	.word	0x08005065
 8005000:	08004fe1 	.word	0x08004fe1
 8005004:	08004fe1 	.word	0x08004fe1
 8005008:	08004fe1 	.word	0x08004fe1
 800500c:	08004fe1 	.word	0x08004fe1
 8005010:	08005065 	.word	0x08005065
 8005014:	08004fe1 	.word	0x08004fe1
 8005018:	08004fe1 	.word	0x08004fe1
 800501c:	08004fe1 	.word	0x08004fe1
 8005020:	08004fe1 	.word	0x08004fe1
 8005024:	08005165 	.word	0x08005165
 8005028:	0800508f 	.word	0x0800508f
 800502c:	0800511f 	.word	0x0800511f
 8005030:	08004fe1 	.word	0x08004fe1
 8005034:	08004fe1 	.word	0x08004fe1
 8005038:	08005187 	.word	0x08005187
 800503c:	08004fe1 	.word	0x08004fe1
 8005040:	0800508f 	.word	0x0800508f
 8005044:	08004fe1 	.word	0x08004fe1
 8005048:	08004fe1 	.word	0x08004fe1
 800504c:	08005127 	.word	0x08005127
 8005050:	6833      	ldr	r3, [r6, #0]
 8005052:	1d1a      	adds	r2, r3, #4
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	6032      	str	r2, [r6, #0]
 8005058:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800505c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005060:	2301      	movs	r3, #1
 8005062:	e09d      	b.n	80051a0 <_printf_i+0x1e8>
 8005064:	6833      	ldr	r3, [r6, #0]
 8005066:	6820      	ldr	r0, [r4, #0]
 8005068:	1d19      	adds	r1, r3, #4
 800506a:	6031      	str	r1, [r6, #0]
 800506c:	0606      	lsls	r6, r0, #24
 800506e:	d501      	bpl.n	8005074 <_printf_i+0xbc>
 8005070:	681d      	ldr	r5, [r3, #0]
 8005072:	e003      	b.n	800507c <_printf_i+0xc4>
 8005074:	0645      	lsls	r5, r0, #25
 8005076:	d5fb      	bpl.n	8005070 <_printf_i+0xb8>
 8005078:	f9b3 5000 	ldrsh.w	r5, [r3]
 800507c:	2d00      	cmp	r5, #0
 800507e:	da03      	bge.n	8005088 <_printf_i+0xd0>
 8005080:	232d      	movs	r3, #45	@ 0x2d
 8005082:	426d      	negs	r5, r5
 8005084:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005088:	4859      	ldr	r0, [pc, #356]	@ (80051f0 <_printf_i+0x238>)
 800508a:	230a      	movs	r3, #10
 800508c:	e011      	b.n	80050b2 <_printf_i+0xfa>
 800508e:	6821      	ldr	r1, [r4, #0]
 8005090:	6833      	ldr	r3, [r6, #0]
 8005092:	0608      	lsls	r0, r1, #24
 8005094:	f853 5b04 	ldr.w	r5, [r3], #4
 8005098:	d402      	bmi.n	80050a0 <_printf_i+0xe8>
 800509a:	0649      	lsls	r1, r1, #25
 800509c:	bf48      	it	mi
 800509e:	b2ad      	uxthmi	r5, r5
 80050a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80050a2:	4853      	ldr	r0, [pc, #332]	@ (80051f0 <_printf_i+0x238>)
 80050a4:	6033      	str	r3, [r6, #0]
 80050a6:	bf14      	ite	ne
 80050a8:	230a      	movne	r3, #10
 80050aa:	2308      	moveq	r3, #8
 80050ac:	2100      	movs	r1, #0
 80050ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80050b2:	6866      	ldr	r6, [r4, #4]
 80050b4:	60a6      	str	r6, [r4, #8]
 80050b6:	2e00      	cmp	r6, #0
 80050b8:	bfa2      	ittt	ge
 80050ba:	6821      	ldrge	r1, [r4, #0]
 80050bc:	f021 0104 	bicge.w	r1, r1, #4
 80050c0:	6021      	strge	r1, [r4, #0]
 80050c2:	b90d      	cbnz	r5, 80050c8 <_printf_i+0x110>
 80050c4:	2e00      	cmp	r6, #0
 80050c6:	d04b      	beq.n	8005160 <_printf_i+0x1a8>
 80050c8:	4616      	mov	r6, r2
 80050ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80050ce:	fb03 5711 	mls	r7, r3, r1, r5
 80050d2:	5dc7      	ldrb	r7, [r0, r7]
 80050d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80050d8:	462f      	mov	r7, r5
 80050da:	42bb      	cmp	r3, r7
 80050dc:	460d      	mov	r5, r1
 80050de:	d9f4      	bls.n	80050ca <_printf_i+0x112>
 80050e0:	2b08      	cmp	r3, #8
 80050e2:	d10b      	bne.n	80050fc <_printf_i+0x144>
 80050e4:	6823      	ldr	r3, [r4, #0]
 80050e6:	07df      	lsls	r7, r3, #31
 80050e8:	d508      	bpl.n	80050fc <_printf_i+0x144>
 80050ea:	6923      	ldr	r3, [r4, #16]
 80050ec:	6861      	ldr	r1, [r4, #4]
 80050ee:	4299      	cmp	r1, r3
 80050f0:	bfde      	ittt	le
 80050f2:	2330      	movle	r3, #48	@ 0x30
 80050f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80050f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050fc:	1b92      	subs	r2, r2, r6
 80050fe:	6122      	str	r2, [r4, #16]
 8005100:	f8cd a000 	str.w	sl, [sp]
 8005104:	464b      	mov	r3, r9
 8005106:	aa03      	add	r2, sp, #12
 8005108:	4621      	mov	r1, r4
 800510a:	4640      	mov	r0, r8
 800510c:	f7ff fee6 	bl	8004edc <_printf_common>
 8005110:	3001      	adds	r0, #1
 8005112:	d14a      	bne.n	80051aa <_printf_i+0x1f2>
 8005114:	f04f 30ff 	mov.w	r0, #4294967295
 8005118:	b004      	add	sp, #16
 800511a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	f043 0320 	orr.w	r3, r3, #32
 8005124:	6023      	str	r3, [r4, #0]
 8005126:	4833      	ldr	r0, [pc, #204]	@ (80051f4 <_printf_i+0x23c>)
 8005128:	2778      	movs	r7, #120	@ 0x78
 800512a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800512e:	6823      	ldr	r3, [r4, #0]
 8005130:	6831      	ldr	r1, [r6, #0]
 8005132:	061f      	lsls	r7, r3, #24
 8005134:	f851 5b04 	ldr.w	r5, [r1], #4
 8005138:	d402      	bmi.n	8005140 <_printf_i+0x188>
 800513a:	065f      	lsls	r7, r3, #25
 800513c:	bf48      	it	mi
 800513e:	b2ad      	uxthmi	r5, r5
 8005140:	6031      	str	r1, [r6, #0]
 8005142:	07d9      	lsls	r1, r3, #31
 8005144:	bf44      	itt	mi
 8005146:	f043 0320 	orrmi.w	r3, r3, #32
 800514a:	6023      	strmi	r3, [r4, #0]
 800514c:	b11d      	cbz	r5, 8005156 <_printf_i+0x19e>
 800514e:	2310      	movs	r3, #16
 8005150:	e7ac      	b.n	80050ac <_printf_i+0xf4>
 8005152:	4827      	ldr	r0, [pc, #156]	@ (80051f0 <_printf_i+0x238>)
 8005154:	e7e9      	b.n	800512a <_printf_i+0x172>
 8005156:	6823      	ldr	r3, [r4, #0]
 8005158:	f023 0320 	bic.w	r3, r3, #32
 800515c:	6023      	str	r3, [r4, #0]
 800515e:	e7f6      	b.n	800514e <_printf_i+0x196>
 8005160:	4616      	mov	r6, r2
 8005162:	e7bd      	b.n	80050e0 <_printf_i+0x128>
 8005164:	6833      	ldr	r3, [r6, #0]
 8005166:	6825      	ldr	r5, [r4, #0]
 8005168:	6961      	ldr	r1, [r4, #20]
 800516a:	1d18      	adds	r0, r3, #4
 800516c:	6030      	str	r0, [r6, #0]
 800516e:	062e      	lsls	r6, r5, #24
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	d501      	bpl.n	8005178 <_printf_i+0x1c0>
 8005174:	6019      	str	r1, [r3, #0]
 8005176:	e002      	b.n	800517e <_printf_i+0x1c6>
 8005178:	0668      	lsls	r0, r5, #25
 800517a:	d5fb      	bpl.n	8005174 <_printf_i+0x1bc>
 800517c:	8019      	strh	r1, [r3, #0]
 800517e:	2300      	movs	r3, #0
 8005180:	6123      	str	r3, [r4, #16]
 8005182:	4616      	mov	r6, r2
 8005184:	e7bc      	b.n	8005100 <_printf_i+0x148>
 8005186:	6833      	ldr	r3, [r6, #0]
 8005188:	1d1a      	adds	r2, r3, #4
 800518a:	6032      	str	r2, [r6, #0]
 800518c:	681e      	ldr	r6, [r3, #0]
 800518e:	6862      	ldr	r2, [r4, #4]
 8005190:	2100      	movs	r1, #0
 8005192:	4630      	mov	r0, r6
 8005194:	f7fb f824 	bl	80001e0 <memchr>
 8005198:	b108      	cbz	r0, 800519e <_printf_i+0x1e6>
 800519a:	1b80      	subs	r0, r0, r6
 800519c:	6060      	str	r0, [r4, #4]
 800519e:	6863      	ldr	r3, [r4, #4]
 80051a0:	6123      	str	r3, [r4, #16]
 80051a2:	2300      	movs	r3, #0
 80051a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051a8:	e7aa      	b.n	8005100 <_printf_i+0x148>
 80051aa:	6923      	ldr	r3, [r4, #16]
 80051ac:	4632      	mov	r2, r6
 80051ae:	4649      	mov	r1, r9
 80051b0:	4640      	mov	r0, r8
 80051b2:	47d0      	blx	sl
 80051b4:	3001      	adds	r0, #1
 80051b6:	d0ad      	beq.n	8005114 <_printf_i+0x15c>
 80051b8:	6823      	ldr	r3, [r4, #0]
 80051ba:	079b      	lsls	r3, r3, #30
 80051bc:	d413      	bmi.n	80051e6 <_printf_i+0x22e>
 80051be:	68e0      	ldr	r0, [r4, #12]
 80051c0:	9b03      	ldr	r3, [sp, #12]
 80051c2:	4298      	cmp	r0, r3
 80051c4:	bfb8      	it	lt
 80051c6:	4618      	movlt	r0, r3
 80051c8:	e7a6      	b.n	8005118 <_printf_i+0x160>
 80051ca:	2301      	movs	r3, #1
 80051cc:	4632      	mov	r2, r6
 80051ce:	4649      	mov	r1, r9
 80051d0:	4640      	mov	r0, r8
 80051d2:	47d0      	blx	sl
 80051d4:	3001      	adds	r0, #1
 80051d6:	d09d      	beq.n	8005114 <_printf_i+0x15c>
 80051d8:	3501      	adds	r5, #1
 80051da:	68e3      	ldr	r3, [r4, #12]
 80051dc:	9903      	ldr	r1, [sp, #12]
 80051de:	1a5b      	subs	r3, r3, r1
 80051e0:	42ab      	cmp	r3, r5
 80051e2:	dcf2      	bgt.n	80051ca <_printf_i+0x212>
 80051e4:	e7eb      	b.n	80051be <_printf_i+0x206>
 80051e6:	2500      	movs	r5, #0
 80051e8:	f104 0619 	add.w	r6, r4, #25
 80051ec:	e7f5      	b.n	80051da <_printf_i+0x222>
 80051ee:	bf00      	nop
 80051f0:	08005369 	.word	0x08005369
 80051f4:	0800537a 	.word	0x0800537a

080051f8 <memmove>:
 80051f8:	4288      	cmp	r0, r1
 80051fa:	b510      	push	{r4, lr}
 80051fc:	eb01 0402 	add.w	r4, r1, r2
 8005200:	d902      	bls.n	8005208 <memmove+0x10>
 8005202:	4284      	cmp	r4, r0
 8005204:	4623      	mov	r3, r4
 8005206:	d807      	bhi.n	8005218 <memmove+0x20>
 8005208:	1e43      	subs	r3, r0, #1
 800520a:	42a1      	cmp	r1, r4
 800520c:	d008      	beq.n	8005220 <memmove+0x28>
 800520e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005212:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005216:	e7f8      	b.n	800520a <memmove+0x12>
 8005218:	4402      	add	r2, r0
 800521a:	4601      	mov	r1, r0
 800521c:	428a      	cmp	r2, r1
 800521e:	d100      	bne.n	8005222 <memmove+0x2a>
 8005220:	bd10      	pop	{r4, pc}
 8005222:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005226:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800522a:	e7f7      	b.n	800521c <memmove+0x24>

0800522c <memcpy>:
 800522c:	440a      	add	r2, r1
 800522e:	4291      	cmp	r1, r2
 8005230:	f100 33ff 	add.w	r3, r0, #4294967295
 8005234:	d100      	bne.n	8005238 <memcpy+0xc>
 8005236:	4770      	bx	lr
 8005238:	b510      	push	{r4, lr}
 800523a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800523e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005242:	4291      	cmp	r1, r2
 8005244:	d1f9      	bne.n	800523a <memcpy+0xe>
 8005246:	bd10      	pop	{r4, pc}

08005248 <_realloc_r>:
 8005248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800524c:	4680      	mov	r8, r0
 800524e:	4615      	mov	r5, r2
 8005250:	460c      	mov	r4, r1
 8005252:	b921      	cbnz	r1, 800525e <_realloc_r+0x16>
 8005254:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005258:	4611      	mov	r1, r2
 800525a:	f7ff bb35 	b.w	80048c8 <_malloc_r>
 800525e:	b92a      	cbnz	r2, 800526c <_realloc_r+0x24>
 8005260:	f7ff fc9a 	bl	8004b98 <_free_r>
 8005264:	2400      	movs	r4, #0
 8005266:	4620      	mov	r0, r4
 8005268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800526c:	f000 f81a 	bl	80052a4 <_malloc_usable_size_r>
 8005270:	4285      	cmp	r5, r0
 8005272:	4606      	mov	r6, r0
 8005274:	d802      	bhi.n	800527c <_realloc_r+0x34>
 8005276:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800527a:	d8f4      	bhi.n	8005266 <_realloc_r+0x1e>
 800527c:	4629      	mov	r1, r5
 800527e:	4640      	mov	r0, r8
 8005280:	f7ff fb22 	bl	80048c8 <_malloc_r>
 8005284:	4607      	mov	r7, r0
 8005286:	2800      	cmp	r0, #0
 8005288:	d0ec      	beq.n	8005264 <_realloc_r+0x1c>
 800528a:	42b5      	cmp	r5, r6
 800528c:	462a      	mov	r2, r5
 800528e:	4621      	mov	r1, r4
 8005290:	bf28      	it	cs
 8005292:	4632      	movcs	r2, r6
 8005294:	f7ff ffca 	bl	800522c <memcpy>
 8005298:	4621      	mov	r1, r4
 800529a:	4640      	mov	r0, r8
 800529c:	f7ff fc7c 	bl	8004b98 <_free_r>
 80052a0:	463c      	mov	r4, r7
 80052a2:	e7e0      	b.n	8005266 <_realloc_r+0x1e>

080052a4 <_malloc_usable_size_r>:
 80052a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052a8:	1f18      	subs	r0, r3, #4
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	bfbc      	itt	lt
 80052ae:	580b      	ldrlt	r3, [r1, r0]
 80052b0:	18c0      	addlt	r0, r0, r3
 80052b2:	4770      	bx	lr

080052b4 <_init>:
 80052b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b6:	bf00      	nop
 80052b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ba:	bc08      	pop	{r3}
 80052bc:	469e      	mov	lr, r3
 80052be:	4770      	bx	lr

080052c0 <_fini>:
 80052c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c2:	bf00      	nop
 80052c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052c6:	bc08      	pop	{r3}
 80052c8:	469e      	mov	lr, r3
 80052ca:	4770      	bx	lr
