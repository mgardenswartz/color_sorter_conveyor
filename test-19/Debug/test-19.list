
test-19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a60  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  08008c00  08008c00  00009c00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009090  08009090  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009090  08009090  0000a090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009098  08009098  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009098  08009098  0000a098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800909c  0800909c  0000a09c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080090a0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  200001d4  08009274  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08009274  0000b4ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109a8  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c0e  00000000  00000000  0001bbac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  0001e7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000af5  00000000  00000000  0001f5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f2a  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010cc6  00000000  00000000  0003a007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009136b  00000000  00000000  0004accd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc038  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cc0  00000000  00000000  000dc07c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  000e0d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008be8 	.word	0x08008be8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08008be8 	.word	0x08008be8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <_ZN12MotorControlC1EP15TB6612FNG_MotorP13PololuEncodermfff>:
 * @date Jun 2, 2024
 */

#include "MotorControl.h"

MotorControl::MotorControl(
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	61f8      	str	r0, [r7, #28]
 8000eb0:	61b9      	str	r1, [r7, #24]
 8000eb2:	617a      	str	r2, [r7, #20]
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	ed87 0a03 	vstr	s0, [r7, #12]
 8000eba:	edc7 0a02 	vstr	s1, [r7, #8]
 8000ebe:	ed87 1a01 	vstr	s2, [r7, #4]
		: motor(motor),
		  encoder(encoder),
		  control_frequency_Hz(control_frequency_Hz),
		  K_P(K_P),
		  K_I(K_I),
		  K_D(K_D)
 8000ec2:	4a16      	ldr	r2, [pc, #88]	@ (8000f1c <_ZN12MotorControlC1EP15TB6612FNG_MotorP13PololuEncodermfff+0x74>)
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	601a      	str	r2, [r3, #0]
		: motor(motor),
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	605a      	str	r2, [r3, #4]
		  encoder(encoder),
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	609a      	str	r2, [r3, #8]
		  control_frequency_Hz(control_frequency_Hz),
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	60da      	str	r2, [r3, #12]
		  K_P(K_P),
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	68fa      	ldr	r2, [r7, #12]
 8000ede:	611a      	str	r2, [r3, #16]
		  K_I(K_I),
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	615a      	str	r2, [r3, #20]
		  K_D(K_D)
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	619a      	str	r2, [r3, #24]
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f04f 0200 	mov.w	r2, #0
 8000ef2:	61da      	str	r2, [r3, #28]
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f04f 0200 	mov.w	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	625a      	str	r2, [r3, #36]	@ 0x24
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	2200      	movs	r2, #0
 8000f08:	859a      	strh	r2, [r3, #44]	@ 0x2c
{
	reinitialize();
 8000f0a:	69f8      	ldr	r0, [r7, #28]
 8000f0c:	f000 f95b 	bl	80011c6 <_ZN12MotorControl12reinitializeEv>
}
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	4618      	mov	r0, r3
 8000f14:	3720      	adds	r7, #32
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	08008cbc 	.word	0x08008cbc

08000f20 <_ZN12MotorControlD1Ev>:

MotorControl::~MotorControl()
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	4a06      	ldr	r2, [pc, #24]	@ (8000f44 <_ZN12MotorControlD1Ev+0x24>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	601a      	str	r2, [r3, #0]
{
	motor->stop();
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 fdb7 	bl	8001aa6 <_ZN15TB6612FNG_Motor4stopEv>
}
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	08008cbc 	.word	0x08008cbc

08000f48 <_ZN12MotorControlD0Ev>:
MotorControl::~MotorControl()
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
}
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff ffe5 	bl	8000f20 <_ZN12MotorControlD1Ev>
 8000f56:	2134      	movs	r1, #52	@ 0x34
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f004 ffa1 	bl	8005ea0 <_ZdlPvj>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <_ZN12MotorControl13debug_messageEP20__UART_HandleTypeDef>:


void MotorControl::debug_message(UART_HandleTypeDef* uart_handle)
{
 8000f68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f6c:	b0ad      	sub	sp, #180	@ 0xb4
 8000f6e:	af0e      	add	r7, sp, #56	@ 0x38
 8000f70:	60f8      	str	r0, [r7, #12]
 8000f72:	60b9      	str	r1, [r7, #8]
	#define VALUE_WIDTH 5
	#define MESSAGE_LENGTH 100
	char my_message[MESSAGE_LENGTH] = "";
 8000f74:	2300      	movs	r3, #0
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2260      	movs	r2, #96	@ 0x60
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f005 fe22 	bl	8006bca <memset>
    int string_length = snprintf(my_message, MESSAGE_LENGTH, "SP %*.2f, EFF: %*i/%*i, ERR: %*.3f RPM, Intgtr: %*.3f \r\n",
    						 VALUE_WIDTH, SP,
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    int string_length = snprintf(my_message, MESSAGE_LENGTH, "SP %*.2f, EFF: %*i/%*i, ERR: %*.3f RPM, Intgtr: %*.3f \r\n",
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fae4 	bl	8000558 <__aeabi_f2d>
 8000f90:	4604      	mov	r4, r0
 8000f92:	460d      	mov	r5, r1
                             VALUE_WIDTH, effort,
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
    int string_length = snprintf(my_message, MESSAGE_LENGTH, "SP %*.2f, EFF: %*i/%*i, ERR: %*.3f RPM, Intgtr: %*.3f \r\n",
 8000f9a:	461e      	mov	r6, r3
							 VALUE_WIDTH, saturation_limit,
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
    int string_length = snprintf(my_message, MESSAGE_LENGTH, "SP %*.2f, EFF: %*i/%*i, ERR: %*.3f RPM, Intgtr: %*.3f \r\n",
 8000fa2:	607b      	str	r3, [r7, #4]
							 VALUE_WIDTH, error,
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	6a1b      	ldr	r3, [r3, #32]
    int string_length = snprintf(my_message, MESSAGE_LENGTH, "SP %*.2f, EFF: %*i/%*i, ERR: %*.3f RPM, Intgtr: %*.3f \r\n",
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fad5 	bl	8000558 <__aeabi_f2d>
 8000fae:	4680      	mov	r8, r0
 8000fb0:	4689      	mov	r9, r1
							 VALUE_WIDTH, running_error );
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    int string_length = snprintf(my_message, MESSAGE_LENGTH, "SP %*.2f, EFF: %*i/%*i, ERR: %*.3f RPM, Intgtr: %*.3f \r\n",
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff face 	bl	8000558 <__aeabi_f2d>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	f107 0010 	add.w	r0, r7, #16
 8000fc4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8000fc8:	2305      	movs	r3, #5
 8000fca:	930a      	str	r3, [sp, #40]	@ 0x28
 8000fcc:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8000fd0:	2305      	movs	r3, #5
 8000fd2:	9306      	str	r3, [sp, #24]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	9305      	str	r3, [sp, #20]
 8000fd8:	2305      	movs	r3, #5
 8000fda:	9304      	str	r3, [sp, #16]
 8000fdc:	9603      	str	r6, [sp, #12]
 8000fde:	2305      	movs	r3, #5
 8000fe0:	9302      	str	r3, [sp, #8]
 8000fe2:	e9cd 4500 	strd	r4, r5, [sp]
 8000fe6:	2305      	movs	r3, #5
 8000fe8:	4a0c      	ldr	r2, [pc, #48]	@ (800101c <_ZN12MotorControl13debug_messageEP20__UART_HandleTypeDef+0xb4>)
 8000fea:	2164      	movs	r1, #100	@ 0x64
 8000fec:	f005 fd56 	bl	8006a9c <sniprintf>
 8000ff0:	6778      	str	r0, [r7, #116]	@ 0x74
    HAL_UART_Transmit(uart_handle, (uint8_t*)my_message, string_length, HAL_MAX_DELAY);
 8000ff2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	f107 0110 	add.w	r1, r7, #16
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	68b8      	ldr	r0, [r7, #8]
 8001000:	f004 fb92 	bl	8005728 <HAL_UART_Transmit>
    encoder->debug_message(uart_handle);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f9f4 	bl	80013f8 <_ZN13PololuEncoder13debug_messageEP20__UART_HandleTypeDef>
}
 8001010:	bf00      	nop
 8001012:	377c      	adds	r7, #124	@ 0x7c
 8001014:	46bd      	mov	sp, r7
 8001016:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800101a:	bf00      	nop
 800101c:	08008c00 	.word	0x08008c00

08001020 <_ZN12MotorControl3runEf>:

void MotorControl::run(float setpoint)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	ed87 0a00 	vstr	s0, [r7]
	// Store to the class
	SP = setpoint;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	631a      	str	r2, [r3, #48]	@ 0x30

	// Grab the latest data from the encoder.
	encoder->update();
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	4618      	mov	r0, r3
 8001038:	f000 f946 	bl	80012c8 <_ZN13PololuEncoder6updateEv>
	float process_value = encoder->get_speed(control_frequency_Hz);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	4619      	mov	r1, r3
 8001046:	4610      	mov	r0, r2
 8001048:	f000 f998 	bl	800137c <_ZN13PololuEncoder9get_speedEm>
 800104c:	ed87 0a03 	vstr	s0, [r7, #12]

	// Get the effort and send to motor
	get_effort_sat(setpoint, process_value);
 8001050:	edd7 0a03 	vldr	s1, [r7, #12]
 8001054:	ed97 0a00 	vldr	s0, [r7]
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f000 f80f 	bl	800107c <_ZN12MotorControl14get_effort_satEff>
	motor->set_duty(effort, saturation_limit);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6858      	ldr	r0, [r3, #4]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f9b3 102c 	ldrsh.w	r1, [r3, #44]	@ 0x2c
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 800106e:	461a      	mov	r2, r3
 8001070:	f000 fc9a 	bl	80019a8 <_ZN15TB6612FNG_Motor8set_dutyEss>
}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <_ZN12MotorControl14get_effort_satEff>:

int16_t MotorControl::get_effort_sat(
					float setpoint,
					float process_value
					)
{
 800107c:	b480      	push	{r7}
 800107e:	b089      	sub	sp, #36	@ 0x24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	ed87 0a02 	vstr	s0, [r7, #8]
 8001088:	edc7 0a01 	vstr	s1, [r7, #4]
	// Calculating error for P control
	error = setpoint - process_value; // RPM, a float
 800108c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001090:	edd7 7a01 	vldr	s15, [r7, #4]
 8001094:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	edc3 7a08 	vstr	s15, [r3, #32]

	// Calculating running error for I control
	running_error += error/(control_frequency_Hz); // RPM*s, float arithmetic cast to an int
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	ed93 6a08 	vldr	s12, [r3, #32]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	ee07 3a90 	vmov	s15, r3
 80010b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80010b6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80010ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
//	{
//		running_error += 0;
//	}

	// Calculating error slope for D control
	error_slope = (error-last_error)*((float)control_frequency_Hz); // RPM/s, a float
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	ed93 7a08 	vldr	s14, [r3, #32]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	edd3 7a07 	vldr	s15, [r3, #28]
 80010d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	ee07 3a90 	vmov	s15, r3
 80010dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	last_error = error;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6a1a      	ldr	r2, [r3, #32]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	61da      	str	r2, [r3, #28]

	// Controller effort
    float P_effort = K_P*error;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	ed93 7a04 	vldr	s14, [r3, #16]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	edd3 7a08 	vldr	s15, [r3, #32]
 80010fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001102:	edc7 7a07 	vstr	s15, [r7, #28]
    float I_effort = K_I*running_error;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	ed93 7a05 	vldr	s14, [r3, #20]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001116:	edc7 7a06 	vstr	s15, [r7, #24]
    float D_effort = K_D*error_slope;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112a:	edc7 7a05 	vstr	s15, [r7, #20]
    float effort_unsat = P_effort + I_effort + D_effort;
 800112e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001132:	edd7 7a06 	vldr	s15, [r7, #24]
 8001136:	ee77 7a27 	vadd.f32	s15, s14, s15
 800113a:	ed97 7a05 	vldr	s14, [r7, #20]
 800113e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001142:	edc7 7a04 	vstr	s15, [r7, #16]

    // Saturation
	if (effort_unsat > (float)saturation_limit)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 800114c:	ee07 3a90 	vmov	s15, r3
 8001150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001154:	ed97 7a04 	vldr	s14, [r7, #16]
 8001158:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800115c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001160:	dd05      	ble.n	800116e <_ZN12MotorControl14get_effort_satEff+0xf2>
	{
		effort = saturation_limit;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	@ 0x2e
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	859a      	strh	r2, [r3, #44]	@ 0x2c
 800116c:	e022      	b.n	80011b4 <_ZN12MotorControl14get_effort_satEff+0x138>
	}
	else if (effort_unsat < -1*(float)saturation_limit)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8001174:	ee07 3a90 	vmov	s15, r3
 8001178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800117c:	eef1 7a67 	vneg.f32	s15, s15
 8001180:	ed97 7a04 	vldr	s14, [r7, #16]
 8001184:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118c:	d509      	bpl.n	80011a2 <_ZN12MotorControl14get_effort_satEff+0x126>
	{
		effort = -saturation_limit;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8001194:	b29b      	uxth	r3, r3
 8001196:	425b      	negs	r3, r3
 8001198:	b29b      	uxth	r3, r3
 800119a:	b21a      	sxth	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	859a      	strh	r2, [r3, #44]	@ 0x2c
 80011a0:	e008      	b.n	80011b4 <_ZN12MotorControl14get_effort_satEff+0x138>
	}
	else
	{
		effort = (int16_t)effort_unsat;
 80011a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80011a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011aa:	ee17 3a90 	vmov	r3, s15
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	859a      	strh	r2, [r3, #44]	@ 0x2c
	}

	return effort;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3724      	adds	r7, #36	@ 0x24
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <_ZN12MotorControl12reinitializeEv>:

void MotorControl::reinitialize()
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
	// Stop motor
	motor->set_duty(0);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2264      	movs	r2, #100	@ 0x64
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 fbe6 	bl	80019a8 <_ZN15TB6612FNG_Motor8set_dutyEss>

	// Reset important stuff
	last_error = 0;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	61da      	str	r2, [r3, #28]
    error = 0;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f04f 0200 	mov.w	r2, #0
 80011ea:	621a      	str	r2, [r3, #32]
    effort = 0;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	859a      	strh	r2, [r3, #44]	@ 0x2c
    running_error = 0; // Most important
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f04f 0200 	mov.w	r2, #0
 80011f8:	625a      	str	r2, [r3, #36]	@ 0x24

    // Grab the new saturation limit.
    saturation_limit = motor->timer_handle->Instance->ARR; // Assuming no prescalar is used.
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001204:	b21a      	sxth	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	85da      	strh	r2, [r3, #46]	@ 0x2e
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb>:
 * @date Jun 2, 2024
 */

#include "PololuEncoder.h"

PololuEncoder::PololuEncoder(
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	4611      	mov	r1, r2
 8001220:	ed87 0a00 	vstr	s0, [r7]
 8001224:	461a      	mov	r2, r3
 8001226:	460b      	mov	r3, r1
 8001228:	80fb      	strh	r3, [r7, #6]
 800122a:	4613      	mov	r3, r2
 800122c:	717b      	strb	r3, [r7, #5]
		)
		: timer_handle(timer_handle),
		  CPR(CPR),
		  gear_ratio(gear_ratio),
		  timer_bit_size(timer_bit_size),
		  interrupt_mode(interrupt_mode)
 800122e:	4a25      	ldr	r2, [pc, #148]	@ (80012c4 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0xb0>)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	601a      	str	r2, [r3, #0]
		: timer_handle(timer_handle),
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	605a      	str	r2, [r3, #4]
		  CPR(CPR),
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	88fa      	ldrh	r2, [r7, #6]
 800123e:	811a      	strh	r2, [r3, #8]
		  gear_ratio(gear_ratio),
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	60da      	str	r2, [r3, #12]
		  timer_bit_size(timer_bit_size),
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	797a      	ldrb	r2, [r7, #5]
 800124a:	741a      	strb	r2, [r3, #16]
		  interrupt_mode(interrupt_mode)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	7e3a      	ldrb	r2, [r7, #24]
 8001250:	745a      	strb	r2, [r3, #17]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2200      	movs	r2, #0
 8001256:	825a      	strh	r2, [r3, #18]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2200      	movs	r2, #0
 800125c:	829a      	strh	r2, [r3, #20]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2200      	movs	r2, #0
 8001262:	82da      	strh	r2, [r3, #22]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
{
	// Start encoder
	if (interrupt_mode)
 8001272:	7e3b      	ldrb	r3, [r7, #24]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d004      	beq.n	8001282 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0x6e>
	{
		HAL_TIM_Encoder_Start_IT(timer_handle, TIM_CHANNEL_ALL);
 8001278:	213c      	movs	r1, #60	@ 0x3c
 800127a:	68b8      	ldr	r0, [r7, #8]
 800127c:	f003 f8b1 	bl	80043e2 <HAL_TIM_Encoder_Start_IT>
 8001280:	e003      	b.n	800128a <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0x76>
	}
	else
	{
		HAL_TIM_Encoder_Start(timer_handle, TIM_CHANNEL_ALL);
 8001282:	213c      	movs	r1, #60	@ 0x3c
 8001284:	68b8      	ldr	r0, [r7, #8]
 8001286:	f002 ff87 	bl	8004198 <HAL_TIM_Encoder_Start>
	}

	// Number of bits for the select timer
	if (timer_bit_size == 32)
 800128a:	797b      	ldrb	r3, [r7, #5]
 800128c:	2b20      	cmp	r3, #32
 800128e:	d104      	bne.n	800129a <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0x86>
	{
		max_count = 0xffffffff;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f04f 32ff 	mov.w	r2, #4294967295
 8001296:	621a      	str	r2, [r3, #32]
 8001298:	e003      	b.n	80012a2 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0x8e>
	}
	else
	{
		max_count = 0xffff;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012a0:	621a      	str	r2, [r3, #32]
	}
	half_max_count = max_count/2;
	neg_half_max_count = -half_max_count;
}
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	6a1b      	ldr	r3, [r3, #32]
 80012a6:	085b      	lsrs	r3, r3, #1
 80012a8:	461a      	mov	r2, r3
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	625a      	str	r2, [r3, #36]	@ 0x24

 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b2:	425a      	negs	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	629a      	str	r2, [r3, #40]	@ 0x28
void PololuEncoder::update()
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	08008ccc 	.word	0x08008ccc

080012c8 <_ZN13PololuEncoder6updateEv>:
{
	// Read encoder
	if (not interrupt_mode)
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	{
		count = __HAL_TIM_GET_COUNTER(timer_handle);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	7c5b      	ldrb	r3, [r3, #17]
 80012d4:	f083 0301 	eor.w	r3, r3, #1
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d006      	beq.n	80012ec <_ZN13PololuEncoder6updateEv+0x24>
	}
	delta = (int32_t) (count-last_count);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	82da      	strh	r2, [r3, #22]
	last_count = count;

 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	8ada      	ldrh	r2, [r3, #22]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	8a9b      	ldrh	r3, [r3, #20]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	b21a      	sxth	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	825a      	strh	r2, [r3, #18]
	// Fix delta from timer overflow
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	8ada      	ldrh	r2, [r3, #22]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	829a      	strh	r2, [r3, #20]
	if (delta > half_max_count)
	{
		// We've overflowed in the negative direction.
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800130c:	461a      	mov	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001312:	429a      	cmp	r2, r3
 8001314:	dd0e      	ble.n	8001334 <_ZN13PololuEncoder6updateEv+0x6c>
		delta -= max_count + 1;
	}
	else if (delta < neg_half_max_count)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800131c:	b29a      	uxth	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a1b      	ldr	r3, [r3, #32]
 8001322:	b29b      	uxth	r3, r3
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	b29b      	uxth	r3, r3
 8001328:	3b01      	subs	r3, #1
 800132a:	b29b      	uxth	r3, r3
 800132c:	b21a      	sxth	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	825a      	strh	r2, [r3, #18]
 8001332:	e015      	b.n	8001360 <_ZN13PololuEncoder6updateEv+0x98>
	{
	    // We've overflowed in the positive direciton.
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800133a:	461a      	mov	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001340:	429a      	cmp	r2, r3
 8001342:	da0d      	bge.n	8001360 <_ZN13PololuEncoder6updateEv+0x98>
		delta += max_count + 1;
	}

 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800134a:	b29a      	uxth	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	b29b      	uxth	r3, r3
 8001352:	4413      	add	r3, r2
 8001354:	b29b      	uxth	r3, r3
 8001356:	3301      	adds	r3, #1
 8001358:	b29b      	uxth	r3, r3
 800135a:	b21a      	sxth	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	825a      	strh	r2, [r3, #18]
	// Finish up
	position += delta;
}

 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800136a:	441a      	add	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	619a      	str	r2, [r3, #24]
void PololuEncoder::zero()
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <_ZN13PololuEncoder9get_speedEm>:
}

float PololuEncoder::get_speed(uint32_t control_frequency_Hz)
{
	float numerator = delta*(float)control_frequency_Hz*60;
	float denominator = (float)CPR*gear_ratio;
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
    speed = numerator/denominator; //RPM
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800138c:	ee07 3a90 	vmov	s15, r3
 8001390:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	ee07 3a90 	vmov	s15, r3
 800139a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800139e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013a2:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80013f4 <_ZN13PololuEncoder9get_speedEm+0x78>
 80013a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013aa:	edc7 7a03 	vstr	s15, [r7, #12]
    return speed;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	edd3 7a03 	vldr	s15, [r3, #12]
 80013c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c6:	edc7 7a02 	vstr	s15, [r7, #8]
}
 80013ca:	edd7 6a03 	vldr	s13, [r7, #12]
 80013ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80013d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	edc3 7a07 	vstr	s15, [r3, #28]

 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69db      	ldr	r3, [r3, #28]
 80013e0:	ee07 3a90 	vmov	s15, r3
void PololuEncoder::debug_message(UART_HandleTypeDef* uart_handle)
 80013e4:	eeb0 0a67 	vmov.f32	s0, s15
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	42700000 	.word	0x42700000

080013f8 <_ZN13PololuEncoder13debug_messageEP20__UART_HandleTypeDef>:
{
	#define VALUE_WIDTH 5
	#define MESSAGE_LENGTH 100
 80013f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fa:	b0a5      	sub	sp, #148	@ 0x94
 80013fc:	af08      	add	r7, sp, #32
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
	char my_message[MESSAGE_LENGTH] = "";
    int string_length = snprintf(my_message, MESSAGE_LENGTH, "Encoder cnt: %*i, pos: %*li, delta: %*i, speed: %*.3f RPM.\r\n",
                             VALUE_WIDTH, count,
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	2260      	movs	r2, #96	@ 0x60
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f005 fbdb 	bl	8006bca <memset>
                             VALUE_WIDTH, position,
                             VALUE_WIDTH, delta,
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	8adb      	ldrh	r3, [r3, #22]
                             VALUE_WIDTH, position,
 8001418:	461d      	mov	r5, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	699c      	ldr	r4, [r3, #24]
							 VALUE_WIDTH+3, speed);
    HAL_UART_Transmit(uart_handle, (uint8_t*)my_message, string_length, HAL_MAX_DELAY);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
                             VALUE_WIDTH, position,
 8001424:	461e      	mov	r6, r3
}
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69db      	ldr	r3, [r3, #28]
                             VALUE_WIDTH, position,
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff f894 	bl	8000558 <__aeabi_f2d>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	f107 0008 	add.w	r0, r7, #8
 8001438:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800143c:	2308      	movs	r3, #8
 800143e:	9305      	str	r3, [sp, #20]
 8001440:	9604      	str	r6, [sp, #16]
 8001442:	2305      	movs	r3, #5
 8001444:	9303      	str	r3, [sp, #12]
 8001446:	9402      	str	r4, [sp, #8]
 8001448:	2305      	movs	r3, #5
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	9500      	str	r5, [sp, #0]
 800144e:	2305      	movs	r3, #5
 8001450:	4a08      	ldr	r2, [pc, #32]	@ (8001474 <_ZN13PololuEncoder13debug_messageEP20__UART_HandleTypeDef+0x7c>)
 8001452:	2164      	movs	r1, #100	@ 0x64
 8001454:	f005 fb22 	bl	8006a9c <sniprintf>
 8001458:	66f8      	str	r0, [r7, #108]	@ 0x6c

 800145a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800145c:	b29a      	uxth	r2, r3
 800145e:	f107 0108 	add.w	r1, r7, #8
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	6838      	ldr	r0, [r7, #0]
 8001468:	f004 f95e 	bl	8005728 <HAL_UART_Transmit>
PololuEncoder::~PololuEncoder()
 800146c:	bf00      	nop
 800146e:	3774      	adds	r7, #116	@ 0x74
 8001470:	46bd      	mov	sp, r7
 8001472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001474:	08008c3c 	.word	0x08008c3c

08001478 <_ZN13PololuEncoderD1Ev>:
{
	// TODO Auto-generated destructor stub
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	4a0c      	ldr	r2, [pc, #48]	@ (80014b4 <_ZN13PololuEncoderD1Ev+0x3c>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	601a      	str	r2, [r3, #0]
}

 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	7c5b      	ldrb	r3, [r3, #17]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d006      	beq.n	800149c <_ZN13PololuEncoderD1Ev+0x24>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	213c      	movs	r1, #60	@ 0x3c
 8001494:	4618      	mov	r0, r3
 8001496:	f003 f852 	bl	800453e <HAL_TIM_Encoder_Stop_IT>
 800149a:	e005      	b.n	80014a8 <_ZN13PololuEncoderD1Ev+0x30>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	213c      	movs	r1, #60	@ 0x3c
 80014a2:	4618      	mov	r0, r3
 80014a4:	f002 ff06 	bl	80042b4 <HAL_TIM_Encoder_Stop>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	08008ccc 	.word	0x08008ccc

080014b8 <_ZN13PololuEncoderD0Ev>:
	// TODO Auto-generated destructor stub
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ffd9 	bl	8001478 <_ZN13PololuEncoderD1Ev>
 80014c6:	212c      	movs	r1, #44	@ 0x2c
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f004 fce9 	bl	8005ea0 <_ZdlPvj>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb>:
 * @param neutral_us_width Width of the neutral signal in microseconds.
 * @param full_forward_us_width Width of the full forward signal in microseconds.
 * @param rescale_forward_magnitude Maximum value for rescaling the forward signal. Overridden if fed into RemoteControlControl.
 * @param rescale_reverse_magnitude Minimum value for rescaling the reverse signal. Overridden if fed into RemoteControlControl.
 */
RCChannel::RCChannel(
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	4613      	mov	r3, r2
 80014e6:	80fb      	strh	r3, [r7, #6]
	full_reverse_us_width(full_reverse_us_width),
	neutral_us_width(neutral_us_width),
	full_forward_us_width(full_forward_us_width),
	rescale_forward_magnitude(rescale_forward_magnitude),
	rescale_reverse_magnitude(rescale_reverse_magnitude),
	saturate(saturate)
 80014e8:	4a3c      	ldr	r2, [pc, #240]	@ (80015dc <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0x104>)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2200      	movs	r2, #0
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2200      	movs	r2, #0
 8001504:	611a      	str	r2, [r3, #16]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2200      	movs	r2, #0
 800150a:	615a      	str	r2, [r3, #20]
	pin_group(pin_group),
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	619a      	str	r2, [r3, #24]
	pin(pin),
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	88fa      	ldrh	r2, [r7, #6]
 8001516:	839a      	strh	r2, [r3, #28]
	timer_handle(timer_handle),
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	621a      	str	r2, [r3, #32]
	timer_channel(timer_channel),
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6a3a      	ldr	r2, [r7, #32]
 8001522:	625a      	str	r2, [r3, #36]	@ 0x24
	RC_signal_period_us(RC_signal_period_us),
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001528:	629a      	str	r2, [r3, #40]	@ 0x28
	CPU_clock_speed_MHz(CPU_clock_speed_MHz),
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800152e:	62da      	str	r2, [r3, #44]	@ 0x2c
	full_reverse_us_width(full_reverse_us_width),
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001534:	631a      	str	r2, [r3, #48]	@ 0x30
	neutral_us_width(neutral_us_width),
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800153a:	635a      	str	r2, [r3, #52]	@ 0x34
	full_forward_us_width(full_forward_us_width),
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001540:	639a      	str	r2, [r3, #56]	@ 0x38
	rescale_forward_magnitude(rescale_forward_magnitude),
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001546:	63da      	str	r2, [r3, #60]	@ 0x3c
	rescale_reverse_magnitude(rescale_reverse_magnitude),
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800154c:	641a      	str	r2, [r3, #64]	@ 0x40
	saturate(saturate)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001554:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
{
	// Critical. Starts the first interrupt.
	HAL_TIM_IC_Start_IT(timer_handle, timer_channel);
 8001560:	6a39      	ldr	r1, [r7, #32]
 8001562:	6838      	ldr	r0, [r7, #0]
 8001564:	f002 fbaa 	bl	8003cbc <HAL_TIM_IC_Start_IT>

	// Set minuend depending on whether it's a 16-bit or 32-bit timer.
	// This is specific to the STM32F411CUE6!!
	if (((timer_handle->Instance) == TIM2) or ((timer_handle->Instance) == TIM5))
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001570:	d004      	beq.n	800157c <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0xa4>
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a1a      	ldr	r2, [pc, #104]	@ (80015e0 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0x108>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d104      	bne.n	8001586 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0xae>
	{
		minuend = 0xffffffff;
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f04f 32ff 	mov.w	r2, #4294967295
 8001582:	649a      	str	r2, [r3, #72]	@ 0x48
 8001584:	e003      	b.n	800158e <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0xb6>
	}
	else
	{
		minuend = 0xffff;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800158c:	649a      	str	r2, [r3, #72]	@ 0x48
	}

	// For later scaling
	uint32_t prescalar = timer_handle->Instance->PSC + 1;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001594:	3301      	adds	r3, #1
 8001596:	617b      	str	r3, [r7, #20]
	float refClock = CPU_clock_speed_MHz/prescalar;
 8001598:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a0:	ee07 3a90 	vmov	s15, r3
 80015a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015a8:	edc7 7a04 	vstr	s15, [r7, #16]
	mFactor = 1/refClock;
 80015ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80015b0:	ed97 7a04 	vldr	s14, [r7, #16]
 80015b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

	// Needed later
	forward_range = full_forward_us_width - neutral_us_width;
 80015be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80015c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015c2:	1ad2      	subs	r2, r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	659a      	str	r2, [r3, #88]	@ 0x58
	reverse_range = neutral_us_width - full_reverse_us_width;
 80015c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80015ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015cc:	1ad2      	subs	r2, r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	655a      	str	r2, [r3, #84]	@ 0x54
}
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	4618      	mov	r0, r3
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	08008cdc 	.word	0x08008cdc
 80015e0:	40000c00 	.word	0x40000c00

080015e4 <_ZN9RCChannel8callbackEv>:
 * 
 * @note This function assumes that the timer handle and channel have been properly initialized.
 * Please set the associated timer channel to input capture mode, direct. 
 * Leave the auto-reload value as large as possible.
 */
void RCChannel::callback(){
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	// Was it a rising edge or a falling edge?
	GPIO_PinState pinState = HAL_GPIO_ReadPin(pin_group, pin);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	699a      	ldr	r2, [r3, #24]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	8b9b      	ldrh	r3, [r3, #28]
 80015f4:	4619      	mov	r1, r3
 80015f6:	4610      	mov	r0, r2
 80015f8:	f001 fc8e 	bl	8002f18 <HAL_GPIO_ReadPin>
 80015fc:	4603      	mov	r3, r0
 80015fe:	73fb      	strb	r3, [r7, #15]

	if(pinState == GPIO_PIN_SET) // Rising edge
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d10c      	bne.n	8001620 <_ZN9RCChannel8callbackEv+0x3c>
		{
			// Read
			first_value = HAL_TIM_ReadCapturedValue(timer_handle, timer_channel);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a1a      	ldr	r2, [r3, #32]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800160e:	4619      	mov	r1, r3
 8001610:	4610      	mov	r0, r2
 8001612:	f003 fb5f 	bl	8004cd4 <HAL_TIM_ReadCapturedValue>
 8001616:	4603      	mov	r3, r0
 8001618:	461a      	mov	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	605a      	str	r2, [r3, #4]
		}

 	// Finally
 	first_capture = true;
 	}
}
 800161e:	e07a      	b.n	8001716 <_ZN9RCChannel8callbackEv+0x132>
 		second_value = HAL_TIM_ReadCapturedValue(timer_handle, timer_channel);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a1a      	ldr	r2, [r3, #32]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001628:	4619      	mov	r1, r3
 800162a:	4610      	mov	r0, r2
 800162c:	f003 fb52 	bl	8004cd4 <HAL_TIM_ReadCapturedValue>
 8001630:	4603      	mov	r3, r0
 8001632:	461a      	mov	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	609a      	str	r2, [r3, #8]
 		if(first_value > second_value)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	429a      	cmp	r2, r3
 8001642:	dd0c      	ble.n	800165e <_ZN9RCChannel8callbackEv+0x7a>
 			difference = minuend - first_value + second_value + 1;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	6852      	ldr	r2, [r2, #4]
 800164c:	1a9b      	subs	r3, r3, r2
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	6892      	ldr	r2, [r2, #8]
 8001652:	4413      	add	r3, r2
 8001654:	3301      	adds	r3, #1
 8001656:	461a      	mov	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	60da      	str	r2, [r3, #12]
 800165c:	e006      	b.n	800166c <_ZN9RCChannel8callbackEv+0x88>
 			difference = second_value - first_value;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	1ad2      	subs	r2, r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	60da      	str	r2, [r3, #12]
 		us_width = difference;//*mFactor;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68da      	ldr	r2, [r3, #12]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	611a      	str	r2, [r3, #16]
		int32_t centered_value = us_width - neutral_us_width;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	691a      	ldr	r2, [r3, #16]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	60bb      	str	r3, [r7, #8]
 		if(centered_value >= 0)
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	2b00      	cmp	r3, #0
 8001684:	db23      	blt.n	80016ce <_ZN9RCChannel8callbackEv+0xea>
 			value = centered_value*rescale_forward_magnitude/forward_range;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	fb03 f202 	mul.w	r2, r3, r2
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001694:	fb92 f2f3 	sdiv	r2, r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	615a      	str	r2, [r3, #20]
			if(value>rescale_forward_magnitude && saturate)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	695a      	ldr	r2, [r3, #20]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016a4:	429a      	cmp	r2, r3
 80016a6:	dd0d      	ble.n	80016c4 <_ZN9RCChannel8callbackEv+0xe0>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d008      	beq.n	80016c4 <_ZN9RCChannel8callbackEv+0xe0>
				value = rescale_forward_magnitude;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	615a      	str	r2, [r3, #20]
	 			saturate_flag = true;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2201      	movs	r2, #1
 80016be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80016c2:	e024      	b.n	800170e <_ZN9RCChannel8callbackEv+0x12a>
	 			saturate_flag = false;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80016cc:	e01f      	b.n	800170e <_ZN9RCChannel8callbackEv+0x12a>
			value =  centered_value*rescale_reverse_magnitude/reverse_range;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	68ba      	ldr	r2, [r7, #8]
 80016d4:	fb03 f202 	mul.w	r2, r3, r2
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016dc:	fb92 f2f3 	sdiv	r2, r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	615a      	str	r2, [r3, #20]
	 		if(value<-rescale_reverse_magnitude)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	695a      	ldr	r2, [r3, #20]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ec:	425b      	negs	r3, r3
 80016ee:	429a      	cmp	r2, r3
 80016f0:	da09      	bge.n	8001706 <_ZN9RCChannel8callbackEv+0x122>
	 			value = -rescale_reverse_magnitude;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f6:	425a      	negs	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	615a      	str	r2, [r3, #20]
	 			saturate_flag = true;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001704:	e003      	b.n	800170e <_ZN9RCChannel8callbackEv+0x12a>
	 			saturate_flag = false;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 	first_capture = true;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 8001716:	bf00      	nop
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <_ZN9RCChannelD1Ev>:
/**
 * @brief Destructor for the RCChannel class.
 * 
 * This destructor stops the interrupts for the RCChannel object.
 */
RCChannel::~RCChannel() {
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	4a07      	ldr	r2, [pc, #28]	@ (8001748 <_ZN9RCChannelD1Ev+0x28>)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	601a      	str	r2, [r3, #0]
	// Stop interrupts
	HAL_TIM_IC_Stop_IT(timer_handle, timer_channel);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a1a      	ldr	r2, [r3, #32]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001736:	4619      	mov	r1, r3
 8001738:	4610      	mov	r0, r2
 800173a:	f002 fbd9 	bl	8003ef0 <HAL_TIM_IC_Stop_IT>
}
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	08008cdc 	.word	0x08008cdc

0800174c <_ZN9RCChannelD0Ev>:
RCChannel::~RCChannel() {
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
}
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ffe3 	bl	8001720 <_ZN9RCChannelD1Ev>
 800175a:	215c      	movs	r1, #92	@ 0x5c
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f004 fb9f 	bl	8005ea0 <_ZdlPvj>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <_ZN20RemoteControlControlC1EP9RCChannelP12MotorControlt>:
/**
 * @brief Constructs a RemoteControlControl object with the given remote control channel and motor driver.
 * @param rc_channel Pointer to the RCChannel object.
 * @param motor Pointer to a TB6612FNG_Motor object.
 */
RemoteControlControl::RemoteControlControl(
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
 8001778:	807b      	strh	r3, [r7, #2]
		RCChannel* rc_channel,
		MotorControl* motor_controller,
		uint16_t maximum_speed)
	: rc_channel(rc_channel),
	  motor_controller(motor_controller),
	  maximum_speed(maximum_speed)
 800177a:	4a09      	ldr	r2, [pc, #36]	@ (80017a0 <_ZN20RemoteControlControlC1EP9RCChannelP12MotorControlt+0x34>)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	601a      	str	r2, [r3, #0]
	: rc_channel(rc_channel),
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	605a      	str	r2, [r3, #4]
	  motor_controller(motor_controller),
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	609a      	str	r2, [r3, #8]
	  maximum_speed(maximum_speed)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	887a      	ldrh	r2, [r7, #2]
 8001790:	819a      	strh	r2, [r3, #12]
{
//	// Reassign the magnitudes.
//	rc_channel->rescale_forward_magnitude = maximum_speed;
//	rc_channel->rescale_reverse_magnitude = maximum_speed;
}
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4618      	mov	r0, r3
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	08008cec 	.word	0x08008cec

080017a4 <_ZN20RemoteControlControl12update_motorEv>:
/**
 * @brief Updates a TB6612FNG_Motor object based on the remote control channel value.
 * Run this function in your HAL_TIM_IC_CaptureCallback() function to update the motor as often as your RC sends new values.
 */
void RemoteControlControl::update_motor()
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	// Read from the remote control channel
	int32_t value = rc_channel->value;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	60fb      	str	r3, [r7, #12]

	// Rescale to maximum speed.
	if (value>=0)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	db19      	blt.n	80017ee <_ZN20RemoteControlControl12update_motorEv+0x4a>
	{
		setpoint = (float)value*(float)maximum_speed/((float)rc_channel->rescale_forward_magnitude);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	ee07 3a90 	vmov	s15, r3
 80017c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	899b      	ldrh	r3, [r3, #12]
 80017c8:	ee07 3a90 	vmov	s15, r3
 80017cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017d0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017da:	ee07 3a90 	vmov	s15, r3
 80017de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	edc3 7a04 	vstr	s15, [r3, #16]
 80017ec:	e018      	b.n	8001820 <_ZN20RemoteControlControl12update_motorEv+0x7c>
	}
	else
	{
		setpoint = (float)value*(float)maximum_speed/((float)rc_channel->rescale_reverse_magnitude);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	ee07 3a90 	vmov	s15, r3
 80017f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	899b      	ldrh	r3, [r3, #12]
 80017fc:	ee07 3a90 	vmov	s15, r3
 8001800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001804:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180e:	ee07 3a90 	vmov	s15, r3
 8001812:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001816:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	edc3 7a04 	vstr	s15, [r3, #16]
	}

	// Update the controller
	motor_controller->run(setpoint);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	edd3 7a04 	vldr	s15, [r3, #16]
 800182a:	eeb0 0a67 	vmov.f32	s0, s15
 800182e:	4610      	mov	r0, r2
 8001830:	f7ff fbf6 	bl	8001020 <_ZN12MotorControl3runEf>
}
 8001834:	bf00      	nop
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <_ZN20RemoteControlControlD1Ev>:

/**
 * @brief Destructs the RemoteControlControl object and releases any dynamically allocated resources.
 */
RemoteControlControl::~RemoteControlControl()
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	4a13      	ldr	r2, [pc, #76]	@ (8001894 <_ZN20RemoteControlControlD1Ev+0x58>)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	601a      	str	r2, [r3, #0]
{
	// Deallocate memory for rc_channel if it was dynamically allocated
	if (rc_channel != nullptr)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00b      	beq.n	800186a <_ZN20RemoteControlControlD1Ev+0x2e>
	{
		delete rc_channel;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d004      	beq.n	8001864 <_ZN20RemoteControlControlD1Ev+0x28>
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	3204      	adds	r2, #4
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	4790      	blx	r2
		rc_channel = nullptr; // Optional: Set to nullptr to avoid dangling pointers
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	605a      	str	r2, [r3, #4]
	}

	// Deallocate memory for motor if it was dynamically allocated
	if (motor_controller != nullptr)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00b      	beq.n	800188a <_ZN20RemoteControlControlD1Ev+0x4e>
	{
		delete motor_controller;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d004      	beq.n	8001884 <_ZN20RemoteControlControlD1Ev+0x48>
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	3204      	adds	r2, #4
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	4790      	blx	r2
		motor_controller = nullptr; // Optional: Set to nullptr to avoid dangling pointers
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
	}
}
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4618      	mov	r0, r3
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	08008cec 	.word	0x08008cec

08001898 <_ZN20RemoteControlControlD0Ev>:
RemoteControlControl::~RemoteControlControl()
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
}
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f7ff ffcb 	bl	800183c <_ZN20RemoteControlControlD1Ev>
 80018a6:	2114      	movs	r1, #20
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f004 faf9 	bl	8005ea0 <_ZdlPvj>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4618      	mov	r0, r3
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm>:
 * @param timer_channel The channel number to be used with the timer (like TIM_CHANNEL_1).
 * @param CPU_clock_speed_MHz The CPU clock speed in MHz (like 96).
 * @param PWM_frequency_Hz The PWM frequency in Hz (20,000 to 100,000 allowed).
 */

TB6612FNG_Motor::TB6612FNG_Motor(
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	4613      	mov	r3, r2
 80018c6:	80fb      	strh	r3, [r7, #6]

	: IN1_pin_group(IN1_pin_group), IN1_pin(IN1_pin),
	  IN2_pin_group(IN2_pin_group), IN2_pin(IN2_pin),
	  pTimer(pTimer), timer_channel(timer_channel),
	  CPU_clock_speed_MHz(CPU_clock_speed_MHz),
	  PWM_frequency_Hz(PWM_frequency_Hz)
 80018c8:	4a23      	ldr	r2, [pc, #140]	@ (8001958 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa0>)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	601a      	str	r2, [r3, #0]
	: IN1_pin_group(IN1_pin_group), IN1_pin(IN1_pin),
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	68ba      	ldr	r2, [r7, #8]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	88fa      	ldrh	r2, [r7, #6]
 80018d8:	811a      	strh	r2, [r3, #8]
	  IN2_pin_group(IN2_pin_group), IN2_pin(IN2_pin),
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8b3a      	ldrh	r2, [r7, #24]
 80018e4:	821a      	strh	r2, [r3, #16]
	  pTimer(pTimer), timer_channel(timer_channel),
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	69fa      	ldr	r2, [r7, #28]
 80018ea:	615a      	str	r2, [r3, #20]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6a3a      	ldr	r2, [r7, #32]
 80018f0:	619a      	str	r2, [r3, #24]
	  CPU_clock_speed_MHz(CPU_clock_speed_MHz),
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018f6:	61da      	str	r2, [r3, #28]
	  PWM_frequency_Hz(PWM_frequency_Hz)
 80018f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	841a      	strh	r2, [r3, #32]
{
	// Make sure the motor is off to start
	stop();
 8001900:	68f8      	ldr	r0, [r7, #12]
 8001902:	f000 f8d0 	bl	8001aa6 <_ZN15TB6612FNG_Motor4stopEv>

	// Make sure the PWM frequency is within bounds
	if(PWM_frequency_Hz < 20000)
 8001906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001908:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800190c:	4293      	cmp	r3, r2
 800190e:	d803      	bhi.n	8001918 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0x60>
	{
		// Too low. Human can hear this.
		PWM_frequency_Hz = 20000;
 8001910:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001914:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001916:	e005      	b.n	8001924 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0x6c>
	}
	else if(PWM_frequency_Hz > 100000)
 8001918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800191a:	4a10      	ldr	r2, [pc, #64]	@ (800195c <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa4>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d901      	bls.n	8001924 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0x6c>
	{
		// Very high. May interfere with other tasks.
		PWM_frequency_Hz = 100000;
 8001920:	4b0e      	ldr	r3, [pc, #56]	@ (800195c <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa4>)
 8001922:	62bb      	str	r3, [r7, #40]	@ 0x28
	}

	// Set the auto-reload value based on the CPU clock speed and the desired PWM frequency
	auto_reload_value =( CPU_clock_speed_MHz * 1000000 / PWM_frequency_Hz ) - 1;
 8001924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001926:	4a0e      	ldr	r2, [pc, #56]	@ (8001960 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa8>)
 8001928:	fb03 f202 	mul.w	r2, r3, r2
 800192c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800192e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001932:	b29b      	uxth	r3, r3
 8001934:	3b01      	subs	r3, #1
 8001936:	b29a      	uxth	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	845a      	strh	r2, [r3, #34]	@ 0x22
	pTimer->Init.AutoReloadPreload = auto_reload_value;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001940:	461a      	mov	r2, r3
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	619a      	str	r2, [r3, #24]

	// Start the PWM generation
	start();
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f000 f89d 	bl	8001a86 <_ZN15TB6612FNG_Motor5startEv>
}
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	08008cfc 	.word	0x08008cfc
 800195c:	000186a0 	.word	0x000186a0
 8001960:	000f4240 	.word	0x000f4240

08001964 <_ZN15TB6612FNG_MotorD1Ev>:

/**
 * @brief Destructor for the TB6612FNG_Motor class.
 */
TB6612FNG_Motor::~TB6612FNG_Motor()
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	4a05      	ldr	r2, [pc, #20]	@ (8001984 <_ZN15TB6612FNG_MotorD1Ev+0x20>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	601a      	str	r2, [r3, #0]
{
	stop();
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f000 f897 	bl	8001aa6 <_ZN15TB6612FNG_Motor4stopEv>
}
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	08008cfc 	.word	0x08008cfc

08001988 <_ZN15TB6612FNG_MotorD0Ev>:
TB6612FNG_Motor::~TB6612FNG_Motor()
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
}
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ffe7 	bl	8001964 <_ZN15TB6612FNG_MotorD1Ev>
 8001996:	2124      	movs	r1, #36	@ 0x24
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f004 fa81 	bl	8005ea0 <_ZdlPvj>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <_ZN15TB6612FNG_Motor8set_dutyEss>:
/**
 * @brief Sets the duty cycle of the motor.
 * @param speed The duty cycle value, ranging from -100 to 100 by default.
 */
void TB6612FNG_Motor::set_duty(int16_t duty, int16_t maximum_value)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	460b      	mov	r3, r1
 80019b2:	807b      	strh	r3, [r7, #2]
 80019b4:	4613      	mov	r3, r2
 80019b6:	803b      	strh	r3, [r7, #0]
	// Raise the appropriate pins
	if(duty >= 0)
 80019b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	db10      	blt.n	80019e2 <_ZN15TB6612FNG_Motor8set_dutyEss+0x3a>
	{
		HAL_GPIO_WritePin(IN1_pin_group, IN1_pin, GPIO_PIN_SET);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6858      	ldr	r0, [r3, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	891b      	ldrh	r3, [r3, #8]
 80019c8:	2201      	movs	r2, #1
 80019ca:	4619      	mov	r1, r3
 80019cc:	f001 fabc 	bl	8002f48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_pin_group, IN2_pin, GPIO_PIN_RESET);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68d8      	ldr	r0, [r3, #12]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	8a1b      	ldrh	r3, [r3, #16]
 80019d8:	2200      	movs	r2, #0
 80019da:	4619      	mov	r1, r3
 80019dc:	f001 fab4 	bl	8002f48 <HAL_GPIO_WritePin>
 80019e0:	e00f      	b.n	8001a02 <_ZN15TB6612FNG_Motor8set_dutyEss+0x5a>
	}
	else
	{
		HAL_GPIO_WritePin(IN1_pin_group, IN1_pin, GPIO_PIN_RESET);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6858      	ldr	r0, [r3, #4]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	891b      	ldrh	r3, [r3, #8]
 80019ea:	2200      	movs	r2, #0
 80019ec:	4619      	mov	r1, r3
 80019ee:	f001 faab 	bl	8002f48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_pin_group, IN2_pin, GPIO_PIN_SET);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	68d8      	ldr	r0, [r3, #12]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	8a1b      	ldrh	r3, [r3, #16]
 80019fa:	2201      	movs	r2, #1
 80019fc:	4619      	mov	r1, r3
 80019fe:	f001 faa3 	bl	8002f48 <HAL_GPIO_WritePin>
	}

	uint16_t duty_magnitude;
	if(duty<0)
 8001a02:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	da03      	bge.n	8001a12 <_ZN15TB6612FNG_Motor8set_dutyEss+0x6a>
	{
		duty_magnitude = duty*-1;
 8001a0a:	887b      	ldrh	r3, [r7, #2]
 8001a0c:	425b      	negs	r3, r3
 8001a0e:	81fb      	strh	r3, [r7, #14]
 8001a10:	e001      	b.n	8001a16 <_ZN15TB6612FNG_Motor8set_dutyEss+0x6e>
	}
	else
	{
		duty_magnitude = duty;
 8001a12:	887b      	ldrh	r3, [r7, #2]
 8001a14:	81fb      	strh	r3, [r7, #14]
	}

	// Check if duty cycle is within bounds
	if(duty_magnitude > maximum_value)
 8001a16:	89fa      	ldrh	r2, [r7, #14]
 8001a18:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	dd01      	ble.n	8001a24 <_ZN15TB6612FNG_Motor8set_dutyEss+0x7c>
	{
		duty = maximum_value;
 8001a20:	883b      	ldrh	r3, [r7, #0]
 8001a22:	807b      	strh	r3, [r7, #2]
	}


	// Set the compare value
	uint16_t compare_value = duty_magnitude * auto_reload_value / maximum_value;
 8001a24:	89fb      	ldrh	r3, [r7, #14]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8001a2a:	fb03 f202 	mul.w	r2, r3, r2
 8001a2e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001a32:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a36:	81bb      	strh	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(pTimer, timer_channel, compare_value);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d105      	bne.n	8001a4c <_ZN15TB6612FNG_Motor8set_dutyEss+0xa4>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	89ba      	ldrh	r2, [r7, #12]
 8001a48:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001a4a:	e018      	b.n	8001a7e <_ZN15TB6612FNG_Motor8set_dutyEss+0xd6>
	__HAL_TIM_SET_COMPARE(pTimer, timer_channel, compare_value);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d105      	bne.n	8001a60 <_ZN15TB6612FNG_Motor8set_dutyEss+0xb8>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	89ba      	ldrh	r2, [r7, #12]
 8001a5c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001a5e:	e00e      	b.n	8001a7e <_ZN15TB6612FNG_Motor8set_dutyEss+0xd6>
	__HAL_TIM_SET_COMPARE(pTimer, timer_channel, compare_value);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d105      	bne.n	8001a74 <_ZN15TB6612FNG_Motor8set_dutyEss+0xcc>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	89ba      	ldrh	r2, [r7, #12]
 8001a70:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001a72:	e004      	b.n	8001a7e <_ZN15TB6612FNG_Motor8set_dutyEss+0xd6>
	__HAL_TIM_SET_COMPARE(pTimer, timer_channel, compare_value);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	89ba      	ldrh	r2, [r7, #12]
 8001a7c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001a7e:	bf00      	nop
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <_ZN15TB6612FNG_Motor5startEv>:

/**
 * @brief starts the motor by starting PWM generation.
 */
void TB6612FNG_Motor::start()
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(pTimer, timer_channel);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	695a      	ldr	r2, [r3, #20]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	4619      	mov	r1, r3
 8001a98:	4610      	mov	r0, r2
 8001a9a:	f001 ffa1 	bl	80039e0 <HAL_TIM_PWM_Start>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <_ZN15TB6612FNG_Motor4stopEv>:

/**
 * @brief stops the motor by stopping PWM generation.
 */
void TB6612FNG_Motor::stop()
{	
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(IN1_pin_group, IN1_pin, GPIO_PIN_RESET);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6858      	ldr	r0, [r3, #4]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	891b      	ldrh	r3, [r3, #8]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f001 fa45 	bl	8002f48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_pin_group, IN2_pin, GPIO_PIN_RESET);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68d8      	ldr	r0, [r3, #12]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	8a1b      	ldrh	r3, [r3, #16]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f001 fa3d 	bl	8002f48 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(pTimer, timer_channel);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695a      	ldr	r2, [r3, #20]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4610      	mov	r0, r2
 8001ada:	f002 f831 	bl	8003b40 <HAL_TIM_PWM_Stop>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <HAL_GPIO_EXTI_Callback>:
RemoteControlControl* Throttle;
RemoteControlControl* Steering;
PololuEncoder* My_Encoder;
MotorControl* My_Controller;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	80fb      	strh	r3, [r7, #6]
   // Your interrupt handling code here
	if(GPIO_PIN == GPIO_PIN_13)
 8001af2:	88fb      	ldrh	r3, [r7, #6]
 8001af4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001af8:	d10f      	bne.n	8001b1a <HAL_GPIO_EXTI_Callback+0x32>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8001afa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001afe:	4809      	ldr	r0, [pc, #36]	@ (8001b24 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001b00:	f001 fa3b 	bl	8002f7a <HAL_GPIO_TogglePin>
		sprintf(my_message, "Interrupt triggered.\r\n");
 8001b04:	4908      	ldr	r1, [pc, #32]	@ (8001b28 <HAL_GPIO_EXTI_Callback+0x40>)
 8001b06:	4809      	ldr	r0, [pc, #36]	@ (8001b2c <HAL_GPIO_EXTI_Callback+0x44>)
 8001b08:	f004 fffc 	bl	8006b04 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)my_message, MESSAGE_LENGTH, HAL_MAX_DELAY);
 8001b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b10:	2264      	movs	r2, #100	@ 0x64
 8001b12:	4906      	ldr	r1, [pc, #24]	@ (8001b2c <HAL_GPIO_EXTI_Callback+0x44>)
 8001b14:	4806      	ldr	r0, [pc, #24]	@ (8001b30 <HAL_GPIO_EXTI_Callback+0x48>)
 8001b16:	f003 fe07 	bl	8005728 <HAL_UART_Transmit>
	}
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40020400 	.word	0x40020400
 8001b28:	08008c7c 	.word	0x08008c7c
 8001b2c:	20000310 	.word	0x20000310
 8001b30:	200002c8 	.word	0x200002c8

08001b34 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
//	sprintf(my_message, "Timer input capture callback.\r\n");
//	HAL_UART_Transmit(&huart2, (uint8_t*)my_message, MESSAGE_LENGTH, HAL_MAX_DELAY);
	if (initialized) // Timers must be initalized before this code can run successfully.
 8001b3c:	4b12      	ldr	r3, [pc, #72]	@ (8001b88 <HAL_TIM_IC_CaptureCallback+0x54>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d01d      	beq.n	8001b80 <HAL_TIM_IC_CaptureCallback+0x4c>
		{
			if((htim->Instance = TIM1))
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a11      	ldr	r2, [pc, #68]	@ (8001b8c <HAL_TIM_IC_CaptureCallback+0x58>)
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	bf14      	ite	ne
 8001b52:	2301      	movne	r3, #1
 8001b54:	2300      	moveq	r3, #0
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d011      	beq.n	8001b80 <HAL_TIM_IC_CaptureCallback+0x4c>
			{
				if ( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 )
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	7f1b      	ldrb	r3, [r3, #28]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d104      	bne.n	8001b6e <HAL_TIM_IC_CaptureCallback+0x3a>
				{
					// Handle channel
					SteeringChannel->callback();
 8001b64:	4b0a      	ldr	r3, [pc, #40]	@ (8001b90 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fd3b 	bl	80015e4 <_ZN9RCChannel8callbackEv>
				}

				if ( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	7f1b      	ldrb	r3, [r3, #28]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d104      	bne.n	8001b80 <HAL_TIM_IC_CaptureCallback+0x4c>
				{
					// Handle channel
					ThrottleChannel->callback();
 8001b76:	4b07      	ldr	r3, [pc, #28]	@ (8001b94 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fd32 	bl	80015e4 <_ZN9RCChannel8callbackEv>
				}
			}
		}
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000378 	.word	0x20000378
 8001b8c:	40010000 	.word	0x40010000
 8001b90:	20000384 	.word	0x20000384
 8001b94:	20000380 	.word	0x20000380

08001b98 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a07      	ldr	r2, [pc, #28]	@ (8001bc4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d106      	bne.n	8001bb8 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		My_Encoder->count = __HAL_TIM_GET_COUNTER(htim);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bb0:	4b05      	ldr	r3, [pc, #20]	@ (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	b292      	uxth	r2, r2
 8001bb6:	82da      	strh	r2, [r3, #22]
	}
}
 8001bb8:	bf00      	nop
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	40000c00 	.word	0x40000c00
 8001bc8:	2000038c 	.word	0x2000038c

08001bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bcc:	b590      	push	{r4, r7, lr}
 8001bce:	b08d      	sub	sp, #52	@ 0x34
 8001bd0:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bd2:	f000 fe75 	bl	80028c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bd6:	f000 f90b 	bl	8001df0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bda:	f000 fb31 	bl	8002240 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8001bde:	f000 fb01 	bl	80021e4 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 8001be2:	f000 fa13 	bl	800200c <_ZL12MX_TIM2_Initv>
  MX_TIM5_Init();
 8001be6:	f000 fa9f 	bl	8002128 <_ZL12MX_TIM5_Initv>
  MX_TIM1_Init();
 8001bea:	f000 f973 	bl	8001ed4 <_ZL12MX_TIM1_Initv>
  My_Motor = new TB6612FNG_Motor(
		  GPIOB, GPIO_PIN_14,
		  GPIOB, GPIO_PIN_15,
		  &htim2, TIM_CHANNEL_1,
		  CPU_CLOCK_MHZ,
		  MOTOR_PWM_HZ);
 8001bee:	2024      	movs	r0, #36	@ 0x24
 8001bf0:	f004 f958 	bl	8005ea4 <_Znwj>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	461c      	mov	r4, r3
 8001bf8:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001bfc:	9304      	str	r3, [sp, #16]
 8001bfe:	2364      	movs	r3, #100	@ 0x64
 8001c00:	9303      	str	r3, [sp, #12]
 8001c02:	2300      	movs	r3, #0
 8001c04:	9302      	str	r3, [sp, #8]
 8001c06:	4b66      	ldr	r3, [pc, #408]	@ (8001da0 <main+0x1d4>)
 8001c08:	9301      	str	r3, [sp, #4]
 8001c0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c0e:	9300      	str	r3, [sp, #0]
 8001c10:	4b64      	ldr	r3, [pc, #400]	@ (8001da4 <main+0x1d8>)
 8001c12:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c16:	4963      	ldr	r1, [pc, #396]	@ (8001da4 <main+0x1d8>)
 8001c18:	4620      	mov	r0, r4
 8001c1a:	f7ff fe4d 	bl	80018b8 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm>
  My_Motor = new TB6612FNG_Motor(
 8001c1e:	4b62      	ldr	r3, [pc, #392]	@ (8001da8 <main+0x1dc>)
 8001c20:	601c      	str	r4, [r3, #0]
  		  1520,      // Calibrated neutral
  		  2035,      // Calibrated full left
  		  10000,       // New max positive
		  10000,       // New max negative (magnitude)
		  true     // Saturate if signal is over full? True by default. False good for debugging.
		  );
 8001c22:	205c      	movs	r0, #92	@ 0x5c
 8001c24:	f004 f93e 	bl	8005ea4 <_Znwj>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	461c      	mov	r4, r3
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	9308      	str	r3, [sp, #32]
 8001c30:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001c34:	9307      	str	r3, [sp, #28]
 8001c36:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001c3a:	9306      	str	r3, [sp, #24]
 8001c3c:	f240 73f3 	movw	r3, #2035	@ 0x7f3
 8001c40:	9305      	str	r3, [sp, #20]
 8001c42:	f44f 63be 	mov.w	r3, #1520	@ 0x5f0
 8001c46:	9304      	str	r3, [sp, #16]
 8001c48:	f240 33ea 	movw	r3, #1002	@ 0x3ea
 8001c4c:	9303      	str	r3, [sp, #12]
 8001c4e:	2364      	movs	r3, #100	@ 0x64
 8001c50:	9302      	str	r3, [sp, #8]
 8001c52:	f244 435c 	movw	r3, #17500	@ 0x445c
 8001c56:	9301      	str	r3, [sp, #4]
 8001c58:	2300      	movs	r3, #0
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	4b53      	ldr	r3, [pc, #332]	@ (8001dac <main+0x1e0>)
 8001c5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c62:	4953      	ldr	r1, [pc, #332]	@ (8001db0 <main+0x1e4>)
 8001c64:	4620      	mov	r0, r4
 8001c66:	f7ff fc37 	bl	80014d8 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb>
  SteeringChannel = new RCChannel
 8001c6a:	4b52      	ldr	r3, [pc, #328]	@ (8001db4 <main+0x1e8>)
 8001c6c:	601c      	str	r4, [r3, #0]
		  		  1533,  // Calibrated neutral
		  		  2017,  // Calibrated full speed
		  		  10000,   // New max positive
				  10000,    // New max negative (magnitude)
				  true  // Saturate if signal is over full? True by default. False good for debugging.
		  	  	  );
 8001c6e:	205c      	movs	r0, #92	@ 0x5c
 8001c70:	f004 f918 	bl	8005ea4 <_Znwj>
 8001c74:	4603      	mov	r3, r0
 8001c76:	461c      	mov	r4, r3
 8001c78:	2301      	movs	r3, #1
 8001c7a:	9308      	str	r3, [sp, #32]
 8001c7c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001c80:	9307      	str	r3, [sp, #28]
 8001c82:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001c86:	9306      	str	r3, [sp, #24]
 8001c88:	f240 73e1 	movw	r3, #2017	@ 0x7e1
 8001c8c:	9305      	str	r3, [sp, #20]
 8001c8e:	f240 53fd 	movw	r3, #1533	@ 0x5fd
 8001c92:	9304      	str	r3, [sp, #16]
 8001c94:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8001c98:	9303      	str	r3, [sp, #12]
 8001c9a:	2364      	movs	r3, #100	@ 0x64
 8001c9c:	9302      	str	r3, [sp, #8]
 8001c9e:	f244 435c 	movw	r3, #17500	@ 0x445c
 8001ca2:	9301      	str	r3, [sp, #4]
 8001ca4:	2304      	movs	r3, #4
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	4b40      	ldr	r3, [pc, #256]	@ (8001dac <main+0x1e0>)
 8001caa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cae:	4940      	ldr	r1, [pc, #256]	@ (8001db0 <main+0x1e4>)
 8001cb0:	4620      	mov	r0, r4
 8001cb2:	f7ff fc11 	bl	80014d8 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb>
  ThrottleChannel = new RCChannel
 8001cb6:	4b40      	ldr	r3, [pc, #256]	@ (8001db8 <main+0x1ec>)
 8001cb8:	601c      	str	r4, [r3, #0]
		  &htim5,
		  20,
		  488.3f,
		  16,
		  false // true doesn't work yet!
		  );
 8001cba:	202c      	movs	r0, #44	@ 0x2c
 8001cbc:	f004 f8f2 	bl	8005ea4 <_Znwj>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	461c      	mov	r4, r3
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	2310      	movs	r3, #16
 8001cca:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 8001dbc <main+0x1f0>
 8001cce:	2214      	movs	r2, #20
 8001cd0:	493b      	ldr	r1, [pc, #236]	@ (8001dc0 <main+0x1f4>)
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	f7ff fa9e 	bl	8001214 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb>
  My_Encoder = new PololuEncoder
 8001cd8:	4b3a      	ldr	r3, [pc, #232]	@ (8001dc4 <main+0x1f8>)
 8001cda:	601c      	str	r4, [r3, #0]
		  My_Encoder,
		  CONTROL_FREQUENCY_HZ,
		  100.0f,
		  650.0f,
		  0.0f
		  );
 8001cdc:	2034      	movs	r0, #52	@ 0x34
 8001cde:	f004 f8e1 	bl	8005ea4 <_Znwj>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	461c      	mov	r4, r3
 8001ce6:	4b30      	ldr	r3, [pc, #192]	@ (8001da8 <main+0x1dc>)
 8001ce8:	6819      	ldr	r1, [r3, #0]
 8001cea:	4b36      	ldr	r3, [pc, #216]	@ (8001dc4 <main+0x1f8>)
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	ed9f 1a36 	vldr	s2, [pc, #216]	@ 8001dc8 <main+0x1fc>
 8001cf2:	eddf 0a36 	vldr	s1, [pc, #216]	@ 8001dcc <main+0x200>
 8001cf6:	ed9f 0a36 	vldr	s0, [pc, #216]	@ 8001dd0 <main+0x204>
 8001cfa:	2308      	movs	r3, #8
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	f7ff f8d3 	bl	8000ea8 <_ZN12MotorControlC1EP15TB6612FNG_MotorP13PololuEncodermfff>
  My_Controller = new MotorControl
 8001d02:	4b34      	ldr	r3, [pc, #208]	@ (8001dd4 <main+0x208>)
 8001d04:	601c      	str	r4, [r3, #0]
  Throttle = new RemoteControlControl
		  (
		  ThrottleChannel,
		  My_Controller,
		  30
		  );
 8001d06:	2014      	movs	r0, #20
 8001d08:	f004 f8cc 	bl	8005ea4 <_Znwj>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	461c      	mov	r4, r3
 8001d10:	4b29      	ldr	r3, [pc, #164]	@ (8001db8 <main+0x1ec>)
 8001d12:	6819      	ldr	r1, [r3, #0]
 8001d14:	4b2f      	ldr	r3, [pc, #188]	@ (8001dd4 <main+0x208>)
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	231e      	movs	r3, #30
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	f7ff fd26 	bl	800176c <_ZN20RemoteControlControlC1EP9RCChannelP12MotorControlt>
  Throttle = new RemoteControlControl
 8001d20:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd8 <main+0x20c>)
 8001d22:	601c      	str	r4, [r3, #0]

  /* USER CODE END 2 */

  HAL_Delay(300);
 8001d24:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001d28:	f000 fe3c 	bl	80029a4 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float setpoint = 0; // RPM
 8001d2c:	f04f 0300 	mov.w	r3, #0
 8001d30:	607b      	str	r3, [r7, #4]
  My_Controller->run(setpoint);
 8001d32:	4b28      	ldr	r3, [pc, #160]	@ (8001dd4 <main+0x208>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff f970 	bl	8001020 <_ZN12MotorControl3runEf>
  HAL_Delay(1000);
 8001d40:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d44:	f000 fe2e 	bl	80029a4 <HAL_Delay>
  initialized = true;
 8001d48:	4b24      	ldr	r3, [pc, #144]	@ (8001ddc <main+0x210>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  string_length = snprintf(my_message, MESSAGE_LENGTH, "Throttle: %*.3f RPM (%*li)\r\n",
								  VALUE_WIDTH+5, Throttle->setpoint,
 8001d4e:	4b22      	ldr	r3, [pc, #136]	@ (8001dd8 <main+0x20c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	691b      	ldr	r3, [r3, #16]
	  string_length = snprintf(my_message, MESSAGE_LENGTH, "Throttle: %*.3f RPM (%*li)\r\n",
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fbff 	bl	8000558 <__aeabi_f2d>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4916      	ldr	r1, [pc, #88]	@ (8001db8 <main+0x1ec>)
 8001d60:	6809      	ldr	r1, [r1, #0]
								  VALUE_WIDTH+5, (long signed int)ThrottleChannel->value);
 8001d62:	6949      	ldr	r1, [r1, #20]
	  string_length = snprintf(my_message, MESSAGE_LENGTH, "Throttle: %*.3f RPM (%*li)\r\n",
 8001d64:	9103      	str	r1, [sp, #12]
 8001d66:	210a      	movs	r1, #10
 8001d68:	9102      	str	r1, [sp, #8]
 8001d6a:	e9cd 2300 	strd	r2, r3, [sp]
 8001d6e:	230a      	movs	r3, #10
 8001d70:	4a1b      	ldr	r2, [pc, #108]	@ (8001de0 <main+0x214>)
 8001d72:	2164      	movs	r1, #100	@ 0x64
 8001d74:	481b      	ldr	r0, [pc, #108]	@ (8001de4 <main+0x218>)
 8001d76:	f004 fe91 	bl	8006a9c <sniprintf>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	4a1a      	ldr	r2, [pc, #104]	@ (8001de8 <main+0x21c>)
 8001d7e:	6013      	str	r3, [r2, #0]
//	  HAL_UART_Transmit(&huart2, (uint8_t*)my_message, string_length, HAL_MAX_DELAY);
//	  float setpoint = 15; // RPM
//	  My_Controller->run(setpoint);
	  Throttle->update_motor();
 8001d80:	4b15      	ldr	r3, [pc, #84]	@ (8001dd8 <main+0x20c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fd0d 	bl	80017a4 <_ZN20RemoteControlControl12update_motorEv>
	  My_Controller->debug_message(&huart2);
 8001d8a:	4b12      	ldr	r3, [pc, #72]	@ (8001dd4 <main+0x208>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4917      	ldr	r1, [pc, #92]	@ (8001dec <main+0x220>)
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff f8e9 	bl	8000f68 <_ZN12MotorControl13debug_messageEP20__UART_HandleTypeDef>
	  HAL_Delay(1000/CONTROL_FREQUENCY_HZ);
 8001d96:	207d      	movs	r0, #125	@ 0x7d
 8001d98:	f000 fe04 	bl	80029a4 <HAL_Delay>
	  string_length = snprintf(my_message, MESSAGE_LENGTH, "Throttle: %*.3f RPM (%*li)\r\n",
 8001d9c:	bf00      	nop
 8001d9e:	e7d6      	b.n	8001d4e <main+0x182>
 8001da0:	20000238 	.word	0x20000238
 8001da4:	40020400 	.word	0x40020400
 8001da8:	2000037c 	.word	0x2000037c
 8001dac:	200001f0 	.word	0x200001f0
 8001db0:	40020000 	.word	0x40020000
 8001db4:	20000384 	.word	0x20000384
 8001db8:	20000380 	.word	0x20000380
 8001dbc:	43f42666 	.word	0x43f42666
 8001dc0:	20000280 	.word	0x20000280
 8001dc4:	2000038c 	.word	0x2000038c
 8001dc8:	00000000 	.word	0x00000000
 8001dcc:	44228000 	.word	0x44228000
 8001dd0:	42c80000 	.word	0x42c80000
 8001dd4:	20000390 	.word	0x20000390
 8001dd8:	20000388 	.word	0x20000388
 8001ddc:	20000378 	.word	0x20000378
 8001de0:	08008c94 	.word	0x08008c94
 8001de4:	20000310 	.word	0x20000310
 8001de8:	20000374 	.word	0x20000374
 8001dec:	200002c8 	.word	0x200002c8

08001df0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b094      	sub	sp, #80	@ 0x50
 8001df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001df6:	f107 0320 	add.w	r3, r7, #32
 8001dfa:	2230      	movs	r2, #48	@ 0x30
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f004 fee3 	bl	8006bca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e04:	f107 030c 	add.w	r3, r7, #12
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]
 8001e12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e14:	2300      	movs	r3, #0
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	4b2c      	ldr	r3, [pc, #176]	@ (8001ecc <_Z18SystemClock_Configv+0xdc>)
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1c:	4a2b      	ldr	r2, [pc, #172]	@ (8001ecc <_Z18SystemClock_Configv+0xdc>)
 8001e1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e22:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e24:	4b29      	ldr	r3, [pc, #164]	@ (8001ecc <_Z18SystemClock_Configv+0xdc>)
 8001e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e30:	2300      	movs	r3, #0
 8001e32:	607b      	str	r3, [r7, #4]
 8001e34:	4b26      	ldr	r3, [pc, #152]	@ (8001ed0 <_Z18SystemClock_Configv+0xe0>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a25      	ldr	r2, [pc, #148]	@ (8001ed0 <_Z18SystemClock_Configv+0xe0>)
 8001e3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	4b23      	ldr	r3, [pc, #140]	@ (8001ed0 <_Z18SystemClock_Configv+0xe0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e48:	607b      	str	r3, [r7, #4]
 8001e4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e50:	2301      	movs	r3, #1
 8001e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e54:	2310      	movs	r3, #16
 8001e56:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e60:	2308      	movs	r3, #8
 8001e62:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001e64:	2364      	movs	r3, #100	@ 0x64
 8001e66:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e70:	f107 0320 	add.w	r3, r7, #32
 8001e74:	4618      	mov	r0, r3
 8001e76:	f001 f8b3 	bl	8002fe0 <HAL_RCC_OscConfig>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	bf14      	ite	ne
 8001e80:	2301      	movne	r3, #1
 8001e82:	2300      	moveq	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8001e8a:	f000 fa33 	bl	80022f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e8e:	230f      	movs	r3, #15
 8001e90:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e92:	2302      	movs	r3, #2
 8001e94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ea4:	f107 030c 	add.w	r3, r7, #12
 8001ea8:	2103      	movs	r1, #3
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f001 fb10 	bl	80034d0 <HAL_RCC_ClockConfig>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	bf14      	ite	ne
 8001eb6:	2301      	movne	r3, #1
 8001eb8:	2300      	moveq	r3, #0
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8001ec0:	f000 fa18 	bl	80022f4 <Error_Handler>
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	3750      	adds	r7, #80	@ 0x50
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40007000 	.word	0x40007000

08001ed4 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b08a      	sub	sp, #40	@ 0x28
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eda:	f107 0318 	add.w	r3, r7, #24
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
 8001ee6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee8:	f107 0310 	add.w	r3, r7, #16
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001ef2:	463b      	mov	r3, r7
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001efe:	4b41      	ldr	r3, [pc, #260]	@ (8002004 <_ZL12MX_TIM1_Initv+0x130>)
 8001f00:	4a41      	ldr	r2, [pc, #260]	@ (8002008 <_ZL12MX_TIM1_Initv+0x134>)
 8001f02:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8001f04:	4b3f      	ldr	r3, [pc, #252]	@ (8002004 <_ZL12MX_TIM1_Initv+0x130>)
 8001f06:	2263      	movs	r2, #99	@ 0x63
 8001f08:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f0a:	4b3e      	ldr	r3, [pc, #248]	@ (8002004 <_ZL12MX_TIM1_Initv+0x130>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f10:	4b3c      	ldr	r3, [pc, #240]	@ (8002004 <_ZL12MX_TIM1_Initv+0x130>)
 8001f12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f16:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f18:	4b3a      	ldr	r3, [pc, #232]	@ (8002004 <_ZL12MX_TIM1_Initv+0x130>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f1e:	4b39      	ldr	r3, [pc, #228]	@ (8002004 <_ZL12MX_TIM1_Initv+0x130>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f24:	4b37      	ldr	r3, [pc, #220]	@ (8002004 <_ZL12MX_TIM1_Initv+0x130>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f2a:	4836      	ldr	r0, [pc, #216]	@ (8002004 <_ZL12MX_TIM1_Initv+0x130>)
 8001f2c:	f001 fcb0 	bl	8003890 <HAL_TIM_Base_Init>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	bf14      	ite	ne
 8001f36:	2301      	movne	r3, #1
 8001f38:	2300      	moveq	r3, #0
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <_ZL12MX_TIM1_Initv+0x70>
  {
    Error_Handler();
 8001f40:	f000 f9d8 	bl	80022f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f48:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f4a:	f107 0318 	add.w	r3, r7, #24
 8001f4e:	4619      	mov	r1, r3
 8001f50:	482c      	ldr	r0, [pc, #176]	@ (8002004 <_ZL12MX_TIM1_Initv+0x130>)
 8001f52:	f002 fdf7 	bl	8004b44 <HAL_TIM_ConfigClockSource>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	bf14      	ite	ne
 8001f5c:	2301      	movne	r3, #1
 8001f5e:	2300      	moveq	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <_ZL12MX_TIM1_Initv+0x96>
  {
    Error_Handler();
 8001f66:	f000 f9c5 	bl	80022f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001f6a:	4826      	ldr	r0, [pc, #152]	@ (8002004 <_ZL12MX_TIM1_Initv+0x130>)
 8001f6c:	f001 fe4c 	bl	8003c08 <HAL_TIM_IC_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	bf14      	ite	ne
 8001f76:	2301      	movne	r3, #1
 8001f78:	2300      	moveq	r3, #0
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <_ZL12MX_TIM1_Initv+0xb0>
  {
    Error_Handler();
 8001f80:	f000 f9b8 	bl	80022f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f84:	2300      	movs	r3, #0
 8001f86:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f8c:	f107 0310 	add.w	r3, r7, #16
 8001f90:	4619      	mov	r1, r3
 8001f92:	481c      	ldr	r0, [pc, #112]	@ (8002004 <_ZL12MX_TIM1_Initv+0x130>)
 8001f94:	f003 faf6 	bl	8005584 <HAL_TIMEx_MasterConfigSynchronization>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	bf14      	ite	ne
 8001f9e:	2301      	movne	r3, #1
 8001fa0:	2300      	moveq	r3, #0
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <_ZL12MX_TIM1_Initv+0xd8>
  {
    Error_Handler();
 8001fa8:	f000 f9a4 	bl	80022f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001fac:	230a      	movs	r3, #10
 8001fae:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001fbc:	463b      	mov	r3, r7
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	4810      	ldr	r0, [pc, #64]	@ (8002004 <_ZL12MX_TIM1_Initv+0x130>)
 8001fc4:	f002 fc60 	bl	8004888 <HAL_TIM_IC_ConfigChannel>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	bf14      	ite	ne
 8001fce:	2301      	movne	r3, #1
 8001fd0:	2300      	moveq	r3, #0
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <_ZL12MX_TIM1_Initv+0x108>
  {
    Error_Handler();
 8001fd8:	f000 f98c 	bl	80022f4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001fdc:	463b      	mov	r3, r7
 8001fde:	2204      	movs	r2, #4
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4808      	ldr	r0, [pc, #32]	@ (8002004 <_ZL12MX_TIM1_Initv+0x130>)
 8001fe4:	f002 fc50 	bl	8004888 <HAL_TIM_IC_ConfigChannel>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	bf14      	ite	ne
 8001fee:	2301      	movne	r3, #1
 8001ff0:	2300      	moveq	r3, #0
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <_ZL12MX_TIM1_Initv+0x128>
  {
    Error_Handler();
 8001ff8:	f000 f97c 	bl	80022f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ffc:	bf00      	nop
 8001ffe:	3728      	adds	r7, #40	@ 0x28
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	200001f0 	.word	0x200001f0
 8002008:	40010000 	.word	0x40010000

0800200c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08e      	sub	sp, #56	@ 0x38
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002012:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	605a      	str	r2, [r3, #4]
 800201c:	609a      	str	r2, [r3, #8]
 800201e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002020:	f107 0320 	add.w	r3, r7, #32
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800202a:	1d3b      	adds	r3, r7, #4
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	611a      	str	r2, [r3, #16]
 8002038:	615a      	str	r2, [r3, #20]
 800203a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800203c:	4b39      	ldr	r3, [pc, #228]	@ (8002124 <_ZL12MX_TIM2_Initv+0x118>)
 800203e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002042:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002044:	4b37      	ldr	r3, [pc, #220]	@ (8002124 <_ZL12MX_TIM2_Initv+0x118>)
 8002046:	2200      	movs	r2, #0
 8002048:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800204a:	4b36      	ldr	r3, [pc, #216]	@ (8002124 <_ZL12MX_TIM2_Initv+0x118>)
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 8002050:	4b34      	ldr	r3, [pc, #208]	@ (8002124 <_ZL12MX_TIM2_Initv+0x118>)
 8002052:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002056:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002058:	4b32      	ldr	r3, [pc, #200]	@ (8002124 <_ZL12MX_TIM2_Initv+0x118>)
 800205a:	2200      	movs	r2, #0
 800205c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800205e:	4b31      	ldr	r3, [pc, #196]	@ (8002124 <_ZL12MX_TIM2_Initv+0x118>)
 8002060:	2200      	movs	r2, #0
 8002062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002064:	482f      	ldr	r0, [pc, #188]	@ (8002124 <_ZL12MX_TIM2_Initv+0x118>)
 8002066:	f001 fc13 	bl	8003890 <HAL_TIM_Base_Init>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	bf14      	ite	ne
 8002070:	2301      	movne	r3, #1
 8002072:	2300      	moveq	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 800207a:	f000 f93b 	bl	80022f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800207e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002082:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002084:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002088:	4619      	mov	r1, r3
 800208a:	4826      	ldr	r0, [pc, #152]	@ (8002124 <_ZL12MX_TIM2_Initv+0x118>)
 800208c:	f002 fd5a 	bl	8004b44 <HAL_TIM_ConfigClockSource>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	bf14      	ite	ne
 8002096:	2301      	movne	r3, #1
 8002098:	2300      	moveq	r3, #0
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 80020a0:	f000 f928 	bl	80022f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020a4:	481f      	ldr	r0, [pc, #124]	@ (8002124 <_ZL12MX_TIM2_Initv+0x118>)
 80020a6:	f001 fc42 	bl	800392e <HAL_TIM_PWM_Init>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	bf14      	ite	ne
 80020b0:	2301      	movne	r3, #1
 80020b2:	2300      	moveq	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 80020ba:	f000 f91b 	bl	80022f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020be:	2300      	movs	r3, #0
 80020c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c2:	2300      	movs	r3, #0
 80020c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020c6:	f107 0320 	add.w	r3, r7, #32
 80020ca:	4619      	mov	r1, r3
 80020cc:	4815      	ldr	r0, [pc, #84]	@ (8002124 <_ZL12MX_TIM2_Initv+0x118>)
 80020ce:	f003 fa59 	bl	8005584 <HAL_TIMEx_MasterConfigSynchronization>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	bf14      	ite	ne
 80020d8:	2301      	movne	r3, #1
 80020da:	2300      	moveq	r3, #0
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 80020e2:	f000 f907 	bl	80022f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020e6:	2360      	movs	r3, #96	@ 0x60
 80020e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020f6:	1d3b      	adds	r3, r7, #4
 80020f8:	2200      	movs	r2, #0
 80020fa:	4619      	mov	r1, r3
 80020fc:	4809      	ldr	r0, [pc, #36]	@ (8002124 <_ZL12MX_TIM2_Initv+0x118>)
 80020fe:	f002 fc5f 	bl	80049c0 <HAL_TIM_PWM_ConfigChannel>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	bf14      	ite	ne
 8002108:	2301      	movne	r3, #1
 800210a:	2300      	moveq	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 8002112:	f000 f8ef 	bl	80022f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002116:	4803      	ldr	r0, [pc, #12]	@ (8002124 <_ZL12MX_TIM2_Initv+0x118>)
 8002118:	f000 f9e6 	bl	80024e8 <HAL_TIM_MspPostInit>

}
 800211c:	bf00      	nop
 800211e:	3738      	adds	r7, #56	@ 0x38
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000238 	.word	0x20000238

08002128 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08c      	sub	sp, #48	@ 0x30
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800212e:	f107 030c 	add.w	r3, r7, #12
 8002132:	2224      	movs	r2, #36	@ 0x24
 8002134:	2100      	movs	r1, #0
 8002136:	4618      	mov	r0, r3
 8002138:	f004 fd47 	bl	8006bca <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800213c:	1d3b      	adds	r3, r7, #4
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
 8002142:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002144:	4b25      	ldr	r3, [pc, #148]	@ (80021dc <_ZL12MX_TIM5_Initv+0xb4>)
 8002146:	4a26      	ldr	r2, [pc, #152]	@ (80021e0 <_ZL12MX_TIM5_Initv+0xb8>)
 8002148:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800214a:	4b24      	ldr	r3, [pc, #144]	@ (80021dc <_ZL12MX_TIM5_Initv+0xb4>)
 800214c:	2200      	movs	r2, #0
 800214e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002150:	4b22      	ldr	r3, [pc, #136]	@ (80021dc <_ZL12MX_TIM5_Initv+0xb4>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002156:	4b21      	ldr	r3, [pc, #132]	@ (80021dc <_ZL12MX_TIM5_Initv+0xb4>)
 8002158:	f04f 32ff 	mov.w	r2, #4294967295
 800215c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800215e:	4b1f      	ldr	r3, [pc, #124]	@ (80021dc <_ZL12MX_TIM5_Initv+0xb4>)
 8002160:	2200      	movs	r2, #0
 8002162:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002164:	4b1d      	ldr	r3, [pc, #116]	@ (80021dc <_ZL12MX_TIM5_Initv+0xb4>)
 8002166:	2200      	movs	r2, #0
 8002168:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800216a:	2303      	movs	r3, #3
 800216c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800216e:	2300      	movs	r3, #0
 8002170:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002172:	2301      	movs	r3, #1
 8002174:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800217e:	2300      	movs	r3, #0
 8002180:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002182:	2301      	movs	r3, #1
 8002184:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002186:	2300      	movs	r3, #0
 8002188:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800218a:	2300      	movs	r3, #0
 800218c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800218e:	f107 030c 	add.w	r3, r7, #12
 8002192:	4619      	mov	r1, r3
 8002194:	4811      	ldr	r0, [pc, #68]	@ (80021dc <_ZL12MX_TIM5_Initv+0xb4>)
 8002196:	f001 ff59 	bl	800404c <HAL_TIM_Encoder_Init>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	bf14      	ite	ne
 80021a0:	2301      	movne	r3, #1
 80021a2:	2300      	moveq	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <_ZL12MX_TIM5_Initv+0x86>
  {
    Error_Handler();
 80021aa:	f000 f8a3 	bl	80022f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ae:	2300      	movs	r3, #0
 80021b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80021b6:	1d3b      	adds	r3, r7, #4
 80021b8:	4619      	mov	r1, r3
 80021ba:	4808      	ldr	r0, [pc, #32]	@ (80021dc <_ZL12MX_TIM5_Initv+0xb4>)
 80021bc:	f003 f9e2 	bl	8005584 <HAL_TIMEx_MasterConfigSynchronization>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	bf14      	ite	ne
 80021c6:	2301      	movne	r3, #1
 80021c8:	2300      	moveq	r3, #0
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <_ZL12MX_TIM5_Initv+0xac>
  {
    Error_Handler();
 80021d0:	f000 f890 	bl	80022f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80021d4:	bf00      	nop
 80021d6:	3730      	adds	r7, #48	@ 0x30
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20000280 	.word	0x20000280
 80021e0:	40000c00 	.word	0x40000c00

080021e4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021e8:	4b13      	ldr	r3, [pc, #76]	@ (8002238 <_ZL19MX_USART2_UART_Initv+0x54>)
 80021ea:	4a14      	ldr	r2, [pc, #80]	@ (800223c <_ZL19MX_USART2_UART_Initv+0x58>)
 80021ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021ee:	4b12      	ldr	r3, [pc, #72]	@ (8002238 <_ZL19MX_USART2_UART_Initv+0x54>)
 80021f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021f6:	4b10      	ldr	r3, [pc, #64]	@ (8002238 <_ZL19MX_USART2_UART_Initv+0x54>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021fc:	4b0e      	ldr	r3, [pc, #56]	@ (8002238 <_ZL19MX_USART2_UART_Initv+0x54>)
 80021fe:	2200      	movs	r2, #0
 8002200:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002202:	4b0d      	ldr	r3, [pc, #52]	@ (8002238 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002204:	2200      	movs	r2, #0
 8002206:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002208:	4b0b      	ldr	r3, [pc, #44]	@ (8002238 <_ZL19MX_USART2_UART_Initv+0x54>)
 800220a:	220c      	movs	r2, #12
 800220c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800220e:	4b0a      	ldr	r3, [pc, #40]	@ (8002238 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002210:	2200      	movs	r2, #0
 8002212:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002214:	4b08      	ldr	r3, [pc, #32]	@ (8002238 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002216:	2200      	movs	r2, #0
 8002218:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800221a:	4807      	ldr	r0, [pc, #28]	@ (8002238 <_ZL19MX_USART2_UART_Initv+0x54>)
 800221c:	f003 fa34 	bl	8005688 <HAL_UART_Init>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	bf14      	ite	ne
 8002226:	2301      	movne	r3, #1
 8002228:	2300      	moveq	r3, #0
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002230:	f000 f860 	bl	80022f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002234:	bf00      	nop
 8002236:	bd80      	pop	{r7, pc}
 8002238:	200002c8 	.word	0x200002c8
 800223c:	40004400 	.word	0x40004400

08002240 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b088      	sub	sp, #32
 8002244:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002246:	f107 030c 	add.w	r3, r7, #12
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	605a      	str	r2, [r3, #4]
 8002250:	609a      	str	r2, [r3, #8]
 8002252:	60da      	str	r2, [r3, #12]
 8002254:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	4b24      	ldr	r3, [pc, #144]	@ (80022ec <_ZL12MX_GPIO_Initv+0xac>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	4a23      	ldr	r2, [pc, #140]	@ (80022ec <_ZL12MX_GPIO_Initv+0xac>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	6313      	str	r3, [r2, #48]	@ 0x30
 8002266:	4b21      	ldr	r3, [pc, #132]	@ (80022ec <_ZL12MX_GPIO_Initv+0xac>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	60bb      	str	r3, [r7, #8]
 8002270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	607b      	str	r3, [r7, #4]
 8002276:	4b1d      	ldr	r3, [pc, #116]	@ (80022ec <_ZL12MX_GPIO_Initv+0xac>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227a:	4a1c      	ldr	r2, [pc, #112]	@ (80022ec <_ZL12MX_GPIO_Initv+0xac>)
 800227c:	f043 0302 	orr.w	r3, r3, #2
 8002280:	6313      	str	r3, [r2, #48]	@ 0x30
 8002282:	4b1a      	ldr	r3, [pc, #104]	@ (80022ec <_ZL12MX_GPIO_Initv+0xac>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	607b      	str	r3, [r7, #4]
 800228c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800228e:	2200      	movs	r2, #0
 8002290:	f44f 4150 	mov.w	r1, #53248	@ 0xd000
 8002294:	4816      	ldr	r0, [pc, #88]	@ (80022f0 <_ZL12MX_GPIO_Initv+0xb0>)
 8002296:	f000 fe57 	bl	8002f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 800229a:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800229e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a0:	2301      	movs	r3, #1
 80022a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a8:	2300      	movs	r3, #0
 80022aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ac:	f107 030c 	add.w	r3, r7, #12
 80022b0:	4619      	mov	r1, r3
 80022b2:	480f      	ldr	r0, [pc, #60]	@ (80022f0 <_ZL12MX_GPIO_Initv+0xb0>)
 80022b4:	f000 fcac 	bl	8002c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80022b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80022c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022c8:	f107 030c 	add.w	r3, r7, #12
 80022cc:	4619      	mov	r1, r3
 80022ce:	4808      	ldr	r0, [pc, #32]	@ (80022f0 <_ZL12MX_GPIO_Initv+0xb0>)
 80022d0:	f000 fc9e 	bl	8002c10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80022d4:	2200      	movs	r2, #0
 80022d6:	2100      	movs	r1, #0
 80022d8:	2028      	movs	r0, #40	@ 0x28
 80022da:	f000 fc62 	bl	8002ba2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80022de:	2028      	movs	r0, #40	@ 0x28
 80022e0:	f000 fc7b 	bl	8002bda <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022e4:	bf00      	nop
 80022e6:	3720      	adds	r7, #32
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40023800 	.word	0x40023800
 80022f0:	40020400 	.word	0x40020400

080022f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022f8:	b672      	cpsid	i
}
 80022fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022fc:	bf00      	nop
 80022fe:	e7fd      	b.n	80022fc <Error_Handler+0x8>

08002300 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	607b      	str	r3, [r7, #4]
 800230a:	4b10      	ldr	r3, [pc, #64]	@ (800234c <HAL_MspInit+0x4c>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230e:	4a0f      	ldr	r2, [pc, #60]	@ (800234c <HAL_MspInit+0x4c>)
 8002310:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002314:	6453      	str	r3, [r2, #68]	@ 0x44
 8002316:	4b0d      	ldr	r3, [pc, #52]	@ (800234c <HAL_MspInit+0x4c>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800231a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800231e:	607b      	str	r3, [r7, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	603b      	str	r3, [r7, #0]
 8002326:	4b09      	ldr	r3, [pc, #36]	@ (800234c <HAL_MspInit+0x4c>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232a:	4a08      	ldr	r2, [pc, #32]	@ (800234c <HAL_MspInit+0x4c>)
 800232c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002330:	6413      	str	r3, [r2, #64]	@ 0x40
 8002332:	4b06      	ldr	r3, [pc, #24]	@ (800234c <HAL_MspInit+0x4c>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	40023800 	.word	0x40023800

08002350 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08a      	sub	sp, #40	@ 0x28
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a33      	ldr	r2, [pc, #204]	@ (800243c <HAL_TIM_Base_MspInit+0xec>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d14d      	bne.n	800240e <HAL_TIM_Base_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	4b32      	ldr	r3, [pc, #200]	@ (8002440 <HAL_TIM_Base_MspInit+0xf0>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800237a:	4a31      	ldr	r2, [pc, #196]	@ (8002440 <HAL_TIM_Base_MspInit+0xf0>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6453      	str	r3, [r2, #68]	@ 0x44
 8002382:	4b2f      	ldr	r3, [pc, #188]	@ (8002440 <HAL_TIM_Base_MspInit+0xf0>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	4b2b      	ldr	r3, [pc, #172]	@ (8002440 <HAL_TIM_Base_MspInit+0xf0>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002396:	4a2a      	ldr	r2, [pc, #168]	@ (8002440 <HAL_TIM_Base_MspInit+0xf0>)
 8002398:	f043 0301 	orr.w	r3, r3, #1
 800239c:	6313      	str	r3, [r2, #48]	@ 0x30
 800239e:	4b28      	ldr	r3, [pc, #160]	@ (8002440 <HAL_TIM_Base_MspInit+0xf0>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80023ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b0:	2302      	movs	r3, #2
 80023b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b8:	2300      	movs	r3, #0
 80023ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023bc:	2301      	movs	r3, #1
 80023be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c0:	f107 0314 	add.w	r3, r7, #20
 80023c4:	4619      	mov	r1, r3
 80023c6:	481f      	ldr	r0, [pc, #124]	@ (8002444 <HAL_TIM_Base_MspInit+0xf4>)
 80023c8:	f000 fc22 	bl	8002c10 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80023cc:	2200      	movs	r2, #0
 80023ce:	2100      	movs	r1, #0
 80023d0:	2018      	movs	r0, #24
 80023d2:	f000 fbe6 	bl	8002ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80023d6:	2018      	movs	r0, #24
 80023d8:	f000 fbff 	bl	8002bda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80023dc:	2200      	movs	r2, #0
 80023de:	2100      	movs	r1, #0
 80023e0:	2019      	movs	r0, #25
 80023e2:	f000 fbde 	bl	8002ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80023e6:	2019      	movs	r0, #25
 80023e8:	f000 fbf7 	bl	8002bda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80023ec:	2200      	movs	r2, #0
 80023ee:	2100      	movs	r1, #0
 80023f0:	201a      	movs	r0, #26
 80023f2:	f000 fbd6 	bl	8002ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80023f6:	201a      	movs	r0, #26
 80023f8:	f000 fbef 	bl	8002bda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80023fc:	2200      	movs	r2, #0
 80023fe:	2100      	movs	r1, #0
 8002400:	201b      	movs	r0, #27
 8002402:	f000 fbce 	bl	8002ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002406:	201b      	movs	r0, #27
 8002408:	f000 fbe7 	bl	8002bda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800240c:	e012      	b.n	8002434 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002416:	d10d      	bne.n	8002434 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002418:	2300      	movs	r3, #0
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	4b08      	ldr	r3, [pc, #32]	@ (8002440 <HAL_TIM_Base_MspInit+0xf0>)
 800241e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002420:	4a07      	ldr	r2, [pc, #28]	@ (8002440 <HAL_TIM_Base_MspInit+0xf0>)
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	6413      	str	r3, [r2, #64]	@ 0x40
 8002428:	4b05      	ldr	r3, [pc, #20]	@ (8002440 <HAL_TIM_Base_MspInit+0xf0>)
 800242a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	68bb      	ldr	r3, [r7, #8]
}
 8002434:	bf00      	nop
 8002436:	3728      	adds	r7, #40	@ 0x28
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40010000 	.word	0x40010000
 8002440:	40023800 	.word	0x40023800
 8002444:	40020000 	.word	0x40020000

08002448 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08a      	sub	sp, #40	@ 0x28
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002450:	f107 0314 	add.w	r3, r7, #20
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	60da      	str	r2, [r3, #12]
 800245e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a1d      	ldr	r2, [pc, #116]	@ (80024dc <HAL_TIM_Encoder_MspInit+0x94>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d133      	bne.n	80024d2 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	613b      	str	r3, [r7, #16]
 800246e:	4b1c      	ldr	r3, [pc, #112]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x98>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002472:	4a1b      	ldr	r2, [pc, #108]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x98>)
 8002474:	f043 0308 	orr.w	r3, r3, #8
 8002478:	6413      	str	r3, [r2, #64]	@ 0x40
 800247a:	4b19      	ldr	r3, [pc, #100]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x98>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	4b15      	ldr	r3, [pc, #84]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x98>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248e:	4a14      	ldr	r2, [pc, #80]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x98>)
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	6313      	str	r3, [r2, #48]	@ 0x30
 8002496:	4b12      	ldr	r3, [pc, #72]	@ (80024e0 <HAL_TIM_Encoder_MspInit+0x98>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024a2:	2303      	movs	r3, #3
 80024a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a6:	2302      	movs	r3, #2
 80024a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ae:	2300      	movs	r3, #0
 80024b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80024b2:	2302      	movs	r3, #2
 80024b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b6:	f107 0314 	add.w	r3, r7, #20
 80024ba:	4619      	mov	r1, r3
 80024bc:	4809      	ldr	r0, [pc, #36]	@ (80024e4 <HAL_TIM_Encoder_MspInit+0x9c>)
 80024be:	f000 fba7 	bl	8002c10 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80024c2:	2200      	movs	r2, #0
 80024c4:	2100      	movs	r1, #0
 80024c6:	2032      	movs	r0, #50	@ 0x32
 80024c8:	f000 fb6b 	bl	8002ba2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80024cc:	2032      	movs	r0, #50	@ 0x32
 80024ce:	f000 fb84 	bl	8002bda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80024d2:	bf00      	nop
 80024d4:	3728      	adds	r7, #40	@ 0x28
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40000c00 	.word	0x40000c00
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40020000 	.word	0x40020000

080024e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b088      	sub	sp, #32
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f0:	f107 030c 	add.w	r3, r7, #12
 80024f4:	2200      	movs	r2, #0
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	609a      	str	r2, [r3, #8]
 80024fc:	60da      	str	r2, [r3, #12]
 80024fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002508:	d11e      	bne.n	8002548 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	4b10      	ldr	r3, [pc, #64]	@ (8002550 <HAL_TIM_MspPostInit+0x68>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002512:	4a0f      	ldr	r2, [pc, #60]	@ (8002550 <HAL_TIM_MspPostInit+0x68>)
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	6313      	str	r3, [r2, #48]	@ 0x30
 800251a:	4b0d      	ldr	r3, [pc, #52]	@ (8002550 <HAL_TIM_MspPostInit+0x68>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002526:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800252a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252c:	2302      	movs	r3, #2
 800252e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002534:	2300      	movs	r3, #0
 8002536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002538:	2301      	movs	r3, #1
 800253a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253c:	f107 030c 	add.w	r3, r7, #12
 8002540:	4619      	mov	r1, r3
 8002542:	4804      	ldr	r0, [pc, #16]	@ (8002554 <HAL_TIM_MspPostInit+0x6c>)
 8002544:	f000 fb64 	bl	8002c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002548:	bf00      	nop
 800254a:	3720      	adds	r7, #32
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40023800 	.word	0x40023800
 8002554:	40020000 	.word	0x40020000

08002558 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08a      	sub	sp, #40	@ 0x28
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002560:	f107 0314 	add.w	r3, r7, #20
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	605a      	str	r2, [r3, #4]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	60da      	str	r2, [r3, #12]
 800256e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a19      	ldr	r2, [pc, #100]	@ (80025dc <HAL_UART_MspInit+0x84>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d12b      	bne.n	80025d2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	4b18      	ldr	r3, [pc, #96]	@ (80025e0 <HAL_UART_MspInit+0x88>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002582:	4a17      	ldr	r2, [pc, #92]	@ (80025e0 <HAL_UART_MspInit+0x88>)
 8002584:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002588:	6413      	str	r3, [r2, #64]	@ 0x40
 800258a:	4b15      	ldr	r3, [pc, #84]	@ (80025e0 <HAL_UART_MspInit+0x88>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	4b11      	ldr	r3, [pc, #68]	@ (80025e0 <HAL_UART_MspInit+0x88>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259e:	4a10      	ldr	r2, [pc, #64]	@ (80025e0 <HAL_UART_MspInit+0x88>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025a6:	4b0e      	ldr	r3, [pc, #56]	@ (80025e0 <HAL_UART_MspInit+0x88>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025b2:	230c      	movs	r3, #12
 80025b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b6:	2302      	movs	r3, #2
 80025b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025be:	2303      	movs	r3, #3
 80025c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025c2:	2307      	movs	r3, #7
 80025c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c6:	f107 0314 	add.w	r3, r7, #20
 80025ca:	4619      	mov	r1, r3
 80025cc:	4805      	ldr	r0, [pc, #20]	@ (80025e4 <HAL_UART_MspInit+0x8c>)
 80025ce:	f000 fb1f 	bl	8002c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025d2:	bf00      	nop
 80025d4:	3728      	adds	r7, #40	@ 0x28
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40004400 	.word	0x40004400
 80025e0:	40023800 	.word	0x40023800
 80025e4:	40020000 	.word	0x40020000

080025e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025ec:	bf00      	nop
 80025ee:	e7fd      	b.n	80025ec <NMI_Handler+0x4>

080025f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025f4:	bf00      	nop
 80025f6:	e7fd      	b.n	80025f4 <HardFault_Handler+0x4>

080025f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025fc:	bf00      	nop
 80025fe:	e7fd      	b.n	80025fc <MemManage_Handler+0x4>

08002600 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002604:	bf00      	nop
 8002606:	e7fd      	b.n	8002604 <BusFault_Handler+0x4>

08002608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800260c:	bf00      	nop
 800260e:	e7fd      	b.n	800260c <UsageFault_Handler+0x4>

08002610 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002630:	bf00      	nop
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800263e:	f000 f991 	bl	8002964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800264c:	4802      	ldr	r0, [pc, #8]	@ (8002658 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800264e:	f002 f82b 	bl	80046a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	200001f0 	.word	0x200001f0

0800265c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002660:	4802      	ldr	r0, [pc, #8]	@ (800266c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002662:	f002 f821 	bl	80046a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	200001f0 	.word	0x200001f0

08002670 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002674:	4802      	ldr	r0, [pc, #8]	@ (8002680 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002676:	f002 f817 	bl	80046a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	200001f0 	.word	0x200001f0

08002684 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002688:	4802      	ldr	r0, [pc, #8]	@ (8002694 <TIM1_CC_IRQHandler+0x10>)
 800268a:	f002 f80d 	bl	80046a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	200001f0 	.word	0x200001f0

08002698 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800269c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80026a0:	f000 fc86 	bl	8002fb0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026a4:	bf00      	nop
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80026ac:	4802      	ldr	r0, [pc, #8]	@ (80026b8 <TIM5_IRQHandler+0x10>)
 80026ae:	f001 fffb 	bl	80046a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20000280 	.word	0x20000280

080026bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return 1;
 80026c0:	2301      	movs	r3, #1
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <_kill>:

int _kill(int pid, int sig)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026d6:	f004 fb1f 	bl	8006d18 <__errno>
 80026da:	4603      	mov	r3, r0
 80026dc:	2216      	movs	r2, #22
 80026de:	601a      	str	r2, [r3, #0]
  return -1;
 80026e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <_exit>:

void _exit (int status)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026f4:	f04f 31ff 	mov.w	r1, #4294967295
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7ff ffe7 	bl	80026cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80026fe:	bf00      	nop
 8002700:	e7fd      	b.n	80026fe <_exit+0x12>

08002702 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b086      	sub	sp, #24
 8002706:	af00      	add	r7, sp, #0
 8002708:	60f8      	str	r0, [r7, #12]
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800270e:	2300      	movs	r3, #0
 8002710:	617b      	str	r3, [r7, #20]
 8002712:	e00a      	b.n	800272a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002714:	f3af 8000 	nop.w
 8002718:	4601      	mov	r1, r0
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	1c5a      	adds	r2, r3, #1
 800271e:	60ba      	str	r2, [r7, #8]
 8002720:	b2ca      	uxtb	r2, r1
 8002722:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	3301      	adds	r3, #1
 8002728:	617b      	str	r3, [r7, #20]
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	429a      	cmp	r2, r3
 8002730:	dbf0      	blt.n	8002714 <_read+0x12>
  }

  return len;
 8002732:	687b      	ldr	r3, [r7, #4]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3718      	adds	r7, #24
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002748:	2300      	movs	r3, #0
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	e009      	b.n	8002762 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	60ba      	str	r2, [r7, #8]
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	3301      	adds	r3, #1
 8002760:	617b      	str	r3, [r7, #20]
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	429a      	cmp	r2, r3
 8002768:	dbf1      	blt.n	800274e <_write+0x12>
  }
  return len;
 800276a:	687b      	ldr	r3, [r7, #4]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <_close>:

int _close(int file)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800277c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002780:	4618      	mov	r0, r3
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800279c:	605a      	str	r2, [r3, #4]
  return 0;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <_isatty>:

int _isatty(int file)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027b4:	2301      	movs	r3, #1
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b085      	sub	sp, #20
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	60f8      	str	r0, [r7, #12]
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3714      	adds	r7, #20
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027e4:	4a14      	ldr	r2, [pc, #80]	@ (8002838 <_sbrk+0x5c>)
 80027e6:	4b15      	ldr	r3, [pc, #84]	@ (800283c <_sbrk+0x60>)
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027f0:	4b13      	ldr	r3, [pc, #76]	@ (8002840 <_sbrk+0x64>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d102      	bne.n	80027fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027f8:	4b11      	ldr	r3, [pc, #68]	@ (8002840 <_sbrk+0x64>)
 80027fa:	4a12      	ldr	r2, [pc, #72]	@ (8002844 <_sbrk+0x68>)
 80027fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027fe:	4b10      	ldr	r3, [pc, #64]	@ (8002840 <_sbrk+0x64>)
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4413      	add	r3, r2
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	429a      	cmp	r2, r3
 800280a:	d207      	bcs.n	800281c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800280c:	f004 fa84 	bl	8006d18 <__errno>
 8002810:	4603      	mov	r3, r0
 8002812:	220c      	movs	r2, #12
 8002814:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002816:	f04f 33ff 	mov.w	r3, #4294967295
 800281a:	e009      	b.n	8002830 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800281c:	4b08      	ldr	r3, [pc, #32]	@ (8002840 <_sbrk+0x64>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002822:	4b07      	ldr	r3, [pc, #28]	@ (8002840 <_sbrk+0x64>)
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4413      	add	r3, r2
 800282a:	4a05      	ldr	r2, [pc, #20]	@ (8002840 <_sbrk+0x64>)
 800282c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800282e:	68fb      	ldr	r3, [r7, #12]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	20020000 	.word	0x20020000
 800283c:	00000400 	.word	0x00000400
 8002840:	20000394 	.word	0x20000394
 8002844:	200004f0 	.word	0x200004f0

08002848 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800284c:	4b06      	ldr	r3, [pc, #24]	@ (8002868 <SystemInit+0x20>)
 800284e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002852:	4a05      	ldr	r2, [pc, #20]	@ (8002868 <SystemInit+0x20>)
 8002854:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002858:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800285c:	bf00      	nop
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	e000ed00 	.word	0xe000ed00

0800286c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800286c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002870:	f7ff ffea 	bl	8002848 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002874:	480c      	ldr	r0, [pc, #48]	@ (80028a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002876:	490d      	ldr	r1, [pc, #52]	@ (80028ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002878:	4a0d      	ldr	r2, [pc, #52]	@ (80028b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800287a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800287c:	e002      	b.n	8002884 <LoopCopyDataInit>

0800287e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800287e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002882:	3304      	adds	r3, #4

08002884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002888:	d3f9      	bcc.n	800287e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800288a:	4a0a      	ldr	r2, [pc, #40]	@ (80028b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800288c:	4c0a      	ldr	r4, [pc, #40]	@ (80028b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800288e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002890:	e001      	b.n	8002896 <LoopFillZerobss>

08002892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002894:	3204      	adds	r2, #4

08002896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002898:	d3fb      	bcc.n	8002892 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800289a:	f004 fa43 	bl	8006d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800289e:	f7ff f995 	bl	8001bcc <main>
  bx  lr    
 80028a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80028a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028ac:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80028b0:	080090a0 	.word	0x080090a0
  ldr r2, =_sbss
 80028b4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80028b8:	200004ec 	.word	0x200004ec

080028bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028bc:	e7fe      	b.n	80028bc <ADC_IRQHandler>
	...

080028c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002900 <HAL_Init+0x40>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002900 <HAL_Init+0x40>)
 80028ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002900 <HAL_Init+0x40>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002900 <HAL_Init+0x40>)
 80028d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028dc:	4b08      	ldr	r3, [pc, #32]	@ (8002900 <HAL_Init+0x40>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a07      	ldr	r2, [pc, #28]	@ (8002900 <HAL_Init+0x40>)
 80028e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028e8:	2003      	movs	r0, #3
 80028ea:	f000 f94f 	bl	8002b8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ee:	200f      	movs	r0, #15
 80028f0:	f000 f808 	bl	8002904 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028f4:	f7ff fd04 	bl	8002300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40023c00 	.word	0x40023c00

08002904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800290c:	4b12      	ldr	r3, [pc, #72]	@ (8002958 <HAL_InitTick+0x54>)
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	4b12      	ldr	r3, [pc, #72]	@ (800295c <HAL_InitTick+0x58>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	4619      	mov	r1, r3
 8002916:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800291a:	fbb3 f3f1 	udiv	r3, r3, r1
 800291e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002922:	4618      	mov	r0, r3
 8002924:	f000 f967 	bl	8002bf6 <HAL_SYSTICK_Config>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e00e      	b.n	8002950 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b0f      	cmp	r3, #15
 8002936:	d80a      	bhi.n	800294e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002938:	2200      	movs	r2, #0
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	f04f 30ff 	mov.w	r0, #4294967295
 8002940:	f000 f92f 	bl	8002ba2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002944:	4a06      	ldr	r2, [pc, #24]	@ (8002960 <HAL_InitTick+0x5c>)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800294a:	2300      	movs	r3, #0
 800294c:	e000      	b.n	8002950 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
}
 8002950:	4618      	mov	r0, r3
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20000000 	.word	0x20000000
 800295c:	20000008 	.word	0x20000008
 8002960:	20000004 	.word	0x20000004

08002964 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002968:	4b06      	ldr	r3, [pc, #24]	@ (8002984 <HAL_IncTick+0x20>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	461a      	mov	r2, r3
 800296e:	4b06      	ldr	r3, [pc, #24]	@ (8002988 <HAL_IncTick+0x24>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4413      	add	r3, r2
 8002974:	4a04      	ldr	r2, [pc, #16]	@ (8002988 <HAL_IncTick+0x24>)
 8002976:	6013      	str	r3, [r2, #0]
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	20000008 	.word	0x20000008
 8002988:	20000398 	.word	0x20000398

0800298c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return uwTick;
 8002990:	4b03      	ldr	r3, [pc, #12]	@ (80029a0 <HAL_GetTick+0x14>)
 8002992:	681b      	ldr	r3, [r3, #0]
}
 8002994:	4618      	mov	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	20000398 	.word	0x20000398

080029a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029ac:	f7ff ffee 	bl	800298c <HAL_GetTick>
 80029b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029bc:	d005      	beq.n	80029ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029be:	4b0a      	ldr	r3, [pc, #40]	@ (80029e8 <HAL_Delay+0x44>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	461a      	mov	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	4413      	add	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029ca:	bf00      	nop
 80029cc:	f7ff ffde 	bl	800298c <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d8f7      	bhi.n	80029cc <HAL_Delay+0x28>
  {
  }
}
 80029dc:	bf00      	nop
 80029de:	bf00      	nop
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20000008 	.word	0x20000008

080029ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002a30 <__NVIC_SetPriorityGrouping+0x44>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a08:	4013      	ands	r3, r2
 8002a0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a1e:	4a04      	ldr	r2, [pc, #16]	@ (8002a30 <__NVIC_SetPriorityGrouping+0x44>)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	60d3      	str	r3, [r2, #12]
}
 8002a24:	bf00      	nop
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	e000ed00 	.word	0xe000ed00

08002a34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a38:	4b04      	ldr	r3, [pc, #16]	@ (8002a4c <__NVIC_GetPriorityGrouping+0x18>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	0a1b      	lsrs	r3, r3, #8
 8002a3e:	f003 0307 	and.w	r3, r3, #7
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	e000ed00 	.word	0xe000ed00

08002a50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	db0b      	blt.n	8002a7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a62:	79fb      	ldrb	r3, [r7, #7]
 8002a64:	f003 021f 	and.w	r2, r3, #31
 8002a68:	4907      	ldr	r1, [pc, #28]	@ (8002a88 <__NVIC_EnableIRQ+0x38>)
 8002a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6e:	095b      	lsrs	r3, r3, #5
 8002a70:	2001      	movs	r0, #1
 8002a72:	fa00 f202 	lsl.w	r2, r0, r2
 8002a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	e000e100 	.word	0xe000e100

08002a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	6039      	str	r1, [r7, #0]
 8002a96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	db0a      	blt.n	8002ab6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	b2da      	uxtb	r2, r3
 8002aa4:	490c      	ldr	r1, [pc, #48]	@ (8002ad8 <__NVIC_SetPriority+0x4c>)
 8002aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aaa:	0112      	lsls	r2, r2, #4
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	440b      	add	r3, r1
 8002ab0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ab4:	e00a      	b.n	8002acc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	4908      	ldr	r1, [pc, #32]	@ (8002adc <__NVIC_SetPriority+0x50>)
 8002abc:	79fb      	ldrb	r3, [r7, #7]
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	3b04      	subs	r3, #4
 8002ac4:	0112      	lsls	r2, r2, #4
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	440b      	add	r3, r1
 8002aca:	761a      	strb	r2, [r3, #24]
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	e000e100 	.word	0xe000e100
 8002adc:	e000ed00 	.word	0xe000ed00

08002ae0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b089      	sub	sp, #36	@ 0x24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	f1c3 0307 	rsb	r3, r3, #7
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	bf28      	it	cs
 8002afe:	2304      	movcs	r3, #4
 8002b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	3304      	adds	r3, #4
 8002b06:	2b06      	cmp	r3, #6
 8002b08:	d902      	bls.n	8002b10 <NVIC_EncodePriority+0x30>
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	3b03      	subs	r3, #3
 8002b0e:	e000      	b.n	8002b12 <NVIC_EncodePriority+0x32>
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b14:	f04f 32ff 	mov.w	r2, #4294967295
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	43da      	mvns	r2, r3
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	401a      	ands	r2, r3
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b28:	f04f 31ff 	mov.w	r1, #4294967295
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b32:	43d9      	mvns	r1, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b38:	4313      	orrs	r3, r2
         );
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3724      	adds	r7, #36	@ 0x24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
	...

08002b48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b58:	d301      	bcc.n	8002b5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e00f      	b.n	8002b7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b88 <SysTick_Config+0x40>)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b66:	210f      	movs	r1, #15
 8002b68:	f04f 30ff 	mov.w	r0, #4294967295
 8002b6c:	f7ff ff8e 	bl	8002a8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b70:	4b05      	ldr	r3, [pc, #20]	@ (8002b88 <SysTick_Config+0x40>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b76:	4b04      	ldr	r3, [pc, #16]	@ (8002b88 <SysTick_Config+0x40>)
 8002b78:	2207      	movs	r2, #7
 8002b7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	e000e010 	.word	0xe000e010

08002b8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f7ff ff29 	bl	80029ec <__NVIC_SetPriorityGrouping>
}
 8002b9a:	bf00      	nop
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b086      	sub	sp, #24
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	4603      	mov	r3, r0
 8002baa:	60b9      	str	r1, [r7, #8]
 8002bac:	607a      	str	r2, [r7, #4]
 8002bae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bb4:	f7ff ff3e 	bl	8002a34 <__NVIC_GetPriorityGrouping>
 8002bb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	68b9      	ldr	r1, [r7, #8]
 8002bbe:	6978      	ldr	r0, [r7, #20]
 8002bc0:	f7ff ff8e 	bl	8002ae0 <NVIC_EncodePriority>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bca:	4611      	mov	r1, r2
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff ff5d 	bl	8002a8c <__NVIC_SetPriority>
}
 8002bd2:	bf00      	nop
 8002bd4:	3718      	adds	r7, #24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b082      	sub	sp, #8
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	4603      	mov	r3, r0
 8002be2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff ff31 	bl	8002a50 <__NVIC_EnableIRQ>
}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b082      	sub	sp, #8
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7ff ffa2 	bl	8002b48 <SysTick_Config>
 8002c04:	4603      	mov	r3, r0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
	...

08002c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b089      	sub	sp, #36	@ 0x24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
 8002c2a:	e159      	b.n	8002ee0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	f040 8148 	bne.w	8002eda <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d005      	beq.n	8002c62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d130      	bne.n	8002cc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	2203      	movs	r2, #3
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	4013      	ands	r3, r2
 8002c78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c98:	2201      	movs	r2, #1
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	f003 0201 	and.w	r2, r3, #1
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 0303 	and.w	r3, r3, #3
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d017      	beq.n	8002d00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	2203      	movs	r2, #3
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d123      	bne.n	8002d54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	08da      	lsrs	r2, r3, #3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3208      	adds	r2, #8
 8002d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	220f      	movs	r2, #15
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	08da      	lsrs	r2, r3, #3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3208      	adds	r2, #8
 8002d4e:	69b9      	ldr	r1, [r7, #24]
 8002d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	2203      	movs	r2, #3
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 0203 	and.w	r2, r3, #3
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80a2 	beq.w	8002eda <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	4b57      	ldr	r3, [pc, #348]	@ (8002ef8 <HAL_GPIO_Init+0x2e8>)
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9e:	4a56      	ldr	r2, [pc, #344]	@ (8002ef8 <HAL_GPIO_Init+0x2e8>)
 8002da0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002da4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002da6:	4b54      	ldr	r3, [pc, #336]	@ (8002ef8 <HAL_GPIO_Init+0x2e8>)
 8002da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002daa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002db2:	4a52      	ldr	r2, [pc, #328]	@ (8002efc <HAL_GPIO_Init+0x2ec>)
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	089b      	lsrs	r3, r3, #2
 8002db8:	3302      	adds	r3, #2
 8002dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	220f      	movs	r2, #15
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	69ba      	ldr	r2, [r7, #24]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a49      	ldr	r2, [pc, #292]	@ (8002f00 <HAL_GPIO_Init+0x2f0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d019      	beq.n	8002e12 <HAL_GPIO_Init+0x202>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a48      	ldr	r2, [pc, #288]	@ (8002f04 <HAL_GPIO_Init+0x2f4>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d013      	beq.n	8002e0e <HAL_GPIO_Init+0x1fe>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a47      	ldr	r2, [pc, #284]	@ (8002f08 <HAL_GPIO_Init+0x2f8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d00d      	beq.n	8002e0a <HAL_GPIO_Init+0x1fa>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a46      	ldr	r2, [pc, #280]	@ (8002f0c <HAL_GPIO_Init+0x2fc>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d007      	beq.n	8002e06 <HAL_GPIO_Init+0x1f6>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a45      	ldr	r2, [pc, #276]	@ (8002f10 <HAL_GPIO_Init+0x300>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d101      	bne.n	8002e02 <HAL_GPIO_Init+0x1f2>
 8002dfe:	2304      	movs	r3, #4
 8002e00:	e008      	b.n	8002e14 <HAL_GPIO_Init+0x204>
 8002e02:	2307      	movs	r3, #7
 8002e04:	e006      	b.n	8002e14 <HAL_GPIO_Init+0x204>
 8002e06:	2303      	movs	r3, #3
 8002e08:	e004      	b.n	8002e14 <HAL_GPIO_Init+0x204>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	e002      	b.n	8002e14 <HAL_GPIO_Init+0x204>
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e000      	b.n	8002e14 <HAL_GPIO_Init+0x204>
 8002e12:	2300      	movs	r3, #0
 8002e14:	69fa      	ldr	r2, [r7, #28]
 8002e16:	f002 0203 	and.w	r2, r2, #3
 8002e1a:	0092      	lsls	r2, r2, #2
 8002e1c:	4093      	lsls	r3, r2
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e24:	4935      	ldr	r1, [pc, #212]	@ (8002efc <HAL_GPIO_Init+0x2ec>)
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	089b      	lsrs	r3, r3, #2
 8002e2a:	3302      	adds	r3, #2
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e32:	4b38      	ldr	r3, [pc, #224]	@ (8002f14 <HAL_GPIO_Init+0x304>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	43db      	mvns	r3, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d003      	beq.n	8002e56 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e56:	4a2f      	ldr	r2, [pc, #188]	@ (8002f14 <HAL_GPIO_Init+0x304>)
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e5c:	4b2d      	ldr	r3, [pc, #180]	@ (8002f14 <HAL_GPIO_Init+0x304>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	43db      	mvns	r3, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e80:	4a24      	ldr	r2, [pc, #144]	@ (8002f14 <HAL_GPIO_Init+0x304>)
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e86:	4b23      	ldr	r3, [pc, #140]	@ (8002f14 <HAL_GPIO_Init+0x304>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4013      	ands	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002eaa:	4a1a      	ldr	r2, [pc, #104]	@ (8002f14 <HAL_GPIO_Init+0x304>)
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eb0:	4b18      	ldr	r3, [pc, #96]	@ (8002f14 <HAL_GPIO_Init+0x304>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ed4:	4a0f      	ldr	r2, [pc, #60]	@ (8002f14 <HAL_GPIO_Init+0x304>)
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	3301      	adds	r3, #1
 8002ede:	61fb      	str	r3, [r7, #28]
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	2b0f      	cmp	r3, #15
 8002ee4:	f67f aea2 	bls.w	8002c2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop
 8002eec:	3724      	adds	r7, #36	@ 0x24
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	40013800 	.word	0x40013800
 8002f00:	40020000 	.word	0x40020000
 8002f04:	40020400 	.word	0x40020400
 8002f08:	40020800 	.word	0x40020800
 8002f0c:	40020c00 	.word	0x40020c00
 8002f10:	40021000 	.word	0x40021000
 8002f14:	40013c00 	.word	0x40013c00

08002f18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	887b      	ldrh	r3, [r7, #2]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f30:	2301      	movs	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
 8002f34:	e001      	b.n	8002f3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f36:	2300      	movs	r3, #0
 8002f38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3714      	adds	r7, #20
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	460b      	mov	r3, r1
 8002f52:	807b      	strh	r3, [r7, #2]
 8002f54:	4613      	mov	r3, r2
 8002f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f58:	787b      	ldrb	r3, [r7, #1]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f5e:	887a      	ldrh	r2, [r7, #2]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f64:	e003      	b.n	8002f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f66:	887b      	ldrh	r3, [r7, #2]
 8002f68:	041a      	lsls	r2, r3, #16
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	619a      	str	r2, [r3, #24]
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b085      	sub	sp, #20
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
 8002f82:	460b      	mov	r3, r1
 8002f84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f8c:	887a      	ldrh	r2, [r7, #2]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	4013      	ands	r3, r2
 8002f92:	041a      	lsls	r2, r3, #16
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	43d9      	mvns	r1, r3
 8002f98:	887b      	ldrh	r3, [r7, #2]
 8002f9a:	400b      	ands	r3, r1
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	619a      	str	r2, [r3, #24]
}
 8002fa2:	bf00      	nop
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
	...

08002fb0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002fba:	4b08      	ldr	r3, [pc, #32]	@ (8002fdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fbc:	695a      	ldr	r2, [r3, #20]
 8002fbe:	88fb      	ldrh	r3, [r7, #6]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d006      	beq.n	8002fd4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fc6:	4a05      	ldr	r2, [pc, #20]	@ (8002fdc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fc8:	88fb      	ldrh	r3, [r7, #6]
 8002fca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fcc:	88fb      	ldrh	r3, [r7, #6]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7fe fd8a 	bl	8001ae8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fd4:	bf00      	nop
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40013c00 	.word	0x40013c00

08002fe0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e267      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d075      	beq.n	80030ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ffe:	4b88      	ldr	r3, [pc, #544]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 030c 	and.w	r3, r3, #12
 8003006:	2b04      	cmp	r3, #4
 8003008:	d00c      	beq.n	8003024 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800300a:	4b85      	ldr	r3, [pc, #532]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003012:	2b08      	cmp	r3, #8
 8003014:	d112      	bne.n	800303c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003016:	4b82      	ldr	r3, [pc, #520]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800301e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003022:	d10b      	bne.n	800303c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003024:	4b7e      	ldr	r3, [pc, #504]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d05b      	beq.n	80030e8 <HAL_RCC_OscConfig+0x108>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d157      	bne.n	80030e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e242      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003044:	d106      	bne.n	8003054 <HAL_RCC_OscConfig+0x74>
 8003046:	4b76      	ldr	r3, [pc, #472]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a75      	ldr	r2, [pc, #468]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 800304c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	e01d      	b.n	8003090 <HAL_RCC_OscConfig+0xb0>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800305c:	d10c      	bne.n	8003078 <HAL_RCC_OscConfig+0x98>
 800305e:	4b70      	ldr	r3, [pc, #448]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a6f      	ldr	r2, [pc, #444]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003064:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	4b6d      	ldr	r3, [pc, #436]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a6c      	ldr	r2, [pc, #432]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003070:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	e00b      	b.n	8003090 <HAL_RCC_OscConfig+0xb0>
 8003078:	4b69      	ldr	r3, [pc, #420]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a68      	ldr	r2, [pc, #416]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 800307e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003082:	6013      	str	r3, [r2, #0]
 8003084:	4b66      	ldr	r3, [pc, #408]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a65      	ldr	r2, [pc, #404]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 800308a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800308e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d013      	beq.n	80030c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003098:	f7ff fc78 	bl	800298c <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030a0:	f7ff fc74 	bl	800298c <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b64      	cmp	r3, #100	@ 0x64
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e207      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b2:	4b5b      	ldr	r3, [pc, #364]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0f0      	beq.n	80030a0 <HAL_RCC_OscConfig+0xc0>
 80030be:	e014      	b.n	80030ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c0:	f7ff fc64 	bl	800298c <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030c8:	f7ff fc60 	bl	800298c <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b64      	cmp	r3, #100	@ 0x64
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e1f3      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030da:	4b51      	ldr	r3, [pc, #324]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1f0      	bne.n	80030c8 <HAL_RCC_OscConfig+0xe8>
 80030e6:	e000      	b.n	80030ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d063      	beq.n	80031be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 030c 	and.w	r3, r3, #12
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00b      	beq.n	800311a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003102:	4b47      	ldr	r3, [pc, #284]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800310a:	2b08      	cmp	r3, #8
 800310c:	d11c      	bne.n	8003148 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800310e:	4b44      	ldr	r3, [pc, #272]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d116      	bne.n	8003148 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800311a:	4b41      	ldr	r3, [pc, #260]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d005      	beq.n	8003132 <HAL_RCC_OscConfig+0x152>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d001      	beq.n	8003132 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e1c7      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003132:	4b3b      	ldr	r3, [pc, #236]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4937      	ldr	r1, [pc, #220]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003142:	4313      	orrs	r3, r2
 8003144:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003146:	e03a      	b.n	80031be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d020      	beq.n	8003192 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003150:	4b34      	ldr	r3, [pc, #208]	@ (8003224 <HAL_RCC_OscConfig+0x244>)
 8003152:	2201      	movs	r2, #1
 8003154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003156:	f7ff fc19 	bl	800298c <HAL_GetTick>
 800315a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800315c:	e008      	b.n	8003170 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800315e:	f7ff fc15 	bl	800298c <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e1a8      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003170:	4b2b      	ldr	r3, [pc, #172]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d0f0      	beq.n	800315e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800317c:	4b28      	ldr	r3, [pc, #160]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	4925      	ldr	r1, [pc, #148]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 800318c:	4313      	orrs	r3, r2
 800318e:	600b      	str	r3, [r1, #0]
 8003190:	e015      	b.n	80031be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003192:	4b24      	ldr	r3, [pc, #144]	@ (8003224 <HAL_RCC_OscConfig+0x244>)
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003198:	f7ff fbf8 	bl	800298c <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031a0:	f7ff fbf4 	bl	800298c <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e187      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f0      	bne.n	80031a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d036      	beq.n	8003238 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d016      	beq.n	8003200 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031d2:	4b15      	ldr	r3, [pc, #84]	@ (8003228 <HAL_RCC_OscConfig+0x248>)
 80031d4:	2201      	movs	r2, #1
 80031d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d8:	f7ff fbd8 	bl	800298c <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031e0:	f7ff fbd4 	bl	800298c <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e167      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003220 <HAL_RCC_OscConfig+0x240>)
 80031f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d0f0      	beq.n	80031e0 <HAL_RCC_OscConfig+0x200>
 80031fe:	e01b      	b.n	8003238 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003200:	4b09      	ldr	r3, [pc, #36]	@ (8003228 <HAL_RCC_OscConfig+0x248>)
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003206:	f7ff fbc1 	bl	800298c <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800320c:	e00e      	b.n	800322c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800320e:	f7ff fbbd 	bl	800298c <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d907      	bls.n	800322c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e150      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
 8003220:	40023800 	.word	0x40023800
 8003224:	42470000 	.word	0x42470000
 8003228:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800322c:	4b88      	ldr	r3, [pc, #544]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 800322e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1ea      	bne.n	800320e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0304 	and.w	r3, r3, #4
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 8097 	beq.w	8003374 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003246:	2300      	movs	r3, #0
 8003248:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800324a:	4b81      	ldr	r3, [pc, #516]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 800324c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10f      	bne.n	8003276 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003256:	2300      	movs	r3, #0
 8003258:	60bb      	str	r3, [r7, #8]
 800325a:	4b7d      	ldr	r3, [pc, #500]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 800325c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325e:	4a7c      	ldr	r2, [pc, #496]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 8003260:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003264:	6413      	str	r3, [r2, #64]	@ 0x40
 8003266:	4b7a      	ldr	r3, [pc, #488]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 8003268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800326e:	60bb      	str	r3, [r7, #8]
 8003270:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003272:	2301      	movs	r3, #1
 8003274:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003276:	4b77      	ldr	r3, [pc, #476]	@ (8003454 <HAL_RCC_OscConfig+0x474>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800327e:	2b00      	cmp	r3, #0
 8003280:	d118      	bne.n	80032b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003282:	4b74      	ldr	r3, [pc, #464]	@ (8003454 <HAL_RCC_OscConfig+0x474>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a73      	ldr	r2, [pc, #460]	@ (8003454 <HAL_RCC_OscConfig+0x474>)
 8003288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800328c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800328e:	f7ff fb7d 	bl	800298c <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003296:	f7ff fb79 	bl	800298c <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e10c      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003454 <HAL_RCC_OscConfig+0x474>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0f0      	beq.n	8003296 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d106      	bne.n	80032ca <HAL_RCC_OscConfig+0x2ea>
 80032bc:	4b64      	ldr	r3, [pc, #400]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80032be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c0:	4a63      	ldr	r2, [pc, #396]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80032c2:	f043 0301 	orr.w	r3, r3, #1
 80032c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80032c8:	e01c      	b.n	8003304 <HAL_RCC_OscConfig+0x324>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	2b05      	cmp	r3, #5
 80032d0:	d10c      	bne.n	80032ec <HAL_RCC_OscConfig+0x30c>
 80032d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80032d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d6:	4a5e      	ldr	r2, [pc, #376]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80032d8:	f043 0304 	orr.w	r3, r3, #4
 80032dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80032de:	4b5c      	ldr	r3, [pc, #368]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80032e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80032e4:	f043 0301 	orr.w	r3, r3, #1
 80032e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80032ea:	e00b      	b.n	8003304 <HAL_RCC_OscConfig+0x324>
 80032ec:	4b58      	ldr	r3, [pc, #352]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80032ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f0:	4a57      	ldr	r2, [pc, #348]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80032f2:	f023 0301 	bic.w	r3, r3, #1
 80032f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80032f8:	4b55      	ldr	r3, [pc, #340]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80032fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032fc:	4a54      	ldr	r2, [pc, #336]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80032fe:	f023 0304 	bic.w	r3, r3, #4
 8003302:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d015      	beq.n	8003338 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330c:	f7ff fb3e 	bl	800298c <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003312:	e00a      	b.n	800332a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003314:	f7ff fb3a 	bl	800298c <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e0cb      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800332a:	4b49      	ldr	r3, [pc, #292]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0ee      	beq.n	8003314 <HAL_RCC_OscConfig+0x334>
 8003336:	e014      	b.n	8003362 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003338:	f7ff fb28 	bl	800298c <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800333e:	e00a      	b.n	8003356 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003340:	f7ff fb24 	bl	800298c <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e0b5      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003356:	4b3e      	ldr	r3, [pc, #248]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 8003358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1ee      	bne.n	8003340 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003362:	7dfb      	ldrb	r3, [r7, #23]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d105      	bne.n	8003374 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003368:	4b39      	ldr	r3, [pc, #228]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 800336a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336c:	4a38      	ldr	r2, [pc, #224]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 800336e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003372:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 80a1 	beq.w	80034c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800337e:	4b34      	ldr	r3, [pc, #208]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 030c 	and.w	r3, r3, #12
 8003386:	2b08      	cmp	r3, #8
 8003388:	d05c      	beq.n	8003444 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	2b02      	cmp	r3, #2
 8003390:	d141      	bne.n	8003416 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003392:	4b31      	ldr	r3, [pc, #196]	@ (8003458 <HAL_RCC_OscConfig+0x478>)
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003398:	f7ff faf8 	bl	800298c <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a0:	f7ff faf4 	bl	800298c <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e087      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033b2:	4b27      	ldr	r3, [pc, #156]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f0      	bne.n	80033a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	69da      	ldr	r2, [r3, #28]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6a1b      	ldr	r3, [r3, #32]
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033cc:	019b      	lsls	r3, r3, #6
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d4:	085b      	lsrs	r3, r3, #1
 80033d6:	3b01      	subs	r3, #1
 80033d8:	041b      	lsls	r3, r3, #16
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e0:	061b      	lsls	r3, r3, #24
 80033e2:	491b      	ldr	r1, [pc, #108]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003458 <HAL_RCC_OscConfig+0x478>)
 80033ea:	2201      	movs	r2, #1
 80033ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ee:	f7ff facd 	bl	800298c <HAL_GetTick>
 80033f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f4:	e008      	b.n	8003408 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f6:	f7ff fac9 	bl	800298c <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d901      	bls.n	8003408 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e05c      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003408:	4b11      	ldr	r3, [pc, #68]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0f0      	beq.n	80033f6 <HAL_RCC_OscConfig+0x416>
 8003414:	e054      	b.n	80034c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003416:	4b10      	ldr	r3, [pc, #64]	@ (8003458 <HAL_RCC_OscConfig+0x478>)
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341c:	f7ff fab6 	bl	800298c <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003424:	f7ff fab2 	bl	800298c <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e045      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003436:	4b06      	ldr	r3, [pc, #24]	@ (8003450 <HAL_RCC_OscConfig+0x470>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f0      	bne.n	8003424 <HAL_RCC_OscConfig+0x444>
 8003442:	e03d      	b.n	80034c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d107      	bne.n	800345c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e038      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
 8003450:	40023800 	.word	0x40023800
 8003454:	40007000 	.word	0x40007000
 8003458:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800345c:	4b1b      	ldr	r3, [pc, #108]	@ (80034cc <HAL_RCC_OscConfig+0x4ec>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d028      	beq.n	80034bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003474:	429a      	cmp	r2, r3
 8003476:	d121      	bne.n	80034bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003482:	429a      	cmp	r2, r3
 8003484:	d11a      	bne.n	80034bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800348c:	4013      	ands	r3, r2
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003492:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003494:	4293      	cmp	r3, r2
 8003496:	d111      	bne.n	80034bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a2:	085b      	lsrs	r3, r3, #1
 80034a4:	3b01      	subs	r3, #1
 80034a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d107      	bne.n	80034bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d001      	beq.n	80034c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e000      	b.n	80034c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40023800 	.word	0x40023800

080034d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0cc      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034e4:	4b68      	ldr	r3, [pc, #416]	@ (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d90c      	bls.n	800350c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f2:	4b65      	ldr	r3, [pc, #404]	@ (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034fa:	4b63      	ldr	r3, [pc, #396]	@ (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	683a      	ldr	r2, [r7, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d001      	beq.n	800350c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0b8      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d020      	beq.n	800355a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d005      	beq.n	8003530 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003524:	4b59      	ldr	r3, [pc, #356]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	4a58      	ldr	r2, [pc, #352]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800352e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	2b00      	cmp	r3, #0
 800353a:	d005      	beq.n	8003548 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800353c:	4b53      	ldr	r3, [pc, #332]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	4a52      	ldr	r2, [pc, #328]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003542:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003546:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003548:	4b50      	ldr	r3, [pc, #320]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	494d      	ldr	r1, [pc, #308]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003556:	4313      	orrs	r3, r2
 8003558:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d044      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d107      	bne.n	800357e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356e:	4b47      	ldr	r3, [pc, #284]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d119      	bne.n	80035ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e07f      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b02      	cmp	r3, #2
 8003584:	d003      	beq.n	800358e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800358a:	2b03      	cmp	r3, #3
 800358c:	d107      	bne.n	800359e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800358e:	4b3f      	ldr	r3, [pc, #252]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d109      	bne.n	80035ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e06f      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800359e:	4b3b      	ldr	r3, [pc, #236]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e067      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ae:	4b37      	ldr	r3, [pc, #220]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f023 0203 	bic.w	r2, r3, #3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	4934      	ldr	r1, [pc, #208]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035c0:	f7ff f9e4 	bl	800298c <HAL_GetTick>
 80035c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c6:	e00a      	b.n	80035de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c8:	f7ff f9e0 	bl	800298c <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e04f      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035de:	4b2b      	ldr	r3, [pc, #172]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 020c 	and.w	r2, r3, #12
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d1eb      	bne.n	80035c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035f0:	4b25      	ldr	r3, [pc, #148]	@ (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d20c      	bcs.n	8003618 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fe:	4b22      	ldr	r3, [pc, #136]	@ (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003606:	4b20      	ldr	r3, [pc, #128]	@ (8003688 <HAL_RCC_ClockConfig+0x1b8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	429a      	cmp	r2, r3
 8003612:	d001      	beq.n	8003618 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e032      	b.n	800367e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d008      	beq.n	8003636 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003624:	4b19      	ldr	r3, [pc, #100]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4916      	ldr	r1, [pc, #88]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003632:	4313      	orrs	r3, r2
 8003634:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b00      	cmp	r3, #0
 8003640:	d009      	beq.n	8003656 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003642:	4b12      	ldr	r3, [pc, #72]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	490e      	ldr	r1, [pc, #56]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	4313      	orrs	r3, r2
 8003654:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003656:	f000 f821 	bl	800369c <HAL_RCC_GetSysClockFreq>
 800365a:	4602      	mov	r2, r0
 800365c:	4b0b      	ldr	r3, [pc, #44]	@ (800368c <HAL_RCC_ClockConfig+0x1bc>)
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	091b      	lsrs	r3, r3, #4
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	490a      	ldr	r1, [pc, #40]	@ (8003690 <HAL_RCC_ClockConfig+0x1c0>)
 8003668:	5ccb      	ldrb	r3, [r1, r3]
 800366a:	fa22 f303 	lsr.w	r3, r2, r3
 800366e:	4a09      	ldr	r2, [pc, #36]	@ (8003694 <HAL_RCC_ClockConfig+0x1c4>)
 8003670:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003672:	4b09      	ldr	r3, [pc, #36]	@ (8003698 <HAL_RCC_ClockConfig+0x1c8>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff f944 	bl	8002904 <HAL_InitTick>

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40023c00 	.word	0x40023c00
 800368c:	40023800 	.word	0x40023800
 8003690:	08008d04 	.word	0x08008d04
 8003694:	20000000 	.word	0x20000000
 8003698:	20000004 	.word	0x20000004

0800369c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800369c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036a0:	b090      	sub	sp, #64	@ 0x40
 80036a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80036a8:	2300      	movs	r3, #0
 80036aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036ac:	2300      	movs	r3, #0
 80036ae:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036b4:	4b59      	ldr	r3, [pc, #356]	@ (800381c <HAL_RCC_GetSysClockFreq+0x180>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 030c 	and.w	r3, r3, #12
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d00d      	beq.n	80036dc <HAL_RCC_GetSysClockFreq+0x40>
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	f200 80a1 	bhi.w	8003808 <HAL_RCC_GetSysClockFreq+0x16c>
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <HAL_RCC_GetSysClockFreq+0x34>
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d003      	beq.n	80036d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80036ce:	e09b      	b.n	8003808 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036d0:	4b53      	ldr	r3, [pc, #332]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x184>)
 80036d2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80036d4:	e09b      	b.n	800380e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036d6:	4b53      	ldr	r3, [pc, #332]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x188>)
 80036d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036da:	e098      	b.n	800380e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036dc:	4b4f      	ldr	r3, [pc, #316]	@ (800381c <HAL_RCC_GetSysClockFreq+0x180>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036e4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036e6:	4b4d      	ldr	r3, [pc, #308]	@ (800381c <HAL_RCC_GetSysClockFreq+0x180>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d028      	beq.n	8003744 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036f2:	4b4a      	ldr	r3, [pc, #296]	@ (800381c <HAL_RCC_GetSysClockFreq+0x180>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	099b      	lsrs	r3, r3, #6
 80036f8:	2200      	movs	r2, #0
 80036fa:	623b      	str	r3, [r7, #32]
 80036fc:	627a      	str	r2, [r7, #36]	@ 0x24
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003704:	2100      	movs	r1, #0
 8003706:	4b47      	ldr	r3, [pc, #284]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x188>)
 8003708:	fb03 f201 	mul.w	r2, r3, r1
 800370c:	2300      	movs	r3, #0
 800370e:	fb00 f303 	mul.w	r3, r0, r3
 8003712:	4413      	add	r3, r2
 8003714:	4a43      	ldr	r2, [pc, #268]	@ (8003824 <HAL_RCC_GetSysClockFreq+0x188>)
 8003716:	fba0 1202 	umull	r1, r2, r0, r2
 800371a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800371c:	460a      	mov	r2, r1
 800371e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003720:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003722:	4413      	add	r3, r2
 8003724:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003728:	2200      	movs	r2, #0
 800372a:	61bb      	str	r3, [r7, #24]
 800372c:	61fa      	str	r2, [r7, #28]
 800372e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003732:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003736:	f7fd fa3f 	bl	8000bb8 <__aeabi_uldivmod>
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	4613      	mov	r3, r2
 8003740:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003742:	e053      	b.n	80037ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003744:	4b35      	ldr	r3, [pc, #212]	@ (800381c <HAL_RCC_GetSysClockFreq+0x180>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	099b      	lsrs	r3, r3, #6
 800374a:	2200      	movs	r2, #0
 800374c:	613b      	str	r3, [r7, #16]
 800374e:	617a      	str	r2, [r7, #20]
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003756:	f04f 0b00 	mov.w	fp, #0
 800375a:	4652      	mov	r2, sl
 800375c:	465b      	mov	r3, fp
 800375e:	f04f 0000 	mov.w	r0, #0
 8003762:	f04f 0100 	mov.w	r1, #0
 8003766:	0159      	lsls	r1, r3, #5
 8003768:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800376c:	0150      	lsls	r0, r2, #5
 800376e:	4602      	mov	r2, r0
 8003770:	460b      	mov	r3, r1
 8003772:	ebb2 080a 	subs.w	r8, r2, sl
 8003776:	eb63 090b 	sbc.w	r9, r3, fp
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	f04f 0300 	mov.w	r3, #0
 8003782:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003786:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800378a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800378e:	ebb2 0408 	subs.w	r4, r2, r8
 8003792:	eb63 0509 	sbc.w	r5, r3, r9
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	00eb      	lsls	r3, r5, #3
 80037a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037a4:	00e2      	lsls	r2, r4, #3
 80037a6:	4614      	mov	r4, r2
 80037a8:	461d      	mov	r5, r3
 80037aa:	eb14 030a 	adds.w	r3, r4, sl
 80037ae:	603b      	str	r3, [r7, #0]
 80037b0:	eb45 030b 	adc.w	r3, r5, fp
 80037b4:	607b      	str	r3, [r7, #4]
 80037b6:	f04f 0200 	mov.w	r2, #0
 80037ba:	f04f 0300 	mov.w	r3, #0
 80037be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037c2:	4629      	mov	r1, r5
 80037c4:	028b      	lsls	r3, r1, #10
 80037c6:	4621      	mov	r1, r4
 80037c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037cc:	4621      	mov	r1, r4
 80037ce:	028a      	lsls	r2, r1, #10
 80037d0:	4610      	mov	r0, r2
 80037d2:	4619      	mov	r1, r3
 80037d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037d6:	2200      	movs	r2, #0
 80037d8:	60bb      	str	r3, [r7, #8]
 80037da:	60fa      	str	r2, [r7, #12]
 80037dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037e0:	f7fd f9ea 	bl	8000bb8 <__aeabi_uldivmod>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4613      	mov	r3, r2
 80037ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037ec:	4b0b      	ldr	r3, [pc, #44]	@ (800381c <HAL_RCC_GetSysClockFreq+0x180>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	0c1b      	lsrs	r3, r3, #16
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	3301      	adds	r3, #1
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80037fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80037fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003800:	fbb2 f3f3 	udiv	r3, r2, r3
 8003804:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003806:	e002      	b.n	800380e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003808:	4b05      	ldr	r3, [pc, #20]	@ (8003820 <HAL_RCC_GetSysClockFreq+0x184>)
 800380a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800380c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800380e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003810:	4618      	mov	r0, r3
 8003812:	3740      	adds	r7, #64	@ 0x40
 8003814:	46bd      	mov	sp, r7
 8003816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800381a:	bf00      	nop
 800381c:	40023800 	.word	0x40023800
 8003820:	00f42400 	.word	0x00f42400
 8003824:	017d7840 	.word	0x017d7840

08003828 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800382c:	4b03      	ldr	r3, [pc, #12]	@ (800383c <HAL_RCC_GetHCLKFreq+0x14>)
 800382e:	681b      	ldr	r3, [r3, #0]
}
 8003830:	4618      	mov	r0, r3
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	20000000 	.word	0x20000000

08003840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003844:	f7ff fff0 	bl	8003828 <HAL_RCC_GetHCLKFreq>
 8003848:	4602      	mov	r2, r0
 800384a:	4b05      	ldr	r3, [pc, #20]	@ (8003860 <HAL_RCC_GetPCLK1Freq+0x20>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	0a9b      	lsrs	r3, r3, #10
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	4903      	ldr	r1, [pc, #12]	@ (8003864 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003856:	5ccb      	ldrb	r3, [r1, r3]
 8003858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800385c:	4618      	mov	r0, r3
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40023800 	.word	0x40023800
 8003864:	08008d14 	.word	0x08008d14

08003868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800386c:	f7ff ffdc 	bl	8003828 <HAL_RCC_GetHCLKFreq>
 8003870:	4602      	mov	r2, r0
 8003872:	4b05      	ldr	r3, [pc, #20]	@ (8003888 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	0b5b      	lsrs	r3, r3, #13
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	4903      	ldr	r1, [pc, #12]	@ (800388c <HAL_RCC_GetPCLK2Freq+0x24>)
 800387e:	5ccb      	ldrb	r3, [r1, r3]
 8003880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003884:	4618      	mov	r0, r3
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40023800 	.word	0x40023800
 800388c:	08008d14 	.word	0x08008d14

08003890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e041      	b.n	8003926 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d106      	bne.n	80038bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7fe fd4a 	bl	8002350 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3304      	adds	r3, #4
 80038cc:	4619      	mov	r1, r3
 80038ce:	4610      	mov	r0, r2
 80038d0:	f001 fa62 	bl	8004d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2201      	movs	r2, #1
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b082      	sub	sp, #8
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e041      	b.n	80039c4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d106      	bne.n	800395a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f839 	bl	80039cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2202      	movs	r2, #2
 800395e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3304      	adds	r3, #4
 800396a:	4619      	mov	r1, r3
 800396c:	4610      	mov	r0, r2
 800396e:	f001 fa13 	bl	8004d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d109      	bne.n	8003a04 <HAL_TIM_PWM_Start+0x24>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	bf14      	ite	ne
 80039fc:	2301      	movne	r3, #1
 80039fe:	2300      	moveq	r3, #0
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	e022      	b.n	8003a4a <HAL_TIM_PWM_Start+0x6a>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d109      	bne.n	8003a1e <HAL_TIM_PWM_Start+0x3e>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	bf14      	ite	ne
 8003a16:	2301      	movne	r3, #1
 8003a18:	2300      	moveq	r3, #0
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	e015      	b.n	8003a4a <HAL_TIM_PWM_Start+0x6a>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d109      	bne.n	8003a38 <HAL_TIM_PWM_Start+0x58>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	bf14      	ite	ne
 8003a30:	2301      	movne	r3, #1
 8003a32:	2300      	moveq	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	e008      	b.n	8003a4a <HAL_TIM_PWM_Start+0x6a>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	bf14      	ite	ne
 8003a44:	2301      	movne	r3, #1
 8003a46:	2300      	moveq	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e068      	b.n	8003b24 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d104      	bne.n	8003a62 <HAL_TIM_PWM_Start+0x82>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a60:	e013      	b.n	8003a8a <HAL_TIM_PWM_Start+0xaa>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d104      	bne.n	8003a72 <HAL_TIM_PWM_Start+0x92>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a70:	e00b      	b.n	8003a8a <HAL_TIM_PWM_Start+0xaa>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d104      	bne.n	8003a82 <HAL_TIM_PWM_Start+0xa2>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a80:	e003      	b.n	8003a8a <HAL_TIM_PWM_Start+0xaa>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2202      	movs	r2, #2
 8003a86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	6839      	ldr	r1, [r7, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f001 fd50 	bl	8005538 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a23      	ldr	r2, [pc, #140]	@ (8003b2c <HAL_TIM_PWM_Start+0x14c>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d107      	bne.n	8003ab2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ab0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a1d      	ldr	r2, [pc, #116]	@ (8003b2c <HAL_TIM_PWM_Start+0x14c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d018      	beq.n	8003aee <HAL_TIM_PWM_Start+0x10e>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ac4:	d013      	beq.n	8003aee <HAL_TIM_PWM_Start+0x10e>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a19      	ldr	r2, [pc, #100]	@ (8003b30 <HAL_TIM_PWM_Start+0x150>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00e      	beq.n	8003aee <HAL_TIM_PWM_Start+0x10e>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a17      	ldr	r2, [pc, #92]	@ (8003b34 <HAL_TIM_PWM_Start+0x154>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d009      	beq.n	8003aee <HAL_TIM_PWM_Start+0x10e>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a16      	ldr	r2, [pc, #88]	@ (8003b38 <HAL_TIM_PWM_Start+0x158>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d004      	beq.n	8003aee <HAL_TIM_PWM_Start+0x10e>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a14      	ldr	r2, [pc, #80]	@ (8003b3c <HAL_TIM_PWM_Start+0x15c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d111      	bne.n	8003b12 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 0307 	and.w	r3, r3, #7
 8003af8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2b06      	cmp	r3, #6
 8003afe:	d010      	beq.n	8003b22 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b10:	e007      	b.n	8003b22 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f042 0201 	orr.w	r2, r2, #1
 8003b20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40010000 	.word	0x40010000
 8003b30:	40000400 	.word	0x40000400
 8003b34:	40000800 	.word	0x40000800
 8003b38:	40000c00 	.word	0x40000c00
 8003b3c:	40014000 	.word	0x40014000

08003b40 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	6839      	ldr	r1, [r7, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f001 fcf0 	bl	8005538 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a29      	ldr	r2, [pc, #164]	@ (8003c04 <HAL_TIM_PWM_Stop+0xc4>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d117      	bne.n	8003b92 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	6a1a      	ldr	r2, [r3, #32]
 8003b68:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10f      	bne.n	8003b92 <HAL_TIM_PWM_Stop+0x52>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6a1a      	ldr	r2, [r3, #32]
 8003b78:	f240 4344 	movw	r3, #1092	@ 0x444
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d107      	bne.n	8003b92 <HAL_TIM_PWM_Stop+0x52>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b90:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6a1a      	ldr	r2, [r3, #32]
 8003b98:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10f      	bne.n	8003bc2 <HAL_TIM_PWM_Stop+0x82>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6a1a      	ldr	r2, [r3, #32]
 8003ba8:	f240 4344 	movw	r3, #1092	@ 0x444
 8003bac:	4013      	ands	r3, r2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d107      	bne.n	8003bc2 <HAL_TIM_PWM_Stop+0x82>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0201 	bic.w	r2, r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d104      	bne.n	8003bd2 <HAL_TIM_PWM_Stop+0x92>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003bd0:	e013      	b.n	8003bfa <HAL_TIM_PWM_Stop+0xba>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b04      	cmp	r3, #4
 8003bd6:	d104      	bne.n	8003be2 <HAL_TIM_PWM_Stop+0xa2>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003be0:	e00b      	b.n	8003bfa <HAL_TIM_PWM_Stop+0xba>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	2b08      	cmp	r3, #8
 8003be6:	d104      	bne.n	8003bf2 <HAL_TIM_PWM_Stop+0xb2>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bf0:	e003      	b.n	8003bfa <HAL_TIM_PWM_Stop+0xba>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40010000 	.word	0x40010000

08003c08 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e041      	b.n	8003c9e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d106      	bne.n	8003c34 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f839 	bl	8003ca6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2202      	movs	r2, #2
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3304      	adds	r3, #4
 8003c44:	4619      	mov	r1, r3
 8003c46:	4610      	mov	r0, r2
 8003c48:	f001 f8a6 	bl	8004d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
	...

08003cbc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d104      	bne.n	8003cda <HAL_TIM_IC_Start_IT+0x1e>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	e013      	b.n	8003d02 <HAL_TIM_IC_Start_IT+0x46>
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	2b04      	cmp	r3, #4
 8003cde:	d104      	bne.n	8003cea <HAL_TIM_IC_Start_IT+0x2e>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	e00b      	b.n	8003d02 <HAL_TIM_IC_Start_IT+0x46>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d104      	bne.n	8003cfa <HAL_TIM_IC_Start_IT+0x3e>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	e003      	b.n	8003d02 <HAL_TIM_IC_Start_IT+0x46>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d104      	bne.n	8003d14 <HAL_TIM_IC_Start_IT+0x58>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	e013      	b.n	8003d3c <HAL_TIM_IC_Start_IT+0x80>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d104      	bne.n	8003d24 <HAL_TIM_IC_Start_IT+0x68>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	e00b      	b.n	8003d3c <HAL_TIM_IC_Start_IT+0x80>
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	d104      	bne.n	8003d34 <HAL_TIM_IC_Start_IT+0x78>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	e003      	b.n	8003d3c <HAL_TIM_IC_Start_IT+0x80>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d3e:	7bbb      	ldrb	r3, [r7, #14]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d102      	bne.n	8003d4a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d44:	7b7b      	ldrb	r3, [r7, #13]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d001      	beq.n	8003d4e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e0c2      	b.n	8003ed4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d104      	bne.n	8003d5e <HAL_TIM_IC_Start_IT+0xa2>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d5c:	e013      	b.n	8003d86 <HAL_TIM_IC_Start_IT+0xca>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d104      	bne.n	8003d6e <HAL_TIM_IC_Start_IT+0xb2>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d6c:	e00b      	b.n	8003d86 <HAL_TIM_IC_Start_IT+0xca>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d104      	bne.n	8003d7e <HAL_TIM_IC_Start_IT+0xc2>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d7c:	e003      	b.n	8003d86 <HAL_TIM_IC_Start_IT+0xca>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2202      	movs	r2, #2
 8003d82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d104      	bne.n	8003d96 <HAL_TIM_IC_Start_IT+0xda>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2202      	movs	r2, #2
 8003d90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d94:	e013      	b.n	8003dbe <HAL_TIM_IC_Start_IT+0x102>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d104      	bne.n	8003da6 <HAL_TIM_IC_Start_IT+0xea>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003da4:	e00b      	b.n	8003dbe <HAL_TIM_IC_Start_IT+0x102>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	2b08      	cmp	r3, #8
 8003daa:	d104      	bne.n	8003db6 <HAL_TIM_IC_Start_IT+0xfa>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003db4:	e003      	b.n	8003dbe <HAL_TIM_IC_Start_IT+0x102>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2202      	movs	r2, #2
 8003dba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2b0c      	cmp	r3, #12
 8003dc2:	d841      	bhi.n	8003e48 <HAL_TIM_IC_Start_IT+0x18c>
 8003dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8003dcc <HAL_TIM_IC_Start_IT+0x110>)
 8003dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dca:	bf00      	nop
 8003dcc:	08003e01 	.word	0x08003e01
 8003dd0:	08003e49 	.word	0x08003e49
 8003dd4:	08003e49 	.word	0x08003e49
 8003dd8:	08003e49 	.word	0x08003e49
 8003ddc:	08003e13 	.word	0x08003e13
 8003de0:	08003e49 	.word	0x08003e49
 8003de4:	08003e49 	.word	0x08003e49
 8003de8:	08003e49 	.word	0x08003e49
 8003dec:	08003e25 	.word	0x08003e25
 8003df0:	08003e49 	.word	0x08003e49
 8003df4:	08003e49 	.word	0x08003e49
 8003df8:	08003e49 	.word	0x08003e49
 8003dfc:	08003e37 	.word	0x08003e37
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0202 	orr.w	r2, r2, #2
 8003e0e:	60da      	str	r2, [r3, #12]
      break;
 8003e10:	e01d      	b.n	8003e4e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f042 0204 	orr.w	r2, r2, #4
 8003e20:	60da      	str	r2, [r3, #12]
      break;
 8003e22:	e014      	b.n	8003e4e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0208 	orr.w	r2, r2, #8
 8003e32:	60da      	str	r2, [r3, #12]
      break;
 8003e34:	e00b      	b.n	8003e4e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68da      	ldr	r2, [r3, #12]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f042 0210 	orr.w	r2, r2, #16
 8003e44:	60da      	str	r2, [r3, #12]
      break;
 8003e46:	e002      	b.n	8003e4e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e4c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d13e      	bne.n	8003ed2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	6839      	ldr	r1, [r7, #0]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f001 fb6b 	bl	8005538 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a1d      	ldr	r2, [pc, #116]	@ (8003edc <HAL_TIM_IC_Start_IT+0x220>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d018      	beq.n	8003e9e <HAL_TIM_IC_Start_IT+0x1e2>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e74:	d013      	beq.n	8003e9e <HAL_TIM_IC_Start_IT+0x1e2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a19      	ldr	r2, [pc, #100]	@ (8003ee0 <HAL_TIM_IC_Start_IT+0x224>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d00e      	beq.n	8003e9e <HAL_TIM_IC_Start_IT+0x1e2>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a17      	ldr	r2, [pc, #92]	@ (8003ee4 <HAL_TIM_IC_Start_IT+0x228>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d009      	beq.n	8003e9e <HAL_TIM_IC_Start_IT+0x1e2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a16      	ldr	r2, [pc, #88]	@ (8003ee8 <HAL_TIM_IC_Start_IT+0x22c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d004      	beq.n	8003e9e <HAL_TIM_IC_Start_IT+0x1e2>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a14      	ldr	r2, [pc, #80]	@ (8003eec <HAL_TIM_IC_Start_IT+0x230>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d111      	bne.n	8003ec2 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f003 0307 	and.w	r3, r3, #7
 8003ea8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	2b06      	cmp	r3, #6
 8003eae:	d010      	beq.n	8003ed2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0201 	orr.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec0:	e007      	b.n	8003ed2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 0201 	orr.w	r2, r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	40010000 	.word	0x40010000
 8003ee0:	40000400 	.word	0x40000400
 8003ee4:	40000800 	.word	0x40000800
 8003ee8:	40000c00 	.word	0x40000c00
 8003eec:	40014000 	.word	0x40014000

08003ef0 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003efa:	2300      	movs	r3, #0
 8003efc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	2b0c      	cmp	r3, #12
 8003f02:	d841      	bhi.n	8003f88 <HAL_TIM_IC_Stop_IT+0x98>
 8003f04:	a201      	add	r2, pc, #4	@ (adr r2, 8003f0c <HAL_TIM_IC_Stop_IT+0x1c>)
 8003f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0a:	bf00      	nop
 8003f0c:	08003f41 	.word	0x08003f41
 8003f10:	08003f89 	.word	0x08003f89
 8003f14:	08003f89 	.word	0x08003f89
 8003f18:	08003f89 	.word	0x08003f89
 8003f1c:	08003f53 	.word	0x08003f53
 8003f20:	08003f89 	.word	0x08003f89
 8003f24:	08003f89 	.word	0x08003f89
 8003f28:	08003f89 	.word	0x08003f89
 8003f2c:	08003f65 	.word	0x08003f65
 8003f30:	08003f89 	.word	0x08003f89
 8003f34:	08003f89 	.word	0x08003f89
 8003f38:	08003f89 	.word	0x08003f89
 8003f3c:	08003f77 	.word	0x08003f77
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0202 	bic.w	r2, r2, #2
 8003f4e:	60da      	str	r2, [r3, #12]
      break;
 8003f50:	e01d      	b.n	8003f8e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68da      	ldr	r2, [r3, #12]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 0204 	bic.w	r2, r2, #4
 8003f60:	60da      	str	r2, [r3, #12]
      break;
 8003f62:	e014      	b.n	8003f8e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68da      	ldr	r2, [r3, #12]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 0208 	bic.w	r2, r2, #8
 8003f72:	60da      	str	r2, [r3, #12]
      break;
 8003f74:	e00b      	b.n	8003f8e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0210 	bic.w	r2, r2, #16
 8003f84:	60da      	str	r2, [r3, #12]
      break;
 8003f86:	e002      	b.n	8003f8e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f8c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003f8e:	7bfb      	ldrb	r3, [r7, #15]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d156      	bne.n	8004042 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	6839      	ldr	r1, [r7, #0]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f001 facb 	bl	8005538 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6a1a      	ldr	r2, [r3, #32]
 8003fa8:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003fac:	4013      	ands	r3, r2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d10f      	bne.n	8003fd2 <HAL_TIM_IC_Stop_IT+0xe2>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	6a1a      	ldr	r2, [r3, #32]
 8003fb8:	f240 4344 	movw	r3, #1092	@ 0x444
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d107      	bne.n	8003fd2 <HAL_TIM_IC_Stop_IT+0xe2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 0201 	bic.w	r2, r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d104      	bne.n	8003fe2 <HAL_TIM_IC_Stop_IT+0xf2>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fe0:	e013      	b.n	800400a <HAL_TIM_IC_Stop_IT+0x11a>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b04      	cmp	r3, #4
 8003fe6:	d104      	bne.n	8003ff2 <HAL_TIM_IC_Stop_IT+0x102>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ff0:	e00b      	b.n	800400a <HAL_TIM_IC_Stop_IT+0x11a>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d104      	bne.n	8004002 <HAL_TIM_IC_Stop_IT+0x112>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004000:	e003      	b.n	800400a <HAL_TIM_IC_Stop_IT+0x11a>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d104      	bne.n	800401a <HAL_TIM_IC_Stop_IT+0x12a>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004018:	e013      	b.n	8004042 <HAL_TIM_IC_Stop_IT+0x152>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b04      	cmp	r3, #4
 800401e:	d104      	bne.n	800402a <HAL_TIM_IC_Stop_IT+0x13a>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004028:	e00b      	b.n	8004042 <HAL_TIM_IC_Stop_IT+0x152>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b08      	cmp	r3, #8
 800402e:	d104      	bne.n	800403a <HAL_TIM_IC_Stop_IT+0x14a>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004038:	e003      	b.n	8004042 <HAL_TIM_IC_Stop_IT+0x152>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 8004042:	7bfb      	ldrb	r3, [r7, #15]
}
 8004044:	4618      	mov	r0, r3
 8004046:	3710      	adds	r7, #16
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e097      	b.n	8004190 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b00      	cmp	r3, #0
 800406a:	d106      	bne.n	800407a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7fe f9e7 	bl	8002448 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2202      	movs	r2, #2
 800407e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6812      	ldr	r2, [r2, #0]
 800408c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004090:	f023 0307 	bic.w	r3, r3, #7
 8004094:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3304      	adds	r3, #4
 800409e:	4619      	mov	r1, r3
 80040a0:	4610      	mov	r0, r2
 80040a2:	f000 fe79 	bl	8004d98 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040ce:	f023 0303 	bic.w	r3, r3, #3
 80040d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	699b      	ldr	r3, [r3, #24]
 80040dc:	021b      	lsls	r3, r3, #8
 80040de:	4313      	orrs	r3, r2
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80040ec:	f023 030c 	bic.w	r3, r3, #12
 80040f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80040f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	69db      	ldr	r3, [r3, #28]
 8004106:	021b      	lsls	r3, r3, #8
 8004108:	4313      	orrs	r3, r2
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	011a      	lsls	r2, r3, #4
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	031b      	lsls	r3, r3, #12
 800411c:	4313      	orrs	r3, r2
 800411e:	693a      	ldr	r2, [r7, #16]
 8004120:	4313      	orrs	r3, r2
 8004122:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800412a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004132:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685a      	ldr	r2, [r3, #4]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	4313      	orrs	r3, r2
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	4313      	orrs	r3, r2
 8004144:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3718      	adds	r7, #24
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80041b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80041c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d110      	bne.n	80041ea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d102      	bne.n	80041d4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80041ce:	7b7b      	ldrb	r3, [r7, #13]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d001      	beq.n	80041d8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e069      	b.n	80042ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041e8:	e031      	b.n	800424e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	2b04      	cmp	r3, #4
 80041ee:	d110      	bne.n	8004212 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80041f0:	7bbb      	ldrb	r3, [r7, #14]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d102      	bne.n	80041fc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80041f6:	7b3b      	ldrb	r3, [r7, #12]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d001      	beq.n	8004200 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e055      	b.n	80042ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004210:	e01d      	b.n	800424e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004212:	7bfb      	ldrb	r3, [r7, #15]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d108      	bne.n	800422a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004218:	7bbb      	ldrb	r3, [r7, #14]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d105      	bne.n	800422a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800421e:	7b7b      	ldrb	r3, [r7, #13]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d102      	bne.n	800422a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004224:	7b3b      	ldrb	r3, [r7, #12]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d001      	beq.n	800422e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e03e      	b.n	80042ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2202      	movs	r2, #2
 8004232:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2202      	movs	r2, #2
 800423a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2202      	movs	r2, #2
 8004242:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2202      	movs	r2, #2
 800424a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <HAL_TIM_Encoder_Start+0xc4>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2b04      	cmp	r3, #4
 8004258:	d008      	beq.n	800426c <HAL_TIM_Encoder_Start+0xd4>
 800425a:	e00f      	b.n	800427c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2201      	movs	r2, #1
 8004262:	2100      	movs	r1, #0
 8004264:	4618      	mov	r0, r3
 8004266:	f001 f967 	bl	8005538 <TIM_CCxChannelCmd>
      break;
 800426a:	e016      	b.n	800429a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2201      	movs	r2, #1
 8004272:	2104      	movs	r1, #4
 8004274:	4618      	mov	r0, r3
 8004276:	f001 f95f 	bl	8005538 <TIM_CCxChannelCmd>
      break;
 800427a:	e00e      	b.n	800429a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2201      	movs	r2, #1
 8004282:	2100      	movs	r1, #0
 8004284:	4618      	mov	r0, r3
 8004286:	f001 f957 	bl	8005538 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2201      	movs	r2, #1
 8004290:	2104      	movs	r1, #4
 8004292:	4618      	mov	r0, r3
 8004294:	f001 f950 	bl	8005538 <TIM_CCxChannelCmd>
      break;
 8004298:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f042 0201 	orr.w	r2, r2, #1
 80042a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d003      	beq.n	80042cc <HAL_TIM_Encoder_Stop+0x18>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d008      	beq.n	80042dc <HAL_TIM_Encoder_Stop+0x28>
 80042ca:	e00f      	b.n	80042ec <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2200      	movs	r2, #0
 80042d2:	2100      	movs	r1, #0
 80042d4:	4618      	mov	r0, r3
 80042d6:	f001 f92f 	bl	8005538 <TIM_CCxChannelCmd>
      break;
 80042da:	e016      	b.n	800430a <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2200      	movs	r2, #0
 80042e2:	2104      	movs	r1, #4
 80042e4:	4618      	mov	r0, r3
 80042e6:	f001 f927 	bl	8005538 <TIM_CCxChannelCmd>
      break;
 80042ea:	e00e      	b.n	800430a <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2200      	movs	r2, #0
 80042f2:	2100      	movs	r1, #0
 80042f4:	4618      	mov	r0, r3
 80042f6:	f001 f91f 	bl	8005538 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2200      	movs	r2, #0
 8004300:	2104      	movs	r1, #4
 8004302:	4618      	mov	r0, r3
 8004304:	f001 f918 	bl	8005538 <TIM_CCxChannelCmd>
      break;
 8004308:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6a1a      	ldr	r2, [r3, #32]
 8004310:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004314:	4013      	ands	r3, r2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10f      	bne.n	800433a <HAL_TIM_Encoder_Stop+0x86>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6a1a      	ldr	r2, [r3, #32]
 8004320:	f240 4344 	movw	r3, #1092	@ 0x444
 8004324:	4013      	ands	r3, r2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d107      	bne.n	800433a <HAL_TIM_Encoder_Stop+0x86>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f022 0201 	bic.w	r2, r2, #1
 8004338:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d002      	beq.n	8004346 <HAL_TIM_Encoder_Stop+0x92>
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	2b04      	cmp	r3, #4
 8004344:	d138      	bne.n	80043b8 <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d104      	bne.n	8004356 <HAL_TIM_Encoder_Stop+0xa2>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004354:	e013      	b.n	800437e <HAL_TIM_Encoder_Stop+0xca>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b04      	cmp	r3, #4
 800435a:	d104      	bne.n	8004366 <HAL_TIM_Encoder_Stop+0xb2>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004364:	e00b      	b.n	800437e <HAL_TIM_Encoder_Stop+0xca>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b08      	cmp	r3, #8
 800436a:	d104      	bne.n	8004376 <HAL_TIM_Encoder_Stop+0xc2>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004374:	e003      	b.n	800437e <HAL_TIM_Encoder_Stop+0xca>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d104      	bne.n	800438e <HAL_TIM_Encoder_Stop+0xda>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800438c:	e024      	b.n	80043d8 <HAL_TIM_Encoder_Stop+0x124>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b04      	cmp	r3, #4
 8004392:	d104      	bne.n	800439e <HAL_TIM_Encoder_Stop+0xea>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800439c:	e01c      	b.n	80043d8 <HAL_TIM_Encoder_Stop+0x124>
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d104      	bne.n	80043ae <HAL_TIM_Encoder_Stop+0xfa>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043ac:	e014      	b.n	80043d8 <HAL_TIM_Encoder_Stop+0x124>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043b6:	e00f      	b.n	80043d8 <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return HAL_OK;
 80043d8:	2300      	movs	r3, #0
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b084      	sub	sp, #16
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
 80043ea:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043f2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80043fa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004402:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800440a:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d110      	bne.n	8004434 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004412:	7bfb      	ldrb	r3, [r7, #15]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d102      	bne.n	800441e <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004418:	7b7b      	ldrb	r3, [r7, #13]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d001      	beq.n	8004422 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e089      	b.n	8004536 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2202      	movs	r2, #2
 8004426:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2202      	movs	r2, #2
 800442e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004432:	e031      	b.n	8004498 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	2b04      	cmp	r3, #4
 8004438:	d110      	bne.n	800445c <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800443a:	7bbb      	ldrb	r3, [r7, #14]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d102      	bne.n	8004446 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004440:	7b3b      	ldrb	r3, [r7, #12]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d001      	beq.n	800444a <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e075      	b.n	8004536 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2202      	movs	r2, #2
 800444e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2202      	movs	r2, #2
 8004456:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800445a:	e01d      	b.n	8004498 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800445c:	7bfb      	ldrb	r3, [r7, #15]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d108      	bne.n	8004474 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004462:	7bbb      	ldrb	r3, [r7, #14]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d105      	bne.n	8004474 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004468:	7b7b      	ldrb	r3, [r7, #13]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d102      	bne.n	8004474 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800446e:	7b3b      	ldrb	r3, [r7, #12]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d001      	beq.n	8004478 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e05e      	b.n	8004536 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_TIM_Encoder_Start_IT+0xc4>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2b04      	cmp	r3, #4
 80044a2:	d010      	beq.n	80044c6 <HAL_TIM_Encoder_Start_IT+0xe4>
 80044a4:	e01f      	b.n	80044e6 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2201      	movs	r2, #1
 80044ac:	2100      	movs	r1, #0
 80044ae:	4618      	mov	r0, r3
 80044b0:	f001 f842 	bl	8005538 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68da      	ldr	r2, [r3, #12]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0202 	orr.w	r2, r2, #2
 80044c2:	60da      	str	r2, [r3, #12]
      break;
 80044c4:	e02e      	b.n	8004524 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2201      	movs	r2, #1
 80044cc:	2104      	movs	r1, #4
 80044ce:	4618      	mov	r0, r3
 80044d0:	f001 f832 	bl	8005538 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0204 	orr.w	r2, r2, #4
 80044e2:	60da      	str	r2, [r3, #12]
      break;
 80044e4:	e01e      	b.n	8004524 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2201      	movs	r2, #1
 80044ec:	2100      	movs	r1, #0
 80044ee:	4618      	mov	r0, r3
 80044f0:	f001 f822 	bl	8005538 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2201      	movs	r2, #1
 80044fa:	2104      	movs	r1, #4
 80044fc:	4618      	mov	r0, r3
 80044fe:	f001 f81b 	bl	8005538 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68da      	ldr	r2, [r3, #12]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f042 0202 	orr.w	r2, r2, #2
 8004510:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68da      	ldr	r2, [r3, #12]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f042 0204 	orr.w	r2, r2, #4
 8004520:	60da      	str	r2, [r3, #12]
      break;
 8004522:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0201 	orr.w	r2, r2, #1
 8004532:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b082      	sub	sp, #8
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
 8004546:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10f      	bne.n	800456e <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2200      	movs	r2, #0
 8004554:	2100      	movs	r1, #0
 8004556:	4618      	mov	r0, r3
 8004558:	f000 ffee 	bl	8005538 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68da      	ldr	r2, [r3, #12]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 0202 	bic.w	r2, r2, #2
 800456a:	60da      	str	r2, [r3, #12]
 800456c:	e030      	b.n	80045d0 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b04      	cmp	r3, #4
 8004572:	d10f      	bne.n	8004594 <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2200      	movs	r2, #0
 800457a:	2104      	movs	r1, #4
 800457c:	4618      	mov	r0, r3
 800457e:	f000 ffdb 	bl	8005538 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68da      	ldr	r2, [r3, #12]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0204 	bic.w	r2, r2, #4
 8004590:	60da      	str	r2, [r3, #12]
 8004592:	e01d      	b.n	80045d0 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2200      	movs	r2, #0
 800459a:	2100      	movs	r1, #0
 800459c:	4618      	mov	r0, r3
 800459e:	f000 ffcb 	bl	8005538 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2200      	movs	r2, #0
 80045a8:	2104      	movs	r1, #4
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 ffc4 	bl	8005538 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68da      	ldr	r2, [r3, #12]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 0202 	bic.w	r2, r2, #2
 80045be:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0204 	bic.w	r2, r2, #4
 80045ce:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6a1a      	ldr	r2, [r3, #32]
 80045d6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80045da:	4013      	ands	r3, r2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10f      	bne.n	8004600 <HAL_TIM_Encoder_Stop_IT+0xc2>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6a1a      	ldr	r2, [r3, #32]
 80045e6:	f240 4344 	movw	r3, #1092	@ 0x444
 80045ea:	4013      	ands	r3, r2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d107      	bne.n	8004600 <HAL_TIM_Encoder_Stop_IT+0xc2>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0201 	bic.w	r2, r2, #1
 80045fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d002      	beq.n	800460c <HAL_TIM_Encoder_Stop_IT+0xce>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b04      	cmp	r3, #4
 800460a:	d138      	bne.n	800467e <HAL_TIM_Encoder_Stop_IT+0x140>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d104      	bne.n	800461c <HAL_TIM_Encoder_Stop_IT+0xde>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800461a:	e013      	b.n	8004644 <HAL_TIM_Encoder_Stop_IT+0x106>
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	2b04      	cmp	r3, #4
 8004620:	d104      	bne.n	800462c <HAL_TIM_Encoder_Stop_IT+0xee>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800462a:	e00b      	b.n	8004644 <HAL_TIM_Encoder_Stop_IT+0x106>
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	2b08      	cmp	r3, #8
 8004630:	d104      	bne.n	800463c <HAL_TIM_Encoder_Stop_IT+0xfe>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800463a:	e003      	b.n	8004644 <HAL_TIM_Encoder_Stop_IT+0x106>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d104      	bne.n	8004654 <HAL_TIM_Encoder_Stop_IT+0x116>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004652:	e024      	b.n	800469e <HAL_TIM_Encoder_Stop_IT+0x160>
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	2b04      	cmp	r3, #4
 8004658:	d104      	bne.n	8004664 <HAL_TIM_Encoder_Stop_IT+0x126>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004662:	e01c      	b.n	800469e <HAL_TIM_Encoder_Stop_IT+0x160>
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	2b08      	cmp	r3, #8
 8004668:	d104      	bne.n	8004674 <HAL_TIM_Encoder_Stop_IT+0x136>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004672:	e014      	b.n	800469e <HAL_TIM_Encoder_Stop_IT+0x160>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800467c:	e00f      	b.n	800469e <HAL_TIM_Encoder_Stop_IT+0x160>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d020      	beq.n	800470c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f003 0302 	and.w	r3, r3, #2
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d01b      	beq.n	800470c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f06f 0202 	mvn.w	r2, #2
 80046dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f7fd fa1e 	bl	8001b34 <HAL_TIM_IC_CaptureCallback>
 80046f8:	e005      	b.n	8004706 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 fb2e 	bl	8004d5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 fb35 	bl	8004d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f003 0304 	and.w	r3, r3, #4
 8004712:	2b00      	cmp	r3, #0
 8004714:	d020      	beq.n	8004758 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	2b00      	cmp	r3, #0
 800471e:	d01b      	beq.n	8004758 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f06f 0204 	mvn.w	r2, #4
 8004728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2202      	movs	r2, #2
 800472e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7fd f9f8 	bl	8001b34 <HAL_TIM_IC_CaptureCallback>
 8004744:	e005      	b.n	8004752 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 fb08 	bl	8004d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 fb0f 	bl	8004d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b00      	cmp	r3, #0
 8004760:	d020      	beq.n	80047a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f003 0308 	and.w	r3, r3, #8
 8004768:	2b00      	cmp	r3, #0
 800476a:	d01b      	beq.n	80047a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f06f 0208 	mvn.w	r2, #8
 8004774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2204      	movs	r2, #4
 800477a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7fd f9d2 	bl	8001b34 <HAL_TIM_IC_CaptureCallback>
 8004790:	e005      	b.n	800479e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 fae2 	bl	8004d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 fae9 	bl	8004d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f003 0310 	and.w	r3, r3, #16
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d020      	beq.n	80047f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f003 0310 	and.w	r3, r3, #16
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d01b      	beq.n	80047f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f06f 0210 	mvn.w	r2, #16
 80047c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2208      	movs	r2, #8
 80047c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7fd f9ac 	bl	8001b34 <HAL_TIM_IC_CaptureCallback>
 80047dc:	e005      	b.n	80047ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 fabc 	bl	8004d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 fac3 	bl	8004d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00c      	beq.n	8004814 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f003 0301 	and.w	r3, r3, #1
 8004800:	2b00      	cmp	r3, #0
 8004802:	d007      	beq.n	8004814 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f06f 0201 	mvn.w	r2, #1
 800480c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7fd f9c2 	bl	8001b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00c      	beq.n	8004838 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004824:	2b00      	cmp	r3, #0
 8004826:	d007      	beq.n	8004838 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 ff1e 	bl	8005674 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00c      	beq.n	800485c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004848:	2b00      	cmp	r3, #0
 800484a:	d007      	beq.n	800485c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 fa94 	bl	8004d84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f003 0320 	and.w	r3, r3, #32
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00c      	beq.n	8004880 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f003 0320 	and.w	r3, r3, #32
 800486c:	2b00      	cmp	r3, #0
 800486e:	d007      	beq.n	8004880 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f06f 0220 	mvn.w	r2, #32
 8004878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 fef0 	bl	8005660 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004880:	bf00      	nop
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004894:	2300      	movs	r3, #0
 8004896:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d101      	bne.n	80048a6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80048a2:	2302      	movs	r3, #2
 80048a4:	e088      	b.n	80049b8 <HAL_TIM_IC_ConfigChannel+0x130>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d11b      	bne.n	80048ec <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80048c4:	f000 fc80 	bl	80051c8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	699a      	ldr	r2, [r3, #24]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 020c 	bic.w	r2, r2, #12
 80048d6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6999      	ldr	r1, [r3, #24]
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	689a      	ldr	r2, [r3, #8]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	619a      	str	r2, [r3, #24]
 80048ea:	e060      	b.n	80049ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d11c      	bne.n	800492c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004902:	f000 fcf8 	bl	80052f6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	699a      	ldr	r2, [r3, #24]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004914:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6999      	ldr	r1, [r3, #24]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	021a      	lsls	r2, r3, #8
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	619a      	str	r2, [r3, #24]
 800492a:	e040      	b.n	80049ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2b08      	cmp	r3, #8
 8004930:	d11b      	bne.n	800496a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004942:	f000 fd45 	bl	80053d0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	69da      	ldr	r2, [r3, #28]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 020c 	bic.w	r2, r2, #12
 8004954:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	69d9      	ldr	r1, [r3, #28]
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	61da      	str	r2, [r3, #28]
 8004968:	e021      	b.n	80049ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b0c      	cmp	r3, #12
 800496e:	d11c      	bne.n	80049aa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004980:	f000 fd62 	bl	8005448 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	69da      	ldr	r2, [r3, #28]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004992:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	69d9      	ldr	r1, [r3, #28]
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	021a      	lsls	r2, r3, #8
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	61da      	str	r2, [r3, #28]
 80049a8:	e001      	b.n	80049ae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3718      	adds	r7, #24
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049cc:	2300      	movs	r3, #0
 80049ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d101      	bne.n	80049de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049da:	2302      	movs	r3, #2
 80049dc:	e0ae      	b.n	8004b3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b0c      	cmp	r3, #12
 80049ea:	f200 809f 	bhi.w	8004b2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80049ee:	a201      	add	r2, pc, #4	@ (adr r2, 80049f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f4:	08004a29 	.word	0x08004a29
 80049f8:	08004b2d 	.word	0x08004b2d
 80049fc:	08004b2d 	.word	0x08004b2d
 8004a00:	08004b2d 	.word	0x08004b2d
 8004a04:	08004a69 	.word	0x08004a69
 8004a08:	08004b2d 	.word	0x08004b2d
 8004a0c:	08004b2d 	.word	0x08004b2d
 8004a10:	08004b2d 	.word	0x08004b2d
 8004a14:	08004aab 	.word	0x08004aab
 8004a18:	08004b2d 	.word	0x08004b2d
 8004a1c:	08004b2d 	.word	0x08004b2d
 8004a20:	08004b2d 	.word	0x08004b2d
 8004a24:	08004aeb 	.word	0x08004aeb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68b9      	ldr	r1, [r7, #8]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f000 fa3e 	bl	8004eb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	699a      	ldr	r2, [r3, #24]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 0208 	orr.w	r2, r2, #8
 8004a42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699a      	ldr	r2, [r3, #24]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 0204 	bic.w	r2, r2, #4
 8004a52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6999      	ldr	r1, [r3, #24]
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	691a      	ldr	r2, [r3, #16]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	619a      	str	r2, [r3, #24]
      break;
 8004a66:	e064      	b.n	8004b32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68b9      	ldr	r1, [r7, #8]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 fa84 	bl	8004f7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699a      	ldr	r2, [r3, #24]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	699a      	ldr	r2, [r3, #24]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6999      	ldr	r1, [r3, #24]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	021a      	lsls	r2, r3, #8
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	619a      	str	r2, [r3, #24]
      break;
 8004aa8:	e043      	b.n	8004b32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68b9      	ldr	r1, [r7, #8]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 facf 	bl	8005054 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	69da      	ldr	r2, [r3, #28]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f042 0208 	orr.w	r2, r2, #8
 8004ac4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	69da      	ldr	r2, [r3, #28]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 0204 	bic.w	r2, r2, #4
 8004ad4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	69d9      	ldr	r1, [r3, #28]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	691a      	ldr	r2, [r3, #16]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	61da      	str	r2, [r3, #28]
      break;
 8004ae8:	e023      	b.n	8004b32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68b9      	ldr	r1, [r7, #8]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f000 fb19 	bl	8005128 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	69da      	ldr	r2, [r3, #28]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	69da      	ldr	r2, [r3, #28]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	69d9      	ldr	r1, [r3, #28]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	021a      	lsls	r2, r3, #8
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	61da      	str	r2, [r3, #28]
      break;
 8004b2a:	e002      	b.n	8004b32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d101      	bne.n	8004b60 <HAL_TIM_ConfigClockSource+0x1c>
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	e0b4      	b.n	8004cca <HAL_TIM_ConfigClockSource+0x186>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b98:	d03e      	beq.n	8004c18 <HAL_TIM_ConfigClockSource+0xd4>
 8004b9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b9e:	f200 8087 	bhi.w	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ba2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ba6:	f000 8086 	beq.w	8004cb6 <HAL_TIM_ConfigClockSource+0x172>
 8004baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bae:	d87f      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb0:	2b70      	cmp	r3, #112	@ 0x70
 8004bb2:	d01a      	beq.n	8004bea <HAL_TIM_ConfigClockSource+0xa6>
 8004bb4:	2b70      	cmp	r3, #112	@ 0x70
 8004bb6:	d87b      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bb8:	2b60      	cmp	r3, #96	@ 0x60
 8004bba:	d050      	beq.n	8004c5e <HAL_TIM_ConfigClockSource+0x11a>
 8004bbc:	2b60      	cmp	r3, #96	@ 0x60
 8004bbe:	d877      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc0:	2b50      	cmp	r3, #80	@ 0x50
 8004bc2:	d03c      	beq.n	8004c3e <HAL_TIM_ConfigClockSource+0xfa>
 8004bc4:	2b50      	cmp	r3, #80	@ 0x50
 8004bc6:	d873      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc8:	2b40      	cmp	r3, #64	@ 0x40
 8004bca:	d058      	beq.n	8004c7e <HAL_TIM_ConfigClockSource+0x13a>
 8004bcc:	2b40      	cmp	r3, #64	@ 0x40
 8004bce:	d86f      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd0:	2b30      	cmp	r3, #48	@ 0x30
 8004bd2:	d064      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0x15a>
 8004bd4:	2b30      	cmp	r3, #48	@ 0x30
 8004bd6:	d86b      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd8:	2b20      	cmp	r3, #32
 8004bda:	d060      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0x15a>
 8004bdc:	2b20      	cmp	r3, #32
 8004bde:	d867      	bhi.n	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d05c      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0x15a>
 8004be4:	2b10      	cmp	r3, #16
 8004be6:	d05a      	beq.n	8004c9e <HAL_TIM_ConfigClockSource+0x15a>
 8004be8:	e062      	b.n	8004cb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bfa:	f000 fc7d 	bl	80054f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	609a      	str	r2, [r3, #8]
      break;
 8004c16:	e04f      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c28:	f000 fc66 	bl	80054f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c3a:	609a      	str	r2, [r3, #8]
      break;
 8004c3c:	e03c      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	f000 fb24 	bl	8005298 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2150      	movs	r1, #80	@ 0x50
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 fc33 	bl	80054c2 <TIM_ITRx_SetConfig>
      break;
 8004c5c:	e02c      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	f000 fb80 	bl	8005370 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2160      	movs	r1, #96	@ 0x60
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 fc23 	bl	80054c2 <TIM_ITRx_SetConfig>
      break;
 8004c7c:	e01c      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f000 fb04 	bl	8005298 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2140      	movs	r1, #64	@ 0x40
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 fc13 	bl	80054c2 <TIM_ITRx_SetConfig>
      break;
 8004c9c:	e00c      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4610      	mov	r0, r2
 8004caa:	f000 fc0a 	bl	80054c2 <TIM_ITRx_SetConfig>
      break;
 8004cae:	e003      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cb4:	e000      	b.n	8004cb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004cb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
	...

08004cd4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b085      	sub	sp, #20
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b0c      	cmp	r3, #12
 8004ce6:	d831      	bhi.n	8004d4c <HAL_TIM_ReadCapturedValue+0x78>
 8004ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8004cf0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cee:	bf00      	nop
 8004cf0:	08004d25 	.word	0x08004d25
 8004cf4:	08004d4d 	.word	0x08004d4d
 8004cf8:	08004d4d 	.word	0x08004d4d
 8004cfc:	08004d4d 	.word	0x08004d4d
 8004d00:	08004d2f 	.word	0x08004d2f
 8004d04:	08004d4d 	.word	0x08004d4d
 8004d08:	08004d4d 	.word	0x08004d4d
 8004d0c:	08004d4d 	.word	0x08004d4d
 8004d10:	08004d39 	.word	0x08004d39
 8004d14:	08004d4d 	.word	0x08004d4d
 8004d18:	08004d4d 	.word	0x08004d4d
 8004d1c:	08004d4d 	.word	0x08004d4d
 8004d20:	08004d43 	.word	0x08004d43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d2a:	60fb      	str	r3, [r7, #12]

      break;
 8004d2c:	e00f      	b.n	8004d4e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d34:	60fb      	str	r3, [r7, #12]

      break;
 8004d36:	e00a      	b.n	8004d4e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d3e:	60fb      	str	r3, [r7, #12]

      break;
 8004d40:	e005      	b.n	8004d4e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d48:	60fb      	str	r3, [r7, #12]

      break;
 8004d4a:	e000      	b.n	8004d4e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004d4c:	bf00      	nop
  }

  return tmpreg;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3714      	adds	r7, #20
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	4a3a      	ldr	r2, [pc, #232]	@ (8004e94 <TIM_Base_SetConfig+0xfc>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d00f      	beq.n	8004dd0 <TIM_Base_SetConfig+0x38>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004db6:	d00b      	beq.n	8004dd0 <TIM_Base_SetConfig+0x38>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a37      	ldr	r2, [pc, #220]	@ (8004e98 <TIM_Base_SetConfig+0x100>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d007      	beq.n	8004dd0 <TIM_Base_SetConfig+0x38>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a36      	ldr	r2, [pc, #216]	@ (8004e9c <TIM_Base_SetConfig+0x104>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d003      	beq.n	8004dd0 <TIM_Base_SetConfig+0x38>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a35      	ldr	r2, [pc, #212]	@ (8004ea0 <TIM_Base_SetConfig+0x108>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d108      	bne.n	8004de2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a2b      	ldr	r2, [pc, #172]	@ (8004e94 <TIM_Base_SetConfig+0xfc>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d01b      	beq.n	8004e22 <TIM_Base_SetConfig+0x8a>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004df0:	d017      	beq.n	8004e22 <TIM_Base_SetConfig+0x8a>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a28      	ldr	r2, [pc, #160]	@ (8004e98 <TIM_Base_SetConfig+0x100>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d013      	beq.n	8004e22 <TIM_Base_SetConfig+0x8a>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a27      	ldr	r2, [pc, #156]	@ (8004e9c <TIM_Base_SetConfig+0x104>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d00f      	beq.n	8004e22 <TIM_Base_SetConfig+0x8a>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a26      	ldr	r2, [pc, #152]	@ (8004ea0 <TIM_Base_SetConfig+0x108>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d00b      	beq.n	8004e22 <TIM_Base_SetConfig+0x8a>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4a25      	ldr	r2, [pc, #148]	@ (8004ea4 <TIM_Base_SetConfig+0x10c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d007      	beq.n	8004e22 <TIM_Base_SetConfig+0x8a>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a24      	ldr	r2, [pc, #144]	@ (8004ea8 <TIM_Base_SetConfig+0x110>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d003      	beq.n	8004e22 <TIM_Base_SetConfig+0x8a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a23      	ldr	r2, [pc, #140]	@ (8004eac <TIM_Base_SetConfig+0x114>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d108      	bne.n	8004e34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a0e      	ldr	r2, [pc, #56]	@ (8004e94 <TIM_Base_SetConfig+0xfc>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d103      	bne.n	8004e68 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	691a      	ldr	r2, [r3, #16]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d105      	bne.n	8004e86 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	f023 0201 	bic.w	r2, r3, #1
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	611a      	str	r2, [r3, #16]
  }
}
 8004e86:	bf00      	nop
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	40010000 	.word	0x40010000
 8004e98:	40000400 	.word	0x40000400
 8004e9c:	40000800 	.word	0x40000800
 8004ea0:	40000c00 	.word	0x40000c00
 8004ea4:	40014000 	.word	0x40014000
 8004ea8:	40014400 	.word	0x40014400
 8004eac:	40014800 	.word	0x40014800

08004eb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b087      	sub	sp, #28
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	f023 0201 	bic.w	r2, r3, #1
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f023 0303 	bic.w	r3, r3, #3
 8004ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f023 0302 	bic.w	r3, r3, #2
 8004ef8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a1c      	ldr	r2, [pc, #112]	@ (8004f78 <TIM_OC1_SetConfig+0xc8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d10c      	bne.n	8004f26 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f023 0308 	bic.w	r3, r3, #8
 8004f12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f023 0304 	bic.w	r3, r3, #4
 8004f24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a13      	ldr	r2, [pc, #76]	@ (8004f78 <TIM_OC1_SetConfig+0xc8>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d111      	bne.n	8004f52 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	621a      	str	r2, [r3, #32]
}
 8004f6c:	bf00      	nop
 8004f6e:	371c      	adds	r7, #28
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr
 8004f78:	40010000 	.word	0x40010000

08004f7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b087      	sub	sp, #28
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a1b      	ldr	r3, [r3, #32]
 8004f90:	f023 0210 	bic.w	r2, r3, #16
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	021b      	lsls	r3, r3, #8
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	f023 0320 	bic.w	r3, r3, #32
 8004fc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	011b      	lsls	r3, r3, #4
 8004fce:	697a      	ldr	r2, [r7, #20]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8005050 <TIM_OC2_SetConfig+0xd4>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d10d      	bne.n	8004ff8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fe2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	011b      	lsls	r3, r3, #4
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ff6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a15      	ldr	r2, [pc, #84]	@ (8005050 <TIM_OC2_SetConfig+0xd4>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d113      	bne.n	8005028 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005006:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800500e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	4313      	orrs	r3, r2
 800501a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	4313      	orrs	r3, r2
 8005026:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	621a      	str	r2, [r3, #32]
}
 8005042:	bf00      	nop
 8005044:	371c      	adds	r7, #28
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	40010000 	.word	0x40010000

08005054 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	69db      	ldr	r3, [r3, #28]
 800507a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f023 0303 	bic.w	r3, r3, #3
 800508a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	4313      	orrs	r3, r2
 8005094:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800509c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	021b      	lsls	r3, r3, #8
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005124 <TIM_OC3_SetConfig+0xd0>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d10d      	bne.n	80050ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	021b      	lsls	r3, r3, #8
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a14      	ldr	r2, [pc, #80]	@ (8005124 <TIM_OC3_SetConfig+0xd0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d113      	bne.n	80050fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80050dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	011b      	lsls	r3, r3, #4
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	621a      	str	r2, [r3, #32]
}
 8005118:	bf00      	nop
 800511a:	371c      	adds	r7, #28
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr
 8005124:	40010000 	.word	0x40010000

08005128 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005128:	b480      	push	{r7}
 800512a:	b087      	sub	sp, #28
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800515e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	021b      	lsls	r3, r3, #8
 8005166:	68fa      	ldr	r2, [r7, #12]
 8005168:	4313      	orrs	r3, r2
 800516a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005172:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	031b      	lsls	r3, r3, #12
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	4313      	orrs	r3, r2
 800517e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a10      	ldr	r2, [pc, #64]	@ (80051c4 <TIM_OC4_SetConfig+0x9c>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d109      	bne.n	800519c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800518e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	695b      	ldr	r3, [r3, #20]
 8005194:	019b      	lsls	r3, r3, #6
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	4313      	orrs	r3, r2
 800519a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68fa      	ldr	r2, [r7, #12]
 80051a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	621a      	str	r2, [r3, #32]
}
 80051b6:	bf00      	nop
 80051b8:	371c      	adds	r7, #28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	40010000 	.word	0x40010000

080051c8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
 80051d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	f023 0201 	bic.w	r2, r3, #1
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	4a24      	ldr	r2, [pc, #144]	@ (8005284 <TIM_TI1_SetConfig+0xbc>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d013      	beq.n	800521e <TIM_TI1_SetConfig+0x56>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051fc:	d00f      	beq.n	800521e <TIM_TI1_SetConfig+0x56>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	4a21      	ldr	r2, [pc, #132]	@ (8005288 <TIM_TI1_SetConfig+0xc0>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d00b      	beq.n	800521e <TIM_TI1_SetConfig+0x56>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	4a20      	ldr	r2, [pc, #128]	@ (800528c <TIM_TI1_SetConfig+0xc4>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d007      	beq.n	800521e <TIM_TI1_SetConfig+0x56>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4a1f      	ldr	r2, [pc, #124]	@ (8005290 <TIM_TI1_SetConfig+0xc8>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d003      	beq.n	800521e <TIM_TI1_SetConfig+0x56>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	4a1e      	ldr	r2, [pc, #120]	@ (8005294 <TIM_TI1_SetConfig+0xcc>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d101      	bne.n	8005222 <TIM_TI1_SetConfig+0x5a>
 800521e:	2301      	movs	r3, #1
 8005220:	e000      	b.n	8005224 <TIM_TI1_SetConfig+0x5c>
 8005222:	2300      	movs	r3, #0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d008      	beq.n	800523a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	f023 0303 	bic.w	r3, r3, #3
 800522e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005230:	697a      	ldr	r2, [r7, #20]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4313      	orrs	r3, r2
 8005236:	617b      	str	r3, [r7, #20]
 8005238:	e003      	b.n	8005242 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f043 0301 	orr.w	r3, r3, #1
 8005240:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005248:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	011b      	lsls	r3, r3, #4
 800524e:	b2db      	uxtb	r3, r3
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	4313      	orrs	r3, r2
 8005254:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	f023 030a 	bic.w	r3, r3, #10
 800525c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	f003 030a 	and.w	r3, r3, #10
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	4313      	orrs	r3, r2
 8005268:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	621a      	str	r2, [r3, #32]
}
 8005276:	bf00      	nop
 8005278:	371c      	adds	r7, #28
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	40010000 	.word	0x40010000
 8005288:	40000400 	.word	0x40000400
 800528c:	40000800 	.word	0x40000800
 8005290:	40000c00 	.word	0x40000c00
 8005294:	40014000 	.word	0x40014000

08005298 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005298:	b480      	push	{r7}
 800529a:	b087      	sub	sp, #28
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	f023 0201 	bic.w	r2, r3, #1
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	699b      	ldr	r3, [r3, #24]
 80052ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	011b      	lsls	r3, r3, #4
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f023 030a 	bic.w	r3, r3, #10
 80052d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052d6:	697a      	ldr	r2, [r7, #20]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	4313      	orrs	r3, r2
 80052dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	621a      	str	r2, [r3, #32]
}
 80052ea:	bf00      	nop
 80052ec:	371c      	adds	r7, #28
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b087      	sub	sp, #28
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	60f8      	str	r0, [r7, #12]
 80052fe:	60b9      	str	r1, [r7, #8]
 8005300:	607a      	str	r2, [r7, #4]
 8005302:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6a1b      	ldr	r3, [r3, #32]
 8005308:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	f023 0210 	bic.w	r2, r3, #16
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005322:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	021b      	lsls	r3, r3, #8
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	4313      	orrs	r3, r2
 800532c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005334:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	031b      	lsls	r3, r3, #12
 800533a:	b29b      	uxth	r3, r3
 800533c:	693a      	ldr	r2, [r7, #16]
 800533e:	4313      	orrs	r3, r2
 8005340:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005348:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	4313      	orrs	r3, r2
 8005356:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	621a      	str	r2, [r3, #32]
}
 8005364:	bf00      	nop
 8005366:	371c      	adds	r7, #28
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	f023 0210 	bic.w	r2, r3, #16
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800539a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	031b      	lsls	r3, r3, #12
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80053ac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	621a      	str	r2, [r3, #32]
}
 80053c4:	bf00      	nop
 80053c6:	371c      	adds	r7, #28
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b087      	sub	sp, #28
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
 80053dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	69db      	ldr	r3, [r3, #28]
 80053f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	f023 0303 	bic.w	r3, r3, #3
 80053fc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4313      	orrs	r3, r2
 8005404:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800540c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	011b      	lsls	r3, r3, #4
 8005412:	b2db      	uxtb	r3, r3
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	4313      	orrs	r3, r2
 8005418:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005420:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	021b      	lsls	r3, r3, #8
 8005426:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	4313      	orrs	r3, r2
 800542e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	697a      	ldr	r2, [r7, #20]
 800543a:	621a      	str	r2, [r3, #32]
}
 800543c:	bf00      	nop
 800543e:	371c      	adds	r7, #28
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
 8005454:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005474:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	021b      	lsls	r3, r3, #8
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	4313      	orrs	r3, r2
 800547e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005486:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	031b      	lsls	r3, r3, #12
 800548c:	b29b      	uxth	r3, r3
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	4313      	orrs	r3, r2
 8005492:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800549a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	031b      	lsls	r3, r3, #12
 80054a0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	621a      	str	r2, [r3, #32]
}
 80054b6:	bf00      	nop
 80054b8:	371c      	adds	r7, #28
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b085      	sub	sp, #20
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054da:	683a      	ldr	r2, [r7, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4313      	orrs	r3, r2
 80054e0:	f043 0307 	orr.w	r3, r3, #7
 80054e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	609a      	str	r2, [r3, #8]
}
 80054ec:	bf00      	nop
 80054ee:	3714      	adds	r7, #20
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b087      	sub	sp, #28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
 8005504:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005512:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	021a      	lsls	r2, r3, #8
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	431a      	orrs	r2, r3
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	4313      	orrs	r3, r2
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	4313      	orrs	r3, r2
 8005524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	609a      	str	r2, [r3, #8]
}
 800552c:	bf00      	nop
 800552e:	371c      	adds	r7, #28
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	f003 031f 	and.w	r3, r3, #31
 800554a:	2201      	movs	r2, #1
 800554c:	fa02 f303 	lsl.w	r3, r2, r3
 8005550:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6a1a      	ldr	r2, [r3, #32]
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	43db      	mvns	r3, r3
 800555a:	401a      	ands	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6a1a      	ldr	r2, [r3, #32]
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	f003 031f 	and.w	r3, r3, #31
 800556a:	6879      	ldr	r1, [r7, #4]
 800556c:	fa01 f303 	lsl.w	r3, r1, r3
 8005570:	431a      	orrs	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	621a      	str	r2, [r3, #32]
}
 8005576:	bf00      	nop
 8005578:	371c      	adds	r7, #28
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
	...

08005584 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005594:	2b01      	cmp	r3, #1
 8005596:	d101      	bne.n	800559c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005598:	2302      	movs	r3, #2
 800559a:	e050      	b.n	800563e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a1c      	ldr	r2, [pc, #112]	@ (800564c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d018      	beq.n	8005612 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055e8:	d013      	beq.n	8005612 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a18      	ldr	r2, [pc, #96]	@ (8005650 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d00e      	beq.n	8005612 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a16      	ldr	r2, [pc, #88]	@ (8005654 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d009      	beq.n	8005612 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a15      	ldr	r2, [pc, #84]	@ (8005658 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d004      	beq.n	8005612 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a13      	ldr	r2, [pc, #76]	@ (800565c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d10c      	bne.n	800562c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005618:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	4313      	orrs	r3, r2
 8005622:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	40010000 	.word	0x40010000
 8005650:	40000400 	.word	0x40000400
 8005654:	40000800 	.word	0x40000800
 8005658:	40000c00 	.word	0x40000c00
 800565c:	40014000 	.word	0x40014000

08005660 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e042      	b.n	8005720 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d106      	bne.n	80056b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7fc ff52 	bl	8002558 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2224      	movs	r2, #36	@ 0x24
 80056b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	68da      	ldr	r2, [r3, #12]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80056ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f973 	bl	80059b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	691a      	ldr	r2, [r3, #16]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	695a      	ldr	r2, [r3, #20]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68da      	ldr	r2, [r3, #12]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005700:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2220      	movs	r2, #32
 800570c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2220      	movs	r2, #32
 8005714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b08a      	sub	sp, #40	@ 0x28
 800572c:	af02      	add	r7, sp, #8
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	603b      	str	r3, [r7, #0]
 8005734:	4613      	mov	r3, r2
 8005736:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005738:	2300      	movs	r3, #0
 800573a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b20      	cmp	r3, #32
 8005746:	d175      	bne.n	8005834 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d002      	beq.n	8005754 <HAL_UART_Transmit+0x2c>
 800574e:	88fb      	ldrh	r3, [r7, #6]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d101      	bne.n	8005758 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e06e      	b.n	8005836 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2221      	movs	r2, #33	@ 0x21
 8005762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005766:	f7fd f911 	bl	800298c <HAL_GetTick>
 800576a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	88fa      	ldrh	r2, [r7, #6]
 8005770:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	88fa      	ldrh	r2, [r7, #6]
 8005776:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005780:	d108      	bne.n	8005794 <HAL_UART_Transmit+0x6c>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d104      	bne.n	8005794 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800578a:	2300      	movs	r3, #0
 800578c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	61bb      	str	r3, [r7, #24]
 8005792:	e003      	b.n	800579c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005798:	2300      	movs	r3, #0
 800579a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800579c:	e02e      	b.n	80057fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	2200      	movs	r2, #0
 80057a6:	2180      	movs	r1, #128	@ 0x80
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f000 f848 	bl	800583e <UART_WaitOnFlagUntilTimeout>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d005      	beq.n	80057c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2220      	movs	r2, #32
 80057b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e03a      	b.n	8005836 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10b      	bne.n	80057de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	881b      	ldrh	r3, [r3, #0]
 80057ca:	461a      	mov	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80057d6:	69bb      	ldr	r3, [r7, #24]
 80057d8:	3302      	adds	r3, #2
 80057da:	61bb      	str	r3, [r7, #24]
 80057dc:	e007      	b.n	80057ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	781a      	ldrb	r2, [r3, #0]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	3301      	adds	r3, #1
 80057ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	3b01      	subs	r3, #1
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005800:	b29b      	uxth	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1cb      	bne.n	800579e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	9300      	str	r3, [sp, #0]
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2200      	movs	r2, #0
 800580e:	2140      	movs	r1, #64	@ 0x40
 8005810:	68f8      	ldr	r0, [r7, #12]
 8005812:	f000 f814 	bl	800583e <UART_WaitOnFlagUntilTimeout>
 8005816:	4603      	mov	r3, r0
 8005818:	2b00      	cmp	r3, #0
 800581a:	d005      	beq.n	8005828 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2220      	movs	r2, #32
 8005820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e006      	b.n	8005836 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2220      	movs	r2, #32
 800582c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005830:	2300      	movs	r3, #0
 8005832:	e000      	b.n	8005836 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005834:	2302      	movs	r3, #2
  }
}
 8005836:	4618      	mov	r0, r3
 8005838:	3720      	adds	r7, #32
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800583e:	b580      	push	{r7, lr}
 8005840:	b086      	sub	sp, #24
 8005842:	af00      	add	r7, sp, #0
 8005844:	60f8      	str	r0, [r7, #12]
 8005846:	60b9      	str	r1, [r7, #8]
 8005848:	603b      	str	r3, [r7, #0]
 800584a:	4613      	mov	r3, r2
 800584c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800584e:	e03b      	b.n	80058c8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005856:	d037      	beq.n	80058c8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005858:	f7fd f898 	bl	800298c <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	6a3a      	ldr	r2, [r7, #32]
 8005864:	429a      	cmp	r2, r3
 8005866:	d302      	bcc.n	800586e <UART_WaitOnFlagUntilTimeout+0x30>
 8005868:	6a3b      	ldr	r3, [r7, #32]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e03a      	b.n	80058e8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	f003 0304 	and.w	r3, r3, #4
 800587c:	2b00      	cmp	r3, #0
 800587e:	d023      	beq.n	80058c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2b80      	cmp	r3, #128	@ 0x80
 8005884:	d020      	beq.n	80058c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	2b40      	cmp	r3, #64	@ 0x40
 800588a:	d01d      	beq.n	80058c8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0308 	and.w	r3, r3, #8
 8005896:	2b08      	cmp	r3, #8
 8005898:	d116      	bne.n	80058c8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800589a:	2300      	movs	r3, #0
 800589c:	617b      	str	r3, [r7, #20]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	617b      	str	r3, [r7, #20]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	617b      	str	r3, [r7, #20]
 80058ae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f000 f81d 	bl	80058f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2208      	movs	r2, #8
 80058ba:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e00f      	b.n	80058e8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	4013      	ands	r3, r2
 80058d2:	68ba      	ldr	r2, [r7, #8]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	bf0c      	ite	eq
 80058d8:	2301      	moveq	r3, #1
 80058da:	2300      	movne	r3, #0
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	461a      	mov	r2, r3
 80058e0:	79fb      	ldrb	r3, [r7, #7]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d0b4      	beq.n	8005850 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3718      	adds	r7, #24
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b095      	sub	sp, #84	@ 0x54
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	330c      	adds	r3, #12
 80058fe:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005902:	e853 3f00 	ldrex	r3, [r3]
 8005906:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800590a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800590e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	330c      	adds	r3, #12
 8005916:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005918:	643a      	str	r2, [r7, #64]	@ 0x40
 800591a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800591e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005920:	e841 2300 	strex	r3, r2, [r1]
 8005924:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1e5      	bne.n	80058f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	3314      	adds	r3, #20
 8005932:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005934:	6a3b      	ldr	r3, [r7, #32]
 8005936:	e853 3f00 	ldrex	r3, [r3]
 800593a:	61fb      	str	r3, [r7, #28]
   return(result);
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	f023 0301 	bic.w	r3, r3, #1
 8005942:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	3314      	adds	r3, #20
 800594a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800594c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800594e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005950:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005952:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005954:	e841 2300 	strex	r3, r2, [r1]
 8005958:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800595a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1e5      	bne.n	800592c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005964:	2b01      	cmp	r3, #1
 8005966:	d119      	bne.n	800599c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	330c      	adds	r3, #12
 800596e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	e853 3f00 	ldrex	r3, [r3]
 8005976:	60bb      	str	r3, [r7, #8]
   return(result);
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	f023 0310 	bic.w	r3, r3, #16
 800597e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	330c      	adds	r3, #12
 8005986:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005988:	61ba      	str	r2, [r7, #24]
 800598a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598c:	6979      	ldr	r1, [r7, #20]
 800598e:	69ba      	ldr	r2, [r7, #24]
 8005990:	e841 2300 	strex	r3, r2, [r1]
 8005994:	613b      	str	r3, [r7, #16]
   return(result);
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d1e5      	bne.n	8005968 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2220      	movs	r2, #32
 80059a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80059aa:	bf00      	nop
 80059ac:	3754      	adds	r7, #84	@ 0x54
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
	...

080059b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059bc:	b0c0      	sub	sp, #256	@ 0x100
 80059be:	af00      	add	r7, sp, #0
 80059c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80059d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d4:	68d9      	ldr	r1, [r3, #12]
 80059d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	ea40 0301 	orr.w	r3, r0, r1
 80059e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	431a      	orrs	r2, r3
 80059f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	431a      	orrs	r2, r3
 80059f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005a10:	f021 010c 	bic.w	r1, r1, #12
 8005a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005a1e:	430b      	orrs	r3, r1
 8005a20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a32:	6999      	ldr	r1, [r3, #24]
 8005a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	ea40 0301 	orr.w	r3, r0, r1
 8005a3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	4b8f      	ldr	r3, [pc, #572]	@ (8005c84 <UART_SetConfig+0x2cc>)
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d005      	beq.n	8005a58 <UART_SetConfig+0xa0>
 8005a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	4b8d      	ldr	r3, [pc, #564]	@ (8005c88 <UART_SetConfig+0x2d0>)
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d104      	bne.n	8005a62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a58:	f7fd ff06 	bl	8003868 <HAL_RCC_GetPCLK2Freq>
 8005a5c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005a60:	e003      	b.n	8005a6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a62:	f7fd feed 	bl	8003840 <HAL_RCC_GetPCLK1Freq>
 8005a66:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a6e:	69db      	ldr	r3, [r3, #28]
 8005a70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a74:	f040 810c 	bne.w	8005c90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a82:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005a86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005a8a:	4622      	mov	r2, r4
 8005a8c:	462b      	mov	r3, r5
 8005a8e:	1891      	adds	r1, r2, r2
 8005a90:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005a92:	415b      	adcs	r3, r3
 8005a94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	eb12 0801 	adds.w	r8, r2, r1
 8005aa0:	4629      	mov	r1, r5
 8005aa2:	eb43 0901 	adc.w	r9, r3, r1
 8005aa6:	f04f 0200 	mov.w	r2, #0
 8005aaa:	f04f 0300 	mov.w	r3, #0
 8005aae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ab2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ab6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005aba:	4690      	mov	r8, r2
 8005abc:	4699      	mov	r9, r3
 8005abe:	4623      	mov	r3, r4
 8005ac0:	eb18 0303 	adds.w	r3, r8, r3
 8005ac4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ac8:	462b      	mov	r3, r5
 8005aca:	eb49 0303 	adc.w	r3, r9, r3
 8005ace:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005ade:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005ae2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005ae6:	460b      	mov	r3, r1
 8005ae8:	18db      	adds	r3, r3, r3
 8005aea:	653b      	str	r3, [r7, #80]	@ 0x50
 8005aec:	4613      	mov	r3, r2
 8005aee:	eb42 0303 	adc.w	r3, r2, r3
 8005af2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005af4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005af8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005afc:	f7fb f85c 	bl	8000bb8 <__aeabi_uldivmod>
 8005b00:	4602      	mov	r2, r0
 8005b02:	460b      	mov	r3, r1
 8005b04:	4b61      	ldr	r3, [pc, #388]	@ (8005c8c <UART_SetConfig+0x2d4>)
 8005b06:	fba3 2302 	umull	r2, r3, r3, r2
 8005b0a:	095b      	lsrs	r3, r3, #5
 8005b0c:	011c      	lsls	r4, r3, #4
 8005b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b12:	2200      	movs	r2, #0
 8005b14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b18:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005b1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005b20:	4642      	mov	r2, r8
 8005b22:	464b      	mov	r3, r9
 8005b24:	1891      	adds	r1, r2, r2
 8005b26:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005b28:	415b      	adcs	r3, r3
 8005b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005b30:	4641      	mov	r1, r8
 8005b32:	eb12 0a01 	adds.w	sl, r2, r1
 8005b36:	4649      	mov	r1, r9
 8005b38:	eb43 0b01 	adc.w	fp, r3, r1
 8005b3c:	f04f 0200 	mov.w	r2, #0
 8005b40:	f04f 0300 	mov.w	r3, #0
 8005b44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b50:	4692      	mov	sl, r2
 8005b52:	469b      	mov	fp, r3
 8005b54:	4643      	mov	r3, r8
 8005b56:	eb1a 0303 	adds.w	r3, sl, r3
 8005b5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b5e:	464b      	mov	r3, r9
 8005b60:	eb4b 0303 	adc.w	r3, fp, r3
 8005b64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b74:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005b78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	18db      	adds	r3, r3, r3
 8005b80:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b82:	4613      	mov	r3, r2
 8005b84:	eb42 0303 	adc.w	r3, r2, r3
 8005b88:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005b8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005b92:	f7fb f811 	bl	8000bb8 <__aeabi_uldivmod>
 8005b96:	4602      	mov	r2, r0
 8005b98:	460b      	mov	r3, r1
 8005b9a:	4611      	mov	r1, r2
 8005b9c:	4b3b      	ldr	r3, [pc, #236]	@ (8005c8c <UART_SetConfig+0x2d4>)
 8005b9e:	fba3 2301 	umull	r2, r3, r3, r1
 8005ba2:	095b      	lsrs	r3, r3, #5
 8005ba4:	2264      	movs	r2, #100	@ 0x64
 8005ba6:	fb02 f303 	mul.w	r3, r2, r3
 8005baa:	1acb      	subs	r3, r1, r3
 8005bac:	00db      	lsls	r3, r3, #3
 8005bae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005bb2:	4b36      	ldr	r3, [pc, #216]	@ (8005c8c <UART_SetConfig+0x2d4>)
 8005bb4:	fba3 2302 	umull	r2, r3, r3, r2
 8005bb8:	095b      	lsrs	r3, r3, #5
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005bc0:	441c      	add	r4, r3
 8005bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005bcc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005bd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005bd4:	4642      	mov	r2, r8
 8005bd6:	464b      	mov	r3, r9
 8005bd8:	1891      	adds	r1, r2, r2
 8005bda:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005bdc:	415b      	adcs	r3, r3
 8005bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005be0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005be4:	4641      	mov	r1, r8
 8005be6:	1851      	adds	r1, r2, r1
 8005be8:	6339      	str	r1, [r7, #48]	@ 0x30
 8005bea:	4649      	mov	r1, r9
 8005bec:	414b      	adcs	r3, r1
 8005bee:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bf0:	f04f 0200 	mov.w	r2, #0
 8005bf4:	f04f 0300 	mov.w	r3, #0
 8005bf8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005bfc:	4659      	mov	r1, fp
 8005bfe:	00cb      	lsls	r3, r1, #3
 8005c00:	4651      	mov	r1, sl
 8005c02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c06:	4651      	mov	r1, sl
 8005c08:	00ca      	lsls	r2, r1, #3
 8005c0a:	4610      	mov	r0, r2
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	4603      	mov	r3, r0
 8005c10:	4642      	mov	r2, r8
 8005c12:	189b      	adds	r3, r3, r2
 8005c14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c18:	464b      	mov	r3, r9
 8005c1a:	460a      	mov	r2, r1
 8005c1c:	eb42 0303 	adc.w	r3, r2, r3
 8005c20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c30:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005c34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c38:	460b      	mov	r3, r1
 8005c3a:	18db      	adds	r3, r3, r3
 8005c3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c3e:	4613      	mov	r3, r2
 8005c40:	eb42 0303 	adc.w	r3, r2, r3
 8005c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005c4e:	f7fa ffb3 	bl	8000bb8 <__aeabi_uldivmod>
 8005c52:	4602      	mov	r2, r0
 8005c54:	460b      	mov	r3, r1
 8005c56:	4b0d      	ldr	r3, [pc, #52]	@ (8005c8c <UART_SetConfig+0x2d4>)
 8005c58:	fba3 1302 	umull	r1, r3, r3, r2
 8005c5c:	095b      	lsrs	r3, r3, #5
 8005c5e:	2164      	movs	r1, #100	@ 0x64
 8005c60:	fb01 f303 	mul.w	r3, r1, r3
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	3332      	adds	r3, #50	@ 0x32
 8005c6a:	4a08      	ldr	r2, [pc, #32]	@ (8005c8c <UART_SetConfig+0x2d4>)
 8005c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c70:	095b      	lsrs	r3, r3, #5
 8005c72:	f003 0207 	and.w	r2, r3, #7
 8005c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4422      	add	r2, r4
 8005c7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c80:	e106      	b.n	8005e90 <UART_SetConfig+0x4d8>
 8005c82:	bf00      	nop
 8005c84:	40011000 	.word	0x40011000
 8005c88:	40011400 	.word	0x40011400
 8005c8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c94:	2200      	movs	r2, #0
 8005c96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c9a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005c9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005ca2:	4642      	mov	r2, r8
 8005ca4:	464b      	mov	r3, r9
 8005ca6:	1891      	adds	r1, r2, r2
 8005ca8:	6239      	str	r1, [r7, #32]
 8005caa:	415b      	adcs	r3, r3
 8005cac:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cb2:	4641      	mov	r1, r8
 8005cb4:	1854      	adds	r4, r2, r1
 8005cb6:	4649      	mov	r1, r9
 8005cb8:	eb43 0501 	adc.w	r5, r3, r1
 8005cbc:	f04f 0200 	mov.w	r2, #0
 8005cc0:	f04f 0300 	mov.w	r3, #0
 8005cc4:	00eb      	lsls	r3, r5, #3
 8005cc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cca:	00e2      	lsls	r2, r4, #3
 8005ccc:	4614      	mov	r4, r2
 8005cce:	461d      	mov	r5, r3
 8005cd0:	4643      	mov	r3, r8
 8005cd2:	18e3      	adds	r3, r4, r3
 8005cd4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005cd8:	464b      	mov	r3, r9
 8005cda:	eb45 0303 	adc.w	r3, r5, r3
 8005cde:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005cee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005cf2:	f04f 0200 	mov.w	r2, #0
 8005cf6:	f04f 0300 	mov.w	r3, #0
 8005cfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005cfe:	4629      	mov	r1, r5
 8005d00:	008b      	lsls	r3, r1, #2
 8005d02:	4621      	mov	r1, r4
 8005d04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d08:	4621      	mov	r1, r4
 8005d0a:	008a      	lsls	r2, r1, #2
 8005d0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005d10:	f7fa ff52 	bl	8000bb8 <__aeabi_uldivmod>
 8005d14:	4602      	mov	r2, r0
 8005d16:	460b      	mov	r3, r1
 8005d18:	4b60      	ldr	r3, [pc, #384]	@ (8005e9c <UART_SetConfig+0x4e4>)
 8005d1a:	fba3 2302 	umull	r2, r3, r3, r2
 8005d1e:	095b      	lsrs	r3, r3, #5
 8005d20:	011c      	lsls	r4, r3, #4
 8005d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d26:	2200      	movs	r2, #0
 8005d28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005d30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005d34:	4642      	mov	r2, r8
 8005d36:	464b      	mov	r3, r9
 8005d38:	1891      	adds	r1, r2, r2
 8005d3a:	61b9      	str	r1, [r7, #24]
 8005d3c:	415b      	adcs	r3, r3
 8005d3e:	61fb      	str	r3, [r7, #28]
 8005d40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d44:	4641      	mov	r1, r8
 8005d46:	1851      	adds	r1, r2, r1
 8005d48:	6139      	str	r1, [r7, #16]
 8005d4a:	4649      	mov	r1, r9
 8005d4c:	414b      	adcs	r3, r1
 8005d4e:	617b      	str	r3, [r7, #20]
 8005d50:	f04f 0200 	mov.w	r2, #0
 8005d54:	f04f 0300 	mov.w	r3, #0
 8005d58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d5c:	4659      	mov	r1, fp
 8005d5e:	00cb      	lsls	r3, r1, #3
 8005d60:	4651      	mov	r1, sl
 8005d62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d66:	4651      	mov	r1, sl
 8005d68:	00ca      	lsls	r2, r1, #3
 8005d6a:	4610      	mov	r0, r2
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	4603      	mov	r3, r0
 8005d70:	4642      	mov	r2, r8
 8005d72:	189b      	adds	r3, r3, r2
 8005d74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d78:	464b      	mov	r3, r9
 8005d7a:	460a      	mov	r2, r1
 8005d7c:	eb42 0303 	adc.w	r3, r2, r3
 8005d80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005d90:	f04f 0200 	mov.w	r2, #0
 8005d94:	f04f 0300 	mov.w	r3, #0
 8005d98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005d9c:	4649      	mov	r1, r9
 8005d9e:	008b      	lsls	r3, r1, #2
 8005da0:	4641      	mov	r1, r8
 8005da2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005da6:	4641      	mov	r1, r8
 8005da8:	008a      	lsls	r2, r1, #2
 8005daa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005dae:	f7fa ff03 	bl	8000bb8 <__aeabi_uldivmod>
 8005db2:	4602      	mov	r2, r0
 8005db4:	460b      	mov	r3, r1
 8005db6:	4611      	mov	r1, r2
 8005db8:	4b38      	ldr	r3, [pc, #224]	@ (8005e9c <UART_SetConfig+0x4e4>)
 8005dba:	fba3 2301 	umull	r2, r3, r3, r1
 8005dbe:	095b      	lsrs	r3, r3, #5
 8005dc0:	2264      	movs	r2, #100	@ 0x64
 8005dc2:	fb02 f303 	mul.w	r3, r2, r3
 8005dc6:	1acb      	subs	r3, r1, r3
 8005dc8:	011b      	lsls	r3, r3, #4
 8005dca:	3332      	adds	r3, #50	@ 0x32
 8005dcc:	4a33      	ldr	r2, [pc, #204]	@ (8005e9c <UART_SetConfig+0x4e4>)
 8005dce:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd2:	095b      	lsrs	r3, r3, #5
 8005dd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005dd8:	441c      	add	r4, r3
 8005dda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dde:	2200      	movs	r2, #0
 8005de0:	673b      	str	r3, [r7, #112]	@ 0x70
 8005de2:	677a      	str	r2, [r7, #116]	@ 0x74
 8005de4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005de8:	4642      	mov	r2, r8
 8005dea:	464b      	mov	r3, r9
 8005dec:	1891      	adds	r1, r2, r2
 8005dee:	60b9      	str	r1, [r7, #8]
 8005df0:	415b      	adcs	r3, r3
 8005df2:	60fb      	str	r3, [r7, #12]
 8005df4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005df8:	4641      	mov	r1, r8
 8005dfa:	1851      	adds	r1, r2, r1
 8005dfc:	6039      	str	r1, [r7, #0]
 8005dfe:	4649      	mov	r1, r9
 8005e00:	414b      	adcs	r3, r1
 8005e02:	607b      	str	r3, [r7, #4]
 8005e04:	f04f 0200 	mov.w	r2, #0
 8005e08:	f04f 0300 	mov.w	r3, #0
 8005e0c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e10:	4659      	mov	r1, fp
 8005e12:	00cb      	lsls	r3, r1, #3
 8005e14:	4651      	mov	r1, sl
 8005e16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e1a:	4651      	mov	r1, sl
 8005e1c:	00ca      	lsls	r2, r1, #3
 8005e1e:	4610      	mov	r0, r2
 8005e20:	4619      	mov	r1, r3
 8005e22:	4603      	mov	r3, r0
 8005e24:	4642      	mov	r2, r8
 8005e26:	189b      	adds	r3, r3, r2
 8005e28:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e2a:	464b      	mov	r3, r9
 8005e2c:	460a      	mov	r2, r1
 8005e2e:	eb42 0303 	adc.w	r3, r2, r3
 8005e32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e3e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005e40:	f04f 0200 	mov.w	r2, #0
 8005e44:	f04f 0300 	mov.w	r3, #0
 8005e48:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005e4c:	4649      	mov	r1, r9
 8005e4e:	008b      	lsls	r3, r1, #2
 8005e50:	4641      	mov	r1, r8
 8005e52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e56:	4641      	mov	r1, r8
 8005e58:	008a      	lsls	r2, r1, #2
 8005e5a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005e5e:	f7fa feab 	bl	8000bb8 <__aeabi_uldivmod>
 8005e62:	4602      	mov	r2, r0
 8005e64:	460b      	mov	r3, r1
 8005e66:	4b0d      	ldr	r3, [pc, #52]	@ (8005e9c <UART_SetConfig+0x4e4>)
 8005e68:	fba3 1302 	umull	r1, r3, r3, r2
 8005e6c:	095b      	lsrs	r3, r3, #5
 8005e6e:	2164      	movs	r1, #100	@ 0x64
 8005e70:	fb01 f303 	mul.w	r3, r1, r3
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	011b      	lsls	r3, r3, #4
 8005e78:	3332      	adds	r3, #50	@ 0x32
 8005e7a:	4a08      	ldr	r2, [pc, #32]	@ (8005e9c <UART_SetConfig+0x4e4>)
 8005e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e80:	095b      	lsrs	r3, r3, #5
 8005e82:	f003 020f 	and.w	r2, r3, #15
 8005e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4422      	add	r2, r4
 8005e8e:	609a      	str	r2, [r3, #8]
}
 8005e90:	bf00      	nop
 8005e92:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005e96:	46bd      	mov	sp, r7
 8005e98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e9c:	51eb851f 	.word	0x51eb851f

08005ea0 <_ZdlPvj>:
 8005ea0:	f000 b811 	b.w	8005ec6 <_ZdlPv>

08005ea4 <_Znwj>:
 8005ea4:	2801      	cmp	r0, #1
 8005ea6:	bf38      	it	cc
 8005ea8:	2001      	movcc	r0, #1
 8005eaa:	b510      	push	{r4, lr}
 8005eac:	4604      	mov	r4, r0
 8005eae:	4620      	mov	r0, r4
 8005eb0:	f000 f81c 	bl	8005eec <malloc>
 8005eb4:	b100      	cbz	r0, 8005eb8 <_Znwj+0x14>
 8005eb6:	bd10      	pop	{r4, pc}
 8005eb8:	f000 f808 	bl	8005ecc <_ZSt15get_new_handlerv>
 8005ebc:	b908      	cbnz	r0, 8005ec2 <_Znwj+0x1e>
 8005ebe:	f000 f80d 	bl	8005edc <abort>
 8005ec2:	4780      	blx	r0
 8005ec4:	e7f3      	b.n	8005eae <_Znwj+0xa>

08005ec6 <_ZdlPv>:
 8005ec6:	f000 b819 	b.w	8005efc <free>
	...

08005ecc <_ZSt15get_new_handlerv>:
 8005ecc:	4b02      	ldr	r3, [pc, #8]	@ (8005ed8 <_ZSt15get_new_handlerv+0xc>)
 8005ece:	6818      	ldr	r0, [r3, #0]
 8005ed0:	f3bf 8f5b 	dmb	ish
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	2000039c 	.word	0x2000039c

08005edc <abort>:
 8005edc:	b508      	push	{r3, lr}
 8005ede:	2006      	movs	r0, #6
 8005ee0:	f000 fea4 	bl	8006c2c <raise>
 8005ee4:	2001      	movs	r0, #1
 8005ee6:	f7fc fc01 	bl	80026ec <_exit>
	...

08005eec <malloc>:
 8005eec:	4b02      	ldr	r3, [pc, #8]	@ (8005ef8 <malloc+0xc>)
 8005eee:	4601      	mov	r1, r0
 8005ef0:	6818      	ldr	r0, [r3, #0]
 8005ef2:	f000 b82d 	b.w	8005f50 <_malloc_r>
 8005ef6:	bf00      	nop
 8005ef8:	20000018 	.word	0x20000018

08005efc <free>:
 8005efc:	4b02      	ldr	r3, [pc, #8]	@ (8005f08 <free+0xc>)
 8005efe:	4601      	mov	r1, r0
 8005f00:	6818      	ldr	r0, [r3, #0]
 8005f02:	f001 bd85 	b.w	8007a10 <_free_r>
 8005f06:	bf00      	nop
 8005f08:	20000018 	.word	0x20000018

08005f0c <sbrk_aligned>:
 8005f0c:	b570      	push	{r4, r5, r6, lr}
 8005f0e:	4e0f      	ldr	r6, [pc, #60]	@ (8005f4c <sbrk_aligned+0x40>)
 8005f10:	460c      	mov	r4, r1
 8005f12:	6831      	ldr	r1, [r6, #0]
 8005f14:	4605      	mov	r5, r0
 8005f16:	b911      	cbnz	r1, 8005f1e <sbrk_aligned+0x12>
 8005f18:	f000 fedc 	bl	8006cd4 <_sbrk_r>
 8005f1c:	6030      	str	r0, [r6, #0]
 8005f1e:	4621      	mov	r1, r4
 8005f20:	4628      	mov	r0, r5
 8005f22:	f000 fed7 	bl	8006cd4 <_sbrk_r>
 8005f26:	1c43      	adds	r3, r0, #1
 8005f28:	d103      	bne.n	8005f32 <sbrk_aligned+0x26>
 8005f2a:	f04f 34ff 	mov.w	r4, #4294967295
 8005f2e:	4620      	mov	r0, r4
 8005f30:	bd70      	pop	{r4, r5, r6, pc}
 8005f32:	1cc4      	adds	r4, r0, #3
 8005f34:	f024 0403 	bic.w	r4, r4, #3
 8005f38:	42a0      	cmp	r0, r4
 8005f3a:	d0f8      	beq.n	8005f2e <sbrk_aligned+0x22>
 8005f3c:	1a21      	subs	r1, r4, r0
 8005f3e:	4628      	mov	r0, r5
 8005f40:	f000 fec8 	bl	8006cd4 <_sbrk_r>
 8005f44:	3001      	adds	r0, #1
 8005f46:	d1f2      	bne.n	8005f2e <sbrk_aligned+0x22>
 8005f48:	e7ef      	b.n	8005f2a <sbrk_aligned+0x1e>
 8005f4a:	bf00      	nop
 8005f4c:	200003a0 	.word	0x200003a0

08005f50 <_malloc_r>:
 8005f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f54:	1ccd      	adds	r5, r1, #3
 8005f56:	f025 0503 	bic.w	r5, r5, #3
 8005f5a:	3508      	adds	r5, #8
 8005f5c:	2d0c      	cmp	r5, #12
 8005f5e:	bf38      	it	cc
 8005f60:	250c      	movcc	r5, #12
 8005f62:	2d00      	cmp	r5, #0
 8005f64:	4606      	mov	r6, r0
 8005f66:	db01      	blt.n	8005f6c <_malloc_r+0x1c>
 8005f68:	42a9      	cmp	r1, r5
 8005f6a:	d904      	bls.n	8005f76 <_malloc_r+0x26>
 8005f6c:	230c      	movs	r3, #12
 8005f6e:	6033      	str	r3, [r6, #0]
 8005f70:	2000      	movs	r0, #0
 8005f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800604c <_malloc_r+0xfc>
 8005f7a:	f000 f869 	bl	8006050 <__malloc_lock>
 8005f7e:	f8d8 3000 	ldr.w	r3, [r8]
 8005f82:	461c      	mov	r4, r3
 8005f84:	bb44      	cbnz	r4, 8005fd8 <_malloc_r+0x88>
 8005f86:	4629      	mov	r1, r5
 8005f88:	4630      	mov	r0, r6
 8005f8a:	f7ff ffbf 	bl	8005f0c <sbrk_aligned>
 8005f8e:	1c43      	adds	r3, r0, #1
 8005f90:	4604      	mov	r4, r0
 8005f92:	d158      	bne.n	8006046 <_malloc_r+0xf6>
 8005f94:	f8d8 4000 	ldr.w	r4, [r8]
 8005f98:	4627      	mov	r7, r4
 8005f9a:	2f00      	cmp	r7, #0
 8005f9c:	d143      	bne.n	8006026 <_malloc_r+0xd6>
 8005f9e:	2c00      	cmp	r4, #0
 8005fa0:	d04b      	beq.n	800603a <_malloc_r+0xea>
 8005fa2:	6823      	ldr	r3, [r4, #0]
 8005fa4:	4639      	mov	r1, r7
 8005fa6:	4630      	mov	r0, r6
 8005fa8:	eb04 0903 	add.w	r9, r4, r3
 8005fac:	f000 fe92 	bl	8006cd4 <_sbrk_r>
 8005fb0:	4581      	cmp	r9, r0
 8005fb2:	d142      	bne.n	800603a <_malloc_r+0xea>
 8005fb4:	6821      	ldr	r1, [r4, #0]
 8005fb6:	1a6d      	subs	r5, r5, r1
 8005fb8:	4629      	mov	r1, r5
 8005fba:	4630      	mov	r0, r6
 8005fbc:	f7ff ffa6 	bl	8005f0c <sbrk_aligned>
 8005fc0:	3001      	adds	r0, #1
 8005fc2:	d03a      	beq.n	800603a <_malloc_r+0xea>
 8005fc4:	6823      	ldr	r3, [r4, #0]
 8005fc6:	442b      	add	r3, r5
 8005fc8:	6023      	str	r3, [r4, #0]
 8005fca:	f8d8 3000 	ldr.w	r3, [r8]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	bb62      	cbnz	r2, 800602c <_malloc_r+0xdc>
 8005fd2:	f8c8 7000 	str.w	r7, [r8]
 8005fd6:	e00f      	b.n	8005ff8 <_malloc_r+0xa8>
 8005fd8:	6822      	ldr	r2, [r4, #0]
 8005fda:	1b52      	subs	r2, r2, r5
 8005fdc:	d420      	bmi.n	8006020 <_malloc_r+0xd0>
 8005fde:	2a0b      	cmp	r2, #11
 8005fe0:	d917      	bls.n	8006012 <_malloc_r+0xc2>
 8005fe2:	1961      	adds	r1, r4, r5
 8005fe4:	42a3      	cmp	r3, r4
 8005fe6:	6025      	str	r5, [r4, #0]
 8005fe8:	bf18      	it	ne
 8005fea:	6059      	strne	r1, [r3, #4]
 8005fec:	6863      	ldr	r3, [r4, #4]
 8005fee:	bf08      	it	eq
 8005ff0:	f8c8 1000 	streq.w	r1, [r8]
 8005ff4:	5162      	str	r2, [r4, r5]
 8005ff6:	604b      	str	r3, [r1, #4]
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	f000 f82f 	bl	800605c <__malloc_unlock>
 8005ffe:	f104 000b 	add.w	r0, r4, #11
 8006002:	1d23      	adds	r3, r4, #4
 8006004:	f020 0007 	bic.w	r0, r0, #7
 8006008:	1ac2      	subs	r2, r0, r3
 800600a:	bf1c      	itt	ne
 800600c:	1a1b      	subne	r3, r3, r0
 800600e:	50a3      	strne	r3, [r4, r2]
 8006010:	e7af      	b.n	8005f72 <_malloc_r+0x22>
 8006012:	6862      	ldr	r2, [r4, #4]
 8006014:	42a3      	cmp	r3, r4
 8006016:	bf0c      	ite	eq
 8006018:	f8c8 2000 	streq.w	r2, [r8]
 800601c:	605a      	strne	r2, [r3, #4]
 800601e:	e7eb      	b.n	8005ff8 <_malloc_r+0xa8>
 8006020:	4623      	mov	r3, r4
 8006022:	6864      	ldr	r4, [r4, #4]
 8006024:	e7ae      	b.n	8005f84 <_malloc_r+0x34>
 8006026:	463c      	mov	r4, r7
 8006028:	687f      	ldr	r7, [r7, #4]
 800602a:	e7b6      	b.n	8005f9a <_malloc_r+0x4a>
 800602c:	461a      	mov	r2, r3
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	42a3      	cmp	r3, r4
 8006032:	d1fb      	bne.n	800602c <_malloc_r+0xdc>
 8006034:	2300      	movs	r3, #0
 8006036:	6053      	str	r3, [r2, #4]
 8006038:	e7de      	b.n	8005ff8 <_malloc_r+0xa8>
 800603a:	230c      	movs	r3, #12
 800603c:	6033      	str	r3, [r6, #0]
 800603e:	4630      	mov	r0, r6
 8006040:	f000 f80c 	bl	800605c <__malloc_unlock>
 8006044:	e794      	b.n	8005f70 <_malloc_r+0x20>
 8006046:	6005      	str	r5, [r0, #0]
 8006048:	e7d6      	b.n	8005ff8 <_malloc_r+0xa8>
 800604a:	bf00      	nop
 800604c:	200003a4 	.word	0x200003a4

08006050 <__malloc_lock>:
 8006050:	4801      	ldr	r0, [pc, #4]	@ (8006058 <__malloc_lock+0x8>)
 8006052:	f000 be8c 	b.w	8006d6e <__retarget_lock_acquire_recursive>
 8006056:	bf00      	nop
 8006058:	200004e8 	.word	0x200004e8

0800605c <__malloc_unlock>:
 800605c:	4801      	ldr	r0, [pc, #4]	@ (8006064 <__malloc_unlock+0x8>)
 800605e:	f000 be87 	b.w	8006d70 <__retarget_lock_release_recursive>
 8006062:	bf00      	nop
 8006064:	200004e8 	.word	0x200004e8

08006068 <__cvt>:
 8006068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800606c:	ec57 6b10 	vmov	r6, r7, d0
 8006070:	2f00      	cmp	r7, #0
 8006072:	460c      	mov	r4, r1
 8006074:	4619      	mov	r1, r3
 8006076:	463b      	mov	r3, r7
 8006078:	bfbb      	ittet	lt
 800607a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800607e:	461f      	movlt	r7, r3
 8006080:	2300      	movge	r3, #0
 8006082:	232d      	movlt	r3, #45	@ 0x2d
 8006084:	700b      	strb	r3, [r1, #0]
 8006086:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006088:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800608c:	4691      	mov	r9, r2
 800608e:	f023 0820 	bic.w	r8, r3, #32
 8006092:	bfbc      	itt	lt
 8006094:	4632      	movlt	r2, r6
 8006096:	4616      	movlt	r6, r2
 8006098:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800609c:	d005      	beq.n	80060aa <__cvt+0x42>
 800609e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80060a2:	d100      	bne.n	80060a6 <__cvt+0x3e>
 80060a4:	3401      	adds	r4, #1
 80060a6:	2102      	movs	r1, #2
 80060a8:	e000      	b.n	80060ac <__cvt+0x44>
 80060aa:	2103      	movs	r1, #3
 80060ac:	ab03      	add	r3, sp, #12
 80060ae:	9301      	str	r3, [sp, #4]
 80060b0:	ab02      	add	r3, sp, #8
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	ec47 6b10 	vmov	d0, r6, r7
 80060b8:	4653      	mov	r3, sl
 80060ba:	4622      	mov	r2, r4
 80060bc:	f000 fee4 	bl	8006e88 <_dtoa_r>
 80060c0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80060c4:	4605      	mov	r5, r0
 80060c6:	d119      	bne.n	80060fc <__cvt+0x94>
 80060c8:	f019 0f01 	tst.w	r9, #1
 80060cc:	d00e      	beq.n	80060ec <__cvt+0x84>
 80060ce:	eb00 0904 	add.w	r9, r0, r4
 80060d2:	2200      	movs	r2, #0
 80060d4:	2300      	movs	r3, #0
 80060d6:	4630      	mov	r0, r6
 80060d8:	4639      	mov	r1, r7
 80060da:	f7fa fcfd 	bl	8000ad8 <__aeabi_dcmpeq>
 80060de:	b108      	cbz	r0, 80060e4 <__cvt+0x7c>
 80060e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80060e4:	2230      	movs	r2, #48	@ 0x30
 80060e6:	9b03      	ldr	r3, [sp, #12]
 80060e8:	454b      	cmp	r3, r9
 80060ea:	d31e      	bcc.n	800612a <__cvt+0xc2>
 80060ec:	9b03      	ldr	r3, [sp, #12]
 80060ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80060f0:	1b5b      	subs	r3, r3, r5
 80060f2:	4628      	mov	r0, r5
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	b004      	add	sp, #16
 80060f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006100:	eb00 0904 	add.w	r9, r0, r4
 8006104:	d1e5      	bne.n	80060d2 <__cvt+0x6a>
 8006106:	7803      	ldrb	r3, [r0, #0]
 8006108:	2b30      	cmp	r3, #48	@ 0x30
 800610a:	d10a      	bne.n	8006122 <__cvt+0xba>
 800610c:	2200      	movs	r2, #0
 800610e:	2300      	movs	r3, #0
 8006110:	4630      	mov	r0, r6
 8006112:	4639      	mov	r1, r7
 8006114:	f7fa fce0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006118:	b918      	cbnz	r0, 8006122 <__cvt+0xba>
 800611a:	f1c4 0401 	rsb	r4, r4, #1
 800611e:	f8ca 4000 	str.w	r4, [sl]
 8006122:	f8da 3000 	ldr.w	r3, [sl]
 8006126:	4499      	add	r9, r3
 8006128:	e7d3      	b.n	80060d2 <__cvt+0x6a>
 800612a:	1c59      	adds	r1, r3, #1
 800612c:	9103      	str	r1, [sp, #12]
 800612e:	701a      	strb	r2, [r3, #0]
 8006130:	e7d9      	b.n	80060e6 <__cvt+0x7e>

08006132 <__exponent>:
 8006132:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006134:	2900      	cmp	r1, #0
 8006136:	bfba      	itte	lt
 8006138:	4249      	neglt	r1, r1
 800613a:	232d      	movlt	r3, #45	@ 0x2d
 800613c:	232b      	movge	r3, #43	@ 0x2b
 800613e:	2909      	cmp	r1, #9
 8006140:	7002      	strb	r2, [r0, #0]
 8006142:	7043      	strb	r3, [r0, #1]
 8006144:	dd29      	ble.n	800619a <__exponent+0x68>
 8006146:	f10d 0307 	add.w	r3, sp, #7
 800614a:	461d      	mov	r5, r3
 800614c:	270a      	movs	r7, #10
 800614e:	461a      	mov	r2, r3
 8006150:	fbb1 f6f7 	udiv	r6, r1, r7
 8006154:	fb07 1416 	mls	r4, r7, r6, r1
 8006158:	3430      	adds	r4, #48	@ 0x30
 800615a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800615e:	460c      	mov	r4, r1
 8006160:	2c63      	cmp	r4, #99	@ 0x63
 8006162:	f103 33ff 	add.w	r3, r3, #4294967295
 8006166:	4631      	mov	r1, r6
 8006168:	dcf1      	bgt.n	800614e <__exponent+0x1c>
 800616a:	3130      	adds	r1, #48	@ 0x30
 800616c:	1e94      	subs	r4, r2, #2
 800616e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006172:	1c41      	adds	r1, r0, #1
 8006174:	4623      	mov	r3, r4
 8006176:	42ab      	cmp	r3, r5
 8006178:	d30a      	bcc.n	8006190 <__exponent+0x5e>
 800617a:	f10d 0309 	add.w	r3, sp, #9
 800617e:	1a9b      	subs	r3, r3, r2
 8006180:	42ac      	cmp	r4, r5
 8006182:	bf88      	it	hi
 8006184:	2300      	movhi	r3, #0
 8006186:	3302      	adds	r3, #2
 8006188:	4403      	add	r3, r0
 800618a:	1a18      	subs	r0, r3, r0
 800618c:	b003      	add	sp, #12
 800618e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006190:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006194:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006198:	e7ed      	b.n	8006176 <__exponent+0x44>
 800619a:	2330      	movs	r3, #48	@ 0x30
 800619c:	3130      	adds	r1, #48	@ 0x30
 800619e:	7083      	strb	r3, [r0, #2]
 80061a0:	70c1      	strb	r1, [r0, #3]
 80061a2:	1d03      	adds	r3, r0, #4
 80061a4:	e7f1      	b.n	800618a <__exponent+0x58>
	...

080061a8 <_printf_float>:
 80061a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ac:	b08d      	sub	sp, #52	@ 0x34
 80061ae:	460c      	mov	r4, r1
 80061b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80061b4:	4616      	mov	r6, r2
 80061b6:	461f      	mov	r7, r3
 80061b8:	4605      	mov	r5, r0
 80061ba:	f000 fd3f 	bl	8006c3c <_localeconv_r>
 80061be:	6803      	ldr	r3, [r0, #0]
 80061c0:	9304      	str	r3, [sp, #16]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fa f85c 	bl	8000280 <strlen>
 80061c8:	2300      	movs	r3, #0
 80061ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80061cc:	f8d8 3000 	ldr.w	r3, [r8]
 80061d0:	9005      	str	r0, [sp, #20]
 80061d2:	3307      	adds	r3, #7
 80061d4:	f023 0307 	bic.w	r3, r3, #7
 80061d8:	f103 0208 	add.w	r2, r3, #8
 80061dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80061e0:	f8d4 b000 	ldr.w	fp, [r4]
 80061e4:	f8c8 2000 	str.w	r2, [r8]
 80061e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80061ec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80061f0:	9307      	str	r3, [sp, #28]
 80061f2:	f8cd 8018 	str.w	r8, [sp, #24]
 80061f6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80061fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061fe:	4b9c      	ldr	r3, [pc, #624]	@ (8006470 <_printf_float+0x2c8>)
 8006200:	f04f 32ff 	mov.w	r2, #4294967295
 8006204:	f7fa fc9a 	bl	8000b3c <__aeabi_dcmpun>
 8006208:	bb70      	cbnz	r0, 8006268 <_printf_float+0xc0>
 800620a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800620e:	4b98      	ldr	r3, [pc, #608]	@ (8006470 <_printf_float+0x2c8>)
 8006210:	f04f 32ff 	mov.w	r2, #4294967295
 8006214:	f7fa fc74 	bl	8000b00 <__aeabi_dcmple>
 8006218:	bb30      	cbnz	r0, 8006268 <_printf_float+0xc0>
 800621a:	2200      	movs	r2, #0
 800621c:	2300      	movs	r3, #0
 800621e:	4640      	mov	r0, r8
 8006220:	4649      	mov	r1, r9
 8006222:	f7fa fc63 	bl	8000aec <__aeabi_dcmplt>
 8006226:	b110      	cbz	r0, 800622e <_printf_float+0x86>
 8006228:	232d      	movs	r3, #45	@ 0x2d
 800622a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800622e:	4a91      	ldr	r2, [pc, #580]	@ (8006474 <_printf_float+0x2cc>)
 8006230:	4b91      	ldr	r3, [pc, #580]	@ (8006478 <_printf_float+0x2d0>)
 8006232:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006236:	bf94      	ite	ls
 8006238:	4690      	movls	r8, r2
 800623a:	4698      	movhi	r8, r3
 800623c:	2303      	movs	r3, #3
 800623e:	6123      	str	r3, [r4, #16]
 8006240:	f02b 0304 	bic.w	r3, fp, #4
 8006244:	6023      	str	r3, [r4, #0]
 8006246:	f04f 0900 	mov.w	r9, #0
 800624a:	9700      	str	r7, [sp, #0]
 800624c:	4633      	mov	r3, r6
 800624e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006250:	4621      	mov	r1, r4
 8006252:	4628      	mov	r0, r5
 8006254:	f000 f9d2 	bl	80065fc <_printf_common>
 8006258:	3001      	adds	r0, #1
 800625a:	f040 808d 	bne.w	8006378 <_printf_float+0x1d0>
 800625e:	f04f 30ff 	mov.w	r0, #4294967295
 8006262:	b00d      	add	sp, #52	@ 0x34
 8006264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006268:	4642      	mov	r2, r8
 800626a:	464b      	mov	r3, r9
 800626c:	4640      	mov	r0, r8
 800626e:	4649      	mov	r1, r9
 8006270:	f7fa fc64 	bl	8000b3c <__aeabi_dcmpun>
 8006274:	b140      	cbz	r0, 8006288 <_printf_float+0xe0>
 8006276:	464b      	mov	r3, r9
 8006278:	2b00      	cmp	r3, #0
 800627a:	bfbc      	itt	lt
 800627c:	232d      	movlt	r3, #45	@ 0x2d
 800627e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006282:	4a7e      	ldr	r2, [pc, #504]	@ (800647c <_printf_float+0x2d4>)
 8006284:	4b7e      	ldr	r3, [pc, #504]	@ (8006480 <_printf_float+0x2d8>)
 8006286:	e7d4      	b.n	8006232 <_printf_float+0x8a>
 8006288:	6863      	ldr	r3, [r4, #4]
 800628a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800628e:	9206      	str	r2, [sp, #24]
 8006290:	1c5a      	adds	r2, r3, #1
 8006292:	d13b      	bne.n	800630c <_printf_float+0x164>
 8006294:	2306      	movs	r3, #6
 8006296:	6063      	str	r3, [r4, #4]
 8006298:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800629c:	2300      	movs	r3, #0
 800629e:	6022      	str	r2, [r4, #0]
 80062a0:	9303      	str	r3, [sp, #12]
 80062a2:	ab0a      	add	r3, sp, #40	@ 0x28
 80062a4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80062a8:	ab09      	add	r3, sp, #36	@ 0x24
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	6861      	ldr	r1, [r4, #4]
 80062ae:	ec49 8b10 	vmov	d0, r8, r9
 80062b2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80062b6:	4628      	mov	r0, r5
 80062b8:	f7ff fed6 	bl	8006068 <__cvt>
 80062bc:	9b06      	ldr	r3, [sp, #24]
 80062be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80062c0:	2b47      	cmp	r3, #71	@ 0x47
 80062c2:	4680      	mov	r8, r0
 80062c4:	d129      	bne.n	800631a <_printf_float+0x172>
 80062c6:	1cc8      	adds	r0, r1, #3
 80062c8:	db02      	blt.n	80062d0 <_printf_float+0x128>
 80062ca:	6863      	ldr	r3, [r4, #4]
 80062cc:	4299      	cmp	r1, r3
 80062ce:	dd41      	ble.n	8006354 <_printf_float+0x1ac>
 80062d0:	f1aa 0a02 	sub.w	sl, sl, #2
 80062d4:	fa5f fa8a 	uxtb.w	sl, sl
 80062d8:	3901      	subs	r1, #1
 80062da:	4652      	mov	r2, sl
 80062dc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80062e0:	9109      	str	r1, [sp, #36]	@ 0x24
 80062e2:	f7ff ff26 	bl	8006132 <__exponent>
 80062e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80062e8:	1813      	adds	r3, r2, r0
 80062ea:	2a01      	cmp	r2, #1
 80062ec:	4681      	mov	r9, r0
 80062ee:	6123      	str	r3, [r4, #16]
 80062f0:	dc02      	bgt.n	80062f8 <_printf_float+0x150>
 80062f2:	6822      	ldr	r2, [r4, #0]
 80062f4:	07d2      	lsls	r2, r2, #31
 80062f6:	d501      	bpl.n	80062fc <_printf_float+0x154>
 80062f8:	3301      	adds	r3, #1
 80062fa:	6123      	str	r3, [r4, #16]
 80062fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006300:	2b00      	cmp	r3, #0
 8006302:	d0a2      	beq.n	800624a <_printf_float+0xa2>
 8006304:	232d      	movs	r3, #45	@ 0x2d
 8006306:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800630a:	e79e      	b.n	800624a <_printf_float+0xa2>
 800630c:	9a06      	ldr	r2, [sp, #24]
 800630e:	2a47      	cmp	r2, #71	@ 0x47
 8006310:	d1c2      	bne.n	8006298 <_printf_float+0xf0>
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1c0      	bne.n	8006298 <_printf_float+0xf0>
 8006316:	2301      	movs	r3, #1
 8006318:	e7bd      	b.n	8006296 <_printf_float+0xee>
 800631a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800631e:	d9db      	bls.n	80062d8 <_printf_float+0x130>
 8006320:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006324:	d118      	bne.n	8006358 <_printf_float+0x1b0>
 8006326:	2900      	cmp	r1, #0
 8006328:	6863      	ldr	r3, [r4, #4]
 800632a:	dd0b      	ble.n	8006344 <_printf_float+0x19c>
 800632c:	6121      	str	r1, [r4, #16]
 800632e:	b913      	cbnz	r3, 8006336 <_printf_float+0x18e>
 8006330:	6822      	ldr	r2, [r4, #0]
 8006332:	07d0      	lsls	r0, r2, #31
 8006334:	d502      	bpl.n	800633c <_printf_float+0x194>
 8006336:	3301      	adds	r3, #1
 8006338:	440b      	add	r3, r1
 800633a:	6123      	str	r3, [r4, #16]
 800633c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800633e:	f04f 0900 	mov.w	r9, #0
 8006342:	e7db      	b.n	80062fc <_printf_float+0x154>
 8006344:	b913      	cbnz	r3, 800634c <_printf_float+0x1a4>
 8006346:	6822      	ldr	r2, [r4, #0]
 8006348:	07d2      	lsls	r2, r2, #31
 800634a:	d501      	bpl.n	8006350 <_printf_float+0x1a8>
 800634c:	3302      	adds	r3, #2
 800634e:	e7f4      	b.n	800633a <_printf_float+0x192>
 8006350:	2301      	movs	r3, #1
 8006352:	e7f2      	b.n	800633a <_printf_float+0x192>
 8006354:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006358:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800635a:	4299      	cmp	r1, r3
 800635c:	db05      	blt.n	800636a <_printf_float+0x1c2>
 800635e:	6823      	ldr	r3, [r4, #0]
 8006360:	6121      	str	r1, [r4, #16]
 8006362:	07d8      	lsls	r0, r3, #31
 8006364:	d5ea      	bpl.n	800633c <_printf_float+0x194>
 8006366:	1c4b      	adds	r3, r1, #1
 8006368:	e7e7      	b.n	800633a <_printf_float+0x192>
 800636a:	2900      	cmp	r1, #0
 800636c:	bfd4      	ite	le
 800636e:	f1c1 0202 	rsble	r2, r1, #2
 8006372:	2201      	movgt	r2, #1
 8006374:	4413      	add	r3, r2
 8006376:	e7e0      	b.n	800633a <_printf_float+0x192>
 8006378:	6823      	ldr	r3, [r4, #0]
 800637a:	055a      	lsls	r2, r3, #21
 800637c:	d407      	bmi.n	800638e <_printf_float+0x1e6>
 800637e:	6923      	ldr	r3, [r4, #16]
 8006380:	4642      	mov	r2, r8
 8006382:	4631      	mov	r1, r6
 8006384:	4628      	mov	r0, r5
 8006386:	47b8      	blx	r7
 8006388:	3001      	adds	r0, #1
 800638a:	d12b      	bne.n	80063e4 <_printf_float+0x23c>
 800638c:	e767      	b.n	800625e <_printf_float+0xb6>
 800638e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006392:	f240 80dd 	bls.w	8006550 <_printf_float+0x3a8>
 8006396:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800639a:	2200      	movs	r2, #0
 800639c:	2300      	movs	r3, #0
 800639e:	f7fa fb9b 	bl	8000ad8 <__aeabi_dcmpeq>
 80063a2:	2800      	cmp	r0, #0
 80063a4:	d033      	beq.n	800640e <_printf_float+0x266>
 80063a6:	4a37      	ldr	r2, [pc, #220]	@ (8006484 <_printf_float+0x2dc>)
 80063a8:	2301      	movs	r3, #1
 80063aa:	4631      	mov	r1, r6
 80063ac:	4628      	mov	r0, r5
 80063ae:	47b8      	blx	r7
 80063b0:	3001      	adds	r0, #1
 80063b2:	f43f af54 	beq.w	800625e <_printf_float+0xb6>
 80063b6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80063ba:	4543      	cmp	r3, r8
 80063bc:	db02      	blt.n	80063c4 <_printf_float+0x21c>
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	07d8      	lsls	r0, r3, #31
 80063c2:	d50f      	bpl.n	80063e4 <_printf_float+0x23c>
 80063c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063c8:	4631      	mov	r1, r6
 80063ca:	4628      	mov	r0, r5
 80063cc:	47b8      	blx	r7
 80063ce:	3001      	adds	r0, #1
 80063d0:	f43f af45 	beq.w	800625e <_printf_float+0xb6>
 80063d4:	f04f 0900 	mov.w	r9, #0
 80063d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80063dc:	f104 0a1a 	add.w	sl, r4, #26
 80063e0:	45c8      	cmp	r8, r9
 80063e2:	dc09      	bgt.n	80063f8 <_printf_float+0x250>
 80063e4:	6823      	ldr	r3, [r4, #0]
 80063e6:	079b      	lsls	r3, r3, #30
 80063e8:	f100 8103 	bmi.w	80065f2 <_printf_float+0x44a>
 80063ec:	68e0      	ldr	r0, [r4, #12]
 80063ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063f0:	4298      	cmp	r0, r3
 80063f2:	bfb8      	it	lt
 80063f4:	4618      	movlt	r0, r3
 80063f6:	e734      	b.n	8006262 <_printf_float+0xba>
 80063f8:	2301      	movs	r3, #1
 80063fa:	4652      	mov	r2, sl
 80063fc:	4631      	mov	r1, r6
 80063fe:	4628      	mov	r0, r5
 8006400:	47b8      	blx	r7
 8006402:	3001      	adds	r0, #1
 8006404:	f43f af2b 	beq.w	800625e <_printf_float+0xb6>
 8006408:	f109 0901 	add.w	r9, r9, #1
 800640c:	e7e8      	b.n	80063e0 <_printf_float+0x238>
 800640e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006410:	2b00      	cmp	r3, #0
 8006412:	dc39      	bgt.n	8006488 <_printf_float+0x2e0>
 8006414:	4a1b      	ldr	r2, [pc, #108]	@ (8006484 <_printf_float+0x2dc>)
 8006416:	2301      	movs	r3, #1
 8006418:	4631      	mov	r1, r6
 800641a:	4628      	mov	r0, r5
 800641c:	47b8      	blx	r7
 800641e:	3001      	adds	r0, #1
 8006420:	f43f af1d 	beq.w	800625e <_printf_float+0xb6>
 8006424:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006428:	ea59 0303 	orrs.w	r3, r9, r3
 800642c:	d102      	bne.n	8006434 <_printf_float+0x28c>
 800642e:	6823      	ldr	r3, [r4, #0]
 8006430:	07d9      	lsls	r1, r3, #31
 8006432:	d5d7      	bpl.n	80063e4 <_printf_float+0x23c>
 8006434:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006438:	4631      	mov	r1, r6
 800643a:	4628      	mov	r0, r5
 800643c:	47b8      	blx	r7
 800643e:	3001      	adds	r0, #1
 8006440:	f43f af0d 	beq.w	800625e <_printf_float+0xb6>
 8006444:	f04f 0a00 	mov.w	sl, #0
 8006448:	f104 0b1a 	add.w	fp, r4, #26
 800644c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800644e:	425b      	negs	r3, r3
 8006450:	4553      	cmp	r3, sl
 8006452:	dc01      	bgt.n	8006458 <_printf_float+0x2b0>
 8006454:	464b      	mov	r3, r9
 8006456:	e793      	b.n	8006380 <_printf_float+0x1d8>
 8006458:	2301      	movs	r3, #1
 800645a:	465a      	mov	r2, fp
 800645c:	4631      	mov	r1, r6
 800645e:	4628      	mov	r0, r5
 8006460:	47b8      	blx	r7
 8006462:	3001      	adds	r0, #1
 8006464:	f43f aefb 	beq.w	800625e <_printf_float+0xb6>
 8006468:	f10a 0a01 	add.w	sl, sl, #1
 800646c:	e7ee      	b.n	800644c <_printf_float+0x2a4>
 800646e:	bf00      	nop
 8006470:	7fefffff 	.word	0x7fefffff
 8006474:	08008d1c 	.word	0x08008d1c
 8006478:	08008d20 	.word	0x08008d20
 800647c:	08008d24 	.word	0x08008d24
 8006480:	08008d28 	.word	0x08008d28
 8006484:	08008d2c 	.word	0x08008d2c
 8006488:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800648a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800648e:	4553      	cmp	r3, sl
 8006490:	bfa8      	it	ge
 8006492:	4653      	movge	r3, sl
 8006494:	2b00      	cmp	r3, #0
 8006496:	4699      	mov	r9, r3
 8006498:	dc36      	bgt.n	8006508 <_printf_float+0x360>
 800649a:	f04f 0b00 	mov.w	fp, #0
 800649e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064a2:	f104 021a 	add.w	r2, r4, #26
 80064a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80064a8:	9306      	str	r3, [sp, #24]
 80064aa:	eba3 0309 	sub.w	r3, r3, r9
 80064ae:	455b      	cmp	r3, fp
 80064b0:	dc31      	bgt.n	8006516 <_printf_float+0x36e>
 80064b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064b4:	459a      	cmp	sl, r3
 80064b6:	dc3a      	bgt.n	800652e <_printf_float+0x386>
 80064b8:	6823      	ldr	r3, [r4, #0]
 80064ba:	07da      	lsls	r2, r3, #31
 80064bc:	d437      	bmi.n	800652e <_printf_float+0x386>
 80064be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064c0:	ebaa 0903 	sub.w	r9, sl, r3
 80064c4:	9b06      	ldr	r3, [sp, #24]
 80064c6:	ebaa 0303 	sub.w	r3, sl, r3
 80064ca:	4599      	cmp	r9, r3
 80064cc:	bfa8      	it	ge
 80064ce:	4699      	movge	r9, r3
 80064d0:	f1b9 0f00 	cmp.w	r9, #0
 80064d4:	dc33      	bgt.n	800653e <_printf_float+0x396>
 80064d6:	f04f 0800 	mov.w	r8, #0
 80064da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064de:	f104 0b1a 	add.w	fp, r4, #26
 80064e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064e4:	ebaa 0303 	sub.w	r3, sl, r3
 80064e8:	eba3 0309 	sub.w	r3, r3, r9
 80064ec:	4543      	cmp	r3, r8
 80064ee:	f77f af79 	ble.w	80063e4 <_printf_float+0x23c>
 80064f2:	2301      	movs	r3, #1
 80064f4:	465a      	mov	r2, fp
 80064f6:	4631      	mov	r1, r6
 80064f8:	4628      	mov	r0, r5
 80064fa:	47b8      	blx	r7
 80064fc:	3001      	adds	r0, #1
 80064fe:	f43f aeae 	beq.w	800625e <_printf_float+0xb6>
 8006502:	f108 0801 	add.w	r8, r8, #1
 8006506:	e7ec      	b.n	80064e2 <_printf_float+0x33a>
 8006508:	4642      	mov	r2, r8
 800650a:	4631      	mov	r1, r6
 800650c:	4628      	mov	r0, r5
 800650e:	47b8      	blx	r7
 8006510:	3001      	adds	r0, #1
 8006512:	d1c2      	bne.n	800649a <_printf_float+0x2f2>
 8006514:	e6a3      	b.n	800625e <_printf_float+0xb6>
 8006516:	2301      	movs	r3, #1
 8006518:	4631      	mov	r1, r6
 800651a:	4628      	mov	r0, r5
 800651c:	9206      	str	r2, [sp, #24]
 800651e:	47b8      	blx	r7
 8006520:	3001      	adds	r0, #1
 8006522:	f43f ae9c 	beq.w	800625e <_printf_float+0xb6>
 8006526:	9a06      	ldr	r2, [sp, #24]
 8006528:	f10b 0b01 	add.w	fp, fp, #1
 800652c:	e7bb      	b.n	80064a6 <_printf_float+0x2fe>
 800652e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006532:	4631      	mov	r1, r6
 8006534:	4628      	mov	r0, r5
 8006536:	47b8      	blx	r7
 8006538:	3001      	adds	r0, #1
 800653a:	d1c0      	bne.n	80064be <_printf_float+0x316>
 800653c:	e68f      	b.n	800625e <_printf_float+0xb6>
 800653e:	9a06      	ldr	r2, [sp, #24]
 8006540:	464b      	mov	r3, r9
 8006542:	4442      	add	r2, r8
 8006544:	4631      	mov	r1, r6
 8006546:	4628      	mov	r0, r5
 8006548:	47b8      	blx	r7
 800654a:	3001      	adds	r0, #1
 800654c:	d1c3      	bne.n	80064d6 <_printf_float+0x32e>
 800654e:	e686      	b.n	800625e <_printf_float+0xb6>
 8006550:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006554:	f1ba 0f01 	cmp.w	sl, #1
 8006558:	dc01      	bgt.n	800655e <_printf_float+0x3b6>
 800655a:	07db      	lsls	r3, r3, #31
 800655c:	d536      	bpl.n	80065cc <_printf_float+0x424>
 800655e:	2301      	movs	r3, #1
 8006560:	4642      	mov	r2, r8
 8006562:	4631      	mov	r1, r6
 8006564:	4628      	mov	r0, r5
 8006566:	47b8      	blx	r7
 8006568:	3001      	adds	r0, #1
 800656a:	f43f ae78 	beq.w	800625e <_printf_float+0xb6>
 800656e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006572:	4631      	mov	r1, r6
 8006574:	4628      	mov	r0, r5
 8006576:	47b8      	blx	r7
 8006578:	3001      	adds	r0, #1
 800657a:	f43f ae70 	beq.w	800625e <_printf_float+0xb6>
 800657e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006582:	2200      	movs	r2, #0
 8006584:	2300      	movs	r3, #0
 8006586:	f10a 3aff 	add.w	sl, sl, #4294967295
 800658a:	f7fa faa5 	bl	8000ad8 <__aeabi_dcmpeq>
 800658e:	b9c0      	cbnz	r0, 80065c2 <_printf_float+0x41a>
 8006590:	4653      	mov	r3, sl
 8006592:	f108 0201 	add.w	r2, r8, #1
 8006596:	4631      	mov	r1, r6
 8006598:	4628      	mov	r0, r5
 800659a:	47b8      	blx	r7
 800659c:	3001      	adds	r0, #1
 800659e:	d10c      	bne.n	80065ba <_printf_float+0x412>
 80065a0:	e65d      	b.n	800625e <_printf_float+0xb6>
 80065a2:	2301      	movs	r3, #1
 80065a4:	465a      	mov	r2, fp
 80065a6:	4631      	mov	r1, r6
 80065a8:	4628      	mov	r0, r5
 80065aa:	47b8      	blx	r7
 80065ac:	3001      	adds	r0, #1
 80065ae:	f43f ae56 	beq.w	800625e <_printf_float+0xb6>
 80065b2:	f108 0801 	add.w	r8, r8, #1
 80065b6:	45d0      	cmp	r8, sl
 80065b8:	dbf3      	blt.n	80065a2 <_printf_float+0x3fa>
 80065ba:	464b      	mov	r3, r9
 80065bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80065c0:	e6df      	b.n	8006382 <_printf_float+0x1da>
 80065c2:	f04f 0800 	mov.w	r8, #0
 80065c6:	f104 0b1a 	add.w	fp, r4, #26
 80065ca:	e7f4      	b.n	80065b6 <_printf_float+0x40e>
 80065cc:	2301      	movs	r3, #1
 80065ce:	4642      	mov	r2, r8
 80065d0:	e7e1      	b.n	8006596 <_printf_float+0x3ee>
 80065d2:	2301      	movs	r3, #1
 80065d4:	464a      	mov	r2, r9
 80065d6:	4631      	mov	r1, r6
 80065d8:	4628      	mov	r0, r5
 80065da:	47b8      	blx	r7
 80065dc:	3001      	adds	r0, #1
 80065de:	f43f ae3e 	beq.w	800625e <_printf_float+0xb6>
 80065e2:	f108 0801 	add.w	r8, r8, #1
 80065e6:	68e3      	ldr	r3, [r4, #12]
 80065e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80065ea:	1a5b      	subs	r3, r3, r1
 80065ec:	4543      	cmp	r3, r8
 80065ee:	dcf0      	bgt.n	80065d2 <_printf_float+0x42a>
 80065f0:	e6fc      	b.n	80063ec <_printf_float+0x244>
 80065f2:	f04f 0800 	mov.w	r8, #0
 80065f6:	f104 0919 	add.w	r9, r4, #25
 80065fa:	e7f4      	b.n	80065e6 <_printf_float+0x43e>

080065fc <_printf_common>:
 80065fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006600:	4616      	mov	r6, r2
 8006602:	4698      	mov	r8, r3
 8006604:	688a      	ldr	r2, [r1, #8]
 8006606:	690b      	ldr	r3, [r1, #16]
 8006608:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800660c:	4293      	cmp	r3, r2
 800660e:	bfb8      	it	lt
 8006610:	4613      	movlt	r3, r2
 8006612:	6033      	str	r3, [r6, #0]
 8006614:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006618:	4607      	mov	r7, r0
 800661a:	460c      	mov	r4, r1
 800661c:	b10a      	cbz	r2, 8006622 <_printf_common+0x26>
 800661e:	3301      	adds	r3, #1
 8006620:	6033      	str	r3, [r6, #0]
 8006622:	6823      	ldr	r3, [r4, #0]
 8006624:	0699      	lsls	r1, r3, #26
 8006626:	bf42      	ittt	mi
 8006628:	6833      	ldrmi	r3, [r6, #0]
 800662a:	3302      	addmi	r3, #2
 800662c:	6033      	strmi	r3, [r6, #0]
 800662e:	6825      	ldr	r5, [r4, #0]
 8006630:	f015 0506 	ands.w	r5, r5, #6
 8006634:	d106      	bne.n	8006644 <_printf_common+0x48>
 8006636:	f104 0a19 	add.w	sl, r4, #25
 800663a:	68e3      	ldr	r3, [r4, #12]
 800663c:	6832      	ldr	r2, [r6, #0]
 800663e:	1a9b      	subs	r3, r3, r2
 8006640:	42ab      	cmp	r3, r5
 8006642:	dc26      	bgt.n	8006692 <_printf_common+0x96>
 8006644:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006648:	6822      	ldr	r2, [r4, #0]
 800664a:	3b00      	subs	r3, #0
 800664c:	bf18      	it	ne
 800664e:	2301      	movne	r3, #1
 8006650:	0692      	lsls	r2, r2, #26
 8006652:	d42b      	bmi.n	80066ac <_printf_common+0xb0>
 8006654:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006658:	4641      	mov	r1, r8
 800665a:	4638      	mov	r0, r7
 800665c:	47c8      	blx	r9
 800665e:	3001      	adds	r0, #1
 8006660:	d01e      	beq.n	80066a0 <_printf_common+0xa4>
 8006662:	6823      	ldr	r3, [r4, #0]
 8006664:	6922      	ldr	r2, [r4, #16]
 8006666:	f003 0306 	and.w	r3, r3, #6
 800666a:	2b04      	cmp	r3, #4
 800666c:	bf02      	ittt	eq
 800666e:	68e5      	ldreq	r5, [r4, #12]
 8006670:	6833      	ldreq	r3, [r6, #0]
 8006672:	1aed      	subeq	r5, r5, r3
 8006674:	68a3      	ldr	r3, [r4, #8]
 8006676:	bf0c      	ite	eq
 8006678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800667c:	2500      	movne	r5, #0
 800667e:	4293      	cmp	r3, r2
 8006680:	bfc4      	itt	gt
 8006682:	1a9b      	subgt	r3, r3, r2
 8006684:	18ed      	addgt	r5, r5, r3
 8006686:	2600      	movs	r6, #0
 8006688:	341a      	adds	r4, #26
 800668a:	42b5      	cmp	r5, r6
 800668c:	d11a      	bne.n	80066c4 <_printf_common+0xc8>
 800668e:	2000      	movs	r0, #0
 8006690:	e008      	b.n	80066a4 <_printf_common+0xa8>
 8006692:	2301      	movs	r3, #1
 8006694:	4652      	mov	r2, sl
 8006696:	4641      	mov	r1, r8
 8006698:	4638      	mov	r0, r7
 800669a:	47c8      	blx	r9
 800669c:	3001      	adds	r0, #1
 800669e:	d103      	bne.n	80066a8 <_printf_common+0xac>
 80066a0:	f04f 30ff 	mov.w	r0, #4294967295
 80066a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066a8:	3501      	adds	r5, #1
 80066aa:	e7c6      	b.n	800663a <_printf_common+0x3e>
 80066ac:	18e1      	adds	r1, r4, r3
 80066ae:	1c5a      	adds	r2, r3, #1
 80066b0:	2030      	movs	r0, #48	@ 0x30
 80066b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80066b6:	4422      	add	r2, r4
 80066b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80066bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80066c0:	3302      	adds	r3, #2
 80066c2:	e7c7      	b.n	8006654 <_printf_common+0x58>
 80066c4:	2301      	movs	r3, #1
 80066c6:	4622      	mov	r2, r4
 80066c8:	4641      	mov	r1, r8
 80066ca:	4638      	mov	r0, r7
 80066cc:	47c8      	blx	r9
 80066ce:	3001      	adds	r0, #1
 80066d0:	d0e6      	beq.n	80066a0 <_printf_common+0xa4>
 80066d2:	3601      	adds	r6, #1
 80066d4:	e7d9      	b.n	800668a <_printf_common+0x8e>
	...

080066d8 <_printf_i>:
 80066d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066dc:	7e0f      	ldrb	r7, [r1, #24]
 80066de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80066e0:	2f78      	cmp	r7, #120	@ 0x78
 80066e2:	4691      	mov	r9, r2
 80066e4:	4680      	mov	r8, r0
 80066e6:	460c      	mov	r4, r1
 80066e8:	469a      	mov	sl, r3
 80066ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80066ee:	d807      	bhi.n	8006700 <_printf_i+0x28>
 80066f0:	2f62      	cmp	r7, #98	@ 0x62
 80066f2:	d80a      	bhi.n	800670a <_printf_i+0x32>
 80066f4:	2f00      	cmp	r7, #0
 80066f6:	f000 80d2 	beq.w	800689e <_printf_i+0x1c6>
 80066fa:	2f58      	cmp	r7, #88	@ 0x58
 80066fc:	f000 80b9 	beq.w	8006872 <_printf_i+0x19a>
 8006700:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006704:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006708:	e03a      	b.n	8006780 <_printf_i+0xa8>
 800670a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800670e:	2b15      	cmp	r3, #21
 8006710:	d8f6      	bhi.n	8006700 <_printf_i+0x28>
 8006712:	a101      	add	r1, pc, #4	@ (adr r1, 8006718 <_printf_i+0x40>)
 8006714:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006718:	08006771 	.word	0x08006771
 800671c:	08006785 	.word	0x08006785
 8006720:	08006701 	.word	0x08006701
 8006724:	08006701 	.word	0x08006701
 8006728:	08006701 	.word	0x08006701
 800672c:	08006701 	.word	0x08006701
 8006730:	08006785 	.word	0x08006785
 8006734:	08006701 	.word	0x08006701
 8006738:	08006701 	.word	0x08006701
 800673c:	08006701 	.word	0x08006701
 8006740:	08006701 	.word	0x08006701
 8006744:	08006885 	.word	0x08006885
 8006748:	080067af 	.word	0x080067af
 800674c:	0800683f 	.word	0x0800683f
 8006750:	08006701 	.word	0x08006701
 8006754:	08006701 	.word	0x08006701
 8006758:	080068a7 	.word	0x080068a7
 800675c:	08006701 	.word	0x08006701
 8006760:	080067af 	.word	0x080067af
 8006764:	08006701 	.word	0x08006701
 8006768:	08006701 	.word	0x08006701
 800676c:	08006847 	.word	0x08006847
 8006770:	6833      	ldr	r3, [r6, #0]
 8006772:	1d1a      	adds	r2, r3, #4
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6032      	str	r2, [r6, #0]
 8006778:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800677c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006780:	2301      	movs	r3, #1
 8006782:	e09d      	b.n	80068c0 <_printf_i+0x1e8>
 8006784:	6833      	ldr	r3, [r6, #0]
 8006786:	6820      	ldr	r0, [r4, #0]
 8006788:	1d19      	adds	r1, r3, #4
 800678a:	6031      	str	r1, [r6, #0]
 800678c:	0606      	lsls	r6, r0, #24
 800678e:	d501      	bpl.n	8006794 <_printf_i+0xbc>
 8006790:	681d      	ldr	r5, [r3, #0]
 8006792:	e003      	b.n	800679c <_printf_i+0xc4>
 8006794:	0645      	lsls	r5, r0, #25
 8006796:	d5fb      	bpl.n	8006790 <_printf_i+0xb8>
 8006798:	f9b3 5000 	ldrsh.w	r5, [r3]
 800679c:	2d00      	cmp	r5, #0
 800679e:	da03      	bge.n	80067a8 <_printf_i+0xd0>
 80067a0:	232d      	movs	r3, #45	@ 0x2d
 80067a2:	426d      	negs	r5, r5
 80067a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067a8:	4859      	ldr	r0, [pc, #356]	@ (8006910 <_printf_i+0x238>)
 80067aa:	230a      	movs	r3, #10
 80067ac:	e011      	b.n	80067d2 <_printf_i+0xfa>
 80067ae:	6821      	ldr	r1, [r4, #0]
 80067b0:	6833      	ldr	r3, [r6, #0]
 80067b2:	0608      	lsls	r0, r1, #24
 80067b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80067b8:	d402      	bmi.n	80067c0 <_printf_i+0xe8>
 80067ba:	0649      	lsls	r1, r1, #25
 80067bc:	bf48      	it	mi
 80067be:	b2ad      	uxthmi	r5, r5
 80067c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80067c2:	4853      	ldr	r0, [pc, #332]	@ (8006910 <_printf_i+0x238>)
 80067c4:	6033      	str	r3, [r6, #0]
 80067c6:	bf14      	ite	ne
 80067c8:	230a      	movne	r3, #10
 80067ca:	2308      	moveq	r3, #8
 80067cc:	2100      	movs	r1, #0
 80067ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80067d2:	6866      	ldr	r6, [r4, #4]
 80067d4:	60a6      	str	r6, [r4, #8]
 80067d6:	2e00      	cmp	r6, #0
 80067d8:	bfa2      	ittt	ge
 80067da:	6821      	ldrge	r1, [r4, #0]
 80067dc:	f021 0104 	bicge.w	r1, r1, #4
 80067e0:	6021      	strge	r1, [r4, #0]
 80067e2:	b90d      	cbnz	r5, 80067e8 <_printf_i+0x110>
 80067e4:	2e00      	cmp	r6, #0
 80067e6:	d04b      	beq.n	8006880 <_printf_i+0x1a8>
 80067e8:	4616      	mov	r6, r2
 80067ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80067ee:	fb03 5711 	mls	r7, r3, r1, r5
 80067f2:	5dc7      	ldrb	r7, [r0, r7]
 80067f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80067f8:	462f      	mov	r7, r5
 80067fa:	42bb      	cmp	r3, r7
 80067fc:	460d      	mov	r5, r1
 80067fe:	d9f4      	bls.n	80067ea <_printf_i+0x112>
 8006800:	2b08      	cmp	r3, #8
 8006802:	d10b      	bne.n	800681c <_printf_i+0x144>
 8006804:	6823      	ldr	r3, [r4, #0]
 8006806:	07df      	lsls	r7, r3, #31
 8006808:	d508      	bpl.n	800681c <_printf_i+0x144>
 800680a:	6923      	ldr	r3, [r4, #16]
 800680c:	6861      	ldr	r1, [r4, #4]
 800680e:	4299      	cmp	r1, r3
 8006810:	bfde      	ittt	le
 8006812:	2330      	movle	r3, #48	@ 0x30
 8006814:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006818:	f106 36ff 	addle.w	r6, r6, #4294967295
 800681c:	1b92      	subs	r2, r2, r6
 800681e:	6122      	str	r2, [r4, #16]
 8006820:	f8cd a000 	str.w	sl, [sp]
 8006824:	464b      	mov	r3, r9
 8006826:	aa03      	add	r2, sp, #12
 8006828:	4621      	mov	r1, r4
 800682a:	4640      	mov	r0, r8
 800682c:	f7ff fee6 	bl	80065fc <_printf_common>
 8006830:	3001      	adds	r0, #1
 8006832:	d14a      	bne.n	80068ca <_printf_i+0x1f2>
 8006834:	f04f 30ff 	mov.w	r0, #4294967295
 8006838:	b004      	add	sp, #16
 800683a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800683e:	6823      	ldr	r3, [r4, #0]
 8006840:	f043 0320 	orr.w	r3, r3, #32
 8006844:	6023      	str	r3, [r4, #0]
 8006846:	4833      	ldr	r0, [pc, #204]	@ (8006914 <_printf_i+0x23c>)
 8006848:	2778      	movs	r7, #120	@ 0x78
 800684a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800684e:	6823      	ldr	r3, [r4, #0]
 8006850:	6831      	ldr	r1, [r6, #0]
 8006852:	061f      	lsls	r7, r3, #24
 8006854:	f851 5b04 	ldr.w	r5, [r1], #4
 8006858:	d402      	bmi.n	8006860 <_printf_i+0x188>
 800685a:	065f      	lsls	r7, r3, #25
 800685c:	bf48      	it	mi
 800685e:	b2ad      	uxthmi	r5, r5
 8006860:	6031      	str	r1, [r6, #0]
 8006862:	07d9      	lsls	r1, r3, #31
 8006864:	bf44      	itt	mi
 8006866:	f043 0320 	orrmi.w	r3, r3, #32
 800686a:	6023      	strmi	r3, [r4, #0]
 800686c:	b11d      	cbz	r5, 8006876 <_printf_i+0x19e>
 800686e:	2310      	movs	r3, #16
 8006870:	e7ac      	b.n	80067cc <_printf_i+0xf4>
 8006872:	4827      	ldr	r0, [pc, #156]	@ (8006910 <_printf_i+0x238>)
 8006874:	e7e9      	b.n	800684a <_printf_i+0x172>
 8006876:	6823      	ldr	r3, [r4, #0]
 8006878:	f023 0320 	bic.w	r3, r3, #32
 800687c:	6023      	str	r3, [r4, #0]
 800687e:	e7f6      	b.n	800686e <_printf_i+0x196>
 8006880:	4616      	mov	r6, r2
 8006882:	e7bd      	b.n	8006800 <_printf_i+0x128>
 8006884:	6833      	ldr	r3, [r6, #0]
 8006886:	6825      	ldr	r5, [r4, #0]
 8006888:	6961      	ldr	r1, [r4, #20]
 800688a:	1d18      	adds	r0, r3, #4
 800688c:	6030      	str	r0, [r6, #0]
 800688e:	062e      	lsls	r6, r5, #24
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	d501      	bpl.n	8006898 <_printf_i+0x1c0>
 8006894:	6019      	str	r1, [r3, #0]
 8006896:	e002      	b.n	800689e <_printf_i+0x1c6>
 8006898:	0668      	lsls	r0, r5, #25
 800689a:	d5fb      	bpl.n	8006894 <_printf_i+0x1bc>
 800689c:	8019      	strh	r1, [r3, #0]
 800689e:	2300      	movs	r3, #0
 80068a0:	6123      	str	r3, [r4, #16]
 80068a2:	4616      	mov	r6, r2
 80068a4:	e7bc      	b.n	8006820 <_printf_i+0x148>
 80068a6:	6833      	ldr	r3, [r6, #0]
 80068a8:	1d1a      	adds	r2, r3, #4
 80068aa:	6032      	str	r2, [r6, #0]
 80068ac:	681e      	ldr	r6, [r3, #0]
 80068ae:	6862      	ldr	r2, [r4, #4]
 80068b0:	2100      	movs	r1, #0
 80068b2:	4630      	mov	r0, r6
 80068b4:	f7f9 fc94 	bl	80001e0 <memchr>
 80068b8:	b108      	cbz	r0, 80068be <_printf_i+0x1e6>
 80068ba:	1b80      	subs	r0, r0, r6
 80068bc:	6060      	str	r0, [r4, #4]
 80068be:	6863      	ldr	r3, [r4, #4]
 80068c0:	6123      	str	r3, [r4, #16]
 80068c2:	2300      	movs	r3, #0
 80068c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068c8:	e7aa      	b.n	8006820 <_printf_i+0x148>
 80068ca:	6923      	ldr	r3, [r4, #16]
 80068cc:	4632      	mov	r2, r6
 80068ce:	4649      	mov	r1, r9
 80068d0:	4640      	mov	r0, r8
 80068d2:	47d0      	blx	sl
 80068d4:	3001      	adds	r0, #1
 80068d6:	d0ad      	beq.n	8006834 <_printf_i+0x15c>
 80068d8:	6823      	ldr	r3, [r4, #0]
 80068da:	079b      	lsls	r3, r3, #30
 80068dc:	d413      	bmi.n	8006906 <_printf_i+0x22e>
 80068de:	68e0      	ldr	r0, [r4, #12]
 80068e0:	9b03      	ldr	r3, [sp, #12]
 80068e2:	4298      	cmp	r0, r3
 80068e4:	bfb8      	it	lt
 80068e6:	4618      	movlt	r0, r3
 80068e8:	e7a6      	b.n	8006838 <_printf_i+0x160>
 80068ea:	2301      	movs	r3, #1
 80068ec:	4632      	mov	r2, r6
 80068ee:	4649      	mov	r1, r9
 80068f0:	4640      	mov	r0, r8
 80068f2:	47d0      	blx	sl
 80068f4:	3001      	adds	r0, #1
 80068f6:	d09d      	beq.n	8006834 <_printf_i+0x15c>
 80068f8:	3501      	adds	r5, #1
 80068fa:	68e3      	ldr	r3, [r4, #12]
 80068fc:	9903      	ldr	r1, [sp, #12]
 80068fe:	1a5b      	subs	r3, r3, r1
 8006900:	42ab      	cmp	r3, r5
 8006902:	dcf2      	bgt.n	80068ea <_printf_i+0x212>
 8006904:	e7eb      	b.n	80068de <_printf_i+0x206>
 8006906:	2500      	movs	r5, #0
 8006908:	f104 0619 	add.w	r6, r4, #25
 800690c:	e7f5      	b.n	80068fa <_printf_i+0x222>
 800690e:	bf00      	nop
 8006910:	08008d2e 	.word	0x08008d2e
 8006914:	08008d3f 	.word	0x08008d3f

08006918 <std>:
 8006918:	2300      	movs	r3, #0
 800691a:	b510      	push	{r4, lr}
 800691c:	4604      	mov	r4, r0
 800691e:	e9c0 3300 	strd	r3, r3, [r0]
 8006922:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006926:	6083      	str	r3, [r0, #8]
 8006928:	8181      	strh	r1, [r0, #12]
 800692a:	6643      	str	r3, [r0, #100]	@ 0x64
 800692c:	81c2      	strh	r2, [r0, #14]
 800692e:	6183      	str	r3, [r0, #24]
 8006930:	4619      	mov	r1, r3
 8006932:	2208      	movs	r2, #8
 8006934:	305c      	adds	r0, #92	@ 0x5c
 8006936:	f000 f948 	bl	8006bca <memset>
 800693a:	4b0d      	ldr	r3, [pc, #52]	@ (8006970 <std+0x58>)
 800693c:	6263      	str	r3, [r4, #36]	@ 0x24
 800693e:	4b0d      	ldr	r3, [pc, #52]	@ (8006974 <std+0x5c>)
 8006940:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006942:	4b0d      	ldr	r3, [pc, #52]	@ (8006978 <std+0x60>)
 8006944:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006946:	4b0d      	ldr	r3, [pc, #52]	@ (800697c <std+0x64>)
 8006948:	6323      	str	r3, [r4, #48]	@ 0x30
 800694a:	4b0d      	ldr	r3, [pc, #52]	@ (8006980 <std+0x68>)
 800694c:	6224      	str	r4, [r4, #32]
 800694e:	429c      	cmp	r4, r3
 8006950:	d006      	beq.n	8006960 <std+0x48>
 8006952:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006956:	4294      	cmp	r4, r2
 8006958:	d002      	beq.n	8006960 <std+0x48>
 800695a:	33d0      	adds	r3, #208	@ 0xd0
 800695c:	429c      	cmp	r4, r3
 800695e:	d105      	bne.n	800696c <std+0x54>
 8006960:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006968:	f000 ba00 	b.w	8006d6c <__retarget_lock_init_recursive>
 800696c:	bd10      	pop	{r4, pc}
 800696e:	bf00      	nop
 8006970:	08006b45 	.word	0x08006b45
 8006974:	08006b67 	.word	0x08006b67
 8006978:	08006b9f 	.word	0x08006b9f
 800697c:	08006bc3 	.word	0x08006bc3
 8006980:	200003a8 	.word	0x200003a8

08006984 <stdio_exit_handler>:
 8006984:	4a02      	ldr	r2, [pc, #8]	@ (8006990 <stdio_exit_handler+0xc>)
 8006986:	4903      	ldr	r1, [pc, #12]	@ (8006994 <stdio_exit_handler+0x10>)
 8006988:	4803      	ldr	r0, [pc, #12]	@ (8006998 <stdio_exit_handler+0x14>)
 800698a:	f000 b869 	b.w	8006a60 <_fwalk_sglue>
 800698e:	bf00      	nop
 8006990:	2000000c 	.word	0x2000000c
 8006994:	08008561 	.word	0x08008561
 8006998:	2000001c 	.word	0x2000001c

0800699c <cleanup_stdio>:
 800699c:	6841      	ldr	r1, [r0, #4]
 800699e:	4b0c      	ldr	r3, [pc, #48]	@ (80069d0 <cleanup_stdio+0x34>)
 80069a0:	4299      	cmp	r1, r3
 80069a2:	b510      	push	{r4, lr}
 80069a4:	4604      	mov	r4, r0
 80069a6:	d001      	beq.n	80069ac <cleanup_stdio+0x10>
 80069a8:	f001 fdda 	bl	8008560 <_fflush_r>
 80069ac:	68a1      	ldr	r1, [r4, #8]
 80069ae:	4b09      	ldr	r3, [pc, #36]	@ (80069d4 <cleanup_stdio+0x38>)
 80069b0:	4299      	cmp	r1, r3
 80069b2:	d002      	beq.n	80069ba <cleanup_stdio+0x1e>
 80069b4:	4620      	mov	r0, r4
 80069b6:	f001 fdd3 	bl	8008560 <_fflush_r>
 80069ba:	68e1      	ldr	r1, [r4, #12]
 80069bc:	4b06      	ldr	r3, [pc, #24]	@ (80069d8 <cleanup_stdio+0x3c>)
 80069be:	4299      	cmp	r1, r3
 80069c0:	d004      	beq.n	80069cc <cleanup_stdio+0x30>
 80069c2:	4620      	mov	r0, r4
 80069c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069c8:	f001 bdca 	b.w	8008560 <_fflush_r>
 80069cc:	bd10      	pop	{r4, pc}
 80069ce:	bf00      	nop
 80069d0:	200003a8 	.word	0x200003a8
 80069d4:	20000410 	.word	0x20000410
 80069d8:	20000478 	.word	0x20000478

080069dc <global_stdio_init.part.0>:
 80069dc:	b510      	push	{r4, lr}
 80069de:	4b0b      	ldr	r3, [pc, #44]	@ (8006a0c <global_stdio_init.part.0+0x30>)
 80069e0:	4c0b      	ldr	r4, [pc, #44]	@ (8006a10 <global_stdio_init.part.0+0x34>)
 80069e2:	4a0c      	ldr	r2, [pc, #48]	@ (8006a14 <global_stdio_init.part.0+0x38>)
 80069e4:	601a      	str	r2, [r3, #0]
 80069e6:	4620      	mov	r0, r4
 80069e8:	2200      	movs	r2, #0
 80069ea:	2104      	movs	r1, #4
 80069ec:	f7ff ff94 	bl	8006918 <std>
 80069f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80069f4:	2201      	movs	r2, #1
 80069f6:	2109      	movs	r1, #9
 80069f8:	f7ff ff8e 	bl	8006918 <std>
 80069fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006a00:	2202      	movs	r2, #2
 8006a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a06:	2112      	movs	r1, #18
 8006a08:	f7ff bf86 	b.w	8006918 <std>
 8006a0c:	200004e0 	.word	0x200004e0
 8006a10:	200003a8 	.word	0x200003a8
 8006a14:	08006985 	.word	0x08006985

08006a18 <__sfp_lock_acquire>:
 8006a18:	4801      	ldr	r0, [pc, #4]	@ (8006a20 <__sfp_lock_acquire+0x8>)
 8006a1a:	f000 b9a8 	b.w	8006d6e <__retarget_lock_acquire_recursive>
 8006a1e:	bf00      	nop
 8006a20:	200004e9 	.word	0x200004e9

08006a24 <__sfp_lock_release>:
 8006a24:	4801      	ldr	r0, [pc, #4]	@ (8006a2c <__sfp_lock_release+0x8>)
 8006a26:	f000 b9a3 	b.w	8006d70 <__retarget_lock_release_recursive>
 8006a2a:	bf00      	nop
 8006a2c:	200004e9 	.word	0x200004e9

08006a30 <__sinit>:
 8006a30:	b510      	push	{r4, lr}
 8006a32:	4604      	mov	r4, r0
 8006a34:	f7ff fff0 	bl	8006a18 <__sfp_lock_acquire>
 8006a38:	6a23      	ldr	r3, [r4, #32]
 8006a3a:	b11b      	cbz	r3, 8006a44 <__sinit+0x14>
 8006a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a40:	f7ff bff0 	b.w	8006a24 <__sfp_lock_release>
 8006a44:	4b04      	ldr	r3, [pc, #16]	@ (8006a58 <__sinit+0x28>)
 8006a46:	6223      	str	r3, [r4, #32]
 8006a48:	4b04      	ldr	r3, [pc, #16]	@ (8006a5c <__sinit+0x2c>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1f5      	bne.n	8006a3c <__sinit+0xc>
 8006a50:	f7ff ffc4 	bl	80069dc <global_stdio_init.part.0>
 8006a54:	e7f2      	b.n	8006a3c <__sinit+0xc>
 8006a56:	bf00      	nop
 8006a58:	0800699d 	.word	0x0800699d
 8006a5c:	200004e0 	.word	0x200004e0

08006a60 <_fwalk_sglue>:
 8006a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a64:	4607      	mov	r7, r0
 8006a66:	4688      	mov	r8, r1
 8006a68:	4614      	mov	r4, r2
 8006a6a:	2600      	movs	r6, #0
 8006a6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a70:	f1b9 0901 	subs.w	r9, r9, #1
 8006a74:	d505      	bpl.n	8006a82 <_fwalk_sglue+0x22>
 8006a76:	6824      	ldr	r4, [r4, #0]
 8006a78:	2c00      	cmp	r4, #0
 8006a7a:	d1f7      	bne.n	8006a6c <_fwalk_sglue+0xc>
 8006a7c:	4630      	mov	r0, r6
 8006a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a82:	89ab      	ldrh	r3, [r5, #12]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d907      	bls.n	8006a98 <_fwalk_sglue+0x38>
 8006a88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	d003      	beq.n	8006a98 <_fwalk_sglue+0x38>
 8006a90:	4629      	mov	r1, r5
 8006a92:	4638      	mov	r0, r7
 8006a94:	47c0      	blx	r8
 8006a96:	4306      	orrs	r6, r0
 8006a98:	3568      	adds	r5, #104	@ 0x68
 8006a9a:	e7e9      	b.n	8006a70 <_fwalk_sglue+0x10>

08006a9c <sniprintf>:
 8006a9c:	b40c      	push	{r2, r3}
 8006a9e:	b530      	push	{r4, r5, lr}
 8006aa0:	4b17      	ldr	r3, [pc, #92]	@ (8006b00 <sniprintf+0x64>)
 8006aa2:	1e0c      	subs	r4, r1, #0
 8006aa4:	681d      	ldr	r5, [r3, #0]
 8006aa6:	b09d      	sub	sp, #116	@ 0x74
 8006aa8:	da08      	bge.n	8006abc <sniprintf+0x20>
 8006aaa:	238b      	movs	r3, #139	@ 0x8b
 8006aac:	602b      	str	r3, [r5, #0]
 8006aae:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab2:	b01d      	add	sp, #116	@ 0x74
 8006ab4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ab8:	b002      	add	sp, #8
 8006aba:	4770      	bx	lr
 8006abc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006ac0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006ac4:	bf14      	ite	ne
 8006ac6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006aca:	4623      	moveq	r3, r4
 8006acc:	9304      	str	r3, [sp, #16]
 8006ace:	9307      	str	r3, [sp, #28]
 8006ad0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006ad4:	9002      	str	r0, [sp, #8]
 8006ad6:	9006      	str	r0, [sp, #24]
 8006ad8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006adc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006ade:	ab21      	add	r3, sp, #132	@ 0x84
 8006ae0:	a902      	add	r1, sp, #8
 8006ae2:	4628      	mov	r0, r5
 8006ae4:	9301      	str	r3, [sp, #4]
 8006ae6:	f001 fbbb 	bl	8008260 <_svfiprintf_r>
 8006aea:	1c43      	adds	r3, r0, #1
 8006aec:	bfbc      	itt	lt
 8006aee:	238b      	movlt	r3, #139	@ 0x8b
 8006af0:	602b      	strlt	r3, [r5, #0]
 8006af2:	2c00      	cmp	r4, #0
 8006af4:	d0dd      	beq.n	8006ab2 <sniprintf+0x16>
 8006af6:	9b02      	ldr	r3, [sp, #8]
 8006af8:	2200      	movs	r2, #0
 8006afa:	701a      	strb	r2, [r3, #0]
 8006afc:	e7d9      	b.n	8006ab2 <sniprintf+0x16>
 8006afe:	bf00      	nop
 8006b00:	20000018 	.word	0x20000018

08006b04 <siprintf>:
 8006b04:	b40e      	push	{r1, r2, r3}
 8006b06:	b500      	push	{lr}
 8006b08:	b09c      	sub	sp, #112	@ 0x70
 8006b0a:	ab1d      	add	r3, sp, #116	@ 0x74
 8006b0c:	9002      	str	r0, [sp, #8]
 8006b0e:	9006      	str	r0, [sp, #24]
 8006b10:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006b14:	4809      	ldr	r0, [pc, #36]	@ (8006b3c <siprintf+0x38>)
 8006b16:	9107      	str	r1, [sp, #28]
 8006b18:	9104      	str	r1, [sp, #16]
 8006b1a:	4909      	ldr	r1, [pc, #36]	@ (8006b40 <siprintf+0x3c>)
 8006b1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b20:	9105      	str	r1, [sp, #20]
 8006b22:	6800      	ldr	r0, [r0, #0]
 8006b24:	9301      	str	r3, [sp, #4]
 8006b26:	a902      	add	r1, sp, #8
 8006b28:	f001 fb9a 	bl	8008260 <_svfiprintf_r>
 8006b2c:	9b02      	ldr	r3, [sp, #8]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	701a      	strb	r2, [r3, #0]
 8006b32:	b01c      	add	sp, #112	@ 0x70
 8006b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b38:	b003      	add	sp, #12
 8006b3a:	4770      	bx	lr
 8006b3c:	20000018 	.word	0x20000018
 8006b40:	ffff0208 	.word	0xffff0208

08006b44 <__sread>:
 8006b44:	b510      	push	{r4, lr}
 8006b46:	460c      	mov	r4, r1
 8006b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b4c:	f000 f89c 	bl	8006c88 <_read_r>
 8006b50:	2800      	cmp	r0, #0
 8006b52:	bfab      	itete	ge
 8006b54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006b56:	89a3      	ldrhlt	r3, [r4, #12]
 8006b58:	181b      	addge	r3, r3, r0
 8006b5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006b5e:	bfac      	ite	ge
 8006b60:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006b62:	81a3      	strhlt	r3, [r4, #12]
 8006b64:	bd10      	pop	{r4, pc}

08006b66 <__swrite>:
 8006b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b6a:	461f      	mov	r7, r3
 8006b6c:	898b      	ldrh	r3, [r1, #12]
 8006b6e:	05db      	lsls	r3, r3, #23
 8006b70:	4605      	mov	r5, r0
 8006b72:	460c      	mov	r4, r1
 8006b74:	4616      	mov	r6, r2
 8006b76:	d505      	bpl.n	8006b84 <__swrite+0x1e>
 8006b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f000 f870 	bl	8006c64 <_lseek_r>
 8006b84:	89a3      	ldrh	r3, [r4, #12]
 8006b86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b8e:	81a3      	strh	r3, [r4, #12]
 8006b90:	4632      	mov	r2, r6
 8006b92:	463b      	mov	r3, r7
 8006b94:	4628      	mov	r0, r5
 8006b96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b9a:	f000 b8ab 	b.w	8006cf4 <_write_r>

08006b9e <__sseek>:
 8006b9e:	b510      	push	{r4, lr}
 8006ba0:	460c      	mov	r4, r1
 8006ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ba6:	f000 f85d 	bl	8006c64 <_lseek_r>
 8006baa:	1c43      	adds	r3, r0, #1
 8006bac:	89a3      	ldrh	r3, [r4, #12]
 8006bae:	bf15      	itete	ne
 8006bb0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006bb2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006bb6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006bba:	81a3      	strheq	r3, [r4, #12]
 8006bbc:	bf18      	it	ne
 8006bbe:	81a3      	strhne	r3, [r4, #12]
 8006bc0:	bd10      	pop	{r4, pc}

08006bc2 <__sclose>:
 8006bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bc6:	f000 b83d 	b.w	8006c44 <_close_r>

08006bca <memset>:
 8006bca:	4402      	add	r2, r0
 8006bcc:	4603      	mov	r3, r0
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d100      	bne.n	8006bd4 <memset+0xa>
 8006bd2:	4770      	bx	lr
 8006bd4:	f803 1b01 	strb.w	r1, [r3], #1
 8006bd8:	e7f9      	b.n	8006bce <memset+0x4>

08006bda <_raise_r>:
 8006bda:	291f      	cmp	r1, #31
 8006bdc:	b538      	push	{r3, r4, r5, lr}
 8006bde:	4605      	mov	r5, r0
 8006be0:	460c      	mov	r4, r1
 8006be2:	d904      	bls.n	8006bee <_raise_r+0x14>
 8006be4:	2316      	movs	r3, #22
 8006be6:	6003      	str	r3, [r0, #0]
 8006be8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bec:	bd38      	pop	{r3, r4, r5, pc}
 8006bee:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006bf0:	b112      	cbz	r2, 8006bf8 <_raise_r+0x1e>
 8006bf2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006bf6:	b94b      	cbnz	r3, 8006c0c <_raise_r+0x32>
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	f000 f869 	bl	8006cd0 <_getpid_r>
 8006bfe:	4622      	mov	r2, r4
 8006c00:	4601      	mov	r1, r0
 8006c02:	4628      	mov	r0, r5
 8006c04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c08:	f000 b850 	b.w	8006cac <_kill_r>
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d00a      	beq.n	8006c26 <_raise_r+0x4c>
 8006c10:	1c59      	adds	r1, r3, #1
 8006c12:	d103      	bne.n	8006c1c <_raise_r+0x42>
 8006c14:	2316      	movs	r3, #22
 8006c16:	6003      	str	r3, [r0, #0]
 8006c18:	2001      	movs	r0, #1
 8006c1a:	e7e7      	b.n	8006bec <_raise_r+0x12>
 8006c1c:	2100      	movs	r1, #0
 8006c1e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006c22:	4620      	mov	r0, r4
 8006c24:	4798      	blx	r3
 8006c26:	2000      	movs	r0, #0
 8006c28:	e7e0      	b.n	8006bec <_raise_r+0x12>
	...

08006c2c <raise>:
 8006c2c:	4b02      	ldr	r3, [pc, #8]	@ (8006c38 <raise+0xc>)
 8006c2e:	4601      	mov	r1, r0
 8006c30:	6818      	ldr	r0, [r3, #0]
 8006c32:	f7ff bfd2 	b.w	8006bda <_raise_r>
 8006c36:	bf00      	nop
 8006c38:	20000018 	.word	0x20000018

08006c3c <_localeconv_r>:
 8006c3c:	4800      	ldr	r0, [pc, #0]	@ (8006c40 <_localeconv_r+0x4>)
 8006c3e:	4770      	bx	lr
 8006c40:	20000158 	.word	0x20000158

08006c44 <_close_r>:
 8006c44:	b538      	push	{r3, r4, r5, lr}
 8006c46:	4d06      	ldr	r5, [pc, #24]	@ (8006c60 <_close_r+0x1c>)
 8006c48:	2300      	movs	r3, #0
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	4608      	mov	r0, r1
 8006c4e:	602b      	str	r3, [r5, #0]
 8006c50:	f7fb fd90 	bl	8002774 <_close>
 8006c54:	1c43      	adds	r3, r0, #1
 8006c56:	d102      	bne.n	8006c5e <_close_r+0x1a>
 8006c58:	682b      	ldr	r3, [r5, #0]
 8006c5a:	b103      	cbz	r3, 8006c5e <_close_r+0x1a>
 8006c5c:	6023      	str	r3, [r4, #0]
 8006c5e:	bd38      	pop	{r3, r4, r5, pc}
 8006c60:	200004e4 	.word	0x200004e4

08006c64 <_lseek_r>:
 8006c64:	b538      	push	{r3, r4, r5, lr}
 8006c66:	4d07      	ldr	r5, [pc, #28]	@ (8006c84 <_lseek_r+0x20>)
 8006c68:	4604      	mov	r4, r0
 8006c6a:	4608      	mov	r0, r1
 8006c6c:	4611      	mov	r1, r2
 8006c6e:	2200      	movs	r2, #0
 8006c70:	602a      	str	r2, [r5, #0]
 8006c72:	461a      	mov	r2, r3
 8006c74:	f7fb fda5 	bl	80027c2 <_lseek>
 8006c78:	1c43      	adds	r3, r0, #1
 8006c7a:	d102      	bne.n	8006c82 <_lseek_r+0x1e>
 8006c7c:	682b      	ldr	r3, [r5, #0]
 8006c7e:	b103      	cbz	r3, 8006c82 <_lseek_r+0x1e>
 8006c80:	6023      	str	r3, [r4, #0]
 8006c82:	bd38      	pop	{r3, r4, r5, pc}
 8006c84:	200004e4 	.word	0x200004e4

08006c88 <_read_r>:
 8006c88:	b538      	push	{r3, r4, r5, lr}
 8006c8a:	4d07      	ldr	r5, [pc, #28]	@ (8006ca8 <_read_r+0x20>)
 8006c8c:	4604      	mov	r4, r0
 8006c8e:	4608      	mov	r0, r1
 8006c90:	4611      	mov	r1, r2
 8006c92:	2200      	movs	r2, #0
 8006c94:	602a      	str	r2, [r5, #0]
 8006c96:	461a      	mov	r2, r3
 8006c98:	f7fb fd33 	bl	8002702 <_read>
 8006c9c:	1c43      	adds	r3, r0, #1
 8006c9e:	d102      	bne.n	8006ca6 <_read_r+0x1e>
 8006ca0:	682b      	ldr	r3, [r5, #0]
 8006ca2:	b103      	cbz	r3, 8006ca6 <_read_r+0x1e>
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	bd38      	pop	{r3, r4, r5, pc}
 8006ca8:	200004e4 	.word	0x200004e4

08006cac <_kill_r>:
 8006cac:	b538      	push	{r3, r4, r5, lr}
 8006cae:	4d07      	ldr	r5, [pc, #28]	@ (8006ccc <_kill_r+0x20>)
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	4608      	mov	r0, r1
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	602b      	str	r3, [r5, #0]
 8006cba:	f7fb fd07 	bl	80026cc <_kill>
 8006cbe:	1c43      	adds	r3, r0, #1
 8006cc0:	d102      	bne.n	8006cc8 <_kill_r+0x1c>
 8006cc2:	682b      	ldr	r3, [r5, #0]
 8006cc4:	b103      	cbz	r3, 8006cc8 <_kill_r+0x1c>
 8006cc6:	6023      	str	r3, [r4, #0]
 8006cc8:	bd38      	pop	{r3, r4, r5, pc}
 8006cca:	bf00      	nop
 8006ccc:	200004e4 	.word	0x200004e4

08006cd0 <_getpid_r>:
 8006cd0:	f7fb bcf4 	b.w	80026bc <_getpid>

08006cd4 <_sbrk_r>:
 8006cd4:	b538      	push	{r3, r4, r5, lr}
 8006cd6:	4d06      	ldr	r5, [pc, #24]	@ (8006cf0 <_sbrk_r+0x1c>)
 8006cd8:	2300      	movs	r3, #0
 8006cda:	4604      	mov	r4, r0
 8006cdc:	4608      	mov	r0, r1
 8006cde:	602b      	str	r3, [r5, #0]
 8006ce0:	f7fb fd7c 	bl	80027dc <_sbrk>
 8006ce4:	1c43      	adds	r3, r0, #1
 8006ce6:	d102      	bne.n	8006cee <_sbrk_r+0x1a>
 8006ce8:	682b      	ldr	r3, [r5, #0]
 8006cea:	b103      	cbz	r3, 8006cee <_sbrk_r+0x1a>
 8006cec:	6023      	str	r3, [r4, #0]
 8006cee:	bd38      	pop	{r3, r4, r5, pc}
 8006cf0:	200004e4 	.word	0x200004e4

08006cf4 <_write_r>:
 8006cf4:	b538      	push	{r3, r4, r5, lr}
 8006cf6:	4d07      	ldr	r5, [pc, #28]	@ (8006d14 <_write_r+0x20>)
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	4608      	mov	r0, r1
 8006cfc:	4611      	mov	r1, r2
 8006cfe:	2200      	movs	r2, #0
 8006d00:	602a      	str	r2, [r5, #0]
 8006d02:	461a      	mov	r2, r3
 8006d04:	f7fb fd1a 	bl	800273c <_write>
 8006d08:	1c43      	adds	r3, r0, #1
 8006d0a:	d102      	bne.n	8006d12 <_write_r+0x1e>
 8006d0c:	682b      	ldr	r3, [r5, #0]
 8006d0e:	b103      	cbz	r3, 8006d12 <_write_r+0x1e>
 8006d10:	6023      	str	r3, [r4, #0]
 8006d12:	bd38      	pop	{r3, r4, r5, pc}
 8006d14:	200004e4 	.word	0x200004e4

08006d18 <__errno>:
 8006d18:	4b01      	ldr	r3, [pc, #4]	@ (8006d20 <__errno+0x8>)
 8006d1a:	6818      	ldr	r0, [r3, #0]
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	20000018 	.word	0x20000018

08006d24 <__libc_init_array>:
 8006d24:	b570      	push	{r4, r5, r6, lr}
 8006d26:	4d0d      	ldr	r5, [pc, #52]	@ (8006d5c <__libc_init_array+0x38>)
 8006d28:	4c0d      	ldr	r4, [pc, #52]	@ (8006d60 <__libc_init_array+0x3c>)
 8006d2a:	1b64      	subs	r4, r4, r5
 8006d2c:	10a4      	asrs	r4, r4, #2
 8006d2e:	2600      	movs	r6, #0
 8006d30:	42a6      	cmp	r6, r4
 8006d32:	d109      	bne.n	8006d48 <__libc_init_array+0x24>
 8006d34:	4d0b      	ldr	r5, [pc, #44]	@ (8006d64 <__libc_init_array+0x40>)
 8006d36:	4c0c      	ldr	r4, [pc, #48]	@ (8006d68 <__libc_init_array+0x44>)
 8006d38:	f001 ff56 	bl	8008be8 <_init>
 8006d3c:	1b64      	subs	r4, r4, r5
 8006d3e:	10a4      	asrs	r4, r4, #2
 8006d40:	2600      	movs	r6, #0
 8006d42:	42a6      	cmp	r6, r4
 8006d44:	d105      	bne.n	8006d52 <__libc_init_array+0x2e>
 8006d46:	bd70      	pop	{r4, r5, r6, pc}
 8006d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d4c:	4798      	blx	r3
 8006d4e:	3601      	adds	r6, #1
 8006d50:	e7ee      	b.n	8006d30 <__libc_init_array+0xc>
 8006d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d56:	4798      	blx	r3
 8006d58:	3601      	adds	r6, #1
 8006d5a:	e7f2      	b.n	8006d42 <__libc_init_array+0x1e>
 8006d5c:	08009098 	.word	0x08009098
 8006d60:	08009098 	.word	0x08009098
 8006d64:	08009098 	.word	0x08009098
 8006d68:	0800909c 	.word	0x0800909c

08006d6c <__retarget_lock_init_recursive>:
 8006d6c:	4770      	bx	lr

08006d6e <__retarget_lock_acquire_recursive>:
 8006d6e:	4770      	bx	lr

08006d70 <__retarget_lock_release_recursive>:
 8006d70:	4770      	bx	lr

08006d72 <quorem>:
 8006d72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d76:	6903      	ldr	r3, [r0, #16]
 8006d78:	690c      	ldr	r4, [r1, #16]
 8006d7a:	42a3      	cmp	r3, r4
 8006d7c:	4607      	mov	r7, r0
 8006d7e:	db7e      	blt.n	8006e7e <quorem+0x10c>
 8006d80:	3c01      	subs	r4, #1
 8006d82:	f101 0814 	add.w	r8, r1, #20
 8006d86:	00a3      	lsls	r3, r4, #2
 8006d88:	f100 0514 	add.w	r5, r0, #20
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d92:	9301      	str	r3, [sp, #4]
 8006d94:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006da4:	fbb2 f6f3 	udiv	r6, r2, r3
 8006da8:	d32e      	bcc.n	8006e08 <quorem+0x96>
 8006daa:	f04f 0a00 	mov.w	sl, #0
 8006dae:	46c4      	mov	ip, r8
 8006db0:	46ae      	mov	lr, r5
 8006db2:	46d3      	mov	fp, sl
 8006db4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006db8:	b298      	uxth	r0, r3
 8006dba:	fb06 a000 	mla	r0, r6, r0, sl
 8006dbe:	0c02      	lsrs	r2, r0, #16
 8006dc0:	0c1b      	lsrs	r3, r3, #16
 8006dc2:	fb06 2303 	mla	r3, r6, r3, r2
 8006dc6:	f8de 2000 	ldr.w	r2, [lr]
 8006dca:	b280      	uxth	r0, r0
 8006dcc:	b292      	uxth	r2, r2
 8006dce:	1a12      	subs	r2, r2, r0
 8006dd0:	445a      	add	r2, fp
 8006dd2:	f8de 0000 	ldr.w	r0, [lr]
 8006dd6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006de0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006de4:	b292      	uxth	r2, r2
 8006de6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006dea:	45e1      	cmp	r9, ip
 8006dec:	f84e 2b04 	str.w	r2, [lr], #4
 8006df0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006df4:	d2de      	bcs.n	8006db4 <quorem+0x42>
 8006df6:	9b00      	ldr	r3, [sp, #0]
 8006df8:	58eb      	ldr	r3, [r5, r3]
 8006dfa:	b92b      	cbnz	r3, 8006e08 <quorem+0x96>
 8006dfc:	9b01      	ldr	r3, [sp, #4]
 8006dfe:	3b04      	subs	r3, #4
 8006e00:	429d      	cmp	r5, r3
 8006e02:	461a      	mov	r2, r3
 8006e04:	d32f      	bcc.n	8006e66 <quorem+0xf4>
 8006e06:	613c      	str	r4, [r7, #16]
 8006e08:	4638      	mov	r0, r7
 8006e0a:	f001 f8c5 	bl	8007f98 <__mcmp>
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	db25      	blt.n	8006e5e <quorem+0xec>
 8006e12:	4629      	mov	r1, r5
 8006e14:	2000      	movs	r0, #0
 8006e16:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e1a:	f8d1 c000 	ldr.w	ip, [r1]
 8006e1e:	fa1f fe82 	uxth.w	lr, r2
 8006e22:	fa1f f38c 	uxth.w	r3, ip
 8006e26:	eba3 030e 	sub.w	r3, r3, lr
 8006e2a:	4403      	add	r3, r0
 8006e2c:	0c12      	lsrs	r2, r2, #16
 8006e2e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006e32:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e3c:	45c1      	cmp	r9, r8
 8006e3e:	f841 3b04 	str.w	r3, [r1], #4
 8006e42:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006e46:	d2e6      	bcs.n	8006e16 <quorem+0xa4>
 8006e48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e50:	b922      	cbnz	r2, 8006e5c <quorem+0xea>
 8006e52:	3b04      	subs	r3, #4
 8006e54:	429d      	cmp	r5, r3
 8006e56:	461a      	mov	r2, r3
 8006e58:	d30b      	bcc.n	8006e72 <quorem+0x100>
 8006e5a:	613c      	str	r4, [r7, #16]
 8006e5c:	3601      	adds	r6, #1
 8006e5e:	4630      	mov	r0, r6
 8006e60:	b003      	add	sp, #12
 8006e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e66:	6812      	ldr	r2, [r2, #0]
 8006e68:	3b04      	subs	r3, #4
 8006e6a:	2a00      	cmp	r2, #0
 8006e6c:	d1cb      	bne.n	8006e06 <quorem+0x94>
 8006e6e:	3c01      	subs	r4, #1
 8006e70:	e7c6      	b.n	8006e00 <quorem+0x8e>
 8006e72:	6812      	ldr	r2, [r2, #0]
 8006e74:	3b04      	subs	r3, #4
 8006e76:	2a00      	cmp	r2, #0
 8006e78:	d1ef      	bne.n	8006e5a <quorem+0xe8>
 8006e7a:	3c01      	subs	r4, #1
 8006e7c:	e7ea      	b.n	8006e54 <quorem+0xe2>
 8006e7e:	2000      	movs	r0, #0
 8006e80:	e7ee      	b.n	8006e60 <quorem+0xee>
 8006e82:	0000      	movs	r0, r0
 8006e84:	0000      	movs	r0, r0
	...

08006e88 <_dtoa_r>:
 8006e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e8c:	69c7      	ldr	r7, [r0, #28]
 8006e8e:	b099      	sub	sp, #100	@ 0x64
 8006e90:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006e94:	ec55 4b10 	vmov	r4, r5, d0
 8006e98:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006e9a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006e9c:	4683      	mov	fp, r0
 8006e9e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006ea0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006ea2:	b97f      	cbnz	r7, 8006ec4 <_dtoa_r+0x3c>
 8006ea4:	2010      	movs	r0, #16
 8006ea6:	f7ff f821 	bl	8005eec <malloc>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	f8cb 001c 	str.w	r0, [fp, #28]
 8006eb0:	b920      	cbnz	r0, 8006ebc <_dtoa_r+0x34>
 8006eb2:	4ba7      	ldr	r3, [pc, #668]	@ (8007150 <_dtoa_r+0x2c8>)
 8006eb4:	21ef      	movs	r1, #239	@ 0xef
 8006eb6:	48a7      	ldr	r0, [pc, #668]	@ (8007154 <_dtoa_r+0x2cc>)
 8006eb8:	f001 fba2 	bl	8008600 <__assert_func>
 8006ebc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006ec0:	6007      	str	r7, [r0, #0]
 8006ec2:	60c7      	str	r7, [r0, #12]
 8006ec4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ec8:	6819      	ldr	r1, [r3, #0]
 8006eca:	b159      	cbz	r1, 8006ee4 <_dtoa_r+0x5c>
 8006ecc:	685a      	ldr	r2, [r3, #4]
 8006ece:	604a      	str	r2, [r1, #4]
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	4093      	lsls	r3, r2
 8006ed4:	608b      	str	r3, [r1, #8]
 8006ed6:	4658      	mov	r0, fp
 8006ed8:	f000 fe24 	bl	8007b24 <_Bfree>
 8006edc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	601a      	str	r2, [r3, #0]
 8006ee4:	1e2b      	subs	r3, r5, #0
 8006ee6:	bfb9      	ittee	lt
 8006ee8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006eec:	9303      	strlt	r3, [sp, #12]
 8006eee:	2300      	movge	r3, #0
 8006ef0:	6033      	strge	r3, [r6, #0]
 8006ef2:	9f03      	ldr	r7, [sp, #12]
 8006ef4:	4b98      	ldr	r3, [pc, #608]	@ (8007158 <_dtoa_r+0x2d0>)
 8006ef6:	bfbc      	itt	lt
 8006ef8:	2201      	movlt	r2, #1
 8006efa:	6032      	strlt	r2, [r6, #0]
 8006efc:	43bb      	bics	r3, r7
 8006efe:	d112      	bne.n	8006f26 <_dtoa_r+0x9e>
 8006f00:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006f02:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006f06:	6013      	str	r3, [r2, #0]
 8006f08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006f0c:	4323      	orrs	r3, r4
 8006f0e:	f000 854d 	beq.w	80079ac <_dtoa_r+0xb24>
 8006f12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f14:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800716c <_dtoa_r+0x2e4>
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 854f 	beq.w	80079bc <_dtoa_r+0xb34>
 8006f1e:	f10a 0303 	add.w	r3, sl, #3
 8006f22:	f000 bd49 	b.w	80079b8 <_dtoa_r+0xb30>
 8006f26:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	ec51 0b17 	vmov	r0, r1, d7
 8006f30:	2300      	movs	r3, #0
 8006f32:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006f36:	f7f9 fdcf 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f3a:	4680      	mov	r8, r0
 8006f3c:	b158      	cbz	r0, 8006f56 <_dtoa_r+0xce>
 8006f3e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006f40:	2301      	movs	r3, #1
 8006f42:	6013      	str	r3, [r2, #0]
 8006f44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f46:	b113      	cbz	r3, 8006f4e <_dtoa_r+0xc6>
 8006f48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006f4a:	4b84      	ldr	r3, [pc, #528]	@ (800715c <_dtoa_r+0x2d4>)
 8006f4c:	6013      	str	r3, [r2, #0]
 8006f4e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007170 <_dtoa_r+0x2e8>
 8006f52:	f000 bd33 	b.w	80079bc <_dtoa_r+0xb34>
 8006f56:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006f5a:	aa16      	add	r2, sp, #88	@ 0x58
 8006f5c:	a917      	add	r1, sp, #92	@ 0x5c
 8006f5e:	4658      	mov	r0, fp
 8006f60:	f001 f8ca 	bl	80080f8 <__d2b>
 8006f64:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006f68:	4681      	mov	r9, r0
 8006f6a:	2e00      	cmp	r6, #0
 8006f6c:	d077      	beq.n	800705e <_dtoa_r+0x1d6>
 8006f6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f70:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006f74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f7c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006f80:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006f84:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006f88:	4619      	mov	r1, r3
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	4b74      	ldr	r3, [pc, #464]	@ (8007160 <_dtoa_r+0x2d8>)
 8006f8e:	f7f9 f983 	bl	8000298 <__aeabi_dsub>
 8006f92:	a369      	add	r3, pc, #420	@ (adr r3, 8007138 <_dtoa_r+0x2b0>)
 8006f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f98:	f7f9 fb36 	bl	8000608 <__aeabi_dmul>
 8006f9c:	a368      	add	r3, pc, #416	@ (adr r3, 8007140 <_dtoa_r+0x2b8>)
 8006f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa2:	f7f9 f97b 	bl	800029c <__adddf3>
 8006fa6:	4604      	mov	r4, r0
 8006fa8:	4630      	mov	r0, r6
 8006faa:	460d      	mov	r5, r1
 8006fac:	f7f9 fac2 	bl	8000534 <__aeabi_i2d>
 8006fb0:	a365      	add	r3, pc, #404	@ (adr r3, 8007148 <_dtoa_r+0x2c0>)
 8006fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb6:	f7f9 fb27 	bl	8000608 <__aeabi_dmul>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	4629      	mov	r1, r5
 8006fc2:	f7f9 f96b 	bl	800029c <__adddf3>
 8006fc6:	4604      	mov	r4, r0
 8006fc8:	460d      	mov	r5, r1
 8006fca:	f7f9 fdcd 	bl	8000b68 <__aeabi_d2iz>
 8006fce:	2200      	movs	r2, #0
 8006fd0:	4607      	mov	r7, r0
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	4629      	mov	r1, r5
 8006fd8:	f7f9 fd88 	bl	8000aec <__aeabi_dcmplt>
 8006fdc:	b140      	cbz	r0, 8006ff0 <_dtoa_r+0x168>
 8006fde:	4638      	mov	r0, r7
 8006fe0:	f7f9 faa8 	bl	8000534 <__aeabi_i2d>
 8006fe4:	4622      	mov	r2, r4
 8006fe6:	462b      	mov	r3, r5
 8006fe8:	f7f9 fd76 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fec:	b900      	cbnz	r0, 8006ff0 <_dtoa_r+0x168>
 8006fee:	3f01      	subs	r7, #1
 8006ff0:	2f16      	cmp	r7, #22
 8006ff2:	d851      	bhi.n	8007098 <_dtoa_r+0x210>
 8006ff4:	4b5b      	ldr	r3, [pc, #364]	@ (8007164 <_dtoa_r+0x2dc>)
 8006ff6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007002:	f7f9 fd73 	bl	8000aec <__aeabi_dcmplt>
 8007006:	2800      	cmp	r0, #0
 8007008:	d048      	beq.n	800709c <_dtoa_r+0x214>
 800700a:	3f01      	subs	r7, #1
 800700c:	2300      	movs	r3, #0
 800700e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007010:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007012:	1b9b      	subs	r3, r3, r6
 8007014:	1e5a      	subs	r2, r3, #1
 8007016:	bf44      	itt	mi
 8007018:	f1c3 0801 	rsbmi	r8, r3, #1
 800701c:	2300      	movmi	r3, #0
 800701e:	9208      	str	r2, [sp, #32]
 8007020:	bf54      	ite	pl
 8007022:	f04f 0800 	movpl.w	r8, #0
 8007026:	9308      	strmi	r3, [sp, #32]
 8007028:	2f00      	cmp	r7, #0
 800702a:	db39      	blt.n	80070a0 <_dtoa_r+0x218>
 800702c:	9b08      	ldr	r3, [sp, #32]
 800702e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007030:	443b      	add	r3, r7
 8007032:	9308      	str	r3, [sp, #32]
 8007034:	2300      	movs	r3, #0
 8007036:	930a      	str	r3, [sp, #40]	@ 0x28
 8007038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800703a:	2b09      	cmp	r3, #9
 800703c:	d864      	bhi.n	8007108 <_dtoa_r+0x280>
 800703e:	2b05      	cmp	r3, #5
 8007040:	bfc4      	itt	gt
 8007042:	3b04      	subgt	r3, #4
 8007044:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007048:	f1a3 0302 	sub.w	r3, r3, #2
 800704c:	bfcc      	ite	gt
 800704e:	2400      	movgt	r4, #0
 8007050:	2401      	movle	r4, #1
 8007052:	2b03      	cmp	r3, #3
 8007054:	d863      	bhi.n	800711e <_dtoa_r+0x296>
 8007056:	e8df f003 	tbb	[pc, r3]
 800705a:	372a      	.short	0x372a
 800705c:	5535      	.short	0x5535
 800705e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007062:	441e      	add	r6, r3
 8007064:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007068:	2b20      	cmp	r3, #32
 800706a:	bfc1      	itttt	gt
 800706c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007070:	409f      	lslgt	r7, r3
 8007072:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007076:	fa24 f303 	lsrgt.w	r3, r4, r3
 800707a:	bfd6      	itet	le
 800707c:	f1c3 0320 	rsble	r3, r3, #32
 8007080:	ea47 0003 	orrgt.w	r0, r7, r3
 8007084:	fa04 f003 	lslle.w	r0, r4, r3
 8007088:	f7f9 fa44 	bl	8000514 <__aeabi_ui2d>
 800708c:	2201      	movs	r2, #1
 800708e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007092:	3e01      	subs	r6, #1
 8007094:	9214      	str	r2, [sp, #80]	@ 0x50
 8007096:	e777      	b.n	8006f88 <_dtoa_r+0x100>
 8007098:	2301      	movs	r3, #1
 800709a:	e7b8      	b.n	800700e <_dtoa_r+0x186>
 800709c:	9012      	str	r0, [sp, #72]	@ 0x48
 800709e:	e7b7      	b.n	8007010 <_dtoa_r+0x188>
 80070a0:	427b      	negs	r3, r7
 80070a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80070a4:	2300      	movs	r3, #0
 80070a6:	eba8 0807 	sub.w	r8, r8, r7
 80070aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80070ac:	e7c4      	b.n	8007038 <_dtoa_r+0x1b0>
 80070ae:	2300      	movs	r3, #0
 80070b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	dc35      	bgt.n	8007124 <_dtoa_r+0x29c>
 80070b8:	2301      	movs	r3, #1
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	9307      	str	r3, [sp, #28]
 80070be:	461a      	mov	r2, r3
 80070c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80070c2:	e00b      	b.n	80070dc <_dtoa_r+0x254>
 80070c4:	2301      	movs	r3, #1
 80070c6:	e7f3      	b.n	80070b0 <_dtoa_r+0x228>
 80070c8:	2300      	movs	r3, #0
 80070ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070ce:	18fb      	adds	r3, r7, r3
 80070d0:	9300      	str	r3, [sp, #0]
 80070d2:	3301      	adds	r3, #1
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	9307      	str	r3, [sp, #28]
 80070d8:	bfb8      	it	lt
 80070da:	2301      	movlt	r3, #1
 80070dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80070e0:	2100      	movs	r1, #0
 80070e2:	2204      	movs	r2, #4
 80070e4:	f102 0514 	add.w	r5, r2, #20
 80070e8:	429d      	cmp	r5, r3
 80070ea:	d91f      	bls.n	800712c <_dtoa_r+0x2a4>
 80070ec:	6041      	str	r1, [r0, #4]
 80070ee:	4658      	mov	r0, fp
 80070f0:	f000 fcd8 	bl	8007aa4 <_Balloc>
 80070f4:	4682      	mov	sl, r0
 80070f6:	2800      	cmp	r0, #0
 80070f8:	d13c      	bne.n	8007174 <_dtoa_r+0x2ec>
 80070fa:	4b1b      	ldr	r3, [pc, #108]	@ (8007168 <_dtoa_r+0x2e0>)
 80070fc:	4602      	mov	r2, r0
 80070fe:	f240 11af 	movw	r1, #431	@ 0x1af
 8007102:	e6d8      	b.n	8006eb6 <_dtoa_r+0x2e>
 8007104:	2301      	movs	r3, #1
 8007106:	e7e0      	b.n	80070ca <_dtoa_r+0x242>
 8007108:	2401      	movs	r4, #1
 800710a:	2300      	movs	r3, #0
 800710c:	9309      	str	r3, [sp, #36]	@ 0x24
 800710e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007110:	f04f 33ff 	mov.w	r3, #4294967295
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	9307      	str	r3, [sp, #28]
 8007118:	2200      	movs	r2, #0
 800711a:	2312      	movs	r3, #18
 800711c:	e7d0      	b.n	80070c0 <_dtoa_r+0x238>
 800711e:	2301      	movs	r3, #1
 8007120:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007122:	e7f5      	b.n	8007110 <_dtoa_r+0x288>
 8007124:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	9307      	str	r3, [sp, #28]
 800712a:	e7d7      	b.n	80070dc <_dtoa_r+0x254>
 800712c:	3101      	adds	r1, #1
 800712e:	0052      	lsls	r2, r2, #1
 8007130:	e7d8      	b.n	80070e4 <_dtoa_r+0x25c>
 8007132:	bf00      	nop
 8007134:	f3af 8000 	nop.w
 8007138:	636f4361 	.word	0x636f4361
 800713c:	3fd287a7 	.word	0x3fd287a7
 8007140:	8b60c8b3 	.word	0x8b60c8b3
 8007144:	3fc68a28 	.word	0x3fc68a28
 8007148:	509f79fb 	.word	0x509f79fb
 800714c:	3fd34413 	.word	0x3fd34413
 8007150:	08008d5d 	.word	0x08008d5d
 8007154:	08008d74 	.word	0x08008d74
 8007158:	7ff00000 	.word	0x7ff00000
 800715c:	08008d2d 	.word	0x08008d2d
 8007160:	3ff80000 	.word	0x3ff80000
 8007164:	08008e70 	.word	0x08008e70
 8007168:	08008dcc 	.word	0x08008dcc
 800716c:	08008d59 	.word	0x08008d59
 8007170:	08008d2c 	.word	0x08008d2c
 8007174:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007178:	6018      	str	r0, [r3, #0]
 800717a:	9b07      	ldr	r3, [sp, #28]
 800717c:	2b0e      	cmp	r3, #14
 800717e:	f200 80a4 	bhi.w	80072ca <_dtoa_r+0x442>
 8007182:	2c00      	cmp	r4, #0
 8007184:	f000 80a1 	beq.w	80072ca <_dtoa_r+0x442>
 8007188:	2f00      	cmp	r7, #0
 800718a:	dd33      	ble.n	80071f4 <_dtoa_r+0x36c>
 800718c:	4bad      	ldr	r3, [pc, #692]	@ (8007444 <_dtoa_r+0x5bc>)
 800718e:	f007 020f 	and.w	r2, r7, #15
 8007192:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007196:	ed93 7b00 	vldr	d7, [r3]
 800719a:	05f8      	lsls	r0, r7, #23
 800719c:	ed8d 7b04 	vstr	d7, [sp, #16]
 80071a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80071a4:	d516      	bpl.n	80071d4 <_dtoa_r+0x34c>
 80071a6:	4ba8      	ldr	r3, [pc, #672]	@ (8007448 <_dtoa_r+0x5c0>)
 80071a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80071b0:	f7f9 fb54 	bl	800085c <__aeabi_ddiv>
 80071b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071b8:	f004 040f 	and.w	r4, r4, #15
 80071bc:	2603      	movs	r6, #3
 80071be:	4da2      	ldr	r5, [pc, #648]	@ (8007448 <_dtoa_r+0x5c0>)
 80071c0:	b954      	cbnz	r4, 80071d8 <_dtoa_r+0x350>
 80071c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071ca:	f7f9 fb47 	bl	800085c <__aeabi_ddiv>
 80071ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071d2:	e028      	b.n	8007226 <_dtoa_r+0x39e>
 80071d4:	2602      	movs	r6, #2
 80071d6:	e7f2      	b.n	80071be <_dtoa_r+0x336>
 80071d8:	07e1      	lsls	r1, r4, #31
 80071da:	d508      	bpl.n	80071ee <_dtoa_r+0x366>
 80071dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80071e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80071e4:	f7f9 fa10 	bl	8000608 <__aeabi_dmul>
 80071e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071ec:	3601      	adds	r6, #1
 80071ee:	1064      	asrs	r4, r4, #1
 80071f0:	3508      	adds	r5, #8
 80071f2:	e7e5      	b.n	80071c0 <_dtoa_r+0x338>
 80071f4:	f000 80d2 	beq.w	800739c <_dtoa_r+0x514>
 80071f8:	427c      	negs	r4, r7
 80071fa:	4b92      	ldr	r3, [pc, #584]	@ (8007444 <_dtoa_r+0x5bc>)
 80071fc:	4d92      	ldr	r5, [pc, #584]	@ (8007448 <_dtoa_r+0x5c0>)
 80071fe:	f004 020f 	and.w	r2, r4, #15
 8007202:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800720e:	f7f9 f9fb 	bl	8000608 <__aeabi_dmul>
 8007212:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007216:	1124      	asrs	r4, r4, #4
 8007218:	2300      	movs	r3, #0
 800721a:	2602      	movs	r6, #2
 800721c:	2c00      	cmp	r4, #0
 800721e:	f040 80b2 	bne.w	8007386 <_dtoa_r+0x4fe>
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1d3      	bne.n	80071ce <_dtoa_r+0x346>
 8007226:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007228:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800722c:	2b00      	cmp	r3, #0
 800722e:	f000 80b7 	beq.w	80073a0 <_dtoa_r+0x518>
 8007232:	4b86      	ldr	r3, [pc, #536]	@ (800744c <_dtoa_r+0x5c4>)
 8007234:	2200      	movs	r2, #0
 8007236:	4620      	mov	r0, r4
 8007238:	4629      	mov	r1, r5
 800723a:	f7f9 fc57 	bl	8000aec <__aeabi_dcmplt>
 800723e:	2800      	cmp	r0, #0
 8007240:	f000 80ae 	beq.w	80073a0 <_dtoa_r+0x518>
 8007244:	9b07      	ldr	r3, [sp, #28]
 8007246:	2b00      	cmp	r3, #0
 8007248:	f000 80aa 	beq.w	80073a0 <_dtoa_r+0x518>
 800724c:	9b00      	ldr	r3, [sp, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	dd37      	ble.n	80072c2 <_dtoa_r+0x43a>
 8007252:	1e7b      	subs	r3, r7, #1
 8007254:	9304      	str	r3, [sp, #16]
 8007256:	4620      	mov	r0, r4
 8007258:	4b7d      	ldr	r3, [pc, #500]	@ (8007450 <_dtoa_r+0x5c8>)
 800725a:	2200      	movs	r2, #0
 800725c:	4629      	mov	r1, r5
 800725e:	f7f9 f9d3 	bl	8000608 <__aeabi_dmul>
 8007262:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007266:	9c00      	ldr	r4, [sp, #0]
 8007268:	3601      	adds	r6, #1
 800726a:	4630      	mov	r0, r6
 800726c:	f7f9 f962 	bl	8000534 <__aeabi_i2d>
 8007270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007274:	f7f9 f9c8 	bl	8000608 <__aeabi_dmul>
 8007278:	4b76      	ldr	r3, [pc, #472]	@ (8007454 <_dtoa_r+0x5cc>)
 800727a:	2200      	movs	r2, #0
 800727c:	f7f9 f80e 	bl	800029c <__adddf3>
 8007280:	4605      	mov	r5, r0
 8007282:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007286:	2c00      	cmp	r4, #0
 8007288:	f040 808d 	bne.w	80073a6 <_dtoa_r+0x51e>
 800728c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007290:	4b71      	ldr	r3, [pc, #452]	@ (8007458 <_dtoa_r+0x5d0>)
 8007292:	2200      	movs	r2, #0
 8007294:	f7f9 f800 	bl	8000298 <__aeabi_dsub>
 8007298:	4602      	mov	r2, r0
 800729a:	460b      	mov	r3, r1
 800729c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80072a0:	462a      	mov	r2, r5
 80072a2:	4633      	mov	r3, r6
 80072a4:	f7f9 fc40 	bl	8000b28 <__aeabi_dcmpgt>
 80072a8:	2800      	cmp	r0, #0
 80072aa:	f040 828b 	bne.w	80077c4 <_dtoa_r+0x93c>
 80072ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072b2:	462a      	mov	r2, r5
 80072b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80072b8:	f7f9 fc18 	bl	8000aec <__aeabi_dcmplt>
 80072bc:	2800      	cmp	r0, #0
 80072be:	f040 8128 	bne.w	8007512 <_dtoa_r+0x68a>
 80072c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80072c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80072ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f2c0 815a 	blt.w	8007586 <_dtoa_r+0x6fe>
 80072d2:	2f0e      	cmp	r7, #14
 80072d4:	f300 8157 	bgt.w	8007586 <_dtoa_r+0x6fe>
 80072d8:	4b5a      	ldr	r3, [pc, #360]	@ (8007444 <_dtoa_r+0x5bc>)
 80072da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80072de:	ed93 7b00 	vldr	d7, [r3]
 80072e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	ed8d 7b00 	vstr	d7, [sp]
 80072ea:	da03      	bge.n	80072f4 <_dtoa_r+0x46c>
 80072ec:	9b07      	ldr	r3, [sp, #28]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	f340 8101 	ble.w	80074f6 <_dtoa_r+0x66e>
 80072f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80072f8:	4656      	mov	r6, sl
 80072fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072fe:	4620      	mov	r0, r4
 8007300:	4629      	mov	r1, r5
 8007302:	f7f9 faab 	bl	800085c <__aeabi_ddiv>
 8007306:	f7f9 fc2f 	bl	8000b68 <__aeabi_d2iz>
 800730a:	4680      	mov	r8, r0
 800730c:	f7f9 f912 	bl	8000534 <__aeabi_i2d>
 8007310:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007314:	f7f9 f978 	bl	8000608 <__aeabi_dmul>
 8007318:	4602      	mov	r2, r0
 800731a:	460b      	mov	r3, r1
 800731c:	4620      	mov	r0, r4
 800731e:	4629      	mov	r1, r5
 8007320:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007324:	f7f8 ffb8 	bl	8000298 <__aeabi_dsub>
 8007328:	f806 4b01 	strb.w	r4, [r6], #1
 800732c:	9d07      	ldr	r5, [sp, #28]
 800732e:	eba6 040a 	sub.w	r4, r6, sl
 8007332:	42a5      	cmp	r5, r4
 8007334:	4602      	mov	r2, r0
 8007336:	460b      	mov	r3, r1
 8007338:	f040 8117 	bne.w	800756a <_dtoa_r+0x6e2>
 800733c:	f7f8 ffae 	bl	800029c <__adddf3>
 8007340:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007344:	4604      	mov	r4, r0
 8007346:	460d      	mov	r5, r1
 8007348:	f7f9 fbee 	bl	8000b28 <__aeabi_dcmpgt>
 800734c:	2800      	cmp	r0, #0
 800734e:	f040 80f9 	bne.w	8007544 <_dtoa_r+0x6bc>
 8007352:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007356:	4620      	mov	r0, r4
 8007358:	4629      	mov	r1, r5
 800735a:	f7f9 fbbd 	bl	8000ad8 <__aeabi_dcmpeq>
 800735e:	b118      	cbz	r0, 8007368 <_dtoa_r+0x4e0>
 8007360:	f018 0f01 	tst.w	r8, #1
 8007364:	f040 80ee 	bne.w	8007544 <_dtoa_r+0x6bc>
 8007368:	4649      	mov	r1, r9
 800736a:	4658      	mov	r0, fp
 800736c:	f000 fbda 	bl	8007b24 <_Bfree>
 8007370:	2300      	movs	r3, #0
 8007372:	7033      	strb	r3, [r6, #0]
 8007374:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007376:	3701      	adds	r7, #1
 8007378:	601f      	str	r7, [r3, #0]
 800737a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 831d 	beq.w	80079bc <_dtoa_r+0xb34>
 8007382:	601e      	str	r6, [r3, #0]
 8007384:	e31a      	b.n	80079bc <_dtoa_r+0xb34>
 8007386:	07e2      	lsls	r2, r4, #31
 8007388:	d505      	bpl.n	8007396 <_dtoa_r+0x50e>
 800738a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800738e:	f7f9 f93b 	bl	8000608 <__aeabi_dmul>
 8007392:	3601      	adds	r6, #1
 8007394:	2301      	movs	r3, #1
 8007396:	1064      	asrs	r4, r4, #1
 8007398:	3508      	adds	r5, #8
 800739a:	e73f      	b.n	800721c <_dtoa_r+0x394>
 800739c:	2602      	movs	r6, #2
 800739e:	e742      	b.n	8007226 <_dtoa_r+0x39e>
 80073a0:	9c07      	ldr	r4, [sp, #28]
 80073a2:	9704      	str	r7, [sp, #16]
 80073a4:	e761      	b.n	800726a <_dtoa_r+0x3e2>
 80073a6:	4b27      	ldr	r3, [pc, #156]	@ (8007444 <_dtoa_r+0x5bc>)
 80073a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80073aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80073ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80073b2:	4454      	add	r4, sl
 80073b4:	2900      	cmp	r1, #0
 80073b6:	d053      	beq.n	8007460 <_dtoa_r+0x5d8>
 80073b8:	4928      	ldr	r1, [pc, #160]	@ (800745c <_dtoa_r+0x5d4>)
 80073ba:	2000      	movs	r0, #0
 80073bc:	f7f9 fa4e 	bl	800085c <__aeabi_ddiv>
 80073c0:	4633      	mov	r3, r6
 80073c2:	462a      	mov	r2, r5
 80073c4:	f7f8 ff68 	bl	8000298 <__aeabi_dsub>
 80073c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80073cc:	4656      	mov	r6, sl
 80073ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073d2:	f7f9 fbc9 	bl	8000b68 <__aeabi_d2iz>
 80073d6:	4605      	mov	r5, r0
 80073d8:	f7f9 f8ac 	bl	8000534 <__aeabi_i2d>
 80073dc:	4602      	mov	r2, r0
 80073de:	460b      	mov	r3, r1
 80073e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073e4:	f7f8 ff58 	bl	8000298 <__aeabi_dsub>
 80073e8:	3530      	adds	r5, #48	@ 0x30
 80073ea:	4602      	mov	r2, r0
 80073ec:	460b      	mov	r3, r1
 80073ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073f2:	f806 5b01 	strb.w	r5, [r6], #1
 80073f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80073fa:	f7f9 fb77 	bl	8000aec <__aeabi_dcmplt>
 80073fe:	2800      	cmp	r0, #0
 8007400:	d171      	bne.n	80074e6 <_dtoa_r+0x65e>
 8007402:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007406:	4911      	ldr	r1, [pc, #68]	@ (800744c <_dtoa_r+0x5c4>)
 8007408:	2000      	movs	r0, #0
 800740a:	f7f8 ff45 	bl	8000298 <__aeabi_dsub>
 800740e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007412:	f7f9 fb6b 	bl	8000aec <__aeabi_dcmplt>
 8007416:	2800      	cmp	r0, #0
 8007418:	f040 8095 	bne.w	8007546 <_dtoa_r+0x6be>
 800741c:	42a6      	cmp	r6, r4
 800741e:	f43f af50 	beq.w	80072c2 <_dtoa_r+0x43a>
 8007422:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007426:	4b0a      	ldr	r3, [pc, #40]	@ (8007450 <_dtoa_r+0x5c8>)
 8007428:	2200      	movs	r2, #0
 800742a:	f7f9 f8ed 	bl	8000608 <__aeabi_dmul>
 800742e:	4b08      	ldr	r3, [pc, #32]	@ (8007450 <_dtoa_r+0x5c8>)
 8007430:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007434:	2200      	movs	r2, #0
 8007436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800743a:	f7f9 f8e5 	bl	8000608 <__aeabi_dmul>
 800743e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007442:	e7c4      	b.n	80073ce <_dtoa_r+0x546>
 8007444:	08008e70 	.word	0x08008e70
 8007448:	08008e48 	.word	0x08008e48
 800744c:	3ff00000 	.word	0x3ff00000
 8007450:	40240000 	.word	0x40240000
 8007454:	401c0000 	.word	0x401c0000
 8007458:	40140000 	.word	0x40140000
 800745c:	3fe00000 	.word	0x3fe00000
 8007460:	4631      	mov	r1, r6
 8007462:	4628      	mov	r0, r5
 8007464:	f7f9 f8d0 	bl	8000608 <__aeabi_dmul>
 8007468:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800746c:	9415      	str	r4, [sp, #84]	@ 0x54
 800746e:	4656      	mov	r6, sl
 8007470:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007474:	f7f9 fb78 	bl	8000b68 <__aeabi_d2iz>
 8007478:	4605      	mov	r5, r0
 800747a:	f7f9 f85b 	bl	8000534 <__aeabi_i2d>
 800747e:	4602      	mov	r2, r0
 8007480:	460b      	mov	r3, r1
 8007482:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007486:	f7f8 ff07 	bl	8000298 <__aeabi_dsub>
 800748a:	3530      	adds	r5, #48	@ 0x30
 800748c:	f806 5b01 	strb.w	r5, [r6], #1
 8007490:	4602      	mov	r2, r0
 8007492:	460b      	mov	r3, r1
 8007494:	42a6      	cmp	r6, r4
 8007496:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800749a:	f04f 0200 	mov.w	r2, #0
 800749e:	d124      	bne.n	80074ea <_dtoa_r+0x662>
 80074a0:	4bac      	ldr	r3, [pc, #688]	@ (8007754 <_dtoa_r+0x8cc>)
 80074a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80074a6:	f7f8 fef9 	bl	800029c <__adddf3>
 80074aa:	4602      	mov	r2, r0
 80074ac:	460b      	mov	r3, r1
 80074ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074b2:	f7f9 fb39 	bl	8000b28 <__aeabi_dcmpgt>
 80074b6:	2800      	cmp	r0, #0
 80074b8:	d145      	bne.n	8007546 <_dtoa_r+0x6be>
 80074ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80074be:	49a5      	ldr	r1, [pc, #660]	@ (8007754 <_dtoa_r+0x8cc>)
 80074c0:	2000      	movs	r0, #0
 80074c2:	f7f8 fee9 	bl	8000298 <__aeabi_dsub>
 80074c6:	4602      	mov	r2, r0
 80074c8:	460b      	mov	r3, r1
 80074ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074ce:	f7f9 fb0d 	bl	8000aec <__aeabi_dcmplt>
 80074d2:	2800      	cmp	r0, #0
 80074d4:	f43f aef5 	beq.w	80072c2 <_dtoa_r+0x43a>
 80074d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80074da:	1e73      	subs	r3, r6, #1
 80074dc:	9315      	str	r3, [sp, #84]	@ 0x54
 80074de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80074e2:	2b30      	cmp	r3, #48	@ 0x30
 80074e4:	d0f8      	beq.n	80074d8 <_dtoa_r+0x650>
 80074e6:	9f04      	ldr	r7, [sp, #16]
 80074e8:	e73e      	b.n	8007368 <_dtoa_r+0x4e0>
 80074ea:	4b9b      	ldr	r3, [pc, #620]	@ (8007758 <_dtoa_r+0x8d0>)
 80074ec:	f7f9 f88c 	bl	8000608 <__aeabi_dmul>
 80074f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074f4:	e7bc      	b.n	8007470 <_dtoa_r+0x5e8>
 80074f6:	d10c      	bne.n	8007512 <_dtoa_r+0x68a>
 80074f8:	4b98      	ldr	r3, [pc, #608]	@ (800775c <_dtoa_r+0x8d4>)
 80074fa:	2200      	movs	r2, #0
 80074fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007500:	f7f9 f882 	bl	8000608 <__aeabi_dmul>
 8007504:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007508:	f7f9 fb04 	bl	8000b14 <__aeabi_dcmpge>
 800750c:	2800      	cmp	r0, #0
 800750e:	f000 8157 	beq.w	80077c0 <_dtoa_r+0x938>
 8007512:	2400      	movs	r4, #0
 8007514:	4625      	mov	r5, r4
 8007516:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007518:	43db      	mvns	r3, r3
 800751a:	9304      	str	r3, [sp, #16]
 800751c:	4656      	mov	r6, sl
 800751e:	2700      	movs	r7, #0
 8007520:	4621      	mov	r1, r4
 8007522:	4658      	mov	r0, fp
 8007524:	f000 fafe 	bl	8007b24 <_Bfree>
 8007528:	2d00      	cmp	r5, #0
 800752a:	d0dc      	beq.n	80074e6 <_dtoa_r+0x65e>
 800752c:	b12f      	cbz	r7, 800753a <_dtoa_r+0x6b2>
 800752e:	42af      	cmp	r7, r5
 8007530:	d003      	beq.n	800753a <_dtoa_r+0x6b2>
 8007532:	4639      	mov	r1, r7
 8007534:	4658      	mov	r0, fp
 8007536:	f000 faf5 	bl	8007b24 <_Bfree>
 800753a:	4629      	mov	r1, r5
 800753c:	4658      	mov	r0, fp
 800753e:	f000 faf1 	bl	8007b24 <_Bfree>
 8007542:	e7d0      	b.n	80074e6 <_dtoa_r+0x65e>
 8007544:	9704      	str	r7, [sp, #16]
 8007546:	4633      	mov	r3, r6
 8007548:	461e      	mov	r6, r3
 800754a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800754e:	2a39      	cmp	r2, #57	@ 0x39
 8007550:	d107      	bne.n	8007562 <_dtoa_r+0x6da>
 8007552:	459a      	cmp	sl, r3
 8007554:	d1f8      	bne.n	8007548 <_dtoa_r+0x6c0>
 8007556:	9a04      	ldr	r2, [sp, #16]
 8007558:	3201      	adds	r2, #1
 800755a:	9204      	str	r2, [sp, #16]
 800755c:	2230      	movs	r2, #48	@ 0x30
 800755e:	f88a 2000 	strb.w	r2, [sl]
 8007562:	781a      	ldrb	r2, [r3, #0]
 8007564:	3201      	adds	r2, #1
 8007566:	701a      	strb	r2, [r3, #0]
 8007568:	e7bd      	b.n	80074e6 <_dtoa_r+0x65e>
 800756a:	4b7b      	ldr	r3, [pc, #492]	@ (8007758 <_dtoa_r+0x8d0>)
 800756c:	2200      	movs	r2, #0
 800756e:	f7f9 f84b 	bl	8000608 <__aeabi_dmul>
 8007572:	2200      	movs	r2, #0
 8007574:	2300      	movs	r3, #0
 8007576:	4604      	mov	r4, r0
 8007578:	460d      	mov	r5, r1
 800757a:	f7f9 faad 	bl	8000ad8 <__aeabi_dcmpeq>
 800757e:	2800      	cmp	r0, #0
 8007580:	f43f aebb 	beq.w	80072fa <_dtoa_r+0x472>
 8007584:	e6f0      	b.n	8007368 <_dtoa_r+0x4e0>
 8007586:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007588:	2a00      	cmp	r2, #0
 800758a:	f000 80db 	beq.w	8007744 <_dtoa_r+0x8bc>
 800758e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007590:	2a01      	cmp	r2, #1
 8007592:	f300 80bf 	bgt.w	8007714 <_dtoa_r+0x88c>
 8007596:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007598:	2a00      	cmp	r2, #0
 800759a:	f000 80b7 	beq.w	800770c <_dtoa_r+0x884>
 800759e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80075a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80075a4:	4646      	mov	r6, r8
 80075a6:	9a08      	ldr	r2, [sp, #32]
 80075a8:	2101      	movs	r1, #1
 80075aa:	441a      	add	r2, r3
 80075ac:	4658      	mov	r0, fp
 80075ae:	4498      	add	r8, r3
 80075b0:	9208      	str	r2, [sp, #32]
 80075b2:	f000 fb6b 	bl	8007c8c <__i2b>
 80075b6:	4605      	mov	r5, r0
 80075b8:	b15e      	cbz	r6, 80075d2 <_dtoa_r+0x74a>
 80075ba:	9b08      	ldr	r3, [sp, #32]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	dd08      	ble.n	80075d2 <_dtoa_r+0x74a>
 80075c0:	42b3      	cmp	r3, r6
 80075c2:	9a08      	ldr	r2, [sp, #32]
 80075c4:	bfa8      	it	ge
 80075c6:	4633      	movge	r3, r6
 80075c8:	eba8 0803 	sub.w	r8, r8, r3
 80075cc:	1af6      	subs	r6, r6, r3
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	9308      	str	r3, [sp, #32]
 80075d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075d4:	b1f3      	cbz	r3, 8007614 <_dtoa_r+0x78c>
 80075d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f000 80b7 	beq.w	800774c <_dtoa_r+0x8c4>
 80075de:	b18c      	cbz	r4, 8007604 <_dtoa_r+0x77c>
 80075e0:	4629      	mov	r1, r5
 80075e2:	4622      	mov	r2, r4
 80075e4:	4658      	mov	r0, fp
 80075e6:	f000 fc11 	bl	8007e0c <__pow5mult>
 80075ea:	464a      	mov	r2, r9
 80075ec:	4601      	mov	r1, r0
 80075ee:	4605      	mov	r5, r0
 80075f0:	4658      	mov	r0, fp
 80075f2:	f000 fb61 	bl	8007cb8 <__multiply>
 80075f6:	4649      	mov	r1, r9
 80075f8:	9004      	str	r0, [sp, #16]
 80075fa:	4658      	mov	r0, fp
 80075fc:	f000 fa92 	bl	8007b24 <_Bfree>
 8007600:	9b04      	ldr	r3, [sp, #16]
 8007602:	4699      	mov	r9, r3
 8007604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007606:	1b1a      	subs	r2, r3, r4
 8007608:	d004      	beq.n	8007614 <_dtoa_r+0x78c>
 800760a:	4649      	mov	r1, r9
 800760c:	4658      	mov	r0, fp
 800760e:	f000 fbfd 	bl	8007e0c <__pow5mult>
 8007612:	4681      	mov	r9, r0
 8007614:	2101      	movs	r1, #1
 8007616:	4658      	mov	r0, fp
 8007618:	f000 fb38 	bl	8007c8c <__i2b>
 800761c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800761e:	4604      	mov	r4, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	f000 81cf 	beq.w	80079c4 <_dtoa_r+0xb3c>
 8007626:	461a      	mov	r2, r3
 8007628:	4601      	mov	r1, r0
 800762a:	4658      	mov	r0, fp
 800762c:	f000 fbee 	bl	8007e0c <__pow5mult>
 8007630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007632:	2b01      	cmp	r3, #1
 8007634:	4604      	mov	r4, r0
 8007636:	f300 8095 	bgt.w	8007764 <_dtoa_r+0x8dc>
 800763a:	9b02      	ldr	r3, [sp, #8]
 800763c:	2b00      	cmp	r3, #0
 800763e:	f040 8087 	bne.w	8007750 <_dtoa_r+0x8c8>
 8007642:	9b03      	ldr	r3, [sp, #12]
 8007644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007648:	2b00      	cmp	r3, #0
 800764a:	f040 8089 	bne.w	8007760 <_dtoa_r+0x8d8>
 800764e:	9b03      	ldr	r3, [sp, #12]
 8007650:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007654:	0d1b      	lsrs	r3, r3, #20
 8007656:	051b      	lsls	r3, r3, #20
 8007658:	b12b      	cbz	r3, 8007666 <_dtoa_r+0x7de>
 800765a:	9b08      	ldr	r3, [sp, #32]
 800765c:	3301      	adds	r3, #1
 800765e:	9308      	str	r3, [sp, #32]
 8007660:	f108 0801 	add.w	r8, r8, #1
 8007664:	2301      	movs	r3, #1
 8007666:	930a      	str	r3, [sp, #40]	@ 0x28
 8007668:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800766a:	2b00      	cmp	r3, #0
 800766c:	f000 81b0 	beq.w	80079d0 <_dtoa_r+0xb48>
 8007670:	6923      	ldr	r3, [r4, #16]
 8007672:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007676:	6918      	ldr	r0, [r3, #16]
 8007678:	f000 fabc 	bl	8007bf4 <__hi0bits>
 800767c:	f1c0 0020 	rsb	r0, r0, #32
 8007680:	9b08      	ldr	r3, [sp, #32]
 8007682:	4418      	add	r0, r3
 8007684:	f010 001f 	ands.w	r0, r0, #31
 8007688:	d077      	beq.n	800777a <_dtoa_r+0x8f2>
 800768a:	f1c0 0320 	rsb	r3, r0, #32
 800768e:	2b04      	cmp	r3, #4
 8007690:	dd6b      	ble.n	800776a <_dtoa_r+0x8e2>
 8007692:	9b08      	ldr	r3, [sp, #32]
 8007694:	f1c0 001c 	rsb	r0, r0, #28
 8007698:	4403      	add	r3, r0
 800769a:	4480      	add	r8, r0
 800769c:	4406      	add	r6, r0
 800769e:	9308      	str	r3, [sp, #32]
 80076a0:	f1b8 0f00 	cmp.w	r8, #0
 80076a4:	dd05      	ble.n	80076b2 <_dtoa_r+0x82a>
 80076a6:	4649      	mov	r1, r9
 80076a8:	4642      	mov	r2, r8
 80076aa:	4658      	mov	r0, fp
 80076ac:	f000 fc08 	bl	8007ec0 <__lshift>
 80076b0:	4681      	mov	r9, r0
 80076b2:	9b08      	ldr	r3, [sp, #32]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	dd05      	ble.n	80076c4 <_dtoa_r+0x83c>
 80076b8:	4621      	mov	r1, r4
 80076ba:	461a      	mov	r2, r3
 80076bc:	4658      	mov	r0, fp
 80076be:	f000 fbff 	bl	8007ec0 <__lshift>
 80076c2:	4604      	mov	r4, r0
 80076c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d059      	beq.n	800777e <_dtoa_r+0x8f6>
 80076ca:	4621      	mov	r1, r4
 80076cc:	4648      	mov	r0, r9
 80076ce:	f000 fc63 	bl	8007f98 <__mcmp>
 80076d2:	2800      	cmp	r0, #0
 80076d4:	da53      	bge.n	800777e <_dtoa_r+0x8f6>
 80076d6:	1e7b      	subs	r3, r7, #1
 80076d8:	9304      	str	r3, [sp, #16]
 80076da:	4649      	mov	r1, r9
 80076dc:	2300      	movs	r3, #0
 80076de:	220a      	movs	r2, #10
 80076e0:	4658      	mov	r0, fp
 80076e2:	f000 fa41 	bl	8007b68 <__multadd>
 80076e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076e8:	4681      	mov	r9, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f000 8172 	beq.w	80079d4 <_dtoa_r+0xb4c>
 80076f0:	2300      	movs	r3, #0
 80076f2:	4629      	mov	r1, r5
 80076f4:	220a      	movs	r2, #10
 80076f6:	4658      	mov	r0, fp
 80076f8:	f000 fa36 	bl	8007b68 <__multadd>
 80076fc:	9b00      	ldr	r3, [sp, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	4605      	mov	r5, r0
 8007702:	dc67      	bgt.n	80077d4 <_dtoa_r+0x94c>
 8007704:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007706:	2b02      	cmp	r3, #2
 8007708:	dc41      	bgt.n	800778e <_dtoa_r+0x906>
 800770a:	e063      	b.n	80077d4 <_dtoa_r+0x94c>
 800770c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800770e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007712:	e746      	b.n	80075a2 <_dtoa_r+0x71a>
 8007714:	9b07      	ldr	r3, [sp, #28]
 8007716:	1e5c      	subs	r4, r3, #1
 8007718:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800771a:	42a3      	cmp	r3, r4
 800771c:	bfbf      	itttt	lt
 800771e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007720:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007722:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007724:	1ae3      	sublt	r3, r4, r3
 8007726:	bfb4      	ite	lt
 8007728:	18d2      	addlt	r2, r2, r3
 800772a:	1b1c      	subge	r4, r3, r4
 800772c:	9b07      	ldr	r3, [sp, #28]
 800772e:	bfbc      	itt	lt
 8007730:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007732:	2400      	movlt	r4, #0
 8007734:	2b00      	cmp	r3, #0
 8007736:	bfb5      	itete	lt
 8007738:	eba8 0603 	sublt.w	r6, r8, r3
 800773c:	9b07      	ldrge	r3, [sp, #28]
 800773e:	2300      	movlt	r3, #0
 8007740:	4646      	movge	r6, r8
 8007742:	e730      	b.n	80075a6 <_dtoa_r+0x71e>
 8007744:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007746:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007748:	4646      	mov	r6, r8
 800774a:	e735      	b.n	80075b8 <_dtoa_r+0x730>
 800774c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800774e:	e75c      	b.n	800760a <_dtoa_r+0x782>
 8007750:	2300      	movs	r3, #0
 8007752:	e788      	b.n	8007666 <_dtoa_r+0x7de>
 8007754:	3fe00000 	.word	0x3fe00000
 8007758:	40240000 	.word	0x40240000
 800775c:	40140000 	.word	0x40140000
 8007760:	9b02      	ldr	r3, [sp, #8]
 8007762:	e780      	b.n	8007666 <_dtoa_r+0x7de>
 8007764:	2300      	movs	r3, #0
 8007766:	930a      	str	r3, [sp, #40]	@ 0x28
 8007768:	e782      	b.n	8007670 <_dtoa_r+0x7e8>
 800776a:	d099      	beq.n	80076a0 <_dtoa_r+0x818>
 800776c:	9a08      	ldr	r2, [sp, #32]
 800776e:	331c      	adds	r3, #28
 8007770:	441a      	add	r2, r3
 8007772:	4498      	add	r8, r3
 8007774:	441e      	add	r6, r3
 8007776:	9208      	str	r2, [sp, #32]
 8007778:	e792      	b.n	80076a0 <_dtoa_r+0x818>
 800777a:	4603      	mov	r3, r0
 800777c:	e7f6      	b.n	800776c <_dtoa_r+0x8e4>
 800777e:	9b07      	ldr	r3, [sp, #28]
 8007780:	9704      	str	r7, [sp, #16]
 8007782:	2b00      	cmp	r3, #0
 8007784:	dc20      	bgt.n	80077c8 <_dtoa_r+0x940>
 8007786:	9300      	str	r3, [sp, #0]
 8007788:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800778a:	2b02      	cmp	r3, #2
 800778c:	dd1e      	ble.n	80077cc <_dtoa_r+0x944>
 800778e:	9b00      	ldr	r3, [sp, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	f47f aec0 	bne.w	8007516 <_dtoa_r+0x68e>
 8007796:	4621      	mov	r1, r4
 8007798:	2205      	movs	r2, #5
 800779a:	4658      	mov	r0, fp
 800779c:	f000 f9e4 	bl	8007b68 <__multadd>
 80077a0:	4601      	mov	r1, r0
 80077a2:	4604      	mov	r4, r0
 80077a4:	4648      	mov	r0, r9
 80077a6:	f000 fbf7 	bl	8007f98 <__mcmp>
 80077aa:	2800      	cmp	r0, #0
 80077ac:	f77f aeb3 	ble.w	8007516 <_dtoa_r+0x68e>
 80077b0:	4656      	mov	r6, sl
 80077b2:	2331      	movs	r3, #49	@ 0x31
 80077b4:	f806 3b01 	strb.w	r3, [r6], #1
 80077b8:	9b04      	ldr	r3, [sp, #16]
 80077ba:	3301      	adds	r3, #1
 80077bc:	9304      	str	r3, [sp, #16]
 80077be:	e6ae      	b.n	800751e <_dtoa_r+0x696>
 80077c0:	9c07      	ldr	r4, [sp, #28]
 80077c2:	9704      	str	r7, [sp, #16]
 80077c4:	4625      	mov	r5, r4
 80077c6:	e7f3      	b.n	80077b0 <_dtoa_r+0x928>
 80077c8:	9b07      	ldr	r3, [sp, #28]
 80077ca:	9300      	str	r3, [sp, #0]
 80077cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	f000 8104 	beq.w	80079dc <_dtoa_r+0xb54>
 80077d4:	2e00      	cmp	r6, #0
 80077d6:	dd05      	ble.n	80077e4 <_dtoa_r+0x95c>
 80077d8:	4629      	mov	r1, r5
 80077da:	4632      	mov	r2, r6
 80077dc:	4658      	mov	r0, fp
 80077de:	f000 fb6f 	bl	8007ec0 <__lshift>
 80077e2:	4605      	mov	r5, r0
 80077e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d05a      	beq.n	80078a0 <_dtoa_r+0xa18>
 80077ea:	6869      	ldr	r1, [r5, #4]
 80077ec:	4658      	mov	r0, fp
 80077ee:	f000 f959 	bl	8007aa4 <_Balloc>
 80077f2:	4606      	mov	r6, r0
 80077f4:	b928      	cbnz	r0, 8007802 <_dtoa_r+0x97a>
 80077f6:	4b84      	ldr	r3, [pc, #528]	@ (8007a08 <_dtoa_r+0xb80>)
 80077f8:	4602      	mov	r2, r0
 80077fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80077fe:	f7ff bb5a 	b.w	8006eb6 <_dtoa_r+0x2e>
 8007802:	692a      	ldr	r2, [r5, #16]
 8007804:	3202      	adds	r2, #2
 8007806:	0092      	lsls	r2, r2, #2
 8007808:	f105 010c 	add.w	r1, r5, #12
 800780c:	300c      	adds	r0, #12
 800780e:	f000 fee9 	bl	80085e4 <memcpy>
 8007812:	2201      	movs	r2, #1
 8007814:	4631      	mov	r1, r6
 8007816:	4658      	mov	r0, fp
 8007818:	f000 fb52 	bl	8007ec0 <__lshift>
 800781c:	f10a 0301 	add.w	r3, sl, #1
 8007820:	9307      	str	r3, [sp, #28]
 8007822:	9b00      	ldr	r3, [sp, #0]
 8007824:	4453      	add	r3, sl
 8007826:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007828:	9b02      	ldr	r3, [sp, #8]
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	462f      	mov	r7, r5
 8007830:	930a      	str	r3, [sp, #40]	@ 0x28
 8007832:	4605      	mov	r5, r0
 8007834:	9b07      	ldr	r3, [sp, #28]
 8007836:	4621      	mov	r1, r4
 8007838:	3b01      	subs	r3, #1
 800783a:	4648      	mov	r0, r9
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	f7ff fa98 	bl	8006d72 <quorem>
 8007842:	4639      	mov	r1, r7
 8007844:	9002      	str	r0, [sp, #8]
 8007846:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800784a:	4648      	mov	r0, r9
 800784c:	f000 fba4 	bl	8007f98 <__mcmp>
 8007850:	462a      	mov	r2, r5
 8007852:	9008      	str	r0, [sp, #32]
 8007854:	4621      	mov	r1, r4
 8007856:	4658      	mov	r0, fp
 8007858:	f000 fbba 	bl	8007fd0 <__mdiff>
 800785c:	68c2      	ldr	r2, [r0, #12]
 800785e:	4606      	mov	r6, r0
 8007860:	bb02      	cbnz	r2, 80078a4 <_dtoa_r+0xa1c>
 8007862:	4601      	mov	r1, r0
 8007864:	4648      	mov	r0, r9
 8007866:	f000 fb97 	bl	8007f98 <__mcmp>
 800786a:	4602      	mov	r2, r0
 800786c:	4631      	mov	r1, r6
 800786e:	4658      	mov	r0, fp
 8007870:	920e      	str	r2, [sp, #56]	@ 0x38
 8007872:	f000 f957 	bl	8007b24 <_Bfree>
 8007876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007878:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800787a:	9e07      	ldr	r6, [sp, #28]
 800787c:	ea43 0102 	orr.w	r1, r3, r2
 8007880:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007882:	4319      	orrs	r1, r3
 8007884:	d110      	bne.n	80078a8 <_dtoa_r+0xa20>
 8007886:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800788a:	d029      	beq.n	80078e0 <_dtoa_r+0xa58>
 800788c:	9b08      	ldr	r3, [sp, #32]
 800788e:	2b00      	cmp	r3, #0
 8007890:	dd02      	ble.n	8007898 <_dtoa_r+0xa10>
 8007892:	9b02      	ldr	r3, [sp, #8]
 8007894:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007898:	9b00      	ldr	r3, [sp, #0]
 800789a:	f883 8000 	strb.w	r8, [r3]
 800789e:	e63f      	b.n	8007520 <_dtoa_r+0x698>
 80078a0:	4628      	mov	r0, r5
 80078a2:	e7bb      	b.n	800781c <_dtoa_r+0x994>
 80078a4:	2201      	movs	r2, #1
 80078a6:	e7e1      	b.n	800786c <_dtoa_r+0x9e4>
 80078a8:	9b08      	ldr	r3, [sp, #32]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	db04      	blt.n	80078b8 <_dtoa_r+0xa30>
 80078ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80078b0:	430b      	orrs	r3, r1
 80078b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80078b4:	430b      	orrs	r3, r1
 80078b6:	d120      	bne.n	80078fa <_dtoa_r+0xa72>
 80078b8:	2a00      	cmp	r2, #0
 80078ba:	dded      	ble.n	8007898 <_dtoa_r+0xa10>
 80078bc:	4649      	mov	r1, r9
 80078be:	2201      	movs	r2, #1
 80078c0:	4658      	mov	r0, fp
 80078c2:	f000 fafd 	bl	8007ec0 <__lshift>
 80078c6:	4621      	mov	r1, r4
 80078c8:	4681      	mov	r9, r0
 80078ca:	f000 fb65 	bl	8007f98 <__mcmp>
 80078ce:	2800      	cmp	r0, #0
 80078d0:	dc03      	bgt.n	80078da <_dtoa_r+0xa52>
 80078d2:	d1e1      	bne.n	8007898 <_dtoa_r+0xa10>
 80078d4:	f018 0f01 	tst.w	r8, #1
 80078d8:	d0de      	beq.n	8007898 <_dtoa_r+0xa10>
 80078da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80078de:	d1d8      	bne.n	8007892 <_dtoa_r+0xa0a>
 80078e0:	9a00      	ldr	r2, [sp, #0]
 80078e2:	2339      	movs	r3, #57	@ 0x39
 80078e4:	7013      	strb	r3, [r2, #0]
 80078e6:	4633      	mov	r3, r6
 80078e8:	461e      	mov	r6, r3
 80078ea:	3b01      	subs	r3, #1
 80078ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80078f0:	2a39      	cmp	r2, #57	@ 0x39
 80078f2:	d052      	beq.n	800799a <_dtoa_r+0xb12>
 80078f4:	3201      	adds	r2, #1
 80078f6:	701a      	strb	r2, [r3, #0]
 80078f8:	e612      	b.n	8007520 <_dtoa_r+0x698>
 80078fa:	2a00      	cmp	r2, #0
 80078fc:	dd07      	ble.n	800790e <_dtoa_r+0xa86>
 80078fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007902:	d0ed      	beq.n	80078e0 <_dtoa_r+0xa58>
 8007904:	9a00      	ldr	r2, [sp, #0]
 8007906:	f108 0301 	add.w	r3, r8, #1
 800790a:	7013      	strb	r3, [r2, #0]
 800790c:	e608      	b.n	8007520 <_dtoa_r+0x698>
 800790e:	9b07      	ldr	r3, [sp, #28]
 8007910:	9a07      	ldr	r2, [sp, #28]
 8007912:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007916:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007918:	4293      	cmp	r3, r2
 800791a:	d028      	beq.n	800796e <_dtoa_r+0xae6>
 800791c:	4649      	mov	r1, r9
 800791e:	2300      	movs	r3, #0
 8007920:	220a      	movs	r2, #10
 8007922:	4658      	mov	r0, fp
 8007924:	f000 f920 	bl	8007b68 <__multadd>
 8007928:	42af      	cmp	r7, r5
 800792a:	4681      	mov	r9, r0
 800792c:	f04f 0300 	mov.w	r3, #0
 8007930:	f04f 020a 	mov.w	r2, #10
 8007934:	4639      	mov	r1, r7
 8007936:	4658      	mov	r0, fp
 8007938:	d107      	bne.n	800794a <_dtoa_r+0xac2>
 800793a:	f000 f915 	bl	8007b68 <__multadd>
 800793e:	4607      	mov	r7, r0
 8007940:	4605      	mov	r5, r0
 8007942:	9b07      	ldr	r3, [sp, #28]
 8007944:	3301      	adds	r3, #1
 8007946:	9307      	str	r3, [sp, #28]
 8007948:	e774      	b.n	8007834 <_dtoa_r+0x9ac>
 800794a:	f000 f90d 	bl	8007b68 <__multadd>
 800794e:	4629      	mov	r1, r5
 8007950:	4607      	mov	r7, r0
 8007952:	2300      	movs	r3, #0
 8007954:	220a      	movs	r2, #10
 8007956:	4658      	mov	r0, fp
 8007958:	f000 f906 	bl	8007b68 <__multadd>
 800795c:	4605      	mov	r5, r0
 800795e:	e7f0      	b.n	8007942 <_dtoa_r+0xaba>
 8007960:	9b00      	ldr	r3, [sp, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	bfcc      	ite	gt
 8007966:	461e      	movgt	r6, r3
 8007968:	2601      	movle	r6, #1
 800796a:	4456      	add	r6, sl
 800796c:	2700      	movs	r7, #0
 800796e:	4649      	mov	r1, r9
 8007970:	2201      	movs	r2, #1
 8007972:	4658      	mov	r0, fp
 8007974:	f000 faa4 	bl	8007ec0 <__lshift>
 8007978:	4621      	mov	r1, r4
 800797a:	4681      	mov	r9, r0
 800797c:	f000 fb0c 	bl	8007f98 <__mcmp>
 8007980:	2800      	cmp	r0, #0
 8007982:	dcb0      	bgt.n	80078e6 <_dtoa_r+0xa5e>
 8007984:	d102      	bne.n	800798c <_dtoa_r+0xb04>
 8007986:	f018 0f01 	tst.w	r8, #1
 800798a:	d1ac      	bne.n	80078e6 <_dtoa_r+0xa5e>
 800798c:	4633      	mov	r3, r6
 800798e:	461e      	mov	r6, r3
 8007990:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007994:	2a30      	cmp	r2, #48	@ 0x30
 8007996:	d0fa      	beq.n	800798e <_dtoa_r+0xb06>
 8007998:	e5c2      	b.n	8007520 <_dtoa_r+0x698>
 800799a:	459a      	cmp	sl, r3
 800799c:	d1a4      	bne.n	80078e8 <_dtoa_r+0xa60>
 800799e:	9b04      	ldr	r3, [sp, #16]
 80079a0:	3301      	adds	r3, #1
 80079a2:	9304      	str	r3, [sp, #16]
 80079a4:	2331      	movs	r3, #49	@ 0x31
 80079a6:	f88a 3000 	strb.w	r3, [sl]
 80079aa:	e5b9      	b.n	8007520 <_dtoa_r+0x698>
 80079ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80079ae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007a0c <_dtoa_r+0xb84>
 80079b2:	b11b      	cbz	r3, 80079bc <_dtoa_r+0xb34>
 80079b4:	f10a 0308 	add.w	r3, sl, #8
 80079b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80079ba:	6013      	str	r3, [r2, #0]
 80079bc:	4650      	mov	r0, sl
 80079be:	b019      	add	sp, #100	@ 0x64
 80079c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	f77f ae37 	ble.w	800763a <_dtoa_r+0x7b2>
 80079cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80079d0:	2001      	movs	r0, #1
 80079d2:	e655      	b.n	8007680 <_dtoa_r+0x7f8>
 80079d4:	9b00      	ldr	r3, [sp, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f77f aed6 	ble.w	8007788 <_dtoa_r+0x900>
 80079dc:	4656      	mov	r6, sl
 80079de:	4621      	mov	r1, r4
 80079e0:	4648      	mov	r0, r9
 80079e2:	f7ff f9c6 	bl	8006d72 <quorem>
 80079e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80079ea:	f806 8b01 	strb.w	r8, [r6], #1
 80079ee:	9b00      	ldr	r3, [sp, #0]
 80079f0:	eba6 020a 	sub.w	r2, r6, sl
 80079f4:	4293      	cmp	r3, r2
 80079f6:	ddb3      	ble.n	8007960 <_dtoa_r+0xad8>
 80079f8:	4649      	mov	r1, r9
 80079fa:	2300      	movs	r3, #0
 80079fc:	220a      	movs	r2, #10
 80079fe:	4658      	mov	r0, fp
 8007a00:	f000 f8b2 	bl	8007b68 <__multadd>
 8007a04:	4681      	mov	r9, r0
 8007a06:	e7ea      	b.n	80079de <_dtoa_r+0xb56>
 8007a08:	08008dcc 	.word	0x08008dcc
 8007a0c:	08008d50 	.word	0x08008d50

08007a10 <_free_r>:
 8007a10:	b538      	push	{r3, r4, r5, lr}
 8007a12:	4605      	mov	r5, r0
 8007a14:	2900      	cmp	r1, #0
 8007a16:	d041      	beq.n	8007a9c <_free_r+0x8c>
 8007a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a1c:	1f0c      	subs	r4, r1, #4
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	bfb8      	it	lt
 8007a22:	18e4      	addlt	r4, r4, r3
 8007a24:	f7fe fb14 	bl	8006050 <__malloc_lock>
 8007a28:	4a1d      	ldr	r2, [pc, #116]	@ (8007aa0 <_free_r+0x90>)
 8007a2a:	6813      	ldr	r3, [r2, #0]
 8007a2c:	b933      	cbnz	r3, 8007a3c <_free_r+0x2c>
 8007a2e:	6063      	str	r3, [r4, #4]
 8007a30:	6014      	str	r4, [r2, #0]
 8007a32:	4628      	mov	r0, r5
 8007a34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a38:	f7fe bb10 	b.w	800605c <__malloc_unlock>
 8007a3c:	42a3      	cmp	r3, r4
 8007a3e:	d908      	bls.n	8007a52 <_free_r+0x42>
 8007a40:	6820      	ldr	r0, [r4, #0]
 8007a42:	1821      	adds	r1, r4, r0
 8007a44:	428b      	cmp	r3, r1
 8007a46:	bf01      	itttt	eq
 8007a48:	6819      	ldreq	r1, [r3, #0]
 8007a4a:	685b      	ldreq	r3, [r3, #4]
 8007a4c:	1809      	addeq	r1, r1, r0
 8007a4e:	6021      	streq	r1, [r4, #0]
 8007a50:	e7ed      	b.n	8007a2e <_free_r+0x1e>
 8007a52:	461a      	mov	r2, r3
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	b10b      	cbz	r3, 8007a5c <_free_r+0x4c>
 8007a58:	42a3      	cmp	r3, r4
 8007a5a:	d9fa      	bls.n	8007a52 <_free_r+0x42>
 8007a5c:	6811      	ldr	r1, [r2, #0]
 8007a5e:	1850      	adds	r0, r2, r1
 8007a60:	42a0      	cmp	r0, r4
 8007a62:	d10b      	bne.n	8007a7c <_free_r+0x6c>
 8007a64:	6820      	ldr	r0, [r4, #0]
 8007a66:	4401      	add	r1, r0
 8007a68:	1850      	adds	r0, r2, r1
 8007a6a:	4283      	cmp	r3, r0
 8007a6c:	6011      	str	r1, [r2, #0]
 8007a6e:	d1e0      	bne.n	8007a32 <_free_r+0x22>
 8007a70:	6818      	ldr	r0, [r3, #0]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	6053      	str	r3, [r2, #4]
 8007a76:	4408      	add	r0, r1
 8007a78:	6010      	str	r0, [r2, #0]
 8007a7a:	e7da      	b.n	8007a32 <_free_r+0x22>
 8007a7c:	d902      	bls.n	8007a84 <_free_r+0x74>
 8007a7e:	230c      	movs	r3, #12
 8007a80:	602b      	str	r3, [r5, #0]
 8007a82:	e7d6      	b.n	8007a32 <_free_r+0x22>
 8007a84:	6820      	ldr	r0, [r4, #0]
 8007a86:	1821      	adds	r1, r4, r0
 8007a88:	428b      	cmp	r3, r1
 8007a8a:	bf04      	itt	eq
 8007a8c:	6819      	ldreq	r1, [r3, #0]
 8007a8e:	685b      	ldreq	r3, [r3, #4]
 8007a90:	6063      	str	r3, [r4, #4]
 8007a92:	bf04      	itt	eq
 8007a94:	1809      	addeq	r1, r1, r0
 8007a96:	6021      	streq	r1, [r4, #0]
 8007a98:	6054      	str	r4, [r2, #4]
 8007a9a:	e7ca      	b.n	8007a32 <_free_r+0x22>
 8007a9c:	bd38      	pop	{r3, r4, r5, pc}
 8007a9e:	bf00      	nop
 8007aa0:	200003a4 	.word	0x200003a4

08007aa4 <_Balloc>:
 8007aa4:	b570      	push	{r4, r5, r6, lr}
 8007aa6:	69c6      	ldr	r6, [r0, #28]
 8007aa8:	4604      	mov	r4, r0
 8007aaa:	460d      	mov	r5, r1
 8007aac:	b976      	cbnz	r6, 8007acc <_Balloc+0x28>
 8007aae:	2010      	movs	r0, #16
 8007ab0:	f7fe fa1c 	bl	8005eec <malloc>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	61e0      	str	r0, [r4, #28]
 8007ab8:	b920      	cbnz	r0, 8007ac4 <_Balloc+0x20>
 8007aba:	4b18      	ldr	r3, [pc, #96]	@ (8007b1c <_Balloc+0x78>)
 8007abc:	4818      	ldr	r0, [pc, #96]	@ (8007b20 <_Balloc+0x7c>)
 8007abe:	216b      	movs	r1, #107	@ 0x6b
 8007ac0:	f000 fd9e 	bl	8008600 <__assert_func>
 8007ac4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ac8:	6006      	str	r6, [r0, #0]
 8007aca:	60c6      	str	r6, [r0, #12]
 8007acc:	69e6      	ldr	r6, [r4, #28]
 8007ace:	68f3      	ldr	r3, [r6, #12]
 8007ad0:	b183      	cbz	r3, 8007af4 <_Balloc+0x50>
 8007ad2:	69e3      	ldr	r3, [r4, #28]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ada:	b9b8      	cbnz	r0, 8007b0c <_Balloc+0x68>
 8007adc:	2101      	movs	r1, #1
 8007ade:	fa01 f605 	lsl.w	r6, r1, r5
 8007ae2:	1d72      	adds	r2, r6, #5
 8007ae4:	0092      	lsls	r2, r2, #2
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	f000 fda8 	bl	800863c <_calloc_r>
 8007aec:	b160      	cbz	r0, 8007b08 <_Balloc+0x64>
 8007aee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007af2:	e00e      	b.n	8007b12 <_Balloc+0x6e>
 8007af4:	2221      	movs	r2, #33	@ 0x21
 8007af6:	2104      	movs	r1, #4
 8007af8:	4620      	mov	r0, r4
 8007afa:	f000 fd9f 	bl	800863c <_calloc_r>
 8007afe:	69e3      	ldr	r3, [r4, #28]
 8007b00:	60f0      	str	r0, [r6, #12]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1e4      	bne.n	8007ad2 <_Balloc+0x2e>
 8007b08:	2000      	movs	r0, #0
 8007b0a:	bd70      	pop	{r4, r5, r6, pc}
 8007b0c:	6802      	ldr	r2, [r0, #0]
 8007b0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b12:	2300      	movs	r3, #0
 8007b14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b18:	e7f7      	b.n	8007b0a <_Balloc+0x66>
 8007b1a:	bf00      	nop
 8007b1c:	08008d5d 	.word	0x08008d5d
 8007b20:	08008ddd 	.word	0x08008ddd

08007b24 <_Bfree>:
 8007b24:	b570      	push	{r4, r5, r6, lr}
 8007b26:	69c6      	ldr	r6, [r0, #28]
 8007b28:	4605      	mov	r5, r0
 8007b2a:	460c      	mov	r4, r1
 8007b2c:	b976      	cbnz	r6, 8007b4c <_Bfree+0x28>
 8007b2e:	2010      	movs	r0, #16
 8007b30:	f7fe f9dc 	bl	8005eec <malloc>
 8007b34:	4602      	mov	r2, r0
 8007b36:	61e8      	str	r0, [r5, #28]
 8007b38:	b920      	cbnz	r0, 8007b44 <_Bfree+0x20>
 8007b3a:	4b09      	ldr	r3, [pc, #36]	@ (8007b60 <_Bfree+0x3c>)
 8007b3c:	4809      	ldr	r0, [pc, #36]	@ (8007b64 <_Bfree+0x40>)
 8007b3e:	218f      	movs	r1, #143	@ 0x8f
 8007b40:	f000 fd5e 	bl	8008600 <__assert_func>
 8007b44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b48:	6006      	str	r6, [r0, #0]
 8007b4a:	60c6      	str	r6, [r0, #12]
 8007b4c:	b13c      	cbz	r4, 8007b5e <_Bfree+0x3a>
 8007b4e:	69eb      	ldr	r3, [r5, #28]
 8007b50:	6862      	ldr	r2, [r4, #4]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b58:	6021      	str	r1, [r4, #0]
 8007b5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b5e:	bd70      	pop	{r4, r5, r6, pc}
 8007b60:	08008d5d 	.word	0x08008d5d
 8007b64:	08008ddd 	.word	0x08008ddd

08007b68 <__multadd>:
 8007b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b6c:	690d      	ldr	r5, [r1, #16]
 8007b6e:	4607      	mov	r7, r0
 8007b70:	460c      	mov	r4, r1
 8007b72:	461e      	mov	r6, r3
 8007b74:	f101 0c14 	add.w	ip, r1, #20
 8007b78:	2000      	movs	r0, #0
 8007b7a:	f8dc 3000 	ldr.w	r3, [ip]
 8007b7e:	b299      	uxth	r1, r3
 8007b80:	fb02 6101 	mla	r1, r2, r1, r6
 8007b84:	0c1e      	lsrs	r6, r3, #16
 8007b86:	0c0b      	lsrs	r3, r1, #16
 8007b88:	fb02 3306 	mla	r3, r2, r6, r3
 8007b8c:	b289      	uxth	r1, r1
 8007b8e:	3001      	adds	r0, #1
 8007b90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b94:	4285      	cmp	r5, r0
 8007b96:	f84c 1b04 	str.w	r1, [ip], #4
 8007b9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b9e:	dcec      	bgt.n	8007b7a <__multadd+0x12>
 8007ba0:	b30e      	cbz	r6, 8007be6 <__multadd+0x7e>
 8007ba2:	68a3      	ldr	r3, [r4, #8]
 8007ba4:	42ab      	cmp	r3, r5
 8007ba6:	dc19      	bgt.n	8007bdc <__multadd+0x74>
 8007ba8:	6861      	ldr	r1, [r4, #4]
 8007baa:	4638      	mov	r0, r7
 8007bac:	3101      	adds	r1, #1
 8007bae:	f7ff ff79 	bl	8007aa4 <_Balloc>
 8007bb2:	4680      	mov	r8, r0
 8007bb4:	b928      	cbnz	r0, 8007bc2 <__multadd+0x5a>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8007bec <__multadd+0x84>)
 8007bba:	480d      	ldr	r0, [pc, #52]	@ (8007bf0 <__multadd+0x88>)
 8007bbc:	21ba      	movs	r1, #186	@ 0xba
 8007bbe:	f000 fd1f 	bl	8008600 <__assert_func>
 8007bc2:	6922      	ldr	r2, [r4, #16]
 8007bc4:	3202      	adds	r2, #2
 8007bc6:	f104 010c 	add.w	r1, r4, #12
 8007bca:	0092      	lsls	r2, r2, #2
 8007bcc:	300c      	adds	r0, #12
 8007bce:	f000 fd09 	bl	80085e4 <memcpy>
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	4638      	mov	r0, r7
 8007bd6:	f7ff ffa5 	bl	8007b24 <_Bfree>
 8007bda:	4644      	mov	r4, r8
 8007bdc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007be0:	3501      	adds	r5, #1
 8007be2:	615e      	str	r6, [r3, #20]
 8007be4:	6125      	str	r5, [r4, #16]
 8007be6:	4620      	mov	r0, r4
 8007be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bec:	08008dcc 	.word	0x08008dcc
 8007bf0:	08008ddd 	.word	0x08008ddd

08007bf4 <__hi0bits>:
 8007bf4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	bf36      	itet	cc
 8007bfc:	0403      	lslcc	r3, r0, #16
 8007bfe:	2000      	movcs	r0, #0
 8007c00:	2010      	movcc	r0, #16
 8007c02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c06:	bf3c      	itt	cc
 8007c08:	021b      	lslcc	r3, r3, #8
 8007c0a:	3008      	addcc	r0, #8
 8007c0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c10:	bf3c      	itt	cc
 8007c12:	011b      	lslcc	r3, r3, #4
 8007c14:	3004      	addcc	r0, #4
 8007c16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c1a:	bf3c      	itt	cc
 8007c1c:	009b      	lslcc	r3, r3, #2
 8007c1e:	3002      	addcc	r0, #2
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	db05      	blt.n	8007c30 <__hi0bits+0x3c>
 8007c24:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007c28:	f100 0001 	add.w	r0, r0, #1
 8007c2c:	bf08      	it	eq
 8007c2e:	2020      	moveq	r0, #32
 8007c30:	4770      	bx	lr

08007c32 <__lo0bits>:
 8007c32:	6803      	ldr	r3, [r0, #0]
 8007c34:	4602      	mov	r2, r0
 8007c36:	f013 0007 	ands.w	r0, r3, #7
 8007c3a:	d00b      	beq.n	8007c54 <__lo0bits+0x22>
 8007c3c:	07d9      	lsls	r1, r3, #31
 8007c3e:	d421      	bmi.n	8007c84 <__lo0bits+0x52>
 8007c40:	0798      	lsls	r0, r3, #30
 8007c42:	bf49      	itett	mi
 8007c44:	085b      	lsrmi	r3, r3, #1
 8007c46:	089b      	lsrpl	r3, r3, #2
 8007c48:	2001      	movmi	r0, #1
 8007c4a:	6013      	strmi	r3, [r2, #0]
 8007c4c:	bf5c      	itt	pl
 8007c4e:	6013      	strpl	r3, [r2, #0]
 8007c50:	2002      	movpl	r0, #2
 8007c52:	4770      	bx	lr
 8007c54:	b299      	uxth	r1, r3
 8007c56:	b909      	cbnz	r1, 8007c5c <__lo0bits+0x2a>
 8007c58:	0c1b      	lsrs	r3, r3, #16
 8007c5a:	2010      	movs	r0, #16
 8007c5c:	b2d9      	uxtb	r1, r3
 8007c5e:	b909      	cbnz	r1, 8007c64 <__lo0bits+0x32>
 8007c60:	3008      	adds	r0, #8
 8007c62:	0a1b      	lsrs	r3, r3, #8
 8007c64:	0719      	lsls	r1, r3, #28
 8007c66:	bf04      	itt	eq
 8007c68:	091b      	lsreq	r3, r3, #4
 8007c6a:	3004      	addeq	r0, #4
 8007c6c:	0799      	lsls	r1, r3, #30
 8007c6e:	bf04      	itt	eq
 8007c70:	089b      	lsreq	r3, r3, #2
 8007c72:	3002      	addeq	r0, #2
 8007c74:	07d9      	lsls	r1, r3, #31
 8007c76:	d403      	bmi.n	8007c80 <__lo0bits+0x4e>
 8007c78:	085b      	lsrs	r3, r3, #1
 8007c7a:	f100 0001 	add.w	r0, r0, #1
 8007c7e:	d003      	beq.n	8007c88 <__lo0bits+0x56>
 8007c80:	6013      	str	r3, [r2, #0]
 8007c82:	4770      	bx	lr
 8007c84:	2000      	movs	r0, #0
 8007c86:	4770      	bx	lr
 8007c88:	2020      	movs	r0, #32
 8007c8a:	4770      	bx	lr

08007c8c <__i2b>:
 8007c8c:	b510      	push	{r4, lr}
 8007c8e:	460c      	mov	r4, r1
 8007c90:	2101      	movs	r1, #1
 8007c92:	f7ff ff07 	bl	8007aa4 <_Balloc>
 8007c96:	4602      	mov	r2, r0
 8007c98:	b928      	cbnz	r0, 8007ca6 <__i2b+0x1a>
 8007c9a:	4b05      	ldr	r3, [pc, #20]	@ (8007cb0 <__i2b+0x24>)
 8007c9c:	4805      	ldr	r0, [pc, #20]	@ (8007cb4 <__i2b+0x28>)
 8007c9e:	f240 1145 	movw	r1, #325	@ 0x145
 8007ca2:	f000 fcad 	bl	8008600 <__assert_func>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	6144      	str	r4, [r0, #20]
 8007caa:	6103      	str	r3, [r0, #16]
 8007cac:	bd10      	pop	{r4, pc}
 8007cae:	bf00      	nop
 8007cb0:	08008dcc 	.word	0x08008dcc
 8007cb4:	08008ddd 	.word	0x08008ddd

08007cb8 <__multiply>:
 8007cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cbc:	4614      	mov	r4, r2
 8007cbe:	690a      	ldr	r2, [r1, #16]
 8007cc0:	6923      	ldr	r3, [r4, #16]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	bfa8      	it	ge
 8007cc6:	4623      	movge	r3, r4
 8007cc8:	460f      	mov	r7, r1
 8007cca:	bfa4      	itt	ge
 8007ccc:	460c      	movge	r4, r1
 8007cce:	461f      	movge	r7, r3
 8007cd0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007cd4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007cd8:	68a3      	ldr	r3, [r4, #8]
 8007cda:	6861      	ldr	r1, [r4, #4]
 8007cdc:	eb0a 0609 	add.w	r6, sl, r9
 8007ce0:	42b3      	cmp	r3, r6
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	bfb8      	it	lt
 8007ce6:	3101      	addlt	r1, #1
 8007ce8:	f7ff fedc 	bl	8007aa4 <_Balloc>
 8007cec:	b930      	cbnz	r0, 8007cfc <__multiply+0x44>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	4b44      	ldr	r3, [pc, #272]	@ (8007e04 <__multiply+0x14c>)
 8007cf2:	4845      	ldr	r0, [pc, #276]	@ (8007e08 <__multiply+0x150>)
 8007cf4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007cf8:	f000 fc82 	bl	8008600 <__assert_func>
 8007cfc:	f100 0514 	add.w	r5, r0, #20
 8007d00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007d04:	462b      	mov	r3, r5
 8007d06:	2200      	movs	r2, #0
 8007d08:	4543      	cmp	r3, r8
 8007d0a:	d321      	bcc.n	8007d50 <__multiply+0x98>
 8007d0c:	f107 0114 	add.w	r1, r7, #20
 8007d10:	f104 0214 	add.w	r2, r4, #20
 8007d14:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007d18:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007d1c:	9302      	str	r3, [sp, #8]
 8007d1e:	1b13      	subs	r3, r2, r4
 8007d20:	3b15      	subs	r3, #21
 8007d22:	f023 0303 	bic.w	r3, r3, #3
 8007d26:	3304      	adds	r3, #4
 8007d28:	f104 0715 	add.w	r7, r4, #21
 8007d2c:	42ba      	cmp	r2, r7
 8007d2e:	bf38      	it	cc
 8007d30:	2304      	movcc	r3, #4
 8007d32:	9301      	str	r3, [sp, #4]
 8007d34:	9b02      	ldr	r3, [sp, #8]
 8007d36:	9103      	str	r1, [sp, #12]
 8007d38:	428b      	cmp	r3, r1
 8007d3a:	d80c      	bhi.n	8007d56 <__multiply+0x9e>
 8007d3c:	2e00      	cmp	r6, #0
 8007d3e:	dd03      	ble.n	8007d48 <__multiply+0x90>
 8007d40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d05b      	beq.n	8007e00 <__multiply+0x148>
 8007d48:	6106      	str	r6, [r0, #16]
 8007d4a:	b005      	add	sp, #20
 8007d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d50:	f843 2b04 	str.w	r2, [r3], #4
 8007d54:	e7d8      	b.n	8007d08 <__multiply+0x50>
 8007d56:	f8b1 a000 	ldrh.w	sl, [r1]
 8007d5a:	f1ba 0f00 	cmp.w	sl, #0
 8007d5e:	d024      	beq.n	8007daa <__multiply+0xf2>
 8007d60:	f104 0e14 	add.w	lr, r4, #20
 8007d64:	46a9      	mov	r9, r5
 8007d66:	f04f 0c00 	mov.w	ip, #0
 8007d6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007d6e:	f8d9 3000 	ldr.w	r3, [r9]
 8007d72:	fa1f fb87 	uxth.w	fp, r7
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	fb0a 330b 	mla	r3, sl, fp, r3
 8007d7c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007d80:	f8d9 7000 	ldr.w	r7, [r9]
 8007d84:	4463      	add	r3, ip
 8007d86:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007d8a:	fb0a c70b 	mla	r7, sl, fp, ip
 8007d8e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007d98:	4572      	cmp	r2, lr
 8007d9a:	f849 3b04 	str.w	r3, [r9], #4
 8007d9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007da2:	d8e2      	bhi.n	8007d6a <__multiply+0xb2>
 8007da4:	9b01      	ldr	r3, [sp, #4]
 8007da6:	f845 c003 	str.w	ip, [r5, r3]
 8007daa:	9b03      	ldr	r3, [sp, #12]
 8007dac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007db0:	3104      	adds	r1, #4
 8007db2:	f1b9 0f00 	cmp.w	r9, #0
 8007db6:	d021      	beq.n	8007dfc <__multiply+0x144>
 8007db8:	682b      	ldr	r3, [r5, #0]
 8007dba:	f104 0c14 	add.w	ip, r4, #20
 8007dbe:	46ae      	mov	lr, r5
 8007dc0:	f04f 0a00 	mov.w	sl, #0
 8007dc4:	f8bc b000 	ldrh.w	fp, [ip]
 8007dc8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007dcc:	fb09 770b 	mla	r7, r9, fp, r7
 8007dd0:	4457      	add	r7, sl
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007dd8:	f84e 3b04 	str.w	r3, [lr], #4
 8007ddc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007de0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007de4:	f8be 3000 	ldrh.w	r3, [lr]
 8007de8:	fb09 330a 	mla	r3, r9, sl, r3
 8007dec:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007df0:	4562      	cmp	r2, ip
 8007df2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007df6:	d8e5      	bhi.n	8007dc4 <__multiply+0x10c>
 8007df8:	9f01      	ldr	r7, [sp, #4]
 8007dfa:	51eb      	str	r3, [r5, r7]
 8007dfc:	3504      	adds	r5, #4
 8007dfe:	e799      	b.n	8007d34 <__multiply+0x7c>
 8007e00:	3e01      	subs	r6, #1
 8007e02:	e79b      	b.n	8007d3c <__multiply+0x84>
 8007e04:	08008dcc 	.word	0x08008dcc
 8007e08:	08008ddd 	.word	0x08008ddd

08007e0c <__pow5mult>:
 8007e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e10:	4615      	mov	r5, r2
 8007e12:	f012 0203 	ands.w	r2, r2, #3
 8007e16:	4607      	mov	r7, r0
 8007e18:	460e      	mov	r6, r1
 8007e1a:	d007      	beq.n	8007e2c <__pow5mult+0x20>
 8007e1c:	4c25      	ldr	r4, [pc, #148]	@ (8007eb4 <__pow5mult+0xa8>)
 8007e1e:	3a01      	subs	r2, #1
 8007e20:	2300      	movs	r3, #0
 8007e22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e26:	f7ff fe9f 	bl	8007b68 <__multadd>
 8007e2a:	4606      	mov	r6, r0
 8007e2c:	10ad      	asrs	r5, r5, #2
 8007e2e:	d03d      	beq.n	8007eac <__pow5mult+0xa0>
 8007e30:	69fc      	ldr	r4, [r7, #28]
 8007e32:	b97c      	cbnz	r4, 8007e54 <__pow5mult+0x48>
 8007e34:	2010      	movs	r0, #16
 8007e36:	f7fe f859 	bl	8005eec <malloc>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	61f8      	str	r0, [r7, #28]
 8007e3e:	b928      	cbnz	r0, 8007e4c <__pow5mult+0x40>
 8007e40:	4b1d      	ldr	r3, [pc, #116]	@ (8007eb8 <__pow5mult+0xac>)
 8007e42:	481e      	ldr	r0, [pc, #120]	@ (8007ebc <__pow5mult+0xb0>)
 8007e44:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007e48:	f000 fbda 	bl	8008600 <__assert_func>
 8007e4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e50:	6004      	str	r4, [r0, #0]
 8007e52:	60c4      	str	r4, [r0, #12]
 8007e54:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007e58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e5c:	b94c      	cbnz	r4, 8007e72 <__pow5mult+0x66>
 8007e5e:	f240 2171 	movw	r1, #625	@ 0x271
 8007e62:	4638      	mov	r0, r7
 8007e64:	f7ff ff12 	bl	8007c8c <__i2b>
 8007e68:	2300      	movs	r3, #0
 8007e6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e6e:	4604      	mov	r4, r0
 8007e70:	6003      	str	r3, [r0, #0]
 8007e72:	f04f 0900 	mov.w	r9, #0
 8007e76:	07eb      	lsls	r3, r5, #31
 8007e78:	d50a      	bpl.n	8007e90 <__pow5mult+0x84>
 8007e7a:	4631      	mov	r1, r6
 8007e7c:	4622      	mov	r2, r4
 8007e7e:	4638      	mov	r0, r7
 8007e80:	f7ff ff1a 	bl	8007cb8 <__multiply>
 8007e84:	4631      	mov	r1, r6
 8007e86:	4680      	mov	r8, r0
 8007e88:	4638      	mov	r0, r7
 8007e8a:	f7ff fe4b 	bl	8007b24 <_Bfree>
 8007e8e:	4646      	mov	r6, r8
 8007e90:	106d      	asrs	r5, r5, #1
 8007e92:	d00b      	beq.n	8007eac <__pow5mult+0xa0>
 8007e94:	6820      	ldr	r0, [r4, #0]
 8007e96:	b938      	cbnz	r0, 8007ea8 <__pow5mult+0x9c>
 8007e98:	4622      	mov	r2, r4
 8007e9a:	4621      	mov	r1, r4
 8007e9c:	4638      	mov	r0, r7
 8007e9e:	f7ff ff0b 	bl	8007cb8 <__multiply>
 8007ea2:	6020      	str	r0, [r4, #0]
 8007ea4:	f8c0 9000 	str.w	r9, [r0]
 8007ea8:	4604      	mov	r4, r0
 8007eaa:	e7e4      	b.n	8007e76 <__pow5mult+0x6a>
 8007eac:	4630      	mov	r0, r6
 8007eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eb2:	bf00      	nop
 8007eb4:	08008e38 	.word	0x08008e38
 8007eb8:	08008d5d 	.word	0x08008d5d
 8007ebc:	08008ddd 	.word	0x08008ddd

08007ec0 <__lshift>:
 8007ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ec4:	460c      	mov	r4, r1
 8007ec6:	6849      	ldr	r1, [r1, #4]
 8007ec8:	6923      	ldr	r3, [r4, #16]
 8007eca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ece:	68a3      	ldr	r3, [r4, #8]
 8007ed0:	4607      	mov	r7, r0
 8007ed2:	4691      	mov	r9, r2
 8007ed4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ed8:	f108 0601 	add.w	r6, r8, #1
 8007edc:	42b3      	cmp	r3, r6
 8007ede:	db0b      	blt.n	8007ef8 <__lshift+0x38>
 8007ee0:	4638      	mov	r0, r7
 8007ee2:	f7ff fddf 	bl	8007aa4 <_Balloc>
 8007ee6:	4605      	mov	r5, r0
 8007ee8:	b948      	cbnz	r0, 8007efe <__lshift+0x3e>
 8007eea:	4602      	mov	r2, r0
 8007eec:	4b28      	ldr	r3, [pc, #160]	@ (8007f90 <__lshift+0xd0>)
 8007eee:	4829      	ldr	r0, [pc, #164]	@ (8007f94 <__lshift+0xd4>)
 8007ef0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007ef4:	f000 fb84 	bl	8008600 <__assert_func>
 8007ef8:	3101      	adds	r1, #1
 8007efa:	005b      	lsls	r3, r3, #1
 8007efc:	e7ee      	b.n	8007edc <__lshift+0x1c>
 8007efe:	2300      	movs	r3, #0
 8007f00:	f100 0114 	add.w	r1, r0, #20
 8007f04:	f100 0210 	add.w	r2, r0, #16
 8007f08:	4618      	mov	r0, r3
 8007f0a:	4553      	cmp	r3, sl
 8007f0c:	db33      	blt.n	8007f76 <__lshift+0xb6>
 8007f0e:	6920      	ldr	r0, [r4, #16]
 8007f10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f14:	f104 0314 	add.w	r3, r4, #20
 8007f18:	f019 091f 	ands.w	r9, r9, #31
 8007f1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f24:	d02b      	beq.n	8007f7e <__lshift+0xbe>
 8007f26:	f1c9 0e20 	rsb	lr, r9, #32
 8007f2a:	468a      	mov	sl, r1
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	6818      	ldr	r0, [r3, #0]
 8007f30:	fa00 f009 	lsl.w	r0, r0, r9
 8007f34:	4310      	orrs	r0, r2
 8007f36:	f84a 0b04 	str.w	r0, [sl], #4
 8007f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f3e:	459c      	cmp	ip, r3
 8007f40:	fa22 f20e 	lsr.w	r2, r2, lr
 8007f44:	d8f3      	bhi.n	8007f2e <__lshift+0x6e>
 8007f46:	ebac 0304 	sub.w	r3, ip, r4
 8007f4a:	3b15      	subs	r3, #21
 8007f4c:	f023 0303 	bic.w	r3, r3, #3
 8007f50:	3304      	adds	r3, #4
 8007f52:	f104 0015 	add.w	r0, r4, #21
 8007f56:	4584      	cmp	ip, r0
 8007f58:	bf38      	it	cc
 8007f5a:	2304      	movcc	r3, #4
 8007f5c:	50ca      	str	r2, [r1, r3]
 8007f5e:	b10a      	cbz	r2, 8007f64 <__lshift+0xa4>
 8007f60:	f108 0602 	add.w	r6, r8, #2
 8007f64:	3e01      	subs	r6, #1
 8007f66:	4638      	mov	r0, r7
 8007f68:	612e      	str	r6, [r5, #16]
 8007f6a:	4621      	mov	r1, r4
 8007f6c:	f7ff fdda 	bl	8007b24 <_Bfree>
 8007f70:	4628      	mov	r0, r5
 8007f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f76:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	e7c5      	b.n	8007f0a <__lshift+0x4a>
 8007f7e:	3904      	subs	r1, #4
 8007f80:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f84:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f88:	459c      	cmp	ip, r3
 8007f8a:	d8f9      	bhi.n	8007f80 <__lshift+0xc0>
 8007f8c:	e7ea      	b.n	8007f64 <__lshift+0xa4>
 8007f8e:	bf00      	nop
 8007f90:	08008dcc 	.word	0x08008dcc
 8007f94:	08008ddd 	.word	0x08008ddd

08007f98 <__mcmp>:
 8007f98:	690a      	ldr	r2, [r1, #16]
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	6900      	ldr	r0, [r0, #16]
 8007f9e:	1a80      	subs	r0, r0, r2
 8007fa0:	b530      	push	{r4, r5, lr}
 8007fa2:	d10e      	bne.n	8007fc2 <__mcmp+0x2a>
 8007fa4:	3314      	adds	r3, #20
 8007fa6:	3114      	adds	r1, #20
 8007fa8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007fac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007fb0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007fb4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007fb8:	4295      	cmp	r5, r2
 8007fba:	d003      	beq.n	8007fc4 <__mcmp+0x2c>
 8007fbc:	d205      	bcs.n	8007fca <__mcmp+0x32>
 8007fbe:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc2:	bd30      	pop	{r4, r5, pc}
 8007fc4:	42a3      	cmp	r3, r4
 8007fc6:	d3f3      	bcc.n	8007fb0 <__mcmp+0x18>
 8007fc8:	e7fb      	b.n	8007fc2 <__mcmp+0x2a>
 8007fca:	2001      	movs	r0, #1
 8007fcc:	e7f9      	b.n	8007fc2 <__mcmp+0x2a>
	...

08007fd0 <__mdiff>:
 8007fd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fd4:	4689      	mov	r9, r1
 8007fd6:	4606      	mov	r6, r0
 8007fd8:	4611      	mov	r1, r2
 8007fda:	4648      	mov	r0, r9
 8007fdc:	4614      	mov	r4, r2
 8007fde:	f7ff ffdb 	bl	8007f98 <__mcmp>
 8007fe2:	1e05      	subs	r5, r0, #0
 8007fe4:	d112      	bne.n	800800c <__mdiff+0x3c>
 8007fe6:	4629      	mov	r1, r5
 8007fe8:	4630      	mov	r0, r6
 8007fea:	f7ff fd5b 	bl	8007aa4 <_Balloc>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	b928      	cbnz	r0, 8007ffe <__mdiff+0x2e>
 8007ff2:	4b3f      	ldr	r3, [pc, #252]	@ (80080f0 <__mdiff+0x120>)
 8007ff4:	f240 2137 	movw	r1, #567	@ 0x237
 8007ff8:	483e      	ldr	r0, [pc, #248]	@ (80080f4 <__mdiff+0x124>)
 8007ffa:	f000 fb01 	bl	8008600 <__assert_func>
 8007ffe:	2301      	movs	r3, #1
 8008000:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008004:	4610      	mov	r0, r2
 8008006:	b003      	add	sp, #12
 8008008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800800c:	bfbc      	itt	lt
 800800e:	464b      	movlt	r3, r9
 8008010:	46a1      	movlt	r9, r4
 8008012:	4630      	mov	r0, r6
 8008014:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008018:	bfba      	itte	lt
 800801a:	461c      	movlt	r4, r3
 800801c:	2501      	movlt	r5, #1
 800801e:	2500      	movge	r5, #0
 8008020:	f7ff fd40 	bl	8007aa4 <_Balloc>
 8008024:	4602      	mov	r2, r0
 8008026:	b918      	cbnz	r0, 8008030 <__mdiff+0x60>
 8008028:	4b31      	ldr	r3, [pc, #196]	@ (80080f0 <__mdiff+0x120>)
 800802a:	f240 2145 	movw	r1, #581	@ 0x245
 800802e:	e7e3      	b.n	8007ff8 <__mdiff+0x28>
 8008030:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008034:	6926      	ldr	r6, [r4, #16]
 8008036:	60c5      	str	r5, [r0, #12]
 8008038:	f109 0310 	add.w	r3, r9, #16
 800803c:	f109 0514 	add.w	r5, r9, #20
 8008040:	f104 0e14 	add.w	lr, r4, #20
 8008044:	f100 0b14 	add.w	fp, r0, #20
 8008048:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800804c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008050:	9301      	str	r3, [sp, #4]
 8008052:	46d9      	mov	r9, fp
 8008054:	f04f 0c00 	mov.w	ip, #0
 8008058:	9b01      	ldr	r3, [sp, #4]
 800805a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800805e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008062:	9301      	str	r3, [sp, #4]
 8008064:	fa1f f38a 	uxth.w	r3, sl
 8008068:	4619      	mov	r1, r3
 800806a:	b283      	uxth	r3, r0
 800806c:	1acb      	subs	r3, r1, r3
 800806e:	0c00      	lsrs	r0, r0, #16
 8008070:	4463      	add	r3, ip
 8008072:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008076:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800807a:	b29b      	uxth	r3, r3
 800807c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008080:	4576      	cmp	r6, lr
 8008082:	f849 3b04 	str.w	r3, [r9], #4
 8008086:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800808a:	d8e5      	bhi.n	8008058 <__mdiff+0x88>
 800808c:	1b33      	subs	r3, r6, r4
 800808e:	3b15      	subs	r3, #21
 8008090:	f023 0303 	bic.w	r3, r3, #3
 8008094:	3415      	adds	r4, #21
 8008096:	3304      	adds	r3, #4
 8008098:	42a6      	cmp	r6, r4
 800809a:	bf38      	it	cc
 800809c:	2304      	movcc	r3, #4
 800809e:	441d      	add	r5, r3
 80080a0:	445b      	add	r3, fp
 80080a2:	461e      	mov	r6, r3
 80080a4:	462c      	mov	r4, r5
 80080a6:	4544      	cmp	r4, r8
 80080a8:	d30e      	bcc.n	80080c8 <__mdiff+0xf8>
 80080aa:	f108 0103 	add.w	r1, r8, #3
 80080ae:	1b49      	subs	r1, r1, r5
 80080b0:	f021 0103 	bic.w	r1, r1, #3
 80080b4:	3d03      	subs	r5, #3
 80080b6:	45a8      	cmp	r8, r5
 80080b8:	bf38      	it	cc
 80080ba:	2100      	movcc	r1, #0
 80080bc:	440b      	add	r3, r1
 80080be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80080c2:	b191      	cbz	r1, 80080ea <__mdiff+0x11a>
 80080c4:	6117      	str	r7, [r2, #16]
 80080c6:	e79d      	b.n	8008004 <__mdiff+0x34>
 80080c8:	f854 1b04 	ldr.w	r1, [r4], #4
 80080cc:	46e6      	mov	lr, ip
 80080ce:	0c08      	lsrs	r0, r1, #16
 80080d0:	fa1c fc81 	uxtah	ip, ip, r1
 80080d4:	4471      	add	r1, lr
 80080d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80080da:	b289      	uxth	r1, r1
 80080dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80080e0:	f846 1b04 	str.w	r1, [r6], #4
 80080e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80080e8:	e7dd      	b.n	80080a6 <__mdiff+0xd6>
 80080ea:	3f01      	subs	r7, #1
 80080ec:	e7e7      	b.n	80080be <__mdiff+0xee>
 80080ee:	bf00      	nop
 80080f0:	08008dcc 	.word	0x08008dcc
 80080f4:	08008ddd 	.word	0x08008ddd

080080f8 <__d2b>:
 80080f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80080fc:	460f      	mov	r7, r1
 80080fe:	2101      	movs	r1, #1
 8008100:	ec59 8b10 	vmov	r8, r9, d0
 8008104:	4616      	mov	r6, r2
 8008106:	f7ff fccd 	bl	8007aa4 <_Balloc>
 800810a:	4604      	mov	r4, r0
 800810c:	b930      	cbnz	r0, 800811c <__d2b+0x24>
 800810e:	4602      	mov	r2, r0
 8008110:	4b23      	ldr	r3, [pc, #140]	@ (80081a0 <__d2b+0xa8>)
 8008112:	4824      	ldr	r0, [pc, #144]	@ (80081a4 <__d2b+0xac>)
 8008114:	f240 310f 	movw	r1, #783	@ 0x30f
 8008118:	f000 fa72 	bl	8008600 <__assert_func>
 800811c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008120:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008124:	b10d      	cbz	r5, 800812a <__d2b+0x32>
 8008126:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800812a:	9301      	str	r3, [sp, #4]
 800812c:	f1b8 0300 	subs.w	r3, r8, #0
 8008130:	d023      	beq.n	800817a <__d2b+0x82>
 8008132:	4668      	mov	r0, sp
 8008134:	9300      	str	r3, [sp, #0]
 8008136:	f7ff fd7c 	bl	8007c32 <__lo0bits>
 800813a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800813e:	b1d0      	cbz	r0, 8008176 <__d2b+0x7e>
 8008140:	f1c0 0320 	rsb	r3, r0, #32
 8008144:	fa02 f303 	lsl.w	r3, r2, r3
 8008148:	430b      	orrs	r3, r1
 800814a:	40c2      	lsrs	r2, r0
 800814c:	6163      	str	r3, [r4, #20]
 800814e:	9201      	str	r2, [sp, #4]
 8008150:	9b01      	ldr	r3, [sp, #4]
 8008152:	61a3      	str	r3, [r4, #24]
 8008154:	2b00      	cmp	r3, #0
 8008156:	bf0c      	ite	eq
 8008158:	2201      	moveq	r2, #1
 800815a:	2202      	movne	r2, #2
 800815c:	6122      	str	r2, [r4, #16]
 800815e:	b1a5      	cbz	r5, 800818a <__d2b+0x92>
 8008160:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008164:	4405      	add	r5, r0
 8008166:	603d      	str	r5, [r7, #0]
 8008168:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800816c:	6030      	str	r0, [r6, #0]
 800816e:	4620      	mov	r0, r4
 8008170:	b003      	add	sp, #12
 8008172:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008176:	6161      	str	r1, [r4, #20]
 8008178:	e7ea      	b.n	8008150 <__d2b+0x58>
 800817a:	a801      	add	r0, sp, #4
 800817c:	f7ff fd59 	bl	8007c32 <__lo0bits>
 8008180:	9b01      	ldr	r3, [sp, #4]
 8008182:	6163      	str	r3, [r4, #20]
 8008184:	3020      	adds	r0, #32
 8008186:	2201      	movs	r2, #1
 8008188:	e7e8      	b.n	800815c <__d2b+0x64>
 800818a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800818e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008192:	6038      	str	r0, [r7, #0]
 8008194:	6918      	ldr	r0, [r3, #16]
 8008196:	f7ff fd2d 	bl	8007bf4 <__hi0bits>
 800819a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800819e:	e7e5      	b.n	800816c <__d2b+0x74>
 80081a0:	08008dcc 	.word	0x08008dcc
 80081a4:	08008ddd 	.word	0x08008ddd

080081a8 <__ssputs_r>:
 80081a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081ac:	688e      	ldr	r6, [r1, #8]
 80081ae:	461f      	mov	r7, r3
 80081b0:	42be      	cmp	r6, r7
 80081b2:	680b      	ldr	r3, [r1, #0]
 80081b4:	4682      	mov	sl, r0
 80081b6:	460c      	mov	r4, r1
 80081b8:	4690      	mov	r8, r2
 80081ba:	d82d      	bhi.n	8008218 <__ssputs_r+0x70>
 80081bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80081c0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80081c4:	d026      	beq.n	8008214 <__ssputs_r+0x6c>
 80081c6:	6965      	ldr	r5, [r4, #20]
 80081c8:	6909      	ldr	r1, [r1, #16]
 80081ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081ce:	eba3 0901 	sub.w	r9, r3, r1
 80081d2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80081d6:	1c7b      	adds	r3, r7, #1
 80081d8:	444b      	add	r3, r9
 80081da:	106d      	asrs	r5, r5, #1
 80081dc:	429d      	cmp	r5, r3
 80081de:	bf38      	it	cc
 80081e0:	461d      	movcc	r5, r3
 80081e2:	0553      	lsls	r3, r2, #21
 80081e4:	d527      	bpl.n	8008236 <__ssputs_r+0x8e>
 80081e6:	4629      	mov	r1, r5
 80081e8:	f7fd feb2 	bl	8005f50 <_malloc_r>
 80081ec:	4606      	mov	r6, r0
 80081ee:	b360      	cbz	r0, 800824a <__ssputs_r+0xa2>
 80081f0:	6921      	ldr	r1, [r4, #16]
 80081f2:	464a      	mov	r2, r9
 80081f4:	f000 f9f6 	bl	80085e4 <memcpy>
 80081f8:	89a3      	ldrh	r3, [r4, #12]
 80081fa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80081fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008202:	81a3      	strh	r3, [r4, #12]
 8008204:	6126      	str	r6, [r4, #16]
 8008206:	6165      	str	r5, [r4, #20]
 8008208:	444e      	add	r6, r9
 800820a:	eba5 0509 	sub.w	r5, r5, r9
 800820e:	6026      	str	r6, [r4, #0]
 8008210:	60a5      	str	r5, [r4, #8]
 8008212:	463e      	mov	r6, r7
 8008214:	42be      	cmp	r6, r7
 8008216:	d900      	bls.n	800821a <__ssputs_r+0x72>
 8008218:	463e      	mov	r6, r7
 800821a:	6820      	ldr	r0, [r4, #0]
 800821c:	4632      	mov	r2, r6
 800821e:	4641      	mov	r1, r8
 8008220:	f000 f9c6 	bl	80085b0 <memmove>
 8008224:	68a3      	ldr	r3, [r4, #8]
 8008226:	1b9b      	subs	r3, r3, r6
 8008228:	60a3      	str	r3, [r4, #8]
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	4433      	add	r3, r6
 800822e:	6023      	str	r3, [r4, #0]
 8008230:	2000      	movs	r0, #0
 8008232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008236:	462a      	mov	r2, r5
 8008238:	f000 fa26 	bl	8008688 <_realloc_r>
 800823c:	4606      	mov	r6, r0
 800823e:	2800      	cmp	r0, #0
 8008240:	d1e0      	bne.n	8008204 <__ssputs_r+0x5c>
 8008242:	6921      	ldr	r1, [r4, #16]
 8008244:	4650      	mov	r0, sl
 8008246:	f7ff fbe3 	bl	8007a10 <_free_r>
 800824a:	230c      	movs	r3, #12
 800824c:	f8ca 3000 	str.w	r3, [sl]
 8008250:	89a3      	ldrh	r3, [r4, #12]
 8008252:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008256:	81a3      	strh	r3, [r4, #12]
 8008258:	f04f 30ff 	mov.w	r0, #4294967295
 800825c:	e7e9      	b.n	8008232 <__ssputs_r+0x8a>
	...

08008260 <_svfiprintf_r>:
 8008260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008264:	4698      	mov	r8, r3
 8008266:	898b      	ldrh	r3, [r1, #12]
 8008268:	061b      	lsls	r3, r3, #24
 800826a:	b09d      	sub	sp, #116	@ 0x74
 800826c:	4607      	mov	r7, r0
 800826e:	460d      	mov	r5, r1
 8008270:	4614      	mov	r4, r2
 8008272:	d510      	bpl.n	8008296 <_svfiprintf_r+0x36>
 8008274:	690b      	ldr	r3, [r1, #16]
 8008276:	b973      	cbnz	r3, 8008296 <_svfiprintf_r+0x36>
 8008278:	2140      	movs	r1, #64	@ 0x40
 800827a:	f7fd fe69 	bl	8005f50 <_malloc_r>
 800827e:	6028      	str	r0, [r5, #0]
 8008280:	6128      	str	r0, [r5, #16]
 8008282:	b930      	cbnz	r0, 8008292 <_svfiprintf_r+0x32>
 8008284:	230c      	movs	r3, #12
 8008286:	603b      	str	r3, [r7, #0]
 8008288:	f04f 30ff 	mov.w	r0, #4294967295
 800828c:	b01d      	add	sp, #116	@ 0x74
 800828e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008292:	2340      	movs	r3, #64	@ 0x40
 8008294:	616b      	str	r3, [r5, #20]
 8008296:	2300      	movs	r3, #0
 8008298:	9309      	str	r3, [sp, #36]	@ 0x24
 800829a:	2320      	movs	r3, #32
 800829c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80082a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80082a4:	2330      	movs	r3, #48	@ 0x30
 80082a6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008444 <_svfiprintf_r+0x1e4>
 80082aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80082ae:	f04f 0901 	mov.w	r9, #1
 80082b2:	4623      	mov	r3, r4
 80082b4:	469a      	mov	sl, r3
 80082b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082ba:	b10a      	cbz	r2, 80082c0 <_svfiprintf_r+0x60>
 80082bc:	2a25      	cmp	r2, #37	@ 0x25
 80082be:	d1f9      	bne.n	80082b4 <_svfiprintf_r+0x54>
 80082c0:	ebba 0b04 	subs.w	fp, sl, r4
 80082c4:	d00b      	beq.n	80082de <_svfiprintf_r+0x7e>
 80082c6:	465b      	mov	r3, fp
 80082c8:	4622      	mov	r2, r4
 80082ca:	4629      	mov	r1, r5
 80082cc:	4638      	mov	r0, r7
 80082ce:	f7ff ff6b 	bl	80081a8 <__ssputs_r>
 80082d2:	3001      	adds	r0, #1
 80082d4:	f000 80a7 	beq.w	8008426 <_svfiprintf_r+0x1c6>
 80082d8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082da:	445a      	add	r2, fp
 80082dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80082de:	f89a 3000 	ldrb.w	r3, [sl]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	f000 809f 	beq.w	8008426 <_svfiprintf_r+0x1c6>
 80082e8:	2300      	movs	r3, #0
 80082ea:	f04f 32ff 	mov.w	r2, #4294967295
 80082ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082f2:	f10a 0a01 	add.w	sl, sl, #1
 80082f6:	9304      	str	r3, [sp, #16]
 80082f8:	9307      	str	r3, [sp, #28]
 80082fa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80082fe:	931a      	str	r3, [sp, #104]	@ 0x68
 8008300:	4654      	mov	r4, sl
 8008302:	2205      	movs	r2, #5
 8008304:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008308:	484e      	ldr	r0, [pc, #312]	@ (8008444 <_svfiprintf_r+0x1e4>)
 800830a:	f7f7 ff69 	bl	80001e0 <memchr>
 800830e:	9a04      	ldr	r2, [sp, #16]
 8008310:	b9d8      	cbnz	r0, 800834a <_svfiprintf_r+0xea>
 8008312:	06d0      	lsls	r0, r2, #27
 8008314:	bf44      	itt	mi
 8008316:	2320      	movmi	r3, #32
 8008318:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800831c:	0711      	lsls	r1, r2, #28
 800831e:	bf44      	itt	mi
 8008320:	232b      	movmi	r3, #43	@ 0x2b
 8008322:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008326:	f89a 3000 	ldrb.w	r3, [sl]
 800832a:	2b2a      	cmp	r3, #42	@ 0x2a
 800832c:	d015      	beq.n	800835a <_svfiprintf_r+0xfa>
 800832e:	9a07      	ldr	r2, [sp, #28]
 8008330:	4654      	mov	r4, sl
 8008332:	2000      	movs	r0, #0
 8008334:	f04f 0c0a 	mov.w	ip, #10
 8008338:	4621      	mov	r1, r4
 800833a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800833e:	3b30      	subs	r3, #48	@ 0x30
 8008340:	2b09      	cmp	r3, #9
 8008342:	d94b      	bls.n	80083dc <_svfiprintf_r+0x17c>
 8008344:	b1b0      	cbz	r0, 8008374 <_svfiprintf_r+0x114>
 8008346:	9207      	str	r2, [sp, #28]
 8008348:	e014      	b.n	8008374 <_svfiprintf_r+0x114>
 800834a:	eba0 0308 	sub.w	r3, r0, r8
 800834e:	fa09 f303 	lsl.w	r3, r9, r3
 8008352:	4313      	orrs	r3, r2
 8008354:	9304      	str	r3, [sp, #16]
 8008356:	46a2      	mov	sl, r4
 8008358:	e7d2      	b.n	8008300 <_svfiprintf_r+0xa0>
 800835a:	9b03      	ldr	r3, [sp, #12]
 800835c:	1d19      	adds	r1, r3, #4
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	9103      	str	r1, [sp, #12]
 8008362:	2b00      	cmp	r3, #0
 8008364:	bfbb      	ittet	lt
 8008366:	425b      	neglt	r3, r3
 8008368:	f042 0202 	orrlt.w	r2, r2, #2
 800836c:	9307      	strge	r3, [sp, #28]
 800836e:	9307      	strlt	r3, [sp, #28]
 8008370:	bfb8      	it	lt
 8008372:	9204      	strlt	r2, [sp, #16]
 8008374:	7823      	ldrb	r3, [r4, #0]
 8008376:	2b2e      	cmp	r3, #46	@ 0x2e
 8008378:	d10a      	bne.n	8008390 <_svfiprintf_r+0x130>
 800837a:	7863      	ldrb	r3, [r4, #1]
 800837c:	2b2a      	cmp	r3, #42	@ 0x2a
 800837e:	d132      	bne.n	80083e6 <_svfiprintf_r+0x186>
 8008380:	9b03      	ldr	r3, [sp, #12]
 8008382:	1d1a      	adds	r2, r3, #4
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	9203      	str	r2, [sp, #12]
 8008388:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800838c:	3402      	adds	r4, #2
 800838e:	9305      	str	r3, [sp, #20]
 8008390:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008454 <_svfiprintf_r+0x1f4>
 8008394:	7821      	ldrb	r1, [r4, #0]
 8008396:	2203      	movs	r2, #3
 8008398:	4650      	mov	r0, sl
 800839a:	f7f7 ff21 	bl	80001e0 <memchr>
 800839e:	b138      	cbz	r0, 80083b0 <_svfiprintf_r+0x150>
 80083a0:	9b04      	ldr	r3, [sp, #16]
 80083a2:	eba0 000a 	sub.w	r0, r0, sl
 80083a6:	2240      	movs	r2, #64	@ 0x40
 80083a8:	4082      	lsls	r2, r0
 80083aa:	4313      	orrs	r3, r2
 80083ac:	3401      	adds	r4, #1
 80083ae:	9304      	str	r3, [sp, #16]
 80083b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083b4:	4824      	ldr	r0, [pc, #144]	@ (8008448 <_svfiprintf_r+0x1e8>)
 80083b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80083ba:	2206      	movs	r2, #6
 80083bc:	f7f7 ff10 	bl	80001e0 <memchr>
 80083c0:	2800      	cmp	r0, #0
 80083c2:	d036      	beq.n	8008432 <_svfiprintf_r+0x1d2>
 80083c4:	4b21      	ldr	r3, [pc, #132]	@ (800844c <_svfiprintf_r+0x1ec>)
 80083c6:	bb1b      	cbnz	r3, 8008410 <_svfiprintf_r+0x1b0>
 80083c8:	9b03      	ldr	r3, [sp, #12]
 80083ca:	3307      	adds	r3, #7
 80083cc:	f023 0307 	bic.w	r3, r3, #7
 80083d0:	3308      	adds	r3, #8
 80083d2:	9303      	str	r3, [sp, #12]
 80083d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083d6:	4433      	add	r3, r6
 80083d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80083da:	e76a      	b.n	80082b2 <_svfiprintf_r+0x52>
 80083dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80083e0:	460c      	mov	r4, r1
 80083e2:	2001      	movs	r0, #1
 80083e4:	e7a8      	b.n	8008338 <_svfiprintf_r+0xd8>
 80083e6:	2300      	movs	r3, #0
 80083e8:	3401      	adds	r4, #1
 80083ea:	9305      	str	r3, [sp, #20]
 80083ec:	4619      	mov	r1, r3
 80083ee:	f04f 0c0a 	mov.w	ip, #10
 80083f2:	4620      	mov	r0, r4
 80083f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083f8:	3a30      	subs	r2, #48	@ 0x30
 80083fa:	2a09      	cmp	r2, #9
 80083fc:	d903      	bls.n	8008406 <_svfiprintf_r+0x1a6>
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d0c6      	beq.n	8008390 <_svfiprintf_r+0x130>
 8008402:	9105      	str	r1, [sp, #20]
 8008404:	e7c4      	b.n	8008390 <_svfiprintf_r+0x130>
 8008406:	fb0c 2101 	mla	r1, ip, r1, r2
 800840a:	4604      	mov	r4, r0
 800840c:	2301      	movs	r3, #1
 800840e:	e7f0      	b.n	80083f2 <_svfiprintf_r+0x192>
 8008410:	ab03      	add	r3, sp, #12
 8008412:	9300      	str	r3, [sp, #0]
 8008414:	462a      	mov	r2, r5
 8008416:	4b0e      	ldr	r3, [pc, #56]	@ (8008450 <_svfiprintf_r+0x1f0>)
 8008418:	a904      	add	r1, sp, #16
 800841a:	4638      	mov	r0, r7
 800841c:	f7fd fec4 	bl	80061a8 <_printf_float>
 8008420:	1c42      	adds	r2, r0, #1
 8008422:	4606      	mov	r6, r0
 8008424:	d1d6      	bne.n	80083d4 <_svfiprintf_r+0x174>
 8008426:	89ab      	ldrh	r3, [r5, #12]
 8008428:	065b      	lsls	r3, r3, #25
 800842a:	f53f af2d 	bmi.w	8008288 <_svfiprintf_r+0x28>
 800842e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008430:	e72c      	b.n	800828c <_svfiprintf_r+0x2c>
 8008432:	ab03      	add	r3, sp, #12
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	462a      	mov	r2, r5
 8008438:	4b05      	ldr	r3, [pc, #20]	@ (8008450 <_svfiprintf_r+0x1f0>)
 800843a:	a904      	add	r1, sp, #16
 800843c:	4638      	mov	r0, r7
 800843e:	f7fe f94b 	bl	80066d8 <_printf_i>
 8008442:	e7ed      	b.n	8008420 <_svfiprintf_r+0x1c0>
 8008444:	08008f38 	.word	0x08008f38
 8008448:	08008f42 	.word	0x08008f42
 800844c:	080061a9 	.word	0x080061a9
 8008450:	080081a9 	.word	0x080081a9
 8008454:	08008f3e 	.word	0x08008f3e

08008458 <__sflush_r>:
 8008458:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800845c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008460:	0716      	lsls	r6, r2, #28
 8008462:	4605      	mov	r5, r0
 8008464:	460c      	mov	r4, r1
 8008466:	d454      	bmi.n	8008512 <__sflush_r+0xba>
 8008468:	684b      	ldr	r3, [r1, #4]
 800846a:	2b00      	cmp	r3, #0
 800846c:	dc02      	bgt.n	8008474 <__sflush_r+0x1c>
 800846e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008470:	2b00      	cmp	r3, #0
 8008472:	dd48      	ble.n	8008506 <__sflush_r+0xae>
 8008474:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008476:	2e00      	cmp	r6, #0
 8008478:	d045      	beq.n	8008506 <__sflush_r+0xae>
 800847a:	2300      	movs	r3, #0
 800847c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008480:	682f      	ldr	r7, [r5, #0]
 8008482:	6a21      	ldr	r1, [r4, #32]
 8008484:	602b      	str	r3, [r5, #0]
 8008486:	d030      	beq.n	80084ea <__sflush_r+0x92>
 8008488:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800848a:	89a3      	ldrh	r3, [r4, #12]
 800848c:	0759      	lsls	r1, r3, #29
 800848e:	d505      	bpl.n	800849c <__sflush_r+0x44>
 8008490:	6863      	ldr	r3, [r4, #4]
 8008492:	1ad2      	subs	r2, r2, r3
 8008494:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008496:	b10b      	cbz	r3, 800849c <__sflush_r+0x44>
 8008498:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800849a:	1ad2      	subs	r2, r2, r3
 800849c:	2300      	movs	r3, #0
 800849e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80084a0:	6a21      	ldr	r1, [r4, #32]
 80084a2:	4628      	mov	r0, r5
 80084a4:	47b0      	blx	r6
 80084a6:	1c43      	adds	r3, r0, #1
 80084a8:	89a3      	ldrh	r3, [r4, #12]
 80084aa:	d106      	bne.n	80084ba <__sflush_r+0x62>
 80084ac:	6829      	ldr	r1, [r5, #0]
 80084ae:	291d      	cmp	r1, #29
 80084b0:	d82b      	bhi.n	800850a <__sflush_r+0xb2>
 80084b2:	4a2a      	ldr	r2, [pc, #168]	@ (800855c <__sflush_r+0x104>)
 80084b4:	410a      	asrs	r2, r1
 80084b6:	07d6      	lsls	r6, r2, #31
 80084b8:	d427      	bmi.n	800850a <__sflush_r+0xb2>
 80084ba:	2200      	movs	r2, #0
 80084bc:	6062      	str	r2, [r4, #4]
 80084be:	04d9      	lsls	r1, r3, #19
 80084c0:	6922      	ldr	r2, [r4, #16]
 80084c2:	6022      	str	r2, [r4, #0]
 80084c4:	d504      	bpl.n	80084d0 <__sflush_r+0x78>
 80084c6:	1c42      	adds	r2, r0, #1
 80084c8:	d101      	bne.n	80084ce <__sflush_r+0x76>
 80084ca:	682b      	ldr	r3, [r5, #0]
 80084cc:	b903      	cbnz	r3, 80084d0 <__sflush_r+0x78>
 80084ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80084d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084d2:	602f      	str	r7, [r5, #0]
 80084d4:	b1b9      	cbz	r1, 8008506 <__sflush_r+0xae>
 80084d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084da:	4299      	cmp	r1, r3
 80084dc:	d002      	beq.n	80084e4 <__sflush_r+0x8c>
 80084de:	4628      	mov	r0, r5
 80084e0:	f7ff fa96 	bl	8007a10 <_free_r>
 80084e4:	2300      	movs	r3, #0
 80084e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80084e8:	e00d      	b.n	8008506 <__sflush_r+0xae>
 80084ea:	2301      	movs	r3, #1
 80084ec:	4628      	mov	r0, r5
 80084ee:	47b0      	blx	r6
 80084f0:	4602      	mov	r2, r0
 80084f2:	1c50      	adds	r0, r2, #1
 80084f4:	d1c9      	bne.n	800848a <__sflush_r+0x32>
 80084f6:	682b      	ldr	r3, [r5, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d0c6      	beq.n	800848a <__sflush_r+0x32>
 80084fc:	2b1d      	cmp	r3, #29
 80084fe:	d001      	beq.n	8008504 <__sflush_r+0xac>
 8008500:	2b16      	cmp	r3, #22
 8008502:	d11e      	bne.n	8008542 <__sflush_r+0xea>
 8008504:	602f      	str	r7, [r5, #0]
 8008506:	2000      	movs	r0, #0
 8008508:	e022      	b.n	8008550 <__sflush_r+0xf8>
 800850a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800850e:	b21b      	sxth	r3, r3
 8008510:	e01b      	b.n	800854a <__sflush_r+0xf2>
 8008512:	690f      	ldr	r7, [r1, #16]
 8008514:	2f00      	cmp	r7, #0
 8008516:	d0f6      	beq.n	8008506 <__sflush_r+0xae>
 8008518:	0793      	lsls	r3, r2, #30
 800851a:	680e      	ldr	r6, [r1, #0]
 800851c:	bf08      	it	eq
 800851e:	694b      	ldreq	r3, [r1, #20]
 8008520:	600f      	str	r7, [r1, #0]
 8008522:	bf18      	it	ne
 8008524:	2300      	movne	r3, #0
 8008526:	eba6 0807 	sub.w	r8, r6, r7
 800852a:	608b      	str	r3, [r1, #8]
 800852c:	f1b8 0f00 	cmp.w	r8, #0
 8008530:	dde9      	ble.n	8008506 <__sflush_r+0xae>
 8008532:	6a21      	ldr	r1, [r4, #32]
 8008534:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008536:	4643      	mov	r3, r8
 8008538:	463a      	mov	r2, r7
 800853a:	4628      	mov	r0, r5
 800853c:	47b0      	blx	r6
 800853e:	2800      	cmp	r0, #0
 8008540:	dc08      	bgt.n	8008554 <__sflush_r+0xfc>
 8008542:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008546:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800854a:	81a3      	strh	r3, [r4, #12]
 800854c:	f04f 30ff 	mov.w	r0, #4294967295
 8008550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008554:	4407      	add	r7, r0
 8008556:	eba8 0800 	sub.w	r8, r8, r0
 800855a:	e7e7      	b.n	800852c <__sflush_r+0xd4>
 800855c:	dfbffffe 	.word	0xdfbffffe

08008560 <_fflush_r>:
 8008560:	b538      	push	{r3, r4, r5, lr}
 8008562:	690b      	ldr	r3, [r1, #16]
 8008564:	4605      	mov	r5, r0
 8008566:	460c      	mov	r4, r1
 8008568:	b913      	cbnz	r3, 8008570 <_fflush_r+0x10>
 800856a:	2500      	movs	r5, #0
 800856c:	4628      	mov	r0, r5
 800856e:	bd38      	pop	{r3, r4, r5, pc}
 8008570:	b118      	cbz	r0, 800857a <_fflush_r+0x1a>
 8008572:	6a03      	ldr	r3, [r0, #32]
 8008574:	b90b      	cbnz	r3, 800857a <_fflush_r+0x1a>
 8008576:	f7fe fa5b 	bl	8006a30 <__sinit>
 800857a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d0f3      	beq.n	800856a <_fflush_r+0xa>
 8008582:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008584:	07d0      	lsls	r0, r2, #31
 8008586:	d404      	bmi.n	8008592 <_fflush_r+0x32>
 8008588:	0599      	lsls	r1, r3, #22
 800858a:	d402      	bmi.n	8008592 <_fflush_r+0x32>
 800858c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800858e:	f7fe fbee 	bl	8006d6e <__retarget_lock_acquire_recursive>
 8008592:	4628      	mov	r0, r5
 8008594:	4621      	mov	r1, r4
 8008596:	f7ff ff5f 	bl	8008458 <__sflush_r>
 800859a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800859c:	07da      	lsls	r2, r3, #31
 800859e:	4605      	mov	r5, r0
 80085a0:	d4e4      	bmi.n	800856c <_fflush_r+0xc>
 80085a2:	89a3      	ldrh	r3, [r4, #12]
 80085a4:	059b      	lsls	r3, r3, #22
 80085a6:	d4e1      	bmi.n	800856c <_fflush_r+0xc>
 80085a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085aa:	f7fe fbe1 	bl	8006d70 <__retarget_lock_release_recursive>
 80085ae:	e7dd      	b.n	800856c <_fflush_r+0xc>

080085b0 <memmove>:
 80085b0:	4288      	cmp	r0, r1
 80085b2:	b510      	push	{r4, lr}
 80085b4:	eb01 0402 	add.w	r4, r1, r2
 80085b8:	d902      	bls.n	80085c0 <memmove+0x10>
 80085ba:	4284      	cmp	r4, r0
 80085bc:	4623      	mov	r3, r4
 80085be:	d807      	bhi.n	80085d0 <memmove+0x20>
 80085c0:	1e43      	subs	r3, r0, #1
 80085c2:	42a1      	cmp	r1, r4
 80085c4:	d008      	beq.n	80085d8 <memmove+0x28>
 80085c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085ce:	e7f8      	b.n	80085c2 <memmove+0x12>
 80085d0:	4402      	add	r2, r0
 80085d2:	4601      	mov	r1, r0
 80085d4:	428a      	cmp	r2, r1
 80085d6:	d100      	bne.n	80085da <memmove+0x2a>
 80085d8:	bd10      	pop	{r4, pc}
 80085da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085e2:	e7f7      	b.n	80085d4 <memmove+0x24>

080085e4 <memcpy>:
 80085e4:	440a      	add	r2, r1
 80085e6:	4291      	cmp	r1, r2
 80085e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80085ec:	d100      	bne.n	80085f0 <memcpy+0xc>
 80085ee:	4770      	bx	lr
 80085f0:	b510      	push	{r4, lr}
 80085f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085fa:	4291      	cmp	r1, r2
 80085fc:	d1f9      	bne.n	80085f2 <memcpy+0xe>
 80085fe:	bd10      	pop	{r4, pc}

08008600 <__assert_func>:
 8008600:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008602:	4614      	mov	r4, r2
 8008604:	461a      	mov	r2, r3
 8008606:	4b09      	ldr	r3, [pc, #36]	@ (800862c <__assert_func+0x2c>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4605      	mov	r5, r0
 800860c:	68d8      	ldr	r0, [r3, #12]
 800860e:	b954      	cbnz	r4, 8008626 <__assert_func+0x26>
 8008610:	4b07      	ldr	r3, [pc, #28]	@ (8008630 <__assert_func+0x30>)
 8008612:	461c      	mov	r4, r3
 8008614:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008618:	9100      	str	r1, [sp, #0]
 800861a:	462b      	mov	r3, r5
 800861c:	4905      	ldr	r1, [pc, #20]	@ (8008634 <__assert_func+0x34>)
 800861e:	f000 f86f 	bl	8008700 <fiprintf>
 8008622:	f7fd fc5b 	bl	8005edc <abort>
 8008626:	4b04      	ldr	r3, [pc, #16]	@ (8008638 <__assert_func+0x38>)
 8008628:	e7f4      	b.n	8008614 <__assert_func+0x14>
 800862a:	bf00      	nop
 800862c:	20000018 	.word	0x20000018
 8008630:	08008f8e 	.word	0x08008f8e
 8008634:	08008f60 	.word	0x08008f60
 8008638:	08008f53 	.word	0x08008f53

0800863c <_calloc_r>:
 800863c:	b570      	push	{r4, r5, r6, lr}
 800863e:	fba1 5402 	umull	r5, r4, r1, r2
 8008642:	b93c      	cbnz	r4, 8008654 <_calloc_r+0x18>
 8008644:	4629      	mov	r1, r5
 8008646:	f7fd fc83 	bl	8005f50 <_malloc_r>
 800864a:	4606      	mov	r6, r0
 800864c:	b928      	cbnz	r0, 800865a <_calloc_r+0x1e>
 800864e:	2600      	movs	r6, #0
 8008650:	4630      	mov	r0, r6
 8008652:	bd70      	pop	{r4, r5, r6, pc}
 8008654:	220c      	movs	r2, #12
 8008656:	6002      	str	r2, [r0, #0]
 8008658:	e7f9      	b.n	800864e <_calloc_r+0x12>
 800865a:	462a      	mov	r2, r5
 800865c:	4621      	mov	r1, r4
 800865e:	f7fe fab4 	bl	8006bca <memset>
 8008662:	e7f5      	b.n	8008650 <_calloc_r+0x14>

08008664 <__ascii_mbtowc>:
 8008664:	b082      	sub	sp, #8
 8008666:	b901      	cbnz	r1, 800866a <__ascii_mbtowc+0x6>
 8008668:	a901      	add	r1, sp, #4
 800866a:	b142      	cbz	r2, 800867e <__ascii_mbtowc+0x1a>
 800866c:	b14b      	cbz	r3, 8008682 <__ascii_mbtowc+0x1e>
 800866e:	7813      	ldrb	r3, [r2, #0]
 8008670:	600b      	str	r3, [r1, #0]
 8008672:	7812      	ldrb	r2, [r2, #0]
 8008674:	1e10      	subs	r0, r2, #0
 8008676:	bf18      	it	ne
 8008678:	2001      	movne	r0, #1
 800867a:	b002      	add	sp, #8
 800867c:	4770      	bx	lr
 800867e:	4610      	mov	r0, r2
 8008680:	e7fb      	b.n	800867a <__ascii_mbtowc+0x16>
 8008682:	f06f 0001 	mvn.w	r0, #1
 8008686:	e7f8      	b.n	800867a <__ascii_mbtowc+0x16>

08008688 <_realloc_r>:
 8008688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800868c:	4680      	mov	r8, r0
 800868e:	4615      	mov	r5, r2
 8008690:	460c      	mov	r4, r1
 8008692:	b921      	cbnz	r1, 800869e <_realloc_r+0x16>
 8008694:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008698:	4611      	mov	r1, r2
 800869a:	f7fd bc59 	b.w	8005f50 <_malloc_r>
 800869e:	b92a      	cbnz	r2, 80086ac <_realloc_r+0x24>
 80086a0:	f7ff f9b6 	bl	8007a10 <_free_r>
 80086a4:	2400      	movs	r4, #0
 80086a6:	4620      	mov	r0, r4
 80086a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086ac:	f000 f83a 	bl	8008724 <_malloc_usable_size_r>
 80086b0:	4285      	cmp	r5, r0
 80086b2:	4606      	mov	r6, r0
 80086b4:	d802      	bhi.n	80086bc <_realloc_r+0x34>
 80086b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80086ba:	d8f4      	bhi.n	80086a6 <_realloc_r+0x1e>
 80086bc:	4629      	mov	r1, r5
 80086be:	4640      	mov	r0, r8
 80086c0:	f7fd fc46 	bl	8005f50 <_malloc_r>
 80086c4:	4607      	mov	r7, r0
 80086c6:	2800      	cmp	r0, #0
 80086c8:	d0ec      	beq.n	80086a4 <_realloc_r+0x1c>
 80086ca:	42b5      	cmp	r5, r6
 80086cc:	462a      	mov	r2, r5
 80086ce:	4621      	mov	r1, r4
 80086d0:	bf28      	it	cs
 80086d2:	4632      	movcs	r2, r6
 80086d4:	f7ff ff86 	bl	80085e4 <memcpy>
 80086d8:	4621      	mov	r1, r4
 80086da:	4640      	mov	r0, r8
 80086dc:	f7ff f998 	bl	8007a10 <_free_r>
 80086e0:	463c      	mov	r4, r7
 80086e2:	e7e0      	b.n	80086a6 <_realloc_r+0x1e>

080086e4 <__ascii_wctomb>:
 80086e4:	4603      	mov	r3, r0
 80086e6:	4608      	mov	r0, r1
 80086e8:	b141      	cbz	r1, 80086fc <__ascii_wctomb+0x18>
 80086ea:	2aff      	cmp	r2, #255	@ 0xff
 80086ec:	d904      	bls.n	80086f8 <__ascii_wctomb+0x14>
 80086ee:	228a      	movs	r2, #138	@ 0x8a
 80086f0:	601a      	str	r2, [r3, #0]
 80086f2:	f04f 30ff 	mov.w	r0, #4294967295
 80086f6:	4770      	bx	lr
 80086f8:	700a      	strb	r2, [r1, #0]
 80086fa:	2001      	movs	r0, #1
 80086fc:	4770      	bx	lr
	...

08008700 <fiprintf>:
 8008700:	b40e      	push	{r1, r2, r3}
 8008702:	b503      	push	{r0, r1, lr}
 8008704:	4601      	mov	r1, r0
 8008706:	ab03      	add	r3, sp, #12
 8008708:	4805      	ldr	r0, [pc, #20]	@ (8008720 <fiprintf+0x20>)
 800870a:	f853 2b04 	ldr.w	r2, [r3], #4
 800870e:	6800      	ldr	r0, [r0, #0]
 8008710:	9301      	str	r3, [sp, #4]
 8008712:	f000 f839 	bl	8008788 <_vfiprintf_r>
 8008716:	b002      	add	sp, #8
 8008718:	f85d eb04 	ldr.w	lr, [sp], #4
 800871c:	b003      	add	sp, #12
 800871e:	4770      	bx	lr
 8008720:	20000018 	.word	0x20000018

08008724 <_malloc_usable_size_r>:
 8008724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008728:	1f18      	subs	r0, r3, #4
 800872a:	2b00      	cmp	r3, #0
 800872c:	bfbc      	itt	lt
 800872e:	580b      	ldrlt	r3, [r1, r0]
 8008730:	18c0      	addlt	r0, r0, r3
 8008732:	4770      	bx	lr

08008734 <__sfputc_r>:
 8008734:	6893      	ldr	r3, [r2, #8]
 8008736:	3b01      	subs	r3, #1
 8008738:	2b00      	cmp	r3, #0
 800873a:	b410      	push	{r4}
 800873c:	6093      	str	r3, [r2, #8]
 800873e:	da08      	bge.n	8008752 <__sfputc_r+0x1e>
 8008740:	6994      	ldr	r4, [r2, #24]
 8008742:	42a3      	cmp	r3, r4
 8008744:	db01      	blt.n	800874a <__sfputc_r+0x16>
 8008746:	290a      	cmp	r1, #10
 8008748:	d103      	bne.n	8008752 <__sfputc_r+0x1e>
 800874a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800874e:	f000 b933 	b.w	80089b8 <__swbuf_r>
 8008752:	6813      	ldr	r3, [r2, #0]
 8008754:	1c58      	adds	r0, r3, #1
 8008756:	6010      	str	r0, [r2, #0]
 8008758:	7019      	strb	r1, [r3, #0]
 800875a:	4608      	mov	r0, r1
 800875c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008760:	4770      	bx	lr

08008762 <__sfputs_r>:
 8008762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008764:	4606      	mov	r6, r0
 8008766:	460f      	mov	r7, r1
 8008768:	4614      	mov	r4, r2
 800876a:	18d5      	adds	r5, r2, r3
 800876c:	42ac      	cmp	r4, r5
 800876e:	d101      	bne.n	8008774 <__sfputs_r+0x12>
 8008770:	2000      	movs	r0, #0
 8008772:	e007      	b.n	8008784 <__sfputs_r+0x22>
 8008774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008778:	463a      	mov	r2, r7
 800877a:	4630      	mov	r0, r6
 800877c:	f7ff ffda 	bl	8008734 <__sfputc_r>
 8008780:	1c43      	adds	r3, r0, #1
 8008782:	d1f3      	bne.n	800876c <__sfputs_r+0xa>
 8008784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008788 <_vfiprintf_r>:
 8008788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800878c:	460d      	mov	r5, r1
 800878e:	b09d      	sub	sp, #116	@ 0x74
 8008790:	4614      	mov	r4, r2
 8008792:	4698      	mov	r8, r3
 8008794:	4606      	mov	r6, r0
 8008796:	b118      	cbz	r0, 80087a0 <_vfiprintf_r+0x18>
 8008798:	6a03      	ldr	r3, [r0, #32]
 800879a:	b90b      	cbnz	r3, 80087a0 <_vfiprintf_r+0x18>
 800879c:	f7fe f948 	bl	8006a30 <__sinit>
 80087a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087a2:	07d9      	lsls	r1, r3, #31
 80087a4:	d405      	bmi.n	80087b2 <_vfiprintf_r+0x2a>
 80087a6:	89ab      	ldrh	r3, [r5, #12]
 80087a8:	059a      	lsls	r2, r3, #22
 80087aa:	d402      	bmi.n	80087b2 <_vfiprintf_r+0x2a>
 80087ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087ae:	f7fe fade 	bl	8006d6e <__retarget_lock_acquire_recursive>
 80087b2:	89ab      	ldrh	r3, [r5, #12]
 80087b4:	071b      	lsls	r3, r3, #28
 80087b6:	d501      	bpl.n	80087bc <_vfiprintf_r+0x34>
 80087b8:	692b      	ldr	r3, [r5, #16]
 80087ba:	b99b      	cbnz	r3, 80087e4 <_vfiprintf_r+0x5c>
 80087bc:	4629      	mov	r1, r5
 80087be:	4630      	mov	r0, r6
 80087c0:	f000 f938 	bl	8008a34 <__swsetup_r>
 80087c4:	b170      	cbz	r0, 80087e4 <_vfiprintf_r+0x5c>
 80087c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087c8:	07dc      	lsls	r4, r3, #31
 80087ca:	d504      	bpl.n	80087d6 <_vfiprintf_r+0x4e>
 80087cc:	f04f 30ff 	mov.w	r0, #4294967295
 80087d0:	b01d      	add	sp, #116	@ 0x74
 80087d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d6:	89ab      	ldrh	r3, [r5, #12]
 80087d8:	0598      	lsls	r0, r3, #22
 80087da:	d4f7      	bmi.n	80087cc <_vfiprintf_r+0x44>
 80087dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087de:	f7fe fac7 	bl	8006d70 <__retarget_lock_release_recursive>
 80087e2:	e7f3      	b.n	80087cc <_vfiprintf_r+0x44>
 80087e4:	2300      	movs	r3, #0
 80087e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80087e8:	2320      	movs	r3, #32
 80087ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80087f2:	2330      	movs	r3, #48	@ 0x30
 80087f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80089a4 <_vfiprintf_r+0x21c>
 80087f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087fc:	f04f 0901 	mov.w	r9, #1
 8008800:	4623      	mov	r3, r4
 8008802:	469a      	mov	sl, r3
 8008804:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008808:	b10a      	cbz	r2, 800880e <_vfiprintf_r+0x86>
 800880a:	2a25      	cmp	r2, #37	@ 0x25
 800880c:	d1f9      	bne.n	8008802 <_vfiprintf_r+0x7a>
 800880e:	ebba 0b04 	subs.w	fp, sl, r4
 8008812:	d00b      	beq.n	800882c <_vfiprintf_r+0xa4>
 8008814:	465b      	mov	r3, fp
 8008816:	4622      	mov	r2, r4
 8008818:	4629      	mov	r1, r5
 800881a:	4630      	mov	r0, r6
 800881c:	f7ff ffa1 	bl	8008762 <__sfputs_r>
 8008820:	3001      	adds	r0, #1
 8008822:	f000 80a7 	beq.w	8008974 <_vfiprintf_r+0x1ec>
 8008826:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008828:	445a      	add	r2, fp
 800882a:	9209      	str	r2, [sp, #36]	@ 0x24
 800882c:	f89a 3000 	ldrb.w	r3, [sl]
 8008830:	2b00      	cmp	r3, #0
 8008832:	f000 809f 	beq.w	8008974 <_vfiprintf_r+0x1ec>
 8008836:	2300      	movs	r3, #0
 8008838:	f04f 32ff 	mov.w	r2, #4294967295
 800883c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008840:	f10a 0a01 	add.w	sl, sl, #1
 8008844:	9304      	str	r3, [sp, #16]
 8008846:	9307      	str	r3, [sp, #28]
 8008848:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800884c:	931a      	str	r3, [sp, #104]	@ 0x68
 800884e:	4654      	mov	r4, sl
 8008850:	2205      	movs	r2, #5
 8008852:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008856:	4853      	ldr	r0, [pc, #332]	@ (80089a4 <_vfiprintf_r+0x21c>)
 8008858:	f7f7 fcc2 	bl	80001e0 <memchr>
 800885c:	9a04      	ldr	r2, [sp, #16]
 800885e:	b9d8      	cbnz	r0, 8008898 <_vfiprintf_r+0x110>
 8008860:	06d1      	lsls	r1, r2, #27
 8008862:	bf44      	itt	mi
 8008864:	2320      	movmi	r3, #32
 8008866:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800886a:	0713      	lsls	r3, r2, #28
 800886c:	bf44      	itt	mi
 800886e:	232b      	movmi	r3, #43	@ 0x2b
 8008870:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008874:	f89a 3000 	ldrb.w	r3, [sl]
 8008878:	2b2a      	cmp	r3, #42	@ 0x2a
 800887a:	d015      	beq.n	80088a8 <_vfiprintf_r+0x120>
 800887c:	9a07      	ldr	r2, [sp, #28]
 800887e:	4654      	mov	r4, sl
 8008880:	2000      	movs	r0, #0
 8008882:	f04f 0c0a 	mov.w	ip, #10
 8008886:	4621      	mov	r1, r4
 8008888:	f811 3b01 	ldrb.w	r3, [r1], #1
 800888c:	3b30      	subs	r3, #48	@ 0x30
 800888e:	2b09      	cmp	r3, #9
 8008890:	d94b      	bls.n	800892a <_vfiprintf_r+0x1a2>
 8008892:	b1b0      	cbz	r0, 80088c2 <_vfiprintf_r+0x13a>
 8008894:	9207      	str	r2, [sp, #28]
 8008896:	e014      	b.n	80088c2 <_vfiprintf_r+0x13a>
 8008898:	eba0 0308 	sub.w	r3, r0, r8
 800889c:	fa09 f303 	lsl.w	r3, r9, r3
 80088a0:	4313      	orrs	r3, r2
 80088a2:	9304      	str	r3, [sp, #16]
 80088a4:	46a2      	mov	sl, r4
 80088a6:	e7d2      	b.n	800884e <_vfiprintf_r+0xc6>
 80088a8:	9b03      	ldr	r3, [sp, #12]
 80088aa:	1d19      	adds	r1, r3, #4
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	9103      	str	r1, [sp, #12]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	bfbb      	ittet	lt
 80088b4:	425b      	neglt	r3, r3
 80088b6:	f042 0202 	orrlt.w	r2, r2, #2
 80088ba:	9307      	strge	r3, [sp, #28]
 80088bc:	9307      	strlt	r3, [sp, #28]
 80088be:	bfb8      	it	lt
 80088c0:	9204      	strlt	r2, [sp, #16]
 80088c2:	7823      	ldrb	r3, [r4, #0]
 80088c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80088c6:	d10a      	bne.n	80088de <_vfiprintf_r+0x156>
 80088c8:	7863      	ldrb	r3, [r4, #1]
 80088ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80088cc:	d132      	bne.n	8008934 <_vfiprintf_r+0x1ac>
 80088ce:	9b03      	ldr	r3, [sp, #12]
 80088d0:	1d1a      	adds	r2, r3, #4
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	9203      	str	r2, [sp, #12]
 80088d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088da:	3402      	adds	r4, #2
 80088dc:	9305      	str	r3, [sp, #20]
 80088de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80089b4 <_vfiprintf_r+0x22c>
 80088e2:	7821      	ldrb	r1, [r4, #0]
 80088e4:	2203      	movs	r2, #3
 80088e6:	4650      	mov	r0, sl
 80088e8:	f7f7 fc7a 	bl	80001e0 <memchr>
 80088ec:	b138      	cbz	r0, 80088fe <_vfiprintf_r+0x176>
 80088ee:	9b04      	ldr	r3, [sp, #16]
 80088f0:	eba0 000a 	sub.w	r0, r0, sl
 80088f4:	2240      	movs	r2, #64	@ 0x40
 80088f6:	4082      	lsls	r2, r0
 80088f8:	4313      	orrs	r3, r2
 80088fa:	3401      	adds	r4, #1
 80088fc:	9304      	str	r3, [sp, #16]
 80088fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008902:	4829      	ldr	r0, [pc, #164]	@ (80089a8 <_vfiprintf_r+0x220>)
 8008904:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008908:	2206      	movs	r2, #6
 800890a:	f7f7 fc69 	bl	80001e0 <memchr>
 800890e:	2800      	cmp	r0, #0
 8008910:	d03f      	beq.n	8008992 <_vfiprintf_r+0x20a>
 8008912:	4b26      	ldr	r3, [pc, #152]	@ (80089ac <_vfiprintf_r+0x224>)
 8008914:	bb1b      	cbnz	r3, 800895e <_vfiprintf_r+0x1d6>
 8008916:	9b03      	ldr	r3, [sp, #12]
 8008918:	3307      	adds	r3, #7
 800891a:	f023 0307 	bic.w	r3, r3, #7
 800891e:	3308      	adds	r3, #8
 8008920:	9303      	str	r3, [sp, #12]
 8008922:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008924:	443b      	add	r3, r7
 8008926:	9309      	str	r3, [sp, #36]	@ 0x24
 8008928:	e76a      	b.n	8008800 <_vfiprintf_r+0x78>
 800892a:	fb0c 3202 	mla	r2, ip, r2, r3
 800892e:	460c      	mov	r4, r1
 8008930:	2001      	movs	r0, #1
 8008932:	e7a8      	b.n	8008886 <_vfiprintf_r+0xfe>
 8008934:	2300      	movs	r3, #0
 8008936:	3401      	adds	r4, #1
 8008938:	9305      	str	r3, [sp, #20]
 800893a:	4619      	mov	r1, r3
 800893c:	f04f 0c0a 	mov.w	ip, #10
 8008940:	4620      	mov	r0, r4
 8008942:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008946:	3a30      	subs	r2, #48	@ 0x30
 8008948:	2a09      	cmp	r2, #9
 800894a:	d903      	bls.n	8008954 <_vfiprintf_r+0x1cc>
 800894c:	2b00      	cmp	r3, #0
 800894e:	d0c6      	beq.n	80088de <_vfiprintf_r+0x156>
 8008950:	9105      	str	r1, [sp, #20]
 8008952:	e7c4      	b.n	80088de <_vfiprintf_r+0x156>
 8008954:	fb0c 2101 	mla	r1, ip, r1, r2
 8008958:	4604      	mov	r4, r0
 800895a:	2301      	movs	r3, #1
 800895c:	e7f0      	b.n	8008940 <_vfiprintf_r+0x1b8>
 800895e:	ab03      	add	r3, sp, #12
 8008960:	9300      	str	r3, [sp, #0]
 8008962:	462a      	mov	r2, r5
 8008964:	4b12      	ldr	r3, [pc, #72]	@ (80089b0 <_vfiprintf_r+0x228>)
 8008966:	a904      	add	r1, sp, #16
 8008968:	4630      	mov	r0, r6
 800896a:	f7fd fc1d 	bl	80061a8 <_printf_float>
 800896e:	4607      	mov	r7, r0
 8008970:	1c78      	adds	r0, r7, #1
 8008972:	d1d6      	bne.n	8008922 <_vfiprintf_r+0x19a>
 8008974:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008976:	07d9      	lsls	r1, r3, #31
 8008978:	d405      	bmi.n	8008986 <_vfiprintf_r+0x1fe>
 800897a:	89ab      	ldrh	r3, [r5, #12]
 800897c:	059a      	lsls	r2, r3, #22
 800897e:	d402      	bmi.n	8008986 <_vfiprintf_r+0x1fe>
 8008980:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008982:	f7fe f9f5 	bl	8006d70 <__retarget_lock_release_recursive>
 8008986:	89ab      	ldrh	r3, [r5, #12]
 8008988:	065b      	lsls	r3, r3, #25
 800898a:	f53f af1f 	bmi.w	80087cc <_vfiprintf_r+0x44>
 800898e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008990:	e71e      	b.n	80087d0 <_vfiprintf_r+0x48>
 8008992:	ab03      	add	r3, sp, #12
 8008994:	9300      	str	r3, [sp, #0]
 8008996:	462a      	mov	r2, r5
 8008998:	4b05      	ldr	r3, [pc, #20]	@ (80089b0 <_vfiprintf_r+0x228>)
 800899a:	a904      	add	r1, sp, #16
 800899c:	4630      	mov	r0, r6
 800899e:	f7fd fe9b 	bl	80066d8 <_printf_i>
 80089a2:	e7e4      	b.n	800896e <_vfiprintf_r+0x1e6>
 80089a4:	08008f38 	.word	0x08008f38
 80089a8:	08008f42 	.word	0x08008f42
 80089ac:	080061a9 	.word	0x080061a9
 80089b0:	08008763 	.word	0x08008763
 80089b4:	08008f3e 	.word	0x08008f3e

080089b8 <__swbuf_r>:
 80089b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ba:	460e      	mov	r6, r1
 80089bc:	4614      	mov	r4, r2
 80089be:	4605      	mov	r5, r0
 80089c0:	b118      	cbz	r0, 80089ca <__swbuf_r+0x12>
 80089c2:	6a03      	ldr	r3, [r0, #32]
 80089c4:	b90b      	cbnz	r3, 80089ca <__swbuf_r+0x12>
 80089c6:	f7fe f833 	bl	8006a30 <__sinit>
 80089ca:	69a3      	ldr	r3, [r4, #24]
 80089cc:	60a3      	str	r3, [r4, #8]
 80089ce:	89a3      	ldrh	r3, [r4, #12]
 80089d0:	071a      	lsls	r2, r3, #28
 80089d2:	d501      	bpl.n	80089d8 <__swbuf_r+0x20>
 80089d4:	6923      	ldr	r3, [r4, #16]
 80089d6:	b943      	cbnz	r3, 80089ea <__swbuf_r+0x32>
 80089d8:	4621      	mov	r1, r4
 80089da:	4628      	mov	r0, r5
 80089dc:	f000 f82a 	bl	8008a34 <__swsetup_r>
 80089e0:	b118      	cbz	r0, 80089ea <__swbuf_r+0x32>
 80089e2:	f04f 37ff 	mov.w	r7, #4294967295
 80089e6:	4638      	mov	r0, r7
 80089e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	6922      	ldr	r2, [r4, #16]
 80089ee:	1a98      	subs	r0, r3, r2
 80089f0:	6963      	ldr	r3, [r4, #20]
 80089f2:	b2f6      	uxtb	r6, r6
 80089f4:	4283      	cmp	r3, r0
 80089f6:	4637      	mov	r7, r6
 80089f8:	dc05      	bgt.n	8008a06 <__swbuf_r+0x4e>
 80089fa:	4621      	mov	r1, r4
 80089fc:	4628      	mov	r0, r5
 80089fe:	f7ff fdaf 	bl	8008560 <_fflush_r>
 8008a02:	2800      	cmp	r0, #0
 8008a04:	d1ed      	bne.n	80089e2 <__swbuf_r+0x2a>
 8008a06:	68a3      	ldr	r3, [r4, #8]
 8008a08:	3b01      	subs	r3, #1
 8008a0a:	60a3      	str	r3, [r4, #8]
 8008a0c:	6823      	ldr	r3, [r4, #0]
 8008a0e:	1c5a      	adds	r2, r3, #1
 8008a10:	6022      	str	r2, [r4, #0]
 8008a12:	701e      	strb	r6, [r3, #0]
 8008a14:	6962      	ldr	r2, [r4, #20]
 8008a16:	1c43      	adds	r3, r0, #1
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d004      	beq.n	8008a26 <__swbuf_r+0x6e>
 8008a1c:	89a3      	ldrh	r3, [r4, #12]
 8008a1e:	07db      	lsls	r3, r3, #31
 8008a20:	d5e1      	bpl.n	80089e6 <__swbuf_r+0x2e>
 8008a22:	2e0a      	cmp	r6, #10
 8008a24:	d1df      	bne.n	80089e6 <__swbuf_r+0x2e>
 8008a26:	4621      	mov	r1, r4
 8008a28:	4628      	mov	r0, r5
 8008a2a:	f7ff fd99 	bl	8008560 <_fflush_r>
 8008a2e:	2800      	cmp	r0, #0
 8008a30:	d0d9      	beq.n	80089e6 <__swbuf_r+0x2e>
 8008a32:	e7d6      	b.n	80089e2 <__swbuf_r+0x2a>

08008a34 <__swsetup_r>:
 8008a34:	b538      	push	{r3, r4, r5, lr}
 8008a36:	4b29      	ldr	r3, [pc, #164]	@ (8008adc <__swsetup_r+0xa8>)
 8008a38:	4605      	mov	r5, r0
 8008a3a:	6818      	ldr	r0, [r3, #0]
 8008a3c:	460c      	mov	r4, r1
 8008a3e:	b118      	cbz	r0, 8008a48 <__swsetup_r+0x14>
 8008a40:	6a03      	ldr	r3, [r0, #32]
 8008a42:	b90b      	cbnz	r3, 8008a48 <__swsetup_r+0x14>
 8008a44:	f7fd fff4 	bl	8006a30 <__sinit>
 8008a48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a4c:	0719      	lsls	r1, r3, #28
 8008a4e:	d422      	bmi.n	8008a96 <__swsetup_r+0x62>
 8008a50:	06da      	lsls	r2, r3, #27
 8008a52:	d407      	bmi.n	8008a64 <__swsetup_r+0x30>
 8008a54:	2209      	movs	r2, #9
 8008a56:	602a      	str	r2, [r5, #0]
 8008a58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a5c:	81a3      	strh	r3, [r4, #12]
 8008a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a62:	e033      	b.n	8008acc <__swsetup_r+0x98>
 8008a64:	0758      	lsls	r0, r3, #29
 8008a66:	d512      	bpl.n	8008a8e <__swsetup_r+0x5a>
 8008a68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a6a:	b141      	cbz	r1, 8008a7e <__swsetup_r+0x4a>
 8008a6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a70:	4299      	cmp	r1, r3
 8008a72:	d002      	beq.n	8008a7a <__swsetup_r+0x46>
 8008a74:	4628      	mov	r0, r5
 8008a76:	f7fe ffcb 	bl	8007a10 <_free_r>
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a7e:	89a3      	ldrh	r3, [r4, #12]
 8008a80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a84:	81a3      	strh	r3, [r4, #12]
 8008a86:	2300      	movs	r3, #0
 8008a88:	6063      	str	r3, [r4, #4]
 8008a8a:	6923      	ldr	r3, [r4, #16]
 8008a8c:	6023      	str	r3, [r4, #0]
 8008a8e:	89a3      	ldrh	r3, [r4, #12]
 8008a90:	f043 0308 	orr.w	r3, r3, #8
 8008a94:	81a3      	strh	r3, [r4, #12]
 8008a96:	6923      	ldr	r3, [r4, #16]
 8008a98:	b94b      	cbnz	r3, 8008aae <__swsetup_r+0x7a>
 8008a9a:	89a3      	ldrh	r3, [r4, #12]
 8008a9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008aa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008aa4:	d003      	beq.n	8008aae <__swsetup_r+0x7a>
 8008aa6:	4621      	mov	r1, r4
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	f000 f83f 	bl	8008b2c <__smakebuf_r>
 8008aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ab2:	f013 0201 	ands.w	r2, r3, #1
 8008ab6:	d00a      	beq.n	8008ace <__swsetup_r+0x9a>
 8008ab8:	2200      	movs	r2, #0
 8008aba:	60a2      	str	r2, [r4, #8]
 8008abc:	6962      	ldr	r2, [r4, #20]
 8008abe:	4252      	negs	r2, r2
 8008ac0:	61a2      	str	r2, [r4, #24]
 8008ac2:	6922      	ldr	r2, [r4, #16]
 8008ac4:	b942      	cbnz	r2, 8008ad8 <__swsetup_r+0xa4>
 8008ac6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008aca:	d1c5      	bne.n	8008a58 <__swsetup_r+0x24>
 8008acc:	bd38      	pop	{r3, r4, r5, pc}
 8008ace:	0799      	lsls	r1, r3, #30
 8008ad0:	bf58      	it	pl
 8008ad2:	6962      	ldrpl	r2, [r4, #20]
 8008ad4:	60a2      	str	r2, [r4, #8]
 8008ad6:	e7f4      	b.n	8008ac2 <__swsetup_r+0x8e>
 8008ad8:	2000      	movs	r0, #0
 8008ada:	e7f7      	b.n	8008acc <__swsetup_r+0x98>
 8008adc:	20000018 	.word	0x20000018

08008ae0 <__swhatbuf_r>:
 8008ae0:	b570      	push	{r4, r5, r6, lr}
 8008ae2:	460c      	mov	r4, r1
 8008ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ae8:	2900      	cmp	r1, #0
 8008aea:	b096      	sub	sp, #88	@ 0x58
 8008aec:	4615      	mov	r5, r2
 8008aee:	461e      	mov	r6, r3
 8008af0:	da0d      	bge.n	8008b0e <__swhatbuf_r+0x2e>
 8008af2:	89a3      	ldrh	r3, [r4, #12]
 8008af4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008af8:	f04f 0100 	mov.w	r1, #0
 8008afc:	bf14      	ite	ne
 8008afe:	2340      	movne	r3, #64	@ 0x40
 8008b00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b04:	2000      	movs	r0, #0
 8008b06:	6031      	str	r1, [r6, #0]
 8008b08:	602b      	str	r3, [r5, #0]
 8008b0a:	b016      	add	sp, #88	@ 0x58
 8008b0c:	bd70      	pop	{r4, r5, r6, pc}
 8008b0e:	466a      	mov	r2, sp
 8008b10:	f000 f848 	bl	8008ba4 <_fstat_r>
 8008b14:	2800      	cmp	r0, #0
 8008b16:	dbec      	blt.n	8008af2 <__swhatbuf_r+0x12>
 8008b18:	9901      	ldr	r1, [sp, #4]
 8008b1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008b1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008b22:	4259      	negs	r1, r3
 8008b24:	4159      	adcs	r1, r3
 8008b26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b2a:	e7eb      	b.n	8008b04 <__swhatbuf_r+0x24>

08008b2c <__smakebuf_r>:
 8008b2c:	898b      	ldrh	r3, [r1, #12]
 8008b2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b30:	079d      	lsls	r5, r3, #30
 8008b32:	4606      	mov	r6, r0
 8008b34:	460c      	mov	r4, r1
 8008b36:	d507      	bpl.n	8008b48 <__smakebuf_r+0x1c>
 8008b38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008b3c:	6023      	str	r3, [r4, #0]
 8008b3e:	6123      	str	r3, [r4, #16]
 8008b40:	2301      	movs	r3, #1
 8008b42:	6163      	str	r3, [r4, #20]
 8008b44:	b003      	add	sp, #12
 8008b46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b48:	ab01      	add	r3, sp, #4
 8008b4a:	466a      	mov	r2, sp
 8008b4c:	f7ff ffc8 	bl	8008ae0 <__swhatbuf_r>
 8008b50:	9f00      	ldr	r7, [sp, #0]
 8008b52:	4605      	mov	r5, r0
 8008b54:	4639      	mov	r1, r7
 8008b56:	4630      	mov	r0, r6
 8008b58:	f7fd f9fa 	bl	8005f50 <_malloc_r>
 8008b5c:	b948      	cbnz	r0, 8008b72 <__smakebuf_r+0x46>
 8008b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b62:	059a      	lsls	r2, r3, #22
 8008b64:	d4ee      	bmi.n	8008b44 <__smakebuf_r+0x18>
 8008b66:	f023 0303 	bic.w	r3, r3, #3
 8008b6a:	f043 0302 	orr.w	r3, r3, #2
 8008b6e:	81a3      	strh	r3, [r4, #12]
 8008b70:	e7e2      	b.n	8008b38 <__smakebuf_r+0xc>
 8008b72:	89a3      	ldrh	r3, [r4, #12]
 8008b74:	6020      	str	r0, [r4, #0]
 8008b76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b7a:	81a3      	strh	r3, [r4, #12]
 8008b7c:	9b01      	ldr	r3, [sp, #4]
 8008b7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008b82:	b15b      	cbz	r3, 8008b9c <__smakebuf_r+0x70>
 8008b84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b88:	4630      	mov	r0, r6
 8008b8a:	f000 f81d 	bl	8008bc8 <_isatty_r>
 8008b8e:	b128      	cbz	r0, 8008b9c <__smakebuf_r+0x70>
 8008b90:	89a3      	ldrh	r3, [r4, #12]
 8008b92:	f023 0303 	bic.w	r3, r3, #3
 8008b96:	f043 0301 	orr.w	r3, r3, #1
 8008b9a:	81a3      	strh	r3, [r4, #12]
 8008b9c:	89a3      	ldrh	r3, [r4, #12]
 8008b9e:	431d      	orrs	r5, r3
 8008ba0:	81a5      	strh	r5, [r4, #12]
 8008ba2:	e7cf      	b.n	8008b44 <__smakebuf_r+0x18>

08008ba4 <_fstat_r>:
 8008ba4:	b538      	push	{r3, r4, r5, lr}
 8008ba6:	4d07      	ldr	r5, [pc, #28]	@ (8008bc4 <_fstat_r+0x20>)
 8008ba8:	2300      	movs	r3, #0
 8008baa:	4604      	mov	r4, r0
 8008bac:	4608      	mov	r0, r1
 8008bae:	4611      	mov	r1, r2
 8008bb0:	602b      	str	r3, [r5, #0]
 8008bb2:	f7f9 fdeb 	bl	800278c <_fstat>
 8008bb6:	1c43      	adds	r3, r0, #1
 8008bb8:	d102      	bne.n	8008bc0 <_fstat_r+0x1c>
 8008bba:	682b      	ldr	r3, [r5, #0]
 8008bbc:	b103      	cbz	r3, 8008bc0 <_fstat_r+0x1c>
 8008bbe:	6023      	str	r3, [r4, #0]
 8008bc0:	bd38      	pop	{r3, r4, r5, pc}
 8008bc2:	bf00      	nop
 8008bc4:	200004e4 	.word	0x200004e4

08008bc8 <_isatty_r>:
 8008bc8:	b538      	push	{r3, r4, r5, lr}
 8008bca:	4d06      	ldr	r5, [pc, #24]	@ (8008be4 <_isatty_r+0x1c>)
 8008bcc:	2300      	movs	r3, #0
 8008bce:	4604      	mov	r4, r0
 8008bd0:	4608      	mov	r0, r1
 8008bd2:	602b      	str	r3, [r5, #0]
 8008bd4:	f7f9 fdea 	bl	80027ac <_isatty>
 8008bd8:	1c43      	adds	r3, r0, #1
 8008bda:	d102      	bne.n	8008be2 <_isatty_r+0x1a>
 8008bdc:	682b      	ldr	r3, [r5, #0]
 8008bde:	b103      	cbz	r3, 8008be2 <_isatty_r+0x1a>
 8008be0:	6023      	str	r3, [r4, #0]
 8008be2:	bd38      	pop	{r3, r4, r5, pc}
 8008be4:	200004e4 	.word	0x200004e4

08008be8 <_init>:
 8008be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bea:	bf00      	nop
 8008bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bee:	bc08      	pop	{r3}
 8008bf0:	469e      	mov	lr, r3
 8008bf2:	4770      	bx	lr

08008bf4 <_fini>:
 8008bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bf6:	bf00      	nop
 8008bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bfa:	bc08      	pop	{r3}
 8008bfc:	469e      	mov	lr, r3
 8008bfe:	4770      	bx	lr
