
test-19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bf8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  08008d98  08008d98  00009d98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009198  08009198  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009198  08009198  0000a198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091a0  080091a0  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091a0  080091a0  0000a1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080091a4  080091a4  0000a1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080091a8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  200001d4  0800937c  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000534  0800937c  0000b534  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011499  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ef7  00000000  00000000  0001c69d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  0001f598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b25  00000000  00000000  00020400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a111  00000000  00000000  00020f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001160d  00000000  00000000  0003b036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091588  00000000  00000000  0004c643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ddbcb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d10  00000000  00000000  000ddc10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  000e2920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008d80 	.word	0x08008d80

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08008d80 	.word	0x08008d80

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <_ZN12MotorControlC1EP15TB6612FNG_MotorP13PololuEncodermfff>:
 * @date Jun 2, 2024
 */

#include "MotorControl.h"

MotorControl::MotorControl(
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	61f8      	str	r0, [r7, #28]
 8000eb0:	61b9      	str	r1, [r7, #24]
 8000eb2:	617a      	str	r2, [r7, #20]
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	ed87 0a03 	vstr	s0, [r7, #12]
 8000eba:	edc7 0a02 	vstr	s1, [r7, #8]
 8000ebe:	ed87 1a01 	vstr	s2, [r7, #4]
		: motor(motor),
		  encoder(encoder),
		  control_frequency_Hz(control_frequency_Hz),
		  K_P(K_P),
		  K_I(K_I),
		  K_D(K_D)
 8000ec2:	4a16      	ldr	r2, [pc, #88]	@ (8000f1c <_ZN12MotorControlC1EP15TB6612FNG_MotorP13PololuEncodermfff+0x74>)
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	601a      	str	r2, [r3, #0]
		: motor(motor),
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	605a      	str	r2, [r3, #4]
		  encoder(encoder),
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	609a      	str	r2, [r3, #8]
		  control_frequency_Hz(control_frequency_Hz),
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	60da      	str	r2, [r3, #12]
		  K_P(K_P),
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	68fa      	ldr	r2, [r7, #12]
 8000ede:	611a      	str	r2, [r3, #16]
		  K_I(K_I),
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	615a      	str	r2, [r3, #20]
		  K_D(K_D)
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	619a      	str	r2, [r3, #24]
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f04f 0200 	mov.w	r2, #0
 8000ef2:	61da      	str	r2, [r3, #28]
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f04f 0200 	mov.w	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	625a      	str	r2, [r3, #36]	@ 0x24
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	2200      	movs	r2, #0
 8000f08:	859a      	strh	r2, [r3, #44]	@ 0x2c
{
	reinitialize();
 8000f0a:	69f8      	ldr	r0, [r7, #28]
 8000f0c:	f000 f8ff 	bl	800110e <_ZN12MotorControl12reinitializeEv>
}
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	4618      	mov	r0, r3
 8000f14:	3720      	adds	r7, #32
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	08008db8 	.word	0x08008db8

08000f20 <_ZN12MotorControlD1Ev>:

MotorControl::~MotorControl()
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	4a06      	ldr	r2, [pc, #24]	@ (8000f44 <_ZN12MotorControlD1Ev+0x24>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	601a      	str	r2, [r3, #0]
{
	motor->stop();
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 fdd1 	bl	8001ada <_ZN15TB6612FNG_Motor4stopEv>
}
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	08008db8 	.word	0x08008db8

08000f48 <_ZN12MotorControlD0Ev>:
MotorControl::~MotorControl()
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
}
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff ffe5 	bl	8000f20 <_ZN12MotorControlD1Ev>
 8000f56:	2134      	movs	r1, #52	@ 0x34
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f005 f8a1 	bl	80060a0 <_ZdlPvj>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <_ZN12MotorControl3runEf>:
    HAL_UART_Transmit(uart_handle, (uint8_t*)my_message, string_length, HAL_MAX_DELAY);
    encoder->debug_message(uart_handle);
}

void MotorControl::run(float setpoint)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	ed87 0a00 	vstr	s0, [r7]
	// Store to the class
	SP = setpoint;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	683a      	ldr	r2, [r7, #0]
 8000f78:	631a      	str	r2, [r3, #48]	@ 0x30

	// Grab the latest data from the encoder.
	encoder->update();
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 f946 	bl	8001210 <_ZN13PololuEncoder6updateEv>
	float process_value = encoder->get_speed(control_frequency_Hz);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689a      	ldr	r2, [r3, #8]
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4610      	mov	r0, r2
 8000f90:	f000 f998 	bl	80012c4 <_ZN13PololuEncoder9get_speedEm>
 8000f94:	ed87 0a03 	vstr	s0, [r7, #12]

	// Get the effort and send to motor
	get_effort_sat(setpoint, process_value);
 8000f98:	edd7 0a03 	vldr	s1, [r7, #12]
 8000f9c:	ed97 0a00 	vldr	s0, [r7]
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f000 f80f 	bl	8000fc4 <_ZN12MotorControl14get_effort_satEff>
	motor->set_duty(effort, saturation_limit);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6858      	ldr	r0, [r3, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f9b3 102c 	ldrsh.w	r1, [r3, #44]	@ 0x2c
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	f000 fd10 	bl	80019dc <_ZN15TB6612FNG_Motor8set_dutyEss>
}
 8000fbc:	bf00      	nop
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <_ZN12MotorControl14get_effort_satEff>:

int16_t MotorControl::get_effort_sat(
					float setpoint,
					float process_value
					)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	@ 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fd0:	edc7 0a01 	vstr	s1, [r7, #4]
	// Calculating error for P control
	error = setpoint - process_value; // RPM, a float
 8000fd4:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	edc3 7a08 	vstr	s15, [r3, #32]

	// Calculating running error for I control
	running_error += error/(control_frequency_Hz); // RPM*s, float arithmetic cast to an int
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	ed93 6a08 	vldr	s12, [r3, #32]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	ee07 3a90 	vmov	s15, r3
 8000ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000ffe:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001002:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
//	{
//		running_error += 0;
//	}

	// Calculating error slope for D control
	error_slope = (error-last_error)*((float)control_frequency_Hz); // RPM/s, a float
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	edd3 7a07 	vldr	s15, [r3, #28]
 8001018:	ee37 7a67 	vsub.f32	s14, s14, s15
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	ee07 3a90 	vmov	s15, r3
 8001024:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001028:	ee67 7a27 	vmul.f32	s15, s14, s15
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	last_error = error;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	6a1a      	ldr	r2, [r3, #32]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	61da      	str	r2, [r3, #28]

	// Controller effort
    float P_effort = K_P*error;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	edd3 7a08 	vldr	s15, [r3, #32]
 8001046:	ee67 7a27 	vmul.f32	s15, s14, s15
 800104a:	edc7 7a07 	vstr	s15, [r7, #28]
    float I_effort = K_I*running_error;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	ed93 7a05 	vldr	s14, [r3, #20]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800105a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800105e:	edc7 7a06 	vstr	s15, [r7, #24]
    float D_effort = K_D*error_slope;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	ed93 7a06 	vldr	s14, [r3, #24]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800106e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001072:	edc7 7a05 	vstr	s15, [r7, #20]
    float effort_unsat = P_effort + I_effort + D_effort;
 8001076:	ed97 7a07 	vldr	s14, [r7, #28]
 800107a:	edd7 7a06 	vldr	s15, [r7, #24]
 800107e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001082:	ed97 7a05 	vldr	s14, [r7, #20]
 8001086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108a:	edc7 7a04 	vstr	s15, [r7, #16]

    // Saturation
	if (effort_unsat > (float)saturation_limit)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8001094:	ee07 3a90 	vmov	s15, r3
 8001098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800109c:	ed97 7a04 	vldr	s14, [r7, #16]
 80010a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a8:	dd05      	ble.n	80010b6 <_ZN12MotorControl14get_effort_satEff+0xf2>
	{
		effort = saturation_limit;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	@ 0x2e
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	859a      	strh	r2, [r3, #44]	@ 0x2c
 80010b4:	e022      	b.n	80010fc <_ZN12MotorControl14get_effort_satEff+0x138>
	}
	else if (effort_unsat < -1*(float)saturation_limit)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 80010bc:	ee07 3a90 	vmov	s15, r3
 80010c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010c4:	eef1 7a67 	vneg.f32	s15, s15
 80010c8:	ed97 7a04 	vldr	s14, [r7, #16]
 80010cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d4:	d509      	bpl.n	80010ea <_ZN12MotorControl14get_effort_satEff+0x126>
	{
		effort = -saturation_limit;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 80010dc:	b29b      	uxth	r3, r3
 80010de:	425b      	negs	r3, r3
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	859a      	strh	r2, [r3, #44]	@ 0x2c
 80010e8:	e008      	b.n	80010fc <_ZN12MotorControl14get_effort_satEff+0x138>
	}
	else
	{
		effort = (int16_t)effort_unsat;
 80010ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80010ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010f2:	ee17 3a90 	vmov	r3, s15
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	859a      	strh	r2, [r3, #44]	@ 0x2c
	}

	return effort;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
}
 8001102:	4618      	mov	r0, r3
 8001104:	3724      	adds	r7, #36	@ 0x24
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <_ZN12MotorControl12reinitializeEv>:

void MotorControl::reinitialize()
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b082      	sub	sp, #8
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
	// Stop motor
	motor->set_duty(0);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2264      	movs	r2, #100	@ 0x64
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f000 fc5c 	bl	80019dc <_ZN15TB6612FNG_Motor8set_dutyEss>

	// Reset important stuff
	last_error = 0;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f04f 0200 	mov.w	r2, #0
 800112a:	61da      	str	r2, [r3, #28]
    error = 0;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
    effort = 0;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	859a      	strh	r2, [r3, #44]	@ 0x2c
    running_error = 0; // Most important
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	625a      	str	r2, [r3, #36]	@ 0x24

    // Grab the new saturation limit.
    saturation_limit = motor->timer_handle->Instance->ARR; // Assuming no prescalar is used.
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800114c:	b21a      	sxth	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	85da      	strh	r2, [r3, #46]	@ 0x2e
}
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb>:
 * @date Jun 2, 2024
 */

#include "PololuEncoder.h"

PololuEncoder::PololuEncoder(
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	4611      	mov	r1, r2
 8001168:	ed87 0a00 	vstr	s0, [r7]
 800116c:	461a      	mov	r2, r3
 800116e:	460b      	mov	r3, r1
 8001170:	80fb      	strh	r3, [r7, #6]
 8001172:	4613      	mov	r3, r2
 8001174:	717b      	strb	r3, [r7, #5]
		)
		: timer_handle(timer_handle),
		  CPR(CPR),
		  gear_ratio(gear_ratio),
		  timer_bit_size(timer_bit_size),
		  interrupt_mode(interrupt_mode)
 8001176:	4a25      	ldr	r2, [pc, #148]	@ (800120c <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0xb0>)
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	601a      	str	r2, [r3, #0]
		: timer_handle(timer_handle),
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	68ba      	ldr	r2, [r7, #8]
 8001180:	605a      	str	r2, [r3, #4]
		  CPR(CPR),
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	88fa      	ldrh	r2, [r7, #6]
 8001186:	811a      	strh	r2, [r3, #8]
		  gear_ratio(gear_ratio),
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	60da      	str	r2, [r3, #12]
		  timer_bit_size(timer_bit_size),
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	797a      	ldrb	r2, [r7, #5]
 8001192:	741a      	strb	r2, [r3, #16]
		  interrupt_mode(interrupt_mode)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	7e3a      	ldrb	r2, [r7, #24]
 8001198:	745a      	strb	r2, [r3, #17]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2200      	movs	r2, #0
 800119e:	825a      	strh	r2, [r3, #18]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2200      	movs	r2, #0
 80011a4:	829a      	strh	r2, [r3, #20]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2200      	movs	r2, #0
 80011aa:	82da      	strh	r2, [r3, #22]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2200      	movs	r2, #0
 80011b0:	619a      	str	r2, [r3, #24]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	f04f 0200 	mov.w	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
{
	// Start encoder
	if (interrupt_mode)
 80011ba:	7e3b      	ldrb	r3, [r7, #24]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d004      	beq.n	80011ca <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0x6e>
	{
		HAL_TIM_Encoder_Start_IT(timer_handle, TIM_CHANNEL_ALL);
 80011c0:	213c      	movs	r1, #60	@ 0x3c
 80011c2:	68b8      	ldr	r0, [r7, #8]
 80011c4:	f003 fa0d 	bl	80045e2 <HAL_TIM_Encoder_Start_IT>
 80011c8:	e003      	b.n	80011d2 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0x76>
	}
	else
	{
		HAL_TIM_Encoder_Start(timer_handle, TIM_CHANNEL_ALL);
 80011ca:	213c      	movs	r1, #60	@ 0x3c
 80011cc:	68b8      	ldr	r0, [r7, #8]
 80011ce:	f003 f8e3 	bl	8004398 <HAL_TIM_Encoder_Start>
	}

	// Number of bits for the select timer
	if (timer_bit_size == 32)
 80011d2:	797b      	ldrb	r3, [r7, #5]
 80011d4:	2b20      	cmp	r3, #32
 80011d6:	d104      	bne.n	80011e2 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0x86>
	{
		max_count = 0xffffffff;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f04f 32ff 	mov.w	r2, #4294967295
 80011de:	621a      	str	r2, [r3, #32]
 80011e0:	e003      	b.n	80011ea <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0x8e>
	}
	else
	{
		max_count = 0xffff;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011e8:	621a      	str	r2, [r3, #32]
	}

	// Set pertinent values for later.
	half_max_count = max_count/2;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	6a1b      	ldr	r3, [r3, #32]
 80011ee:	085b      	lsrs	r3, r3, #1
 80011f0:	461a      	mov	r2, r3
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	625a      	str	r2, [r3, #36]	@ 0x24
	neg_half_max_count = -half_max_count;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011fa:	425a      	negs	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	08008dc8 	.word	0x08008dc8

08001210 <_ZN13PololuEncoder6updateEv>:

void PololuEncoder::update()
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	// Read encoder
	if (not interrupt_mode)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	7c5b      	ldrb	r3, [r3, #17]
 800121c:	f083 0301 	eor.w	r3, r3, #1
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b00      	cmp	r3, #0
 8001224:	d006      	beq.n	8001234 <_ZN13PololuEncoder6updateEv+0x24>
	{
		count = __HAL_TIM_GET_COUNTER(timer_handle);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800122e:	b29a      	uxth	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	82da      	strh	r2, [r3, #22]
	}
	delta = (int32_t) (count-last_count);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	8ada      	ldrh	r2, [r3, #22]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	8a9b      	ldrh	r3, [r3, #20]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	b29b      	uxth	r3, r3
 8001240:	b21a      	sxth	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	825a      	strh	r2, [r3, #18]
	last_count = count;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	8ada      	ldrh	r2, [r3, #22]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	829a      	strh	r2, [r3, #20]

	// Fix delta from timer overflow
	if (delta > half_max_count)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001254:	461a      	mov	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800125a:	429a      	cmp	r2, r3
 800125c:	dd0e      	ble.n	800127c <_ZN13PololuEncoder6updateEv+0x6c>
	{
		// We've overflowed in the negative direction.
		delta -= max_count + 1;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001264:	b29a      	uxth	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a1b      	ldr	r3, [r3, #32]
 800126a:	b29b      	uxth	r3, r3
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	b29b      	uxth	r3, r3
 8001270:	3b01      	subs	r3, #1
 8001272:	b29b      	uxth	r3, r3
 8001274:	b21a      	sxth	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	825a      	strh	r2, [r3, #18]
 800127a:	e015      	b.n	80012a8 <_ZN13PololuEncoder6updateEv+0x98>
	}
	else if (delta < neg_half_max_count)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001282:	461a      	mov	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001288:	429a      	cmp	r2, r3
 800128a:	da0d      	bge.n	80012a8 <_ZN13PololuEncoder6updateEv+0x98>
	{
	    // We've overflowed in the positive direciton.
		delta += max_count + 1;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001292:	b29a      	uxth	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a1b      	ldr	r3, [r3, #32]
 8001298:	b29b      	uxth	r3, r3
 800129a:	4413      	add	r3, r2
 800129c:	b29b      	uxth	r3, r3
 800129e:	3301      	adds	r3, #1
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	b21a      	sxth	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	825a      	strh	r2, [r3, #18]
	}

	// Finish up
	position += delta;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80012b2:	441a      	add	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	619a      	str	r2, [r3, #24]
}
 80012b8:	bf00      	nop
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <_ZN13PololuEncoder9get_speedEm>:
{
	return delta;
}

float PololuEncoder::get_speed(uint32_t control_frequency_Hz)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
	float numerator = delta*(float)control_frequency_Hz*60;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80012d4:	ee07 3a90 	vmov	s15, r3
 80012d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	ee07 3a90 	vmov	s15, r3
 80012e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ea:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800133c <_ZN13PololuEncoder9get_speedEm+0x78>
 80012ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012f2:	edc7 7a03 	vstr	s15, [r7, #12]
	float denominator = (float)CPR*gear_ratio;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80012fc:	ee07 3a90 	vmov	s15, r3
 8001300:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	edd3 7a03 	vldr	s15, [r3, #12]
 800130a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800130e:	edc7 7a02 	vstr	s15, [r7, #8]
    speed = numerator/denominator; //RPM
 8001312:	edd7 6a03 	vldr	s13, [r7, #12]
 8001316:	ed97 7a02 	vldr	s14, [r7, #8]
 800131a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	edc3 7a07 	vstr	s15, [r3, #28]
    return speed;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69db      	ldr	r3, [r3, #28]
 8001328:	ee07 3a90 	vmov	s15, r3
}
 800132c:	eeb0 0a67 	vmov.f32	s0, s15
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	42700000 	.word	0x42700000

08001340 <_ZN13PololuEncoderD1Ev>:
                             VALUE_WIDTH, delta,
							 VALUE_WIDTH+3, speed);
    HAL_UART_Transmit(uart_handle, (uint8_t*)my_message, string_length, HAL_MAX_DELAY);
}

PololuEncoder::~PololuEncoder()
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	4a0c      	ldr	r2, [pc, #48]	@ (800137c <_ZN13PololuEncoderD1Ev+0x3c>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	601a      	str	r2, [r3, #0]
{
	// Stop encoder
	if (interrupt_mode)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	7c5b      	ldrb	r3, [r3, #17]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d006      	beq.n	8001364 <_ZN13PololuEncoderD1Ev+0x24>
	{
		HAL_TIM_Encoder_Stop_IT(timer_handle, TIM_CHANNEL_ALL);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	213c      	movs	r1, #60	@ 0x3c
 800135c:	4618      	mov	r0, r3
 800135e:	f003 f9ee 	bl	800473e <HAL_TIM_Encoder_Stop_IT>
 8001362:	e005      	b.n	8001370 <_ZN13PololuEncoderD1Ev+0x30>
	}
	else
	{
		HAL_TIM_Encoder_Stop(timer_handle, TIM_CHANNEL_ALL);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	213c      	movs	r1, #60	@ 0x3c
 800136a:	4618      	mov	r0, r3
 800136c:	f003 f8a2 	bl	80044b4 <HAL_TIM_Encoder_Stop>
	}
}
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	08008dc8 	.word	0x08008dc8

08001380 <_ZN13PololuEncoderD0Ev>:
PololuEncoder::~PololuEncoder()
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
}
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ffd9 	bl	8001340 <_ZN13PololuEncoderD1Ev>
 800138e:	212c      	movs	r1, #44	@ 0x2c
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f004 fe85 	bl	80060a0 <_ZdlPvj>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <_ZN11PololuServoC1EP17TIM_HandleTypeDefmtmtttt>:
 * @date Jun 3, 2024
 */

#include "PololuServo.h"

PololuServo::PololuServo(TIM_HandleTypeDef* timer_handle,
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
 80013ac:	807b      	strh	r3, [r7, #2]
						  PWM_period_us(PWM_period_us),
						  CPU_clock_speed_MHz(CPU_clock_speed_MHz),
						  maximum_angle_magnitude(maximum_angle_magnitude),
						  full_left_pulse_width_us(full_left_pulse_width_us),
						  neutral_pulse_width_us(neutral_pulse_width_us),
						  full_right_pulse_width_us(full_right_pulse_width_us)
 80013ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001428 <_ZN11PololuServoC1EP17TIM_HandleTypeDefmtmtttt+0x88>)
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	601a      	str	r2, [r3, #0]
						: timer_handle(timer_handle),
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	605a      	str	r2, [r3, #4]
						  timer_channel(timer_channel),
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	609a      	str	r2, [r3, #8]
						  PWM_period_us(PWM_period_us),
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	887a      	ldrh	r2, [r7, #2]
 80013c4:	819a      	strh	r2, [r3, #12]
						  CPU_clock_speed_MHz(CPU_clock_speed_MHz),
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	611a      	str	r2, [r3, #16]
						  maximum_angle_magnitude(maximum_angle_magnitude),
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	8bba      	ldrh	r2, [r7, #28]
 80013d0:	829a      	strh	r2, [r3, #20]
						  full_left_pulse_width_us(full_left_pulse_width_us),
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	8c3a      	ldrh	r2, [r7, #32]
 80013d6:	82da      	strh	r2, [r3, #22]
						  neutral_pulse_width_us(neutral_pulse_width_us),
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80013dc:	831a      	strh	r2, [r3, #24]
						  full_right_pulse_width_us(full_right_pulse_width_us)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80013e2:	835a      	strh	r2, [r3, #26]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80013ea:	839a      	strh	r2, [r3, #28]
{
	// Set correct PWM period.
	timer_handle->Instance->ARR = autoreload_value;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	8b9a      	ldrh	r2, [r3, #28]
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	62da      	str	r2, [r3, #44]	@ 0x2c
	timer_handle->Instance->PSC = (CPU_clock_speed_MHz * PWM_period_us)/autoreload_value;
 80013f6:	887b      	ldrh	r3, [r7, #2]
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	fb03 f202 	mul.w	r2, r3, r2
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	8b9b      	ldrh	r3, [r3, #28]
 8001402:	4619      	mov	r1, r3
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	fbb2 f2f1 	udiv	r2, r2, r1
 800140c:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_TIM_PWM_Start(timer_handle, timer_channel);
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	68b8      	ldr	r0, [r7, #8]
 8001412:	f002 fbe5 	bl	8003be0 <HAL_TIM_PWM_Start>

	// Home servo
	set_position(0);
 8001416:	2100      	movs	r1, #0
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f000 f807 	bl	800142c <_ZN11PololuServo12set_positionEs>
}
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	08008dd8 	.word	0x08008dd8

0800142c <_ZN11PololuServo12set_positionEs>:

void PololuServo::set_position(int16_t position_deg) // should be int8_t
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	807b      	strh	r3, [r7, #2]
	// Saturate requested position
	if (position_deg > maximum_angle_magnitude){
 8001438:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	8a92      	ldrh	r2, [r2, #20]
 8001440:	4293      	cmp	r3, r2
 8001442:	dd03      	ble.n	800144c <_ZN11PololuServo12set_positionEs+0x20>
		position_deg = maximum_angle_magnitude;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	8a9b      	ldrh	r3, [r3, #20]
 8001448:	807b      	strh	r3, [r7, #2]
 800144a:	e00b      	b.n	8001464 <_ZN11PololuServo12set_positionEs+0x38>
	}
	else if (position_deg < -maximum_angle_magnitude)
 800144c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	8a9b      	ldrh	r3, [r3, #20]
 8001454:	425b      	negs	r3, r3
 8001456:	429a      	cmp	r2, r3
 8001458:	da04      	bge.n	8001464 <_ZN11PololuServo12set_positionEs+0x38>
	{
		position_deg = -maximum_angle_magnitude;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	8a9b      	ldrh	r3, [r3, #20]
 800145e:	425b      	negs	r3, r3
 8001460:	b29b      	uxth	r3, r3
 8001462:	807b      	strh	r3, [r7, #2]
	}

	// Convert the postion requested from degrees to a pulse width in microseconds.
	float slope;
	if (position_deg>=0)
 8001464:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001468:	2b00      	cmp	r3, #0
 800146a:	db18      	blt.n	800149e <_ZN11PololuServo12set_positionEs+0x72>
	{
		slope = ((float)full_right_pulse_width_us - (float)neutral_pulse_width_us)/(float)maximum_angle_magnitude;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	8b5b      	ldrh	r3, [r3, #26]
 8001470:	ee07 3a90 	vmov	s15, r3
 8001474:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	8b1b      	ldrh	r3, [r3, #24]
 800147c:	ee07 3a90 	vmov	s15, r3
 8001480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001484:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	8a9b      	ldrh	r3, [r3, #20]
 800148c:	ee07 3a90 	vmov	s15, r3
 8001490:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001494:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001498:	edc7 7a03 	vstr	s15, [r7, #12]
 800149c:	e017      	b.n	80014ce <_ZN11PololuServo12set_positionEs+0xa2>
	}
	else
	{
		slope = ((float)neutral_pulse_width_us - (float)full_left_pulse_width_us)/(float)maximum_angle_magnitude;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	8b1b      	ldrh	r3, [r3, #24]
 80014a2:	ee07 3a90 	vmov	s15, r3
 80014a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	8adb      	ldrh	r3, [r3, #22]
 80014ae:	ee07 3a90 	vmov	s15, r3
 80014b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014b6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	8a9b      	ldrh	r3, [r3, #20]
 80014be:	ee07 3a90 	vmov	s15, r3
 80014c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014ca:	edc7 7a03 	vstr	s15, [r7, #12]
	//	{
	//		slope *= -1;
	//	}

	// Calculate compare value from pulse width
	uint16_t pulse_width = slope*position_deg + neutral_pulse_width_us;
 80014ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80014d2:	ee07 3a90 	vmov	s15, r3
 80014d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014da:	edd7 7a03 	vldr	s15, [r7, #12]
 80014de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	8b1b      	ldrh	r3, [r3, #24]
 80014e6:	ee07 3a90 	vmov	s15, r3
 80014ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014f6:	ee17 3a90 	vmov	r3, s15
 80014fa:	817b      	strh	r3, [r7, #10]
	uint16_t compare_value = pulse_width*autoreload_value/PWM_period_us;
 80014fc:	897b      	ldrh	r3, [r7, #10]
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	8b92      	ldrh	r2, [r2, #28]
 8001502:	fb02 f303 	mul.w	r3, r2, r3
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	8992      	ldrh	r2, [r2, #12]
 800150a:	fb93 f3f2 	sdiv	r3, r3, r2
 800150e:	813b      	strh	r3, [r7, #8]
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d105      	bne.n	8001524 <_ZN11PololuServo12set_positionEs+0xf8>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	893a      	ldrh	r2, [r7, #8]
 8001520:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001522:	e018      	b.n	8001556 <_ZN11PololuServo12set_positionEs+0x12a>
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2b04      	cmp	r3, #4
 800152a:	d105      	bne.n	8001538 <_ZN11PololuServo12set_positionEs+0x10c>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	893a      	ldrh	r2, [r7, #8]
 8001534:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001536:	e00e      	b.n	8001556 <_ZN11PololuServo12set_positionEs+0x12a>
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	2b08      	cmp	r3, #8
 800153e:	d105      	bne.n	800154c <_ZN11PololuServo12set_positionEs+0x120>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	893a      	ldrh	r2, [r7, #8]
 8001548:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800154a:	e004      	b.n	8001556 <_ZN11PololuServo12set_positionEs+0x12a>
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	893a      	ldrh	r2, [r7, #8]
 8001554:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001556:	bf00      	nop
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
	...

08001564 <_ZN11PololuServoD1Ev>:

PololuServo::~PololuServo() {
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	4a04      	ldr	r2, [pc, #16]	@ (8001580 <_ZN11PololuServoD1Ev+0x1c>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	08008dd8 	.word	0x08008dd8

08001584 <_ZN11PololuServoD0Ev>:
PololuServo::~PololuServo() {
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
}
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ffe9 	bl	8001564 <_ZN11PololuServoD1Ev>
 8001592:	2120      	movs	r1, #32
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f004 fd83 	bl	80060a0 <_ZdlPvj>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb>:
 * @param neutral_us_width Width of the neutral signal in microseconds.
 * @param full_forward_us_width Width of the full forward signal in microseconds.
 * @param rescale_forward_magnitude Maximum value for rescaling the forward signal. Overridden if fed into RemoteControlControl.
 * @param rescale_reverse_magnitude Minimum value for rescaling the reverse signal. Overridden if fed into RemoteControlControl.
 */
RCChannel::RCChannel(
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	4613      	mov	r3, r2
 80015b2:	80fb      	strh	r3, [r7, #6]
	full_reverse_us_width(full_reverse_us_width),
	neutral_us_width(neutral_us_width),
	full_forward_us_width(full_forward_us_width),
	rescale_forward_magnitude(rescale_forward_magnitude),
	rescale_reverse_magnitude(rescale_reverse_magnitude),
	saturate(saturate)
 80015b4:	4a3c      	ldr	r2, [pc, #240]	@ (80016a8 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0x104>)
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2200      	movs	r2, #0
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2200      	movs	r2, #0
 80015ca:	60da      	str	r2, [r3, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2200      	movs	r2, #0
 80015d0:	611a      	str	r2, [r3, #16]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2200      	movs	r2, #0
 80015d6:	615a      	str	r2, [r3, #20]
	pin_group(pin_group),
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	619a      	str	r2, [r3, #24]
	pin(pin),
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	88fa      	ldrh	r2, [r7, #6]
 80015e2:	839a      	strh	r2, [r3, #28]
	timer_handle(timer_handle),
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	621a      	str	r2, [r3, #32]
	timer_channel(timer_channel),
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	6a3a      	ldr	r2, [r7, #32]
 80015ee:	625a      	str	r2, [r3, #36]	@ 0x24
	RC_signal_period_us(RC_signal_period_us),
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015f4:	629a      	str	r2, [r3, #40]	@ 0x28
	CPU_clock_speed_MHz(CPU_clock_speed_MHz),
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015fa:	62da      	str	r2, [r3, #44]	@ 0x2c
	full_reverse_us_width(full_reverse_us_width),
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001600:	631a      	str	r2, [r3, #48]	@ 0x30
	neutral_us_width(neutral_us_width),
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001606:	635a      	str	r2, [r3, #52]	@ 0x34
	full_forward_us_width(full_forward_us_width),
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800160c:	639a      	str	r2, [r3, #56]	@ 0x38
	rescale_forward_magnitude(rescale_forward_magnitude),
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001612:	63da      	str	r2, [r3, #60]	@ 0x3c
	rescale_reverse_magnitude(rescale_reverse_magnitude),
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001618:	641a      	str	r2, [r3, #64]	@ 0x40
	saturate(saturate)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001620:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
{
	// Critical. Starts the first interrupt.
	HAL_TIM_IC_Start_IT(timer_handle, timer_channel);
 800162c:	6a39      	ldr	r1, [r7, #32]
 800162e:	6838      	ldr	r0, [r7, #0]
 8001630:	f002 fc44 	bl	8003ebc <HAL_TIM_IC_Start_IT>

	// Set minuend depending on whether it's a 16-bit or 32-bit timer.
	// This is specific to the STM32F411CUE6!!
	if (((timer_handle->Instance) == TIM2) or ((timer_handle->Instance) == TIM5))
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800163c:	d004      	beq.n	8001648 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0xa4>
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a1a      	ldr	r2, [pc, #104]	@ (80016ac <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0x108>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d104      	bne.n	8001652 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0xae>
	{
		minuend = 0xffffffff;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f04f 32ff 	mov.w	r2, #4294967295
 800164e:	649a      	str	r2, [r3, #72]	@ 0x48
 8001650:	e003      	b.n	800165a <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0xb6>
	}
	else
	{
		minuend = 0xffff;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001658:	649a      	str	r2, [r3, #72]	@ 0x48
	}

	// For later scaling
	uint32_t prescalar = timer_handle->Instance->PSC + 1;
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001660:	3301      	adds	r3, #1
 8001662:	617b      	str	r3, [r7, #20]
	float refClock = CPU_clock_speed_MHz/prescalar;
 8001664:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	fbb2 f3f3 	udiv	r3, r2, r3
 800166c:	ee07 3a90 	vmov	s15, r3
 8001670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001674:	edc7 7a04 	vstr	s15, [r7, #16]
	mFactor = 1/refClock;
 8001678:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800167c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001680:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

	// Needed later
	forward_range = full_forward_us_width - neutral_us_width;
 800168a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800168c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800168e:	1ad2      	subs	r2, r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	659a      	str	r2, [r3, #88]	@ 0x58
	reverse_range = neutral_us_width - full_reverse_us_width;
 8001694:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001698:	1ad2      	subs	r2, r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	655a      	str	r2, [r3, #84]	@ 0x54
}
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	4618      	mov	r0, r3
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	08008de8 	.word	0x08008de8
 80016ac:	40000c00 	.word	0x40000c00

080016b0 <_ZN9RCChannel8callbackEv>:
 * 
 * @note This function assumes that the timer handle and channel have been properly initialized.
 * Please set the associated timer channel to input capture mode, direct. 
 * Leave the auto-reload value as large as possible.
 */
void RCChannel::callback(){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	// Was it a rising edge or a falling edge?
	GPIO_PinState pinState = HAL_GPIO_ReadPin(pin_group, pin);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	699a      	ldr	r2, [r3, #24]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	8b9b      	ldrh	r3, [r3, #28]
 80016c0:	4619      	mov	r1, r3
 80016c2:	4610      	mov	r0, r2
 80016c4:	f001 fd28 	bl	8003118 <HAL_GPIO_ReadPin>
 80016c8:	4603      	mov	r3, r0
 80016ca:	73fb      	strb	r3, [r7, #15]

	if(pinState == GPIO_PIN_SET) // Rising edge
 80016cc:	7bfb      	ldrb	r3, [r7, #15]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d10c      	bne.n	80016ec <_ZN9RCChannel8callbackEv+0x3c>
		{
			// Read
			first_value = HAL_TIM_ReadCapturedValue(timer_handle, timer_channel);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1a      	ldr	r2, [r3, #32]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016da:	4619      	mov	r1, r3
 80016dc:	4610      	mov	r0, r2
 80016de:	f003 fbf9 	bl	8004ed4 <HAL_TIM_ReadCapturedValue>
 80016e2:	4603      	mov	r3, r0
 80016e4:	461a      	mov	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	605a      	str	r2, [r3, #4]
		}

 	// Finally
 	first_capture = true;
 	}
}
 80016ea:	e07a      	b.n	80017e2 <_ZN9RCChannel8callbackEv+0x132>
 		second_value = HAL_TIM_ReadCapturedValue(timer_handle, timer_channel);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a1a      	ldr	r2, [r3, #32]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f4:	4619      	mov	r1, r3
 80016f6:	4610      	mov	r0, r2
 80016f8:	f003 fbec 	bl	8004ed4 <HAL_TIM_ReadCapturedValue>
 80016fc:	4603      	mov	r3, r0
 80016fe:	461a      	mov	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	609a      	str	r2, [r3, #8]
 		if(first_value > second_value)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	429a      	cmp	r2, r3
 800170e:	dd0c      	ble.n	800172a <_ZN9RCChannel8callbackEv+0x7a>
 			difference = minuend - first_value + second_value + 1;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	6852      	ldr	r2, [r2, #4]
 8001718:	1a9b      	subs	r3, r3, r2
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6892      	ldr	r2, [r2, #8]
 800171e:	4413      	add	r3, r2
 8001720:	3301      	adds	r3, #1
 8001722:	461a      	mov	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	e006      	b.n	8001738 <_ZN9RCChannel8callbackEv+0x88>
 			difference = second_value - first_value;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	1ad2      	subs	r2, r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	60da      	str	r2, [r3, #12]
 		us_width = difference;//*mFactor;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	611a      	str	r2, [r3, #16]
		int32_t centered_value = us_width - neutral_us_width;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691a      	ldr	r2, [r3, #16]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	60bb      	str	r3, [r7, #8]
 		if(centered_value >= 0)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	2b00      	cmp	r3, #0
 8001750:	db23      	blt.n	800179a <_ZN9RCChannel8callbackEv+0xea>
 			value = centered_value*rescale_forward_magnitude/forward_range;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	fb03 f202 	mul.w	r2, r3, r2
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001760:	fb92 f2f3 	sdiv	r2, r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	615a      	str	r2, [r3, #20]
			if(value>rescale_forward_magnitude && saturate)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	695a      	ldr	r2, [r3, #20]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001770:	429a      	cmp	r2, r3
 8001772:	dd0d      	ble.n	8001790 <_ZN9RCChannel8callbackEv+0xe0>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800177a:	2b00      	cmp	r3, #0
 800177c:	d008      	beq.n	8001790 <_ZN9RCChannel8callbackEv+0xe0>
				value = rescale_forward_magnitude;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	615a      	str	r2, [r3, #20]
	 			saturate_flag = true;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2201      	movs	r2, #1
 800178a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800178e:	e024      	b.n	80017da <_ZN9RCChannel8callbackEv+0x12a>
	 			saturate_flag = false;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001798:	e01f      	b.n	80017da <_ZN9RCChannel8callbackEv+0x12a>
			value =  centered_value*rescale_reverse_magnitude/reverse_range;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	fb03 f202 	mul.w	r2, r3, r2
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017a8:	fb92 f2f3 	sdiv	r2, r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	615a      	str	r2, [r3, #20]
	 		if(value<-rescale_reverse_magnitude)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	695a      	ldr	r2, [r3, #20]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b8:	425b      	negs	r3, r3
 80017ba:	429a      	cmp	r2, r3
 80017bc:	da09      	bge.n	80017d2 <_ZN9RCChannel8callbackEv+0x122>
	 			value = -rescale_reverse_magnitude;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c2:	425a      	negs	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	615a      	str	r2, [r3, #20]
	 			saturate_flag = true;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80017d0:	e003      	b.n	80017da <_ZN9RCChannel8callbackEv+0x12a>
	 			saturate_flag = false;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 	first_capture = true;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <_ZN9RCChannelD1Ev>:
/**
 * @brief Destructor for the RCChannel class.
 * 
 * This destructor stops the interrupts for the RCChannel object.
 */
RCChannel::~RCChannel() {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	4a07      	ldr	r2, [pc, #28]	@ (8001814 <_ZN9RCChannelD1Ev+0x28>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	601a      	str	r2, [r3, #0]
	// Stop interrupts
	HAL_TIM_IC_Stop_IT(timer_handle, timer_channel);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a1a      	ldr	r2, [r3, #32]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001802:	4619      	mov	r1, r3
 8001804:	4610      	mov	r0, r2
 8001806:	f002 fc73 	bl	80040f0 <HAL_TIM_IC_Stop_IT>
}
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	08008de8 	.word	0x08008de8

08001818 <_ZN9RCChannelD0Ev>:
RCChannel::~RCChannel() {
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
}
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ffe3 	bl	80017ec <_ZN9RCChannelD1Ev>
 8001826:	215c      	movs	r1, #92	@ 0x5c
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f004 fc39 	bl	80060a0 <_ZdlPvj>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4618      	mov	r0, r3
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <_ZN20RemoteControlControlC1EP9RCChannelP12MotorControlt>:
/**
 * @brief Constructs a RemoteControlControl object with the given remote control channel and motor driver.
 * @param rc_channel Pointer to the RCChannel object.
 * @param motor Pointer to a TB6612FNG_Motor object.
 */
RemoteControlControl::RemoteControlControl(
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
 8001844:	807b      	strh	r3, [r7, #2]
		RCChannel* rc_channel,
		MotorControl* motor_controller,
		uint16_t maximum_speed)
	: rc_channel(rc_channel),
	  motor_controller(motor_controller),
	  maximum_speed(maximum_speed)
 8001846:	4a09      	ldr	r2, [pc, #36]	@ (800186c <_ZN20RemoteControlControlC1EP9RCChannelP12MotorControlt+0x34>)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	601a      	str	r2, [r3, #0]
	: rc_channel(rc_channel),
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	605a      	str	r2, [r3, #4]
	  motor_controller(motor_controller),
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	609a      	str	r2, [r3, #8]
	  maximum_speed(maximum_speed)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	887a      	ldrh	r2, [r7, #2]
 800185c:	819a      	strh	r2, [r3, #12]
{
//	// Reassign the magnitudes.
//	rc_channel->rescale_forward_magnitude = maximum_speed;
//	rc_channel->rescale_reverse_magnitude = maximum_speed;
}
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4618      	mov	r0, r3
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	08008df8 	.word	0x08008df8

08001870 <_ZN20RemoteControlControlD1Ev>:
}

/**
 * @brief Destructs the RemoteControlControl object and releases any dynamically allocated resources.
 */
RemoteControlControl::~RemoteControlControl()
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	4a13      	ldr	r2, [pc, #76]	@ (80018c8 <_ZN20RemoteControlControlD1Ev+0x58>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	601a      	str	r2, [r3, #0]
{
	// Deallocate memory for rc_channel if it was dynamically allocated
	if (rc_channel != nullptr)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00b      	beq.n	800189e <_ZN20RemoteControlControlD1Ev+0x2e>
	{
		delete rc_channel;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d004      	beq.n	8001898 <_ZN20RemoteControlControlD1Ev+0x28>
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	3204      	adds	r2, #4
 8001892:	6812      	ldr	r2, [r2, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	4790      	blx	r2
		rc_channel = nullptr; // Optional: Set to nullptr to avoid dangling pointers
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	605a      	str	r2, [r3, #4]
	}

	// Deallocate memory for motor if it was dynamically allocated
	if (motor_controller != nullptr)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00b      	beq.n	80018be <_ZN20RemoteControlControlD1Ev+0x4e>
	{
		delete motor_controller;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d004      	beq.n	80018b8 <_ZN20RemoteControlControlD1Ev+0x48>
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	3204      	adds	r2, #4
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	4790      	blx	r2
		motor_controller = nullptr; // Optional: Set to nullptr to avoid dangling pointers
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
	}
}
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	08008df8 	.word	0x08008df8

080018cc <_ZN20RemoteControlControlD0Ev>:
RemoteControlControl::~RemoteControlControl()
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
}
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ffcb 	bl	8001870 <_ZN20RemoteControlControlD1Ev>
 80018da:	2114      	movs	r1, #20
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f004 fbdf 	bl	80060a0 <_ZdlPvj>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4618      	mov	r0, r3
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm>:
 * @param timer_channel The channel number to be used with the timer (like TIM_CHANNEL_1).
 * @param CPU_clock_speed_MHz The CPU clock speed in MHz (like 96).
 * @param PWM_frequency_Hz The PWM frequency in Hz (20,000 to 100,000 allowed).
 */

TB6612FNG_Motor::TB6612FNG_Motor(
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	603b      	str	r3, [r7, #0]
 80018f8:	4613      	mov	r3, r2
 80018fa:	80fb      	strh	r3, [r7, #6]

	: IN1_pin_group(IN1_pin_group), IN1_pin(IN1_pin),
	  IN2_pin_group(IN2_pin_group), IN2_pin(IN2_pin),
	  timer_handle(timer_handle), timer_channel(timer_channel),
	  CPU_clock_speed_MHz(CPU_clock_speed_MHz),
	  PWM_frequency_Hz(PWM_frequency_Hz)
 80018fc:	4a23      	ldr	r2, [pc, #140]	@ (800198c <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa0>)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	601a      	str	r2, [r3, #0]
	: IN1_pin_group(IN1_pin_group), IN1_pin(IN1_pin),
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	68ba      	ldr	r2, [r7, #8]
 8001906:	605a      	str	r2, [r3, #4]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	88fa      	ldrh	r2, [r7, #6]
 800190c:	811a      	strh	r2, [r3, #8]
	  IN2_pin_group(IN2_pin_group), IN2_pin(IN2_pin),
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	60da      	str	r2, [r3, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8b3a      	ldrh	r2, [r7, #24]
 8001918:	821a      	strh	r2, [r3, #16]
	  timer_handle(timer_handle), timer_channel(timer_channel),
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	69fa      	ldr	r2, [r7, #28]
 800191e:	615a      	str	r2, [r3, #20]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	6a3a      	ldr	r2, [r7, #32]
 8001924:	619a      	str	r2, [r3, #24]
	  CPU_clock_speed_MHz(CPU_clock_speed_MHz),
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800192a:	61da      	str	r2, [r3, #28]
	  PWM_frequency_Hz(PWM_frequency_Hz)
 800192c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800192e:	b29a      	uxth	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	841a      	strh	r2, [r3, #32]
{
	// Make sure the motor is off to start
	stop();
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f000 f8d0 	bl	8001ada <_ZN15TB6612FNG_Motor4stopEv>

	// Make sure the PWM frequency is within bounds
	if(PWM_frequency_Hz < 20000)
 800193a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800193c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001940:	4293      	cmp	r3, r2
 8001942:	d803      	bhi.n	800194c <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0x60>
	{
		// Too low. Human can hear this.
		PWM_frequency_Hz = 20000;
 8001944:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001948:	62bb      	str	r3, [r7, #40]	@ 0x28
 800194a:	e005      	b.n	8001958 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0x6c>
	}
	else if(PWM_frequency_Hz > 100000)
 800194c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800194e:	4a10      	ldr	r2, [pc, #64]	@ (8001990 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa4>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d901      	bls.n	8001958 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0x6c>
	{
		// Very high. May interfere with other tasks.
		PWM_frequency_Hz = 100000;
 8001954:	4b0e      	ldr	r3, [pc, #56]	@ (8001990 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa4>)
 8001956:	62bb      	str	r3, [r7, #40]	@ 0x28
	}

	// Set the auto-reload value based on the CPU clock speed and the desired PWM frequency
	auto_reload_value =( CPU_clock_speed_MHz * 1000000 / PWM_frequency_Hz ) - 1;
 8001958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800195a:	4a0e      	ldr	r2, [pc, #56]	@ (8001994 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa8>)
 800195c:	fb03 f202 	mul.w	r2, r3, r2
 8001960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001962:	fbb2 f3f3 	udiv	r3, r2, r3
 8001966:	b29b      	uxth	r3, r3
 8001968:	3b01      	subs	r3, #1
 800196a:	b29a      	uxth	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	845a      	strh	r2, [r3, #34]	@ 0x22
	timer_handle->Instance->ARR = auto_reload_value;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Start the PWM generation
	start();
 800197a:	68f8      	ldr	r0, [r7, #12]
 800197c:	f000 f89d 	bl	8001aba <_ZN15TB6612FNG_Motor5startEv>
}
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	08008e08 	.word	0x08008e08
 8001990:	000186a0 	.word	0x000186a0
 8001994:	000f4240 	.word	0x000f4240

08001998 <_ZN15TB6612FNG_MotorD1Ev>:

/**
 * @brief Destructor for the TB6612FNG_Motor class.
 */
TB6612FNG_Motor::~TB6612FNG_Motor()
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	4a05      	ldr	r2, [pc, #20]	@ (80019b8 <_ZN15TB6612FNG_MotorD1Ev+0x20>)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	601a      	str	r2, [r3, #0]
{
	stop();
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 f897 	bl	8001ada <_ZN15TB6612FNG_Motor4stopEv>
}
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	08008e08 	.word	0x08008e08

080019bc <_ZN15TB6612FNG_MotorD0Ev>:
TB6612FNG_Motor::~TB6612FNG_Motor()
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
}
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff ffe7 	bl	8001998 <_ZN15TB6612FNG_MotorD1Ev>
 80019ca:	2124      	movs	r1, #36	@ 0x24
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f004 fb67 	bl	80060a0 <_ZdlPvj>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <_ZN15TB6612FNG_Motor8set_dutyEss>:
/**
 * @brief Sets the duty cycle of the motor.
 * @param speed The duty cycle value, ranging from -100 to 100 by default.
 */
void TB6612FNG_Motor::set_duty(int16_t duty, int16_t maximum_value)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	807b      	strh	r3, [r7, #2]
 80019e8:	4613      	mov	r3, r2
 80019ea:	803b      	strh	r3, [r7, #0]
	// Raise the appropriate pins
	if(duty >= 0)
 80019ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	db10      	blt.n	8001a16 <_ZN15TB6612FNG_Motor8set_dutyEss+0x3a>
	{
		HAL_GPIO_WritePin(IN1_pin_group, IN1_pin, GPIO_PIN_SET);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6858      	ldr	r0, [r3, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	891b      	ldrh	r3, [r3, #8]
 80019fc:	2201      	movs	r2, #1
 80019fe:	4619      	mov	r1, r3
 8001a00:	f001 fba2 	bl	8003148 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_pin_group, IN2_pin, GPIO_PIN_RESET);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68d8      	ldr	r0, [r3, #12]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	8a1b      	ldrh	r3, [r3, #16]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f001 fb9a 	bl	8003148 <HAL_GPIO_WritePin>
 8001a14:	e00f      	b.n	8001a36 <_ZN15TB6612FNG_Motor8set_dutyEss+0x5a>
	}
	else
	{
		HAL_GPIO_WritePin(IN1_pin_group, IN1_pin, GPIO_PIN_RESET);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6858      	ldr	r0, [r3, #4]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	891b      	ldrh	r3, [r3, #8]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	4619      	mov	r1, r3
 8001a22:	f001 fb91 	bl	8003148 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_pin_group, IN2_pin, GPIO_PIN_SET);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68d8      	ldr	r0, [r3, #12]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	8a1b      	ldrh	r3, [r3, #16]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	4619      	mov	r1, r3
 8001a32:	f001 fb89 	bl	8003148 <HAL_GPIO_WritePin>
	}

	uint16_t duty_magnitude;
	if(duty<0)
 8001a36:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	da03      	bge.n	8001a46 <_ZN15TB6612FNG_Motor8set_dutyEss+0x6a>
	{
		duty_magnitude = duty*-1;
 8001a3e:	887b      	ldrh	r3, [r7, #2]
 8001a40:	425b      	negs	r3, r3
 8001a42:	81fb      	strh	r3, [r7, #14]
 8001a44:	e001      	b.n	8001a4a <_ZN15TB6612FNG_Motor8set_dutyEss+0x6e>
	}
	else
	{
		duty_magnitude = duty;
 8001a46:	887b      	ldrh	r3, [r7, #2]
 8001a48:	81fb      	strh	r3, [r7, #14]
	}

	// Check if duty cycle is within bounds
	if(duty_magnitude > maximum_value)
 8001a4a:	89fa      	ldrh	r2, [r7, #14]
 8001a4c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	dd01      	ble.n	8001a58 <_ZN15TB6612FNG_Motor8set_dutyEss+0x7c>
	{
		duty = maximum_value;
 8001a54:	883b      	ldrh	r3, [r7, #0]
 8001a56:	807b      	strh	r3, [r7, #2]
	}


	// Set the compare value
	uint16_t compare_value = duty_magnitude * auto_reload_value / maximum_value;
 8001a58:	89fb      	ldrh	r3, [r7, #14]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8001a5e:	fb03 f202 	mul.w	r2, r3, r2
 8001a62:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001a66:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a6a:	81bb      	strh	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d105      	bne.n	8001a80 <_ZN15TB6612FNG_Motor8set_dutyEss+0xa4>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	89ba      	ldrh	r2, [r7, #12]
 8001a7c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001a7e:	e018      	b.n	8001ab2 <_ZN15TB6612FNG_Motor8set_dutyEss+0xd6>
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	2b04      	cmp	r3, #4
 8001a86:	d105      	bne.n	8001a94 <_ZN15TB6612FNG_Motor8set_dutyEss+0xb8>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	89ba      	ldrh	r2, [r7, #12]
 8001a90:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001a92:	e00e      	b.n	8001ab2 <_ZN15TB6612FNG_Motor8set_dutyEss+0xd6>
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d105      	bne.n	8001aa8 <_ZN15TB6612FNG_Motor8set_dutyEss+0xcc>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	89ba      	ldrh	r2, [r7, #12]
 8001aa4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001aa6:	e004      	b.n	8001ab2 <_ZN15TB6612FNG_Motor8set_dutyEss+0xd6>
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	89ba      	ldrh	r2, [r7, #12]
 8001ab0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <_ZN15TB6612FNG_Motor5startEv>:

/**
 * @brief starts the motor by starting PWM generation.
 */
void TB6612FNG_Motor::start()
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(timer_handle, timer_channel);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	4619      	mov	r1, r3
 8001acc:	4610      	mov	r0, r2
 8001ace:	f002 f887 	bl	8003be0 <HAL_TIM_PWM_Start>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <_ZN15TB6612FNG_Motor4stopEv>:

/**
 * @brief stops the motor by stopping PWM generation.
 */
void TB6612FNG_Motor::stop()
{	
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(IN1_pin_group, IN1_pin, GPIO_PIN_RESET);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6858      	ldr	r0, [r3, #4]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	891b      	ldrh	r3, [r3, #8]
 8001aea:	2200      	movs	r2, #0
 8001aec:	4619      	mov	r1, r3
 8001aee:	f001 fb2b 	bl	8003148 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_pin_group, IN2_pin, GPIO_PIN_RESET);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68d8      	ldr	r0, [r3, #12]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	8a1b      	ldrh	r3, [r3, #16]
 8001afa:	2200      	movs	r2, #0
 8001afc:	4619      	mov	r1, r3
 8001afe:	f001 fb23 	bl	8003148 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(timer_handle, timer_channel);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	695a      	ldr	r2, [r3, #20]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	f002 f917 	bl	8003d40 <HAL_TIM_PWM_Stop>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <HAL_GPIO_EXTI_Callback>:
RemoteControlControl* Steering;
PololuEncoder* My_Encoder;
MotorControl* My_Controller;
PololuServo* My_Servo;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	80fb      	strh	r3, [r7, #6]
   // Your interrupt handling code here
	if(GPIO_PIN == GPIO_PIN_13)
 8001b26:	88fb      	ldrh	r3, [r7, #6]
 8001b28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b2c:	d10f      	bne.n	8001b4e <HAL_GPIO_EXTI_Callback+0x32>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8001b2e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b32:	4809      	ldr	r0, [pc, #36]	@ (8001b58 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001b34:	f001 fb21 	bl	800317a <HAL_GPIO_TogglePin>
		sprintf(my_message, "Interrupt triggered.\r\n");
 8001b38:	4908      	ldr	r1, [pc, #32]	@ (8001b5c <HAL_GPIO_EXTI_Callback+0x40>)
 8001b3a:	4809      	ldr	r0, [pc, #36]	@ (8001b60 <HAL_GPIO_EXTI_Callback+0x44>)
 8001b3c:	f005 f8ae 	bl	8006c9c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)my_message, MESSAGE_LENGTH, HAL_MAX_DELAY);
 8001b40:	f04f 33ff 	mov.w	r3, #4294967295
 8001b44:	2264      	movs	r2, #100	@ 0x64
 8001b46:	4906      	ldr	r1, [pc, #24]	@ (8001b60 <HAL_GPIO_EXTI_Callback+0x44>)
 8001b48:	4806      	ldr	r0, [pc, #24]	@ (8001b64 <HAL_GPIO_EXTI_Callback+0x48>)
 8001b4a:	f003 feed 	bl	8005928 <HAL_UART_Transmit>
	}
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40020400 	.word	0x40020400
 8001b5c:	08008d98 	.word	0x08008d98
 8001b60:	20000358 	.word	0x20000358
 8001b64:	20000310 	.word	0x20000310

08001b68 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
//	sprintf(my_message, "Timer input capture callback.\r\n");
//	HAL_UART_Transmit(&huart2, (uint8_t*)my_message, MESSAGE_LENGTH, HAL_MAX_DELAY);
	if (initialized) // Timers must be initalized before this code can run successfully.
 8001b70:	4b12      	ldr	r3, [pc, #72]	@ (8001bbc <HAL_TIM_IC_CaptureCallback+0x54>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d01d      	beq.n	8001bb4 <HAL_TIM_IC_CaptureCallback+0x4c>
		{
			if((htim->Instance = TIM1))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a11      	ldr	r2, [pc, #68]	@ (8001bc0 <HAL_TIM_IC_CaptureCallback+0x58>)
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	bf14      	ite	ne
 8001b86:	2301      	movne	r3, #1
 8001b88:	2300      	moveq	r3, #0
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d011      	beq.n	8001bb4 <HAL_TIM_IC_CaptureCallback+0x4c>
			{
				if ( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 )
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	7f1b      	ldrb	r3, [r3, #28]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d104      	bne.n	8001ba2 <HAL_TIM_IC_CaptureCallback+0x3a>
				{
					// Handle channel
					SteeringChannel->callback();
 8001b98:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc4 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fd87 	bl	80016b0 <_ZN9RCChannel8callbackEv>
				}

				if ( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	7f1b      	ldrb	r3, [r3, #28]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d104      	bne.n	8001bb4 <HAL_TIM_IC_CaptureCallback+0x4c>
				{
					// Handle channel
					ThrottleChannel->callback();
 8001baa:	4b07      	ldr	r3, [pc, #28]	@ (8001bc8 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fd7e 	bl	80016b0 <_ZN9RCChannel8callbackEv>
				}
			}
		}
}
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	200003bc 	.word	0x200003bc
 8001bc0:	40010000 	.word	0x40010000
 8001bc4:	200003c8 	.word	0x200003c8
 8001bc8:	200003c4 	.word	0x200003c4

08001bcc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a07      	ldr	r2, [pc, #28]	@ (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d106      	bne.n	8001bec <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		My_Encoder->count = __HAL_TIM_GET_COUNTER(htim);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001be4:	4b05      	ldr	r3, [pc, #20]	@ (8001bfc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	b292      	uxth	r2, r2
 8001bea:	82da      	strh	r2, [r3, #22]
	}
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	40000c00 	.word	0x40000c00
 8001bfc:	200003d0 	.word	0x200003d0

08001c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c00:	b590      	push	{r4, r7, lr}
 8001c02:	b08d      	sub	sp, #52	@ 0x34
 8001c04:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c06:	f000 ff5b 	bl	8002ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c0a:	f000 f913 	bl	8001e34 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c0e:	f000 fbd9 	bl	80023c4 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8001c12:	f000 fba9 	bl	8002368 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 8001c16:	f000 fa1b 	bl	8002050 <_ZL12MX_TIM2_Initv>
  MX_TIM5_Init();
 8001c1a:	f000 fb47 	bl	80022ac <_ZL12MX_TIM5_Initv>
  MX_TIM1_Init();
 8001c1e:	f000 f97b 	bl	8001f18 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8001c22:	f000 faa3 	bl	800216c <_ZL12MX_TIM3_Initv>
  My_Motor = new TB6612FNG_Motor(
		  GPIOB, GPIO_PIN_14,
		  GPIOB, GPIO_PIN_15,
		  &htim2, TIM_CHANNEL_1,
		  CPU_CLOCK_SPEED_MHZ,
		  MOTOR_PWM_HZ);
 8001c26:	2024      	movs	r0, #36	@ 0x24
 8001c28:	f004 fa3c 	bl	80060a4 <_Znwj>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	461c      	mov	r4, r3
 8001c30:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001c34:	9304      	str	r3, [sp, #16]
 8001c36:	2364      	movs	r3, #100	@ 0x64
 8001c38:	9303      	str	r3, [sp, #12]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	9302      	str	r3, [sp, #8]
 8001c3e:	4b6b      	ldr	r3, [pc, #428]	@ (8001dec <main+0x1ec>)
 8001c40:	9301      	str	r3, [sp, #4]
 8001c42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	4b69      	ldr	r3, [pc, #420]	@ (8001df0 <main+0x1f0>)
 8001c4a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c4e:	4968      	ldr	r1, [pc, #416]	@ (8001df0 <main+0x1f0>)
 8001c50:	4620      	mov	r0, r4
 8001c52:	f7ff fe4b 	bl	80018ec <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm>
  My_Motor = new TB6612FNG_Motor(
 8001c56:	4b67      	ldr	r3, [pc, #412]	@ (8001df4 <main+0x1f4>)
 8001c58:	601c      	str	r4, [r3, #0]
  		  1520,      // Calibrated neutral
  		  2035,      // Calibrated full left
  		  10000,       // New max positive
		  10000,       // New max negative (magnitude)
		  true     // Saturate if signal is over full? True by default. False good for debugging.
		  );
 8001c5a:	205c      	movs	r0, #92	@ 0x5c
 8001c5c:	f004 fa22 	bl	80060a4 <_Znwj>
 8001c60:	4603      	mov	r3, r0
 8001c62:	461c      	mov	r4, r3
 8001c64:	2301      	movs	r3, #1
 8001c66:	9308      	str	r3, [sp, #32]
 8001c68:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001c6c:	9307      	str	r3, [sp, #28]
 8001c6e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001c72:	9306      	str	r3, [sp, #24]
 8001c74:	f240 73f3 	movw	r3, #2035	@ 0x7f3
 8001c78:	9305      	str	r3, [sp, #20]
 8001c7a:	f44f 63be 	mov.w	r3, #1520	@ 0x5f0
 8001c7e:	9304      	str	r3, [sp, #16]
 8001c80:	f240 33ea 	movw	r3, #1002	@ 0x3ea
 8001c84:	9303      	str	r3, [sp, #12]
 8001c86:	2364      	movs	r3, #100	@ 0x64
 8001c88:	9302      	str	r3, [sp, #8]
 8001c8a:	f244 435c 	movw	r3, #17500	@ 0x445c
 8001c8e:	9301      	str	r3, [sp, #4]
 8001c90:	2300      	movs	r3, #0
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	4b58      	ldr	r3, [pc, #352]	@ (8001df8 <main+0x1f8>)
 8001c96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c9a:	4958      	ldr	r1, [pc, #352]	@ (8001dfc <main+0x1fc>)
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	f7ff fc81 	bl	80015a4 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb>
  SteeringChannel = new RCChannel
 8001ca2:	4b57      	ldr	r3, [pc, #348]	@ (8001e00 <main+0x200>)
 8001ca4:	601c      	str	r4, [r3, #0]
		  		  1533,  // Calibrated neutral
		  		  2017,  // Calibrated full speed
		  		  10000,   // New max positive
				  10000,    // New max negative (magnitude)
				  true  // Saturate if signal is over full? True by default. False good for debugging.
		  	  	  );
 8001ca6:	205c      	movs	r0, #92	@ 0x5c
 8001ca8:	f004 f9fc 	bl	80060a4 <_Znwj>
 8001cac:	4603      	mov	r3, r0
 8001cae:	461c      	mov	r4, r3
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	9308      	str	r3, [sp, #32]
 8001cb4:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001cb8:	9307      	str	r3, [sp, #28]
 8001cba:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001cbe:	9306      	str	r3, [sp, #24]
 8001cc0:	f240 73e1 	movw	r3, #2017	@ 0x7e1
 8001cc4:	9305      	str	r3, [sp, #20]
 8001cc6:	f240 53fd 	movw	r3, #1533	@ 0x5fd
 8001cca:	9304      	str	r3, [sp, #16]
 8001ccc:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8001cd0:	9303      	str	r3, [sp, #12]
 8001cd2:	2364      	movs	r3, #100	@ 0x64
 8001cd4:	9302      	str	r3, [sp, #8]
 8001cd6:	f244 435c 	movw	r3, #17500	@ 0x445c
 8001cda:	9301      	str	r3, [sp, #4]
 8001cdc:	2304      	movs	r3, #4
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	4b45      	ldr	r3, [pc, #276]	@ (8001df8 <main+0x1f8>)
 8001ce2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ce6:	4945      	ldr	r1, [pc, #276]	@ (8001dfc <main+0x1fc>)
 8001ce8:	4620      	mov	r0, r4
 8001cea:	f7ff fc5b 	bl	80015a4 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb>
  ThrottleChannel = new RCChannel
 8001cee:	4b45      	ldr	r3, [pc, #276]	@ (8001e04 <main+0x204>)
 8001cf0:	601c      	str	r4, [r3, #0]
		  &htim5,
		  20,
		  488.3f,
		  16,
		  false // true doesn't work yet!
		  );
 8001cf2:	202c      	movs	r0, #44	@ 0x2c
 8001cf4:	f004 f9d6 	bl	80060a4 <_Znwj>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	461c      	mov	r4, r3
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	2310      	movs	r3, #16
 8001d02:	ed9f 0a41 	vldr	s0, [pc, #260]	@ 8001e08 <main+0x208>
 8001d06:	2214      	movs	r2, #20
 8001d08:	4940      	ldr	r1, [pc, #256]	@ (8001e0c <main+0x20c>)
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	f7ff fa26 	bl	800115c <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb>
  My_Encoder = new PololuEncoder
 8001d10:	4b3f      	ldr	r3, [pc, #252]	@ (8001e10 <main+0x210>)
 8001d12:	601c      	str	r4, [r3, #0]
		  My_Encoder,
		  CONTROL_FREQUENCY_HZ,
		  100.0f,
		  650.0f,
		  0.0f
		  );
 8001d14:	2034      	movs	r0, #52	@ 0x34
 8001d16:	f004 f9c5 	bl	80060a4 <_Znwj>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	461c      	mov	r4, r3
 8001d1e:	4b35      	ldr	r3, [pc, #212]	@ (8001df4 <main+0x1f4>)
 8001d20:	6819      	ldr	r1, [r3, #0]
 8001d22:	4b3b      	ldr	r3, [pc, #236]	@ (8001e10 <main+0x210>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	ed9f 1a3b 	vldr	s2, [pc, #236]	@ 8001e14 <main+0x214>
 8001d2a:	eddf 0a3b 	vldr	s1, [pc, #236]	@ 8001e18 <main+0x218>
 8001d2e:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8001e1c <main+0x21c>
 8001d32:	2308      	movs	r3, #8
 8001d34:	4620      	mov	r0, r4
 8001d36:	f7ff f8b7 	bl	8000ea8 <_ZN12MotorControlC1EP15TB6612FNG_MotorP13PololuEncodermfff>
  My_Controller = new MotorControl
 8001d3a:	4b39      	ldr	r3, [pc, #228]	@ (8001e20 <main+0x220>)
 8001d3c:	601c      	str	r4, [r3, #0]
  Throttle = new RemoteControlControl
		  (
		  ThrottleChannel,
		  My_Controller,
		  30
		  );
 8001d3e:	2014      	movs	r0, #20
 8001d40:	f004 f9b0 	bl	80060a4 <_Znwj>
 8001d44:	4603      	mov	r3, r0
 8001d46:	461c      	mov	r4, r3
 8001d48:	4b2e      	ldr	r3, [pc, #184]	@ (8001e04 <main+0x204>)
 8001d4a:	6819      	ldr	r1, [r3, #0]
 8001d4c:	4b34      	ldr	r3, [pc, #208]	@ (8001e20 <main+0x220>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	231e      	movs	r3, #30
 8001d52:	4620      	mov	r0, r4
 8001d54:	f7ff fd70 	bl	8001838 <_ZN20RemoteControlControlC1EP9RCChannelP12MotorControlt>
  Throttle = new RemoteControlControl
 8001d58:	4b32      	ldr	r3, [pc, #200]	@ (8001e24 <main+0x224>)
 8001d5a:	601c      	str	r4, [r3, #0]
		  17500,
	  	  CPU_CLOCK_SPEED_MHZ,
		  60,
		  1000,
		  1500,
		  2000);
 8001d5c:	2020      	movs	r0, #32
 8001d5e:	f004 f9a1 	bl	80060a4 <_Znwj>
 8001d62:	4603      	mov	r3, r0
 8001d64:	461c      	mov	r4, r3
 8001d66:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001d6a:	9304      	str	r3, [sp, #16]
 8001d6c:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001d70:	9303      	str	r3, [sp, #12]
 8001d72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d76:	9302      	str	r3, [sp, #8]
 8001d78:	233c      	movs	r3, #60	@ 0x3c
 8001d7a:	9301      	str	r3, [sp, #4]
 8001d7c:	2364      	movs	r3, #100	@ 0x64
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	f244 435c 	movw	r3, #17500	@ 0x445c
 8001d84:	2200      	movs	r2, #0
 8001d86:	4928      	ldr	r1, [pc, #160]	@ (8001e28 <main+0x228>)
 8001d88:	4620      	mov	r0, r4
 8001d8a:	f7ff fb09 	bl	80013a0 <_ZN11PololuServoC1EP17TIM_HandleTypeDefmtmtttt>
  My_Servo = new PololuServo(
 8001d8e:	4b27      	ldr	r3, [pc, #156]	@ (8001e2c <main+0x22c>)
 8001d90:	601c      	str	r4, [r3, #0]

  HAL_Delay(300);
 8001d92:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001d96:	f000 ff05 	bl	8002ba4 <HAL_Delay>
  float setpoint = 0; // RPM
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	607b      	str	r3, [r7, #4]
  My_Controller->run(setpoint);
 8001da0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e20 <main+0x220>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	ed97 0a01 	vldr	s0, [r7, #4]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff f8dd 	bl	8000f68 <_ZN12MotorControl3runEf>
  HAL_Delay(500);
 8001dae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001db2:	f000 fef7 	bl	8002ba4 <HAL_Delay>
  initialized = true;
 8001db6:	4b1e      	ldr	r3, [pc, #120]	@ (8001e30 <main+0x230>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  My_Servo->set_position(-30);
 8001dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e2c <main+0x22c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f06f 011d 	mvn.w	r1, #29
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff fb31 	bl	800142c <_ZN11PololuServo12set_positionEs>
	  HAL_Delay(1000);
 8001dca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001dce:	f000 fee9 	bl	8002ba4 <HAL_Delay>
	  My_Servo->set_position(30);
 8001dd2:	4b16      	ldr	r3, [pc, #88]	@ (8001e2c <main+0x22c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	211e      	movs	r1, #30
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff fb27 	bl	800142c <_ZN11PololuServo12set_positionEs>
	  HAL_Delay(1000);
 8001dde:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001de2:	f000 fedf 	bl	8002ba4 <HAL_Delay>
	  My_Servo->set_position(-30);
 8001de6:	bf00      	nop
 8001de8:	e7e8      	b.n	8001dbc <main+0x1bc>
 8001dea:	bf00      	nop
 8001dec:	20000238 	.word	0x20000238
 8001df0:	40020400 	.word	0x40020400
 8001df4:	200003c0 	.word	0x200003c0
 8001df8:	200001f0 	.word	0x200001f0
 8001dfc:	40020000 	.word	0x40020000
 8001e00:	200003c8 	.word	0x200003c8
 8001e04:	200003c4 	.word	0x200003c4
 8001e08:	43f42666 	.word	0x43f42666
 8001e0c:	200002c8 	.word	0x200002c8
 8001e10:	200003d0 	.word	0x200003d0
 8001e14:	00000000 	.word	0x00000000
 8001e18:	44228000 	.word	0x44228000
 8001e1c:	42c80000 	.word	0x42c80000
 8001e20:	200003d4 	.word	0x200003d4
 8001e24:	200003cc 	.word	0x200003cc
 8001e28:	20000280 	.word	0x20000280
 8001e2c:	200003d8 	.word	0x200003d8
 8001e30:	200003bc 	.word	0x200003bc

08001e34 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b094      	sub	sp, #80	@ 0x50
 8001e38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e3a:	f107 0320 	add.w	r3, r7, #32
 8001e3e:	2230      	movs	r2, #48	@ 0x30
 8001e40:	2100      	movs	r1, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f004 ff8d 	bl	8006d62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e48:	f107 030c 	add.w	r3, r7, #12
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	4b2c      	ldr	r3, [pc, #176]	@ (8001f10 <_Z18SystemClock_Configv+0xdc>)
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e60:	4a2b      	ldr	r2, [pc, #172]	@ (8001f10 <_Z18SystemClock_Configv+0xdc>)
 8001e62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e66:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e68:	4b29      	ldr	r3, [pc, #164]	@ (8001f10 <_Z18SystemClock_Configv+0xdc>)
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e74:	2300      	movs	r3, #0
 8001e76:	607b      	str	r3, [r7, #4]
 8001e78:	4b26      	ldr	r3, [pc, #152]	@ (8001f14 <_Z18SystemClock_Configv+0xe0>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a25      	ldr	r2, [pc, #148]	@ (8001f14 <_Z18SystemClock_Configv+0xe0>)
 8001e7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	4b23      	ldr	r3, [pc, #140]	@ (8001f14 <_Z18SystemClock_Configv+0xe0>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e8c:	607b      	str	r3, [r7, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e90:	2302      	movs	r3, #2
 8001e92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e94:	2301      	movs	r3, #1
 8001e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e98:	2310      	movs	r3, #16
 8001e9a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ea4:	2308      	movs	r3, #8
 8001ea6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001ea8:	2364      	movs	r3, #100	@ 0x64
 8001eaa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001eac:	2302      	movs	r3, #2
 8001eae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001eb0:	2304      	movs	r3, #4
 8001eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eb4:	f107 0320 	add.w	r3, r7, #32
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f001 f991 	bl	80031e0 <HAL_RCC_OscConfig>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	bf14      	ite	ne
 8001ec4:	2301      	movne	r3, #1
 8001ec6:	2300      	moveq	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8001ece:	f000 fad3 	bl	8002478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ed2:	230f      	movs	r3, #15
 8001ed4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ede:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ee2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ee8:	f107 030c 	add.w	r3, r7, #12
 8001eec:	2103      	movs	r1, #3
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f001 fbee 	bl	80036d0 <HAL_RCC_ClockConfig>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	bf14      	ite	ne
 8001efa:	2301      	movne	r3, #1
 8001efc:	2300      	moveq	r3, #0
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8001f04:	f000 fab8 	bl	8002478 <Error_Handler>
  }
}
 8001f08:	bf00      	nop
 8001f0a:	3750      	adds	r7, #80	@ 0x50
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40007000 	.word	0x40007000

08001f18 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08a      	sub	sp, #40	@ 0x28
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f1e:	f107 0318 	add.w	r3, r7, #24
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	609a      	str	r2, [r3, #8]
 8001f2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f2c:	f107 0310 	add.w	r3, r7, #16
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001f36:	463b      	mov	r3, r7
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f42:	4b41      	ldr	r3, [pc, #260]	@ (8002048 <_ZL12MX_TIM1_Initv+0x130>)
 8001f44:	4a41      	ldr	r2, [pc, #260]	@ (800204c <_ZL12MX_TIM1_Initv+0x134>)
 8001f46:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8001f48:	4b3f      	ldr	r3, [pc, #252]	@ (8002048 <_ZL12MX_TIM1_Initv+0x130>)
 8001f4a:	2263      	movs	r2, #99	@ 0x63
 8001f4c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f4e:	4b3e      	ldr	r3, [pc, #248]	@ (8002048 <_ZL12MX_TIM1_Initv+0x130>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f54:	4b3c      	ldr	r3, [pc, #240]	@ (8002048 <_ZL12MX_TIM1_Initv+0x130>)
 8001f56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f5c:	4b3a      	ldr	r3, [pc, #232]	@ (8002048 <_ZL12MX_TIM1_Initv+0x130>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f62:	4b39      	ldr	r3, [pc, #228]	@ (8002048 <_ZL12MX_TIM1_Initv+0x130>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f68:	4b37      	ldr	r3, [pc, #220]	@ (8002048 <_ZL12MX_TIM1_Initv+0x130>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f6e:	4836      	ldr	r0, [pc, #216]	@ (8002048 <_ZL12MX_TIM1_Initv+0x130>)
 8001f70:	f001 fd8e 	bl	8003a90 <HAL_TIM_Base_Init>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	bf14      	ite	ne
 8001f7a:	2301      	movne	r3, #1
 8001f7c:	2300      	moveq	r3, #0
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <_ZL12MX_TIM1_Initv+0x70>
  {
    Error_Handler();
 8001f84:	f000 fa78 	bl	8002478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f8c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f8e:	f107 0318 	add.w	r3, r7, #24
 8001f92:	4619      	mov	r1, r3
 8001f94:	482c      	ldr	r0, [pc, #176]	@ (8002048 <_ZL12MX_TIM1_Initv+0x130>)
 8001f96:	f002 fed5 	bl	8004d44 <HAL_TIM_ConfigClockSource>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	bf14      	ite	ne
 8001fa0:	2301      	movne	r3, #1
 8001fa2:	2300      	moveq	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <_ZL12MX_TIM1_Initv+0x96>
  {
    Error_Handler();
 8001faa:	f000 fa65 	bl	8002478 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001fae:	4826      	ldr	r0, [pc, #152]	@ (8002048 <_ZL12MX_TIM1_Initv+0x130>)
 8001fb0:	f001 ff2a 	bl	8003e08 <HAL_TIM_IC_Init>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	bf14      	ite	ne
 8001fba:	2301      	movne	r3, #1
 8001fbc:	2300      	moveq	r3, #0
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <_ZL12MX_TIM1_Initv+0xb0>
  {
    Error_Handler();
 8001fc4:	f000 fa58 	bl	8002478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fd0:	f107 0310 	add.w	r3, r7, #16
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	481c      	ldr	r0, [pc, #112]	@ (8002048 <_ZL12MX_TIM1_Initv+0x130>)
 8001fd8:	f003 fbd4 	bl	8005784 <HAL_TIMEx_MasterConfigSynchronization>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	bf14      	ite	ne
 8001fe2:	2301      	movne	r3, #1
 8001fe4:	2300      	moveq	r3, #0
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <_ZL12MX_TIM1_Initv+0xd8>
  {
    Error_Handler();
 8001fec:	f000 fa44 	bl	8002478 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001ff0:	230a      	movs	r3, #10
 8001ff2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002000:	463b      	mov	r3, r7
 8002002:	2200      	movs	r2, #0
 8002004:	4619      	mov	r1, r3
 8002006:	4810      	ldr	r0, [pc, #64]	@ (8002048 <_ZL12MX_TIM1_Initv+0x130>)
 8002008:	f002 fd3e 	bl	8004a88 <HAL_TIM_IC_ConfigChannel>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	bf14      	ite	ne
 8002012:	2301      	movne	r3, #1
 8002014:	2300      	moveq	r3, #0
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <_ZL12MX_TIM1_Initv+0x108>
  {
    Error_Handler();
 800201c:	f000 fa2c 	bl	8002478 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002020:	463b      	mov	r3, r7
 8002022:	2204      	movs	r2, #4
 8002024:	4619      	mov	r1, r3
 8002026:	4808      	ldr	r0, [pc, #32]	@ (8002048 <_ZL12MX_TIM1_Initv+0x130>)
 8002028:	f002 fd2e 	bl	8004a88 <HAL_TIM_IC_ConfigChannel>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	bf14      	ite	ne
 8002032:	2301      	movne	r3, #1
 8002034:	2300      	moveq	r3, #0
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <_ZL12MX_TIM1_Initv+0x128>
  {
    Error_Handler();
 800203c:	f000 fa1c 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002040:	bf00      	nop
 8002042:	3728      	adds	r7, #40	@ 0x28
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	200001f0 	.word	0x200001f0
 800204c:	40010000 	.word	0x40010000

08002050 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b08e      	sub	sp, #56	@ 0x38
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002056:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	605a      	str	r2, [r3, #4]
 8002060:	609a      	str	r2, [r3, #8]
 8002062:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002064:	f107 0320 	add.w	r3, r7, #32
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800206e:	1d3b      	adds	r3, r7, #4
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
 800207c:	615a      	str	r2, [r3, #20]
 800207e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002080:	4b39      	ldr	r3, [pc, #228]	@ (8002168 <_ZL12MX_TIM2_Initv+0x118>)
 8002082:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002086:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002088:	4b37      	ldr	r3, [pc, #220]	@ (8002168 <_ZL12MX_TIM2_Initv+0x118>)
 800208a:	2200      	movs	r2, #0
 800208c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800208e:	4b36      	ldr	r3, [pc, #216]	@ (8002168 <_ZL12MX_TIM2_Initv+0x118>)
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 8002094:	4b34      	ldr	r3, [pc, #208]	@ (8002168 <_ZL12MX_TIM2_Initv+0x118>)
 8002096:	f241 3287 	movw	r2, #4999	@ 0x1387
 800209a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800209c:	4b32      	ldr	r3, [pc, #200]	@ (8002168 <_ZL12MX_TIM2_Initv+0x118>)
 800209e:	2200      	movs	r2, #0
 80020a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020a2:	4b31      	ldr	r3, [pc, #196]	@ (8002168 <_ZL12MX_TIM2_Initv+0x118>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020a8:	482f      	ldr	r0, [pc, #188]	@ (8002168 <_ZL12MX_TIM2_Initv+0x118>)
 80020aa:	f001 fcf1 	bl	8003a90 <HAL_TIM_Base_Init>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	bf14      	ite	ne
 80020b4:	2301      	movne	r3, #1
 80020b6:	2300      	moveq	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 80020be:	f000 f9db 	bl	8002478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020cc:	4619      	mov	r1, r3
 80020ce:	4826      	ldr	r0, [pc, #152]	@ (8002168 <_ZL12MX_TIM2_Initv+0x118>)
 80020d0:	f002 fe38 	bl	8004d44 <HAL_TIM_ConfigClockSource>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	bf14      	ite	ne
 80020da:	2301      	movne	r3, #1
 80020dc:	2300      	moveq	r3, #0
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 80020e4:	f000 f9c8 	bl	8002478 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80020e8:	481f      	ldr	r0, [pc, #124]	@ (8002168 <_ZL12MX_TIM2_Initv+0x118>)
 80020ea:	f001 fd20 	bl	8003b2e <HAL_TIM_PWM_Init>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	bf14      	ite	ne
 80020f4:	2301      	movne	r3, #1
 80020f6:	2300      	moveq	r3, #0
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 80020fe:	f000 f9bb 	bl	8002478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002106:	2300      	movs	r3, #0
 8002108:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800210a:	f107 0320 	add.w	r3, r7, #32
 800210e:	4619      	mov	r1, r3
 8002110:	4815      	ldr	r0, [pc, #84]	@ (8002168 <_ZL12MX_TIM2_Initv+0x118>)
 8002112:	f003 fb37 	bl	8005784 <HAL_TIMEx_MasterConfigSynchronization>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	bf14      	ite	ne
 800211c:	2301      	movne	r3, #1
 800211e:	2300      	moveq	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8002126:	f000 f9a7 	bl	8002478 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800212a:	2360      	movs	r3, #96	@ 0x60
 800212c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	2200      	movs	r2, #0
 800213e:	4619      	mov	r1, r3
 8002140:	4809      	ldr	r0, [pc, #36]	@ (8002168 <_ZL12MX_TIM2_Initv+0x118>)
 8002142:	f002 fd3d 	bl	8004bc0 <HAL_TIM_PWM_ConfigChannel>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	bf14      	ite	ne
 800214c:	2301      	movne	r3, #1
 800214e:	2300      	moveq	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 8002156:	f000 f98f 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800215a:	4803      	ldr	r0, [pc, #12]	@ (8002168 <_ZL12MX_TIM2_Initv+0x118>)
 800215c:	f000 fa9c 	bl	8002698 <HAL_TIM_MspPostInit>

}
 8002160:	bf00      	nop
 8002162:	3738      	adds	r7, #56	@ 0x38
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20000238 	.word	0x20000238

0800216c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08e      	sub	sp, #56	@ 0x38
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002172:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	609a      	str	r2, [r3, #8]
 800217e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002180:	f107 0320 	add.w	r3, r7, #32
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800218a:	1d3b      	adds	r3, r7, #4
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	60da      	str	r2, [r3, #12]
 8002196:	611a      	str	r2, [r3, #16]
 8002198:	615a      	str	r2, [r3, #20]
 800219a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800219c:	4b41      	ldr	r3, [pc, #260]	@ (80022a4 <_ZL12MX_TIM3_Initv+0x138>)
 800219e:	4a42      	ldr	r2, [pc, #264]	@ (80022a8 <_ZL12MX_TIM3_Initv+0x13c>)
 80021a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80021a2:	4b40      	ldr	r3, [pc, #256]	@ (80022a4 <_ZL12MX_TIM3_Initv+0x138>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a8:	4b3e      	ldr	r3, [pc, #248]	@ (80022a4 <_ZL12MX_TIM3_Initv+0x138>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 80021ae:	4b3d      	ldr	r3, [pc, #244]	@ (80022a4 <_ZL12MX_TIM3_Initv+0x138>)
 80021b0:	f241 3287 	movw	r2, #4999	@ 0x1387
 80021b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b6:	4b3b      	ldr	r3, [pc, #236]	@ (80022a4 <_ZL12MX_TIM3_Initv+0x138>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021bc:	4b39      	ldr	r3, [pc, #228]	@ (80022a4 <_ZL12MX_TIM3_Initv+0x138>)
 80021be:	2200      	movs	r2, #0
 80021c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80021c2:	4838      	ldr	r0, [pc, #224]	@ (80022a4 <_ZL12MX_TIM3_Initv+0x138>)
 80021c4:	f001 fc64 	bl	8003a90 <HAL_TIM_Base_Init>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	bf14      	ite	ne
 80021ce:	2301      	movne	r3, #1
 80021d0:	2300      	moveq	r3, #0
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 80021d8:	f000 f94e 	bl	8002478 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80021e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021e6:	4619      	mov	r1, r3
 80021e8:	482e      	ldr	r0, [pc, #184]	@ (80022a4 <_ZL12MX_TIM3_Initv+0x138>)
 80021ea:	f002 fdab 	bl	8004d44 <HAL_TIM_ConfigClockSource>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	bf14      	ite	ne
 80021f4:	2301      	movne	r3, #1
 80021f6:	2300      	moveq	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 80021fe:	f000 f93b 	bl	8002478 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002202:	4828      	ldr	r0, [pc, #160]	@ (80022a4 <_ZL12MX_TIM3_Initv+0x138>)
 8002204:	f001 fc93 	bl	8003b2e <HAL_TIM_PWM_Init>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	bf14      	ite	ne
 800220e:	2301      	movne	r3, #1
 8002210:	2300      	moveq	r3, #0
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 8002218:	f000 f92e 	bl	8002478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800221c:	2300      	movs	r3, #0
 800221e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002220:	2300      	movs	r3, #0
 8002222:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002224:	f107 0320 	add.w	r3, r7, #32
 8002228:	4619      	mov	r1, r3
 800222a:	481e      	ldr	r0, [pc, #120]	@ (80022a4 <_ZL12MX_TIM3_Initv+0x138>)
 800222c:	f003 faaa 	bl	8005784 <HAL_TIMEx_MasterConfigSynchronization>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	bf14      	ite	ne
 8002236:	2301      	movne	r3, #1
 8002238:	2300      	moveq	r3, #0
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8002240:	f000 f91a 	bl	8002478 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002244:	2360      	movs	r3, #96	@ 0x60
 8002246:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002254:	1d3b      	adds	r3, r7, #4
 8002256:	2200      	movs	r2, #0
 8002258:	4619      	mov	r1, r3
 800225a:	4812      	ldr	r0, [pc, #72]	@ (80022a4 <_ZL12MX_TIM3_Initv+0x138>)
 800225c:	f002 fcb0 	bl	8004bc0 <HAL_TIM_PWM_ConfigChannel>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	bf14      	ite	ne
 8002266:	2301      	movne	r3, #1
 8002268:	2300      	moveq	r3, #0
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 8002270:	f000 f902 	bl	8002478 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002274:	1d3b      	adds	r3, r7, #4
 8002276:	2204      	movs	r2, #4
 8002278:	4619      	mov	r1, r3
 800227a:	480a      	ldr	r0, [pc, #40]	@ (80022a4 <_ZL12MX_TIM3_Initv+0x138>)
 800227c:	f002 fca0 	bl	8004bc0 <HAL_TIM_PWM_ConfigChannel>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	bf14      	ite	ne
 8002286:	2301      	movne	r3, #1
 8002288:	2300      	moveq	r3, #0
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <_ZL12MX_TIM3_Initv+0x128>
  {
    Error_Handler();
 8002290:	f000 f8f2 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002294:	4803      	ldr	r0, [pc, #12]	@ (80022a4 <_ZL12MX_TIM3_Initv+0x138>)
 8002296:	f000 f9ff 	bl	8002698 <HAL_TIM_MspPostInit>

}
 800229a:	bf00      	nop
 800229c:	3738      	adds	r7, #56	@ 0x38
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000280 	.word	0x20000280
 80022a8:	40000400 	.word	0x40000400

080022ac <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b08c      	sub	sp, #48	@ 0x30
 80022b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80022b2:	f107 030c 	add.w	r3, r7, #12
 80022b6:	2224      	movs	r2, #36	@ 0x24
 80022b8:	2100      	movs	r1, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f004 fd51 	bl	8006d62 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022c0:	1d3b      	adds	r3, r7, #4
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80022c8:	4b25      	ldr	r3, [pc, #148]	@ (8002360 <_ZL12MX_TIM5_Initv+0xb4>)
 80022ca:	4a26      	ldr	r2, [pc, #152]	@ (8002364 <_ZL12MX_TIM5_Initv+0xb8>)
 80022cc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80022ce:	4b24      	ldr	r3, [pc, #144]	@ (8002360 <_ZL12MX_TIM5_Initv+0xb4>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d4:	4b22      	ldr	r3, [pc, #136]	@ (8002360 <_ZL12MX_TIM5_Initv+0xb4>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80022da:	4b21      	ldr	r3, [pc, #132]	@ (8002360 <_ZL12MX_TIM5_Initv+0xb4>)
 80022dc:	f04f 32ff 	mov.w	r2, #4294967295
 80022e0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002360 <_ZL12MX_TIM5_Initv+0xb4>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002360 <_ZL12MX_TIM5_Initv+0xb4>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80022ee:	2303      	movs	r3, #3
 80022f0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022f6:	2301      	movs	r3, #1
 80022f8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002302:	2300      	movs	r3, #0
 8002304:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002306:	2301      	movs	r3, #1
 8002308:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800230a:	2300      	movs	r3, #0
 800230c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002312:	f107 030c 	add.w	r3, r7, #12
 8002316:	4619      	mov	r1, r3
 8002318:	4811      	ldr	r0, [pc, #68]	@ (8002360 <_ZL12MX_TIM5_Initv+0xb4>)
 800231a:	f001 ff97 	bl	800424c <HAL_TIM_Encoder_Init>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	bf14      	ite	ne
 8002324:	2301      	movne	r3, #1
 8002326:	2300      	moveq	r3, #0
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <_ZL12MX_TIM5_Initv+0x86>
  {
    Error_Handler();
 800232e:	f000 f8a3 	bl	8002478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002332:	2300      	movs	r3, #0
 8002334:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002336:	2300      	movs	r3, #0
 8002338:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	4619      	mov	r1, r3
 800233e:	4808      	ldr	r0, [pc, #32]	@ (8002360 <_ZL12MX_TIM5_Initv+0xb4>)
 8002340:	f003 fa20 	bl	8005784 <HAL_TIMEx_MasterConfigSynchronization>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	bf14      	ite	ne
 800234a:	2301      	movne	r3, #1
 800234c:	2300      	moveq	r3, #0
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <_ZL12MX_TIM5_Initv+0xac>
  {
    Error_Handler();
 8002354:	f000 f890 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002358:	bf00      	nop
 800235a:	3730      	adds	r7, #48	@ 0x30
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	200002c8 	.word	0x200002c8
 8002364:	40000c00 	.word	0x40000c00

08002368 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800236c:	4b13      	ldr	r3, [pc, #76]	@ (80023bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800236e:	4a14      	ldr	r2, [pc, #80]	@ (80023c0 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002370:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002372:	4b12      	ldr	r3, [pc, #72]	@ (80023bc <_ZL19MX_USART2_UART_Initv+0x54>)
 8002374:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002378:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800237a:	4b10      	ldr	r3, [pc, #64]	@ (80023bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800237c:	2200      	movs	r2, #0
 800237e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002380:	4b0e      	ldr	r3, [pc, #56]	@ (80023bc <_ZL19MX_USART2_UART_Initv+0x54>)
 8002382:	2200      	movs	r2, #0
 8002384:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002386:	4b0d      	ldr	r3, [pc, #52]	@ (80023bc <_ZL19MX_USART2_UART_Initv+0x54>)
 8002388:	2200      	movs	r2, #0
 800238a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800238c:	4b0b      	ldr	r3, [pc, #44]	@ (80023bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800238e:	220c      	movs	r2, #12
 8002390:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002392:	4b0a      	ldr	r3, [pc, #40]	@ (80023bc <_ZL19MX_USART2_UART_Initv+0x54>)
 8002394:	2200      	movs	r2, #0
 8002396:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002398:	4b08      	ldr	r3, [pc, #32]	@ (80023bc <_ZL19MX_USART2_UART_Initv+0x54>)
 800239a:	2200      	movs	r2, #0
 800239c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800239e:	4807      	ldr	r0, [pc, #28]	@ (80023bc <_ZL19MX_USART2_UART_Initv+0x54>)
 80023a0:	f003 fa72 	bl	8005888 <HAL_UART_Init>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	bf14      	ite	ne
 80023aa:	2301      	movne	r3, #1
 80023ac:	2300      	moveq	r3, #0
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80023b4:	f000 f860 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023b8:	bf00      	nop
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20000310 	.word	0x20000310
 80023c0:	40004400 	.word	0x40004400

080023c4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ca:	f107 030c 	add.w	r3, r7, #12
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	605a      	str	r2, [r3, #4]
 80023d4:	609a      	str	r2, [r3, #8]
 80023d6:	60da      	str	r2, [r3, #12]
 80023d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	60bb      	str	r3, [r7, #8]
 80023de:	4b24      	ldr	r3, [pc, #144]	@ (8002470 <_ZL12MX_GPIO_Initv+0xac>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e2:	4a23      	ldr	r2, [pc, #140]	@ (8002470 <_ZL12MX_GPIO_Initv+0xac>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ea:	4b21      	ldr	r3, [pc, #132]	@ (8002470 <_ZL12MX_GPIO_Initv+0xac>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	60bb      	str	r3, [r7, #8]
 80023f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	607b      	str	r3, [r7, #4]
 80023fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002470 <_ZL12MX_GPIO_Initv+0xac>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002470 <_ZL12MX_GPIO_Initv+0xac>)
 8002400:	f043 0302 	orr.w	r3, r3, #2
 8002404:	6313      	str	r3, [r2, #48]	@ 0x30
 8002406:	4b1a      	ldr	r3, [pc, #104]	@ (8002470 <_ZL12MX_GPIO_Initv+0xac>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	607b      	str	r3, [r7, #4]
 8002410:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002412:	2200      	movs	r2, #0
 8002414:	f44f 4150 	mov.w	r1, #53248	@ 0xd000
 8002418:	4816      	ldr	r0, [pc, #88]	@ (8002474 <_ZL12MX_GPIO_Initv+0xb0>)
 800241a:	f000 fe95 	bl	8003148 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 800241e:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8002422:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002424:	2301      	movs	r3, #1
 8002426:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242c:	2300      	movs	r3, #0
 800242e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002430:	f107 030c 	add.w	r3, r7, #12
 8002434:	4619      	mov	r1, r3
 8002436:	480f      	ldr	r0, [pc, #60]	@ (8002474 <_ZL12MX_GPIO_Initv+0xb0>)
 8002438:	f000 fcea 	bl	8002e10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800243c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002440:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002442:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002446:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800244c:	f107 030c 	add.w	r3, r7, #12
 8002450:	4619      	mov	r1, r3
 8002452:	4808      	ldr	r0, [pc, #32]	@ (8002474 <_ZL12MX_GPIO_Initv+0xb0>)
 8002454:	f000 fcdc 	bl	8002e10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002458:	2200      	movs	r2, #0
 800245a:	2100      	movs	r1, #0
 800245c:	2028      	movs	r0, #40	@ 0x28
 800245e:	f000 fca0 	bl	8002da2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002462:	2028      	movs	r0, #40	@ 0x28
 8002464:	f000 fcb9 	bl	8002dda <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002468:	bf00      	nop
 800246a:	3720      	adds	r7, #32
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40023800 	.word	0x40023800
 8002474:	40020400 	.word	0x40020400

08002478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800247c:	b672      	cpsid	i
}
 800247e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002480:	bf00      	nop
 8002482:	e7fd      	b.n	8002480 <Error_Handler+0x8>

08002484 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	607b      	str	r3, [r7, #4]
 800248e:	4b10      	ldr	r3, [pc, #64]	@ (80024d0 <HAL_MspInit+0x4c>)
 8002490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002492:	4a0f      	ldr	r2, [pc, #60]	@ (80024d0 <HAL_MspInit+0x4c>)
 8002494:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002498:	6453      	str	r3, [r2, #68]	@ 0x44
 800249a:	4b0d      	ldr	r3, [pc, #52]	@ (80024d0 <HAL_MspInit+0x4c>)
 800249c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024a2:	607b      	str	r3, [r7, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	603b      	str	r3, [r7, #0]
 80024aa:	4b09      	ldr	r3, [pc, #36]	@ (80024d0 <HAL_MspInit+0x4c>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ae:	4a08      	ldr	r2, [pc, #32]	@ (80024d0 <HAL_MspInit+0x4c>)
 80024b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80024b6:	4b06      	ldr	r3, [pc, #24]	@ (80024d0 <HAL_MspInit+0x4c>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024be:	603b      	str	r3, [r7, #0]
 80024c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40023800 	.word	0x40023800

080024d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08c      	sub	sp, #48	@ 0x30
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024dc:	f107 031c 	add.w	r3, r7, #28
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a3d      	ldr	r2, [pc, #244]	@ (80025e8 <HAL_TIM_Base_MspInit+0x114>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d14d      	bne.n	8002592 <HAL_TIM_Base_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	61bb      	str	r3, [r7, #24]
 80024fa:	4b3c      	ldr	r3, [pc, #240]	@ (80025ec <HAL_TIM_Base_MspInit+0x118>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fe:	4a3b      	ldr	r2, [pc, #236]	@ (80025ec <HAL_TIM_Base_MspInit+0x118>)
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	6453      	str	r3, [r2, #68]	@ 0x44
 8002506:	4b39      	ldr	r3, [pc, #228]	@ (80025ec <HAL_TIM_Base_MspInit+0x118>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	61bb      	str	r3, [r7, #24]
 8002510:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	4b35      	ldr	r3, [pc, #212]	@ (80025ec <HAL_TIM_Base_MspInit+0x118>)
 8002518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800251a:	4a34      	ldr	r2, [pc, #208]	@ (80025ec <HAL_TIM_Base_MspInit+0x118>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	6313      	str	r3, [r2, #48]	@ 0x30
 8002522:	4b32      	ldr	r3, [pc, #200]	@ (80025ec <HAL_TIM_Base_MspInit+0x118>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800252e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002534:	2302      	movs	r3, #2
 8002536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253c:	2300      	movs	r3, #0
 800253e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002540:	2301      	movs	r3, #1
 8002542:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002544:	f107 031c 	add.w	r3, r7, #28
 8002548:	4619      	mov	r1, r3
 800254a:	4829      	ldr	r0, [pc, #164]	@ (80025f0 <HAL_TIM_Base_MspInit+0x11c>)
 800254c:	f000 fc60 	bl	8002e10 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002550:	2200      	movs	r2, #0
 8002552:	2100      	movs	r1, #0
 8002554:	2018      	movs	r0, #24
 8002556:	f000 fc24 	bl	8002da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800255a:	2018      	movs	r0, #24
 800255c:	f000 fc3d 	bl	8002dda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002560:	2200      	movs	r2, #0
 8002562:	2100      	movs	r1, #0
 8002564:	2019      	movs	r0, #25
 8002566:	f000 fc1c 	bl	8002da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800256a:	2019      	movs	r0, #25
 800256c:	f000 fc35 	bl	8002dda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002570:	2200      	movs	r2, #0
 8002572:	2100      	movs	r1, #0
 8002574:	201a      	movs	r0, #26
 8002576:	f000 fc14 	bl	8002da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800257a:	201a      	movs	r0, #26
 800257c:	f000 fc2d 	bl	8002dda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002580:	2200      	movs	r2, #0
 8002582:	2100      	movs	r1, #0
 8002584:	201b      	movs	r0, #27
 8002586:	f000 fc0c 	bl	8002da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800258a:	201b      	movs	r0, #27
 800258c:	f000 fc25 	bl	8002dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002590:	e026      	b.n	80025e0 <HAL_TIM_Base_MspInit+0x10c>
  else if(htim_base->Instance==TIM2)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800259a:	d10e      	bne.n	80025ba <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800259c:	2300      	movs	r3, #0
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	4b12      	ldr	r3, [pc, #72]	@ (80025ec <HAL_TIM_Base_MspInit+0x118>)
 80025a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a4:	4a11      	ldr	r2, [pc, #68]	@ (80025ec <HAL_TIM_Base_MspInit+0x118>)
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80025ac:	4b0f      	ldr	r3, [pc, #60]	@ (80025ec <HAL_TIM_Base_MspInit+0x118>)
 80025ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	693b      	ldr	r3, [r7, #16]
}
 80025b8:	e012      	b.n	80025e0 <HAL_TIM_Base_MspInit+0x10c>
  else if(htim_base->Instance==TIM3)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a0d      	ldr	r2, [pc, #52]	@ (80025f4 <HAL_TIM_Base_MspInit+0x120>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d10d      	bne.n	80025e0 <HAL_TIM_Base_MspInit+0x10c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025c4:	2300      	movs	r3, #0
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	4b08      	ldr	r3, [pc, #32]	@ (80025ec <HAL_TIM_Base_MspInit+0x118>)
 80025ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025cc:	4a07      	ldr	r2, [pc, #28]	@ (80025ec <HAL_TIM_Base_MspInit+0x118>)
 80025ce:	f043 0302 	orr.w	r3, r3, #2
 80025d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80025d4:	4b05      	ldr	r3, [pc, #20]	@ (80025ec <HAL_TIM_Base_MspInit+0x118>)
 80025d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	68fb      	ldr	r3, [r7, #12]
}
 80025e0:	bf00      	nop
 80025e2:	3730      	adds	r7, #48	@ 0x30
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40010000 	.word	0x40010000
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40020000 	.word	0x40020000
 80025f4:	40000400 	.word	0x40000400

080025f8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08a      	sub	sp, #40	@ 0x28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002600:	f107 0314 	add.w	r3, r7, #20
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	605a      	str	r2, [r3, #4]
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a1d      	ldr	r2, [pc, #116]	@ (800268c <HAL_TIM_Encoder_MspInit+0x94>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d133      	bne.n	8002682 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	613b      	str	r3, [r7, #16]
 800261e:	4b1c      	ldr	r3, [pc, #112]	@ (8002690 <HAL_TIM_Encoder_MspInit+0x98>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002622:	4a1b      	ldr	r2, [pc, #108]	@ (8002690 <HAL_TIM_Encoder_MspInit+0x98>)
 8002624:	f043 0308 	orr.w	r3, r3, #8
 8002628:	6413      	str	r3, [r2, #64]	@ 0x40
 800262a:	4b19      	ldr	r3, [pc, #100]	@ (8002690 <HAL_TIM_Encoder_MspInit+0x98>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	4b15      	ldr	r3, [pc, #84]	@ (8002690 <HAL_TIM_Encoder_MspInit+0x98>)
 800263c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263e:	4a14      	ldr	r2, [pc, #80]	@ (8002690 <HAL_TIM_Encoder_MspInit+0x98>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	6313      	str	r3, [r2, #48]	@ 0x30
 8002646:	4b12      	ldr	r3, [pc, #72]	@ (8002690 <HAL_TIM_Encoder_MspInit+0x98>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002652:	2303      	movs	r3, #3
 8002654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002656:	2302      	movs	r3, #2
 8002658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265e:	2300      	movs	r3, #0
 8002660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002662:	2302      	movs	r3, #2
 8002664:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002666:	f107 0314 	add.w	r3, r7, #20
 800266a:	4619      	mov	r1, r3
 800266c:	4809      	ldr	r0, [pc, #36]	@ (8002694 <HAL_TIM_Encoder_MspInit+0x9c>)
 800266e:	f000 fbcf 	bl	8002e10 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002672:	2200      	movs	r2, #0
 8002674:	2100      	movs	r1, #0
 8002676:	2032      	movs	r0, #50	@ 0x32
 8002678:	f000 fb93 	bl	8002da2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800267c:	2032      	movs	r0, #50	@ 0x32
 800267e:	f000 fbac 	bl	8002dda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002682:	bf00      	nop
 8002684:	3728      	adds	r7, #40	@ 0x28
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40000c00 	.word	0x40000c00
 8002690:	40023800 	.word	0x40023800
 8002694:	40020000 	.word	0x40020000

08002698 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08a      	sub	sp, #40	@ 0x28
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a0:	f107 0314 	add.w	r3, r7, #20
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026b8:	d11f      	bne.n	80026fa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	4b22      	ldr	r3, [pc, #136]	@ (8002748 <HAL_TIM_MspPostInit+0xb0>)
 80026c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c2:	4a21      	ldr	r2, [pc, #132]	@ (8002748 <HAL_TIM_MspPostInit+0xb0>)
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002748 <HAL_TIM_MspPostInit+0xb0>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80026d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026dc:	2302      	movs	r3, #2
 80026de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e4:	2300      	movs	r3, #0
 80026e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026e8:	2301      	movs	r3, #1
 80026ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ec:	f107 0314 	add.w	r3, r7, #20
 80026f0:	4619      	mov	r1, r3
 80026f2:	4816      	ldr	r0, [pc, #88]	@ (800274c <HAL_TIM_MspPostInit+0xb4>)
 80026f4:	f000 fb8c 	bl	8002e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80026f8:	e022      	b.n	8002740 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a14      	ldr	r2, [pc, #80]	@ (8002750 <HAL_TIM_MspPostInit+0xb8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d11d      	bne.n	8002740 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002704:	2300      	movs	r3, #0
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	4b0f      	ldr	r3, [pc, #60]	@ (8002748 <HAL_TIM_MspPostInit+0xb0>)
 800270a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270c:	4a0e      	ldr	r2, [pc, #56]	@ (8002748 <HAL_TIM_MspPostInit+0xb0>)
 800270e:	f043 0302 	orr.w	r3, r3, #2
 8002712:	6313      	str	r3, [r2, #48]	@ 0x30
 8002714:	4b0c      	ldr	r3, [pc, #48]	@ (8002748 <HAL_TIM_MspPostInit+0xb0>)
 8002716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002720:	2330      	movs	r3, #48	@ 0x30
 8002722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002724:	2302      	movs	r3, #2
 8002726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272c:	2300      	movs	r3, #0
 800272e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002730:	2302      	movs	r3, #2
 8002732:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002734:	f107 0314 	add.w	r3, r7, #20
 8002738:	4619      	mov	r1, r3
 800273a:	4806      	ldr	r0, [pc, #24]	@ (8002754 <HAL_TIM_MspPostInit+0xbc>)
 800273c:	f000 fb68 	bl	8002e10 <HAL_GPIO_Init>
}
 8002740:	bf00      	nop
 8002742:	3728      	adds	r7, #40	@ 0x28
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40023800 	.word	0x40023800
 800274c:	40020000 	.word	0x40020000
 8002750:	40000400 	.word	0x40000400
 8002754:	40020400 	.word	0x40020400

08002758 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b08a      	sub	sp, #40	@ 0x28
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002760:	f107 0314 	add.w	r3, r7, #20
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	60da      	str	r2, [r3, #12]
 800276e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a19      	ldr	r2, [pc, #100]	@ (80027dc <HAL_UART_MspInit+0x84>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d12b      	bne.n	80027d2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	4b18      	ldr	r3, [pc, #96]	@ (80027e0 <HAL_UART_MspInit+0x88>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002782:	4a17      	ldr	r2, [pc, #92]	@ (80027e0 <HAL_UART_MspInit+0x88>)
 8002784:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002788:	6413      	str	r3, [r2, #64]	@ 0x40
 800278a:	4b15      	ldr	r3, [pc, #84]	@ (80027e0 <HAL_UART_MspInit+0x88>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	4b11      	ldr	r3, [pc, #68]	@ (80027e0 <HAL_UART_MspInit+0x88>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279e:	4a10      	ldr	r2, [pc, #64]	@ (80027e0 <HAL_UART_MspInit+0x88>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027a6:	4b0e      	ldr	r3, [pc, #56]	@ (80027e0 <HAL_UART_MspInit+0x88>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80027b2:	230c      	movs	r3, #12
 80027b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b6:	2302      	movs	r3, #2
 80027b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027be:	2303      	movs	r3, #3
 80027c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027c2:	2307      	movs	r3, #7
 80027c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c6:	f107 0314 	add.w	r3, r7, #20
 80027ca:	4619      	mov	r1, r3
 80027cc:	4805      	ldr	r0, [pc, #20]	@ (80027e4 <HAL_UART_MspInit+0x8c>)
 80027ce:	f000 fb1f 	bl	8002e10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027d2:	bf00      	nop
 80027d4:	3728      	adds	r7, #40	@ 0x28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40004400 	.word	0x40004400
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40020000 	.word	0x40020000

080027e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027ec:	bf00      	nop
 80027ee:	e7fd      	b.n	80027ec <NMI_Handler+0x4>

080027f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027f4:	bf00      	nop
 80027f6:	e7fd      	b.n	80027f4 <HardFault_Handler+0x4>

080027f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027fc:	bf00      	nop
 80027fe:	e7fd      	b.n	80027fc <MemManage_Handler+0x4>

08002800 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002804:	bf00      	nop
 8002806:	e7fd      	b.n	8002804 <BusFault_Handler+0x4>

08002808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800280c:	bf00      	nop
 800280e:	e7fd      	b.n	800280c <UsageFault_Handler+0x4>

08002810 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800281e:	b480      	push	{r7}
 8002820:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800283e:	f000 f991 	bl	8002b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800284c:	4802      	ldr	r0, [pc, #8]	@ (8002858 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800284e:	f002 f82b 	bl	80048a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	200001f0 	.word	0x200001f0

0800285c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002860:	4802      	ldr	r0, [pc, #8]	@ (800286c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002862:	f002 f821 	bl	80048a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002866:	bf00      	nop
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	200001f0 	.word	0x200001f0

08002870 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002874:	4802      	ldr	r0, [pc, #8]	@ (8002880 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002876:	f002 f817 	bl	80048a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	200001f0 	.word	0x200001f0

08002884 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002888:	4802      	ldr	r0, [pc, #8]	@ (8002894 <TIM1_CC_IRQHandler+0x10>)
 800288a:	f002 f80d 	bl	80048a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800288e:	bf00      	nop
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	200001f0 	.word	0x200001f0

08002898 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800289c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80028a0:	f000 fc86 	bl	80031b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80028a4:	bf00      	nop
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80028ac:	4802      	ldr	r0, [pc, #8]	@ (80028b8 <TIM5_IRQHandler+0x10>)
 80028ae:	f001 fffb 	bl	80048a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80028b2:	bf00      	nop
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	200002c8 	.word	0x200002c8

080028bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return 1;
 80028c0:	2301      	movs	r3, #1
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <_kill>:

int _kill(int pid, int sig)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028d6:	f004 faeb 	bl	8006eb0 <__errno>
 80028da:	4603      	mov	r3, r0
 80028dc:	2216      	movs	r2, #22
 80028de:	601a      	str	r2, [r3, #0]
  return -1;
 80028e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <_exit>:

void _exit (int status)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028f4:	f04f 31ff 	mov.w	r1, #4294967295
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff ffe7 	bl	80028cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80028fe:	bf00      	nop
 8002900:	e7fd      	b.n	80028fe <_exit+0x12>

08002902 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b086      	sub	sp, #24
 8002906:	af00      	add	r7, sp, #0
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800290e:	2300      	movs	r3, #0
 8002910:	617b      	str	r3, [r7, #20]
 8002912:	e00a      	b.n	800292a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002914:	f3af 8000 	nop.w
 8002918:	4601      	mov	r1, r0
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	60ba      	str	r2, [r7, #8]
 8002920:	b2ca      	uxtb	r2, r1
 8002922:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	3301      	adds	r3, #1
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	429a      	cmp	r2, r3
 8002930:	dbf0      	blt.n	8002914 <_read+0x12>
  }

  return len;
 8002932:	687b      	ldr	r3, [r7, #4]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]
 800294c:	e009      	b.n	8002962 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	1c5a      	adds	r2, r3, #1
 8002952:	60ba      	str	r2, [r7, #8]
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	3301      	adds	r3, #1
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	429a      	cmp	r2, r3
 8002968:	dbf1      	blt.n	800294e <_write+0x12>
  }
  return len;
 800296a:	687b      	ldr	r3, [r7, #4]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3718      	adds	r7, #24
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <_close>:

int _close(int file)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800297c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002980:	4618      	mov	r0, r3
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800299c:	605a      	str	r2, [r3, #4]
  return 0;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <_isatty>:

int _isatty(int file)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029b4:	2301      	movs	r3, #1
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b085      	sub	sp, #20
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	60f8      	str	r0, [r7, #12]
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029e4:	4a14      	ldr	r2, [pc, #80]	@ (8002a38 <_sbrk+0x5c>)
 80029e6:	4b15      	ldr	r3, [pc, #84]	@ (8002a3c <_sbrk+0x60>)
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029f0:	4b13      	ldr	r3, [pc, #76]	@ (8002a40 <_sbrk+0x64>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d102      	bne.n	80029fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029f8:	4b11      	ldr	r3, [pc, #68]	@ (8002a40 <_sbrk+0x64>)
 80029fa:	4a12      	ldr	r2, [pc, #72]	@ (8002a44 <_sbrk+0x68>)
 80029fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029fe:	4b10      	ldr	r3, [pc, #64]	@ (8002a40 <_sbrk+0x64>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4413      	add	r3, r2
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d207      	bcs.n	8002a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a0c:	f004 fa50 	bl	8006eb0 <__errno>
 8002a10:	4603      	mov	r3, r0
 8002a12:	220c      	movs	r2, #12
 8002a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a16:	f04f 33ff 	mov.w	r3, #4294967295
 8002a1a:	e009      	b.n	8002a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a1c:	4b08      	ldr	r3, [pc, #32]	@ (8002a40 <_sbrk+0x64>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a22:	4b07      	ldr	r3, [pc, #28]	@ (8002a40 <_sbrk+0x64>)
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4413      	add	r3, r2
 8002a2a:	4a05      	ldr	r2, [pc, #20]	@ (8002a40 <_sbrk+0x64>)
 8002a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	20020000 	.word	0x20020000
 8002a3c:	00000400 	.word	0x00000400
 8002a40:	200003dc 	.word	0x200003dc
 8002a44:	20000538 	.word	0x20000538

08002a48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a4c:	4b06      	ldr	r3, [pc, #24]	@ (8002a68 <SystemInit+0x20>)
 8002a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a52:	4a05      	ldr	r2, [pc, #20]	@ (8002a68 <SystemInit+0x20>)
 8002a54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a5c:	bf00      	nop
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	e000ed00 	.word	0xe000ed00

08002a6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002aa4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a70:	f7ff ffea 	bl	8002a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a74:	480c      	ldr	r0, [pc, #48]	@ (8002aa8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a76:	490d      	ldr	r1, [pc, #52]	@ (8002aac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a78:	4a0d      	ldr	r2, [pc, #52]	@ (8002ab0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a7c:	e002      	b.n	8002a84 <LoopCopyDataInit>

08002a7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a82:	3304      	adds	r3, #4

08002a84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a88:	d3f9      	bcc.n	8002a7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a8c:	4c0a      	ldr	r4, [pc, #40]	@ (8002ab8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a90:	e001      	b.n	8002a96 <LoopFillZerobss>

08002a92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a94:	3204      	adds	r2, #4

08002a96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a98:	d3fb      	bcc.n	8002a92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a9a:	f004 fa0f 	bl	8006ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a9e:	f7ff f8af 	bl	8001c00 <main>
  bx  lr    
 8002aa2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002aa4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002aac:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002ab0:	080091a8 	.word	0x080091a8
  ldr r2, =_sbss
 8002ab4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002ab8:	20000534 	.word	0x20000534

08002abc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002abc:	e7fe      	b.n	8002abc <ADC_IRQHandler>
	...

08002ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8002b00 <HAL_Init+0x40>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b00 <HAL_Init+0x40>)
 8002aca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ace:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b00 <HAL_Init+0x40>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8002b00 <HAL_Init+0x40>)
 8002ad6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ada:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002adc:	4b08      	ldr	r3, [pc, #32]	@ (8002b00 <HAL_Init+0x40>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a07      	ldr	r2, [pc, #28]	@ (8002b00 <HAL_Init+0x40>)
 8002ae2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ae6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ae8:	2003      	movs	r0, #3
 8002aea:	f000 f94f 	bl	8002d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002aee:	200f      	movs	r0, #15
 8002af0:	f000 f808 	bl	8002b04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002af4:	f7ff fcc6 	bl	8002484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40023c00 	.word	0x40023c00

08002b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b0c:	4b12      	ldr	r3, [pc, #72]	@ (8002b58 <HAL_InitTick+0x54>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4b12      	ldr	r3, [pc, #72]	@ (8002b5c <HAL_InitTick+0x58>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	4619      	mov	r1, r3
 8002b16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 f967 	bl	8002df6 <HAL_SYSTICK_Config>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e00e      	b.n	8002b50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b0f      	cmp	r3, #15
 8002b36:	d80a      	bhi.n	8002b4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b38:	2200      	movs	r2, #0
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b40:	f000 f92f 	bl	8002da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b44:	4a06      	ldr	r2, [pc, #24]	@ (8002b60 <HAL_InitTick+0x5c>)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	e000      	b.n	8002b50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	20000000 	.word	0x20000000
 8002b5c:	20000008 	.word	0x20000008
 8002b60:	20000004 	.word	0x20000004

08002b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b68:	4b06      	ldr	r3, [pc, #24]	@ (8002b84 <HAL_IncTick+0x20>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	4b06      	ldr	r3, [pc, #24]	@ (8002b88 <HAL_IncTick+0x24>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4413      	add	r3, r2
 8002b74:	4a04      	ldr	r2, [pc, #16]	@ (8002b88 <HAL_IncTick+0x24>)
 8002b76:	6013      	str	r3, [r2, #0]
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	20000008 	.word	0x20000008
 8002b88:	200003e0 	.word	0x200003e0

08002b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b90:	4b03      	ldr	r3, [pc, #12]	@ (8002ba0 <HAL_GetTick+0x14>)
 8002b92:	681b      	ldr	r3, [r3, #0]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	200003e0 	.word	0x200003e0

08002ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bac:	f7ff ffee 	bl	8002b8c <HAL_GetTick>
 8002bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbc:	d005      	beq.n	8002bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8002be8 <HAL_Delay+0x44>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bca:	bf00      	nop
 8002bcc:	f7ff ffde 	bl	8002b8c <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d8f7      	bhi.n	8002bcc <HAL_Delay+0x28>
  {
  }
}
 8002bdc:	bf00      	nop
 8002bde:	bf00      	nop
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	20000008 	.word	0x20000008

08002bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c30 <__NVIC_SetPriorityGrouping+0x44>)
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c08:	4013      	ands	r3, r2
 8002c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c1e:	4a04      	ldr	r2, [pc, #16]	@ (8002c30 <__NVIC_SetPriorityGrouping+0x44>)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	60d3      	str	r3, [r2, #12]
}
 8002c24:	bf00      	nop
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	e000ed00 	.word	0xe000ed00

08002c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c38:	4b04      	ldr	r3, [pc, #16]	@ (8002c4c <__NVIC_GetPriorityGrouping+0x18>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	0a1b      	lsrs	r3, r3, #8
 8002c3e:	f003 0307 	and.w	r3, r3, #7
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	e000ed00 	.word	0xe000ed00

08002c50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	db0b      	blt.n	8002c7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c62:	79fb      	ldrb	r3, [r7, #7]
 8002c64:	f003 021f 	and.w	r2, r3, #31
 8002c68:	4907      	ldr	r1, [pc, #28]	@ (8002c88 <__NVIC_EnableIRQ+0x38>)
 8002c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6e:	095b      	lsrs	r3, r3, #5
 8002c70:	2001      	movs	r0, #1
 8002c72:	fa00 f202 	lsl.w	r2, r0, r2
 8002c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	e000e100 	.word	0xe000e100

08002c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	6039      	str	r1, [r7, #0]
 8002c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	db0a      	blt.n	8002cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	490c      	ldr	r1, [pc, #48]	@ (8002cd8 <__NVIC_SetPriority+0x4c>)
 8002ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002caa:	0112      	lsls	r2, r2, #4
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	440b      	add	r3, r1
 8002cb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cb4:	e00a      	b.n	8002ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	4908      	ldr	r1, [pc, #32]	@ (8002cdc <__NVIC_SetPriority+0x50>)
 8002cbc:	79fb      	ldrb	r3, [r7, #7]
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	3b04      	subs	r3, #4
 8002cc4:	0112      	lsls	r2, r2, #4
 8002cc6:	b2d2      	uxtb	r2, r2
 8002cc8:	440b      	add	r3, r1
 8002cca:	761a      	strb	r2, [r3, #24]
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	e000e100 	.word	0xe000e100
 8002cdc:	e000ed00 	.word	0xe000ed00

08002ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b089      	sub	sp, #36	@ 0x24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f1c3 0307 	rsb	r3, r3, #7
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	bf28      	it	cs
 8002cfe:	2304      	movcs	r3, #4
 8002d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	3304      	adds	r3, #4
 8002d06:	2b06      	cmp	r3, #6
 8002d08:	d902      	bls.n	8002d10 <NVIC_EncodePriority+0x30>
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	3b03      	subs	r3, #3
 8002d0e:	e000      	b.n	8002d12 <NVIC_EncodePriority+0x32>
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d14:	f04f 32ff 	mov.w	r2, #4294967295
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	43da      	mvns	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	401a      	ands	r2, r3
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d28:	f04f 31ff 	mov.w	r1, #4294967295
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d32:	43d9      	mvns	r1, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d38:	4313      	orrs	r3, r2
         );
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3724      	adds	r7, #36	@ 0x24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
	...

08002d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d58:	d301      	bcc.n	8002d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e00f      	b.n	8002d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d88 <SysTick_Config+0x40>)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d66:	210f      	movs	r1, #15
 8002d68:	f04f 30ff 	mov.w	r0, #4294967295
 8002d6c:	f7ff ff8e 	bl	8002c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d70:	4b05      	ldr	r3, [pc, #20]	@ (8002d88 <SysTick_Config+0x40>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d76:	4b04      	ldr	r3, [pc, #16]	@ (8002d88 <SysTick_Config+0x40>)
 8002d78:	2207      	movs	r2, #7
 8002d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	e000e010 	.word	0xe000e010

08002d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f7ff ff29 	bl	8002bec <__NVIC_SetPriorityGrouping>
}
 8002d9a:	bf00      	nop
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b086      	sub	sp, #24
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	4603      	mov	r3, r0
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	607a      	str	r2, [r7, #4]
 8002dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002db4:	f7ff ff3e 	bl	8002c34 <__NVIC_GetPriorityGrouping>
 8002db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	68b9      	ldr	r1, [r7, #8]
 8002dbe:	6978      	ldr	r0, [r7, #20]
 8002dc0:	f7ff ff8e 	bl	8002ce0 <NVIC_EncodePriority>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dca:	4611      	mov	r1, r2
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff ff5d 	bl	8002c8c <__NVIC_SetPriority>
}
 8002dd2:	bf00      	nop
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b082      	sub	sp, #8
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	4603      	mov	r3, r0
 8002de2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff ff31 	bl	8002c50 <__NVIC_EnableIRQ>
}
 8002dee:	bf00      	nop
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b082      	sub	sp, #8
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7ff ffa2 	bl	8002d48 <SysTick_Config>
 8002e04:	4603      	mov	r3, r0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b089      	sub	sp, #36	@ 0x24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e26:	2300      	movs	r3, #0
 8002e28:	61fb      	str	r3, [r7, #28]
 8002e2a:	e159      	b.n	80030e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	f040 8148 	bne.w	80030da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d005      	beq.n	8002e62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d130      	bne.n	8002ec4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	2203      	movs	r2, #3
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4013      	ands	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	68da      	ldr	r2, [r3, #12]
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	fa02 f303 	lsl.w	r3, r2, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e98:	2201      	movs	r2, #1
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	091b      	lsrs	r3, r3, #4
 8002eae:	f003 0201 	and.w	r2, r3, #1
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 0303 	and.w	r3, r3, #3
 8002ecc:	2b03      	cmp	r3, #3
 8002ece:	d017      	beq.n	8002f00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	2203      	movs	r2, #3
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	689a      	ldr	r2, [r3, #8]
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f003 0303 	and.w	r3, r3, #3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d123      	bne.n	8002f54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	08da      	lsrs	r2, r3, #3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3208      	adds	r2, #8
 8002f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	220f      	movs	r2, #15
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	08da      	lsrs	r2, r3, #3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3208      	adds	r2, #8
 8002f4e:	69b9      	ldr	r1, [r7, #24]
 8002f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	2203      	movs	r2, #3
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	43db      	mvns	r3, r3
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 0203 	and.w	r2, r3, #3
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 80a2 	beq.w	80030da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	4b57      	ldr	r3, [pc, #348]	@ (80030f8 <HAL_GPIO_Init+0x2e8>)
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9e:	4a56      	ldr	r2, [pc, #344]	@ (80030f8 <HAL_GPIO_Init+0x2e8>)
 8002fa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fa6:	4b54      	ldr	r3, [pc, #336]	@ (80030f8 <HAL_GPIO_Init+0x2e8>)
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002faa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fb2:	4a52      	ldr	r2, [pc, #328]	@ (80030fc <HAL_GPIO_Init+0x2ec>)
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	089b      	lsrs	r3, r3, #2
 8002fb8:	3302      	adds	r3, #2
 8002fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	220f      	movs	r2, #15
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a49      	ldr	r2, [pc, #292]	@ (8003100 <HAL_GPIO_Init+0x2f0>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d019      	beq.n	8003012 <HAL_GPIO_Init+0x202>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a48      	ldr	r2, [pc, #288]	@ (8003104 <HAL_GPIO_Init+0x2f4>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d013      	beq.n	800300e <HAL_GPIO_Init+0x1fe>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a47      	ldr	r2, [pc, #284]	@ (8003108 <HAL_GPIO_Init+0x2f8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d00d      	beq.n	800300a <HAL_GPIO_Init+0x1fa>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a46      	ldr	r2, [pc, #280]	@ (800310c <HAL_GPIO_Init+0x2fc>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d007      	beq.n	8003006 <HAL_GPIO_Init+0x1f6>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a45      	ldr	r2, [pc, #276]	@ (8003110 <HAL_GPIO_Init+0x300>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d101      	bne.n	8003002 <HAL_GPIO_Init+0x1f2>
 8002ffe:	2304      	movs	r3, #4
 8003000:	e008      	b.n	8003014 <HAL_GPIO_Init+0x204>
 8003002:	2307      	movs	r3, #7
 8003004:	e006      	b.n	8003014 <HAL_GPIO_Init+0x204>
 8003006:	2303      	movs	r3, #3
 8003008:	e004      	b.n	8003014 <HAL_GPIO_Init+0x204>
 800300a:	2302      	movs	r3, #2
 800300c:	e002      	b.n	8003014 <HAL_GPIO_Init+0x204>
 800300e:	2301      	movs	r3, #1
 8003010:	e000      	b.n	8003014 <HAL_GPIO_Init+0x204>
 8003012:	2300      	movs	r3, #0
 8003014:	69fa      	ldr	r2, [r7, #28]
 8003016:	f002 0203 	and.w	r2, r2, #3
 800301a:	0092      	lsls	r2, r2, #2
 800301c:	4093      	lsls	r3, r2
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4313      	orrs	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003024:	4935      	ldr	r1, [pc, #212]	@ (80030fc <HAL_GPIO_Init+0x2ec>)
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	089b      	lsrs	r3, r3, #2
 800302a:	3302      	adds	r3, #2
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003032:	4b38      	ldr	r3, [pc, #224]	@ (8003114 <HAL_GPIO_Init+0x304>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	43db      	mvns	r3, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4013      	ands	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	4313      	orrs	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003056:	4a2f      	ldr	r2, [pc, #188]	@ (8003114 <HAL_GPIO_Init+0x304>)
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800305c:	4b2d      	ldr	r3, [pc, #180]	@ (8003114 <HAL_GPIO_Init+0x304>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	43db      	mvns	r3, r3
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	4013      	ands	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d003      	beq.n	8003080 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003078:	69ba      	ldr	r2, [r7, #24]
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	4313      	orrs	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003080:	4a24      	ldr	r2, [pc, #144]	@ (8003114 <HAL_GPIO_Init+0x304>)
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003086:	4b23      	ldr	r3, [pc, #140]	@ (8003114 <HAL_GPIO_Init+0x304>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	43db      	mvns	r3, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4013      	ands	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030aa:	4a1a      	ldr	r2, [pc, #104]	@ (8003114 <HAL_GPIO_Init+0x304>)
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030b0:	4b18      	ldr	r3, [pc, #96]	@ (8003114 <HAL_GPIO_Init+0x304>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	43db      	mvns	r3, r3
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4013      	ands	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030d4:	4a0f      	ldr	r2, [pc, #60]	@ (8003114 <HAL_GPIO_Init+0x304>)
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	3301      	adds	r3, #1
 80030de:	61fb      	str	r3, [r7, #28]
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	2b0f      	cmp	r3, #15
 80030e4:	f67f aea2 	bls.w	8002e2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030e8:	bf00      	nop
 80030ea:	bf00      	nop
 80030ec:	3724      	adds	r7, #36	@ 0x24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40013800 	.word	0x40013800
 8003100:	40020000 	.word	0x40020000
 8003104:	40020400 	.word	0x40020400
 8003108:	40020800 	.word	0x40020800
 800310c:	40020c00 	.word	0x40020c00
 8003110:	40021000 	.word	0x40021000
 8003114:	40013c00 	.word	0x40013c00

08003118 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	460b      	mov	r3, r1
 8003122:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	887b      	ldrh	r3, [r7, #2]
 800312a:	4013      	ands	r3, r2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003130:	2301      	movs	r3, #1
 8003132:	73fb      	strb	r3, [r7, #15]
 8003134:	e001      	b.n	800313a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003136:	2300      	movs	r3, #0
 8003138:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800313a:	7bfb      	ldrb	r3, [r7, #15]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	807b      	strh	r3, [r7, #2]
 8003154:	4613      	mov	r3, r2
 8003156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003158:	787b      	ldrb	r3, [r7, #1]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800315e:	887a      	ldrh	r2, [r7, #2]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003164:	e003      	b.n	800316e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003166:	887b      	ldrh	r3, [r7, #2]
 8003168:	041a      	lsls	r2, r3, #16
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	619a      	str	r2, [r3, #24]
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800317a:	b480      	push	{r7}
 800317c:	b085      	sub	sp, #20
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
 8003182:	460b      	mov	r3, r1
 8003184:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800318c:	887a      	ldrh	r2, [r7, #2]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	4013      	ands	r3, r2
 8003192:	041a      	lsls	r2, r3, #16
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	43d9      	mvns	r1, r3
 8003198:	887b      	ldrh	r3, [r7, #2]
 800319a:	400b      	ands	r3, r1
 800319c:	431a      	orrs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	619a      	str	r2, [r3, #24]
}
 80031a2:	bf00      	nop
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
	...

080031b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80031ba:	4b08      	ldr	r3, [pc, #32]	@ (80031dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031bc:	695a      	ldr	r2, [r3, #20]
 80031be:	88fb      	ldrh	r3, [r7, #6]
 80031c0:	4013      	ands	r3, r2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d006      	beq.n	80031d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031c6:	4a05      	ldr	r2, [pc, #20]	@ (80031dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031c8:	88fb      	ldrh	r3, [r7, #6]
 80031ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031cc:	88fb      	ldrh	r3, [r7, #6]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fe fca4 	bl	8001b1c <HAL_GPIO_EXTI_Callback>
  }
}
 80031d4:	bf00      	nop
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40013c00 	.word	0x40013c00

080031e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d101      	bne.n	80031f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e267      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d075      	beq.n	80032ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031fe:	4b88      	ldr	r3, [pc, #544]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 030c 	and.w	r3, r3, #12
 8003206:	2b04      	cmp	r3, #4
 8003208:	d00c      	beq.n	8003224 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800320a:	4b85      	ldr	r3, [pc, #532]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003212:	2b08      	cmp	r3, #8
 8003214:	d112      	bne.n	800323c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003216:	4b82      	ldr	r3, [pc, #520]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800321e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003222:	d10b      	bne.n	800323c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003224:	4b7e      	ldr	r3, [pc, #504]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d05b      	beq.n	80032e8 <HAL_RCC_OscConfig+0x108>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d157      	bne.n	80032e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e242      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003244:	d106      	bne.n	8003254 <HAL_RCC_OscConfig+0x74>
 8003246:	4b76      	ldr	r3, [pc, #472]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a75      	ldr	r2, [pc, #468]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 800324c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e01d      	b.n	8003290 <HAL_RCC_OscConfig+0xb0>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800325c:	d10c      	bne.n	8003278 <HAL_RCC_OscConfig+0x98>
 800325e:	4b70      	ldr	r3, [pc, #448]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a6f      	ldr	r2, [pc, #444]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003264:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	4b6d      	ldr	r3, [pc, #436]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a6c      	ldr	r2, [pc, #432]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003270:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	e00b      	b.n	8003290 <HAL_RCC_OscConfig+0xb0>
 8003278:	4b69      	ldr	r3, [pc, #420]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a68      	ldr	r2, [pc, #416]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 800327e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	4b66      	ldr	r3, [pc, #408]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a65      	ldr	r2, [pc, #404]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 800328a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800328e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d013      	beq.n	80032c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003298:	f7ff fc78 	bl	8002b8c <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032a0:	f7ff fc74 	bl	8002b8c <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b64      	cmp	r3, #100	@ 0x64
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e207      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b2:	4b5b      	ldr	r3, [pc, #364]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0xc0>
 80032be:	e014      	b.n	80032ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c0:	f7ff fc64 	bl	8002b8c <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032c8:	f7ff fc60 	bl	8002b8c <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b64      	cmp	r3, #100	@ 0x64
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e1f3      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032da:	4b51      	ldr	r3, [pc, #324]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0xe8>
 80032e6:	e000      	b.n	80032ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d063      	beq.n	80033be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 030c 	and.w	r3, r3, #12
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00b      	beq.n	800331a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003302:	4b47      	ldr	r3, [pc, #284]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800330a:	2b08      	cmp	r3, #8
 800330c:	d11c      	bne.n	8003348 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800330e:	4b44      	ldr	r3, [pc, #272]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d116      	bne.n	8003348 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331a:	4b41      	ldr	r3, [pc, #260]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d005      	beq.n	8003332 <HAL_RCC_OscConfig+0x152>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d001      	beq.n	8003332 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e1c7      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003332:	4b3b      	ldr	r3, [pc, #236]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	4937      	ldr	r1, [pc, #220]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003342:	4313      	orrs	r3, r2
 8003344:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003346:	e03a      	b.n	80033be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d020      	beq.n	8003392 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003350:	4b34      	ldr	r3, [pc, #208]	@ (8003424 <HAL_RCC_OscConfig+0x244>)
 8003352:	2201      	movs	r2, #1
 8003354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003356:	f7ff fc19 	bl	8002b8c <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800335e:	f7ff fc15 	bl	8002b8c <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e1a8      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003370:	4b2b      	ldr	r3, [pc, #172]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0f0      	beq.n	800335e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337c:	4b28      	ldr	r3, [pc, #160]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	4925      	ldr	r1, [pc, #148]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 800338c:	4313      	orrs	r3, r2
 800338e:	600b      	str	r3, [r1, #0]
 8003390:	e015      	b.n	80033be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003392:	4b24      	ldr	r3, [pc, #144]	@ (8003424 <HAL_RCC_OscConfig+0x244>)
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003398:	f7ff fbf8 	bl	8002b8c <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033a0:	f7ff fbf4 	bl	8002b8c <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e187      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f0      	bne.n	80033a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0308 	and.w	r3, r3, #8
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d036      	beq.n	8003438 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d016      	beq.n	8003400 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033d2:	4b15      	ldr	r3, [pc, #84]	@ (8003428 <HAL_RCC_OscConfig+0x248>)
 80033d4:	2201      	movs	r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d8:	f7ff fbd8 	bl	8002b8c <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033e0:	f7ff fbd4 	bl	8002b8c <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e167      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003420 <HAL_RCC_OscConfig+0x240>)
 80033f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0x200>
 80033fe:	e01b      	b.n	8003438 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003400:	4b09      	ldr	r3, [pc, #36]	@ (8003428 <HAL_RCC_OscConfig+0x248>)
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003406:	f7ff fbc1 	bl	8002b8c <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800340c:	e00e      	b.n	800342c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800340e:	f7ff fbbd 	bl	8002b8c <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d907      	bls.n	800342c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e150      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
 8003420:	40023800 	.word	0x40023800
 8003424:	42470000 	.word	0x42470000
 8003428:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800342c:	4b88      	ldr	r3, [pc, #544]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 800342e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1ea      	bne.n	800340e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 8097 	beq.w	8003574 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003446:	2300      	movs	r3, #0
 8003448:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800344a:	4b81      	ldr	r3, [pc, #516]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 800344c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10f      	bne.n	8003476 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003456:	2300      	movs	r3, #0
 8003458:	60bb      	str	r3, [r7, #8]
 800345a:	4b7d      	ldr	r3, [pc, #500]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345e:	4a7c      	ldr	r2, [pc, #496]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 8003460:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003464:	6413      	str	r3, [r2, #64]	@ 0x40
 8003466:	4b7a      	ldr	r3, [pc, #488]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 8003468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800346e:	60bb      	str	r3, [r7, #8]
 8003470:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003472:	2301      	movs	r3, #1
 8003474:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003476:	4b77      	ldr	r3, [pc, #476]	@ (8003654 <HAL_RCC_OscConfig+0x474>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800347e:	2b00      	cmp	r3, #0
 8003480:	d118      	bne.n	80034b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003482:	4b74      	ldr	r3, [pc, #464]	@ (8003654 <HAL_RCC_OscConfig+0x474>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a73      	ldr	r2, [pc, #460]	@ (8003654 <HAL_RCC_OscConfig+0x474>)
 8003488:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800348c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800348e:	f7ff fb7d 	bl	8002b8c <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003496:	f7ff fb79 	bl	8002b8c <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e10c      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003654 <HAL_RCC_OscConfig+0x474>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d106      	bne.n	80034ca <HAL_RCC_OscConfig+0x2ea>
 80034bc:	4b64      	ldr	r3, [pc, #400]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80034be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c0:	4a63      	ldr	r2, [pc, #396]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80034c8:	e01c      	b.n	8003504 <HAL_RCC_OscConfig+0x324>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	2b05      	cmp	r3, #5
 80034d0:	d10c      	bne.n	80034ec <HAL_RCC_OscConfig+0x30c>
 80034d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80034d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034d6:	4a5e      	ldr	r2, [pc, #376]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80034d8:	f043 0304 	orr.w	r3, r3, #4
 80034dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80034de:	4b5c      	ldr	r3, [pc, #368]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80034e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80034e4:	f043 0301 	orr.w	r3, r3, #1
 80034e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80034ea:	e00b      	b.n	8003504 <HAL_RCC_OscConfig+0x324>
 80034ec:	4b58      	ldr	r3, [pc, #352]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80034ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f0:	4a57      	ldr	r2, [pc, #348]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80034f2:	f023 0301 	bic.w	r3, r3, #1
 80034f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80034f8:	4b55      	ldr	r3, [pc, #340]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80034fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034fc:	4a54      	ldr	r2, [pc, #336]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80034fe:	f023 0304 	bic.w	r3, r3, #4
 8003502:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d015      	beq.n	8003538 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350c:	f7ff fb3e 	bl	8002b8c <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003512:	e00a      	b.n	800352a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003514:	f7ff fb3a 	bl	8002b8c <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003522:	4293      	cmp	r3, r2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e0cb      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800352a:	4b49      	ldr	r3, [pc, #292]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 800352c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0ee      	beq.n	8003514 <HAL_RCC_OscConfig+0x334>
 8003536:	e014      	b.n	8003562 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003538:	f7ff fb28 	bl	8002b8c <HAL_GetTick>
 800353c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800353e:	e00a      	b.n	8003556 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003540:	f7ff fb24 	bl	8002b8c <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800354e:	4293      	cmp	r3, r2
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e0b5      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003556:	4b3e      	ldr	r3, [pc, #248]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 8003558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1ee      	bne.n	8003540 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003562:	7dfb      	ldrb	r3, [r7, #23]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d105      	bne.n	8003574 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003568:	4b39      	ldr	r3, [pc, #228]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 800356a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356c:	4a38      	ldr	r2, [pc, #224]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 800356e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003572:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 80a1 	beq.w	80036c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800357e:	4b34      	ldr	r3, [pc, #208]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	2b08      	cmp	r3, #8
 8003588:	d05c      	beq.n	8003644 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d141      	bne.n	8003616 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003592:	4b31      	ldr	r3, [pc, #196]	@ (8003658 <HAL_RCC_OscConfig+0x478>)
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003598:	f7ff faf8 	bl	8002b8c <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a0:	f7ff faf4 	bl	8002b8c <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e087      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035b2:	4b27      	ldr	r3, [pc, #156]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69da      	ldr	r2, [r3, #28]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035cc:	019b      	lsls	r3, r3, #6
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d4:	085b      	lsrs	r3, r3, #1
 80035d6:	3b01      	subs	r3, #1
 80035d8:	041b      	lsls	r3, r3, #16
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e0:	061b      	lsls	r3, r3, #24
 80035e2:	491b      	ldr	r1, [pc, #108]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003658 <HAL_RCC_OscConfig+0x478>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ee:	f7ff facd 	bl	8002b8c <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f6:	f7ff fac9 	bl	8002b8c <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e05c      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003608:	4b11      	ldr	r3, [pc, #68]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0f0      	beq.n	80035f6 <HAL_RCC_OscConfig+0x416>
 8003614:	e054      	b.n	80036c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003616:	4b10      	ldr	r3, [pc, #64]	@ (8003658 <HAL_RCC_OscConfig+0x478>)
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361c:	f7ff fab6 	bl	8002b8c <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003624:	f7ff fab2 	bl	8002b8c <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e045      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003636:	4b06      	ldr	r3, [pc, #24]	@ (8003650 <HAL_RCC_OscConfig+0x470>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f0      	bne.n	8003624 <HAL_RCC_OscConfig+0x444>
 8003642:	e03d      	b.n	80036c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d107      	bne.n	800365c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e038      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
 8003650:	40023800 	.word	0x40023800
 8003654:	40007000 	.word	0x40007000
 8003658:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800365c:	4b1b      	ldr	r3, [pc, #108]	@ (80036cc <HAL_RCC_OscConfig+0x4ec>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d028      	beq.n	80036bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003674:	429a      	cmp	r2, r3
 8003676:	d121      	bne.n	80036bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003682:	429a      	cmp	r2, r3
 8003684:	d11a      	bne.n	80036bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800368c:	4013      	ands	r3, r2
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003692:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003694:	4293      	cmp	r3, r2
 8003696:	d111      	bne.n	80036bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a2:	085b      	lsrs	r3, r3, #1
 80036a4:	3b01      	subs	r3, #1
 80036a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d107      	bne.n	80036bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e000      	b.n	80036c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	40023800 	.word	0x40023800

080036d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e0cc      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036e4:	4b68      	ldr	r3, [pc, #416]	@ (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d90c      	bls.n	800370c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036f2:	4b65      	ldr	r3, [pc, #404]	@ (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fa:	4b63      	ldr	r3, [pc, #396]	@ (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0307 	and.w	r3, r3, #7
 8003702:	683a      	ldr	r2, [r7, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d001      	beq.n	800370c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e0b8      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d020      	beq.n	800375a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003724:	4b59      	ldr	r3, [pc, #356]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	4a58      	ldr	r2, [pc, #352]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800372e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0308 	and.w	r3, r3, #8
 8003738:	2b00      	cmp	r3, #0
 800373a:	d005      	beq.n	8003748 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800373c:	4b53      	ldr	r3, [pc, #332]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	4a52      	ldr	r2, [pc, #328]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003746:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003748:	4b50      	ldr	r3, [pc, #320]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	494d      	ldr	r1, [pc, #308]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	4313      	orrs	r3, r2
 8003758:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d044      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d107      	bne.n	800377e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800376e:	4b47      	ldr	r3, [pc, #284]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d119      	bne.n	80037ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e07f      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d003      	beq.n	800378e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800378a:	2b03      	cmp	r3, #3
 800378c:	d107      	bne.n	800379e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800378e:	4b3f      	ldr	r3, [pc, #252]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d109      	bne.n	80037ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e06f      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800379e:	4b3b      	ldr	r3, [pc, #236]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e067      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ae:	4b37      	ldr	r3, [pc, #220]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f023 0203 	bic.w	r2, r3, #3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	4934      	ldr	r1, [pc, #208]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037c0:	f7ff f9e4 	bl	8002b8c <HAL_GetTick>
 80037c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037c6:	e00a      	b.n	80037de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c8:	f7ff f9e0 	bl	8002b8c <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e04f      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037de:	4b2b      	ldr	r3, [pc, #172]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 020c 	and.w	r2, r3, #12
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d1eb      	bne.n	80037c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037f0:	4b25      	ldr	r3, [pc, #148]	@ (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d20c      	bcs.n	8003818 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037fe:	4b22      	ldr	r3, [pc, #136]	@ (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 8003800:	683a      	ldr	r2, [r7, #0]
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003806:	4b20      	ldr	r3, [pc, #128]	@ (8003888 <HAL_RCC_ClockConfig+0x1b8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d001      	beq.n	8003818 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e032      	b.n	800387e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003824:	4b19      	ldr	r3, [pc, #100]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	4916      	ldr	r1, [pc, #88]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	4313      	orrs	r3, r2
 8003834:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	2b00      	cmp	r3, #0
 8003840:	d009      	beq.n	8003856 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003842:	4b12      	ldr	r3, [pc, #72]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	490e      	ldr	r1, [pc, #56]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	4313      	orrs	r3, r2
 8003854:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003856:	f000 f821 	bl	800389c <HAL_RCC_GetSysClockFreq>
 800385a:	4602      	mov	r2, r0
 800385c:	4b0b      	ldr	r3, [pc, #44]	@ (800388c <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	091b      	lsrs	r3, r3, #4
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	490a      	ldr	r1, [pc, #40]	@ (8003890 <HAL_RCC_ClockConfig+0x1c0>)
 8003868:	5ccb      	ldrb	r3, [r1, r3]
 800386a:	fa22 f303 	lsr.w	r3, r2, r3
 800386e:	4a09      	ldr	r2, [pc, #36]	@ (8003894 <HAL_RCC_ClockConfig+0x1c4>)
 8003870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003872:	4b09      	ldr	r3, [pc, #36]	@ (8003898 <HAL_RCC_ClockConfig+0x1c8>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff f944 	bl	8002b04 <HAL_InitTick>

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40023c00 	.word	0x40023c00
 800388c:	40023800 	.word	0x40023800
 8003890:	08008e10 	.word	0x08008e10
 8003894:	20000000 	.word	0x20000000
 8003898:	20000004 	.word	0x20000004

0800389c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800389c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038a0:	b090      	sub	sp, #64	@ 0x40
 80038a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80038a8:	2300      	movs	r3, #0
 80038aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038ac:	2300      	movs	r3, #0
 80038ae:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80038b0:	2300      	movs	r3, #0
 80038b2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038b4:	4b59      	ldr	r3, [pc, #356]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x180>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 030c 	and.w	r3, r3, #12
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d00d      	beq.n	80038dc <HAL_RCC_GetSysClockFreq+0x40>
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	f200 80a1 	bhi.w	8003a08 <HAL_RCC_GetSysClockFreq+0x16c>
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d002      	beq.n	80038d0 <HAL_RCC_GetSysClockFreq+0x34>
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	d003      	beq.n	80038d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80038ce:	e09b      	b.n	8003a08 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038d0:	4b53      	ldr	r3, [pc, #332]	@ (8003a20 <HAL_RCC_GetSysClockFreq+0x184>)
 80038d2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80038d4:	e09b      	b.n	8003a0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038d6:	4b53      	ldr	r3, [pc, #332]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0x188>)
 80038d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038da:	e098      	b.n	8003a0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038dc:	4b4f      	ldr	r3, [pc, #316]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x180>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038e4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038e6:	4b4d      	ldr	r3, [pc, #308]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x180>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d028      	beq.n	8003944 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038f2:	4b4a      	ldr	r3, [pc, #296]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x180>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	099b      	lsrs	r3, r3, #6
 80038f8:	2200      	movs	r2, #0
 80038fa:	623b      	str	r3, [r7, #32]
 80038fc:	627a      	str	r2, [r7, #36]	@ 0x24
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003904:	2100      	movs	r1, #0
 8003906:	4b47      	ldr	r3, [pc, #284]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0x188>)
 8003908:	fb03 f201 	mul.w	r2, r3, r1
 800390c:	2300      	movs	r3, #0
 800390e:	fb00 f303 	mul.w	r3, r0, r3
 8003912:	4413      	add	r3, r2
 8003914:	4a43      	ldr	r2, [pc, #268]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0x188>)
 8003916:	fba0 1202 	umull	r1, r2, r0, r2
 800391a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800391c:	460a      	mov	r2, r1
 800391e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003920:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003922:	4413      	add	r3, r2
 8003924:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003928:	2200      	movs	r2, #0
 800392a:	61bb      	str	r3, [r7, #24]
 800392c:	61fa      	str	r2, [r7, #28]
 800392e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003932:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003936:	f7fd f93f 	bl	8000bb8 <__aeabi_uldivmod>
 800393a:	4602      	mov	r2, r0
 800393c:	460b      	mov	r3, r1
 800393e:	4613      	mov	r3, r2
 8003940:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003942:	e053      	b.n	80039ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003944:	4b35      	ldr	r3, [pc, #212]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x180>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	099b      	lsrs	r3, r3, #6
 800394a:	2200      	movs	r2, #0
 800394c:	613b      	str	r3, [r7, #16]
 800394e:	617a      	str	r2, [r7, #20]
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003956:	f04f 0b00 	mov.w	fp, #0
 800395a:	4652      	mov	r2, sl
 800395c:	465b      	mov	r3, fp
 800395e:	f04f 0000 	mov.w	r0, #0
 8003962:	f04f 0100 	mov.w	r1, #0
 8003966:	0159      	lsls	r1, r3, #5
 8003968:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800396c:	0150      	lsls	r0, r2, #5
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	ebb2 080a 	subs.w	r8, r2, sl
 8003976:	eb63 090b 	sbc.w	r9, r3, fp
 800397a:	f04f 0200 	mov.w	r2, #0
 800397e:	f04f 0300 	mov.w	r3, #0
 8003982:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003986:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800398a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800398e:	ebb2 0408 	subs.w	r4, r2, r8
 8003992:	eb63 0509 	sbc.w	r5, r3, r9
 8003996:	f04f 0200 	mov.w	r2, #0
 800399a:	f04f 0300 	mov.w	r3, #0
 800399e:	00eb      	lsls	r3, r5, #3
 80039a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039a4:	00e2      	lsls	r2, r4, #3
 80039a6:	4614      	mov	r4, r2
 80039a8:	461d      	mov	r5, r3
 80039aa:	eb14 030a 	adds.w	r3, r4, sl
 80039ae:	603b      	str	r3, [r7, #0]
 80039b0:	eb45 030b 	adc.w	r3, r5, fp
 80039b4:	607b      	str	r3, [r7, #4]
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	f04f 0300 	mov.w	r3, #0
 80039be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039c2:	4629      	mov	r1, r5
 80039c4:	028b      	lsls	r3, r1, #10
 80039c6:	4621      	mov	r1, r4
 80039c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039cc:	4621      	mov	r1, r4
 80039ce:	028a      	lsls	r2, r1, #10
 80039d0:	4610      	mov	r0, r2
 80039d2:	4619      	mov	r1, r3
 80039d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d6:	2200      	movs	r2, #0
 80039d8:	60bb      	str	r3, [r7, #8]
 80039da:	60fa      	str	r2, [r7, #12]
 80039dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039e0:	f7fd f8ea 	bl	8000bb8 <__aeabi_uldivmod>
 80039e4:	4602      	mov	r2, r0
 80039e6:	460b      	mov	r3, r1
 80039e8:	4613      	mov	r3, r2
 80039ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039ec:	4b0b      	ldr	r3, [pc, #44]	@ (8003a1c <HAL_RCC_GetSysClockFreq+0x180>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	0c1b      	lsrs	r3, r3, #16
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	3301      	adds	r3, #1
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80039fc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80039fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a04:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a06:	e002      	b.n	8003a0e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a08:	4b05      	ldr	r3, [pc, #20]	@ (8003a20 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3740      	adds	r7, #64	@ 0x40
 8003a14:	46bd      	mov	sp, r7
 8003a16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	00f42400 	.word	0x00f42400
 8003a24:	017d7840 	.word	0x017d7840

08003a28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a2c:	4b03      	ldr	r3, [pc, #12]	@ (8003a3c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	20000000 	.word	0x20000000

08003a40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a44:	f7ff fff0 	bl	8003a28 <HAL_RCC_GetHCLKFreq>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	4b05      	ldr	r3, [pc, #20]	@ (8003a60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	0a9b      	lsrs	r3, r3, #10
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	4903      	ldr	r1, [pc, #12]	@ (8003a64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a56:	5ccb      	ldrb	r3, [r1, r3]
 8003a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40023800 	.word	0x40023800
 8003a64:	08008e20 	.word	0x08008e20

08003a68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a6c:	f7ff ffdc 	bl	8003a28 <HAL_RCC_GetHCLKFreq>
 8003a70:	4602      	mov	r2, r0
 8003a72:	4b05      	ldr	r3, [pc, #20]	@ (8003a88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	0b5b      	lsrs	r3, r3, #13
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	4903      	ldr	r1, [pc, #12]	@ (8003a8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a7e:	5ccb      	ldrb	r3, [r1, r3]
 8003a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	08008e20 	.word	0x08008e20

08003a90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e041      	b.n	8003b26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d106      	bne.n	8003abc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f7fe fd0c 	bl	80024d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3304      	adds	r3, #4
 8003acc:	4619      	mov	r1, r3
 8003ace:	4610      	mov	r0, r2
 8003ad0:	f001 fa62 	bl	8004f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b082      	sub	sp, #8
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e041      	b.n	8003bc4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d106      	bne.n	8003b5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f839 	bl	8003bcc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2202      	movs	r2, #2
 8003b5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3304      	adds	r3, #4
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4610      	mov	r0, r2
 8003b6e:	f001 fa13 	bl	8004f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3708      	adds	r7, #8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d109      	bne.n	8003c04 <HAL_TIM_PWM_Start+0x24>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	bf14      	ite	ne
 8003bfc:	2301      	movne	r3, #1
 8003bfe:	2300      	moveq	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	e022      	b.n	8003c4a <HAL_TIM_PWM_Start+0x6a>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	2b04      	cmp	r3, #4
 8003c08:	d109      	bne.n	8003c1e <HAL_TIM_PWM_Start+0x3e>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	bf14      	ite	ne
 8003c16:	2301      	movne	r3, #1
 8003c18:	2300      	moveq	r3, #0
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	e015      	b.n	8003c4a <HAL_TIM_PWM_Start+0x6a>
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d109      	bne.n	8003c38 <HAL_TIM_PWM_Start+0x58>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	bf14      	ite	ne
 8003c30:	2301      	movne	r3, #1
 8003c32:	2300      	moveq	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	e008      	b.n	8003c4a <HAL_TIM_PWM_Start+0x6a>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	bf14      	ite	ne
 8003c44:	2301      	movne	r3, #1
 8003c46:	2300      	moveq	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e068      	b.n	8003d24 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d104      	bne.n	8003c62 <HAL_TIM_PWM_Start+0x82>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c60:	e013      	b.n	8003c8a <HAL_TIM_PWM_Start+0xaa>
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d104      	bne.n	8003c72 <HAL_TIM_PWM_Start+0x92>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c70:	e00b      	b.n	8003c8a <HAL_TIM_PWM_Start+0xaa>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d104      	bne.n	8003c82 <HAL_TIM_PWM_Start+0xa2>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c80:	e003      	b.n	8003c8a <HAL_TIM_PWM_Start+0xaa>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2202      	movs	r2, #2
 8003c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	6839      	ldr	r1, [r7, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f001 fd50 	bl	8005738 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a23      	ldr	r2, [pc, #140]	@ (8003d2c <HAL_TIM_PWM_Start+0x14c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d107      	bne.n	8003cb2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003cb0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a1d      	ldr	r2, [pc, #116]	@ (8003d2c <HAL_TIM_PWM_Start+0x14c>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d018      	beq.n	8003cee <HAL_TIM_PWM_Start+0x10e>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cc4:	d013      	beq.n	8003cee <HAL_TIM_PWM_Start+0x10e>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a19      	ldr	r2, [pc, #100]	@ (8003d30 <HAL_TIM_PWM_Start+0x150>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d00e      	beq.n	8003cee <HAL_TIM_PWM_Start+0x10e>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a17      	ldr	r2, [pc, #92]	@ (8003d34 <HAL_TIM_PWM_Start+0x154>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d009      	beq.n	8003cee <HAL_TIM_PWM_Start+0x10e>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a16      	ldr	r2, [pc, #88]	@ (8003d38 <HAL_TIM_PWM_Start+0x158>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d004      	beq.n	8003cee <HAL_TIM_PWM_Start+0x10e>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a14      	ldr	r2, [pc, #80]	@ (8003d3c <HAL_TIM_PWM_Start+0x15c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d111      	bne.n	8003d12 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2b06      	cmp	r3, #6
 8003cfe:	d010      	beq.n	8003d22 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d10:	e007      	b.n	8003d22 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0201 	orr.w	r2, r2, #1
 8003d20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40010000 	.word	0x40010000
 8003d30:	40000400 	.word	0x40000400
 8003d34:	40000800 	.word	0x40000800
 8003d38:	40000c00 	.word	0x40000c00
 8003d3c:	40014000 	.word	0x40014000

08003d40 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	6839      	ldr	r1, [r7, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f001 fcf0 	bl	8005738 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a29      	ldr	r2, [pc, #164]	@ (8003e04 <HAL_TIM_PWM_Stop+0xc4>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d117      	bne.n	8003d92 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6a1a      	ldr	r2, [r3, #32]
 8003d68:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10f      	bne.n	8003d92 <HAL_TIM_PWM_Stop+0x52>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6a1a      	ldr	r2, [r3, #32]
 8003d78:	f240 4344 	movw	r3, #1092	@ 0x444
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d107      	bne.n	8003d92 <HAL_TIM_PWM_Stop+0x52>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d90:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6a1a      	ldr	r2, [r3, #32]
 8003d98:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10f      	bne.n	8003dc2 <HAL_TIM_PWM_Stop+0x82>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6a1a      	ldr	r2, [r3, #32]
 8003da8:	f240 4344 	movw	r3, #1092	@ 0x444
 8003dac:	4013      	ands	r3, r2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d107      	bne.n	8003dc2 <HAL_TIM_PWM_Stop+0x82>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0201 	bic.w	r2, r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d104      	bne.n	8003dd2 <HAL_TIM_PWM_Stop+0x92>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dd0:	e013      	b.n	8003dfa <HAL_TIM_PWM_Stop+0xba>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d104      	bne.n	8003de2 <HAL_TIM_PWM_Stop+0xa2>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003de0:	e00b      	b.n	8003dfa <HAL_TIM_PWM_Stop+0xba>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d104      	bne.n	8003df2 <HAL_TIM_PWM_Stop+0xb2>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003df0:	e003      	b.n	8003dfa <HAL_TIM_PWM_Stop+0xba>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3708      	adds	r7, #8
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	40010000 	.word	0x40010000

08003e08 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e041      	b.n	8003e9e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d106      	bne.n	8003e34 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f839 	bl	8003ea6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3304      	adds	r3, #4
 8003e44:	4619      	mov	r1, r3
 8003e46:	4610      	mov	r0, r2
 8003e48:	f001 f8a6 	bl	8004f98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
	...

08003ebc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d104      	bne.n	8003eda <HAL_TIM_IC_Start_IT+0x1e>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	e013      	b.n	8003f02 <HAL_TIM_IC_Start_IT+0x46>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2b04      	cmp	r3, #4
 8003ede:	d104      	bne.n	8003eea <HAL_TIM_IC_Start_IT+0x2e>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	e00b      	b.n	8003f02 <HAL_TIM_IC_Start_IT+0x46>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	d104      	bne.n	8003efa <HAL_TIM_IC_Start_IT+0x3e>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	e003      	b.n	8003f02 <HAL_TIM_IC_Start_IT+0x46>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d104      	bne.n	8003f14 <HAL_TIM_IC_Start_IT+0x58>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	e013      	b.n	8003f3c <HAL_TIM_IC_Start_IT+0x80>
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d104      	bne.n	8003f24 <HAL_TIM_IC_Start_IT+0x68>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	e00b      	b.n	8003f3c <HAL_TIM_IC_Start_IT+0x80>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	2b08      	cmp	r3, #8
 8003f28:	d104      	bne.n	8003f34 <HAL_TIM_IC_Start_IT+0x78>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	e003      	b.n	8003f3c <HAL_TIM_IC_Start_IT+0x80>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f3e:	7bbb      	ldrb	r3, [r7, #14]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d102      	bne.n	8003f4a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f44:	7b7b      	ldrb	r3, [r7, #13]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d001      	beq.n	8003f4e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e0c2      	b.n	80040d4 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d104      	bne.n	8003f5e <HAL_TIM_IC_Start_IT+0xa2>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f5c:	e013      	b.n	8003f86 <HAL_TIM_IC_Start_IT+0xca>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b04      	cmp	r3, #4
 8003f62:	d104      	bne.n	8003f6e <HAL_TIM_IC_Start_IT+0xb2>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f6c:	e00b      	b.n	8003f86 <HAL_TIM_IC_Start_IT+0xca>
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d104      	bne.n	8003f7e <HAL_TIM_IC_Start_IT+0xc2>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f7c:	e003      	b.n	8003f86 <HAL_TIM_IC_Start_IT+0xca>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2202      	movs	r2, #2
 8003f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d104      	bne.n	8003f96 <HAL_TIM_IC_Start_IT+0xda>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f94:	e013      	b.n	8003fbe <HAL_TIM_IC_Start_IT+0x102>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b04      	cmp	r3, #4
 8003f9a:	d104      	bne.n	8003fa6 <HAL_TIM_IC_Start_IT+0xea>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fa4:	e00b      	b.n	8003fbe <HAL_TIM_IC_Start_IT+0x102>
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d104      	bne.n	8003fb6 <HAL_TIM_IC_Start_IT+0xfa>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fb4:	e003      	b.n	8003fbe <HAL_TIM_IC_Start_IT+0x102>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2202      	movs	r2, #2
 8003fba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b0c      	cmp	r3, #12
 8003fc2:	d841      	bhi.n	8004048 <HAL_TIM_IC_Start_IT+0x18c>
 8003fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8003fcc <HAL_TIM_IC_Start_IT+0x110>)
 8003fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fca:	bf00      	nop
 8003fcc:	08004001 	.word	0x08004001
 8003fd0:	08004049 	.word	0x08004049
 8003fd4:	08004049 	.word	0x08004049
 8003fd8:	08004049 	.word	0x08004049
 8003fdc:	08004013 	.word	0x08004013
 8003fe0:	08004049 	.word	0x08004049
 8003fe4:	08004049 	.word	0x08004049
 8003fe8:	08004049 	.word	0x08004049
 8003fec:	08004025 	.word	0x08004025
 8003ff0:	08004049 	.word	0x08004049
 8003ff4:	08004049 	.word	0x08004049
 8003ff8:	08004049 	.word	0x08004049
 8003ffc:	08004037 	.word	0x08004037
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68da      	ldr	r2, [r3, #12]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0202 	orr.w	r2, r2, #2
 800400e:	60da      	str	r2, [r3, #12]
      break;
 8004010:	e01d      	b.n	800404e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68da      	ldr	r2, [r3, #12]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f042 0204 	orr.w	r2, r2, #4
 8004020:	60da      	str	r2, [r3, #12]
      break;
 8004022:	e014      	b.n	800404e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0208 	orr.w	r2, r2, #8
 8004032:	60da      	str	r2, [r3, #12]
      break;
 8004034:	e00b      	b.n	800404e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f042 0210 	orr.w	r2, r2, #16
 8004044:	60da      	str	r2, [r3, #12]
      break;
 8004046:	e002      	b.n	800404e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	73fb      	strb	r3, [r7, #15]
      break;
 800404c:	bf00      	nop
  }

  if (status == HAL_OK)
 800404e:	7bfb      	ldrb	r3, [r7, #15]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d13e      	bne.n	80040d2 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2201      	movs	r2, #1
 800405a:	6839      	ldr	r1, [r7, #0]
 800405c:	4618      	mov	r0, r3
 800405e:	f001 fb6b 	bl	8005738 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a1d      	ldr	r2, [pc, #116]	@ (80040dc <HAL_TIM_IC_Start_IT+0x220>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d018      	beq.n	800409e <HAL_TIM_IC_Start_IT+0x1e2>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004074:	d013      	beq.n	800409e <HAL_TIM_IC_Start_IT+0x1e2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a19      	ldr	r2, [pc, #100]	@ (80040e0 <HAL_TIM_IC_Start_IT+0x224>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d00e      	beq.n	800409e <HAL_TIM_IC_Start_IT+0x1e2>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a17      	ldr	r2, [pc, #92]	@ (80040e4 <HAL_TIM_IC_Start_IT+0x228>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d009      	beq.n	800409e <HAL_TIM_IC_Start_IT+0x1e2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a16      	ldr	r2, [pc, #88]	@ (80040e8 <HAL_TIM_IC_Start_IT+0x22c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d004      	beq.n	800409e <HAL_TIM_IC_Start_IT+0x1e2>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a14      	ldr	r2, [pc, #80]	@ (80040ec <HAL_TIM_IC_Start_IT+0x230>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d111      	bne.n	80040c2 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f003 0307 	and.w	r3, r3, #7
 80040a8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2b06      	cmp	r3, #6
 80040ae:	d010      	beq.n	80040d2 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0201 	orr.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c0:	e007      	b.n	80040d2 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f042 0201 	orr.w	r2, r2, #1
 80040d0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80040d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40010000 	.word	0x40010000
 80040e0:	40000400 	.word	0x40000400
 80040e4:	40000800 	.word	0x40000800
 80040e8:	40000c00 	.word	0x40000c00
 80040ec:	40014000 	.word	0x40014000

080040f0 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2b0c      	cmp	r3, #12
 8004102:	d841      	bhi.n	8004188 <HAL_TIM_IC_Stop_IT+0x98>
 8004104:	a201      	add	r2, pc, #4	@ (adr r2, 800410c <HAL_TIM_IC_Stop_IT+0x1c>)
 8004106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410a:	bf00      	nop
 800410c:	08004141 	.word	0x08004141
 8004110:	08004189 	.word	0x08004189
 8004114:	08004189 	.word	0x08004189
 8004118:	08004189 	.word	0x08004189
 800411c:	08004153 	.word	0x08004153
 8004120:	08004189 	.word	0x08004189
 8004124:	08004189 	.word	0x08004189
 8004128:	08004189 	.word	0x08004189
 800412c:	08004165 	.word	0x08004165
 8004130:	08004189 	.word	0x08004189
 8004134:	08004189 	.word	0x08004189
 8004138:	08004189 	.word	0x08004189
 800413c:	08004177 	.word	0x08004177
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0202 	bic.w	r2, r2, #2
 800414e:	60da      	str	r2, [r3, #12]
      break;
 8004150:	e01d      	b.n	800418e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68da      	ldr	r2, [r3, #12]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0204 	bic.w	r2, r2, #4
 8004160:	60da      	str	r2, [r3, #12]
      break;
 8004162:	e014      	b.n	800418e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68da      	ldr	r2, [r3, #12]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0208 	bic.w	r2, r2, #8
 8004172:	60da      	str	r2, [r3, #12]
      break;
 8004174:	e00b      	b.n	800418e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68da      	ldr	r2, [r3, #12]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0210 	bic.w	r2, r2, #16
 8004184:	60da      	str	r2, [r3, #12]
      break;
 8004186:	e002      	b.n	800418e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	73fb      	strb	r3, [r7, #15]
      break;
 800418c:	bf00      	nop
  }

  if (status == HAL_OK)
 800418e:	7bfb      	ldrb	r3, [r7, #15]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d156      	bne.n	8004242 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2200      	movs	r2, #0
 800419a:	6839      	ldr	r1, [r7, #0]
 800419c:	4618      	mov	r0, r3
 800419e:	f001 facb 	bl	8005738 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	6a1a      	ldr	r2, [r3, #32]
 80041a8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80041ac:	4013      	ands	r3, r2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10f      	bne.n	80041d2 <HAL_TIM_IC_Stop_IT+0xe2>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6a1a      	ldr	r2, [r3, #32]
 80041b8:	f240 4344 	movw	r3, #1092	@ 0x444
 80041bc:	4013      	ands	r3, r2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d107      	bne.n	80041d2 <HAL_TIM_IC_Stop_IT+0xe2>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 0201 	bic.w	r2, r2, #1
 80041d0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d104      	bne.n	80041e2 <HAL_TIM_IC_Stop_IT+0xf2>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041e0:	e013      	b.n	800420a <HAL_TIM_IC_Stop_IT+0x11a>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b04      	cmp	r3, #4
 80041e6:	d104      	bne.n	80041f2 <HAL_TIM_IC_Stop_IT+0x102>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041f0:	e00b      	b.n	800420a <HAL_TIM_IC_Stop_IT+0x11a>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d104      	bne.n	8004202 <HAL_TIM_IC_Stop_IT+0x112>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004200:	e003      	b.n	800420a <HAL_TIM_IC_Stop_IT+0x11a>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d104      	bne.n	800421a <HAL_TIM_IC_Stop_IT+0x12a>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004218:	e013      	b.n	8004242 <HAL_TIM_IC_Stop_IT+0x152>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b04      	cmp	r3, #4
 800421e:	d104      	bne.n	800422a <HAL_TIM_IC_Stop_IT+0x13a>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004228:	e00b      	b.n	8004242 <HAL_TIM_IC_Stop_IT+0x152>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	2b08      	cmp	r3, #8
 800422e:	d104      	bne.n	800423a <HAL_TIM_IC_Stop_IT+0x14a>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004238:	e003      	b.n	8004242 <HAL_TIM_IC_Stop_IT+0x152>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2201      	movs	r2, #1
 800423e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 8004242:	7bfb      	ldrb	r3, [r7, #15]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e097      	b.n	8004390 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	d106      	bne.n	800427a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f7fe f9bf 	bl	80025f8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2202      	movs	r2, #2
 800427e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6812      	ldr	r2, [r2, #0]
 800428c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004290:	f023 0307 	bic.w	r3, r3, #7
 8004294:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	3304      	adds	r3, #4
 800429e:	4619      	mov	r1, r3
 80042a0:	4610      	mov	r0, r2
 80042a2:	f000 fe79 	bl	8004f98 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	697a      	ldr	r2, [r7, #20]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042ce:	f023 0303 	bic.w	r3, r3, #3
 80042d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	021b      	lsls	r3, r3, #8
 80042de:	4313      	orrs	r3, r2
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80042ec:	f023 030c 	bic.w	r3, r3, #12
 80042f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80042f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	021b      	lsls	r3, r3, #8
 8004308:	4313      	orrs	r3, r2
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	4313      	orrs	r3, r2
 800430e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	011a      	lsls	r2, r3, #4
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	031b      	lsls	r3, r3, #12
 800431c:	4313      	orrs	r3, r2
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	4313      	orrs	r3, r2
 8004322:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800432a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004332:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	695b      	ldr	r3, [r3, #20]
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	4313      	orrs	r3, r2
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	4313      	orrs	r3, r2
 8004344:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80043b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80043b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80043c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d110      	bne.n	80043ea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043c8:	7bfb      	ldrb	r3, [r7, #15]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d102      	bne.n	80043d4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80043ce:	7b7b      	ldrb	r3, [r7, #13]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d001      	beq.n	80043d8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e069      	b.n	80044ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2202      	movs	r2, #2
 80043e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043e8:	e031      	b.n	800444e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	d110      	bne.n	8004412 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80043f0:	7bbb      	ldrb	r3, [r7, #14]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d102      	bne.n	80043fc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80043f6:	7b3b      	ldrb	r3, [r7, #12]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d001      	beq.n	8004400 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e055      	b.n	80044ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2202      	movs	r2, #2
 800440c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004410:	e01d      	b.n	800444e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004412:	7bfb      	ldrb	r3, [r7, #15]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d108      	bne.n	800442a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004418:	7bbb      	ldrb	r3, [r7, #14]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d105      	bne.n	800442a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800441e:	7b7b      	ldrb	r3, [r7, #13]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d102      	bne.n	800442a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004424:	7b3b      	ldrb	r3, [r7, #12]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d001      	beq.n	800442e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e03e      	b.n	80044ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2202      	movs	r2, #2
 8004432:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2202      	movs	r2, #2
 800443a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2202      	movs	r2, #2
 8004442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2202      	movs	r2, #2
 800444a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <HAL_TIM_Encoder_Start+0xc4>
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	2b04      	cmp	r3, #4
 8004458:	d008      	beq.n	800446c <HAL_TIM_Encoder_Start+0xd4>
 800445a:	e00f      	b.n	800447c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2201      	movs	r2, #1
 8004462:	2100      	movs	r1, #0
 8004464:	4618      	mov	r0, r3
 8004466:	f001 f967 	bl	8005738 <TIM_CCxChannelCmd>
      break;
 800446a:	e016      	b.n	800449a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2201      	movs	r2, #1
 8004472:	2104      	movs	r1, #4
 8004474:	4618      	mov	r0, r3
 8004476:	f001 f95f 	bl	8005738 <TIM_CCxChannelCmd>
      break;
 800447a:	e00e      	b.n	800449a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2201      	movs	r2, #1
 8004482:	2100      	movs	r1, #0
 8004484:	4618      	mov	r0, r3
 8004486:	f001 f957 	bl	8005738 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2201      	movs	r2, #1
 8004490:	2104      	movs	r1, #4
 8004492:	4618      	mov	r0, r3
 8004494:	f001 f950 	bl	8005738 <TIM_CCxChannelCmd>
      break;
 8004498:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f042 0201 	orr.w	r2, r2, #1
 80044a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <HAL_TIM_Encoder_Stop+0x18>
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d008      	beq.n	80044dc <HAL_TIM_Encoder_Stop+0x28>
 80044ca:	e00f      	b.n	80044ec <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2200      	movs	r2, #0
 80044d2:	2100      	movs	r1, #0
 80044d4:	4618      	mov	r0, r3
 80044d6:	f001 f92f 	bl	8005738 <TIM_CCxChannelCmd>
      break;
 80044da:	e016      	b.n	800450a <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2200      	movs	r2, #0
 80044e2:	2104      	movs	r1, #4
 80044e4:	4618      	mov	r0, r3
 80044e6:	f001 f927 	bl	8005738 <TIM_CCxChannelCmd>
      break;
 80044ea:	e00e      	b.n	800450a <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2200      	movs	r2, #0
 80044f2:	2100      	movs	r1, #0
 80044f4:	4618      	mov	r0, r3
 80044f6:	f001 f91f 	bl	8005738 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2200      	movs	r2, #0
 8004500:	2104      	movs	r1, #4
 8004502:	4618      	mov	r0, r3
 8004504:	f001 f918 	bl	8005738 <TIM_CCxChannelCmd>
      break;
 8004508:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6a1a      	ldr	r2, [r3, #32]
 8004510:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004514:	4013      	ands	r3, r2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10f      	bne.n	800453a <HAL_TIM_Encoder_Stop+0x86>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	6a1a      	ldr	r2, [r3, #32]
 8004520:	f240 4344 	movw	r3, #1092	@ 0x444
 8004524:	4013      	ands	r3, r2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d107      	bne.n	800453a <HAL_TIM_Encoder_Stop+0x86>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0201 	bic.w	r2, r2, #1
 8004538:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d002      	beq.n	8004546 <HAL_TIM_Encoder_Stop+0x92>
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2b04      	cmp	r3, #4
 8004544:	d138      	bne.n	80045b8 <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d104      	bne.n	8004556 <HAL_TIM_Encoder_Stop+0xa2>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004554:	e013      	b.n	800457e <HAL_TIM_Encoder_Stop+0xca>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b04      	cmp	r3, #4
 800455a:	d104      	bne.n	8004566 <HAL_TIM_Encoder_Stop+0xb2>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004564:	e00b      	b.n	800457e <HAL_TIM_Encoder_Stop+0xca>
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2b08      	cmp	r3, #8
 800456a:	d104      	bne.n	8004576 <HAL_TIM_Encoder_Stop+0xc2>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004574:	e003      	b.n	800457e <HAL_TIM_Encoder_Stop+0xca>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d104      	bne.n	800458e <HAL_TIM_Encoder_Stop+0xda>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800458c:	e024      	b.n	80045d8 <HAL_TIM_Encoder_Stop+0x124>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	2b04      	cmp	r3, #4
 8004592:	d104      	bne.n	800459e <HAL_TIM_Encoder_Stop+0xea>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800459c:	e01c      	b.n	80045d8 <HAL_TIM_Encoder_Stop+0x124>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d104      	bne.n	80045ae <HAL_TIM_Encoder_Stop+0xfa>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045ac:	e014      	b.n	80045d8 <HAL_TIM_Encoder_Stop+0x124>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045b6:	e00f      	b.n	80045d8 <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b084      	sub	sp, #16
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
 80045ea:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045f2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80045fa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004602:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800460a:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d110      	bne.n	8004634 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004612:	7bfb      	ldrb	r3, [r7, #15]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d102      	bne.n	800461e <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004618:	7b7b      	ldrb	r3, [r7, #13]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d001      	beq.n	8004622 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e089      	b.n	8004736 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2202      	movs	r2, #2
 8004626:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2202      	movs	r2, #2
 800462e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004632:	e031      	b.n	8004698 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	2b04      	cmp	r3, #4
 8004638:	d110      	bne.n	800465c <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800463a:	7bbb      	ldrb	r3, [r7, #14]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d102      	bne.n	8004646 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004640:	7b3b      	ldrb	r3, [r7, #12]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d001      	beq.n	800464a <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e075      	b.n	8004736 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2202      	movs	r2, #2
 800464e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2202      	movs	r2, #2
 8004656:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800465a:	e01d      	b.n	8004698 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800465c:	7bfb      	ldrb	r3, [r7, #15]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d108      	bne.n	8004674 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004662:	7bbb      	ldrb	r3, [r7, #14]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d105      	bne.n	8004674 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004668:	7b7b      	ldrb	r3, [r7, #13]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d102      	bne.n	8004674 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800466e:	7b3b      	ldrb	r3, [r7, #12]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d001      	beq.n	8004678 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e05e      	b.n	8004736 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2202      	movs	r2, #2
 800467c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <HAL_TIM_Encoder_Start_IT+0xc4>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d010      	beq.n	80046c6 <HAL_TIM_Encoder_Start_IT+0xe4>
 80046a4:	e01f      	b.n	80046e6 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2201      	movs	r2, #1
 80046ac:	2100      	movs	r1, #0
 80046ae:	4618      	mov	r0, r3
 80046b0:	f001 f842 	bl	8005738 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68da      	ldr	r2, [r3, #12]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0202 	orr.w	r2, r2, #2
 80046c2:	60da      	str	r2, [r3, #12]
      break;
 80046c4:	e02e      	b.n	8004724 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2201      	movs	r2, #1
 80046cc:	2104      	movs	r1, #4
 80046ce:	4618      	mov	r0, r3
 80046d0:	f001 f832 	bl	8005738 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0204 	orr.w	r2, r2, #4
 80046e2:	60da      	str	r2, [r3, #12]
      break;
 80046e4:	e01e      	b.n	8004724 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2201      	movs	r2, #1
 80046ec:	2100      	movs	r1, #0
 80046ee:	4618      	mov	r0, r3
 80046f0:	f001 f822 	bl	8005738 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2201      	movs	r2, #1
 80046fa:	2104      	movs	r1, #4
 80046fc:	4618      	mov	r0, r3
 80046fe:	f001 f81b 	bl	8005738 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f042 0202 	orr.w	r2, r2, #2
 8004710:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68da      	ldr	r2, [r3, #12]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f042 0204 	orr.w	r2, r2, #4
 8004720:	60da      	str	r2, [r3, #12]
      break;
 8004722:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0201 	orr.w	r2, r2, #1
 8004732:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b082      	sub	sp, #8
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10f      	bne.n	800476e <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2200      	movs	r2, #0
 8004754:	2100      	movs	r1, #0
 8004756:	4618      	mov	r0, r3
 8004758:	f000 ffee 	bl	8005738 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0202 	bic.w	r2, r2, #2
 800476a:	60da      	str	r2, [r3, #12]
 800476c:	e030      	b.n	80047d0 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b04      	cmp	r3, #4
 8004772:	d10f      	bne.n	8004794 <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2200      	movs	r2, #0
 800477a:	2104      	movs	r1, #4
 800477c:	4618      	mov	r0, r3
 800477e:	f000 ffdb 	bl	8005738 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68da      	ldr	r2, [r3, #12]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 0204 	bic.w	r2, r2, #4
 8004790:	60da      	str	r2, [r3, #12]
 8004792:	e01d      	b.n	80047d0 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2200      	movs	r2, #0
 800479a:	2100      	movs	r1, #0
 800479c:	4618      	mov	r0, r3
 800479e:	f000 ffcb 	bl	8005738 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2200      	movs	r2, #0
 80047a8:	2104      	movs	r1, #4
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 ffc4 	bl	8005738 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 0202 	bic.w	r2, r2, #2
 80047be:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0204 	bic.w	r2, r2, #4
 80047ce:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6a1a      	ldr	r2, [r3, #32]
 80047d6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80047da:	4013      	ands	r3, r2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10f      	bne.n	8004800 <HAL_TIM_Encoder_Stop_IT+0xc2>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6a1a      	ldr	r2, [r3, #32]
 80047e6:	f240 4344 	movw	r3, #1092	@ 0x444
 80047ea:	4013      	ands	r3, r2
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d107      	bne.n	8004800 <HAL_TIM_Encoder_Stop_IT+0xc2>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0201 	bic.w	r2, r2, #1
 80047fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <HAL_TIM_Encoder_Stop_IT+0xce>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b04      	cmp	r3, #4
 800480a:	d138      	bne.n	800487e <HAL_TIM_Encoder_Stop_IT+0x140>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d104      	bne.n	800481c <HAL_TIM_Encoder_Stop_IT+0xde>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800481a:	e013      	b.n	8004844 <HAL_TIM_Encoder_Stop_IT+0x106>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b04      	cmp	r3, #4
 8004820:	d104      	bne.n	800482c <HAL_TIM_Encoder_Stop_IT+0xee>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800482a:	e00b      	b.n	8004844 <HAL_TIM_Encoder_Stop_IT+0x106>
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b08      	cmp	r3, #8
 8004830:	d104      	bne.n	800483c <HAL_TIM_Encoder_Stop_IT+0xfe>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800483a:	e003      	b.n	8004844 <HAL_TIM_Encoder_Stop_IT+0x106>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d104      	bne.n	8004854 <HAL_TIM_Encoder_Stop_IT+0x116>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004852:	e024      	b.n	800489e <HAL_TIM_Encoder_Stop_IT+0x160>
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	2b04      	cmp	r3, #4
 8004858:	d104      	bne.n	8004864 <HAL_TIM_Encoder_Stop_IT+0x126>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004862:	e01c      	b.n	800489e <HAL_TIM_Encoder_Stop_IT+0x160>
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	2b08      	cmp	r3, #8
 8004868:	d104      	bne.n	8004874 <HAL_TIM_Encoder_Stop_IT+0x136>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004872:	e014      	b.n	800489e <HAL_TIM_Encoder_Stop_IT+0x160>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800487c:	e00f      	b.n	800489e <HAL_TIM_Encoder_Stop_IT+0x160>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d020      	beq.n	800490c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f003 0302 	and.w	r3, r3, #2
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d01b      	beq.n	800490c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f06f 0202 	mvn.w	r2, #2
 80048dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7fd f938 	bl	8001b68 <HAL_TIM_IC_CaptureCallback>
 80048f8:	e005      	b.n	8004906 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 fb2e 	bl	8004f5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 fb35 	bl	8004f70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	f003 0304 	and.w	r3, r3, #4
 8004912:	2b00      	cmp	r3, #0
 8004914:	d020      	beq.n	8004958 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f003 0304 	and.w	r3, r3, #4
 800491c:	2b00      	cmp	r3, #0
 800491e:	d01b      	beq.n	8004958 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f06f 0204 	mvn.w	r2, #4
 8004928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2202      	movs	r2, #2
 800492e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7fd f912 	bl	8001b68 <HAL_TIM_IC_CaptureCallback>
 8004944:	e005      	b.n	8004952 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 fb08 	bl	8004f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 fb0f 	bl	8004f70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b00      	cmp	r3, #0
 8004960:	d020      	beq.n	80049a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f003 0308 	and.w	r3, r3, #8
 8004968:	2b00      	cmp	r3, #0
 800496a:	d01b      	beq.n	80049a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f06f 0208 	mvn.w	r2, #8
 8004974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2204      	movs	r2, #4
 800497a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	f003 0303 	and.w	r3, r3, #3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f7fd f8ec 	bl	8001b68 <HAL_TIM_IC_CaptureCallback>
 8004990:	e005      	b.n	800499e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 fae2 	bl	8004f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 fae9 	bl	8004f70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	f003 0310 	and.w	r3, r3, #16
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d020      	beq.n	80049f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f003 0310 	and.w	r3, r3, #16
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d01b      	beq.n	80049f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f06f 0210 	mvn.w	r2, #16
 80049c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2208      	movs	r2, #8
 80049c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f7fd f8c6 	bl	8001b68 <HAL_TIM_IC_CaptureCallback>
 80049dc:	e005      	b.n	80049ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 fabc 	bl	8004f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 fac3 	bl	8004f70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00c      	beq.n	8004a14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d007      	beq.n	8004a14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f06f 0201 	mvn.w	r2, #1
 8004a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7fd f8dc 	bl	8001bcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00c      	beq.n	8004a38 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d007      	beq.n	8004a38 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 ff1e 	bl	8005874 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00c      	beq.n	8004a5c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d007      	beq.n	8004a5c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fa94 	bl	8004f84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f003 0320 	and.w	r3, r3, #32
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00c      	beq.n	8004a80 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f003 0320 	and.w	r3, r3, #32
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d007      	beq.n	8004a80 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f06f 0220 	mvn.w	r2, #32
 8004a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 fef0 	bl	8005860 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a80:	bf00      	nop
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d101      	bne.n	8004aa6 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	e088      	b.n	8004bb8 <HAL_TIM_IC_ConfigChannel+0x130>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d11b      	bne.n	8004aec <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004ac4:	f000 fc80 	bl	80053c8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	699a      	ldr	r2, [r3, #24]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 020c 	bic.w	r2, r2, #12
 8004ad6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6999      	ldr	r1, [r3, #24]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	619a      	str	r2, [r3, #24]
 8004aea:	e060      	b.n	8004bae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b04      	cmp	r3, #4
 8004af0:	d11c      	bne.n	8004b2c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004b02:	f000 fcf8 	bl	80054f6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	699a      	ldr	r2, [r3, #24]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004b14:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	6999      	ldr	r1, [r3, #24]
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	021a      	lsls	r2, r3, #8
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	619a      	str	r2, [r3, #24]
 8004b2a:	e040      	b.n	8004bae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b08      	cmp	r3, #8
 8004b30:	d11b      	bne.n	8004b6a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004b42:	f000 fd45 	bl	80055d0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	69da      	ldr	r2, [r3, #28]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 020c 	bic.w	r2, r2, #12
 8004b54:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	69d9      	ldr	r1, [r3, #28]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	61da      	str	r2, [r3, #28]
 8004b68:	e021      	b.n	8004bae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b0c      	cmp	r3, #12
 8004b6e:	d11c      	bne.n	8004baa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004b80:	f000 fd62 	bl	8005648 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	69da      	ldr	r2, [r3, #28]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004b92:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	69d9      	ldr	r1, [r3, #28]
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	021a      	lsls	r2, r3, #8
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	61da      	str	r2, [r3, #28]
 8004ba8:	e001      	b.n	8004bae <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d101      	bne.n	8004bde <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	e0ae      	b.n	8004d3c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b0c      	cmp	r3, #12
 8004bea:	f200 809f 	bhi.w	8004d2c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004bee:	a201      	add	r2, pc, #4	@ (adr r2, 8004bf4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf4:	08004c29 	.word	0x08004c29
 8004bf8:	08004d2d 	.word	0x08004d2d
 8004bfc:	08004d2d 	.word	0x08004d2d
 8004c00:	08004d2d 	.word	0x08004d2d
 8004c04:	08004c69 	.word	0x08004c69
 8004c08:	08004d2d 	.word	0x08004d2d
 8004c0c:	08004d2d 	.word	0x08004d2d
 8004c10:	08004d2d 	.word	0x08004d2d
 8004c14:	08004cab 	.word	0x08004cab
 8004c18:	08004d2d 	.word	0x08004d2d
 8004c1c:	08004d2d 	.word	0x08004d2d
 8004c20:	08004d2d 	.word	0x08004d2d
 8004c24:	08004ceb 	.word	0x08004ceb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68b9      	ldr	r1, [r7, #8]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fa3e 	bl	80050b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699a      	ldr	r2, [r3, #24]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0208 	orr.w	r2, r2, #8
 8004c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	699a      	ldr	r2, [r3, #24]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0204 	bic.w	r2, r2, #4
 8004c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6999      	ldr	r1, [r3, #24]
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	691a      	ldr	r2, [r3, #16]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	430a      	orrs	r2, r1
 8004c64:	619a      	str	r2, [r3, #24]
      break;
 8004c66:	e064      	b.n	8004d32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68b9      	ldr	r1, [r7, #8]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f000 fa84 	bl	800517c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	699a      	ldr	r2, [r3, #24]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	699a      	ldr	r2, [r3, #24]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6999      	ldr	r1, [r3, #24]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	021a      	lsls	r2, r3, #8
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	619a      	str	r2, [r3, #24]
      break;
 8004ca8:	e043      	b.n	8004d32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68b9      	ldr	r1, [r7, #8]
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 facf 	bl	8005254 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	69da      	ldr	r2, [r3, #28]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f042 0208 	orr.w	r2, r2, #8
 8004cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	69da      	ldr	r2, [r3, #28]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f022 0204 	bic.w	r2, r2, #4
 8004cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	69d9      	ldr	r1, [r3, #28]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	691a      	ldr	r2, [r3, #16]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	61da      	str	r2, [r3, #28]
      break;
 8004ce8:	e023      	b.n	8004d32 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68b9      	ldr	r1, [r7, #8]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 fb19 	bl	8005328 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	69da      	ldr	r2, [r3, #28]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	69da      	ldr	r2, [r3, #28]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	69d9      	ldr	r1, [r3, #28]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	021a      	lsls	r2, r3, #8
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	61da      	str	r2, [r3, #28]
      break;
 8004d2a:	e002      	b.n	8004d32 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d30:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d101      	bne.n	8004d60 <HAL_TIM_ConfigClockSource+0x1c>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	e0b4      	b.n	8004eca <HAL_TIM_ConfigClockSource+0x186>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d98:	d03e      	beq.n	8004e18 <HAL_TIM_ConfigClockSource+0xd4>
 8004d9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d9e:	f200 8087 	bhi.w	8004eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004da2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004da6:	f000 8086 	beq.w	8004eb6 <HAL_TIM_ConfigClockSource+0x172>
 8004daa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dae:	d87f      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004db0:	2b70      	cmp	r3, #112	@ 0x70
 8004db2:	d01a      	beq.n	8004dea <HAL_TIM_ConfigClockSource+0xa6>
 8004db4:	2b70      	cmp	r3, #112	@ 0x70
 8004db6:	d87b      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004db8:	2b60      	cmp	r3, #96	@ 0x60
 8004dba:	d050      	beq.n	8004e5e <HAL_TIM_ConfigClockSource+0x11a>
 8004dbc:	2b60      	cmp	r3, #96	@ 0x60
 8004dbe:	d877      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004dc0:	2b50      	cmp	r3, #80	@ 0x50
 8004dc2:	d03c      	beq.n	8004e3e <HAL_TIM_ConfigClockSource+0xfa>
 8004dc4:	2b50      	cmp	r3, #80	@ 0x50
 8004dc6:	d873      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004dc8:	2b40      	cmp	r3, #64	@ 0x40
 8004dca:	d058      	beq.n	8004e7e <HAL_TIM_ConfigClockSource+0x13a>
 8004dcc:	2b40      	cmp	r3, #64	@ 0x40
 8004dce:	d86f      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004dd0:	2b30      	cmp	r3, #48	@ 0x30
 8004dd2:	d064      	beq.n	8004e9e <HAL_TIM_ConfigClockSource+0x15a>
 8004dd4:	2b30      	cmp	r3, #48	@ 0x30
 8004dd6:	d86b      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004dd8:	2b20      	cmp	r3, #32
 8004dda:	d060      	beq.n	8004e9e <HAL_TIM_ConfigClockSource+0x15a>
 8004ddc:	2b20      	cmp	r3, #32
 8004dde:	d867      	bhi.n	8004eb0 <HAL_TIM_ConfigClockSource+0x16c>
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d05c      	beq.n	8004e9e <HAL_TIM_ConfigClockSource+0x15a>
 8004de4:	2b10      	cmp	r3, #16
 8004de6:	d05a      	beq.n	8004e9e <HAL_TIM_ConfigClockSource+0x15a>
 8004de8:	e062      	b.n	8004eb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004dfa:	f000 fc7d 	bl	80056f8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	609a      	str	r2, [r3, #8]
      break;
 8004e16:	e04f      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e28:	f000 fc66 	bl	80056f8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689a      	ldr	r2, [r3, #8]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e3a:	609a      	str	r2, [r3, #8]
      break;
 8004e3c:	e03c      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	f000 fb24 	bl	8005498 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2150      	movs	r1, #80	@ 0x50
 8004e56:	4618      	mov	r0, r3
 8004e58:	f000 fc33 	bl	80056c2 <TIM_ITRx_SetConfig>
      break;
 8004e5c:	e02c      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f000 fb80 	bl	8005570 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2160      	movs	r1, #96	@ 0x60
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 fc23 	bl	80056c2 <TIM_ITRx_SetConfig>
      break;
 8004e7c:	e01c      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f000 fb04 	bl	8005498 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2140      	movs	r1, #64	@ 0x40
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 fc13 	bl	80056c2 <TIM_ITRx_SetConfig>
      break;
 8004e9c:	e00c      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	4610      	mov	r0, r2
 8004eaa:	f000 fc0a 	bl	80056c2 <TIM_ITRx_SetConfig>
      break;
 8004eae:	e003      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	73fb      	strb	r3, [r7, #15]
      break;
 8004eb4:	e000      	b.n	8004eb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004eb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
	...

08004ed4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b0c      	cmp	r3, #12
 8004ee6:	d831      	bhi.n	8004f4c <HAL_TIM_ReadCapturedValue+0x78>
 8004ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ef0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eee:	bf00      	nop
 8004ef0:	08004f25 	.word	0x08004f25
 8004ef4:	08004f4d 	.word	0x08004f4d
 8004ef8:	08004f4d 	.word	0x08004f4d
 8004efc:	08004f4d 	.word	0x08004f4d
 8004f00:	08004f2f 	.word	0x08004f2f
 8004f04:	08004f4d 	.word	0x08004f4d
 8004f08:	08004f4d 	.word	0x08004f4d
 8004f0c:	08004f4d 	.word	0x08004f4d
 8004f10:	08004f39 	.word	0x08004f39
 8004f14:	08004f4d 	.word	0x08004f4d
 8004f18:	08004f4d 	.word	0x08004f4d
 8004f1c:	08004f4d 	.word	0x08004f4d
 8004f20:	08004f43 	.word	0x08004f43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f2a:	60fb      	str	r3, [r7, #12]

      break;
 8004f2c:	e00f      	b.n	8004f4e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f34:	60fb      	str	r3, [r7, #12]

      break;
 8004f36:	e00a      	b.n	8004f4e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f3e:	60fb      	str	r3, [r7, #12]

      break;
 8004f40:	e005      	b.n	8004f4e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f48:	60fb      	str	r3, [r7, #12]

      break;
 8004f4a:	e000      	b.n	8004f4e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004f4c:	bf00      	nop
  }

  return tmpreg;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a3a      	ldr	r2, [pc, #232]	@ (8005094 <TIM_Base_SetConfig+0xfc>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d00f      	beq.n	8004fd0 <TIM_Base_SetConfig+0x38>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fb6:	d00b      	beq.n	8004fd0 <TIM_Base_SetConfig+0x38>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a37      	ldr	r2, [pc, #220]	@ (8005098 <TIM_Base_SetConfig+0x100>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d007      	beq.n	8004fd0 <TIM_Base_SetConfig+0x38>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a36      	ldr	r2, [pc, #216]	@ (800509c <TIM_Base_SetConfig+0x104>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d003      	beq.n	8004fd0 <TIM_Base_SetConfig+0x38>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a35      	ldr	r2, [pc, #212]	@ (80050a0 <TIM_Base_SetConfig+0x108>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d108      	bne.n	8004fe2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a2b      	ldr	r2, [pc, #172]	@ (8005094 <TIM_Base_SetConfig+0xfc>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d01b      	beq.n	8005022 <TIM_Base_SetConfig+0x8a>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ff0:	d017      	beq.n	8005022 <TIM_Base_SetConfig+0x8a>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a28      	ldr	r2, [pc, #160]	@ (8005098 <TIM_Base_SetConfig+0x100>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d013      	beq.n	8005022 <TIM_Base_SetConfig+0x8a>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a27      	ldr	r2, [pc, #156]	@ (800509c <TIM_Base_SetConfig+0x104>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d00f      	beq.n	8005022 <TIM_Base_SetConfig+0x8a>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a26      	ldr	r2, [pc, #152]	@ (80050a0 <TIM_Base_SetConfig+0x108>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d00b      	beq.n	8005022 <TIM_Base_SetConfig+0x8a>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a25      	ldr	r2, [pc, #148]	@ (80050a4 <TIM_Base_SetConfig+0x10c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d007      	beq.n	8005022 <TIM_Base_SetConfig+0x8a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a24      	ldr	r2, [pc, #144]	@ (80050a8 <TIM_Base_SetConfig+0x110>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d003      	beq.n	8005022 <TIM_Base_SetConfig+0x8a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a23      	ldr	r2, [pc, #140]	@ (80050ac <TIM_Base_SetConfig+0x114>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d108      	bne.n	8005034 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005028:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4313      	orrs	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	689a      	ldr	r2, [r3, #8]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a0e      	ldr	r2, [pc, #56]	@ (8005094 <TIM_Base_SetConfig+0xfc>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d103      	bne.n	8005068 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	691a      	ldr	r2, [r3, #16]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b01      	cmp	r3, #1
 8005078:	d105      	bne.n	8005086 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	f023 0201 	bic.w	r2, r3, #1
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	611a      	str	r2, [r3, #16]
  }
}
 8005086:	bf00      	nop
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	40010000 	.word	0x40010000
 8005098:	40000400 	.word	0x40000400
 800509c:	40000800 	.word	0x40000800
 80050a0:	40000c00 	.word	0x40000c00
 80050a4:	40014000 	.word	0x40014000
 80050a8:	40014400 	.word	0x40014400
 80050ac:	40014800 	.word	0x40014800

080050b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	f023 0201 	bic.w	r2, r3, #1
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f023 0303 	bic.w	r3, r3, #3
 80050e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f023 0302 	bic.w	r3, r3, #2
 80050f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	4313      	orrs	r3, r2
 8005102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a1c      	ldr	r2, [pc, #112]	@ (8005178 <TIM_OC1_SetConfig+0xc8>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d10c      	bne.n	8005126 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f023 0308 	bic.w	r3, r3, #8
 8005112:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	4313      	orrs	r3, r2
 800511c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f023 0304 	bic.w	r3, r3, #4
 8005124:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a13      	ldr	r2, [pc, #76]	@ (8005178 <TIM_OC1_SetConfig+0xc8>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d111      	bne.n	8005152 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800513c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	4313      	orrs	r3, r2
 8005150:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	621a      	str	r2, [r3, #32]
}
 800516c:	bf00      	nop
 800516e:	371c      	adds	r7, #28
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr
 8005178:	40010000 	.word	0x40010000

0800517c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a1b      	ldr	r3, [r3, #32]
 8005190:	f023 0210 	bic.w	r2, r3, #16
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	021b      	lsls	r3, r3, #8
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4313      	orrs	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f023 0320 	bic.w	r3, r3, #32
 80051c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	011b      	lsls	r3, r3, #4
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a1e      	ldr	r2, [pc, #120]	@ (8005250 <TIM_OC2_SetConfig+0xd4>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d10d      	bne.n	80051f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a15      	ldr	r2, [pc, #84]	@ (8005250 <TIM_OC2_SetConfig+0xd4>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d113      	bne.n	8005228 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005206:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800520e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	4313      	orrs	r3, r2
 800521a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	693a      	ldr	r2, [r7, #16]
 8005224:	4313      	orrs	r3, r2
 8005226:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	621a      	str	r2, [r3, #32]
}
 8005242:	bf00      	nop
 8005244:	371c      	adds	r7, #28
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop
 8005250:	40010000 	.word	0x40010000

08005254 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005254:	b480      	push	{r7}
 8005256:	b087      	sub	sp, #28
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f023 0303 	bic.w	r3, r3, #3
 800528a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	4313      	orrs	r3, r2
 8005294:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800529c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	021b      	lsls	r3, r3, #8
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005324 <TIM_OC3_SetConfig+0xd0>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d10d      	bne.n	80052ce <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	021b      	lsls	r3, r3, #8
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a14      	ldr	r2, [pc, #80]	@ (8005324 <TIM_OC3_SetConfig+0xd0>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d113      	bne.n	80052fe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	011b      	lsls	r3, r3, #4
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	011b      	lsls	r3, r3, #4
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68fa      	ldr	r2, [r7, #12]
 8005308:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	685a      	ldr	r2, [r3, #4]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	697a      	ldr	r2, [r7, #20]
 8005316:	621a      	str	r2, [r3, #32]
}
 8005318:	bf00      	nop
 800531a:	371c      	adds	r7, #28
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	40010000 	.word	0x40010000

08005328 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005328:	b480      	push	{r7}
 800532a:	b087      	sub	sp, #28
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800535e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	021b      	lsls	r3, r3, #8
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4313      	orrs	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005372:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	031b      	lsls	r3, r3, #12
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	4313      	orrs	r3, r2
 800537e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a10      	ldr	r2, [pc, #64]	@ (80053c4 <TIM_OC4_SetConfig+0x9c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d109      	bne.n	800539c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800538e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	019b      	lsls	r3, r3, #6
 8005396:	697a      	ldr	r2, [r7, #20]
 8005398:	4313      	orrs	r3, r2
 800539a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	621a      	str	r2, [r3, #32]
}
 80053b6:	bf00      	nop
 80053b8:	371c      	adds	r7, #28
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	40010000 	.word	0x40010000

080053c8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b087      	sub	sp, #28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
 80053d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	f023 0201 	bic.w	r2, r3, #1
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	4a24      	ldr	r2, [pc, #144]	@ (8005484 <TIM_TI1_SetConfig+0xbc>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d013      	beq.n	800541e <TIM_TI1_SetConfig+0x56>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053fc:	d00f      	beq.n	800541e <TIM_TI1_SetConfig+0x56>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	4a21      	ldr	r2, [pc, #132]	@ (8005488 <TIM_TI1_SetConfig+0xc0>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d00b      	beq.n	800541e <TIM_TI1_SetConfig+0x56>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	4a20      	ldr	r2, [pc, #128]	@ (800548c <TIM_TI1_SetConfig+0xc4>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d007      	beq.n	800541e <TIM_TI1_SetConfig+0x56>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	4a1f      	ldr	r2, [pc, #124]	@ (8005490 <TIM_TI1_SetConfig+0xc8>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d003      	beq.n	800541e <TIM_TI1_SetConfig+0x56>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	4a1e      	ldr	r2, [pc, #120]	@ (8005494 <TIM_TI1_SetConfig+0xcc>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d101      	bne.n	8005422 <TIM_TI1_SetConfig+0x5a>
 800541e:	2301      	movs	r3, #1
 8005420:	e000      	b.n	8005424 <TIM_TI1_SetConfig+0x5c>
 8005422:	2300      	movs	r3, #0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d008      	beq.n	800543a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	f023 0303 	bic.w	r3, r3, #3
 800542e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4313      	orrs	r3, r2
 8005436:	617b      	str	r3, [r7, #20]
 8005438:	e003      	b.n	8005442 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f043 0301 	orr.w	r3, r3, #1
 8005440:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005448:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	011b      	lsls	r3, r3, #4
 800544e:	b2db      	uxtb	r3, r3
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	4313      	orrs	r3, r2
 8005454:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	f023 030a 	bic.w	r3, r3, #10
 800545c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	f003 030a 	and.w	r3, r3, #10
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	4313      	orrs	r3, r2
 8005468:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	693a      	ldr	r2, [r7, #16]
 8005474:	621a      	str	r2, [r3, #32]
}
 8005476:	bf00      	nop
 8005478:	371c      	adds	r7, #28
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	40010000 	.word	0x40010000
 8005488:	40000400 	.word	0x40000400
 800548c:	40000800 	.word	0x40000800
 8005490:	40000c00 	.word	0x40000c00
 8005494:	40014000 	.word	0x40014000

08005498 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005498:	b480      	push	{r7}
 800549a:	b087      	sub	sp, #28
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6a1b      	ldr	r3, [r3, #32]
 80054a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	f023 0201 	bic.w	r2, r3, #1
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	699b      	ldr	r3, [r3, #24]
 80054ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f023 030a 	bic.w	r3, r3, #10
 80054d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	4313      	orrs	r3, r2
 80054dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	621a      	str	r2, [r3, #32]
}
 80054ea:	bf00      	nop
 80054ec:	371c      	adds	r7, #28
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b087      	sub	sp, #28
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	60f8      	str	r0, [r7, #12]
 80054fe:	60b9      	str	r1, [r7, #8]
 8005500:	607a      	str	r2, [r7, #4]
 8005502:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a1b      	ldr	r3, [r3, #32]
 8005508:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	f023 0210 	bic.w	r2, r3, #16
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	021b      	lsls	r3, r3, #8
 8005528:	693a      	ldr	r2, [r7, #16]
 800552a:	4313      	orrs	r3, r2
 800552c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005534:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	031b      	lsls	r3, r3, #12
 800553a:	b29b      	uxth	r3, r3
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	4313      	orrs	r3, r2
 8005540:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005548:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	011b      	lsls	r3, r3, #4
 800554e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	4313      	orrs	r3, r2
 8005556:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	621a      	str	r2, [r3, #32]
}
 8005564:	bf00      	nop
 8005566:	371c      	adds	r7, #28
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005570:	b480      	push	{r7}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	f023 0210 	bic.w	r2, r3, #16
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800559a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	031b      	lsls	r3, r3, #12
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80055ac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	621a      	str	r2, [r3, #32]
}
 80055c4:	bf00      	nop
 80055c6:	371c      	adds	r7, #28
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
 80055dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	69db      	ldr	r3, [r3, #28]
 80055f4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	f023 0303 	bic.w	r3, r3, #3
 80055fc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80055fe:	693a      	ldr	r2, [r7, #16]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4313      	orrs	r3, r2
 8005604:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800560c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	011b      	lsls	r3, r3, #4
 8005612:	b2db      	uxtb	r3, r3
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	4313      	orrs	r3, r2
 8005618:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005620:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	021b      	lsls	r3, r3, #8
 8005626:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	4313      	orrs	r3, r2
 800562e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	621a      	str	r2, [r3, #32]
}
 800563c:	bf00      	nop
 800563e:	371c      	adds	r7, #28
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005648:	b480      	push	{r7}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
 8005654:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	69db      	ldr	r3, [r3, #28]
 800566c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005674:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	021b      	lsls	r3, r3, #8
 800567a:	693a      	ldr	r2, [r7, #16]
 800567c:	4313      	orrs	r3, r2
 800567e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005686:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	031b      	lsls	r3, r3, #12
 800568c:	b29b      	uxth	r3, r3
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	4313      	orrs	r3, r2
 8005692:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800569a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	031b      	lsls	r3, r3, #12
 80056a0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80056a4:	697a      	ldr	r2, [r7, #20]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	621a      	str	r2, [r3, #32]
}
 80056b6:	bf00      	nop
 80056b8:	371c      	adds	r7, #28
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b085      	sub	sp, #20
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
 80056ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4313      	orrs	r3, r2
 80056e0:	f043 0307 	orr.w	r3, r3, #7
 80056e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	609a      	str	r2, [r3, #8]
}
 80056ec:	bf00      	nop
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
 8005704:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005712:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	021a      	lsls	r2, r3, #8
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	431a      	orrs	r2, r3
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	4313      	orrs	r3, r2
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	4313      	orrs	r3, r2
 8005724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	609a      	str	r2, [r3, #8]
}
 800572c:	bf00      	nop
 800572e:	371c      	adds	r7, #28
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	60b9      	str	r1, [r7, #8]
 8005742:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	f003 031f 	and.w	r3, r3, #31
 800574a:	2201      	movs	r2, #1
 800574c:	fa02 f303 	lsl.w	r3, r2, r3
 8005750:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6a1a      	ldr	r2, [r3, #32]
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	43db      	mvns	r3, r3
 800575a:	401a      	ands	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6a1a      	ldr	r2, [r3, #32]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	f003 031f 	and.w	r3, r3, #31
 800576a:	6879      	ldr	r1, [r7, #4]
 800576c:	fa01 f303 	lsl.w	r3, r1, r3
 8005770:	431a      	orrs	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	621a      	str	r2, [r3, #32]
}
 8005776:	bf00      	nop
 8005778:	371c      	adds	r7, #28
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
	...

08005784 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005794:	2b01      	cmp	r3, #1
 8005796:	d101      	bne.n	800579c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005798:	2302      	movs	r3, #2
 800579a:	e050      	b.n	800583e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2202      	movs	r2, #2
 80057a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a1c      	ldr	r2, [pc, #112]	@ (800584c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d018      	beq.n	8005812 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057e8:	d013      	beq.n	8005812 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a18      	ldr	r2, [pc, #96]	@ (8005850 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d00e      	beq.n	8005812 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a16      	ldr	r2, [pc, #88]	@ (8005854 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d009      	beq.n	8005812 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a15      	ldr	r2, [pc, #84]	@ (8005858 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d004      	beq.n	8005812 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a13      	ldr	r2, [pc, #76]	@ (800585c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d10c      	bne.n	800582c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005818:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	4313      	orrs	r3, r2
 8005822:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	40010000 	.word	0x40010000
 8005850:	40000400 	.word	0x40000400
 8005854:	40000800 	.word	0x40000800
 8005858:	40000c00 	.word	0x40000c00
 800585c:	40014000 	.word	0x40014000

08005860 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e042      	b.n	8005920 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d106      	bne.n	80058b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7fc ff52 	bl	8002758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2224      	movs	r2, #36	@ 0x24
 80058b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68da      	ldr	r2, [r3, #12]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f973 	bl	8005bb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	691a      	ldr	r2, [r3, #16]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80058e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	695a      	ldr	r2, [r3, #20]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	68da      	ldr	r2, [r3, #12]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005900:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2220      	movs	r2, #32
 800590c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2220      	movs	r2, #32
 8005914:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3708      	adds	r7, #8
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b08a      	sub	sp, #40	@ 0x28
 800592c:	af02      	add	r7, sp, #8
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	603b      	str	r3, [r7, #0]
 8005934:	4613      	mov	r3, r2
 8005936:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005938:	2300      	movs	r3, #0
 800593a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b20      	cmp	r3, #32
 8005946:	d175      	bne.n	8005a34 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <HAL_UART_Transmit+0x2c>
 800594e:	88fb      	ldrh	r3, [r7, #6]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e06e      	b.n	8005a36 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2221      	movs	r2, #33	@ 0x21
 8005962:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005966:	f7fd f911 	bl	8002b8c <HAL_GetTick>
 800596a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	88fa      	ldrh	r2, [r7, #6]
 8005970:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	88fa      	ldrh	r2, [r7, #6]
 8005976:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005980:	d108      	bne.n	8005994 <HAL_UART_Transmit+0x6c>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d104      	bne.n	8005994 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800598a:	2300      	movs	r3, #0
 800598c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	61bb      	str	r3, [r7, #24]
 8005992:	e003      	b.n	800599c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005998:	2300      	movs	r3, #0
 800599a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800599c:	e02e      	b.n	80059fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	9300      	str	r3, [sp, #0]
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2200      	movs	r2, #0
 80059a6:	2180      	movs	r1, #128	@ 0x80
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f000 f848 	bl	8005a3e <UART_WaitOnFlagUntilTimeout>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d005      	beq.n	80059c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2220      	movs	r2, #32
 80059b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e03a      	b.n	8005a36 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10b      	bne.n	80059de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	461a      	mov	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	3302      	adds	r3, #2
 80059da:	61bb      	str	r3, [r7, #24]
 80059dc:	e007      	b.n	80059ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	781a      	ldrb	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	3301      	adds	r3, #1
 80059ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	3b01      	subs	r3, #1
 80059f6:	b29a      	uxth	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1cb      	bne.n	800599e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	2140      	movs	r1, #64	@ 0x40
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 f814 	bl	8005a3e <UART_WaitOnFlagUntilTimeout>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d005      	beq.n	8005a28 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e006      	b.n	8005a36 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005a30:	2300      	movs	r3, #0
 8005a32:	e000      	b.n	8005a36 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005a34:	2302      	movs	r3, #2
  }
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3720      	adds	r7, #32
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b086      	sub	sp, #24
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	60f8      	str	r0, [r7, #12]
 8005a46:	60b9      	str	r1, [r7, #8]
 8005a48:	603b      	str	r3, [r7, #0]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a4e:	e03b      	b.n	8005ac8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a56:	d037      	beq.n	8005ac8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a58:	f7fd f898 	bl	8002b8c <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	6a3a      	ldr	r2, [r7, #32]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d302      	bcc.n	8005a6e <UART_WaitOnFlagUntilTimeout+0x30>
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e03a      	b.n	8005ae8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	f003 0304 	and.w	r3, r3, #4
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d023      	beq.n	8005ac8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	2b80      	cmp	r3, #128	@ 0x80
 8005a84:	d020      	beq.n	8005ac8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	2b40      	cmp	r3, #64	@ 0x40
 8005a8a:	d01d      	beq.n	8005ac8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0308 	and.w	r3, r3, #8
 8005a96:	2b08      	cmp	r3, #8
 8005a98:	d116      	bne.n	8005ac8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	617b      	str	r3, [r7, #20]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	617b      	str	r3, [r7, #20]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f000 f81d 	bl	8005af0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2208      	movs	r2, #8
 8005aba:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e00f      	b.n	8005ae8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	bf0c      	ite	eq
 8005ad8:	2301      	moveq	r3, #1
 8005ada:	2300      	movne	r3, #0
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	461a      	mov	r2, r3
 8005ae0:	79fb      	ldrb	r3, [r7, #7]
 8005ae2:	429a      	cmp	r2, r3
 8005ae4:	d0b4      	beq.n	8005a50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b095      	sub	sp, #84	@ 0x54
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	330c      	adds	r3, #12
 8005afe:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b02:	e853 3f00 	ldrex	r3, [r3]
 8005b06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	330c      	adds	r3, #12
 8005b16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b18:	643a      	str	r2, [r7, #64]	@ 0x40
 8005b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b20:	e841 2300 	strex	r3, r2, [r1]
 8005b24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1e5      	bne.n	8005af8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	3314      	adds	r3, #20
 8005b32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b34:	6a3b      	ldr	r3, [r7, #32]
 8005b36:	e853 3f00 	ldrex	r3, [r3]
 8005b3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	f023 0301 	bic.w	r3, r3, #1
 8005b42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	3314      	adds	r3, #20
 8005b4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b54:	e841 2300 	strex	r3, r2, [r1]
 8005b58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1e5      	bne.n	8005b2c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d119      	bne.n	8005b9c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	330c      	adds	r3, #12
 8005b6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	e853 3f00 	ldrex	r3, [r3]
 8005b76:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	f023 0310 	bic.w	r3, r3, #16
 8005b7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	330c      	adds	r3, #12
 8005b86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b88:	61ba      	str	r2, [r7, #24]
 8005b8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8c:	6979      	ldr	r1, [r7, #20]
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	e841 2300 	strex	r3, r2, [r1]
 8005b94:	613b      	str	r3, [r7, #16]
   return(result);
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1e5      	bne.n	8005b68 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005baa:	bf00      	nop
 8005bac:	3754      	adds	r7, #84	@ 0x54
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
	...

08005bb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bbc:	b0c0      	sub	sp, #256	@ 0x100
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd4:	68d9      	ldr	r1, [r3, #12]
 8005bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	ea40 0301 	orr.w	r3, r0, r1
 8005be0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005c10:	f021 010c 	bic.w	r1, r1, #12
 8005c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005c1e:	430b      	orrs	r3, r1
 8005c20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c32:	6999      	ldr	r1, [r3, #24]
 8005c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	ea40 0301 	orr.w	r3, r0, r1
 8005c3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	4b8f      	ldr	r3, [pc, #572]	@ (8005e84 <UART_SetConfig+0x2cc>)
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d005      	beq.n	8005c58 <UART_SetConfig+0xa0>
 8005c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	4b8d      	ldr	r3, [pc, #564]	@ (8005e88 <UART_SetConfig+0x2d0>)
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d104      	bne.n	8005c62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c58:	f7fd ff06 	bl	8003a68 <HAL_RCC_GetPCLK2Freq>
 8005c5c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005c60:	e003      	b.n	8005c6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c62:	f7fd feed 	bl	8003a40 <HAL_RCC_GetPCLK1Freq>
 8005c66:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c6e:	69db      	ldr	r3, [r3, #28]
 8005c70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c74:	f040 810c 	bne.w	8005e90 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c82:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005c86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005c8a:	4622      	mov	r2, r4
 8005c8c:	462b      	mov	r3, r5
 8005c8e:	1891      	adds	r1, r2, r2
 8005c90:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005c92:	415b      	adcs	r3, r3
 8005c94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005c9a:	4621      	mov	r1, r4
 8005c9c:	eb12 0801 	adds.w	r8, r2, r1
 8005ca0:	4629      	mov	r1, r5
 8005ca2:	eb43 0901 	adc.w	r9, r3, r1
 8005ca6:	f04f 0200 	mov.w	r2, #0
 8005caa:	f04f 0300 	mov.w	r3, #0
 8005cae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cba:	4690      	mov	r8, r2
 8005cbc:	4699      	mov	r9, r3
 8005cbe:	4623      	mov	r3, r4
 8005cc0:	eb18 0303 	adds.w	r3, r8, r3
 8005cc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005cc8:	462b      	mov	r3, r5
 8005cca:	eb49 0303 	adc.w	r3, r9, r3
 8005cce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005cde:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005ce2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	18db      	adds	r3, r3, r3
 8005cea:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cec:	4613      	mov	r3, r2
 8005cee:	eb42 0303 	adc.w	r3, r2, r3
 8005cf2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cf4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005cf8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005cfc:	f7fa ff5c 	bl	8000bb8 <__aeabi_uldivmod>
 8005d00:	4602      	mov	r2, r0
 8005d02:	460b      	mov	r3, r1
 8005d04:	4b61      	ldr	r3, [pc, #388]	@ (8005e8c <UART_SetConfig+0x2d4>)
 8005d06:	fba3 2302 	umull	r2, r3, r3, r2
 8005d0a:	095b      	lsrs	r3, r3, #5
 8005d0c:	011c      	lsls	r4, r3, #4
 8005d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d12:	2200      	movs	r2, #0
 8005d14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d18:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005d1c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005d20:	4642      	mov	r2, r8
 8005d22:	464b      	mov	r3, r9
 8005d24:	1891      	adds	r1, r2, r2
 8005d26:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005d28:	415b      	adcs	r3, r3
 8005d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005d30:	4641      	mov	r1, r8
 8005d32:	eb12 0a01 	adds.w	sl, r2, r1
 8005d36:	4649      	mov	r1, r9
 8005d38:	eb43 0b01 	adc.w	fp, r3, r1
 8005d3c:	f04f 0200 	mov.w	r2, #0
 8005d40:	f04f 0300 	mov.w	r3, #0
 8005d44:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d48:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d50:	4692      	mov	sl, r2
 8005d52:	469b      	mov	fp, r3
 8005d54:	4643      	mov	r3, r8
 8005d56:	eb1a 0303 	adds.w	r3, sl, r3
 8005d5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d5e:	464b      	mov	r3, r9
 8005d60:	eb4b 0303 	adc.w	r3, fp, r3
 8005d64:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d74:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005d78:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	18db      	adds	r3, r3, r3
 8005d80:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d82:	4613      	mov	r3, r2
 8005d84:	eb42 0303 	adc.w	r3, r2, r3
 8005d88:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d8a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005d8e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005d92:	f7fa ff11 	bl	8000bb8 <__aeabi_uldivmod>
 8005d96:	4602      	mov	r2, r0
 8005d98:	460b      	mov	r3, r1
 8005d9a:	4611      	mov	r1, r2
 8005d9c:	4b3b      	ldr	r3, [pc, #236]	@ (8005e8c <UART_SetConfig+0x2d4>)
 8005d9e:	fba3 2301 	umull	r2, r3, r3, r1
 8005da2:	095b      	lsrs	r3, r3, #5
 8005da4:	2264      	movs	r2, #100	@ 0x64
 8005da6:	fb02 f303 	mul.w	r3, r2, r3
 8005daa:	1acb      	subs	r3, r1, r3
 8005dac:	00db      	lsls	r3, r3, #3
 8005dae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005db2:	4b36      	ldr	r3, [pc, #216]	@ (8005e8c <UART_SetConfig+0x2d4>)
 8005db4:	fba3 2302 	umull	r2, r3, r3, r2
 8005db8:	095b      	lsrs	r3, r3, #5
 8005dba:	005b      	lsls	r3, r3, #1
 8005dbc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005dc0:	441c      	add	r4, r3
 8005dc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005dcc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005dd0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005dd4:	4642      	mov	r2, r8
 8005dd6:	464b      	mov	r3, r9
 8005dd8:	1891      	adds	r1, r2, r2
 8005dda:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005ddc:	415b      	adcs	r3, r3
 8005dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005de0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005de4:	4641      	mov	r1, r8
 8005de6:	1851      	adds	r1, r2, r1
 8005de8:	6339      	str	r1, [r7, #48]	@ 0x30
 8005dea:	4649      	mov	r1, r9
 8005dec:	414b      	adcs	r3, r1
 8005dee:	637b      	str	r3, [r7, #52]	@ 0x34
 8005df0:	f04f 0200 	mov.w	r2, #0
 8005df4:	f04f 0300 	mov.w	r3, #0
 8005df8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005dfc:	4659      	mov	r1, fp
 8005dfe:	00cb      	lsls	r3, r1, #3
 8005e00:	4651      	mov	r1, sl
 8005e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e06:	4651      	mov	r1, sl
 8005e08:	00ca      	lsls	r2, r1, #3
 8005e0a:	4610      	mov	r0, r2
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	4603      	mov	r3, r0
 8005e10:	4642      	mov	r2, r8
 8005e12:	189b      	adds	r3, r3, r2
 8005e14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e18:	464b      	mov	r3, r9
 8005e1a:	460a      	mov	r2, r1
 8005e1c:	eb42 0303 	adc.w	r3, r2, r3
 8005e20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e30:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005e34:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e38:	460b      	mov	r3, r1
 8005e3a:	18db      	adds	r3, r3, r3
 8005e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e3e:	4613      	mov	r3, r2
 8005e40:	eb42 0303 	adc.w	r3, r2, r3
 8005e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e46:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e4a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005e4e:	f7fa feb3 	bl	8000bb8 <__aeabi_uldivmod>
 8005e52:	4602      	mov	r2, r0
 8005e54:	460b      	mov	r3, r1
 8005e56:	4b0d      	ldr	r3, [pc, #52]	@ (8005e8c <UART_SetConfig+0x2d4>)
 8005e58:	fba3 1302 	umull	r1, r3, r3, r2
 8005e5c:	095b      	lsrs	r3, r3, #5
 8005e5e:	2164      	movs	r1, #100	@ 0x64
 8005e60:	fb01 f303 	mul.w	r3, r1, r3
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	00db      	lsls	r3, r3, #3
 8005e68:	3332      	adds	r3, #50	@ 0x32
 8005e6a:	4a08      	ldr	r2, [pc, #32]	@ (8005e8c <UART_SetConfig+0x2d4>)
 8005e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e70:	095b      	lsrs	r3, r3, #5
 8005e72:	f003 0207 	and.w	r2, r3, #7
 8005e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4422      	add	r2, r4
 8005e7e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e80:	e106      	b.n	8006090 <UART_SetConfig+0x4d8>
 8005e82:	bf00      	nop
 8005e84:	40011000 	.word	0x40011000
 8005e88:	40011400 	.word	0x40011400
 8005e8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e94:	2200      	movs	r2, #0
 8005e96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e9a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005e9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005ea2:	4642      	mov	r2, r8
 8005ea4:	464b      	mov	r3, r9
 8005ea6:	1891      	adds	r1, r2, r2
 8005ea8:	6239      	str	r1, [r7, #32]
 8005eaa:	415b      	adcs	r3, r3
 8005eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005eb2:	4641      	mov	r1, r8
 8005eb4:	1854      	adds	r4, r2, r1
 8005eb6:	4649      	mov	r1, r9
 8005eb8:	eb43 0501 	adc.w	r5, r3, r1
 8005ebc:	f04f 0200 	mov.w	r2, #0
 8005ec0:	f04f 0300 	mov.w	r3, #0
 8005ec4:	00eb      	lsls	r3, r5, #3
 8005ec6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005eca:	00e2      	lsls	r2, r4, #3
 8005ecc:	4614      	mov	r4, r2
 8005ece:	461d      	mov	r5, r3
 8005ed0:	4643      	mov	r3, r8
 8005ed2:	18e3      	adds	r3, r4, r3
 8005ed4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ed8:	464b      	mov	r3, r9
 8005eda:	eb45 0303 	adc.w	r3, r5, r3
 8005ede:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005eee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005ef2:	f04f 0200 	mov.w	r2, #0
 8005ef6:	f04f 0300 	mov.w	r3, #0
 8005efa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005efe:	4629      	mov	r1, r5
 8005f00:	008b      	lsls	r3, r1, #2
 8005f02:	4621      	mov	r1, r4
 8005f04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f08:	4621      	mov	r1, r4
 8005f0a:	008a      	lsls	r2, r1, #2
 8005f0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005f10:	f7fa fe52 	bl	8000bb8 <__aeabi_uldivmod>
 8005f14:	4602      	mov	r2, r0
 8005f16:	460b      	mov	r3, r1
 8005f18:	4b60      	ldr	r3, [pc, #384]	@ (800609c <UART_SetConfig+0x4e4>)
 8005f1a:	fba3 2302 	umull	r2, r3, r3, r2
 8005f1e:	095b      	lsrs	r3, r3, #5
 8005f20:	011c      	lsls	r4, r3, #4
 8005f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f26:	2200      	movs	r2, #0
 8005f28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005f30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005f34:	4642      	mov	r2, r8
 8005f36:	464b      	mov	r3, r9
 8005f38:	1891      	adds	r1, r2, r2
 8005f3a:	61b9      	str	r1, [r7, #24]
 8005f3c:	415b      	adcs	r3, r3
 8005f3e:	61fb      	str	r3, [r7, #28]
 8005f40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f44:	4641      	mov	r1, r8
 8005f46:	1851      	adds	r1, r2, r1
 8005f48:	6139      	str	r1, [r7, #16]
 8005f4a:	4649      	mov	r1, r9
 8005f4c:	414b      	adcs	r3, r1
 8005f4e:	617b      	str	r3, [r7, #20]
 8005f50:	f04f 0200 	mov.w	r2, #0
 8005f54:	f04f 0300 	mov.w	r3, #0
 8005f58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f5c:	4659      	mov	r1, fp
 8005f5e:	00cb      	lsls	r3, r1, #3
 8005f60:	4651      	mov	r1, sl
 8005f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f66:	4651      	mov	r1, sl
 8005f68:	00ca      	lsls	r2, r1, #3
 8005f6a:	4610      	mov	r0, r2
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	4603      	mov	r3, r0
 8005f70:	4642      	mov	r2, r8
 8005f72:	189b      	adds	r3, r3, r2
 8005f74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f78:	464b      	mov	r3, r9
 8005f7a:	460a      	mov	r2, r1
 8005f7c:	eb42 0303 	adc.w	r3, r2, r3
 8005f80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005f90:	f04f 0200 	mov.w	r2, #0
 8005f94:	f04f 0300 	mov.w	r3, #0
 8005f98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005f9c:	4649      	mov	r1, r9
 8005f9e:	008b      	lsls	r3, r1, #2
 8005fa0:	4641      	mov	r1, r8
 8005fa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fa6:	4641      	mov	r1, r8
 8005fa8:	008a      	lsls	r2, r1, #2
 8005faa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005fae:	f7fa fe03 	bl	8000bb8 <__aeabi_uldivmod>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	4611      	mov	r1, r2
 8005fb8:	4b38      	ldr	r3, [pc, #224]	@ (800609c <UART_SetConfig+0x4e4>)
 8005fba:	fba3 2301 	umull	r2, r3, r3, r1
 8005fbe:	095b      	lsrs	r3, r3, #5
 8005fc0:	2264      	movs	r2, #100	@ 0x64
 8005fc2:	fb02 f303 	mul.w	r3, r2, r3
 8005fc6:	1acb      	subs	r3, r1, r3
 8005fc8:	011b      	lsls	r3, r3, #4
 8005fca:	3332      	adds	r3, #50	@ 0x32
 8005fcc:	4a33      	ldr	r2, [pc, #204]	@ (800609c <UART_SetConfig+0x4e4>)
 8005fce:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd2:	095b      	lsrs	r3, r3, #5
 8005fd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005fd8:	441c      	add	r4, r3
 8005fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fde:	2200      	movs	r2, #0
 8005fe0:	673b      	str	r3, [r7, #112]	@ 0x70
 8005fe2:	677a      	str	r2, [r7, #116]	@ 0x74
 8005fe4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005fe8:	4642      	mov	r2, r8
 8005fea:	464b      	mov	r3, r9
 8005fec:	1891      	adds	r1, r2, r2
 8005fee:	60b9      	str	r1, [r7, #8]
 8005ff0:	415b      	adcs	r3, r3
 8005ff2:	60fb      	str	r3, [r7, #12]
 8005ff4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ff8:	4641      	mov	r1, r8
 8005ffa:	1851      	adds	r1, r2, r1
 8005ffc:	6039      	str	r1, [r7, #0]
 8005ffe:	4649      	mov	r1, r9
 8006000:	414b      	adcs	r3, r1
 8006002:	607b      	str	r3, [r7, #4]
 8006004:	f04f 0200 	mov.w	r2, #0
 8006008:	f04f 0300 	mov.w	r3, #0
 800600c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006010:	4659      	mov	r1, fp
 8006012:	00cb      	lsls	r3, r1, #3
 8006014:	4651      	mov	r1, sl
 8006016:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800601a:	4651      	mov	r1, sl
 800601c:	00ca      	lsls	r2, r1, #3
 800601e:	4610      	mov	r0, r2
 8006020:	4619      	mov	r1, r3
 8006022:	4603      	mov	r3, r0
 8006024:	4642      	mov	r2, r8
 8006026:	189b      	adds	r3, r3, r2
 8006028:	66bb      	str	r3, [r7, #104]	@ 0x68
 800602a:	464b      	mov	r3, r9
 800602c:	460a      	mov	r2, r1
 800602e:	eb42 0303 	adc.w	r3, r2, r3
 8006032:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	663b      	str	r3, [r7, #96]	@ 0x60
 800603e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006040:	f04f 0200 	mov.w	r2, #0
 8006044:	f04f 0300 	mov.w	r3, #0
 8006048:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800604c:	4649      	mov	r1, r9
 800604e:	008b      	lsls	r3, r1, #2
 8006050:	4641      	mov	r1, r8
 8006052:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006056:	4641      	mov	r1, r8
 8006058:	008a      	lsls	r2, r1, #2
 800605a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800605e:	f7fa fdab 	bl	8000bb8 <__aeabi_uldivmod>
 8006062:	4602      	mov	r2, r0
 8006064:	460b      	mov	r3, r1
 8006066:	4b0d      	ldr	r3, [pc, #52]	@ (800609c <UART_SetConfig+0x4e4>)
 8006068:	fba3 1302 	umull	r1, r3, r3, r2
 800606c:	095b      	lsrs	r3, r3, #5
 800606e:	2164      	movs	r1, #100	@ 0x64
 8006070:	fb01 f303 	mul.w	r3, r1, r3
 8006074:	1ad3      	subs	r3, r2, r3
 8006076:	011b      	lsls	r3, r3, #4
 8006078:	3332      	adds	r3, #50	@ 0x32
 800607a:	4a08      	ldr	r2, [pc, #32]	@ (800609c <UART_SetConfig+0x4e4>)
 800607c:	fba2 2303 	umull	r2, r3, r2, r3
 8006080:	095b      	lsrs	r3, r3, #5
 8006082:	f003 020f 	and.w	r2, r3, #15
 8006086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4422      	add	r2, r4
 800608e:	609a      	str	r2, [r3, #8]
}
 8006090:	bf00      	nop
 8006092:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006096:	46bd      	mov	sp, r7
 8006098:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800609c:	51eb851f 	.word	0x51eb851f

080060a0 <_ZdlPvj>:
 80060a0:	f000 b811 	b.w	80060c6 <_ZdlPv>

080060a4 <_Znwj>:
 80060a4:	2801      	cmp	r0, #1
 80060a6:	bf38      	it	cc
 80060a8:	2001      	movcc	r0, #1
 80060aa:	b510      	push	{r4, lr}
 80060ac:	4604      	mov	r4, r0
 80060ae:	4620      	mov	r0, r4
 80060b0:	f000 f81c 	bl	80060ec <malloc>
 80060b4:	b100      	cbz	r0, 80060b8 <_Znwj+0x14>
 80060b6:	bd10      	pop	{r4, pc}
 80060b8:	f000 f808 	bl	80060cc <_ZSt15get_new_handlerv>
 80060bc:	b908      	cbnz	r0, 80060c2 <_Znwj+0x1e>
 80060be:	f000 f80d 	bl	80060dc <abort>
 80060c2:	4780      	blx	r0
 80060c4:	e7f3      	b.n	80060ae <_Znwj+0xa>

080060c6 <_ZdlPv>:
 80060c6:	f000 b819 	b.w	80060fc <free>
	...

080060cc <_ZSt15get_new_handlerv>:
 80060cc:	4b02      	ldr	r3, [pc, #8]	@ (80060d8 <_ZSt15get_new_handlerv+0xc>)
 80060ce:	6818      	ldr	r0, [r3, #0]
 80060d0:	f3bf 8f5b 	dmb	ish
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	200003e4 	.word	0x200003e4

080060dc <abort>:
 80060dc:	b508      	push	{r3, lr}
 80060de:	2006      	movs	r0, #6
 80060e0:	f000 fe70 	bl	8006dc4 <raise>
 80060e4:	2001      	movs	r0, #1
 80060e6:	f7fc fc01 	bl	80028ec <_exit>
	...

080060ec <malloc>:
 80060ec:	4b02      	ldr	r3, [pc, #8]	@ (80060f8 <malloc+0xc>)
 80060ee:	4601      	mov	r1, r0
 80060f0:	6818      	ldr	r0, [r3, #0]
 80060f2:	f000 b82d 	b.w	8006150 <_malloc_r>
 80060f6:	bf00      	nop
 80060f8:	20000018 	.word	0x20000018

080060fc <free>:
 80060fc:	4b02      	ldr	r3, [pc, #8]	@ (8006108 <free+0xc>)
 80060fe:	4601      	mov	r1, r0
 8006100:	6818      	ldr	r0, [r3, #0]
 8006102:	f001 bd51 	b.w	8007ba8 <_free_r>
 8006106:	bf00      	nop
 8006108:	20000018 	.word	0x20000018

0800610c <sbrk_aligned>:
 800610c:	b570      	push	{r4, r5, r6, lr}
 800610e:	4e0f      	ldr	r6, [pc, #60]	@ (800614c <sbrk_aligned+0x40>)
 8006110:	460c      	mov	r4, r1
 8006112:	6831      	ldr	r1, [r6, #0]
 8006114:	4605      	mov	r5, r0
 8006116:	b911      	cbnz	r1, 800611e <sbrk_aligned+0x12>
 8006118:	f000 fea8 	bl	8006e6c <_sbrk_r>
 800611c:	6030      	str	r0, [r6, #0]
 800611e:	4621      	mov	r1, r4
 8006120:	4628      	mov	r0, r5
 8006122:	f000 fea3 	bl	8006e6c <_sbrk_r>
 8006126:	1c43      	adds	r3, r0, #1
 8006128:	d103      	bne.n	8006132 <sbrk_aligned+0x26>
 800612a:	f04f 34ff 	mov.w	r4, #4294967295
 800612e:	4620      	mov	r0, r4
 8006130:	bd70      	pop	{r4, r5, r6, pc}
 8006132:	1cc4      	adds	r4, r0, #3
 8006134:	f024 0403 	bic.w	r4, r4, #3
 8006138:	42a0      	cmp	r0, r4
 800613a:	d0f8      	beq.n	800612e <sbrk_aligned+0x22>
 800613c:	1a21      	subs	r1, r4, r0
 800613e:	4628      	mov	r0, r5
 8006140:	f000 fe94 	bl	8006e6c <_sbrk_r>
 8006144:	3001      	adds	r0, #1
 8006146:	d1f2      	bne.n	800612e <sbrk_aligned+0x22>
 8006148:	e7ef      	b.n	800612a <sbrk_aligned+0x1e>
 800614a:	bf00      	nop
 800614c:	200003e8 	.word	0x200003e8

08006150 <_malloc_r>:
 8006150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006154:	1ccd      	adds	r5, r1, #3
 8006156:	f025 0503 	bic.w	r5, r5, #3
 800615a:	3508      	adds	r5, #8
 800615c:	2d0c      	cmp	r5, #12
 800615e:	bf38      	it	cc
 8006160:	250c      	movcc	r5, #12
 8006162:	2d00      	cmp	r5, #0
 8006164:	4606      	mov	r6, r0
 8006166:	db01      	blt.n	800616c <_malloc_r+0x1c>
 8006168:	42a9      	cmp	r1, r5
 800616a:	d904      	bls.n	8006176 <_malloc_r+0x26>
 800616c:	230c      	movs	r3, #12
 800616e:	6033      	str	r3, [r6, #0]
 8006170:	2000      	movs	r0, #0
 8006172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006176:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800624c <_malloc_r+0xfc>
 800617a:	f000 f869 	bl	8006250 <__malloc_lock>
 800617e:	f8d8 3000 	ldr.w	r3, [r8]
 8006182:	461c      	mov	r4, r3
 8006184:	bb44      	cbnz	r4, 80061d8 <_malloc_r+0x88>
 8006186:	4629      	mov	r1, r5
 8006188:	4630      	mov	r0, r6
 800618a:	f7ff ffbf 	bl	800610c <sbrk_aligned>
 800618e:	1c43      	adds	r3, r0, #1
 8006190:	4604      	mov	r4, r0
 8006192:	d158      	bne.n	8006246 <_malloc_r+0xf6>
 8006194:	f8d8 4000 	ldr.w	r4, [r8]
 8006198:	4627      	mov	r7, r4
 800619a:	2f00      	cmp	r7, #0
 800619c:	d143      	bne.n	8006226 <_malloc_r+0xd6>
 800619e:	2c00      	cmp	r4, #0
 80061a0:	d04b      	beq.n	800623a <_malloc_r+0xea>
 80061a2:	6823      	ldr	r3, [r4, #0]
 80061a4:	4639      	mov	r1, r7
 80061a6:	4630      	mov	r0, r6
 80061a8:	eb04 0903 	add.w	r9, r4, r3
 80061ac:	f000 fe5e 	bl	8006e6c <_sbrk_r>
 80061b0:	4581      	cmp	r9, r0
 80061b2:	d142      	bne.n	800623a <_malloc_r+0xea>
 80061b4:	6821      	ldr	r1, [r4, #0]
 80061b6:	1a6d      	subs	r5, r5, r1
 80061b8:	4629      	mov	r1, r5
 80061ba:	4630      	mov	r0, r6
 80061bc:	f7ff ffa6 	bl	800610c <sbrk_aligned>
 80061c0:	3001      	adds	r0, #1
 80061c2:	d03a      	beq.n	800623a <_malloc_r+0xea>
 80061c4:	6823      	ldr	r3, [r4, #0]
 80061c6:	442b      	add	r3, r5
 80061c8:	6023      	str	r3, [r4, #0]
 80061ca:	f8d8 3000 	ldr.w	r3, [r8]
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	bb62      	cbnz	r2, 800622c <_malloc_r+0xdc>
 80061d2:	f8c8 7000 	str.w	r7, [r8]
 80061d6:	e00f      	b.n	80061f8 <_malloc_r+0xa8>
 80061d8:	6822      	ldr	r2, [r4, #0]
 80061da:	1b52      	subs	r2, r2, r5
 80061dc:	d420      	bmi.n	8006220 <_malloc_r+0xd0>
 80061de:	2a0b      	cmp	r2, #11
 80061e0:	d917      	bls.n	8006212 <_malloc_r+0xc2>
 80061e2:	1961      	adds	r1, r4, r5
 80061e4:	42a3      	cmp	r3, r4
 80061e6:	6025      	str	r5, [r4, #0]
 80061e8:	bf18      	it	ne
 80061ea:	6059      	strne	r1, [r3, #4]
 80061ec:	6863      	ldr	r3, [r4, #4]
 80061ee:	bf08      	it	eq
 80061f0:	f8c8 1000 	streq.w	r1, [r8]
 80061f4:	5162      	str	r2, [r4, r5]
 80061f6:	604b      	str	r3, [r1, #4]
 80061f8:	4630      	mov	r0, r6
 80061fa:	f000 f82f 	bl	800625c <__malloc_unlock>
 80061fe:	f104 000b 	add.w	r0, r4, #11
 8006202:	1d23      	adds	r3, r4, #4
 8006204:	f020 0007 	bic.w	r0, r0, #7
 8006208:	1ac2      	subs	r2, r0, r3
 800620a:	bf1c      	itt	ne
 800620c:	1a1b      	subne	r3, r3, r0
 800620e:	50a3      	strne	r3, [r4, r2]
 8006210:	e7af      	b.n	8006172 <_malloc_r+0x22>
 8006212:	6862      	ldr	r2, [r4, #4]
 8006214:	42a3      	cmp	r3, r4
 8006216:	bf0c      	ite	eq
 8006218:	f8c8 2000 	streq.w	r2, [r8]
 800621c:	605a      	strne	r2, [r3, #4]
 800621e:	e7eb      	b.n	80061f8 <_malloc_r+0xa8>
 8006220:	4623      	mov	r3, r4
 8006222:	6864      	ldr	r4, [r4, #4]
 8006224:	e7ae      	b.n	8006184 <_malloc_r+0x34>
 8006226:	463c      	mov	r4, r7
 8006228:	687f      	ldr	r7, [r7, #4]
 800622a:	e7b6      	b.n	800619a <_malloc_r+0x4a>
 800622c:	461a      	mov	r2, r3
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	42a3      	cmp	r3, r4
 8006232:	d1fb      	bne.n	800622c <_malloc_r+0xdc>
 8006234:	2300      	movs	r3, #0
 8006236:	6053      	str	r3, [r2, #4]
 8006238:	e7de      	b.n	80061f8 <_malloc_r+0xa8>
 800623a:	230c      	movs	r3, #12
 800623c:	6033      	str	r3, [r6, #0]
 800623e:	4630      	mov	r0, r6
 8006240:	f000 f80c 	bl	800625c <__malloc_unlock>
 8006244:	e794      	b.n	8006170 <_malloc_r+0x20>
 8006246:	6005      	str	r5, [r0, #0]
 8006248:	e7d6      	b.n	80061f8 <_malloc_r+0xa8>
 800624a:	bf00      	nop
 800624c:	200003ec 	.word	0x200003ec

08006250 <__malloc_lock>:
 8006250:	4801      	ldr	r0, [pc, #4]	@ (8006258 <__malloc_lock+0x8>)
 8006252:	f000 be58 	b.w	8006f06 <__retarget_lock_acquire_recursive>
 8006256:	bf00      	nop
 8006258:	20000530 	.word	0x20000530

0800625c <__malloc_unlock>:
 800625c:	4801      	ldr	r0, [pc, #4]	@ (8006264 <__malloc_unlock+0x8>)
 800625e:	f000 be53 	b.w	8006f08 <__retarget_lock_release_recursive>
 8006262:	bf00      	nop
 8006264:	20000530 	.word	0x20000530

08006268 <__cvt>:
 8006268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800626c:	ec57 6b10 	vmov	r6, r7, d0
 8006270:	2f00      	cmp	r7, #0
 8006272:	460c      	mov	r4, r1
 8006274:	4619      	mov	r1, r3
 8006276:	463b      	mov	r3, r7
 8006278:	bfbb      	ittet	lt
 800627a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800627e:	461f      	movlt	r7, r3
 8006280:	2300      	movge	r3, #0
 8006282:	232d      	movlt	r3, #45	@ 0x2d
 8006284:	700b      	strb	r3, [r1, #0]
 8006286:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006288:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800628c:	4691      	mov	r9, r2
 800628e:	f023 0820 	bic.w	r8, r3, #32
 8006292:	bfbc      	itt	lt
 8006294:	4632      	movlt	r2, r6
 8006296:	4616      	movlt	r6, r2
 8006298:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800629c:	d005      	beq.n	80062aa <__cvt+0x42>
 800629e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80062a2:	d100      	bne.n	80062a6 <__cvt+0x3e>
 80062a4:	3401      	adds	r4, #1
 80062a6:	2102      	movs	r1, #2
 80062a8:	e000      	b.n	80062ac <__cvt+0x44>
 80062aa:	2103      	movs	r1, #3
 80062ac:	ab03      	add	r3, sp, #12
 80062ae:	9301      	str	r3, [sp, #4]
 80062b0:	ab02      	add	r3, sp, #8
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	ec47 6b10 	vmov	d0, r6, r7
 80062b8:	4653      	mov	r3, sl
 80062ba:	4622      	mov	r2, r4
 80062bc:	f000 feb0 	bl	8007020 <_dtoa_r>
 80062c0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80062c4:	4605      	mov	r5, r0
 80062c6:	d119      	bne.n	80062fc <__cvt+0x94>
 80062c8:	f019 0f01 	tst.w	r9, #1
 80062cc:	d00e      	beq.n	80062ec <__cvt+0x84>
 80062ce:	eb00 0904 	add.w	r9, r0, r4
 80062d2:	2200      	movs	r2, #0
 80062d4:	2300      	movs	r3, #0
 80062d6:	4630      	mov	r0, r6
 80062d8:	4639      	mov	r1, r7
 80062da:	f7fa fbfd 	bl	8000ad8 <__aeabi_dcmpeq>
 80062de:	b108      	cbz	r0, 80062e4 <__cvt+0x7c>
 80062e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80062e4:	2230      	movs	r2, #48	@ 0x30
 80062e6:	9b03      	ldr	r3, [sp, #12]
 80062e8:	454b      	cmp	r3, r9
 80062ea:	d31e      	bcc.n	800632a <__cvt+0xc2>
 80062ec:	9b03      	ldr	r3, [sp, #12]
 80062ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80062f0:	1b5b      	subs	r3, r3, r5
 80062f2:	4628      	mov	r0, r5
 80062f4:	6013      	str	r3, [r2, #0]
 80062f6:	b004      	add	sp, #16
 80062f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006300:	eb00 0904 	add.w	r9, r0, r4
 8006304:	d1e5      	bne.n	80062d2 <__cvt+0x6a>
 8006306:	7803      	ldrb	r3, [r0, #0]
 8006308:	2b30      	cmp	r3, #48	@ 0x30
 800630a:	d10a      	bne.n	8006322 <__cvt+0xba>
 800630c:	2200      	movs	r2, #0
 800630e:	2300      	movs	r3, #0
 8006310:	4630      	mov	r0, r6
 8006312:	4639      	mov	r1, r7
 8006314:	f7fa fbe0 	bl	8000ad8 <__aeabi_dcmpeq>
 8006318:	b918      	cbnz	r0, 8006322 <__cvt+0xba>
 800631a:	f1c4 0401 	rsb	r4, r4, #1
 800631e:	f8ca 4000 	str.w	r4, [sl]
 8006322:	f8da 3000 	ldr.w	r3, [sl]
 8006326:	4499      	add	r9, r3
 8006328:	e7d3      	b.n	80062d2 <__cvt+0x6a>
 800632a:	1c59      	adds	r1, r3, #1
 800632c:	9103      	str	r1, [sp, #12]
 800632e:	701a      	strb	r2, [r3, #0]
 8006330:	e7d9      	b.n	80062e6 <__cvt+0x7e>

08006332 <__exponent>:
 8006332:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006334:	2900      	cmp	r1, #0
 8006336:	bfba      	itte	lt
 8006338:	4249      	neglt	r1, r1
 800633a:	232d      	movlt	r3, #45	@ 0x2d
 800633c:	232b      	movge	r3, #43	@ 0x2b
 800633e:	2909      	cmp	r1, #9
 8006340:	7002      	strb	r2, [r0, #0]
 8006342:	7043      	strb	r3, [r0, #1]
 8006344:	dd29      	ble.n	800639a <__exponent+0x68>
 8006346:	f10d 0307 	add.w	r3, sp, #7
 800634a:	461d      	mov	r5, r3
 800634c:	270a      	movs	r7, #10
 800634e:	461a      	mov	r2, r3
 8006350:	fbb1 f6f7 	udiv	r6, r1, r7
 8006354:	fb07 1416 	mls	r4, r7, r6, r1
 8006358:	3430      	adds	r4, #48	@ 0x30
 800635a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800635e:	460c      	mov	r4, r1
 8006360:	2c63      	cmp	r4, #99	@ 0x63
 8006362:	f103 33ff 	add.w	r3, r3, #4294967295
 8006366:	4631      	mov	r1, r6
 8006368:	dcf1      	bgt.n	800634e <__exponent+0x1c>
 800636a:	3130      	adds	r1, #48	@ 0x30
 800636c:	1e94      	subs	r4, r2, #2
 800636e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006372:	1c41      	adds	r1, r0, #1
 8006374:	4623      	mov	r3, r4
 8006376:	42ab      	cmp	r3, r5
 8006378:	d30a      	bcc.n	8006390 <__exponent+0x5e>
 800637a:	f10d 0309 	add.w	r3, sp, #9
 800637e:	1a9b      	subs	r3, r3, r2
 8006380:	42ac      	cmp	r4, r5
 8006382:	bf88      	it	hi
 8006384:	2300      	movhi	r3, #0
 8006386:	3302      	adds	r3, #2
 8006388:	4403      	add	r3, r0
 800638a:	1a18      	subs	r0, r3, r0
 800638c:	b003      	add	sp, #12
 800638e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006390:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006394:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006398:	e7ed      	b.n	8006376 <__exponent+0x44>
 800639a:	2330      	movs	r3, #48	@ 0x30
 800639c:	3130      	adds	r1, #48	@ 0x30
 800639e:	7083      	strb	r3, [r0, #2]
 80063a0:	70c1      	strb	r1, [r0, #3]
 80063a2:	1d03      	adds	r3, r0, #4
 80063a4:	e7f1      	b.n	800638a <__exponent+0x58>
	...

080063a8 <_printf_float>:
 80063a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ac:	b08d      	sub	sp, #52	@ 0x34
 80063ae:	460c      	mov	r4, r1
 80063b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80063b4:	4616      	mov	r6, r2
 80063b6:	461f      	mov	r7, r3
 80063b8:	4605      	mov	r5, r0
 80063ba:	f000 fd0b 	bl	8006dd4 <_localeconv_r>
 80063be:	6803      	ldr	r3, [r0, #0]
 80063c0:	9304      	str	r3, [sp, #16]
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7f9 ff5c 	bl	8000280 <strlen>
 80063c8:	2300      	movs	r3, #0
 80063ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80063cc:	f8d8 3000 	ldr.w	r3, [r8]
 80063d0:	9005      	str	r0, [sp, #20]
 80063d2:	3307      	adds	r3, #7
 80063d4:	f023 0307 	bic.w	r3, r3, #7
 80063d8:	f103 0208 	add.w	r2, r3, #8
 80063dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80063e0:	f8d4 b000 	ldr.w	fp, [r4]
 80063e4:	f8c8 2000 	str.w	r2, [r8]
 80063e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063ec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80063f0:	9307      	str	r3, [sp, #28]
 80063f2:	f8cd 8018 	str.w	r8, [sp, #24]
 80063f6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80063fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063fe:	4b9c      	ldr	r3, [pc, #624]	@ (8006670 <_printf_float+0x2c8>)
 8006400:	f04f 32ff 	mov.w	r2, #4294967295
 8006404:	f7fa fb9a 	bl	8000b3c <__aeabi_dcmpun>
 8006408:	bb70      	cbnz	r0, 8006468 <_printf_float+0xc0>
 800640a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800640e:	4b98      	ldr	r3, [pc, #608]	@ (8006670 <_printf_float+0x2c8>)
 8006410:	f04f 32ff 	mov.w	r2, #4294967295
 8006414:	f7fa fb74 	bl	8000b00 <__aeabi_dcmple>
 8006418:	bb30      	cbnz	r0, 8006468 <_printf_float+0xc0>
 800641a:	2200      	movs	r2, #0
 800641c:	2300      	movs	r3, #0
 800641e:	4640      	mov	r0, r8
 8006420:	4649      	mov	r1, r9
 8006422:	f7fa fb63 	bl	8000aec <__aeabi_dcmplt>
 8006426:	b110      	cbz	r0, 800642e <_printf_float+0x86>
 8006428:	232d      	movs	r3, #45	@ 0x2d
 800642a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800642e:	4a91      	ldr	r2, [pc, #580]	@ (8006674 <_printf_float+0x2cc>)
 8006430:	4b91      	ldr	r3, [pc, #580]	@ (8006678 <_printf_float+0x2d0>)
 8006432:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006436:	bf94      	ite	ls
 8006438:	4690      	movls	r8, r2
 800643a:	4698      	movhi	r8, r3
 800643c:	2303      	movs	r3, #3
 800643e:	6123      	str	r3, [r4, #16]
 8006440:	f02b 0304 	bic.w	r3, fp, #4
 8006444:	6023      	str	r3, [r4, #0]
 8006446:	f04f 0900 	mov.w	r9, #0
 800644a:	9700      	str	r7, [sp, #0]
 800644c:	4633      	mov	r3, r6
 800644e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006450:	4621      	mov	r1, r4
 8006452:	4628      	mov	r0, r5
 8006454:	f000 f9d2 	bl	80067fc <_printf_common>
 8006458:	3001      	adds	r0, #1
 800645a:	f040 808d 	bne.w	8006578 <_printf_float+0x1d0>
 800645e:	f04f 30ff 	mov.w	r0, #4294967295
 8006462:	b00d      	add	sp, #52	@ 0x34
 8006464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006468:	4642      	mov	r2, r8
 800646a:	464b      	mov	r3, r9
 800646c:	4640      	mov	r0, r8
 800646e:	4649      	mov	r1, r9
 8006470:	f7fa fb64 	bl	8000b3c <__aeabi_dcmpun>
 8006474:	b140      	cbz	r0, 8006488 <_printf_float+0xe0>
 8006476:	464b      	mov	r3, r9
 8006478:	2b00      	cmp	r3, #0
 800647a:	bfbc      	itt	lt
 800647c:	232d      	movlt	r3, #45	@ 0x2d
 800647e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006482:	4a7e      	ldr	r2, [pc, #504]	@ (800667c <_printf_float+0x2d4>)
 8006484:	4b7e      	ldr	r3, [pc, #504]	@ (8006680 <_printf_float+0x2d8>)
 8006486:	e7d4      	b.n	8006432 <_printf_float+0x8a>
 8006488:	6863      	ldr	r3, [r4, #4]
 800648a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800648e:	9206      	str	r2, [sp, #24]
 8006490:	1c5a      	adds	r2, r3, #1
 8006492:	d13b      	bne.n	800650c <_printf_float+0x164>
 8006494:	2306      	movs	r3, #6
 8006496:	6063      	str	r3, [r4, #4]
 8006498:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800649c:	2300      	movs	r3, #0
 800649e:	6022      	str	r2, [r4, #0]
 80064a0:	9303      	str	r3, [sp, #12]
 80064a2:	ab0a      	add	r3, sp, #40	@ 0x28
 80064a4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80064a8:	ab09      	add	r3, sp, #36	@ 0x24
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	6861      	ldr	r1, [r4, #4]
 80064ae:	ec49 8b10 	vmov	d0, r8, r9
 80064b2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80064b6:	4628      	mov	r0, r5
 80064b8:	f7ff fed6 	bl	8006268 <__cvt>
 80064bc:	9b06      	ldr	r3, [sp, #24]
 80064be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80064c0:	2b47      	cmp	r3, #71	@ 0x47
 80064c2:	4680      	mov	r8, r0
 80064c4:	d129      	bne.n	800651a <_printf_float+0x172>
 80064c6:	1cc8      	adds	r0, r1, #3
 80064c8:	db02      	blt.n	80064d0 <_printf_float+0x128>
 80064ca:	6863      	ldr	r3, [r4, #4]
 80064cc:	4299      	cmp	r1, r3
 80064ce:	dd41      	ble.n	8006554 <_printf_float+0x1ac>
 80064d0:	f1aa 0a02 	sub.w	sl, sl, #2
 80064d4:	fa5f fa8a 	uxtb.w	sl, sl
 80064d8:	3901      	subs	r1, #1
 80064da:	4652      	mov	r2, sl
 80064dc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80064e0:	9109      	str	r1, [sp, #36]	@ 0x24
 80064e2:	f7ff ff26 	bl	8006332 <__exponent>
 80064e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064e8:	1813      	adds	r3, r2, r0
 80064ea:	2a01      	cmp	r2, #1
 80064ec:	4681      	mov	r9, r0
 80064ee:	6123      	str	r3, [r4, #16]
 80064f0:	dc02      	bgt.n	80064f8 <_printf_float+0x150>
 80064f2:	6822      	ldr	r2, [r4, #0]
 80064f4:	07d2      	lsls	r2, r2, #31
 80064f6:	d501      	bpl.n	80064fc <_printf_float+0x154>
 80064f8:	3301      	adds	r3, #1
 80064fa:	6123      	str	r3, [r4, #16]
 80064fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006500:	2b00      	cmp	r3, #0
 8006502:	d0a2      	beq.n	800644a <_printf_float+0xa2>
 8006504:	232d      	movs	r3, #45	@ 0x2d
 8006506:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800650a:	e79e      	b.n	800644a <_printf_float+0xa2>
 800650c:	9a06      	ldr	r2, [sp, #24]
 800650e:	2a47      	cmp	r2, #71	@ 0x47
 8006510:	d1c2      	bne.n	8006498 <_printf_float+0xf0>
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1c0      	bne.n	8006498 <_printf_float+0xf0>
 8006516:	2301      	movs	r3, #1
 8006518:	e7bd      	b.n	8006496 <_printf_float+0xee>
 800651a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800651e:	d9db      	bls.n	80064d8 <_printf_float+0x130>
 8006520:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006524:	d118      	bne.n	8006558 <_printf_float+0x1b0>
 8006526:	2900      	cmp	r1, #0
 8006528:	6863      	ldr	r3, [r4, #4]
 800652a:	dd0b      	ble.n	8006544 <_printf_float+0x19c>
 800652c:	6121      	str	r1, [r4, #16]
 800652e:	b913      	cbnz	r3, 8006536 <_printf_float+0x18e>
 8006530:	6822      	ldr	r2, [r4, #0]
 8006532:	07d0      	lsls	r0, r2, #31
 8006534:	d502      	bpl.n	800653c <_printf_float+0x194>
 8006536:	3301      	adds	r3, #1
 8006538:	440b      	add	r3, r1
 800653a:	6123      	str	r3, [r4, #16]
 800653c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800653e:	f04f 0900 	mov.w	r9, #0
 8006542:	e7db      	b.n	80064fc <_printf_float+0x154>
 8006544:	b913      	cbnz	r3, 800654c <_printf_float+0x1a4>
 8006546:	6822      	ldr	r2, [r4, #0]
 8006548:	07d2      	lsls	r2, r2, #31
 800654a:	d501      	bpl.n	8006550 <_printf_float+0x1a8>
 800654c:	3302      	adds	r3, #2
 800654e:	e7f4      	b.n	800653a <_printf_float+0x192>
 8006550:	2301      	movs	r3, #1
 8006552:	e7f2      	b.n	800653a <_printf_float+0x192>
 8006554:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006558:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800655a:	4299      	cmp	r1, r3
 800655c:	db05      	blt.n	800656a <_printf_float+0x1c2>
 800655e:	6823      	ldr	r3, [r4, #0]
 8006560:	6121      	str	r1, [r4, #16]
 8006562:	07d8      	lsls	r0, r3, #31
 8006564:	d5ea      	bpl.n	800653c <_printf_float+0x194>
 8006566:	1c4b      	adds	r3, r1, #1
 8006568:	e7e7      	b.n	800653a <_printf_float+0x192>
 800656a:	2900      	cmp	r1, #0
 800656c:	bfd4      	ite	le
 800656e:	f1c1 0202 	rsble	r2, r1, #2
 8006572:	2201      	movgt	r2, #1
 8006574:	4413      	add	r3, r2
 8006576:	e7e0      	b.n	800653a <_printf_float+0x192>
 8006578:	6823      	ldr	r3, [r4, #0]
 800657a:	055a      	lsls	r2, r3, #21
 800657c:	d407      	bmi.n	800658e <_printf_float+0x1e6>
 800657e:	6923      	ldr	r3, [r4, #16]
 8006580:	4642      	mov	r2, r8
 8006582:	4631      	mov	r1, r6
 8006584:	4628      	mov	r0, r5
 8006586:	47b8      	blx	r7
 8006588:	3001      	adds	r0, #1
 800658a:	d12b      	bne.n	80065e4 <_printf_float+0x23c>
 800658c:	e767      	b.n	800645e <_printf_float+0xb6>
 800658e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006592:	f240 80dd 	bls.w	8006750 <_printf_float+0x3a8>
 8006596:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800659a:	2200      	movs	r2, #0
 800659c:	2300      	movs	r3, #0
 800659e:	f7fa fa9b 	bl	8000ad8 <__aeabi_dcmpeq>
 80065a2:	2800      	cmp	r0, #0
 80065a4:	d033      	beq.n	800660e <_printf_float+0x266>
 80065a6:	4a37      	ldr	r2, [pc, #220]	@ (8006684 <_printf_float+0x2dc>)
 80065a8:	2301      	movs	r3, #1
 80065aa:	4631      	mov	r1, r6
 80065ac:	4628      	mov	r0, r5
 80065ae:	47b8      	blx	r7
 80065b0:	3001      	adds	r0, #1
 80065b2:	f43f af54 	beq.w	800645e <_printf_float+0xb6>
 80065b6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80065ba:	4543      	cmp	r3, r8
 80065bc:	db02      	blt.n	80065c4 <_printf_float+0x21c>
 80065be:	6823      	ldr	r3, [r4, #0]
 80065c0:	07d8      	lsls	r0, r3, #31
 80065c2:	d50f      	bpl.n	80065e4 <_printf_float+0x23c>
 80065c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065c8:	4631      	mov	r1, r6
 80065ca:	4628      	mov	r0, r5
 80065cc:	47b8      	blx	r7
 80065ce:	3001      	adds	r0, #1
 80065d0:	f43f af45 	beq.w	800645e <_printf_float+0xb6>
 80065d4:	f04f 0900 	mov.w	r9, #0
 80065d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80065dc:	f104 0a1a 	add.w	sl, r4, #26
 80065e0:	45c8      	cmp	r8, r9
 80065e2:	dc09      	bgt.n	80065f8 <_printf_float+0x250>
 80065e4:	6823      	ldr	r3, [r4, #0]
 80065e6:	079b      	lsls	r3, r3, #30
 80065e8:	f100 8103 	bmi.w	80067f2 <_printf_float+0x44a>
 80065ec:	68e0      	ldr	r0, [r4, #12]
 80065ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065f0:	4298      	cmp	r0, r3
 80065f2:	bfb8      	it	lt
 80065f4:	4618      	movlt	r0, r3
 80065f6:	e734      	b.n	8006462 <_printf_float+0xba>
 80065f8:	2301      	movs	r3, #1
 80065fa:	4652      	mov	r2, sl
 80065fc:	4631      	mov	r1, r6
 80065fe:	4628      	mov	r0, r5
 8006600:	47b8      	blx	r7
 8006602:	3001      	adds	r0, #1
 8006604:	f43f af2b 	beq.w	800645e <_printf_float+0xb6>
 8006608:	f109 0901 	add.w	r9, r9, #1
 800660c:	e7e8      	b.n	80065e0 <_printf_float+0x238>
 800660e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006610:	2b00      	cmp	r3, #0
 8006612:	dc39      	bgt.n	8006688 <_printf_float+0x2e0>
 8006614:	4a1b      	ldr	r2, [pc, #108]	@ (8006684 <_printf_float+0x2dc>)
 8006616:	2301      	movs	r3, #1
 8006618:	4631      	mov	r1, r6
 800661a:	4628      	mov	r0, r5
 800661c:	47b8      	blx	r7
 800661e:	3001      	adds	r0, #1
 8006620:	f43f af1d 	beq.w	800645e <_printf_float+0xb6>
 8006624:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006628:	ea59 0303 	orrs.w	r3, r9, r3
 800662c:	d102      	bne.n	8006634 <_printf_float+0x28c>
 800662e:	6823      	ldr	r3, [r4, #0]
 8006630:	07d9      	lsls	r1, r3, #31
 8006632:	d5d7      	bpl.n	80065e4 <_printf_float+0x23c>
 8006634:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006638:	4631      	mov	r1, r6
 800663a:	4628      	mov	r0, r5
 800663c:	47b8      	blx	r7
 800663e:	3001      	adds	r0, #1
 8006640:	f43f af0d 	beq.w	800645e <_printf_float+0xb6>
 8006644:	f04f 0a00 	mov.w	sl, #0
 8006648:	f104 0b1a 	add.w	fp, r4, #26
 800664c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800664e:	425b      	negs	r3, r3
 8006650:	4553      	cmp	r3, sl
 8006652:	dc01      	bgt.n	8006658 <_printf_float+0x2b0>
 8006654:	464b      	mov	r3, r9
 8006656:	e793      	b.n	8006580 <_printf_float+0x1d8>
 8006658:	2301      	movs	r3, #1
 800665a:	465a      	mov	r2, fp
 800665c:	4631      	mov	r1, r6
 800665e:	4628      	mov	r0, r5
 8006660:	47b8      	blx	r7
 8006662:	3001      	adds	r0, #1
 8006664:	f43f aefb 	beq.w	800645e <_printf_float+0xb6>
 8006668:	f10a 0a01 	add.w	sl, sl, #1
 800666c:	e7ee      	b.n	800664c <_printf_float+0x2a4>
 800666e:	bf00      	nop
 8006670:	7fefffff 	.word	0x7fefffff
 8006674:	08008e28 	.word	0x08008e28
 8006678:	08008e2c 	.word	0x08008e2c
 800667c:	08008e30 	.word	0x08008e30
 8006680:	08008e34 	.word	0x08008e34
 8006684:	08008e38 	.word	0x08008e38
 8006688:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800668a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800668e:	4553      	cmp	r3, sl
 8006690:	bfa8      	it	ge
 8006692:	4653      	movge	r3, sl
 8006694:	2b00      	cmp	r3, #0
 8006696:	4699      	mov	r9, r3
 8006698:	dc36      	bgt.n	8006708 <_printf_float+0x360>
 800669a:	f04f 0b00 	mov.w	fp, #0
 800669e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066a2:	f104 021a 	add.w	r2, r4, #26
 80066a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80066a8:	9306      	str	r3, [sp, #24]
 80066aa:	eba3 0309 	sub.w	r3, r3, r9
 80066ae:	455b      	cmp	r3, fp
 80066b0:	dc31      	bgt.n	8006716 <_printf_float+0x36e>
 80066b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066b4:	459a      	cmp	sl, r3
 80066b6:	dc3a      	bgt.n	800672e <_printf_float+0x386>
 80066b8:	6823      	ldr	r3, [r4, #0]
 80066ba:	07da      	lsls	r2, r3, #31
 80066bc:	d437      	bmi.n	800672e <_printf_float+0x386>
 80066be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066c0:	ebaa 0903 	sub.w	r9, sl, r3
 80066c4:	9b06      	ldr	r3, [sp, #24]
 80066c6:	ebaa 0303 	sub.w	r3, sl, r3
 80066ca:	4599      	cmp	r9, r3
 80066cc:	bfa8      	it	ge
 80066ce:	4699      	movge	r9, r3
 80066d0:	f1b9 0f00 	cmp.w	r9, #0
 80066d4:	dc33      	bgt.n	800673e <_printf_float+0x396>
 80066d6:	f04f 0800 	mov.w	r8, #0
 80066da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066de:	f104 0b1a 	add.w	fp, r4, #26
 80066e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066e4:	ebaa 0303 	sub.w	r3, sl, r3
 80066e8:	eba3 0309 	sub.w	r3, r3, r9
 80066ec:	4543      	cmp	r3, r8
 80066ee:	f77f af79 	ble.w	80065e4 <_printf_float+0x23c>
 80066f2:	2301      	movs	r3, #1
 80066f4:	465a      	mov	r2, fp
 80066f6:	4631      	mov	r1, r6
 80066f8:	4628      	mov	r0, r5
 80066fa:	47b8      	blx	r7
 80066fc:	3001      	adds	r0, #1
 80066fe:	f43f aeae 	beq.w	800645e <_printf_float+0xb6>
 8006702:	f108 0801 	add.w	r8, r8, #1
 8006706:	e7ec      	b.n	80066e2 <_printf_float+0x33a>
 8006708:	4642      	mov	r2, r8
 800670a:	4631      	mov	r1, r6
 800670c:	4628      	mov	r0, r5
 800670e:	47b8      	blx	r7
 8006710:	3001      	adds	r0, #1
 8006712:	d1c2      	bne.n	800669a <_printf_float+0x2f2>
 8006714:	e6a3      	b.n	800645e <_printf_float+0xb6>
 8006716:	2301      	movs	r3, #1
 8006718:	4631      	mov	r1, r6
 800671a:	4628      	mov	r0, r5
 800671c:	9206      	str	r2, [sp, #24]
 800671e:	47b8      	blx	r7
 8006720:	3001      	adds	r0, #1
 8006722:	f43f ae9c 	beq.w	800645e <_printf_float+0xb6>
 8006726:	9a06      	ldr	r2, [sp, #24]
 8006728:	f10b 0b01 	add.w	fp, fp, #1
 800672c:	e7bb      	b.n	80066a6 <_printf_float+0x2fe>
 800672e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006732:	4631      	mov	r1, r6
 8006734:	4628      	mov	r0, r5
 8006736:	47b8      	blx	r7
 8006738:	3001      	adds	r0, #1
 800673a:	d1c0      	bne.n	80066be <_printf_float+0x316>
 800673c:	e68f      	b.n	800645e <_printf_float+0xb6>
 800673e:	9a06      	ldr	r2, [sp, #24]
 8006740:	464b      	mov	r3, r9
 8006742:	4442      	add	r2, r8
 8006744:	4631      	mov	r1, r6
 8006746:	4628      	mov	r0, r5
 8006748:	47b8      	blx	r7
 800674a:	3001      	adds	r0, #1
 800674c:	d1c3      	bne.n	80066d6 <_printf_float+0x32e>
 800674e:	e686      	b.n	800645e <_printf_float+0xb6>
 8006750:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006754:	f1ba 0f01 	cmp.w	sl, #1
 8006758:	dc01      	bgt.n	800675e <_printf_float+0x3b6>
 800675a:	07db      	lsls	r3, r3, #31
 800675c:	d536      	bpl.n	80067cc <_printf_float+0x424>
 800675e:	2301      	movs	r3, #1
 8006760:	4642      	mov	r2, r8
 8006762:	4631      	mov	r1, r6
 8006764:	4628      	mov	r0, r5
 8006766:	47b8      	blx	r7
 8006768:	3001      	adds	r0, #1
 800676a:	f43f ae78 	beq.w	800645e <_printf_float+0xb6>
 800676e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006772:	4631      	mov	r1, r6
 8006774:	4628      	mov	r0, r5
 8006776:	47b8      	blx	r7
 8006778:	3001      	adds	r0, #1
 800677a:	f43f ae70 	beq.w	800645e <_printf_float+0xb6>
 800677e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006782:	2200      	movs	r2, #0
 8006784:	2300      	movs	r3, #0
 8006786:	f10a 3aff 	add.w	sl, sl, #4294967295
 800678a:	f7fa f9a5 	bl	8000ad8 <__aeabi_dcmpeq>
 800678e:	b9c0      	cbnz	r0, 80067c2 <_printf_float+0x41a>
 8006790:	4653      	mov	r3, sl
 8006792:	f108 0201 	add.w	r2, r8, #1
 8006796:	4631      	mov	r1, r6
 8006798:	4628      	mov	r0, r5
 800679a:	47b8      	blx	r7
 800679c:	3001      	adds	r0, #1
 800679e:	d10c      	bne.n	80067ba <_printf_float+0x412>
 80067a0:	e65d      	b.n	800645e <_printf_float+0xb6>
 80067a2:	2301      	movs	r3, #1
 80067a4:	465a      	mov	r2, fp
 80067a6:	4631      	mov	r1, r6
 80067a8:	4628      	mov	r0, r5
 80067aa:	47b8      	blx	r7
 80067ac:	3001      	adds	r0, #1
 80067ae:	f43f ae56 	beq.w	800645e <_printf_float+0xb6>
 80067b2:	f108 0801 	add.w	r8, r8, #1
 80067b6:	45d0      	cmp	r8, sl
 80067b8:	dbf3      	blt.n	80067a2 <_printf_float+0x3fa>
 80067ba:	464b      	mov	r3, r9
 80067bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80067c0:	e6df      	b.n	8006582 <_printf_float+0x1da>
 80067c2:	f04f 0800 	mov.w	r8, #0
 80067c6:	f104 0b1a 	add.w	fp, r4, #26
 80067ca:	e7f4      	b.n	80067b6 <_printf_float+0x40e>
 80067cc:	2301      	movs	r3, #1
 80067ce:	4642      	mov	r2, r8
 80067d0:	e7e1      	b.n	8006796 <_printf_float+0x3ee>
 80067d2:	2301      	movs	r3, #1
 80067d4:	464a      	mov	r2, r9
 80067d6:	4631      	mov	r1, r6
 80067d8:	4628      	mov	r0, r5
 80067da:	47b8      	blx	r7
 80067dc:	3001      	adds	r0, #1
 80067de:	f43f ae3e 	beq.w	800645e <_printf_float+0xb6>
 80067e2:	f108 0801 	add.w	r8, r8, #1
 80067e6:	68e3      	ldr	r3, [r4, #12]
 80067e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80067ea:	1a5b      	subs	r3, r3, r1
 80067ec:	4543      	cmp	r3, r8
 80067ee:	dcf0      	bgt.n	80067d2 <_printf_float+0x42a>
 80067f0:	e6fc      	b.n	80065ec <_printf_float+0x244>
 80067f2:	f04f 0800 	mov.w	r8, #0
 80067f6:	f104 0919 	add.w	r9, r4, #25
 80067fa:	e7f4      	b.n	80067e6 <_printf_float+0x43e>

080067fc <_printf_common>:
 80067fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006800:	4616      	mov	r6, r2
 8006802:	4698      	mov	r8, r3
 8006804:	688a      	ldr	r2, [r1, #8]
 8006806:	690b      	ldr	r3, [r1, #16]
 8006808:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800680c:	4293      	cmp	r3, r2
 800680e:	bfb8      	it	lt
 8006810:	4613      	movlt	r3, r2
 8006812:	6033      	str	r3, [r6, #0]
 8006814:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006818:	4607      	mov	r7, r0
 800681a:	460c      	mov	r4, r1
 800681c:	b10a      	cbz	r2, 8006822 <_printf_common+0x26>
 800681e:	3301      	adds	r3, #1
 8006820:	6033      	str	r3, [r6, #0]
 8006822:	6823      	ldr	r3, [r4, #0]
 8006824:	0699      	lsls	r1, r3, #26
 8006826:	bf42      	ittt	mi
 8006828:	6833      	ldrmi	r3, [r6, #0]
 800682a:	3302      	addmi	r3, #2
 800682c:	6033      	strmi	r3, [r6, #0]
 800682e:	6825      	ldr	r5, [r4, #0]
 8006830:	f015 0506 	ands.w	r5, r5, #6
 8006834:	d106      	bne.n	8006844 <_printf_common+0x48>
 8006836:	f104 0a19 	add.w	sl, r4, #25
 800683a:	68e3      	ldr	r3, [r4, #12]
 800683c:	6832      	ldr	r2, [r6, #0]
 800683e:	1a9b      	subs	r3, r3, r2
 8006840:	42ab      	cmp	r3, r5
 8006842:	dc26      	bgt.n	8006892 <_printf_common+0x96>
 8006844:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006848:	6822      	ldr	r2, [r4, #0]
 800684a:	3b00      	subs	r3, #0
 800684c:	bf18      	it	ne
 800684e:	2301      	movne	r3, #1
 8006850:	0692      	lsls	r2, r2, #26
 8006852:	d42b      	bmi.n	80068ac <_printf_common+0xb0>
 8006854:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006858:	4641      	mov	r1, r8
 800685a:	4638      	mov	r0, r7
 800685c:	47c8      	blx	r9
 800685e:	3001      	adds	r0, #1
 8006860:	d01e      	beq.n	80068a0 <_printf_common+0xa4>
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	6922      	ldr	r2, [r4, #16]
 8006866:	f003 0306 	and.w	r3, r3, #6
 800686a:	2b04      	cmp	r3, #4
 800686c:	bf02      	ittt	eq
 800686e:	68e5      	ldreq	r5, [r4, #12]
 8006870:	6833      	ldreq	r3, [r6, #0]
 8006872:	1aed      	subeq	r5, r5, r3
 8006874:	68a3      	ldr	r3, [r4, #8]
 8006876:	bf0c      	ite	eq
 8006878:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800687c:	2500      	movne	r5, #0
 800687e:	4293      	cmp	r3, r2
 8006880:	bfc4      	itt	gt
 8006882:	1a9b      	subgt	r3, r3, r2
 8006884:	18ed      	addgt	r5, r5, r3
 8006886:	2600      	movs	r6, #0
 8006888:	341a      	adds	r4, #26
 800688a:	42b5      	cmp	r5, r6
 800688c:	d11a      	bne.n	80068c4 <_printf_common+0xc8>
 800688e:	2000      	movs	r0, #0
 8006890:	e008      	b.n	80068a4 <_printf_common+0xa8>
 8006892:	2301      	movs	r3, #1
 8006894:	4652      	mov	r2, sl
 8006896:	4641      	mov	r1, r8
 8006898:	4638      	mov	r0, r7
 800689a:	47c8      	blx	r9
 800689c:	3001      	adds	r0, #1
 800689e:	d103      	bne.n	80068a8 <_printf_common+0xac>
 80068a0:	f04f 30ff 	mov.w	r0, #4294967295
 80068a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068a8:	3501      	adds	r5, #1
 80068aa:	e7c6      	b.n	800683a <_printf_common+0x3e>
 80068ac:	18e1      	adds	r1, r4, r3
 80068ae:	1c5a      	adds	r2, r3, #1
 80068b0:	2030      	movs	r0, #48	@ 0x30
 80068b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80068b6:	4422      	add	r2, r4
 80068b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80068bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80068c0:	3302      	adds	r3, #2
 80068c2:	e7c7      	b.n	8006854 <_printf_common+0x58>
 80068c4:	2301      	movs	r3, #1
 80068c6:	4622      	mov	r2, r4
 80068c8:	4641      	mov	r1, r8
 80068ca:	4638      	mov	r0, r7
 80068cc:	47c8      	blx	r9
 80068ce:	3001      	adds	r0, #1
 80068d0:	d0e6      	beq.n	80068a0 <_printf_common+0xa4>
 80068d2:	3601      	adds	r6, #1
 80068d4:	e7d9      	b.n	800688a <_printf_common+0x8e>
	...

080068d8 <_printf_i>:
 80068d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068dc:	7e0f      	ldrb	r7, [r1, #24]
 80068de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80068e0:	2f78      	cmp	r7, #120	@ 0x78
 80068e2:	4691      	mov	r9, r2
 80068e4:	4680      	mov	r8, r0
 80068e6:	460c      	mov	r4, r1
 80068e8:	469a      	mov	sl, r3
 80068ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80068ee:	d807      	bhi.n	8006900 <_printf_i+0x28>
 80068f0:	2f62      	cmp	r7, #98	@ 0x62
 80068f2:	d80a      	bhi.n	800690a <_printf_i+0x32>
 80068f4:	2f00      	cmp	r7, #0
 80068f6:	f000 80d2 	beq.w	8006a9e <_printf_i+0x1c6>
 80068fa:	2f58      	cmp	r7, #88	@ 0x58
 80068fc:	f000 80b9 	beq.w	8006a72 <_printf_i+0x19a>
 8006900:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006904:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006908:	e03a      	b.n	8006980 <_printf_i+0xa8>
 800690a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800690e:	2b15      	cmp	r3, #21
 8006910:	d8f6      	bhi.n	8006900 <_printf_i+0x28>
 8006912:	a101      	add	r1, pc, #4	@ (adr r1, 8006918 <_printf_i+0x40>)
 8006914:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006918:	08006971 	.word	0x08006971
 800691c:	08006985 	.word	0x08006985
 8006920:	08006901 	.word	0x08006901
 8006924:	08006901 	.word	0x08006901
 8006928:	08006901 	.word	0x08006901
 800692c:	08006901 	.word	0x08006901
 8006930:	08006985 	.word	0x08006985
 8006934:	08006901 	.word	0x08006901
 8006938:	08006901 	.word	0x08006901
 800693c:	08006901 	.word	0x08006901
 8006940:	08006901 	.word	0x08006901
 8006944:	08006a85 	.word	0x08006a85
 8006948:	080069af 	.word	0x080069af
 800694c:	08006a3f 	.word	0x08006a3f
 8006950:	08006901 	.word	0x08006901
 8006954:	08006901 	.word	0x08006901
 8006958:	08006aa7 	.word	0x08006aa7
 800695c:	08006901 	.word	0x08006901
 8006960:	080069af 	.word	0x080069af
 8006964:	08006901 	.word	0x08006901
 8006968:	08006901 	.word	0x08006901
 800696c:	08006a47 	.word	0x08006a47
 8006970:	6833      	ldr	r3, [r6, #0]
 8006972:	1d1a      	adds	r2, r3, #4
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	6032      	str	r2, [r6, #0]
 8006978:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800697c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006980:	2301      	movs	r3, #1
 8006982:	e09d      	b.n	8006ac0 <_printf_i+0x1e8>
 8006984:	6833      	ldr	r3, [r6, #0]
 8006986:	6820      	ldr	r0, [r4, #0]
 8006988:	1d19      	adds	r1, r3, #4
 800698a:	6031      	str	r1, [r6, #0]
 800698c:	0606      	lsls	r6, r0, #24
 800698e:	d501      	bpl.n	8006994 <_printf_i+0xbc>
 8006990:	681d      	ldr	r5, [r3, #0]
 8006992:	e003      	b.n	800699c <_printf_i+0xc4>
 8006994:	0645      	lsls	r5, r0, #25
 8006996:	d5fb      	bpl.n	8006990 <_printf_i+0xb8>
 8006998:	f9b3 5000 	ldrsh.w	r5, [r3]
 800699c:	2d00      	cmp	r5, #0
 800699e:	da03      	bge.n	80069a8 <_printf_i+0xd0>
 80069a0:	232d      	movs	r3, #45	@ 0x2d
 80069a2:	426d      	negs	r5, r5
 80069a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069a8:	4859      	ldr	r0, [pc, #356]	@ (8006b10 <_printf_i+0x238>)
 80069aa:	230a      	movs	r3, #10
 80069ac:	e011      	b.n	80069d2 <_printf_i+0xfa>
 80069ae:	6821      	ldr	r1, [r4, #0]
 80069b0:	6833      	ldr	r3, [r6, #0]
 80069b2:	0608      	lsls	r0, r1, #24
 80069b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80069b8:	d402      	bmi.n	80069c0 <_printf_i+0xe8>
 80069ba:	0649      	lsls	r1, r1, #25
 80069bc:	bf48      	it	mi
 80069be:	b2ad      	uxthmi	r5, r5
 80069c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80069c2:	4853      	ldr	r0, [pc, #332]	@ (8006b10 <_printf_i+0x238>)
 80069c4:	6033      	str	r3, [r6, #0]
 80069c6:	bf14      	ite	ne
 80069c8:	230a      	movne	r3, #10
 80069ca:	2308      	moveq	r3, #8
 80069cc:	2100      	movs	r1, #0
 80069ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80069d2:	6866      	ldr	r6, [r4, #4]
 80069d4:	60a6      	str	r6, [r4, #8]
 80069d6:	2e00      	cmp	r6, #0
 80069d8:	bfa2      	ittt	ge
 80069da:	6821      	ldrge	r1, [r4, #0]
 80069dc:	f021 0104 	bicge.w	r1, r1, #4
 80069e0:	6021      	strge	r1, [r4, #0]
 80069e2:	b90d      	cbnz	r5, 80069e8 <_printf_i+0x110>
 80069e4:	2e00      	cmp	r6, #0
 80069e6:	d04b      	beq.n	8006a80 <_printf_i+0x1a8>
 80069e8:	4616      	mov	r6, r2
 80069ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80069ee:	fb03 5711 	mls	r7, r3, r1, r5
 80069f2:	5dc7      	ldrb	r7, [r0, r7]
 80069f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069f8:	462f      	mov	r7, r5
 80069fa:	42bb      	cmp	r3, r7
 80069fc:	460d      	mov	r5, r1
 80069fe:	d9f4      	bls.n	80069ea <_printf_i+0x112>
 8006a00:	2b08      	cmp	r3, #8
 8006a02:	d10b      	bne.n	8006a1c <_printf_i+0x144>
 8006a04:	6823      	ldr	r3, [r4, #0]
 8006a06:	07df      	lsls	r7, r3, #31
 8006a08:	d508      	bpl.n	8006a1c <_printf_i+0x144>
 8006a0a:	6923      	ldr	r3, [r4, #16]
 8006a0c:	6861      	ldr	r1, [r4, #4]
 8006a0e:	4299      	cmp	r1, r3
 8006a10:	bfde      	ittt	le
 8006a12:	2330      	movle	r3, #48	@ 0x30
 8006a14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a1c:	1b92      	subs	r2, r2, r6
 8006a1e:	6122      	str	r2, [r4, #16]
 8006a20:	f8cd a000 	str.w	sl, [sp]
 8006a24:	464b      	mov	r3, r9
 8006a26:	aa03      	add	r2, sp, #12
 8006a28:	4621      	mov	r1, r4
 8006a2a:	4640      	mov	r0, r8
 8006a2c:	f7ff fee6 	bl	80067fc <_printf_common>
 8006a30:	3001      	adds	r0, #1
 8006a32:	d14a      	bne.n	8006aca <_printf_i+0x1f2>
 8006a34:	f04f 30ff 	mov.w	r0, #4294967295
 8006a38:	b004      	add	sp, #16
 8006a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a3e:	6823      	ldr	r3, [r4, #0]
 8006a40:	f043 0320 	orr.w	r3, r3, #32
 8006a44:	6023      	str	r3, [r4, #0]
 8006a46:	4833      	ldr	r0, [pc, #204]	@ (8006b14 <_printf_i+0x23c>)
 8006a48:	2778      	movs	r7, #120	@ 0x78
 8006a4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a4e:	6823      	ldr	r3, [r4, #0]
 8006a50:	6831      	ldr	r1, [r6, #0]
 8006a52:	061f      	lsls	r7, r3, #24
 8006a54:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a58:	d402      	bmi.n	8006a60 <_printf_i+0x188>
 8006a5a:	065f      	lsls	r7, r3, #25
 8006a5c:	bf48      	it	mi
 8006a5e:	b2ad      	uxthmi	r5, r5
 8006a60:	6031      	str	r1, [r6, #0]
 8006a62:	07d9      	lsls	r1, r3, #31
 8006a64:	bf44      	itt	mi
 8006a66:	f043 0320 	orrmi.w	r3, r3, #32
 8006a6a:	6023      	strmi	r3, [r4, #0]
 8006a6c:	b11d      	cbz	r5, 8006a76 <_printf_i+0x19e>
 8006a6e:	2310      	movs	r3, #16
 8006a70:	e7ac      	b.n	80069cc <_printf_i+0xf4>
 8006a72:	4827      	ldr	r0, [pc, #156]	@ (8006b10 <_printf_i+0x238>)
 8006a74:	e7e9      	b.n	8006a4a <_printf_i+0x172>
 8006a76:	6823      	ldr	r3, [r4, #0]
 8006a78:	f023 0320 	bic.w	r3, r3, #32
 8006a7c:	6023      	str	r3, [r4, #0]
 8006a7e:	e7f6      	b.n	8006a6e <_printf_i+0x196>
 8006a80:	4616      	mov	r6, r2
 8006a82:	e7bd      	b.n	8006a00 <_printf_i+0x128>
 8006a84:	6833      	ldr	r3, [r6, #0]
 8006a86:	6825      	ldr	r5, [r4, #0]
 8006a88:	6961      	ldr	r1, [r4, #20]
 8006a8a:	1d18      	adds	r0, r3, #4
 8006a8c:	6030      	str	r0, [r6, #0]
 8006a8e:	062e      	lsls	r6, r5, #24
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	d501      	bpl.n	8006a98 <_printf_i+0x1c0>
 8006a94:	6019      	str	r1, [r3, #0]
 8006a96:	e002      	b.n	8006a9e <_printf_i+0x1c6>
 8006a98:	0668      	lsls	r0, r5, #25
 8006a9a:	d5fb      	bpl.n	8006a94 <_printf_i+0x1bc>
 8006a9c:	8019      	strh	r1, [r3, #0]
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	6123      	str	r3, [r4, #16]
 8006aa2:	4616      	mov	r6, r2
 8006aa4:	e7bc      	b.n	8006a20 <_printf_i+0x148>
 8006aa6:	6833      	ldr	r3, [r6, #0]
 8006aa8:	1d1a      	adds	r2, r3, #4
 8006aaa:	6032      	str	r2, [r6, #0]
 8006aac:	681e      	ldr	r6, [r3, #0]
 8006aae:	6862      	ldr	r2, [r4, #4]
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	4630      	mov	r0, r6
 8006ab4:	f7f9 fb94 	bl	80001e0 <memchr>
 8006ab8:	b108      	cbz	r0, 8006abe <_printf_i+0x1e6>
 8006aba:	1b80      	subs	r0, r0, r6
 8006abc:	6060      	str	r0, [r4, #4]
 8006abe:	6863      	ldr	r3, [r4, #4]
 8006ac0:	6123      	str	r3, [r4, #16]
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ac8:	e7aa      	b.n	8006a20 <_printf_i+0x148>
 8006aca:	6923      	ldr	r3, [r4, #16]
 8006acc:	4632      	mov	r2, r6
 8006ace:	4649      	mov	r1, r9
 8006ad0:	4640      	mov	r0, r8
 8006ad2:	47d0      	blx	sl
 8006ad4:	3001      	adds	r0, #1
 8006ad6:	d0ad      	beq.n	8006a34 <_printf_i+0x15c>
 8006ad8:	6823      	ldr	r3, [r4, #0]
 8006ada:	079b      	lsls	r3, r3, #30
 8006adc:	d413      	bmi.n	8006b06 <_printf_i+0x22e>
 8006ade:	68e0      	ldr	r0, [r4, #12]
 8006ae0:	9b03      	ldr	r3, [sp, #12]
 8006ae2:	4298      	cmp	r0, r3
 8006ae4:	bfb8      	it	lt
 8006ae6:	4618      	movlt	r0, r3
 8006ae8:	e7a6      	b.n	8006a38 <_printf_i+0x160>
 8006aea:	2301      	movs	r3, #1
 8006aec:	4632      	mov	r2, r6
 8006aee:	4649      	mov	r1, r9
 8006af0:	4640      	mov	r0, r8
 8006af2:	47d0      	blx	sl
 8006af4:	3001      	adds	r0, #1
 8006af6:	d09d      	beq.n	8006a34 <_printf_i+0x15c>
 8006af8:	3501      	adds	r5, #1
 8006afa:	68e3      	ldr	r3, [r4, #12]
 8006afc:	9903      	ldr	r1, [sp, #12]
 8006afe:	1a5b      	subs	r3, r3, r1
 8006b00:	42ab      	cmp	r3, r5
 8006b02:	dcf2      	bgt.n	8006aea <_printf_i+0x212>
 8006b04:	e7eb      	b.n	8006ade <_printf_i+0x206>
 8006b06:	2500      	movs	r5, #0
 8006b08:	f104 0619 	add.w	r6, r4, #25
 8006b0c:	e7f5      	b.n	8006afa <_printf_i+0x222>
 8006b0e:	bf00      	nop
 8006b10:	08008e3a 	.word	0x08008e3a
 8006b14:	08008e4b 	.word	0x08008e4b

08006b18 <std>:
 8006b18:	2300      	movs	r3, #0
 8006b1a:	b510      	push	{r4, lr}
 8006b1c:	4604      	mov	r4, r0
 8006b1e:	e9c0 3300 	strd	r3, r3, [r0]
 8006b22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b26:	6083      	str	r3, [r0, #8]
 8006b28:	8181      	strh	r1, [r0, #12]
 8006b2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8006b2c:	81c2      	strh	r2, [r0, #14]
 8006b2e:	6183      	str	r3, [r0, #24]
 8006b30:	4619      	mov	r1, r3
 8006b32:	2208      	movs	r2, #8
 8006b34:	305c      	adds	r0, #92	@ 0x5c
 8006b36:	f000 f914 	bl	8006d62 <memset>
 8006b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b70 <std+0x58>)
 8006b3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8006b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b74 <std+0x5c>)
 8006b40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006b42:	4b0d      	ldr	r3, [pc, #52]	@ (8006b78 <std+0x60>)
 8006b44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006b46:	4b0d      	ldr	r3, [pc, #52]	@ (8006b7c <std+0x64>)
 8006b48:	6323      	str	r3, [r4, #48]	@ 0x30
 8006b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b80 <std+0x68>)
 8006b4c:	6224      	str	r4, [r4, #32]
 8006b4e:	429c      	cmp	r4, r3
 8006b50:	d006      	beq.n	8006b60 <std+0x48>
 8006b52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006b56:	4294      	cmp	r4, r2
 8006b58:	d002      	beq.n	8006b60 <std+0x48>
 8006b5a:	33d0      	adds	r3, #208	@ 0xd0
 8006b5c:	429c      	cmp	r4, r3
 8006b5e:	d105      	bne.n	8006b6c <std+0x54>
 8006b60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b68:	f000 b9cc 	b.w	8006f04 <__retarget_lock_init_recursive>
 8006b6c:	bd10      	pop	{r4, pc}
 8006b6e:	bf00      	nop
 8006b70:	08006cdd 	.word	0x08006cdd
 8006b74:	08006cff 	.word	0x08006cff
 8006b78:	08006d37 	.word	0x08006d37
 8006b7c:	08006d5b 	.word	0x08006d5b
 8006b80:	200003f0 	.word	0x200003f0

08006b84 <stdio_exit_handler>:
 8006b84:	4a02      	ldr	r2, [pc, #8]	@ (8006b90 <stdio_exit_handler+0xc>)
 8006b86:	4903      	ldr	r1, [pc, #12]	@ (8006b94 <stdio_exit_handler+0x10>)
 8006b88:	4803      	ldr	r0, [pc, #12]	@ (8006b98 <stdio_exit_handler+0x14>)
 8006b8a:	f000 b869 	b.w	8006c60 <_fwalk_sglue>
 8006b8e:	bf00      	nop
 8006b90:	2000000c 	.word	0x2000000c
 8006b94:	080086f9 	.word	0x080086f9
 8006b98:	2000001c 	.word	0x2000001c

08006b9c <cleanup_stdio>:
 8006b9c:	6841      	ldr	r1, [r0, #4]
 8006b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8006bd0 <cleanup_stdio+0x34>)
 8006ba0:	4299      	cmp	r1, r3
 8006ba2:	b510      	push	{r4, lr}
 8006ba4:	4604      	mov	r4, r0
 8006ba6:	d001      	beq.n	8006bac <cleanup_stdio+0x10>
 8006ba8:	f001 fda6 	bl	80086f8 <_fflush_r>
 8006bac:	68a1      	ldr	r1, [r4, #8]
 8006bae:	4b09      	ldr	r3, [pc, #36]	@ (8006bd4 <cleanup_stdio+0x38>)
 8006bb0:	4299      	cmp	r1, r3
 8006bb2:	d002      	beq.n	8006bba <cleanup_stdio+0x1e>
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	f001 fd9f 	bl	80086f8 <_fflush_r>
 8006bba:	68e1      	ldr	r1, [r4, #12]
 8006bbc:	4b06      	ldr	r3, [pc, #24]	@ (8006bd8 <cleanup_stdio+0x3c>)
 8006bbe:	4299      	cmp	r1, r3
 8006bc0:	d004      	beq.n	8006bcc <cleanup_stdio+0x30>
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bc8:	f001 bd96 	b.w	80086f8 <_fflush_r>
 8006bcc:	bd10      	pop	{r4, pc}
 8006bce:	bf00      	nop
 8006bd0:	200003f0 	.word	0x200003f0
 8006bd4:	20000458 	.word	0x20000458
 8006bd8:	200004c0 	.word	0x200004c0

08006bdc <global_stdio_init.part.0>:
 8006bdc:	b510      	push	{r4, lr}
 8006bde:	4b0b      	ldr	r3, [pc, #44]	@ (8006c0c <global_stdio_init.part.0+0x30>)
 8006be0:	4c0b      	ldr	r4, [pc, #44]	@ (8006c10 <global_stdio_init.part.0+0x34>)
 8006be2:	4a0c      	ldr	r2, [pc, #48]	@ (8006c14 <global_stdio_init.part.0+0x38>)
 8006be4:	601a      	str	r2, [r3, #0]
 8006be6:	4620      	mov	r0, r4
 8006be8:	2200      	movs	r2, #0
 8006bea:	2104      	movs	r1, #4
 8006bec:	f7ff ff94 	bl	8006b18 <std>
 8006bf0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	2109      	movs	r1, #9
 8006bf8:	f7ff ff8e 	bl	8006b18 <std>
 8006bfc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006c00:	2202      	movs	r2, #2
 8006c02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c06:	2112      	movs	r1, #18
 8006c08:	f7ff bf86 	b.w	8006b18 <std>
 8006c0c:	20000528 	.word	0x20000528
 8006c10:	200003f0 	.word	0x200003f0
 8006c14:	08006b85 	.word	0x08006b85

08006c18 <__sfp_lock_acquire>:
 8006c18:	4801      	ldr	r0, [pc, #4]	@ (8006c20 <__sfp_lock_acquire+0x8>)
 8006c1a:	f000 b974 	b.w	8006f06 <__retarget_lock_acquire_recursive>
 8006c1e:	bf00      	nop
 8006c20:	20000531 	.word	0x20000531

08006c24 <__sfp_lock_release>:
 8006c24:	4801      	ldr	r0, [pc, #4]	@ (8006c2c <__sfp_lock_release+0x8>)
 8006c26:	f000 b96f 	b.w	8006f08 <__retarget_lock_release_recursive>
 8006c2a:	bf00      	nop
 8006c2c:	20000531 	.word	0x20000531

08006c30 <__sinit>:
 8006c30:	b510      	push	{r4, lr}
 8006c32:	4604      	mov	r4, r0
 8006c34:	f7ff fff0 	bl	8006c18 <__sfp_lock_acquire>
 8006c38:	6a23      	ldr	r3, [r4, #32]
 8006c3a:	b11b      	cbz	r3, 8006c44 <__sinit+0x14>
 8006c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c40:	f7ff bff0 	b.w	8006c24 <__sfp_lock_release>
 8006c44:	4b04      	ldr	r3, [pc, #16]	@ (8006c58 <__sinit+0x28>)
 8006c46:	6223      	str	r3, [r4, #32]
 8006c48:	4b04      	ldr	r3, [pc, #16]	@ (8006c5c <__sinit+0x2c>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d1f5      	bne.n	8006c3c <__sinit+0xc>
 8006c50:	f7ff ffc4 	bl	8006bdc <global_stdio_init.part.0>
 8006c54:	e7f2      	b.n	8006c3c <__sinit+0xc>
 8006c56:	bf00      	nop
 8006c58:	08006b9d 	.word	0x08006b9d
 8006c5c:	20000528 	.word	0x20000528

08006c60 <_fwalk_sglue>:
 8006c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c64:	4607      	mov	r7, r0
 8006c66:	4688      	mov	r8, r1
 8006c68:	4614      	mov	r4, r2
 8006c6a:	2600      	movs	r6, #0
 8006c6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c70:	f1b9 0901 	subs.w	r9, r9, #1
 8006c74:	d505      	bpl.n	8006c82 <_fwalk_sglue+0x22>
 8006c76:	6824      	ldr	r4, [r4, #0]
 8006c78:	2c00      	cmp	r4, #0
 8006c7a:	d1f7      	bne.n	8006c6c <_fwalk_sglue+0xc>
 8006c7c:	4630      	mov	r0, r6
 8006c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c82:	89ab      	ldrh	r3, [r5, #12]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d907      	bls.n	8006c98 <_fwalk_sglue+0x38>
 8006c88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	d003      	beq.n	8006c98 <_fwalk_sglue+0x38>
 8006c90:	4629      	mov	r1, r5
 8006c92:	4638      	mov	r0, r7
 8006c94:	47c0      	blx	r8
 8006c96:	4306      	orrs	r6, r0
 8006c98:	3568      	adds	r5, #104	@ 0x68
 8006c9a:	e7e9      	b.n	8006c70 <_fwalk_sglue+0x10>

08006c9c <siprintf>:
 8006c9c:	b40e      	push	{r1, r2, r3}
 8006c9e:	b500      	push	{lr}
 8006ca0:	b09c      	sub	sp, #112	@ 0x70
 8006ca2:	ab1d      	add	r3, sp, #116	@ 0x74
 8006ca4:	9002      	str	r0, [sp, #8]
 8006ca6:	9006      	str	r0, [sp, #24]
 8006ca8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006cac:	4809      	ldr	r0, [pc, #36]	@ (8006cd4 <siprintf+0x38>)
 8006cae:	9107      	str	r1, [sp, #28]
 8006cb0:	9104      	str	r1, [sp, #16]
 8006cb2:	4909      	ldr	r1, [pc, #36]	@ (8006cd8 <siprintf+0x3c>)
 8006cb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cb8:	9105      	str	r1, [sp, #20]
 8006cba:	6800      	ldr	r0, [r0, #0]
 8006cbc:	9301      	str	r3, [sp, #4]
 8006cbe:	a902      	add	r1, sp, #8
 8006cc0:	f001 fb9a 	bl	80083f8 <_svfiprintf_r>
 8006cc4:	9b02      	ldr	r3, [sp, #8]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	701a      	strb	r2, [r3, #0]
 8006cca:	b01c      	add	sp, #112	@ 0x70
 8006ccc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cd0:	b003      	add	sp, #12
 8006cd2:	4770      	bx	lr
 8006cd4:	20000018 	.word	0x20000018
 8006cd8:	ffff0208 	.word	0xffff0208

08006cdc <__sread>:
 8006cdc:	b510      	push	{r4, lr}
 8006cde:	460c      	mov	r4, r1
 8006ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ce4:	f000 f89c 	bl	8006e20 <_read_r>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	bfab      	itete	ge
 8006cec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006cee:	89a3      	ldrhlt	r3, [r4, #12]
 8006cf0:	181b      	addge	r3, r3, r0
 8006cf2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006cf6:	bfac      	ite	ge
 8006cf8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006cfa:	81a3      	strhlt	r3, [r4, #12]
 8006cfc:	bd10      	pop	{r4, pc}

08006cfe <__swrite>:
 8006cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d02:	461f      	mov	r7, r3
 8006d04:	898b      	ldrh	r3, [r1, #12]
 8006d06:	05db      	lsls	r3, r3, #23
 8006d08:	4605      	mov	r5, r0
 8006d0a:	460c      	mov	r4, r1
 8006d0c:	4616      	mov	r6, r2
 8006d0e:	d505      	bpl.n	8006d1c <__swrite+0x1e>
 8006d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d14:	2302      	movs	r3, #2
 8006d16:	2200      	movs	r2, #0
 8006d18:	f000 f870 	bl	8006dfc <_lseek_r>
 8006d1c:	89a3      	ldrh	r3, [r4, #12]
 8006d1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d26:	81a3      	strh	r3, [r4, #12]
 8006d28:	4632      	mov	r2, r6
 8006d2a:	463b      	mov	r3, r7
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d32:	f000 b8ab 	b.w	8006e8c <_write_r>

08006d36 <__sseek>:
 8006d36:	b510      	push	{r4, lr}
 8006d38:	460c      	mov	r4, r1
 8006d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d3e:	f000 f85d 	bl	8006dfc <_lseek_r>
 8006d42:	1c43      	adds	r3, r0, #1
 8006d44:	89a3      	ldrh	r3, [r4, #12]
 8006d46:	bf15      	itete	ne
 8006d48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006d4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006d4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006d52:	81a3      	strheq	r3, [r4, #12]
 8006d54:	bf18      	it	ne
 8006d56:	81a3      	strhne	r3, [r4, #12]
 8006d58:	bd10      	pop	{r4, pc}

08006d5a <__sclose>:
 8006d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d5e:	f000 b83d 	b.w	8006ddc <_close_r>

08006d62 <memset>:
 8006d62:	4402      	add	r2, r0
 8006d64:	4603      	mov	r3, r0
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d100      	bne.n	8006d6c <memset+0xa>
 8006d6a:	4770      	bx	lr
 8006d6c:	f803 1b01 	strb.w	r1, [r3], #1
 8006d70:	e7f9      	b.n	8006d66 <memset+0x4>

08006d72 <_raise_r>:
 8006d72:	291f      	cmp	r1, #31
 8006d74:	b538      	push	{r3, r4, r5, lr}
 8006d76:	4605      	mov	r5, r0
 8006d78:	460c      	mov	r4, r1
 8006d7a:	d904      	bls.n	8006d86 <_raise_r+0x14>
 8006d7c:	2316      	movs	r3, #22
 8006d7e:	6003      	str	r3, [r0, #0]
 8006d80:	f04f 30ff 	mov.w	r0, #4294967295
 8006d84:	bd38      	pop	{r3, r4, r5, pc}
 8006d86:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006d88:	b112      	cbz	r2, 8006d90 <_raise_r+0x1e>
 8006d8a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006d8e:	b94b      	cbnz	r3, 8006da4 <_raise_r+0x32>
 8006d90:	4628      	mov	r0, r5
 8006d92:	f000 f869 	bl	8006e68 <_getpid_r>
 8006d96:	4622      	mov	r2, r4
 8006d98:	4601      	mov	r1, r0
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006da0:	f000 b850 	b.w	8006e44 <_kill_r>
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d00a      	beq.n	8006dbe <_raise_r+0x4c>
 8006da8:	1c59      	adds	r1, r3, #1
 8006daa:	d103      	bne.n	8006db4 <_raise_r+0x42>
 8006dac:	2316      	movs	r3, #22
 8006dae:	6003      	str	r3, [r0, #0]
 8006db0:	2001      	movs	r0, #1
 8006db2:	e7e7      	b.n	8006d84 <_raise_r+0x12>
 8006db4:	2100      	movs	r1, #0
 8006db6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006dba:	4620      	mov	r0, r4
 8006dbc:	4798      	blx	r3
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	e7e0      	b.n	8006d84 <_raise_r+0x12>
	...

08006dc4 <raise>:
 8006dc4:	4b02      	ldr	r3, [pc, #8]	@ (8006dd0 <raise+0xc>)
 8006dc6:	4601      	mov	r1, r0
 8006dc8:	6818      	ldr	r0, [r3, #0]
 8006dca:	f7ff bfd2 	b.w	8006d72 <_raise_r>
 8006dce:	bf00      	nop
 8006dd0:	20000018 	.word	0x20000018

08006dd4 <_localeconv_r>:
 8006dd4:	4800      	ldr	r0, [pc, #0]	@ (8006dd8 <_localeconv_r+0x4>)
 8006dd6:	4770      	bx	lr
 8006dd8:	20000158 	.word	0x20000158

08006ddc <_close_r>:
 8006ddc:	b538      	push	{r3, r4, r5, lr}
 8006dde:	4d06      	ldr	r5, [pc, #24]	@ (8006df8 <_close_r+0x1c>)
 8006de0:	2300      	movs	r3, #0
 8006de2:	4604      	mov	r4, r0
 8006de4:	4608      	mov	r0, r1
 8006de6:	602b      	str	r3, [r5, #0]
 8006de8:	f7fb fdc4 	bl	8002974 <_close>
 8006dec:	1c43      	adds	r3, r0, #1
 8006dee:	d102      	bne.n	8006df6 <_close_r+0x1a>
 8006df0:	682b      	ldr	r3, [r5, #0]
 8006df2:	b103      	cbz	r3, 8006df6 <_close_r+0x1a>
 8006df4:	6023      	str	r3, [r4, #0]
 8006df6:	bd38      	pop	{r3, r4, r5, pc}
 8006df8:	2000052c 	.word	0x2000052c

08006dfc <_lseek_r>:
 8006dfc:	b538      	push	{r3, r4, r5, lr}
 8006dfe:	4d07      	ldr	r5, [pc, #28]	@ (8006e1c <_lseek_r+0x20>)
 8006e00:	4604      	mov	r4, r0
 8006e02:	4608      	mov	r0, r1
 8006e04:	4611      	mov	r1, r2
 8006e06:	2200      	movs	r2, #0
 8006e08:	602a      	str	r2, [r5, #0]
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	f7fb fdd9 	bl	80029c2 <_lseek>
 8006e10:	1c43      	adds	r3, r0, #1
 8006e12:	d102      	bne.n	8006e1a <_lseek_r+0x1e>
 8006e14:	682b      	ldr	r3, [r5, #0]
 8006e16:	b103      	cbz	r3, 8006e1a <_lseek_r+0x1e>
 8006e18:	6023      	str	r3, [r4, #0]
 8006e1a:	bd38      	pop	{r3, r4, r5, pc}
 8006e1c:	2000052c 	.word	0x2000052c

08006e20 <_read_r>:
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	4d07      	ldr	r5, [pc, #28]	@ (8006e40 <_read_r+0x20>)
 8006e24:	4604      	mov	r4, r0
 8006e26:	4608      	mov	r0, r1
 8006e28:	4611      	mov	r1, r2
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	602a      	str	r2, [r5, #0]
 8006e2e:	461a      	mov	r2, r3
 8006e30:	f7fb fd67 	bl	8002902 <_read>
 8006e34:	1c43      	adds	r3, r0, #1
 8006e36:	d102      	bne.n	8006e3e <_read_r+0x1e>
 8006e38:	682b      	ldr	r3, [r5, #0]
 8006e3a:	b103      	cbz	r3, 8006e3e <_read_r+0x1e>
 8006e3c:	6023      	str	r3, [r4, #0]
 8006e3e:	bd38      	pop	{r3, r4, r5, pc}
 8006e40:	2000052c 	.word	0x2000052c

08006e44 <_kill_r>:
 8006e44:	b538      	push	{r3, r4, r5, lr}
 8006e46:	4d07      	ldr	r5, [pc, #28]	@ (8006e64 <_kill_r+0x20>)
 8006e48:	2300      	movs	r3, #0
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	4608      	mov	r0, r1
 8006e4e:	4611      	mov	r1, r2
 8006e50:	602b      	str	r3, [r5, #0]
 8006e52:	f7fb fd3b 	bl	80028cc <_kill>
 8006e56:	1c43      	adds	r3, r0, #1
 8006e58:	d102      	bne.n	8006e60 <_kill_r+0x1c>
 8006e5a:	682b      	ldr	r3, [r5, #0]
 8006e5c:	b103      	cbz	r3, 8006e60 <_kill_r+0x1c>
 8006e5e:	6023      	str	r3, [r4, #0]
 8006e60:	bd38      	pop	{r3, r4, r5, pc}
 8006e62:	bf00      	nop
 8006e64:	2000052c 	.word	0x2000052c

08006e68 <_getpid_r>:
 8006e68:	f7fb bd28 	b.w	80028bc <_getpid>

08006e6c <_sbrk_r>:
 8006e6c:	b538      	push	{r3, r4, r5, lr}
 8006e6e:	4d06      	ldr	r5, [pc, #24]	@ (8006e88 <_sbrk_r+0x1c>)
 8006e70:	2300      	movs	r3, #0
 8006e72:	4604      	mov	r4, r0
 8006e74:	4608      	mov	r0, r1
 8006e76:	602b      	str	r3, [r5, #0]
 8006e78:	f7fb fdb0 	bl	80029dc <_sbrk>
 8006e7c:	1c43      	adds	r3, r0, #1
 8006e7e:	d102      	bne.n	8006e86 <_sbrk_r+0x1a>
 8006e80:	682b      	ldr	r3, [r5, #0]
 8006e82:	b103      	cbz	r3, 8006e86 <_sbrk_r+0x1a>
 8006e84:	6023      	str	r3, [r4, #0]
 8006e86:	bd38      	pop	{r3, r4, r5, pc}
 8006e88:	2000052c 	.word	0x2000052c

08006e8c <_write_r>:
 8006e8c:	b538      	push	{r3, r4, r5, lr}
 8006e8e:	4d07      	ldr	r5, [pc, #28]	@ (8006eac <_write_r+0x20>)
 8006e90:	4604      	mov	r4, r0
 8006e92:	4608      	mov	r0, r1
 8006e94:	4611      	mov	r1, r2
 8006e96:	2200      	movs	r2, #0
 8006e98:	602a      	str	r2, [r5, #0]
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	f7fb fd4e 	bl	800293c <_write>
 8006ea0:	1c43      	adds	r3, r0, #1
 8006ea2:	d102      	bne.n	8006eaa <_write_r+0x1e>
 8006ea4:	682b      	ldr	r3, [r5, #0]
 8006ea6:	b103      	cbz	r3, 8006eaa <_write_r+0x1e>
 8006ea8:	6023      	str	r3, [r4, #0]
 8006eaa:	bd38      	pop	{r3, r4, r5, pc}
 8006eac:	2000052c 	.word	0x2000052c

08006eb0 <__errno>:
 8006eb0:	4b01      	ldr	r3, [pc, #4]	@ (8006eb8 <__errno+0x8>)
 8006eb2:	6818      	ldr	r0, [r3, #0]
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	20000018 	.word	0x20000018

08006ebc <__libc_init_array>:
 8006ebc:	b570      	push	{r4, r5, r6, lr}
 8006ebe:	4d0d      	ldr	r5, [pc, #52]	@ (8006ef4 <__libc_init_array+0x38>)
 8006ec0:	4c0d      	ldr	r4, [pc, #52]	@ (8006ef8 <__libc_init_array+0x3c>)
 8006ec2:	1b64      	subs	r4, r4, r5
 8006ec4:	10a4      	asrs	r4, r4, #2
 8006ec6:	2600      	movs	r6, #0
 8006ec8:	42a6      	cmp	r6, r4
 8006eca:	d109      	bne.n	8006ee0 <__libc_init_array+0x24>
 8006ecc:	4d0b      	ldr	r5, [pc, #44]	@ (8006efc <__libc_init_array+0x40>)
 8006ece:	4c0c      	ldr	r4, [pc, #48]	@ (8006f00 <__libc_init_array+0x44>)
 8006ed0:	f001 ff56 	bl	8008d80 <_init>
 8006ed4:	1b64      	subs	r4, r4, r5
 8006ed6:	10a4      	asrs	r4, r4, #2
 8006ed8:	2600      	movs	r6, #0
 8006eda:	42a6      	cmp	r6, r4
 8006edc:	d105      	bne.n	8006eea <__libc_init_array+0x2e>
 8006ede:	bd70      	pop	{r4, r5, r6, pc}
 8006ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ee4:	4798      	blx	r3
 8006ee6:	3601      	adds	r6, #1
 8006ee8:	e7ee      	b.n	8006ec8 <__libc_init_array+0xc>
 8006eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8006eee:	4798      	blx	r3
 8006ef0:	3601      	adds	r6, #1
 8006ef2:	e7f2      	b.n	8006eda <__libc_init_array+0x1e>
 8006ef4:	080091a0 	.word	0x080091a0
 8006ef8:	080091a0 	.word	0x080091a0
 8006efc:	080091a0 	.word	0x080091a0
 8006f00:	080091a4 	.word	0x080091a4

08006f04 <__retarget_lock_init_recursive>:
 8006f04:	4770      	bx	lr

08006f06 <__retarget_lock_acquire_recursive>:
 8006f06:	4770      	bx	lr

08006f08 <__retarget_lock_release_recursive>:
 8006f08:	4770      	bx	lr

08006f0a <quorem>:
 8006f0a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f0e:	6903      	ldr	r3, [r0, #16]
 8006f10:	690c      	ldr	r4, [r1, #16]
 8006f12:	42a3      	cmp	r3, r4
 8006f14:	4607      	mov	r7, r0
 8006f16:	db7e      	blt.n	8007016 <quorem+0x10c>
 8006f18:	3c01      	subs	r4, #1
 8006f1a:	f101 0814 	add.w	r8, r1, #20
 8006f1e:	00a3      	lsls	r3, r4, #2
 8006f20:	f100 0514 	add.w	r5, r0, #20
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f2a:	9301      	str	r3, [sp, #4]
 8006f2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f34:	3301      	adds	r3, #1
 8006f36:	429a      	cmp	r2, r3
 8006f38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f3c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f40:	d32e      	bcc.n	8006fa0 <quorem+0x96>
 8006f42:	f04f 0a00 	mov.w	sl, #0
 8006f46:	46c4      	mov	ip, r8
 8006f48:	46ae      	mov	lr, r5
 8006f4a:	46d3      	mov	fp, sl
 8006f4c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006f50:	b298      	uxth	r0, r3
 8006f52:	fb06 a000 	mla	r0, r6, r0, sl
 8006f56:	0c02      	lsrs	r2, r0, #16
 8006f58:	0c1b      	lsrs	r3, r3, #16
 8006f5a:	fb06 2303 	mla	r3, r6, r3, r2
 8006f5e:	f8de 2000 	ldr.w	r2, [lr]
 8006f62:	b280      	uxth	r0, r0
 8006f64:	b292      	uxth	r2, r2
 8006f66:	1a12      	subs	r2, r2, r0
 8006f68:	445a      	add	r2, fp
 8006f6a:	f8de 0000 	ldr.w	r0, [lr]
 8006f6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006f78:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006f7c:	b292      	uxth	r2, r2
 8006f7e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006f82:	45e1      	cmp	r9, ip
 8006f84:	f84e 2b04 	str.w	r2, [lr], #4
 8006f88:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006f8c:	d2de      	bcs.n	8006f4c <quorem+0x42>
 8006f8e:	9b00      	ldr	r3, [sp, #0]
 8006f90:	58eb      	ldr	r3, [r5, r3]
 8006f92:	b92b      	cbnz	r3, 8006fa0 <quorem+0x96>
 8006f94:	9b01      	ldr	r3, [sp, #4]
 8006f96:	3b04      	subs	r3, #4
 8006f98:	429d      	cmp	r5, r3
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	d32f      	bcc.n	8006ffe <quorem+0xf4>
 8006f9e:	613c      	str	r4, [r7, #16]
 8006fa0:	4638      	mov	r0, r7
 8006fa2:	f001 f8c5 	bl	8008130 <__mcmp>
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	db25      	blt.n	8006ff6 <quorem+0xec>
 8006faa:	4629      	mov	r1, r5
 8006fac:	2000      	movs	r0, #0
 8006fae:	f858 2b04 	ldr.w	r2, [r8], #4
 8006fb2:	f8d1 c000 	ldr.w	ip, [r1]
 8006fb6:	fa1f fe82 	uxth.w	lr, r2
 8006fba:	fa1f f38c 	uxth.w	r3, ip
 8006fbe:	eba3 030e 	sub.w	r3, r3, lr
 8006fc2:	4403      	add	r3, r0
 8006fc4:	0c12      	lsrs	r2, r2, #16
 8006fc6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006fca:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fd4:	45c1      	cmp	r9, r8
 8006fd6:	f841 3b04 	str.w	r3, [r1], #4
 8006fda:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006fde:	d2e6      	bcs.n	8006fae <quorem+0xa4>
 8006fe0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fe4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006fe8:	b922      	cbnz	r2, 8006ff4 <quorem+0xea>
 8006fea:	3b04      	subs	r3, #4
 8006fec:	429d      	cmp	r5, r3
 8006fee:	461a      	mov	r2, r3
 8006ff0:	d30b      	bcc.n	800700a <quorem+0x100>
 8006ff2:	613c      	str	r4, [r7, #16]
 8006ff4:	3601      	adds	r6, #1
 8006ff6:	4630      	mov	r0, r6
 8006ff8:	b003      	add	sp, #12
 8006ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ffe:	6812      	ldr	r2, [r2, #0]
 8007000:	3b04      	subs	r3, #4
 8007002:	2a00      	cmp	r2, #0
 8007004:	d1cb      	bne.n	8006f9e <quorem+0x94>
 8007006:	3c01      	subs	r4, #1
 8007008:	e7c6      	b.n	8006f98 <quorem+0x8e>
 800700a:	6812      	ldr	r2, [r2, #0]
 800700c:	3b04      	subs	r3, #4
 800700e:	2a00      	cmp	r2, #0
 8007010:	d1ef      	bne.n	8006ff2 <quorem+0xe8>
 8007012:	3c01      	subs	r4, #1
 8007014:	e7ea      	b.n	8006fec <quorem+0xe2>
 8007016:	2000      	movs	r0, #0
 8007018:	e7ee      	b.n	8006ff8 <quorem+0xee>
 800701a:	0000      	movs	r0, r0
 800701c:	0000      	movs	r0, r0
	...

08007020 <_dtoa_r>:
 8007020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007024:	69c7      	ldr	r7, [r0, #28]
 8007026:	b099      	sub	sp, #100	@ 0x64
 8007028:	ed8d 0b02 	vstr	d0, [sp, #8]
 800702c:	ec55 4b10 	vmov	r4, r5, d0
 8007030:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007032:	9109      	str	r1, [sp, #36]	@ 0x24
 8007034:	4683      	mov	fp, r0
 8007036:	920e      	str	r2, [sp, #56]	@ 0x38
 8007038:	9313      	str	r3, [sp, #76]	@ 0x4c
 800703a:	b97f      	cbnz	r7, 800705c <_dtoa_r+0x3c>
 800703c:	2010      	movs	r0, #16
 800703e:	f7ff f855 	bl	80060ec <malloc>
 8007042:	4602      	mov	r2, r0
 8007044:	f8cb 001c 	str.w	r0, [fp, #28]
 8007048:	b920      	cbnz	r0, 8007054 <_dtoa_r+0x34>
 800704a:	4ba7      	ldr	r3, [pc, #668]	@ (80072e8 <_dtoa_r+0x2c8>)
 800704c:	21ef      	movs	r1, #239	@ 0xef
 800704e:	48a7      	ldr	r0, [pc, #668]	@ (80072ec <_dtoa_r+0x2cc>)
 8007050:	f001 fba2 	bl	8008798 <__assert_func>
 8007054:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007058:	6007      	str	r7, [r0, #0]
 800705a:	60c7      	str	r7, [r0, #12]
 800705c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007060:	6819      	ldr	r1, [r3, #0]
 8007062:	b159      	cbz	r1, 800707c <_dtoa_r+0x5c>
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	604a      	str	r2, [r1, #4]
 8007068:	2301      	movs	r3, #1
 800706a:	4093      	lsls	r3, r2
 800706c:	608b      	str	r3, [r1, #8]
 800706e:	4658      	mov	r0, fp
 8007070:	f000 fe24 	bl	8007cbc <_Bfree>
 8007074:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007078:	2200      	movs	r2, #0
 800707a:	601a      	str	r2, [r3, #0]
 800707c:	1e2b      	subs	r3, r5, #0
 800707e:	bfb9      	ittee	lt
 8007080:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007084:	9303      	strlt	r3, [sp, #12]
 8007086:	2300      	movge	r3, #0
 8007088:	6033      	strge	r3, [r6, #0]
 800708a:	9f03      	ldr	r7, [sp, #12]
 800708c:	4b98      	ldr	r3, [pc, #608]	@ (80072f0 <_dtoa_r+0x2d0>)
 800708e:	bfbc      	itt	lt
 8007090:	2201      	movlt	r2, #1
 8007092:	6032      	strlt	r2, [r6, #0]
 8007094:	43bb      	bics	r3, r7
 8007096:	d112      	bne.n	80070be <_dtoa_r+0x9e>
 8007098:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800709a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800709e:	6013      	str	r3, [r2, #0]
 80070a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80070a4:	4323      	orrs	r3, r4
 80070a6:	f000 854d 	beq.w	8007b44 <_dtoa_r+0xb24>
 80070aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80070ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007304 <_dtoa_r+0x2e4>
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 854f 	beq.w	8007b54 <_dtoa_r+0xb34>
 80070b6:	f10a 0303 	add.w	r3, sl, #3
 80070ba:	f000 bd49 	b.w	8007b50 <_dtoa_r+0xb30>
 80070be:	ed9d 7b02 	vldr	d7, [sp, #8]
 80070c2:	2200      	movs	r2, #0
 80070c4:	ec51 0b17 	vmov	r0, r1, d7
 80070c8:	2300      	movs	r3, #0
 80070ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80070ce:	f7f9 fd03 	bl	8000ad8 <__aeabi_dcmpeq>
 80070d2:	4680      	mov	r8, r0
 80070d4:	b158      	cbz	r0, 80070ee <_dtoa_r+0xce>
 80070d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80070d8:	2301      	movs	r3, #1
 80070da:	6013      	str	r3, [r2, #0]
 80070dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80070de:	b113      	cbz	r3, 80070e6 <_dtoa_r+0xc6>
 80070e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80070e2:	4b84      	ldr	r3, [pc, #528]	@ (80072f4 <_dtoa_r+0x2d4>)
 80070e4:	6013      	str	r3, [r2, #0]
 80070e6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007308 <_dtoa_r+0x2e8>
 80070ea:	f000 bd33 	b.w	8007b54 <_dtoa_r+0xb34>
 80070ee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80070f2:	aa16      	add	r2, sp, #88	@ 0x58
 80070f4:	a917      	add	r1, sp, #92	@ 0x5c
 80070f6:	4658      	mov	r0, fp
 80070f8:	f001 f8ca 	bl	8008290 <__d2b>
 80070fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007100:	4681      	mov	r9, r0
 8007102:	2e00      	cmp	r6, #0
 8007104:	d077      	beq.n	80071f6 <_dtoa_r+0x1d6>
 8007106:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007108:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800710c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007110:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007114:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007118:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800711c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007120:	4619      	mov	r1, r3
 8007122:	2200      	movs	r2, #0
 8007124:	4b74      	ldr	r3, [pc, #464]	@ (80072f8 <_dtoa_r+0x2d8>)
 8007126:	f7f9 f8b7 	bl	8000298 <__aeabi_dsub>
 800712a:	a369      	add	r3, pc, #420	@ (adr r3, 80072d0 <_dtoa_r+0x2b0>)
 800712c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007130:	f7f9 fa6a 	bl	8000608 <__aeabi_dmul>
 8007134:	a368      	add	r3, pc, #416	@ (adr r3, 80072d8 <_dtoa_r+0x2b8>)
 8007136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713a:	f7f9 f8af 	bl	800029c <__adddf3>
 800713e:	4604      	mov	r4, r0
 8007140:	4630      	mov	r0, r6
 8007142:	460d      	mov	r5, r1
 8007144:	f7f9 f9f6 	bl	8000534 <__aeabi_i2d>
 8007148:	a365      	add	r3, pc, #404	@ (adr r3, 80072e0 <_dtoa_r+0x2c0>)
 800714a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714e:	f7f9 fa5b 	bl	8000608 <__aeabi_dmul>
 8007152:	4602      	mov	r2, r0
 8007154:	460b      	mov	r3, r1
 8007156:	4620      	mov	r0, r4
 8007158:	4629      	mov	r1, r5
 800715a:	f7f9 f89f 	bl	800029c <__adddf3>
 800715e:	4604      	mov	r4, r0
 8007160:	460d      	mov	r5, r1
 8007162:	f7f9 fd01 	bl	8000b68 <__aeabi_d2iz>
 8007166:	2200      	movs	r2, #0
 8007168:	4607      	mov	r7, r0
 800716a:	2300      	movs	r3, #0
 800716c:	4620      	mov	r0, r4
 800716e:	4629      	mov	r1, r5
 8007170:	f7f9 fcbc 	bl	8000aec <__aeabi_dcmplt>
 8007174:	b140      	cbz	r0, 8007188 <_dtoa_r+0x168>
 8007176:	4638      	mov	r0, r7
 8007178:	f7f9 f9dc 	bl	8000534 <__aeabi_i2d>
 800717c:	4622      	mov	r2, r4
 800717e:	462b      	mov	r3, r5
 8007180:	f7f9 fcaa 	bl	8000ad8 <__aeabi_dcmpeq>
 8007184:	b900      	cbnz	r0, 8007188 <_dtoa_r+0x168>
 8007186:	3f01      	subs	r7, #1
 8007188:	2f16      	cmp	r7, #22
 800718a:	d851      	bhi.n	8007230 <_dtoa_r+0x210>
 800718c:	4b5b      	ldr	r3, [pc, #364]	@ (80072fc <_dtoa_r+0x2dc>)
 800718e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007196:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800719a:	f7f9 fca7 	bl	8000aec <__aeabi_dcmplt>
 800719e:	2800      	cmp	r0, #0
 80071a0:	d048      	beq.n	8007234 <_dtoa_r+0x214>
 80071a2:	3f01      	subs	r7, #1
 80071a4:	2300      	movs	r3, #0
 80071a6:	9312      	str	r3, [sp, #72]	@ 0x48
 80071a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80071aa:	1b9b      	subs	r3, r3, r6
 80071ac:	1e5a      	subs	r2, r3, #1
 80071ae:	bf44      	itt	mi
 80071b0:	f1c3 0801 	rsbmi	r8, r3, #1
 80071b4:	2300      	movmi	r3, #0
 80071b6:	9208      	str	r2, [sp, #32]
 80071b8:	bf54      	ite	pl
 80071ba:	f04f 0800 	movpl.w	r8, #0
 80071be:	9308      	strmi	r3, [sp, #32]
 80071c0:	2f00      	cmp	r7, #0
 80071c2:	db39      	blt.n	8007238 <_dtoa_r+0x218>
 80071c4:	9b08      	ldr	r3, [sp, #32]
 80071c6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80071c8:	443b      	add	r3, r7
 80071ca:	9308      	str	r3, [sp, #32]
 80071cc:	2300      	movs	r3, #0
 80071ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80071d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071d2:	2b09      	cmp	r3, #9
 80071d4:	d864      	bhi.n	80072a0 <_dtoa_r+0x280>
 80071d6:	2b05      	cmp	r3, #5
 80071d8:	bfc4      	itt	gt
 80071da:	3b04      	subgt	r3, #4
 80071dc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80071de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071e0:	f1a3 0302 	sub.w	r3, r3, #2
 80071e4:	bfcc      	ite	gt
 80071e6:	2400      	movgt	r4, #0
 80071e8:	2401      	movle	r4, #1
 80071ea:	2b03      	cmp	r3, #3
 80071ec:	d863      	bhi.n	80072b6 <_dtoa_r+0x296>
 80071ee:	e8df f003 	tbb	[pc, r3]
 80071f2:	372a      	.short	0x372a
 80071f4:	5535      	.short	0x5535
 80071f6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80071fa:	441e      	add	r6, r3
 80071fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007200:	2b20      	cmp	r3, #32
 8007202:	bfc1      	itttt	gt
 8007204:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007208:	409f      	lslgt	r7, r3
 800720a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800720e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007212:	bfd6      	itet	le
 8007214:	f1c3 0320 	rsble	r3, r3, #32
 8007218:	ea47 0003 	orrgt.w	r0, r7, r3
 800721c:	fa04 f003 	lslle.w	r0, r4, r3
 8007220:	f7f9 f978 	bl	8000514 <__aeabi_ui2d>
 8007224:	2201      	movs	r2, #1
 8007226:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800722a:	3e01      	subs	r6, #1
 800722c:	9214      	str	r2, [sp, #80]	@ 0x50
 800722e:	e777      	b.n	8007120 <_dtoa_r+0x100>
 8007230:	2301      	movs	r3, #1
 8007232:	e7b8      	b.n	80071a6 <_dtoa_r+0x186>
 8007234:	9012      	str	r0, [sp, #72]	@ 0x48
 8007236:	e7b7      	b.n	80071a8 <_dtoa_r+0x188>
 8007238:	427b      	negs	r3, r7
 800723a:	930a      	str	r3, [sp, #40]	@ 0x28
 800723c:	2300      	movs	r3, #0
 800723e:	eba8 0807 	sub.w	r8, r8, r7
 8007242:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007244:	e7c4      	b.n	80071d0 <_dtoa_r+0x1b0>
 8007246:	2300      	movs	r3, #0
 8007248:	930b      	str	r3, [sp, #44]	@ 0x2c
 800724a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800724c:	2b00      	cmp	r3, #0
 800724e:	dc35      	bgt.n	80072bc <_dtoa_r+0x29c>
 8007250:	2301      	movs	r3, #1
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	9307      	str	r3, [sp, #28]
 8007256:	461a      	mov	r2, r3
 8007258:	920e      	str	r2, [sp, #56]	@ 0x38
 800725a:	e00b      	b.n	8007274 <_dtoa_r+0x254>
 800725c:	2301      	movs	r3, #1
 800725e:	e7f3      	b.n	8007248 <_dtoa_r+0x228>
 8007260:	2300      	movs	r3, #0
 8007262:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007264:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007266:	18fb      	adds	r3, r7, r3
 8007268:	9300      	str	r3, [sp, #0]
 800726a:	3301      	adds	r3, #1
 800726c:	2b01      	cmp	r3, #1
 800726e:	9307      	str	r3, [sp, #28]
 8007270:	bfb8      	it	lt
 8007272:	2301      	movlt	r3, #1
 8007274:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007278:	2100      	movs	r1, #0
 800727a:	2204      	movs	r2, #4
 800727c:	f102 0514 	add.w	r5, r2, #20
 8007280:	429d      	cmp	r5, r3
 8007282:	d91f      	bls.n	80072c4 <_dtoa_r+0x2a4>
 8007284:	6041      	str	r1, [r0, #4]
 8007286:	4658      	mov	r0, fp
 8007288:	f000 fcd8 	bl	8007c3c <_Balloc>
 800728c:	4682      	mov	sl, r0
 800728e:	2800      	cmp	r0, #0
 8007290:	d13c      	bne.n	800730c <_dtoa_r+0x2ec>
 8007292:	4b1b      	ldr	r3, [pc, #108]	@ (8007300 <_dtoa_r+0x2e0>)
 8007294:	4602      	mov	r2, r0
 8007296:	f240 11af 	movw	r1, #431	@ 0x1af
 800729a:	e6d8      	b.n	800704e <_dtoa_r+0x2e>
 800729c:	2301      	movs	r3, #1
 800729e:	e7e0      	b.n	8007262 <_dtoa_r+0x242>
 80072a0:	2401      	movs	r4, #1
 80072a2:	2300      	movs	r3, #0
 80072a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80072a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80072a8:	f04f 33ff 	mov.w	r3, #4294967295
 80072ac:	9300      	str	r3, [sp, #0]
 80072ae:	9307      	str	r3, [sp, #28]
 80072b0:	2200      	movs	r2, #0
 80072b2:	2312      	movs	r3, #18
 80072b4:	e7d0      	b.n	8007258 <_dtoa_r+0x238>
 80072b6:	2301      	movs	r3, #1
 80072b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072ba:	e7f5      	b.n	80072a8 <_dtoa_r+0x288>
 80072bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	9307      	str	r3, [sp, #28]
 80072c2:	e7d7      	b.n	8007274 <_dtoa_r+0x254>
 80072c4:	3101      	adds	r1, #1
 80072c6:	0052      	lsls	r2, r2, #1
 80072c8:	e7d8      	b.n	800727c <_dtoa_r+0x25c>
 80072ca:	bf00      	nop
 80072cc:	f3af 8000 	nop.w
 80072d0:	636f4361 	.word	0x636f4361
 80072d4:	3fd287a7 	.word	0x3fd287a7
 80072d8:	8b60c8b3 	.word	0x8b60c8b3
 80072dc:	3fc68a28 	.word	0x3fc68a28
 80072e0:	509f79fb 	.word	0x509f79fb
 80072e4:	3fd34413 	.word	0x3fd34413
 80072e8:	08008e69 	.word	0x08008e69
 80072ec:	08008e80 	.word	0x08008e80
 80072f0:	7ff00000 	.word	0x7ff00000
 80072f4:	08008e39 	.word	0x08008e39
 80072f8:	3ff80000 	.word	0x3ff80000
 80072fc:	08008f78 	.word	0x08008f78
 8007300:	08008ed8 	.word	0x08008ed8
 8007304:	08008e65 	.word	0x08008e65
 8007308:	08008e38 	.word	0x08008e38
 800730c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007310:	6018      	str	r0, [r3, #0]
 8007312:	9b07      	ldr	r3, [sp, #28]
 8007314:	2b0e      	cmp	r3, #14
 8007316:	f200 80a4 	bhi.w	8007462 <_dtoa_r+0x442>
 800731a:	2c00      	cmp	r4, #0
 800731c:	f000 80a1 	beq.w	8007462 <_dtoa_r+0x442>
 8007320:	2f00      	cmp	r7, #0
 8007322:	dd33      	ble.n	800738c <_dtoa_r+0x36c>
 8007324:	4bad      	ldr	r3, [pc, #692]	@ (80075dc <_dtoa_r+0x5bc>)
 8007326:	f007 020f 	and.w	r2, r7, #15
 800732a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800732e:	ed93 7b00 	vldr	d7, [r3]
 8007332:	05f8      	lsls	r0, r7, #23
 8007334:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007338:	ea4f 1427 	mov.w	r4, r7, asr #4
 800733c:	d516      	bpl.n	800736c <_dtoa_r+0x34c>
 800733e:	4ba8      	ldr	r3, [pc, #672]	@ (80075e0 <_dtoa_r+0x5c0>)
 8007340:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007344:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007348:	f7f9 fa88 	bl	800085c <__aeabi_ddiv>
 800734c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007350:	f004 040f 	and.w	r4, r4, #15
 8007354:	2603      	movs	r6, #3
 8007356:	4da2      	ldr	r5, [pc, #648]	@ (80075e0 <_dtoa_r+0x5c0>)
 8007358:	b954      	cbnz	r4, 8007370 <_dtoa_r+0x350>
 800735a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800735e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007362:	f7f9 fa7b 	bl	800085c <__aeabi_ddiv>
 8007366:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800736a:	e028      	b.n	80073be <_dtoa_r+0x39e>
 800736c:	2602      	movs	r6, #2
 800736e:	e7f2      	b.n	8007356 <_dtoa_r+0x336>
 8007370:	07e1      	lsls	r1, r4, #31
 8007372:	d508      	bpl.n	8007386 <_dtoa_r+0x366>
 8007374:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007378:	e9d5 2300 	ldrd	r2, r3, [r5]
 800737c:	f7f9 f944 	bl	8000608 <__aeabi_dmul>
 8007380:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007384:	3601      	adds	r6, #1
 8007386:	1064      	asrs	r4, r4, #1
 8007388:	3508      	adds	r5, #8
 800738a:	e7e5      	b.n	8007358 <_dtoa_r+0x338>
 800738c:	f000 80d2 	beq.w	8007534 <_dtoa_r+0x514>
 8007390:	427c      	negs	r4, r7
 8007392:	4b92      	ldr	r3, [pc, #584]	@ (80075dc <_dtoa_r+0x5bc>)
 8007394:	4d92      	ldr	r5, [pc, #584]	@ (80075e0 <_dtoa_r+0x5c0>)
 8007396:	f004 020f 	and.w	r2, r4, #15
 800739a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800739e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073a6:	f7f9 f92f 	bl	8000608 <__aeabi_dmul>
 80073aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073ae:	1124      	asrs	r4, r4, #4
 80073b0:	2300      	movs	r3, #0
 80073b2:	2602      	movs	r6, #2
 80073b4:	2c00      	cmp	r4, #0
 80073b6:	f040 80b2 	bne.w	800751e <_dtoa_r+0x4fe>
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1d3      	bne.n	8007366 <_dtoa_r+0x346>
 80073be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80073c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f000 80b7 	beq.w	8007538 <_dtoa_r+0x518>
 80073ca:	4b86      	ldr	r3, [pc, #536]	@ (80075e4 <_dtoa_r+0x5c4>)
 80073cc:	2200      	movs	r2, #0
 80073ce:	4620      	mov	r0, r4
 80073d0:	4629      	mov	r1, r5
 80073d2:	f7f9 fb8b 	bl	8000aec <__aeabi_dcmplt>
 80073d6:	2800      	cmp	r0, #0
 80073d8:	f000 80ae 	beq.w	8007538 <_dtoa_r+0x518>
 80073dc:	9b07      	ldr	r3, [sp, #28]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	f000 80aa 	beq.w	8007538 <_dtoa_r+0x518>
 80073e4:	9b00      	ldr	r3, [sp, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	dd37      	ble.n	800745a <_dtoa_r+0x43a>
 80073ea:	1e7b      	subs	r3, r7, #1
 80073ec:	9304      	str	r3, [sp, #16]
 80073ee:	4620      	mov	r0, r4
 80073f0:	4b7d      	ldr	r3, [pc, #500]	@ (80075e8 <_dtoa_r+0x5c8>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	4629      	mov	r1, r5
 80073f6:	f7f9 f907 	bl	8000608 <__aeabi_dmul>
 80073fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073fe:	9c00      	ldr	r4, [sp, #0]
 8007400:	3601      	adds	r6, #1
 8007402:	4630      	mov	r0, r6
 8007404:	f7f9 f896 	bl	8000534 <__aeabi_i2d>
 8007408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800740c:	f7f9 f8fc 	bl	8000608 <__aeabi_dmul>
 8007410:	4b76      	ldr	r3, [pc, #472]	@ (80075ec <_dtoa_r+0x5cc>)
 8007412:	2200      	movs	r2, #0
 8007414:	f7f8 ff42 	bl	800029c <__adddf3>
 8007418:	4605      	mov	r5, r0
 800741a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800741e:	2c00      	cmp	r4, #0
 8007420:	f040 808d 	bne.w	800753e <_dtoa_r+0x51e>
 8007424:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007428:	4b71      	ldr	r3, [pc, #452]	@ (80075f0 <_dtoa_r+0x5d0>)
 800742a:	2200      	movs	r2, #0
 800742c:	f7f8 ff34 	bl	8000298 <__aeabi_dsub>
 8007430:	4602      	mov	r2, r0
 8007432:	460b      	mov	r3, r1
 8007434:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007438:	462a      	mov	r2, r5
 800743a:	4633      	mov	r3, r6
 800743c:	f7f9 fb74 	bl	8000b28 <__aeabi_dcmpgt>
 8007440:	2800      	cmp	r0, #0
 8007442:	f040 828b 	bne.w	800795c <_dtoa_r+0x93c>
 8007446:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800744a:	462a      	mov	r2, r5
 800744c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007450:	f7f9 fb4c 	bl	8000aec <__aeabi_dcmplt>
 8007454:	2800      	cmp	r0, #0
 8007456:	f040 8128 	bne.w	80076aa <_dtoa_r+0x68a>
 800745a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800745e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007462:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007464:	2b00      	cmp	r3, #0
 8007466:	f2c0 815a 	blt.w	800771e <_dtoa_r+0x6fe>
 800746a:	2f0e      	cmp	r7, #14
 800746c:	f300 8157 	bgt.w	800771e <_dtoa_r+0x6fe>
 8007470:	4b5a      	ldr	r3, [pc, #360]	@ (80075dc <_dtoa_r+0x5bc>)
 8007472:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007476:	ed93 7b00 	vldr	d7, [r3]
 800747a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800747c:	2b00      	cmp	r3, #0
 800747e:	ed8d 7b00 	vstr	d7, [sp]
 8007482:	da03      	bge.n	800748c <_dtoa_r+0x46c>
 8007484:	9b07      	ldr	r3, [sp, #28]
 8007486:	2b00      	cmp	r3, #0
 8007488:	f340 8101 	ble.w	800768e <_dtoa_r+0x66e>
 800748c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007490:	4656      	mov	r6, sl
 8007492:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007496:	4620      	mov	r0, r4
 8007498:	4629      	mov	r1, r5
 800749a:	f7f9 f9df 	bl	800085c <__aeabi_ddiv>
 800749e:	f7f9 fb63 	bl	8000b68 <__aeabi_d2iz>
 80074a2:	4680      	mov	r8, r0
 80074a4:	f7f9 f846 	bl	8000534 <__aeabi_i2d>
 80074a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074ac:	f7f9 f8ac 	bl	8000608 <__aeabi_dmul>
 80074b0:	4602      	mov	r2, r0
 80074b2:	460b      	mov	r3, r1
 80074b4:	4620      	mov	r0, r4
 80074b6:	4629      	mov	r1, r5
 80074b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80074bc:	f7f8 feec 	bl	8000298 <__aeabi_dsub>
 80074c0:	f806 4b01 	strb.w	r4, [r6], #1
 80074c4:	9d07      	ldr	r5, [sp, #28]
 80074c6:	eba6 040a 	sub.w	r4, r6, sl
 80074ca:	42a5      	cmp	r5, r4
 80074cc:	4602      	mov	r2, r0
 80074ce:	460b      	mov	r3, r1
 80074d0:	f040 8117 	bne.w	8007702 <_dtoa_r+0x6e2>
 80074d4:	f7f8 fee2 	bl	800029c <__adddf3>
 80074d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074dc:	4604      	mov	r4, r0
 80074de:	460d      	mov	r5, r1
 80074e0:	f7f9 fb22 	bl	8000b28 <__aeabi_dcmpgt>
 80074e4:	2800      	cmp	r0, #0
 80074e6:	f040 80f9 	bne.w	80076dc <_dtoa_r+0x6bc>
 80074ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074ee:	4620      	mov	r0, r4
 80074f0:	4629      	mov	r1, r5
 80074f2:	f7f9 faf1 	bl	8000ad8 <__aeabi_dcmpeq>
 80074f6:	b118      	cbz	r0, 8007500 <_dtoa_r+0x4e0>
 80074f8:	f018 0f01 	tst.w	r8, #1
 80074fc:	f040 80ee 	bne.w	80076dc <_dtoa_r+0x6bc>
 8007500:	4649      	mov	r1, r9
 8007502:	4658      	mov	r0, fp
 8007504:	f000 fbda 	bl	8007cbc <_Bfree>
 8007508:	2300      	movs	r3, #0
 800750a:	7033      	strb	r3, [r6, #0]
 800750c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800750e:	3701      	adds	r7, #1
 8007510:	601f      	str	r7, [r3, #0]
 8007512:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 831d 	beq.w	8007b54 <_dtoa_r+0xb34>
 800751a:	601e      	str	r6, [r3, #0]
 800751c:	e31a      	b.n	8007b54 <_dtoa_r+0xb34>
 800751e:	07e2      	lsls	r2, r4, #31
 8007520:	d505      	bpl.n	800752e <_dtoa_r+0x50e>
 8007522:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007526:	f7f9 f86f 	bl	8000608 <__aeabi_dmul>
 800752a:	3601      	adds	r6, #1
 800752c:	2301      	movs	r3, #1
 800752e:	1064      	asrs	r4, r4, #1
 8007530:	3508      	adds	r5, #8
 8007532:	e73f      	b.n	80073b4 <_dtoa_r+0x394>
 8007534:	2602      	movs	r6, #2
 8007536:	e742      	b.n	80073be <_dtoa_r+0x39e>
 8007538:	9c07      	ldr	r4, [sp, #28]
 800753a:	9704      	str	r7, [sp, #16]
 800753c:	e761      	b.n	8007402 <_dtoa_r+0x3e2>
 800753e:	4b27      	ldr	r3, [pc, #156]	@ (80075dc <_dtoa_r+0x5bc>)
 8007540:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007542:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007546:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800754a:	4454      	add	r4, sl
 800754c:	2900      	cmp	r1, #0
 800754e:	d053      	beq.n	80075f8 <_dtoa_r+0x5d8>
 8007550:	4928      	ldr	r1, [pc, #160]	@ (80075f4 <_dtoa_r+0x5d4>)
 8007552:	2000      	movs	r0, #0
 8007554:	f7f9 f982 	bl	800085c <__aeabi_ddiv>
 8007558:	4633      	mov	r3, r6
 800755a:	462a      	mov	r2, r5
 800755c:	f7f8 fe9c 	bl	8000298 <__aeabi_dsub>
 8007560:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007564:	4656      	mov	r6, sl
 8007566:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800756a:	f7f9 fafd 	bl	8000b68 <__aeabi_d2iz>
 800756e:	4605      	mov	r5, r0
 8007570:	f7f8 ffe0 	bl	8000534 <__aeabi_i2d>
 8007574:	4602      	mov	r2, r0
 8007576:	460b      	mov	r3, r1
 8007578:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800757c:	f7f8 fe8c 	bl	8000298 <__aeabi_dsub>
 8007580:	3530      	adds	r5, #48	@ 0x30
 8007582:	4602      	mov	r2, r0
 8007584:	460b      	mov	r3, r1
 8007586:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800758a:	f806 5b01 	strb.w	r5, [r6], #1
 800758e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007592:	f7f9 faab 	bl	8000aec <__aeabi_dcmplt>
 8007596:	2800      	cmp	r0, #0
 8007598:	d171      	bne.n	800767e <_dtoa_r+0x65e>
 800759a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800759e:	4911      	ldr	r1, [pc, #68]	@ (80075e4 <_dtoa_r+0x5c4>)
 80075a0:	2000      	movs	r0, #0
 80075a2:	f7f8 fe79 	bl	8000298 <__aeabi_dsub>
 80075a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80075aa:	f7f9 fa9f 	bl	8000aec <__aeabi_dcmplt>
 80075ae:	2800      	cmp	r0, #0
 80075b0:	f040 8095 	bne.w	80076de <_dtoa_r+0x6be>
 80075b4:	42a6      	cmp	r6, r4
 80075b6:	f43f af50 	beq.w	800745a <_dtoa_r+0x43a>
 80075ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80075be:	4b0a      	ldr	r3, [pc, #40]	@ (80075e8 <_dtoa_r+0x5c8>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	f7f9 f821 	bl	8000608 <__aeabi_dmul>
 80075c6:	4b08      	ldr	r3, [pc, #32]	@ (80075e8 <_dtoa_r+0x5c8>)
 80075c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80075cc:	2200      	movs	r2, #0
 80075ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075d2:	f7f9 f819 	bl	8000608 <__aeabi_dmul>
 80075d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075da:	e7c4      	b.n	8007566 <_dtoa_r+0x546>
 80075dc:	08008f78 	.word	0x08008f78
 80075e0:	08008f50 	.word	0x08008f50
 80075e4:	3ff00000 	.word	0x3ff00000
 80075e8:	40240000 	.word	0x40240000
 80075ec:	401c0000 	.word	0x401c0000
 80075f0:	40140000 	.word	0x40140000
 80075f4:	3fe00000 	.word	0x3fe00000
 80075f8:	4631      	mov	r1, r6
 80075fa:	4628      	mov	r0, r5
 80075fc:	f7f9 f804 	bl	8000608 <__aeabi_dmul>
 8007600:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007604:	9415      	str	r4, [sp, #84]	@ 0x54
 8007606:	4656      	mov	r6, sl
 8007608:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800760c:	f7f9 faac 	bl	8000b68 <__aeabi_d2iz>
 8007610:	4605      	mov	r5, r0
 8007612:	f7f8 ff8f 	bl	8000534 <__aeabi_i2d>
 8007616:	4602      	mov	r2, r0
 8007618:	460b      	mov	r3, r1
 800761a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800761e:	f7f8 fe3b 	bl	8000298 <__aeabi_dsub>
 8007622:	3530      	adds	r5, #48	@ 0x30
 8007624:	f806 5b01 	strb.w	r5, [r6], #1
 8007628:	4602      	mov	r2, r0
 800762a:	460b      	mov	r3, r1
 800762c:	42a6      	cmp	r6, r4
 800762e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007632:	f04f 0200 	mov.w	r2, #0
 8007636:	d124      	bne.n	8007682 <_dtoa_r+0x662>
 8007638:	4bac      	ldr	r3, [pc, #688]	@ (80078ec <_dtoa_r+0x8cc>)
 800763a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800763e:	f7f8 fe2d 	bl	800029c <__adddf3>
 8007642:	4602      	mov	r2, r0
 8007644:	460b      	mov	r3, r1
 8007646:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800764a:	f7f9 fa6d 	bl	8000b28 <__aeabi_dcmpgt>
 800764e:	2800      	cmp	r0, #0
 8007650:	d145      	bne.n	80076de <_dtoa_r+0x6be>
 8007652:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007656:	49a5      	ldr	r1, [pc, #660]	@ (80078ec <_dtoa_r+0x8cc>)
 8007658:	2000      	movs	r0, #0
 800765a:	f7f8 fe1d 	bl	8000298 <__aeabi_dsub>
 800765e:	4602      	mov	r2, r0
 8007660:	460b      	mov	r3, r1
 8007662:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007666:	f7f9 fa41 	bl	8000aec <__aeabi_dcmplt>
 800766a:	2800      	cmp	r0, #0
 800766c:	f43f aef5 	beq.w	800745a <_dtoa_r+0x43a>
 8007670:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007672:	1e73      	subs	r3, r6, #1
 8007674:	9315      	str	r3, [sp, #84]	@ 0x54
 8007676:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800767a:	2b30      	cmp	r3, #48	@ 0x30
 800767c:	d0f8      	beq.n	8007670 <_dtoa_r+0x650>
 800767e:	9f04      	ldr	r7, [sp, #16]
 8007680:	e73e      	b.n	8007500 <_dtoa_r+0x4e0>
 8007682:	4b9b      	ldr	r3, [pc, #620]	@ (80078f0 <_dtoa_r+0x8d0>)
 8007684:	f7f8 ffc0 	bl	8000608 <__aeabi_dmul>
 8007688:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800768c:	e7bc      	b.n	8007608 <_dtoa_r+0x5e8>
 800768e:	d10c      	bne.n	80076aa <_dtoa_r+0x68a>
 8007690:	4b98      	ldr	r3, [pc, #608]	@ (80078f4 <_dtoa_r+0x8d4>)
 8007692:	2200      	movs	r2, #0
 8007694:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007698:	f7f8 ffb6 	bl	8000608 <__aeabi_dmul>
 800769c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076a0:	f7f9 fa38 	bl	8000b14 <__aeabi_dcmpge>
 80076a4:	2800      	cmp	r0, #0
 80076a6:	f000 8157 	beq.w	8007958 <_dtoa_r+0x938>
 80076aa:	2400      	movs	r4, #0
 80076ac:	4625      	mov	r5, r4
 80076ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076b0:	43db      	mvns	r3, r3
 80076b2:	9304      	str	r3, [sp, #16]
 80076b4:	4656      	mov	r6, sl
 80076b6:	2700      	movs	r7, #0
 80076b8:	4621      	mov	r1, r4
 80076ba:	4658      	mov	r0, fp
 80076bc:	f000 fafe 	bl	8007cbc <_Bfree>
 80076c0:	2d00      	cmp	r5, #0
 80076c2:	d0dc      	beq.n	800767e <_dtoa_r+0x65e>
 80076c4:	b12f      	cbz	r7, 80076d2 <_dtoa_r+0x6b2>
 80076c6:	42af      	cmp	r7, r5
 80076c8:	d003      	beq.n	80076d2 <_dtoa_r+0x6b2>
 80076ca:	4639      	mov	r1, r7
 80076cc:	4658      	mov	r0, fp
 80076ce:	f000 faf5 	bl	8007cbc <_Bfree>
 80076d2:	4629      	mov	r1, r5
 80076d4:	4658      	mov	r0, fp
 80076d6:	f000 faf1 	bl	8007cbc <_Bfree>
 80076da:	e7d0      	b.n	800767e <_dtoa_r+0x65e>
 80076dc:	9704      	str	r7, [sp, #16]
 80076de:	4633      	mov	r3, r6
 80076e0:	461e      	mov	r6, r3
 80076e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076e6:	2a39      	cmp	r2, #57	@ 0x39
 80076e8:	d107      	bne.n	80076fa <_dtoa_r+0x6da>
 80076ea:	459a      	cmp	sl, r3
 80076ec:	d1f8      	bne.n	80076e0 <_dtoa_r+0x6c0>
 80076ee:	9a04      	ldr	r2, [sp, #16]
 80076f0:	3201      	adds	r2, #1
 80076f2:	9204      	str	r2, [sp, #16]
 80076f4:	2230      	movs	r2, #48	@ 0x30
 80076f6:	f88a 2000 	strb.w	r2, [sl]
 80076fa:	781a      	ldrb	r2, [r3, #0]
 80076fc:	3201      	adds	r2, #1
 80076fe:	701a      	strb	r2, [r3, #0]
 8007700:	e7bd      	b.n	800767e <_dtoa_r+0x65e>
 8007702:	4b7b      	ldr	r3, [pc, #492]	@ (80078f0 <_dtoa_r+0x8d0>)
 8007704:	2200      	movs	r2, #0
 8007706:	f7f8 ff7f 	bl	8000608 <__aeabi_dmul>
 800770a:	2200      	movs	r2, #0
 800770c:	2300      	movs	r3, #0
 800770e:	4604      	mov	r4, r0
 8007710:	460d      	mov	r5, r1
 8007712:	f7f9 f9e1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007716:	2800      	cmp	r0, #0
 8007718:	f43f aebb 	beq.w	8007492 <_dtoa_r+0x472>
 800771c:	e6f0      	b.n	8007500 <_dtoa_r+0x4e0>
 800771e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007720:	2a00      	cmp	r2, #0
 8007722:	f000 80db 	beq.w	80078dc <_dtoa_r+0x8bc>
 8007726:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007728:	2a01      	cmp	r2, #1
 800772a:	f300 80bf 	bgt.w	80078ac <_dtoa_r+0x88c>
 800772e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007730:	2a00      	cmp	r2, #0
 8007732:	f000 80b7 	beq.w	80078a4 <_dtoa_r+0x884>
 8007736:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800773a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800773c:	4646      	mov	r6, r8
 800773e:	9a08      	ldr	r2, [sp, #32]
 8007740:	2101      	movs	r1, #1
 8007742:	441a      	add	r2, r3
 8007744:	4658      	mov	r0, fp
 8007746:	4498      	add	r8, r3
 8007748:	9208      	str	r2, [sp, #32]
 800774a:	f000 fb6b 	bl	8007e24 <__i2b>
 800774e:	4605      	mov	r5, r0
 8007750:	b15e      	cbz	r6, 800776a <_dtoa_r+0x74a>
 8007752:	9b08      	ldr	r3, [sp, #32]
 8007754:	2b00      	cmp	r3, #0
 8007756:	dd08      	ble.n	800776a <_dtoa_r+0x74a>
 8007758:	42b3      	cmp	r3, r6
 800775a:	9a08      	ldr	r2, [sp, #32]
 800775c:	bfa8      	it	ge
 800775e:	4633      	movge	r3, r6
 8007760:	eba8 0803 	sub.w	r8, r8, r3
 8007764:	1af6      	subs	r6, r6, r3
 8007766:	1ad3      	subs	r3, r2, r3
 8007768:	9308      	str	r3, [sp, #32]
 800776a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800776c:	b1f3      	cbz	r3, 80077ac <_dtoa_r+0x78c>
 800776e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007770:	2b00      	cmp	r3, #0
 8007772:	f000 80b7 	beq.w	80078e4 <_dtoa_r+0x8c4>
 8007776:	b18c      	cbz	r4, 800779c <_dtoa_r+0x77c>
 8007778:	4629      	mov	r1, r5
 800777a:	4622      	mov	r2, r4
 800777c:	4658      	mov	r0, fp
 800777e:	f000 fc11 	bl	8007fa4 <__pow5mult>
 8007782:	464a      	mov	r2, r9
 8007784:	4601      	mov	r1, r0
 8007786:	4605      	mov	r5, r0
 8007788:	4658      	mov	r0, fp
 800778a:	f000 fb61 	bl	8007e50 <__multiply>
 800778e:	4649      	mov	r1, r9
 8007790:	9004      	str	r0, [sp, #16]
 8007792:	4658      	mov	r0, fp
 8007794:	f000 fa92 	bl	8007cbc <_Bfree>
 8007798:	9b04      	ldr	r3, [sp, #16]
 800779a:	4699      	mov	r9, r3
 800779c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800779e:	1b1a      	subs	r2, r3, r4
 80077a0:	d004      	beq.n	80077ac <_dtoa_r+0x78c>
 80077a2:	4649      	mov	r1, r9
 80077a4:	4658      	mov	r0, fp
 80077a6:	f000 fbfd 	bl	8007fa4 <__pow5mult>
 80077aa:	4681      	mov	r9, r0
 80077ac:	2101      	movs	r1, #1
 80077ae:	4658      	mov	r0, fp
 80077b0:	f000 fb38 	bl	8007e24 <__i2b>
 80077b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077b6:	4604      	mov	r4, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 81cf 	beq.w	8007b5c <_dtoa_r+0xb3c>
 80077be:	461a      	mov	r2, r3
 80077c0:	4601      	mov	r1, r0
 80077c2:	4658      	mov	r0, fp
 80077c4:	f000 fbee 	bl	8007fa4 <__pow5mult>
 80077c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	4604      	mov	r4, r0
 80077ce:	f300 8095 	bgt.w	80078fc <_dtoa_r+0x8dc>
 80077d2:	9b02      	ldr	r3, [sp, #8]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f040 8087 	bne.w	80078e8 <_dtoa_r+0x8c8>
 80077da:	9b03      	ldr	r3, [sp, #12]
 80077dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f040 8089 	bne.w	80078f8 <_dtoa_r+0x8d8>
 80077e6:	9b03      	ldr	r3, [sp, #12]
 80077e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80077ec:	0d1b      	lsrs	r3, r3, #20
 80077ee:	051b      	lsls	r3, r3, #20
 80077f0:	b12b      	cbz	r3, 80077fe <_dtoa_r+0x7de>
 80077f2:	9b08      	ldr	r3, [sp, #32]
 80077f4:	3301      	adds	r3, #1
 80077f6:	9308      	str	r3, [sp, #32]
 80077f8:	f108 0801 	add.w	r8, r8, #1
 80077fc:	2301      	movs	r3, #1
 80077fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007800:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007802:	2b00      	cmp	r3, #0
 8007804:	f000 81b0 	beq.w	8007b68 <_dtoa_r+0xb48>
 8007808:	6923      	ldr	r3, [r4, #16]
 800780a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800780e:	6918      	ldr	r0, [r3, #16]
 8007810:	f000 fabc 	bl	8007d8c <__hi0bits>
 8007814:	f1c0 0020 	rsb	r0, r0, #32
 8007818:	9b08      	ldr	r3, [sp, #32]
 800781a:	4418      	add	r0, r3
 800781c:	f010 001f 	ands.w	r0, r0, #31
 8007820:	d077      	beq.n	8007912 <_dtoa_r+0x8f2>
 8007822:	f1c0 0320 	rsb	r3, r0, #32
 8007826:	2b04      	cmp	r3, #4
 8007828:	dd6b      	ble.n	8007902 <_dtoa_r+0x8e2>
 800782a:	9b08      	ldr	r3, [sp, #32]
 800782c:	f1c0 001c 	rsb	r0, r0, #28
 8007830:	4403      	add	r3, r0
 8007832:	4480      	add	r8, r0
 8007834:	4406      	add	r6, r0
 8007836:	9308      	str	r3, [sp, #32]
 8007838:	f1b8 0f00 	cmp.w	r8, #0
 800783c:	dd05      	ble.n	800784a <_dtoa_r+0x82a>
 800783e:	4649      	mov	r1, r9
 8007840:	4642      	mov	r2, r8
 8007842:	4658      	mov	r0, fp
 8007844:	f000 fc08 	bl	8008058 <__lshift>
 8007848:	4681      	mov	r9, r0
 800784a:	9b08      	ldr	r3, [sp, #32]
 800784c:	2b00      	cmp	r3, #0
 800784e:	dd05      	ble.n	800785c <_dtoa_r+0x83c>
 8007850:	4621      	mov	r1, r4
 8007852:	461a      	mov	r2, r3
 8007854:	4658      	mov	r0, fp
 8007856:	f000 fbff 	bl	8008058 <__lshift>
 800785a:	4604      	mov	r4, r0
 800785c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800785e:	2b00      	cmp	r3, #0
 8007860:	d059      	beq.n	8007916 <_dtoa_r+0x8f6>
 8007862:	4621      	mov	r1, r4
 8007864:	4648      	mov	r0, r9
 8007866:	f000 fc63 	bl	8008130 <__mcmp>
 800786a:	2800      	cmp	r0, #0
 800786c:	da53      	bge.n	8007916 <_dtoa_r+0x8f6>
 800786e:	1e7b      	subs	r3, r7, #1
 8007870:	9304      	str	r3, [sp, #16]
 8007872:	4649      	mov	r1, r9
 8007874:	2300      	movs	r3, #0
 8007876:	220a      	movs	r2, #10
 8007878:	4658      	mov	r0, fp
 800787a:	f000 fa41 	bl	8007d00 <__multadd>
 800787e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007880:	4681      	mov	r9, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	f000 8172 	beq.w	8007b6c <_dtoa_r+0xb4c>
 8007888:	2300      	movs	r3, #0
 800788a:	4629      	mov	r1, r5
 800788c:	220a      	movs	r2, #10
 800788e:	4658      	mov	r0, fp
 8007890:	f000 fa36 	bl	8007d00 <__multadd>
 8007894:	9b00      	ldr	r3, [sp, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	4605      	mov	r5, r0
 800789a:	dc67      	bgt.n	800796c <_dtoa_r+0x94c>
 800789c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800789e:	2b02      	cmp	r3, #2
 80078a0:	dc41      	bgt.n	8007926 <_dtoa_r+0x906>
 80078a2:	e063      	b.n	800796c <_dtoa_r+0x94c>
 80078a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80078a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80078aa:	e746      	b.n	800773a <_dtoa_r+0x71a>
 80078ac:	9b07      	ldr	r3, [sp, #28]
 80078ae:	1e5c      	subs	r4, r3, #1
 80078b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078b2:	42a3      	cmp	r3, r4
 80078b4:	bfbf      	itttt	lt
 80078b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80078b8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80078ba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80078bc:	1ae3      	sublt	r3, r4, r3
 80078be:	bfb4      	ite	lt
 80078c0:	18d2      	addlt	r2, r2, r3
 80078c2:	1b1c      	subge	r4, r3, r4
 80078c4:	9b07      	ldr	r3, [sp, #28]
 80078c6:	bfbc      	itt	lt
 80078c8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80078ca:	2400      	movlt	r4, #0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	bfb5      	itete	lt
 80078d0:	eba8 0603 	sublt.w	r6, r8, r3
 80078d4:	9b07      	ldrge	r3, [sp, #28]
 80078d6:	2300      	movlt	r3, #0
 80078d8:	4646      	movge	r6, r8
 80078da:	e730      	b.n	800773e <_dtoa_r+0x71e>
 80078dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80078de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80078e0:	4646      	mov	r6, r8
 80078e2:	e735      	b.n	8007750 <_dtoa_r+0x730>
 80078e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80078e6:	e75c      	b.n	80077a2 <_dtoa_r+0x782>
 80078e8:	2300      	movs	r3, #0
 80078ea:	e788      	b.n	80077fe <_dtoa_r+0x7de>
 80078ec:	3fe00000 	.word	0x3fe00000
 80078f0:	40240000 	.word	0x40240000
 80078f4:	40140000 	.word	0x40140000
 80078f8:	9b02      	ldr	r3, [sp, #8]
 80078fa:	e780      	b.n	80077fe <_dtoa_r+0x7de>
 80078fc:	2300      	movs	r3, #0
 80078fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007900:	e782      	b.n	8007808 <_dtoa_r+0x7e8>
 8007902:	d099      	beq.n	8007838 <_dtoa_r+0x818>
 8007904:	9a08      	ldr	r2, [sp, #32]
 8007906:	331c      	adds	r3, #28
 8007908:	441a      	add	r2, r3
 800790a:	4498      	add	r8, r3
 800790c:	441e      	add	r6, r3
 800790e:	9208      	str	r2, [sp, #32]
 8007910:	e792      	b.n	8007838 <_dtoa_r+0x818>
 8007912:	4603      	mov	r3, r0
 8007914:	e7f6      	b.n	8007904 <_dtoa_r+0x8e4>
 8007916:	9b07      	ldr	r3, [sp, #28]
 8007918:	9704      	str	r7, [sp, #16]
 800791a:	2b00      	cmp	r3, #0
 800791c:	dc20      	bgt.n	8007960 <_dtoa_r+0x940>
 800791e:	9300      	str	r3, [sp, #0]
 8007920:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007922:	2b02      	cmp	r3, #2
 8007924:	dd1e      	ble.n	8007964 <_dtoa_r+0x944>
 8007926:	9b00      	ldr	r3, [sp, #0]
 8007928:	2b00      	cmp	r3, #0
 800792a:	f47f aec0 	bne.w	80076ae <_dtoa_r+0x68e>
 800792e:	4621      	mov	r1, r4
 8007930:	2205      	movs	r2, #5
 8007932:	4658      	mov	r0, fp
 8007934:	f000 f9e4 	bl	8007d00 <__multadd>
 8007938:	4601      	mov	r1, r0
 800793a:	4604      	mov	r4, r0
 800793c:	4648      	mov	r0, r9
 800793e:	f000 fbf7 	bl	8008130 <__mcmp>
 8007942:	2800      	cmp	r0, #0
 8007944:	f77f aeb3 	ble.w	80076ae <_dtoa_r+0x68e>
 8007948:	4656      	mov	r6, sl
 800794a:	2331      	movs	r3, #49	@ 0x31
 800794c:	f806 3b01 	strb.w	r3, [r6], #1
 8007950:	9b04      	ldr	r3, [sp, #16]
 8007952:	3301      	adds	r3, #1
 8007954:	9304      	str	r3, [sp, #16]
 8007956:	e6ae      	b.n	80076b6 <_dtoa_r+0x696>
 8007958:	9c07      	ldr	r4, [sp, #28]
 800795a:	9704      	str	r7, [sp, #16]
 800795c:	4625      	mov	r5, r4
 800795e:	e7f3      	b.n	8007948 <_dtoa_r+0x928>
 8007960:	9b07      	ldr	r3, [sp, #28]
 8007962:	9300      	str	r3, [sp, #0]
 8007964:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007966:	2b00      	cmp	r3, #0
 8007968:	f000 8104 	beq.w	8007b74 <_dtoa_r+0xb54>
 800796c:	2e00      	cmp	r6, #0
 800796e:	dd05      	ble.n	800797c <_dtoa_r+0x95c>
 8007970:	4629      	mov	r1, r5
 8007972:	4632      	mov	r2, r6
 8007974:	4658      	mov	r0, fp
 8007976:	f000 fb6f 	bl	8008058 <__lshift>
 800797a:	4605      	mov	r5, r0
 800797c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800797e:	2b00      	cmp	r3, #0
 8007980:	d05a      	beq.n	8007a38 <_dtoa_r+0xa18>
 8007982:	6869      	ldr	r1, [r5, #4]
 8007984:	4658      	mov	r0, fp
 8007986:	f000 f959 	bl	8007c3c <_Balloc>
 800798a:	4606      	mov	r6, r0
 800798c:	b928      	cbnz	r0, 800799a <_dtoa_r+0x97a>
 800798e:	4b84      	ldr	r3, [pc, #528]	@ (8007ba0 <_dtoa_r+0xb80>)
 8007990:	4602      	mov	r2, r0
 8007992:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007996:	f7ff bb5a 	b.w	800704e <_dtoa_r+0x2e>
 800799a:	692a      	ldr	r2, [r5, #16]
 800799c:	3202      	adds	r2, #2
 800799e:	0092      	lsls	r2, r2, #2
 80079a0:	f105 010c 	add.w	r1, r5, #12
 80079a4:	300c      	adds	r0, #12
 80079a6:	f000 fee9 	bl	800877c <memcpy>
 80079aa:	2201      	movs	r2, #1
 80079ac:	4631      	mov	r1, r6
 80079ae:	4658      	mov	r0, fp
 80079b0:	f000 fb52 	bl	8008058 <__lshift>
 80079b4:	f10a 0301 	add.w	r3, sl, #1
 80079b8:	9307      	str	r3, [sp, #28]
 80079ba:	9b00      	ldr	r3, [sp, #0]
 80079bc:	4453      	add	r3, sl
 80079be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079c0:	9b02      	ldr	r3, [sp, #8]
 80079c2:	f003 0301 	and.w	r3, r3, #1
 80079c6:	462f      	mov	r7, r5
 80079c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80079ca:	4605      	mov	r5, r0
 80079cc:	9b07      	ldr	r3, [sp, #28]
 80079ce:	4621      	mov	r1, r4
 80079d0:	3b01      	subs	r3, #1
 80079d2:	4648      	mov	r0, r9
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	f7ff fa98 	bl	8006f0a <quorem>
 80079da:	4639      	mov	r1, r7
 80079dc:	9002      	str	r0, [sp, #8]
 80079de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80079e2:	4648      	mov	r0, r9
 80079e4:	f000 fba4 	bl	8008130 <__mcmp>
 80079e8:	462a      	mov	r2, r5
 80079ea:	9008      	str	r0, [sp, #32]
 80079ec:	4621      	mov	r1, r4
 80079ee:	4658      	mov	r0, fp
 80079f0:	f000 fbba 	bl	8008168 <__mdiff>
 80079f4:	68c2      	ldr	r2, [r0, #12]
 80079f6:	4606      	mov	r6, r0
 80079f8:	bb02      	cbnz	r2, 8007a3c <_dtoa_r+0xa1c>
 80079fa:	4601      	mov	r1, r0
 80079fc:	4648      	mov	r0, r9
 80079fe:	f000 fb97 	bl	8008130 <__mcmp>
 8007a02:	4602      	mov	r2, r0
 8007a04:	4631      	mov	r1, r6
 8007a06:	4658      	mov	r0, fp
 8007a08:	920e      	str	r2, [sp, #56]	@ 0x38
 8007a0a:	f000 f957 	bl	8007cbc <_Bfree>
 8007a0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a12:	9e07      	ldr	r6, [sp, #28]
 8007a14:	ea43 0102 	orr.w	r1, r3, r2
 8007a18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a1a:	4319      	orrs	r1, r3
 8007a1c:	d110      	bne.n	8007a40 <_dtoa_r+0xa20>
 8007a1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007a22:	d029      	beq.n	8007a78 <_dtoa_r+0xa58>
 8007a24:	9b08      	ldr	r3, [sp, #32]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	dd02      	ble.n	8007a30 <_dtoa_r+0xa10>
 8007a2a:	9b02      	ldr	r3, [sp, #8]
 8007a2c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007a30:	9b00      	ldr	r3, [sp, #0]
 8007a32:	f883 8000 	strb.w	r8, [r3]
 8007a36:	e63f      	b.n	80076b8 <_dtoa_r+0x698>
 8007a38:	4628      	mov	r0, r5
 8007a3a:	e7bb      	b.n	80079b4 <_dtoa_r+0x994>
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	e7e1      	b.n	8007a04 <_dtoa_r+0x9e4>
 8007a40:	9b08      	ldr	r3, [sp, #32]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	db04      	blt.n	8007a50 <_dtoa_r+0xa30>
 8007a46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a48:	430b      	orrs	r3, r1
 8007a4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a4c:	430b      	orrs	r3, r1
 8007a4e:	d120      	bne.n	8007a92 <_dtoa_r+0xa72>
 8007a50:	2a00      	cmp	r2, #0
 8007a52:	dded      	ble.n	8007a30 <_dtoa_r+0xa10>
 8007a54:	4649      	mov	r1, r9
 8007a56:	2201      	movs	r2, #1
 8007a58:	4658      	mov	r0, fp
 8007a5a:	f000 fafd 	bl	8008058 <__lshift>
 8007a5e:	4621      	mov	r1, r4
 8007a60:	4681      	mov	r9, r0
 8007a62:	f000 fb65 	bl	8008130 <__mcmp>
 8007a66:	2800      	cmp	r0, #0
 8007a68:	dc03      	bgt.n	8007a72 <_dtoa_r+0xa52>
 8007a6a:	d1e1      	bne.n	8007a30 <_dtoa_r+0xa10>
 8007a6c:	f018 0f01 	tst.w	r8, #1
 8007a70:	d0de      	beq.n	8007a30 <_dtoa_r+0xa10>
 8007a72:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007a76:	d1d8      	bne.n	8007a2a <_dtoa_r+0xa0a>
 8007a78:	9a00      	ldr	r2, [sp, #0]
 8007a7a:	2339      	movs	r3, #57	@ 0x39
 8007a7c:	7013      	strb	r3, [r2, #0]
 8007a7e:	4633      	mov	r3, r6
 8007a80:	461e      	mov	r6, r3
 8007a82:	3b01      	subs	r3, #1
 8007a84:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007a88:	2a39      	cmp	r2, #57	@ 0x39
 8007a8a:	d052      	beq.n	8007b32 <_dtoa_r+0xb12>
 8007a8c:	3201      	adds	r2, #1
 8007a8e:	701a      	strb	r2, [r3, #0]
 8007a90:	e612      	b.n	80076b8 <_dtoa_r+0x698>
 8007a92:	2a00      	cmp	r2, #0
 8007a94:	dd07      	ble.n	8007aa6 <_dtoa_r+0xa86>
 8007a96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007a9a:	d0ed      	beq.n	8007a78 <_dtoa_r+0xa58>
 8007a9c:	9a00      	ldr	r2, [sp, #0]
 8007a9e:	f108 0301 	add.w	r3, r8, #1
 8007aa2:	7013      	strb	r3, [r2, #0]
 8007aa4:	e608      	b.n	80076b8 <_dtoa_r+0x698>
 8007aa6:	9b07      	ldr	r3, [sp, #28]
 8007aa8:	9a07      	ldr	r2, [sp, #28]
 8007aaa:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007aae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d028      	beq.n	8007b06 <_dtoa_r+0xae6>
 8007ab4:	4649      	mov	r1, r9
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	220a      	movs	r2, #10
 8007aba:	4658      	mov	r0, fp
 8007abc:	f000 f920 	bl	8007d00 <__multadd>
 8007ac0:	42af      	cmp	r7, r5
 8007ac2:	4681      	mov	r9, r0
 8007ac4:	f04f 0300 	mov.w	r3, #0
 8007ac8:	f04f 020a 	mov.w	r2, #10
 8007acc:	4639      	mov	r1, r7
 8007ace:	4658      	mov	r0, fp
 8007ad0:	d107      	bne.n	8007ae2 <_dtoa_r+0xac2>
 8007ad2:	f000 f915 	bl	8007d00 <__multadd>
 8007ad6:	4607      	mov	r7, r0
 8007ad8:	4605      	mov	r5, r0
 8007ada:	9b07      	ldr	r3, [sp, #28]
 8007adc:	3301      	adds	r3, #1
 8007ade:	9307      	str	r3, [sp, #28]
 8007ae0:	e774      	b.n	80079cc <_dtoa_r+0x9ac>
 8007ae2:	f000 f90d 	bl	8007d00 <__multadd>
 8007ae6:	4629      	mov	r1, r5
 8007ae8:	4607      	mov	r7, r0
 8007aea:	2300      	movs	r3, #0
 8007aec:	220a      	movs	r2, #10
 8007aee:	4658      	mov	r0, fp
 8007af0:	f000 f906 	bl	8007d00 <__multadd>
 8007af4:	4605      	mov	r5, r0
 8007af6:	e7f0      	b.n	8007ada <_dtoa_r+0xaba>
 8007af8:	9b00      	ldr	r3, [sp, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	bfcc      	ite	gt
 8007afe:	461e      	movgt	r6, r3
 8007b00:	2601      	movle	r6, #1
 8007b02:	4456      	add	r6, sl
 8007b04:	2700      	movs	r7, #0
 8007b06:	4649      	mov	r1, r9
 8007b08:	2201      	movs	r2, #1
 8007b0a:	4658      	mov	r0, fp
 8007b0c:	f000 faa4 	bl	8008058 <__lshift>
 8007b10:	4621      	mov	r1, r4
 8007b12:	4681      	mov	r9, r0
 8007b14:	f000 fb0c 	bl	8008130 <__mcmp>
 8007b18:	2800      	cmp	r0, #0
 8007b1a:	dcb0      	bgt.n	8007a7e <_dtoa_r+0xa5e>
 8007b1c:	d102      	bne.n	8007b24 <_dtoa_r+0xb04>
 8007b1e:	f018 0f01 	tst.w	r8, #1
 8007b22:	d1ac      	bne.n	8007a7e <_dtoa_r+0xa5e>
 8007b24:	4633      	mov	r3, r6
 8007b26:	461e      	mov	r6, r3
 8007b28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b2c:	2a30      	cmp	r2, #48	@ 0x30
 8007b2e:	d0fa      	beq.n	8007b26 <_dtoa_r+0xb06>
 8007b30:	e5c2      	b.n	80076b8 <_dtoa_r+0x698>
 8007b32:	459a      	cmp	sl, r3
 8007b34:	d1a4      	bne.n	8007a80 <_dtoa_r+0xa60>
 8007b36:	9b04      	ldr	r3, [sp, #16]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	9304      	str	r3, [sp, #16]
 8007b3c:	2331      	movs	r3, #49	@ 0x31
 8007b3e:	f88a 3000 	strb.w	r3, [sl]
 8007b42:	e5b9      	b.n	80076b8 <_dtoa_r+0x698>
 8007b44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007b46:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007ba4 <_dtoa_r+0xb84>
 8007b4a:	b11b      	cbz	r3, 8007b54 <_dtoa_r+0xb34>
 8007b4c:	f10a 0308 	add.w	r3, sl, #8
 8007b50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007b52:	6013      	str	r3, [r2, #0]
 8007b54:	4650      	mov	r0, sl
 8007b56:	b019      	add	sp, #100	@ 0x64
 8007b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	f77f ae37 	ble.w	80077d2 <_dtoa_r+0x7b2>
 8007b64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b66:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b68:	2001      	movs	r0, #1
 8007b6a:	e655      	b.n	8007818 <_dtoa_r+0x7f8>
 8007b6c:	9b00      	ldr	r3, [sp, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	f77f aed6 	ble.w	8007920 <_dtoa_r+0x900>
 8007b74:	4656      	mov	r6, sl
 8007b76:	4621      	mov	r1, r4
 8007b78:	4648      	mov	r0, r9
 8007b7a:	f7ff f9c6 	bl	8006f0a <quorem>
 8007b7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007b82:	f806 8b01 	strb.w	r8, [r6], #1
 8007b86:	9b00      	ldr	r3, [sp, #0]
 8007b88:	eba6 020a 	sub.w	r2, r6, sl
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	ddb3      	ble.n	8007af8 <_dtoa_r+0xad8>
 8007b90:	4649      	mov	r1, r9
 8007b92:	2300      	movs	r3, #0
 8007b94:	220a      	movs	r2, #10
 8007b96:	4658      	mov	r0, fp
 8007b98:	f000 f8b2 	bl	8007d00 <__multadd>
 8007b9c:	4681      	mov	r9, r0
 8007b9e:	e7ea      	b.n	8007b76 <_dtoa_r+0xb56>
 8007ba0:	08008ed8 	.word	0x08008ed8
 8007ba4:	08008e5c 	.word	0x08008e5c

08007ba8 <_free_r>:
 8007ba8:	b538      	push	{r3, r4, r5, lr}
 8007baa:	4605      	mov	r5, r0
 8007bac:	2900      	cmp	r1, #0
 8007bae:	d041      	beq.n	8007c34 <_free_r+0x8c>
 8007bb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bb4:	1f0c      	subs	r4, r1, #4
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	bfb8      	it	lt
 8007bba:	18e4      	addlt	r4, r4, r3
 8007bbc:	f7fe fb48 	bl	8006250 <__malloc_lock>
 8007bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8007c38 <_free_r+0x90>)
 8007bc2:	6813      	ldr	r3, [r2, #0]
 8007bc4:	b933      	cbnz	r3, 8007bd4 <_free_r+0x2c>
 8007bc6:	6063      	str	r3, [r4, #4]
 8007bc8:	6014      	str	r4, [r2, #0]
 8007bca:	4628      	mov	r0, r5
 8007bcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bd0:	f7fe bb44 	b.w	800625c <__malloc_unlock>
 8007bd4:	42a3      	cmp	r3, r4
 8007bd6:	d908      	bls.n	8007bea <_free_r+0x42>
 8007bd8:	6820      	ldr	r0, [r4, #0]
 8007bda:	1821      	adds	r1, r4, r0
 8007bdc:	428b      	cmp	r3, r1
 8007bde:	bf01      	itttt	eq
 8007be0:	6819      	ldreq	r1, [r3, #0]
 8007be2:	685b      	ldreq	r3, [r3, #4]
 8007be4:	1809      	addeq	r1, r1, r0
 8007be6:	6021      	streq	r1, [r4, #0]
 8007be8:	e7ed      	b.n	8007bc6 <_free_r+0x1e>
 8007bea:	461a      	mov	r2, r3
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	b10b      	cbz	r3, 8007bf4 <_free_r+0x4c>
 8007bf0:	42a3      	cmp	r3, r4
 8007bf2:	d9fa      	bls.n	8007bea <_free_r+0x42>
 8007bf4:	6811      	ldr	r1, [r2, #0]
 8007bf6:	1850      	adds	r0, r2, r1
 8007bf8:	42a0      	cmp	r0, r4
 8007bfa:	d10b      	bne.n	8007c14 <_free_r+0x6c>
 8007bfc:	6820      	ldr	r0, [r4, #0]
 8007bfe:	4401      	add	r1, r0
 8007c00:	1850      	adds	r0, r2, r1
 8007c02:	4283      	cmp	r3, r0
 8007c04:	6011      	str	r1, [r2, #0]
 8007c06:	d1e0      	bne.n	8007bca <_free_r+0x22>
 8007c08:	6818      	ldr	r0, [r3, #0]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	6053      	str	r3, [r2, #4]
 8007c0e:	4408      	add	r0, r1
 8007c10:	6010      	str	r0, [r2, #0]
 8007c12:	e7da      	b.n	8007bca <_free_r+0x22>
 8007c14:	d902      	bls.n	8007c1c <_free_r+0x74>
 8007c16:	230c      	movs	r3, #12
 8007c18:	602b      	str	r3, [r5, #0]
 8007c1a:	e7d6      	b.n	8007bca <_free_r+0x22>
 8007c1c:	6820      	ldr	r0, [r4, #0]
 8007c1e:	1821      	adds	r1, r4, r0
 8007c20:	428b      	cmp	r3, r1
 8007c22:	bf04      	itt	eq
 8007c24:	6819      	ldreq	r1, [r3, #0]
 8007c26:	685b      	ldreq	r3, [r3, #4]
 8007c28:	6063      	str	r3, [r4, #4]
 8007c2a:	bf04      	itt	eq
 8007c2c:	1809      	addeq	r1, r1, r0
 8007c2e:	6021      	streq	r1, [r4, #0]
 8007c30:	6054      	str	r4, [r2, #4]
 8007c32:	e7ca      	b.n	8007bca <_free_r+0x22>
 8007c34:	bd38      	pop	{r3, r4, r5, pc}
 8007c36:	bf00      	nop
 8007c38:	200003ec 	.word	0x200003ec

08007c3c <_Balloc>:
 8007c3c:	b570      	push	{r4, r5, r6, lr}
 8007c3e:	69c6      	ldr	r6, [r0, #28]
 8007c40:	4604      	mov	r4, r0
 8007c42:	460d      	mov	r5, r1
 8007c44:	b976      	cbnz	r6, 8007c64 <_Balloc+0x28>
 8007c46:	2010      	movs	r0, #16
 8007c48:	f7fe fa50 	bl	80060ec <malloc>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	61e0      	str	r0, [r4, #28]
 8007c50:	b920      	cbnz	r0, 8007c5c <_Balloc+0x20>
 8007c52:	4b18      	ldr	r3, [pc, #96]	@ (8007cb4 <_Balloc+0x78>)
 8007c54:	4818      	ldr	r0, [pc, #96]	@ (8007cb8 <_Balloc+0x7c>)
 8007c56:	216b      	movs	r1, #107	@ 0x6b
 8007c58:	f000 fd9e 	bl	8008798 <__assert_func>
 8007c5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c60:	6006      	str	r6, [r0, #0]
 8007c62:	60c6      	str	r6, [r0, #12]
 8007c64:	69e6      	ldr	r6, [r4, #28]
 8007c66:	68f3      	ldr	r3, [r6, #12]
 8007c68:	b183      	cbz	r3, 8007c8c <_Balloc+0x50>
 8007c6a:	69e3      	ldr	r3, [r4, #28]
 8007c6c:	68db      	ldr	r3, [r3, #12]
 8007c6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c72:	b9b8      	cbnz	r0, 8007ca4 <_Balloc+0x68>
 8007c74:	2101      	movs	r1, #1
 8007c76:	fa01 f605 	lsl.w	r6, r1, r5
 8007c7a:	1d72      	adds	r2, r6, #5
 8007c7c:	0092      	lsls	r2, r2, #2
 8007c7e:	4620      	mov	r0, r4
 8007c80:	f000 fda8 	bl	80087d4 <_calloc_r>
 8007c84:	b160      	cbz	r0, 8007ca0 <_Balloc+0x64>
 8007c86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c8a:	e00e      	b.n	8007caa <_Balloc+0x6e>
 8007c8c:	2221      	movs	r2, #33	@ 0x21
 8007c8e:	2104      	movs	r1, #4
 8007c90:	4620      	mov	r0, r4
 8007c92:	f000 fd9f 	bl	80087d4 <_calloc_r>
 8007c96:	69e3      	ldr	r3, [r4, #28]
 8007c98:	60f0      	str	r0, [r6, #12]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1e4      	bne.n	8007c6a <_Balloc+0x2e>
 8007ca0:	2000      	movs	r0, #0
 8007ca2:	bd70      	pop	{r4, r5, r6, pc}
 8007ca4:	6802      	ldr	r2, [r0, #0]
 8007ca6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007caa:	2300      	movs	r3, #0
 8007cac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007cb0:	e7f7      	b.n	8007ca2 <_Balloc+0x66>
 8007cb2:	bf00      	nop
 8007cb4:	08008e69 	.word	0x08008e69
 8007cb8:	08008ee9 	.word	0x08008ee9

08007cbc <_Bfree>:
 8007cbc:	b570      	push	{r4, r5, r6, lr}
 8007cbe:	69c6      	ldr	r6, [r0, #28]
 8007cc0:	4605      	mov	r5, r0
 8007cc2:	460c      	mov	r4, r1
 8007cc4:	b976      	cbnz	r6, 8007ce4 <_Bfree+0x28>
 8007cc6:	2010      	movs	r0, #16
 8007cc8:	f7fe fa10 	bl	80060ec <malloc>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	61e8      	str	r0, [r5, #28]
 8007cd0:	b920      	cbnz	r0, 8007cdc <_Bfree+0x20>
 8007cd2:	4b09      	ldr	r3, [pc, #36]	@ (8007cf8 <_Bfree+0x3c>)
 8007cd4:	4809      	ldr	r0, [pc, #36]	@ (8007cfc <_Bfree+0x40>)
 8007cd6:	218f      	movs	r1, #143	@ 0x8f
 8007cd8:	f000 fd5e 	bl	8008798 <__assert_func>
 8007cdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ce0:	6006      	str	r6, [r0, #0]
 8007ce2:	60c6      	str	r6, [r0, #12]
 8007ce4:	b13c      	cbz	r4, 8007cf6 <_Bfree+0x3a>
 8007ce6:	69eb      	ldr	r3, [r5, #28]
 8007ce8:	6862      	ldr	r2, [r4, #4]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007cf0:	6021      	str	r1, [r4, #0]
 8007cf2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007cf6:	bd70      	pop	{r4, r5, r6, pc}
 8007cf8:	08008e69 	.word	0x08008e69
 8007cfc:	08008ee9 	.word	0x08008ee9

08007d00 <__multadd>:
 8007d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d04:	690d      	ldr	r5, [r1, #16]
 8007d06:	4607      	mov	r7, r0
 8007d08:	460c      	mov	r4, r1
 8007d0a:	461e      	mov	r6, r3
 8007d0c:	f101 0c14 	add.w	ip, r1, #20
 8007d10:	2000      	movs	r0, #0
 8007d12:	f8dc 3000 	ldr.w	r3, [ip]
 8007d16:	b299      	uxth	r1, r3
 8007d18:	fb02 6101 	mla	r1, r2, r1, r6
 8007d1c:	0c1e      	lsrs	r6, r3, #16
 8007d1e:	0c0b      	lsrs	r3, r1, #16
 8007d20:	fb02 3306 	mla	r3, r2, r6, r3
 8007d24:	b289      	uxth	r1, r1
 8007d26:	3001      	adds	r0, #1
 8007d28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d2c:	4285      	cmp	r5, r0
 8007d2e:	f84c 1b04 	str.w	r1, [ip], #4
 8007d32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d36:	dcec      	bgt.n	8007d12 <__multadd+0x12>
 8007d38:	b30e      	cbz	r6, 8007d7e <__multadd+0x7e>
 8007d3a:	68a3      	ldr	r3, [r4, #8]
 8007d3c:	42ab      	cmp	r3, r5
 8007d3e:	dc19      	bgt.n	8007d74 <__multadd+0x74>
 8007d40:	6861      	ldr	r1, [r4, #4]
 8007d42:	4638      	mov	r0, r7
 8007d44:	3101      	adds	r1, #1
 8007d46:	f7ff ff79 	bl	8007c3c <_Balloc>
 8007d4a:	4680      	mov	r8, r0
 8007d4c:	b928      	cbnz	r0, 8007d5a <__multadd+0x5a>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	4b0c      	ldr	r3, [pc, #48]	@ (8007d84 <__multadd+0x84>)
 8007d52:	480d      	ldr	r0, [pc, #52]	@ (8007d88 <__multadd+0x88>)
 8007d54:	21ba      	movs	r1, #186	@ 0xba
 8007d56:	f000 fd1f 	bl	8008798 <__assert_func>
 8007d5a:	6922      	ldr	r2, [r4, #16]
 8007d5c:	3202      	adds	r2, #2
 8007d5e:	f104 010c 	add.w	r1, r4, #12
 8007d62:	0092      	lsls	r2, r2, #2
 8007d64:	300c      	adds	r0, #12
 8007d66:	f000 fd09 	bl	800877c <memcpy>
 8007d6a:	4621      	mov	r1, r4
 8007d6c:	4638      	mov	r0, r7
 8007d6e:	f7ff ffa5 	bl	8007cbc <_Bfree>
 8007d72:	4644      	mov	r4, r8
 8007d74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d78:	3501      	adds	r5, #1
 8007d7a:	615e      	str	r6, [r3, #20]
 8007d7c:	6125      	str	r5, [r4, #16]
 8007d7e:	4620      	mov	r0, r4
 8007d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d84:	08008ed8 	.word	0x08008ed8
 8007d88:	08008ee9 	.word	0x08008ee9

08007d8c <__hi0bits>:
 8007d8c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007d90:	4603      	mov	r3, r0
 8007d92:	bf36      	itet	cc
 8007d94:	0403      	lslcc	r3, r0, #16
 8007d96:	2000      	movcs	r0, #0
 8007d98:	2010      	movcc	r0, #16
 8007d9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d9e:	bf3c      	itt	cc
 8007da0:	021b      	lslcc	r3, r3, #8
 8007da2:	3008      	addcc	r0, #8
 8007da4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007da8:	bf3c      	itt	cc
 8007daa:	011b      	lslcc	r3, r3, #4
 8007dac:	3004      	addcc	r0, #4
 8007dae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007db2:	bf3c      	itt	cc
 8007db4:	009b      	lslcc	r3, r3, #2
 8007db6:	3002      	addcc	r0, #2
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	db05      	blt.n	8007dc8 <__hi0bits+0x3c>
 8007dbc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007dc0:	f100 0001 	add.w	r0, r0, #1
 8007dc4:	bf08      	it	eq
 8007dc6:	2020      	moveq	r0, #32
 8007dc8:	4770      	bx	lr

08007dca <__lo0bits>:
 8007dca:	6803      	ldr	r3, [r0, #0]
 8007dcc:	4602      	mov	r2, r0
 8007dce:	f013 0007 	ands.w	r0, r3, #7
 8007dd2:	d00b      	beq.n	8007dec <__lo0bits+0x22>
 8007dd4:	07d9      	lsls	r1, r3, #31
 8007dd6:	d421      	bmi.n	8007e1c <__lo0bits+0x52>
 8007dd8:	0798      	lsls	r0, r3, #30
 8007dda:	bf49      	itett	mi
 8007ddc:	085b      	lsrmi	r3, r3, #1
 8007dde:	089b      	lsrpl	r3, r3, #2
 8007de0:	2001      	movmi	r0, #1
 8007de2:	6013      	strmi	r3, [r2, #0]
 8007de4:	bf5c      	itt	pl
 8007de6:	6013      	strpl	r3, [r2, #0]
 8007de8:	2002      	movpl	r0, #2
 8007dea:	4770      	bx	lr
 8007dec:	b299      	uxth	r1, r3
 8007dee:	b909      	cbnz	r1, 8007df4 <__lo0bits+0x2a>
 8007df0:	0c1b      	lsrs	r3, r3, #16
 8007df2:	2010      	movs	r0, #16
 8007df4:	b2d9      	uxtb	r1, r3
 8007df6:	b909      	cbnz	r1, 8007dfc <__lo0bits+0x32>
 8007df8:	3008      	adds	r0, #8
 8007dfa:	0a1b      	lsrs	r3, r3, #8
 8007dfc:	0719      	lsls	r1, r3, #28
 8007dfe:	bf04      	itt	eq
 8007e00:	091b      	lsreq	r3, r3, #4
 8007e02:	3004      	addeq	r0, #4
 8007e04:	0799      	lsls	r1, r3, #30
 8007e06:	bf04      	itt	eq
 8007e08:	089b      	lsreq	r3, r3, #2
 8007e0a:	3002      	addeq	r0, #2
 8007e0c:	07d9      	lsls	r1, r3, #31
 8007e0e:	d403      	bmi.n	8007e18 <__lo0bits+0x4e>
 8007e10:	085b      	lsrs	r3, r3, #1
 8007e12:	f100 0001 	add.w	r0, r0, #1
 8007e16:	d003      	beq.n	8007e20 <__lo0bits+0x56>
 8007e18:	6013      	str	r3, [r2, #0]
 8007e1a:	4770      	bx	lr
 8007e1c:	2000      	movs	r0, #0
 8007e1e:	4770      	bx	lr
 8007e20:	2020      	movs	r0, #32
 8007e22:	4770      	bx	lr

08007e24 <__i2b>:
 8007e24:	b510      	push	{r4, lr}
 8007e26:	460c      	mov	r4, r1
 8007e28:	2101      	movs	r1, #1
 8007e2a:	f7ff ff07 	bl	8007c3c <_Balloc>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	b928      	cbnz	r0, 8007e3e <__i2b+0x1a>
 8007e32:	4b05      	ldr	r3, [pc, #20]	@ (8007e48 <__i2b+0x24>)
 8007e34:	4805      	ldr	r0, [pc, #20]	@ (8007e4c <__i2b+0x28>)
 8007e36:	f240 1145 	movw	r1, #325	@ 0x145
 8007e3a:	f000 fcad 	bl	8008798 <__assert_func>
 8007e3e:	2301      	movs	r3, #1
 8007e40:	6144      	str	r4, [r0, #20]
 8007e42:	6103      	str	r3, [r0, #16]
 8007e44:	bd10      	pop	{r4, pc}
 8007e46:	bf00      	nop
 8007e48:	08008ed8 	.word	0x08008ed8
 8007e4c:	08008ee9 	.word	0x08008ee9

08007e50 <__multiply>:
 8007e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e54:	4614      	mov	r4, r2
 8007e56:	690a      	ldr	r2, [r1, #16]
 8007e58:	6923      	ldr	r3, [r4, #16]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	bfa8      	it	ge
 8007e5e:	4623      	movge	r3, r4
 8007e60:	460f      	mov	r7, r1
 8007e62:	bfa4      	itt	ge
 8007e64:	460c      	movge	r4, r1
 8007e66:	461f      	movge	r7, r3
 8007e68:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007e6c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007e70:	68a3      	ldr	r3, [r4, #8]
 8007e72:	6861      	ldr	r1, [r4, #4]
 8007e74:	eb0a 0609 	add.w	r6, sl, r9
 8007e78:	42b3      	cmp	r3, r6
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	bfb8      	it	lt
 8007e7e:	3101      	addlt	r1, #1
 8007e80:	f7ff fedc 	bl	8007c3c <_Balloc>
 8007e84:	b930      	cbnz	r0, 8007e94 <__multiply+0x44>
 8007e86:	4602      	mov	r2, r0
 8007e88:	4b44      	ldr	r3, [pc, #272]	@ (8007f9c <__multiply+0x14c>)
 8007e8a:	4845      	ldr	r0, [pc, #276]	@ (8007fa0 <__multiply+0x150>)
 8007e8c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007e90:	f000 fc82 	bl	8008798 <__assert_func>
 8007e94:	f100 0514 	add.w	r5, r0, #20
 8007e98:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007e9c:	462b      	mov	r3, r5
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	4543      	cmp	r3, r8
 8007ea2:	d321      	bcc.n	8007ee8 <__multiply+0x98>
 8007ea4:	f107 0114 	add.w	r1, r7, #20
 8007ea8:	f104 0214 	add.w	r2, r4, #20
 8007eac:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007eb0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007eb4:	9302      	str	r3, [sp, #8]
 8007eb6:	1b13      	subs	r3, r2, r4
 8007eb8:	3b15      	subs	r3, #21
 8007eba:	f023 0303 	bic.w	r3, r3, #3
 8007ebe:	3304      	adds	r3, #4
 8007ec0:	f104 0715 	add.w	r7, r4, #21
 8007ec4:	42ba      	cmp	r2, r7
 8007ec6:	bf38      	it	cc
 8007ec8:	2304      	movcc	r3, #4
 8007eca:	9301      	str	r3, [sp, #4]
 8007ecc:	9b02      	ldr	r3, [sp, #8]
 8007ece:	9103      	str	r1, [sp, #12]
 8007ed0:	428b      	cmp	r3, r1
 8007ed2:	d80c      	bhi.n	8007eee <__multiply+0x9e>
 8007ed4:	2e00      	cmp	r6, #0
 8007ed6:	dd03      	ble.n	8007ee0 <__multiply+0x90>
 8007ed8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d05b      	beq.n	8007f98 <__multiply+0x148>
 8007ee0:	6106      	str	r6, [r0, #16]
 8007ee2:	b005      	add	sp, #20
 8007ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee8:	f843 2b04 	str.w	r2, [r3], #4
 8007eec:	e7d8      	b.n	8007ea0 <__multiply+0x50>
 8007eee:	f8b1 a000 	ldrh.w	sl, [r1]
 8007ef2:	f1ba 0f00 	cmp.w	sl, #0
 8007ef6:	d024      	beq.n	8007f42 <__multiply+0xf2>
 8007ef8:	f104 0e14 	add.w	lr, r4, #20
 8007efc:	46a9      	mov	r9, r5
 8007efe:	f04f 0c00 	mov.w	ip, #0
 8007f02:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f06:	f8d9 3000 	ldr.w	r3, [r9]
 8007f0a:	fa1f fb87 	uxth.w	fp, r7
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	fb0a 330b 	mla	r3, sl, fp, r3
 8007f14:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007f18:	f8d9 7000 	ldr.w	r7, [r9]
 8007f1c:	4463      	add	r3, ip
 8007f1e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007f22:	fb0a c70b 	mla	r7, sl, fp, ip
 8007f26:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007f30:	4572      	cmp	r2, lr
 8007f32:	f849 3b04 	str.w	r3, [r9], #4
 8007f36:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007f3a:	d8e2      	bhi.n	8007f02 <__multiply+0xb2>
 8007f3c:	9b01      	ldr	r3, [sp, #4]
 8007f3e:	f845 c003 	str.w	ip, [r5, r3]
 8007f42:	9b03      	ldr	r3, [sp, #12]
 8007f44:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007f48:	3104      	adds	r1, #4
 8007f4a:	f1b9 0f00 	cmp.w	r9, #0
 8007f4e:	d021      	beq.n	8007f94 <__multiply+0x144>
 8007f50:	682b      	ldr	r3, [r5, #0]
 8007f52:	f104 0c14 	add.w	ip, r4, #20
 8007f56:	46ae      	mov	lr, r5
 8007f58:	f04f 0a00 	mov.w	sl, #0
 8007f5c:	f8bc b000 	ldrh.w	fp, [ip]
 8007f60:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007f64:	fb09 770b 	mla	r7, r9, fp, r7
 8007f68:	4457      	add	r7, sl
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007f70:	f84e 3b04 	str.w	r3, [lr], #4
 8007f74:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007f78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f7c:	f8be 3000 	ldrh.w	r3, [lr]
 8007f80:	fb09 330a 	mla	r3, r9, sl, r3
 8007f84:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007f88:	4562      	cmp	r2, ip
 8007f8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f8e:	d8e5      	bhi.n	8007f5c <__multiply+0x10c>
 8007f90:	9f01      	ldr	r7, [sp, #4]
 8007f92:	51eb      	str	r3, [r5, r7]
 8007f94:	3504      	adds	r5, #4
 8007f96:	e799      	b.n	8007ecc <__multiply+0x7c>
 8007f98:	3e01      	subs	r6, #1
 8007f9a:	e79b      	b.n	8007ed4 <__multiply+0x84>
 8007f9c:	08008ed8 	.word	0x08008ed8
 8007fa0:	08008ee9 	.word	0x08008ee9

08007fa4 <__pow5mult>:
 8007fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fa8:	4615      	mov	r5, r2
 8007faa:	f012 0203 	ands.w	r2, r2, #3
 8007fae:	4607      	mov	r7, r0
 8007fb0:	460e      	mov	r6, r1
 8007fb2:	d007      	beq.n	8007fc4 <__pow5mult+0x20>
 8007fb4:	4c25      	ldr	r4, [pc, #148]	@ (800804c <__pow5mult+0xa8>)
 8007fb6:	3a01      	subs	r2, #1
 8007fb8:	2300      	movs	r3, #0
 8007fba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007fbe:	f7ff fe9f 	bl	8007d00 <__multadd>
 8007fc2:	4606      	mov	r6, r0
 8007fc4:	10ad      	asrs	r5, r5, #2
 8007fc6:	d03d      	beq.n	8008044 <__pow5mult+0xa0>
 8007fc8:	69fc      	ldr	r4, [r7, #28]
 8007fca:	b97c      	cbnz	r4, 8007fec <__pow5mult+0x48>
 8007fcc:	2010      	movs	r0, #16
 8007fce:	f7fe f88d 	bl	80060ec <malloc>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	61f8      	str	r0, [r7, #28]
 8007fd6:	b928      	cbnz	r0, 8007fe4 <__pow5mult+0x40>
 8007fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8008050 <__pow5mult+0xac>)
 8007fda:	481e      	ldr	r0, [pc, #120]	@ (8008054 <__pow5mult+0xb0>)
 8007fdc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007fe0:	f000 fbda 	bl	8008798 <__assert_func>
 8007fe4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007fe8:	6004      	str	r4, [r0, #0]
 8007fea:	60c4      	str	r4, [r0, #12]
 8007fec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007ff0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ff4:	b94c      	cbnz	r4, 800800a <__pow5mult+0x66>
 8007ff6:	f240 2171 	movw	r1, #625	@ 0x271
 8007ffa:	4638      	mov	r0, r7
 8007ffc:	f7ff ff12 	bl	8007e24 <__i2b>
 8008000:	2300      	movs	r3, #0
 8008002:	f8c8 0008 	str.w	r0, [r8, #8]
 8008006:	4604      	mov	r4, r0
 8008008:	6003      	str	r3, [r0, #0]
 800800a:	f04f 0900 	mov.w	r9, #0
 800800e:	07eb      	lsls	r3, r5, #31
 8008010:	d50a      	bpl.n	8008028 <__pow5mult+0x84>
 8008012:	4631      	mov	r1, r6
 8008014:	4622      	mov	r2, r4
 8008016:	4638      	mov	r0, r7
 8008018:	f7ff ff1a 	bl	8007e50 <__multiply>
 800801c:	4631      	mov	r1, r6
 800801e:	4680      	mov	r8, r0
 8008020:	4638      	mov	r0, r7
 8008022:	f7ff fe4b 	bl	8007cbc <_Bfree>
 8008026:	4646      	mov	r6, r8
 8008028:	106d      	asrs	r5, r5, #1
 800802a:	d00b      	beq.n	8008044 <__pow5mult+0xa0>
 800802c:	6820      	ldr	r0, [r4, #0]
 800802e:	b938      	cbnz	r0, 8008040 <__pow5mult+0x9c>
 8008030:	4622      	mov	r2, r4
 8008032:	4621      	mov	r1, r4
 8008034:	4638      	mov	r0, r7
 8008036:	f7ff ff0b 	bl	8007e50 <__multiply>
 800803a:	6020      	str	r0, [r4, #0]
 800803c:	f8c0 9000 	str.w	r9, [r0]
 8008040:	4604      	mov	r4, r0
 8008042:	e7e4      	b.n	800800e <__pow5mult+0x6a>
 8008044:	4630      	mov	r0, r6
 8008046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800804a:	bf00      	nop
 800804c:	08008f44 	.word	0x08008f44
 8008050:	08008e69 	.word	0x08008e69
 8008054:	08008ee9 	.word	0x08008ee9

08008058 <__lshift>:
 8008058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800805c:	460c      	mov	r4, r1
 800805e:	6849      	ldr	r1, [r1, #4]
 8008060:	6923      	ldr	r3, [r4, #16]
 8008062:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008066:	68a3      	ldr	r3, [r4, #8]
 8008068:	4607      	mov	r7, r0
 800806a:	4691      	mov	r9, r2
 800806c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008070:	f108 0601 	add.w	r6, r8, #1
 8008074:	42b3      	cmp	r3, r6
 8008076:	db0b      	blt.n	8008090 <__lshift+0x38>
 8008078:	4638      	mov	r0, r7
 800807a:	f7ff fddf 	bl	8007c3c <_Balloc>
 800807e:	4605      	mov	r5, r0
 8008080:	b948      	cbnz	r0, 8008096 <__lshift+0x3e>
 8008082:	4602      	mov	r2, r0
 8008084:	4b28      	ldr	r3, [pc, #160]	@ (8008128 <__lshift+0xd0>)
 8008086:	4829      	ldr	r0, [pc, #164]	@ (800812c <__lshift+0xd4>)
 8008088:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800808c:	f000 fb84 	bl	8008798 <__assert_func>
 8008090:	3101      	adds	r1, #1
 8008092:	005b      	lsls	r3, r3, #1
 8008094:	e7ee      	b.n	8008074 <__lshift+0x1c>
 8008096:	2300      	movs	r3, #0
 8008098:	f100 0114 	add.w	r1, r0, #20
 800809c:	f100 0210 	add.w	r2, r0, #16
 80080a0:	4618      	mov	r0, r3
 80080a2:	4553      	cmp	r3, sl
 80080a4:	db33      	blt.n	800810e <__lshift+0xb6>
 80080a6:	6920      	ldr	r0, [r4, #16]
 80080a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080ac:	f104 0314 	add.w	r3, r4, #20
 80080b0:	f019 091f 	ands.w	r9, r9, #31
 80080b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80080b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80080bc:	d02b      	beq.n	8008116 <__lshift+0xbe>
 80080be:	f1c9 0e20 	rsb	lr, r9, #32
 80080c2:	468a      	mov	sl, r1
 80080c4:	2200      	movs	r2, #0
 80080c6:	6818      	ldr	r0, [r3, #0]
 80080c8:	fa00 f009 	lsl.w	r0, r0, r9
 80080cc:	4310      	orrs	r0, r2
 80080ce:	f84a 0b04 	str.w	r0, [sl], #4
 80080d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80080d6:	459c      	cmp	ip, r3
 80080d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80080dc:	d8f3      	bhi.n	80080c6 <__lshift+0x6e>
 80080de:	ebac 0304 	sub.w	r3, ip, r4
 80080e2:	3b15      	subs	r3, #21
 80080e4:	f023 0303 	bic.w	r3, r3, #3
 80080e8:	3304      	adds	r3, #4
 80080ea:	f104 0015 	add.w	r0, r4, #21
 80080ee:	4584      	cmp	ip, r0
 80080f0:	bf38      	it	cc
 80080f2:	2304      	movcc	r3, #4
 80080f4:	50ca      	str	r2, [r1, r3]
 80080f6:	b10a      	cbz	r2, 80080fc <__lshift+0xa4>
 80080f8:	f108 0602 	add.w	r6, r8, #2
 80080fc:	3e01      	subs	r6, #1
 80080fe:	4638      	mov	r0, r7
 8008100:	612e      	str	r6, [r5, #16]
 8008102:	4621      	mov	r1, r4
 8008104:	f7ff fdda 	bl	8007cbc <_Bfree>
 8008108:	4628      	mov	r0, r5
 800810a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800810e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008112:	3301      	adds	r3, #1
 8008114:	e7c5      	b.n	80080a2 <__lshift+0x4a>
 8008116:	3904      	subs	r1, #4
 8008118:	f853 2b04 	ldr.w	r2, [r3], #4
 800811c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008120:	459c      	cmp	ip, r3
 8008122:	d8f9      	bhi.n	8008118 <__lshift+0xc0>
 8008124:	e7ea      	b.n	80080fc <__lshift+0xa4>
 8008126:	bf00      	nop
 8008128:	08008ed8 	.word	0x08008ed8
 800812c:	08008ee9 	.word	0x08008ee9

08008130 <__mcmp>:
 8008130:	690a      	ldr	r2, [r1, #16]
 8008132:	4603      	mov	r3, r0
 8008134:	6900      	ldr	r0, [r0, #16]
 8008136:	1a80      	subs	r0, r0, r2
 8008138:	b530      	push	{r4, r5, lr}
 800813a:	d10e      	bne.n	800815a <__mcmp+0x2a>
 800813c:	3314      	adds	r3, #20
 800813e:	3114      	adds	r1, #20
 8008140:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008144:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008148:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800814c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008150:	4295      	cmp	r5, r2
 8008152:	d003      	beq.n	800815c <__mcmp+0x2c>
 8008154:	d205      	bcs.n	8008162 <__mcmp+0x32>
 8008156:	f04f 30ff 	mov.w	r0, #4294967295
 800815a:	bd30      	pop	{r4, r5, pc}
 800815c:	42a3      	cmp	r3, r4
 800815e:	d3f3      	bcc.n	8008148 <__mcmp+0x18>
 8008160:	e7fb      	b.n	800815a <__mcmp+0x2a>
 8008162:	2001      	movs	r0, #1
 8008164:	e7f9      	b.n	800815a <__mcmp+0x2a>
	...

08008168 <__mdiff>:
 8008168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800816c:	4689      	mov	r9, r1
 800816e:	4606      	mov	r6, r0
 8008170:	4611      	mov	r1, r2
 8008172:	4648      	mov	r0, r9
 8008174:	4614      	mov	r4, r2
 8008176:	f7ff ffdb 	bl	8008130 <__mcmp>
 800817a:	1e05      	subs	r5, r0, #0
 800817c:	d112      	bne.n	80081a4 <__mdiff+0x3c>
 800817e:	4629      	mov	r1, r5
 8008180:	4630      	mov	r0, r6
 8008182:	f7ff fd5b 	bl	8007c3c <_Balloc>
 8008186:	4602      	mov	r2, r0
 8008188:	b928      	cbnz	r0, 8008196 <__mdiff+0x2e>
 800818a:	4b3f      	ldr	r3, [pc, #252]	@ (8008288 <__mdiff+0x120>)
 800818c:	f240 2137 	movw	r1, #567	@ 0x237
 8008190:	483e      	ldr	r0, [pc, #248]	@ (800828c <__mdiff+0x124>)
 8008192:	f000 fb01 	bl	8008798 <__assert_func>
 8008196:	2301      	movs	r3, #1
 8008198:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800819c:	4610      	mov	r0, r2
 800819e:	b003      	add	sp, #12
 80081a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a4:	bfbc      	itt	lt
 80081a6:	464b      	movlt	r3, r9
 80081a8:	46a1      	movlt	r9, r4
 80081aa:	4630      	mov	r0, r6
 80081ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80081b0:	bfba      	itte	lt
 80081b2:	461c      	movlt	r4, r3
 80081b4:	2501      	movlt	r5, #1
 80081b6:	2500      	movge	r5, #0
 80081b8:	f7ff fd40 	bl	8007c3c <_Balloc>
 80081bc:	4602      	mov	r2, r0
 80081be:	b918      	cbnz	r0, 80081c8 <__mdiff+0x60>
 80081c0:	4b31      	ldr	r3, [pc, #196]	@ (8008288 <__mdiff+0x120>)
 80081c2:	f240 2145 	movw	r1, #581	@ 0x245
 80081c6:	e7e3      	b.n	8008190 <__mdiff+0x28>
 80081c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80081cc:	6926      	ldr	r6, [r4, #16]
 80081ce:	60c5      	str	r5, [r0, #12]
 80081d0:	f109 0310 	add.w	r3, r9, #16
 80081d4:	f109 0514 	add.w	r5, r9, #20
 80081d8:	f104 0e14 	add.w	lr, r4, #20
 80081dc:	f100 0b14 	add.w	fp, r0, #20
 80081e0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80081e4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80081e8:	9301      	str	r3, [sp, #4]
 80081ea:	46d9      	mov	r9, fp
 80081ec:	f04f 0c00 	mov.w	ip, #0
 80081f0:	9b01      	ldr	r3, [sp, #4]
 80081f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80081f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80081fa:	9301      	str	r3, [sp, #4]
 80081fc:	fa1f f38a 	uxth.w	r3, sl
 8008200:	4619      	mov	r1, r3
 8008202:	b283      	uxth	r3, r0
 8008204:	1acb      	subs	r3, r1, r3
 8008206:	0c00      	lsrs	r0, r0, #16
 8008208:	4463      	add	r3, ip
 800820a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800820e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008212:	b29b      	uxth	r3, r3
 8008214:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008218:	4576      	cmp	r6, lr
 800821a:	f849 3b04 	str.w	r3, [r9], #4
 800821e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008222:	d8e5      	bhi.n	80081f0 <__mdiff+0x88>
 8008224:	1b33      	subs	r3, r6, r4
 8008226:	3b15      	subs	r3, #21
 8008228:	f023 0303 	bic.w	r3, r3, #3
 800822c:	3415      	adds	r4, #21
 800822e:	3304      	adds	r3, #4
 8008230:	42a6      	cmp	r6, r4
 8008232:	bf38      	it	cc
 8008234:	2304      	movcc	r3, #4
 8008236:	441d      	add	r5, r3
 8008238:	445b      	add	r3, fp
 800823a:	461e      	mov	r6, r3
 800823c:	462c      	mov	r4, r5
 800823e:	4544      	cmp	r4, r8
 8008240:	d30e      	bcc.n	8008260 <__mdiff+0xf8>
 8008242:	f108 0103 	add.w	r1, r8, #3
 8008246:	1b49      	subs	r1, r1, r5
 8008248:	f021 0103 	bic.w	r1, r1, #3
 800824c:	3d03      	subs	r5, #3
 800824e:	45a8      	cmp	r8, r5
 8008250:	bf38      	it	cc
 8008252:	2100      	movcc	r1, #0
 8008254:	440b      	add	r3, r1
 8008256:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800825a:	b191      	cbz	r1, 8008282 <__mdiff+0x11a>
 800825c:	6117      	str	r7, [r2, #16]
 800825e:	e79d      	b.n	800819c <__mdiff+0x34>
 8008260:	f854 1b04 	ldr.w	r1, [r4], #4
 8008264:	46e6      	mov	lr, ip
 8008266:	0c08      	lsrs	r0, r1, #16
 8008268:	fa1c fc81 	uxtah	ip, ip, r1
 800826c:	4471      	add	r1, lr
 800826e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008272:	b289      	uxth	r1, r1
 8008274:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008278:	f846 1b04 	str.w	r1, [r6], #4
 800827c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008280:	e7dd      	b.n	800823e <__mdiff+0xd6>
 8008282:	3f01      	subs	r7, #1
 8008284:	e7e7      	b.n	8008256 <__mdiff+0xee>
 8008286:	bf00      	nop
 8008288:	08008ed8 	.word	0x08008ed8
 800828c:	08008ee9 	.word	0x08008ee9

08008290 <__d2b>:
 8008290:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008294:	460f      	mov	r7, r1
 8008296:	2101      	movs	r1, #1
 8008298:	ec59 8b10 	vmov	r8, r9, d0
 800829c:	4616      	mov	r6, r2
 800829e:	f7ff fccd 	bl	8007c3c <_Balloc>
 80082a2:	4604      	mov	r4, r0
 80082a4:	b930      	cbnz	r0, 80082b4 <__d2b+0x24>
 80082a6:	4602      	mov	r2, r0
 80082a8:	4b23      	ldr	r3, [pc, #140]	@ (8008338 <__d2b+0xa8>)
 80082aa:	4824      	ldr	r0, [pc, #144]	@ (800833c <__d2b+0xac>)
 80082ac:	f240 310f 	movw	r1, #783	@ 0x30f
 80082b0:	f000 fa72 	bl	8008798 <__assert_func>
 80082b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80082b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80082bc:	b10d      	cbz	r5, 80082c2 <__d2b+0x32>
 80082be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80082c2:	9301      	str	r3, [sp, #4]
 80082c4:	f1b8 0300 	subs.w	r3, r8, #0
 80082c8:	d023      	beq.n	8008312 <__d2b+0x82>
 80082ca:	4668      	mov	r0, sp
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	f7ff fd7c 	bl	8007dca <__lo0bits>
 80082d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80082d6:	b1d0      	cbz	r0, 800830e <__d2b+0x7e>
 80082d8:	f1c0 0320 	rsb	r3, r0, #32
 80082dc:	fa02 f303 	lsl.w	r3, r2, r3
 80082e0:	430b      	orrs	r3, r1
 80082e2:	40c2      	lsrs	r2, r0
 80082e4:	6163      	str	r3, [r4, #20]
 80082e6:	9201      	str	r2, [sp, #4]
 80082e8:	9b01      	ldr	r3, [sp, #4]
 80082ea:	61a3      	str	r3, [r4, #24]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	bf0c      	ite	eq
 80082f0:	2201      	moveq	r2, #1
 80082f2:	2202      	movne	r2, #2
 80082f4:	6122      	str	r2, [r4, #16]
 80082f6:	b1a5      	cbz	r5, 8008322 <__d2b+0x92>
 80082f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80082fc:	4405      	add	r5, r0
 80082fe:	603d      	str	r5, [r7, #0]
 8008300:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008304:	6030      	str	r0, [r6, #0]
 8008306:	4620      	mov	r0, r4
 8008308:	b003      	add	sp, #12
 800830a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800830e:	6161      	str	r1, [r4, #20]
 8008310:	e7ea      	b.n	80082e8 <__d2b+0x58>
 8008312:	a801      	add	r0, sp, #4
 8008314:	f7ff fd59 	bl	8007dca <__lo0bits>
 8008318:	9b01      	ldr	r3, [sp, #4]
 800831a:	6163      	str	r3, [r4, #20]
 800831c:	3020      	adds	r0, #32
 800831e:	2201      	movs	r2, #1
 8008320:	e7e8      	b.n	80082f4 <__d2b+0x64>
 8008322:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008326:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800832a:	6038      	str	r0, [r7, #0]
 800832c:	6918      	ldr	r0, [r3, #16]
 800832e:	f7ff fd2d 	bl	8007d8c <__hi0bits>
 8008332:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008336:	e7e5      	b.n	8008304 <__d2b+0x74>
 8008338:	08008ed8 	.word	0x08008ed8
 800833c:	08008ee9 	.word	0x08008ee9

08008340 <__ssputs_r>:
 8008340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008344:	688e      	ldr	r6, [r1, #8]
 8008346:	461f      	mov	r7, r3
 8008348:	42be      	cmp	r6, r7
 800834a:	680b      	ldr	r3, [r1, #0]
 800834c:	4682      	mov	sl, r0
 800834e:	460c      	mov	r4, r1
 8008350:	4690      	mov	r8, r2
 8008352:	d82d      	bhi.n	80083b0 <__ssputs_r+0x70>
 8008354:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008358:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800835c:	d026      	beq.n	80083ac <__ssputs_r+0x6c>
 800835e:	6965      	ldr	r5, [r4, #20]
 8008360:	6909      	ldr	r1, [r1, #16]
 8008362:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008366:	eba3 0901 	sub.w	r9, r3, r1
 800836a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800836e:	1c7b      	adds	r3, r7, #1
 8008370:	444b      	add	r3, r9
 8008372:	106d      	asrs	r5, r5, #1
 8008374:	429d      	cmp	r5, r3
 8008376:	bf38      	it	cc
 8008378:	461d      	movcc	r5, r3
 800837a:	0553      	lsls	r3, r2, #21
 800837c:	d527      	bpl.n	80083ce <__ssputs_r+0x8e>
 800837e:	4629      	mov	r1, r5
 8008380:	f7fd fee6 	bl	8006150 <_malloc_r>
 8008384:	4606      	mov	r6, r0
 8008386:	b360      	cbz	r0, 80083e2 <__ssputs_r+0xa2>
 8008388:	6921      	ldr	r1, [r4, #16]
 800838a:	464a      	mov	r2, r9
 800838c:	f000 f9f6 	bl	800877c <memcpy>
 8008390:	89a3      	ldrh	r3, [r4, #12]
 8008392:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800839a:	81a3      	strh	r3, [r4, #12]
 800839c:	6126      	str	r6, [r4, #16]
 800839e:	6165      	str	r5, [r4, #20]
 80083a0:	444e      	add	r6, r9
 80083a2:	eba5 0509 	sub.w	r5, r5, r9
 80083a6:	6026      	str	r6, [r4, #0]
 80083a8:	60a5      	str	r5, [r4, #8]
 80083aa:	463e      	mov	r6, r7
 80083ac:	42be      	cmp	r6, r7
 80083ae:	d900      	bls.n	80083b2 <__ssputs_r+0x72>
 80083b0:	463e      	mov	r6, r7
 80083b2:	6820      	ldr	r0, [r4, #0]
 80083b4:	4632      	mov	r2, r6
 80083b6:	4641      	mov	r1, r8
 80083b8:	f000 f9c6 	bl	8008748 <memmove>
 80083bc:	68a3      	ldr	r3, [r4, #8]
 80083be:	1b9b      	subs	r3, r3, r6
 80083c0:	60a3      	str	r3, [r4, #8]
 80083c2:	6823      	ldr	r3, [r4, #0]
 80083c4:	4433      	add	r3, r6
 80083c6:	6023      	str	r3, [r4, #0]
 80083c8:	2000      	movs	r0, #0
 80083ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ce:	462a      	mov	r2, r5
 80083d0:	f000 fa26 	bl	8008820 <_realloc_r>
 80083d4:	4606      	mov	r6, r0
 80083d6:	2800      	cmp	r0, #0
 80083d8:	d1e0      	bne.n	800839c <__ssputs_r+0x5c>
 80083da:	6921      	ldr	r1, [r4, #16]
 80083dc:	4650      	mov	r0, sl
 80083de:	f7ff fbe3 	bl	8007ba8 <_free_r>
 80083e2:	230c      	movs	r3, #12
 80083e4:	f8ca 3000 	str.w	r3, [sl]
 80083e8:	89a3      	ldrh	r3, [r4, #12]
 80083ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083ee:	81a3      	strh	r3, [r4, #12]
 80083f0:	f04f 30ff 	mov.w	r0, #4294967295
 80083f4:	e7e9      	b.n	80083ca <__ssputs_r+0x8a>
	...

080083f8 <_svfiprintf_r>:
 80083f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083fc:	4698      	mov	r8, r3
 80083fe:	898b      	ldrh	r3, [r1, #12]
 8008400:	061b      	lsls	r3, r3, #24
 8008402:	b09d      	sub	sp, #116	@ 0x74
 8008404:	4607      	mov	r7, r0
 8008406:	460d      	mov	r5, r1
 8008408:	4614      	mov	r4, r2
 800840a:	d510      	bpl.n	800842e <_svfiprintf_r+0x36>
 800840c:	690b      	ldr	r3, [r1, #16]
 800840e:	b973      	cbnz	r3, 800842e <_svfiprintf_r+0x36>
 8008410:	2140      	movs	r1, #64	@ 0x40
 8008412:	f7fd fe9d 	bl	8006150 <_malloc_r>
 8008416:	6028      	str	r0, [r5, #0]
 8008418:	6128      	str	r0, [r5, #16]
 800841a:	b930      	cbnz	r0, 800842a <_svfiprintf_r+0x32>
 800841c:	230c      	movs	r3, #12
 800841e:	603b      	str	r3, [r7, #0]
 8008420:	f04f 30ff 	mov.w	r0, #4294967295
 8008424:	b01d      	add	sp, #116	@ 0x74
 8008426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800842a:	2340      	movs	r3, #64	@ 0x40
 800842c:	616b      	str	r3, [r5, #20]
 800842e:	2300      	movs	r3, #0
 8008430:	9309      	str	r3, [sp, #36]	@ 0x24
 8008432:	2320      	movs	r3, #32
 8008434:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008438:	f8cd 800c 	str.w	r8, [sp, #12]
 800843c:	2330      	movs	r3, #48	@ 0x30
 800843e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80085dc <_svfiprintf_r+0x1e4>
 8008442:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008446:	f04f 0901 	mov.w	r9, #1
 800844a:	4623      	mov	r3, r4
 800844c:	469a      	mov	sl, r3
 800844e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008452:	b10a      	cbz	r2, 8008458 <_svfiprintf_r+0x60>
 8008454:	2a25      	cmp	r2, #37	@ 0x25
 8008456:	d1f9      	bne.n	800844c <_svfiprintf_r+0x54>
 8008458:	ebba 0b04 	subs.w	fp, sl, r4
 800845c:	d00b      	beq.n	8008476 <_svfiprintf_r+0x7e>
 800845e:	465b      	mov	r3, fp
 8008460:	4622      	mov	r2, r4
 8008462:	4629      	mov	r1, r5
 8008464:	4638      	mov	r0, r7
 8008466:	f7ff ff6b 	bl	8008340 <__ssputs_r>
 800846a:	3001      	adds	r0, #1
 800846c:	f000 80a7 	beq.w	80085be <_svfiprintf_r+0x1c6>
 8008470:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008472:	445a      	add	r2, fp
 8008474:	9209      	str	r2, [sp, #36]	@ 0x24
 8008476:	f89a 3000 	ldrb.w	r3, [sl]
 800847a:	2b00      	cmp	r3, #0
 800847c:	f000 809f 	beq.w	80085be <_svfiprintf_r+0x1c6>
 8008480:	2300      	movs	r3, #0
 8008482:	f04f 32ff 	mov.w	r2, #4294967295
 8008486:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800848a:	f10a 0a01 	add.w	sl, sl, #1
 800848e:	9304      	str	r3, [sp, #16]
 8008490:	9307      	str	r3, [sp, #28]
 8008492:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008496:	931a      	str	r3, [sp, #104]	@ 0x68
 8008498:	4654      	mov	r4, sl
 800849a:	2205      	movs	r2, #5
 800849c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084a0:	484e      	ldr	r0, [pc, #312]	@ (80085dc <_svfiprintf_r+0x1e4>)
 80084a2:	f7f7 fe9d 	bl	80001e0 <memchr>
 80084a6:	9a04      	ldr	r2, [sp, #16]
 80084a8:	b9d8      	cbnz	r0, 80084e2 <_svfiprintf_r+0xea>
 80084aa:	06d0      	lsls	r0, r2, #27
 80084ac:	bf44      	itt	mi
 80084ae:	2320      	movmi	r3, #32
 80084b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084b4:	0711      	lsls	r1, r2, #28
 80084b6:	bf44      	itt	mi
 80084b8:	232b      	movmi	r3, #43	@ 0x2b
 80084ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084be:	f89a 3000 	ldrb.w	r3, [sl]
 80084c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80084c4:	d015      	beq.n	80084f2 <_svfiprintf_r+0xfa>
 80084c6:	9a07      	ldr	r2, [sp, #28]
 80084c8:	4654      	mov	r4, sl
 80084ca:	2000      	movs	r0, #0
 80084cc:	f04f 0c0a 	mov.w	ip, #10
 80084d0:	4621      	mov	r1, r4
 80084d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084d6:	3b30      	subs	r3, #48	@ 0x30
 80084d8:	2b09      	cmp	r3, #9
 80084da:	d94b      	bls.n	8008574 <_svfiprintf_r+0x17c>
 80084dc:	b1b0      	cbz	r0, 800850c <_svfiprintf_r+0x114>
 80084de:	9207      	str	r2, [sp, #28]
 80084e0:	e014      	b.n	800850c <_svfiprintf_r+0x114>
 80084e2:	eba0 0308 	sub.w	r3, r0, r8
 80084e6:	fa09 f303 	lsl.w	r3, r9, r3
 80084ea:	4313      	orrs	r3, r2
 80084ec:	9304      	str	r3, [sp, #16]
 80084ee:	46a2      	mov	sl, r4
 80084f0:	e7d2      	b.n	8008498 <_svfiprintf_r+0xa0>
 80084f2:	9b03      	ldr	r3, [sp, #12]
 80084f4:	1d19      	adds	r1, r3, #4
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	9103      	str	r1, [sp, #12]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	bfbb      	ittet	lt
 80084fe:	425b      	neglt	r3, r3
 8008500:	f042 0202 	orrlt.w	r2, r2, #2
 8008504:	9307      	strge	r3, [sp, #28]
 8008506:	9307      	strlt	r3, [sp, #28]
 8008508:	bfb8      	it	lt
 800850a:	9204      	strlt	r2, [sp, #16]
 800850c:	7823      	ldrb	r3, [r4, #0]
 800850e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008510:	d10a      	bne.n	8008528 <_svfiprintf_r+0x130>
 8008512:	7863      	ldrb	r3, [r4, #1]
 8008514:	2b2a      	cmp	r3, #42	@ 0x2a
 8008516:	d132      	bne.n	800857e <_svfiprintf_r+0x186>
 8008518:	9b03      	ldr	r3, [sp, #12]
 800851a:	1d1a      	adds	r2, r3, #4
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	9203      	str	r2, [sp, #12]
 8008520:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008524:	3402      	adds	r4, #2
 8008526:	9305      	str	r3, [sp, #20]
 8008528:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80085ec <_svfiprintf_r+0x1f4>
 800852c:	7821      	ldrb	r1, [r4, #0]
 800852e:	2203      	movs	r2, #3
 8008530:	4650      	mov	r0, sl
 8008532:	f7f7 fe55 	bl	80001e0 <memchr>
 8008536:	b138      	cbz	r0, 8008548 <_svfiprintf_r+0x150>
 8008538:	9b04      	ldr	r3, [sp, #16]
 800853a:	eba0 000a 	sub.w	r0, r0, sl
 800853e:	2240      	movs	r2, #64	@ 0x40
 8008540:	4082      	lsls	r2, r0
 8008542:	4313      	orrs	r3, r2
 8008544:	3401      	adds	r4, #1
 8008546:	9304      	str	r3, [sp, #16]
 8008548:	f814 1b01 	ldrb.w	r1, [r4], #1
 800854c:	4824      	ldr	r0, [pc, #144]	@ (80085e0 <_svfiprintf_r+0x1e8>)
 800854e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008552:	2206      	movs	r2, #6
 8008554:	f7f7 fe44 	bl	80001e0 <memchr>
 8008558:	2800      	cmp	r0, #0
 800855a:	d036      	beq.n	80085ca <_svfiprintf_r+0x1d2>
 800855c:	4b21      	ldr	r3, [pc, #132]	@ (80085e4 <_svfiprintf_r+0x1ec>)
 800855e:	bb1b      	cbnz	r3, 80085a8 <_svfiprintf_r+0x1b0>
 8008560:	9b03      	ldr	r3, [sp, #12]
 8008562:	3307      	adds	r3, #7
 8008564:	f023 0307 	bic.w	r3, r3, #7
 8008568:	3308      	adds	r3, #8
 800856a:	9303      	str	r3, [sp, #12]
 800856c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800856e:	4433      	add	r3, r6
 8008570:	9309      	str	r3, [sp, #36]	@ 0x24
 8008572:	e76a      	b.n	800844a <_svfiprintf_r+0x52>
 8008574:	fb0c 3202 	mla	r2, ip, r2, r3
 8008578:	460c      	mov	r4, r1
 800857a:	2001      	movs	r0, #1
 800857c:	e7a8      	b.n	80084d0 <_svfiprintf_r+0xd8>
 800857e:	2300      	movs	r3, #0
 8008580:	3401      	adds	r4, #1
 8008582:	9305      	str	r3, [sp, #20]
 8008584:	4619      	mov	r1, r3
 8008586:	f04f 0c0a 	mov.w	ip, #10
 800858a:	4620      	mov	r0, r4
 800858c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008590:	3a30      	subs	r2, #48	@ 0x30
 8008592:	2a09      	cmp	r2, #9
 8008594:	d903      	bls.n	800859e <_svfiprintf_r+0x1a6>
 8008596:	2b00      	cmp	r3, #0
 8008598:	d0c6      	beq.n	8008528 <_svfiprintf_r+0x130>
 800859a:	9105      	str	r1, [sp, #20]
 800859c:	e7c4      	b.n	8008528 <_svfiprintf_r+0x130>
 800859e:	fb0c 2101 	mla	r1, ip, r1, r2
 80085a2:	4604      	mov	r4, r0
 80085a4:	2301      	movs	r3, #1
 80085a6:	e7f0      	b.n	800858a <_svfiprintf_r+0x192>
 80085a8:	ab03      	add	r3, sp, #12
 80085aa:	9300      	str	r3, [sp, #0]
 80085ac:	462a      	mov	r2, r5
 80085ae:	4b0e      	ldr	r3, [pc, #56]	@ (80085e8 <_svfiprintf_r+0x1f0>)
 80085b0:	a904      	add	r1, sp, #16
 80085b2:	4638      	mov	r0, r7
 80085b4:	f7fd fef8 	bl	80063a8 <_printf_float>
 80085b8:	1c42      	adds	r2, r0, #1
 80085ba:	4606      	mov	r6, r0
 80085bc:	d1d6      	bne.n	800856c <_svfiprintf_r+0x174>
 80085be:	89ab      	ldrh	r3, [r5, #12]
 80085c0:	065b      	lsls	r3, r3, #25
 80085c2:	f53f af2d 	bmi.w	8008420 <_svfiprintf_r+0x28>
 80085c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80085c8:	e72c      	b.n	8008424 <_svfiprintf_r+0x2c>
 80085ca:	ab03      	add	r3, sp, #12
 80085cc:	9300      	str	r3, [sp, #0]
 80085ce:	462a      	mov	r2, r5
 80085d0:	4b05      	ldr	r3, [pc, #20]	@ (80085e8 <_svfiprintf_r+0x1f0>)
 80085d2:	a904      	add	r1, sp, #16
 80085d4:	4638      	mov	r0, r7
 80085d6:	f7fe f97f 	bl	80068d8 <_printf_i>
 80085da:	e7ed      	b.n	80085b8 <_svfiprintf_r+0x1c0>
 80085dc:	08009040 	.word	0x08009040
 80085e0:	0800904a 	.word	0x0800904a
 80085e4:	080063a9 	.word	0x080063a9
 80085e8:	08008341 	.word	0x08008341
 80085ec:	08009046 	.word	0x08009046

080085f0 <__sflush_r>:
 80085f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80085f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085f8:	0716      	lsls	r6, r2, #28
 80085fa:	4605      	mov	r5, r0
 80085fc:	460c      	mov	r4, r1
 80085fe:	d454      	bmi.n	80086aa <__sflush_r+0xba>
 8008600:	684b      	ldr	r3, [r1, #4]
 8008602:	2b00      	cmp	r3, #0
 8008604:	dc02      	bgt.n	800860c <__sflush_r+0x1c>
 8008606:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008608:	2b00      	cmp	r3, #0
 800860a:	dd48      	ble.n	800869e <__sflush_r+0xae>
 800860c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800860e:	2e00      	cmp	r6, #0
 8008610:	d045      	beq.n	800869e <__sflush_r+0xae>
 8008612:	2300      	movs	r3, #0
 8008614:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008618:	682f      	ldr	r7, [r5, #0]
 800861a:	6a21      	ldr	r1, [r4, #32]
 800861c:	602b      	str	r3, [r5, #0]
 800861e:	d030      	beq.n	8008682 <__sflush_r+0x92>
 8008620:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008622:	89a3      	ldrh	r3, [r4, #12]
 8008624:	0759      	lsls	r1, r3, #29
 8008626:	d505      	bpl.n	8008634 <__sflush_r+0x44>
 8008628:	6863      	ldr	r3, [r4, #4]
 800862a:	1ad2      	subs	r2, r2, r3
 800862c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800862e:	b10b      	cbz	r3, 8008634 <__sflush_r+0x44>
 8008630:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008632:	1ad2      	subs	r2, r2, r3
 8008634:	2300      	movs	r3, #0
 8008636:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008638:	6a21      	ldr	r1, [r4, #32]
 800863a:	4628      	mov	r0, r5
 800863c:	47b0      	blx	r6
 800863e:	1c43      	adds	r3, r0, #1
 8008640:	89a3      	ldrh	r3, [r4, #12]
 8008642:	d106      	bne.n	8008652 <__sflush_r+0x62>
 8008644:	6829      	ldr	r1, [r5, #0]
 8008646:	291d      	cmp	r1, #29
 8008648:	d82b      	bhi.n	80086a2 <__sflush_r+0xb2>
 800864a:	4a2a      	ldr	r2, [pc, #168]	@ (80086f4 <__sflush_r+0x104>)
 800864c:	410a      	asrs	r2, r1
 800864e:	07d6      	lsls	r6, r2, #31
 8008650:	d427      	bmi.n	80086a2 <__sflush_r+0xb2>
 8008652:	2200      	movs	r2, #0
 8008654:	6062      	str	r2, [r4, #4]
 8008656:	04d9      	lsls	r1, r3, #19
 8008658:	6922      	ldr	r2, [r4, #16]
 800865a:	6022      	str	r2, [r4, #0]
 800865c:	d504      	bpl.n	8008668 <__sflush_r+0x78>
 800865e:	1c42      	adds	r2, r0, #1
 8008660:	d101      	bne.n	8008666 <__sflush_r+0x76>
 8008662:	682b      	ldr	r3, [r5, #0]
 8008664:	b903      	cbnz	r3, 8008668 <__sflush_r+0x78>
 8008666:	6560      	str	r0, [r4, #84]	@ 0x54
 8008668:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800866a:	602f      	str	r7, [r5, #0]
 800866c:	b1b9      	cbz	r1, 800869e <__sflush_r+0xae>
 800866e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008672:	4299      	cmp	r1, r3
 8008674:	d002      	beq.n	800867c <__sflush_r+0x8c>
 8008676:	4628      	mov	r0, r5
 8008678:	f7ff fa96 	bl	8007ba8 <_free_r>
 800867c:	2300      	movs	r3, #0
 800867e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008680:	e00d      	b.n	800869e <__sflush_r+0xae>
 8008682:	2301      	movs	r3, #1
 8008684:	4628      	mov	r0, r5
 8008686:	47b0      	blx	r6
 8008688:	4602      	mov	r2, r0
 800868a:	1c50      	adds	r0, r2, #1
 800868c:	d1c9      	bne.n	8008622 <__sflush_r+0x32>
 800868e:	682b      	ldr	r3, [r5, #0]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d0c6      	beq.n	8008622 <__sflush_r+0x32>
 8008694:	2b1d      	cmp	r3, #29
 8008696:	d001      	beq.n	800869c <__sflush_r+0xac>
 8008698:	2b16      	cmp	r3, #22
 800869a:	d11e      	bne.n	80086da <__sflush_r+0xea>
 800869c:	602f      	str	r7, [r5, #0]
 800869e:	2000      	movs	r0, #0
 80086a0:	e022      	b.n	80086e8 <__sflush_r+0xf8>
 80086a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086a6:	b21b      	sxth	r3, r3
 80086a8:	e01b      	b.n	80086e2 <__sflush_r+0xf2>
 80086aa:	690f      	ldr	r7, [r1, #16]
 80086ac:	2f00      	cmp	r7, #0
 80086ae:	d0f6      	beq.n	800869e <__sflush_r+0xae>
 80086b0:	0793      	lsls	r3, r2, #30
 80086b2:	680e      	ldr	r6, [r1, #0]
 80086b4:	bf08      	it	eq
 80086b6:	694b      	ldreq	r3, [r1, #20]
 80086b8:	600f      	str	r7, [r1, #0]
 80086ba:	bf18      	it	ne
 80086bc:	2300      	movne	r3, #0
 80086be:	eba6 0807 	sub.w	r8, r6, r7
 80086c2:	608b      	str	r3, [r1, #8]
 80086c4:	f1b8 0f00 	cmp.w	r8, #0
 80086c8:	dde9      	ble.n	800869e <__sflush_r+0xae>
 80086ca:	6a21      	ldr	r1, [r4, #32]
 80086cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80086ce:	4643      	mov	r3, r8
 80086d0:	463a      	mov	r2, r7
 80086d2:	4628      	mov	r0, r5
 80086d4:	47b0      	blx	r6
 80086d6:	2800      	cmp	r0, #0
 80086d8:	dc08      	bgt.n	80086ec <__sflush_r+0xfc>
 80086da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086e2:	81a3      	strh	r3, [r4, #12]
 80086e4:	f04f 30ff 	mov.w	r0, #4294967295
 80086e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086ec:	4407      	add	r7, r0
 80086ee:	eba8 0800 	sub.w	r8, r8, r0
 80086f2:	e7e7      	b.n	80086c4 <__sflush_r+0xd4>
 80086f4:	dfbffffe 	.word	0xdfbffffe

080086f8 <_fflush_r>:
 80086f8:	b538      	push	{r3, r4, r5, lr}
 80086fa:	690b      	ldr	r3, [r1, #16]
 80086fc:	4605      	mov	r5, r0
 80086fe:	460c      	mov	r4, r1
 8008700:	b913      	cbnz	r3, 8008708 <_fflush_r+0x10>
 8008702:	2500      	movs	r5, #0
 8008704:	4628      	mov	r0, r5
 8008706:	bd38      	pop	{r3, r4, r5, pc}
 8008708:	b118      	cbz	r0, 8008712 <_fflush_r+0x1a>
 800870a:	6a03      	ldr	r3, [r0, #32]
 800870c:	b90b      	cbnz	r3, 8008712 <_fflush_r+0x1a>
 800870e:	f7fe fa8f 	bl	8006c30 <__sinit>
 8008712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d0f3      	beq.n	8008702 <_fflush_r+0xa>
 800871a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800871c:	07d0      	lsls	r0, r2, #31
 800871e:	d404      	bmi.n	800872a <_fflush_r+0x32>
 8008720:	0599      	lsls	r1, r3, #22
 8008722:	d402      	bmi.n	800872a <_fflush_r+0x32>
 8008724:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008726:	f7fe fbee 	bl	8006f06 <__retarget_lock_acquire_recursive>
 800872a:	4628      	mov	r0, r5
 800872c:	4621      	mov	r1, r4
 800872e:	f7ff ff5f 	bl	80085f0 <__sflush_r>
 8008732:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008734:	07da      	lsls	r2, r3, #31
 8008736:	4605      	mov	r5, r0
 8008738:	d4e4      	bmi.n	8008704 <_fflush_r+0xc>
 800873a:	89a3      	ldrh	r3, [r4, #12]
 800873c:	059b      	lsls	r3, r3, #22
 800873e:	d4e1      	bmi.n	8008704 <_fflush_r+0xc>
 8008740:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008742:	f7fe fbe1 	bl	8006f08 <__retarget_lock_release_recursive>
 8008746:	e7dd      	b.n	8008704 <_fflush_r+0xc>

08008748 <memmove>:
 8008748:	4288      	cmp	r0, r1
 800874a:	b510      	push	{r4, lr}
 800874c:	eb01 0402 	add.w	r4, r1, r2
 8008750:	d902      	bls.n	8008758 <memmove+0x10>
 8008752:	4284      	cmp	r4, r0
 8008754:	4623      	mov	r3, r4
 8008756:	d807      	bhi.n	8008768 <memmove+0x20>
 8008758:	1e43      	subs	r3, r0, #1
 800875a:	42a1      	cmp	r1, r4
 800875c:	d008      	beq.n	8008770 <memmove+0x28>
 800875e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008762:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008766:	e7f8      	b.n	800875a <memmove+0x12>
 8008768:	4402      	add	r2, r0
 800876a:	4601      	mov	r1, r0
 800876c:	428a      	cmp	r2, r1
 800876e:	d100      	bne.n	8008772 <memmove+0x2a>
 8008770:	bd10      	pop	{r4, pc}
 8008772:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008776:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800877a:	e7f7      	b.n	800876c <memmove+0x24>

0800877c <memcpy>:
 800877c:	440a      	add	r2, r1
 800877e:	4291      	cmp	r1, r2
 8008780:	f100 33ff 	add.w	r3, r0, #4294967295
 8008784:	d100      	bne.n	8008788 <memcpy+0xc>
 8008786:	4770      	bx	lr
 8008788:	b510      	push	{r4, lr}
 800878a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800878e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008792:	4291      	cmp	r1, r2
 8008794:	d1f9      	bne.n	800878a <memcpy+0xe>
 8008796:	bd10      	pop	{r4, pc}

08008798 <__assert_func>:
 8008798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800879a:	4614      	mov	r4, r2
 800879c:	461a      	mov	r2, r3
 800879e:	4b09      	ldr	r3, [pc, #36]	@ (80087c4 <__assert_func+0x2c>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4605      	mov	r5, r0
 80087a4:	68d8      	ldr	r0, [r3, #12]
 80087a6:	b954      	cbnz	r4, 80087be <__assert_func+0x26>
 80087a8:	4b07      	ldr	r3, [pc, #28]	@ (80087c8 <__assert_func+0x30>)
 80087aa:	461c      	mov	r4, r3
 80087ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80087b0:	9100      	str	r1, [sp, #0]
 80087b2:	462b      	mov	r3, r5
 80087b4:	4905      	ldr	r1, [pc, #20]	@ (80087cc <__assert_func+0x34>)
 80087b6:	f000 f86f 	bl	8008898 <fiprintf>
 80087ba:	f7fd fc8f 	bl	80060dc <abort>
 80087be:	4b04      	ldr	r3, [pc, #16]	@ (80087d0 <__assert_func+0x38>)
 80087c0:	e7f4      	b.n	80087ac <__assert_func+0x14>
 80087c2:	bf00      	nop
 80087c4:	20000018 	.word	0x20000018
 80087c8:	08009096 	.word	0x08009096
 80087cc:	08009068 	.word	0x08009068
 80087d0:	0800905b 	.word	0x0800905b

080087d4 <_calloc_r>:
 80087d4:	b570      	push	{r4, r5, r6, lr}
 80087d6:	fba1 5402 	umull	r5, r4, r1, r2
 80087da:	b93c      	cbnz	r4, 80087ec <_calloc_r+0x18>
 80087dc:	4629      	mov	r1, r5
 80087de:	f7fd fcb7 	bl	8006150 <_malloc_r>
 80087e2:	4606      	mov	r6, r0
 80087e4:	b928      	cbnz	r0, 80087f2 <_calloc_r+0x1e>
 80087e6:	2600      	movs	r6, #0
 80087e8:	4630      	mov	r0, r6
 80087ea:	bd70      	pop	{r4, r5, r6, pc}
 80087ec:	220c      	movs	r2, #12
 80087ee:	6002      	str	r2, [r0, #0]
 80087f0:	e7f9      	b.n	80087e6 <_calloc_r+0x12>
 80087f2:	462a      	mov	r2, r5
 80087f4:	4621      	mov	r1, r4
 80087f6:	f7fe fab4 	bl	8006d62 <memset>
 80087fa:	e7f5      	b.n	80087e8 <_calloc_r+0x14>

080087fc <__ascii_mbtowc>:
 80087fc:	b082      	sub	sp, #8
 80087fe:	b901      	cbnz	r1, 8008802 <__ascii_mbtowc+0x6>
 8008800:	a901      	add	r1, sp, #4
 8008802:	b142      	cbz	r2, 8008816 <__ascii_mbtowc+0x1a>
 8008804:	b14b      	cbz	r3, 800881a <__ascii_mbtowc+0x1e>
 8008806:	7813      	ldrb	r3, [r2, #0]
 8008808:	600b      	str	r3, [r1, #0]
 800880a:	7812      	ldrb	r2, [r2, #0]
 800880c:	1e10      	subs	r0, r2, #0
 800880e:	bf18      	it	ne
 8008810:	2001      	movne	r0, #1
 8008812:	b002      	add	sp, #8
 8008814:	4770      	bx	lr
 8008816:	4610      	mov	r0, r2
 8008818:	e7fb      	b.n	8008812 <__ascii_mbtowc+0x16>
 800881a:	f06f 0001 	mvn.w	r0, #1
 800881e:	e7f8      	b.n	8008812 <__ascii_mbtowc+0x16>

08008820 <_realloc_r>:
 8008820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008824:	4680      	mov	r8, r0
 8008826:	4615      	mov	r5, r2
 8008828:	460c      	mov	r4, r1
 800882a:	b921      	cbnz	r1, 8008836 <_realloc_r+0x16>
 800882c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008830:	4611      	mov	r1, r2
 8008832:	f7fd bc8d 	b.w	8006150 <_malloc_r>
 8008836:	b92a      	cbnz	r2, 8008844 <_realloc_r+0x24>
 8008838:	f7ff f9b6 	bl	8007ba8 <_free_r>
 800883c:	2400      	movs	r4, #0
 800883e:	4620      	mov	r0, r4
 8008840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008844:	f000 f83a 	bl	80088bc <_malloc_usable_size_r>
 8008848:	4285      	cmp	r5, r0
 800884a:	4606      	mov	r6, r0
 800884c:	d802      	bhi.n	8008854 <_realloc_r+0x34>
 800884e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008852:	d8f4      	bhi.n	800883e <_realloc_r+0x1e>
 8008854:	4629      	mov	r1, r5
 8008856:	4640      	mov	r0, r8
 8008858:	f7fd fc7a 	bl	8006150 <_malloc_r>
 800885c:	4607      	mov	r7, r0
 800885e:	2800      	cmp	r0, #0
 8008860:	d0ec      	beq.n	800883c <_realloc_r+0x1c>
 8008862:	42b5      	cmp	r5, r6
 8008864:	462a      	mov	r2, r5
 8008866:	4621      	mov	r1, r4
 8008868:	bf28      	it	cs
 800886a:	4632      	movcs	r2, r6
 800886c:	f7ff ff86 	bl	800877c <memcpy>
 8008870:	4621      	mov	r1, r4
 8008872:	4640      	mov	r0, r8
 8008874:	f7ff f998 	bl	8007ba8 <_free_r>
 8008878:	463c      	mov	r4, r7
 800887a:	e7e0      	b.n	800883e <_realloc_r+0x1e>

0800887c <__ascii_wctomb>:
 800887c:	4603      	mov	r3, r0
 800887e:	4608      	mov	r0, r1
 8008880:	b141      	cbz	r1, 8008894 <__ascii_wctomb+0x18>
 8008882:	2aff      	cmp	r2, #255	@ 0xff
 8008884:	d904      	bls.n	8008890 <__ascii_wctomb+0x14>
 8008886:	228a      	movs	r2, #138	@ 0x8a
 8008888:	601a      	str	r2, [r3, #0]
 800888a:	f04f 30ff 	mov.w	r0, #4294967295
 800888e:	4770      	bx	lr
 8008890:	700a      	strb	r2, [r1, #0]
 8008892:	2001      	movs	r0, #1
 8008894:	4770      	bx	lr
	...

08008898 <fiprintf>:
 8008898:	b40e      	push	{r1, r2, r3}
 800889a:	b503      	push	{r0, r1, lr}
 800889c:	4601      	mov	r1, r0
 800889e:	ab03      	add	r3, sp, #12
 80088a0:	4805      	ldr	r0, [pc, #20]	@ (80088b8 <fiprintf+0x20>)
 80088a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80088a6:	6800      	ldr	r0, [r0, #0]
 80088a8:	9301      	str	r3, [sp, #4]
 80088aa:	f000 f839 	bl	8008920 <_vfiprintf_r>
 80088ae:	b002      	add	sp, #8
 80088b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80088b4:	b003      	add	sp, #12
 80088b6:	4770      	bx	lr
 80088b8:	20000018 	.word	0x20000018

080088bc <_malloc_usable_size_r>:
 80088bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088c0:	1f18      	subs	r0, r3, #4
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	bfbc      	itt	lt
 80088c6:	580b      	ldrlt	r3, [r1, r0]
 80088c8:	18c0      	addlt	r0, r0, r3
 80088ca:	4770      	bx	lr

080088cc <__sfputc_r>:
 80088cc:	6893      	ldr	r3, [r2, #8]
 80088ce:	3b01      	subs	r3, #1
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	b410      	push	{r4}
 80088d4:	6093      	str	r3, [r2, #8]
 80088d6:	da08      	bge.n	80088ea <__sfputc_r+0x1e>
 80088d8:	6994      	ldr	r4, [r2, #24]
 80088da:	42a3      	cmp	r3, r4
 80088dc:	db01      	blt.n	80088e2 <__sfputc_r+0x16>
 80088de:	290a      	cmp	r1, #10
 80088e0:	d103      	bne.n	80088ea <__sfputc_r+0x1e>
 80088e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088e6:	f000 b933 	b.w	8008b50 <__swbuf_r>
 80088ea:	6813      	ldr	r3, [r2, #0]
 80088ec:	1c58      	adds	r0, r3, #1
 80088ee:	6010      	str	r0, [r2, #0]
 80088f0:	7019      	strb	r1, [r3, #0]
 80088f2:	4608      	mov	r0, r1
 80088f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088f8:	4770      	bx	lr

080088fa <__sfputs_r>:
 80088fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088fc:	4606      	mov	r6, r0
 80088fe:	460f      	mov	r7, r1
 8008900:	4614      	mov	r4, r2
 8008902:	18d5      	adds	r5, r2, r3
 8008904:	42ac      	cmp	r4, r5
 8008906:	d101      	bne.n	800890c <__sfputs_r+0x12>
 8008908:	2000      	movs	r0, #0
 800890a:	e007      	b.n	800891c <__sfputs_r+0x22>
 800890c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008910:	463a      	mov	r2, r7
 8008912:	4630      	mov	r0, r6
 8008914:	f7ff ffda 	bl	80088cc <__sfputc_r>
 8008918:	1c43      	adds	r3, r0, #1
 800891a:	d1f3      	bne.n	8008904 <__sfputs_r+0xa>
 800891c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008920 <_vfiprintf_r>:
 8008920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008924:	460d      	mov	r5, r1
 8008926:	b09d      	sub	sp, #116	@ 0x74
 8008928:	4614      	mov	r4, r2
 800892a:	4698      	mov	r8, r3
 800892c:	4606      	mov	r6, r0
 800892e:	b118      	cbz	r0, 8008938 <_vfiprintf_r+0x18>
 8008930:	6a03      	ldr	r3, [r0, #32]
 8008932:	b90b      	cbnz	r3, 8008938 <_vfiprintf_r+0x18>
 8008934:	f7fe f97c 	bl	8006c30 <__sinit>
 8008938:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800893a:	07d9      	lsls	r1, r3, #31
 800893c:	d405      	bmi.n	800894a <_vfiprintf_r+0x2a>
 800893e:	89ab      	ldrh	r3, [r5, #12]
 8008940:	059a      	lsls	r2, r3, #22
 8008942:	d402      	bmi.n	800894a <_vfiprintf_r+0x2a>
 8008944:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008946:	f7fe fade 	bl	8006f06 <__retarget_lock_acquire_recursive>
 800894a:	89ab      	ldrh	r3, [r5, #12]
 800894c:	071b      	lsls	r3, r3, #28
 800894e:	d501      	bpl.n	8008954 <_vfiprintf_r+0x34>
 8008950:	692b      	ldr	r3, [r5, #16]
 8008952:	b99b      	cbnz	r3, 800897c <_vfiprintf_r+0x5c>
 8008954:	4629      	mov	r1, r5
 8008956:	4630      	mov	r0, r6
 8008958:	f000 f938 	bl	8008bcc <__swsetup_r>
 800895c:	b170      	cbz	r0, 800897c <_vfiprintf_r+0x5c>
 800895e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008960:	07dc      	lsls	r4, r3, #31
 8008962:	d504      	bpl.n	800896e <_vfiprintf_r+0x4e>
 8008964:	f04f 30ff 	mov.w	r0, #4294967295
 8008968:	b01d      	add	sp, #116	@ 0x74
 800896a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800896e:	89ab      	ldrh	r3, [r5, #12]
 8008970:	0598      	lsls	r0, r3, #22
 8008972:	d4f7      	bmi.n	8008964 <_vfiprintf_r+0x44>
 8008974:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008976:	f7fe fac7 	bl	8006f08 <__retarget_lock_release_recursive>
 800897a:	e7f3      	b.n	8008964 <_vfiprintf_r+0x44>
 800897c:	2300      	movs	r3, #0
 800897e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008980:	2320      	movs	r3, #32
 8008982:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008986:	f8cd 800c 	str.w	r8, [sp, #12]
 800898a:	2330      	movs	r3, #48	@ 0x30
 800898c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008b3c <_vfiprintf_r+0x21c>
 8008990:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008994:	f04f 0901 	mov.w	r9, #1
 8008998:	4623      	mov	r3, r4
 800899a:	469a      	mov	sl, r3
 800899c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089a0:	b10a      	cbz	r2, 80089a6 <_vfiprintf_r+0x86>
 80089a2:	2a25      	cmp	r2, #37	@ 0x25
 80089a4:	d1f9      	bne.n	800899a <_vfiprintf_r+0x7a>
 80089a6:	ebba 0b04 	subs.w	fp, sl, r4
 80089aa:	d00b      	beq.n	80089c4 <_vfiprintf_r+0xa4>
 80089ac:	465b      	mov	r3, fp
 80089ae:	4622      	mov	r2, r4
 80089b0:	4629      	mov	r1, r5
 80089b2:	4630      	mov	r0, r6
 80089b4:	f7ff ffa1 	bl	80088fa <__sfputs_r>
 80089b8:	3001      	adds	r0, #1
 80089ba:	f000 80a7 	beq.w	8008b0c <_vfiprintf_r+0x1ec>
 80089be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089c0:	445a      	add	r2, fp
 80089c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80089c4:	f89a 3000 	ldrb.w	r3, [sl]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f000 809f 	beq.w	8008b0c <_vfiprintf_r+0x1ec>
 80089ce:	2300      	movs	r3, #0
 80089d0:	f04f 32ff 	mov.w	r2, #4294967295
 80089d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089d8:	f10a 0a01 	add.w	sl, sl, #1
 80089dc:	9304      	str	r3, [sp, #16]
 80089de:	9307      	str	r3, [sp, #28]
 80089e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80089e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80089e6:	4654      	mov	r4, sl
 80089e8:	2205      	movs	r2, #5
 80089ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089ee:	4853      	ldr	r0, [pc, #332]	@ (8008b3c <_vfiprintf_r+0x21c>)
 80089f0:	f7f7 fbf6 	bl	80001e0 <memchr>
 80089f4:	9a04      	ldr	r2, [sp, #16]
 80089f6:	b9d8      	cbnz	r0, 8008a30 <_vfiprintf_r+0x110>
 80089f8:	06d1      	lsls	r1, r2, #27
 80089fa:	bf44      	itt	mi
 80089fc:	2320      	movmi	r3, #32
 80089fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a02:	0713      	lsls	r3, r2, #28
 8008a04:	bf44      	itt	mi
 8008a06:	232b      	movmi	r3, #43	@ 0x2b
 8008a08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a0c:	f89a 3000 	ldrb.w	r3, [sl]
 8008a10:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a12:	d015      	beq.n	8008a40 <_vfiprintf_r+0x120>
 8008a14:	9a07      	ldr	r2, [sp, #28]
 8008a16:	4654      	mov	r4, sl
 8008a18:	2000      	movs	r0, #0
 8008a1a:	f04f 0c0a 	mov.w	ip, #10
 8008a1e:	4621      	mov	r1, r4
 8008a20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a24:	3b30      	subs	r3, #48	@ 0x30
 8008a26:	2b09      	cmp	r3, #9
 8008a28:	d94b      	bls.n	8008ac2 <_vfiprintf_r+0x1a2>
 8008a2a:	b1b0      	cbz	r0, 8008a5a <_vfiprintf_r+0x13a>
 8008a2c:	9207      	str	r2, [sp, #28]
 8008a2e:	e014      	b.n	8008a5a <_vfiprintf_r+0x13a>
 8008a30:	eba0 0308 	sub.w	r3, r0, r8
 8008a34:	fa09 f303 	lsl.w	r3, r9, r3
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	9304      	str	r3, [sp, #16]
 8008a3c:	46a2      	mov	sl, r4
 8008a3e:	e7d2      	b.n	80089e6 <_vfiprintf_r+0xc6>
 8008a40:	9b03      	ldr	r3, [sp, #12]
 8008a42:	1d19      	adds	r1, r3, #4
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	9103      	str	r1, [sp, #12]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	bfbb      	ittet	lt
 8008a4c:	425b      	neglt	r3, r3
 8008a4e:	f042 0202 	orrlt.w	r2, r2, #2
 8008a52:	9307      	strge	r3, [sp, #28]
 8008a54:	9307      	strlt	r3, [sp, #28]
 8008a56:	bfb8      	it	lt
 8008a58:	9204      	strlt	r2, [sp, #16]
 8008a5a:	7823      	ldrb	r3, [r4, #0]
 8008a5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a5e:	d10a      	bne.n	8008a76 <_vfiprintf_r+0x156>
 8008a60:	7863      	ldrb	r3, [r4, #1]
 8008a62:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a64:	d132      	bne.n	8008acc <_vfiprintf_r+0x1ac>
 8008a66:	9b03      	ldr	r3, [sp, #12]
 8008a68:	1d1a      	adds	r2, r3, #4
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	9203      	str	r2, [sp, #12]
 8008a6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a72:	3402      	adds	r4, #2
 8008a74:	9305      	str	r3, [sp, #20]
 8008a76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008b4c <_vfiprintf_r+0x22c>
 8008a7a:	7821      	ldrb	r1, [r4, #0]
 8008a7c:	2203      	movs	r2, #3
 8008a7e:	4650      	mov	r0, sl
 8008a80:	f7f7 fbae 	bl	80001e0 <memchr>
 8008a84:	b138      	cbz	r0, 8008a96 <_vfiprintf_r+0x176>
 8008a86:	9b04      	ldr	r3, [sp, #16]
 8008a88:	eba0 000a 	sub.w	r0, r0, sl
 8008a8c:	2240      	movs	r2, #64	@ 0x40
 8008a8e:	4082      	lsls	r2, r0
 8008a90:	4313      	orrs	r3, r2
 8008a92:	3401      	adds	r4, #1
 8008a94:	9304      	str	r3, [sp, #16]
 8008a96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a9a:	4829      	ldr	r0, [pc, #164]	@ (8008b40 <_vfiprintf_r+0x220>)
 8008a9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008aa0:	2206      	movs	r2, #6
 8008aa2:	f7f7 fb9d 	bl	80001e0 <memchr>
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	d03f      	beq.n	8008b2a <_vfiprintf_r+0x20a>
 8008aaa:	4b26      	ldr	r3, [pc, #152]	@ (8008b44 <_vfiprintf_r+0x224>)
 8008aac:	bb1b      	cbnz	r3, 8008af6 <_vfiprintf_r+0x1d6>
 8008aae:	9b03      	ldr	r3, [sp, #12]
 8008ab0:	3307      	adds	r3, #7
 8008ab2:	f023 0307 	bic.w	r3, r3, #7
 8008ab6:	3308      	adds	r3, #8
 8008ab8:	9303      	str	r3, [sp, #12]
 8008aba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008abc:	443b      	add	r3, r7
 8008abe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ac0:	e76a      	b.n	8008998 <_vfiprintf_r+0x78>
 8008ac2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ac6:	460c      	mov	r4, r1
 8008ac8:	2001      	movs	r0, #1
 8008aca:	e7a8      	b.n	8008a1e <_vfiprintf_r+0xfe>
 8008acc:	2300      	movs	r3, #0
 8008ace:	3401      	adds	r4, #1
 8008ad0:	9305      	str	r3, [sp, #20]
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	f04f 0c0a 	mov.w	ip, #10
 8008ad8:	4620      	mov	r0, r4
 8008ada:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ade:	3a30      	subs	r2, #48	@ 0x30
 8008ae0:	2a09      	cmp	r2, #9
 8008ae2:	d903      	bls.n	8008aec <_vfiprintf_r+0x1cc>
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d0c6      	beq.n	8008a76 <_vfiprintf_r+0x156>
 8008ae8:	9105      	str	r1, [sp, #20]
 8008aea:	e7c4      	b.n	8008a76 <_vfiprintf_r+0x156>
 8008aec:	fb0c 2101 	mla	r1, ip, r1, r2
 8008af0:	4604      	mov	r4, r0
 8008af2:	2301      	movs	r3, #1
 8008af4:	e7f0      	b.n	8008ad8 <_vfiprintf_r+0x1b8>
 8008af6:	ab03      	add	r3, sp, #12
 8008af8:	9300      	str	r3, [sp, #0]
 8008afa:	462a      	mov	r2, r5
 8008afc:	4b12      	ldr	r3, [pc, #72]	@ (8008b48 <_vfiprintf_r+0x228>)
 8008afe:	a904      	add	r1, sp, #16
 8008b00:	4630      	mov	r0, r6
 8008b02:	f7fd fc51 	bl	80063a8 <_printf_float>
 8008b06:	4607      	mov	r7, r0
 8008b08:	1c78      	adds	r0, r7, #1
 8008b0a:	d1d6      	bne.n	8008aba <_vfiprintf_r+0x19a>
 8008b0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b0e:	07d9      	lsls	r1, r3, #31
 8008b10:	d405      	bmi.n	8008b1e <_vfiprintf_r+0x1fe>
 8008b12:	89ab      	ldrh	r3, [r5, #12]
 8008b14:	059a      	lsls	r2, r3, #22
 8008b16:	d402      	bmi.n	8008b1e <_vfiprintf_r+0x1fe>
 8008b18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b1a:	f7fe f9f5 	bl	8006f08 <__retarget_lock_release_recursive>
 8008b1e:	89ab      	ldrh	r3, [r5, #12]
 8008b20:	065b      	lsls	r3, r3, #25
 8008b22:	f53f af1f 	bmi.w	8008964 <_vfiprintf_r+0x44>
 8008b26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b28:	e71e      	b.n	8008968 <_vfiprintf_r+0x48>
 8008b2a:	ab03      	add	r3, sp, #12
 8008b2c:	9300      	str	r3, [sp, #0]
 8008b2e:	462a      	mov	r2, r5
 8008b30:	4b05      	ldr	r3, [pc, #20]	@ (8008b48 <_vfiprintf_r+0x228>)
 8008b32:	a904      	add	r1, sp, #16
 8008b34:	4630      	mov	r0, r6
 8008b36:	f7fd fecf 	bl	80068d8 <_printf_i>
 8008b3a:	e7e4      	b.n	8008b06 <_vfiprintf_r+0x1e6>
 8008b3c:	08009040 	.word	0x08009040
 8008b40:	0800904a 	.word	0x0800904a
 8008b44:	080063a9 	.word	0x080063a9
 8008b48:	080088fb 	.word	0x080088fb
 8008b4c:	08009046 	.word	0x08009046

08008b50 <__swbuf_r>:
 8008b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b52:	460e      	mov	r6, r1
 8008b54:	4614      	mov	r4, r2
 8008b56:	4605      	mov	r5, r0
 8008b58:	b118      	cbz	r0, 8008b62 <__swbuf_r+0x12>
 8008b5a:	6a03      	ldr	r3, [r0, #32]
 8008b5c:	b90b      	cbnz	r3, 8008b62 <__swbuf_r+0x12>
 8008b5e:	f7fe f867 	bl	8006c30 <__sinit>
 8008b62:	69a3      	ldr	r3, [r4, #24]
 8008b64:	60a3      	str	r3, [r4, #8]
 8008b66:	89a3      	ldrh	r3, [r4, #12]
 8008b68:	071a      	lsls	r2, r3, #28
 8008b6a:	d501      	bpl.n	8008b70 <__swbuf_r+0x20>
 8008b6c:	6923      	ldr	r3, [r4, #16]
 8008b6e:	b943      	cbnz	r3, 8008b82 <__swbuf_r+0x32>
 8008b70:	4621      	mov	r1, r4
 8008b72:	4628      	mov	r0, r5
 8008b74:	f000 f82a 	bl	8008bcc <__swsetup_r>
 8008b78:	b118      	cbz	r0, 8008b82 <__swbuf_r+0x32>
 8008b7a:	f04f 37ff 	mov.w	r7, #4294967295
 8008b7e:	4638      	mov	r0, r7
 8008b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b82:	6823      	ldr	r3, [r4, #0]
 8008b84:	6922      	ldr	r2, [r4, #16]
 8008b86:	1a98      	subs	r0, r3, r2
 8008b88:	6963      	ldr	r3, [r4, #20]
 8008b8a:	b2f6      	uxtb	r6, r6
 8008b8c:	4283      	cmp	r3, r0
 8008b8e:	4637      	mov	r7, r6
 8008b90:	dc05      	bgt.n	8008b9e <__swbuf_r+0x4e>
 8008b92:	4621      	mov	r1, r4
 8008b94:	4628      	mov	r0, r5
 8008b96:	f7ff fdaf 	bl	80086f8 <_fflush_r>
 8008b9a:	2800      	cmp	r0, #0
 8008b9c:	d1ed      	bne.n	8008b7a <__swbuf_r+0x2a>
 8008b9e:	68a3      	ldr	r3, [r4, #8]
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	60a3      	str	r3, [r4, #8]
 8008ba4:	6823      	ldr	r3, [r4, #0]
 8008ba6:	1c5a      	adds	r2, r3, #1
 8008ba8:	6022      	str	r2, [r4, #0]
 8008baa:	701e      	strb	r6, [r3, #0]
 8008bac:	6962      	ldr	r2, [r4, #20]
 8008bae:	1c43      	adds	r3, r0, #1
 8008bb0:	429a      	cmp	r2, r3
 8008bb2:	d004      	beq.n	8008bbe <__swbuf_r+0x6e>
 8008bb4:	89a3      	ldrh	r3, [r4, #12]
 8008bb6:	07db      	lsls	r3, r3, #31
 8008bb8:	d5e1      	bpl.n	8008b7e <__swbuf_r+0x2e>
 8008bba:	2e0a      	cmp	r6, #10
 8008bbc:	d1df      	bne.n	8008b7e <__swbuf_r+0x2e>
 8008bbe:	4621      	mov	r1, r4
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	f7ff fd99 	bl	80086f8 <_fflush_r>
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	d0d9      	beq.n	8008b7e <__swbuf_r+0x2e>
 8008bca:	e7d6      	b.n	8008b7a <__swbuf_r+0x2a>

08008bcc <__swsetup_r>:
 8008bcc:	b538      	push	{r3, r4, r5, lr}
 8008bce:	4b29      	ldr	r3, [pc, #164]	@ (8008c74 <__swsetup_r+0xa8>)
 8008bd0:	4605      	mov	r5, r0
 8008bd2:	6818      	ldr	r0, [r3, #0]
 8008bd4:	460c      	mov	r4, r1
 8008bd6:	b118      	cbz	r0, 8008be0 <__swsetup_r+0x14>
 8008bd8:	6a03      	ldr	r3, [r0, #32]
 8008bda:	b90b      	cbnz	r3, 8008be0 <__swsetup_r+0x14>
 8008bdc:	f7fe f828 	bl	8006c30 <__sinit>
 8008be0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008be4:	0719      	lsls	r1, r3, #28
 8008be6:	d422      	bmi.n	8008c2e <__swsetup_r+0x62>
 8008be8:	06da      	lsls	r2, r3, #27
 8008bea:	d407      	bmi.n	8008bfc <__swsetup_r+0x30>
 8008bec:	2209      	movs	r2, #9
 8008bee:	602a      	str	r2, [r5, #0]
 8008bf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bf4:	81a3      	strh	r3, [r4, #12]
 8008bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8008bfa:	e033      	b.n	8008c64 <__swsetup_r+0x98>
 8008bfc:	0758      	lsls	r0, r3, #29
 8008bfe:	d512      	bpl.n	8008c26 <__swsetup_r+0x5a>
 8008c00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c02:	b141      	cbz	r1, 8008c16 <__swsetup_r+0x4a>
 8008c04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c08:	4299      	cmp	r1, r3
 8008c0a:	d002      	beq.n	8008c12 <__swsetup_r+0x46>
 8008c0c:	4628      	mov	r0, r5
 8008c0e:	f7fe ffcb 	bl	8007ba8 <_free_r>
 8008c12:	2300      	movs	r3, #0
 8008c14:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c16:	89a3      	ldrh	r3, [r4, #12]
 8008c18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008c1c:	81a3      	strh	r3, [r4, #12]
 8008c1e:	2300      	movs	r3, #0
 8008c20:	6063      	str	r3, [r4, #4]
 8008c22:	6923      	ldr	r3, [r4, #16]
 8008c24:	6023      	str	r3, [r4, #0]
 8008c26:	89a3      	ldrh	r3, [r4, #12]
 8008c28:	f043 0308 	orr.w	r3, r3, #8
 8008c2c:	81a3      	strh	r3, [r4, #12]
 8008c2e:	6923      	ldr	r3, [r4, #16]
 8008c30:	b94b      	cbnz	r3, 8008c46 <__swsetup_r+0x7a>
 8008c32:	89a3      	ldrh	r3, [r4, #12]
 8008c34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008c38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c3c:	d003      	beq.n	8008c46 <__swsetup_r+0x7a>
 8008c3e:	4621      	mov	r1, r4
 8008c40:	4628      	mov	r0, r5
 8008c42:	f000 f83f 	bl	8008cc4 <__smakebuf_r>
 8008c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c4a:	f013 0201 	ands.w	r2, r3, #1
 8008c4e:	d00a      	beq.n	8008c66 <__swsetup_r+0x9a>
 8008c50:	2200      	movs	r2, #0
 8008c52:	60a2      	str	r2, [r4, #8]
 8008c54:	6962      	ldr	r2, [r4, #20]
 8008c56:	4252      	negs	r2, r2
 8008c58:	61a2      	str	r2, [r4, #24]
 8008c5a:	6922      	ldr	r2, [r4, #16]
 8008c5c:	b942      	cbnz	r2, 8008c70 <__swsetup_r+0xa4>
 8008c5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008c62:	d1c5      	bne.n	8008bf0 <__swsetup_r+0x24>
 8008c64:	bd38      	pop	{r3, r4, r5, pc}
 8008c66:	0799      	lsls	r1, r3, #30
 8008c68:	bf58      	it	pl
 8008c6a:	6962      	ldrpl	r2, [r4, #20]
 8008c6c:	60a2      	str	r2, [r4, #8]
 8008c6e:	e7f4      	b.n	8008c5a <__swsetup_r+0x8e>
 8008c70:	2000      	movs	r0, #0
 8008c72:	e7f7      	b.n	8008c64 <__swsetup_r+0x98>
 8008c74:	20000018 	.word	0x20000018

08008c78 <__swhatbuf_r>:
 8008c78:	b570      	push	{r4, r5, r6, lr}
 8008c7a:	460c      	mov	r4, r1
 8008c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c80:	2900      	cmp	r1, #0
 8008c82:	b096      	sub	sp, #88	@ 0x58
 8008c84:	4615      	mov	r5, r2
 8008c86:	461e      	mov	r6, r3
 8008c88:	da0d      	bge.n	8008ca6 <__swhatbuf_r+0x2e>
 8008c8a:	89a3      	ldrh	r3, [r4, #12]
 8008c8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008c90:	f04f 0100 	mov.w	r1, #0
 8008c94:	bf14      	ite	ne
 8008c96:	2340      	movne	r3, #64	@ 0x40
 8008c98:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008c9c:	2000      	movs	r0, #0
 8008c9e:	6031      	str	r1, [r6, #0]
 8008ca0:	602b      	str	r3, [r5, #0]
 8008ca2:	b016      	add	sp, #88	@ 0x58
 8008ca4:	bd70      	pop	{r4, r5, r6, pc}
 8008ca6:	466a      	mov	r2, sp
 8008ca8:	f000 f848 	bl	8008d3c <_fstat_r>
 8008cac:	2800      	cmp	r0, #0
 8008cae:	dbec      	blt.n	8008c8a <__swhatbuf_r+0x12>
 8008cb0:	9901      	ldr	r1, [sp, #4]
 8008cb2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008cb6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008cba:	4259      	negs	r1, r3
 8008cbc:	4159      	adcs	r1, r3
 8008cbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008cc2:	e7eb      	b.n	8008c9c <__swhatbuf_r+0x24>

08008cc4 <__smakebuf_r>:
 8008cc4:	898b      	ldrh	r3, [r1, #12]
 8008cc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cc8:	079d      	lsls	r5, r3, #30
 8008cca:	4606      	mov	r6, r0
 8008ccc:	460c      	mov	r4, r1
 8008cce:	d507      	bpl.n	8008ce0 <__smakebuf_r+0x1c>
 8008cd0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008cd4:	6023      	str	r3, [r4, #0]
 8008cd6:	6123      	str	r3, [r4, #16]
 8008cd8:	2301      	movs	r3, #1
 8008cda:	6163      	str	r3, [r4, #20]
 8008cdc:	b003      	add	sp, #12
 8008cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ce0:	ab01      	add	r3, sp, #4
 8008ce2:	466a      	mov	r2, sp
 8008ce4:	f7ff ffc8 	bl	8008c78 <__swhatbuf_r>
 8008ce8:	9f00      	ldr	r7, [sp, #0]
 8008cea:	4605      	mov	r5, r0
 8008cec:	4639      	mov	r1, r7
 8008cee:	4630      	mov	r0, r6
 8008cf0:	f7fd fa2e 	bl	8006150 <_malloc_r>
 8008cf4:	b948      	cbnz	r0, 8008d0a <__smakebuf_r+0x46>
 8008cf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cfa:	059a      	lsls	r2, r3, #22
 8008cfc:	d4ee      	bmi.n	8008cdc <__smakebuf_r+0x18>
 8008cfe:	f023 0303 	bic.w	r3, r3, #3
 8008d02:	f043 0302 	orr.w	r3, r3, #2
 8008d06:	81a3      	strh	r3, [r4, #12]
 8008d08:	e7e2      	b.n	8008cd0 <__smakebuf_r+0xc>
 8008d0a:	89a3      	ldrh	r3, [r4, #12]
 8008d0c:	6020      	str	r0, [r4, #0]
 8008d0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d12:	81a3      	strh	r3, [r4, #12]
 8008d14:	9b01      	ldr	r3, [sp, #4]
 8008d16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008d1a:	b15b      	cbz	r3, 8008d34 <__smakebuf_r+0x70>
 8008d1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d20:	4630      	mov	r0, r6
 8008d22:	f000 f81d 	bl	8008d60 <_isatty_r>
 8008d26:	b128      	cbz	r0, 8008d34 <__smakebuf_r+0x70>
 8008d28:	89a3      	ldrh	r3, [r4, #12]
 8008d2a:	f023 0303 	bic.w	r3, r3, #3
 8008d2e:	f043 0301 	orr.w	r3, r3, #1
 8008d32:	81a3      	strh	r3, [r4, #12]
 8008d34:	89a3      	ldrh	r3, [r4, #12]
 8008d36:	431d      	orrs	r5, r3
 8008d38:	81a5      	strh	r5, [r4, #12]
 8008d3a:	e7cf      	b.n	8008cdc <__smakebuf_r+0x18>

08008d3c <_fstat_r>:
 8008d3c:	b538      	push	{r3, r4, r5, lr}
 8008d3e:	4d07      	ldr	r5, [pc, #28]	@ (8008d5c <_fstat_r+0x20>)
 8008d40:	2300      	movs	r3, #0
 8008d42:	4604      	mov	r4, r0
 8008d44:	4608      	mov	r0, r1
 8008d46:	4611      	mov	r1, r2
 8008d48:	602b      	str	r3, [r5, #0]
 8008d4a:	f7f9 fe1f 	bl	800298c <_fstat>
 8008d4e:	1c43      	adds	r3, r0, #1
 8008d50:	d102      	bne.n	8008d58 <_fstat_r+0x1c>
 8008d52:	682b      	ldr	r3, [r5, #0]
 8008d54:	b103      	cbz	r3, 8008d58 <_fstat_r+0x1c>
 8008d56:	6023      	str	r3, [r4, #0]
 8008d58:	bd38      	pop	{r3, r4, r5, pc}
 8008d5a:	bf00      	nop
 8008d5c:	2000052c 	.word	0x2000052c

08008d60 <_isatty_r>:
 8008d60:	b538      	push	{r3, r4, r5, lr}
 8008d62:	4d06      	ldr	r5, [pc, #24]	@ (8008d7c <_isatty_r+0x1c>)
 8008d64:	2300      	movs	r3, #0
 8008d66:	4604      	mov	r4, r0
 8008d68:	4608      	mov	r0, r1
 8008d6a:	602b      	str	r3, [r5, #0]
 8008d6c:	f7f9 fe1e 	bl	80029ac <_isatty>
 8008d70:	1c43      	adds	r3, r0, #1
 8008d72:	d102      	bne.n	8008d7a <_isatty_r+0x1a>
 8008d74:	682b      	ldr	r3, [r5, #0]
 8008d76:	b103      	cbz	r3, 8008d7a <_isatty_r+0x1a>
 8008d78:	6023      	str	r3, [r4, #0]
 8008d7a:	bd38      	pop	{r3, r4, r5, pc}
 8008d7c:	2000052c 	.word	0x2000052c

08008d80 <_init>:
 8008d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d82:	bf00      	nop
 8008d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d86:	bc08      	pop	{r3}
 8008d88:	469e      	mov	lr, r3
 8008d8a:	4770      	bx	lr

08008d8c <_fini>:
 8008d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d8e:	bf00      	nop
 8008d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d92:	bc08      	pop	{r3}
 8008d94:	469e      	mov	lr, r3
 8008d96:	4770      	bx	lr
