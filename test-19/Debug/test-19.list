
test-19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c5c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  08010e00  08010e00  00011e00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011338  08011338  00013494  2**0
                  CONTENTS
  4 .ARM          00000008  08011338  08011338  00012338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011340  08011340  00013494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011340  08011340  00012340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011344  08011344  00012344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000494  20000000  08011348  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ac  20000494  080117dc  00013494  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a40  080117dc  00013a40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013494  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021dde  00000000  00000000  000134c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000477f  00000000  00000000  000352a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001970  00000000  00000000  00039a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013c1  00000000  00000000  0003b398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d1eb  00000000  00000000  0003c759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ebce  00000000  00000000  00059944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f471  00000000  00000000  00078512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117983  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e3c  00000000  00000000  001179c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  0011f804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000494 	.word	0x20000494
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010de4 	.word	0x08010de4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000498 	.word	0x20000498
 80001dc:	08010de4 	.word	0x08010de4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <_ZN12ColoredBlockC1EP12ConveyorBelt>:
 * @date Jun 6, 2024
 */

#include "ColoredBlock.h"

ColoredBlock::ColoredBlock(ConveyorBelt* conveyor)
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	4a07      	ldr	r2, [pc, #28]	@ (8000f70 <_ZN12ColoredBlockC1EP12ConveyorBelt+0x28>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f04f 0200 	mov.w	r2, #0
 8000f5e:	605a      	str	r2, [r3, #4]
{
	// TODO Auto-generated constructor stub
}
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4618      	mov	r0, r3
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	08010f38 	.word	0x08010f38

08000f74 <_ZN12ColoredBlock15update_positionEf>:

void ColoredBlock::update_position(float new_position)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	ed87 0a00 	vstr	s0, [r7]
	position = new_position;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	683a      	ldr	r2, [r7, #0]
 8000f84:	605a      	str	r2, [r3, #4]
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <_ZN12ColoredBlock12update_colorEb>:

void ColoredBlock::update_color(bool new_color)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	70fb      	strb	r3, [r7, #3]
	color = new_color;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	78fa      	ldrb	r2, [r7, #3]
 8000fa2:	721a      	strb	r2, [r3, #8]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <_ZN12ColoredBlockD1Ev>:

ColoredBlock::~ColoredBlock()
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	4a04      	ldr	r2, [pc, #16]	@ (8000fcc <_ZN12ColoredBlockD1Ev+0x1c>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	601a      	str	r2, [r3, #0]
{
}
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	08010f38 	.word	0x08010f38

08000fd0 <_ZN12ColoredBlockD0Ev>:
ColoredBlock::~ColoredBlock()
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
}
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ffe9 	bl	8000fb0 <_ZN12ColoredBlockD1Ev>
 8000fde:	210c      	movs	r1, #12
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f00d f88a 	bl	800e0fa <_ZdlPvj>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <_ZN12ConveyorBeltC1EP13PololuEncoderf>:
 * @date Jun 6, 2024
 */

#include "ConveyorBelt.h"

ConveyorBelt::ConveyorBelt(PololuEncoder* encoder,
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	ed87 0a01 	vstr	s0, [r7, #4]
						   float roller_diameter_mm)
							: encoder(encoder),
							  roller_diameter_mm(roller_diameter_mm)
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	@ (800102c <_ZN12ConveyorBeltC1EP13PololuEncoderf+0x3c>)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	601a      	str	r2, [r3, #0]
							: encoder(encoder),
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	605a      	str	r2, [r3, #4]
							  roller_diameter_mm(roller_diameter_mm)
 800100a:	edd7 7a01 	vldr	s15, [r7, #4]
 800100e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001012:	edc7 7a00 	vstr	s15, [r7]
 8001016:	783b      	ldrb	r3, [r7, #0]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	721a      	strb	r2, [r3, #8]
{
}
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4618      	mov	r0, r3
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	08010f48 	.word	0x08010f48

08001030 <_ZN12ConveyorBelt12get_positionEv>:

float ConveyorBelt::get_position()
{
 8001030:	b5b0      	push	{r4, r5, r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	// Get the latest encoder position in ticks
	// encoder->update();
	int32_t encoder_count = encoder->get_position();
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	4618      	mov	r0, r3
 800103e:	f000 fa85 	bl	800154c <_ZN13PololuEncoder12get_positionEv>
 8001042:	60f8      	str	r0, [r7, #12]

	// Convert that to a number of revolutions, then a linear position
	float revolutions = encoder_count/(encoder->gear_ratio * (float)encoder->CPR);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	ee07 3a90 	vmov	s15, r3
 800104a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	ed93 7a03 	vldr	s14, [r3, #12]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800105e:	ee07 3a90 	vmov	s15, r3
 8001062:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001066:	ee27 7a27 	vmul.f32	s14, s14, s15
 800106a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800106e:	edc7 7a02 	vstr	s15, [r7, #8]
	linear_position = revolutions*3.14159*2*roller_diameter_mm/2;
 8001072:	68b8      	ldr	r0, [r7, #8]
 8001074:	f7ff fa70 	bl	8000558 <__aeabi_f2d>
 8001078:	a31b      	add	r3, pc, #108	@ (adr r3, 80010e8 <_ZN12ConveyorBelt12get_positionEv+0xb8>)
 800107a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107e:	f7ff fac3 	bl	8000608 <__aeabi_dmul>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4610      	mov	r0, r2
 8001088:	4619      	mov	r1, r3
 800108a:	4602      	mov	r2, r0
 800108c:	460b      	mov	r3, r1
 800108e:	f7ff f905 	bl	800029c <__adddf3>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4614      	mov	r4, r2
 8001098:	461d      	mov	r5, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	7a1b      	ldrb	r3, [r3, #8]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fa48 	bl	8000534 <__aeabi_i2d>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4620      	mov	r0, r4
 80010aa:	4629      	mov	r1, r5
 80010ac:	f7ff faac 	bl	8000608 <__aeabi_dmul>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	4610      	mov	r0, r2
 80010b6:	4619      	mov	r1, r3
 80010b8:	f04f 0200 	mov.w	r2, #0
 80010bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010c0:	f7ff fbcc 	bl	800085c <__aeabi_ddiv>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4610      	mov	r0, r2
 80010ca:	4619      	mov	r1, r3
 80010cc:	f7ff fd74 	bl	8000bb8 <__aeabi_d2f>
 80010d0:	4602      	mov	r2, r0
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	60da      	str	r2, [r3, #12]
	return linear_position;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	ee07 3a90 	vmov	s15, r3
}
 80010de:	eeb0 0a67 	vmov.f32	s0, s15
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bdb0      	pop	{r4, r5, r7, pc}
 80010e8:	f01b866e 	.word	0xf01b866e
 80010ec:	400921f9 	.word	0x400921f9

080010f0 <_ZN12ConveyorBeltD1Ev>:
    int string_length = snprintf(my_message, MESSAGE_LENGTH, "Conveyor Belt Position: %*.3f mm.\r\n",
                             VALUE_WIDTH, linear_position);
    HAL_UART_Transmit(uart_handle, (uint8_t*)my_message, string_length, HAL_MAX_DELAY);
}

ConveyorBelt::~ConveyorBelt()
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	4a04      	ldr	r2, [pc, #16]	@ (800110c <_ZN12ConveyorBeltD1Ev+0x1c>)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	601a      	str	r2, [r3, #0]
{
	// Nothing needed
}
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	08010f48 	.word	0x08010f48

08001110 <_ZN12ConveyorBeltD0Ev>:
ConveyorBelt::~ConveyorBelt()
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
}
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ffe9 	bl	80010f0 <_ZN12ConveyorBeltD1Ev>
 800111e:	2110      	movs	r1, #16
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f00c ffea 	bl	800e0fa <_ZdlPvj>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <_ZN12MotorControlC1EP15TB6612FNG_MotorP13PololuEncodermfff>:
 * @date Jun 2, 2024
 */

#include "MotorControl.h"

MotorControl::MotorControl(
 8001130:	b580      	push	{r7, lr}
 8001132:	b088      	sub	sp, #32
 8001134:	af00      	add	r7, sp, #0
 8001136:	61f8      	str	r0, [r7, #28]
 8001138:	61b9      	str	r1, [r7, #24]
 800113a:	617a      	str	r2, [r7, #20]
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001142:	edc7 0a02 	vstr	s1, [r7, #8]
 8001146:	ed87 1a01 	vstr	s2, [r7, #4]
		: motor(motor),
		  encoder(encoder),
		  control_frequency_Hz(control_frequency_Hz),
		  K_P(K_P),
		  K_I(K_I),
		  K_D(K_D)
 800114a:	4a16      	ldr	r2, [pc, #88]	@ (80011a4 <_ZN12MotorControlC1EP15TB6612FNG_MotorP13PololuEncodermfff+0x74>)
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	601a      	str	r2, [r3, #0]
		: motor(motor),
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	605a      	str	r2, [r3, #4]
		  encoder(encoder),
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	609a      	str	r2, [r3, #8]
		  control_frequency_Hz(control_frequency_Hz),
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	60da      	str	r2, [r3, #12]
		  K_P(K_P),
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	611a      	str	r2, [r3, #16]
		  K_I(K_I),
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	615a      	str	r2, [r3, #20]
		  K_D(K_D)
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	619a      	str	r2, [r3, #24]
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	61da      	str	r2, [r3, #28]
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	621a      	str	r2, [r3, #32]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	625a      	str	r2, [r3, #36]	@ 0x24
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	2200      	movs	r2, #0
 8001190:	859a      	strh	r2, [r3, #44]	@ 0x2c
{
	reinitialize();
 8001192:	69f8      	ldr	r0, [r7, #28]
 8001194:	f000 f8ff 	bl	8001396 <_ZN12MotorControl12reinitializeEv>
}
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	4618      	mov	r0, r3
 800119c:	3720      	adds	r7, #32
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	08010f58 	.word	0x08010f58

080011a8 <_ZN12MotorControlD1Ev>:

MotorControl::~MotorControl()
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	4a06      	ldr	r2, [pc, #24]	@ (80011cc <_ZN12MotorControlD1Ev+0x24>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	601a      	str	r2, [r3, #0]
{
	motor->stop();
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f001 fd87 	bl	8002cce <_ZN15TB6612FNG_Motor4stopEv>
}
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	08010f58 	.word	0x08010f58

080011d0 <_ZN12MotorControlD0Ev>:
MotorControl::~MotorControl()
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
}
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f7ff ffe5 	bl	80011a8 <_ZN12MotorControlD1Ev>
 80011de:	2134      	movs	r1, #52	@ 0x34
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f00c ff8a 	bl	800e0fa <_ZdlPvj>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4618      	mov	r0, r3
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <_ZN12MotorControl3runEf>:
    HAL_UART_Transmit(uart_handle, (uint8_t*)my_message, string_length, HAL_MAX_DELAY);
    encoder->debug_message(uart_handle);
}

void MotorControl::run(float setpoint)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	ed87 0a00 	vstr	s0, [r7]
	// Store to the class
	SP = setpoint;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	631a      	str	r2, [r3, #48]	@ 0x30

	// Grab the latest data from the encoder.
	encoder->update();
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f946 	bl	8001498 <_ZN13PololuEncoder6updateEv>
	float process_value = encoder->get_speed(control_frequency_Hz);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	4619      	mov	r1, r3
 8001216:	4610      	mov	r0, r2
 8001218:	f000 f9a4 	bl	8001564 <_ZN13PololuEncoder9get_speedEm>
 800121c:	ed87 0a03 	vstr	s0, [r7, #12]

	// Get the effort and send to motor
	get_effort_sat(setpoint, process_value);
 8001220:	edd7 0a03 	vldr	s1, [r7, #12]
 8001224:	ed97 0a00 	vldr	s0, [r7]
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f000 f80f 	bl	800124c <_ZN12MotorControl14get_effort_satEff>
	motor->set_duty(effort, saturation_limit);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6858      	ldr	r0, [r3, #4]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f9b3 102c 	ldrsh.w	r1, [r3, #44]	@ 0x2c
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 800123e:	461a      	mov	r2, r3
 8001240:	f001 fcc6 	bl	8002bd0 <_ZN15TB6612FNG_Motor8set_dutyEss>
}
 8001244:	bf00      	nop
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <_ZN12MotorControl14get_effort_satEff>:

int16_t MotorControl::get_effort_sat(
					float setpoint,
					float process_value
					)
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	@ 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	ed87 0a02 	vstr	s0, [r7, #8]
 8001258:	edc7 0a01 	vstr	s1, [r7, #4]
	// Calculating error for P control
	error = setpoint - process_value; // RPM, a float
 800125c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001260:	edd7 7a01 	vldr	s15, [r7, #4]
 8001264:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	edc3 7a08 	vstr	s15, [r3, #32]

	// Calculating running error for I control
	running_error += error/(control_frequency_Hz); // RPM*s, float arithmetic cast to an int
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	ed93 6a08 	vldr	s12, [r3, #32]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	ee07 3a90 	vmov	s15, r3
 8001282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001286:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800128a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
//	{
//		running_error += 0;
//	}

	// Calculating error slope for D control
	error_slope = (error-last_error)*((float)control_frequency_Hz); // RPM/s, a float
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	ed93 7a08 	vldr	s14, [r3, #32]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	edd3 7a07 	vldr	s15, [r3, #28]
 80012a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	ee07 3a90 	vmov	s15, r3
 80012ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	last_error = error;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6a1a      	ldr	r2, [r3, #32]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	61da      	str	r2, [r3, #28]

	// Controller effort
    float P_effort = K_P*error;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	ed93 7a04 	vldr	s14, [r3, #16]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	edd3 7a08 	vldr	s15, [r3, #32]
 80012ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d2:	edc7 7a07 	vstr	s15, [r7, #28]
    float I_effort = K_I*running_error;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	ed93 7a05 	vldr	s14, [r3, #20]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80012e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e6:	edc7 7a06 	vstr	s15, [r7, #24]
    float D_effort = K_D*error_slope;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	ed93 7a06 	vldr	s14, [r3, #24]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80012f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012fa:	edc7 7a05 	vstr	s15, [r7, #20]
    float effort_unsat = P_effort + I_effort + D_effort;
 80012fe:	ed97 7a07 	vldr	s14, [r7, #28]
 8001302:	edd7 7a06 	vldr	s15, [r7, #24]
 8001306:	ee77 7a27 	vadd.f32	s15, s14, s15
 800130a:	ed97 7a05 	vldr	s14, [r7, #20]
 800130e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001312:	edc7 7a04 	vstr	s15, [r7, #16]

    // Saturation
	if (effort_unsat > (float)saturation_limit)
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 800131c:	ee07 3a90 	vmov	s15, r3
 8001320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001324:	ed97 7a04 	vldr	s14, [r7, #16]
 8001328:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800132c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001330:	dd05      	ble.n	800133e <_ZN12MotorControl14get_effort_satEff+0xf2>
	{
		effort = saturation_limit;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	@ 0x2e
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	859a      	strh	r2, [r3, #44]	@ 0x2c
 800133c:	e022      	b.n	8001384 <_ZN12MotorControl14get_effort_satEff+0x138>
	}
	else if (effort_unsat < -1*(float)saturation_limit)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8001344:	ee07 3a90 	vmov	s15, r3
 8001348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800134c:	eef1 7a67 	vneg.f32	s15, s15
 8001350:	ed97 7a04 	vldr	s14, [r7, #16]
 8001354:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135c:	d509      	bpl.n	8001372 <_ZN12MotorControl14get_effort_satEff+0x126>
	{
		effort = -saturation_limit;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8001364:	b29b      	uxth	r3, r3
 8001366:	425b      	negs	r3, r3
 8001368:	b29b      	uxth	r3, r3
 800136a:	b21a      	sxth	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8001370:	e008      	b.n	8001384 <_ZN12MotorControl14get_effort_satEff+0x138>
	}
	else
	{
		effort = (int16_t)effort_unsat;
 8001372:	edd7 7a04 	vldr	s15, [r7, #16]
 8001376:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800137a:	ee17 3a90 	vmov	r3, s15
 800137e:	b21a      	sxth	r2, r3
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	859a      	strh	r2, [r3, #44]	@ 0x2c
	}

	return effort;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
}
 800138a:	4618      	mov	r0, r3
 800138c:	3724      	adds	r7, #36	@ 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <_ZN12MotorControl12reinitializeEv>:

void MotorControl::reinitialize()
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
	// Stop motor
	motor->set_duty(0);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2264      	movs	r2, #100	@ 0x64
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f001 fc12 	bl	8002bd0 <_ZN15TB6612FNG_Motor8set_dutyEss>

	// Reset important stuff
	last_error = 0;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	61da      	str	r2, [r3, #28]
    error = 0;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f04f 0200 	mov.w	r2, #0
 80013ba:	621a      	str	r2, [r3, #32]
    effort = 0;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	859a      	strh	r2, [r3, #44]	@ 0x2c
    running_error = 0; // Most important
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	625a      	str	r2, [r3, #36]	@ 0x24

    // Grab the new saturation limit.
    saturation_limit = motor->timer_handle->Instance->ARR; // Assuming no prescalar is used.
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	695b      	ldr	r3, [r3, #20]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013d4:	b21a      	sxth	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	85da      	strh	r2, [r3, #46]	@ 0x2e
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb>:
 * @date Jun 2, 2024
 */

#include "PololuEncoder.h"

PololuEncoder::PololuEncoder(
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	4611      	mov	r1, r2
 80013f0:	ed87 0a00 	vstr	s0, [r7]
 80013f4:	461a      	mov	r2, r3
 80013f6:	460b      	mov	r3, r1
 80013f8:	80fb      	strh	r3, [r7, #6]
 80013fa:	4613      	mov	r3, r2
 80013fc:	717b      	strb	r3, [r7, #5]
		)
		: timer_handle(timer_handle),
		  CPR(CPR),
		  gear_ratio(gear_ratio),
		  timer_bit_size(timer_bit_size),
		  interrupt_mode(interrupt_mode)
 80013fe:	4a25      	ldr	r2, [pc, #148]	@ (8001494 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0xb0>)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	601a      	str	r2, [r3, #0]
		: timer_handle(timer_handle),
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	605a      	str	r2, [r3, #4]
		  CPR(CPR),
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	88fa      	ldrh	r2, [r7, #6]
 800140e:	811a      	strh	r2, [r3, #8]
		  gear_ratio(gear_ratio),
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	60da      	str	r2, [r3, #12]
		  timer_bit_size(timer_bit_size),
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	797a      	ldrb	r2, [r7, #5]
 800141a:	741a      	strb	r2, [r3, #16]
		  interrupt_mode(interrupt_mode)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	7e3a      	ldrb	r2, [r7, #24]
 8001420:	745a      	strb	r2, [r3, #17]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2200      	movs	r2, #0
 8001426:	825a      	strh	r2, [r3, #18]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2200      	movs	r2, #0
 800142c:	829a      	strh	r2, [r3, #20]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2200      	movs	r2, #0
 8001432:	82da      	strh	r2, [r3, #22]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	61da      	str	r2, [r3, #28]
{
	// Start encoder
	if (interrupt_mode)
 8001442:	7e3b      	ldrb	r3, [r7, #24]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d004      	beq.n	8001452 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0x6e>
	{
		HAL_TIM_Encoder_Start_IT(timer_handle, TIM_CHANNEL_ALL);
 8001448:	213c      	movs	r1, #60	@ 0x3c
 800144a:	68b8      	ldr	r0, [r7, #8]
 800144c:	f006 f90f 	bl	800766e <HAL_TIM_Encoder_Start_IT>
 8001450:	e003      	b.n	800145a <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0x76>
	}
	else
	{
		HAL_TIM_Encoder_Start(timer_handle, TIM_CHANNEL_ALL);
 8001452:	213c      	movs	r1, #60	@ 0x3c
 8001454:	68b8      	ldr	r0, [r7, #8]
 8001456:	f005 ffe5 	bl	8007424 <HAL_TIM_Encoder_Start>
	}

	// Number of bits for the select timer
	if (timer_bit_size == 32)
 800145a:	797b      	ldrb	r3, [r7, #5]
 800145c:	2b20      	cmp	r3, #32
 800145e:	d104      	bne.n	800146a <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0x86>
	{
		max_count = 0xffffffff;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f04f 32ff 	mov.w	r2, #4294967295
 8001466:	621a      	str	r2, [r3, #32]
 8001468:	e003      	b.n	8001472 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0x8e>
	}
	else
	{
		max_count = 0xffff;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001470:	621a      	str	r2, [r3, #32]
	}

	// Set pertinent values for later.
	half_max_count = max_count/2;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6a1b      	ldr	r3, [r3, #32]
 8001476:	085b      	lsrs	r3, r3, #1
 8001478:	461a      	mov	r2, r3
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	625a      	str	r2, [r3, #36]	@ 0x24
	neg_half_max_count = -half_max_count;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001482:	425a      	negs	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4618      	mov	r0, r3
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	08010f68 	.word	0x08010f68

08001498 <_ZN13PololuEncoder6updateEv>:

void PololuEncoder::update()
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	// Read encoder
	if (not interrupt_mode)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	7c5b      	ldrb	r3, [r3, #17]
 80014a4:	f083 0301 	eor.w	r3, r3, #1
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d006      	beq.n	80014bc <_ZN13PololuEncoder6updateEv+0x24>
	{
		count = __HAL_TIM_GET_COUNTER(timer_handle);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	82da      	strh	r2, [r3, #22]
	}
	delta = (int32_t) (count-last_count);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	8ada      	ldrh	r2, [r3, #22]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	8a9b      	ldrh	r3, [r3, #20]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	b21a      	sxth	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	825a      	strh	r2, [r3, #18]
	last_count = count;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	8ada      	ldrh	r2, [r3, #22]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	829a      	strh	r2, [r3, #20]

	// Fix delta from timer overflow
	if (delta > half_max_count)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80014dc:	461a      	mov	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e2:	429a      	cmp	r2, r3
 80014e4:	dd0e      	ble.n	8001504 <_ZN13PololuEncoder6updateEv+0x6c>
	{
		// We've overflowed in the negative direction.
		delta -= max_count + 1;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	3b01      	subs	r3, #1
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	b21a      	sxth	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	825a      	strh	r2, [r3, #18]
 8001502:	e015      	b.n	8001530 <_ZN13PololuEncoder6updateEv+0x98>
	}
	else if (delta < neg_half_max_count)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800150a:	461a      	mov	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001510:	429a      	cmp	r2, r3
 8001512:	da0d      	bge.n	8001530 <_ZN13PololuEncoder6updateEv+0x98>
	{
	    // We've overflowed in the positive direciton.
		delta += max_count + 1;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800151a:	b29a      	uxth	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	b29b      	uxth	r3, r3
 8001522:	4413      	add	r3, r2
 8001524:	b29b      	uxth	r3, r3
 8001526:	3301      	adds	r3, #1
 8001528:	b29b      	uxth	r3, r3
 800152a:	b21a      	sxth	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	825a      	strh	r2, [r3, #18]
	}

	// Finish up
	position += delta;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800153a:	441a      	add	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	619a      	str	r2, [r3, #24]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <_ZN13PololuEncoder12get_positionEv>:
{
	position = 0;
}

int32_t PololuEncoder::get_position()
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	return position;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	699b      	ldr	r3, [r3, #24]
}
 8001558:	4618      	mov	r0, r3
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <_ZN13PololuEncoder9get_speedEm>:
{
	return delta;
}

float PololuEncoder::get_speed(uint32_t control_frequency_Hz)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
	float numerator = delta*(float)control_frequency_Hz*60;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001574:	ee07 3a90 	vmov	s15, r3
 8001578:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	ee07 3a90 	vmov	s15, r3
 8001582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800158a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80015dc <_ZN13PololuEncoder9get_speedEm+0x78>
 800158e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001592:	edc7 7a03 	vstr	s15, [r7, #12]
	float denominator = (float)CPR*gear_ratio;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800159c:	ee07 3a90 	vmov	s15, r3
 80015a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80015aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ae:	edc7 7a02 	vstr	s15, [r7, #8]
    speed = numerator/denominator; //RPM
 80015b2:	edd7 6a03 	vldr	s13, [r7, #12]
 80015b6:	ed97 7a02 	vldr	s14, [r7, #8]
 80015ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a07 	vstr	s15, [r3, #28]
    return speed;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	69db      	ldr	r3, [r3, #28]
 80015c8:	ee07 3a90 	vmov	s15, r3
}
 80015cc:	eeb0 0a67 	vmov.f32	s0, s15
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	42700000 	.word	0x42700000

080015e0 <_ZN13PololuEncoderD1Ev>:
                             VALUE_WIDTH, delta,
							 VALUE_WIDTH+3, speed);
    HAL_UART_Transmit(uart_handle, (uint8_t*)my_message, string_length, HAL_MAX_DELAY);
}

PololuEncoder::~PololuEncoder()
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	4a0c      	ldr	r2, [pc, #48]	@ (800161c <_ZN13PololuEncoderD1Ev+0x3c>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	601a      	str	r2, [r3, #0]
{
	// Stop encoder
	if (interrupt_mode)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	7c5b      	ldrb	r3, [r3, #17]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d006      	beq.n	8001604 <_ZN13PololuEncoderD1Ev+0x24>
	{
		HAL_TIM_Encoder_Stop_IT(timer_handle, TIM_CHANNEL_ALL);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	213c      	movs	r1, #60	@ 0x3c
 80015fc:	4618      	mov	r0, r3
 80015fe:	f006 f8e4 	bl	80077ca <HAL_TIM_Encoder_Stop_IT>
 8001602:	e005      	b.n	8001610 <_ZN13PololuEncoderD1Ev+0x30>
	}
	else
	{
		HAL_TIM_Encoder_Stop(timer_handle, TIM_CHANNEL_ALL);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	213c      	movs	r1, #60	@ 0x3c
 800160a:	4618      	mov	r0, r3
 800160c:	f005 ff98 	bl	8007540 <HAL_TIM_Encoder_Stop>
	}
}
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	08010f68 	.word	0x08010f68

08001620 <_ZN13PololuEncoderD0Ev>:
PololuEncoder::~PololuEncoder()
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
}
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ffd9 	bl	80015e0 <_ZN13PololuEncoderD1Ev>
 800162e:	212c      	movs	r1, #44	@ 0x2c
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f00c fd62 	bl	800e0fa <_ZdlPvj>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <_ZN11PololuServoC1EP17TIM_HandleTypeDefmtmtttt>:
 * @date Jun 3, 2024
 */

#include "PololuServo.h"

PololuServo::PololuServo(TIM_HandleTypeDef* timer_handle,
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
 800164c:	807b      	strh	r3, [r7, #2]
						  PWM_period_us(PWM_period_us),
						  CPU_clock_speed_MHz(CPU_clock_speed_MHz),
						  maximum_angle_magnitude(maximum_angle_magnitude),
						  full_left_pulse_width_us(full_left_pulse_width_us),
						  neutral_pulse_width_us(neutral_pulse_width_us),
						  full_right_pulse_width_us(full_right_pulse_width_us)
 800164e:	4a1e      	ldr	r2, [pc, #120]	@ (80016c8 <_ZN11PololuServoC1EP17TIM_HandleTypeDefmtmtttt+0x88>)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	601a      	str	r2, [r3, #0]
						: timer_handle(timer_handle),
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	605a      	str	r2, [r3, #4]
						  timer_channel(timer_channel),
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	609a      	str	r2, [r3, #8]
						  PWM_period_us(PWM_period_us),
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	887a      	ldrh	r2, [r7, #2]
 8001664:	819a      	strh	r2, [r3, #12]
						  CPU_clock_speed_MHz(CPU_clock_speed_MHz),
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	611a      	str	r2, [r3, #16]
						  maximum_angle_magnitude(maximum_angle_magnitude),
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	8bba      	ldrh	r2, [r7, #28]
 8001670:	829a      	strh	r2, [r3, #20]
						  full_left_pulse_width_us(full_left_pulse_width_us),
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	8c3a      	ldrh	r2, [r7, #32]
 8001676:	82da      	strh	r2, [r3, #22]
						  neutral_pulse_width_us(neutral_pulse_width_us),
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800167c:	831a      	strh	r2, [r3, #24]
						  full_right_pulse_width_us(full_right_pulse_width_us)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001682:	835a      	strh	r2, [r3, #26]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800168a:	839a      	strh	r2, [r3, #28]
{
	// Set correct PWM period.
	timer_handle->Instance->ARR = autoreload_value;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	8b9a      	ldrh	r2, [r3, #28]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	62da      	str	r2, [r3, #44]	@ 0x2c
	timer_handle->Instance->PSC = (CPU_clock_speed_MHz * PWM_period_us)/autoreload_value;
 8001696:	887b      	ldrh	r3, [r7, #2]
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	fb03 f202 	mul.w	r2, r3, r2
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	8b9b      	ldrh	r3, [r3, #28]
 80016a2:	4619      	mov	r1, r3
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	fbb2 f2f1 	udiv	r2, r2, r1
 80016ac:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_TIM_PWM_Start(timer_handle, timer_channel);
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	68b8      	ldr	r0, [r7, #8]
 80016b2:	f005 fadb 	bl	8006c6c <HAL_TIM_PWM_Start>

	// Home servo
	set_position(0);
 80016b6:	2100      	movs	r1, #0
 80016b8:	68f8      	ldr	r0, [r7, #12]
 80016ba:	f000 f807 	bl	80016cc <_ZN11PololuServo12set_positionEs>
}
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4618      	mov	r0, r3
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	08010f78 	.word	0x08010f78

080016cc <_ZN11PololuServo12set_positionEs>:

void PololuServo::set_position(int16_t position_deg) // should be int8_t
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	807b      	strh	r3, [r7, #2]
	// Saturate requested position
	if (position_deg > maximum_angle_magnitude){
 80016d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	8a92      	ldrh	r2, [r2, #20]
 80016e0:	4293      	cmp	r3, r2
 80016e2:	dd03      	ble.n	80016ec <_ZN11PololuServo12set_positionEs+0x20>
		position_deg = maximum_angle_magnitude;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	8a9b      	ldrh	r3, [r3, #20]
 80016e8:	807b      	strh	r3, [r7, #2]
 80016ea:	e00b      	b.n	8001704 <_ZN11PololuServo12set_positionEs+0x38>
	}
	else if (position_deg < -maximum_angle_magnitude)
 80016ec:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	8a9b      	ldrh	r3, [r3, #20]
 80016f4:	425b      	negs	r3, r3
 80016f6:	429a      	cmp	r2, r3
 80016f8:	da04      	bge.n	8001704 <_ZN11PololuServo12set_positionEs+0x38>
	{
		position_deg = -maximum_angle_magnitude;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	8a9b      	ldrh	r3, [r3, #20]
 80016fe:	425b      	negs	r3, r3
 8001700:	b29b      	uxth	r3, r3
 8001702:	807b      	strh	r3, [r7, #2]
	}

	// Convert the postion requested from degrees to a pulse width in microseconds.
	float slope;
	if (position_deg>=0)
 8001704:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001708:	2b00      	cmp	r3, #0
 800170a:	db18      	blt.n	800173e <_ZN11PololuServo12set_positionEs+0x72>
	{
		slope = ((float)full_right_pulse_width_us - (float)neutral_pulse_width_us)/(float)maximum_angle_magnitude;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	8b5b      	ldrh	r3, [r3, #26]
 8001710:	ee07 3a90 	vmov	s15, r3
 8001714:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	8b1b      	ldrh	r3, [r3, #24]
 800171c:	ee07 3a90 	vmov	s15, r3
 8001720:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001724:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	8a9b      	ldrh	r3, [r3, #20]
 800172c:	ee07 3a90 	vmov	s15, r3
 8001730:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001738:	edc7 7a03 	vstr	s15, [r7, #12]
 800173c:	e017      	b.n	800176e <_ZN11PololuServo12set_positionEs+0xa2>
	}
	else
	{
		slope = ((float)neutral_pulse_width_us - (float)full_left_pulse_width_us)/(float)maximum_angle_magnitude;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	8b1b      	ldrh	r3, [r3, #24]
 8001742:	ee07 3a90 	vmov	s15, r3
 8001746:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	8adb      	ldrh	r3, [r3, #22]
 800174e:	ee07 3a90 	vmov	s15, r3
 8001752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001756:	ee77 6a67 	vsub.f32	s13, s14, s15
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	8a9b      	ldrh	r3, [r3, #20]
 800175e:	ee07 3a90 	vmov	s15, r3
 8001762:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001766:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800176a:	edc7 7a03 	vstr	s15, [r7, #12]
	//	{
	//		slope *= -1;
	//	}

	// Calculate compare value from pulse width
	uint16_t pulse_width = slope*position_deg + neutral_pulse_width_us;
 800176e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001772:	ee07 3a90 	vmov	s15, r3
 8001776:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800177a:	edd7 7a03 	vldr	s15, [r7, #12]
 800177e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	8b1b      	ldrh	r3, [r3, #24]
 8001786:	ee07 3a90 	vmov	s15, r3
 800178a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800178e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001792:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001796:	ee17 3a90 	vmov	r3, s15
 800179a:	817b      	strh	r3, [r7, #10]
	uint16_t compare_value = pulse_width*autoreload_value/PWM_period_us;
 800179c:	897b      	ldrh	r3, [r7, #10]
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	8b92      	ldrh	r2, [r2, #28]
 80017a2:	fb02 f303 	mul.w	r3, r2, r3
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	8992      	ldrh	r2, [r2, #12]
 80017aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80017ae:	813b      	strh	r3, [r7, #8]
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d105      	bne.n	80017c4 <_ZN11PololuServo12set_positionEs+0xf8>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	893a      	ldrh	r2, [r7, #8]
 80017c0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80017c2:	e018      	b.n	80017f6 <_ZN11PololuServo12set_positionEs+0x12a>
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b04      	cmp	r3, #4
 80017ca:	d105      	bne.n	80017d8 <_ZN11PololuServo12set_positionEs+0x10c>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	893a      	ldrh	r2, [r7, #8]
 80017d4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80017d6:	e00e      	b.n	80017f6 <_ZN11PololuServo12set_positionEs+0x12a>
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b08      	cmp	r3, #8
 80017de:	d105      	bne.n	80017ec <_ZN11PololuServo12set_positionEs+0x120>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	893a      	ldrh	r2, [r7, #8]
 80017e8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80017ea:	e004      	b.n	80017f6 <_ZN11PololuServo12set_positionEs+0x12a>
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	893a      	ldrh	r2, [r7, #8]
 80017f4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80017f6:	bf00      	nop
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
	...

08001804 <_ZN11PololuServoD1Ev>:

PololuServo::~PololuServo() {
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	4a04      	ldr	r2, [pc, #16]	@ (8001820 <_ZN11PololuServoD1Ev+0x1c>)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	08010f78 	.word	0x08010f78

08001824 <_ZN11PololuServoD0Ev>:
PololuServo::~PololuServo() {
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
}
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f7ff ffe9 	bl	8001804 <_ZN11PololuServoD1Ev>
 8001832:	2120      	movs	r1, #32
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f00c fc60 	bl	800e0fa <_ZdlPvj>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb>:
 * @param neutral_us_width Width of the neutral signal in microseconds.
 * @param full_forward_us_width Width of the full forward signal in microseconds.
 * @param rescale_forward_magnitude Maximum value for rescaling the forward signal. Overridden if fed into RemoteControlControl.
 * @param rescale_reverse_magnitude Minimum value for rescaling the reverse signal. Overridden if fed into RemoteControlControl.
 */
RCChannel::RCChannel(
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	4613      	mov	r3, r2
 8001852:	80fb      	strh	r3, [r7, #6]
	full_reverse_us_width(full_reverse_us_width),
	neutral_us_width(neutral_us_width),
	full_forward_us_width(full_forward_us_width),
	rescale_forward_magnitude(rescale_forward_magnitude),
	rescale_reverse_magnitude(rescale_reverse_magnitude),
	saturate(saturate)
 8001854:	4a3c      	ldr	r2, [pc, #240]	@ (8001948 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0x104>)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2200      	movs	r2, #0
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2200      	movs	r2, #0
 800186a:	60da      	str	r2, [r3, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2200      	movs	r2, #0
 8001876:	615a      	str	r2, [r3, #20]
	pin_group(pin_group),
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	619a      	str	r2, [r3, #24]
	pin(pin),
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	88fa      	ldrh	r2, [r7, #6]
 8001882:	839a      	strh	r2, [r3, #28]
	timer_handle(timer_handle),
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	683a      	ldr	r2, [r7, #0]
 8001888:	621a      	str	r2, [r3, #32]
	timer_channel(timer_channel),
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6a3a      	ldr	r2, [r7, #32]
 800188e:	625a      	str	r2, [r3, #36]	@ 0x24
	RC_signal_period_us(RC_signal_period_us),
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001894:	629a      	str	r2, [r3, #40]	@ 0x28
	CPU_clock_speed_MHz(CPU_clock_speed_MHz),
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800189a:	62da      	str	r2, [r3, #44]	@ 0x2c
	full_reverse_us_width(full_reverse_us_width),
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018a0:	631a      	str	r2, [r3, #48]	@ 0x30
	neutral_us_width(neutral_us_width),
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80018a6:	635a      	str	r2, [r3, #52]	@ 0x34
	full_forward_us_width(full_forward_us_width),
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80018ac:	639a      	str	r2, [r3, #56]	@ 0x38
	rescale_forward_magnitude(rescale_forward_magnitude),
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80018b2:	63da      	str	r2, [r3, #60]	@ 0x3c
	rescale_reverse_magnitude(rescale_reverse_magnitude),
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80018b8:	641a      	str	r2, [r3, #64]	@ 0x40
	saturate(saturate)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 80018c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
{
	// Critical. Starts the first interrupt.
	HAL_TIM_IC_Start_IT(timer_handle, timer_channel);
 80018cc:	6a39      	ldr	r1, [r7, #32]
 80018ce:	6838      	ldr	r0, [r7, #0]
 80018d0:	f005 fb3a 	bl	8006f48 <HAL_TIM_IC_Start_IT>

	// Set minuend depending on whether it's a 16-bit or 32-bit timer.
	// This is specific to the STM32F411CUE6!!
	if (((timer_handle->Instance) == TIM2) or ((timer_handle->Instance) == TIM5))
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018dc:	d004      	beq.n	80018e8 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0xa4>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a1a      	ldr	r2, [pc, #104]	@ (800194c <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0x108>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d104      	bne.n	80018f2 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0xae>
	{
		minuend = 0xffffffff;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f04f 32ff 	mov.w	r2, #4294967295
 80018ee:	649a      	str	r2, [r3, #72]	@ 0x48
 80018f0:	e003      	b.n	80018fa <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0xb6>
	}
	else
	{
		minuend = 0xffff;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018f8:	649a      	str	r2, [r3, #72]	@ 0x48
	}

	// For later scaling
	uint32_t prescalar = timer_handle->Instance->PSC + 1;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001900:	3301      	adds	r3, #1
 8001902:	617b      	str	r3, [r7, #20]
	float refClock = CPU_clock_speed_MHz/prescalar;
 8001904:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	fbb2 f3f3 	udiv	r3, r2, r3
 800190c:	ee07 3a90 	vmov	s15, r3
 8001910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001914:	edc7 7a04 	vstr	s15, [r7, #16]
	mFactor = 1/refClock;
 8001918:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800191c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001920:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

	// Needed later
	forward_range = full_forward_us_width - neutral_us_width;
 800192a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800192c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800192e:	1ad2      	subs	r2, r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	659a      	str	r2, [r3, #88]	@ 0x58
	reverse_range = neutral_us_width - full_reverse_us_width;
 8001934:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001938:	1ad2      	subs	r2, r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	655a      	str	r2, [r3, #84]	@ 0x54
}
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	08010f88 	.word	0x08010f88
 800194c:	40000c00 	.word	0x40000c00

08001950 <_ZN9RCChannel8callbackEv>:
 * 
 * @note This function assumes that the timer handle and channel have been properly initialized.
 * Please set the associated timer channel to input capture mode, direct. 
 * Leave the auto-reload value as large as possible.
 */
void RCChannel::callback(){
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
	// Was it a rising edge or a falling edge?
	GPIO_PinState pinState = HAL_GPIO_ReadPin(pin_group, pin);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	699a      	ldr	r2, [r3, #24]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	8b9b      	ldrh	r3, [r3, #28]
 8001960:	4619      	mov	r1, r3
 8001962:	4610      	mov	r0, r2
 8001964:	f003 f90a 	bl	8004b7c <HAL_GPIO_ReadPin>
 8001968:	4603      	mov	r3, r0
 800196a:	73fb      	strb	r3, [r7, #15]

	if(pinState == GPIO_PIN_SET) // Rising edge
 800196c:	7bfb      	ldrb	r3, [r7, #15]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d10c      	bne.n	800198c <_ZN9RCChannel8callbackEv+0x3c>
		{
			// Read
			first_value = HAL_TIM_ReadCapturedValue(timer_handle, timer_channel);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a1a      	ldr	r2, [r3, #32]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197a:	4619      	mov	r1, r3
 800197c:	4610      	mov	r0, r2
 800197e:	f006 faef 	bl	8007f60 <HAL_TIM_ReadCapturedValue>
 8001982:	4603      	mov	r3, r0
 8001984:	461a      	mov	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	605a      	str	r2, [r3, #4]
		}

 	// Finally
 	first_capture = true;
 	}
}
 800198a:	e07a      	b.n	8001a82 <_ZN9RCChannel8callbackEv+0x132>
 		second_value = HAL_TIM_ReadCapturedValue(timer_handle, timer_channel);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a1a      	ldr	r2, [r3, #32]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001994:	4619      	mov	r1, r3
 8001996:	4610      	mov	r0, r2
 8001998:	f006 fae2 	bl	8007f60 <HAL_TIM_ReadCapturedValue>
 800199c:	4603      	mov	r3, r0
 800199e:	461a      	mov	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 		if(first_value > second_value)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	dd0c      	ble.n	80019ca <_ZN9RCChannel8callbackEv+0x7a>
 			difference = minuend - first_value + second_value + 1;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6852      	ldr	r2, [r2, #4]
 80019b8:	1a9b      	subs	r3, r3, r2
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6892      	ldr	r2, [r2, #8]
 80019be:	4413      	add	r3, r2
 80019c0:	3301      	adds	r3, #1
 80019c2:	461a      	mov	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	60da      	str	r2, [r3, #12]
 80019c8:	e006      	b.n	80019d8 <_ZN9RCChannel8callbackEv+0x88>
 			difference = second_value - first_value;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	1ad2      	subs	r2, r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	60da      	str	r2, [r3, #12]
 		us_width = difference;//*mFactor;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68da      	ldr	r2, [r3, #12]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	611a      	str	r2, [r3, #16]
		int32_t centered_value = us_width - neutral_us_width;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691a      	ldr	r2, [r3, #16]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	60bb      	str	r3, [r7, #8]
 		if(centered_value >= 0)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	db23      	blt.n	8001a3a <_ZN9RCChannel8callbackEv+0xea>
 			value = centered_value*rescale_forward_magnitude/forward_range;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	fb03 f202 	mul.w	r2, r3, r2
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a00:	fb92 f2f3 	sdiv	r2, r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	615a      	str	r2, [r3, #20]
			if(value>rescale_forward_magnitude && saturate)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a10:	429a      	cmp	r2, r3
 8001a12:	dd0d      	ble.n	8001a30 <_ZN9RCChannel8callbackEv+0xe0>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d008      	beq.n	8001a30 <_ZN9RCChannel8callbackEv+0xe0>
				value = rescale_forward_magnitude;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	615a      	str	r2, [r3, #20]
	 			saturate_flag = true;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001a2e:	e024      	b.n	8001a7a <_ZN9RCChannel8callbackEv+0x12a>
	 			saturate_flag = false;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001a38:	e01f      	b.n	8001a7a <_ZN9RCChannel8callbackEv+0x12a>
			value =  centered_value*rescale_reverse_magnitude/reverse_range;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	fb03 f202 	mul.w	r2, r3, r2
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a48:	fb92 f2f3 	sdiv	r2, r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	615a      	str	r2, [r3, #20]
	 		if(value<-rescale_reverse_magnitude)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	695a      	ldr	r2, [r3, #20]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a58:	425b      	negs	r3, r3
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	da09      	bge.n	8001a72 <_ZN9RCChannel8callbackEv+0x122>
	 			value = -rescale_reverse_magnitude;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a62:	425a      	negs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	615a      	str	r2, [r3, #20]
	 			saturate_flag = true;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001a70:	e003      	b.n	8001a7a <_ZN9RCChannel8callbackEv+0x12a>
	 			saturate_flag = false;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 	first_capture = true;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <_ZN9RCChannelD1Ev>:
/**
 * @brief Destructor for the RCChannel class.
 * 
 * This destructor stops the interrupts for the RCChannel object.
 */
RCChannel::~RCChannel() {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	4a07      	ldr	r2, [pc, #28]	@ (8001ab4 <_ZN9RCChannelD1Ev+0x28>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	601a      	str	r2, [r3, #0]
	// Stop interrupts
	HAL_TIM_IC_Stop_IT(timer_handle, timer_channel);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a1a      	ldr	r2, [r3, #32]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	f005 fb69 	bl	800717c <HAL_TIM_IC_Stop_IT>
}
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	08010f88 	.word	0x08010f88

08001ab8 <_ZN9RCChannelD0Ev>:
RCChannel::~RCChannel() {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
}
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff ffe3 	bl	8001a8c <_ZN9RCChannelD1Ev>
 8001ac6:	215c      	movs	r1, #92	@ 0x5c
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f00c fb16 	bl	800e0fa <_ZdlPvj>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <_ZN20RemoteControlControlC1EP9RCChannelP12MotorControlt>:
/**
 * @brief Constructs a RemoteControlControl object with the given remote control channel and motor driver.
 * @param rc_channel Pointer to the RCChannel object.
 * @param motor Pointer to a TB6612FNG_Motor object.
 */
RemoteControlControl::RemoteControlControl(
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
 8001ae4:	807b      	strh	r3, [r7, #2]
		RCChannel* rc_channel,
		MotorControl* motor_controller,
		uint16_t maximum_speed)
	: rc_channel(rc_channel),
	  motor_controller(motor_controller),
	  maximum_speed(maximum_speed)
 8001ae6:	4a09      	ldr	r2, [pc, #36]	@ (8001b0c <_ZN20RemoteControlControlC1EP9RCChannelP12MotorControlt+0x34>)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	601a      	str	r2, [r3, #0]
	: rc_channel(rc_channel),
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	605a      	str	r2, [r3, #4]
	  motor_controller(motor_controller),
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	687a      	ldr	r2, [r7, #4]
 8001af6:	609a      	str	r2, [r3, #8]
	  maximum_speed(maximum_speed)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	887a      	ldrh	r2, [r7, #2]
 8001afc:	819a      	strh	r2, [r3, #12]
{
//	// Reassign the magnitudes.
//	rc_channel->rescale_forward_magnitude = maximum_speed;
//	rc_channel->rescale_reverse_magnitude = maximum_speed;
}
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	4618      	mov	r0, r3
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	08010f98 	.word	0x08010f98

08001b10 <_ZN20RemoteControlControl12update_motorEv>:
/**
 * @brief Updates a TB6612FNG_Motor object based on the remote control channel value.
 * Run this function in your HAL_TIM_IC_CaptureCallback() function to update the motor as often as your RC sends new values.
 */
void RemoteControlControl::update_motor()
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	// Read from the remote control channel
	int32_t value = rc_channel->value;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	60fb      	str	r3, [r7, #12]

	// Rescale to maximum speed.
	if (value>=0)
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	db19      	blt.n	8001b5a <_ZN20RemoteControlControl12update_motorEv+0x4a>
	{
		setpoint = (float)value*(float)maximum_speed/((float)rc_channel->rescale_forward_magnitude);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	ee07 3a90 	vmov	s15, r3
 8001b2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	899b      	ldrh	r3, [r3, #12]
 8001b34:	ee07 3a90 	vmov	s15, r3
 8001b38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b3c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b46:	ee07 3a90 	vmov	s15, r3
 8001b4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	edc3 7a04 	vstr	s15, [r3, #16]
 8001b58:	e018      	b.n	8001b8c <_ZN20RemoteControlControl12update_motorEv+0x7c>
	}
	else
	{
		setpoint = (float)value*(float)maximum_speed/((float)rc_channel->rescale_reverse_magnitude);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	ee07 3a90 	vmov	s15, r3
 8001b60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	899b      	ldrh	r3, [r3, #12]
 8001b68:	ee07 3a90 	vmov	s15, r3
 8001b6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b70:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7a:	ee07 3a90 	vmov	s15, r3
 8001b7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	edc3 7a04 	vstr	s15, [r3, #16]
	}

	// Update the controller
	motor_controller->run(setpoint);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b96:	eeb0 0a67 	vmov.f32	s0, s15
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	f7ff fb28 	bl	80011f0 <_ZN12MotorControl3runEf>
}
 8001ba0:	bf00      	nop
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <_ZN20RemoteControlControlD1Ev>:


/**
 * @brief Destructs the RemoteControlControl object and releases any dynamically allocated resources.
 */
RemoteControlControl::~RemoteControlControl()
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	4a13      	ldr	r2, [pc, #76]	@ (8001c00 <_ZN20RemoteControlControlD1Ev+0x58>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	601a      	str	r2, [r3, #0]
{
	// Deallocate memory for rc_channel if it was dynamically allocated
	if (rc_channel != nullptr)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00b      	beq.n	8001bd6 <_ZN20RemoteControlControlD1Ev+0x2e>
	{
		delete rc_channel;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d004      	beq.n	8001bd0 <_ZN20RemoteControlControlD1Ev+0x28>
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	3204      	adds	r2, #4
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	4790      	blx	r2
		rc_channel = nullptr; // Optional: Set to nullptr to avoid dangling pointers
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	605a      	str	r2, [r3, #4]
	}

	// Deallocate memory for motor if it was dynamically allocated
	if (motor_controller != nullptr)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00b      	beq.n	8001bf6 <_ZN20RemoteControlControlD1Ev+0x4e>
	{
		delete motor_controller;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d004      	beq.n	8001bf0 <_ZN20RemoteControlControlD1Ev+0x48>
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	3204      	adds	r2, #4
 8001bea:	6812      	ldr	r2, [r2, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	4790      	blx	r2
		motor_controller = nullptr; // Optional: Set to nullptr to avoid dangling pointers
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
	}
}
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	08010f98 	.word	0x08010f98

08001c04 <_ZN20RemoteControlControlD0Ev>:
RemoteControlControl::~RemoteControlControl()
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
}
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ffcb 	bl	8001ba8 <_ZN20RemoteControlControlD1Ev>
 8001c12:	2114      	movs	r1, #20
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f00c fa70 	bl	800e0fa <_ZdlPvj>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <_ZN17SparkFun_APDS9960C1EP17I2C_HandleTypeDef>:
 #include "SparkFunAPDS9960.h"

/**
 * @brief Constructor - Instantiates SparkFun_APDS9960 object
 */
SparkFun_APDS9960::SparkFun_APDS9960(I2C_HandleTypeDef* I2C_handle)
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
: I2C_handle(I2C_handle)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
{
    gesture_ud_delta_ = 0;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    gesture_lr_delta_ = 0;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    gesture_ud_count_ = 0;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    gesture_lr_count_ = 0;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    gesture_near_count_ = 0;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    gesture_far_count_ = 0;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

    gesture_state_ = 0;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    gesture_motion_ = DIR_NONE;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
}
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <_ZN17SparkFun_APDS99604initEv>:
 * @brief Configures I2C communications and initializes registers to defaults
 *
 * @return True if initialized successfully. False otherwise.
 */
bool SparkFun_APDS9960::init()
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]

    /* Initialize I2C */
    // Wire.begin();

    /* Read ID register and check against known values for APDS-9960 */
    if( !wireReadDataByte(APDS9960_ID, id) ) {
 8001c8c:	f107 030f 	add.w	r3, r7, #15
 8001c90:	461a      	mov	r2, r3
 8001c92:	2192      	movs	r1, #146	@ 0x92
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 feee 	bl	8002a76 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	f083 0301 	eor.w	r3, r3, #1
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <_ZN17SparkFun_APDS99604initEv+0x26>
        return false;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	e182      	b.n	8001fb0 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !(id == APDS9960_ID_1 || id == APDS9960_ID_2) ) {
 8001caa:	7bfb      	ldrb	r3, [r7, #15]
 8001cac:	2bab      	cmp	r3, #171	@ 0xab
 8001cae:	d004      	beq.n	8001cba <_ZN17SparkFun_APDS99604initEv+0x36>
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
 8001cb2:	2b9c      	cmp	r3, #156	@ 0x9c
 8001cb4:	d001      	beq.n	8001cba <_ZN17SparkFun_APDS99604initEv+0x36>
        return false;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	e17a      	b.n	8001fb0 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }

    /* Set ENABLE register to 0 (disable all features) */
    if( !setMode(ALL, OFF) ) {
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2107      	movs	r1, #7
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f992 	bl	8001fe8 <_ZN17SparkFun_APDS99607setModeEhh>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	f083 0301 	eor.w	r3, r3, #1
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <_ZN17SparkFun_APDS99604initEv+0x50>
        return false;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	e16d      	b.n	8001fb0 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }

    /* Set default values for ambient light and proximity registers */
    if( !wireWriteDataByte(APDS9960_ATIME, DEFAULT_ATIME) ) {
 8001cd4:	22db      	movs	r2, #219	@ 0xdb
 8001cd6:	2181      	movs	r1, #129	@ 0x81
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 fea8 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	f083 0301 	eor.w	r3, r3, #1
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <_ZN17SparkFun_APDS99604initEv+0x6a>
        return false;
 8001cea:	2300      	movs	r3, #0
 8001cec:	e160      	b.n	8001fb0 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !wireWriteDataByte(APDS9960_WTIME, DEFAULT_WTIME) ) {
 8001cee:	22f6      	movs	r2, #246	@ 0xf6
 8001cf0:	2183      	movs	r1, #131	@ 0x83
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 fe9b 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	f083 0301 	eor.w	r3, r3, #1
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <_ZN17SparkFun_APDS99604initEv+0x84>
        return false;
 8001d04:	2300      	movs	r3, #0
 8001d06:	e153      	b.n	8001fb0 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !wireWriteDataByte(APDS9960_PPULSE, DEFAULT_PROX_PPULSE) ) {
 8001d08:	2287      	movs	r2, #135	@ 0x87
 8001d0a:	218e      	movs	r1, #142	@ 0x8e
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 fe8e 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8001d12:	4603      	mov	r3, r0
 8001d14:	f083 0301 	eor.w	r3, r3, #1
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <_ZN17SparkFun_APDS99604initEv+0x9e>
        return false;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e146      	b.n	8001fb0 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !wireWriteDataByte(APDS9960_POFFSET_UR, DEFAULT_POFFSET_UR) ) {
 8001d22:	2200      	movs	r2, #0
 8001d24:	219d      	movs	r1, #157	@ 0x9d
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 fe81 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	f083 0301 	eor.w	r3, r3, #1
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <_ZN17SparkFun_APDS99604initEv+0xb8>
        return false;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	e139      	b.n	8001fb0 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !wireWriteDataByte(APDS9960_POFFSET_DL, DEFAULT_POFFSET_DL) ) {
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	219e      	movs	r1, #158	@ 0x9e
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 fe74 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8001d46:	4603      	mov	r3, r0
 8001d48:	f083 0301 	eor.w	r3, r3, #1
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <_ZN17SparkFun_APDS99604initEv+0xd2>
        return false;
 8001d52:	2300      	movs	r3, #0
 8001d54:	e12c      	b.n	8001fb0 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !wireWriteDataByte(APDS9960_CONFIG1, DEFAULT_CONFIG1) ) {
 8001d56:	2260      	movs	r2, #96	@ 0x60
 8001d58:	218d      	movs	r1, #141	@ 0x8d
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 fe67 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f083 0301 	eor.w	r3, r3, #1
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <_ZN17SparkFun_APDS99604initEv+0xec>
        return false;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	e11f      	b.n	8001fb0 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !setLEDDrive(DEFAULT_LDRIVE) ) {
 8001d70:	2100      	movs	r1, #0
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 fb81 	bl	800247a <_ZN17SparkFun_APDS996011setLEDDriveEh>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	f083 0301 	eor.w	r3, r3, #1
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <_ZN17SparkFun_APDS99604initEv+0x104>
        return false;
 8001d84:	2300      	movs	r3, #0
 8001d86:	e113      	b.n	8001fb0 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !setProximityGain(DEFAULT_PGAIN) ) {
 8001d88:	2102      	movs	r1, #2
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 fbae 	bl	80024ec <_ZN17SparkFun_APDS996016setProximityGainEh>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f083 0301 	eor.w	r3, r3, #1
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <_ZN17SparkFun_APDS99604initEv+0x11c>
        return false;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	e107      	b.n	8001fb0 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !setAmbientLightGain(DEFAULT_AGAIN) ) {
 8001da0:	2101      	movs	r1, #1
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 fbdb 	bl	800255e <_ZN17SparkFun_APDS996019setAmbientLightGainEh>
 8001da8:	4603      	mov	r3, r0
 8001daa:	f083 0301 	eor.w	r3, r3, #1
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <_ZN17SparkFun_APDS99604initEv+0x134>
        return false;
 8001db4:	2300      	movs	r3, #0
 8001db6:	e0fb      	b.n	8001fb0 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !setProxIntLowThresh(DEFAULT_PILT) ) {
 8001db8:	2100      	movs	r1, #0
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 fb2b 	bl	8002416 <_ZN17SparkFun_APDS996019setProxIntLowThreshEh>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	f083 0301 	eor.w	r3, r3, #1
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <_ZN17SparkFun_APDS99604initEv+0x14c>
        return false;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	e0ef      	b.n	8001fb0 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !setProxIntHighThresh(DEFAULT_PIHT) ) {
 8001dd0:	2132      	movs	r1, #50	@ 0x32
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 fb38 	bl	8002448 <_ZN17SparkFun_APDS996020setProxIntHighThreshEh>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	f083 0301 	eor.w	r3, r3, #1
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <_ZN17SparkFun_APDS99604initEv+0x164>
        return false;
 8001de4:	2300      	movs	r3, #0
 8001de6:	e0e3      	b.n	8001fb0 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !setLightIntLowThreshold(DEFAULT_AILT) ) {
 8001de8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 fcc6 	bl	800277e <_ZN17SparkFun_APDS996023setLightIntLowThresholdEt>
 8001df2:	4603      	mov	r3, r0
 8001df4:	f083 0301 	eor.w	r3, r3, #1
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <_ZN17SparkFun_APDS99604initEv+0x17e>
        return false;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	e0d6      	b.n	8001fb0 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !setLightIntHighThreshold(DEFAULT_AIHT) ) {
 8001e02:	2100      	movs	r1, #0
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f000 fce7 	bl	80027d8 <_ZN17SparkFun_APDS996024setLightIntHighThresholdEt>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	f083 0301 	eor.w	r3, r3, #1
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <_ZN17SparkFun_APDS99604initEv+0x196>
        return false;
 8001e16:	2300      	movs	r3, #0
 8001e18:	e0ca      	b.n	8001fb0 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !wireWriteDataByte(APDS9960_PERS, DEFAULT_PERS) ) {
 8001e1a:	2211      	movs	r2, #17
 8001e1c:	218c      	movs	r1, #140	@ 0x8c
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 fe05 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8001e24:	4603      	mov	r3, r0
 8001e26:	f083 0301 	eor.w	r3, r3, #1
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <_ZN17SparkFun_APDS99604initEv+0x1b0>
        return false;
 8001e30:	2300      	movs	r3, #0
 8001e32:	e0bd      	b.n	8001fb0 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !wireWriteDataByte(APDS9960_CONFIG2, DEFAULT_CONFIG2) ) {
 8001e34:	2201      	movs	r2, #1
 8001e36:	2190      	movs	r1, #144	@ 0x90
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 fdf8 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	f083 0301 	eor.w	r3, r3, #1
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <_ZN17SparkFun_APDS99604initEv+0x1ca>
        return false;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e0b0      	b.n	8001fb0 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !wireWriteDataByte(APDS9960_CONFIG3, DEFAULT_CONFIG3) ) {
 8001e4e:	2200      	movs	r2, #0
 8001e50:	219f      	movs	r1, #159	@ 0x9f
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 fdeb 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	f083 0301 	eor.w	r3, r3, #1
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <_ZN17SparkFun_APDS99604initEv+0x1e4>
        return false;
 8001e64:	2300      	movs	r3, #0
 8001e66:	e0a3      	b.n	8001fb0 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }

    /* Set default values for gesture sense registers */
    if( !setGestureEnterThresh(DEFAULT_GPENTH) ) {
 8001e68:	2128      	movs	r1, #40	@ 0x28
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 fbad 	bl	80025ca <_ZN17SparkFun_APDS996021setGestureEnterThreshEh>
 8001e70:	4603      	mov	r3, r0
 8001e72:	f083 0301 	eor.w	r3, r3, #1
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <_ZN17SparkFun_APDS99604initEv+0x1fc>
        return false;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e097      	b.n	8001fb0 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !setGestureExitThresh(DEFAULT_GEXTH) ) {
 8001e80:	211e      	movs	r1, #30
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 fbba 	bl	80025fc <_ZN17SparkFun_APDS996020setGestureExitThreshEh>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	f083 0301 	eor.w	r3, r3, #1
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <_ZN17SparkFun_APDS99604initEv+0x214>
        return false;
 8001e94:	2300      	movs	r3, #0
 8001e96:	e08b      	b.n	8001fb0 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !wireWriteDataByte(APDS9960_GCONF1, DEFAULT_GCONF1) ) {
 8001e98:	2240      	movs	r2, #64	@ 0x40
 8001e9a:	21a2      	movs	r1, #162	@ 0xa2
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f000 fdc6 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	f083 0301 	eor.w	r3, r3, #1
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <_ZN17SparkFun_APDS99604initEv+0x22e>
        return false;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	e07e      	b.n	8001fb0 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !setGestureGain(DEFAULT_GGAIN) ) {
 8001eb2:	2102      	movs	r1, #2
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 fbba 	bl	800262e <_ZN17SparkFun_APDS996014setGestureGainEh>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	f083 0301 	eor.w	r3, r3, #1
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <_ZN17SparkFun_APDS99604initEv+0x246>
        return false;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e072      	b.n	8001fb0 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !setGestureLEDDrive(DEFAULT_GLDRIVE) ) {
 8001eca:	2100      	movs	r1, #0
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 fbe7 	bl	80026a0 <_ZN17SparkFun_APDS996018setGestureLEDDriveEh>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	f083 0301 	eor.w	r3, r3, #1
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <_ZN17SparkFun_APDS99604initEv+0x25e>
        return false;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	e066      	b.n	8001fb0 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !setGestureWaitTime(DEFAULT_GWTIME) ) {
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 fc14 	bl	8002712 <_ZN17SparkFun_APDS996018setGestureWaitTimeEh>
 8001eea:	4603      	mov	r3, r0
 8001eec:	f083 0301 	eor.w	r3, r3, #1
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <_ZN17SparkFun_APDS99604initEv+0x276>
        return false;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	e05a      	b.n	8001fb0 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !wireWriteDataByte(APDS9960_GOFFSET_U, DEFAULT_GOFFSET) ) {
 8001efa:	2200      	movs	r2, #0
 8001efc:	21a4      	movs	r1, #164	@ 0xa4
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 fd95 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8001f04:	4603      	mov	r3, r0
 8001f06:	f083 0301 	eor.w	r3, r3, #1
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <_ZN17SparkFun_APDS99604initEv+0x290>
        return false;
 8001f10:	2300      	movs	r3, #0
 8001f12:	e04d      	b.n	8001fb0 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !wireWriteDataByte(APDS9960_GOFFSET_D, DEFAULT_GOFFSET) ) {
 8001f14:	2200      	movs	r2, #0
 8001f16:	21a5      	movs	r1, #165	@ 0xa5
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 fd88 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	f083 0301 	eor.w	r3, r3, #1
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <_ZN17SparkFun_APDS99604initEv+0x2aa>
        return false;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e040      	b.n	8001fb0 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !wireWriteDataByte(APDS9960_GOFFSET_L, DEFAULT_GOFFSET) ) {
 8001f2e:	2200      	movs	r2, #0
 8001f30:	21a7      	movs	r1, #167	@ 0xa7
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 fd7b 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f083 0301 	eor.w	r3, r3, #1
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <_ZN17SparkFun_APDS99604initEv+0x2c4>
        return false;
 8001f44:	2300      	movs	r3, #0
 8001f46:	e033      	b.n	8001fb0 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !wireWriteDataByte(APDS9960_GOFFSET_R, DEFAULT_GOFFSET) ) {
 8001f48:	2200      	movs	r2, #0
 8001f4a:	21a9      	movs	r1, #169	@ 0xa9
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 fd6e 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8001f52:	4603      	mov	r3, r0
 8001f54:	f083 0301 	eor.w	r3, r3, #1
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <_ZN17SparkFun_APDS99604initEv+0x2de>
        return false;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	e026      	b.n	8001fb0 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !wireWriteDataByte(APDS9960_GPULSE, DEFAULT_GPULSE) ) {
 8001f62:	22c9      	movs	r2, #201	@ 0xc9
 8001f64:	21a6      	movs	r1, #166	@ 0xa6
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 fd61 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	f083 0301 	eor.w	r3, r3, #1
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <_ZN17SparkFun_APDS99604initEv+0x2f8>
        return false;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	e019      	b.n	8001fb0 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !wireWriteDataByte(APDS9960_GCONF3, DEFAULT_GCONF3) ) {
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	21aa      	movs	r1, #170	@ 0xaa
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 fd54 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8001f86:	4603      	mov	r3, r0
 8001f88:	f083 0301 	eor.w	r3, r3, #1
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <_ZN17SparkFun_APDS99604initEv+0x312>
        return false;
 8001f92:	2300      	movs	r3, #0
 8001f94:	e00c      	b.n	8001fb0 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !setGestureIntEnable(DEFAULT_GIEN) ) {
 8001f96:	2100      	movs	r1, #0
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 fcbc 	bl	8002916 <_ZN17SparkFun_APDS996019setGestureIntEnableEh>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	f083 0301 	eor.w	r3, r3, #1
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <_ZN17SparkFun_APDS99604initEv+0x32a>
        return false;
 8001faa:	2300      	movs	r3, #0
 8001fac:	e000      	b.n	8001fb0 <_ZN17SparkFun_APDS99604initEv+0x32c>
        Serial.print(": 0x");
        Serial.println(val, HEX);
    }
#endif

    return true;
 8001fae:	2301      	movs	r3, #1
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <_ZN17SparkFun_APDS99607getModeEv>:
 * @brief Reads and returns the contents of the ENABLE register
 *
 * @return Contents of the ENABLE register. 0xFF if error.
 */
uint8_t SparkFun_APDS9960::getMode()
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
    uint8_t enable_value;

    /* Read current ENABLE register */
    if( !wireReadDataByte(APDS9960_ENABLE, enable_value) ) {
 8001fc0:	f107 030f 	add.w	r3, r7, #15
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	2180      	movs	r1, #128	@ 0x80
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 fd54 	bl	8002a76 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	f083 0301 	eor.w	r3, r3, #1
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <_ZN17SparkFun_APDS99607getModeEv+0x26>
        return ERROR;
 8001fda:	23ff      	movs	r3, #255	@ 0xff
 8001fdc:	e000      	b.n	8001fe0 <_ZN17SparkFun_APDS99607getModeEv+0x28>
    }

    return enable_value;
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <_ZN17SparkFun_APDS99607setModeEhh>:
 * @param[in] mode which feature to enable
 * @param[in] enable ON (1) or OFF (0)
 * @return True if operation success. False otherwise.
 */
bool SparkFun_APDS9960::setMode(uint8_t mode, uint8_t enable)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	70fb      	strb	r3, [r7, #3]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	70bb      	strb	r3, [r7, #2]
    uint8_t reg_val;

    /* Read current ENABLE register */
    reg_val = getMode();
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f7ff ffdd 	bl	8001fb8 <_ZN17SparkFun_APDS99607getModeEv>
 8001ffe:	4603      	mov	r3, r0
 8002000:	73fb      	strb	r3, [r7, #15]
    if( reg_val == ERROR ) {
 8002002:	7bfb      	ldrb	r3, [r7, #15]
 8002004:	2bff      	cmp	r3, #255	@ 0xff
 8002006:	d101      	bne.n	800200c <_ZN17SparkFun_APDS99607setModeEhh+0x24>
        return false;
 8002008:	2300      	movs	r3, #0
 800200a:	e03b      	b.n	8002084 <_ZN17SparkFun_APDS99607setModeEhh+0x9c>
    }

    /* Change bit(s) in ENABLE register */
    enable = enable & 0x01;
 800200c:	78bb      	ldrb	r3, [r7, #2]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	70bb      	strb	r3, [r7, #2]
    if( mode >= 0 && mode <= 6 ) {
 8002014:	78fb      	ldrb	r3, [r7, #3]
 8002016:	2b06      	cmp	r3, #6
 8002018:	d81a      	bhi.n	8002050 <_ZN17SparkFun_APDS99607setModeEhh+0x68>
        if (enable) {
 800201a:	78bb      	ldrb	r3, [r7, #2]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00a      	beq.n	8002036 <_ZN17SparkFun_APDS99607setModeEhh+0x4e>
            reg_val |= (1 << mode);
 8002020:	78fb      	ldrb	r3, [r7, #3]
 8002022:	2201      	movs	r2, #1
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	b25a      	sxtb	r2, r3
 800202a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202e:	4313      	orrs	r3, r2
 8002030:	b25b      	sxtb	r3, r3
 8002032:	73fb      	strb	r3, [r7, #15]
 8002034:	e017      	b.n	8002066 <_ZN17SparkFun_APDS99607setModeEhh+0x7e>
        } else {
            reg_val &= ~(1 << mode);
 8002036:	78fb      	ldrb	r3, [r7, #3]
 8002038:	2201      	movs	r2, #1
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	b25b      	sxtb	r3, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	b25a      	sxtb	r2, r3
 8002044:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002048:	4013      	ands	r3, r2
 800204a:	b25b      	sxtb	r3, r3
 800204c:	73fb      	strb	r3, [r7, #15]
 800204e:	e00a      	b.n	8002066 <_ZN17SparkFun_APDS99607setModeEhh+0x7e>
        }
    } else if( mode == ALL ) {
 8002050:	78fb      	ldrb	r3, [r7, #3]
 8002052:	2b07      	cmp	r3, #7
 8002054:	d107      	bne.n	8002066 <_ZN17SparkFun_APDS99607setModeEhh+0x7e>
        if (enable) {
 8002056:	78bb      	ldrb	r3, [r7, #2]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d002      	beq.n	8002062 <_ZN17SparkFun_APDS99607setModeEhh+0x7a>
            reg_val = 0x7F;
 800205c:	237f      	movs	r3, #127	@ 0x7f
 800205e:	73fb      	strb	r3, [r7, #15]
 8002060:	e001      	b.n	8002066 <_ZN17SparkFun_APDS99607setModeEhh+0x7e>
        } else {
            reg_val = 0x00;
 8002062:	2300      	movs	r3, #0
 8002064:	73fb      	strb	r3, [r7, #15]
        }
    }

    /* Write value back to ENABLE register */
    if( !wireWriteDataByte(APDS9960_ENABLE, reg_val) ) {
 8002066:	7bfb      	ldrb	r3, [r7, #15]
 8002068:	461a      	mov	r2, r3
 800206a:	2180      	movs	r1, #128	@ 0x80
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 fcde 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8002072:	4603      	mov	r3, r0
 8002074:	f083 0301 	eor.w	r3, r3, #1
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <_ZN17SparkFun_APDS99607setModeEhh+0x9a>
        return false;
 800207e:	2300      	movs	r3, #0
 8002080:	e000      	b.n	8002084 <_ZN17SparkFun_APDS99607setModeEhh+0x9c>
    }

    return true;
 8002082:	2301      	movs	r3, #1
}
 8002084:	4618      	mov	r0, r3
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <_ZN17SparkFun_APDS996017enableLightSensorEb>:
 *
 * @param[in] interrupts true to enable hardware interrupt on high or low light
 * @return True if sensor enabled correctly. False on error.
 */
bool SparkFun_APDS9960::enableLightSensor(bool interrupts)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	70fb      	strb	r3, [r7, #3]

    /* Set default gain, interrupts, enable power, and enable sensor */
    if( !setAmbientLightGain(DEFAULT_AGAIN) ) {
 8002098:	2101      	movs	r1, #1
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 fa5f 	bl	800255e <_ZN17SparkFun_APDS996019setAmbientLightGainEh>
 80020a0:	4603      	mov	r3, r0
 80020a2:	f083 0301 	eor.w	r3, r3, #1
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <_ZN17SparkFun_APDS996017enableLightSensorEb+0x24>
        return false;
 80020ac:	2300      	movs	r3, #0
 80020ae:	e033      	b.n	8002118 <_ZN17SparkFun_APDS996017enableLightSensorEb+0x8c>
    }
    if( interrupts ) {
 80020b0:	78fb      	ldrb	r3, [r7, #3]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00b      	beq.n	80020ce <_ZN17SparkFun_APDS996017enableLightSensorEb+0x42>
        if( !setAmbientLightIntEnable(1) ) {
 80020b6:	2101      	movs	r1, #1
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 fbba 	bl	8002832 <_ZN17SparkFun_APDS996024setAmbientLightIntEnableEh>
 80020be:	4603      	mov	r3, r0
 80020c0:	f083 0301 	eor.w	r3, r3, #1
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00d      	beq.n	80020e6 <_ZN17SparkFun_APDS996017enableLightSensorEb+0x5a>
            return false;
 80020ca:	2300      	movs	r3, #0
 80020cc:	e024      	b.n	8002118 <_ZN17SparkFun_APDS996017enableLightSensorEb+0x8c>
        }
    } else {
        if( !setAmbientLightIntEnable(0) ) {
 80020ce:	2100      	movs	r1, #0
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 fbae 	bl	8002832 <_ZN17SparkFun_APDS996024setAmbientLightIntEnableEh>
 80020d6:	4603      	mov	r3, r0
 80020d8:	f083 0301 	eor.w	r3, r3, #1
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <_ZN17SparkFun_APDS996017enableLightSensorEb+0x5a>
            return false;
 80020e2:	2300      	movs	r3, #0
 80020e4:	e018      	b.n	8002118 <_ZN17SparkFun_APDS996017enableLightSensorEb+0x8c>
        }
    }
    if( !enablePower() ){
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f86d 	bl	80021c6 <_ZN17SparkFun_APDS996011enablePowerEv>
 80020ec:	4603      	mov	r3, r0
 80020ee:	f083 0301 	eor.w	r3, r3, #1
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <_ZN17SparkFun_APDS996017enableLightSensorEb+0x70>
        return false;
 80020f8:	2300      	movs	r3, #0
 80020fa:	e00d      	b.n	8002118 <_ZN17SparkFun_APDS996017enableLightSensorEb+0x8c>
    }
    if( !setMode(AMBIENT_LIGHT, 1) ) {
 80020fc:	2201      	movs	r2, #1
 80020fe:	2101      	movs	r1, #1
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff ff71 	bl	8001fe8 <_ZN17SparkFun_APDS99607setModeEhh>
 8002106:	4603      	mov	r3, r0
 8002108:	f083 0301 	eor.w	r3, r3, #1
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <_ZN17SparkFun_APDS996017enableLightSensorEb+0x8a>
        return false;
 8002112:	2300      	movs	r3, #0
 8002114:	e000      	b.n	8002118 <_ZN17SparkFun_APDS996017enableLightSensorEb+0x8c>
    }

    return true;
 8002116:	2301      	movs	r3, #1

}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <_ZN17SparkFun_APDS996022disableProximitySensorEv>:
 * @brief Ends the proximity sensor on the APDS-9960
 *
 * @return True if sensor disabled correctly. False on error.
 */
bool SparkFun_APDS9960::disableProximitySensor()
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
	if( !setProximityIntEnable(0) ) {
 8002128:	2100      	movs	r1, #0
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 fbba 	bl	80028a4 <_ZN17SparkFun_APDS996021setProximityIntEnableEh>
 8002130:	4603      	mov	r3, r0
 8002132:	f083 0301 	eor.w	r3, r3, #1
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <_ZN17SparkFun_APDS996022disableProximitySensorEv+0x20>
		return false;
 800213c:	2300      	movs	r3, #0
 800213e:	e00d      	b.n	800215c <_ZN17SparkFun_APDS996022disableProximitySensorEv+0x3c>
	}
	if( !setMode(PROXIMITY, 0) ) {
 8002140:	2200      	movs	r2, #0
 8002142:	2102      	movs	r1, #2
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff ff4f 	bl	8001fe8 <_ZN17SparkFun_APDS99607setModeEhh>
 800214a:	4603      	mov	r3, r0
 800214c:	f083 0301 	eor.w	r3, r3, #1
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <_ZN17SparkFun_APDS996022disableProximitySensorEv+0x3a>
		return false;
 8002156:	2300      	movs	r3, #0
 8002158:	e000      	b.n	800215c <_ZN17SparkFun_APDS996022disableProximitySensorEv+0x3c>
	}

	return true;
 800215a:	2301      	movs	r3, #1
}
 800215c:	4618      	mov	r0, r3
 800215e:	3708      	adds	r7, #8
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <_ZN17SparkFun_APDS996020disableGestureSensorEv>:
 * @brief Ends the gesture recognition engine on the APDS-9960
 *
 * @return True if engine disabled correctly. False on error.
 */
bool SparkFun_APDS9960::disableGestureSensor()
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
    resetGestureParameters();
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 f920 	bl	80023b2 <_ZN17SparkFun_APDS996022resetGestureParametersEv>
    if( !setGestureIntEnable(0) ) {
 8002172:	2100      	movs	r1, #0
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 fbce 	bl	8002916 <_ZN17SparkFun_APDS996019setGestureIntEnableEh>
 800217a:	4603      	mov	r3, r0
 800217c:	f083 0301 	eor.w	r3, r3, #1
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <_ZN17SparkFun_APDS996020disableGestureSensorEv+0x26>
        return false;
 8002186:	2300      	movs	r3, #0
 8002188:	e019      	b.n	80021be <_ZN17SparkFun_APDS996020disableGestureSensorEv+0x5a>
    }
    if( !setGestureMode(0) ) {
 800218a:	2100      	movs	r1, #0
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 fbfb 	bl	8002988 <_ZN17SparkFun_APDS996014setGestureModeEh>
 8002192:	4603      	mov	r3, r0
 8002194:	f083 0301 	eor.w	r3, r3, #1
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <_ZN17SparkFun_APDS996020disableGestureSensorEv+0x3e>
        return false;
 800219e:	2300      	movs	r3, #0
 80021a0:	e00d      	b.n	80021be <_ZN17SparkFun_APDS996020disableGestureSensorEv+0x5a>
    }
    if( !setMode(GESTURE, 0) ) {
 80021a2:	2200      	movs	r2, #0
 80021a4:	2106      	movs	r1, #6
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff ff1e 	bl	8001fe8 <_ZN17SparkFun_APDS99607setModeEhh>
 80021ac:	4603      	mov	r3, r0
 80021ae:	f083 0301 	eor.w	r3, r3, #1
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <_ZN17SparkFun_APDS996020disableGestureSensorEv+0x58>
        return false;
 80021b8:	2300      	movs	r3, #0
 80021ba:	e000      	b.n	80021be <_ZN17SparkFun_APDS996020disableGestureSensorEv+0x5a>
    }

    return true;
 80021bc:	2301      	movs	r3, #1
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <_ZN17SparkFun_APDS996011enablePowerEv>:
 * Turn the APDS-9960 on
 *
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::enablePower()
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
    if( !setMode(POWER, 1) ) {
 80021ce:	2201      	movs	r2, #1
 80021d0:	2100      	movs	r1, #0
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7ff ff08 	bl	8001fe8 <_ZN17SparkFun_APDS99607setModeEhh>
 80021d8:	4603      	mov	r3, r0
 80021da:	f083 0301 	eor.w	r3, r3, #1
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <_ZN17SparkFun_APDS996011enablePowerEv+0x22>
        return false;
 80021e4:	2300      	movs	r3, #0
 80021e6:	e000      	b.n	80021ea <_ZN17SparkFun_APDS996011enablePowerEv+0x24>
    }

    return true;
 80021e8:	2301      	movs	r3, #1
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <_ZN17SparkFun_APDS996016readAmbientLightERt>:
 *
 * @param[out] val value of the light sensor.
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::readAmbientLight(uint16_t &val)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b084      	sub	sp, #16
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
 80021fa:	6039      	str	r1, [r7, #0]
    uint8_t val_byte;
    val = 0;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	2200      	movs	r2, #0
 8002200:	801a      	strh	r2, [r3, #0]

    /* Read value from clear channel, low byte register */
    if( !wireReadDataByte(APDS9960_CDATAL, val_byte) ) {
 8002202:	f107 030f 	add.w	r3, r7, #15
 8002206:	461a      	mov	r2, r3
 8002208:	2194      	movs	r1, #148	@ 0x94
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 fc33 	bl	8002a76 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 8002210:	4603      	mov	r3, r0
 8002212:	f083 0301 	eor.w	r3, r3, #1
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <_ZN17SparkFun_APDS996016readAmbientLightERt+0x2e>
        return false;
 800221c:	2300      	movs	r3, #0
 800221e:	e01c      	b.n	800225a <_ZN17SparkFun_APDS996016readAmbientLightERt+0x68>
    }
    val = val_byte;
 8002220:	7bfb      	ldrb	r3, [r7, #15]
 8002222:	461a      	mov	r2, r3
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	801a      	strh	r2, [r3, #0]

    /* Read value from clear channel, high byte register */
    if( !wireReadDataByte(APDS9960_CDATAH, val_byte) ) {
 8002228:	f107 030f 	add.w	r3, r7, #15
 800222c:	461a      	mov	r2, r3
 800222e:	2195      	movs	r1, #149	@ 0x95
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 fc20 	bl	8002a76 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 8002236:	4603      	mov	r3, r0
 8002238:	f083 0301 	eor.w	r3, r3, #1
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <_ZN17SparkFun_APDS996016readAmbientLightERt+0x54>
        return false;
 8002242:	2300      	movs	r3, #0
 8002244:	e009      	b.n	800225a <_ZN17SparkFun_APDS996016readAmbientLightERt+0x68>
    }
    val = val + ((uint16_t)val_byte << 8);
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	881a      	ldrh	r2, [r3, #0]
 800224a:	7bfb      	ldrb	r3, [r7, #15]
 800224c:	021b      	lsls	r3, r3, #8
 800224e:	b29b      	uxth	r3, r3
 8002250:	4413      	add	r3, r2
 8002252:	b29a      	uxth	r2, r3
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	801a      	strh	r2, [r3, #0]

    return true;
 8002258:	2301      	movs	r3, #1
}
 800225a:	4618      	mov	r0, r3
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <_ZN17SparkFun_APDS996012readRedLightERt>:
 *
 * @param[out] val value of the light sensor.
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::readRedLight(uint16_t &val)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b084      	sub	sp, #16
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	6039      	str	r1, [r7, #0]
    uint8_t val_byte;
    val = 0;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	2200      	movs	r2, #0
 8002270:	801a      	strh	r2, [r3, #0]

    /* Read value from clear channel, low byte register */
    if( !wireReadDataByte(APDS9960_RDATAL, val_byte) ) {
 8002272:	f107 030f 	add.w	r3, r7, #15
 8002276:	461a      	mov	r2, r3
 8002278:	2196      	movs	r1, #150	@ 0x96
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 fbfb 	bl	8002a76 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 8002280:	4603      	mov	r3, r0
 8002282:	f083 0301 	eor.w	r3, r3, #1
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <_ZN17SparkFun_APDS996012readRedLightERt+0x2e>
        return false;
 800228c:	2300      	movs	r3, #0
 800228e:	e01c      	b.n	80022ca <_ZN17SparkFun_APDS996012readRedLightERt+0x68>
    }
    val = val_byte;
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	461a      	mov	r2, r3
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	801a      	strh	r2, [r3, #0]

    /* Read value from clear channel, high byte register */
    if( !wireReadDataByte(APDS9960_RDATAH, val_byte) ) {
 8002298:	f107 030f 	add.w	r3, r7, #15
 800229c:	461a      	mov	r2, r3
 800229e:	2197      	movs	r1, #151	@ 0x97
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f000 fbe8 	bl	8002a76 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 80022a6:	4603      	mov	r3, r0
 80022a8:	f083 0301 	eor.w	r3, r3, #1
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <_ZN17SparkFun_APDS996012readRedLightERt+0x54>
        return false;
 80022b2:	2300      	movs	r3, #0
 80022b4:	e009      	b.n	80022ca <_ZN17SparkFun_APDS996012readRedLightERt+0x68>
    }
    val = val + ((uint16_t)val_byte << 8);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	881a      	ldrh	r2, [r3, #0]
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
 80022bc:	021b      	lsls	r3, r3, #8
 80022be:	b29b      	uxth	r3, r3
 80022c0:	4413      	add	r3, r2
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	801a      	strh	r2, [r3, #0]

    return true;
 80022c8:	2301      	movs	r3, #1
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <_ZN17SparkFun_APDS996014readGreenLightERt>:
 *
 * @param[out] val value of the light sensor.
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::readGreenLight(uint16_t &val)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b084      	sub	sp, #16
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	6039      	str	r1, [r7, #0]
    uint8_t val_byte;
    val = 0;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	2200      	movs	r2, #0
 80022e0:	801a      	strh	r2, [r3, #0]

    /* Read value from clear channel, low byte register */
    if( !wireReadDataByte(APDS9960_GDATAL, val_byte) ) {
 80022e2:	f107 030f 	add.w	r3, r7, #15
 80022e6:	461a      	mov	r2, r3
 80022e8:	2198      	movs	r1, #152	@ 0x98
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 fbc3 	bl	8002a76 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 80022f0:	4603      	mov	r3, r0
 80022f2:	f083 0301 	eor.w	r3, r3, #1
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <_ZN17SparkFun_APDS996014readGreenLightERt+0x2e>
        return false;
 80022fc:	2300      	movs	r3, #0
 80022fe:	e01c      	b.n	800233a <_ZN17SparkFun_APDS996014readGreenLightERt+0x68>
    }
    val = val_byte;
 8002300:	7bfb      	ldrb	r3, [r7, #15]
 8002302:	461a      	mov	r2, r3
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	801a      	strh	r2, [r3, #0]

    /* Read value from clear channel, high byte register */
    if( !wireReadDataByte(APDS9960_GDATAH, val_byte) ) {
 8002308:	f107 030f 	add.w	r3, r7, #15
 800230c:	461a      	mov	r2, r3
 800230e:	2199      	movs	r1, #153	@ 0x99
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 fbb0 	bl	8002a76 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 8002316:	4603      	mov	r3, r0
 8002318:	f083 0301 	eor.w	r3, r3, #1
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <_ZN17SparkFun_APDS996014readGreenLightERt+0x54>
        return false;
 8002322:	2300      	movs	r3, #0
 8002324:	e009      	b.n	800233a <_ZN17SparkFun_APDS996014readGreenLightERt+0x68>
    }
    val = val + ((uint16_t)val_byte << 8);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	881a      	ldrh	r2, [r3, #0]
 800232a:	7bfb      	ldrb	r3, [r7, #15]
 800232c:	021b      	lsls	r3, r3, #8
 800232e:	b29b      	uxth	r3, r3
 8002330:	4413      	add	r3, r2
 8002332:	b29a      	uxth	r2, r3
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	801a      	strh	r2, [r3, #0]

    return true;
 8002338:	2301      	movs	r3, #1
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <_ZN17SparkFun_APDS996013readBlueLightERt>:
 *
 * @param[out] val value of the light sensor.
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::readBlueLight(uint16_t &val)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b084      	sub	sp, #16
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
 800234a:	6039      	str	r1, [r7, #0]
    uint8_t val_byte;
    val = 0;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	2200      	movs	r2, #0
 8002350:	801a      	strh	r2, [r3, #0]

    /* Read value from clear channel, low byte register */
    if( !wireReadDataByte(APDS9960_BDATAL, val_byte) ) {
 8002352:	f107 030f 	add.w	r3, r7, #15
 8002356:	461a      	mov	r2, r3
 8002358:	219a      	movs	r1, #154	@ 0x9a
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 fb8b 	bl	8002a76 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 8002360:	4603      	mov	r3, r0
 8002362:	f083 0301 	eor.w	r3, r3, #1
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <_ZN17SparkFun_APDS996013readBlueLightERt+0x2e>
        return false;
 800236c:	2300      	movs	r3, #0
 800236e:	e01c      	b.n	80023aa <_ZN17SparkFun_APDS996013readBlueLightERt+0x68>
    }
    val = val_byte;
 8002370:	7bfb      	ldrb	r3, [r7, #15]
 8002372:	461a      	mov	r2, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	801a      	strh	r2, [r3, #0]

    /* Read value from clear channel, high byte register */
    if( !wireReadDataByte(APDS9960_BDATAH, val_byte) ) {
 8002378:	f107 030f 	add.w	r3, r7, #15
 800237c:	461a      	mov	r2, r3
 800237e:	219b      	movs	r1, #155	@ 0x9b
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 fb78 	bl	8002a76 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 8002386:	4603      	mov	r3, r0
 8002388:	f083 0301 	eor.w	r3, r3, #1
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <_ZN17SparkFun_APDS996013readBlueLightERt+0x54>
        return false;
 8002392:	2300      	movs	r3, #0
 8002394:	e009      	b.n	80023aa <_ZN17SparkFun_APDS996013readBlueLightERt+0x68>
    }
    val = val + ((uint16_t)val_byte << 8);
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	881a      	ldrh	r2, [r3, #0]
 800239a:	7bfb      	ldrb	r3, [r7, #15]
 800239c:	021b      	lsls	r3, r3, #8
 800239e:	b29b      	uxth	r3, r3
 80023a0:	4413      	add	r3, r2
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	801a      	strh	r2, [r3, #0]

    return true;
 80023a8:	2301      	movs	r3, #1
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <_ZN17SparkFun_APDS996022resetGestureParametersEv>:

/**
 * @brief Resets all the parameters in the gesture data member
 */
void SparkFun_APDS9960::resetGestureParameters()
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
    gesture_data_.index = 0;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    gesture_data_.total_gestures = 0;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    gesture_ud_delta_ = 0;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    gesture_lr_delta_ = 0;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    gesture_ud_count_ = 0;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    gesture_lr_count_ = 0;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    gesture_near_count_ = 0;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    gesture_far_count_ = 0;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

    gesture_state_ = 0;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    gesture_motion_ = DIR_NONE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
}
 800240a:	bf00      	nop
 800240c:	370c      	adds	r7, #12
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <_ZN17SparkFun_APDS996019setProxIntLowThreshEh>:
 *
 * @param[in] threshold the lower proximity threshold
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setProxIntLowThresh(uint8_t threshold)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	460b      	mov	r3, r1
 8002420:	70fb      	strb	r3, [r7, #3]
    if( !wireWriteDataByte(APDS9960_PILT, threshold) ) {
 8002422:	78fb      	ldrb	r3, [r7, #3]
 8002424:	461a      	mov	r2, r3
 8002426:	2189      	movs	r1, #137	@ 0x89
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 fb00 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 800242e:	4603      	mov	r3, r0
 8002430:	f083 0301 	eor.w	r3, r3, #1
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <_ZN17SparkFun_APDS996019setProxIntLowThreshEh+0x28>
        return false;
 800243a:	2300      	movs	r3, #0
 800243c:	e000      	b.n	8002440 <_ZN17SparkFun_APDS996019setProxIntLowThreshEh+0x2a>
    }

    return true;
 800243e:	2301      	movs	r3, #1
}
 8002440:	4618      	mov	r0, r3
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <_ZN17SparkFun_APDS996020setProxIntHighThreshEh>:
 *
 * @param[in] threshold the high proximity threshold
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setProxIntHighThresh(uint8_t threshold)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	70fb      	strb	r3, [r7, #3]
    if( !wireWriteDataByte(APDS9960_PIHT, threshold) ) {
 8002454:	78fb      	ldrb	r3, [r7, #3]
 8002456:	461a      	mov	r2, r3
 8002458:	218b      	movs	r1, #139	@ 0x8b
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 fae7 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8002460:	4603      	mov	r3, r0
 8002462:	f083 0301 	eor.w	r3, r3, #1
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <_ZN17SparkFun_APDS996020setProxIntHighThreshEh+0x28>
        return false;
 800246c:	2300      	movs	r3, #0
 800246e:	e000      	b.n	8002472 <_ZN17SparkFun_APDS996020setProxIntHighThreshEh+0x2a>
    }

    return true;
 8002470:	2301      	movs	r3, #1
}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <_ZN17SparkFun_APDS996011setLEDDriveEh>:
 *
 * @param[in] drive the value (0-3) for the LED drive strength
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setLEDDrive(uint8_t drive)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b084      	sub	sp, #16
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
 8002482:	460b      	mov	r3, r1
 8002484:	70fb      	strb	r3, [r7, #3]
    uint8_t val;

    /* Read value from CONTROL register */
    if( !wireReadDataByte(APDS9960_CONTROL, val) ) {
 8002486:	f107 030f 	add.w	r3, r7, #15
 800248a:	461a      	mov	r2, r3
 800248c:	218f      	movs	r1, #143	@ 0x8f
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f000 faf1 	bl	8002a76 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 8002494:	4603      	mov	r3, r0
 8002496:	f083 0301 	eor.w	r3, r3, #1
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <_ZN17SparkFun_APDS996011setLEDDriveEh+0x2a>
        return false;
 80024a0:	2300      	movs	r3, #0
 80024a2:	e01f      	b.n	80024e4 <_ZN17SparkFun_APDS996011setLEDDriveEh+0x6a>
    }

    /* Set bits in register to given value */
    drive &= 0b00000011;
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	70fb      	strb	r3, [r7, #3]
    drive = drive << 6;
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	019b      	lsls	r3, r3, #6
 80024b0:	70fb      	strb	r3, [r7, #3]
    val &= 0b00111111;
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	73fb      	strb	r3, [r7, #15]
    val |= drive;
 80024bc:	7bfa      	ldrb	r2, [r7, #15]
 80024be:	78fb      	ldrb	r3, [r7, #3]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	73fb      	strb	r3, [r7, #15]

    /* Write register value back into CONTROL register */
    if( !wireWriteDataByte(APDS9960_CONTROL, val) ) {
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	461a      	mov	r2, r3
 80024ca:	218f      	movs	r1, #143	@ 0x8f
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 faae 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80024d2:	4603      	mov	r3, r0
 80024d4:	f083 0301 	eor.w	r3, r3, #1
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <_ZN17SparkFun_APDS996011setLEDDriveEh+0x68>
        return false;
 80024de:	2300      	movs	r3, #0
 80024e0:	e000      	b.n	80024e4 <_ZN17SparkFun_APDS996011setLEDDriveEh+0x6a>
    }

    return true;
 80024e2:	2301      	movs	r3, #1
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <_ZN17SparkFun_APDS996016setProximityGainEh>:
 *
 * @param[in] drive the value (0-3) for the gain
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setProximityGain(uint8_t drive)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	70fb      	strb	r3, [r7, #3]
    uint8_t val;

    /* Read value from CONTROL register */
    if( !wireReadDataByte(APDS9960_CONTROL, val) ) {
 80024f8:	f107 030f 	add.w	r3, r7, #15
 80024fc:	461a      	mov	r2, r3
 80024fe:	218f      	movs	r1, #143	@ 0x8f
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 fab8 	bl	8002a76 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 8002506:	4603      	mov	r3, r0
 8002508:	f083 0301 	eor.w	r3, r3, #1
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <_ZN17SparkFun_APDS996016setProximityGainEh+0x2a>
        return false;
 8002512:	2300      	movs	r3, #0
 8002514:	e01f      	b.n	8002556 <_ZN17SparkFun_APDS996016setProximityGainEh+0x6a>
    }

    /* Set bits in register to given value */
    drive &= 0b00000011;
 8002516:	78fb      	ldrb	r3, [r7, #3]
 8002518:	f003 0303 	and.w	r3, r3, #3
 800251c:	70fb      	strb	r3, [r7, #3]
    drive = drive << 2;
 800251e:	78fb      	ldrb	r3, [r7, #3]
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	70fb      	strb	r3, [r7, #3]
    val &= 0b11110011;
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	f023 030c 	bic.w	r3, r3, #12
 800252a:	b2db      	uxtb	r3, r3
 800252c:	73fb      	strb	r3, [r7, #15]
    val |= drive;
 800252e:	7bfa      	ldrb	r2, [r7, #15]
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	4313      	orrs	r3, r2
 8002534:	b2db      	uxtb	r3, r3
 8002536:	73fb      	strb	r3, [r7, #15]

    /* Write register value back into CONTROL register */
    if( !wireWriteDataByte(APDS9960_CONTROL, val) ) {
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	461a      	mov	r2, r3
 800253c:	218f      	movs	r1, #143	@ 0x8f
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 fa75 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8002544:	4603      	mov	r3, r0
 8002546:	f083 0301 	eor.w	r3, r3, #1
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <_ZN17SparkFun_APDS996016setProximityGainEh+0x68>
        return false;
 8002550:	2300      	movs	r3, #0
 8002552:	e000      	b.n	8002556 <_ZN17SparkFun_APDS996016setProximityGainEh+0x6a>
    }

    return true;
 8002554:	2301      	movs	r3, #1
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <_ZN17SparkFun_APDS996019setAmbientLightGainEh>:
 *
 * @param[in] drive the value (0-3) for the gain
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setAmbientLightGain(uint8_t drive)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b084      	sub	sp, #16
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	460b      	mov	r3, r1
 8002568:	70fb      	strb	r3, [r7, #3]
    uint8_t val;

    /* Read value from CONTROL register */
    if( !wireReadDataByte(APDS9960_CONTROL, val) ) {
 800256a:	f107 030f 	add.w	r3, r7, #15
 800256e:	461a      	mov	r2, r3
 8002570:	218f      	movs	r1, #143	@ 0x8f
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 fa7f 	bl	8002a76 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 8002578:	4603      	mov	r3, r0
 800257a:	f083 0301 	eor.w	r3, r3, #1
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <_ZN17SparkFun_APDS996019setAmbientLightGainEh+0x2a>
        return false;
 8002584:	2300      	movs	r3, #0
 8002586:	e01c      	b.n	80025c2 <_ZN17SparkFun_APDS996019setAmbientLightGainEh+0x64>
    }

    /* Set bits in register to given value */
    drive &= 0b00000011;
 8002588:	78fb      	ldrb	r3, [r7, #3]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	70fb      	strb	r3, [r7, #3]
    val &= 0b11111100;
 8002590:	7bfb      	ldrb	r3, [r7, #15]
 8002592:	f023 0303 	bic.w	r3, r3, #3
 8002596:	b2db      	uxtb	r3, r3
 8002598:	73fb      	strb	r3, [r7, #15]
    val |= drive;
 800259a:	7bfa      	ldrb	r2, [r7, #15]
 800259c:	78fb      	ldrb	r3, [r7, #3]
 800259e:	4313      	orrs	r3, r2
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	73fb      	strb	r3, [r7, #15]

    /* Write register value back into CONTROL register */
    if( !wireWriteDataByte(APDS9960_CONTROL, val) ) {
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	461a      	mov	r2, r3
 80025a8:	218f      	movs	r1, #143	@ 0x8f
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 fa3f 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80025b0:	4603      	mov	r3, r0
 80025b2:	f083 0301 	eor.w	r3, r3, #1
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <_ZN17SparkFun_APDS996019setAmbientLightGainEh+0x62>
        return false;
 80025bc:	2300      	movs	r3, #0
 80025be:	e000      	b.n	80025c2 <_ZN17SparkFun_APDS996019setAmbientLightGainEh+0x64>
    }

    return true;
 80025c0:	2301      	movs	r3, #1
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <_ZN17SparkFun_APDS996021setGestureEnterThreshEh>:
 *
 * @param[in] threshold proximity value needed to start gesture mode
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setGestureEnterThresh(uint8_t threshold)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
 80025d2:	460b      	mov	r3, r1
 80025d4:	70fb      	strb	r3, [r7, #3]
    if( !wireWriteDataByte(APDS9960_GPENTH, threshold) ) {
 80025d6:	78fb      	ldrb	r3, [r7, #3]
 80025d8:	461a      	mov	r2, r3
 80025da:	21a0      	movs	r1, #160	@ 0xa0
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 fa26 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80025e2:	4603      	mov	r3, r0
 80025e4:	f083 0301 	eor.w	r3, r3, #1
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <_ZN17SparkFun_APDS996021setGestureEnterThreshEh+0x28>
        return false;
 80025ee:	2300      	movs	r3, #0
 80025f0:	e000      	b.n	80025f4 <_ZN17SparkFun_APDS996021setGestureEnterThreshEh+0x2a>
    }

    return true;
 80025f2:	2301      	movs	r3, #1
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <_ZN17SparkFun_APDS996020setGestureExitThreshEh>:
 *
 * @param[in] threshold proximity value needed to end gesture mode
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setGestureExitThresh(uint8_t threshold)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	460b      	mov	r3, r1
 8002606:	70fb      	strb	r3, [r7, #3]
    if( !wireWriteDataByte(APDS9960_GEXTH, threshold) ) {
 8002608:	78fb      	ldrb	r3, [r7, #3]
 800260a:	461a      	mov	r2, r3
 800260c:	21a1      	movs	r1, #161	@ 0xa1
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 fa0d 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8002614:	4603      	mov	r3, r0
 8002616:	f083 0301 	eor.w	r3, r3, #1
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <_ZN17SparkFun_APDS996020setGestureExitThreshEh+0x28>
        return false;
 8002620:	2300      	movs	r3, #0
 8002622:	e000      	b.n	8002626 <_ZN17SparkFun_APDS996020setGestureExitThreshEh+0x2a>
    }

    return true;
 8002624:	2301      	movs	r3, #1
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <_ZN17SparkFun_APDS996014setGestureGainEh>:
 *
 * @param[in] gain the value for the photodiode gain
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setGestureGain(uint8_t gain)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	b084      	sub	sp, #16
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	460b      	mov	r3, r1
 8002638:	70fb      	strb	r3, [r7, #3]
    uint8_t val;

    /* Read value from GCONF2 register */
    if( !wireReadDataByte(APDS9960_GCONF2, val) ) {
 800263a:	f107 030f 	add.w	r3, r7, #15
 800263e:	461a      	mov	r2, r3
 8002640:	21a3      	movs	r1, #163	@ 0xa3
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 fa17 	bl	8002a76 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 8002648:	4603      	mov	r3, r0
 800264a:	f083 0301 	eor.w	r3, r3, #1
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <_ZN17SparkFun_APDS996014setGestureGainEh+0x2a>
        return false;
 8002654:	2300      	movs	r3, #0
 8002656:	e01f      	b.n	8002698 <_ZN17SparkFun_APDS996014setGestureGainEh+0x6a>
    }

    /* Set bits in register to given value */
    gain &= 0b00000011;
 8002658:	78fb      	ldrb	r3, [r7, #3]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	70fb      	strb	r3, [r7, #3]
    gain = gain << 5;
 8002660:	78fb      	ldrb	r3, [r7, #3]
 8002662:	015b      	lsls	r3, r3, #5
 8002664:	70fb      	strb	r3, [r7, #3]
    val &= 0b10011111;
 8002666:	7bfb      	ldrb	r3, [r7, #15]
 8002668:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800266c:	b2db      	uxtb	r3, r3
 800266e:	73fb      	strb	r3, [r7, #15]
    val |= gain;
 8002670:	7bfa      	ldrb	r2, [r7, #15]
 8002672:	78fb      	ldrb	r3, [r7, #3]
 8002674:	4313      	orrs	r3, r2
 8002676:	b2db      	uxtb	r3, r3
 8002678:	73fb      	strb	r3, [r7, #15]

    /* Write register value back into GCONF2 register */
    if( !wireWriteDataByte(APDS9960_GCONF2, val) ) {
 800267a:	7bfb      	ldrb	r3, [r7, #15]
 800267c:	461a      	mov	r2, r3
 800267e:	21a3      	movs	r1, #163	@ 0xa3
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f9d4 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8002686:	4603      	mov	r3, r0
 8002688:	f083 0301 	eor.w	r3, r3, #1
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <_ZN17SparkFun_APDS996014setGestureGainEh+0x68>
        return false;
 8002692:	2300      	movs	r3, #0
 8002694:	e000      	b.n	8002698 <_ZN17SparkFun_APDS996014setGestureGainEh+0x6a>
    }

    return true;
 8002696:	2301      	movs	r3, #1
}
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <_ZN17SparkFun_APDS996018setGestureLEDDriveEh>:
 *
 * @param[in] drive the value for the LED drive current
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setGestureLEDDrive(uint8_t drive)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	460b      	mov	r3, r1
 80026aa:	70fb      	strb	r3, [r7, #3]
    uint8_t val;

    /* Read value from GCONF2 register */
    if( !wireReadDataByte(APDS9960_GCONF2, val) ) {
 80026ac:	f107 030f 	add.w	r3, r7, #15
 80026b0:	461a      	mov	r2, r3
 80026b2:	21a3      	movs	r1, #163	@ 0xa3
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 f9de 	bl	8002a76 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 80026ba:	4603      	mov	r3, r0
 80026bc:	f083 0301 	eor.w	r3, r3, #1
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <_ZN17SparkFun_APDS996018setGestureLEDDriveEh+0x2a>
        return false;
 80026c6:	2300      	movs	r3, #0
 80026c8:	e01f      	b.n	800270a <_ZN17SparkFun_APDS996018setGestureLEDDriveEh+0x6a>
    }

    /* Set bits in register to given value */
    drive &= 0b00000011;
 80026ca:	78fb      	ldrb	r3, [r7, #3]
 80026cc:	f003 0303 	and.w	r3, r3, #3
 80026d0:	70fb      	strb	r3, [r7, #3]
    drive = drive << 3;
 80026d2:	78fb      	ldrb	r3, [r7, #3]
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	70fb      	strb	r3, [r7, #3]
    val &= 0b11100111;
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	f023 0318 	bic.w	r3, r3, #24
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	73fb      	strb	r3, [r7, #15]
    val |= drive;
 80026e2:	7bfa      	ldrb	r2, [r7, #15]
 80026e4:	78fb      	ldrb	r3, [r7, #3]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	73fb      	strb	r3, [r7, #15]

    /* Write register value back into GCONF2 register */
    if( !wireWriteDataByte(APDS9960_GCONF2, val) ) {
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	461a      	mov	r2, r3
 80026f0:	21a3      	movs	r1, #163	@ 0xa3
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f99b 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f083 0301 	eor.w	r3, r3, #1
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <_ZN17SparkFun_APDS996018setGestureLEDDriveEh+0x68>
        return false;
 8002704:	2300      	movs	r3, #0
 8002706:	e000      	b.n	800270a <_ZN17SparkFun_APDS996018setGestureLEDDriveEh+0x6a>
    }

    return true;
 8002708:	2301      	movs	r3, #1
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <_ZN17SparkFun_APDS996018setGestureWaitTimeEh>:
 *
 * @param[in] the value for the wait time
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setGestureWaitTime(uint8_t time)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b084      	sub	sp, #16
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	460b      	mov	r3, r1
 800271c:	70fb      	strb	r3, [r7, #3]
    uint8_t val;

    /* Read value from GCONF2 register */
    if( !wireReadDataByte(APDS9960_GCONF2, val) ) {
 800271e:	f107 030f 	add.w	r3, r7, #15
 8002722:	461a      	mov	r2, r3
 8002724:	21a3      	movs	r1, #163	@ 0xa3
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f9a5 	bl	8002a76 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 800272c:	4603      	mov	r3, r0
 800272e:	f083 0301 	eor.w	r3, r3, #1
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <_ZN17SparkFun_APDS996018setGestureWaitTimeEh+0x2a>
        return false;
 8002738:	2300      	movs	r3, #0
 800273a:	e01c      	b.n	8002776 <_ZN17SparkFun_APDS996018setGestureWaitTimeEh+0x64>
    }

    /* Set bits in register to given value */
    time &= 0b00000111;
 800273c:	78fb      	ldrb	r3, [r7, #3]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	70fb      	strb	r3, [r7, #3]
    val &= 0b11111000;
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	f023 0307 	bic.w	r3, r3, #7
 800274a:	b2db      	uxtb	r3, r3
 800274c:	73fb      	strb	r3, [r7, #15]
    val |= time;
 800274e:	7bfa      	ldrb	r2, [r7, #15]
 8002750:	78fb      	ldrb	r3, [r7, #3]
 8002752:	4313      	orrs	r3, r2
 8002754:	b2db      	uxtb	r3, r3
 8002756:	73fb      	strb	r3, [r7, #15]

    /* Write register value back into GCONF2 register */
    if( !wireWriteDataByte(APDS9960_GCONF2, val) ) {
 8002758:	7bfb      	ldrb	r3, [r7, #15]
 800275a:	461a      	mov	r2, r3
 800275c:	21a3      	movs	r1, #163	@ 0xa3
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f965 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8002764:	4603      	mov	r3, r0
 8002766:	f083 0301 	eor.w	r3, r3, #1
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <_ZN17SparkFun_APDS996018setGestureWaitTimeEh+0x62>
        return false;
 8002770:	2300      	movs	r3, #0
 8002772:	e000      	b.n	8002776 <_ZN17SparkFun_APDS996018setGestureWaitTimeEh+0x64>
    }

    return true;
 8002774:	2301      	movs	r3, #1
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <_ZN17SparkFun_APDS996023setLightIntLowThresholdEt>:
 *
 * @param[in] threshold low threshold value for interrupt to trigger
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setLightIntLowThreshold(uint16_t threshold)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b084      	sub	sp, #16
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
 8002786:	460b      	mov	r3, r1
 8002788:	807b      	strh	r3, [r7, #2]
    uint8_t val_low;
    uint8_t val_high;

    /* Break 16-bit threshold into 2 8-bit values */
    val_low = threshold & 0x00FF;
 800278a:	887b      	ldrh	r3, [r7, #2]
 800278c:	73fb      	strb	r3, [r7, #15]
    val_high = (threshold & 0xFF00) >> 8;
 800278e:	887b      	ldrh	r3, [r7, #2]
 8002790:	0a1b      	lsrs	r3, r3, #8
 8002792:	b29b      	uxth	r3, r3
 8002794:	73bb      	strb	r3, [r7, #14]

    /* Write low byte */
    if( !wireWriteDataByte(APDS9960_AILTL, val_low) ) {
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	461a      	mov	r2, r3
 800279a:	2184      	movs	r1, #132	@ 0x84
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f946 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80027a2:	4603      	mov	r3, r0
 80027a4:	f083 0301 	eor.w	r3, r3, #1
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <_ZN17SparkFun_APDS996023setLightIntLowThresholdEt+0x34>
        return false;
 80027ae:	2300      	movs	r3, #0
 80027b0:	e00e      	b.n	80027d0 <_ZN17SparkFun_APDS996023setLightIntLowThresholdEt+0x52>
    }

    /* Write high byte */
    if( !wireWriteDataByte(APDS9960_AILTH, val_high) ) {
 80027b2:	7bbb      	ldrb	r3, [r7, #14]
 80027b4:	461a      	mov	r2, r3
 80027b6:	2185      	movs	r1, #133	@ 0x85
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f938 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80027be:	4603      	mov	r3, r0
 80027c0:	f083 0301 	eor.w	r3, r3, #1
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <_ZN17SparkFun_APDS996023setLightIntLowThresholdEt+0x50>
        return false;
 80027ca:	2300      	movs	r3, #0
 80027cc:	e000      	b.n	80027d0 <_ZN17SparkFun_APDS996023setLightIntLowThresholdEt+0x52>
    }

    return true;
 80027ce:	2301      	movs	r3, #1
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <_ZN17SparkFun_APDS996024setLightIntHighThresholdEt>:
 *
 * @param[in] threshold high threshold value for interrupt to trigger
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setLightIntHighThreshold(uint16_t threshold)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	807b      	strh	r3, [r7, #2]
    uint8_t val_low;
    uint8_t val_high;

    /* Break 16-bit threshold into 2 8-bit values */
    val_low = threshold & 0x00FF;
 80027e4:	887b      	ldrh	r3, [r7, #2]
 80027e6:	73fb      	strb	r3, [r7, #15]
    val_high = (threshold & 0xFF00) >> 8;
 80027e8:	887b      	ldrh	r3, [r7, #2]
 80027ea:	0a1b      	lsrs	r3, r3, #8
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	73bb      	strb	r3, [r7, #14]

    /* Write low byte */
    if( !wireWriteDataByte(APDS9960_AIHTL, val_low) ) {
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	461a      	mov	r2, r3
 80027f4:	2186      	movs	r1, #134	@ 0x86
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f919 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80027fc:	4603      	mov	r3, r0
 80027fe:	f083 0301 	eor.w	r3, r3, #1
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <_ZN17SparkFun_APDS996024setLightIntHighThresholdEt+0x34>
        return false;
 8002808:	2300      	movs	r3, #0
 800280a:	e00e      	b.n	800282a <_ZN17SparkFun_APDS996024setLightIntHighThresholdEt+0x52>
    }

    /* Write high byte */
    if( !wireWriteDataByte(APDS9960_AIHTH, val_high) ) {
 800280c:	7bbb      	ldrb	r3, [r7, #14]
 800280e:	461a      	mov	r2, r3
 8002810:	2187      	movs	r1, #135	@ 0x87
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f90b 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8002818:	4603      	mov	r3, r0
 800281a:	f083 0301 	eor.w	r3, r3, #1
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <_ZN17SparkFun_APDS996024setLightIntHighThresholdEt+0x50>
        return false;
 8002824:	2300      	movs	r3, #0
 8002826:	e000      	b.n	800282a <_ZN17SparkFun_APDS996024setLightIntHighThresholdEt+0x52>
    }

    return true;
 8002828:	2301      	movs	r3, #1
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <_ZN17SparkFun_APDS996024setAmbientLightIntEnableEh>:
 *
 * @param[in] enable 1 to enable interrupts, 0 to turn them off
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setAmbientLightIntEnable(uint8_t enable)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b084      	sub	sp, #16
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
 800283a:	460b      	mov	r3, r1
 800283c:	70fb      	strb	r3, [r7, #3]
    uint8_t val;

    /* Read value from ENABLE register */
    if( !wireReadDataByte(APDS9960_ENABLE, val) ) {
 800283e:	f107 030f 	add.w	r3, r7, #15
 8002842:	461a      	mov	r2, r3
 8002844:	2180      	movs	r1, #128	@ 0x80
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 f915 	bl	8002a76 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 800284c:	4603      	mov	r3, r0
 800284e:	f083 0301 	eor.w	r3, r3, #1
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <_ZN17SparkFun_APDS996024setAmbientLightIntEnableEh+0x2a>
        return false;
 8002858:	2300      	movs	r3, #0
 800285a:	e01f      	b.n	800289c <_ZN17SparkFun_APDS996024setAmbientLightIntEnableEh+0x6a>
    }

    /* Set bits in register to given value */
    enable &= 0b00000001;
 800285c:	78fb      	ldrb	r3, [r7, #3]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	70fb      	strb	r3, [r7, #3]
    enable = enable << 4;
 8002864:	78fb      	ldrb	r3, [r7, #3]
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	70fb      	strb	r3, [r7, #3]
    val &= 0b11101111;
 800286a:	7bfb      	ldrb	r3, [r7, #15]
 800286c:	f023 0310 	bic.w	r3, r3, #16
 8002870:	b2db      	uxtb	r3, r3
 8002872:	73fb      	strb	r3, [r7, #15]
    val |= enable;
 8002874:	7bfa      	ldrb	r2, [r7, #15]
 8002876:	78fb      	ldrb	r3, [r7, #3]
 8002878:	4313      	orrs	r3, r2
 800287a:	b2db      	uxtb	r3, r3
 800287c:	73fb      	strb	r3, [r7, #15]

    /* Write register value back into ENABLE register */
    if( !wireWriteDataByte(APDS9960_ENABLE, val) ) {
 800287e:	7bfb      	ldrb	r3, [r7, #15]
 8002880:	461a      	mov	r2, r3
 8002882:	2180      	movs	r1, #128	@ 0x80
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f8d2 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 800288a:	4603      	mov	r3, r0
 800288c:	f083 0301 	eor.w	r3, r3, #1
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <_ZN17SparkFun_APDS996024setAmbientLightIntEnableEh+0x68>
        return false;
 8002896:	2300      	movs	r3, #0
 8002898:	e000      	b.n	800289c <_ZN17SparkFun_APDS996024setAmbientLightIntEnableEh+0x6a>
    }

    return true;
 800289a:	2301      	movs	r3, #1
}
 800289c:	4618      	mov	r0, r3
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <_ZN17SparkFun_APDS996021setProximityIntEnableEh>:
 *
 * @param[in] enable 1 to enable interrupts, 0 to turn them off
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setProximityIntEnable(uint8_t enable)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	70fb      	strb	r3, [r7, #3]
    uint8_t val;

    /* Read value from ENABLE register */
    if( !wireReadDataByte(APDS9960_ENABLE, val) ) {
 80028b0:	f107 030f 	add.w	r3, r7, #15
 80028b4:	461a      	mov	r2, r3
 80028b6:	2180      	movs	r1, #128	@ 0x80
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f000 f8dc 	bl	8002a76 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 80028be:	4603      	mov	r3, r0
 80028c0:	f083 0301 	eor.w	r3, r3, #1
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <_ZN17SparkFun_APDS996021setProximityIntEnableEh+0x2a>
        return false;
 80028ca:	2300      	movs	r3, #0
 80028cc:	e01f      	b.n	800290e <_ZN17SparkFun_APDS996021setProximityIntEnableEh+0x6a>
    }

    /* Set bits in register to given value */
    enable &= 0b00000001;
 80028ce:	78fb      	ldrb	r3, [r7, #3]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	70fb      	strb	r3, [r7, #3]
    enable = enable << 5;
 80028d6:	78fb      	ldrb	r3, [r7, #3]
 80028d8:	015b      	lsls	r3, r3, #5
 80028da:	70fb      	strb	r3, [r7, #3]
    val &= 0b11011111;
 80028dc:	7bfb      	ldrb	r3, [r7, #15]
 80028de:	f023 0320 	bic.w	r3, r3, #32
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	73fb      	strb	r3, [r7, #15]
    val |= enable;
 80028e6:	7bfa      	ldrb	r2, [r7, #15]
 80028e8:	78fb      	ldrb	r3, [r7, #3]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	73fb      	strb	r3, [r7, #15]

    /* Write register value back into ENABLE register */
    if( !wireWriteDataByte(APDS9960_ENABLE, val) ) {
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	461a      	mov	r2, r3
 80028f4:	2180      	movs	r1, #128	@ 0x80
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f899 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80028fc:	4603      	mov	r3, r0
 80028fe:	f083 0301 	eor.w	r3, r3, #1
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <_ZN17SparkFun_APDS996021setProximityIntEnableEh+0x68>
        return false;
 8002908:	2300      	movs	r3, #0
 800290a:	e000      	b.n	800290e <_ZN17SparkFun_APDS996021setProximityIntEnableEh+0x6a>
    }

    return true;
 800290c:	2301      	movs	r3, #1
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <_ZN17SparkFun_APDS996019setGestureIntEnableEh>:
 *
 * @param[in] enable 1 to enable interrupts, 0 to turn them off
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setGestureIntEnable(uint8_t enable)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
 800291e:	460b      	mov	r3, r1
 8002920:	70fb      	strb	r3, [r7, #3]
    uint8_t val;

    /* Read value from GCONF4 register */
    if( !wireReadDataByte(APDS9960_GCONF4, val) ) {
 8002922:	f107 030f 	add.w	r3, r7, #15
 8002926:	461a      	mov	r2, r3
 8002928:	21ab      	movs	r1, #171	@ 0xab
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f8a3 	bl	8002a76 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 8002930:	4603      	mov	r3, r0
 8002932:	f083 0301 	eor.w	r3, r3, #1
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <_ZN17SparkFun_APDS996019setGestureIntEnableEh+0x2a>
        return false;
 800293c:	2300      	movs	r3, #0
 800293e:	e01f      	b.n	8002980 <_ZN17SparkFun_APDS996019setGestureIntEnableEh+0x6a>
    }

    /* Set bits in register to given value */
    enable &= 0b00000001;
 8002940:	78fb      	ldrb	r3, [r7, #3]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	70fb      	strb	r3, [r7, #3]
    enable = enable << 1;
 8002948:	78fb      	ldrb	r3, [r7, #3]
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	70fb      	strb	r3, [r7, #3]
    val &= 0b11111101;
 800294e:	7bfb      	ldrb	r3, [r7, #15]
 8002950:	f023 0302 	bic.w	r3, r3, #2
 8002954:	b2db      	uxtb	r3, r3
 8002956:	73fb      	strb	r3, [r7, #15]
    val |= enable;
 8002958:	7bfa      	ldrb	r2, [r7, #15]
 800295a:	78fb      	ldrb	r3, [r7, #3]
 800295c:	4313      	orrs	r3, r2
 800295e:	b2db      	uxtb	r3, r3
 8002960:	73fb      	strb	r3, [r7, #15]

    /* Write register value back into GCONF4 register */
    if( !wireWriteDataByte(APDS9960_GCONF4, val) ) {
 8002962:	7bfb      	ldrb	r3, [r7, #15]
 8002964:	461a      	mov	r2, r3
 8002966:	21ab      	movs	r1, #171	@ 0xab
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f000 f860 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 800296e:	4603      	mov	r3, r0
 8002970:	f083 0301 	eor.w	r3, r3, #1
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <_ZN17SparkFun_APDS996019setGestureIntEnableEh+0x68>
        return false;
 800297a:	2300      	movs	r3, #0
 800297c:	e000      	b.n	8002980 <_ZN17SparkFun_APDS996019setGestureIntEnableEh+0x6a>
    }

    return true;
 800297e:	2301      	movs	r3, #1
}
 8002980:	4618      	mov	r0, r3
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <_ZN17SparkFun_APDS996014setGestureModeEh>:
 *
 * @param[in] mode 1 to enter gesture state machine, 0 to exit.
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setGestureMode(uint8_t mode)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	70fb      	strb	r3, [r7, #3]
    uint8_t val;

    /* Read value from GCONF4 register */
    if( !wireReadDataByte(APDS9960_GCONF4, val) ) {
 8002994:	f107 030f 	add.w	r3, r7, #15
 8002998:	461a      	mov	r2, r3
 800299a:	21ab      	movs	r1, #171	@ 0xab
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f86a 	bl	8002a76 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 80029a2:	4603      	mov	r3, r0
 80029a4:	f083 0301 	eor.w	r3, r3, #1
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <_ZN17SparkFun_APDS996014setGestureModeEh+0x2a>
        return false;
 80029ae:	2300      	movs	r3, #0
 80029b0:	e01c      	b.n	80029ec <_ZN17SparkFun_APDS996014setGestureModeEh+0x64>
    }

    /* Set bits in register to given value */
    mode &= 0b00000001;
 80029b2:	78fb      	ldrb	r3, [r7, #3]
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	70fb      	strb	r3, [r7, #3]
    val &= 0b11111110;
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	f023 0301 	bic.w	r3, r3, #1
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	73fb      	strb	r3, [r7, #15]
    val |= mode;
 80029c4:	7bfa      	ldrb	r2, [r7, #15]
 80029c6:	78fb      	ldrb	r3, [r7, #3]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	73fb      	strb	r3, [r7, #15]

    /* Write register value back into GCONF4 register */
    if( !wireWriteDataByte(APDS9960_GCONF4, val) ) {
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	461a      	mov	r2, r3
 80029d2:	21ab      	movs	r1, #171	@ 0xab
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 f82a 	bl	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80029da:	4603      	mov	r3, r0
 80029dc:	f083 0301 	eor.w	r3, r3, #1
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <_ZN17SparkFun_APDS996014setGestureModeEh+0x62>
        return false;
 80029e6:	2300      	movs	r3, #0
 80029e8:	e000      	b.n	80029ec <_ZN17SparkFun_APDS996014setGestureModeEh+0x64>
    }

    return true;
 80029ea:	2301      	movs	r3, #1
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <_ZN17SparkFun_APDS996013wireWriteByteEh>:
 *
 * @param[in] val the 1-byte value to write to the I2C device
 * @return True if successful write operation. False otherwise.
 */
bool SparkFun_APDS9960::wireWriteByte(uint8_t val)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af02      	add	r7, sp, #8
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	460b      	mov	r3, r1
 80029fe:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef status;
    status = HAL_I2C_Master_Transmit(I2C_handle, APDS9960_I2C_ADDR << 1, &val, 1, HAL_MAX_DELAY);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8002a06:	1cfa      	adds	r2, r7, #3
 8002a08:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	2301      	movs	r3, #1
 8002a10:	2172      	movs	r1, #114	@ 0x72
 8002a12:	f002 fa5b 	bl	8004ecc <HAL_I2C_Master_Transmit>
 8002a16:	4603      	mov	r3, r0
 8002a18:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <_ZN17SparkFun_APDS996013wireWriteByteEh+0x30>
        return false;
 8002a20:	2300      	movs	r3, #0
 8002a22:	e000      	b.n	8002a26 <_ZN17SparkFun_APDS996013wireWriteByteEh+0x32>
    }

    return true;
 8002a24:	2301      	movs	r3, #1
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>:
 * @param[in] reg the register in the I2C device to write to
 * @param[in] val the 1-byte value to write to the I2C device
 * @return True if successful write operation. False otherwise.
 */
bool SparkFun_APDS9960::wireWriteDataByte(uint8_t reg, uint8_t val)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b086      	sub	sp, #24
 8002a32:	af02      	add	r7, sp, #8
 8002a34:	6078      	str	r0, [r7, #4]
 8002a36:	460b      	mov	r3, r1
 8002a38:	70fb      	strb	r3, [r7, #3]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	70bb      	strb	r3, [r7, #2]
    uint8_t data[2] = {reg, val};
 8002a3e:	78fb      	ldrb	r3, [r7, #3]
 8002a40:	733b      	strb	r3, [r7, #12]
 8002a42:	78bb      	ldrb	r3, [r7, #2]
 8002a44:	737b      	strb	r3, [r7, #13]
    HAL_StatusTypeDef status;
    status = HAL_I2C_Master_Transmit(I2C_handle, APDS9960_I2C_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8002a4c:	f107 020c 	add.w	r2, r7, #12
 8002a50:	f04f 33ff 	mov.w	r3, #4294967295
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	2302      	movs	r3, #2
 8002a58:	2172      	movs	r1, #114	@ 0x72
 8002a5a:	f002 fa37 	bl	8004ecc <HAL_I2C_Master_Transmit>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 8002a62:	7bfb      	ldrb	r3, [r7, #15]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh+0x3e>
        return false;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	e000      	b.n	8002a6e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh+0x40>
    }

    return true;
 8002a6c:	2301      	movs	r3, #1
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>:
 * @param[in] reg the register to read from
 * @param[out] the value returned from the register
 * @return True if successful read operation. False otherwise.
 */
bool SparkFun_APDS9960::wireReadDataByte(uint8_t reg, uint8_t &val)
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b08a      	sub	sp, #40	@ 0x28
 8002a7a:	af04      	add	r7, sp, #16
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	460b      	mov	r3, r1
 8002a80:	607a      	str	r2, [r7, #4]
 8002a82:	72fb      	strb	r3, [r7, #11]
    uint8_t receivedData;

    /* Indicate which register we want to read from */
    if (!wireWriteByte(reg)) {
 8002a84:	7afb      	ldrb	r3, [r7, #11]
 8002a86:	4619      	mov	r1, r3
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f7ff ffb3 	bl	80029f4 <_ZN17SparkFun_APDS996013wireWriteByteEh>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	f083 0301 	eor.w	r3, r3, #1
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <_ZN17SparkFun_APDS996016wireReadDataByteEhRh+0x28>
        return false;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	e01b      	b.n	8002ad6 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh+0x60>
    }

    /* Read from register */
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(I2C_handle, APDS9960_I2C_ADDR << 1, reg, I2C_MEMADD_SIZE_8BIT, &receivedData, 1, HAL_MAX_DELAY);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8002aa4:	7afb      	ldrb	r3, [r7, #11]
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8002aac:	9302      	str	r3, [sp, #8]
 8002aae:	2301      	movs	r3, #1
 8002ab0:	9301      	str	r3, [sp, #4]
 8002ab2:	f107 0316 	add.w	r3, r7, #22
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	2301      	movs	r3, #1
 8002aba:	2172      	movs	r1, #114	@ 0x72
 8002abc:	f002 fd36 	bl	800552c <HAL_I2C_Mem_Read>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) {
 8002ac4:	7dfb      	ldrb	r3, [r7, #23]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <_ZN17SparkFun_APDS996016wireReadDataByteEhRh+0x58>
        return false;
 8002aca:	2300      	movs	r3, #0
 8002acc:	e003      	b.n	8002ad6 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh+0x60>
    }

    val = receivedData;
 8002ace:	7dba      	ldrb	r2, [r7, #22]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	701a      	strb	r2, [r3, #0]

    return true;
 8002ad4:	2301      	movs	r3, #1
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm>:
 * @param timer_channel The channel number to be used with the timer (like TIM_CHANNEL_1).
 * @param CPU_clock_speed_MHz The CPU clock speed in MHz (like 96).
 * @param PWM_frequency_Hz The PWM frequency in Hz (20,000 to 100,000 allowed).
 */

TB6612FNG_Motor::TB6612FNG_Motor(
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	603b      	str	r3, [r7, #0]
 8002aec:	4613      	mov	r3, r2
 8002aee:	80fb      	strh	r3, [r7, #6]

	: IN1_pin_group(IN1_pin_group), IN1_pin(IN1_pin),
	  IN2_pin_group(IN2_pin_group), IN2_pin(IN2_pin),
	  timer_handle(timer_handle), timer_channel(timer_channel),
	  CPU_clock_speed_MHz(CPU_clock_speed_MHz),
	  PWM_frequency_Hz(PWM_frequency_Hz)
 8002af0:	4a23      	ldr	r2, [pc, #140]	@ (8002b80 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa0>)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	601a      	str	r2, [r3, #0]
	: IN1_pin_group(IN1_pin_group), IN1_pin(IN1_pin),
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	605a      	str	r2, [r3, #4]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	88fa      	ldrh	r2, [r7, #6]
 8002b00:	811a      	strh	r2, [r3, #8]
	  IN2_pin_group(IN2_pin_group), IN2_pin(IN2_pin),
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	60da      	str	r2, [r3, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8b3a      	ldrh	r2, [r7, #24]
 8002b0c:	821a      	strh	r2, [r3, #16]
	  timer_handle(timer_handle), timer_channel(timer_channel),
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	69fa      	ldr	r2, [r7, #28]
 8002b12:	615a      	str	r2, [r3, #20]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a3a      	ldr	r2, [r7, #32]
 8002b18:	619a      	str	r2, [r3, #24]
	  CPU_clock_speed_MHz(CPU_clock_speed_MHz),
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b1e:	61da      	str	r2, [r3, #28]
	  PWM_frequency_Hz(PWM_frequency_Hz)
 8002b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	841a      	strh	r2, [r3, #32]
{
	// Make sure the motor is off to start
	stop();
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 f8d0 	bl	8002cce <_ZN15TB6612FNG_Motor4stopEv>

	// Make sure the PWM frequency is within bounds
	if(PWM_frequency_Hz < 20000)
 8002b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b30:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d803      	bhi.n	8002b40 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0x60>
	{
		// Too low. Human can hear this.
		PWM_frequency_Hz = 20000;
 8002b38:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8002b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b3e:	e005      	b.n	8002b4c <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0x6c>
	}
	else if(PWM_frequency_Hz > 100000)
 8002b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b42:	4a10      	ldr	r2, [pc, #64]	@ (8002b84 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa4>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d901      	bls.n	8002b4c <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0x6c>
	{
		// Very high. May interfere with other tasks.
		PWM_frequency_Hz = 100000;
 8002b48:	4b0e      	ldr	r3, [pc, #56]	@ (8002b84 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa4>)
 8002b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
	}

	// Set the auto-reload value based on the CPU clock speed and the desired PWM frequency
	auto_reload_value =( CPU_clock_speed_MHz * 1000000 / PWM_frequency_Hz ) - 1;
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4e:	4a0e      	ldr	r2, [pc, #56]	@ (8002b88 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa8>)
 8002b50:	fb03 f202 	mul.w	r2, r3, r2
 8002b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	845a      	strh	r2, [r3, #34]	@ 0x22
	timer_handle->Instance->ARR = auto_reload_value;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Start the PWM generation
	start();
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 f89d 	bl	8002cae <_ZN15TB6612FNG_Motor5startEv>
}
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	08010fa8 	.word	0x08010fa8
 8002b84:	000186a0 	.word	0x000186a0
 8002b88:	000f4240 	.word	0x000f4240

08002b8c <_ZN15TB6612FNG_MotorD1Ev>:

/**
 * @brief Destructor for the TB6612FNG_Motor class.
 */
TB6612FNG_Motor::~TB6612FNG_Motor()
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	4a05      	ldr	r2, [pc, #20]	@ (8002bac <_ZN15TB6612FNG_MotorD1Ev+0x20>)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	601a      	str	r2, [r3, #0]
{
	stop();
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f897 	bl	8002cce <_ZN15TB6612FNG_Motor4stopEv>
}
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	08010fa8 	.word	0x08010fa8

08002bb0 <_ZN15TB6612FNG_MotorD0Ev>:
TB6612FNG_Motor::~TB6612FNG_Motor()
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
}
 8002bb8:	6878      	ldr	r0, [r7, #4]
 8002bba:	f7ff ffe7 	bl	8002b8c <_ZN15TB6612FNG_MotorD1Ev>
 8002bbe:	2124      	movs	r1, #36	@ 0x24
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f00b fa9a 	bl	800e0fa <_ZdlPvj>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <_ZN15TB6612FNG_Motor8set_dutyEss>:
/**
 * @brief Sets the duty cycle of the motor.
 * @param speed The duty cycle value, ranging from -100 to 100 by default.
 */
void TB6612FNG_Motor::set_duty(int16_t duty, int16_t maximum_value)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	807b      	strh	r3, [r7, #2]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	803b      	strh	r3, [r7, #0]
	// Raise the appropriate pins
	if(duty >= 0)
 8002be0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	db10      	blt.n	8002c0a <_ZN15TB6612FNG_Motor8set_dutyEss+0x3a>
	{
		HAL_GPIO_WritePin(IN1_pin_group, IN1_pin, GPIO_PIN_SET);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6858      	ldr	r0, [r3, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	891b      	ldrh	r3, [r3, #8]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	f001 ffda 	bl	8004bac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_pin_group, IN2_pin, GPIO_PIN_RESET);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68d8      	ldr	r0, [r3, #12]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	8a1b      	ldrh	r3, [r3, #16]
 8002c00:	2200      	movs	r2, #0
 8002c02:	4619      	mov	r1, r3
 8002c04:	f001 ffd2 	bl	8004bac <HAL_GPIO_WritePin>
 8002c08:	e00f      	b.n	8002c2a <_ZN15TB6612FNG_Motor8set_dutyEss+0x5a>
	}
	else
	{
		HAL_GPIO_WritePin(IN1_pin_group, IN1_pin, GPIO_PIN_RESET);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6858      	ldr	r0, [r3, #4]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	891b      	ldrh	r3, [r3, #8]
 8002c12:	2200      	movs	r2, #0
 8002c14:	4619      	mov	r1, r3
 8002c16:	f001 ffc9 	bl	8004bac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_pin_group, IN2_pin, GPIO_PIN_SET);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68d8      	ldr	r0, [r3, #12]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	8a1b      	ldrh	r3, [r3, #16]
 8002c22:	2201      	movs	r2, #1
 8002c24:	4619      	mov	r1, r3
 8002c26:	f001 ffc1 	bl	8004bac <HAL_GPIO_WritePin>
	}

	uint16_t duty_magnitude;
	if(duty<0)
 8002c2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	da03      	bge.n	8002c3a <_ZN15TB6612FNG_Motor8set_dutyEss+0x6a>
	{
		duty_magnitude = duty*-1;
 8002c32:	887b      	ldrh	r3, [r7, #2]
 8002c34:	425b      	negs	r3, r3
 8002c36:	81fb      	strh	r3, [r7, #14]
 8002c38:	e001      	b.n	8002c3e <_ZN15TB6612FNG_Motor8set_dutyEss+0x6e>
	}
	else
	{
		duty_magnitude = duty;
 8002c3a:	887b      	ldrh	r3, [r7, #2]
 8002c3c:	81fb      	strh	r3, [r7, #14]
	}

	// Check if duty cycle is within bounds
	if(duty_magnitude > maximum_value)
 8002c3e:	89fa      	ldrh	r2, [r7, #14]
 8002c40:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	dd01      	ble.n	8002c4c <_ZN15TB6612FNG_Motor8set_dutyEss+0x7c>
	{
		duty = maximum_value;
 8002c48:	883b      	ldrh	r3, [r7, #0]
 8002c4a:	807b      	strh	r3, [r7, #2]
	}


	// Set the compare value
	uint16_t compare_value = duty_magnitude * auto_reload_value / maximum_value;
 8002c4c:	89fb      	ldrh	r3, [r7, #14]
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8002c52:	fb03 f202 	mul.w	r2, r3, r2
 8002c56:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002c5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c5e:	81bb      	strh	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d105      	bne.n	8002c74 <_ZN15TB6612FNG_Motor8set_dutyEss+0xa4>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	89ba      	ldrh	r2, [r7, #12]
 8002c70:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002c72:	e018      	b.n	8002ca6 <_ZN15TB6612FNG_Motor8set_dutyEss+0xd6>
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d105      	bne.n	8002c88 <_ZN15TB6612FNG_Motor8set_dutyEss+0xb8>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	695b      	ldr	r3, [r3, #20]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	89ba      	ldrh	r2, [r7, #12]
 8002c84:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002c86:	e00e      	b.n	8002ca6 <_ZN15TB6612FNG_Motor8set_dutyEss+0xd6>
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d105      	bne.n	8002c9c <_ZN15TB6612FNG_Motor8set_dutyEss+0xcc>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	89ba      	ldrh	r2, [r7, #12]
 8002c98:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002c9a:	e004      	b.n	8002ca6 <_ZN15TB6612FNG_Motor8set_dutyEss+0xd6>
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	89ba      	ldrh	r2, [r7, #12]
 8002ca4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002ca6:	bf00      	nop
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <_ZN15TB6612FNG_Motor5startEv>:

/**
 * @brief starts the motor by starting PWM generation.
 */
void TB6612FNG_Motor::start()
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b082      	sub	sp, #8
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(timer_handle, timer_channel);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695a      	ldr	r2, [r3, #20]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	f003 ffd3 	bl	8006c6c <HAL_TIM_PWM_Start>
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <_ZN15TB6612FNG_Motor4stopEv>:

/**
 * @brief stops the motor by stopping PWM generation.
 */
void TB6612FNG_Motor::stop()
{	
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(IN1_pin_group, IN1_pin, GPIO_PIN_RESET);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6858      	ldr	r0, [r3, #4]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	891b      	ldrh	r3, [r3, #8]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	f001 ff63 	bl	8004bac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_pin_group, IN2_pin, GPIO_PIN_RESET);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68d8      	ldr	r0, [r3, #12]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	8a1b      	ldrh	r3, [r3, #16]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	f001 ff5b 	bl	8004bac <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(timer_handle, timer_channel);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695a      	ldr	r2, [r3, #20]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4610      	mov	r0, r2
 8002d02:	f004 f863 	bl	8006dcc <HAL_TIM_PWM_Stop>
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
	...

08002d10 <HAL_GPIO_EXTI_Callback>:
void I2C_Scan(UART_HandleTypeDef* uart_handle);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN) {
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4603      	mov	r3, r0
 8002d18:	80fb      	strh	r3, [r7, #6]
   // Your interrupt handling code here
	if(initialized)
 8002d1a:	4b08      	ldr	r3, [pc, #32]	@ (8002d3c <HAL_GPIO_EXTI_Callback+0x2c>)
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d008      	beq.n	8002d34 <HAL_GPIO_EXTI_Callback+0x24>
	{
		if(GPIO_PIN == GPIO_PIN_13)
 8002d22:	88fb      	ldrh	r3, [r7, #6]
 8002d24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d28:	d104      	bne.n	8002d34 <HAL_GPIO_EXTI_Callback+0x24>
		{
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8002d2a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002d2e:	4804      	ldr	r0, [pc, #16]	@ (8002d40 <HAL_GPIO_EXTI_Callback+0x30>)
 8002d30:	f001 ff55 	bl	8004bde <HAL_GPIO_TogglePin>
		}
	}
}
 8002d34:	bf00      	nop
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	200006d0 	.word	0x200006d0
 8002d40:	40020400 	.word	0x40020400

08002d44 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
	if (initialized) // Timers must be initalized before this code can run successfully.
 8002d4c:	4b12      	ldr	r3, [pc, #72]	@ (8002d98 <HAL_TIM_IC_CaptureCallback+0x54>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d01d      	beq.n	8002d90 <HAL_TIM_IC_CaptureCallback+0x4c>
	{
		if((htim->Instance = TIM1))
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a11      	ldr	r2, [pc, #68]	@ (8002d9c <HAL_TIM_IC_CaptureCallback+0x58>)
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	bf14      	ite	ne
 8002d62:	2301      	movne	r3, #1
 8002d64:	2300      	moveq	r3, #0
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d011      	beq.n	8002d90 <HAL_TIM_IC_CaptureCallback+0x4c>
		{
			if ( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 )
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	7f1b      	ldrb	r3, [r3, #28]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d104      	bne.n	8002d7e <HAL_TIM_IC_CaptureCallback+0x3a>
			{
				SteeringChannel->callback();
 8002d74:	4b0a      	ldr	r3, [pc, #40]	@ (8002da0 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fe fde9 	bl	8001950 <_ZN9RCChannel8callbackEv>
			}

			if ( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	7f1b      	ldrb	r3, [r3, #28]
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d104      	bne.n	8002d90 <HAL_TIM_IC_CaptureCallback+0x4c>
			{
				ThrottleChannel->callback();
 8002d86:	4b07      	ldr	r3, [pc, #28]	@ (8002da4 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fe fde0 	bl	8001950 <_ZN9RCChannel8callbackEv>
			}
		}
	}
}
 8002d90:	bf00      	nop
 8002d92:	3708      	adds	r7, #8
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	200006d0 	.word	0x200006d0
 8002d9c:	40010000 	.word	0x40010000
 8002da0:	200006dc 	.word	0x200006dc
 8002da4:	200006d8 	.word	0x200006d8

08002da8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // Not needed
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a07      	ldr	r2, [pc, #28]	@ (8002dd4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d106      	bne.n	8002dc8 <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		My_Encoder->count = __HAL_TIM_GET_COUNTER(htim);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002dc0:	4b05      	ldr	r3, [pc, #20]	@ (8002dd8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	b292      	uxth	r2, r2
 8002dc6:	82da      	strh	r2, [r3, #22]
	}
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	40000c00 	.word	0x40000c00
 8002dd8:	200006e4 	.word	0x200006e4
 8002ddc:	00000000 	.word	0x00000000

08002de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002de4:	b0ab      	sub	sp, #172	@ 0xac
 8002de6:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002de8:	f001 fb9c 	bl	8004524 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dec:	f000 fc6c 	bl	80036c8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002df0:	f000 ff66 	bl	8003cc0 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8002df4:	f000 ff36 	bl	8003c64 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 8002df8:	f000 fda8 	bl	800394c <_ZL12MX_TIM2_Initv>
  MX_TIM5_Init();
 8002dfc:	f000 fed4 	bl	8003ba8 <_ZL12MX_TIM5_Initv>
  MX_TIM1_Init();
 8002e00:	f000 fd08 	bl	8003814 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8002e04:	f000 fe30 	bl	8003a68 <_ZL12MX_TIM3_Initv>
  MX_I2C1_Init();
 8002e08:	f000 fcd0 	bl	80037ac <_ZL12MX_I2C1_Initv>
		  GPIOB, GPIO_PIN_14,
		  GPIOB, GPIO_PIN_15,
		  &htim2, TIM_CHANNEL_1,
		  CPU_CLOCK_SPEED_MHZ,
		  MOTOR_PWM_HZ
		  );
 8002e0c:	2024      	movs	r0, #36	@ 0x24
 8002e0e:	f00b f976 	bl	800e0fe <_Znwj>
 8002e12:	4603      	mov	r3, r0
 8002e14:	461c      	mov	r4, r3
 8002e16:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8002e1a:	9304      	str	r3, [sp, #16]
 8002e1c:	2364      	movs	r3, #100	@ 0x64
 8002e1e:	9303      	str	r3, [sp, #12]
 8002e20:	2300      	movs	r3, #0
 8002e22:	9302      	str	r3, [sp, #8]
 8002e24:	4bad      	ldr	r3, [pc, #692]	@ (80030dc <main+0x2fc>)
 8002e26:	9301      	str	r3, [sp, #4]
 8002e28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	4bac      	ldr	r3, [pc, #688]	@ (80030e0 <main+0x300>)
 8002e30:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002e34:	49aa      	ldr	r1, [pc, #680]	@ (80030e0 <main+0x300>)
 8002e36:	4620      	mov	r0, r4
 8002e38:	f7ff fe52 	bl	8002ae0 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm>
  My_Motor = new TB6612FNG_Motor
 8002e3c:	4ba9      	ldr	r3, [pc, #676]	@ (80030e4 <main+0x304>)
 8002e3e:	601c      	str	r4, [r3, #0]
  		  1520,      // Calibrated neutral
  		  2035,      // Calibrated full left
  		  10000,       // New max positive
		  10000,       // New max negative (magnitude)
		  true     // Saturate if signal is over full? True by default. False good for debugging.
		  );
 8002e40:	205c      	movs	r0, #92	@ 0x5c
 8002e42:	f00b f95c 	bl	800e0fe <_Znwj>
 8002e46:	4603      	mov	r3, r0
 8002e48:	461c      	mov	r4, r3
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	9308      	str	r3, [sp, #32]
 8002e4e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002e52:	9307      	str	r3, [sp, #28]
 8002e54:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002e58:	9306      	str	r3, [sp, #24]
 8002e5a:	f240 73f3 	movw	r3, #2035	@ 0x7f3
 8002e5e:	9305      	str	r3, [sp, #20]
 8002e60:	f44f 63be 	mov.w	r3, #1520	@ 0x5f0
 8002e64:	9304      	str	r3, [sp, #16]
 8002e66:	f240 33ea 	movw	r3, #1002	@ 0x3ea
 8002e6a:	9303      	str	r3, [sp, #12]
 8002e6c:	2364      	movs	r3, #100	@ 0x64
 8002e6e:	9302      	str	r3, [sp, #8]
 8002e70:	f244 435c 	movw	r3, #17500	@ 0x445c
 8002e74:	9301      	str	r3, [sp, #4]
 8002e76:	2300      	movs	r3, #0
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	4b9b      	ldr	r3, [pc, #620]	@ (80030e8 <main+0x308>)
 8002e7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e80:	499a      	ldr	r1, [pc, #616]	@ (80030ec <main+0x30c>)
 8002e82:	4620      	mov	r0, r4
 8002e84:	f7fe fcde 	bl	8001844 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb>
  SteeringChannel = new RCChannel
 8002e88:	4b99      	ldr	r3, [pc, #612]	@ (80030f0 <main+0x310>)
 8002e8a:	601c      	str	r4, [r3, #0]
		  		  1533,  // Calibrated neutral
		  		  2017,  // Calibrated full speed
		  		  10000,   // New max positive
				  10000,    // New max negative (magnitude)
				  true  // Saturate if signal is over full? True by default. False good for debugging.
		  	  	  );
 8002e8c:	205c      	movs	r0, #92	@ 0x5c
 8002e8e:	f00b f936 	bl	800e0fe <_Znwj>
 8002e92:	4603      	mov	r3, r0
 8002e94:	461c      	mov	r4, r3
 8002e96:	2301      	movs	r3, #1
 8002e98:	9308      	str	r3, [sp, #32]
 8002e9a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002e9e:	9307      	str	r3, [sp, #28]
 8002ea0:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002ea4:	9306      	str	r3, [sp, #24]
 8002ea6:	f240 73e1 	movw	r3, #2017	@ 0x7e1
 8002eaa:	9305      	str	r3, [sp, #20]
 8002eac:	f240 53fd 	movw	r3, #1533	@ 0x5fd
 8002eb0:	9304      	str	r3, [sp, #16]
 8002eb2:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8002eb6:	9303      	str	r3, [sp, #12]
 8002eb8:	2364      	movs	r3, #100	@ 0x64
 8002eba:	9302      	str	r3, [sp, #8]
 8002ebc:	f244 435c 	movw	r3, #17500	@ 0x445c
 8002ec0:	9301      	str	r3, [sp, #4]
 8002ec2:	2304      	movs	r3, #4
 8002ec4:	9300      	str	r3, [sp, #0]
 8002ec6:	4b88      	ldr	r3, [pc, #544]	@ (80030e8 <main+0x308>)
 8002ec8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ecc:	4987      	ldr	r1, [pc, #540]	@ (80030ec <main+0x30c>)
 8002ece:	4620      	mov	r0, r4
 8002ed0:	f7fe fcb8 	bl	8001844 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb>
  ThrottleChannel = new RCChannel
 8002ed4:	4b87      	ldr	r3, [pc, #540]	@ (80030f4 <main+0x314>)
 8002ed6:	601c      	str	r4, [r3, #0]
		  &htim5,
		  20,
		  488.3f,
		  16,
		  false // true doesn't work yet!
		  );
 8002ed8:	202c      	movs	r0, #44	@ 0x2c
 8002eda:	f00b f910 	bl	800e0fe <_Znwj>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	461c      	mov	r4, r3
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	2310      	movs	r3, #16
 8002ee8:	ed9f 0a83 	vldr	s0, [pc, #524]	@ 80030f8 <main+0x318>
 8002eec:	2214      	movs	r2, #20
 8002eee:	4983      	ldr	r1, [pc, #524]	@ (80030fc <main+0x31c>)
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	f7fe fa77 	bl	80013e4 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb>
  My_Encoder = new PololuEncoder
 8002ef6:	4b82      	ldr	r3, [pc, #520]	@ (8003100 <main+0x320>)
 8002ef8:	601c      	str	r4, [r3, #0]
		  My_Encoder,
		  CONTROL_FREQUENCY_HZ,
		  100.0f,
		  650.0f,
		  0.0f
		  );
 8002efa:	2034      	movs	r0, #52	@ 0x34
 8002efc:	f00b f8ff 	bl	800e0fe <_Znwj>
 8002f00:	4603      	mov	r3, r0
 8002f02:	461c      	mov	r4, r3
 8002f04:	4b77      	ldr	r3, [pc, #476]	@ (80030e4 <main+0x304>)
 8002f06:	6819      	ldr	r1, [r3, #0]
 8002f08:	4b7d      	ldr	r3, [pc, #500]	@ (8003100 <main+0x320>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	ed9f 1a7d 	vldr	s2, [pc, #500]	@ 8003104 <main+0x324>
 8002f10:	eddf 0a7d 	vldr	s1, [pc, #500]	@ 8003108 <main+0x328>
 8002f14:	ed9f 0a7d 	vldr	s0, [pc, #500]	@ 800310c <main+0x32c>
 8002f18:	2308      	movs	r3, #8
 8002f1a:	4620      	mov	r0, r4
 8002f1c:	f7fe f908 	bl	8001130 <_ZN12MotorControlC1EP15TB6612FNG_MotorP13PololuEncodermfff>
  My_Controller = new MotorControl
 8002f20:	4b7b      	ldr	r3, [pc, #492]	@ (8003110 <main+0x330>)
 8002f22:	601c      	str	r4, [r3, #0]
  Throttle = new RemoteControlControl
		  (
		  ThrottleChannel,
		  My_Controller,
		  30
		  );
 8002f24:	2014      	movs	r0, #20
 8002f26:	f00b f8ea 	bl	800e0fe <_Znwj>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	461c      	mov	r4, r3
 8002f2e:	4b71      	ldr	r3, [pc, #452]	@ (80030f4 <main+0x314>)
 8002f30:	6819      	ldr	r1, [r3, #0]
 8002f32:	4b77      	ldr	r3, [pc, #476]	@ (8003110 <main+0x330>)
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	231e      	movs	r3, #30
 8002f38:	4620      	mov	r0, r4
 8002f3a:	f7fe fdcd 	bl	8001ad8 <_ZN20RemoteControlControlC1EP9RCChannelP12MotorControlt>
  Throttle = new RemoteControlControl
 8002f3e:	4b75      	ldr	r3, [pc, #468]	@ (8003114 <main+0x334>)
 8002f40:	601c      	str	r4, [r3, #0]
	  	  CPU_CLOCK_SPEED_MHZ,
		  60,
		  1000,
		  1500,
		  2000
		  );
 8002f42:	2020      	movs	r0, #32
 8002f44:	f00b f8db 	bl	800e0fe <_Znwj>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	461c      	mov	r4, r3
 8002f4c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002f50:	9304      	str	r3, [sp, #16]
 8002f52:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8002f56:	9303      	str	r3, [sp, #12]
 8002f58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f5c:	9302      	str	r3, [sp, #8]
 8002f5e:	233c      	movs	r3, #60	@ 0x3c
 8002f60:	9301      	str	r3, [sp, #4]
 8002f62:	2364      	movs	r3, #100	@ 0x64
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	f244 435c 	movw	r3, #17500	@ 0x445c
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	496a      	ldr	r1, [pc, #424]	@ (8003118 <main+0x338>)
 8002f6e:	4620      	mov	r0, r4
 8002f70:	f7fe fb66 	bl	8001640 <_ZN11PololuServoC1EP17TIM_HandleTypeDefmtmtttt>
  My_Servo = new PololuServo
 8002f74:	4b69      	ldr	r3, [pc, #420]	@ (800311c <main+0x33c>)
 8002f76:	601c      	str	r4, [r3, #0]
//		  (
//		  &hi2c1,
//		  0x29
//		  );

  My_Conveyor = new ConveyorBelt(My_Encoder, 38.1f);
 8002f78:	2010      	movs	r0, #16
 8002f7a:	f00b f8c0 	bl	800e0fe <_Znwj>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	461c      	mov	r4, r3
 8002f82:	4b5f      	ldr	r3, [pc, #380]	@ (8003100 <main+0x320>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	ed9f 0a66 	vldr	s0, [pc, #408]	@ 8003120 <main+0x340>
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4620      	mov	r0, r4
 8002f8e:	f7fe f82f 	bl	8000ff0 <_ZN12ConveyorBeltC1EP13PololuEncoderf>
 8002f92:	4b64      	ldr	r3, [pc, #400]	@ (8003124 <main+0x344>)
 8002f94:	601c      	str	r4, [r3, #0]

  // Not shutdown pin for ToF_Sensor
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8002f96:	2201      	movs	r2, #1
 8002f98:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002f9c:	4850      	ldr	r0, [pc, #320]	@ (80030e0 <main+0x300>)
 8002f9e:	f001 fe05 	bl	8004bac <HAL_GPIO_WritePin>
  VL53L0X_Init();
 8002fa2:	f000 fee7 	bl	8003d74 <_ZL12VL53L0X_Initv>

  // Color sensor
  My_Color_Sensor = new SparkFun_APDS9960(&hi2c1);
 8002fa6:	20a8      	movs	r0, #168	@ 0xa8
 8002fa8:	f00b f8a9 	bl	800e0fe <_Znwj>
 8002fac:	4603      	mov	r3, r0
 8002fae:	461c      	mov	r4, r3
 8002fb0:	495d      	ldr	r1, [pc, #372]	@ (8003128 <main+0x348>)
 8002fb2:	4620      	mov	r0, r4
 8002fb4:	f7fe fe36 	bl	8001c24 <_ZN17SparkFun_APDS9960C1EP17I2C_HandleTypeDef>
 8002fb8:	4b5c      	ldr	r3, [pc, #368]	@ (800312c <main+0x34c>)
 8002fba:	601c      	str	r4, [r3, #0]
  //I2C_Scan(&huart2);

  My_Color_Sensor->init();
 8002fbc:	4b5b      	ldr	r3, [pc, #364]	@ (800312c <main+0x34c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fe fe5f 	bl	8001c84 <_ZN17SparkFun_APDS99604initEv>
  My_Color_Sensor->disableProximitySensor();
 8002fc6:	4b59      	ldr	r3, [pc, #356]	@ (800312c <main+0x34c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff f8a8 	bl	8002120 <_ZN17SparkFun_APDS996022disableProximitySensorEv>
  My_Color_Sensor->disableGestureSensor();
 8002fd0:	4b56      	ldr	r3, [pc, #344]	@ (800312c <main+0x34c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff f8c5 	bl	8002164 <_ZN17SparkFun_APDS996020disableGestureSensorEv>
  My_Color_Sensor->enableLightSensor();
 8002fda:	4b54      	ldr	r3, [pc, #336]	@ (800312c <main+0x34c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2100      	movs	r1, #0
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff f853 	bl	800208c <_ZN17SparkFun_APDS996017enableLightSensorEb>
//  I2C_Scan(&huart2);

  uint16_t ambient_light, red_light, green_light, blue_light;


  uint8_t task = 0; // Start on task 0
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  int number_of_states = 5;
 8002fec:	2305      	movs	r3, #5
 8002fee:	66bb      	str	r3, [r7, #104]	@ 0x68

  number_of_states += 1;
 8002ff0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	66bb      	str	r3, [r7, #104]	@ 0x68
  uint32_t last_tick_state[number_of_states] = {0};
 8002ff6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002ff8:	1e4b      	subs	r3, r1, #1
 8002ffa:	667b      	str	r3, [r7, #100]	@ 0x64
 8002ffc:	460a      	mov	r2, r1
 8002ffe:	2300      	movs	r3, #0
 8003000:	4690      	mov	r8, r2
 8003002:	4699      	mov	r9, r3
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	f04f 0300 	mov.w	r3, #0
 800300c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8003010:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8003014:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8003018:	460a      	mov	r2, r1
 800301a:	2300      	movs	r3, #0
 800301c:	613a      	str	r2, [r7, #16]
 800301e:	617b      	str	r3, [r7, #20]
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800302c:	4648      	mov	r0, r9
 800302e:	0143      	lsls	r3, r0, #5
 8003030:	4640      	mov	r0, r8
 8003032:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003036:	4640      	mov	r0, r8
 8003038:	0142      	lsls	r2, r0, #5
 800303a:	460b      	mov	r3, r1
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	3307      	adds	r3, #7
 8003040:	08db      	lsrs	r3, r3, #3
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	ebad 0d03 	sub.w	sp, sp, r3
 8003048:	ab0a      	add	r3, sp, #40	@ 0x28
 800304a:	3303      	adds	r3, #3
 800304c:	089b      	lsrs	r3, r3, #2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	663b      	str	r3, [r7, #96]	@ 0x60
 8003052:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003054:	3901      	subs	r1, #1
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
 800305a:	1d1a      	adds	r2, r3, #4
 800305c:	1e4b      	subs	r3, r1, #1
 800305e:	e003      	b.n	8003068 <main+0x288>
 8003060:	2100      	movs	r1, #0
 8003062:	6011      	str	r1, [r2, #0]
 8003064:	3b01      	subs	r3, #1
 8003066:	3204      	adds	r2, #4
 8003068:	2b00      	cmp	r3, #0
 800306a:	daf9      	bge.n	8003060 <main+0x280>
  uint16_t task_frequencies[number_of_states] = {0};
 800306c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800306e:	1e4b      	subs	r3, r1, #1
 8003070:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003072:	460a      	mov	r2, r1
 8003074:	2300      	movs	r3, #0
 8003076:	60ba      	str	r2, [r7, #8]
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8003086:	4648      	mov	r0, r9
 8003088:	0103      	lsls	r3, r0, #4
 800308a:	4640      	mov	r0, r8
 800308c:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8003090:	4640      	mov	r0, r8
 8003092:	0102      	lsls	r2, r0, #4
 8003094:	460a      	mov	r2, r1
 8003096:	2300      	movs	r3, #0
 8003098:	603a      	str	r2, [r7, #0]
 800309a:	607b      	str	r3, [r7, #4]
 800309c:	f04f 0200 	mov.w	r2, #0
 80030a0:	f04f 0300 	mov.w	r3, #0
 80030a4:	e9d7 8900 	ldrd	r8, r9, [r7]
 80030a8:	4648      	mov	r0, r9
 80030aa:	0103      	lsls	r3, r0, #4
 80030ac:	4640      	mov	r0, r8
 80030ae:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80030b2:	4640      	mov	r0, r8
 80030b4:	0102      	lsls	r2, r0, #4
 80030b6:	460b      	mov	r3, r1
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	3307      	adds	r3, #7
 80030bc:	08db      	lsrs	r3, r3, #3
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	ebad 0d03 	sub.w	sp, sp, r3
 80030c4:	ab0a      	add	r3, sp, #40	@ 0x28
 80030c6:	3301      	adds	r3, #1
 80030c8:	085b      	lsrs	r3, r3, #1
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80030ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030d0:	3901      	subs	r1, #1
 80030d2:	2200      	movs	r2, #0
 80030d4:	801a      	strh	r2, [r3, #0]
 80030d6:	1c9a      	adds	r2, r3, #2
 80030d8:	1e4b      	subs	r3, r1, #1
 80030da:	e02d      	b.n	8003138 <main+0x358>
 80030dc:	2000054c 	.word	0x2000054c
 80030e0:	40020400 	.word	0x40020400
 80030e4:	200006d4 	.word	0x200006d4
 80030e8:	20000504 	.word	0x20000504
 80030ec:	40020000 	.word	0x40020000
 80030f0:	200006dc 	.word	0x200006dc
 80030f4:	200006d8 	.word	0x200006d8
 80030f8:	43f42666 	.word	0x43f42666
 80030fc:	200005dc 	.word	0x200005dc
 8003100:	200006e4 	.word	0x200006e4
 8003104:	00000000 	.word	0x00000000
 8003108:	44228000 	.word	0x44228000
 800310c:	42c80000 	.word	0x42c80000
 8003110:	200006e8 	.word	0x200006e8
 8003114:	200006e0 	.word	0x200006e0
 8003118:	20000594 	.word	0x20000594
 800311c:	200006ec 	.word	0x200006ec
 8003120:	42186666 	.word	0x42186666
 8003124:	2000089c 	.word	0x2000089c
 8003128:	200004b0 	.word	0x200004b0
 800312c:	200008a0 	.word	0x200008a0
 8003130:	2100      	movs	r1, #0
 8003132:	8011      	strh	r1, [r2, #0]
 8003134:	3b01      	subs	r3, #1
 8003136:	3202      	adds	r2, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	daf9      	bge.n	8003130 <main+0x350>
  task_frequencies[1] = CONTROL_FREQUENCY_HZ; // Hz
 800313c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800313e:	2208      	movs	r2, #8
 8003140:	805a      	strh	r2, [r3, #2]
  task_frequencies[2] = 69;
 8003142:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003144:	2245      	movs	r2, #69	@ 0x45
 8003146:	809a      	strh	r2, [r3, #4]
  task_frequencies[3] = 2; // Hz
 8003148:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800314a:	2202      	movs	r2, #2
 800314c:	80da      	strh	r2, [r3, #6]
  task_frequencies[4] = 10; // Hz
 800314e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003150:	220a      	movs	r2, #10
 8003152:	811a      	strh	r2, [r3, #8]
  task_frequencies[5] = 2; // Hz
 8003154:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003156:	2202      	movs	r2, #2
 8003158:	815a      	strh	r2, [r3, #10]
  uint16_t task_periods[number_of_states] = {0};
 800315a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800315c:	1e4b      	subs	r3, r1, #1
 800315e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003160:	460a      	mov	r2, r1
 8003162:	2300      	movs	r3, #0
 8003164:	4615      	mov	r5, r2
 8003166:	461e      	mov	r6, r3
 8003168:	f04f 0200 	mov.w	r2, #0
 800316c:	f04f 0300 	mov.w	r3, #0
 8003170:	0133      	lsls	r3, r6, #4
 8003172:	ea43 7315 	orr.w	r3, r3, r5, lsr #28
 8003176:	012a      	lsls	r2, r5, #4
 8003178:	460a      	mov	r2, r1
 800317a:	2300      	movs	r3, #0
 800317c:	4692      	mov	sl, r2
 800317e:	469b      	mov	fp, r3
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f04f 0300 	mov.w	r3, #0
 8003188:	ea4f 130b 	mov.w	r3, fp, lsl #4
 800318c:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8003190:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8003194:	460b      	mov	r3, r1
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	3307      	adds	r3, #7
 800319a:	08db      	lsrs	r3, r3, #3
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	ebad 0d03 	sub.w	sp, sp, r3
 80031a2:	ab0a      	add	r3, sp, #40	@ 0x28
 80031a4:	3301      	adds	r3, #1
 80031a6:	085b      	lsrs	r3, r3, #1
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80031ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031ae:	3901      	subs	r1, #1
 80031b0:	2200      	movs	r2, #0
 80031b2:	801a      	strh	r2, [r3, #0]
 80031b4:	1c9a      	adds	r2, r3, #2
 80031b6:	1e4b      	subs	r3, r1, #1
 80031b8:	e003      	b.n	80031c2 <main+0x3e2>
 80031ba:	2100      	movs	r1, #0
 80031bc:	8011      	strh	r1, [r2, #0]
 80031be:	3b01      	subs	r3, #1
 80031c0:	3202      	adds	r2, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	daf9      	bge.n	80031ba <main+0x3da>

  // Loop to calculate periods based on frequencies
  for (int index = 0; index < number_of_states; index++) {
 80031c6:	2300      	movs	r3, #0
 80031c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031ca:	e01c      	b.n	8003206 <main+0x426>
      if (task_frequencies[index] != 0) {
 80031cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031ce:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80031d0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00e      	beq.n	80031f6 <main+0x416>
          task_periods[index] = 1000 / task_frequencies[index];
 80031d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031da:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80031dc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80031e0:	461a      	mov	r2, r3
 80031e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80031ea:	b299      	uxth	r1, r3
 80031ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031ee:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80031f0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80031f4:	e004      	b.n	8003200 <main+0x420>
      }
      else
      {
          task_periods[index] = 0; // Avoid division by zero
 80031f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031f8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80031fa:	2100      	movs	r1, #0
 80031fc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (int index = 0; index < number_of_states; index++) {
 8003200:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003202:	3301      	adds	r3, #1
 8003204:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003206:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8003208:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800320a:	429a      	cmp	r2, r3
 800320c:	dbde      	blt.n	80031cc <main+0x3ec>
      }
  }

  uint16_t range_reading = -1;
 800320e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003212:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  uint16_t block_range_mm = 50; //Threshold
 8003216:	2332      	movs	r3, #50	@ 0x32
 8003218:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
  float distance_from_ToF_to_color_sensor = 42.0f;
 800321c:	4b86      	ldr	r3, [pc, #536]	@ (8003438 <main+0x658>)
 800321e:	64bb      	str	r3, [r7, #72]	@ 0x48
  bool ready_for_new_block = true;
 8003220:	2301      	movs	r3, #1
 8003222:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  float first_position;
  float second_position;
  int8_t conveyor_speed = -15;
 8003226:	23f1      	movs	r3, #241	@ 0xf1
 8003228:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint32_t current_tick = HAL_GetTick();
 800322c:	f001 f9e0 	bl	80045f0 <HAL_GetTick>
 8003230:	6438      	str	r0, [r7, #64]	@ 0x40

	  switch(task)
 8003232:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8003236:	2b05      	cmp	r3, #5
 8003238:	f200 822a 	bhi.w	8003690 <main+0x8b0>
 800323c:	a201      	add	r2, pc, #4	@ (adr r2, 8003244 <main+0x464>)
 800323e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003242:	bf00      	nop
 8003244:	0800325d 	.word	0x0800325d
 8003248:	080032a1 	.word	0x080032a1
 800324c:	08003351 	.word	0x08003351
 8003250:	08003387 	.word	0x08003387
 8003254:	08003479 	.word	0x08003479
 8003258:	08003651 	.word	0x08003651
	  {
	  	  case 0:
	  		  // Init
	  		  My_Servo->set_position(0);
 800325c:	4b77      	ldr	r3, [pc, #476]	@ (800343c <main+0x65c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2100      	movs	r1, #0
 8003262:	4618      	mov	r0, r3
 8003264:	f7fe fa32 	bl	80016cc <_ZN11PololuServo12set_positionEs>
	  		  HAL_Delay(300);
 8003268:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800326c:	f001 f9cc 	bl	8004608 <HAL_Delay>
	  		  My_Controller->run(0);
 8003270:	4b73      	ldr	r3, [pc, #460]	@ (8003440 <main+0x660>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	ed9f 0a73 	vldr	s0, [pc, #460]	@ 8003444 <main+0x664>
 8003278:	4618      	mov	r0, r3
 800327a:	f7fd ffb9 	bl	80011f0 <_ZN12MotorControl3runEf>
	  		  My_Servo->set_position(0);
 800327e:	4b6f      	ldr	r3, [pc, #444]	@ (800343c <main+0x65c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2100      	movs	r1, #0
 8003284:	4618      	mov	r0, r3
 8003286:	f7fe fa21 	bl	80016cc <_ZN11PololuServo12set_positionEs>
	  		  HAL_Delay(500);
 800328a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800328e:	f001 f9bb 	bl	8004608 <HAL_Delay>
	  		  initialized = true;
 8003292:	4b6d      	ldr	r3, [pc, #436]	@ (8003448 <main+0x668>)
 8003294:	2201      	movs	r2, #1
 8003296:	701a      	strb	r2, [r3, #0]

	  		  // State change
	  		  task = 1;
 8003298:	2301      	movs	r3, #1
 800329a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	  		  break;
 800329e:	e1fb      	b.n	8003698 <main+0x8b8>
	  	  case 1: // RC
	  		  int next_task;

	  		  if (current_tick - last_tick_state[1] >= task_periods[1])
 80032a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80032aa:	8852      	ldrh	r2, [r2, #2]
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d34b      	bcc.n	8003348 <main+0x568>
	  		  {
	  			  last_tick_state[1] = current_tick;
 80032b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80032b4:	605a      	str	r2, [r3, #4]

	  			  int string_length = sprintf(my_message, "Channel value: %i/%i.\r\n",ThrottleChannel->value,ThrottleChannel->rescale_forward_magnitude);
 80032b6:	4b65      	ldr	r3, [pc, #404]	@ (800344c <main+0x66c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	695a      	ldr	r2, [r3, #20]
 80032bc:	4b63      	ldr	r3, [pc, #396]	@ (800344c <main+0x66c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c2:	4963      	ldr	r1, [pc, #396]	@ (8003450 <main+0x670>)
 80032c4:	4863      	ldr	r0, [pc, #396]	@ (8003454 <main+0x674>)
 80032c6:	f00b fd15 	bl	800ecf4 <siprintf>
 80032ca:	6278      	str	r0, [r7, #36]	@ 0x24
	  			  HAL_UART_Transmit(&huart2, (uint8_t *)my_message, string_length, HAL_MAX_DELAY);
 80032cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	f04f 33ff 	mov.w	r3, #4294967295
 80032d4:	495f      	ldr	r1, [pc, #380]	@ (8003454 <main+0x674>)
 80032d6:	4860      	ldr	r0, [pc, #384]	@ (8003458 <main+0x678>)
 80032d8:	f005 fb6c 	bl	80089b4 <HAL_UART_Transmit>

	  			  if (-ThrottleChannel->value >= 0.6*ThrottleChannel->rescale_forward_magnitude)
 80032dc:	4b5b      	ldr	r3, [pc, #364]	@ (800344c <main+0x66c>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	425b      	negs	r3, r3
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fd f925 	bl	8000534 <__aeabi_i2d>
 80032ea:	4604      	mov	r4, r0
 80032ec:	460d      	mov	r5, r1
 80032ee:	4b57      	ldr	r3, [pc, #348]	@ (800344c <main+0x66c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fd f91d 	bl	8000534 <__aeabi_i2d>
 80032fa:	a34d      	add	r3, pc, #308	@ (adr r3, 8003430 <main+0x650>)
 80032fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003300:	f7fd f982 	bl	8000608 <__aeabi_dmul>
 8003304:	4602      	mov	r2, r0
 8003306:	460b      	mov	r3, r1
 8003308:	4620      	mov	r0, r4
 800330a:	4629      	mov	r1, r5
 800330c:	f7fd fc02 	bl	8000b14 <__aeabi_dcmpge>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00f      	beq.n	8003336 <main+0x556>
				  {
					 My_Controller->run(conveyor_speed);
 8003316:	4b4a      	ldr	r3, [pc, #296]	@ (8003440 <main+0x660>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f997 2047 	ldrsb.w	r2, [r7, #71]	@ 0x47
 800331e:	ee07 2a90 	vmov	s15, r2
 8003322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003326:	eeb0 0a67 	vmov.f32	s0, s15
 800332a:	4618      	mov	r0, r3
 800332c:	f7fd ff60 	bl	80011f0 <_ZN12MotorControl3runEf>
					 next_task = 3;
 8003330:	2303      	movs	r3, #3
 8003332:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003334:	e008      	b.n	8003348 <main+0x568>
				  }
	  			  else
	  			  {
					My_Controller->run(0);
 8003336:	4b42      	ldr	r3, [pc, #264]	@ (8003440 <main+0x660>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	ed9f 0a42 	vldr	s0, [pc, #264]	@ 8003444 <main+0x664>
 800333e:	4618      	mov	r0, r3
 8003340:	f7fd ff56 	bl	80011f0 <_ZN12MotorControl3runEf>
					next_task = 1;
 8003344:	2301      	movs	r3, #1
 8003346:	66fb      	str	r3, [r7, #108]	@ 0x6c
	  			  }
	  		  }

	  		  // State change
	  		  task = next_task;
 8003348:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800334a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	  		  break;
 800334e:	e1a3      	b.n	8003698 <main+0x8b8>

	  	  case 2: // Motor Controller
	  		  if (current_tick - last_tick_state[2] >= task_periods[2])
 8003350:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800335a:	8892      	ldrh	r2, [r2, #4]
 800335c:	4293      	cmp	r3, r2
 800335e:	d30e      	bcc.n	800337e <main+0x59e>
	  		  {
	  			  last_tick_state[2] = current_tick;
 8003360:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003362:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003364:	609a      	str	r2, [r3, #8]
	  			  Throttle->update_motor();
 8003366:	4b3d      	ldr	r3, [pc, #244]	@ (800345c <main+0x67c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f7fe fbd0 	bl	8001b10 <_ZN20RemoteControlControl12update_motorEv>

		  		  // Set speed
		  		  My_Controller->run(-15); // RPM
 8003370:	4b33      	ldr	r3, [pc, #204]	@ (8003440 <main+0x660>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	eeba 0a0e 	vmov.f32	s0, #174	@ 0xc1700000 -15.0
 8003378:	4618      	mov	r0, r3
 800337a:	f7fd ff39 	bl	80011f0 <_ZN12MotorControl3runEf>
	  		  }

	  		  // State change
	  		  task = 3;
 800337e:	2303      	movs	r3, #3
 8003380:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	  		  break;
 8003384:	e188      	b.n	8003698 <main+0x8b8>

	  	  case 3: // ToF Sensor
			  if (current_tick - last_tick_state[3] >= task_periods[3])
 8003386:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003390:	88d2      	ldrh	r2, [r2, #6]
 8003392:	4293      	cmp	r3, r2
 8003394:	d348      	bcc.n	8003428 <main+0x648>
			  {
				  last_tick_state[3] = current_tick;
 8003396:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003398:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800339a:	60da      	str	r2, [r3, #12]
				  //range_reading = My_ToF_Sensor->read(&huart2, true);

				  VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 800339c:	4b30      	ldr	r3, [pc, #192]	@ (8003460 <main+0x680>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4930      	ldr	r1, [pc, #192]	@ (8003464 <main+0x684>)
 80033a2:	4618      	mov	r0, r3
 80033a4:	f007 f972 	bl	800a68c <VL53L0X_PerformSingleRangingMeasurement>
//					} else {
//						int string_length = sprintf(my_message, "Error\r\n");
//						HAL_UART_Transmit(&huart2, (uint8_t*)my_message, string_length, HAL_MAX_DELAY);
//					}

					if(ready_for_new_block)
 80033a8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d03b      	beq.n	8003428 <main+0x648>
					{

						if(RangingData.RangeMilliMeter <= block_range_mm)
 80033b0:	4b2c      	ldr	r3, [pc, #176]	@ (8003464 <main+0x684>)
 80033b2:	891b      	ldrh	r3, [r3, #8]
 80033b4:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d335      	bcc.n	8003428 <main+0x648>
						{
							// Debug message
							int string_length = sprintf(my_message, "A block was found\r\n");
 80033bc:	492a      	ldr	r1, [pc, #168]	@ (8003468 <main+0x688>)
 80033be:	4825      	ldr	r0, [pc, #148]	@ (8003454 <main+0x674>)
 80033c0:	f00b fc98 	bl	800ecf4 <siprintf>
 80033c4:	62b8      	str	r0, [r7, #40]	@ 0x28
							HAL_UART_Transmit(&huart2, (uint8_t *)my_message, string_length, HAL_MAX_DELAY);
 80033c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	f04f 33ff 	mov.w	r3, #4294967295
 80033ce:	4921      	ldr	r1, [pc, #132]	@ (8003454 <main+0x674>)
 80033d0:	4821      	ldr	r0, [pc, #132]	@ (8003458 <main+0x678>)
 80033d2:	f005 faef 	bl	80089b4 <HAL_UART_Transmit>

							// Store the current encoder posiiton for later.
							first_position = My_Conveyor->get_position();
 80033d6:	4b25      	ldr	r3, [pc, #148]	@ (800346c <main+0x68c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fd fe28 	bl	8001030 <_ZN12ConveyorBelt12get_positionEv>
 80033e0:	ed87 0a1c 	vstr	s0, [r7, #112]	@ 0x70
							string_length = sprintf(my_message, "Block position: %.3f mm.\r\n", first_position);
 80033e4:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80033e6:	f7fd f8b7 	bl	8000558 <__aeabi_f2d>
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	4920      	ldr	r1, [pc, #128]	@ (8003470 <main+0x690>)
 80033f0:	4818      	ldr	r0, [pc, #96]	@ (8003454 <main+0x674>)
 80033f2:	f00b fc7f 	bl	800ecf4 <siprintf>
 80033f6:	62b8      	str	r0, [r7, #40]	@ 0x28
							HAL_UART_Transmit(&huart2, (uint8_t *)my_message, string_length, HAL_MAX_DELAY);
 80033f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003400:	4914      	ldr	r1, [pc, #80]	@ (8003454 <main+0x674>)
 8003402:	4815      	ldr	r0, [pc, #84]	@ (8003458 <main+0x678>)
 8003404:	f005 fad6 	bl	80089b4 <HAL_UART_Transmit>

							// Stop checking for blocks.
							ready_for_new_block = false;
 8003408:	2300      	movs	r3, #0
 800340a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

							// Create a new block instance
							My_Block = new ColoredBlock(My_Conveyor);
 800340e:	200c      	movs	r0, #12
 8003410:	f00a fe75 	bl	800e0fe <_Znwj>
 8003414:	4603      	mov	r3, r0
 8003416:	461c      	mov	r4, r3
 8003418:	4b14      	ldr	r3, [pc, #80]	@ (800346c <main+0x68c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4619      	mov	r1, r3
 800341e:	4620      	mov	r0, r4
 8003420:	f7fd fd92 	bl	8000f48 <_ZN12ColoredBlockC1EP12ConveyorBelt>
 8003424:	4b13      	ldr	r3, [pc, #76]	@ (8003474 <main+0x694>)
 8003426:	601c      	str	r4, [r3, #0]
						}
					}
			  }

			  // State Changes
			  task = 4;
 8003428:	2304      	movs	r3, #4
 800342a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			  break;
 800342e:	e133      	b.n	8003698 <main+0x8b8>
 8003430:	33333333 	.word	0x33333333
 8003434:	3fe33333 	.word	0x3fe33333
 8003438:	42280000 	.word	0x42280000
 800343c:	200006ec 	.word	0x200006ec
 8003440:	200006e8 	.word	0x200006e8
 8003444:	00000000 	.word	0x00000000
 8003448:	200006d0 	.word	0x200006d0
 800344c:	200006d8 	.word	0x200006d8
 8003450:	08010e00 	.word	0x08010e00
 8003454:	2000066c 	.word	0x2000066c
 8003458:	20000624 	.word	0x20000624
 800345c:	200006e0 	.word	0x200006e0
 8003460:	20000000 	.word	0x20000000
 8003464:	200006f0 	.word	0x200006f0
 8003468:	08010e18 	.word	0x08010e18
 800346c:	2000089c 	.word	0x2000089c
 8003470:	08010e2c 	.word	0x08010e2c
 8003474:	200008a4 	.word	0x200008a4

	  	  case 4: // Color Sensor
			  if (current_tick - last_tick_state[4] >= task_periods[4])
 8003478:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003482:	8912      	ldrh	r2, [r2, #8]
 8003484:	4293      	cmp	r3, r2
 8003486:	f0c0 80df 	bcc.w	8003648 <main+0x868>
			  {
				  last_tick_state[4] = current_tick;
 800348a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800348c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800348e:	611a      	str	r2, [r3, #16]

				  if (not ready_for_new_block)
 8003490:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8003494:	f083 0301 	eor.w	r3, r3, #1
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 80d4 	beq.w	8003648 <main+0x868>
				  {
					  // Debug message
					  second_position = My_Conveyor->get_position();
 80034a0:	4b7e      	ldr	r3, [pc, #504]	@ (800369c <main+0x8bc>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7fd fdc3 	bl	8001030 <_ZN12ConveyorBelt12get_positionEv>
 80034aa:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
					  int string_length = sprintf(my_message, "Block position: %.2f mm.\r\n", fabs(second_position-first_position));
 80034ae:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80034b2:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80034b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034ba:	eef0 7ae7 	vabs.f32	s15, s15
 80034be:	ee17 0a90 	vmov	r0, s15
 80034c2:	f7fd f849 	bl	8000558 <__aeabi_f2d>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4975      	ldr	r1, [pc, #468]	@ (80036a0 <main+0x8c0>)
 80034cc:	4875      	ldr	r0, [pc, #468]	@ (80036a4 <main+0x8c4>)
 80034ce:	f00b fc11 	bl	800ecf4 <siprintf>
 80034d2:	63b8      	str	r0, [r7, #56]	@ 0x38
					  HAL_UART_Transmit(&huart2, (uint8_t *)my_message, string_length, HAL_MAX_DELAY);
 80034d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	f04f 33ff 	mov.w	r3, #4294967295
 80034dc:	4971      	ldr	r1, [pc, #452]	@ (80036a4 <main+0x8c4>)
 80034de:	4872      	ldr	r0, [pc, #456]	@ (80036a8 <main+0x8c8>)
 80034e0:	f005 fa68 	bl	80089b4 <HAL_UART_Transmit>

					  if (fabs(second_position-first_position) >= distance_from_ToF_to_color_sensor)
 80034e4:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80034e8:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80034ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034f0:	eef0 7ae7 	vabs.f32	s15, s15
 80034f4:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80034f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003500:	f200 80a2 	bhi.w	8003648 <main+0x868>
					  {
						   // Debug message
							string_length = sprintf(my_message, "Block has reached color sensor \r\n");
 8003504:	4969      	ldr	r1, [pc, #420]	@ (80036ac <main+0x8cc>)
 8003506:	4867      	ldr	r0, [pc, #412]	@ (80036a4 <main+0x8c4>)
 8003508:	f00b fbf4 	bl	800ecf4 <siprintf>
 800350c:	63b8      	str	r0, [r7, #56]	@ 0x38
							HAL_UART_Transmit(&huart2, (uint8_t *)my_message, string_length, HAL_MAX_DELAY);
 800350e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003510:	b29a      	uxth	r2, r3
 8003512:	f04f 33ff 	mov.w	r3, #4294967295
 8003516:	4963      	ldr	r1, [pc, #396]	@ (80036a4 <main+0x8c4>)
 8003518:	4863      	ldr	r0, [pc, #396]	@ (80036a8 <main+0x8c8>)
 800351a:	f005 fa4b 	bl	80089b4 <HAL_UART_Transmit>

						  // Update position of block
						  My_Block->update_position(My_Conveyor->get_position()-first_position);
 800351e:	4b64      	ldr	r3, [pc, #400]	@ (80036b0 <main+0x8d0>)
 8003520:	681c      	ldr	r4, [r3, #0]
 8003522:	4b5e      	ldr	r3, [pc, #376]	@ (800369c <main+0x8bc>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f7fd fd82 	bl	8001030 <_ZN12ConveyorBelt12get_positionEv>
 800352c:	eeb0 7a40 	vmov.f32	s14, s0
 8003530:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8003534:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003538:	eeb0 0a67 	vmov.f32	s0, s15
 800353c:	4620      	mov	r0, r4
 800353e:	f7fd fd19 	bl	8000f74 <_ZN12ColoredBlock15update_positionEf>
//						   My_Color_Sensor->readAmbientLight(ambient_light);
//						   My_Color_Sensor->readRedLight(red_light);
//						   My_Color_Sensor->readGreenLight(green_light);
//						   My_Color_Sensor->readBlueLight(blue_light);

							bool success = My_Color_Sensor->readAmbientLight(ambient_light) &&
 8003542:	4b5c      	ldr	r3, [pc, #368]	@ (80036b4 <main+0x8d4>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 800354a:	4611      	mov	r1, r2
 800354c:	4618      	mov	r0, r3
 800354e:	f7fe fe50 	bl	80021f2 <_ZN17SparkFun_APDS996016readAmbientLightERt>
 8003552:	4603      	mov	r3, r0
										   My_Color_Sensor->readRedLight(red_light) &&
										   My_Color_Sensor->readGreenLight(green_light) &&
 8003554:	2b00      	cmp	r3, #0
 8003556:	d022      	beq.n	800359e <main+0x7be>
										   My_Color_Sensor->readRedLight(red_light) &&
 8003558:	4b56      	ldr	r3, [pc, #344]	@ (80036b4 <main+0x8d4>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f107 0220 	add.w	r2, r7, #32
 8003560:	4611      	mov	r1, r2
 8003562:	4618      	mov	r0, r3
 8003564:	f7fe fe7d 	bl	8002262 <_ZN17SparkFun_APDS996012readRedLightERt>
 8003568:	4603      	mov	r3, r0
							bool success = My_Color_Sensor->readAmbientLight(ambient_light) &&
 800356a:	2b00      	cmp	r3, #0
 800356c:	d017      	beq.n	800359e <main+0x7be>
										   My_Color_Sensor->readGreenLight(green_light) &&
 800356e:	4b51      	ldr	r3, [pc, #324]	@ (80036b4 <main+0x8d4>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f107 021e 	add.w	r2, r7, #30
 8003576:	4611      	mov	r1, r2
 8003578:	4618      	mov	r0, r3
 800357a:	f7fe feaa 	bl	80022d2 <_ZN17SparkFun_APDS996014readGreenLightERt>
 800357e:	4603      	mov	r3, r0
										   My_Color_Sensor->readRedLight(red_light) &&
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00c      	beq.n	800359e <main+0x7be>
										   My_Color_Sensor->readBlueLight(blue_light);
 8003584:	4b4b      	ldr	r3, [pc, #300]	@ (80036b4 <main+0x8d4>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f107 021c 	add.w	r2, r7, #28
 800358c:	4611      	mov	r1, r2
 800358e:	4618      	mov	r0, r3
 8003590:	f7fe fed7 	bl	8002342 <_ZN17SparkFun_APDS996013readBlueLightERt>
 8003594:	4603      	mov	r3, r0
										   My_Color_Sensor->readGreenLight(green_light) &&
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <main+0x7be>
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <main+0x7c0>
 800359e:	2300      	movs	r3, #0
										   My_Color_Sensor->readBlueLight(blue_light);
 80035a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37


							if (success) {
 80035a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d017      	beq.n	80035dc <main+0x7fc>
								int string_length = sprintf(my_message, "Ambient: %u, Red: %u, Green: %u, Blue: %u\r\n", ambient_light, red_light, green_light, blue_light);
 80035ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80035ae:	4619      	mov	r1, r3
 80035b0:	8c3b      	ldrh	r3, [r7, #32]
 80035b2:	4618      	mov	r0, r3
 80035b4:	8bfb      	ldrh	r3, [r7, #30]
 80035b6:	8bba      	ldrh	r2, [r7, #28]
 80035b8:	9201      	str	r2, [sp, #4]
 80035ba:	9300      	str	r3, [sp, #0]
 80035bc:	4603      	mov	r3, r0
 80035be:	460a      	mov	r2, r1
 80035c0:	493d      	ldr	r1, [pc, #244]	@ (80036b8 <main+0x8d8>)
 80035c2:	4838      	ldr	r0, [pc, #224]	@ (80036a4 <main+0x8c4>)
 80035c4:	f00b fb96 	bl	800ecf4 <siprintf>
 80035c8:	62f8      	str	r0, [r7, #44]	@ 0x2c
								HAL_UART_Transmit(&huart2, (uint8_t *)my_message, string_length, HAL_MAX_DELAY);
 80035ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	f04f 33ff 	mov.w	r3, #4294967295
 80035d2:	4934      	ldr	r1, [pc, #208]	@ (80036a4 <main+0x8c4>)
 80035d4:	4834      	ldr	r0, [pc, #208]	@ (80036a8 <main+0x8c8>)
 80035d6:	f005 f9ed 	bl	80089b4 <HAL_UART_Transmit>
 80035da:	e00c      	b.n	80035f6 <main+0x816>
							} else {
								int string_length = sprintf(my_message, "Error reading light values!\r\n");
 80035dc:	4937      	ldr	r1, [pc, #220]	@ (80036bc <main+0x8dc>)
 80035de:	4831      	ldr	r0, [pc, #196]	@ (80036a4 <main+0x8c4>)
 80035e0:	f00b fb88 	bl	800ecf4 <siprintf>
 80035e4:	6338      	str	r0, [r7, #48]	@ 0x30
								HAL_UART_Transmit(&huart2, (uint8_t *)my_message, string_length, HAL_MAX_DELAY);
 80035e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	f04f 33ff 	mov.w	r3, #4294967295
 80035ee:	492d      	ldr	r1, [pc, #180]	@ (80036a4 <main+0x8c4>)
 80035f0:	482d      	ldr	r0, [pc, #180]	@ (80036a8 <main+0x8c8>)
 80035f2:	f005 f9df 	bl	80089b4 <HAL_UART_Transmit>
							}

						  // Update the color of the block
						  My_Block->update_color(red_light >= 100);
 80035f6:	4b2e      	ldr	r3, [pc, #184]	@ (80036b0 <main+0x8d0>)
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	8c3b      	ldrh	r3, [r7, #32]
 80035fc:	2b63      	cmp	r3, #99	@ 0x63
 80035fe:	bf8c      	ite	hi
 8003600:	2301      	movhi	r3, #1
 8003602:	2300      	movls	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	4619      	mov	r1, r3
 8003608:	4610      	mov	r0, r2
 800360a:	f7fd fcc2 	bl	8000f92 <_ZN12ColoredBlock12update_colorEb>

						  // Read for new block
						  ready_for_new_block = true;
 800360e:	2301      	movs	r3, #1
 8003610:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

						  // Servo Position
						  if (red_light >= 100)
 8003614:	8c3b      	ldrh	r3, [r7, #32]
 8003616:	2b63      	cmp	r3, #99	@ 0x63
 8003618:	d907      	bls.n	800362a <main+0x84a>
						  {
							  My_Servo->set_position(-35);
 800361a:	4b29      	ldr	r3, [pc, #164]	@ (80036c0 <main+0x8e0>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f06f 0122 	mvn.w	r1, #34	@ 0x22
 8003622:	4618      	mov	r0, r3
 8003624:	f7fe f852 	bl	80016cc <_ZN11PololuServo12set_positionEs>
 8003628:	e005      	b.n	8003636 <main+0x856>
						  }
						  else
						  {
							  My_Servo->set_position(40);
 800362a:	4b25      	ldr	r3, [pc, #148]	@ (80036c0 <main+0x8e0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2128      	movs	r1, #40	@ 0x28
 8003630:	4618      	mov	r0, r3
 8003632:	f7fe f84b 	bl	80016cc <_ZN11PololuServo12set_positionEs>
						  }

						  // Delete object
						  delete My_Block;
 8003636:	4b1e      	ldr	r3, [pc, #120]	@ (80036b0 <main+0x8d0>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d004      	beq.n	8003648 <main+0x868>
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	3204      	adds	r2, #4
 8003642:	6812      	ldr	r2, [r2, #0]
 8003644:	4618      	mov	r0, r3
 8003646:	4790      	blx	r2
					  }
				  }
	  		  }

	  		 // State changes
	  		 task = 5;
 8003648:	2305      	movs	r3, #5
 800364a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	  		 break;
 800364e:	e023      	b.n	8003698 <main+0x8b8>

	  	  case 5: // Debug messages
	  		  if (current_tick - last_tick_state[5] >= task_periods[5])
 8003650:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800365a:	8952      	ldrh	r2, [r2, #10]
 800365c:	4293      	cmp	r3, r2
 800365e:	d313      	bcc.n	8003688 <main+0x8a8>
	  		  {
	  			  last_tick_state[5] = current_tick;
 8003660:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003662:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003664:	615a      	str	r2, [r3, #20]
//						int string_length = sprintf(my_message, "Error reading light values!\r\n");
//						HAL_UART_Transmit(&huart2, (uint8_t *)my_message, string_length, HAL_MAX_DELAY);
//					}

	  			  // Is a block within range?
				  if (range_reading < block_range_mm)
 8003666:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800366a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800366e:	429a      	cmp	r2, r3
 8003670:	d20a      	bcs.n	8003688 <main+0x8a8>
				  {
					  sprintf(my_message, "A block is within range\r\n");
 8003672:	4914      	ldr	r1, [pc, #80]	@ (80036c4 <main+0x8e4>)
 8003674:	480b      	ldr	r0, [pc, #44]	@ (80036a4 <main+0x8c4>)
 8003676:	f00b fb3d 	bl	800ecf4 <siprintf>
					  HAL_UART_Transmit(&huart2, (uint8_t*)my_message, MESSAGE_LENGTH, HAL_MAX_DELAY);
 800367a:	f04f 33ff 	mov.w	r3, #4294967295
 800367e:	2264      	movs	r2, #100	@ 0x64
 8003680:	4908      	ldr	r1, [pc, #32]	@ (80036a4 <main+0x8c4>)
 8003682:	4809      	ldr	r0, [pc, #36]	@ (80036a8 <main+0x8c8>)
 8003684:	f005 f996 	bl	80089b4 <HAL_UART_Transmit>
				  }
	  		  }

	  		  // State change
	  		  task = 1;
 8003688:	2301      	movs	r3, #1
 800368a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	  		  break;
 800368e:	e003      	b.n	8003698 <main+0x8b8>

	  	  default:
	  		  task = 0;
 8003690:	2300      	movs	r3, #0
 8003692:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	  		  break;
 8003696:	bf00      	nop
	  }
  }
 8003698:	e5c8      	b.n	800322c <main+0x44c>
 800369a:	bf00      	nop
 800369c:	2000089c 	.word	0x2000089c
 80036a0:	08010e48 	.word	0x08010e48
 80036a4:	2000066c 	.word	0x2000066c
 80036a8:	20000624 	.word	0x20000624
 80036ac:	08010e64 	.word	0x08010e64
 80036b0:	200008a4 	.word	0x200008a4
 80036b4:	200008a0 	.word	0x200008a0
 80036b8:	08010e88 	.word	0x08010e88
 80036bc:	08010eb4 	.word	0x08010eb4
 80036c0:	200006ec 	.word	0x200006ec
 80036c4:	08010ed4 	.word	0x08010ed4

080036c8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b094      	sub	sp, #80	@ 0x50
 80036cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80036ce:	f107 0320 	add.w	r3, r7, #32
 80036d2:	2230      	movs	r2, #48	@ 0x30
 80036d4:	2100      	movs	r1, #0
 80036d6:	4618      	mov	r0, r3
 80036d8:	f00b fb6f 	bl	800edba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80036dc:	f107 030c 	add.w	r3, r7, #12
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	605a      	str	r2, [r3, #4]
 80036e6:	609a      	str	r2, [r3, #8]
 80036e8:	60da      	str	r2, [r3, #12]
 80036ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80036ec:	2300      	movs	r3, #0
 80036ee:	60bb      	str	r3, [r7, #8]
 80036f0:	4b2c      	ldr	r3, [pc, #176]	@ (80037a4 <_Z18SystemClock_Configv+0xdc>)
 80036f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f4:	4a2b      	ldr	r2, [pc, #172]	@ (80037a4 <_Z18SystemClock_Configv+0xdc>)
 80036f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80036fc:	4b29      	ldr	r3, [pc, #164]	@ (80037a4 <_Z18SystemClock_Configv+0xdc>)
 80036fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003708:	2300      	movs	r3, #0
 800370a:	607b      	str	r3, [r7, #4]
 800370c:	4b26      	ldr	r3, [pc, #152]	@ (80037a8 <_Z18SystemClock_Configv+0xe0>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a25      	ldr	r2, [pc, #148]	@ (80037a8 <_Z18SystemClock_Configv+0xe0>)
 8003712:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003716:	6013      	str	r3, [r2, #0]
 8003718:	4b23      	ldr	r3, [pc, #140]	@ (80037a8 <_Z18SystemClock_Configv+0xe0>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003720:	607b      	str	r3, [r7, #4]
 8003722:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003724:	2302      	movs	r3, #2
 8003726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003728:	2301      	movs	r3, #1
 800372a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800372c:	2310      	movs	r3, #16
 800372e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003730:	2302      	movs	r3, #2
 8003732:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003734:	2300      	movs	r3, #0
 8003736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003738:	2308      	movs	r3, #8
 800373a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 800373c:	2364      	movs	r3, #100	@ 0x64
 800373e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003740:	2302      	movs	r3, #2
 8003742:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003744:	2304      	movs	r3, #4
 8003746:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003748:	f107 0320 	add.w	r3, r7, #32
 800374c:	4618      	mov	r0, r3
 800374e:	f002 fd8d 	bl	800626c <HAL_RCC_OscConfig>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	bf14      	ite	ne
 8003758:	2301      	movne	r3, #1
 800375a:	2300      	moveq	r3, #0
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8003762:	f000 fb73 	bl	8003e4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003766:	230f      	movs	r3, #15
 8003768:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800376a:	2302      	movs	r3, #2
 800376c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003772:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003776:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003778:	2300      	movs	r3, #0
 800377a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800377c:	f107 030c 	add.w	r3, r7, #12
 8003780:	2103      	movs	r1, #3
 8003782:	4618      	mov	r0, r3
 8003784:	f002 ffea 	bl	800675c <HAL_RCC_ClockConfig>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	bf14      	ite	ne
 800378e:	2301      	movne	r3, #1
 8003790:	2300      	moveq	r3, #0
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8003798:	f000 fb58 	bl	8003e4c <Error_Handler>
  }
}
 800379c:	bf00      	nop
 800379e:	3750      	adds	r7, #80	@ 0x50
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40023800 	.word	0x40023800
 80037a8:	40007000 	.word	0x40007000

080037ac <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80037b0:	4b15      	ldr	r3, [pc, #84]	@ (8003808 <_ZL12MX_I2C1_Initv+0x5c>)
 80037b2:	4a16      	ldr	r2, [pc, #88]	@ (800380c <_ZL12MX_I2C1_Initv+0x60>)
 80037b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80037b6:	4b14      	ldr	r3, [pc, #80]	@ (8003808 <_ZL12MX_I2C1_Initv+0x5c>)
 80037b8:	4a15      	ldr	r2, [pc, #84]	@ (8003810 <_ZL12MX_I2C1_Initv+0x64>)
 80037ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80037bc:	4b12      	ldr	r3, [pc, #72]	@ (8003808 <_ZL12MX_I2C1_Initv+0x5c>)
 80037be:	2200      	movs	r2, #0
 80037c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80037c2:	4b11      	ldr	r3, [pc, #68]	@ (8003808 <_ZL12MX_I2C1_Initv+0x5c>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80037c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003808 <_ZL12MX_I2C1_Initv+0x5c>)
 80037ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80037ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80037d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003808 <_ZL12MX_I2C1_Initv+0x5c>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80037d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003808 <_ZL12MX_I2C1_Initv+0x5c>)
 80037d8:	2200      	movs	r2, #0
 80037da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80037dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003808 <_ZL12MX_I2C1_Initv+0x5c>)
 80037de:	2200      	movs	r2, #0
 80037e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80037e2:	4b09      	ldr	r3, [pc, #36]	@ (8003808 <_ZL12MX_I2C1_Initv+0x5c>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80037e8:	4807      	ldr	r0, [pc, #28]	@ (8003808 <_ZL12MX_I2C1_Initv+0x5c>)
 80037ea:	f001 fa2b 	bl	8004c44 <HAL_I2C_Init>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	bf14      	ite	ne
 80037f4:	2301      	movne	r3, #1
 80037f6:	2300      	moveq	r3, #0
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80037fe:	f000 fb25 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003802:	bf00      	nop
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	200004b0 	.word	0x200004b0
 800380c:	40005400 	.word	0x40005400
 8003810:	000186a0 	.word	0x000186a0

08003814 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b08a      	sub	sp, #40	@ 0x28
 8003818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800381a:	f107 0318 	add.w	r3, r7, #24
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	605a      	str	r2, [r3, #4]
 8003824:	609a      	str	r2, [r3, #8]
 8003826:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003828:	f107 0310 	add.w	r3, r7, #16
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003832:	463b      	mov	r3, r7
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	605a      	str	r2, [r3, #4]
 800383a:	609a      	str	r2, [r3, #8]
 800383c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800383e:	4b41      	ldr	r3, [pc, #260]	@ (8003944 <_ZL12MX_TIM1_Initv+0x130>)
 8003840:	4a41      	ldr	r2, [pc, #260]	@ (8003948 <_ZL12MX_TIM1_Initv+0x134>)
 8003842:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8003844:	4b3f      	ldr	r3, [pc, #252]	@ (8003944 <_ZL12MX_TIM1_Initv+0x130>)
 8003846:	2263      	movs	r2, #99	@ 0x63
 8003848:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800384a:	4b3e      	ldr	r3, [pc, #248]	@ (8003944 <_ZL12MX_TIM1_Initv+0x130>)
 800384c:	2200      	movs	r2, #0
 800384e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003850:	4b3c      	ldr	r3, [pc, #240]	@ (8003944 <_ZL12MX_TIM1_Initv+0x130>)
 8003852:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003856:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003858:	4b3a      	ldr	r3, [pc, #232]	@ (8003944 <_ZL12MX_TIM1_Initv+0x130>)
 800385a:	2200      	movs	r2, #0
 800385c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800385e:	4b39      	ldr	r3, [pc, #228]	@ (8003944 <_ZL12MX_TIM1_Initv+0x130>)
 8003860:	2200      	movs	r2, #0
 8003862:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003864:	4b37      	ldr	r3, [pc, #220]	@ (8003944 <_ZL12MX_TIM1_Initv+0x130>)
 8003866:	2200      	movs	r2, #0
 8003868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800386a:	4836      	ldr	r0, [pc, #216]	@ (8003944 <_ZL12MX_TIM1_Initv+0x130>)
 800386c:	f003 f956 	bl	8006b1c <HAL_TIM_Base_Init>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	bf14      	ite	ne
 8003876:	2301      	movne	r3, #1
 8003878:	2300      	moveq	r3, #0
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <_ZL12MX_TIM1_Initv+0x70>
  {
    Error_Handler();
 8003880:	f000 fae4 	bl	8003e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003884:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003888:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800388a:	f107 0318 	add.w	r3, r7, #24
 800388e:	4619      	mov	r1, r3
 8003890:	482c      	ldr	r0, [pc, #176]	@ (8003944 <_ZL12MX_TIM1_Initv+0x130>)
 8003892:	f004 fa9d 	bl	8007dd0 <HAL_TIM_ConfigClockSource>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	bf14      	ite	ne
 800389c:	2301      	movne	r3, #1
 800389e:	2300      	moveq	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <_ZL12MX_TIM1_Initv+0x96>
  {
    Error_Handler();
 80038a6:	f000 fad1 	bl	8003e4c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80038aa:	4826      	ldr	r0, [pc, #152]	@ (8003944 <_ZL12MX_TIM1_Initv+0x130>)
 80038ac:	f003 faf2 	bl	8006e94 <HAL_TIM_IC_Init>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	bf14      	ite	ne
 80038b6:	2301      	movne	r3, #1
 80038b8:	2300      	moveq	r3, #0
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <_ZL12MX_TIM1_Initv+0xb0>
  {
    Error_Handler();
 80038c0:	f000 fac4 	bl	8003e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038c4:	2300      	movs	r3, #0
 80038c6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80038cc:	f107 0310 	add.w	r3, r7, #16
 80038d0:	4619      	mov	r1, r3
 80038d2:	481c      	ldr	r0, [pc, #112]	@ (8003944 <_ZL12MX_TIM1_Initv+0x130>)
 80038d4:	f004 ff9c 	bl	8008810 <HAL_TIMEx_MasterConfigSynchronization>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	bf14      	ite	ne
 80038de:	2301      	movne	r3, #1
 80038e0:	2300      	moveq	r3, #0
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <_ZL12MX_TIM1_Initv+0xd8>
  {
    Error_Handler();
 80038e8:	f000 fab0 	bl	8003e4c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80038ec:	230a      	movs	r3, #10
 80038ee:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80038f0:	2301      	movs	r3, #1
 80038f2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80038f4:	2300      	movs	r3, #0
 80038f6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80038f8:	2300      	movs	r3, #0
 80038fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80038fc:	463b      	mov	r3, r7
 80038fe:	2200      	movs	r2, #0
 8003900:	4619      	mov	r1, r3
 8003902:	4810      	ldr	r0, [pc, #64]	@ (8003944 <_ZL12MX_TIM1_Initv+0x130>)
 8003904:	f004 f906 	bl	8007b14 <HAL_TIM_IC_ConfigChannel>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	bf14      	ite	ne
 800390e:	2301      	movne	r3, #1
 8003910:	2300      	moveq	r3, #0
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <_ZL12MX_TIM1_Initv+0x108>
  {
    Error_Handler();
 8003918:	f000 fa98 	bl	8003e4c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800391c:	463b      	mov	r3, r7
 800391e:	2204      	movs	r2, #4
 8003920:	4619      	mov	r1, r3
 8003922:	4808      	ldr	r0, [pc, #32]	@ (8003944 <_ZL12MX_TIM1_Initv+0x130>)
 8003924:	f004 f8f6 	bl	8007b14 <HAL_TIM_IC_ConfigChannel>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	bf14      	ite	ne
 800392e:	2301      	movne	r3, #1
 8003930:	2300      	moveq	r3, #0
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <_ZL12MX_TIM1_Initv+0x128>
  {
    Error_Handler();
 8003938:	f000 fa88 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800393c:	bf00      	nop
 800393e:	3728      	adds	r7, #40	@ 0x28
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	20000504 	.word	0x20000504
 8003948:	40010000 	.word	0x40010000

0800394c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08e      	sub	sp, #56	@ 0x38
 8003950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003952:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	605a      	str	r2, [r3, #4]
 800395c:	609a      	str	r2, [r3, #8]
 800395e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003960:	f107 0320 	add.w	r3, r7, #32
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800396a:	1d3b      	adds	r3, r7, #4
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	605a      	str	r2, [r3, #4]
 8003972:	609a      	str	r2, [r3, #8]
 8003974:	60da      	str	r2, [r3, #12]
 8003976:	611a      	str	r2, [r3, #16]
 8003978:	615a      	str	r2, [r3, #20]
 800397a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800397c:	4b39      	ldr	r3, [pc, #228]	@ (8003a64 <_ZL12MX_TIM2_Initv+0x118>)
 800397e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003982:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003984:	4b37      	ldr	r3, [pc, #220]	@ (8003a64 <_ZL12MX_TIM2_Initv+0x118>)
 8003986:	2200      	movs	r2, #0
 8003988:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800398a:	4b36      	ldr	r3, [pc, #216]	@ (8003a64 <_ZL12MX_TIM2_Initv+0x118>)
 800398c:	2200      	movs	r2, #0
 800398e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 8003990:	4b34      	ldr	r3, [pc, #208]	@ (8003a64 <_ZL12MX_TIM2_Initv+0x118>)
 8003992:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003996:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003998:	4b32      	ldr	r3, [pc, #200]	@ (8003a64 <_ZL12MX_TIM2_Initv+0x118>)
 800399a:	2200      	movs	r2, #0
 800399c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800399e:	4b31      	ldr	r3, [pc, #196]	@ (8003a64 <_ZL12MX_TIM2_Initv+0x118>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80039a4:	482f      	ldr	r0, [pc, #188]	@ (8003a64 <_ZL12MX_TIM2_Initv+0x118>)
 80039a6:	f003 f8b9 	bl	8006b1c <HAL_TIM_Base_Init>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	bf14      	ite	ne
 80039b0:	2301      	movne	r3, #1
 80039b2:	2300      	moveq	r3, #0
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 80039ba:	f000 fa47 	bl	8003e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80039c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80039c8:	4619      	mov	r1, r3
 80039ca:	4826      	ldr	r0, [pc, #152]	@ (8003a64 <_ZL12MX_TIM2_Initv+0x118>)
 80039cc:	f004 fa00 	bl	8007dd0 <HAL_TIM_ConfigClockSource>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	bf14      	ite	ne
 80039d6:	2301      	movne	r3, #1
 80039d8:	2300      	moveq	r3, #0
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 80039e0:	f000 fa34 	bl	8003e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80039e4:	481f      	ldr	r0, [pc, #124]	@ (8003a64 <_ZL12MX_TIM2_Initv+0x118>)
 80039e6:	f003 f8e8 	bl	8006bba <HAL_TIM_PWM_Init>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	bf14      	ite	ne
 80039f0:	2301      	movne	r3, #1
 80039f2:	2300      	moveq	r3, #0
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 80039fa:	f000 fa27 	bl	8003e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039fe:	2300      	movs	r3, #0
 8003a00:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a02:	2300      	movs	r3, #0
 8003a04:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a06:	f107 0320 	add.w	r3, r7, #32
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	4815      	ldr	r0, [pc, #84]	@ (8003a64 <_ZL12MX_TIM2_Initv+0x118>)
 8003a0e:	f004 feff 	bl	8008810 <HAL_TIMEx_MasterConfigSynchronization>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	bf14      	ite	ne
 8003a18:	2301      	movne	r3, #1
 8003a1a:	2300      	moveq	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8003a22:	f000 fa13 	bl	8003e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a26:	2360      	movs	r3, #96	@ 0x60
 8003a28:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a32:	2300      	movs	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a36:	1d3b      	adds	r3, r7, #4
 8003a38:	2200      	movs	r2, #0
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4809      	ldr	r0, [pc, #36]	@ (8003a64 <_ZL12MX_TIM2_Initv+0x118>)
 8003a3e:	f004 f905 	bl	8007c4c <HAL_TIM_PWM_ConfigChannel>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	bf14      	ite	ne
 8003a48:	2301      	movne	r3, #1
 8003a4a:	2300      	moveq	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 8003a52:	f000 f9fb 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003a56:	4803      	ldr	r0, [pc, #12]	@ (8003a64 <_ZL12MX_TIM2_Initv+0x118>)
 8003a58:	f000 fb50 	bl	80040fc <HAL_TIM_MspPostInit>

}
 8003a5c:	bf00      	nop
 8003a5e:	3738      	adds	r7, #56	@ 0x38
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	2000054c 	.word	0x2000054c

08003a68 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08e      	sub	sp, #56	@ 0x38
 8003a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003a72:	2200      	movs	r2, #0
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	605a      	str	r2, [r3, #4]
 8003a78:	609a      	str	r2, [r3, #8]
 8003a7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a7c:	f107 0320 	add.w	r3, r7, #32
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a86:	1d3b      	adds	r3, r7, #4
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	609a      	str	r2, [r3, #8]
 8003a90:	60da      	str	r2, [r3, #12]
 8003a92:	611a      	str	r2, [r3, #16]
 8003a94:	615a      	str	r2, [r3, #20]
 8003a96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a98:	4b41      	ldr	r3, [pc, #260]	@ (8003ba0 <_ZL12MX_TIM3_Initv+0x138>)
 8003a9a:	4a42      	ldr	r2, [pc, #264]	@ (8003ba4 <_ZL12MX_TIM3_Initv+0x13c>)
 8003a9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003a9e:	4b40      	ldr	r3, [pc, #256]	@ (8003ba0 <_ZL12MX_TIM3_Initv+0x138>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003aa4:	4b3e      	ldr	r3, [pc, #248]	@ (8003ba0 <_ZL12MX_TIM3_Initv+0x138>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 8003aaa:	4b3d      	ldr	r3, [pc, #244]	@ (8003ba0 <_ZL12MX_TIM3_Initv+0x138>)
 8003aac:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003ab0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ab2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ba0 <_ZL12MX_TIM3_Initv+0x138>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ab8:	4b39      	ldr	r3, [pc, #228]	@ (8003ba0 <_ZL12MX_TIM3_Initv+0x138>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003abe:	4838      	ldr	r0, [pc, #224]	@ (8003ba0 <_ZL12MX_TIM3_Initv+0x138>)
 8003ac0:	f003 f82c 	bl	8006b1c <HAL_TIM_Base_Init>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	bf14      	ite	ne
 8003aca:	2301      	movne	r3, #1
 8003acc:	2300      	moveq	r3, #0
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 8003ad4:	f000 f9ba 	bl	8003e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ad8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003adc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003ade:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	482e      	ldr	r0, [pc, #184]	@ (8003ba0 <_ZL12MX_TIM3_Initv+0x138>)
 8003ae6:	f004 f973 	bl	8007dd0 <HAL_TIM_ConfigClockSource>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	bf14      	ite	ne
 8003af0:	2301      	movne	r3, #1
 8003af2:	2300      	moveq	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d001      	beq.n	8003afe <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 8003afa:	f000 f9a7 	bl	8003e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003afe:	4828      	ldr	r0, [pc, #160]	@ (8003ba0 <_ZL12MX_TIM3_Initv+0x138>)
 8003b00:	f003 f85b 	bl	8006bba <HAL_TIM_PWM_Init>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	bf14      	ite	ne
 8003b0a:	2301      	movne	r3, #1
 8003b0c:	2300      	moveq	r3, #0
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 8003b14:	f000 f99a 	bl	8003e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003b20:	f107 0320 	add.w	r3, r7, #32
 8003b24:	4619      	mov	r1, r3
 8003b26:	481e      	ldr	r0, [pc, #120]	@ (8003ba0 <_ZL12MX_TIM3_Initv+0x138>)
 8003b28:	f004 fe72 	bl	8008810 <HAL_TIMEx_MasterConfigSynchronization>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	bf14      	ite	ne
 8003b32:	2301      	movne	r3, #1
 8003b34:	2300      	moveq	r3, #0
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8003b3c:	f000 f986 	bl	8003e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b40:	2360      	movs	r3, #96	@ 0x60
 8003b42:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003b44:	2300      	movs	r3, #0
 8003b46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b50:	1d3b      	adds	r3, r7, #4
 8003b52:	2200      	movs	r2, #0
 8003b54:	4619      	mov	r1, r3
 8003b56:	4812      	ldr	r0, [pc, #72]	@ (8003ba0 <_ZL12MX_TIM3_Initv+0x138>)
 8003b58:	f004 f878 	bl	8007c4c <HAL_TIM_PWM_ConfigChannel>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	bf14      	ite	ne
 8003b62:	2301      	movne	r3, #1
 8003b64:	2300      	moveq	r3, #0
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d001      	beq.n	8003b70 <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 8003b6c:	f000 f96e 	bl	8003e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003b70:	1d3b      	adds	r3, r7, #4
 8003b72:	2204      	movs	r2, #4
 8003b74:	4619      	mov	r1, r3
 8003b76:	480a      	ldr	r0, [pc, #40]	@ (8003ba0 <_ZL12MX_TIM3_Initv+0x138>)
 8003b78:	f004 f868 	bl	8007c4c <HAL_TIM_PWM_ConfigChannel>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	bf14      	ite	ne
 8003b82:	2301      	movne	r3, #1
 8003b84:	2300      	moveq	r3, #0
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <_ZL12MX_TIM3_Initv+0x128>
  {
    Error_Handler();
 8003b8c:	f000 f95e 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003b90:	4803      	ldr	r0, [pc, #12]	@ (8003ba0 <_ZL12MX_TIM3_Initv+0x138>)
 8003b92:	f000 fab3 	bl	80040fc <HAL_TIM_MspPostInit>

}
 8003b96:	bf00      	nop
 8003b98:	3738      	adds	r7, #56	@ 0x38
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	20000594 	.word	0x20000594
 8003ba4:	40000400 	.word	0x40000400

08003ba8 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08c      	sub	sp, #48	@ 0x30
 8003bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003bae:	f107 030c 	add.w	r3, r7, #12
 8003bb2:	2224      	movs	r2, #36	@ 0x24
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f00b f8ff 	bl	800edba <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bbc:	1d3b      	adds	r3, r7, #4
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003bc4:	4b25      	ldr	r3, [pc, #148]	@ (8003c5c <_ZL12MX_TIM5_Initv+0xb4>)
 8003bc6:	4a26      	ldr	r2, [pc, #152]	@ (8003c60 <_ZL12MX_TIM5_Initv+0xb8>)
 8003bc8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003bca:	4b24      	ldr	r3, [pc, #144]	@ (8003c5c <_ZL12MX_TIM5_Initv+0xb4>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003bd0:	4b22      	ldr	r3, [pc, #136]	@ (8003c5c <_ZL12MX_TIM5_Initv+0xb4>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003bd6:	4b21      	ldr	r3, [pc, #132]	@ (8003c5c <_ZL12MX_TIM5_Initv+0xb4>)
 8003bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8003bdc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bde:	4b1f      	ldr	r3, [pc, #124]	@ (8003c5c <_ZL12MX_TIM5_Initv+0xb4>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003be4:	4b1d      	ldr	r3, [pc, #116]	@ (8003c5c <_ZL12MX_TIM5_Initv+0xb4>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003bea:	2303      	movs	r3, #3
 8003bec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003c02:	2301      	movs	r3, #1
 8003c04:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003c06:	2300      	movs	r3, #0
 8003c08:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003c0e:	f107 030c 	add.w	r3, r7, #12
 8003c12:	4619      	mov	r1, r3
 8003c14:	4811      	ldr	r0, [pc, #68]	@ (8003c5c <_ZL12MX_TIM5_Initv+0xb4>)
 8003c16:	f003 fb5f 	bl	80072d8 <HAL_TIM_Encoder_Init>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	bf14      	ite	ne
 8003c20:	2301      	movne	r3, #1
 8003c22:	2300      	moveq	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <_ZL12MX_TIM5_Initv+0x86>
  {
    Error_Handler();
 8003c2a:	f000 f90f 	bl	8003e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c32:	2300      	movs	r3, #0
 8003c34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003c36:	1d3b      	adds	r3, r7, #4
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4808      	ldr	r0, [pc, #32]	@ (8003c5c <_ZL12MX_TIM5_Initv+0xb4>)
 8003c3c:	f004 fde8 	bl	8008810 <HAL_TIMEx_MasterConfigSynchronization>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	bf14      	ite	ne
 8003c46:	2301      	movne	r3, #1
 8003c48:	2300      	moveq	r3, #0
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <_ZL12MX_TIM5_Initv+0xac>
  {
    Error_Handler();
 8003c50:	f000 f8fc 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003c54:	bf00      	nop
 8003c56:	3730      	adds	r7, #48	@ 0x30
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	200005dc 	.word	0x200005dc
 8003c60:	40000c00 	.word	0x40000c00

08003c64 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003c68:	4b13      	ldr	r3, [pc, #76]	@ (8003cb8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003c6a:	4a14      	ldr	r2, [pc, #80]	@ (8003cbc <_ZL19MX_USART2_UART_Initv+0x58>)
 8003c6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003c6e:	4b12      	ldr	r3, [pc, #72]	@ (8003cb8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003c70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003c74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003c76:	4b10      	ldr	r3, [pc, #64]	@ (8003cb8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8003cb8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003c82:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003c88:	4b0b      	ldr	r3, [pc, #44]	@ (8003cb8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003c8a:	220c      	movs	r2, #12
 8003c8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c94:	4b08      	ldr	r3, [pc, #32]	@ (8003cb8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003c9a:	4807      	ldr	r0, [pc, #28]	@ (8003cb8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003c9c:	f004 fe3a 	bl	8008914 <HAL_UART_Init>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	bf14      	ite	ne
 8003ca6:	2301      	movne	r3, #1
 8003ca8:	2300      	moveq	r3, #0
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d001      	beq.n	8003cb4 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8003cb0:	f000 f8cc 	bl	8003e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003cb4:	bf00      	nop
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	20000624 	.word	0x20000624
 8003cbc:	40004400 	.word	0x40004400

08003cc0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b088      	sub	sp, #32
 8003cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cc6:	f107 030c 	add.w	r3, r7, #12
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	605a      	str	r2, [r3, #4]
 8003cd0:	609a      	str	r2, [r3, #8]
 8003cd2:	60da      	str	r2, [r3, #12]
 8003cd4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60bb      	str	r3, [r7, #8]
 8003cda:	4b24      	ldr	r3, [pc, #144]	@ (8003d6c <_ZL12MX_GPIO_Initv+0xac>)
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cde:	4a23      	ldr	r2, [pc, #140]	@ (8003d6c <_ZL12MX_GPIO_Initv+0xac>)
 8003ce0:	f043 0301 	orr.w	r3, r3, #1
 8003ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ce6:	4b21      	ldr	r3, [pc, #132]	@ (8003d6c <_ZL12MX_GPIO_Initv+0xac>)
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	60bb      	str	r3, [r7, #8]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	607b      	str	r3, [r7, #4]
 8003cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8003d6c <_ZL12MX_GPIO_Initv+0xac>)
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cfa:	4a1c      	ldr	r2, [pc, #112]	@ (8003d6c <_ZL12MX_GPIO_Initv+0xac>)
 8003cfc:	f043 0302 	orr.w	r3, r3, #2
 8003d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d02:	4b1a      	ldr	r3, [pc, #104]	@ (8003d6c <_ZL12MX_GPIO_Initv+0xac>)
 8003d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	607b      	str	r3, [r7, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f44f 4154 	mov.w	r1, #54272	@ 0xd400
 8003d14:	4816      	ldr	r0, [pc, #88]	@ (8003d70 <_ZL12MX_GPIO_Initv+0xb0>)
 8003d16:	f000 ff49 	bl	8004bac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB10 PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8003d1a:	f44f 4354 	mov.w	r3, #54272	@ 0xd400
 8003d1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d20:	2301      	movs	r3, #1
 8003d22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d24:	2300      	movs	r3, #0
 8003d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d2c:	f107 030c 	add.w	r3, r7, #12
 8003d30:	4619      	mov	r1, r3
 8003d32:	480f      	ldr	r0, [pc, #60]	@ (8003d70 <_ZL12MX_GPIO_Initv+0xb0>)
 8003d34:	f000 fd9e 	bl	8004874 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003d38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003d3e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003d42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d44:	2300      	movs	r3, #0
 8003d46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d48:	f107 030c 	add.w	r3, r7, #12
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4808      	ldr	r0, [pc, #32]	@ (8003d70 <_ZL12MX_GPIO_Initv+0xb0>)
 8003d50:	f000 fd90 	bl	8004874 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003d54:	2200      	movs	r2, #0
 8003d56:	2100      	movs	r1, #0
 8003d58:	2028      	movs	r0, #40	@ 0x28
 8003d5a:	f000 fd54 	bl	8004806 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003d5e:	2028      	movs	r0, #40	@ 0x28
 8003d60:	f000 fd6d 	bl	800483e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003d64:	bf00      	nop
 8003d66:	3720      	adds	r7, #32
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	40020400 	.word	0x40020400

08003d74 <_ZL12VL53L0X_Initv>:
    HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), HAL_MAX_DELAY);
    HAL_Delay(1000); // Unnecessary
}

// VL53L0X time-of-flight sensor initialization
static void VL53L0X_Init(void) {
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
	uint32_t refSpadCount;
	uint8_t isApertureSpads;
	uint8_t VhvSettings;
	uint8_t PhaseCal;

	Dev->I2cHandle = &hi2c1;
 8003d7a:	4b32      	ldr	r3, [pc, #200]	@ (8003e44 <_ZL12VL53L0X_Initv+0xd0>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a32      	ldr	r2, [pc, #200]	@ (8003e48 <_ZL12VL53L0X_Initv+0xd4>)
 8003d80:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
	Dev->I2cDevAddr = 0x29 << 1;
 8003d84:	4b2f      	ldr	r3, [pc, #188]	@ (8003e44 <_ZL12VL53L0X_Initv+0xd0>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2252      	movs	r2, #82	@ 0x52
 8003d8a:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160

	VL53L0X_WaitDeviceBooted(Dev);
 8003d8e:	4b2d      	ldr	r3, [pc, #180]	@ (8003e44 <_ZL12VL53L0X_Initv+0xd0>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f005 fcc2 	bl	800971c <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit(Dev);
 8003d98:	4b2a      	ldr	r3, [pc, #168]	@ (8003e44 <_ZL12VL53L0X_Initv+0xd0>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f005 f9d9 	bl	8009154 <VL53L0X_DataInit>
	VL53L0X_StaticInit(Dev);
 8003da2:	4b28      	ldr	r3, [pc, #160]	@ (8003e44 <_ZL12VL53L0X_Initv+0xd0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f005 fb38 	bl	800941c <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8003dac:	4b25      	ldr	r3, [pc, #148]	@ (8003e44 <_ZL12VL53L0X_Initv+0xd0>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	1c7a      	adds	r2, r7, #1
 8003db2:	1cb9      	adds	r1, r7, #2
 8003db4:	4618      	mov	r0, r3
 8003db6:	f006 f9cf 	bl	800a158 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8003dba:	4b22      	ldr	r3, [pc, #136]	@ (8003e44 <_ZL12VL53L0X_Initv+0xd0>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	1cfa      	adds	r2, r7, #3
 8003dc0:	1d39      	adds	r1, r7, #4
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f006 fe4a 	bl	800aa5c <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8003dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8003e44 <_ZL12VL53L0X_Initv+0xd0>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2100      	movs	r1, #0
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f005 fd42 	bl	8009858 <VL53L0X_SetDeviceMode>

	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8003dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e44 <_ZL12VL53L0X_Initv+0xd0>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	2100      	movs	r1, #0
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f005 ffb5 	bl	8009d4c <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8003de2:	4b18      	ldr	r3, [pc, #96]	@ (8003e44 <_ZL12VL53L0X_Initv+0xd0>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2201      	movs	r2, #1
 8003de8:	2101      	movs	r1, #1
 8003dea:	4618      	mov	r0, r3
 8003dec:	f005 ffae 	bl	8009d4c <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t) (0.1*65536));
 8003df0:	4b14      	ldr	r3, [pc, #80]	@ (8003e44 <_ZL12VL53L0X_Initv+0xd0>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f641 1299 	movw	r2, #6553	@ 0x1999
 8003df8:	2101      	movs	r1, #1
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f006 f856 	bl	8009eac <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t) (60*65536));
 8003e00:	4b10      	ldr	r3, [pc, #64]	@ (8003e44 <_ZL12VL53L0X_Initv+0xd0>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8003e08:	2100      	movs	r1, #0
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f006 f84e 	bl	8009eac <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 8003e10:	4b0c      	ldr	r3, [pc, #48]	@ (8003e44 <_ZL12VL53L0X_Initv+0xd0>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f248 01e8 	movw	r1, #33000	@ 0x80e8
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f005 fd7b 	bl	8009914 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8003e1e:	4b09      	ldr	r3, [pc, #36]	@ (8003e44 <_ZL12VL53L0X_Initv+0xd0>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2212      	movs	r2, #18
 8003e24:	2100      	movs	r1, #0
 8003e26:	4618      	mov	r0, r3
 8003e28:	f005 fd9a 	bl	8009960 <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8003e2c:	4b05      	ldr	r3, [pc, #20]	@ (8003e44 <_ZL12VL53L0X_Initv+0xd0>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	220e      	movs	r2, #14
 8003e32:	2101      	movs	r1, #1
 8003e34:	4618      	mov	r0, r3
 8003e36:	f005 fd93 	bl	8009960 <VL53L0X_SetVcselPulsePeriod>
}
 8003e3a:	bf00      	nop
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	20000000 	.word	0x20000000
 8003e48:	200004b0 	.word	0x200004b0

08003e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e50:	b672      	cpsid	i
}
 8003e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e54:	bf00      	nop
 8003e56:	e7fd      	b.n	8003e54 <Error_Handler+0x8>

08003e58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e5e:	2300      	movs	r3, #0
 8003e60:	607b      	str	r3, [r7, #4]
 8003e62:	4b10      	ldr	r3, [pc, #64]	@ (8003ea4 <HAL_MspInit+0x4c>)
 8003e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e66:	4a0f      	ldr	r2, [pc, #60]	@ (8003ea4 <HAL_MspInit+0x4c>)
 8003e68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ea4 <HAL_MspInit+0x4c>)
 8003e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e76:	607b      	str	r3, [r7, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	603b      	str	r3, [r7, #0]
 8003e7e:	4b09      	ldr	r3, [pc, #36]	@ (8003ea4 <HAL_MspInit+0x4c>)
 8003e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e82:	4a08      	ldr	r2, [pc, #32]	@ (8003ea4 <HAL_MspInit+0x4c>)
 8003e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e88:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e8a:	4b06      	ldr	r3, [pc, #24]	@ (8003ea4 <HAL_MspInit+0x4c>)
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e92:	603b      	str	r3, [r7, #0]
 8003e94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	40023800 	.word	0x40023800

08003ea8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08a      	sub	sp, #40	@ 0x28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eb0:	f107 0314 	add.w	r3, r7, #20
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	605a      	str	r2, [r3, #4]
 8003eba:	609a      	str	r2, [r3, #8]
 8003ebc:	60da      	str	r2, [r3, #12]
 8003ebe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a19      	ldr	r2, [pc, #100]	@ (8003f2c <HAL_I2C_MspInit+0x84>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d12c      	bne.n	8003f24 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eca:	2300      	movs	r3, #0
 8003ecc:	613b      	str	r3, [r7, #16]
 8003ece:	4b18      	ldr	r3, [pc, #96]	@ (8003f30 <HAL_I2C_MspInit+0x88>)
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed2:	4a17      	ldr	r2, [pc, #92]	@ (8003f30 <HAL_I2C_MspInit+0x88>)
 8003ed4:	f043 0302 	orr.w	r3, r3, #2
 8003ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003eda:	4b15      	ldr	r3, [pc, #84]	@ (8003f30 <HAL_I2C_MspInit+0x88>)
 8003edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	613b      	str	r3, [r7, #16]
 8003ee4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003ee6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003eec:	2312      	movs	r3, #18
 8003eee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ef8:	2304      	movs	r3, #4
 8003efa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003efc:	f107 0314 	add.w	r3, r7, #20
 8003f00:	4619      	mov	r1, r3
 8003f02:	480c      	ldr	r0, [pc, #48]	@ (8003f34 <HAL_I2C_MspInit+0x8c>)
 8003f04:	f000 fcb6 	bl	8004874 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003f08:	2300      	movs	r3, #0
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	4b08      	ldr	r3, [pc, #32]	@ (8003f30 <HAL_I2C_MspInit+0x88>)
 8003f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f10:	4a07      	ldr	r2, [pc, #28]	@ (8003f30 <HAL_I2C_MspInit+0x88>)
 8003f12:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003f16:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f18:	4b05      	ldr	r3, [pc, #20]	@ (8003f30 <HAL_I2C_MspInit+0x88>)
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003f24:	bf00      	nop
 8003f26:	3728      	adds	r7, #40	@ 0x28
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40005400 	.word	0x40005400
 8003f30:	40023800 	.word	0x40023800
 8003f34:	40020400 	.word	0x40020400

08003f38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08c      	sub	sp, #48	@ 0x30
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f40:	f107 031c 	add.w	r3, r7, #28
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	605a      	str	r2, [r3, #4]
 8003f4a:	609a      	str	r2, [r3, #8]
 8003f4c:	60da      	str	r2, [r3, #12]
 8003f4e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a3d      	ldr	r2, [pc, #244]	@ (800404c <HAL_TIM_Base_MspInit+0x114>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d14d      	bne.n	8003ff6 <HAL_TIM_Base_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	61bb      	str	r3, [r7, #24]
 8003f5e:	4b3c      	ldr	r3, [pc, #240]	@ (8004050 <HAL_TIM_Base_MspInit+0x118>)
 8003f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f62:	4a3b      	ldr	r2, [pc, #236]	@ (8004050 <HAL_TIM_Base_MspInit+0x118>)
 8003f64:	f043 0301 	orr.w	r3, r3, #1
 8003f68:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f6a:	4b39      	ldr	r3, [pc, #228]	@ (8004050 <HAL_TIM_Base_MspInit+0x118>)
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	61bb      	str	r3, [r7, #24]
 8003f74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f76:	2300      	movs	r3, #0
 8003f78:	617b      	str	r3, [r7, #20]
 8003f7a:	4b35      	ldr	r3, [pc, #212]	@ (8004050 <HAL_TIM_Base_MspInit+0x118>)
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7e:	4a34      	ldr	r2, [pc, #208]	@ (8004050 <HAL_TIM_Base_MspInit+0x118>)
 8003f80:	f043 0301 	orr.w	r3, r3, #1
 8003f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f86:	4b32      	ldr	r3, [pc, #200]	@ (8004050 <HAL_TIM_Base_MspInit+0x118>)
 8003f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003f92:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f98:	2302      	movs	r3, #2
 8003f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fa8:	f107 031c 	add.w	r3, r7, #28
 8003fac:	4619      	mov	r1, r3
 8003fae:	4829      	ldr	r0, [pc, #164]	@ (8004054 <HAL_TIM_Base_MspInit+0x11c>)
 8003fb0:	f000 fc60 	bl	8004874 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	2018      	movs	r0, #24
 8003fba:	f000 fc24 	bl	8004806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003fbe:	2018      	movs	r0, #24
 8003fc0:	f000 fc3d 	bl	800483e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	2019      	movs	r0, #25
 8003fca:	f000 fc1c 	bl	8004806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003fce:	2019      	movs	r0, #25
 8003fd0:	f000 fc35 	bl	800483e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	201a      	movs	r0, #26
 8003fda:	f000 fc14 	bl	8004806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003fde:	201a      	movs	r0, #26
 8003fe0:	f000 fc2d 	bl	800483e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	201b      	movs	r0, #27
 8003fea:	f000 fc0c 	bl	8004806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003fee:	201b      	movs	r0, #27
 8003ff0:	f000 fc25 	bl	800483e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003ff4:	e026      	b.n	8004044 <HAL_TIM_Base_MspInit+0x10c>
  else if(htim_base->Instance==TIM2)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ffe:	d10e      	bne.n	800401e <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004000:	2300      	movs	r3, #0
 8004002:	613b      	str	r3, [r7, #16]
 8004004:	4b12      	ldr	r3, [pc, #72]	@ (8004050 <HAL_TIM_Base_MspInit+0x118>)
 8004006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004008:	4a11      	ldr	r2, [pc, #68]	@ (8004050 <HAL_TIM_Base_MspInit+0x118>)
 800400a:	f043 0301 	orr.w	r3, r3, #1
 800400e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004010:	4b0f      	ldr	r3, [pc, #60]	@ (8004050 <HAL_TIM_Base_MspInit+0x118>)
 8004012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	613b      	str	r3, [r7, #16]
 800401a:	693b      	ldr	r3, [r7, #16]
}
 800401c:	e012      	b.n	8004044 <HAL_TIM_Base_MspInit+0x10c>
  else if(htim_base->Instance==TIM3)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a0d      	ldr	r2, [pc, #52]	@ (8004058 <HAL_TIM_Base_MspInit+0x120>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d10d      	bne.n	8004044 <HAL_TIM_Base_MspInit+0x10c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004028:	2300      	movs	r3, #0
 800402a:	60fb      	str	r3, [r7, #12]
 800402c:	4b08      	ldr	r3, [pc, #32]	@ (8004050 <HAL_TIM_Base_MspInit+0x118>)
 800402e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004030:	4a07      	ldr	r2, [pc, #28]	@ (8004050 <HAL_TIM_Base_MspInit+0x118>)
 8004032:	f043 0302 	orr.w	r3, r3, #2
 8004036:	6413      	str	r3, [r2, #64]	@ 0x40
 8004038:	4b05      	ldr	r3, [pc, #20]	@ (8004050 <HAL_TIM_Base_MspInit+0x118>)
 800403a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	60fb      	str	r3, [r7, #12]
 8004042:	68fb      	ldr	r3, [r7, #12]
}
 8004044:	bf00      	nop
 8004046:	3730      	adds	r7, #48	@ 0x30
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40010000 	.word	0x40010000
 8004050:	40023800 	.word	0x40023800
 8004054:	40020000 	.word	0x40020000
 8004058:	40000400 	.word	0x40000400

0800405c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08a      	sub	sp, #40	@ 0x28
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004064:	f107 0314 	add.w	r3, r7, #20
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	605a      	str	r2, [r3, #4]
 800406e:	609a      	str	r2, [r3, #8]
 8004070:	60da      	str	r2, [r3, #12]
 8004072:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a1d      	ldr	r2, [pc, #116]	@ (80040f0 <HAL_TIM_Encoder_MspInit+0x94>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d133      	bne.n	80040e6 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800407e:	2300      	movs	r3, #0
 8004080:	613b      	str	r3, [r7, #16]
 8004082:	4b1c      	ldr	r3, [pc, #112]	@ (80040f4 <HAL_TIM_Encoder_MspInit+0x98>)
 8004084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004086:	4a1b      	ldr	r2, [pc, #108]	@ (80040f4 <HAL_TIM_Encoder_MspInit+0x98>)
 8004088:	f043 0308 	orr.w	r3, r3, #8
 800408c:	6413      	str	r3, [r2, #64]	@ 0x40
 800408e:	4b19      	ldr	r3, [pc, #100]	@ (80040f4 <HAL_TIM_Encoder_MspInit+0x98>)
 8004090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004092:	f003 0308 	and.w	r3, r3, #8
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800409a:	2300      	movs	r3, #0
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	4b15      	ldr	r3, [pc, #84]	@ (80040f4 <HAL_TIM_Encoder_MspInit+0x98>)
 80040a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a2:	4a14      	ldr	r2, [pc, #80]	@ (80040f4 <HAL_TIM_Encoder_MspInit+0x98>)
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80040aa:	4b12      	ldr	r3, [pc, #72]	@ (80040f4 <HAL_TIM_Encoder_MspInit+0x98>)
 80040ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80040b6:	2303      	movs	r3, #3
 80040b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ba:	2302      	movs	r3, #2
 80040bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040be:	2300      	movs	r3, #0
 80040c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040c2:	2300      	movs	r3, #0
 80040c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80040c6:	2302      	movs	r3, #2
 80040c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ca:	f107 0314 	add.w	r3, r7, #20
 80040ce:	4619      	mov	r1, r3
 80040d0:	4809      	ldr	r0, [pc, #36]	@ (80040f8 <HAL_TIM_Encoder_MspInit+0x9c>)
 80040d2:	f000 fbcf 	bl	8004874 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80040d6:	2200      	movs	r2, #0
 80040d8:	2100      	movs	r1, #0
 80040da:	2032      	movs	r0, #50	@ 0x32
 80040dc:	f000 fb93 	bl	8004806 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80040e0:	2032      	movs	r0, #50	@ 0x32
 80040e2:	f000 fbac 	bl	800483e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80040e6:	bf00      	nop
 80040e8:	3728      	adds	r7, #40	@ 0x28
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40000c00 	.word	0x40000c00
 80040f4:	40023800 	.word	0x40023800
 80040f8:	40020000 	.word	0x40020000

080040fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b08a      	sub	sp, #40	@ 0x28
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004104:	f107 0314 	add.w	r3, r7, #20
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	605a      	str	r2, [r3, #4]
 800410e:	609a      	str	r2, [r3, #8]
 8004110:	60da      	str	r2, [r3, #12]
 8004112:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800411c:	d11f      	bne.n	800415e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800411e:	2300      	movs	r3, #0
 8004120:	613b      	str	r3, [r7, #16]
 8004122:	4b22      	ldr	r3, [pc, #136]	@ (80041ac <HAL_TIM_MspPostInit+0xb0>)
 8004124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004126:	4a21      	ldr	r2, [pc, #132]	@ (80041ac <HAL_TIM_MspPostInit+0xb0>)
 8004128:	f043 0301 	orr.w	r3, r3, #1
 800412c:	6313      	str	r3, [r2, #48]	@ 0x30
 800412e:	4b1f      	ldr	r3, [pc, #124]	@ (80041ac <HAL_TIM_MspPostInit+0xb0>)
 8004130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	613b      	str	r3, [r7, #16]
 8004138:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800413a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800413e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004140:	2302      	movs	r3, #2
 8004142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004144:	2300      	movs	r3, #0
 8004146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004148:	2300      	movs	r3, #0
 800414a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800414c:	2301      	movs	r3, #1
 800414e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004150:	f107 0314 	add.w	r3, r7, #20
 8004154:	4619      	mov	r1, r3
 8004156:	4816      	ldr	r0, [pc, #88]	@ (80041b0 <HAL_TIM_MspPostInit+0xb4>)
 8004158:	f000 fb8c 	bl	8004874 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800415c:	e022      	b.n	80041a4 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a14      	ldr	r2, [pc, #80]	@ (80041b4 <HAL_TIM_MspPostInit+0xb8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d11d      	bne.n	80041a4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004168:	2300      	movs	r3, #0
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	4b0f      	ldr	r3, [pc, #60]	@ (80041ac <HAL_TIM_MspPostInit+0xb0>)
 800416e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004170:	4a0e      	ldr	r2, [pc, #56]	@ (80041ac <HAL_TIM_MspPostInit+0xb0>)
 8004172:	f043 0302 	orr.w	r3, r3, #2
 8004176:	6313      	str	r3, [r2, #48]	@ 0x30
 8004178:	4b0c      	ldr	r3, [pc, #48]	@ (80041ac <HAL_TIM_MspPostInit+0xb0>)
 800417a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004184:	2330      	movs	r3, #48	@ 0x30
 8004186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004188:	2302      	movs	r3, #2
 800418a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418c:	2300      	movs	r3, #0
 800418e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004190:	2300      	movs	r3, #0
 8004192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004194:	2302      	movs	r3, #2
 8004196:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004198:	f107 0314 	add.w	r3, r7, #20
 800419c:	4619      	mov	r1, r3
 800419e:	4806      	ldr	r0, [pc, #24]	@ (80041b8 <HAL_TIM_MspPostInit+0xbc>)
 80041a0:	f000 fb68 	bl	8004874 <HAL_GPIO_Init>
}
 80041a4:	bf00      	nop
 80041a6:	3728      	adds	r7, #40	@ 0x28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	40023800 	.word	0x40023800
 80041b0:	40020000 	.word	0x40020000
 80041b4:	40000400 	.word	0x40000400
 80041b8:	40020400 	.word	0x40020400

080041bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b08a      	sub	sp, #40	@ 0x28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041c4:	f107 0314 	add.w	r3, r7, #20
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	605a      	str	r2, [r3, #4]
 80041ce:	609a      	str	r2, [r3, #8]
 80041d0:	60da      	str	r2, [r3, #12]
 80041d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a19      	ldr	r2, [pc, #100]	@ (8004240 <HAL_UART_MspInit+0x84>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d12b      	bne.n	8004236 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80041de:	2300      	movs	r3, #0
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	4b18      	ldr	r3, [pc, #96]	@ (8004244 <HAL_UART_MspInit+0x88>)
 80041e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e6:	4a17      	ldr	r2, [pc, #92]	@ (8004244 <HAL_UART_MspInit+0x88>)
 80041e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80041ee:	4b15      	ldr	r3, [pc, #84]	@ (8004244 <HAL_UART_MspInit+0x88>)
 80041f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041f6:	613b      	str	r3, [r7, #16]
 80041f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041fa:	2300      	movs	r3, #0
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	4b11      	ldr	r3, [pc, #68]	@ (8004244 <HAL_UART_MspInit+0x88>)
 8004200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004202:	4a10      	ldr	r2, [pc, #64]	@ (8004244 <HAL_UART_MspInit+0x88>)
 8004204:	f043 0301 	orr.w	r3, r3, #1
 8004208:	6313      	str	r3, [r2, #48]	@ 0x30
 800420a:	4b0e      	ldr	r3, [pc, #56]	@ (8004244 <HAL_UART_MspInit+0x88>)
 800420c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004216:	230c      	movs	r3, #12
 8004218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800421a:	2302      	movs	r3, #2
 800421c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800421e:	2300      	movs	r3, #0
 8004220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004222:	2303      	movs	r3, #3
 8004224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004226:	2307      	movs	r3, #7
 8004228:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800422a:	f107 0314 	add.w	r3, r7, #20
 800422e:	4619      	mov	r1, r3
 8004230:	4805      	ldr	r0, [pc, #20]	@ (8004248 <HAL_UART_MspInit+0x8c>)
 8004232:	f000 fb1f 	bl	8004874 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004236:	bf00      	nop
 8004238:	3728      	adds	r7, #40	@ 0x28
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	40004400 	.word	0x40004400
 8004244:	40023800 	.word	0x40023800
 8004248:	40020000 	.word	0x40020000

0800424c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004250:	bf00      	nop
 8004252:	e7fd      	b.n	8004250 <NMI_Handler+0x4>

08004254 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004254:	b480      	push	{r7}
 8004256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004258:	bf00      	nop
 800425a:	e7fd      	b.n	8004258 <HardFault_Handler+0x4>

0800425c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004260:	bf00      	nop
 8004262:	e7fd      	b.n	8004260 <MemManage_Handler+0x4>

08004264 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004268:	bf00      	nop
 800426a:	e7fd      	b.n	8004268 <BusFault_Handler+0x4>

0800426c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004270:	bf00      	nop
 8004272:	e7fd      	b.n	8004270 <UsageFault_Handler+0x4>

08004274 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004278:	bf00      	nop
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004282:	b480      	push	{r7}
 8004284:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004286:	bf00      	nop
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004294:	bf00      	nop
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80042a2:	f000 f991 	bl	80045c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80042a6:	bf00      	nop
 80042a8:	bd80      	pop	{r7, pc}
	...

080042ac <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80042b0:	4802      	ldr	r0, [pc, #8]	@ (80042bc <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80042b2:	f003 fb3f 	bl	8007934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80042b6:	bf00      	nop
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	20000504 	.word	0x20000504

080042c0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80042c4:	4802      	ldr	r0, [pc, #8]	@ (80042d0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80042c6:	f003 fb35 	bl	8007934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80042ca:	bf00      	nop
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	20000504 	.word	0x20000504

080042d4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80042d8:	4802      	ldr	r0, [pc, #8]	@ (80042e4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80042da:	f003 fb2b 	bl	8007934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80042de:	bf00      	nop
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000504 	.word	0x20000504

080042e8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80042ec:	4802      	ldr	r0, [pc, #8]	@ (80042f8 <TIM1_CC_IRQHandler+0x10>)
 80042ee:	f003 fb21 	bl	8007934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80042f2:	bf00      	nop
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	20000504 	.word	0x20000504

080042fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004300:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004304:	f000 fc86 	bl	8004c14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004308:	bf00      	nop
 800430a:	bd80      	pop	{r7, pc}

0800430c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004310:	4802      	ldr	r0, [pc, #8]	@ (800431c <TIM5_IRQHandler+0x10>)
 8004312:	f003 fb0f 	bl	8007934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004316:	bf00      	nop
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	200005dc 	.word	0x200005dc

08004320 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0
  return 1;
 8004324:	2301      	movs	r3, #1
}
 8004326:	4618      	mov	r0, r3
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <_kill>:

int _kill(int pid, int sig)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800433a:	f00a fde5 	bl	800ef08 <__errno>
 800433e:	4603      	mov	r3, r0
 8004340:	2216      	movs	r2, #22
 8004342:	601a      	str	r2, [r3, #0]
  return -1;
 8004344:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004348:	4618      	mov	r0, r3
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <_exit>:

void _exit (int status)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004358:	f04f 31ff 	mov.w	r1, #4294967295
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f7ff ffe7 	bl	8004330 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004362:	bf00      	nop
 8004364:	e7fd      	b.n	8004362 <_exit+0x12>

08004366 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b086      	sub	sp, #24
 800436a:	af00      	add	r7, sp, #0
 800436c:	60f8      	str	r0, [r7, #12]
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004372:	2300      	movs	r3, #0
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	e00a      	b.n	800438e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004378:	f3af 8000 	nop.w
 800437c:	4601      	mov	r1, r0
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	60ba      	str	r2, [r7, #8]
 8004384:	b2ca      	uxtb	r2, r1
 8004386:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	3301      	adds	r3, #1
 800438c:	617b      	str	r3, [r7, #20]
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	429a      	cmp	r2, r3
 8004394:	dbf0      	blt.n	8004378 <_read+0x12>
  }

  return len;
 8004396:	687b      	ldr	r3, [r7, #4]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043ac:	2300      	movs	r3, #0
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	e009      	b.n	80043c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	1c5a      	adds	r2, r3, #1
 80043b6:	60ba      	str	r2, [r7, #8]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	3301      	adds	r3, #1
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	dbf1      	blt.n	80043b2 <_write+0x12>
  }
  return len;
 80043ce:	687b      	ldr	r3, [r7, #4]
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3718      	adds	r7, #24
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <_close>:

int _close(int file)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80043e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004400:	605a      	str	r2, [r3, #4]
  return 0;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <_isatty>:

int _isatty(int file)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004418:	2301      	movs	r3, #1
}
 800441a:	4618      	mov	r0, r3
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004426:	b480      	push	{r7}
 8004428:	b085      	sub	sp, #20
 800442a:	af00      	add	r7, sp, #0
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004448:	4a14      	ldr	r2, [pc, #80]	@ (800449c <_sbrk+0x5c>)
 800444a:	4b15      	ldr	r3, [pc, #84]	@ (80044a0 <_sbrk+0x60>)
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004454:	4b13      	ldr	r3, [pc, #76]	@ (80044a4 <_sbrk+0x64>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d102      	bne.n	8004462 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800445c:	4b11      	ldr	r3, [pc, #68]	@ (80044a4 <_sbrk+0x64>)
 800445e:	4a12      	ldr	r2, [pc, #72]	@ (80044a8 <_sbrk+0x68>)
 8004460:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004462:	4b10      	ldr	r3, [pc, #64]	@ (80044a4 <_sbrk+0x64>)
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4413      	add	r3, r2
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	429a      	cmp	r2, r3
 800446e:	d207      	bcs.n	8004480 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004470:	f00a fd4a 	bl	800ef08 <__errno>
 8004474:	4603      	mov	r3, r0
 8004476:	220c      	movs	r2, #12
 8004478:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800447a:	f04f 33ff 	mov.w	r3, #4294967295
 800447e:	e009      	b.n	8004494 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004480:	4b08      	ldr	r3, [pc, #32]	@ (80044a4 <_sbrk+0x64>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004486:	4b07      	ldr	r3, [pc, #28]	@ (80044a4 <_sbrk+0x64>)
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4413      	add	r3, r2
 800448e:	4a05      	ldr	r2, [pc, #20]	@ (80044a4 <_sbrk+0x64>)
 8004490:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004492:	68fb      	ldr	r3, [r7, #12]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3718      	adds	r7, #24
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	20020000 	.word	0x20020000
 80044a0:	00000400 	.word	0x00000400
 80044a4:	200008a8 	.word	0x200008a8
 80044a8:	20000a40 	.word	0x20000a40

080044ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80044b0:	4b06      	ldr	r3, [pc, #24]	@ (80044cc <SystemInit+0x20>)
 80044b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b6:	4a05      	ldr	r2, [pc, #20]	@ (80044cc <SystemInit+0x20>)
 80044b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80044bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044c0:	bf00      	nop
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	e000ed00 	.word	0xe000ed00

080044d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80044d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004508 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80044d4:	f7ff ffea 	bl	80044ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80044d8:	480c      	ldr	r0, [pc, #48]	@ (800450c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80044da:	490d      	ldr	r1, [pc, #52]	@ (8004510 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80044dc:	4a0d      	ldr	r2, [pc, #52]	@ (8004514 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80044de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044e0:	e002      	b.n	80044e8 <LoopCopyDataInit>

080044e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044e6:	3304      	adds	r3, #4

080044e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044ec:	d3f9      	bcc.n	80044e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044ee:	4a0a      	ldr	r2, [pc, #40]	@ (8004518 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80044f0:	4c0a      	ldr	r4, [pc, #40]	@ (800451c <LoopFillZerobss+0x22>)
  movs r3, #0
 80044f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044f4:	e001      	b.n	80044fa <LoopFillZerobss>

080044f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044f8:	3204      	adds	r2, #4

080044fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044fc:	d3fb      	bcc.n	80044f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80044fe:	f00a fd09 	bl	800ef14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004502:	f7fe fc6d 	bl	8002de0 <main>
  bx  lr    
 8004506:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004508:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800450c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004510:	20000494 	.word	0x20000494
  ldr r2, =_sidata
 8004514:	08011348 	.word	0x08011348
  ldr r2, =_sbss
 8004518:	20000494 	.word	0x20000494
  ldr r4, =_ebss
 800451c:	20000a40 	.word	0x20000a40

08004520 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004520:	e7fe      	b.n	8004520 <ADC_IRQHandler>
	...

08004524 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004528:	4b0e      	ldr	r3, [pc, #56]	@ (8004564 <HAL_Init+0x40>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a0d      	ldr	r2, [pc, #52]	@ (8004564 <HAL_Init+0x40>)
 800452e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004532:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004534:	4b0b      	ldr	r3, [pc, #44]	@ (8004564 <HAL_Init+0x40>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a0a      	ldr	r2, [pc, #40]	@ (8004564 <HAL_Init+0x40>)
 800453a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800453e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004540:	4b08      	ldr	r3, [pc, #32]	@ (8004564 <HAL_Init+0x40>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a07      	ldr	r2, [pc, #28]	@ (8004564 <HAL_Init+0x40>)
 8004546:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800454a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800454c:	2003      	movs	r0, #3
 800454e:	f000 f94f 	bl	80047f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004552:	200f      	movs	r0, #15
 8004554:	f000 f808 	bl	8004568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004558:	f7ff fc7e 	bl	8003e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	40023c00 	.word	0x40023c00

08004568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004570:	4b12      	ldr	r3, [pc, #72]	@ (80045bc <HAL_InitTick+0x54>)
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	4b12      	ldr	r3, [pc, #72]	@ (80045c0 <HAL_InitTick+0x58>)
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	4619      	mov	r1, r3
 800457a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800457e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004582:	fbb2 f3f3 	udiv	r3, r2, r3
 8004586:	4618      	mov	r0, r3
 8004588:	f000 f967 	bl	800485a <HAL_SYSTICK_Config>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e00e      	b.n	80045b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b0f      	cmp	r3, #15
 800459a:	d80a      	bhi.n	80045b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800459c:	2200      	movs	r2, #0
 800459e:	6879      	ldr	r1, [r7, #4]
 80045a0:	f04f 30ff 	mov.w	r0, #4294967295
 80045a4:	f000 f92f 	bl	8004806 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045a8:	4a06      	ldr	r2, [pc, #24]	@ (80045c4 <HAL_InitTick+0x5c>)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
 80045b0:	e000      	b.n	80045b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3708      	adds	r7, #8
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	20000004 	.word	0x20000004
 80045c0:	2000000c 	.word	0x2000000c
 80045c4:	20000008 	.word	0x20000008

080045c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045cc:	4b06      	ldr	r3, [pc, #24]	@ (80045e8 <HAL_IncTick+0x20>)
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	461a      	mov	r2, r3
 80045d2:	4b06      	ldr	r3, [pc, #24]	@ (80045ec <HAL_IncTick+0x24>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4413      	add	r3, r2
 80045d8:	4a04      	ldr	r2, [pc, #16]	@ (80045ec <HAL_IncTick+0x24>)
 80045da:	6013      	str	r3, [r2, #0]
}
 80045dc:	bf00      	nop
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	2000000c 	.word	0x2000000c
 80045ec:	200008ac 	.word	0x200008ac

080045f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
  return uwTick;
 80045f4:	4b03      	ldr	r3, [pc, #12]	@ (8004604 <HAL_GetTick+0x14>)
 80045f6:	681b      	ldr	r3, [r3, #0]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	200008ac 	.word	0x200008ac

08004608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004610:	f7ff ffee 	bl	80045f0 <HAL_GetTick>
 8004614:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004620:	d005      	beq.n	800462e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004622:	4b0a      	ldr	r3, [pc, #40]	@ (800464c <HAL_Delay+0x44>)
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	461a      	mov	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4413      	add	r3, r2
 800462c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800462e:	bf00      	nop
 8004630:	f7ff ffde 	bl	80045f0 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	429a      	cmp	r2, r3
 800463e:	d8f7      	bhi.n	8004630 <HAL_Delay+0x28>
  {
  }
}
 8004640:	bf00      	nop
 8004642:	bf00      	nop
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	2000000c 	.word	0x2000000c

08004650 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004650:	b480      	push	{r7}
 8004652:	b085      	sub	sp, #20
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004660:	4b0c      	ldr	r3, [pc, #48]	@ (8004694 <__NVIC_SetPriorityGrouping+0x44>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800466c:	4013      	ands	r3, r2
 800466e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004678:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800467c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004682:	4a04      	ldr	r2, [pc, #16]	@ (8004694 <__NVIC_SetPriorityGrouping+0x44>)
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	60d3      	str	r3, [r2, #12]
}
 8004688:	bf00      	nop
 800468a:	3714      	adds	r7, #20
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr
 8004694:	e000ed00 	.word	0xe000ed00

08004698 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800469c:	4b04      	ldr	r3, [pc, #16]	@ (80046b0 <__NVIC_GetPriorityGrouping+0x18>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	0a1b      	lsrs	r3, r3, #8
 80046a2:	f003 0307 	and.w	r3, r3, #7
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	e000ed00 	.word	0xe000ed00

080046b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	4603      	mov	r3, r0
 80046bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	db0b      	blt.n	80046de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046c6:	79fb      	ldrb	r3, [r7, #7]
 80046c8:	f003 021f 	and.w	r2, r3, #31
 80046cc:	4907      	ldr	r1, [pc, #28]	@ (80046ec <__NVIC_EnableIRQ+0x38>)
 80046ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d2:	095b      	lsrs	r3, r3, #5
 80046d4:	2001      	movs	r0, #1
 80046d6:	fa00 f202 	lsl.w	r2, r0, r2
 80046da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	e000e100 	.word	0xe000e100

080046f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	4603      	mov	r3, r0
 80046f8:	6039      	str	r1, [r7, #0]
 80046fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004700:	2b00      	cmp	r3, #0
 8004702:	db0a      	blt.n	800471a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	b2da      	uxtb	r2, r3
 8004708:	490c      	ldr	r1, [pc, #48]	@ (800473c <__NVIC_SetPriority+0x4c>)
 800470a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800470e:	0112      	lsls	r2, r2, #4
 8004710:	b2d2      	uxtb	r2, r2
 8004712:	440b      	add	r3, r1
 8004714:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004718:	e00a      	b.n	8004730 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	b2da      	uxtb	r2, r3
 800471e:	4908      	ldr	r1, [pc, #32]	@ (8004740 <__NVIC_SetPriority+0x50>)
 8004720:	79fb      	ldrb	r3, [r7, #7]
 8004722:	f003 030f 	and.w	r3, r3, #15
 8004726:	3b04      	subs	r3, #4
 8004728:	0112      	lsls	r2, r2, #4
 800472a:	b2d2      	uxtb	r2, r2
 800472c:	440b      	add	r3, r1
 800472e:	761a      	strb	r2, [r3, #24]
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	e000e100 	.word	0xe000e100
 8004740:	e000ed00 	.word	0xe000ed00

08004744 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004744:	b480      	push	{r7}
 8004746:	b089      	sub	sp, #36	@ 0x24
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f003 0307 	and.w	r3, r3, #7
 8004756:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	f1c3 0307 	rsb	r3, r3, #7
 800475e:	2b04      	cmp	r3, #4
 8004760:	bf28      	it	cs
 8004762:	2304      	movcs	r3, #4
 8004764:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	3304      	adds	r3, #4
 800476a:	2b06      	cmp	r3, #6
 800476c:	d902      	bls.n	8004774 <NVIC_EncodePriority+0x30>
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	3b03      	subs	r3, #3
 8004772:	e000      	b.n	8004776 <NVIC_EncodePriority+0x32>
 8004774:	2300      	movs	r3, #0
 8004776:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004778:	f04f 32ff 	mov.w	r2, #4294967295
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	fa02 f303 	lsl.w	r3, r2, r3
 8004782:	43da      	mvns	r2, r3
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	401a      	ands	r2, r3
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800478c:	f04f 31ff 	mov.w	r1, #4294967295
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	fa01 f303 	lsl.w	r3, r1, r3
 8004796:	43d9      	mvns	r1, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800479c:	4313      	orrs	r3, r2
         );
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3724      	adds	r7, #36	@ 0x24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
	...

080047ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047bc:	d301      	bcc.n	80047c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047be:	2301      	movs	r3, #1
 80047c0:	e00f      	b.n	80047e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047c2:	4a0a      	ldr	r2, [pc, #40]	@ (80047ec <SysTick_Config+0x40>)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3b01      	subs	r3, #1
 80047c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047ca:	210f      	movs	r1, #15
 80047cc:	f04f 30ff 	mov.w	r0, #4294967295
 80047d0:	f7ff ff8e 	bl	80046f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047d4:	4b05      	ldr	r3, [pc, #20]	@ (80047ec <SysTick_Config+0x40>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047da:	4b04      	ldr	r3, [pc, #16]	@ (80047ec <SysTick_Config+0x40>)
 80047dc:	2207      	movs	r2, #7
 80047de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	e000e010 	.word	0xe000e010

080047f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7ff ff29 	bl	8004650 <__NVIC_SetPriorityGrouping>
}
 80047fe:	bf00      	nop
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004806:	b580      	push	{r7, lr}
 8004808:	b086      	sub	sp, #24
 800480a:	af00      	add	r7, sp, #0
 800480c:	4603      	mov	r3, r0
 800480e:	60b9      	str	r1, [r7, #8]
 8004810:	607a      	str	r2, [r7, #4]
 8004812:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004814:	2300      	movs	r3, #0
 8004816:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004818:	f7ff ff3e 	bl	8004698 <__NVIC_GetPriorityGrouping>
 800481c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	68b9      	ldr	r1, [r7, #8]
 8004822:	6978      	ldr	r0, [r7, #20]
 8004824:	f7ff ff8e 	bl	8004744 <NVIC_EncodePriority>
 8004828:	4602      	mov	r2, r0
 800482a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800482e:	4611      	mov	r1, r2
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff ff5d 	bl	80046f0 <__NVIC_SetPriority>
}
 8004836:	bf00      	nop
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b082      	sub	sp, #8
 8004842:	af00      	add	r7, sp, #0
 8004844:	4603      	mov	r3, r0
 8004846:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800484c:	4618      	mov	r0, r3
 800484e:	f7ff ff31 	bl	80046b4 <__NVIC_EnableIRQ>
}
 8004852:	bf00      	nop
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b082      	sub	sp, #8
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7ff ffa2 	bl	80047ac <SysTick_Config>
 8004868:	4603      	mov	r3, r0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
	...

08004874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004874:	b480      	push	{r7}
 8004876:	b089      	sub	sp, #36	@ 0x24
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800487e:	2300      	movs	r3, #0
 8004880:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004882:	2300      	movs	r3, #0
 8004884:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004886:	2300      	movs	r3, #0
 8004888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800488a:	2300      	movs	r3, #0
 800488c:	61fb      	str	r3, [r7, #28]
 800488e:	e159      	b.n	8004b44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004890:	2201      	movs	r2, #1
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	4013      	ands	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	f040 8148 	bne.w	8004b3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f003 0303 	and.w	r3, r3, #3
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d005      	beq.n	80048c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d130      	bne.n	8004928 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	2203      	movs	r2, #3
 80048d2:	fa02 f303 	lsl.w	r3, r2, r3
 80048d6:	43db      	mvns	r3, r3
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	4013      	ands	r3, r2
 80048dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ea:	69ba      	ldr	r2, [r7, #24]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048fc:	2201      	movs	r2, #1
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	fa02 f303 	lsl.w	r3, r2, r3
 8004904:	43db      	mvns	r3, r3
 8004906:	69ba      	ldr	r2, [r7, #24]
 8004908:	4013      	ands	r3, r2
 800490a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	091b      	lsrs	r3, r3, #4
 8004912:	f003 0201 	and.w	r2, r3, #1
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	4313      	orrs	r3, r2
 8004920:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f003 0303 	and.w	r3, r3, #3
 8004930:	2b03      	cmp	r3, #3
 8004932:	d017      	beq.n	8004964 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	2203      	movs	r2, #3
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	43db      	mvns	r3, r3
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	4013      	ands	r3, r2
 800494a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	fa02 f303 	lsl.w	r3, r2, r3
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	4313      	orrs	r3, r2
 800495c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	69ba      	ldr	r2, [r7, #24]
 8004962:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f003 0303 	and.w	r3, r3, #3
 800496c:	2b02      	cmp	r3, #2
 800496e:	d123      	bne.n	80049b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	08da      	lsrs	r2, r3, #3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	3208      	adds	r2, #8
 8004978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800497c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	220f      	movs	r2, #15
 8004988:	fa02 f303 	lsl.w	r3, r2, r3
 800498c:	43db      	mvns	r3, r3
 800498e:	69ba      	ldr	r2, [r7, #24]
 8004990:	4013      	ands	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	691a      	ldr	r2, [r3, #16]
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	f003 0307 	and.w	r3, r3, #7
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	69ba      	ldr	r2, [r7, #24]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	08da      	lsrs	r2, r3, #3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3208      	adds	r2, #8
 80049b2:	69b9      	ldr	r1, [r7, #24]
 80049b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	005b      	lsls	r3, r3, #1
 80049c2:	2203      	movs	r2, #3
 80049c4:	fa02 f303 	lsl.w	r3, r2, r3
 80049c8:	43db      	mvns	r3, r3
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	4013      	ands	r3, r2
 80049ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f003 0203 	and.w	r2, r3, #3
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	fa02 f303 	lsl.w	r3, r2, r3
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 80a2 	beq.w	8004b3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049fa:	2300      	movs	r3, #0
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	4b57      	ldr	r3, [pc, #348]	@ (8004b5c <HAL_GPIO_Init+0x2e8>)
 8004a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a02:	4a56      	ldr	r2, [pc, #344]	@ (8004b5c <HAL_GPIO_Init+0x2e8>)
 8004a04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004a08:	6453      	str	r3, [r2, #68]	@ 0x44
 8004a0a:	4b54      	ldr	r3, [pc, #336]	@ (8004b5c <HAL_GPIO_Init+0x2e8>)
 8004a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004a16:	4a52      	ldr	r2, [pc, #328]	@ (8004b60 <HAL_GPIO_Init+0x2ec>)
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	089b      	lsrs	r3, r3, #2
 8004a1c:	3302      	adds	r3, #2
 8004a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	220f      	movs	r2, #15
 8004a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a32:	43db      	mvns	r3, r3
 8004a34:	69ba      	ldr	r2, [r7, #24]
 8004a36:	4013      	ands	r3, r2
 8004a38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a49      	ldr	r2, [pc, #292]	@ (8004b64 <HAL_GPIO_Init+0x2f0>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d019      	beq.n	8004a76 <HAL_GPIO_Init+0x202>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a48      	ldr	r2, [pc, #288]	@ (8004b68 <HAL_GPIO_Init+0x2f4>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d013      	beq.n	8004a72 <HAL_GPIO_Init+0x1fe>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a47      	ldr	r2, [pc, #284]	@ (8004b6c <HAL_GPIO_Init+0x2f8>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d00d      	beq.n	8004a6e <HAL_GPIO_Init+0x1fa>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a46      	ldr	r2, [pc, #280]	@ (8004b70 <HAL_GPIO_Init+0x2fc>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d007      	beq.n	8004a6a <HAL_GPIO_Init+0x1f6>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a45      	ldr	r2, [pc, #276]	@ (8004b74 <HAL_GPIO_Init+0x300>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d101      	bne.n	8004a66 <HAL_GPIO_Init+0x1f2>
 8004a62:	2304      	movs	r3, #4
 8004a64:	e008      	b.n	8004a78 <HAL_GPIO_Init+0x204>
 8004a66:	2307      	movs	r3, #7
 8004a68:	e006      	b.n	8004a78 <HAL_GPIO_Init+0x204>
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e004      	b.n	8004a78 <HAL_GPIO_Init+0x204>
 8004a6e:	2302      	movs	r3, #2
 8004a70:	e002      	b.n	8004a78 <HAL_GPIO_Init+0x204>
 8004a72:	2301      	movs	r3, #1
 8004a74:	e000      	b.n	8004a78 <HAL_GPIO_Init+0x204>
 8004a76:	2300      	movs	r3, #0
 8004a78:	69fa      	ldr	r2, [r7, #28]
 8004a7a:	f002 0203 	and.w	r2, r2, #3
 8004a7e:	0092      	lsls	r2, r2, #2
 8004a80:	4093      	lsls	r3, r2
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a88:	4935      	ldr	r1, [pc, #212]	@ (8004b60 <HAL_GPIO_Init+0x2ec>)
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	089b      	lsrs	r3, r3, #2
 8004a8e:	3302      	adds	r3, #2
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a96:	4b38      	ldr	r3, [pc, #224]	@ (8004b78 <HAL_GPIO_Init+0x304>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	43db      	mvns	r3, r3
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004aba:	4a2f      	ldr	r2, [pc, #188]	@ (8004b78 <HAL_GPIO_Init+0x304>)
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ac0:	4b2d      	ldr	r3, [pc, #180]	@ (8004b78 <HAL_GPIO_Init+0x304>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	43db      	mvns	r3, r3
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	4013      	ands	r3, r2
 8004ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ae4:	4a24      	ldr	r2, [pc, #144]	@ (8004b78 <HAL_GPIO_Init+0x304>)
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004aea:	4b23      	ldr	r3, [pc, #140]	@ (8004b78 <HAL_GPIO_Init+0x304>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	43db      	mvns	r3, r3
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	4013      	ands	r3, r2
 8004af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004b0e:	4a1a      	ldr	r2, [pc, #104]	@ (8004b78 <HAL_GPIO_Init+0x304>)
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b14:	4b18      	ldr	r3, [pc, #96]	@ (8004b78 <HAL_GPIO_Init+0x304>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	43db      	mvns	r3, r3
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	4013      	ands	r3, r2
 8004b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b38:	4a0f      	ldr	r2, [pc, #60]	@ (8004b78 <HAL_GPIO_Init+0x304>)
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	3301      	adds	r3, #1
 8004b42:	61fb      	str	r3, [r7, #28]
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	2b0f      	cmp	r3, #15
 8004b48:	f67f aea2 	bls.w	8004890 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b4c:	bf00      	nop
 8004b4e:	bf00      	nop
 8004b50:	3724      	adds	r7, #36	@ 0x24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	40013800 	.word	0x40013800
 8004b64:	40020000 	.word	0x40020000
 8004b68:	40020400 	.word	0x40020400
 8004b6c:	40020800 	.word	0x40020800
 8004b70:	40020c00 	.word	0x40020c00
 8004b74:	40021000 	.word	0x40021000
 8004b78:	40013c00 	.word	0x40013c00

08004b7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	460b      	mov	r3, r1
 8004b86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	691a      	ldr	r2, [r3, #16]
 8004b8c:	887b      	ldrh	r3, [r7, #2]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b94:	2301      	movs	r3, #1
 8004b96:	73fb      	strb	r3, [r7, #15]
 8004b98:	e001      	b.n	8004b9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	807b      	strh	r3, [r7, #2]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bbc:	787b      	ldrb	r3, [r7, #1]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bc2:	887a      	ldrh	r2, [r7, #2]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004bc8:	e003      	b.n	8004bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bca:	887b      	ldrh	r3, [r7, #2]
 8004bcc:	041a      	lsls	r2, r3, #16
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	619a      	str	r2, [r3, #24]
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b085      	sub	sp, #20
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
 8004be6:	460b      	mov	r3, r1
 8004be8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004bf0:	887a      	ldrh	r2, [r7, #2]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	041a      	lsls	r2, r3, #16
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	43d9      	mvns	r1, r3
 8004bfc:	887b      	ldrh	r3, [r7, #2]
 8004bfe:	400b      	ands	r3, r1
 8004c00:	431a      	orrs	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	619a      	str	r2, [r3, #24]
}
 8004c06:	bf00      	nop
 8004c08:	3714      	adds	r7, #20
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
	...

08004c14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004c1e:	4b08      	ldr	r3, [pc, #32]	@ (8004c40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c20:	695a      	ldr	r2, [r3, #20]
 8004c22:	88fb      	ldrh	r3, [r7, #6]
 8004c24:	4013      	ands	r3, r2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d006      	beq.n	8004c38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004c2a:	4a05      	ldr	r2, [pc, #20]	@ (8004c40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004c2c:	88fb      	ldrh	r3, [r7, #6]
 8004c2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004c30:	88fb      	ldrh	r3, [r7, #6]
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fe f86c 	bl	8002d10 <HAL_GPIO_EXTI_Callback>
  }
}
 8004c38:	bf00      	nop
 8004c3a:	3708      	adds	r7, #8
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	40013c00 	.word	0x40013c00

08004c44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d101      	bne.n	8004c56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e12b      	b.n	8004eae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d106      	bne.n	8004c70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff f91c 	bl	8003ea8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2224      	movs	r2, #36	@ 0x24
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0201 	bic.w	r2, r2, #1
 8004c86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ca6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ca8:	f001 ff10 	bl	8006acc <HAL_RCC_GetPCLK1Freq>
 8004cac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	4a81      	ldr	r2, [pc, #516]	@ (8004eb8 <HAL_I2C_Init+0x274>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d807      	bhi.n	8004cc8 <HAL_I2C_Init+0x84>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	4a80      	ldr	r2, [pc, #512]	@ (8004ebc <HAL_I2C_Init+0x278>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	bf94      	ite	ls
 8004cc0:	2301      	movls	r3, #1
 8004cc2:	2300      	movhi	r3, #0
 8004cc4:	b2db      	uxtb	r3, r3
 8004cc6:	e006      	b.n	8004cd6 <HAL_I2C_Init+0x92>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	4a7d      	ldr	r2, [pc, #500]	@ (8004ec0 <HAL_I2C_Init+0x27c>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	bf94      	ite	ls
 8004cd0:	2301      	movls	r3, #1
 8004cd2:	2300      	movhi	r3, #0
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e0e7      	b.n	8004eae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	4a78      	ldr	r2, [pc, #480]	@ (8004ec4 <HAL_I2C_Init+0x280>)
 8004ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce6:	0c9b      	lsrs	r3, r3, #18
 8004ce8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	4a6a      	ldr	r2, [pc, #424]	@ (8004eb8 <HAL_I2C_Init+0x274>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d802      	bhi.n	8004d18 <HAL_I2C_Init+0xd4>
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	3301      	adds	r3, #1
 8004d16:	e009      	b.n	8004d2c <HAL_I2C_Init+0xe8>
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004d1e:	fb02 f303 	mul.w	r3, r2, r3
 8004d22:	4a69      	ldr	r2, [pc, #420]	@ (8004ec8 <HAL_I2C_Init+0x284>)
 8004d24:	fba2 2303 	umull	r2, r3, r2, r3
 8004d28:	099b      	lsrs	r3, r3, #6
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	6812      	ldr	r2, [r2, #0]
 8004d30:	430b      	orrs	r3, r1
 8004d32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004d3e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	495c      	ldr	r1, [pc, #368]	@ (8004eb8 <HAL_I2C_Init+0x274>)
 8004d48:	428b      	cmp	r3, r1
 8004d4a:	d819      	bhi.n	8004d80 <HAL_I2C_Init+0x13c>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	1e59      	subs	r1, r3, #1
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d5a:	1c59      	adds	r1, r3, #1
 8004d5c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004d60:	400b      	ands	r3, r1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00a      	beq.n	8004d7c <HAL_I2C_Init+0x138>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	1e59      	subs	r1, r3, #1
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d74:	3301      	adds	r3, #1
 8004d76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d7a:	e051      	b.n	8004e20 <HAL_I2C_Init+0x1dc>
 8004d7c:	2304      	movs	r3, #4
 8004d7e:	e04f      	b.n	8004e20 <HAL_I2C_Init+0x1dc>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d111      	bne.n	8004dac <HAL_I2C_Init+0x168>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	1e58      	subs	r0, r3, #1
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6859      	ldr	r1, [r3, #4]
 8004d90:	460b      	mov	r3, r1
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	440b      	add	r3, r1
 8004d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	bf0c      	ite	eq
 8004da4:	2301      	moveq	r3, #1
 8004da6:	2300      	movne	r3, #0
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	e012      	b.n	8004dd2 <HAL_I2C_Init+0x18e>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	1e58      	subs	r0, r3, #1
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6859      	ldr	r1, [r3, #4]
 8004db4:	460b      	mov	r3, r1
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	440b      	add	r3, r1
 8004dba:	0099      	lsls	r1, r3, #2
 8004dbc:	440b      	add	r3, r1
 8004dbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	bf0c      	ite	eq
 8004dcc:	2301      	moveq	r3, #1
 8004dce:	2300      	movne	r3, #0
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <HAL_I2C_Init+0x196>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e022      	b.n	8004e20 <HAL_I2C_Init+0x1dc>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10e      	bne.n	8004e00 <HAL_I2C_Init+0x1bc>
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	1e58      	subs	r0, r3, #1
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6859      	ldr	r1, [r3, #4]
 8004dea:	460b      	mov	r3, r1
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	440b      	add	r3, r1
 8004df0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004df4:	3301      	adds	r3, #1
 8004df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dfe:	e00f      	b.n	8004e20 <HAL_I2C_Init+0x1dc>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	1e58      	subs	r0, r3, #1
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6859      	ldr	r1, [r3, #4]
 8004e08:	460b      	mov	r3, r1
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	440b      	add	r3, r1
 8004e0e:	0099      	lsls	r1, r3, #2
 8004e10:	440b      	add	r3, r1
 8004e12:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e16:	3301      	adds	r3, #1
 8004e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004e20:	6879      	ldr	r1, [r7, #4]
 8004e22:	6809      	ldr	r1, [r1, #0]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69da      	ldr	r2, [r3, #28]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a1b      	ldr	r3, [r3, #32]
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004e4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6911      	ldr	r1, [r2, #16]
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	68d2      	ldr	r2, [r2, #12]
 8004e5a:	4311      	orrs	r1, r2
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6812      	ldr	r2, [r2, #0]
 8004e60:	430b      	orrs	r3, r1
 8004e62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	695a      	ldr	r2, [r3, #20]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	431a      	orrs	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0201 	orr.w	r2, r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	000186a0 	.word	0x000186a0
 8004ebc:	001e847f 	.word	0x001e847f
 8004ec0:	003d08ff 	.word	0x003d08ff
 8004ec4:	431bde83 	.word	0x431bde83
 8004ec8:	10624dd3 	.word	0x10624dd3

08004ecc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b088      	sub	sp, #32
 8004ed0:	af02      	add	r7, sp, #8
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	607a      	str	r2, [r7, #4]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	460b      	mov	r3, r1
 8004eda:	817b      	strh	r3, [r7, #10]
 8004edc:	4613      	mov	r3, r2
 8004ede:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ee0:	f7ff fb86 	bl	80045f0 <HAL_GetTick>
 8004ee4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b20      	cmp	r3, #32
 8004ef0:	f040 80e0 	bne.w	80050b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	9300      	str	r3, [sp, #0]
 8004ef8:	2319      	movs	r3, #25
 8004efa:	2201      	movs	r2, #1
 8004efc:	4970      	ldr	r1, [pc, #448]	@ (80050c0 <HAL_I2C_Master_Transmit+0x1f4>)
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f000 ff7e 	bl	8005e00 <I2C_WaitOnFlagUntilTimeout>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	e0d3      	b.n	80050b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d101      	bne.n	8004f1c <HAL_I2C_Master_Transmit+0x50>
 8004f18:	2302      	movs	r3, #2
 8004f1a:	e0cc      	b.n	80050b6 <HAL_I2C_Master_Transmit+0x1ea>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d007      	beq.n	8004f42 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0201 	orr.w	r2, r2, #1
 8004f40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2221      	movs	r2, #33	@ 0x21
 8004f56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2210      	movs	r2, #16
 8004f5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	893a      	ldrh	r2, [r7, #8]
 8004f72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	4a50      	ldr	r2, [pc, #320]	@ (80050c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004f82:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004f84:	8979      	ldrh	r1, [r7, #10]
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	6a3a      	ldr	r2, [r7, #32]
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 fd00 	bl	8005990 <I2C_MasterRequestWrite>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d001      	beq.n	8004f9a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e08d      	b.n	80050b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	613b      	str	r3, [r7, #16]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	613b      	str	r3, [r7, #16]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	613b      	str	r3, [r7, #16]
 8004fae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004fb0:	e066      	b.n	8005080 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	6a39      	ldr	r1, [r7, #32]
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f001 f83c 	bl	8006034 <I2C_WaitOnTXEFlagUntilTimeout>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00d      	beq.n	8004fde <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	d107      	bne.n	8004fda <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e06b      	b.n	80050b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe2:	781a      	ldrb	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fee:	1c5a      	adds	r2, r3, #1
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005006:	3b01      	subs	r3, #1
 8005008:	b29a      	uxth	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	f003 0304 	and.w	r3, r3, #4
 8005018:	2b04      	cmp	r3, #4
 800501a:	d11b      	bne.n	8005054 <HAL_I2C_Master_Transmit+0x188>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005020:	2b00      	cmp	r3, #0
 8005022:	d017      	beq.n	8005054 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005028:	781a      	ldrb	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005034:	1c5a      	adds	r2, r3, #1
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800503e:	b29b      	uxth	r3, r3
 8005040:	3b01      	subs	r3, #1
 8005042:	b29a      	uxth	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800504c:	3b01      	subs	r3, #1
 800504e:	b29a      	uxth	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	6a39      	ldr	r1, [r7, #32]
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f001 f833 	bl	80060c4 <I2C_WaitOnBTFFlagUntilTimeout>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00d      	beq.n	8005080 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005068:	2b04      	cmp	r3, #4
 800506a:	d107      	bne.n	800507c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800507a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e01a      	b.n	80050b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005084:	2b00      	cmp	r3, #0
 8005086:	d194      	bne.n	8004fb2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005096:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2220      	movs	r2, #32
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80050b0:	2300      	movs	r3, #0
 80050b2:	e000      	b.n	80050b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80050b4:	2302      	movs	r3, #2
  }
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3718      	adds	r7, #24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	00100002 	.word	0x00100002
 80050c4:	ffff0000 	.word	0xffff0000

080050c8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08c      	sub	sp, #48	@ 0x30
 80050cc:	af02      	add	r7, sp, #8
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	607a      	str	r2, [r7, #4]
 80050d2:	461a      	mov	r2, r3
 80050d4:	460b      	mov	r3, r1
 80050d6:	817b      	strh	r3, [r7, #10]
 80050d8:	4613      	mov	r3, r2
 80050da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050dc:	f7ff fa88 	bl	80045f0 <HAL_GetTick>
 80050e0:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b20      	cmp	r3, #32
 80050ec:	f040 8217 	bne.w	800551e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	2319      	movs	r3, #25
 80050f6:	2201      	movs	r2, #1
 80050f8:	497c      	ldr	r1, [pc, #496]	@ (80052ec <HAL_I2C_Master_Receive+0x224>)
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f000 fe80 	bl	8005e00 <I2C_WaitOnFlagUntilTimeout>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005106:	2302      	movs	r3, #2
 8005108:	e20a      	b.n	8005520 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005110:	2b01      	cmp	r3, #1
 8005112:	d101      	bne.n	8005118 <HAL_I2C_Master_Receive+0x50>
 8005114:	2302      	movs	r3, #2
 8005116:	e203      	b.n	8005520 <HAL_I2C_Master_Receive+0x458>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b01      	cmp	r3, #1
 800512c:	d007      	beq.n	800513e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f042 0201 	orr.w	r2, r2, #1
 800513c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800514c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2222      	movs	r2, #34	@ 0x22
 8005152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2210      	movs	r2, #16
 800515a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	893a      	ldrh	r2, [r7, #8]
 800516e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005174:	b29a      	uxth	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	4a5c      	ldr	r2, [pc, #368]	@ (80052f0 <HAL_I2C_Master_Receive+0x228>)
 800517e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005180:	8979      	ldrh	r1, [r7, #10]
 8005182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005184:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005186:	68f8      	ldr	r0, [r7, #12]
 8005188:	f000 fc84 	bl	8005a94 <I2C_MasterRequestRead>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e1c4      	b.n	8005520 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800519a:	2b00      	cmp	r3, #0
 800519c:	d113      	bne.n	80051c6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800519e:	2300      	movs	r3, #0
 80051a0:	623b      	str	r3, [r7, #32]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	623b      	str	r3, [r7, #32]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	623b      	str	r3, [r7, #32]
 80051b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	e198      	b.n	80054f8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d11b      	bne.n	8005206 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051de:	2300      	movs	r3, #0
 80051e0:	61fb      	str	r3, [r7, #28]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	61fb      	str	r3, [r7, #28]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	61fb      	str	r3, [r7, #28]
 80051f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	e178      	b.n	80054f8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800520a:	2b02      	cmp	r3, #2
 800520c:	d11b      	bne.n	8005246 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800521c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800522c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800522e:	2300      	movs	r3, #0
 8005230:	61bb      	str	r3, [r7, #24]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	61bb      	str	r3, [r7, #24]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	61bb      	str	r3, [r7, #24]
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	e158      	b.n	80054f8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005254:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005256:	2300      	movs	r3, #0
 8005258:	617b      	str	r3, [r7, #20]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	617b      	str	r3, [r7, #20]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	617b      	str	r3, [r7, #20]
 800526a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800526c:	e144      	b.n	80054f8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005272:	2b03      	cmp	r3, #3
 8005274:	f200 80f1 	bhi.w	800545a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800527c:	2b01      	cmp	r3, #1
 800527e:	d123      	bne.n	80052c8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005280:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005282:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 ff65 	bl	8006154 <I2C_WaitOnRXNEFlagUntilTimeout>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e145      	b.n	8005520 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691a      	ldr	r2, [r3, #16]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529e:	b2d2      	uxtb	r2, r2
 80052a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a6:	1c5a      	adds	r2, r3, #1
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052b0:	3b01      	subs	r3, #1
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052bc:	b29b      	uxth	r3, r3
 80052be:	3b01      	subs	r3, #1
 80052c0:	b29a      	uxth	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80052c6:	e117      	b.n	80054f8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d14e      	bne.n	800536e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d2:	9300      	str	r3, [sp, #0]
 80052d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d6:	2200      	movs	r2, #0
 80052d8:	4906      	ldr	r1, [pc, #24]	@ (80052f4 <HAL_I2C_Master_Receive+0x22c>)
 80052da:	68f8      	ldr	r0, [r7, #12]
 80052dc:	f000 fd90 	bl	8005e00 <I2C_WaitOnFlagUntilTimeout>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d008      	beq.n	80052f8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e11a      	b.n	8005520 <HAL_I2C_Master_Receive+0x458>
 80052ea:	bf00      	nop
 80052ec:	00100002 	.word	0x00100002
 80052f0:	ffff0000 	.word	0xffff0000
 80052f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005306:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	691a      	ldr	r2, [r3, #16]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005312:	b2d2      	uxtb	r2, r2
 8005314:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531a:	1c5a      	adds	r2, r3, #1
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005324:	3b01      	subs	r3, #1
 8005326:	b29a      	uxth	r2, r3
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005330:	b29b      	uxth	r3, r3
 8005332:	3b01      	subs	r3, #1
 8005334:	b29a      	uxth	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	691a      	ldr	r2, [r3, #16]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005344:	b2d2      	uxtb	r2, r2
 8005346:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534c:	1c5a      	adds	r2, r3, #1
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005356:	3b01      	subs	r3, #1
 8005358:	b29a      	uxth	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005362:	b29b      	uxth	r3, r3
 8005364:	3b01      	subs	r3, #1
 8005366:	b29a      	uxth	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800536c:	e0c4      	b.n	80054f8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800536e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005374:	2200      	movs	r2, #0
 8005376:	496c      	ldr	r1, [pc, #432]	@ (8005528 <HAL_I2C_Master_Receive+0x460>)
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f000 fd41 	bl	8005e00 <I2C_WaitOnFlagUntilTimeout>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d001      	beq.n	8005388 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e0cb      	b.n	8005520 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005396:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	691a      	ldr	r2, [r3, #16]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a2:	b2d2      	uxtb	r2, r2
 80053a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053aa:	1c5a      	adds	r2, r3, #1
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d0:	2200      	movs	r2, #0
 80053d2:	4955      	ldr	r1, [pc, #340]	@ (8005528 <HAL_I2C_Master_Receive+0x460>)
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f000 fd13 	bl	8005e00 <I2C_WaitOnFlagUntilTimeout>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d001      	beq.n	80053e4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e09d      	b.n	8005520 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	691a      	ldr	r2, [r3, #16]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fe:	b2d2      	uxtb	r2, r2
 8005400:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005406:	1c5a      	adds	r2, r3, #1
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005410:	3b01      	subs	r3, #1
 8005412:	b29a      	uxth	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800541c:	b29b      	uxth	r3, r3
 800541e:	3b01      	subs	r3, #1
 8005420:	b29a      	uxth	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	691a      	ldr	r2, [r3, #16]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005430:	b2d2      	uxtb	r2, r2
 8005432:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005438:	1c5a      	adds	r2, r3, #1
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005442:	3b01      	subs	r3, #1
 8005444:	b29a      	uxth	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800544e:	b29b      	uxth	r3, r3
 8005450:	3b01      	subs	r3, #1
 8005452:	b29a      	uxth	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005458:	e04e      	b.n	80054f8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800545a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800545c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f000 fe78 	bl	8006154 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e058      	b.n	8005520 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	691a      	ldr	r2, [r3, #16]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005478:	b2d2      	uxtb	r2, r2
 800547a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005480:	1c5a      	adds	r2, r3, #1
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800548a:	3b01      	subs	r3, #1
 800548c:	b29a      	uxth	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005496:	b29b      	uxth	r3, r3
 8005498:	3b01      	subs	r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	f003 0304 	and.w	r3, r3, #4
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	d124      	bne.n	80054f8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054b2:	2b03      	cmp	r3, #3
 80054b4:	d107      	bne.n	80054c6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054c4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	691a      	ldr	r2, [r3, #16]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d0:	b2d2      	uxtb	r2, r2
 80054d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054d8:	1c5a      	adds	r2, r3, #1
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054e2:	3b01      	subs	r3, #1
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	3b01      	subs	r3, #1
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f47f aeb6 	bne.w	800526e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2220      	movs	r2, #32
 8005506:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800551a:	2300      	movs	r3, #0
 800551c:	e000      	b.n	8005520 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800551e:	2302      	movs	r3, #2
  }
}
 8005520:	4618      	mov	r0, r3
 8005522:	3728      	adds	r7, #40	@ 0x28
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	00010004 	.word	0x00010004

0800552c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b08c      	sub	sp, #48	@ 0x30
 8005530:	af02      	add	r7, sp, #8
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	4608      	mov	r0, r1
 8005536:	4611      	mov	r1, r2
 8005538:	461a      	mov	r2, r3
 800553a:	4603      	mov	r3, r0
 800553c:	817b      	strh	r3, [r7, #10]
 800553e:	460b      	mov	r3, r1
 8005540:	813b      	strh	r3, [r7, #8]
 8005542:	4613      	mov	r3, r2
 8005544:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005546:	f7ff f853 	bl	80045f0 <HAL_GetTick>
 800554a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b20      	cmp	r3, #32
 8005556:	f040 8214 	bne.w	8005982 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800555a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	2319      	movs	r3, #25
 8005560:	2201      	movs	r2, #1
 8005562:	497b      	ldr	r1, [pc, #492]	@ (8005750 <HAL_I2C_Mem_Read+0x224>)
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f000 fc4b 	bl	8005e00 <I2C_WaitOnFlagUntilTimeout>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d001      	beq.n	8005574 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005570:	2302      	movs	r3, #2
 8005572:	e207      	b.n	8005984 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800557a:	2b01      	cmp	r3, #1
 800557c:	d101      	bne.n	8005582 <HAL_I2C_Mem_Read+0x56>
 800557e:	2302      	movs	r3, #2
 8005580:	e200      	b.n	8005984 <HAL_I2C_Mem_Read+0x458>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b01      	cmp	r3, #1
 8005596:	d007      	beq.n	80055a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f042 0201 	orr.w	r2, r2, #1
 80055a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80055b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2222      	movs	r2, #34	@ 0x22
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2240      	movs	r2, #64	@ 0x40
 80055c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80055d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055de:	b29a      	uxth	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4a5b      	ldr	r2, [pc, #364]	@ (8005754 <HAL_I2C_Mem_Read+0x228>)
 80055e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80055ea:	88f8      	ldrh	r0, [r7, #6]
 80055ec:	893a      	ldrh	r2, [r7, #8]
 80055ee:	8979      	ldrh	r1, [r7, #10]
 80055f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f2:	9301      	str	r3, [sp, #4]
 80055f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	4603      	mov	r3, r0
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f000 fb18 	bl	8005c30 <I2C_RequestMemoryRead>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e1bc      	b.n	8005984 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800560e:	2b00      	cmp	r3, #0
 8005610:	d113      	bne.n	800563a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005612:	2300      	movs	r3, #0
 8005614:	623b      	str	r3, [r7, #32]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	623b      	str	r3, [r7, #32]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	623b      	str	r3, [r7, #32]
 8005626:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005636:	601a      	str	r2, [r3, #0]
 8005638:	e190      	b.n	800595c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800563e:	2b01      	cmp	r3, #1
 8005640:	d11b      	bne.n	800567a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005650:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005652:	2300      	movs	r3, #0
 8005654:	61fb      	str	r3, [r7, #28]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	61fb      	str	r3, [r7, #28]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	61fb      	str	r3, [r7, #28]
 8005666:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	e170      	b.n	800595c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800567e:	2b02      	cmp	r3, #2
 8005680:	d11b      	bne.n	80056ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005690:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056a2:	2300      	movs	r3, #0
 80056a4:	61bb      	str	r3, [r7, #24]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	61bb      	str	r3, [r7, #24]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	61bb      	str	r3, [r7, #24]
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	e150      	b.n	800595c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ba:	2300      	movs	r3, #0
 80056bc:	617b      	str	r3, [r7, #20]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	617b      	str	r3, [r7, #20]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80056d0:	e144      	b.n	800595c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056d6:	2b03      	cmp	r3, #3
 80056d8:	f200 80f1 	bhi.w	80058be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d123      	bne.n	800572c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f000 fd33 	bl	8006154 <I2C_WaitOnRXNEFlagUntilTimeout>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e145      	b.n	8005984 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	691a      	ldr	r2, [r3, #16]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005714:	3b01      	subs	r3, #1
 8005716:	b29a      	uxth	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005720:	b29b      	uxth	r3, r3
 8005722:	3b01      	subs	r3, #1
 8005724:	b29a      	uxth	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800572a:	e117      	b.n	800595c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005730:	2b02      	cmp	r3, #2
 8005732:	d14e      	bne.n	80057d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005736:	9300      	str	r3, [sp, #0]
 8005738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800573a:	2200      	movs	r2, #0
 800573c:	4906      	ldr	r1, [pc, #24]	@ (8005758 <HAL_I2C_Mem_Read+0x22c>)
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f000 fb5e 	bl	8005e00 <I2C_WaitOnFlagUntilTimeout>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d008      	beq.n	800575c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e11a      	b.n	8005984 <HAL_I2C_Mem_Read+0x458>
 800574e:	bf00      	nop
 8005750:	00100002 	.word	0x00100002
 8005754:	ffff0000 	.word	0xffff0000
 8005758:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800576a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	691a      	ldr	r2, [r3, #16]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005776:	b2d2      	uxtb	r2, r2
 8005778:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005788:	3b01      	subs	r3, #1
 800578a:	b29a      	uxth	r2, r3
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005794:	b29b      	uxth	r3, r3
 8005796:	3b01      	subs	r3, #1
 8005798:	b29a      	uxth	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	691a      	ldr	r2, [r3, #16]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a8:	b2d2      	uxtb	r2, r2
 80057aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b0:	1c5a      	adds	r2, r3, #1
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057ba:	3b01      	subs	r3, #1
 80057bc:	b29a      	uxth	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	3b01      	subs	r3, #1
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80057d0:	e0c4      	b.n	800595c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d4:	9300      	str	r3, [sp, #0]
 80057d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d8:	2200      	movs	r2, #0
 80057da:	496c      	ldr	r1, [pc, #432]	@ (800598c <HAL_I2C_Mem_Read+0x460>)
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 fb0f 	bl	8005e00 <I2C_WaitOnFlagUntilTimeout>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e0cb      	b.n	8005984 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	691a      	ldr	r2, [r3, #16]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005806:	b2d2      	uxtb	r2, r2
 8005808:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580e:	1c5a      	adds	r2, r3, #1
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005818:	3b01      	subs	r3, #1
 800581a:	b29a      	uxth	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005824:	b29b      	uxth	r3, r3
 8005826:	3b01      	subs	r3, #1
 8005828:	b29a      	uxth	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800582e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005834:	2200      	movs	r2, #0
 8005836:	4955      	ldr	r1, [pc, #340]	@ (800598c <HAL_I2C_Mem_Read+0x460>)
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f000 fae1 	bl	8005e00 <I2C_WaitOnFlagUntilTimeout>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d001      	beq.n	8005848 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e09d      	b.n	8005984 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005856:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	691a      	ldr	r2, [r3, #16]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005862:	b2d2      	uxtb	r2, r2
 8005864:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586a:	1c5a      	adds	r2, r3, #1
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005874:	3b01      	subs	r3, #1
 8005876:	b29a      	uxth	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005880:	b29b      	uxth	r3, r3
 8005882:	3b01      	subs	r3, #1
 8005884:	b29a      	uxth	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	691a      	ldr	r2, [r3, #16]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005894:	b2d2      	uxtb	r2, r2
 8005896:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800589c:	1c5a      	adds	r2, r3, #1
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058a6:	3b01      	subs	r3, #1
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	3b01      	subs	r3, #1
 80058b6:	b29a      	uxth	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80058bc:	e04e      	b.n	800595c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80058c2:	68f8      	ldr	r0, [r7, #12]
 80058c4:	f000 fc46 	bl	8006154 <I2C_WaitOnRXNEFlagUntilTimeout>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e058      	b.n	8005984 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	691a      	ldr	r2, [r3, #16]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058dc:	b2d2      	uxtb	r2, r2
 80058de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e4:	1c5a      	adds	r2, r3, #1
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058ee:	3b01      	subs	r3, #1
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	3b01      	subs	r3, #1
 80058fe:	b29a      	uxth	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	f003 0304 	and.w	r3, r3, #4
 800590e:	2b04      	cmp	r3, #4
 8005910:	d124      	bne.n	800595c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005916:	2b03      	cmp	r3, #3
 8005918:	d107      	bne.n	800592a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005928:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	691a      	ldr	r2, [r3, #16]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005934:	b2d2      	uxtb	r2, r2
 8005936:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593c:	1c5a      	adds	r2, r3, #1
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005946:	3b01      	subs	r3, #1
 8005948:	b29a      	uxth	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005952:	b29b      	uxth	r3, r3
 8005954:	3b01      	subs	r3, #1
 8005956:	b29a      	uxth	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005960:	2b00      	cmp	r3, #0
 8005962:	f47f aeb6 	bne.w	80056d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2220      	movs	r2, #32
 800596a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800597e:	2300      	movs	r3, #0
 8005980:	e000      	b.n	8005984 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005982:	2302      	movs	r3, #2
  }
}
 8005984:	4618      	mov	r0, r3
 8005986:	3728      	adds	r7, #40	@ 0x28
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	00010004 	.word	0x00010004

08005990 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b088      	sub	sp, #32
 8005994:	af02      	add	r7, sp, #8
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	607a      	str	r2, [r7, #4]
 800599a:	603b      	str	r3, [r7, #0]
 800599c:	460b      	mov	r3, r1
 800599e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2b08      	cmp	r3, #8
 80059aa:	d006      	beq.n	80059ba <I2C_MasterRequestWrite+0x2a>
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d003      	beq.n	80059ba <I2C_MasterRequestWrite+0x2a>
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80059b8:	d108      	bne.n	80059cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059c8:	601a      	str	r2, [r3, #0]
 80059ca:	e00b      	b.n	80059e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059d0:	2b12      	cmp	r3, #18
 80059d2:	d107      	bne.n	80059e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 fa05 	bl	8005e00 <I2C_WaitOnFlagUntilTimeout>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00d      	beq.n	8005a18 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a0a:	d103      	bne.n	8005a14 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a12:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e035      	b.n	8005a84 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a20:	d108      	bne.n	8005a34 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005a22:	897b      	ldrh	r3, [r7, #10]
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	461a      	mov	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005a30:	611a      	str	r2, [r3, #16]
 8005a32:	e01b      	b.n	8005a6c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005a34:	897b      	ldrh	r3, [r7, #10]
 8005a36:	11db      	asrs	r3, r3, #7
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	f003 0306 	and.w	r3, r3, #6
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	f063 030f 	orn	r3, r3, #15
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	490e      	ldr	r1, [pc, #56]	@ (8005a8c <I2C_MasterRequestWrite+0xfc>)
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f000 fa4e 	bl	8005ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e010      	b.n	8005a84 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005a62:	897b      	ldrh	r3, [r7, #10]
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	4907      	ldr	r1, [pc, #28]	@ (8005a90 <I2C_MasterRequestWrite+0x100>)
 8005a72:	68f8      	ldr	r0, [r7, #12]
 8005a74:	f000 fa3e 	bl	8005ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e000      	b.n	8005a84 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	00010008 	.word	0x00010008
 8005a90:	00010002 	.word	0x00010002

08005a94 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b088      	sub	sp, #32
 8005a98:	af02      	add	r7, sp, #8
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	607a      	str	r2, [r7, #4]
 8005a9e:	603b      	str	r3, [r7, #0]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005ab8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d006      	beq.n	8005ace <I2C_MasterRequestRead+0x3a>
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d003      	beq.n	8005ace <I2C_MasterRequestRead+0x3a>
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005acc:	d108      	bne.n	8005ae0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	e00b      	b.n	8005af8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae4:	2b11      	cmp	r3, #17
 8005ae6:	d107      	bne.n	8005af8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005af6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b04:	68f8      	ldr	r0, [r7, #12]
 8005b06:	f000 f97b 	bl	8005e00 <I2C_WaitOnFlagUntilTimeout>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00d      	beq.n	8005b2c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b1e:	d103      	bne.n	8005b28 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e079      	b.n	8005c20 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b34:	d108      	bne.n	8005b48 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005b36:	897b      	ldrh	r3, [r7, #10]
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	f043 0301 	orr.w	r3, r3, #1
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	611a      	str	r2, [r3, #16]
 8005b46:	e05f      	b.n	8005c08 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005b48:	897b      	ldrh	r3, [r7, #10]
 8005b4a:	11db      	asrs	r3, r3, #7
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	f003 0306 	and.w	r3, r3, #6
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	f063 030f 	orn	r3, r3, #15
 8005b58:	b2da      	uxtb	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	4930      	ldr	r1, [pc, #192]	@ (8005c28 <I2C_MasterRequestRead+0x194>)
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f000 f9c4 	bl	8005ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e054      	b.n	8005c20 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005b76:	897b      	ldrh	r3, [r7, #10]
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	4929      	ldr	r1, [pc, #164]	@ (8005c2c <I2C_MasterRequestRead+0x198>)
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 f9b4 	bl	8005ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e044      	b.n	8005c20 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b96:	2300      	movs	r3, #0
 8005b98:	613b      	str	r3, [r7, #16]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	613b      	str	r3, [r7, #16]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	613b      	str	r3, [r7, #16]
 8005baa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f000 f919 	bl	8005e00 <I2C_WaitOnFlagUntilTimeout>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00d      	beq.n	8005bf0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005be2:	d103      	bne.n	8005bec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bea:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005bec:	2303      	movs	r3, #3
 8005bee:	e017      	b.n	8005c20 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005bf0:	897b      	ldrh	r3, [r7, #10]
 8005bf2:	11db      	asrs	r3, r3, #7
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	f003 0306 	and.w	r3, r3, #6
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	f063 030e 	orn	r3, r3, #14
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	4907      	ldr	r1, [pc, #28]	@ (8005c2c <I2C_MasterRequestRead+0x198>)
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f000 f970 	bl	8005ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e000      	b.n	8005c20 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3718      	adds	r7, #24
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	00010008 	.word	0x00010008
 8005c2c:	00010002 	.word	0x00010002

08005c30 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b088      	sub	sp, #32
 8005c34:	af02      	add	r7, sp, #8
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	4608      	mov	r0, r1
 8005c3a:	4611      	mov	r1, r2
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	4603      	mov	r3, r0
 8005c40:	817b      	strh	r3, [r7, #10]
 8005c42:	460b      	mov	r3, r1
 8005c44:	813b      	strh	r3, [r7, #8]
 8005c46:	4613      	mov	r3, r2
 8005c48:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005c58:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f000 f8c2 	bl	8005e00 <I2C_WaitOnFlagUntilTimeout>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00d      	beq.n	8005c9e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c90:	d103      	bne.n	8005c9a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c98:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e0aa      	b.n	8005df4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c9e:	897b      	ldrh	r3, [r7, #10]
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005cac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb0:	6a3a      	ldr	r2, [r7, #32]
 8005cb2:	4952      	ldr	r1, [pc, #328]	@ (8005dfc <I2C_RequestMemoryRead+0x1cc>)
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f000 f91d 	bl	8005ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e097      	b.n	8005df4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	617b      	str	r3, [r7, #20]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	617b      	str	r3, [r7, #20]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	617b      	str	r3, [r7, #20]
 8005cd8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cdc:	6a39      	ldr	r1, [r7, #32]
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 f9a8 	bl	8006034 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00d      	beq.n	8005d06 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cee:	2b04      	cmp	r3, #4
 8005cf0:	d107      	bne.n	8005d02 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d00:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e076      	b.n	8005df4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d06:	88fb      	ldrh	r3, [r7, #6]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d105      	bne.n	8005d18 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d0c:	893b      	ldrh	r3, [r7, #8]
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	611a      	str	r2, [r3, #16]
 8005d16:	e021      	b.n	8005d5c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d18:	893b      	ldrh	r3, [r7, #8]
 8005d1a:	0a1b      	lsrs	r3, r3, #8
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d28:	6a39      	ldr	r1, [r7, #32]
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 f982 	bl	8006034 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00d      	beq.n	8005d52 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d3a:	2b04      	cmp	r3, #4
 8005d3c:	d107      	bne.n	8005d4e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d4c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e050      	b.n	8005df4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d52:	893b      	ldrh	r3, [r7, #8]
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d5e:	6a39      	ldr	r1, [r7, #32]
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f000 f967 	bl	8006034 <I2C_WaitOnTXEFlagUntilTimeout>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d00d      	beq.n	8005d88 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d70:	2b04      	cmp	r3, #4
 8005d72:	d107      	bne.n	8005d84 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d82:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e035      	b.n	8005df4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d96:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f000 f82b 	bl	8005e00 <I2C_WaitOnFlagUntilTimeout>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00d      	beq.n	8005dcc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dbe:	d103      	bne.n	8005dc8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dc6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e013      	b.n	8005df4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005dcc:	897b      	ldrh	r3, [r7, #10]
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	f043 0301 	orr.w	r3, r3, #1
 8005dd4:	b2da      	uxtb	r2, r3
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dde:	6a3a      	ldr	r2, [r7, #32]
 8005de0:	4906      	ldr	r1, [pc, #24]	@ (8005dfc <I2C_RequestMemoryRead+0x1cc>)
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 f886 	bl	8005ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d001      	beq.n	8005df2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e000      	b.n	8005df4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3718      	adds	r7, #24
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	00010002 	.word	0x00010002

08005e00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	603b      	str	r3, [r7, #0]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e10:	e048      	b.n	8005ea4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e18:	d044      	beq.n	8005ea4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e1a:	f7fe fbe9 	bl	80045f0 <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	683a      	ldr	r2, [r7, #0]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d302      	bcc.n	8005e30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d139      	bne.n	8005ea4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	0c1b      	lsrs	r3, r3, #16
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d10d      	bne.n	8005e56 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	43da      	mvns	r2, r3
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	4013      	ands	r3, r2
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	bf0c      	ite	eq
 8005e4c:	2301      	moveq	r3, #1
 8005e4e:	2300      	movne	r3, #0
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	461a      	mov	r2, r3
 8005e54:	e00c      	b.n	8005e70 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	43da      	mvns	r2, r3
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	4013      	ands	r3, r2
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	bf0c      	ite	eq
 8005e68:	2301      	moveq	r3, #1
 8005e6a:	2300      	movne	r3, #0
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	461a      	mov	r2, r3
 8005e70:	79fb      	ldrb	r3, [r7, #7]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d116      	bne.n	8005ea4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2220      	movs	r2, #32
 8005e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e90:	f043 0220 	orr.w	r2, r3, #32
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e023      	b.n	8005eec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	0c1b      	lsrs	r3, r3, #16
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d10d      	bne.n	8005eca <I2C_WaitOnFlagUntilTimeout+0xca>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	43da      	mvns	r2, r3
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	4013      	ands	r3, r2
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	bf0c      	ite	eq
 8005ec0:	2301      	moveq	r3, #1
 8005ec2:	2300      	movne	r3, #0
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	e00c      	b.n	8005ee4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	43da      	mvns	r2, r3
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	bf0c      	ite	eq
 8005edc:	2301      	moveq	r3, #1
 8005ede:	2300      	movne	r3, #0
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	79fb      	ldrb	r3, [r7, #7]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d093      	beq.n	8005e12 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3710      	adds	r7, #16
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b084      	sub	sp, #16
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	607a      	str	r2, [r7, #4]
 8005f00:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f02:	e071      	b.n	8005fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f12:	d123      	bne.n	8005f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681a      	ldr	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f22:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005f2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2220      	movs	r2, #32
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f48:	f043 0204 	orr.w	r2, r3, #4
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e067      	b.n	800602c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f62:	d041      	beq.n	8005fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f64:	f7fe fb44 	bl	80045f0 <HAL_GetTick>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d302      	bcc.n	8005f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d136      	bne.n	8005fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	0c1b      	lsrs	r3, r3, #16
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d10c      	bne.n	8005f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	43da      	mvns	r2, r3
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	4013      	ands	r3, r2
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	bf14      	ite	ne
 8005f96:	2301      	movne	r3, #1
 8005f98:	2300      	moveq	r3, #0
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	e00b      	b.n	8005fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	43da      	mvns	r2, r3
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	4013      	ands	r3, r2
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	bf14      	ite	ne
 8005fb0:	2301      	movne	r3, #1
 8005fb2:	2300      	moveq	r3, #0
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d016      	beq.n	8005fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd4:	f043 0220 	orr.w	r2, r3, #32
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e021      	b.n	800602c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	0c1b      	lsrs	r3, r3, #16
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d10c      	bne.n	800600c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	695b      	ldr	r3, [r3, #20]
 8005ff8:	43da      	mvns	r2, r3
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	2b00      	cmp	r3, #0
 8006002:	bf14      	ite	ne
 8006004:	2301      	movne	r3, #1
 8006006:	2300      	moveq	r3, #0
 8006008:	b2db      	uxtb	r3, r3
 800600a:	e00b      	b.n	8006024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	43da      	mvns	r2, r3
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	4013      	ands	r3, r2
 8006018:	b29b      	uxth	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	bf14      	ite	ne
 800601e:	2301      	movne	r3, #1
 8006020:	2300      	moveq	r3, #0
 8006022:	b2db      	uxtb	r3, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	f47f af6d 	bne.w	8005f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800602a:	2300      	movs	r3, #0
}
 800602c:	4618      	mov	r0, r3
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006040:	e034      	b.n	80060ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f000 f8e3 	bl	800620e <I2C_IsAcknowledgeFailed>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d001      	beq.n	8006052 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e034      	b.n	80060bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006058:	d028      	beq.n	80060ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800605a:	f7fe fac9 	bl	80045f0 <HAL_GetTick>
 800605e:	4602      	mov	r2, r0
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	429a      	cmp	r2, r3
 8006068:	d302      	bcc.n	8006070 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d11d      	bne.n	80060ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800607a:	2b80      	cmp	r3, #128	@ 0x80
 800607c:	d016      	beq.n	80060ac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2220      	movs	r2, #32
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006098:	f043 0220 	orr.w	r2, r3, #32
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e007      	b.n	80060bc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060b6:	2b80      	cmp	r3, #128	@ 0x80
 80060b8:	d1c3      	bne.n	8006042 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80060ba:	2300      	movs	r3, #0
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80060d0:	e034      	b.n	800613c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 f89b 	bl	800620e <I2C_IsAcknowledgeFailed>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e034      	b.n	800614c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e8:	d028      	beq.n	800613c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ea:	f7fe fa81 	bl	80045f0 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d302      	bcc.n	8006100 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d11d      	bne.n	800613c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	695b      	ldr	r3, [r3, #20]
 8006106:	f003 0304 	and.w	r3, r3, #4
 800610a:	2b04      	cmp	r3, #4
 800610c:	d016      	beq.n	800613c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	2220      	movs	r2, #32
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006128:	f043 0220 	orr.w	r2, r3, #32
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e007      	b.n	800614c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	f003 0304 	and.w	r3, r3, #4
 8006146:	2b04      	cmp	r3, #4
 8006148:	d1c3      	bne.n	80060d2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006160:	e049      	b.n	80061f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	f003 0310 	and.w	r3, r3, #16
 800616c:	2b10      	cmp	r3, #16
 800616e:	d119      	bne.n	80061a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f06f 0210 	mvn.w	r2, #16
 8006178:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2220      	movs	r2, #32
 8006184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e030      	b.n	8006206 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061a4:	f7fe fa24 	bl	80045f0 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d302      	bcc.n	80061ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d11d      	bne.n	80061f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	695b      	ldr	r3, [r3, #20]
 80061c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061c4:	2b40      	cmp	r3, #64	@ 0x40
 80061c6:	d016      	beq.n	80061f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2200      	movs	r2, #0
 80061cc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2220      	movs	r2, #32
 80061d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061e2:	f043 0220 	orr.w	r2, r3, #32
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e007      	b.n	8006206 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006200:	2b40      	cmp	r3, #64	@ 0x40
 8006202:	d1ae      	bne.n	8006162 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800620e:	b480      	push	{r7}
 8006210:	b083      	sub	sp, #12
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	695b      	ldr	r3, [r3, #20]
 800621c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006220:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006224:	d11b      	bne.n	800625e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800622e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2220      	movs	r2, #32
 800623a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800624a:	f043 0204 	orr.w	r2, r3, #4
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	e000      	b.n	8006260 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e267      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d075      	beq.n	8006376 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800628a:	4b88      	ldr	r3, [pc, #544]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f003 030c 	and.w	r3, r3, #12
 8006292:	2b04      	cmp	r3, #4
 8006294:	d00c      	beq.n	80062b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006296:	4b85      	ldr	r3, [pc, #532]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800629e:	2b08      	cmp	r3, #8
 80062a0:	d112      	bne.n	80062c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062a2:	4b82      	ldr	r3, [pc, #520]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80062ae:	d10b      	bne.n	80062c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062b0:	4b7e      	ldr	r3, [pc, #504]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d05b      	beq.n	8006374 <HAL_RCC_OscConfig+0x108>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d157      	bne.n	8006374 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e242      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062d0:	d106      	bne.n	80062e0 <HAL_RCC_OscConfig+0x74>
 80062d2:	4b76      	ldr	r3, [pc, #472]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a75      	ldr	r2, [pc, #468]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 80062d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062dc:	6013      	str	r3, [r2, #0]
 80062de:	e01d      	b.n	800631c <HAL_RCC_OscConfig+0xb0>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80062e8:	d10c      	bne.n	8006304 <HAL_RCC_OscConfig+0x98>
 80062ea:	4b70      	ldr	r3, [pc, #448]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a6f      	ldr	r2, [pc, #444]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 80062f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062f4:	6013      	str	r3, [r2, #0]
 80062f6:	4b6d      	ldr	r3, [pc, #436]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a6c      	ldr	r2, [pc, #432]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 80062fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006300:	6013      	str	r3, [r2, #0]
 8006302:	e00b      	b.n	800631c <HAL_RCC_OscConfig+0xb0>
 8006304:	4b69      	ldr	r3, [pc, #420]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a68      	ldr	r2, [pc, #416]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 800630a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800630e:	6013      	str	r3, [r2, #0]
 8006310:	4b66      	ldr	r3, [pc, #408]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a65      	ldr	r2, [pc, #404]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 8006316:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800631a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d013      	beq.n	800634c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006324:	f7fe f964 	bl	80045f0 <HAL_GetTick>
 8006328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800632a:	e008      	b.n	800633e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800632c:	f7fe f960 	bl	80045f0 <HAL_GetTick>
 8006330:	4602      	mov	r2, r0
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	2b64      	cmp	r3, #100	@ 0x64
 8006338:	d901      	bls.n	800633e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e207      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800633e:	4b5b      	ldr	r3, [pc, #364]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d0f0      	beq.n	800632c <HAL_RCC_OscConfig+0xc0>
 800634a:	e014      	b.n	8006376 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800634c:	f7fe f950 	bl	80045f0 <HAL_GetTick>
 8006350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006352:	e008      	b.n	8006366 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006354:	f7fe f94c 	bl	80045f0 <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	2b64      	cmp	r3, #100	@ 0x64
 8006360:	d901      	bls.n	8006366 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e1f3      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006366:	4b51      	ldr	r3, [pc, #324]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1f0      	bne.n	8006354 <HAL_RCC_OscConfig+0xe8>
 8006372:	e000      	b.n	8006376 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006374:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d063      	beq.n	800644a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006382:	4b4a      	ldr	r3, [pc, #296]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f003 030c 	and.w	r3, r3, #12
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00b      	beq.n	80063a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800638e:	4b47      	ldr	r3, [pc, #284]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006396:	2b08      	cmp	r3, #8
 8006398:	d11c      	bne.n	80063d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800639a:	4b44      	ldr	r3, [pc, #272]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d116      	bne.n	80063d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063a6:	4b41      	ldr	r3, [pc, #260]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d005      	beq.n	80063be <HAL_RCC_OscConfig+0x152>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d001      	beq.n	80063be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e1c7      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063be:	4b3b      	ldr	r3, [pc, #236]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	4937      	ldr	r1, [pc, #220]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 80063ce:	4313      	orrs	r3, r2
 80063d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063d2:	e03a      	b.n	800644a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d020      	beq.n	800641e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063dc:	4b34      	ldr	r3, [pc, #208]	@ (80064b0 <HAL_RCC_OscConfig+0x244>)
 80063de:	2201      	movs	r2, #1
 80063e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063e2:	f7fe f905 	bl	80045f0 <HAL_GetTick>
 80063e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063e8:	e008      	b.n	80063fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063ea:	f7fe f901 	bl	80045f0 <HAL_GetTick>
 80063ee:	4602      	mov	r2, r0
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d901      	bls.n	80063fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80063f8:	2303      	movs	r3, #3
 80063fa:	e1a8      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063fc:	4b2b      	ldr	r3, [pc, #172]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0302 	and.w	r3, r3, #2
 8006404:	2b00      	cmp	r3, #0
 8006406:	d0f0      	beq.n	80063ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006408:	4b28      	ldr	r3, [pc, #160]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	691b      	ldr	r3, [r3, #16]
 8006414:	00db      	lsls	r3, r3, #3
 8006416:	4925      	ldr	r1, [pc, #148]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 8006418:	4313      	orrs	r3, r2
 800641a:	600b      	str	r3, [r1, #0]
 800641c:	e015      	b.n	800644a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800641e:	4b24      	ldr	r3, [pc, #144]	@ (80064b0 <HAL_RCC_OscConfig+0x244>)
 8006420:	2200      	movs	r2, #0
 8006422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006424:	f7fe f8e4 	bl	80045f0 <HAL_GetTick>
 8006428:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800642a:	e008      	b.n	800643e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800642c:	f7fe f8e0 	bl	80045f0 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	2b02      	cmp	r3, #2
 8006438:	d901      	bls.n	800643e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800643a:	2303      	movs	r3, #3
 800643c:	e187      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800643e:	4b1b      	ldr	r3, [pc, #108]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1f0      	bne.n	800642c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0308 	and.w	r3, r3, #8
 8006452:	2b00      	cmp	r3, #0
 8006454:	d036      	beq.n	80064c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	695b      	ldr	r3, [r3, #20]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d016      	beq.n	800648c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800645e:	4b15      	ldr	r3, [pc, #84]	@ (80064b4 <HAL_RCC_OscConfig+0x248>)
 8006460:	2201      	movs	r2, #1
 8006462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006464:	f7fe f8c4 	bl	80045f0 <HAL_GetTick>
 8006468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800646a:	e008      	b.n	800647e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800646c:	f7fe f8c0 	bl	80045f0 <HAL_GetTick>
 8006470:	4602      	mov	r2, r0
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	2b02      	cmp	r3, #2
 8006478:	d901      	bls.n	800647e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e167      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800647e:	4b0b      	ldr	r3, [pc, #44]	@ (80064ac <HAL_RCC_OscConfig+0x240>)
 8006480:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006482:	f003 0302 	and.w	r3, r3, #2
 8006486:	2b00      	cmp	r3, #0
 8006488:	d0f0      	beq.n	800646c <HAL_RCC_OscConfig+0x200>
 800648a:	e01b      	b.n	80064c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800648c:	4b09      	ldr	r3, [pc, #36]	@ (80064b4 <HAL_RCC_OscConfig+0x248>)
 800648e:	2200      	movs	r2, #0
 8006490:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006492:	f7fe f8ad 	bl	80045f0 <HAL_GetTick>
 8006496:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006498:	e00e      	b.n	80064b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800649a:	f7fe f8a9 	bl	80045f0 <HAL_GetTick>
 800649e:	4602      	mov	r2, r0
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	1ad3      	subs	r3, r2, r3
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d907      	bls.n	80064b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e150      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
 80064ac:	40023800 	.word	0x40023800
 80064b0:	42470000 	.word	0x42470000
 80064b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064b8:	4b88      	ldr	r3, [pc, #544]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 80064ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064bc:	f003 0302 	and.w	r3, r3, #2
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1ea      	bne.n	800649a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 8097 	beq.w	8006600 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064d2:	2300      	movs	r3, #0
 80064d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064d6:	4b81      	ldr	r3, [pc, #516]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 80064d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10f      	bne.n	8006502 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064e2:	2300      	movs	r3, #0
 80064e4:	60bb      	str	r3, [r7, #8]
 80064e6:	4b7d      	ldr	r3, [pc, #500]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 80064e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ea:	4a7c      	ldr	r2, [pc, #496]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 80064ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80064f2:	4b7a      	ldr	r3, [pc, #488]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 80064f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064fa:	60bb      	str	r3, [r7, #8]
 80064fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064fe:	2301      	movs	r3, #1
 8006500:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006502:	4b77      	ldr	r3, [pc, #476]	@ (80066e0 <HAL_RCC_OscConfig+0x474>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800650a:	2b00      	cmp	r3, #0
 800650c:	d118      	bne.n	8006540 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800650e:	4b74      	ldr	r3, [pc, #464]	@ (80066e0 <HAL_RCC_OscConfig+0x474>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a73      	ldr	r2, [pc, #460]	@ (80066e0 <HAL_RCC_OscConfig+0x474>)
 8006514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006518:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800651a:	f7fe f869 	bl	80045f0 <HAL_GetTick>
 800651e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006520:	e008      	b.n	8006534 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006522:	f7fe f865 	bl	80045f0 <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	2b02      	cmp	r3, #2
 800652e:	d901      	bls.n	8006534 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e10c      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006534:	4b6a      	ldr	r3, [pc, #424]	@ (80066e0 <HAL_RCC_OscConfig+0x474>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800653c:	2b00      	cmp	r3, #0
 800653e:	d0f0      	beq.n	8006522 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d106      	bne.n	8006556 <HAL_RCC_OscConfig+0x2ea>
 8006548:	4b64      	ldr	r3, [pc, #400]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 800654a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800654c:	4a63      	ldr	r2, [pc, #396]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 800654e:	f043 0301 	orr.w	r3, r3, #1
 8006552:	6713      	str	r3, [r2, #112]	@ 0x70
 8006554:	e01c      	b.n	8006590 <HAL_RCC_OscConfig+0x324>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	2b05      	cmp	r3, #5
 800655c:	d10c      	bne.n	8006578 <HAL_RCC_OscConfig+0x30c>
 800655e:	4b5f      	ldr	r3, [pc, #380]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 8006560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006562:	4a5e      	ldr	r2, [pc, #376]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 8006564:	f043 0304 	orr.w	r3, r3, #4
 8006568:	6713      	str	r3, [r2, #112]	@ 0x70
 800656a:	4b5c      	ldr	r3, [pc, #368]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 800656c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800656e:	4a5b      	ldr	r2, [pc, #364]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 8006570:	f043 0301 	orr.w	r3, r3, #1
 8006574:	6713      	str	r3, [r2, #112]	@ 0x70
 8006576:	e00b      	b.n	8006590 <HAL_RCC_OscConfig+0x324>
 8006578:	4b58      	ldr	r3, [pc, #352]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 800657a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800657c:	4a57      	ldr	r2, [pc, #348]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 800657e:	f023 0301 	bic.w	r3, r3, #1
 8006582:	6713      	str	r3, [r2, #112]	@ 0x70
 8006584:	4b55      	ldr	r3, [pc, #340]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 8006586:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006588:	4a54      	ldr	r2, [pc, #336]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 800658a:	f023 0304 	bic.w	r3, r3, #4
 800658e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d015      	beq.n	80065c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006598:	f7fe f82a 	bl	80045f0 <HAL_GetTick>
 800659c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800659e:	e00a      	b.n	80065b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065a0:	f7fe f826 	bl	80045f0 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d901      	bls.n	80065b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e0cb      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065b6:	4b49      	ldr	r3, [pc, #292]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 80065b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ba:	f003 0302 	and.w	r3, r3, #2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d0ee      	beq.n	80065a0 <HAL_RCC_OscConfig+0x334>
 80065c2:	e014      	b.n	80065ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065c4:	f7fe f814 	bl	80045f0 <HAL_GetTick>
 80065c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065ca:	e00a      	b.n	80065e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065cc:	f7fe f810 	bl	80045f0 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065da:	4293      	cmp	r3, r2
 80065dc:	d901      	bls.n	80065e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e0b5      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065e2:	4b3e      	ldr	r3, [pc, #248]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 80065e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065e6:	f003 0302 	and.w	r3, r3, #2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1ee      	bne.n	80065cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065ee:	7dfb      	ldrb	r3, [r7, #23]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d105      	bne.n	8006600 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065f4:	4b39      	ldr	r3, [pc, #228]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 80065f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f8:	4a38      	ldr	r2, [pc, #224]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 80065fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 80a1 	beq.w	800674c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800660a:	4b34      	ldr	r3, [pc, #208]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f003 030c 	and.w	r3, r3, #12
 8006612:	2b08      	cmp	r3, #8
 8006614:	d05c      	beq.n	80066d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	2b02      	cmp	r3, #2
 800661c:	d141      	bne.n	80066a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800661e:	4b31      	ldr	r3, [pc, #196]	@ (80066e4 <HAL_RCC_OscConfig+0x478>)
 8006620:	2200      	movs	r2, #0
 8006622:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006624:	f7fd ffe4 	bl	80045f0 <HAL_GetTick>
 8006628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800662a:	e008      	b.n	800663e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800662c:	f7fd ffe0 	bl	80045f0 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2b02      	cmp	r3, #2
 8006638:	d901      	bls.n	800663e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e087      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800663e:	4b27      	ldr	r3, [pc, #156]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1f0      	bne.n	800662c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	69da      	ldr	r2, [r3, #28]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	431a      	orrs	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006658:	019b      	lsls	r3, r3, #6
 800665a:	431a      	orrs	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006660:	085b      	lsrs	r3, r3, #1
 8006662:	3b01      	subs	r3, #1
 8006664:	041b      	lsls	r3, r3, #16
 8006666:	431a      	orrs	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800666c:	061b      	lsls	r3, r3, #24
 800666e:	491b      	ldr	r1, [pc, #108]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 8006670:	4313      	orrs	r3, r2
 8006672:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006674:	4b1b      	ldr	r3, [pc, #108]	@ (80066e4 <HAL_RCC_OscConfig+0x478>)
 8006676:	2201      	movs	r2, #1
 8006678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800667a:	f7fd ffb9 	bl	80045f0 <HAL_GetTick>
 800667e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006680:	e008      	b.n	8006694 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006682:	f7fd ffb5 	bl	80045f0 <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	2b02      	cmp	r3, #2
 800668e:	d901      	bls.n	8006694 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e05c      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006694:	4b11      	ldr	r3, [pc, #68]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d0f0      	beq.n	8006682 <HAL_RCC_OscConfig+0x416>
 80066a0:	e054      	b.n	800674c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066a2:	4b10      	ldr	r3, [pc, #64]	@ (80066e4 <HAL_RCC_OscConfig+0x478>)
 80066a4:	2200      	movs	r2, #0
 80066a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066a8:	f7fd ffa2 	bl	80045f0 <HAL_GetTick>
 80066ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ae:	e008      	b.n	80066c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066b0:	f7fd ff9e 	bl	80045f0 <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d901      	bls.n	80066c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e045      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066c2:	4b06      	ldr	r3, [pc, #24]	@ (80066dc <HAL_RCC_OscConfig+0x470>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1f0      	bne.n	80066b0 <HAL_RCC_OscConfig+0x444>
 80066ce:	e03d      	b.n	800674c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	699b      	ldr	r3, [r3, #24]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d107      	bne.n	80066e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e038      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
 80066dc:	40023800 	.word	0x40023800
 80066e0:	40007000 	.word	0x40007000
 80066e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80066e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006758 <HAL_RCC_OscConfig+0x4ec>)
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	699b      	ldr	r3, [r3, #24]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d028      	beq.n	8006748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006700:	429a      	cmp	r2, r3
 8006702:	d121      	bne.n	8006748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800670e:	429a      	cmp	r2, r3
 8006710:	d11a      	bne.n	8006748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006718:	4013      	ands	r3, r2
 800671a:	687a      	ldr	r2, [r7, #4]
 800671c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800671e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006720:	4293      	cmp	r3, r2
 8006722:	d111      	bne.n	8006748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800672e:	085b      	lsrs	r3, r3, #1
 8006730:	3b01      	subs	r3, #1
 8006732:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006734:	429a      	cmp	r2, r3
 8006736:	d107      	bne.n	8006748 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006742:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006744:	429a      	cmp	r2, r3
 8006746:	d001      	beq.n	800674c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e000      	b.n	800674e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3718      	adds	r7, #24
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	40023800 	.word	0x40023800

0800675c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e0cc      	b.n	800690a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006770:	4b68      	ldr	r3, [pc, #416]	@ (8006914 <HAL_RCC_ClockConfig+0x1b8>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0307 	and.w	r3, r3, #7
 8006778:	683a      	ldr	r2, [r7, #0]
 800677a:	429a      	cmp	r2, r3
 800677c:	d90c      	bls.n	8006798 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800677e:	4b65      	ldr	r3, [pc, #404]	@ (8006914 <HAL_RCC_ClockConfig+0x1b8>)
 8006780:	683a      	ldr	r2, [r7, #0]
 8006782:	b2d2      	uxtb	r2, r2
 8006784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006786:	4b63      	ldr	r3, [pc, #396]	@ (8006914 <HAL_RCC_ClockConfig+0x1b8>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0307 	and.w	r3, r3, #7
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	429a      	cmp	r2, r3
 8006792:	d001      	beq.n	8006798 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	e0b8      	b.n	800690a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0302 	and.w	r3, r3, #2
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d020      	beq.n	80067e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0304 	and.w	r3, r3, #4
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d005      	beq.n	80067bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067b0:	4b59      	ldr	r3, [pc, #356]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	4a58      	ldr	r2, [pc, #352]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 80067b6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80067ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0308 	and.w	r3, r3, #8
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d005      	beq.n	80067d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067c8:	4b53      	ldr	r3, [pc, #332]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	4a52      	ldr	r2, [pc, #328]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 80067ce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80067d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067d4:	4b50      	ldr	r3, [pc, #320]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	494d      	ldr	r1, [pc, #308]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d044      	beq.n	800687c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d107      	bne.n	800680a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067fa:	4b47      	ldr	r3, [pc, #284]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d119      	bne.n	800683a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e07f      	b.n	800690a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	2b02      	cmp	r3, #2
 8006810:	d003      	beq.n	800681a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006816:	2b03      	cmp	r3, #3
 8006818:	d107      	bne.n	800682a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800681a:	4b3f      	ldr	r3, [pc, #252]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d109      	bne.n	800683a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e06f      	b.n	800690a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800682a:	4b3b      	ldr	r3, [pc, #236]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e067      	b.n	800690a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800683a:	4b37      	ldr	r3, [pc, #220]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f023 0203 	bic.w	r2, r3, #3
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	4934      	ldr	r1, [pc, #208]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 8006848:	4313      	orrs	r3, r2
 800684a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800684c:	f7fd fed0 	bl	80045f0 <HAL_GetTick>
 8006850:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006852:	e00a      	b.n	800686a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006854:	f7fd fecc 	bl	80045f0 <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006862:	4293      	cmp	r3, r2
 8006864:	d901      	bls.n	800686a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006866:	2303      	movs	r3, #3
 8006868:	e04f      	b.n	800690a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800686a:	4b2b      	ldr	r3, [pc, #172]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f003 020c 	and.w	r2, r3, #12
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	429a      	cmp	r2, r3
 800687a:	d1eb      	bne.n	8006854 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800687c:	4b25      	ldr	r3, [pc, #148]	@ (8006914 <HAL_RCC_ClockConfig+0x1b8>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0307 	and.w	r3, r3, #7
 8006884:	683a      	ldr	r2, [r7, #0]
 8006886:	429a      	cmp	r2, r3
 8006888:	d20c      	bcs.n	80068a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800688a:	4b22      	ldr	r3, [pc, #136]	@ (8006914 <HAL_RCC_ClockConfig+0x1b8>)
 800688c:	683a      	ldr	r2, [r7, #0]
 800688e:	b2d2      	uxtb	r2, r2
 8006890:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006892:	4b20      	ldr	r3, [pc, #128]	@ (8006914 <HAL_RCC_ClockConfig+0x1b8>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0307 	and.w	r3, r3, #7
 800689a:	683a      	ldr	r2, [r7, #0]
 800689c:	429a      	cmp	r2, r3
 800689e:	d001      	beq.n	80068a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e032      	b.n	800690a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0304 	and.w	r3, r3, #4
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d008      	beq.n	80068c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068b0:	4b19      	ldr	r3, [pc, #100]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	4916      	ldr	r1, [pc, #88]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0308 	and.w	r3, r3, #8
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d009      	beq.n	80068e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068ce:	4b12      	ldr	r3, [pc, #72]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	00db      	lsls	r3, r3, #3
 80068dc:	490e      	ldr	r1, [pc, #56]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 80068de:	4313      	orrs	r3, r2
 80068e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80068e2:	f000 f821 	bl	8006928 <HAL_RCC_GetSysClockFreq>
 80068e6:	4602      	mov	r2, r0
 80068e8:	4b0b      	ldr	r3, [pc, #44]	@ (8006918 <HAL_RCC_ClockConfig+0x1bc>)
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	091b      	lsrs	r3, r3, #4
 80068ee:	f003 030f 	and.w	r3, r3, #15
 80068f2:	490a      	ldr	r1, [pc, #40]	@ (800691c <HAL_RCC_ClockConfig+0x1c0>)
 80068f4:	5ccb      	ldrb	r3, [r1, r3]
 80068f6:	fa22 f303 	lsr.w	r3, r2, r3
 80068fa:	4a09      	ldr	r2, [pc, #36]	@ (8006920 <HAL_RCC_ClockConfig+0x1c4>)
 80068fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80068fe:	4b09      	ldr	r3, [pc, #36]	@ (8006924 <HAL_RCC_ClockConfig+0x1c8>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4618      	mov	r0, r3
 8006904:	f7fd fe30 	bl	8004568 <HAL_InitTick>

  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	40023c00 	.word	0x40023c00
 8006918:	40023800 	.word	0x40023800
 800691c:	08010fb0 	.word	0x08010fb0
 8006920:	20000004 	.word	0x20000004
 8006924:	20000008 	.word	0x20000008

08006928 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800692c:	b090      	sub	sp, #64	@ 0x40
 800692e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006930:	2300      	movs	r3, #0
 8006932:	637b      	str	r3, [r7, #52]	@ 0x34
 8006934:	2300      	movs	r3, #0
 8006936:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006938:	2300      	movs	r3, #0
 800693a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800693c:	2300      	movs	r3, #0
 800693e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006940:	4b59      	ldr	r3, [pc, #356]	@ (8006aa8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f003 030c 	and.w	r3, r3, #12
 8006948:	2b08      	cmp	r3, #8
 800694a:	d00d      	beq.n	8006968 <HAL_RCC_GetSysClockFreq+0x40>
 800694c:	2b08      	cmp	r3, #8
 800694e:	f200 80a1 	bhi.w	8006a94 <HAL_RCC_GetSysClockFreq+0x16c>
 8006952:	2b00      	cmp	r3, #0
 8006954:	d002      	beq.n	800695c <HAL_RCC_GetSysClockFreq+0x34>
 8006956:	2b04      	cmp	r3, #4
 8006958:	d003      	beq.n	8006962 <HAL_RCC_GetSysClockFreq+0x3a>
 800695a:	e09b      	b.n	8006a94 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800695c:	4b53      	ldr	r3, [pc, #332]	@ (8006aac <HAL_RCC_GetSysClockFreq+0x184>)
 800695e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8006960:	e09b      	b.n	8006a9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006962:	4b53      	ldr	r3, [pc, #332]	@ (8006ab0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006964:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006966:	e098      	b.n	8006a9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006968:	4b4f      	ldr	r3, [pc, #316]	@ (8006aa8 <HAL_RCC_GetSysClockFreq+0x180>)
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006970:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006972:	4b4d      	ldr	r3, [pc, #308]	@ (8006aa8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800697a:	2b00      	cmp	r3, #0
 800697c:	d028      	beq.n	80069d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800697e:	4b4a      	ldr	r3, [pc, #296]	@ (8006aa8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	099b      	lsrs	r3, r3, #6
 8006984:	2200      	movs	r2, #0
 8006986:	623b      	str	r3, [r7, #32]
 8006988:	627a      	str	r2, [r7, #36]	@ 0x24
 800698a:	6a3b      	ldr	r3, [r7, #32]
 800698c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006990:	2100      	movs	r1, #0
 8006992:	4b47      	ldr	r3, [pc, #284]	@ (8006ab0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006994:	fb03 f201 	mul.w	r2, r3, r1
 8006998:	2300      	movs	r3, #0
 800699a:	fb00 f303 	mul.w	r3, r0, r3
 800699e:	4413      	add	r3, r2
 80069a0:	4a43      	ldr	r2, [pc, #268]	@ (8006ab0 <HAL_RCC_GetSysClockFreq+0x188>)
 80069a2:	fba0 1202 	umull	r1, r2, r0, r2
 80069a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069a8:	460a      	mov	r2, r1
 80069aa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80069ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069ae:	4413      	add	r3, r2
 80069b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069b4:	2200      	movs	r2, #0
 80069b6:	61bb      	str	r3, [r7, #24]
 80069b8:	61fa      	str	r2, [r7, #28]
 80069ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80069c2:	f7fa f949 	bl	8000c58 <__aeabi_uldivmod>
 80069c6:	4602      	mov	r2, r0
 80069c8:	460b      	mov	r3, r1
 80069ca:	4613      	mov	r3, r2
 80069cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069ce:	e053      	b.n	8006a78 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069d0:	4b35      	ldr	r3, [pc, #212]	@ (8006aa8 <HAL_RCC_GetSysClockFreq+0x180>)
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	099b      	lsrs	r3, r3, #6
 80069d6:	2200      	movs	r2, #0
 80069d8:	613b      	str	r3, [r7, #16]
 80069da:	617a      	str	r2, [r7, #20]
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80069e2:	f04f 0b00 	mov.w	fp, #0
 80069e6:	4652      	mov	r2, sl
 80069e8:	465b      	mov	r3, fp
 80069ea:	f04f 0000 	mov.w	r0, #0
 80069ee:	f04f 0100 	mov.w	r1, #0
 80069f2:	0159      	lsls	r1, r3, #5
 80069f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069f8:	0150      	lsls	r0, r2, #5
 80069fa:	4602      	mov	r2, r0
 80069fc:	460b      	mov	r3, r1
 80069fe:	ebb2 080a 	subs.w	r8, r2, sl
 8006a02:	eb63 090b 	sbc.w	r9, r3, fp
 8006a06:	f04f 0200 	mov.w	r2, #0
 8006a0a:	f04f 0300 	mov.w	r3, #0
 8006a0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006a12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006a16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006a1a:	ebb2 0408 	subs.w	r4, r2, r8
 8006a1e:	eb63 0509 	sbc.w	r5, r3, r9
 8006a22:	f04f 0200 	mov.w	r2, #0
 8006a26:	f04f 0300 	mov.w	r3, #0
 8006a2a:	00eb      	lsls	r3, r5, #3
 8006a2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a30:	00e2      	lsls	r2, r4, #3
 8006a32:	4614      	mov	r4, r2
 8006a34:	461d      	mov	r5, r3
 8006a36:	eb14 030a 	adds.w	r3, r4, sl
 8006a3a:	603b      	str	r3, [r7, #0]
 8006a3c:	eb45 030b 	adc.w	r3, r5, fp
 8006a40:	607b      	str	r3, [r7, #4]
 8006a42:	f04f 0200 	mov.w	r2, #0
 8006a46:	f04f 0300 	mov.w	r3, #0
 8006a4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a4e:	4629      	mov	r1, r5
 8006a50:	028b      	lsls	r3, r1, #10
 8006a52:	4621      	mov	r1, r4
 8006a54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a58:	4621      	mov	r1, r4
 8006a5a:	028a      	lsls	r2, r1, #10
 8006a5c:	4610      	mov	r0, r2
 8006a5e:	4619      	mov	r1, r3
 8006a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a62:	2200      	movs	r2, #0
 8006a64:	60bb      	str	r3, [r7, #8]
 8006a66:	60fa      	str	r2, [r7, #12]
 8006a68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a6c:	f7fa f8f4 	bl	8000c58 <__aeabi_uldivmod>
 8006a70:	4602      	mov	r2, r0
 8006a72:	460b      	mov	r3, r1
 8006a74:	4613      	mov	r3, r2
 8006a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a78:	4b0b      	ldr	r3, [pc, #44]	@ (8006aa8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	0c1b      	lsrs	r3, r3, #16
 8006a7e:	f003 0303 	and.w	r3, r3, #3
 8006a82:	3301      	adds	r3, #1
 8006a84:	005b      	lsls	r3, r3, #1
 8006a86:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8006a88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006a92:	e002      	b.n	8006a9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a94:	4b05      	ldr	r3, [pc, #20]	@ (8006aac <HAL_RCC_GetSysClockFreq+0x184>)
 8006a96:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006a98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3740      	adds	r7, #64	@ 0x40
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006aa6:	bf00      	nop
 8006aa8:	40023800 	.word	0x40023800
 8006aac:	00f42400 	.word	0x00f42400
 8006ab0:	017d7840 	.word	0x017d7840

08006ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ab8:	4b03      	ldr	r3, [pc, #12]	@ (8006ac8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006aba:	681b      	ldr	r3, [r3, #0]
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	20000004 	.word	0x20000004

08006acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ad0:	f7ff fff0 	bl	8006ab4 <HAL_RCC_GetHCLKFreq>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	4b05      	ldr	r3, [pc, #20]	@ (8006aec <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	0a9b      	lsrs	r3, r3, #10
 8006adc:	f003 0307 	and.w	r3, r3, #7
 8006ae0:	4903      	ldr	r1, [pc, #12]	@ (8006af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006ae2:	5ccb      	ldrb	r3, [r1, r3]
 8006ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	40023800 	.word	0x40023800
 8006af0:	08010fc0 	.word	0x08010fc0

08006af4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006af8:	f7ff ffdc 	bl	8006ab4 <HAL_RCC_GetHCLKFreq>
 8006afc:	4602      	mov	r2, r0
 8006afe:	4b05      	ldr	r3, [pc, #20]	@ (8006b14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	0b5b      	lsrs	r3, r3, #13
 8006b04:	f003 0307 	and.w	r3, r3, #7
 8006b08:	4903      	ldr	r1, [pc, #12]	@ (8006b18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b0a:	5ccb      	ldrb	r3, [r1, r3]
 8006b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	40023800 	.word	0x40023800
 8006b18:	08010fc0 	.word	0x08010fc0

08006b1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d101      	bne.n	8006b2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e041      	b.n	8006bb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d106      	bne.n	8006b48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f7fd f9f8 	bl	8003f38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	3304      	adds	r3, #4
 8006b58:	4619      	mov	r1, r3
 8006b5a:	4610      	mov	r0, r2
 8006b5c:	f001 fa62 	bl	8008024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006bb0:	2300      	movs	r3, #0
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3708      	adds	r7, #8
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}

08006bba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b082      	sub	sp, #8
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e041      	b.n	8006c50 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d106      	bne.n	8006be6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 f839 	bl	8006c58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2202      	movs	r2, #2
 8006bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	3304      	adds	r3, #4
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	4610      	mov	r0, r2
 8006bfa:	f001 fa13 	bl	8008024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2201      	movs	r2, #1
 8006c32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3708      	adds	r7, #8
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b084      	sub	sp, #16
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d109      	bne.n	8006c90 <HAL_TIM_PWM_Start+0x24>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	bf14      	ite	ne
 8006c88:	2301      	movne	r3, #1
 8006c8a:	2300      	moveq	r3, #0
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	e022      	b.n	8006cd6 <HAL_TIM_PWM_Start+0x6a>
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	2b04      	cmp	r3, #4
 8006c94:	d109      	bne.n	8006caa <HAL_TIM_PWM_Start+0x3e>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	bf14      	ite	ne
 8006ca2:	2301      	movne	r3, #1
 8006ca4:	2300      	moveq	r3, #0
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	e015      	b.n	8006cd6 <HAL_TIM_PWM_Start+0x6a>
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	2b08      	cmp	r3, #8
 8006cae:	d109      	bne.n	8006cc4 <HAL_TIM_PWM_Start+0x58>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	bf14      	ite	ne
 8006cbc:	2301      	movne	r3, #1
 8006cbe:	2300      	moveq	r3, #0
 8006cc0:	b2db      	uxtb	r3, r3
 8006cc2:	e008      	b.n	8006cd6 <HAL_TIM_PWM_Start+0x6a>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	bf14      	ite	ne
 8006cd0:	2301      	movne	r3, #1
 8006cd2:	2300      	moveq	r3, #0
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d001      	beq.n	8006cde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e068      	b.n	8006db0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d104      	bne.n	8006cee <HAL_TIM_PWM_Start+0x82>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006cec:	e013      	b.n	8006d16 <HAL_TIM_PWM_Start+0xaa>
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	2b04      	cmp	r3, #4
 8006cf2:	d104      	bne.n	8006cfe <HAL_TIM_PWM_Start+0x92>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006cfc:	e00b      	b.n	8006d16 <HAL_TIM_PWM_Start+0xaa>
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	2b08      	cmp	r3, #8
 8006d02:	d104      	bne.n	8006d0e <HAL_TIM_PWM_Start+0xa2>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2202      	movs	r2, #2
 8006d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d0c:	e003      	b.n	8006d16 <HAL_TIM_PWM_Start+0xaa>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2202      	movs	r2, #2
 8006d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	6839      	ldr	r1, [r7, #0]
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f001 fd50 	bl	80087c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a23      	ldr	r2, [pc, #140]	@ (8006db8 <HAL_TIM_PWM_Start+0x14c>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d107      	bne.n	8006d3e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d3c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a1d      	ldr	r2, [pc, #116]	@ (8006db8 <HAL_TIM_PWM_Start+0x14c>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d018      	beq.n	8006d7a <HAL_TIM_PWM_Start+0x10e>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d50:	d013      	beq.n	8006d7a <HAL_TIM_PWM_Start+0x10e>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a19      	ldr	r2, [pc, #100]	@ (8006dbc <HAL_TIM_PWM_Start+0x150>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d00e      	beq.n	8006d7a <HAL_TIM_PWM_Start+0x10e>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a17      	ldr	r2, [pc, #92]	@ (8006dc0 <HAL_TIM_PWM_Start+0x154>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d009      	beq.n	8006d7a <HAL_TIM_PWM_Start+0x10e>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a16      	ldr	r2, [pc, #88]	@ (8006dc4 <HAL_TIM_PWM_Start+0x158>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d004      	beq.n	8006d7a <HAL_TIM_PWM_Start+0x10e>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a14      	ldr	r2, [pc, #80]	@ (8006dc8 <HAL_TIM_PWM_Start+0x15c>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d111      	bne.n	8006d9e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f003 0307 	and.w	r3, r3, #7
 8006d84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2b06      	cmp	r3, #6
 8006d8a:	d010      	beq.n	8006dae <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f042 0201 	orr.w	r2, r2, #1
 8006d9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d9c:	e007      	b.n	8006dae <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f042 0201 	orr.w	r2, r2, #1
 8006dac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	40010000 	.word	0x40010000
 8006dbc:	40000400 	.word	0x40000400
 8006dc0:	40000800 	.word	0x40000800
 8006dc4:	40000c00 	.word	0x40000c00
 8006dc8:	40014000 	.word	0x40014000

08006dcc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	6839      	ldr	r1, [r7, #0]
 8006dde:	4618      	mov	r0, r3
 8006de0:	f001 fcf0 	bl	80087c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a29      	ldr	r2, [pc, #164]	@ (8006e90 <HAL_TIM_PWM_Stop+0xc4>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d117      	bne.n	8006e1e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	6a1a      	ldr	r2, [r3, #32]
 8006df4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006df8:	4013      	ands	r3, r2
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d10f      	bne.n	8006e1e <HAL_TIM_PWM_Stop+0x52>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6a1a      	ldr	r2, [r3, #32]
 8006e04:	f240 4344 	movw	r3, #1092	@ 0x444
 8006e08:	4013      	ands	r3, r2
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d107      	bne.n	8006e1e <HAL_TIM_PWM_Stop+0x52>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006e1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	6a1a      	ldr	r2, [r3, #32]
 8006e24:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006e28:	4013      	ands	r3, r2
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10f      	bne.n	8006e4e <HAL_TIM_PWM_Stop+0x82>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	6a1a      	ldr	r2, [r3, #32]
 8006e34:	f240 4344 	movw	r3, #1092	@ 0x444
 8006e38:	4013      	ands	r3, r2
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d107      	bne.n	8006e4e <HAL_TIM_PWM_Stop+0x82>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f022 0201 	bic.w	r2, r2, #1
 8006e4c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d104      	bne.n	8006e5e <HAL_TIM_PWM_Stop+0x92>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e5c:	e013      	b.n	8006e86 <HAL_TIM_PWM_Stop+0xba>
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	2b04      	cmp	r3, #4
 8006e62:	d104      	bne.n	8006e6e <HAL_TIM_PWM_Stop+0xa2>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e6c:	e00b      	b.n	8006e86 <HAL_TIM_PWM_Stop+0xba>
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	2b08      	cmp	r3, #8
 8006e72:	d104      	bne.n	8006e7e <HAL_TIM_PWM_Stop+0xb2>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e7c:	e003      	b.n	8006e86 <HAL_TIM_PWM_Stop+0xba>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3708      	adds	r7, #8
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	40010000 	.word	0x40010000

08006e94 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d101      	bne.n	8006ea6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e041      	b.n	8006f2a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d106      	bne.n	8006ec0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f839 	bl	8006f32 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	3304      	adds	r3, #4
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	4610      	mov	r0, r2
 8006ed4:	f001 f8a6 	bl	8008024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3708      	adds	r7, #8
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006f32:	b480      	push	{r7}
 8006f34:	b083      	sub	sp, #12
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006f3a:	bf00      	nop
 8006f3c:	370c      	adds	r7, #12
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
	...

08006f48 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f52:	2300      	movs	r3, #0
 8006f54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d104      	bne.n	8006f66 <HAL_TIM_IC_Start_IT+0x1e>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	e013      	b.n	8006f8e <HAL_TIM_IC_Start_IT+0x46>
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	2b04      	cmp	r3, #4
 8006f6a:	d104      	bne.n	8006f76 <HAL_TIM_IC_Start_IT+0x2e>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	e00b      	b.n	8006f8e <HAL_TIM_IC_Start_IT+0x46>
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2b08      	cmp	r3, #8
 8006f7a:	d104      	bne.n	8006f86 <HAL_TIM_IC_Start_IT+0x3e>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	e003      	b.n	8006f8e <HAL_TIM_IC_Start_IT+0x46>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d104      	bne.n	8006fa0 <HAL_TIM_IC_Start_IT+0x58>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	e013      	b.n	8006fc8 <HAL_TIM_IC_Start_IT+0x80>
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	2b04      	cmp	r3, #4
 8006fa4:	d104      	bne.n	8006fb0 <HAL_TIM_IC_Start_IT+0x68>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	e00b      	b.n	8006fc8 <HAL_TIM_IC_Start_IT+0x80>
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	2b08      	cmp	r3, #8
 8006fb4:	d104      	bne.n	8006fc0 <HAL_TIM_IC_Start_IT+0x78>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	e003      	b.n	8006fc8 <HAL_TIM_IC_Start_IT+0x80>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fca:	7bbb      	ldrb	r3, [r7, #14]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d102      	bne.n	8006fd6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fd0:	7b7b      	ldrb	r3, [r7, #13]
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d001      	beq.n	8006fda <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e0c2      	b.n	8007160 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d104      	bne.n	8006fea <HAL_TIM_IC_Start_IT+0xa2>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006fe8:	e013      	b.n	8007012 <HAL_TIM_IC_Start_IT+0xca>
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	2b04      	cmp	r3, #4
 8006fee:	d104      	bne.n	8006ffa <HAL_TIM_IC_Start_IT+0xb2>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ff8:	e00b      	b.n	8007012 <HAL_TIM_IC_Start_IT+0xca>
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2b08      	cmp	r3, #8
 8006ffe:	d104      	bne.n	800700a <HAL_TIM_IC_Start_IT+0xc2>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2202      	movs	r2, #2
 8007004:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007008:	e003      	b.n	8007012 <HAL_TIM_IC_Start_IT+0xca>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2202      	movs	r2, #2
 800700e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d104      	bne.n	8007022 <HAL_TIM_IC_Start_IT+0xda>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2202      	movs	r2, #2
 800701c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007020:	e013      	b.n	800704a <HAL_TIM_IC_Start_IT+0x102>
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	2b04      	cmp	r3, #4
 8007026:	d104      	bne.n	8007032 <HAL_TIM_IC_Start_IT+0xea>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2202      	movs	r2, #2
 800702c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007030:	e00b      	b.n	800704a <HAL_TIM_IC_Start_IT+0x102>
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2b08      	cmp	r3, #8
 8007036:	d104      	bne.n	8007042 <HAL_TIM_IC_Start_IT+0xfa>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2202      	movs	r2, #2
 800703c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007040:	e003      	b.n	800704a <HAL_TIM_IC_Start_IT+0x102>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2202      	movs	r2, #2
 8007046:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	2b0c      	cmp	r3, #12
 800704e:	d841      	bhi.n	80070d4 <HAL_TIM_IC_Start_IT+0x18c>
 8007050:	a201      	add	r2, pc, #4	@ (adr r2, 8007058 <HAL_TIM_IC_Start_IT+0x110>)
 8007052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007056:	bf00      	nop
 8007058:	0800708d 	.word	0x0800708d
 800705c:	080070d5 	.word	0x080070d5
 8007060:	080070d5 	.word	0x080070d5
 8007064:	080070d5 	.word	0x080070d5
 8007068:	0800709f 	.word	0x0800709f
 800706c:	080070d5 	.word	0x080070d5
 8007070:	080070d5 	.word	0x080070d5
 8007074:	080070d5 	.word	0x080070d5
 8007078:	080070b1 	.word	0x080070b1
 800707c:	080070d5 	.word	0x080070d5
 8007080:	080070d5 	.word	0x080070d5
 8007084:	080070d5 	.word	0x080070d5
 8007088:	080070c3 	.word	0x080070c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68da      	ldr	r2, [r3, #12]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f042 0202 	orr.w	r2, r2, #2
 800709a:	60da      	str	r2, [r3, #12]
      break;
 800709c:	e01d      	b.n	80070da <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68da      	ldr	r2, [r3, #12]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f042 0204 	orr.w	r2, r2, #4
 80070ac:	60da      	str	r2, [r3, #12]
      break;
 80070ae:	e014      	b.n	80070da <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68da      	ldr	r2, [r3, #12]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f042 0208 	orr.w	r2, r2, #8
 80070be:	60da      	str	r2, [r3, #12]
      break;
 80070c0:	e00b      	b.n	80070da <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68da      	ldr	r2, [r3, #12]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f042 0210 	orr.w	r2, r2, #16
 80070d0:	60da      	str	r2, [r3, #12]
      break;
 80070d2:	e002      	b.n	80070da <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	73fb      	strb	r3, [r7, #15]
      break;
 80070d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80070da:	7bfb      	ldrb	r3, [r7, #15]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d13e      	bne.n	800715e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2201      	movs	r2, #1
 80070e6:	6839      	ldr	r1, [r7, #0]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f001 fb6b 	bl	80087c4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a1d      	ldr	r2, [pc, #116]	@ (8007168 <HAL_TIM_IC_Start_IT+0x220>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d018      	beq.n	800712a <HAL_TIM_IC_Start_IT+0x1e2>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007100:	d013      	beq.n	800712a <HAL_TIM_IC_Start_IT+0x1e2>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a19      	ldr	r2, [pc, #100]	@ (800716c <HAL_TIM_IC_Start_IT+0x224>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d00e      	beq.n	800712a <HAL_TIM_IC_Start_IT+0x1e2>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a17      	ldr	r2, [pc, #92]	@ (8007170 <HAL_TIM_IC_Start_IT+0x228>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d009      	beq.n	800712a <HAL_TIM_IC_Start_IT+0x1e2>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a16      	ldr	r2, [pc, #88]	@ (8007174 <HAL_TIM_IC_Start_IT+0x22c>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d004      	beq.n	800712a <HAL_TIM_IC_Start_IT+0x1e2>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a14      	ldr	r2, [pc, #80]	@ (8007178 <HAL_TIM_IC_Start_IT+0x230>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d111      	bne.n	800714e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f003 0307 	and.w	r3, r3, #7
 8007134:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	2b06      	cmp	r3, #6
 800713a:	d010      	beq.n	800715e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f042 0201 	orr.w	r2, r2, #1
 800714a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800714c:	e007      	b.n	800715e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f042 0201 	orr.w	r2, r2, #1
 800715c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800715e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007160:	4618      	mov	r0, r3
 8007162:	3710      	adds	r7, #16
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	40010000 	.word	0x40010000
 800716c:	40000400 	.word	0x40000400
 8007170:	40000800 	.word	0x40000800
 8007174:	40000c00 	.word	0x40000c00
 8007178:	40014000 	.word	0x40014000

0800717c <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007186:	2300      	movs	r3, #0
 8007188:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	2b0c      	cmp	r3, #12
 800718e:	d841      	bhi.n	8007214 <HAL_TIM_IC_Stop_IT+0x98>
 8007190:	a201      	add	r2, pc, #4	@ (adr r2, 8007198 <HAL_TIM_IC_Stop_IT+0x1c>)
 8007192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007196:	bf00      	nop
 8007198:	080071cd 	.word	0x080071cd
 800719c:	08007215 	.word	0x08007215
 80071a0:	08007215 	.word	0x08007215
 80071a4:	08007215 	.word	0x08007215
 80071a8:	080071df 	.word	0x080071df
 80071ac:	08007215 	.word	0x08007215
 80071b0:	08007215 	.word	0x08007215
 80071b4:	08007215 	.word	0x08007215
 80071b8:	080071f1 	.word	0x080071f1
 80071bc:	08007215 	.word	0x08007215
 80071c0:	08007215 	.word	0x08007215
 80071c4:	08007215 	.word	0x08007215
 80071c8:	08007203 	.word	0x08007203
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	68da      	ldr	r2, [r3, #12]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f022 0202 	bic.w	r2, r2, #2
 80071da:	60da      	str	r2, [r3, #12]
      break;
 80071dc:	e01d      	b.n	800721a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68da      	ldr	r2, [r3, #12]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f022 0204 	bic.w	r2, r2, #4
 80071ec:	60da      	str	r2, [r3, #12]
      break;
 80071ee:	e014      	b.n	800721a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	68da      	ldr	r2, [r3, #12]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f022 0208 	bic.w	r2, r2, #8
 80071fe:	60da      	str	r2, [r3, #12]
      break;
 8007200:	e00b      	b.n	800721a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68da      	ldr	r2, [r3, #12]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f022 0210 	bic.w	r2, r2, #16
 8007210:	60da      	str	r2, [r3, #12]
      break;
 8007212:	e002      	b.n	800721a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	73fb      	strb	r3, [r7, #15]
      break;
 8007218:	bf00      	nop
  }

  if (status == HAL_OK)
 800721a:	7bfb      	ldrb	r3, [r7, #15]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d156      	bne.n	80072ce <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2200      	movs	r2, #0
 8007226:	6839      	ldr	r1, [r7, #0]
 8007228:	4618      	mov	r0, r3
 800722a:	f001 facb 	bl	80087c4 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	6a1a      	ldr	r2, [r3, #32]
 8007234:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007238:	4013      	ands	r3, r2
 800723a:	2b00      	cmp	r3, #0
 800723c:	d10f      	bne.n	800725e <HAL_TIM_IC_Stop_IT+0xe2>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	6a1a      	ldr	r2, [r3, #32]
 8007244:	f240 4344 	movw	r3, #1092	@ 0x444
 8007248:	4013      	ands	r3, r2
 800724a:	2b00      	cmp	r3, #0
 800724c:	d107      	bne.n	800725e <HAL_TIM_IC_Stop_IT+0xe2>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f022 0201 	bic.w	r2, r2, #1
 800725c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d104      	bne.n	800726e <HAL_TIM_IC_Stop_IT+0xf2>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2201      	movs	r2, #1
 8007268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800726c:	e013      	b.n	8007296 <HAL_TIM_IC_Stop_IT+0x11a>
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	2b04      	cmp	r3, #4
 8007272:	d104      	bne.n	800727e <HAL_TIM_IC_Stop_IT+0x102>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800727c:	e00b      	b.n	8007296 <HAL_TIM_IC_Stop_IT+0x11a>
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	2b08      	cmp	r3, #8
 8007282:	d104      	bne.n	800728e <HAL_TIM_IC_Stop_IT+0x112>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800728c:	e003      	b.n	8007296 <HAL_TIM_IC_Stop_IT+0x11a>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d104      	bne.n	80072a6 <HAL_TIM_IC_Stop_IT+0x12a>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80072a4:	e013      	b.n	80072ce <HAL_TIM_IC_Stop_IT+0x152>
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2b04      	cmp	r3, #4
 80072aa:	d104      	bne.n	80072b6 <HAL_TIM_IC_Stop_IT+0x13a>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80072b4:	e00b      	b.n	80072ce <HAL_TIM_IC_Stop_IT+0x152>
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2b08      	cmp	r3, #8
 80072ba:	d104      	bne.n	80072c6 <HAL_TIM_IC_Stop_IT+0x14a>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072c4:	e003      	b.n	80072ce <HAL_TIM_IC_Stop_IT+0x152>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 80072ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d101      	bne.n	80072ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e097      	b.n	800741c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d106      	bne.n	8007306 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7fc feab 	bl	800405c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2202      	movs	r2, #2
 800730a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	6812      	ldr	r2, [r2, #0]
 8007318:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800731c:	f023 0307 	bic.w	r3, r3, #7
 8007320:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	3304      	adds	r3, #4
 800732a:	4619      	mov	r1, r3
 800732c:	4610      	mov	r0, r2
 800732e:	f000 fe79 	bl	8008024 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	6a1b      	ldr	r3, [r3, #32]
 8007348:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	4313      	orrs	r3, r2
 8007352:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800735a:	f023 0303 	bic.w	r3, r3, #3
 800735e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	689a      	ldr	r2, [r3, #8]
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	021b      	lsls	r3, r3, #8
 800736a:	4313      	orrs	r3, r2
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	4313      	orrs	r3, r2
 8007370:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007378:	f023 030c 	bic.w	r3, r3, #12
 800737c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007384:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007388:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	68da      	ldr	r2, [r3, #12]
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	69db      	ldr	r3, [r3, #28]
 8007392:	021b      	lsls	r3, r3, #8
 8007394:	4313      	orrs	r3, r2
 8007396:	693a      	ldr	r2, [r7, #16]
 8007398:	4313      	orrs	r3, r2
 800739a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	011a      	lsls	r2, r3, #4
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	031b      	lsls	r3, r3, #12
 80073a8:	4313      	orrs	r3, r2
 80073aa:	693a      	ldr	r2, [r7, #16]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80073b6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80073be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	685a      	ldr	r2, [r3, #4]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	695b      	ldr	r3, [r3, #20]
 80073c8:	011b      	lsls	r3, r3, #4
 80073ca:	4313      	orrs	r3, r2
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	693a      	ldr	r2, [r7, #16]
 80073e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2201      	movs	r2, #1
 80073ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2201      	movs	r2, #1
 800740e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2201      	movs	r2, #1
 8007416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3718      	adds	r7, #24
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007434:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800743c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007444:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800744c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d110      	bne.n	8007476 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007454:	7bfb      	ldrb	r3, [r7, #15]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d102      	bne.n	8007460 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800745a:	7b7b      	ldrb	r3, [r7, #13]
 800745c:	2b01      	cmp	r3, #1
 800745e:	d001      	beq.n	8007464 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	e069      	b.n	8007538 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2202      	movs	r2, #2
 8007468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2202      	movs	r2, #2
 8007470:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007474:	e031      	b.n	80074da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	2b04      	cmp	r3, #4
 800747a:	d110      	bne.n	800749e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800747c:	7bbb      	ldrb	r3, [r7, #14]
 800747e:	2b01      	cmp	r3, #1
 8007480:	d102      	bne.n	8007488 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007482:	7b3b      	ldrb	r3, [r7, #12]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d001      	beq.n	800748c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e055      	b.n	8007538 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2202      	movs	r2, #2
 8007490:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2202      	movs	r2, #2
 8007498:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800749c:	e01d      	b.n	80074da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800749e:	7bfb      	ldrb	r3, [r7, #15]
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d108      	bne.n	80074b6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80074a4:	7bbb      	ldrb	r3, [r7, #14]
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d105      	bne.n	80074b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80074aa:	7b7b      	ldrb	r3, [r7, #13]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d102      	bne.n	80074b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80074b0:	7b3b      	ldrb	r3, [r7, #12]
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d001      	beq.n	80074ba <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e03e      	b.n	8007538 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2202      	movs	r2, #2
 80074be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2202      	movs	r2, #2
 80074c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2202      	movs	r2, #2
 80074ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2202      	movs	r2, #2
 80074d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d003      	beq.n	80074e8 <HAL_TIM_Encoder_Start+0xc4>
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	2b04      	cmp	r3, #4
 80074e4:	d008      	beq.n	80074f8 <HAL_TIM_Encoder_Start+0xd4>
 80074e6:	e00f      	b.n	8007508 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2201      	movs	r2, #1
 80074ee:	2100      	movs	r1, #0
 80074f0:	4618      	mov	r0, r3
 80074f2:	f001 f967 	bl	80087c4 <TIM_CCxChannelCmd>
      break;
 80074f6:	e016      	b.n	8007526 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2201      	movs	r2, #1
 80074fe:	2104      	movs	r1, #4
 8007500:	4618      	mov	r0, r3
 8007502:	f001 f95f 	bl	80087c4 <TIM_CCxChannelCmd>
      break;
 8007506:	e00e      	b.n	8007526 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2201      	movs	r2, #1
 800750e:	2100      	movs	r1, #0
 8007510:	4618      	mov	r0, r3
 8007512:	f001 f957 	bl	80087c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2201      	movs	r2, #1
 800751c:	2104      	movs	r1, #4
 800751e:	4618      	mov	r0, r3
 8007520:	f001 f950 	bl	80087c4 <TIM_CCxChannelCmd>
      break;
 8007524:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f042 0201 	orr.w	r2, r2, #1
 8007534:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d003      	beq.n	8007558 <HAL_TIM_Encoder_Stop+0x18>
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	2b04      	cmp	r3, #4
 8007554:	d008      	beq.n	8007568 <HAL_TIM_Encoder_Stop+0x28>
 8007556:	e00f      	b.n	8007578 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2200      	movs	r2, #0
 800755e:	2100      	movs	r1, #0
 8007560:	4618      	mov	r0, r3
 8007562:	f001 f92f 	bl	80087c4 <TIM_CCxChannelCmd>
      break;
 8007566:	e016      	b.n	8007596 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2200      	movs	r2, #0
 800756e:	2104      	movs	r1, #4
 8007570:	4618      	mov	r0, r3
 8007572:	f001 f927 	bl	80087c4 <TIM_CCxChannelCmd>
      break;
 8007576:	e00e      	b.n	8007596 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2200      	movs	r2, #0
 800757e:	2100      	movs	r1, #0
 8007580:	4618      	mov	r0, r3
 8007582:	f001 f91f 	bl	80087c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2200      	movs	r2, #0
 800758c:	2104      	movs	r1, #4
 800758e:	4618      	mov	r0, r3
 8007590:	f001 f918 	bl	80087c4 <TIM_CCxChannelCmd>
      break;
 8007594:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	6a1a      	ldr	r2, [r3, #32]
 800759c:	f241 1311 	movw	r3, #4369	@ 0x1111
 80075a0:	4013      	ands	r3, r2
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10f      	bne.n	80075c6 <HAL_TIM_Encoder_Stop+0x86>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	6a1a      	ldr	r2, [r3, #32]
 80075ac:	f240 4344 	movw	r3, #1092	@ 0x444
 80075b0:	4013      	ands	r3, r2
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d107      	bne.n	80075c6 <HAL_TIM_Encoder_Stop+0x86>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f022 0201 	bic.w	r2, r2, #1
 80075c4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d002      	beq.n	80075d2 <HAL_TIM_Encoder_Stop+0x92>
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	2b04      	cmp	r3, #4
 80075d0:	d138      	bne.n	8007644 <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d104      	bne.n	80075e2 <HAL_TIM_Encoder_Stop+0xa2>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2201      	movs	r2, #1
 80075dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075e0:	e013      	b.n	800760a <HAL_TIM_Encoder_Stop+0xca>
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	2b04      	cmp	r3, #4
 80075e6:	d104      	bne.n	80075f2 <HAL_TIM_Encoder_Stop+0xb2>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075f0:	e00b      	b.n	800760a <HAL_TIM_Encoder_Stop+0xca>
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	2b08      	cmp	r3, #8
 80075f6:	d104      	bne.n	8007602 <HAL_TIM_Encoder_Stop+0xc2>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007600:	e003      	b.n	800760a <HAL_TIM_Encoder_Stop+0xca>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d104      	bne.n	800761a <HAL_TIM_Encoder_Stop+0xda>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007618:	e024      	b.n	8007664 <HAL_TIM_Encoder_Stop+0x124>
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	2b04      	cmp	r3, #4
 800761e:	d104      	bne.n	800762a <HAL_TIM_Encoder_Stop+0xea>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007628:	e01c      	b.n	8007664 <HAL_TIM_Encoder_Stop+0x124>
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	2b08      	cmp	r3, #8
 800762e:	d104      	bne.n	800763a <HAL_TIM_Encoder_Stop+0xfa>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007638:	e014      	b.n	8007664 <HAL_TIM_Encoder_Stop+0x124>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007642:	e00f      	b.n	8007664 <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3708      	adds	r7, #8
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b084      	sub	sp, #16
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
 8007676:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800767e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007686:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800768e:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007696:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d110      	bne.n	80076c0 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800769e:	7bfb      	ldrb	r3, [r7, #15]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d102      	bne.n	80076aa <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80076a4:	7b7b      	ldrb	r3, [r7, #13]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d001      	beq.n	80076ae <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e089      	b.n	80077c2 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2202      	movs	r2, #2
 80076b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2202      	movs	r2, #2
 80076ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076be:	e031      	b.n	8007724 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	2b04      	cmp	r3, #4
 80076c4:	d110      	bne.n	80076e8 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80076c6:	7bbb      	ldrb	r3, [r7, #14]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d102      	bne.n	80076d2 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80076cc:	7b3b      	ldrb	r3, [r7, #12]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d001      	beq.n	80076d6 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e075      	b.n	80077c2 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2202      	movs	r2, #2
 80076da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2202      	movs	r2, #2
 80076e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80076e6:	e01d      	b.n	8007724 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80076e8:	7bfb      	ldrb	r3, [r7, #15]
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d108      	bne.n	8007700 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80076ee:	7bbb      	ldrb	r3, [r7, #14]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d105      	bne.n	8007700 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80076f4:	7b7b      	ldrb	r3, [r7, #13]
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d102      	bne.n	8007700 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80076fa:	7b3b      	ldrb	r3, [r7, #12]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d001      	beq.n	8007704 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8007700:	2301      	movs	r3, #1
 8007702:	e05e      	b.n	80077c2 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2202      	movs	r2, #2
 8007708:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2202      	movs	r2, #2
 8007710:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2202      	movs	r2, #2
 8007718:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2202      	movs	r2, #2
 8007720:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d003      	beq.n	8007732 <HAL_TIM_Encoder_Start_IT+0xc4>
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	2b04      	cmp	r3, #4
 800772e:	d010      	beq.n	8007752 <HAL_TIM_Encoder_Start_IT+0xe4>
 8007730:	e01f      	b.n	8007772 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2201      	movs	r2, #1
 8007738:	2100      	movs	r1, #0
 800773a:	4618      	mov	r0, r3
 800773c:	f001 f842 	bl	80087c4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68da      	ldr	r2, [r3, #12]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f042 0202 	orr.w	r2, r2, #2
 800774e:	60da      	str	r2, [r3, #12]
      break;
 8007750:	e02e      	b.n	80077b0 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2201      	movs	r2, #1
 8007758:	2104      	movs	r1, #4
 800775a:	4618      	mov	r0, r3
 800775c:	f001 f832 	bl	80087c4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68da      	ldr	r2, [r3, #12]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f042 0204 	orr.w	r2, r2, #4
 800776e:	60da      	str	r2, [r3, #12]
      break;
 8007770:	e01e      	b.n	80077b0 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2201      	movs	r2, #1
 8007778:	2100      	movs	r1, #0
 800777a:	4618      	mov	r0, r3
 800777c:	f001 f822 	bl	80087c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2201      	movs	r2, #1
 8007786:	2104      	movs	r1, #4
 8007788:	4618      	mov	r0, r3
 800778a:	f001 f81b 	bl	80087c4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68da      	ldr	r2, [r3, #12]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f042 0202 	orr.w	r2, r2, #2
 800779c:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68da      	ldr	r2, [r3, #12]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f042 0204 	orr.w	r2, r2, #4
 80077ac:	60da      	str	r2, [r3, #12]
      break;
 80077ae:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681a      	ldr	r2, [r3, #0]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f042 0201 	orr.w	r2, r2, #1
 80077be:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b082      	sub	sp, #8
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
 80077d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10f      	bne.n	80077fa <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2200      	movs	r2, #0
 80077e0:	2100      	movs	r1, #0
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 ffee 	bl	80087c4 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68da      	ldr	r2, [r3, #12]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f022 0202 	bic.w	r2, r2, #2
 80077f6:	60da      	str	r2, [r3, #12]
 80077f8:	e030      	b.n	800785c <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b04      	cmp	r3, #4
 80077fe:	d10f      	bne.n	8007820 <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2200      	movs	r2, #0
 8007806:	2104      	movs	r1, #4
 8007808:	4618      	mov	r0, r3
 800780a:	f000 ffdb 	bl	80087c4 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	68da      	ldr	r2, [r3, #12]
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f022 0204 	bic.w	r2, r2, #4
 800781c:	60da      	str	r2, [r3, #12]
 800781e:	e01d      	b.n	800785c <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2200      	movs	r2, #0
 8007826:	2100      	movs	r1, #0
 8007828:	4618      	mov	r0, r3
 800782a:	f000 ffcb 	bl	80087c4 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2200      	movs	r2, #0
 8007834:	2104      	movs	r1, #4
 8007836:	4618      	mov	r0, r3
 8007838:	f000 ffc4 	bl	80087c4 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68da      	ldr	r2, [r3, #12]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f022 0202 	bic.w	r2, r2, #2
 800784a:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68da      	ldr	r2, [r3, #12]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f022 0204 	bic.w	r2, r2, #4
 800785a:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	6a1a      	ldr	r2, [r3, #32]
 8007862:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007866:	4013      	ands	r3, r2
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10f      	bne.n	800788c <HAL_TIM_Encoder_Stop_IT+0xc2>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	6a1a      	ldr	r2, [r3, #32]
 8007872:	f240 4344 	movw	r3, #1092	@ 0x444
 8007876:	4013      	ands	r3, r2
 8007878:	2b00      	cmp	r3, #0
 800787a:	d107      	bne.n	800788c <HAL_TIM_Encoder_Stop_IT+0xc2>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f022 0201 	bic.w	r2, r2, #1
 800788a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d002      	beq.n	8007898 <HAL_TIM_Encoder_Stop_IT+0xce>
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	2b04      	cmp	r3, #4
 8007896:	d138      	bne.n	800790a <HAL_TIM_Encoder_Stop_IT+0x140>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d104      	bne.n	80078a8 <HAL_TIM_Encoder_Stop_IT+0xde>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80078a6:	e013      	b.n	80078d0 <HAL_TIM_Encoder_Stop_IT+0x106>
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	2b04      	cmp	r3, #4
 80078ac:	d104      	bne.n	80078b8 <HAL_TIM_Encoder_Stop_IT+0xee>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80078b6:	e00b      	b.n	80078d0 <HAL_TIM_Encoder_Stop_IT+0x106>
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	2b08      	cmp	r3, #8
 80078bc:	d104      	bne.n	80078c8 <HAL_TIM_Encoder_Stop_IT+0xfe>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80078c6:	e003      	b.n	80078d0 <HAL_TIM_Encoder_Stop_IT+0x106>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d104      	bne.n	80078e0 <HAL_TIM_Encoder_Stop_IT+0x116>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2201      	movs	r2, #1
 80078da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80078de:	e024      	b.n	800792a <HAL_TIM_Encoder_Stop_IT+0x160>
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	2b04      	cmp	r3, #4
 80078e4:	d104      	bne.n	80078f0 <HAL_TIM_Encoder_Stop_IT+0x126>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2201      	movs	r2, #1
 80078ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80078ee:	e01c      	b.n	800792a <HAL_TIM_Encoder_Stop_IT+0x160>
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	2b08      	cmp	r3, #8
 80078f4:	d104      	bne.n	8007900 <HAL_TIM_Encoder_Stop_IT+0x136>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078fe:	e014      	b.n	800792a <HAL_TIM_Encoder_Stop_IT+0x160>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007908:	e00f      	b.n	800792a <HAL_TIM_Encoder_Stop_IT+0x160>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2201      	movs	r2, #1
 8007916:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2201      	movs	r2, #1
 800791e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2201      	movs	r2, #1
 8007926:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return HAL_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3708      	adds	r7, #8
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	f003 0302 	and.w	r3, r3, #2
 8007952:	2b00      	cmp	r3, #0
 8007954:	d020      	beq.n	8007998 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f003 0302 	and.w	r3, r3, #2
 800795c:	2b00      	cmp	r3, #0
 800795e:	d01b      	beq.n	8007998 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f06f 0202 	mvn.w	r2, #2
 8007968:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2201      	movs	r2, #1
 800796e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	f003 0303 	and.w	r3, r3, #3
 800797a:	2b00      	cmp	r3, #0
 800797c:	d003      	beq.n	8007986 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7fb f9e0 	bl	8002d44 <HAL_TIM_IC_CaptureCallback>
 8007984:	e005      	b.n	8007992 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fb2e 	bl	8007fe8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 fb35 	bl	8007ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	f003 0304 	and.w	r3, r3, #4
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d020      	beq.n	80079e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f003 0304 	and.w	r3, r3, #4
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d01b      	beq.n	80079e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f06f 0204 	mvn.w	r2, #4
 80079b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2202      	movs	r2, #2
 80079ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d003      	beq.n	80079d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f7fb f9ba 	bl	8002d44 <HAL_TIM_IC_CaptureCallback>
 80079d0:	e005      	b.n	80079de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fb08 	bl	8007fe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 fb0f 	bl	8007ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	f003 0308 	and.w	r3, r3, #8
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d020      	beq.n	8007a30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f003 0308 	and.w	r3, r3, #8
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d01b      	beq.n	8007a30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f06f 0208 	mvn.w	r2, #8
 8007a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2204      	movs	r2, #4
 8007a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	69db      	ldr	r3, [r3, #28]
 8007a0e:	f003 0303 	and.w	r3, r3, #3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d003      	beq.n	8007a1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f7fb f994 	bl	8002d44 <HAL_TIM_IC_CaptureCallback>
 8007a1c:	e005      	b.n	8007a2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fae2 	bl	8007fe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fae9 	bl	8007ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	f003 0310 	and.w	r3, r3, #16
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d020      	beq.n	8007a7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f003 0310 	and.w	r3, r3, #16
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d01b      	beq.n	8007a7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f06f 0210 	mvn.w	r2, #16
 8007a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2208      	movs	r2, #8
 8007a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	69db      	ldr	r3, [r3, #28]
 8007a5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d003      	beq.n	8007a6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7fb f96e 	bl	8002d44 <HAL_TIM_IC_CaptureCallback>
 8007a68:	e005      	b.n	8007a76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 fabc 	bl	8007fe8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fac3 	bl	8007ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	f003 0301 	and.w	r3, r3, #1
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00c      	beq.n	8007aa0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f003 0301 	and.w	r3, r3, #1
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d007      	beq.n	8007aa0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f06f 0201 	mvn.w	r2, #1
 8007a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7fb f984 	bl	8002da8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d00c      	beq.n	8007ac4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d007      	beq.n	8007ac4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 ff1e 	bl	8008900 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00c      	beq.n	8007ae8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d007      	beq.n	8007ae8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fa94 	bl	8008010 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	f003 0320 	and.w	r3, r3, #32
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d00c      	beq.n	8007b0c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f003 0320 	and.w	r3, r3, #32
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d007      	beq.n	8007b0c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f06f 0220 	mvn.w	r2, #32
 8007b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fef0 	bl	80088ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b0c:	bf00      	nop
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b086      	sub	sp, #24
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b20:	2300      	movs	r3, #0
 8007b22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d101      	bne.n	8007b32 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007b2e:	2302      	movs	r3, #2
 8007b30:	e088      	b.n	8007c44 <HAL_TIM_IC_ConfigChannel+0x130>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d11b      	bne.n	8007b78 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007b50:	f000 fc80 	bl	8008454 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	699a      	ldr	r2, [r3, #24]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f022 020c 	bic.w	r2, r2, #12
 8007b62:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	6999      	ldr	r1, [r3, #24]
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	689a      	ldr	r2, [r3, #8]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	430a      	orrs	r2, r1
 8007b74:	619a      	str	r2, [r3, #24]
 8007b76:	e060      	b.n	8007c3a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2b04      	cmp	r3, #4
 8007b7c:	d11c      	bne.n	8007bb8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007b8e:	f000 fcf8 	bl	8008582 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	699a      	ldr	r2, [r3, #24]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007ba0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	6999      	ldr	r1, [r3, #24]
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	021a      	lsls	r2, r3, #8
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	430a      	orrs	r2, r1
 8007bb4:	619a      	str	r2, [r3, #24]
 8007bb6:	e040      	b.n	8007c3a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2b08      	cmp	r3, #8
 8007bbc:	d11b      	bne.n	8007bf6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007bce:	f000 fd45 	bl	800865c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	69da      	ldr	r2, [r3, #28]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f022 020c 	bic.w	r2, r2, #12
 8007be0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	69d9      	ldr	r1, [r3, #28]
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	689a      	ldr	r2, [r3, #8]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	430a      	orrs	r2, r1
 8007bf2:	61da      	str	r2, [r3, #28]
 8007bf4:	e021      	b.n	8007c3a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2b0c      	cmp	r3, #12
 8007bfa:	d11c      	bne.n	8007c36 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007c0c:	f000 fd62 	bl	80086d4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	69da      	ldr	r2, [r3, #28]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007c1e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	69d9      	ldr	r1, [r3, #28]
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	021a      	lsls	r2, r3, #8
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	430a      	orrs	r2, r1
 8007c32:	61da      	str	r2, [r3, #28]
 8007c34:	e001      	b.n	8007c3a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007c42:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3718      	adds	r7, #24
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d101      	bne.n	8007c6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007c66:	2302      	movs	r3, #2
 8007c68:	e0ae      	b.n	8007dc8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2b0c      	cmp	r3, #12
 8007c76:	f200 809f 	bhi.w	8007db8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c80:	08007cb5 	.word	0x08007cb5
 8007c84:	08007db9 	.word	0x08007db9
 8007c88:	08007db9 	.word	0x08007db9
 8007c8c:	08007db9 	.word	0x08007db9
 8007c90:	08007cf5 	.word	0x08007cf5
 8007c94:	08007db9 	.word	0x08007db9
 8007c98:	08007db9 	.word	0x08007db9
 8007c9c:	08007db9 	.word	0x08007db9
 8007ca0:	08007d37 	.word	0x08007d37
 8007ca4:	08007db9 	.word	0x08007db9
 8007ca8:	08007db9 	.word	0x08007db9
 8007cac:	08007db9 	.word	0x08007db9
 8007cb0:	08007d77 	.word	0x08007d77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68b9      	ldr	r1, [r7, #8]
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f000 fa3e 	bl	800813c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	699a      	ldr	r2, [r3, #24]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f042 0208 	orr.w	r2, r2, #8
 8007cce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	699a      	ldr	r2, [r3, #24]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f022 0204 	bic.w	r2, r2, #4
 8007cde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	6999      	ldr	r1, [r3, #24]
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	691a      	ldr	r2, [r3, #16]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	430a      	orrs	r2, r1
 8007cf0:	619a      	str	r2, [r3, #24]
      break;
 8007cf2:	e064      	b.n	8007dbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68b9      	ldr	r1, [r7, #8]
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f000 fa84 	bl	8008208 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	699a      	ldr	r2, [r3, #24]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	699a      	ldr	r2, [r3, #24]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6999      	ldr	r1, [r3, #24]
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	021a      	lsls	r2, r3, #8
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	430a      	orrs	r2, r1
 8007d32:	619a      	str	r2, [r3, #24]
      break;
 8007d34:	e043      	b.n	8007dbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	68b9      	ldr	r1, [r7, #8]
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f000 facf 	bl	80082e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	69da      	ldr	r2, [r3, #28]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f042 0208 	orr.w	r2, r2, #8
 8007d50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	69da      	ldr	r2, [r3, #28]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f022 0204 	bic.w	r2, r2, #4
 8007d60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	69d9      	ldr	r1, [r3, #28]
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	691a      	ldr	r2, [r3, #16]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	430a      	orrs	r2, r1
 8007d72:	61da      	str	r2, [r3, #28]
      break;
 8007d74:	e023      	b.n	8007dbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68b9      	ldr	r1, [r7, #8]
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f000 fb19 	bl	80083b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	69da      	ldr	r2, [r3, #28]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	69da      	ldr	r2, [r3, #28]
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007da0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	69d9      	ldr	r1, [r3, #28]
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	021a      	lsls	r2, r3, #8
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	430a      	orrs	r2, r1
 8007db4:	61da      	str	r2, [r3, #28]
      break;
 8007db6:	e002      	b.n	8007dbe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	75fb      	strb	r3, [r7, #23]
      break;
 8007dbc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3718      	adds	r7, #24
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d101      	bne.n	8007dec <HAL_TIM_ConfigClockSource+0x1c>
 8007de8:	2302      	movs	r3, #2
 8007dea:	e0b4      	b.n	8007f56 <HAL_TIM_ConfigClockSource+0x186>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2202      	movs	r2, #2
 8007df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007e0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68ba      	ldr	r2, [r7, #8]
 8007e1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e24:	d03e      	beq.n	8007ea4 <HAL_TIM_ConfigClockSource+0xd4>
 8007e26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e2a:	f200 8087 	bhi.w	8007f3c <HAL_TIM_ConfigClockSource+0x16c>
 8007e2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e32:	f000 8086 	beq.w	8007f42 <HAL_TIM_ConfigClockSource+0x172>
 8007e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e3a:	d87f      	bhi.n	8007f3c <HAL_TIM_ConfigClockSource+0x16c>
 8007e3c:	2b70      	cmp	r3, #112	@ 0x70
 8007e3e:	d01a      	beq.n	8007e76 <HAL_TIM_ConfigClockSource+0xa6>
 8007e40:	2b70      	cmp	r3, #112	@ 0x70
 8007e42:	d87b      	bhi.n	8007f3c <HAL_TIM_ConfigClockSource+0x16c>
 8007e44:	2b60      	cmp	r3, #96	@ 0x60
 8007e46:	d050      	beq.n	8007eea <HAL_TIM_ConfigClockSource+0x11a>
 8007e48:	2b60      	cmp	r3, #96	@ 0x60
 8007e4a:	d877      	bhi.n	8007f3c <HAL_TIM_ConfigClockSource+0x16c>
 8007e4c:	2b50      	cmp	r3, #80	@ 0x50
 8007e4e:	d03c      	beq.n	8007eca <HAL_TIM_ConfigClockSource+0xfa>
 8007e50:	2b50      	cmp	r3, #80	@ 0x50
 8007e52:	d873      	bhi.n	8007f3c <HAL_TIM_ConfigClockSource+0x16c>
 8007e54:	2b40      	cmp	r3, #64	@ 0x40
 8007e56:	d058      	beq.n	8007f0a <HAL_TIM_ConfigClockSource+0x13a>
 8007e58:	2b40      	cmp	r3, #64	@ 0x40
 8007e5a:	d86f      	bhi.n	8007f3c <HAL_TIM_ConfigClockSource+0x16c>
 8007e5c:	2b30      	cmp	r3, #48	@ 0x30
 8007e5e:	d064      	beq.n	8007f2a <HAL_TIM_ConfigClockSource+0x15a>
 8007e60:	2b30      	cmp	r3, #48	@ 0x30
 8007e62:	d86b      	bhi.n	8007f3c <HAL_TIM_ConfigClockSource+0x16c>
 8007e64:	2b20      	cmp	r3, #32
 8007e66:	d060      	beq.n	8007f2a <HAL_TIM_ConfigClockSource+0x15a>
 8007e68:	2b20      	cmp	r3, #32
 8007e6a:	d867      	bhi.n	8007f3c <HAL_TIM_ConfigClockSource+0x16c>
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d05c      	beq.n	8007f2a <HAL_TIM_ConfigClockSource+0x15a>
 8007e70:	2b10      	cmp	r3, #16
 8007e72:	d05a      	beq.n	8007f2a <HAL_TIM_ConfigClockSource+0x15a>
 8007e74:	e062      	b.n	8007f3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e86:	f000 fc7d 	bl	8008784 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007e98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	609a      	str	r2, [r3, #8]
      break;
 8007ea2:	e04f      	b.n	8007f44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007eb4:	f000 fc66 	bl	8008784 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	689a      	ldr	r2, [r3, #8]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007ec6:	609a      	str	r2, [r3, #8]
      break;
 8007ec8:	e03c      	b.n	8007f44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	f000 fb24 	bl	8008524 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2150      	movs	r1, #80	@ 0x50
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f000 fc33 	bl	800874e <TIM_ITRx_SetConfig>
      break;
 8007ee8:	e02c      	b.n	8007f44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	f000 fb80 	bl	80085fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2160      	movs	r1, #96	@ 0x60
 8007f02:	4618      	mov	r0, r3
 8007f04:	f000 fc23 	bl	800874e <TIM_ITRx_SetConfig>
      break;
 8007f08:	e01c      	b.n	8007f44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f16:	461a      	mov	r2, r3
 8007f18:	f000 fb04 	bl	8008524 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2140      	movs	r1, #64	@ 0x40
 8007f22:	4618      	mov	r0, r3
 8007f24:	f000 fc13 	bl	800874e <TIM_ITRx_SetConfig>
      break;
 8007f28:	e00c      	b.n	8007f44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4619      	mov	r1, r3
 8007f34:	4610      	mov	r0, r2
 8007f36:	f000 fc0a 	bl	800874e <TIM_ITRx_SetConfig>
      break;
 8007f3a:	e003      	b.n	8007f44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8007f40:	e000      	b.n	8007f44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007f42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3710      	adds	r7, #16
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
	...

08007f60 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	2b0c      	cmp	r3, #12
 8007f72:	d831      	bhi.n	8007fd8 <HAL_TIM_ReadCapturedValue+0x78>
 8007f74:	a201      	add	r2, pc, #4	@ (adr r2, 8007f7c <HAL_TIM_ReadCapturedValue+0x1c>)
 8007f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f7a:	bf00      	nop
 8007f7c:	08007fb1 	.word	0x08007fb1
 8007f80:	08007fd9 	.word	0x08007fd9
 8007f84:	08007fd9 	.word	0x08007fd9
 8007f88:	08007fd9 	.word	0x08007fd9
 8007f8c:	08007fbb 	.word	0x08007fbb
 8007f90:	08007fd9 	.word	0x08007fd9
 8007f94:	08007fd9 	.word	0x08007fd9
 8007f98:	08007fd9 	.word	0x08007fd9
 8007f9c:	08007fc5 	.word	0x08007fc5
 8007fa0:	08007fd9 	.word	0x08007fd9
 8007fa4:	08007fd9 	.word	0x08007fd9
 8007fa8:	08007fd9 	.word	0x08007fd9
 8007fac:	08007fcf 	.word	0x08007fcf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fb6:	60fb      	str	r3, [r7, #12]

      break;
 8007fb8:	e00f      	b.n	8007fda <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fc0:	60fb      	str	r3, [r7, #12]

      break;
 8007fc2:	e00a      	b.n	8007fda <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fca:	60fb      	str	r3, [r7, #12]

      break;
 8007fcc:	e005      	b.n	8007fda <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fd4:	60fb      	str	r3, [r7, #12]

      break;
 8007fd6:	e000      	b.n	8007fda <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007fd8:	bf00      	nop
  }

  return tmpreg;
 8007fda:	68fb      	ldr	r3, [r7, #12]
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3714      	adds	r7, #20
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ff0:	bf00      	nop
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008004:	bf00      	nop
 8008006:	370c      	adds	r7, #12
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr

08008010 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a3a      	ldr	r2, [pc, #232]	@ (8008120 <TIM_Base_SetConfig+0xfc>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d00f      	beq.n	800805c <TIM_Base_SetConfig+0x38>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008042:	d00b      	beq.n	800805c <TIM_Base_SetConfig+0x38>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a37      	ldr	r2, [pc, #220]	@ (8008124 <TIM_Base_SetConfig+0x100>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d007      	beq.n	800805c <TIM_Base_SetConfig+0x38>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a36      	ldr	r2, [pc, #216]	@ (8008128 <TIM_Base_SetConfig+0x104>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d003      	beq.n	800805c <TIM_Base_SetConfig+0x38>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a35      	ldr	r2, [pc, #212]	@ (800812c <TIM_Base_SetConfig+0x108>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d108      	bne.n	800806e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008062:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	68fa      	ldr	r2, [r7, #12]
 800806a:	4313      	orrs	r3, r2
 800806c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4a2b      	ldr	r2, [pc, #172]	@ (8008120 <TIM_Base_SetConfig+0xfc>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d01b      	beq.n	80080ae <TIM_Base_SetConfig+0x8a>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800807c:	d017      	beq.n	80080ae <TIM_Base_SetConfig+0x8a>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	4a28      	ldr	r2, [pc, #160]	@ (8008124 <TIM_Base_SetConfig+0x100>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d013      	beq.n	80080ae <TIM_Base_SetConfig+0x8a>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4a27      	ldr	r2, [pc, #156]	@ (8008128 <TIM_Base_SetConfig+0x104>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d00f      	beq.n	80080ae <TIM_Base_SetConfig+0x8a>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4a26      	ldr	r2, [pc, #152]	@ (800812c <TIM_Base_SetConfig+0x108>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d00b      	beq.n	80080ae <TIM_Base_SetConfig+0x8a>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a25      	ldr	r2, [pc, #148]	@ (8008130 <TIM_Base_SetConfig+0x10c>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d007      	beq.n	80080ae <TIM_Base_SetConfig+0x8a>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	4a24      	ldr	r2, [pc, #144]	@ (8008134 <TIM_Base_SetConfig+0x110>)
 80080a2:	4293      	cmp	r3, r2
 80080a4:	d003      	beq.n	80080ae <TIM_Base_SetConfig+0x8a>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a23      	ldr	r2, [pc, #140]	@ (8008138 <TIM_Base_SetConfig+0x114>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d108      	bne.n	80080c0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	4313      	orrs	r3, r2
 80080be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	695b      	ldr	r3, [r3, #20]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68fa      	ldr	r2, [r7, #12]
 80080d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	689a      	ldr	r2, [r3, #8]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a0e      	ldr	r2, [pc, #56]	@ (8008120 <TIM_Base_SetConfig+0xfc>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d103      	bne.n	80080f4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	691a      	ldr	r2, [r3, #16]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	f003 0301 	and.w	r3, r3, #1
 8008102:	2b01      	cmp	r3, #1
 8008104:	d105      	bne.n	8008112 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	f023 0201 	bic.w	r2, r3, #1
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	611a      	str	r2, [r3, #16]
  }
}
 8008112:	bf00      	nop
 8008114:	3714      	adds	r7, #20
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	40010000 	.word	0x40010000
 8008124:	40000400 	.word	0x40000400
 8008128:	40000800 	.word	0x40000800
 800812c:	40000c00 	.word	0x40000c00
 8008130:	40014000 	.word	0x40014000
 8008134:	40014400 	.word	0x40014400
 8008138:	40014800 	.word	0x40014800

0800813c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800813c:	b480      	push	{r7}
 800813e:	b087      	sub	sp, #28
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a1b      	ldr	r3, [r3, #32]
 800814a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a1b      	ldr	r3, [r3, #32]
 8008150:	f023 0201 	bic.w	r2, r3, #1
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	699b      	ldr	r3, [r3, #24]
 8008162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800816a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f023 0303 	bic.w	r3, r3, #3
 8008172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	4313      	orrs	r3, r2
 800817c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	f023 0302 	bic.w	r3, r3, #2
 8008184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	4313      	orrs	r3, r2
 800818e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a1c      	ldr	r2, [pc, #112]	@ (8008204 <TIM_OC1_SetConfig+0xc8>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d10c      	bne.n	80081b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	f023 0308 	bic.w	r3, r3, #8
 800819e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	697a      	ldr	r2, [r7, #20]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	f023 0304 	bic.w	r3, r3, #4
 80081b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a13      	ldr	r2, [pc, #76]	@ (8008204 <TIM_OC1_SetConfig+0xc8>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d111      	bne.n	80081de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80081c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	693a      	ldr	r2, [r7, #16]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	699b      	ldr	r3, [r3, #24]
 80081d8:	693a      	ldr	r2, [r7, #16]
 80081da:	4313      	orrs	r3, r2
 80081dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	693a      	ldr	r2, [r7, #16]
 80081e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	68fa      	ldr	r2, [r7, #12]
 80081e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	685a      	ldr	r2, [r3, #4]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	697a      	ldr	r2, [r7, #20]
 80081f6:	621a      	str	r2, [r3, #32]
}
 80081f8:	bf00      	nop
 80081fa:	371c      	adds	r7, #28
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr
 8008204:	40010000 	.word	0x40010000

08008208 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008208:	b480      	push	{r7}
 800820a:	b087      	sub	sp, #28
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a1b      	ldr	r3, [r3, #32]
 8008216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6a1b      	ldr	r3, [r3, #32]
 800821c:	f023 0210 	bic.w	r2, r3, #16
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	699b      	ldr	r3, [r3, #24]
 800822e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800823e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	021b      	lsls	r3, r3, #8
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	4313      	orrs	r3, r2
 800824a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	f023 0320 	bic.w	r3, r3, #32
 8008252:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	011b      	lsls	r3, r3, #4
 800825a:	697a      	ldr	r2, [r7, #20]
 800825c:	4313      	orrs	r3, r2
 800825e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a1e      	ldr	r2, [pc, #120]	@ (80082dc <TIM_OC2_SetConfig+0xd4>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d10d      	bne.n	8008284 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800826e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	011b      	lsls	r3, r3, #4
 8008276:	697a      	ldr	r2, [r7, #20]
 8008278:	4313      	orrs	r3, r2
 800827a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008282:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a15      	ldr	r2, [pc, #84]	@ (80082dc <TIM_OC2_SetConfig+0xd4>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d113      	bne.n	80082b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008292:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800829a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	695b      	ldr	r3, [r3, #20]
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	693a      	ldr	r2, [r7, #16]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	693a      	ldr	r2, [r7, #16]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	685a      	ldr	r2, [r3, #4]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	697a      	ldr	r2, [r7, #20]
 80082cc:	621a      	str	r2, [r3, #32]
}
 80082ce:	bf00      	nop
 80082d0:	371c      	adds	r7, #28
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	40010000 	.word	0x40010000

080082e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b087      	sub	sp, #28
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a1b      	ldr	r3, [r3, #32]
 80082ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6a1b      	ldr	r3, [r3, #32]
 80082f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	69db      	ldr	r3, [r3, #28]
 8008306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800830e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f023 0303 	bic.w	r3, r3, #3
 8008316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	68fa      	ldr	r2, [r7, #12]
 800831e:	4313      	orrs	r3, r2
 8008320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008328:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	021b      	lsls	r3, r3, #8
 8008330:	697a      	ldr	r2, [r7, #20]
 8008332:	4313      	orrs	r3, r2
 8008334:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4a1d      	ldr	r2, [pc, #116]	@ (80083b0 <TIM_OC3_SetConfig+0xd0>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d10d      	bne.n	800835a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008344:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	021b      	lsls	r3, r3, #8
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	4313      	orrs	r3, r2
 8008350:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008358:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a14      	ldr	r2, [pc, #80]	@ (80083b0 <TIM_OC3_SetConfig+0xd0>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d113      	bne.n	800838a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008368:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008370:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	695b      	ldr	r3, [r3, #20]
 8008376:	011b      	lsls	r3, r3, #4
 8008378:	693a      	ldr	r2, [r7, #16]
 800837a:	4313      	orrs	r3, r2
 800837c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	699b      	ldr	r3, [r3, #24]
 8008382:	011b      	lsls	r3, r3, #4
 8008384:	693a      	ldr	r2, [r7, #16]
 8008386:	4313      	orrs	r3, r2
 8008388:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	693a      	ldr	r2, [r7, #16]
 800838e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	685a      	ldr	r2, [r3, #4]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	697a      	ldr	r2, [r7, #20]
 80083a2:	621a      	str	r2, [r3, #32]
}
 80083a4:	bf00      	nop
 80083a6:	371c      	adds	r7, #28
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr
 80083b0:	40010000 	.word	0x40010000

080083b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b087      	sub	sp, #28
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
 80083bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a1b      	ldr	r3, [r3, #32]
 80083c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a1b      	ldr	r3, [r3, #32]
 80083c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	69db      	ldr	r3, [r3, #28]
 80083da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	021b      	lsls	r3, r3, #8
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80083fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	031b      	lsls	r3, r3, #12
 8008406:	693a      	ldr	r2, [r7, #16]
 8008408:	4313      	orrs	r3, r2
 800840a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a10      	ldr	r2, [pc, #64]	@ (8008450 <TIM_OC4_SetConfig+0x9c>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d109      	bne.n	8008428 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800841a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	695b      	ldr	r3, [r3, #20]
 8008420:	019b      	lsls	r3, r3, #6
 8008422:	697a      	ldr	r2, [r7, #20]
 8008424:	4313      	orrs	r3, r2
 8008426:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	697a      	ldr	r2, [r7, #20]
 800842c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	685a      	ldr	r2, [r3, #4]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	693a      	ldr	r2, [r7, #16]
 8008440:	621a      	str	r2, [r3, #32]
}
 8008442:	bf00      	nop
 8008444:	371c      	adds	r7, #28
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	40010000 	.word	0x40010000

08008454 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008454:	b480      	push	{r7}
 8008456:	b087      	sub	sp, #28
 8008458:	af00      	add	r7, sp, #0
 800845a:	60f8      	str	r0, [r7, #12]
 800845c:	60b9      	str	r1, [r7, #8]
 800845e:	607a      	str	r2, [r7, #4]
 8008460:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6a1b      	ldr	r3, [r3, #32]
 8008466:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6a1b      	ldr	r3, [r3, #32]
 800846c:	f023 0201 	bic.w	r2, r3, #1
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	699b      	ldr	r3, [r3, #24]
 8008478:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	4a24      	ldr	r2, [pc, #144]	@ (8008510 <TIM_TI1_SetConfig+0xbc>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d013      	beq.n	80084aa <TIM_TI1_SetConfig+0x56>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008488:	d00f      	beq.n	80084aa <TIM_TI1_SetConfig+0x56>
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	4a21      	ldr	r2, [pc, #132]	@ (8008514 <TIM_TI1_SetConfig+0xc0>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d00b      	beq.n	80084aa <TIM_TI1_SetConfig+0x56>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	4a20      	ldr	r2, [pc, #128]	@ (8008518 <TIM_TI1_SetConfig+0xc4>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d007      	beq.n	80084aa <TIM_TI1_SetConfig+0x56>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	4a1f      	ldr	r2, [pc, #124]	@ (800851c <TIM_TI1_SetConfig+0xc8>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d003      	beq.n	80084aa <TIM_TI1_SetConfig+0x56>
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	4a1e      	ldr	r2, [pc, #120]	@ (8008520 <TIM_TI1_SetConfig+0xcc>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d101      	bne.n	80084ae <TIM_TI1_SetConfig+0x5a>
 80084aa:	2301      	movs	r3, #1
 80084ac:	e000      	b.n	80084b0 <TIM_TI1_SetConfig+0x5c>
 80084ae:	2300      	movs	r3, #0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d008      	beq.n	80084c6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	f023 0303 	bic.w	r3, r3, #3
 80084ba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80084bc:	697a      	ldr	r2, [r7, #20]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4313      	orrs	r3, r2
 80084c2:	617b      	str	r3, [r7, #20]
 80084c4:	e003      	b.n	80084ce <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	f043 0301 	orr.w	r3, r3, #1
 80084cc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80084d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	011b      	lsls	r3, r3, #4
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	697a      	ldr	r2, [r7, #20]
 80084de:	4313      	orrs	r3, r2
 80084e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	f023 030a 	bic.w	r3, r3, #10
 80084e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	f003 030a 	and.w	r3, r3, #10
 80084f0:	693a      	ldr	r2, [r7, #16]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	697a      	ldr	r2, [r7, #20]
 80084fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	693a      	ldr	r2, [r7, #16]
 8008500:	621a      	str	r2, [r3, #32]
}
 8008502:	bf00      	nop
 8008504:	371c      	adds	r7, #28
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	40010000 	.word	0x40010000
 8008514:	40000400 	.word	0x40000400
 8008518:	40000800 	.word	0x40000800
 800851c:	40000c00 	.word	0x40000c00
 8008520:	40014000 	.word	0x40014000

08008524 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008524:	b480      	push	{r7}
 8008526:	b087      	sub	sp, #28
 8008528:	af00      	add	r7, sp, #0
 800852a:	60f8      	str	r0, [r7, #12]
 800852c:	60b9      	str	r1, [r7, #8]
 800852e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6a1b      	ldr	r3, [r3, #32]
 8008534:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	6a1b      	ldr	r3, [r3, #32]
 800853a:	f023 0201 	bic.w	r2, r3, #1
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	699b      	ldr	r3, [r3, #24]
 8008546:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800854e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	011b      	lsls	r3, r3, #4
 8008554:	693a      	ldr	r2, [r7, #16]
 8008556:	4313      	orrs	r3, r2
 8008558:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	f023 030a 	bic.w	r3, r3, #10
 8008560:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008562:	697a      	ldr	r2, [r7, #20]
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	4313      	orrs	r3, r2
 8008568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	693a      	ldr	r2, [r7, #16]
 800856e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	697a      	ldr	r2, [r7, #20]
 8008574:	621a      	str	r2, [r3, #32]
}
 8008576:	bf00      	nop
 8008578:	371c      	adds	r7, #28
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr

08008582 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008582:	b480      	push	{r7}
 8008584:	b087      	sub	sp, #28
 8008586:	af00      	add	r7, sp, #0
 8008588:	60f8      	str	r0, [r7, #12]
 800858a:	60b9      	str	r1, [r7, #8]
 800858c:	607a      	str	r2, [r7, #4]
 800858e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6a1b      	ldr	r3, [r3, #32]
 8008594:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6a1b      	ldr	r3, [r3, #32]
 800859a:	f023 0210 	bic.w	r2, r3, #16
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	699b      	ldr	r3, [r3, #24]
 80085a6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	021b      	lsls	r3, r3, #8
 80085b4:	693a      	ldr	r2, [r7, #16]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80085c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	031b      	lsls	r3, r3, #12
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	693a      	ldr	r2, [r7, #16]
 80085ca:	4313      	orrs	r3, r2
 80085cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80085d4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	011b      	lsls	r3, r3, #4
 80085da:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	693a      	ldr	r2, [r7, #16]
 80085e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	697a      	ldr	r2, [r7, #20]
 80085ee:	621a      	str	r2, [r3, #32]
}
 80085f0:	bf00      	nop
 80085f2:	371c      	adds	r7, #28
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b087      	sub	sp, #28
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6a1b      	ldr	r3, [r3, #32]
 800860c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6a1b      	ldr	r3, [r3, #32]
 8008612:	f023 0210 	bic.w	r2, r3, #16
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	699b      	ldr	r3, [r3, #24]
 800861e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008626:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	031b      	lsls	r3, r3, #12
 800862c:	693a      	ldr	r2, [r7, #16]
 800862e:	4313      	orrs	r3, r2
 8008630:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008638:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	011b      	lsls	r3, r3, #4
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	4313      	orrs	r3, r2
 8008642:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	693a      	ldr	r2, [r7, #16]
 8008648:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	697a      	ldr	r2, [r7, #20]
 800864e:	621a      	str	r2, [r3, #32]
}
 8008650:	bf00      	nop
 8008652:	371c      	adds	r7, #28
 8008654:	46bd      	mov	sp, r7
 8008656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865a:	4770      	bx	lr

0800865c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800865c:	b480      	push	{r7}
 800865e:	b087      	sub	sp, #28
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	607a      	str	r2, [r7, #4]
 8008668:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6a1b      	ldr	r3, [r3, #32]
 800866e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6a1b      	ldr	r3, [r3, #32]
 8008674:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	69db      	ldr	r3, [r3, #28]
 8008680:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	f023 0303 	bic.w	r3, r3, #3
 8008688:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800868a:	693a      	ldr	r2, [r7, #16]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4313      	orrs	r3, r2
 8008690:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008698:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	011b      	lsls	r3, r3, #4
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	693a      	ldr	r2, [r7, #16]
 80086a2:	4313      	orrs	r3, r2
 80086a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80086ac:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	021b      	lsls	r3, r3, #8
 80086b2:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80086b6:	697a      	ldr	r2, [r7, #20]
 80086b8:	4313      	orrs	r3, r2
 80086ba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	693a      	ldr	r2, [r7, #16]
 80086c0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	697a      	ldr	r2, [r7, #20]
 80086c6:	621a      	str	r2, [r3, #32]
}
 80086c8:	bf00      	nop
 80086ca:	371c      	adds	r7, #28
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b087      	sub	sp, #28
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	607a      	str	r2, [r7, #4]
 80086e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6a1b      	ldr	r3, [r3, #32]
 80086e6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6a1b      	ldr	r3, [r3, #32]
 80086ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	69db      	ldr	r3, [r3, #28]
 80086f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008700:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	021b      	lsls	r3, r3, #8
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	4313      	orrs	r3, r2
 800870a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008712:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	031b      	lsls	r3, r3, #12
 8008718:	b29b      	uxth	r3, r3
 800871a:	693a      	ldr	r2, [r7, #16]
 800871c:	4313      	orrs	r3, r2
 800871e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8008726:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	031b      	lsls	r3, r3, #12
 800872c:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8008730:	697a      	ldr	r2, [r7, #20]
 8008732:	4313      	orrs	r3, r2
 8008734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	693a      	ldr	r2, [r7, #16]
 800873a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	697a      	ldr	r2, [r7, #20]
 8008740:	621a      	str	r2, [r3, #32]
}
 8008742:	bf00      	nop
 8008744:	371c      	adds	r7, #28
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr

0800874e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800874e:	b480      	push	{r7}
 8008750:	b085      	sub	sp, #20
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
 8008756:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008764:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008766:	683a      	ldr	r2, [r7, #0]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	4313      	orrs	r3, r2
 800876c:	f043 0307 	orr.w	r3, r3, #7
 8008770:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	609a      	str	r2, [r3, #8]
}
 8008778:	bf00      	nop
 800877a:	3714      	adds	r7, #20
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008784:	b480      	push	{r7}
 8008786:	b087      	sub	sp, #28
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	607a      	str	r2, [r7, #4]
 8008790:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800879e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	021a      	lsls	r2, r3, #8
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	431a      	orrs	r2, r3
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	697a      	ldr	r2, [r7, #20]
 80087b6:	609a      	str	r2, [r3, #8]
}
 80087b8:	bf00      	nop
 80087ba:	371c      	adds	r7, #28
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b087      	sub	sp, #28
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	f003 031f 	and.w	r3, r3, #31
 80087d6:	2201      	movs	r2, #1
 80087d8:	fa02 f303 	lsl.w	r3, r2, r3
 80087dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6a1a      	ldr	r2, [r3, #32]
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	43db      	mvns	r3, r3
 80087e6:	401a      	ands	r2, r3
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6a1a      	ldr	r2, [r3, #32]
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	f003 031f 	and.w	r3, r3, #31
 80087f6:	6879      	ldr	r1, [r7, #4]
 80087f8:	fa01 f303 	lsl.w	r3, r1, r3
 80087fc:	431a      	orrs	r2, r3
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	621a      	str	r2, [r3, #32]
}
 8008802:	bf00      	nop
 8008804:	371c      	adds	r7, #28
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr
	...

08008810 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008810:	b480      	push	{r7}
 8008812:	b085      	sub	sp, #20
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008820:	2b01      	cmp	r3, #1
 8008822:	d101      	bne.n	8008828 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008824:	2302      	movs	r3, #2
 8008826:	e050      	b.n	80088ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2202      	movs	r2, #2
 8008834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800884e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	4313      	orrs	r3, r2
 8008858:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	68fa      	ldr	r2, [r7, #12]
 8008860:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a1c      	ldr	r2, [pc, #112]	@ (80088d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d018      	beq.n	800889e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008874:	d013      	beq.n	800889e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a18      	ldr	r2, [pc, #96]	@ (80088dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d00e      	beq.n	800889e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a16      	ldr	r2, [pc, #88]	@ (80088e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d009      	beq.n	800889e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a15      	ldr	r2, [pc, #84]	@ (80088e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d004      	beq.n	800889e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a13      	ldr	r2, [pc, #76]	@ (80088e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d10c      	bne.n	80088b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	685b      	ldr	r3, [r3, #4]
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	68ba      	ldr	r2, [r7, #8]
 80088b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3714      	adds	r7, #20
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop
 80088d8:	40010000 	.word	0x40010000
 80088dc:	40000400 	.word	0x40000400
 80088e0:	40000800 	.word	0x40000800
 80088e4:	40000c00 	.word	0x40000c00
 80088e8:	40014000 	.word	0x40014000

080088ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088f4:	bf00      	nop
 80088f6:	370c      	adds	r7, #12
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008908:	bf00      	nop
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d101      	bne.n	8008926 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	e042      	b.n	80089ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800892c:	b2db      	uxtb	r3, r3
 800892e:	2b00      	cmp	r3, #0
 8008930:	d106      	bne.n	8008940 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f7fb fc3e 	bl	80041bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2224      	movs	r2, #36	@ 0x24
 8008944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	68da      	ldr	r2, [r3, #12]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008956:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f973 	bl	8008c44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	691a      	ldr	r2, [r3, #16]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800896c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	695a      	ldr	r2, [r3, #20]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800897c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	68da      	ldr	r2, [r3, #12]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800898c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2220      	movs	r2, #32
 8008998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2220      	movs	r2, #32
 80089a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b08a      	sub	sp, #40	@ 0x28
 80089b8:	af02      	add	r7, sp, #8
 80089ba:	60f8      	str	r0, [r7, #12]
 80089bc:	60b9      	str	r1, [r7, #8]
 80089be:	603b      	str	r3, [r7, #0]
 80089c0:	4613      	mov	r3, r2
 80089c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80089c4:	2300      	movs	r3, #0
 80089c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089ce:	b2db      	uxtb	r3, r3
 80089d0:	2b20      	cmp	r3, #32
 80089d2:	d175      	bne.n	8008ac0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d002      	beq.n	80089e0 <HAL_UART_Transmit+0x2c>
 80089da:	88fb      	ldrh	r3, [r7, #6]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d101      	bne.n	80089e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80089e0:	2301      	movs	r3, #1
 80089e2:	e06e      	b.n	8008ac2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2200      	movs	r2, #0
 80089e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2221      	movs	r2, #33	@ 0x21
 80089ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80089f2:	f7fb fdfd 	bl	80045f0 <HAL_GetTick>
 80089f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	88fa      	ldrh	r2, [r7, #6]
 80089fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	88fa      	ldrh	r2, [r7, #6]
 8008a02:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a0c:	d108      	bne.n	8008a20 <HAL_UART_Transmit+0x6c>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d104      	bne.n	8008a20 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008a16:	2300      	movs	r3, #0
 8008a18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	61bb      	str	r3, [r7, #24]
 8008a1e:	e003      	b.n	8008a28 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a24:	2300      	movs	r3, #0
 8008a26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008a28:	e02e      	b.n	8008a88 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	9300      	str	r3, [sp, #0]
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	2200      	movs	r2, #0
 8008a32:	2180      	movs	r1, #128	@ 0x80
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f000 f848 	bl	8008aca <UART_WaitOnFlagUntilTimeout>
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d005      	beq.n	8008a4c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2220      	movs	r2, #32
 8008a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008a48:	2303      	movs	r3, #3
 8008a4a:	e03a      	b.n	8008ac2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d10b      	bne.n	8008a6a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	881b      	ldrh	r3, [r3, #0]
 8008a56:	461a      	mov	r2, r3
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008a62:	69bb      	ldr	r3, [r7, #24]
 8008a64:	3302      	adds	r3, #2
 8008a66:	61bb      	str	r3, [r7, #24]
 8008a68:	e007      	b.n	8008a7a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	781a      	ldrb	r2, [r3, #0]
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	3301      	adds	r3, #1
 8008a78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	3b01      	subs	r3, #1
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008a8c:	b29b      	uxth	r3, r3
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1cb      	bne.n	8008a2a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	9300      	str	r3, [sp, #0]
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	2140      	movs	r1, #64	@ 0x40
 8008a9c:	68f8      	ldr	r0, [r7, #12]
 8008a9e:	f000 f814 	bl	8008aca <UART_WaitOnFlagUntilTimeout>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d005      	beq.n	8008ab4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2220      	movs	r2, #32
 8008aac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008ab0:	2303      	movs	r3, #3
 8008ab2:	e006      	b.n	8008ac2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2220      	movs	r2, #32
 8008ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008abc:	2300      	movs	r3, #0
 8008abe:	e000      	b.n	8008ac2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008ac0:	2302      	movs	r3, #2
  }
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3720      	adds	r7, #32
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b086      	sub	sp, #24
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	60f8      	str	r0, [r7, #12]
 8008ad2:	60b9      	str	r1, [r7, #8]
 8008ad4:	603b      	str	r3, [r7, #0]
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ada:	e03b      	b.n	8008b54 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008adc:	6a3b      	ldr	r3, [r7, #32]
 8008ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae2:	d037      	beq.n	8008b54 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ae4:	f7fb fd84 	bl	80045f0 <HAL_GetTick>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	6a3a      	ldr	r2, [r7, #32]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d302      	bcc.n	8008afa <UART_WaitOnFlagUntilTimeout+0x30>
 8008af4:	6a3b      	ldr	r3, [r7, #32]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d101      	bne.n	8008afe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008afa:	2303      	movs	r3, #3
 8008afc:	e03a      	b.n	8008b74 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	f003 0304 	and.w	r3, r3, #4
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d023      	beq.n	8008b54 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	2b80      	cmp	r3, #128	@ 0x80
 8008b10:	d020      	beq.n	8008b54 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	2b40      	cmp	r3, #64	@ 0x40
 8008b16:	d01d      	beq.n	8008b54 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f003 0308 	and.w	r3, r3, #8
 8008b22:	2b08      	cmp	r3, #8
 8008b24:	d116      	bne.n	8008b54 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008b26:	2300      	movs	r3, #0
 8008b28:	617b      	str	r3, [r7, #20]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	617b      	str	r3, [r7, #20]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	617b      	str	r3, [r7, #20]
 8008b3a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f000 f81d 	bl	8008b7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2208      	movs	r2, #8
 8008b46:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e00f      	b.n	8008b74 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	68ba      	ldr	r2, [r7, #8]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	bf0c      	ite	eq
 8008b64:	2301      	moveq	r3, #1
 8008b66:	2300      	movne	r3, #0
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	79fb      	ldrb	r3, [r7, #7]
 8008b6e:	429a      	cmp	r2, r3
 8008b70:	d0b4      	beq.n	8008adc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b72:	2300      	movs	r3, #0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3718      	adds	r7, #24
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b095      	sub	sp, #84	@ 0x54
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	330c      	adds	r3, #12
 8008b8a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b8e:	e853 3f00 	ldrex	r3, [r3]
 8008b92:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b96:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	330c      	adds	r3, #12
 8008ba2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008ba4:	643a      	str	r2, [r7, #64]	@ 0x40
 8008ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008baa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008bac:	e841 2300 	strex	r3, r2, [r1]
 8008bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d1e5      	bne.n	8008b84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	3314      	adds	r3, #20
 8008bbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc0:	6a3b      	ldr	r3, [r7, #32]
 8008bc2:	e853 3f00 	ldrex	r3, [r3]
 8008bc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	f023 0301 	bic.w	r3, r3, #1
 8008bce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	3314      	adds	r3, #20
 8008bd6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008bd8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008bda:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bdc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008bde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008be0:	e841 2300 	strex	r3, r2, [r1]
 8008be4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d1e5      	bne.n	8008bb8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d119      	bne.n	8008c28 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	330c      	adds	r3, #12
 8008bfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	e853 3f00 	ldrex	r3, [r3]
 8008c02:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	f023 0310 	bic.w	r3, r3, #16
 8008c0a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	330c      	adds	r3, #12
 8008c12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c14:	61ba      	str	r2, [r7, #24]
 8008c16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c18:	6979      	ldr	r1, [r7, #20]
 8008c1a:	69ba      	ldr	r2, [r7, #24]
 8008c1c:	e841 2300 	strex	r3, r2, [r1]
 8008c20:	613b      	str	r3, [r7, #16]
   return(result);
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d1e5      	bne.n	8008bf4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2220      	movs	r2, #32
 8008c2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2200      	movs	r2, #0
 8008c34:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008c36:	bf00      	nop
 8008c38:	3754      	adds	r7, #84	@ 0x54
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
	...

08008c44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c48:	b0c0      	sub	sp, #256	@ 0x100
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	691b      	ldr	r3, [r3, #16]
 8008c58:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c60:	68d9      	ldr	r1, [r3, #12]
 8008c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	ea40 0301 	orr.w	r3, r0, r1
 8008c6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c72:	689a      	ldr	r2, [r3, #8]
 8008c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c78:	691b      	ldr	r3, [r3, #16]
 8008c7a:	431a      	orrs	r2, r3
 8008c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c80:	695b      	ldr	r3, [r3, #20]
 8008c82:	431a      	orrs	r2, r3
 8008c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c88:	69db      	ldr	r3, [r3, #28]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008c9c:	f021 010c 	bic.w	r1, r1, #12
 8008ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008caa:	430b      	orrs	r3, r1
 8008cac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	695b      	ldr	r3, [r3, #20]
 8008cb6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cbe:	6999      	ldr	r1, [r3, #24]
 8008cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	ea40 0301 	orr.w	r3, r0, r1
 8008cca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	4b8f      	ldr	r3, [pc, #572]	@ (8008f10 <UART_SetConfig+0x2cc>)
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d005      	beq.n	8008ce4 <UART_SetConfig+0xa0>
 8008cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cdc:	681a      	ldr	r2, [r3, #0]
 8008cde:	4b8d      	ldr	r3, [pc, #564]	@ (8008f14 <UART_SetConfig+0x2d0>)
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d104      	bne.n	8008cee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ce4:	f7fd ff06 	bl	8006af4 <HAL_RCC_GetPCLK2Freq>
 8008ce8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008cec:	e003      	b.n	8008cf6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008cee:	f7fd feed 	bl	8006acc <HAL_RCC_GetPCLK1Freq>
 8008cf2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cfa:	69db      	ldr	r3, [r3, #28]
 8008cfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d00:	f040 810c 	bne.w	8008f1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008d04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008d0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008d12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008d16:	4622      	mov	r2, r4
 8008d18:	462b      	mov	r3, r5
 8008d1a:	1891      	adds	r1, r2, r2
 8008d1c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008d1e:	415b      	adcs	r3, r3
 8008d20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008d26:	4621      	mov	r1, r4
 8008d28:	eb12 0801 	adds.w	r8, r2, r1
 8008d2c:	4629      	mov	r1, r5
 8008d2e:	eb43 0901 	adc.w	r9, r3, r1
 8008d32:	f04f 0200 	mov.w	r2, #0
 8008d36:	f04f 0300 	mov.w	r3, #0
 8008d3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008d3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008d42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008d46:	4690      	mov	r8, r2
 8008d48:	4699      	mov	r9, r3
 8008d4a:	4623      	mov	r3, r4
 8008d4c:	eb18 0303 	adds.w	r3, r8, r3
 8008d50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008d54:	462b      	mov	r3, r5
 8008d56:	eb49 0303 	adc.w	r3, r9, r3
 8008d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	2200      	movs	r2, #0
 8008d66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008d6a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008d6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008d72:	460b      	mov	r3, r1
 8008d74:	18db      	adds	r3, r3, r3
 8008d76:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d78:	4613      	mov	r3, r2
 8008d7a:	eb42 0303 	adc.w	r3, r2, r3
 8008d7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008d80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008d84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008d88:	f7f7 ff66 	bl	8000c58 <__aeabi_uldivmod>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	460b      	mov	r3, r1
 8008d90:	4b61      	ldr	r3, [pc, #388]	@ (8008f18 <UART_SetConfig+0x2d4>)
 8008d92:	fba3 2302 	umull	r2, r3, r3, r2
 8008d96:	095b      	lsrs	r3, r3, #5
 8008d98:	011c      	lsls	r4, r3, #4
 8008d9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008da4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008da8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008dac:	4642      	mov	r2, r8
 8008dae:	464b      	mov	r3, r9
 8008db0:	1891      	adds	r1, r2, r2
 8008db2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008db4:	415b      	adcs	r3, r3
 8008db6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008db8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008dbc:	4641      	mov	r1, r8
 8008dbe:	eb12 0a01 	adds.w	sl, r2, r1
 8008dc2:	4649      	mov	r1, r9
 8008dc4:	eb43 0b01 	adc.w	fp, r3, r1
 8008dc8:	f04f 0200 	mov.w	r2, #0
 8008dcc:	f04f 0300 	mov.w	r3, #0
 8008dd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008dd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008dd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ddc:	4692      	mov	sl, r2
 8008dde:	469b      	mov	fp, r3
 8008de0:	4643      	mov	r3, r8
 8008de2:	eb1a 0303 	adds.w	r3, sl, r3
 8008de6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008dea:	464b      	mov	r3, r9
 8008dec:	eb4b 0303 	adc.w	r3, fp, r3
 8008df0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008e00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008e04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008e08:	460b      	mov	r3, r1
 8008e0a:	18db      	adds	r3, r3, r3
 8008e0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e0e:	4613      	mov	r3, r2
 8008e10:	eb42 0303 	adc.w	r3, r2, r3
 8008e14:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008e1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008e1e:	f7f7 ff1b 	bl	8000c58 <__aeabi_uldivmod>
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	4611      	mov	r1, r2
 8008e28:	4b3b      	ldr	r3, [pc, #236]	@ (8008f18 <UART_SetConfig+0x2d4>)
 8008e2a:	fba3 2301 	umull	r2, r3, r3, r1
 8008e2e:	095b      	lsrs	r3, r3, #5
 8008e30:	2264      	movs	r2, #100	@ 0x64
 8008e32:	fb02 f303 	mul.w	r3, r2, r3
 8008e36:	1acb      	subs	r3, r1, r3
 8008e38:	00db      	lsls	r3, r3, #3
 8008e3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008e3e:	4b36      	ldr	r3, [pc, #216]	@ (8008f18 <UART_SetConfig+0x2d4>)
 8008e40:	fba3 2302 	umull	r2, r3, r3, r2
 8008e44:	095b      	lsrs	r3, r3, #5
 8008e46:	005b      	lsls	r3, r3, #1
 8008e48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008e4c:	441c      	add	r4, r3
 8008e4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e52:	2200      	movs	r2, #0
 8008e54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008e5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008e60:	4642      	mov	r2, r8
 8008e62:	464b      	mov	r3, r9
 8008e64:	1891      	adds	r1, r2, r2
 8008e66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008e68:	415b      	adcs	r3, r3
 8008e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008e6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008e70:	4641      	mov	r1, r8
 8008e72:	1851      	adds	r1, r2, r1
 8008e74:	6339      	str	r1, [r7, #48]	@ 0x30
 8008e76:	4649      	mov	r1, r9
 8008e78:	414b      	adcs	r3, r1
 8008e7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e7c:	f04f 0200 	mov.w	r2, #0
 8008e80:	f04f 0300 	mov.w	r3, #0
 8008e84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008e88:	4659      	mov	r1, fp
 8008e8a:	00cb      	lsls	r3, r1, #3
 8008e8c:	4651      	mov	r1, sl
 8008e8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e92:	4651      	mov	r1, sl
 8008e94:	00ca      	lsls	r2, r1, #3
 8008e96:	4610      	mov	r0, r2
 8008e98:	4619      	mov	r1, r3
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	4642      	mov	r2, r8
 8008e9e:	189b      	adds	r3, r3, r2
 8008ea0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008ea4:	464b      	mov	r3, r9
 8008ea6:	460a      	mov	r2, r1
 8008ea8:	eb42 0303 	adc.w	r3, r2, r3
 8008eac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008ebc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008ec0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	18db      	adds	r3, r3, r3
 8008ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008eca:	4613      	mov	r3, r2
 8008ecc:	eb42 0303 	adc.w	r3, r2, r3
 8008ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008ed2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008ed6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008eda:	f7f7 febd 	bl	8000c58 <__aeabi_uldivmod>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8008f18 <UART_SetConfig+0x2d4>)
 8008ee4:	fba3 1302 	umull	r1, r3, r3, r2
 8008ee8:	095b      	lsrs	r3, r3, #5
 8008eea:	2164      	movs	r1, #100	@ 0x64
 8008eec:	fb01 f303 	mul.w	r3, r1, r3
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	00db      	lsls	r3, r3, #3
 8008ef4:	3332      	adds	r3, #50	@ 0x32
 8008ef6:	4a08      	ldr	r2, [pc, #32]	@ (8008f18 <UART_SetConfig+0x2d4>)
 8008ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8008efc:	095b      	lsrs	r3, r3, #5
 8008efe:	f003 0207 	and.w	r2, r3, #7
 8008f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4422      	add	r2, r4
 8008f0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008f0c:	e106      	b.n	800911c <UART_SetConfig+0x4d8>
 8008f0e:	bf00      	nop
 8008f10:	40011000 	.word	0x40011000
 8008f14:	40011400 	.word	0x40011400
 8008f18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f20:	2200      	movs	r2, #0
 8008f22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008f26:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008f2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008f2e:	4642      	mov	r2, r8
 8008f30:	464b      	mov	r3, r9
 8008f32:	1891      	adds	r1, r2, r2
 8008f34:	6239      	str	r1, [r7, #32]
 8008f36:	415b      	adcs	r3, r3
 8008f38:	627b      	str	r3, [r7, #36]	@ 0x24
 8008f3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008f3e:	4641      	mov	r1, r8
 8008f40:	1854      	adds	r4, r2, r1
 8008f42:	4649      	mov	r1, r9
 8008f44:	eb43 0501 	adc.w	r5, r3, r1
 8008f48:	f04f 0200 	mov.w	r2, #0
 8008f4c:	f04f 0300 	mov.w	r3, #0
 8008f50:	00eb      	lsls	r3, r5, #3
 8008f52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f56:	00e2      	lsls	r2, r4, #3
 8008f58:	4614      	mov	r4, r2
 8008f5a:	461d      	mov	r5, r3
 8008f5c:	4643      	mov	r3, r8
 8008f5e:	18e3      	adds	r3, r4, r3
 8008f60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008f64:	464b      	mov	r3, r9
 8008f66:	eb45 0303 	adc.w	r3, r5, r3
 8008f6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	2200      	movs	r2, #0
 8008f76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008f7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008f7e:	f04f 0200 	mov.w	r2, #0
 8008f82:	f04f 0300 	mov.w	r3, #0
 8008f86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008f8a:	4629      	mov	r1, r5
 8008f8c:	008b      	lsls	r3, r1, #2
 8008f8e:	4621      	mov	r1, r4
 8008f90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f94:	4621      	mov	r1, r4
 8008f96:	008a      	lsls	r2, r1, #2
 8008f98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008f9c:	f7f7 fe5c 	bl	8000c58 <__aeabi_uldivmod>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	4b60      	ldr	r3, [pc, #384]	@ (8009128 <UART_SetConfig+0x4e4>)
 8008fa6:	fba3 2302 	umull	r2, r3, r3, r2
 8008faa:	095b      	lsrs	r3, r3, #5
 8008fac:	011c      	lsls	r4, r3, #4
 8008fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008fb8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008fbc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008fc0:	4642      	mov	r2, r8
 8008fc2:	464b      	mov	r3, r9
 8008fc4:	1891      	adds	r1, r2, r2
 8008fc6:	61b9      	str	r1, [r7, #24]
 8008fc8:	415b      	adcs	r3, r3
 8008fca:	61fb      	str	r3, [r7, #28]
 8008fcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008fd0:	4641      	mov	r1, r8
 8008fd2:	1851      	adds	r1, r2, r1
 8008fd4:	6139      	str	r1, [r7, #16]
 8008fd6:	4649      	mov	r1, r9
 8008fd8:	414b      	adcs	r3, r1
 8008fda:	617b      	str	r3, [r7, #20]
 8008fdc:	f04f 0200 	mov.w	r2, #0
 8008fe0:	f04f 0300 	mov.w	r3, #0
 8008fe4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008fe8:	4659      	mov	r1, fp
 8008fea:	00cb      	lsls	r3, r1, #3
 8008fec:	4651      	mov	r1, sl
 8008fee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ff2:	4651      	mov	r1, sl
 8008ff4:	00ca      	lsls	r2, r1, #3
 8008ff6:	4610      	mov	r0, r2
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	4642      	mov	r2, r8
 8008ffe:	189b      	adds	r3, r3, r2
 8009000:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009004:	464b      	mov	r3, r9
 8009006:	460a      	mov	r2, r1
 8009008:	eb42 0303 	adc.w	r3, r2, r3
 800900c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	67bb      	str	r3, [r7, #120]	@ 0x78
 800901a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800901c:	f04f 0200 	mov.w	r2, #0
 8009020:	f04f 0300 	mov.w	r3, #0
 8009024:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009028:	4649      	mov	r1, r9
 800902a:	008b      	lsls	r3, r1, #2
 800902c:	4641      	mov	r1, r8
 800902e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009032:	4641      	mov	r1, r8
 8009034:	008a      	lsls	r2, r1, #2
 8009036:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800903a:	f7f7 fe0d 	bl	8000c58 <__aeabi_uldivmod>
 800903e:	4602      	mov	r2, r0
 8009040:	460b      	mov	r3, r1
 8009042:	4611      	mov	r1, r2
 8009044:	4b38      	ldr	r3, [pc, #224]	@ (8009128 <UART_SetConfig+0x4e4>)
 8009046:	fba3 2301 	umull	r2, r3, r3, r1
 800904a:	095b      	lsrs	r3, r3, #5
 800904c:	2264      	movs	r2, #100	@ 0x64
 800904e:	fb02 f303 	mul.w	r3, r2, r3
 8009052:	1acb      	subs	r3, r1, r3
 8009054:	011b      	lsls	r3, r3, #4
 8009056:	3332      	adds	r3, #50	@ 0x32
 8009058:	4a33      	ldr	r2, [pc, #204]	@ (8009128 <UART_SetConfig+0x4e4>)
 800905a:	fba2 2303 	umull	r2, r3, r2, r3
 800905e:	095b      	lsrs	r3, r3, #5
 8009060:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009064:	441c      	add	r4, r3
 8009066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800906a:	2200      	movs	r2, #0
 800906c:	673b      	str	r3, [r7, #112]	@ 0x70
 800906e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009070:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009074:	4642      	mov	r2, r8
 8009076:	464b      	mov	r3, r9
 8009078:	1891      	adds	r1, r2, r2
 800907a:	60b9      	str	r1, [r7, #8]
 800907c:	415b      	adcs	r3, r3
 800907e:	60fb      	str	r3, [r7, #12]
 8009080:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009084:	4641      	mov	r1, r8
 8009086:	1851      	adds	r1, r2, r1
 8009088:	6039      	str	r1, [r7, #0]
 800908a:	4649      	mov	r1, r9
 800908c:	414b      	adcs	r3, r1
 800908e:	607b      	str	r3, [r7, #4]
 8009090:	f04f 0200 	mov.w	r2, #0
 8009094:	f04f 0300 	mov.w	r3, #0
 8009098:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800909c:	4659      	mov	r1, fp
 800909e:	00cb      	lsls	r3, r1, #3
 80090a0:	4651      	mov	r1, sl
 80090a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090a6:	4651      	mov	r1, sl
 80090a8:	00ca      	lsls	r2, r1, #3
 80090aa:	4610      	mov	r0, r2
 80090ac:	4619      	mov	r1, r3
 80090ae:	4603      	mov	r3, r0
 80090b0:	4642      	mov	r2, r8
 80090b2:	189b      	adds	r3, r3, r2
 80090b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80090b6:	464b      	mov	r3, r9
 80090b8:	460a      	mov	r2, r1
 80090ba:	eb42 0303 	adc.w	r3, r2, r3
 80090be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80090c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80090ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80090cc:	f04f 0200 	mov.w	r2, #0
 80090d0:	f04f 0300 	mov.w	r3, #0
 80090d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80090d8:	4649      	mov	r1, r9
 80090da:	008b      	lsls	r3, r1, #2
 80090dc:	4641      	mov	r1, r8
 80090de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80090e2:	4641      	mov	r1, r8
 80090e4:	008a      	lsls	r2, r1, #2
 80090e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80090ea:	f7f7 fdb5 	bl	8000c58 <__aeabi_uldivmod>
 80090ee:	4602      	mov	r2, r0
 80090f0:	460b      	mov	r3, r1
 80090f2:	4b0d      	ldr	r3, [pc, #52]	@ (8009128 <UART_SetConfig+0x4e4>)
 80090f4:	fba3 1302 	umull	r1, r3, r3, r2
 80090f8:	095b      	lsrs	r3, r3, #5
 80090fa:	2164      	movs	r1, #100	@ 0x64
 80090fc:	fb01 f303 	mul.w	r3, r1, r3
 8009100:	1ad3      	subs	r3, r2, r3
 8009102:	011b      	lsls	r3, r3, #4
 8009104:	3332      	adds	r3, #50	@ 0x32
 8009106:	4a08      	ldr	r2, [pc, #32]	@ (8009128 <UART_SetConfig+0x4e4>)
 8009108:	fba2 2303 	umull	r2, r3, r2, r3
 800910c:	095b      	lsrs	r3, r3, #5
 800910e:	f003 020f 	and.w	r2, r3, #15
 8009112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4422      	add	r2, r4
 800911a:	609a      	str	r2, [r3, #8]
}
 800911c:	bf00      	nop
 800911e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009122:	46bd      	mov	sp, r7
 8009124:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009128:	51eb851f 	.word	0x51eb851f

0800912c <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009136:	2300      	movs	r3, #0
 8009138:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800913a:	6839      	ldr	r1, [r7, #0]
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f001 fca2 	bl	800aa86 <VL53L0X_get_offset_calibration_data_micro_meter>
 8009142:	4603      	mov	r3, r0
 8009144:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8009146:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
	...

08009154 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8009154:	b5b0      	push	{r4, r5, r7, lr}
 8009156:	b096      	sub	sp, #88	@ 0x58
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800915c:	2300      	movs	r3, #0
 800915e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8009162:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8009166:	2b00      	cmp	r3, #0
 8009168:	d107      	bne.n	800917a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800916a:	2200      	movs	r2, #0
 800916c:	2188      	movs	r1, #136	@ 0x88
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f004 fe96 	bl	800dea0 <VL53L0X_WrByte>
 8009174:	4603      	mov	r3, r0
 8009176:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2200      	movs	r2, #0
 800917e:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009188:	f8a3 2152 	strh.w	r2, [r3, #338]	@ 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009192:	f8a3 2154 	strh.w	r2, [r3, #340]	@ 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	4a9e      	ldr	r2, [pc, #632]	@ (8009414 <VL53L0X_DataInit+0x2c0>)
 800919a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	4a9d      	ldr	r2, [pc, #628]	@ (8009418 <VL53L0X_DataInit+0x2c4>)
 80091a2:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80091ac:	f107 0310 	add.w	r3, r7, #16
 80091b0:	4619      	mov	r1, r3
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fac0 	bl	8009738 <VL53L0X_GetDeviceParameters>
 80091b8:	4603      	mov	r3, r0
 80091ba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 80091be:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d112      	bne.n	80091ec <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 80091c6:	2300      	movs	r3, #0
 80091c8:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 80091ca:	2300      	movs	r3, #0
 80091cc:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f103 0410 	add.w	r4, r3, #16
 80091d4:	f107 0510 	add.w	r5, r7, #16
 80091d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80091da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80091dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80091de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80091e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80091e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80091e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80091e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2264      	movs	r2, #100	@ 0x64
 80091f0:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f44f 7261 	mov.w	r2, #900	@ 0x384
 80091fa:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8009204:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 800920e:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2201      	movs	r2, #1
 8009216:	f883 2150 	strb.w	r2, [r3, #336]	@ 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800921a:	2201      	movs	r2, #1
 800921c:	2180      	movs	r1, #128	@ 0x80
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f004 fe3e 	bl	800dea0 <VL53L0X_WrByte>
 8009224:	4603      	mov	r3, r0
 8009226:	461a      	mov	r2, r3
 8009228:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800922c:	4313      	orrs	r3, r2
 800922e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009232:	2201      	movs	r2, #1
 8009234:	21ff      	movs	r1, #255	@ 0xff
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f004 fe32 	bl	800dea0 <VL53L0X_WrByte>
 800923c:	4603      	mov	r3, r0
 800923e:	461a      	mov	r2, r3
 8009240:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009244:	4313      	orrs	r3, r2
 8009246:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800924a:	2200      	movs	r2, #0
 800924c:	2100      	movs	r1, #0
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f004 fe26 	bl	800dea0 <VL53L0X_WrByte>
 8009254:	4603      	mov	r3, r0
 8009256:	461a      	mov	r2, r3
 8009258:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800925c:	4313      	orrs	r3, r2
 800925e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8009262:	f107 030f 	add.w	r3, r7, #15
 8009266:	461a      	mov	r2, r3
 8009268:	2191      	movs	r1, #145	@ 0x91
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f004 fe9a 	bl	800dfa4 <VL53L0X_RdByte>
 8009270:	4603      	mov	r3, r0
 8009272:	461a      	mov	r2, r3
 8009274:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009278:	4313      	orrs	r3, r2
 800927a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800927e:	7bfa      	ldrb	r2, [r7, #15]
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f883 213a 	strb.w	r2, [r3, #314]	@ 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009286:	2201      	movs	r2, #1
 8009288:	2100      	movs	r1, #0
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f004 fe08 	bl	800dea0 <VL53L0X_WrByte>
 8009290:	4603      	mov	r3, r0
 8009292:	461a      	mov	r2, r3
 8009294:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009298:	4313      	orrs	r3, r2
 800929a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800929e:	2200      	movs	r2, #0
 80092a0:	21ff      	movs	r1, #255	@ 0xff
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f004 fdfc 	bl	800dea0 <VL53L0X_WrByte>
 80092a8:	4603      	mov	r3, r0
 80092aa:	461a      	mov	r2, r3
 80092ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80092b0:	4313      	orrs	r3, r2
 80092b2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80092b6:	2200      	movs	r2, #0
 80092b8:	2180      	movs	r1, #128	@ 0x80
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f004 fdf0 	bl	800dea0 <VL53L0X_WrByte>
 80092c0:	4603      	mov	r3, r0
 80092c2:	461a      	mov	r2, r3
 80092c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80092c8:	4313      	orrs	r3, r2
 80092ca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80092ce:	2300      	movs	r3, #0
 80092d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80092d2:	e014      	b.n	80092fe <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 80092d4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d114      	bne.n	8009306 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 80092dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092de:	b29b      	uxth	r3, r3
 80092e0:	2201      	movs	r2, #1
 80092e2:	4619      	mov	r1, r3
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 fd31 	bl	8009d4c <VL53L0X_SetLimitCheckEnable>
 80092ea:	4603      	mov	r3, r0
 80092ec:	461a      	mov	r2, r3
 80092ee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80092f2:	4313      	orrs	r3, r2
 80092f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80092f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80092fa:	3301      	adds	r3, #1
 80092fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80092fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009300:	2b05      	cmp	r3, #5
 8009302:	dde7      	ble.n	80092d4 <VL53L0X_DataInit+0x180>
 8009304:	e000      	b.n	8009308 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8009306:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8009308:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800930c:	2b00      	cmp	r3, #0
 800930e:	d107      	bne.n	8009320 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009310:	2200      	movs	r2, #0
 8009312:	2102      	movs	r1, #2
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f000 fd19 	bl	8009d4c <VL53L0X_SetLimitCheckEnable>
 800931a:	4603      	mov	r3, r0
 800931c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8009320:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8009324:	2b00      	cmp	r3, #0
 8009326:	d107      	bne.n	8009338 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009328:	2200      	movs	r2, #0
 800932a:	2103      	movs	r1, #3
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 fd0d 	bl	8009d4c <VL53L0X_SetLimitCheckEnable>
 8009332:	4603      	mov	r3, r0
 8009334:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8009338:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800933c:	2b00      	cmp	r3, #0
 800933e:	d107      	bne.n	8009350 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009340:	2200      	movs	r2, #0
 8009342:	2104      	movs	r1, #4
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 fd01 	bl	8009d4c <VL53L0X_SetLimitCheckEnable>
 800934a:	4603      	mov	r3, r0
 800934c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8009350:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8009354:	2b00      	cmp	r3, #0
 8009356:	d107      	bne.n	8009368 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009358:	2200      	movs	r2, #0
 800935a:	2105      	movs	r1, #5
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 fcf5 	bl	8009d4c <VL53L0X_SetLimitCheckEnable>
 8009362:	4603      	mov	r3, r0
 8009364:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8009368:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800936c:	2b00      	cmp	r3, #0
 800936e:	d108      	bne.n	8009382 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8009370:	f44f 1290 	mov.w	r2, #1179648	@ 0x120000
 8009374:	2100      	movs	r1, #0
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 fd98 	bl	8009eac <VL53L0X_SetLimitCheckValue>
 800937c:	4603      	mov	r3, r0
 800937e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009382:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8009386:	2b00      	cmp	r3, #0
 8009388:	d108      	bne.n	800939c <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800938a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800938e:	2101      	movs	r1, #1
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 fd8b 	bl	8009eac <VL53L0X_SetLimitCheckValue>
 8009396:	4603      	mov	r3, r0
 8009398:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800939c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d108      	bne.n	80093b6 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80093a4:	f44f 120c 	mov.w	r2, #2293760	@ 0x230000
 80093a8:	2102      	movs	r1, #2
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 fd7e 	bl	8009eac <VL53L0X_SetLimitCheckValue>
 80093b0:	4603      	mov	r3, r0
 80093b2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80093b6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d107      	bne.n	80093ce <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80093be:	2200      	movs	r2, #0
 80093c0:	2103      	movs	r1, #3
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 fd72 	bl	8009eac <VL53L0X_SetLimitCheckValue>
 80093c8:	4603      	mov	r3, r0
 80093ca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80093ce:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d10f      	bne.n	80093f6 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	22ff      	movs	r2, #255	@ 0xff
 80093da:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80093de:	22ff      	movs	r2, #255	@ 0xff
 80093e0:	2101      	movs	r1, #1
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f004 fd5c 	bl	800dea0 <VL53L0X_WrByte>
 80093e8:	4603      	mov	r3, r0
 80093ea:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2201      	movs	r2, #1
 80093f2:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 80093f6:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d103      	bne.n	8009406 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8009406:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 800940a:	4618      	mov	r0, r3
 800940c:	3758      	adds	r7, #88	@ 0x58
 800940e:	46bd      	mov	sp, r7
 8009410:	bdb0      	pop	{r4, r5, r7, pc}
 8009412:	bf00      	nop
 8009414:	00016b85 	.word	0x00016b85
 8009418:	000970a4 	.word	0x000970a4

0800941c <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800941c:	b5b0      	push	{r4, r5, r7, lr}
 800941e:	b09e      	sub	sp, #120	@ 0x78
 8009420:	af02      	add	r7, sp, #8
 8009422:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009424:	2300      	movs	r3, #0
 8009426:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800942a:	f107 031c 	add.w	r3, r7, #28
 800942e:	2240      	movs	r2, #64	@ 0x40
 8009430:	2100      	movs	r1, #0
 8009432:	4618      	mov	r0, r3
 8009434:	f005 fcc1 	bl	800edba <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8009438:	2300      	movs	r3, #0
 800943a:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800943c:	2300      	movs	r3, #0
 800943e:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8009440:	2300      	movs	r3, #0
 8009442:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint32_t count = 0;
 8009446:	2300      	movs	r3, #0
 8009448:	663b      	str	r3, [r7, #96]	@ 0x60
	uint8_t isApertureSpads = 0;
 800944a:	2300      	movs	r3, #0
 800944c:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800944e:	2300      	movs	r3, #0
 8009450:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8009452:	2300      	movs	r3, #0
 8009454:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8009458:	2101      	movs	r1, #1
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f002 fa69 	bl	800b932 <VL53L0X_get_info_from_device>
 8009460:	4603      	mov	r3, r0
 8009462:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 800946c:	663b      	str	r3, [r7, #96]	@ 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8009474:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8009478:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800947c:	2b01      	cmp	r3, #1
 800947e:	d80d      	bhi.n	800949c <VL53L0X_StaticInit+0x80>
 8009480:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009484:	2b01      	cmp	r3, #1
 8009486:	d102      	bne.n	800948e <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8009488:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800948a:	2b20      	cmp	r3, #32
 800948c:	d806      	bhi.n	800949c <VL53L0X_StaticInit+0x80>
 800948e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009492:	2b00      	cmp	r3, #0
 8009494:	d10e      	bne.n	80094b4 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8009496:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009498:	2b0c      	cmp	r3, #12
 800949a:	d90b      	bls.n	80094b4 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800949c:	f107 0218 	add.w	r2, r7, #24
 80094a0:	f107 0314 	add.w	r3, r7, #20
 80094a4:	4619      	mov	r1, r3
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f001 fce8 	bl	800ae7c <VL53L0X_perform_ref_spad_management>
 80094ac:	4603      	mov	r3, r0
 80094ae:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 80094b2:	e009      	b.n	80094c8 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80094b4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80094b8:	461a      	mov	r2, r3
 80094ba:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f001 fee9 	bl	800b294 <VL53L0X_set_reference_spads>
 80094c2:	4603      	mov	r3, r0
 80094c4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 80094c8:	4b93      	ldr	r3, [pc, #588]	@ (8009718 <VL53L0X_StaticInit+0x2fc>)
 80094ca:	66bb      	str	r3, [r7, #104]	@ 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 80094cc:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d10f      	bne.n	80094f4 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 80094da:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 80094de:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d104      	bne.n	80094f0 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80094ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80094ee:	e001      	b.n	80094f4 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 80094f0:	4b89      	ldr	r3, [pc, #548]	@ (8009718 <VL53L0X_StaticInit+0x2fc>)
 80094f2:	66bb      	str	r3, [r7, #104]	@ 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 80094f4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d106      	bne.n	800950a <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80094fc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f003 fdb8 	bl	800d074 <VL53L0X_load_tuning_settings>
 8009504:	4603      	mov	r3, r0
 8009506:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800950a:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800950e:	2b00      	cmp	r3, #0
 8009510:	d10a      	bne.n	8009528 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8009512:	2300      	movs	r3, #0
 8009514:	9300      	str	r3, [sp, #0]
 8009516:	2304      	movs	r3, #4
 8009518:	2200      	movs	r2, #0
 800951a:	2100      	movs	r1, #0
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f001 f8e5 	bl	800a6ec <VL53L0X_SetGpioConfig>
 8009522:	4603      	mov	r3, r0
 8009524:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009528:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800952c:	2b00      	cmp	r3, #0
 800952e:	d121      	bne.n	8009574 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009530:	2201      	movs	r2, #1
 8009532:	21ff      	movs	r1, #255	@ 0xff
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f004 fcb3 	bl	800dea0 <VL53L0X_WrByte>
 800953a:	4603      	mov	r3, r0
 800953c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8009540:	f107 031a 	add.w	r3, r7, #26
 8009544:	461a      	mov	r2, r3
 8009546:	2184      	movs	r1, #132	@ 0x84
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f004 fd55 	bl	800dff8 <VL53L0X_RdWord>
 800954e:	4603      	mov	r3, r0
 8009550:	461a      	mov	r2, r3
 8009552:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009556:	4313      	orrs	r3, r2
 8009558:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800955c:	2200      	movs	r2, #0
 800955e:	21ff      	movs	r1, #255	@ 0xff
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f004 fc9d 	bl	800dea0 <VL53L0X_WrByte>
 8009566:	4603      	mov	r3, r0
 8009568:	461a      	mov	r2, r3
 800956a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800956e:	4313      	orrs	r3, r2
 8009570:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009574:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8009578:	2b00      	cmp	r3, #0
 800957a:	d104      	bne.n	8009586 <VL53L0X_StaticInit+0x16a>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800957c:	8b7b      	ldrh	r3, [r7, #26]
 800957e:	011a      	lsls	r2, r3, #4
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8009586:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800958a:	2b00      	cmp	r3, #0
 800958c:	d108      	bne.n	80095a0 <VL53L0X_StaticInit+0x184>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800958e:	f107 031c 	add.w	r3, r7, #28
 8009592:	4619      	mov	r1, r3
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 f8cf 	bl	8009738 <VL53L0X_GetDeviceParameters>
 800959a:	4603      	mov	r3, r0
 800959c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 80095a0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d110      	bne.n	80095ca <VL53L0X_StaticInit+0x1ae>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80095a8:	f107 0319 	add.w	r3, r7, #25
 80095ac:	4619      	mov	r1, r3
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 f991 	bl	80098d6 <VL53L0X_GetFractionEnable>
 80095b4:	4603      	mov	r3, r0
 80095b6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 80095ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d103      	bne.n	80095ca <VL53L0X_StaticInit+0x1ae>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80095c2:	7e7a      	ldrb	r2, [r7, #25]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 80095ca:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d10e      	bne.n	80095f0 <VL53L0X_StaticInit+0x1d4>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f103 0410 	add.w	r4, r3, #16
 80095d8:	f107 051c 	add.w	r5, r7, #28
 80095dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80095de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80095e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80095e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80095e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80095e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80095e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80095ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 80095f0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d111      	bne.n	800961c <VL53L0X_StaticInit+0x200>
		Status = VL53L0X_RdByte(Dev,
 80095f8:	f107 0319 	add.w	r3, r7, #25
 80095fc:	461a      	mov	r2, r3
 80095fe:	2101      	movs	r1, #1
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f004 fccf 	bl	800dfa4 <VL53L0X_RdByte>
 8009606:	4603      	mov	r3, r0
 8009608:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800960c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8009610:	2b00      	cmp	r3, #0
 8009612:	d103      	bne.n	800961c <VL53L0X_StaticInit+0x200>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8009614:	7e7a      	ldrb	r2, [r7, #25]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800961c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8009620:	2b00      	cmp	r3, #0
 8009622:	d107      	bne.n	8009634 <VL53L0X_StaticInit+0x218>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8009624:	2200      	movs	r2, #0
 8009626:	2100      	movs	r1, #0
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 f9c9 	bl	80099c0 <VL53L0X_SetSequenceStepEnable>
 800962e:	4603      	mov	r3, r0
 8009630:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8009634:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8009638:	2b00      	cmp	r3, #0
 800963a:	d107      	bne.n	800964c <VL53L0X_StaticInit+0x230>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800963c:	2200      	movs	r2, #0
 800963e:	2102      	movs	r1, #2
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 f9bd 	bl	80099c0 <VL53L0X_SetSequenceStepEnable>
 8009646:	4603      	mov	r3, r0
 8009648:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800964c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8009650:	2b00      	cmp	r3, #0
 8009652:	d103      	bne.n	800965c <VL53L0X_StaticInit+0x240>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2203      	movs	r2, #3
 8009658:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800965c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8009660:	2b00      	cmp	r3, #0
 8009662:	d109      	bne.n	8009678 <VL53L0X_StaticInit+0x25c>
		Status = VL53L0X_GetVcselPulsePeriod(
 8009664:	f107 0313 	add.w	r3, r7, #19
 8009668:	461a      	mov	r2, r3
 800966a:	2100      	movs	r1, #0
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 f98f 	bl	8009990 <VL53L0X_GetVcselPulsePeriod>
 8009672:	4603      	mov	r3, r0
 8009674:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009678:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800967c:	2b00      	cmp	r3, #0
 800967e:	d103      	bne.n	8009688 <VL53L0X_StaticInit+0x26c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009680:	7cfa      	ldrb	r2, [r7, #19]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8009688:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800968c:	2b00      	cmp	r3, #0
 800968e:	d109      	bne.n	80096a4 <VL53L0X_StaticInit+0x288>
		Status = VL53L0X_GetVcselPulsePeriod(
 8009690:	f107 0313 	add.w	r3, r7, #19
 8009694:	461a      	mov	r2, r3
 8009696:	2101      	movs	r1, #1
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 f979 	bl	8009990 <VL53L0X_GetVcselPulsePeriod>
 800969e:	4603      	mov	r3, r0
 80096a0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80096a4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d103      	bne.n	80096b4 <VL53L0X_StaticInit+0x298>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80096ac:	7cfa      	ldrb	r2, [r7, #19]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80096b4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d109      	bne.n	80096d0 <VL53L0X_StaticInit+0x2b4>
		Status = get_sequence_step_timeout(
 80096bc:	f107 030c 	add.w	r3, r7, #12
 80096c0:	461a      	mov	r2, r3
 80096c2:	2103      	movs	r1, #3
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f002 feb3 	bl	800c430 <get_sequence_step_timeout>
 80096ca:	4603      	mov	r3, r0
 80096cc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80096d0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d103      	bne.n	80096e0 <VL53L0X_StaticInit+0x2c4>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80096e0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d109      	bne.n	80096fc <VL53L0X_StaticInit+0x2e0>
		Status = get_sequence_step_timeout(
 80096e8:	f107 030c 	add.w	r3, r7, #12
 80096ec:	461a      	mov	r2, r3
 80096ee:	2104      	movs	r1, #4
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f002 fe9d 	bl	800c430 <get_sequence_step_timeout>
 80096f6:	4603      	mov	r3, r0
 80096f8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80096fc:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8009700:	2b00      	cmp	r3, #0
 8009702:	d103      	bne.n	800970c <VL53L0X_StaticInit+0x2f0>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009704:	68fa      	ldr	r2, [r7, #12]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800970c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 8009710:	4618      	mov	r0, r3
 8009712:	3770      	adds	r7, #112	@ 0x70
 8009714:	46bd      	mov	sp, r7
 8009716:	bdb0      	pop	{r4, r5, r7, pc}
 8009718:	20000010 	.word	0x20000010

0800971c <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 800971c:	b480      	push	{r7}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8009724:	239d      	movs	r3, #157	@ 0x9d
 8009726:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8009728:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800972c:	4618      	mov	r0, r3
 800972e:	3714      	adds	r7, #20
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b084      	sub	sp, #16
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009742:	2300      	movs	r3, #0
 8009744:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	4619      	mov	r1, r3
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 f8b0 	bl	80098b0 <VL53L0X_GetDeviceMode>
 8009750:	4603      	mov	r3, r0
 8009752:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009754:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d107      	bne.n	800976c <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	3308      	adds	r3, #8
 8009760:	4619      	mov	r1, r3
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 fa76 	bl	8009c54 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8009768:	4603      	mov	r3, r0
 800976a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800976c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d102      	bne.n	800977a <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	2200      	movs	r2, #0
 8009778:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800977a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d107      	bne.n	8009792 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	3310      	adds	r3, #16
 8009786:	4619      	mov	r1, r3
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f000 faac 	bl	8009ce6 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800978e:	4603      	mov	r3, r0
 8009790:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8009792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d107      	bne.n	80097aa <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	3314      	adds	r3, #20
 800979e:	4619      	mov	r1, r3
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f7ff fcc3 	bl	800912c <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80097a6:	4603      	mov	r3, r0
 80097a8:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80097aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d134      	bne.n	800981c <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80097b2:	2300      	movs	r3, #0
 80097b4:	60bb      	str	r3, [r7, #8]
 80097b6:	e02a      	b.n	800980e <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80097b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d12a      	bne.n	8009816 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	b299      	uxth	r1, r3
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	3308      	adds	r3, #8
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	683a      	ldr	r2, [r7, #0]
 80097cc:	4413      	add	r3, r2
 80097ce:	3304      	adds	r3, #4
 80097d0:	461a      	mov	r2, r3
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 fbcc 	bl	8009f70 <VL53L0X_GetLimitCheckValue>
 80097d8:	4603      	mov	r3, r0
 80097da:	461a      	mov	r2, r3
 80097dc:	7bfb      	ldrb	r3, [r7, #15]
 80097de:	4313      	orrs	r3, r2
 80097e0:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80097e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d117      	bne.n	800981a <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	b299      	uxth	r1, r3
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	3318      	adds	r3, #24
 80097f2:	683a      	ldr	r2, [r7, #0]
 80097f4:	4413      	add	r3, r2
 80097f6:	461a      	mov	r2, r3
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 fb33 	bl	8009e64 <VL53L0X_GetLimitCheckEnable>
 80097fe:	4603      	mov	r3, r0
 8009800:	461a      	mov	r2, r3
 8009802:	7bfb      	ldrb	r3, [r7, #15]
 8009804:	4313      	orrs	r3, r2
 8009806:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	3301      	adds	r3, #1
 800980c:	60bb      	str	r3, [r7, #8]
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	2b05      	cmp	r3, #5
 8009812:	ddd1      	ble.n	80097b8 <VL53L0X_GetDeviceParameters+0x80>
 8009814:	e002      	b.n	800981c <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8009816:	bf00      	nop
 8009818:	e000      	b.n	800981c <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800981a:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800981c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d107      	bne.n	8009834 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	333c      	adds	r3, #60	@ 0x3c
 8009828:	4619      	mov	r1, r3
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f000 fc2e 	bl	800a08c <VL53L0X_GetWrapAroundCheckEnable>
 8009830:	4603      	mov	r3, r0
 8009832:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8009834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d107      	bne.n	800984c <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	3304      	adds	r3, #4
 8009840:	4619      	mov	r1, r3
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 f879 	bl	800993a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8009848:	4603      	mov	r3, r0
 800984a:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800984c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009850:	4618      	mov	r0, r3
 8009852:	3710      	adds	r7, #16
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8009858:	b480      	push	{r7}
 800985a:	b085      	sub	sp, #20
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	460b      	mov	r3, r1
 8009862:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009864:	2300      	movs	r3, #0
 8009866:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8009868:	78fb      	ldrb	r3, [r7, #3]
 800986a:	2b15      	cmp	r3, #21
 800986c:	bf8c      	ite	hi
 800986e:	2201      	movhi	r2, #1
 8009870:	2200      	movls	r2, #0
 8009872:	b2d2      	uxtb	r2, r2
 8009874:	2a00      	cmp	r2, #0
 8009876:	d10f      	bne.n	8009898 <VL53L0X_SetDeviceMode+0x40>
 8009878:	4a0c      	ldr	r2, [pc, #48]	@ (80098ac <VL53L0X_SetDeviceMode+0x54>)
 800987a:	fa22 f303 	lsr.w	r3, r2, r3
 800987e:	f003 0301 	and.w	r3, r3, #1
 8009882:	2b00      	cmp	r3, #0
 8009884:	bf14      	ite	ne
 8009886:	2301      	movne	r3, #1
 8009888:	2300      	moveq	r3, #0
 800988a:	b2db      	uxtb	r3, r3
 800988c:	2b00      	cmp	r3, #0
 800988e:	d003      	beq.n	8009898 <VL53L0X_SetDeviceMode+0x40>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	78fa      	ldrb	r2, [r7, #3]
 8009894:	741a      	strb	r2, [r3, #16]
		break;
 8009896:	e001      	b.n	800989c <VL53L0X_SetDeviceMode+0x44>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8009898:	23f8      	movs	r3, #248	@ 0xf8
 800989a:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800989c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3714      	adds	r7, #20
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr
 80098ac:	0030000b 	.word	0x0030000b

080098b0 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b085      	sub	sp, #20
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098ba:	2300      	movs	r3, #0
 80098bc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	7c1a      	ldrb	r2, [r3, #16]
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80098c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3714      	adds	r7, #20
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr

080098d6 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b084      	sub	sp, #16
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
 80098de:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098e0:	2300      	movs	r3, #0
 80098e2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80098e4:	683a      	ldr	r2, [r7, #0]
 80098e6:	2109      	movs	r1, #9
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f004 fb5b 	bl	800dfa4 <VL53L0X_RdByte>
 80098ee:	4603      	mov	r3, r0
 80098f0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80098f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d106      	bne.n	8009908 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	f003 0301 	and.w	r3, r3, #1
 8009902:	b2da      	uxtb	r2, r3
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8009908:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800990c:	4618      	mov	r0, r3
 800990e:	3710      	adds	r7, #16
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800991e:	2300      	movs	r3, #0
 8009920:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8009922:	6839      	ldr	r1, [r7, #0]
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f003 fa13 	bl	800cd50 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800992a:	4603      	mov	r3, r0
 800992c:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800992e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009932:	4618      	mov	r0, r3
 8009934:	3710      	adds	r7, #16
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}

0800993a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800993a:	b580      	push	{r7, lr}
 800993c:	b084      	sub	sp, #16
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
 8009942:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009944:	2300      	movs	r3, #0
 8009946:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8009948:	6839      	ldr	r1, [r7, #0]
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f003 fae0 	bl	800cf10 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8009950:	4603      	mov	r3, r0
 8009952:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8009954:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009958:	4618      	mov	r0, r3
 800995a:	3710      	adds	r7, #16
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	460b      	mov	r3, r1
 800996a:	70fb      	strb	r3, [r7, #3]
 800996c:	4613      	mov	r3, r2
 800996e:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009970:	2300      	movs	r3, #0
 8009972:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8009974:	78ba      	ldrb	r2, [r7, #2]
 8009976:	78fb      	ldrb	r3, [r7, #3]
 8009978:	4619      	mov	r1, r3
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f002 ff2a 	bl	800c7d4 <VL53L0X_set_vcsel_pulse_period>
 8009980:	4603      	mov	r3, r0
 8009982:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8009984:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009988:	4618      	mov	r0, r3
 800998a:	3710      	adds	r7, #16
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b086      	sub	sp, #24
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	460b      	mov	r3, r1
 800999a:	607a      	str	r2, [r7, #4]
 800999c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800999e:	2300      	movs	r3, #0
 80099a0:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80099a2:	7afb      	ldrb	r3, [r7, #11]
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	4619      	mov	r1, r3
 80099a8:	68f8      	ldr	r0, [r7, #12]
 80099aa:	f003 f99a 	bl	800cce2 <VL53L0X_get_vcsel_pulse_period>
 80099ae:	4603      	mov	r3, r0
 80099b0:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80099b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3718      	adds	r7, #24
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
	...

080099c0 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b086      	sub	sp, #24
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
 80099c8:	460b      	mov	r3, r1
 80099ca:	70fb      	strb	r3, [r7, #3]
 80099cc:	4613      	mov	r3, r2
 80099ce:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80099d0:	2300      	movs	r3, #0
 80099d2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80099d4:	2300      	movs	r3, #0
 80099d6:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80099d8:	2300      	movs	r3, #0
 80099da:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80099dc:	f107 030f 	add.w	r3, r7, #15
 80099e0:	461a      	mov	r2, r3
 80099e2:	2101      	movs	r1, #1
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f004 fadd 	bl	800dfa4 <VL53L0X_RdByte>
 80099ea:	4603      	mov	r3, r0
 80099ec:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80099ee:	7bfb      	ldrb	r3, [r7, #15]
 80099f0:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80099f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d159      	bne.n	8009aae <VL53L0X_SetSequenceStepEnable+0xee>
		if (SequenceStepEnabled == 1) {
 80099fa:	78bb      	ldrb	r3, [r7, #2]
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d12b      	bne.n	8009a58 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8009a00:	78fb      	ldrb	r3, [r7, #3]
 8009a02:	2b04      	cmp	r3, #4
 8009a04:	d825      	bhi.n	8009a52 <VL53L0X_SetSequenceStepEnable+0x92>
 8009a06:	a201      	add	r2, pc, #4	@ (adr r2, 8009a0c <VL53L0X_SetSequenceStepEnable+0x4c>)
 8009a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a0c:	08009a21 	.word	0x08009a21
 8009a10:	08009a2b 	.word	0x08009a2b
 8009a14:	08009a35 	.word	0x08009a35
 8009a18:	08009a3f 	.word	0x08009a3f
 8009a1c:	08009a49 	.word	0x08009a49
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8009a20:	7dbb      	ldrb	r3, [r7, #22]
 8009a22:	f043 0310 	orr.w	r3, r3, #16
 8009a26:	75bb      	strb	r3, [r7, #22]
				break;
 8009a28:	e041      	b.n	8009aae <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8009a2a:	7dbb      	ldrb	r3, [r7, #22]
 8009a2c:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8009a30:	75bb      	strb	r3, [r7, #22]
				break;
 8009a32:	e03c      	b.n	8009aae <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8009a34:	7dbb      	ldrb	r3, [r7, #22]
 8009a36:	f043 0304 	orr.w	r3, r3, #4
 8009a3a:	75bb      	strb	r3, [r7, #22]
				break;
 8009a3c:	e037      	b.n	8009aae <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8009a3e:	7dbb      	ldrb	r3, [r7, #22]
 8009a40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a44:	75bb      	strb	r3, [r7, #22]
				break;
 8009a46:	e032      	b.n	8009aae <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8009a48:	7dbb      	ldrb	r3, [r7, #22]
 8009a4a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009a4e:	75bb      	strb	r3, [r7, #22]
				break;
 8009a50:	e02d      	b.n	8009aae <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009a52:	23fc      	movs	r3, #252	@ 0xfc
 8009a54:	75fb      	strb	r3, [r7, #23]
 8009a56:	e02a      	b.n	8009aae <VL53L0X_SetSequenceStepEnable+0xee>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8009a58:	78fb      	ldrb	r3, [r7, #3]
 8009a5a:	2b04      	cmp	r3, #4
 8009a5c:	d825      	bhi.n	8009aaa <VL53L0X_SetSequenceStepEnable+0xea>
 8009a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8009a64 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8009a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a64:	08009a79 	.word	0x08009a79
 8009a68:	08009a83 	.word	0x08009a83
 8009a6c:	08009a8d 	.word	0x08009a8d
 8009a70:	08009a97 	.word	0x08009a97
 8009a74:	08009aa1 	.word	0x08009aa1
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8009a78:	7dbb      	ldrb	r3, [r7, #22]
 8009a7a:	f023 0310 	bic.w	r3, r3, #16
 8009a7e:	75bb      	strb	r3, [r7, #22]
				break;
 8009a80:	e015      	b.n	8009aae <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8009a82:	7dbb      	ldrb	r3, [r7, #22]
 8009a84:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 8009a88:	75bb      	strb	r3, [r7, #22]
				break;
 8009a8a:	e010      	b.n	8009aae <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8009a8c:	7dbb      	ldrb	r3, [r7, #22]
 8009a8e:	f023 0304 	bic.w	r3, r3, #4
 8009a92:	75bb      	strb	r3, [r7, #22]
				break;
 8009a94:	e00b      	b.n	8009aae <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8009a96:	7dbb      	ldrb	r3, [r7, #22]
 8009a98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a9c:	75bb      	strb	r3, [r7, #22]
				break;
 8009a9e:	e006      	b.n	8009aae <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8009aa0:	7dbb      	ldrb	r3, [r7, #22]
 8009aa2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009aa6:	75bb      	strb	r3, [r7, #22]
				break;
 8009aa8:	e001      	b.n	8009aae <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009aaa:	23fc      	movs	r3, #252	@ 0xfc
 8009aac:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 8009aae:	7bfb      	ldrb	r3, [r7, #15]
 8009ab0:	7dba      	ldrb	r2, [r7, #22]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d01e      	beq.n	8009af4 <VL53L0X_SetSequenceStepEnable+0x134>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8009ab6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d107      	bne.n	8009ace <VL53L0X_SetSequenceStepEnable+0x10e>
			Status = VL53L0X_WrByte(Dev,
 8009abe:	7dbb      	ldrb	r3, [r7, #22]
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	2101      	movs	r1, #1
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f004 f9eb 	bl	800dea0 <VL53L0X_WrByte>
 8009aca:	4603      	mov	r3, r0
 8009acc:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8009ace:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d103      	bne.n	8009ade <VL53L0X_SetSequenceStepEnable+0x11e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	7dba      	ldrb	r2, [r7, #22]
 8009ada:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8009ade:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d106      	bne.n	8009af4 <VL53L0X_SetSequenceStepEnable+0x134>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	695b      	ldr	r3, [r3, #20]
 8009aea:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8009aec:	6939      	ldr	r1, [r7, #16]
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f7ff ff10 	bl	8009914 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8009af4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3718      	adds	r7, #24
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}

08009b00 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b087      	sub	sp, #28
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	607b      	str	r3, [r7, #4]
 8009b0a:	460b      	mov	r3, r1
 8009b0c:	72fb      	strb	r3, [r7, #11]
 8009b0e:	4613      	mov	r3, r2
 8009b10:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b12:	2300      	movs	r3, #0
 8009b14:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8009b1c:	7afb      	ldrb	r3, [r7, #11]
 8009b1e:	2b04      	cmp	r3, #4
 8009b20:	d836      	bhi.n	8009b90 <sequence_step_enabled+0x90>
 8009b22:	a201      	add	r2, pc, #4	@ (adr r2, 8009b28 <sequence_step_enabled+0x28>)
 8009b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b28:	08009b3d 	.word	0x08009b3d
 8009b2c:	08009b4f 	.word	0x08009b4f
 8009b30:	08009b61 	.word	0x08009b61
 8009b34:	08009b73 	.word	0x08009b73
 8009b38:	08009b85 	.word	0x08009b85
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8009b3c:	7abb      	ldrb	r3, [r7, #10]
 8009b3e:	111b      	asrs	r3, r3, #4
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	f003 0301 	and.w	r3, r3, #1
 8009b46:	b2da      	uxtb	r2, r3
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	701a      	strb	r2, [r3, #0]
		break;
 8009b4c:	e022      	b.n	8009b94 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8009b4e:	7abb      	ldrb	r3, [r7, #10]
 8009b50:	10db      	asrs	r3, r3, #3
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	f003 0301 	and.w	r3, r3, #1
 8009b58:	b2da      	uxtb	r2, r3
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	701a      	strb	r2, [r3, #0]
		break;
 8009b5e:	e019      	b.n	8009b94 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8009b60:	7abb      	ldrb	r3, [r7, #10]
 8009b62:	109b      	asrs	r3, r3, #2
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	f003 0301 	and.w	r3, r3, #1
 8009b6a:	b2da      	uxtb	r2, r3
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	701a      	strb	r2, [r3, #0]
		break;
 8009b70:	e010      	b.n	8009b94 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8009b72:	7abb      	ldrb	r3, [r7, #10]
 8009b74:	119b      	asrs	r3, r3, #6
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	f003 0301 	and.w	r3, r3, #1
 8009b7c:	b2da      	uxtb	r2, r3
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	701a      	strb	r2, [r3, #0]
		break;
 8009b82:	e007      	b.n	8009b94 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8009b84:	7abb      	ldrb	r3, [r7, #10]
 8009b86:	09db      	lsrs	r3, r3, #7
 8009b88:	b2da      	uxtb	r2, r3
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	701a      	strb	r2, [r3, #0]
		break;
 8009b8e:	e001      	b.n	8009b94 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009b90:	23fc      	movs	r3, #252	@ 0xfc
 8009b92:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009b94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	371c      	adds	r7, #28
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009bb6:	f107 030e 	add.w	r3, r7, #14
 8009bba:	461a      	mov	r2, r3
 8009bbc:	2101      	movs	r1, #1
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f004 f9f0 	bl	800dfa4 <VL53L0X_RdByte>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8009bc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d107      	bne.n	8009be0 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8009bd0:	7bba      	ldrb	r2, [r7, #14]
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	2100      	movs	r1, #0
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f7ff ff92 	bl	8009b00 <sequence_step_enabled>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d108      	bne.n	8009bfa <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8009be8:	7bba      	ldrb	r2, [r7, #14]
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	3302      	adds	r3, #2
 8009bee:	2101      	movs	r1, #1
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f7ff ff85 	bl	8009b00 <sequence_step_enabled>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d108      	bne.n	8009c14 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8009c02:	7bba      	ldrb	r2, [r7, #14]
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	3301      	adds	r3, #1
 8009c08:	2102      	movs	r1, #2
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f7ff ff78 	bl	8009b00 <sequence_step_enabled>
 8009c10:	4603      	mov	r3, r0
 8009c12:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d108      	bne.n	8009c2e <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8009c1c:	7bba      	ldrb	r2, [r7, #14]
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	3303      	adds	r3, #3
 8009c22:	2103      	movs	r1, #3
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f7ff ff6b 	bl	8009b00 <sequence_step_enabled>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d108      	bne.n	8009c48 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8009c36:	7bba      	ldrb	r2, [r7, #14]
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	3304      	adds	r3, #4
 8009c3c:	2104      	movs	r1, #4
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f7ff ff5e 	bl	8009b00 <sequence_step_enabled>
 8009c44:	4603      	mov	r3, r0
 8009c46:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}

08009c54 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8009c62:	f107 030c 	add.w	r3, r7, #12
 8009c66:	461a      	mov	r2, r3
 8009c68:	21f8      	movs	r1, #248	@ 0xf8
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f004 f9c4 	bl	800dff8 <VL53L0X_RdWord>
 8009c70:	4603      	mov	r3, r0
 8009c72:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8009c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d108      	bne.n	8009c8e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8009c7c:	f107 0308 	add.w	r3, r7, #8
 8009c80:	461a      	mov	r2, r3
 8009c82:	2104      	movs	r1, #4
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f004 f9ed 	bl	800e064 <VL53L0X_RdDWord>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009c8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d10c      	bne.n	8009cb0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8009c96:	89bb      	ldrh	r3, [r7, #12]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d005      	beq.n	8009ca8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	89ba      	ldrh	r2, [r7, #12]
 8009ca0:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009cb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3710      	adds	r7, #16
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	7f1b      	ldrb	r3, [r3, #28]
 8009cce:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	7bba      	ldrb	r2, [r7, #14]
 8009cd4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8009cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3714      	adds	r7, #20
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr

08009ce6 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b086      	sub	sp, #24
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
 8009cee:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8009cf4:	f107 030e 	add.w	r3, r7, #14
 8009cf8:	461a      	mov	r2, r3
 8009cfa:	2120      	movs	r1, #32
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f004 f97b 	bl	800dff8 <VL53L0X_RdWord>
 8009d02:	4603      	mov	r3, r0
 8009d04:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8009d06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d118      	bne.n	8009d40 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8009d0e:	89fb      	ldrh	r3, [r7, #14]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d109      	bne.n	8009d28 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6a1b      	ldr	r3, [r3, #32]
 8009d18:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	693a      	ldr	r2, [r7, #16]
 8009d1e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2200      	movs	r2, #0
 8009d24:	771a      	strb	r2, [r3, #28]
 8009d26:	e00b      	b.n	8009d40 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8009d28:	89fb      	ldrh	r3, [r7, #14]
 8009d2a:	00db      	lsls	r3, r3, #3
 8009d2c:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	693a      	ldr	r2, [r7, #16]
 8009d32:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	693a      	ldr	r2, [r7, #16]
 8009d38:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009d40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3718      	adds	r7, #24
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b086      	sub	sp, #24
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	460b      	mov	r3, r1
 8009d56:	807b      	strh	r3, [r7, #2]
 8009d58:	4613      	mov	r3, r2
 8009d5a:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8009d60:	2300      	movs	r3, #0
 8009d62:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8009d64:	2300      	movs	r3, #0
 8009d66:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8009d6c:	887b      	ldrh	r3, [r7, #2]
 8009d6e:	2b05      	cmp	r3, #5
 8009d70:	d902      	bls.n	8009d78 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009d72:	23fc      	movs	r3, #252	@ 0xfc
 8009d74:	75fb      	strb	r3, [r7, #23]
 8009d76:	e05b      	b.n	8009e30 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8009d78:	787b      	ldrb	r3, [r7, #1]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d106      	bne.n	8009d8c <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8009d82:	2300      	movs	r3, #0
 8009d84:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8009d86:	2301      	movs	r3, #1
 8009d88:	73bb      	strb	r3, [r7, #14]
 8009d8a:	e00a      	b.n	8009da2 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009d8c:	887b      	ldrh	r3, [r7, #2]
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	330c      	adds	r3, #12
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	4413      	add	r3, r2
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8009da2:	887b      	ldrh	r3, [r7, #2]
 8009da4:	2b05      	cmp	r3, #5
 8009da6:	d841      	bhi.n	8009e2c <VL53L0X_SetLimitCheckEnable+0xe0>
 8009da8:	a201      	add	r2, pc, #4	@ (adr r2, 8009db0 <VL53L0X_SetLimitCheckEnable+0x64>)
 8009daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dae:	bf00      	nop
 8009db0:	08009dc9 	.word	0x08009dc9
 8009db4:	08009dd3 	.word	0x08009dd3
 8009db8:	08009de9 	.word	0x08009de9
 8009dbc:	08009df3 	.word	0x08009df3
 8009dc0:	08009dfd 	.word	0x08009dfd
 8009dc4:	08009e15 	.word	0x08009e15

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	7bfa      	ldrb	r2, [r7, #15]
 8009dcc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8009dd0:	e02e      	b.n	8009e30 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	461a      	mov	r2, r3
 8009dda:	2144      	movs	r1, #68	@ 0x44
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f004 f883 	bl	800dee8 <VL53L0X_WrWord>
 8009de2:	4603      	mov	r3, r0
 8009de4:	75fb      	strb	r3, [r7, #23]

			break;
 8009de6:	e023      	b.n	8009e30 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	7bfa      	ldrb	r2, [r7, #15]
 8009dec:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8009df0:	e01e      	b.n	8009e30 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	7bfa      	ldrb	r2, [r7, #15]
 8009df6:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8009dfa:	e019      	b.n	8009e30 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8009dfc:	7bbb      	ldrb	r3, [r7, #14]
 8009dfe:	005b      	lsls	r3, r3, #1
 8009e00:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8009e02:	7b7b      	ldrb	r3, [r7, #13]
 8009e04:	22fe      	movs	r2, #254	@ 0xfe
 8009e06:	2160      	movs	r1, #96	@ 0x60
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f004 f897 	bl	800df3c <VL53L0X_UpdateByte>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8009e12:	e00d      	b.n	8009e30 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8009e14:	7bbb      	ldrb	r3, [r7, #14]
 8009e16:	011b      	lsls	r3, r3, #4
 8009e18:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8009e1a:	7b7b      	ldrb	r3, [r7, #13]
 8009e1c:	22ef      	movs	r2, #239	@ 0xef
 8009e1e:	2160      	movs	r1, #96	@ 0x60
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f004 f88b 	bl	800df3c <VL53L0X_UpdateByte>
 8009e26:	4603      	mov	r3, r0
 8009e28:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8009e2a:	e001      	b.n	8009e30 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009e2c:	23fc      	movs	r3, #252	@ 0xfc
 8009e2e:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009e30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d10f      	bne.n	8009e58 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8009e38:	787b      	ldrb	r3, [r7, #1]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d106      	bne.n	8009e4c <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009e3e:	887b      	ldrh	r3, [r7, #2]
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	4413      	add	r3, r2
 8009e44:	2200      	movs	r2, #0
 8009e46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8009e4a:	e005      	b.n	8009e58 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009e4c:	887b      	ldrh	r3, [r7, #2]
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	4413      	add	r3, r2
 8009e52:	2201      	movs	r2, #1
 8009e54:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009e58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3718      	adds	r7, #24
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b087      	sub	sp, #28
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	607a      	str	r2, [r7, #4]
 8009e70:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e72:	2300      	movs	r3, #0
 8009e74:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8009e76:	897b      	ldrh	r3, [r7, #10]
 8009e78:	2b05      	cmp	r3, #5
 8009e7a:	d905      	bls.n	8009e88 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009e7c:	23fc      	movs	r3, #252	@ 0xfc
 8009e7e:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2200      	movs	r2, #0
 8009e84:	701a      	strb	r2, [r3, #0]
 8009e86:	e008      	b.n	8009e9a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009e88:	897b      	ldrh	r3, [r7, #10]
 8009e8a:	68fa      	ldr	r2, [r7, #12]
 8009e8c:	4413      	add	r3, r2
 8009e8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e92:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	7dba      	ldrb	r2, [r7, #22]
 8009e98:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009e9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	371c      	adds	r7, #28
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr
	...

08009eac <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b086      	sub	sp, #24
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	460b      	mov	r3, r1
 8009eb6:	607a      	str	r2, [r7, #4]
 8009eb8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8009ebe:	897b      	ldrh	r3, [r7, #10]
 8009ec0:	68fa      	ldr	r2, [r7, #12]
 8009ec2:	4413      	add	r3, r2
 8009ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ec8:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8009eca:	7dbb      	ldrb	r3, [r7, #22]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d107      	bne.n	8009ee0 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009ed0:	897b      	ldrh	r3, [r7, #10]
 8009ed2:	68fa      	ldr	r2, [r7, #12]
 8009ed4:	330c      	adds	r3, #12
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	4413      	add	r3, r2
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	605a      	str	r2, [r3, #4]
 8009ede:	e040      	b.n	8009f62 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8009ee0:	897b      	ldrh	r3, [r7, #10]
 8009ee2:	2b05      	cmp	r3, #5
 8009ee4:	d830      	bhi.n	8009f48 <VL53L0X_SetLimitCheckValue+0x9c>
 8009ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8009eec <VL53L0X_SetLimitCheckValue+0x40>)
 8009ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eec:	08009f05 	.word	0x08009f05
 8009ef0:	08009f0d 	.word	0x08009f0d
 8009ef4:	08009f23 	.word	0x08009f23
 8009ef8:	08009f2b 	.word	0x08009f2b
 8009efc:	08009f33 	.word	0x08009f33
 8009f00:	08009f33 	.word	0x08009f33

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	635a      	str	r2, [r3, #52]	@ 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8009f0a:	e01f      	b.n	8009f4c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009f10:	b29b      	uxth	r3, r3
 8009f12:	461a      	mov	r2, r3
 8009f14:	2144      	movs	r1, #68	@ 0x44
 8009f16:	68f8      	ldr	r0, [r7, #12]
 8009f18:	f003 ffe6 	bl	800dee8 <VL53L0X_WrWord>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8009f20:	e014      	b.n	8009f4c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	63da      	str	r2, [r3, #60]	@ 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8009f28:	e010      	b.n	8009f4c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	641a      	str	r2, [r3, #64]	@ 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8009f30:	e00c      	b.n	8009f4c <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	461a      	mov	r2, r3
 8009f3a:	2164      	movs	r1, #100	@ 0x64
 8009f3c:	68f8      	ldr	r0, [r7, #12]
 8009f3e:	f003 ffd3 	bl	800dee8 <VL53L0X_WrWord>
 8009f42:	4603      	mov	r3, r0
 8009f44:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8009f46:	e001      	b.n	8009f4c <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009f48:	23fc      	movs	r3, #252	@ 0xfc
 8009f4a:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009f4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d106      	bne.n	8009f62 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009f54:	897b      	ldrh	r3, [r7, #10]
 8009f56:	68fa      	ldr	r2, [r7, #12]
 8009f58:	330c      	adds	r3, #12
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	4413      	add	r3, r2
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009f62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3718      	adds	r7, #24
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop

08009f70 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b088      	sub	sp, #32
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	60f8      	str	r0, [r7, #12]
 8009f78:	460b      	mov	r3, r1
 8009f7a:	607a      	str	r2, [r7, #4]
 8009f7c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8009f82:	2300      	movs	r3, #0
 8009f84:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8009f86:	897b      	ldrh	r3, [r7, #10]
 8009f88:	2b05      	cmp	r3, #5
 8009f8a:	d847      	bhi.n	800a01c <VL53L0X_GetLimitCheckValue+0xac>
 8009f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8009f94 <VL53L0X_GetLimitCheckValue+0x24>)
 8009f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f92:	bf00      	nop
 8009f94:	08009fad 	.word	0x08009fad
 8009f98:	08009fb9 	.word	0x08009fb9
 8009f9c:	08009fdf 	.word	0x08009fdf
 8009fa0:	08009feb 	.word	0x08009feb
 8009fa4:	08009ff7 	.word	0x08009ff7
 8009fa8:	08009ff7 	.word	0x08009ff7

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009fb0:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	77bb      	strb	r3, [r7, #30]
		break;
 8009fb6:	e033      	b.n	800a020 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8009fb8:	f107 0316 	add.w	r3, r7, #22
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	2144      	movs	r1, #68	@ 0x44
 8009fc0:	68f8      	ldr	r0, [r7, #12]
 8009fc2:	f004 f819 	bl	800dff8 <VL53L0X_RdWord>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8009fca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d102      	bne.n	8009fd8 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8009fd2:	8afb      	ldrh	r3, [r7, #22]
 8009fd4:	025b      	lsls	r3, r3, #9
 8009fd6:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	77bb      	strb	r3, [r7, #30]
		break;
 8009fdc:	e020      	b.n	800a020 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fe2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	77bb      	strb	r3, [r7, #30]
		break;
 8009fe8:	e01a      	b.n	800a020 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fee:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	77bb      	strb	r3, [r7, #30]
		break;
 8009ff4:	e014      	b.n	800a020 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8009ff6:	f107 0316 	add.w	r3, r7, #22
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	2164      	movs	r1, #100	@ 0x64
 8009ffe:	68f8      	ldr	r0, [r7, #12]
 800a000:	f003 fffa 	bl	800dff8 <VL53L0X_RdWord>
 800a004:	4603      	mov	r3, r0
 800a006:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800a008:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d102      	bne.n	800a016 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800a010:	8afb      	ldrh	r3, [r7, #22]
 800a012:	025b      	lsls	r3, r3, #9
 800a014:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800a016:	2300      	movs	r3, #0
 800a018:	77bb      	strb	r3, [r7, #30]
		break;
 800a01a:	e001      	b.n	800a020 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a01c:	23fc      	movs	r3, #252	@ 0xfc
 800a01e:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a020:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d12a      	bne.n	800a07e <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800a028:	7fbb      	ldrb	r3, [r7, #30]
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d124      	bne.n	800a078 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d110      	bne.n	800a056 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800a034:	897b      	ldrh	r3, [r7, #10]
 800a036:	68fa      	ldr	r2, [r7, #12]
 800a038:	330c      	adds	r3, #12
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	4413      	add	r3, r2
 800a03e:	685b      	ldr	r3, [r3, #4]
 800a040:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	69ba      	ldr	r2, [r7, #24]
 800a046:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800a048:	897b      	ldrh	r3, [r7, #10]
 800a04a:	68fa      	ldr	r2, [r7, #12]
 800a04c:	4413      	add	r3, r2
 800a04e:	2200      	movs	r2, #0
 800a050:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800a054:	e013      	b.n	800a07e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	69ba      	ldr	r2, [r7, #24]
 800a05a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800a05c:	897b      	ldrh	r3, [r7, #10]
 800a05e:	68fa      	ldr	r2, [r7, #12]
 800a060:	330c      	adds	r3, #12
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	4413      	add	r3, r2
 800a066:	69ba      	ldr	r2, [r7, #24]
 800a068:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800a06a:	897b      	ldrh	r3, [r7, #10]
 800a06c:	68fa      	ldr	r2, [r7, #12]
 800a06e:	4413      	add	r3, r2
 800a070:	2201      	movs	r2, #1
 800a072:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 800a076:	e002      	b.n	800a07e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	69ba      	ldr	r2, [r7, #24]
 800a07c:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a07e:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800a082:	4618      	mov	r0, r3
 800a084:	3720      	adds	r7, #32
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop

0800a08c <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a096:	2300      	movs	r3, #0
 800a098:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800a09a:	f107 030e 	add.w	r3, r7, #14
 800a09e:	461a      	mov	r2, r3
 800a0a0:	2101      	movs	r1, #1
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f003 ff7e 	bl	800dfa4 <VL53L0X_RdByte>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800a0ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d10e      	bne.n	800a0d2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800a0b4:	7bba      	ldrb	r2, [r7, #14]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		if (data & (0x01 << 7))
 800a0bc:	7bbb      	ldrb	r3, [r7, #14]
 800a0be:	b25b      	sxtb	r3, r3
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	da03      	bge.n	800a0cc <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800a0c4:	683b      	ldr	r3, [r7, #0]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	701a      	strb	r2, [r3, #0]
 800a0ca:	e002      	b.n	800a0d2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800a0d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d104      	bne.n	800a0e4 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	781a      	ldrb	r2, [r3, #0]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a0e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	3710      	adds	r7, #16
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b084      	sub	sp, #16
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800a0fc:	f107 030e 	add.w	r3, r7, #14
 800a100:	4619      	mov	r1, r3
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f7ff fbd4 	bl	80098b0 <VL53L0X_GetDeviceMode>
 800a108:	4603      	mov	r3, r0
 800a10a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800a10c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d107      	bne.n	800a124 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800a114:	7bbb      	ldrb	r3, [r7, #14]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d104      	bne.n	800a124 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 f898 	bl	800a250 <VL53L0X_StartMeasurement>
 800a120:	4603      	mov	r3, r0
 800a122:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800a124:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d104      	bne.n	800a136 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f001 fb33 	bl	800b798 <VL53L0X_measurement_poll_for_completion>
 800a132:	4603      	mov	r3, r0
 800a134:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800a136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d106      	bne.n	800a14c <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800a13e:	7bbb      	ldrb	r3, [r7, #14]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d103      	bne.n	800a14c <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2203      	movs	r2, #3
 800a148:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800a14c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a150:	4618      	mov	r0, r3
 800a152:	3710      	adds	r7, #16
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b086      	sub	sp, #24
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a164:	2300      	movs	r3, #0
 800a166:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800a168:	2301      	movs	r3, #1
 800a16a:	687a      	ldr	r2, [r7, #4]
 800a16c:	68b9      	ldr	r1, [r7, #8]
 800a16e:	68f8      	ldr	r0, [r7, #12]
 800a170:	f001 fad5 	bl	800b71e <VL53L0X_perform_ref_calibration>
 800a174:	4603      	mov	r3, r0
 800a176:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800a178:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3718      	adds	r7, #24
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b086      	sub	sp, #24
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	460b      	mov	r3, r1
 800a18e:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a190:	2300      	movs	r3, #0
 800a192:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 800a19a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800a19c:	7dbb      	ldrb	r3, [r7, #22]
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d005      	beq.n	800a1ae <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800a1a2:	7dbb      	ldrb	r3, [r7, #22]
 800a1a4:	2b02      	cmp	r3, #2
 800a1a6:	d002      	beq.n	800a1ae <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800a1a8:	7dbb      	ldrb	r3, [r7, #22]
 800a1aa:	2b03      	cmp	r3, #3
 800a1ac:	d147      	bne.n	800a23e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800a1ae:	f107 030c 	add.w	r3, r7, #12
 800a1b2:	f107 0210 	add.w	r2, r7, #16
 800a1b6:	2101      	movs	r1, #1
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 fbb9 	bl	800a930 <VL53L0X_GetInterruptThresholds>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 800a1c8:	d803      	bhi.n	800a1d2 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800a1ca:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800a1cc:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 800a1d0:	d935      	bls.n	800a23e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800a1d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d131      	bne.n	800a23e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800a1da:	78fb      	ldrb	r3, [r7, #3]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d006      	beq.n	800a1ee <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800a1e0:	491a      	ldr	r1, [pc, #104]	@ (800a24c <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f002 ff46 	bl	800d074 <VL53L0X_load_tuning_settings>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	75fb      	strb	r3, [r7, #23]
 800a1ec:	e027      	b.n	800a23e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800a1ee:	2204      	movs	r2, #4
 800a1f0:	21ff      	movs	r1, #255	@ 0xff
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f003 fe54 	bl	800dea0 <VL53L0X_WrByte>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	7dfb      	ldrb	r3, [r7, #23]
 800a1fe:	4313      	orrs	r3, r2
 800a200:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800a202:	2200      	movs	r2, #0
 800a204:	2170      	movs	r1, #112	@ 0x70
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f003 fe4a 	bl	800dea0 <VL53L0X_WrByte>
 800a20c:	4603      	mov	r3, r0
 800a20e:	461a      	mov	r2, r3
 800a210:	7dfb      	ldrb	r3, [r7, #23]
 800a212:	4313      	orrs	r3, r2
 800a214:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a216:	2200      	movs	r2, #0
 800a218:	21ff      	movs	r1, #255	@ 0xff
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f003 fe40 	bl	800dea0 <VL53L0X_WrByte>
 800a220:	4603      	mov	r3, r0
 800a222:	461a      	mov	r2, r3
 800a224:	7dfb      	ldrb	r3, [r7, #23]
 800a226:	4313      	orrs	r3, r2
 800a228:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a22a:	2200      	movs	r2, #0
 800a22c:	2180      	movs	r1, #128	@ 0x80
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f003 fe36 	bl	800dea0 <VL53L0X_WrByte>
 800a234:	4603      	mov	r3, r0
 800a236:	461a      	mov	r2, r3
 800a238:	7dfb      	ldrb	r3, [r7, #23]
 800a23a:	4313      	orrs	r3, r2
 800a23c:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800a23e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800a242:	4618      	mov	r0, r3
 800a244:	3718      	adds	r7, #24
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	20000104 	.word	0x20000104

0800a250 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b086      	sub	sp, #24
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a258:	2300      	movs	r3, #0
 800a25a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800a25c:	2301      	movs	r3, #1
 800a25e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800a260:	f107 030e 	add.w	r3, r7, #14
 800a264:	4619      	mov	r1, r3
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f7ff fb22 	bl	80098b0 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a26c:	2201      	movs	r2, #1
 800a26e:	2180      	movs	r1, #128	@ 0x80
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f003 fe15 	bl	800dea0 <VL53L0X_WrByte>
 800a276:	4603      	mov	r3, r0
 800a278:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a27a:	2201      	movs	r2, #1
 800a27c:	21ff      	movs	r1, #255	@ 0xff
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f003 fe0e 	bl	800dea0 <VL53L0X_WrByte>
 800a284:	4603      	mov	r3, r0
 800a286:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a288:	2200      	movs	r2, #0
 800a28a:	2100      	movs	r1, #0
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f003 fe07 	bl	800dea0 <VL53L0X_WrByte>
 800a292:	4603      	mov	r3, r0
 800a294:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f893 313a 	ldrb.w	r3, [r3, #314]	@ 0x13a
 800a29c:	461a      	mov	r2, r3
 800a29e:	2191      	movs	r1, #145	@ 0x91
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f003 fdfd 	bl	800dea0 <VL53L0X_WrByte>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	2100      	movs	r1, #0
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f003 fdf6 	bl	800dea0 <VL53L0X_WrByte>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	21ff      	movs	r1, #255	@ 0xff
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f003 fdef 	bl	800dea0 <VL53L0X_WrByte>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	2180      	movs	r1, #128	@ 0x80
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f003 fde8 	bl	800dea0 <VL53L0X_WrByte>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800a2d4:	7bbb      	ldrb	r3, [r7, #14]
 800a2d6:	2b03      	cmp	r3, #3
 800a2d8:	d054      	beq.n	800a384 <VL53L0X_StartMeasurement+0x134>
 800a2da:	2b03      	cmp	r3, #3
 800a2dc:	dc6c      	bgt.n	800a3b8 <VL53L0X_StartMeasurement+0x168>
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d002      	beq.n	800a2e8 <VL53L0X_StartMeasurement+0x98>
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d034      	beq.n	800a350 <VL53L0X_StartMeasurement+0x100>
 800a2e6:	e067      	b.n	800a3b8 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	2100      	movs	r1, #0
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f003 fdd7 	bl	800dea0 <VL53L0X_WrByte>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800a2f6:	7bfb      	ldrb	r3, [r7, #15]
 800a2f8:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800a2fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d15d      	bne.n	800a3be <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800a302:	2300      	movs	r3, #0
 800a304:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d008      	beq.n	800a31e <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800a30c:	f107 030d 	add.w	r3, r7, #13
 800a310:	461a      	mov	r2, r3
 800a312:	2100      	movs	r1, #0
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f003 fe45 	bl	800dfa4 <VL53L0X_RdByte>
 800a31a:	4603      	mov	r3, r0
 800a31c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	3301      	adds	r3, #1
 800a322:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800a324:	7b7a      	ldrb	r2, [r7, #13]
 800a326:	7bfb      	ldrb	r3, [r7, #15]
 800a328:	4013      	ands	r3, r2
 800a32a:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800a32c:	7bfa      	ldrb	r2, [r7, #15]
 800a32e:	429a      	cmp	r2, r3
 800a330:	d107      	bne.n	800a342 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800a332:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d103      	bne.n	800a342 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800a340:	d3e1      	bcc.n	800a306 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800a348:	d339      	bcc.n	800a3be <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800a34a:	23f9      	movs	r3, #249	@ 0xf9
 800a34c:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800a34e:	e036      	b.n	800a3be <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800a350:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d105      	bne.n	800a364 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800a358:	2101      	movs	r1, #1
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f7ff ff12 	bl	800a184 <VL53L0X_CheckAndLoadInterruptSettings>
 800a360:	4603      	mov	r3, r0
 800a362:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800a364:	2202      	movs	r2, #2
 800a366:	2100      	movs	r1, #0
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f003 fd99 	bl	800dea0 <VL53L0X_WrByte>
 800a36e:	4603      	mov	r3, r0
 800a370:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800a372:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d123      	bne.n	800a3c2 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2204      	movs	r2, #4
 800a37e:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 800a382:	e01e      	b.n	800a3c2 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800a384:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d105      	bne.n	800a398 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800a38c:	2101      	movs	r1, #1
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f7ff fef8 	bl	800a184 <VL53L0X_CheckAndLoadInterruptSettings>
 800a394:	4603      	mov	r3, r0
 800a396:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800a398:	2204      	movs	r2, #4
 800a39a:	2100      	movs	r1, #0
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f003 fd7f 	bl	800dea0 <VL53L0X_WrByte>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800a3a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d10b      	bne.n	800a3c6 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2204      	movs	r2, #4
 800a3b2:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 800a3b6:	e006      	b.n	800a3c6 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800a3b8:	23f8      	movs	r3, #248	@ 0xf8
 800a3ba:	75fb      	strb	r3, [r7, #23]
 800a3bc:	e004      	b.n	800a3c8 <VL53L0X_StartMeasurement+0x178>
		break;
 800a3be:	bf00      	nop
 800a3c0:	e002      	b.n	800a3c8 <VL53L0X_StartMeasurement+0x178>
		break;
 800a3c2:	bf00      	nop
 800a3c4:	e000      	b.n	800a3c8 <VL53L0X_StartMeasurement+0x178>
		break;
 800a3c6:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800a3c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3718      	adds	r7, #24
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a3de:	2300      	movs	r3, #0
 800a3e0:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 800a3e8:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800a3ea:	7bbb      	ldrb	r3, [r7, #14]
 800a3ec:	2b04      	cmp	r3, #4
 800a3ee:	d112      	bne.n	800a416 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800a3f0:	f107 0308 	add.w	r3, r7, #8
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 fb0e 	bl	800aa18 <VL53L0X_GetInterruptMaskStatus>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	2b04      	cmp	r3, #4
 800a404:	d103      	bne.n	800a40e <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	2201      	movs	r2, #1
 800a40a:	701a      	strb	r2, [r3, #0]
 800a40c:	e01c      	b.n	800a448 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	2200      	movs	r2, #0
 800a412:	701a      	strb	r2, [r3, #0]
 800a414:	e018      	b.n	800a448 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800a416:	f107 030d 	add.w	r3, r7, #13
 800a41a:	461a      	mov	r2, r3
 800a41c:	2114      	movs	r1, #20
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f003 fdc0 	bl	800dfa4 <VL53L0X_RdByte>
 800a424:	4603      	mov	r3, r0
 800a426:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800a428:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d10b      	bne.n	800a448 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800a430:	7b7b      	ldrb	r3, [r7, #13]
 800a432:	f003 0301 	and.w	r3, r3, #1
 800a436:	2b00      	cmp	r3, #0
 800a438:	d003      	beq.n	800a442 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	2201      	movs	r2, #1
 800a43e:	701a      	strb	r2, [r3, #0]
 800a440:	e002      	b.n	800a448 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	2200      	movs	r2, #0
 800a446:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a448:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3710      	adds	r7, #16
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800a454:	b5b0      	push	{r4, r5, r7, lr}
 800a456:	b096      	sub	sp, #88	@ 0x58
 800a458:	af02      	add	r7, sp, #8
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a45e:	2300      	movs	r3, #0
 800a460:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800a464:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800a468:	230c      	movs	r3, #12
 800a46a:	2114      	movs	r1, #20
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f003 fceb 	bl	800de48 <VL53L0X_ReadMulti>
 800a472:	4603      	mov	r3, r0
 800a474:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800a478:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	f040 80c8 	bne.w	800a612 <VL53L0X_GetRangingMeasurementData+0x1be>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	2200      	movs	r2, #0
 800a486:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	2200      	movs	r2, #0
 800a48c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800a48e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800a492:	021b      	lsls	r3, r3, #8
 800a494:	b29b      	uxth	r3, r3
 800a496:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800a49a:	4413      	add	r3, r2
 800a49c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800a4a6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a4aa:	021b      	lsls	r3, r3, #8
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800a4b2:	4413      	add	r3, r2
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	025b      	lsls	r3, r3, #9
 800a4b8:	647b      	str	r3, [r7, #68]	@ 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a4be:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800a4c0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800a4c4:	021b      	lsls	r3, r3, #8
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 800a4cc:	4413      	add	r3, r2
 800a4ce:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800a4d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a4d6:	025a      	lsls	r2, r3, #9
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800a4dc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a4e0:	021b      	lsls	r3, r3, #8
 800a4e2:	b29b      	uxth	r3, r3
 800a4e4:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800a4e8:	4413      	add	r3, r2
 800a4ea:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800a4f4:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800a4f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a4fa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f8b3 3152 	ldrh.w	r3, [r3, #338]	@ 0x152
 800a504:	87bb      	strh	r3, [r7, #60]	@ 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 800a50c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800a510:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a512:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a516:	d046      	beq.n	800a5a6 <VL53L0X_GetRangingMeasurementData+0x152>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800a518:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a51a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800a51e:	fb02 f303 	mul.w	r3, r2, r3
 800a522:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800a526:	4a58      	ldr	r2, [pc, #352]	@ (800a688 <VL53L0X_GetRangingMeasurementData+0x234>)
 800a528:	fb82 1203 	smull	r1, r2, r2, r3
 800a52c:	1192      	asrs	r2, r2, #6
 800a52e:	17db      	asrs	r3, r3, #31
 800a530:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800a532:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6a1b      	ldr	r3, [r3, #32]
 800a53a:	873b      	strh	r3, [r7, #56]	@ 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	7f1b      	ldrb	r3, [r3, #28]
 800a540:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800a544:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d02c      	beq.n	800a5a6 <VL53L0X_GetRangingMeasurementData+0x152>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800a54c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a54e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800a552:	fb02 f303 	mul.w	r3, r2, r3
 800a556:	121a      	asrs	r2, r3, #8
					<= 0) {
 800a558:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
				if ((SignalRate
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d10d      	bne.n	800a57a <VL53L0X_GetRangingMeasurementData+0x126>
					if (RangeFractionalEnable)
 800a55e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800a562:	2b00      	cmp	r3, #0
 800a564:	d004      	beq.n	800a570 <VL53L0X_GetRangingMeasurementData+0x11c>
						XtalkRangeMilliMeter = 8888;
 800a566:	f242 23b8 	movw	r3, #8888	@ 0x22b8
 800a56a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800a56e:	e016      	b.n	800a59e <VL53L0X_GetRangingMeasurementData+0x14a>
					else
						XtalkRangeMilliMeter = 8888
 800a570:	f648 23e0 	movw	r3, #35552	@ 0x8ae0
 800a574:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800a578:	e011      	b.n	800a59e <VL53L0X_GetRangingMeasurementData+0x14a>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800a57a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800a57e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a580:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800a584:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a586:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 800a58a:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800a58e:	121b      	asrs	r3, r3, #8
 800a590:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800a592:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a594:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800a596:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800a59a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800a59e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800a5a2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800a5a6:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d00d      	beq.n	800a5ca <VL53L0X_GetRangingMeasurementData+0x176>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800a5ae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800a5b2:	089b      	lsrs	r3, r3, #2
 800a5b4:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800a5ba:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	019b      	lsls	r3, r3, #6
 800a5c2:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	75da      	strb	r2, [r3, #23]
 800a5c8:	e006      	b.n	800a5d8 <VL53L0X_GetRangingMeasurementData+0x184>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800a5d0:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800a5d8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800a5dc:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 800a5e0:	f107 0336 	add.w	r3, r7, #54	@ 0x36
 800a5e4:	9301      	str	r3, [sp, #4]
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	9300      	str	r3, [sp, #0]
 800a5ea:	4613      	mov	r3, r2
 800a5ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f003 f9de 	bl	800d9b0 <VL53L0X_get_pal_range_status>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800a602:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800a606:	2b00      	cmp	r3, #0
 800a608:	d103      	bne.n	800a612 <VL53L0X_GetRangingMeasurementData+0x1be>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800a60a:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a612:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800a616:	2b00      	cmp	r3, #0
 800a618:	d12f      	bne.n	800a67a <VL53L0X_GetRangingMeasurementData+0x226>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	f107 040c 	add.w	r4, r7, #12
 800a620:	f103 0550 	add.w	r5, r3, #80	@ 0x50
 800a624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a628:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a62c:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800a634:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800a63a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800a642:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800a648:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800a64e:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800a654:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800a65a:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800a660:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f103 0450 	add.w	r4, r3, #80	@ 0x50
 800a66a:	f107 050c 	add.w	r5, r7, #12
 800a66e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a670:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a672:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a676:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a67a:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3750      	adds	r7, #80	@ 0x50
 800a682:	46bd      	mov	sp, r7
 800a684:	bdb0      	pop	{r4, r5, r7, pc}
 800a686:	bf00      	nop
 800a688:	10624dd3 	.word	0x10624dd3

0800a68c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a696:	2300      	movs	r3, #0
 800a698:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800a69a:	2100      	movs	r1, #0
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f7ff f8db 	bl	8009858 <VL53L0X_SetDeviceMode>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a6a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d104      	bne.n	800a6b8 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f7ff fd1e 	bl	800a0f0 <VL53L0X_PerformSingleMeasurement>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800a6b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d105      	bne.n	800a6cc <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800a6c0:	6839      	ldr	r1, [r7, #0]
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f7ff fec6 	bl	800a454 <VL53L0X_GetRangingMeasurementData>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800a6cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d105      	bne.n	800a6e0 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 f95e 	bl	800a998 <VL53L0X_ClearInterruptMask>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800a6e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3710      	adds	r7, #16
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	4608      	mov	r0, r1
 800a6f6:	4611      	mov	r1, r2
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	70fb      	strb	r3, [r7, #3]
 800a6fe:	460b      	mov	r3, r1
 800a700:	70bb      	strb	r3, [r7, #2]
 800a702:	4613      	mov	r3, r2
 800a704:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a706:	2300      	movs	r3, #0
 800a708:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800a70a:	78fb      	ldrb	r3, [r7, #3]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d002      	beq.n	800a716 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800a710:	23f6      	movs	r3, #246	@ 0xf6
 800a712:	73fb      	strb	r3, [r7, #15]
 800a714:	e105      	b.n	800a922 <VL53L0X_SetGpioConfig+0x236>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800a716:	78bb      	ldrb	r3, [r7, #2]
 800a718:	2b14      	cmp	r3, #20
 800a71a:	d110      	bne.n	800a73e <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800a71c:	7e3b      	ldrb	r3, [r7, #24]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d102      	bne.n	800a728 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800a722:	2310      	movs	r3, #16
 800a724:	73bb      	strb	r3, [r7, #14]
 800a726:	e001      	b.n	800a72c <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800a728:	2301      	movs	r3, #1
 800a72a:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800a72c:	7bbb      	ldrb	r3, [r7, #14]
 800a72e:	461a      	mov	r2, r3
 800a730:	2184      	movs	r1, #132	@ 0x84
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f003 fbb4 	bl	800dea0 <VL53L0X_WrByte>
 800a738:	4603      	mov	r3, r0
 800a73a:	73fb      	strb	r3, [r7, #15]
 800a73c:	e0f1      	b.n	800a922 <VL53L0X_SetGpioConfig+0x236>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800a73e:	78bb      	ldrb	r3, [r7, #2]
 800a740:	2b15      	cmp	r3, #21
 800a742:	f040 8097 	bne.w	800a874 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a746:	2201      	movs	r2, #1
 800a748:	21ff      	movs	r1, #255	@ 0xff
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f003 fba8 	bl	800dea0 <VL53L0X_WrByte>
 800a750:	4603      	mov	r3, r0
 800a752:	461a      	mov	r2, r3
 800a754:	7bfb      	ldrb	r3, [r7, #15]
 800a756:	4313      	orrs	r3, r2
 800a758:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a75a:	2200      	movs	r2, #0
 800a75c:	2100      	movs	r1, #0
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f003 fb9e 	bl	800dea0 <VL53L0X_WrByte>
 800a764:	4603      	mov	r3, r0
 800a766:	461a      	mov	r2, r3
 800a768:	7bfb      	ldrb	r3, [r7, #15]
 800a76a:	4313      	orrs	r3, r2
 800a76c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a76e:	2200      	movs	r2, #0
 800a770:	21ff      	movs	r1, #255	@ 0xff
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f003 fb94 	bl	800dea0 <VL53L0X_WrByte>
 800a778:	4603      	mov	r3, r0
 800a77a:	461a      	mov	r2, r3
 800a77c:	7bfb      	ldrb	r3, [r7, #15]
 800a77e:	4313      	orrs	r3, r2
 800a780:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a782:	2201      	movs	r2, #1
 800a784:	2180      	movs	r1, #128	@ 0x80
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f003 fb8a 	bl	800dea0 <VL53L0X_WrByte>
 800a78c:	4603      	mov	r3, r0
 800a78e:	461a      	mov	r2, r3
 800a790:	7bfb      	ldrb	r3, [r7, #15]
 800a792:	4313      	orrs	r3, r2
 800a794:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800a796:	2202      	movs	r2, #2
 800a798:	2185      	movs	r1, #133	@ 0x85
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f003 fb80 	bl	800dea0 <VL53L0X_WrByte>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	7bfb      	ldrb	r3, [r7, #15]
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800a7aa:	2204      	movs	r2, #4
 800a7ac:	21ff      	movs	r1, #255	@ 0xff
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f003 fb76 	bl	800dea0 <VL53L0X_WrByte>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800a7be:	2200      	movs	r2, #0
 800a7c0:	21cd      	movs	r1, #205	@ 0xcd
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f003 fb6c 	bl	800dea0 <VL53L0X_WrByte>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	7bfb      	ldrb	r3, [r7, #15]
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800a7d2:	2211      	movs	r2, #17
 800a7d4:	21cc      	movs	r1, #204	@ 0xcc
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f003 fb62 	bl	800dea0 <VL53L0X_WrByte>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	461a      	mov	r2, r3
 800a7e0:	7bfb      	ldrb	r3, [r7, #15]
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800a7e6:	2207      	movs	r2, #7
 800a7e8:	21ff      	movs	r1, #255	@ 0xff
 800a7ea:	6878      	ldr	r0, [r7, #4]
 800a7ec:	f003 fb58 	bl	800dea0 <VL53L0X_WrByte>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	7bfb      	ldrb	r3, [r7, #15]
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	21be      	movs	r1, #190	@ 0xbe
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f003 fb4e 	bl	800dea0 <VL53L0X_WrByte>
 800a804:	4603      	mov	r3, r0
 800a806:	461a      	mov	r2, r3
 800a808:	7bfb      	ldrb	r3, [r7, #15]
 800a80a:	4313      	orrs	r3, r2
 800a80c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800a80e:	2206      	movs	r2, #6
 800a810:	21ff      	movs	r1, #255	@ 0xff
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f003 fb44 	bl	800dea0 <VL53L0X_WrByte>
 800a818:	4603      	mov	r3, r0
 800a81a:	461a      	mov	r2, r3
 800a81c:	7bfb      	ldrb	r3, [r7, #15]
 800a81e:	4313      	orrs	r3, r2
 800a820:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800a822:	2209      	movs	r2, #9
 800a824:	21cc      	movs	r1, #204	@ 0xcc
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f003 fb3a 	bl	800dea0 <VL53L0X_WrByte>
 800a82c:	4603      	mov	r3, r0
 800a82e:	461a      	mov	r2, r3
 800a830:	7bfb      	ldrb	r3, [r7, #15]
 800a832:	4313      	orrs	r3, r2
 800a834:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a836:	2200      	movs	r2, #0
 800a838:	21ff      	movs	r1, #255	@ 0xff
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f003 fb30 	bl	800dea0 <VL53L0X_WrByte>
 800a840:	4603      	mov	r3, r0
 800a842:	461a      	mov	r2, r3
 800a844:	7bfb      	ldrb	r3, [r7, #15]
 800a846:	4313      	orrs	r3, r2
 800a848:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a84a:	2201      	movs	r2, #1
 800a84c:	21ff      	movs	r1, #255	@ 0xff
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f003 fb26 	bl	800dea0 <VL53L0X_WrByte>
 800a854:	4603      	mov	r3, r0
 800a856:	461a      	mov	r2, r3
 800a858:	7bfb      	ldrb	r3, [r7, #15]
 800a85a:	4313      	orrs	r3, r2
 800a85c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a85e:	2200      	movs	r2, #0
 800a860:	2100      	movs	r1, #0
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f003 fb1c 	bl	800dea0 <VL53L0X_WrByte>
 800a868:	4603      	mov	r3, r0
 800a86a:	461a      	mov	r2, r3
 800a86c:	7bfb      	ldrb	r3, [r7, #15]
 800a86e:	4313      	orrs	r3, r2
 800a870:	73fb      	strb	r3, [r7, #15]
 800a872:	e056      	b.n	800a922 <VL53L0X_SetGpioConfig+0x236>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800a874:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d120      	bne.n	800a8be <VL53L0X_SetGpioConfig+0x1d2>
			switch (Functionality) {
 800a87c:	787b      	ldrb	r3, [r7, #1]
 800a87e:	2b04      	cmp	r3, #4
 800a880:	d81b      	bhi.n	800a8ba <VL53L0X_SetGpioConfig+0x1ce>
 800a882:	a201      	add	r2, pc, #4	@ (adr r2, 800a888 <VL53L0X_SetGpioConfig+0x19c>)
 800a884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a888:	0800a89d 	.word	0x0800a89d
 800a88c:	0800a8a3 	.word	0x0800a8a3
 800a890:	0800a8a9 	.word	0x0800a8a9
 800a894:	0800a8af 	.word	0x0800a8af
 800a898:	0800a8b5 	.word	0x0800a8b5
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800a89c:	2300      	movs	r3, #0
 800a89e:	73bb      	strb	r3, [r7, #14]
				break;
 800a8a0:	e00d      	b.n	800a8be <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	73bb      	strb	r3, [r7, #14]
				break;
 800a8a6:	e00a      	b.n	800a8be <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800a8a8:	2302      	movs	r3, #2
 800a8aa:	73bb      	strb	r3, [r7, #14]
				break;
 800a8ac:	e007      	b.n	800a8be <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800a8ae:	2303      	movs	r3, #3
 800a8b0:	73bb      	strb	r3, [r7, #14]
				break;
 800a8b2:	e004      	b.n	800a8be <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800a8b4:	2304      	movs	r3, #4
 800a8b6:	73bb      	strb	r3, [r7, #14]
				break;
 800a8b8:	e001      	b.n	800a8be <VL53L0X_SetGpioConfig+0x1d2>
			default:
				Status =
 800a8ba:	23f5      	movs	r3, #245	@ 0xf5
 800a8bc:	73fb      	strb	r3, [r7, #15]
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}

		if (Status == VL53L0X_ERROR_NONE)
 800a8be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d107      	bne.n	800a8d6 <VL53L0X_SetGpioConfig+0x1ea>
			Status = VL53L0X_WrByte(Dev,
 800a8c6:	7bbb      	ldrb	r3, [r7, #14]
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	210a      	movs	r1, #10
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f003 fae7 	bl	800dea0 <VL53L0X_WrByte>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800a8d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d10f      	bne.n	800a8fe <VL53L0X_SetGpioConfig+0x212>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800a8de:	7e3b      	ldrb	r3, [r7, #24]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d102      	bne.n	800a8ea <VL53L0X_SetGpioConfig+0x1fe>
				data = 0;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	73bb      	strb	r3, [r7, #14]
 800a8e8:	e001      	b.n	800a8ee <VL53L0X_SetGpioConfig+0x202>
			else
				data = (uint8_t)(1 << 4);
 800a8ea:	2310      	movs	r3, #16
 800a8ec:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800a8ee:	7bbb      	ldrb	r3, [r7, #14]
 800a8f0:	22ef      	movs	r2, #239	@ 0xef
 800a8f2:	2184      	movs	r1, #132	@ 0x84
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	f003 fb21 	bl	800df3c <VL53L0X_UpdateByte>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800a8fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d103      	bne.n	800a90e <VL53L0X_SetGpioConfig+0x222>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	787a      	ldrb	r2, [r7, #1]
 800a90a:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800a90e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d105      	bne.n	800a922 <VL53L0X_SetGpioConfig+0x236>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800a916:	2100      	movs	r1, #0
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f000 f83d 	bl	800a998 <VL53L0X_ClearInterruptMask>
 800a91e:	4603      	mov	r3, r0
 800a920:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a922:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a926:	4618      	mov	r0, r3
 800a928:	3710      	adds	r7, #16
 800a92a:	46bd      	mov	sp, r7
 800a92c:	bd80      	pop	{r7, pc}
 800a92e:	bf00      	nop

0800a930 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b086      	sub	sp, #24
 800a934:	af00      	add	r7, sp, #0
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	607a      	str	r2, [r7, #4]
 800a93a:	603b      	str	r3, [r7, #0]
 800a93c:	460b      	mov	r3, r1
 800a93e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a940:	2300      	movs	r3, #0
 800a942:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800a944:	f107 0314 	add.w	r3, r7, #20
 800a948:	461a      	mov	r2, r3
 800a94a:	210e      	movs	r1, #14
 800a94c:	68f8      	ldr	r0, [r7, #12]
 800a94e:	f003 fb53 	bl	800dff8 <VL53L0X_RdWord>
 800a952:	4603      	mov	r3, r0
 800a954:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800a956:	8abb      	ldrh	r3, [r7, #20]
 800a958:	045a      	lsls	r2, r3, #17
 800a95a:	4b0e      	ldr	r3, [pc, #56]	@ (800a994 <VL53L0X_GetInterruptThresholds+0x64>)
 800a95c:	4013      	ands	r3, r2
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800a962:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d10e      	bne.n	800a988 <VL53L0X_GetInterruptThresholds+0x58>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800a96a:	f107 0314 	add.w	r3, r7, #20
 800a96e:	461a      	mov	r2, r3
 800a970:	210c      	movs	r1, #12
 800a972:	68f8      	ldr	r0, [r7, #12]
 800a974:	f003 fb40 	bl	800dff8 <VL53L0X_RdWord>
 800a978:	4603      	mov	r3, r0
 800a97a:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800a97c:	8abb      	ldrh	r3, [r7, #20]
 800a97e:	045a      	lsls	r2, r3, #17
 800a980:	4b04      	ldr	r3, [pc, #16]	@ (800a994 <VL53L0X_GetInterruptThresholds+0x64>)
 800a982:	4013      	ands	r3, r2
		*pThresholdHigh =
 800a984:	683a      	ldr	r2, [r7, #0]
 800a986:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a988:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3718      	adds	r7, #24
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}
 800a994:	1ffe0000 	.word	0x1ffe0000

0800a998 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	210b      	movs	r1, #11
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f003 fa76 	bl	800dea0 <VL53L0X_WrByte>
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	210b      	movs	r1, #11
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f003 fa6f 	bl	800dea0 <VL53L0X_WrByte>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	7bfb      	ldrb	r3, [r7, #15]
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800a9cc:	f107 030d 	add.w	r3, r7, #13
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	2113      	movs	r1, #19
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f003 fae5 	bl	800dfa4 <VL53L0X_RdByte>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	461a      	mov	r2, r3
 800a9de:	7bfb      	ldrb	r3, [r7, #15]
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800a9e4:	7bbb      	ldrb	r3, [r7, #14]
 800a9e6:	3301      	adds	r3, #1
 800a9e8:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800a9ea:	7b7b      	ldrb	r3, [r7, #13]
 800a9ec:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d006      	beq.n	800aa02 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800a9f4:	7bbb      	ldrb	r3, [r7, #14]
 800a9f6:	2b02      	cmp	r3, #2
 800a9f8:	d803      	bhi.n	800aa02 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800a9fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d0d3      	beq.n	800a9aa <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800aa02:	7bbb      	ldrb	r3, [r7, #14]
 800aa04:	2b02      	cmp	r3, #2
 800aa06:	d901      	bls.n	800aa0c <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800aa08:	23f4      	movs	r3, #244	@ 0xf4
 800aa0a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800aa0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3710      	adds	r7, #16
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa22:	2300      	movs	r3, #0
 800aa24:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800aa26:	f107 030e 	add.w	r3, r7, #14
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	2113      	movs	r1, #19
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f003 fab8 	bl	800dfa4 <VL53L0X_RdByte>
 800aa34:	4603      	mov	r3, r0
 800aa36:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800aa38:	7bbb      	ldrb	r3, [r7, #14]
 800aa3a:	f003 0207 	and.w	r2, r3, #7
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800aa42:	7bbb      	ldrb	r3, [r7, #14]
 800aa44:	f003 0318 	and.w	r3, r3, #24
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d001      	beq.n	800aa50 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800aa4c:	23fa      	movs	r3, #250	@ 0xfa
 800aa4e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800aa50:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3710      	adds	r7, #16
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b086      	sub	sp, #24
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	60f8      	str	r0, [r7, #12]
 800aa64:	60b9      	str	r1, [r7, #8]
 800aa66:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800aa6c:	687a      	ldr	r2, [r7, #4]
 800aa6e:	68b9      	ldr	r1, [r7, #8]
 800aa70:	68f8      	ldr	r0, [r7, #12]
 800aa72:	f000 fa03 	bl	800ae7c <VL53L0X_perform_ref_spad_management>
 800aa76:	4603      	mov	r3, r0
 800aa78:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800aa7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3718      	adds	r7, #24
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b084      	sub	sp, #16
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
 800aa8e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa90:	2300      	movs	r3, #0
 800aa92:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800aa94:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800aa98:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800aa9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aa9e:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800aaa0:	f107 0308 	add.w	r3, r7, #8
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	2128      	movs	r1, #40	@ 0x28
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f003 faa5 	bl	800dff8 <VL53L0X_RdWord>
 800aaae:	4603      	mov	r3, r0
 800aab0:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800aab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d11e      	bne.n	800aaf8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800aaba:	893b      	ldrh	r3, [r7, #8]
 800aabc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aac0:	b29b      	uxth	r3, r3
 800aac2:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800aac4:	893b      	ldrh	r3, [r7, #8]
 800aac6:	461a      	mov	r2, r3
 800aac8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800aacc:	429a      	cmp	r2, r3
 800aace:	dd0b      	ble.n	800aae8 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800aad0:	893a      	ldrh	r2, [r7, #8]
 800aad2:	897b      	ldrh	r3, [r7, #10]
 800aad4:	1ad3      	subs	r3, r2, r3
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	b21b      	sxth	r3, r3
 800aada:	461a      	mov	r2, r3
					* 250;
 800aadc:	23fa      	movs	r3, #250	@ 0xfa
 800aade:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	601a      	str	r2, [r3, #0]
 800aae6:	e007      	b.n	800aaf8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800aae8:	893b      	ldrh	r3, [r7, #8]
 800aaea:	b21b      	sxth	r3, r3
 800aaec:	461a      	mov	r2, r3
 800aaee:	23fa      	movs	r3, #250	@ 0xfa
 800aaf0:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800aaf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3710      	adds	r7, #16
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b08b      	sub	sp, #44	@ 0x2c
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	607a      	str	r2, [r7, #4]
 800ab10:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800ab12:	2308      	movs	r3, #8
 800ab14:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800ab16:	2300      	movs	r3, #0
 800ab18:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab20:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	69bb      	ldr	r3, [r7, #24]
 800ab26:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab2a:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	69ba      	ldr	r2, [r7, #24]
 800ab30:	fbb3 f2f2 	udiv	r2, r3, r2
 800ab34:	69b9      	ldr	r1, [r7, #24]
 800ab36:	fb01 f202 	mul.w	r2, r1, r2
 800ab3a:	1a9b      	subs	r3, r3, r2
 800ab3c:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab42:	e030      	b.n	800aba6 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800ab44:	2300      	movs	r3, #0
 800ab46:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800ab48:	68fa      	ldr	r2, [r7, #12]
 800ab4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab4c:	4413      	add	r3, r2
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800ab52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	429a      	cmp	r2, r3
 800ab58:	d11e      	bne.n	800ab98 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800ab5a:	7ffa      	ldrb	r2, [r7, #31]
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	fa42 f303 	asr.w	r3, r2, r3
 800ab62:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800ab68:	e016      	b.n	800ab98 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800ab6a:	7ffb      	ldrb	r3, [r7, #31]
 800ab6c:	f003 0301 	and.w	r3, r3, #1
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00b      	beq.n	800ab8c <get_next_good_spad+0x88>
				success = 1;
 800ab74:	2301      	movs	r3, #1
 800ab76:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800ab78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab7a:	69ba      	ldr	r2, [r7, #24]
 800ab7c:	fb03 f202 	mul.w	r2, r3, r2
 800ab80:	6a3b      	ldr	r3, [r7, #32]
 800ab82:	4413      	add	r3, r2
 800ab84:	461a      	mov	r2, r3
 800ab86:	683b      	ldr	r3, [r7, #0]
 800ab88:	601a      	str	r2, [r3, #0]
				break;
 800ab8a:	e009      	b.n	800aba0 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800ab8c:	7ffb      	ldrb	r3, [r7, #31]
 800ab8e:	085b      	lsrs	r3, r3, #1
 800ab90:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800ab92:	6a3b      	ldr	r3, [r7, #32]
 800ab94:	3301      	adds	r3, #1
 800ab96:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800ab98:	6a3a      	ldr	r2, [r7, #32]
 800ab9a:	69bb      	ldr	r3, [r7, #24]
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d3e4      	bcc.n	800ab6a <get_next_good_spad+0x66>
				coarseIndex++) {
 800aba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aba2:	3301      	adds	r3, #1
 800aba4:	627b      	str	r3, [r7, #36]	@ 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800aba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d202      	bcs.n	800abb4 <get_next_good_spad+0xb0>
 800abae:	7fbb      	ldrb	r3, [r7, #30]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d0c7      	beq.n	800ab44 <get_next_good_spad+0x40>
		}
	}
}
 800abb4:	bf00      	nop
 800abb6:	372c      	adds	r7, #44	@ 0x2c
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr

0800abc0 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b085      	sub	sp, #20
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800abc8:	2301      	movs	r3, #1
 800abca:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	099b      	lsrs	r3, r3, #6
 800abd0:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800abd2:	4a07      	ldr	r2, [pc, #28]	@ (800abf0 <is_aperture+0x30>)
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d101      	bne.n	800abe2 <is_aperture+0x22>
		isAperture = 0;
 800abde:	2300      	movs	r3, #0
 800abe0:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800abe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3714      	adds	r7, #20
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr
 800abf0:	200002bc 	.word	0x200002bc

0800abf4 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b089      	sub	sp, #36	@ 0x24
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	60f8      	str	r0, [r7, #12]
 800abfc:	60b9      	str	r1, [r7, #8]
 800abfe:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ac00:	2300      	movs	r3, #0
 800ac02:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800ac04:	2308      	movs	r3, #8
 800ac06:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	69bb      	ldr	r3, [r7, #24]
 800ac0c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac10:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	69ba      	ldr	r2, [r7, #24]
 800ac16:	fbb3 f2f2 	udiv	r2, r3, r2
 800ac1a:	69b9      	ldr	r1, [r7, #24]
 800ac1c:	fb01 f202 	mul.w	r2, r1, r2
 800ac20:	1a9b      	subs	r3, r3, r2
 800ac22:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800ac24:	697a      	ldr	r2, [r7, #20]
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d302      	bcc.n	800ac32 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800ac2c:	23ce      	movs	r3, #206	@ 0xce
 800ac2e:	77fb      	strb	r3, [r7, #31]
 800ac30:	e010      	b.n	800ac54 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800ac32:	68fa      	ldr	r2, [r7, #12]
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	4413      	add	r3, r2
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	b25a      	sxtb	r2, r3
 800ac3c:	2101      	movs	r1, #1
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	fa01 f303 	lsl.w	r3, r1, r3
 800ac44:	b25b      	sxtb	r3, r3
 800ac46:	4313      	orrs	r3, r2
 800ac48:	b259      	sxtb	r1, r3
 800ac4a:	68fa      	ldr	r2, [r7, #12]
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	4413      	add	r3, r2
 800ac50:	b2ca      	uxtb	r2, r1
 800ac52:	701a      	strb	r2, [r3, #0]

	return status;
 800ac54:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3724      	adds	r7, #36	@ 0x24
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr

0800ac64 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800ac6e:	2306      	movs	r3, #6
 800ac70:	683a      	ldr	r2, [r7, #0]
 800ac72:	21b0      	movs	r1, #176	@ 0xb0
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f003 f8b7 	bl	800dde8 <VL53L0X_WriteMulti>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800ac7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3710      	adds	r7, #16
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}

0800ac8a <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800ac8a:	b580      	push	{r7, lr}
 800ac8c:	b084      	sub	sp, #16
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	6078      	str	r0, [r7, #4]
 800ac92:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800ac94:	2306      	movs	r3, #6
 800ac96:	683a      	ldr	r2, [r7, #0]
 800ac98:	21b0      	movs	r1, #176	@ 0xb0
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f003 f8d4 	bl	800de48 <VL53L0X_ReadMulti>
 800aca0:	4603      	mov	r3, r0
 800aca2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800aca4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3710      	adds	r7, #16
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b08c      	sub	sp, #48	@ 0x30
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	60f8      	str	r0, [r7, #12]
 800acb8:	607a      	str	r2, [r7, #4]
 800acba:	603b      	str	r3, [r7, #0]
 800acbc:	460b      	mov	r3, r1
 800acbe:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800acc0:	2300      	movs	r3, #0
 800acc2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800acc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800acc8:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800acca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800accc:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800acce:	2300      	movs	r3, #0
 800acd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800acd2:	e02b      	b.n	800ad2c <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800acd4:	f107 031c 	add.w	r3, r7, #28
 800acd8:	6a3a      	ldr	r2, [r7, #32]
 800acda:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f7ff ff11 	bl	800ab04 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800ace2:	69fb      	ldr	r3, [r7, #28]
 800ace4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ace8:	d103      	bne.n	800acf2 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800acea:	23ce      	movs	r3, #206	@ 0xce
 800acec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 800acf0:	e020      	b.n	800ad34 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800acf2:	69fb      	ldr	r3, [r7, #28]
 800acf4:	461a      	mov	r2, r3
 800acf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acf8:	4413      	add	r3, r2
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7ff ff60 	bl	800abc0 <is_aperture>
 800ad00:	4603      	mov	r3, r0
 800ad02:	461a      	mov	r2, r3
 800ad04:	7afb      	ldrb	r3, [r7, #11]
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d003      	beq.n	800ad12 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800ad0a:	23ce      	movs	r3, #206	@ 0xce
 800ad0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 800ad10:	e010      	b.n	800ad34 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800ad12:	69fb      	ldr	r3, [r7, #28]
 800ad14:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800ad16:	6a3a      	ldr	r2, [r7, #32]
 800ad18:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800ad1a:	6838      	ldr	r0, [r7, #0]
 800ad1c:	f7ff ff6a 	bl	800abf4 <enable_spad_bit>
		currentSpad++;
 800ad20:	6a3b      	ldr	r3, [r7, #32]
 800ad22:	3301      	adds	r3, #1
 800ad24:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800ad26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad28:	3301      	adds	r3, #1
 800ad2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ad2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d3cf      	bcc.n	800acd4 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800ad34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad36:	6a3a      	ldr	r2, [r7, #32]
 800ad38:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800ad3a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d106      	bne.n	800ad50 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800ad42:	6839      	ldr	r1, [r7, #0]
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	f7ff ff8d 	bl	800ac64 <set_ref_spad_map>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800ad50:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d121      	bne.n	800ad9c <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800ad58:	f107 0314 	add.w	r3, r7, #20
 800ad5c:	4619      	mov	r1, r3
 800ad5e:	68f8      	ldr	r0, [r7, #12]
 800ad60:	f7ff ff93 	bl	800ac8a <get_ref_spad_map>
 800ad64:	4603      	mov	r3, r0
 800ad66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		i = 0;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800ad6e:	e011      	b.n	800ad94 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800ad70:	683a      	ldr	r2, [r7, #0]
 800ad72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad74:	4413      	add	r3, r2
 800ad76:	781a      	ldrb	r2, [r3, #0]
 800ad78:	f107 0114 	add.w	r1, r7, #20
 800ad7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad7e:	440b      	add	r3, r1
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d003      	beq.n	800ad8e <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800ad86:	23ce      	movs	r3, #206	@ 0xce
 800ad88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				break;
 800ad8c:	e006      	b.n	800ad9c <enable_ref_spads+0xec>
			}
			i++;
 800ad8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad90:	3301      	adds	r3, #1
 800ad92:	627b      	str	r3, [r7, #36]	@ 0x24
		while (i < size) {
 800ad94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d3e9      	bcc.n	800ad70 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800ad9c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3730      	adds	r7, #48	@ 0x30
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b08a      	sub	sp, #40	@ 0x28
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
 800adb0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800adb2:	2300      	movs	r3, #0
 800adb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800adb8:	2300      	movs	r3, #0
 800adba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800adc4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800adc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d107      	bne.n	800ade0 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800add0:	22c0      	movs	r2, #192	@ 0xc0
 800add2:	2101      	movs	r1, #1
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f003 f863 	bl	800dea0 <VL53L0X_WrByte>
 800adda:	4603      	mov	r3, r0
 800addc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800ade0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d108      	bne.n	800adfa <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800ade8:	f107 0308 	add.w	r3, r7, #8
 800adec:	4619      	mov	r1, r3
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f7ff fc4c 	bl	800a68c <VL53L0X_PerformSingleRangingMeasurement>
 800adf4:	4603      	mov	r3, r0
 800adf6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800adfa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d107      	bne.n	800ae12 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ae02:	2201      	movs	r2, #1
 800ae04:	21ff      	movs	r1, #255	@ 0xff
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f003 f84a 	bl	800dea0 <VL53L0X_WrByte>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE)
 800ae12:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d107      	bne.n	800ae2a <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800ae1a:	683a      	ldr	r2, [r7, #0]
 800ae1c:	21b6      	movs	r1, #182	@ 0xb6
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f003 f8ea 	bl	800dff8 <VL53L0X_RdWord>
 800ae24:	4603      	mov	r3, r0
 800ae26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800ae2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d107      	bne.n	800ae42 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ae32:	2200      	movs	r2, #0
 800ae34:	21ff      	movs	r1, #255	@ 0xff
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f003 f832 	bl	800dea0 <VL53L0X_WrByte>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800ae42:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d112      	bne.n	800ae70 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800ae4a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ae4e:	461a      	mov	r2, r3
 800ae50:	2101      	movs	r1, #1
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f003 f824 	bl	800dea0 <VL53L0X_WrByte>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800ae5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d104      	bne.n	800ae70 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ae6c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
	}

	return status;
 800ae70:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3728      	adds	r7, #40	@ 0x28
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800ae7c:	b590      	push	{r4, r7, lr}
 800ae7e:	b09d      	sub	sp, #116	@ 0x74
 800ae80:	af06      	add	r7, sp, #24
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	60b9      	str	r1, [r7, #8]
 800ae86:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800ae8e:	23b4      	movs	r3, #180	@ 0xb4
 800ae90:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	uint32_t minimumSpadCount = 3;
 800ae94:	2303      	movs	r3, #3
 800ae96:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t maxSpadCount = 44;
 800ae98:	232c      	movs	r3, #44	@ 0x2c
 800ae9a:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t currentSpadIndex = 0;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	653b      	str	r3, [r7, #80]	@ 0x50
	uint32_t lastSpadIndex = 0;
 800aea0:	2300      	movs	r3, #0
 800aea2:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800aea4:	2300      	movs	r3, #0
 800aea6:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800aea8:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800aeac:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t index = 0;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint32_t spadArraySize = 6;
 800aeb6:	2306      	movs	r3, #6
 800aeb8:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t signalRateDiff = 0;
 800aeba:	2300      	movs	r3, #0
 800aebc:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t lastSignalRateDiff = 0;
 800aebe:	2300      	movs	r3, #0
 800aec0:	647b      	str	r3, [r7, #68]	@ 0x44
	uint8_t complete = 0;
 800aec2:	2300      	movs	r3, #0
 800aec4:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	uint8_t VhvSettings = 0;
 800aec8:	2300      	movs	r3, #0
 800aeca:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800aecc:	2300      	movs	r3, #0
 800aece:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800aed0:	2300      	movs	r3, #0
 800aed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800aed4:	2300      	movs	r3, #0
 800aed6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f8b3 313c 	ldrh.w	r3, [r3, #316]	@ 0x13c
 800aee0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800aee2:	2300      	movs	r3, #0
 800aee4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aee6:	e009      	b.n	800aefc <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800aee8:	68fa      	ldr	r2, [r7, #12]
 800aeea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aeec:	4413      	add	r3, r2
 800aeee:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800aef2:	2200      	movs	r2, #0
 800aef4:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800aef6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aef8:	3301      	adds	r3, #1
 800aefa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aefc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aefe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af00:	429a      	cmp	r2, r3
 800af02:	d3f1      	bcc.n	800aee8 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800af04:	2201      	movs	r2, #1
 800af06:	21ff      	movs	r1, #255	@ 0xff
 800af08:	68f8      	ldr	r0, [r7, #12]
 800af0a:	f002 ffc9 	bl	800dea0 <VL53L0X_WrByte>
 800af0e:	4603      	mov	r3, r0
 800af10:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800af14:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d107      	bne.n	800af2c <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800af1c:	2200      	movs	r2, #0
 800af1e:	214f      	movs	r1, #79	@ 0x4f
 800af20:	68f8      	ldr	r0, [r7, #12]
 800af22:	f002 ffbd 	bl	800dea0 <VL53L0X_WrByte>
 800af26:	4603      	mov	r3, r0
 800af28:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800af2c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800af30:	2b00      	cmp	r3, #0
 800af32:	d107      	bne.n	800af44 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800af34:	222c      	movs	r2, #44	@ 0x2c
 800af36:	214e      	movs	r1, #78	@ 0x4e
 800af38:	68f8      	ldr	r0, [r7, #12]
 800af3a:	f002 ffb1 	bl	800dea0 <VL53L0X_WrByte>
 800af3e:	4603      	mov	r3, r0
 800af40:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800af44:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d107      	bne.n	800af5c <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800af4c:	2200      	movs	r2, #0
 800af4e:	21ff      	movs	r1, #255	@ 0xff
 800af50:	68f8      	ldr	r0, [r7, #12]
 800af52:	f002 ffa5 	bl	800dea0 <VL53L0X_WrByte>
 800af56:	4603      	mov	r3, r0
 800af58:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800af5c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800af60:	2b00      	cmp	r3, #0
 800af62:	d109      	bne.n	800af78 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800af64:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800af68:	461a      	mov	r2, r3
 800af6a:	21b6      	movs	r1, #182	@ 0xb6
 800af6c:	68f8      	ldr	r0, [r7, #12]
 800af6e:	f002 ff97 	bl	800dea0 <VL53L0X_WrByte>
 800af72:	4603      	mov	r3, r0
 800af74:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800af78:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d107      	bne.n	800af90 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800af80:	2200      	movs	r2, #0
 800af82:	2180      	movs	r1, #128	@ 0x80
 800af84:	68f8      	ldr	r0, [r7, #12]
 800af86:	f002 ff8b 	bl	800dea0 <VL53L0X_WrByte>
 800af8a:	4603      	mov	r3, r0
 800af8c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800af90:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800af94:	2b00      	cmp	r3, #0
 800af96:	d10a      	bne.n	800afae <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800af98:	f107 0210 	add.w	r2, r7, #16
 800af9c:	f107 0111 	add.w	r1, r7, #17
 800afa0:	2300      	movs	r3, #0
 800afa2:	68f8      	ldr	r0, [r7, #12]
 800afa4:	f000 fbbb 	bl	800b71e <VL53L0X_perform_ref_calibration>
 800afa8:	4603      	mov	r3, r0
 800afaa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800afae:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d121      	bne.n	800affa <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800afb6:	2300      	movs	r3, #0
 800afb8:	653b      	str	r3, [r7, #80]	@ 0x50
		lastSpadIndex = currentSpadIndex;
 800afba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800afbc:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800afbe:	2300      	movs	r3, #0
 800afc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
		Status = enable_ref_spads(Dev,
 800afc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afc4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f503 7492 	add.w	r4, r3, #292	@ 0x124
		Status = enable_ref_spads(Dev,
 800afd2:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800afd6:	f107 0218 	add.w	r2, r7, #24
 800afda:	9204      	str	r2, [sp, #16]
 800afdc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800afde:	9203      	str	r2, [sp, #12]
 800afe0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800afe2:	9202      	str	r2, [sp, #8]
 800afe4:	9301      	str	r3, [sp, #4]
 800afe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afe8:	9300      	str	r3, [sp, #0]
 800afea:	4623      	mov	r3, r4
 800afec:	4602      	mov	r2, r0
 800afee:	68f8      	ldr	r0, [r7, #12]
 800aff0:	f7ff fe5e 	bl	800acb0 <enable_ref_spads>
 800aff4:	4603      	mov	r3, r0
 800aff6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800affa:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800affe:	2b00      	cmp	r3, #0
 800b000:	d174      	bne.n	800b0ec <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800b002:	69bb      	ldr	r3, [r7, #24]
 800b004:	653b      	str	r3, [r7, #80]	@ 0x50

		Status = perform_ref_signal_measurement(Dev,
 800b006:	f107 0312 	add.w	r3, r7, #18
 800b00a:	4619      	mov	r1, r3
 800b00c:	68f8      	ldr	r0, [r7, #12]
 800b00e:	f7ff fecb 	bl	800ada8 <perform_ref_signal_measurement>
 800b012:	4603      	mov	r3, r0
 800b014:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800b018:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d161      	bne.n	800b0e4 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800b020:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800b022:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b024:	429a      	cmp	r2, r3
 800b026:	d25d      	bcs.n	800b0e4 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800b028:	2300      	movs	r3, #0
 800b02a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b02c:	e009      	b.n	800b042 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800b02e:	68fa      	ldr	r2, [r7, #12]
 800b030:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b032:	4413      	add	r3, r2
 800b034:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800b038:	2200      	movs	r2, #0
 800b03a:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800b03c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b03e:	3301      	adds	r3, #1
 800b040:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b042:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b046:	429a      	cmp	r2, r3
 800b048:	d3f1      	bcc.n	800b02e <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800b04a:	e002      	b.n	800b052 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800b04c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b04e:	3301      	adds	r3, #1
 800b050:	653b      	str	r3, [r7, #80]	@ 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800b052:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800b056:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b058:	4413      	add	r3, r2
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7ff fdb0 	bl	800abc0 <is_aperture>
 800b060:	4603      	mov	r3, r0
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800b062:	2b00      	cmp	r3, #0
 800b064:	d103      	bne.n	800b06e <VL53L0X_perform_ref_spad_management+0x1f2>
 800b066:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d3ee      	bcc.n	800b04c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800b06e:	2301      	movs	r3, #1
 800b070:	64fb      	str	r3, [r7, #76]	@ 0x4c

			Status = enable_ref_spads(Dev,
 800b072:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b074:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f503 7492 	add.w	r4, r3, #292	@ 0x124
			Status = enable_ref_spads(Dev,
 800b082:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800b086:	f107 0218 	add.w	r2, r7, #24
 800b08a:	9204      	str	r2, [sp, #16]
 800b08c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b08e:	9203      	str	r2, [sp, #12]
 800b090:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b092:	9202      	str	r2, [sp, #8]
 800b094:	9301      	str	r3, [sp, #4]
 800b096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b098:	9300      	str	r3, [sp, #0]
 800b09a:	4623      	mov	r3, r4
 800b09c:	4602      	mov	r2, r0
 800b09e:	68f8      	ldr	r0, [r7, #12]
 800b0a0:	f7ff fe06 	bl	800acb0 <enable_ref_spads>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800b0aa:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d11b      	bne.n	800b0ea <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	653b      	str	r3, [r7, #80]	@ 0x50
				Status = perform_ref_signal_measurement(Dev,
 800b0b6:	f107 0312 	add.w	r3, r7, #18
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	68f8      	ldr	r0, [r7, #12]
 800b0be:	f7ff fe73 	bl	800ada8 <perform_ref_signal_measurement>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800b0c8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d10c      	bne.n	800b0ea <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800b0d0:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800b0d2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d208      	bcs.n	800b0ea <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
					refSpadCount_int = minimumSpadCount;
 800b0de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800b0e2:	e002      	b.n	800b0ea <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b0e8:	e000      	b.n	800b0ec <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800b0ea:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800b0ec:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	f040 80af 	bne.w	800b254 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800b0f6:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800b0f8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	f240 80aa 	bls.w	800b254 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800b100:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b102:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		refSpadCount_int	= minimumSpadCount;
 800b106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b108:	63fb      	str	r3, [r7, #60]	@ 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f503 7192 	add.w	r1, r3, #292	@ 0x124
 800b110:	f107 031c 	add.w	r3, r7, #28
 800b114:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b116:	4618      	mov	r0, r3
 800b118:	f003 ff2b 	bl	800ef72 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800b11c:	8a7b      	ldrh	r3, [r7, #18]
 800b11e:	461a      	mov	r2, r3
 800b120:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b122:	1ad3      	subs	r3, r2, r3
 800b124:	2b00      	cmp	r3, #0
 800b126:	bfb8      	it	lt
 800b128:	425b      	neglt	r3, r3
 800b12a:	647b      	str	r3, [r7, #68]	@ 0x44
			targetRefRate);
		complete = 0;
 800b12c:	2300      	movs	r3, #0
 800b12e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

		while (!complete) {
 800b132:	e086      	b.n	800b242 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
			get_next_good_spad(
 800b13a:	f107 0314 	add.w	r3, r7, #20
 800b13e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b140:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b142:	f7ff fcdf 	bl	800ab04 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b14c:	d103      	bne.n	800b156 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b14e:	23ce      	movs	r3, #206	@ 0xce
 800b150:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				break;
 800b154:	e07e      	b.n	800b254 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800b156:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800b15a:	697a      	ldr	r2, [r7, #20]
 800b15c:	4413      	add	r3, r2
 800b15e:	4618      	mov	r0, r3
 800b160:	f7ff fd2e 	bl	800abc0 <is_aperture>
 800b164:	4603      	mov	r3, r0
 800b166:	461a      	mov	r2, r3
 800b168:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d003      	beq.n	800b176 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800b16e:	2301      	movs	r3, #1
 800b170:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
				break;
 800b174:	e06e      	b.n	800b254 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800b176:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b178:	3301      	adds	r3, #1
 800b17a:	63fb      	str	r3, [r7, #60]	@ 0x3c

			currentSpadIndex = nextGoodSpad;
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	653b      	str	r3, [r7, #80]	@ 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f503 7392 	add.w	r3, r3, #292	@ 0x124
			Status = enable_spad_bit(
 800b186:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b188:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7ff fd32 	bl	800abf4 <enable_spad_bit>
 800b190:	4603      	mov	r3, r0
 800b192:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800b196:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d10c      	bne.n	800b1b8 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800b19e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1a0:	3301      	adds	r3, #1
 800b1a2:	653b      	str	r3, [r7, #80]	@ 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f503 7392 	add.w	r3, r3, #292	@ 0x124
				Status = set_ref_spad_map(Dev,
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	68f8      	ldr	r0, [r7, #12]
 800b1ae:	f7ff fd59 	bl	800ac64 <set_ref_spad_map>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800b1b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d146      	bne.n	800b24e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800b1c0:	f107 0312 	add.w	r3, r7, #18
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	68f8      	ldr	r0, [r7, #12]
 800b1c8:	f7ff fdee 	bl	800ada8 <perform_ref_signal_measurement>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800b1d2:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d13b      	bne.n	800b252 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800b1da:	8a7b      	ldrh	r3, [r7, #18]
 800b1dc:	461a      	mov	r2, r3
 800b1de:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b1e0:	1ad3      	subs	r3, r2, r3
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	bfb8      	it	lt
 800b1e6:	425b      	neglt	r3, r3
 800b1e8:	627b      	str	r3, [r7, #36]	@ 0x24

			if (peakSignalRateRef > targetRefRate) {
 800b1ea:	8a7b      	ldrh	r3, [r7, #18]
 800b1ec:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b1ee:	429a      	cmp	r2, r3
 800b1f0:	d21c      	bcs.n	800b22c <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800b1f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1f6:	429a      	cmp	r2, r3
 800b1f8:	d914      	bls.n	800b224 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800b1fa:	f107 031c 	add.w	r3, r7, #28
 800b1fe:	4619      	mov	r1, r3
 800b200:	68f8      	ldr	r0, [r7, #12]
 800b202:	f7ff fd2f 	bl	800ac64 <set_ref_spad_map>
 800b206:	4603      	mov	r3, r0
 800b208:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f503 7392 	add.w	r3, r3, #292	@ 0x124
					memcpy(
 800b212:	f107 011c 	add.w	r1, r7, #28
 800b216:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b218:	4618      	mov	r0, r3
 800b21a:	f003 feaa 	bl	800ef72 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800b21e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b220:	3b01      	subs	r3, #1
 800b222:	63fb      	str	r3, [r7, #60]	@ 0x3c
				}
				complete = 1;
 800b224:	2301      	movs	r3, #1
 800b226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b22a:	e00a      	b.n	800b242 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800b22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b22e:	647b      	str	r3, [r7, #68]	@ 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f503 7192 	add.w	r1, r3, #292	@ 0x124
				memcpy(lastSpadArray,
 800b236:	f107 031c 	add.w	r3, r7, #28
 800b23a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b23c:	4618      	mov	r0, r3
 800b23e:	f003 fe98 	bl	800ef72 <memcpy>
		while (!complete) {
 800b242:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b246:	2b00      	cmp	r3, #0
 800b248:	f43f af74 	beq.w	800b134 <VL53L0X_perform_ref_spad_management+0x2b8>
 800b24c:	e002      	b.n	800b254 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800b24e:	bf00      	nop
 800b250:	e000      	b.n	800b254 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800b252:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b254:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d115      	bne.n	800b288 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b260:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800b268:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2201      	movs	r2, #1
 800b26e:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	b2da      	uxtb	r2, r3
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	781a      	ldrb	r2, [r3, #0]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800b288:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	375c      	adds	r7, #92	@ 0x5c
 800b290:	46bd      	mov	sp, r7
 800b292:	bd90      	pop	{r4, r7, pc}

0800b294 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800b294:	b590      	push	{r4, r7, lr}
 800b296:	b093      	sub	sp, #76	@ 0x4c
 800b298:	af06      	add	r7, sp, #24
 800b29a:	60f8      	str	r0, [r7, #12]
 800b29c:	60b9      	str	r1, [r7, #8]
 800b29e:	4613      	mov	r3, r2
 800b2a0:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t currentSpadIndex = 0;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t startSelect = 0xB4;
 800b2ac:	23b4      	movs	r3, #180	@ 0xb4
 800b2ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t spadArraySize = 6;
 800b2b2:	2306      	movs	r3, #6
 800b2b4:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800b2b6:	232c      	movs	r3, #44	@ 0x2c
 800b2b8:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	21ff      	movs	r1, #255	@ 0xff
 800b2be:	68f8      	ldr	r0, [r7, #12]
 800b2c0:	f002 fdee 	bl	800dea0 <VL53L0X_WrByte>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800b2ca:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d107      	bne.n	800b2e2 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	214f      	movs	r1, #79	@ 0x4f
 800b2d6:	68f8      	ldr	r0, [r7, #12]
 800b2d8:	f002 fde2 	bl	800dea0 <VL53L0X_WrByte>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800b2e2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d107      	bne.n	800b2fa <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800b2ea:	222c      	movs	r2, #44	@ 0x2c
 800b2ec:	214e      	movs	r1, #78	@ 0x4e
 800b2ee:	68f8      	ldr	r0, [r7, #12]
 800b2f0:	f002 fdd6 	bl	800dea0 <VL53L0X_WrByte>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800b2fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d107      	bne.n	800b312 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b302:	2200      	movs	r2, #0
 800b304:	21ff      	movs	r1, #255	@ 0xff
 800b306:	68f8      	ldr	r0, [r7, #12]
 800b308:	f002 fdca 	bl	800dea0 <VL53L0X_WrByte>
 800b30c:	4603      	mov	r3, r0
 800b30e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800b312:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800b316:	2b00      	cmp	r3, #0
 800b318:	d109      	bne.n	800b32e <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800b31a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b31e:	461a      	mov	r2, r3
 800b320:	21b6      	movs	r1, #182	@ 0xb6
 800b322:	68f8      	ldr	r0, [r7, #12]
 800b324:	f002 fdbc 	bl	800dea0 <VL53L0X_WrByte>
 800b328:	4603      	mov	r3, r0
 800b32a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800b32e:	2300      	movs	r3, #0
 800b330:	627b      	str	r3, [r7, #36]	@ 0x24
 800b332:	e009      	b.n	800b348 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800b334:	68fa      	ldr	r2, [r7, #12]
 800b336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b338:	4413      	add	r3, r2
 800b33a:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800b33e:	2200      	movs	r2, #0
 800b340:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800b342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b344:	3301      	adds	r3, #1
 800b346:	627b      	str	r3, [r7, #36]	@ 0x24
 800b348:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b34a:	69fb      	ldr	r3, [r7, #28]
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d3f1      	bcc.n	800b334 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800b350:	79fb      	ldrb	r3, [r7, #7]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d011      	beq.n	800b37a <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800b356:	e002      	b.n	800b35e <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800b358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b35a:	3301      	adds	r3, #1
 800b35c:	62bb      	str	r3, [r7, #40]	@ 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800b35e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800b362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b364:	4413      	add	r3, r2
 800b366:	4618      	mov	r0, r3
 800b368:	f7ff fc2a 	bl	800abc0 <is_aperture>
 800b36c:	4603      	mov	r3, r0
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d103      	bne.n	800b37a <VL53L0X_set_reference_spads+0xe6>
 800b372:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b374:	69bb      	ldr	r3, [r7, #24]
 800b376:	429a      	cmp	r2, r3
 800b378:	d3ee      	bcc.n	800b358 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	f503 7492 	add.w	r4, r3, #292	@ 0x124
	Status = enable_ref_spads(Dev,
 800b386:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b38a:	79f9      	ldrb	r1, [r7, #7]
 800b38c:	f107 0214 	add.w	r2, r7, #20
 800b390:	9204      	str	r2, [sp, #16]
 800b392:	68ba      	ldr	r2, [r7, #8]
 800b394:	9203      	str	r2, [sp, #12]
 800b396:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b398:	9202      	str	r2, [sp, #8]
 800b39a:	9301      	str	r3, [sp, #4]
 800b39c:	69fb      	ldr	r3, [r7, #28]
 800b39e:	9300      	str	r3, [sp, #0]
 800b3a0:	4623      	mov	r3, r4
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	68f8      	ldr	r0, [r7, #12]
 800b3a6:	f7ff fc83 	bl	800acb0 <enable_ref_spads>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800b3b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d10c      	bne.n	800b3d2 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	b2da      	uxtb	r2, r3
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	79fa      	ldrb	r2, [r7, #7]
 800b3ce:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800b3d2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3734      	adds	r7, #52	@ 0x34
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd90      	pop	{r4, r7, pc}

0800b3de <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800b3de:	b580      	push	{r7, lr}
 800b3e0:	b084      	sub	sp, #16
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]
 800b3e6:	460b      	mov	r3, r1
 800b3e8:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b3ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d10a      	bne.n	800b40c <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800b3f6:	78fb      	ldrb	r3, [r7, #3]
 800b3f8:	f043 0301 	orr.w	r3, r3, #1
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	461a      	mov	r2, r3
 800b400:	2100      	movs	r1, #0
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f002 fd4c 	bl	800dea0 <VL53L0X_WrByte>
 800b408:	4603      	mov	r3, r0
 800b40a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800b40c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d104      	bne.n	800b41e <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800b414:	6878      	ldr	r0, [r7, #4]
 800b416:	f000 f9bf 	bl	800b798 <VL53L0X_measurement_poll_for_completion>
 800b41a:	4603      	mov	r3, r0
 800b41c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b41e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d105      	bne.n	800b432 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800b426:	2100      	movs	r1, #0
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f7ff fab5 	bl	800a998 <VL53L0X_ClearInterruptMask>
 800b42e:	4603      	mov	r3, r0
 800b430:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d106      	bne.n	800b448 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800b43a:	2200      	movs	r2, #0
 800b43c:	2100      	movs	r1, #0
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f002 fd2e 	bl	800dea0 <VL53L0X_WrByte>
 800b444:	4603      	mov	r3, r0
 800b446:	73fb      	strb	r3, [r7, #15]

	return Status;
 800b448:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b44c:	4618      	mov	r0, r3
 800b44e:	3710      	adds	r7, #16
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	4608      	mov	r0, r1
 800b45e:	4611      	mov	r1, r2
 800b460:	461a      	mov	r2, r3
 800b462:	4603      	mov	r3, r0
 800b464:	70fb      	strb	r3, [r7, #3]
 800b466:	460b      	mov	r3, r1
 800b468:	70bb      	strb	r3, [r7, #2]
 800b46a:	4613      	mov	r3, r2
 800b46c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b46e:	2300      	movs	r3, #0
 800b470:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800b472:	2300      	movs	r3, #0
 800b474:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b476:	2201      	movs	r2, #1
 800b478:	21ff      	movs	r1, #255	@ 0xff
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f002 fd10 	bl	800dea0 <VL53L0X_WrByte>
 800b480:	4603      	mov	r3, r0
 800b482:	461a      	mov	r2, r3
 800b484:	7bfb      	ldrb	r3, [r7, #15]
 800b486:	4313      	orrs	r3, r2
 800b488:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b48a:	2200      	movs	r2, #0
 800b48c:	2100      	movs	r1, #0
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f002 fd06 	bl	800dea0 <VL53L0X_WrByte>
 800b494:	4603      	mov	r3, r0
 800b496:	461a      	mov	r2, r3
 800b498:	7bfb      	ldrb	r3, [r7, #15]
 800b49a:	4313      	orrs	r3, r2
 800b49c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b49e:	2200      	movs	r2, #0
 800b4a0:	21ff      	movs	r1, #255	@ 0xff
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f002 fcfc 	bl	800dea0 <VL53L0X_WrByte>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	461a      	mov	r2, r3
 800b4ac:	7bfb      	ldrb	r3, [r7, #15]
 800b4ae:	4313      	orrs	r3, r2
 800b4b0:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800b4b2:	78fb      	ldrb	r3, [r7, #3]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d01e      	beq.n	800b4f6 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800b4b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d009      	beq.n	800b4d4 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800b4c0:	69ba      	ldr	r2, [r7, #24]
 800b4c2:	21cb      	movs	r1, #203	@ 0xcb
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f002 fd6d 	bl	800dfa4 <VL53L0X_RdByte>
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	461a      	mov	r2, r3
 800b4ce:	7bfb      	ldrb	r3, [r7, #15]
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800b4d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d02a      	beq.n	800b532 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800b4dc:	f107 030e 	add.w	r3, r7, #14
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	21ee      	movs	r1, #238	@ 0xee
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f002 fd5d 	bl	800dfa4 <VL53L0X_RdByte>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	7bfb      	ldrb	r3, [r7, #15]
 800b4f0:	4313      	orrs	r3, r2
 800b4f2:	73fb      	strb	r3, [r7, #15]
 800b4f4:	e01d      	b.n	800b532 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800b4f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d00a      	beq.n	800b514 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800b4fe:	78bb      	ldrb	r3, [r7, #2]
 800b500:	461a      	mov	r2, r3
 800b502:	21cb      	movs	r1, #203	@ 0xcb
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f002 fccb 	bl	800dea0 <VL53L0X_WrByte>
 800b50a:	4603      	mov	r3, r0
 800b50c:	461a      	mov	r2, r3
 800b50e:	7bfb      	ldrb	r3, [r7, #15]
 800b510:	4313      	orrs	r3, r2
 800b512:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800b514:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d00a      	beq.n	800b532 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800b51c:	787b      	ldrb	r3, [r7, #1]
 800b51e:	2280      	movs	r2, #128	@ 0x80
 800b520:	21ee      	movs	r1, #238	@ 0xee
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f002 fd0a 	bl	800df3c <VL53L0X_UpdateByte>
 800b528:	4603      	mov	r3, r0
 800b52a:	461a      	mov	r2, r3
 800b52c:	7bfb      	ldrb	r3, [r7, #15]
 800b52e:	4313      	orrs	r3, r2
 800b530:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b532:	2201      	movs	r2, #1
 800b534:	21ff      	movs	r1, #255	@ 0xff
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f002 fcb2 	bl	800dea0 <VL53L0X_WrByte>
 800b53c:	4603      	mov	r3, r0
 800b53e:	461a      	mov	r2, r3
 800b540:	7bfb      	ldrb	r3, [r7, #15]
 800b542:	4313      	orrs	r3, r2
 800b544:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800b546:	2201      	movs	r2, #1
 800b548:	2100      	movs	r1, #0
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f002 fca8 	bl	800dea0 <VL53L0X_WrByte>
 800b550:	4603      	mov	r3, r0
 800b552:	461a      	mov	r2, r3
 800b554:	7bfb      	ldrb	r3, [r7, #15]
 800b556:	4313      	orrs	r3, r2
 800b558:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b55a:	2200      	movs	r2, #0
 800b55c:	21ff      	movs	r1, #255	@ 0xff
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f002 fc9e 	bl	800dea0 <VL53L0X_WrByte>
 800b564:	4603      	mov	r3, r0
 800b566:	461a      	mov	r2, r3
 800b568:	7bfb      	ldrb	r3, [r7, #15]
 800b56a:	4313      	orrs	r3, r2
 800b56c:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800b56e:	7bbb      	ldrb	r3, [r7, #14]
 800b570:	f023 0310 	bic.w	r3, r3, #16
 800b574:	b2da      	uxtb	r2, r3
 800b576:	69fb      	ldr	r3, [r7, #28]
 800b578:	701a      	strb	r2, [r3, #0]

	return Status;
 800b57a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3710      	adds	r7, #16
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}

0800b586 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800b586:	b580      	push	{r7, lr}
 800b588:	b08a      	sub	sp, #40	@ 0x28
 800b58a:	af04      	add	r7, sp, #16
 800b58c:	60f8      	str	r0, [r7, #12]
 800b58e:	60b9      	str	r1, [r7, #8]
 800b590:	4611      	mov	r1, r2
 800b592:	461a      	mov	r2, r3
 800b594:	460b      	mov	r3, r1
 800b596:	71fb      	strb	r3, [r7, #7]
 800b598:	4613      	mov	r3, r2
 800b59a:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b59c:	2300      	movs	r3, #0
 800b59e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800b5b0:	79bb      	ldrb	r3, [r7, #6]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d003      	beq.n	800b5be <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800b5bc:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800b5be:	2201      	movs	r2, #1
 800b5c0:	2101      	movs	r1, #1
 800b5c2:	68f8      	ldr	r0, [r7, #12]
 800b5c4:	f002 fc6c 	bl	800dea0 <VL53L0X_WrByte>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800b5cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d105      	bne.n	800b5e0 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800b5d4:	2140      	movs	r1, #64	@ 0x40
 800b5d6:	68f8      	ldr	r0, [r7, #12]
 800b5d8:	f7ff ff01 	bl	800b3de <VL53L0X_perform_single_ref_calibration>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800b5e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d115      	bne.n	800b614 <VL53L0X_perform_vhv_calibration+0x8e>
 800b5e8:	79fb      	ldrb	r3, [r7, #7]
 800b5ea:	2b01      	cmp	r3, #1
 800b5ec:	d112      	bne.n	800b614 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800b5ee:	7d39      	ldrb	r1, [r7, #20]
 800b5f0:	7d7a      	ldrb	r2, [r7, #21]
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	9303      	str	r3, [sp, #12]
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	9302      	str	r3, [sp, #8]
 800b5fa:	f107 0313 	add.w	r3, r7, #19
 800b5fe:	9301      	str	r3, [sp, #4]
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	9300      	str	r3, [sp, #0]
 800b604:	460b      	mov	r3, r1
 800b606:	2101      	movs	r1, #1
 800b608:	68f8      	ldr	r0, [r7, #12]
 800b60a:	f7ff ff23 	bl	800b454 <VL53L0X_ref_calibration_io>
 800b60e:	4603      	mov	r3, r0
 800b610:	75fb      	strb	r3, [r7, #23]
 800b612:	e002      	b.n	800b61a <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	2200      	movs	r2, #0
 800b618:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800b61a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d112      	bne.n	800b648 <VL53L0X_perform_vhv_calibration+0xc2>
 800b622:	79bb      	ldrb	r3, [r7, #6]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d00f      	beq.n	800b648 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b628:	7dbb      	ldrb	r3, [r7, #22]
 800b62a:	461a      	mov	r2, r3
 800b62c:	2101      	movs	r1, #1
 800b62e:	68f8      	ldr	r0, [r7, #12]
 800b630:	f002 fc36 	bl	800dea0 <VL53L0X_WrByte>
 800b634:	4603      	mov	r3, r0
 800b636:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b638:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d103      	bne.n	800b648 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	7dba      	ldrb	r2, [r7, #22]
 800b644:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 800b648:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3718      	adds	r7, #24
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b08a      	sub	sp, #40	@ 0x28
 800b658:	af04      	add	r7, sp, #16
 800b65a:	60f8      	str	r0, [r7, #12]
 800b65c:	60b9      	str	r1, [r7, #8]
 800b65e:	4611      	mov	r1, r2
 800b660:	461a      	mov	r2, r3
 800b662:	460b      	mov	r3, r1
 800b664:	71fb      	strb	r3, [r7, #7]
 800b666:	4613      	mov	r3, r2
 800b668:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b66a:	2300      	movs	r3, #0
 800b66c:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b66e:	2300      	movs	r3, #0
 800b670:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800b672:	2300      	movs	r3, #0
 800b674:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800b676:	2300      	movs	r3, #0
 800b678:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800b67a:	79bb      	ldrb	r3, [r7, #6]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d003      	beq.n	800b688 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800b686:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800b688:	2202      	movs	r2, #2
 800b68a:	2101      	movs	r1, #1
 800b68c:	68f8      	ldr	r0, [r7, #12]
 800b68e:	f002 fc07 	bl	800dea0 <VL53L0X_WrByte>
 800b692:	4603      	mov	r3, r0
 800b694:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800b696:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d105      	bne.n	800b6aa <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800b69e:	2100      	movs	r1, #0
 800b6a0:	68f8      	ldr	r0, [r7, #12]
 800b6a2:	f7ff fe9c 	bl	800b3de <VL53L0X_perform_single_ref_calibration>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800b6aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d115      	bne.n	800b6de <VL53L0X_perform_phase_calibration+0x8a>
 800b6b2:	79fb      	ldrb	r3, [r7, #7]
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d112      	bne.n	800b6de <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800b6b8:	7d39      	ldrb	r1, [r7, #20]
 800b6ba:	7d7a      	ldrb	r2, [r7, #21]
 800b6bc:	2301      	movs	r3, #1
 800b6be:	9303      	str	r3, [sp, #12]
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	9302      	str	r3, [sp, #8]
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	9301      	str	r3, [sp, #4]
 800b6c8:	f107 0313 	add.w	r3, r7, #19
 800b6cc:	9300      	str	r3, [sp, #0]
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	2101      	movs	r1, #1
 800b6d2:	68f8      	ldr	r0, [r7, #12]
 800b6d4:	f7ff febe 	bl	800b454 <VL53L0X_ref_calibration_io>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	75fb      	strb	r3, [r7, #23]
 800b6dc:	e002      	b.n	800b6e4 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800b6e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d112      	bne.n	800b712 <VL53L0X_perform_phase_calibration+0xbe>
 800b6ec:	79bb      	ldrb	r3, [r7, #6]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d00f      	beq.n	800b712 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b6f2:	7dbb      	ldrb	r3, [r7, #22]
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	2101      	movs	r1, #1
 800b6f8:	68f8      	ldr	r0, [r7, #12]
 800b6fa:	f002 fbd1 	bl	800dea0 <VL53L0X_WrByte>
 800b6fe:	4603      	mov	r3, r0
 800b700:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b702:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d103      	bne.n	800b712 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	7dba      	ldrb	r2, [r7, #22]
 800b70e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 800b712:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b716:	4618      	mov	r0, r3
 800b718:	3718      	adds	r7, #24
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}

0800b71e <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800b71e:	b580      	push	{r7, lr}
 800b720:	b086      	sub	sp, #24
 800b722:	af00      	add	r7, sp, #0
 800b724:	60f8      	str	r0, [r7, #12]
 800b726:	60b9      	str	r1, [r7, #8]
 800b728:	607a      	str	r2, [r7, #4]
 800b72a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b72c:	2300      	movs	r3, #0
 800b72e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b730:	2300      	movs	r3, #0
 800b732:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800b73a:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800b73c:	78fa      	ldrb	r2, [r7, #3]
 800b73e:	2300      	movs	r3, #0
 800b740:	68b9      	ldr	r1, [r7, #8]
 800b742:	68f8      	ldr	r0, [r7, #12]
 800b744:	f7ff ff1f 	bl	800b586 <VL53L0X_perform_vhv_calibration>
 800b748:	4603      	mov	r3, r0
 800b74a:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800b74c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d107      	bne.n	800b764 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800b754:	78fa      	ldrb	r2, [r7, #3]
 800b756:	2300      	movs	r3, #0
 800b758:	6879      	ldr	r1, [r7, #4]
 800b75a:	68f8      	ldr	r0, [r7, #12]
 800b75c:	f7ff ff7a 	bl	800b654 <VL53L0X_perform_phase_calibration>
 800b760:	4603      	mov	r3, r0
 800b762:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800b764:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d10f      	bne.n	800b78c <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b76c:	7dbb      	ldrb	r3, [r7, #22]
 800b76e:	461a      	mov	r2, r3
 800b770:	2101      	movs	r1, #1
 800b772:	68f8      	ldr	r0, [r7, #12]
 800b774:	f002 fb94 	bl	800dea0 <VL53L0X_WrByte>
 800b778:	4603      	mov	r3, r0
 800b77a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b77c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d103      	bne.n	800b78c <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	7dba      	ldrb	r2, [r7, #22]
 800b788:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 800b78c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b790:	4618      	mov	r0, r3
 800b792:	3718      	adds	r7, #24
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b086      	sub	sp, #24
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800b7ac:	f107 030f 	add.w	r3, r7, #15
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f7fe fe0e 	bl	800a3d4 <VL53L0X_GetMeasurementDataReady>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800b7bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d110      	bne.n	800b7e6 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800b7c4:	7bfb      	ldrb	r3, [r7, #15]
 800b7c6:	2b01      	cmp	r3, #1
 800b7c8:	d00f      	beq.n	800b7ea <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800b7d6:	d302      	bcc.n	800b7de <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800b7d8:	23f9      	movs	r3, #249	@ 0xf9
 800b7da:	75fb      	strb	r3, [r7, #23]
			break;
 800b7dc:	e006      	b.n	800b7ec <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f002 fc7c 	bl	800e0dc <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800b7e4:	e7e2      	b.n	800b7ac <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800b7e6:	bf00      	nop
 800b7e8:	e000      	b.n	800b7ec <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800b7ea:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800b7ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3718      	adds	r7, #24
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b085      	sub	sp, #20
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	4603      	mov	r3, r0
 800b800:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800b802:	2300      	movs	r3, #0
 800b804:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800b806:	79fb      	ldrb	r3, [r7, #7]
 800b808:	3301      	adds	r3, #1
 800b80a:	b2db      	uxtb	r3, r3
 800b80c:	005b      	lsls	r3, r3, #1
 800b80e:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800b810:	7bfb      	ldrb	r3, [r7, #15]
}
 800b812:	4618      	mov	r0, r3
 800b814:	3714      	adds	r7, #20
 800b816:	46bd      	mov	sp, r7
 800b818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81c:	4770      	bx	lr

0800b81e <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800b81e:	b480      	push	{r7}
 800b820:	b085      	sub	sp, #20
 800b822:	af00      	add	r7, sp, #0
 800b824:	4603      	mov	r3, r0
 800b826:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800b828:	2300      	movs	r3, #0
 800b82a:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800b82c:	79fb      	ldrb	r3, [r7, #7]
 800b82e:	085b      	lsrs	r3, r3, #1
 800b830:	b2db      	uxtb	r3, r3
 800b832:	3b01      	subs	r3, #1
 800b834:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800b836:	7bfb      	ldrb	r3, [r7, #15]
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3714      	adds	r7, #20
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr

0800b844 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800b844:	b480      	push	{r7}
 800b846:	b085      	sub	sp, #20
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800b84c:	2300      	movs	r3, #0
 800b84e:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800b850:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b854:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800b856:	e002      	b.n	800b85e <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	089b      	lsrs	r3, r3, #2
 800b85c:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800b85e:	68ba      	ldr	r2, [r7, #8]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	429a      	cmp	r2, r3
 800b864:	d8f8      	bhi.n	800b858 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800b866:	e017      	b.n	800b898 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800b868:	68fa      	ldr	r2, [r7, #12]
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	4413      	add	r3, r2
 800b86e:	687a      	ldr	r2, [r7, #4]
 800b870:	429a      	cmp	r2, r3
 800b872:	d30b      	bcc.n	800b88c <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800b874:	68fa      	ldr	r2, [r7, #12]
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	4413      	add	r3, r2
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	1ad3      	subs	r3, r2, r3
 800b87e:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	085b      	lsrs	r3, r3, #1
 800b884:	68ba      	ldr	r2, [r7, #8]
 800b886:	4413      	add	r3, r2
 800b888:	60fb      	str	r3, [r7, #12]
 800b88a:	e002      	b.n	800b892 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	085b      	lsrs	r3, r3, #1
 800b890:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800b892:	68bb      	ldr	r3, [r7, #8]
 800b894:	089b      	lsrs	r3, r3, #2
 800b896:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d1e4      	bne.n	800b868 <VL53L0X_isqrt+0x24>
	}

	return res;
 800b89e:	68fb      	ldr	r3, [r7, #12]
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3714      	adds	r7, #20
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8aa:	4770      	bx	lr

0800b8ac <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b086      	sub	sp, #24
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	2183      	movs	r1, #131	@ 0x83
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f002 faef 	bl	800dea0 <VL53L0X_WrByte>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	7dfb      	ldrb	r3, [r7, #23]
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800b8cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d11e      	bne.n	800b912 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800b8d8:	f107 030f 	add.w	r3, r7, #15
 800b8dc:	461a      	mov	r2, r3
 800b8de:	2183      	movs	r1, #131	@ 0x83
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f002 fb5f 	bl	800dfa4 <VL53L0X_RdByte>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800b8ea:	7bfb      	ldrb	r3, [r7, #15]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d10a      	bne.n	800b906 <VL53L0X_device_read_strobe+0x5a>
 800b8f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d106      	bne.n	800b906 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800b904:	d3e8      	bcc.n	800b8d8 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800b90c:	d301      	bcc.n	800b912 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800b90e:	23f9      	movs	r3, #249	@ 0xf9
 800b910:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800b912:	2201      	movs	r2, #1
 800b914:	2183      	movs	r1, #131	@ 0x83
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f002 fac2 	bl	800dea0 <VL53L0X_WrByte>
 800b91c:	4603      	mov	r3, r0
 800b91e:	461a      	mov	r2, r3
 800b920:	7dfb      	ldrb	r3, [r7, #23]
 800b922:	4313      	orrs	r3, r2
 800b924:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800b926:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800b92a:	4618      	mov	r0, r3
 800b92c:	3718      	adds	r7, #24
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}

0800b932 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800b932:	b580      	push	{r7, lr}
 800b934:	b098      	sub	sp, #96	@ 0x60
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
 800b93a:	460b      	mov	r3, r1
 800b93c:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b93e:	2300      	movs	r3, #0
 800b940:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800b944:	2300      	movs	r3, #0
 800b946:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	uint8_t ReferenceSpadType = 0;
 800b94a:	2300      	movs	r3, #0
 800b94c:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
	uint32_t PartUIDUpper = 0;
 800b950:	2300      	movs	r3, #0
 800b952:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PartUIDLower = 0;
 800b954:	2300      	movs	r3, #0
 800b956:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800b958:	2300      	movs	r3, #0
 800b95a:	64bb      	str	r3, [r7, #72]	@ 0x48
	int16_t OffsetMicroMeters = 0;
 800b95c:	2300      	movs	r3, #0
 800b95e:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800b962:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800b966:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800b968:	2300      	movs	r3, #0
 800b96a:	657b      	str	r3, [r7, #84]	@ 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800b96c:	2300      	movs	r3, #0
 800b96e:	653b      	str	r3, [r7, #80]	@ 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800b970:	2300      	movs	r3, #0
 800b972:	643b      	str	r3, [r7, #64]	@ 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b97a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800b97e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b982:	2b07      	cmp	r3, #7
 800b984:	f000 8408 	beq.w	800c198 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b988:	2201      	movs	r2, #1
 800b98a:	2180      	movs	r1, #128	@ 0x80
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f002 fa87 	bl	800dea0 <VL53L0X_WrByte>
 800b992:	4603      	mov	r3, r0
 800b994:	461a      	mov	r2, r3
 800b996:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b99a:	4313      	orrs	r3, r2
 800b99c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	21ff      	movs	r1, #255	@ 0xff
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f002 fa7b 	bl	800dea0 <VL53L0X_WrByte>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b9b2:	4313      	orrs	r3, r2
 800b9b4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	2100      	movs	r1, #0
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f002 fa6f 	bl	800dea0 <VL53L0X_WrByte>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b9ca:	4313      	orrs	r3, r2
 800b9cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800b9d0:	2206      	movs	r2, #6
 800b9d2:	21ff      	movs	r1, #255	@ 0xff
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f002 fa63 	bl	800dea0 <VL53L0X_WrByte>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	461a      	mov	r2, r3
 800b9de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b9e2:	4313      	orrs	r3, r2
 800b9e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800b9e8:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 800b9ec:	461a      	mov	r2, r3
 800b9ee:	2183      	movs	r1, #131	@ 0x83
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f002 fad7 	bl	800dfa4 <VL53L0X_RdByte>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b9fe:	4313      	orrs	r3, r2
 800ba00:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800ba04:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ba08:	f043 0304 	orr.w	r3, r3, #4
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	461a      	mov	r2, r3
 800ba10:	2183      	movs	r1, #131	@ 0x83
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f002 fa44 	bl	800dea0 <VL53L0X_WrByte>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ba20:	4313      	orrs	r3, r2
 800ba22:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800ba26:	2207      	movs	r2, #7
 800ba28:	21ff      	movs	r1, #255	@ 0xff
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f002 fa38 	bl	800dea0 <VL53L0X_WrByte>
 800ba30:	4603      	mov	r3, r0
 800ba32:	461a      	mov	r2, r3
 800ba34:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ba38:	4313      	orrs	r3, r2
 800ba3a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800ba3e:	2201      	movs	r2, #1
 800ba40:	2181      	movs	r1, #129	@ 0x81
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f002 fa2c 	bl	800dea0 <VL53L0X_WrByte>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ba50:	4313      	orrs	r3, r2
 800ba52:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f002 fb40 	bl	800e0dc <VL53L0X_PollingDelay>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	461a      	mov	r2, r3
 800ba60:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ba64:	4313      	orrs	r3, r2
 800ba66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	2180      	movs	r1, #128	@ 0x80
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f002 fa16 	bl	800dea0 <VL53L0X_WrByte>
 800ba74:	4603      	mov	r3, r0
 800ba76:	461a      	mov	r2, r3
 800ba78:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		if (((option & 1) == 1) &&
 800ba82:	78fb      	ldrb	r3, [r7, #3]
 800ba84:	f003 0301 	and.w	r3, r3, #1
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	f000 8098 	beq.w	800bbbe <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800ba8e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ba92:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	f040 8091 	bne.w	800bbbe <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800ba9c:	226b      	movs	r2, #107	@ 0x6b
 800ba9e:	2194      	movs	r1, #148	@ 0x94
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f002 f9fd 	bl	800dea0 <VL53L0X_WrByte>
 800baa6:	4603      	mov	r3, r0
 800baa8:	461a      	mov	r2, r3
 800baaa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800baae:	4313      	orrs	r3, r2
 800bab0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f7ff fef9 	bl	800b8ac <VL53L0X_device_read_strobe>
 800baba:	4603      	mov	r3, r0
 800babc:	461a      	mov	r2, r3
 800babe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bac2:	4313      	orrs	r3, r2
 800bac4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bac8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800bacc:	461a      	mov	r2, r3
 800bace:	2190      	movs	r1, #144	@ 0x90
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f002 fac7 	bl	800e064 <VL53L0X_RdDWord>
 800bad6:	4603      	mov	r3, r0
 800bad8:	461a      	mov	r2, r3
 800bada:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bade:	4313      	orrs	r3, r2
 800bae0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800bae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bae6:	0a1b      	lsrs	r3, r3, #8
 800bae8:	b2db      	uxtb	r3, r3
 800baea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800baee:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800baf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baf4:	0bdb      	lsrs	r3, r3, #15
 800baf6:	b2db      	uxtb	r3, r3
 800baf8:	f003 0301 	and.w	r3, r3, #1
 800bafc:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800bb00:	2224      	movs	r2, #36	@ 0x24
 800bb02:	2194      	movs	r1, #148	@ 0x94
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f002 f9cb 	bl	800dea0 <VL53L0X_WrByte>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	461a      	mov	r2, r3
 800bb0e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bb12:	4313      	orrs	r3, r2
 800bb14:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f7ff fec7 	bl	800b8ac <VL53L0X_device_read_strobe>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	461a      	mov	r2, r3
 800bb22:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bb26:	4313      	orrs	r3, r2
 800bb28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bb2c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800bb30:	461a      	mov	r2, r3
 800bb32:	2190      	movs	r1, #144	@ 0x90
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f002 fa95 	bl	800e064 <VL53L0X_RdDWord>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	461a      	mov	r2, r3
 800bb3e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bb42:	4313      	orrs	r3, r2
 800bb44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800bb48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb4a:	0e1b      	lsrs	r3, r3, #24
 800bb4c:	b2db      	uxtb	r3, r3
 800bb4e:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800bb50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb52:	0c1b      	lsrs	r3, r3, #16
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800bb58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb5a:	0a1b      	lsrs	r3, r3, #8
 800bb5c:	b2db      	uxtb	r3, r3
 800bb5e:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800bb60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb62:	b2db      	uxtb	r3, r3
 800bb64:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800bb66:	2225      	movs	r2, #37	@ 0x25
 800bb68:	2194      	movs	r1, #148	@ 0x94
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f002 f998 	bl	800dea0 <VL53L0X_WrByte>
 800bb70:	4603      	mov	r3, r0
 800bb72:	461a      	mov	r2, r3
 800bb74:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f7ff fe94 	bl	800b8ac <VL53L0X_device_read_strobe>
 800bb84:	4603      	mov	r3, r0
 800bb86:	461a      	mov	r2, r3
 800bb88:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bb92:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800bb96:	461a      	mov	r2, r3
 800bb98:	2190      	movs	r1, #144	@ 0x90
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f002 fa62 	bl	800e064 <VL53L0X_RdDWord>
 800bba0:	4603      	mov	r3, r0
 800bba2:	461a      	mov	r2, r3
 800bba4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800bbae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbb0:	0e1b      	lsrs	r3, r3, #24
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800bbb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbb8:	0c1b      	lsrs	r3, r3, #16
 800bbba:	b2db      	uxtb	r3, r3
 800bbbc:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800bbbe:	78fb      	ldrb	r3, [r7, #3]
 800bbc0:	f003 0302 	and.w	r3, r3, #2
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	f000 8189 	beq.w	800bedc <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800bbca:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bbce:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	f040 8182 	bne.w	800bedc <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800bbd8:	2202      	movs	r2, #2
 800bbda:	2194      	movs	r1, #148	@ 0x94
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f002 f95f 	bl	800dea0 <VL53L0X_WrByte>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bbea:	4313      	orrs	r3, r2
 800bbec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f7ff fe5b 	bl	800b8ac <VL53L0X_device_read_strobe>
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800bc04:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 800bc08:	461a      	mov	r2, r3
 800bc0a:	2190      	movs	r1, #144	@ 0x90
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f002 f9c9 	bl	800dfa4 <VL53L0X_RdByte>
 800bc12:	4603      	mov	r3, r0
 800bc14:	461a      	mov	r2, r3
 800bc16:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800bc20:	227b      	movs	r2, #123	@ 0x7b
 800bc22:	2194      	movs	r1, #148	@ 0x94
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f002 f93b 	bl	800dea0 <VL53L0X_WrByte>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bc32:	4313      	orrs	r3, r2
 800bc34:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bc38:	6878      	ldr	r0, [r7, #4]
 800bc3a:	f7ff fe37 	bl	800b8ac <VL53L0X_device_read_strobe>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	461a      	mov	r2, r3
 800bc42:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bc46:	4313      	orrs	r3, r2
 800bc48:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800bc4c:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 800bc50:	461a      	mov	r2, r3
 800bc52:	2190      	movs	r1, #144	@ 0x90
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f002 f9a5 	bl	800dfa4 <VL53L0X_RdByte>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	461a      	mov	r2, r3
 800bc5e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bc62:	4313      	orrs	r3, r2
 800bc64:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800bc68:	2277      	movs	r2, #119	@ 0x77
 800bc6a:	2194      	movs	r1, #148	@ 0x94
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f002 f917 	bl	800dea0 <VL53L0X_WrByte>
 800bc72:	4603      	mov	r3, r0
 800bc74:	461a      	mov	r2, r3
 800bc76:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f7ff fe13 	bl	800b8ac <VL53L0X_device_read_strobe>
 800bc86:	4603      	mov	r3, r0
 800bc88:	461a      	mov	r2, r3
 800bc8a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bc8e:	4313      	orrs	r3, r2
 800bc90:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bc94:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800bc98:	461a      	mov	r2, r3
 800bc9a:	2190      	movs	r1, #144	@ 0x90
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f002 f9e1 	bl	800e064 <VL53L0X_RdDWord>
 800bca2:	4603      	mov	r3, r0
 800bca4:	461a      	mov	r2, r3
 800bca6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bcaa:	4313      	orrs	r3, r2
 800bcac:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800bcb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcb2:	0e5b      	lsrs	r3, r3, #25
 800bcb4:	b2db      	uxtb	r3, r3
 800bcb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800bcbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcc0:	0c9b      	lsrs	r3, r3, #18
 800bcc2:	b2db      	uxtb	r3, r3
 800bcc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bcc8:	b2db      	uxtb	r3, r3
 800bcca:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800bccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcce:	0adb      	lsrs	r3, r3, #11
 800bcd0:	b2db      	uxtb	r3, r3
 800bcd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800bcda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcdc:	091b      	lsrs	r3, r3, #4
 800bcde:	b2db      	uxtb	r3, r3
 800bce0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bce4:	b2db      	uxtb	r3, r3
 800bce6:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800bce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcea:	b2db      	uxtb	r3, r3
 800bcec:	00db      	lsls	r3, r3, #3
 800bcee:	b2db      	uxtb	r3, r3
 800bcf0:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 800bcf4:	b2db      	uxtb	r3, r3
 800bcf6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800bcfa:	2278      	movs	r2, #120	@ 0x78
 800bcfc:	2194      	movs	r1, #148	@ 0x94
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f002 f8ce 	bl	800dea0 <VL53L0X_WrByte>
 800bd04:	4603      	mov	r3, r0
 800bd06:	461a      	mov	r2, r3
 800bd08:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f7ff fdca 	bl	800b8ac <VL53L0X_device_read_strobe>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bd20:	4313      	orrs	r3, r2
 800bd22:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bd26:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	2190      	movs	r1, #144	@ 0x90
 800bd2e:	6878      	ldr	r0, [r7, #4]
 800bd30:	f002 f998 	bl	800e064 <VL53L0X_RdDWord>
 800bd34:	4603      	mov	r3, r0
 800bd36:	461a      	mov	r2, r3
 800bd38:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bd3c:	4313      	orrs	r3, r2
 800bd3e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800bd42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd44:	0f5b      	lsrs	r3, r3, #29
 800bd46:	b2db      	uxtb	r3, r3
 800bd48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd4c:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800bd4e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bd52:	4413      	add	r3, r2
 800bd54:	b2db      	uxtb	r3, r3
 800bd56:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800bd58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd5a:	0d9b      	lsrs	r3, r3, #22
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd62:	b2db      	uxtb	r3, r3
 800bd64:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800bd66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd68:	0bdb      	lsrs	r3, r3, #15
 800bd6a:	b2db      	uxtb	r3, r3
 800bd6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd70:	b2db      	uxtb	r3, r3
 800bd72:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800bd74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd76:	0a1b      	lsrs	r3, r3, #8
 800bd78:	b2db      	uxtb	r3, r3
 800bd7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd7e:	b2db      	uxtb	r3, r3
 800bd80:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800bd82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd84:	085b      	lsrs	r3, r3, #1
 800bd86:	b2db      	uxtb	r3, r3
 800bd88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd8c:	b2db      	uxtb	r3, r3
 800bd8e:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800bd90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd92:	b2db      	uxtb	r3, r3
 800bd94:	019b      	lsls	r3, r3, #6
 800bd96:	b2db      	uxtb	r3, r3
 800bd98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd9c:	b2db      	uxtb	r3, r3
 800bd9e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800bda2:	2279      	movs	r2, #121	@ 0x79
 800bda4:	2194      	movs	r1, #148	@ 0x94
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f002 f87a 	bl	800dea0 <VL53L0X_WrByte>
 800bdac:	4603      	mov	r3, r0
 800bdae:	461a      	mov	r2, r3
 800bdb0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f7ff fd76 	bl	800b8ac <VL53L0X_device_read_strobe>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bdc8:	4313      	orrs	r3, r2
 800bdca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bdce:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	2190      	movs	r1, #144	@ 0x90
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f002 f944 	bl	800e064 <VL53L0X_RdDWord>
 800bddc:	4603      	mov	r3, r0
 800bdde:	461a      	mov	r2, r3
 800bde0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bde4:	4313      	orrs	r3, r2
 800bde6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800bdea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdec:	0e9b      	lsrs	r3, r3, #26
 800bdee:	b2db      	uxtb	r3, r3
 800bdf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bdf4:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800bdf6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bdfa:	4413      	add	r3, r2
 800bdfc:	b2db      	uxtb	r3, r3
 800bdfe:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800be00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be02:	0cdb      	lsrs	r3, r3, #19
 800be04:	b2db      	uxtb	r3, r3
 800be06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be0a:	b2db      	uxtb	r3, r3
 800be0c:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800be0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be10:	0b1b      	lsrs	r3, r3, #12
 800be12:	b2db      	uxtb	r3, r3
 800be14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be18:	b2db      	uxtb	r3, r3
 800be1a:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800be1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be1e:	095b      	lsrs	r3, r3, #5
 800be20:	b2db      	uxtb	r3, r3
 800be22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be26:	b2db      	uxtb	r3, r3
 800be28:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800be2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be2c:	b2db      	uxtb	r3, r3
 800be2e:	009b      	lsls	r3, r3, #2
 800be30:	b2db      	uxtb	r3, r3
 800be32:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 800be36:	b2db      	uxtb	r3, r3
 800be38:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800be3c:	227a      	movs	r2, #122	@ 0x7a
 800be3e:	2194      	movs	r1, #148	@ 0x94
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	f002 f82d 	bl	800dea0 <VL53L0X_WrByte>
 800be46:	4603      	mov	r3, r0
 800be48:	461a      	mov	r2, r3
 800be4a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800be4e:	4313      	orrs	r3, r2
 800be50:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f7ff fd29 	bl	800b8ac <VL53L0X_device_read_strobe>
 800be5a:	4603      	mov	r3, r0
 800be5c:	461a      	mov	r2, r3
 800be5e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800be62:	4313      	orrs	r3, r2
 800be64:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800be68:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800be6c:	461a      	mov	r2, r3
 800be6e:	2190      	movs	r1, #144	@ 0x90
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f002 f8f7 	bl	800e064 <VL53L0X_RdDWord>
 800be76:	4603      	mov	r3, r0
 800be78:	461a      	mov	r2, r3
 800be7a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800be7e:	4313      	orrs	r3, r2
 800be80:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800be84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be86:	0f9b      	lsrs	r3, r3, #30
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800be8e:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800be90:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800be94:	4413      	add	r3, r2
 800be96:	b2db      	uxtb	r3, r3
 800be98:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800be9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be9c:	0ddb      	lsrs	r3, r3, #23
 800be9e:	b2db      	uxtb	r3, r3
 800bea0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800bea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beaa:	0c1b      	lsrs	r3, r3, #16
 800beac:	b2db      	uxtb	r3, r3
 800beae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800beb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beb8:	0a5b      	lsrs	r3, r3, #9
 800beba:	b2db      	uxtb	r3, r3
 800bebc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bec0:	b2db      	uxtb	r3, r3
 800bec2:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800bec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bec8:	089b      	lsrs	r3, r3, #2
 800beca:	b2db      	uxtb	r3, r3
 800becc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bed0:	b2db      	uxtb	r3, r3
 800bed2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			ProductId[18] = '\0';
 800bed6:	2300      	movs	r3, #0
 800bed8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

		}

		if (((option & 4) == 4) &&
 800bedc:	78fb      	ldrb	r3, [r7, #3]
 800bede:	f003 0304 	and.w	r3, r3, #4
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	f000 80f1 	beq.w	800c0ca <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800bee8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800beec:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	f040 80ea 	bne.w	800c0ca <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800bef6:	227b      	movs	r2, #123	@ 0x7b
 800bef8:	2194      	movs	r1, #148	@ 0x94
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f001 ffd0 	bl	800dea0 <VL53L0X_WrByte>
 800bf00:	4603      	mov	r3, r0
 800bf02:	461a      	mov	r2, r3
 800bf04:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f7ff fccc 	bl	800b8ac <VL53L0X_device_read_strobe>
 800bf14:	4603      	mov	r3, r0
 800bf16:	461a      	mov	r2, r3
 800bf18:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bf1c:	4313      	orrs	r3, r2
 800bf1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800bf22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800bf26:	461a      	mov	r2, r3
 800bf28:	2190      	movs	r1, #144	@ 0x90
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f002 f89a 	bl	800e064 <VL53L0X_RdDWord>
 800bf30:	4603      	mov	r3, r0
 800bf32:	461a      	mov	r2, r3
 800bf34:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800bf3e:	227c      	movs	r2, #124	@ 0x7c
 800bf40:	2194      	movs	r1, #148	@ 0x94
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f001 ffac 	bl	800dea0 <VL53L0X_WrByte>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	461a      	mov	r2, r3
 800bf4c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bf50:	4313      	orrs	r3, r2
 800bf52:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f7ff fca8 	bl	800b8ac <VL53L0X_device_read_strobe>
 800bf5c:	4603      	mov	r3, r0
 800bf5e:	461a      	mov	r2, r3
 800bf60:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bf64:	4313      	orrs	r3, r2
 800bf66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800bf6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800bf6e:	461a      	mov	r2, r3
 800bf70:	2190      	movs	r1, #144	@ 0x90
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f002 f876 	bl	800e064 <VL53L0X_RdDWord>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	461a      	mov	r2, r3
 800bf7c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bf80:	4313      	orrs	r3, r2
 800bf82:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800bf86:	2273      	movs	r2, #115	@ 0x73
 800bf88:	2194      	movs	r1, #148	@ 0x94
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f001 ff88 	bl	800dea0 <VL53L0X_WrByte>
 800bf90:	4603      	mov	r3, r0
 800bf92:	461a      	mov	r2, r3
 800bf94:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f7ff fc84 	bl	800b8ac <VL53L0X_device_read_strobe>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bfac:	4313      	orrs	r3, r2
 800bfae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bfb2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	2190      	movs	r1, #144	@ 0x90
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f002 f852 	bl	800e064 <VL53L0X_RdDWord>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bfc8:	4313      	orrs	r3, r2
 800bfca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800bfce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfd0:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800bfd2:	b29b      	uxth	r3, r3
 800bfd4:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800bfd6:	2274      	movs	r2, #116	@ 0x74
 800bfd8:	2194      	movs	r1, #148	@ 0x94
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f001 ff60 	bl	800dea0 <VL53L0X_WrByte>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	461a      	mov	r2, r3
 800bfe4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bfe8:	4313      	orrs	r3, r2
 800bfea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f7ff fc5c 	bl	800b8ac <VL53L0X_device_read_strobe>
 800bff4:	4603      	mov	r3, r0
 800bff6:	461a      	mov	r2, r3
 800bff8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bffc:	4313      	orrs	r3, r2
 800bffe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c002:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800c006:	461a      	mov	r2, r3
 800c008:	2190      	movs	r1, #144	@ 0x90
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f002 f82a 	bl	800e064 <VL53L0X_RdDWord>
 800c010:	4603      	mov	r3, r0
 800c012:	461a      	mov	r2, r3
 800c014:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c018:	4313      	orrs	r3, r2
 800c01a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800c01e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c020:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800c022:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c024:	4313      	orrs	r3, r2
 800c026:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800c028:	2275      	movs	r2, #117	@ 0x75
 800c02a:	2194      	movs	r1, #148	@ 0x94
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f001 ff37 	bl	800dea0 <VL53L0X_WrByte>
 800c032:	4603      	mov	r3, r0
 800c034:	461a      	mov	r2, r3
 800c036:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c03a:	4313      	orrs	r3, r2
 800c03c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f7ff fc33 	bl	800b8ac <VL53L0X_device_read_strobe>
 800c046:	4603      	mov	r3, r0
 800c048:	461a      	mov	r2, r3
 800c04a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c04e:	4313      	orrs	r3, r2
 800c050:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c054:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800c058:	461a      	mov	r2, r3
 800c05a:	2190      	movs	r1, #144	@ 0x90
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f002 f801 	bl	800e064 <VL53L0X_RdDWord>
 800c062:	4603      	mov	r3, r0
 800c064:	461a      	mov	r2, r3
 800c066:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c06a:	4313      	orrs	r3, r2
 800c06c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800c070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c072:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800c074:	b29b      	uxth	r3, r3
 800c076:	657b      	str	r3, [r7, #84]	@ 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800c078:	2276      	movs	r2, #118	@ 0x76
 800c07a:	2194      	movs	r1, #148	@ 0x94
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f001 ff0f 	bl	800dea0 <VL53L0X_WrByte>
 800c082:	4603      	mov	r3, r0
 800c084:	461a      	mov	r2, r3
 800c086:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c08a:	4313      	orrs	r3, r2
 800c08c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f7ff fc0b 	bl	800b8ac <VL53L0X_device_read_strobe>
 800c096:	4603      	mov	r3, r0
 800c098:	461a      	mov	r2, r3
 800c09a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c09e:	4313      	orrs	r3, r2
 800c0a0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800c0a4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	2190      	movs	r1, #144	@ 0x90
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f001 ffd9 	bl	800e064 <VL53L0X_RdDWord>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	461a      	mov	r2, r3
 800c0b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c0ba:	4313      	orrs	r3, r2
 800c0bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800c0c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0c2:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800c0c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	657b      	str	r3, [r7, #84]	@ 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	2181      	movs	r1, #129	@ 0x81
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f001 fee6 	bl	800dea0 <VL53L0X_WrByte>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c0dc:	4313      	orrs	r3, r2
 800c0de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800c0e2:	2206      	movs	r2, #6
 800c0e4:	21ff      	movs	r1, #255	@ 0xff
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f001 feda 	bl	800dea0 <VL53L0X_WrByte>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c0f4:	4313      	orrs	r3, r2
 800c0f6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800c0fa:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 800c0fe:	461a      	mov	r2, r3
 800c100:	2183      	movs	r1, #131	@ 0x83
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f001 ff4e 	bl	800dfa4 <VL53L0X_RdByte>
 800c108:	4603      	mov	r3, r0
 800c10a:	461a      	mov	r2, r3
 800c10c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c110:	4313      	orrs	r3, r2
 800c112:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800c116:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c11a:	f023 0304 	bic.w	r3, r3, #4
 800c11e:	b2db      	uxtb	r3, r3
 800c120:	461a      	mov	r2, r3
 800c122:	2183      	movs	r1, #131	@ 0x83
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f001 febb 	bl	800dea0 <VL53L0X_WrByte>
 800c12a:	4603      	mov	r3, r0
 800c12c:	461a      	mov	r2, r3
 800c12e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c132:	4313      	orrs	r3, r2
 800c134:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c138:	2201      	movs	r2, #1
 800c13a:	21ff      	movs	r1, #255	@ 0xff
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f001 feaf 	bl	800dea0 <VL53L0X_WrByte>
 800c142:	4603      	mov	r3, r0
 800c144:	461a      	mov	r2, r3
 800c146:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c14a:	4313      	orrs	r3, r2
 800c14c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800c150:	2201      	movs	r2, #1
 800c152:	2100      	movs	r1, #0
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f001 fea3 	bl	800dea0 <VL53L0X_WrByte>
 800c15a:	4603      	mov	r3, r0
 800c15c:	461a      	mov	r2, r3
 800c15e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c162:	4313      	orrs	r3, r2
 800c164:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c168:	2200      	movs	r2, #0
 800c16a:	21ff      	movs	r1, #255	@ 0xff
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f001 fe97 	bl	800dea0 <VL53L0X_WrByte>
 800c172:	4603      	mov	r3, r0
 800c174:	461a      	mov	r2, r3
 800c176:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c17a:	4313      	orrs	r3, r2
 800c17c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800c180:	2200      	movs	r2, #0
 800c182:	2180      	movs	r1, #128	@ 0x80
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f001 fe8b 	bl	800dea0 <VL53L0X_WrByte>
 800c18a:	4603      	mov	r3, r0
 800c18c:	461a      	mov	r2, r3
 800c18e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c192:	4313      	orrs	r3, r2
 800c194:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800c198:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	f040 808f 	bne.w	800c2c0 <VL53L0X_get_info_from_device+0x98e>
 800c1a2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c1a6:	2b07      	cmp	r3, #7
 800c1a8:	f000 808a 	beq.w	800c2c0 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800c1ac:	78fb      	ldrb	r3, [r7, #3]
 800c1ae:	f003 0301 	and.w	r3, r3, #1
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d024      	beq.n	800c200 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800c1b6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c1ba:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d11e      	bne.n	800c200 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f897 205e 	ldrb.w	r2, [r7, #94]	@ 0x5e
 800c1c8:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 800c1d2:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c1da:	e00e      	b.n	800c1fa <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800c1dc:	f107 0208 	add.w	r2, r7, #8
 800c1e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1e2:	4413      	add	r3, r2
 800c1e4:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800c1e6:	687a      	ldr	r2, [r7, #4]
 800c1e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1ea:	4413      	add	r3, r2
 800c1ec:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 800c1f0:	460a      	mov	r2, r1
 800c1f2:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800c1f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c1fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1fc:	2b05      	cmp	r3, #5
 800c1fe:	dded      	ble.n	800c1dc <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800c200:	78fb      	ldrb	r3, [r7, #3]
 800c202:	f003 0302 	and.w	r3, r3, #2
 800c206:	2b00      	cmp	r3, #0
 800c208:	d018      	beq.n	800c23c <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800c20a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c20e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800c212:	2b00      	cmp	r3, #0
 800c214:	d112      	bne.n	800c23c <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c216:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c220:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f883 20f2 	strb.w	r2, [r3, #242]	@ 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	33f3      	adds	r3, #243	@ 0xf3
 800c22e:	63bb      	str	r3, [r7, #56]	@ 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800c230:	f107 0310 	add.w	r3, r7, #16
 800c234:	4619      	mov	r1, r3
 800c236:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c238:	f002 fe93 	bl	800ef62 <strcpy>

		}

		if (((option & 4) == 4) &&
 800c23c:	78fb      	ldrb	r3, [r7, #3]
 800c23e:	f003 0304 	and.w	r3, r3, #4
 800c242:	2b00      	cmp	r3, #0
 800c244:	d030      	beq.n	800c2a8 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800c246:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c24a:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d12a      	bne.n	800c2a8 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c252:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c25a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800c262:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c264:	025b      	lsls	r3, r3, #9
 800c266:	643b      	str	r3, [r7, #64]	@ 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c26c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800c270:	2300      	movs	r3, #0
 800c272:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800c276:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d011      	beq.n	800c2a0 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800c27c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c27e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c280:	1ad3      	subs	r3, r2, r3
 800c282:	64bb      	str	r3, [r7, #72]	@ 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800c284:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c286:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c28a:	fb02 f303 	mul.w	r3, r2, r3
 800c28e:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800c290:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
					OffsetMicroMeters *= -1;
 800c294:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800c298:	425b      	negs	r3, r3
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			}

			PALDevDataSet(Dev,
 800c2a0:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	@ 0x5a
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800c2a8:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800c2ac:	78fb      	ldrb	r3, [r7, #3]
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	b2db      	uxtb	r3, r3
 800c2b2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800c2b6:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c2c0:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	3760      	adds	r7, #96	@ 0x60
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	bd80      	pop	{r7, pc}

0800c2cc <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b087      	sub	sp, #28
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	460b      	mov	r3, r1
 800c2d6:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800c2d8:	f240 6277 	movw	r2, #1655	@ 0x677
 800c2dc:	f04f 0300 	mov.w	r3, #0
 800c2e0:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800c2e4:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 800c2e8:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800c2ea:	78fb      	ldrb	r3, [r7, #3]
 800c2ec:	68fa      	ldr	r2, [r7, #12]
 800c2ee:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800c2f2:	693a      	ldr	r2, [r7, #16]
 800c2f4:	fb02 f303 	mul.w	r3, r2, r3
 800c2f8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800c2fa:	68bb      	ldr	r3, [r7, #8]
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	371c      	adds	r7, #28
 800c300:	46bd      	mov	sp, r7
 800c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c306:	4770      	bx	lr

0800c308 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800c308:	b480      	push	{r7}
 800c30a:	b087      	sub	sp, #28
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800c310:	2300      	movs	r3, #0
 800c312:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800c314:	2300      	movs	r3, #0
 800c316:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800c318:	2300      	movs	r3, #0
 800c31a:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d015      	beq.n	800c34e <VL53L0X_encode_timeout+0x46>
		ls_byte = timeout_macro_clks - 1;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	3b01      	subs	r3, #1
 800c326:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c328:	e005      	b.n	800c336 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	085b      	lsrs	r3, r3, #1
 800c32e:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800c330:	89fb      	ldrh	r3, [r7, #14]
 800c332:	3301      	adds	r3, #1
 800c334:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	2bff      	cmp	r3, #255	@ 0xff
 800c33a:	d8f6      	bhi.n	800c32a <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800c33c:	89fb      	ldrh	r3, [r7, #14]
 800c33e:	021b      	lsls	r3, r3, #8
 800c340:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800c342:	693b      	ldr	r3, [r7, #16]
 800c344:	b29b      	uxth	r3, r3
 800c346:	b2db      	uxtb	r3, r3
 800c348:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800c34a:	4413      	add	r3, r2
 800c34c:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800c34e:	8afb      	ldrh	r3, [r7, #22]

}
 800c350:	4618      	mov	r0, r3
 800c352:	371c      	adds	r7, #28
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr

0800c35c <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b085      	sub	sp, #20
 800c360:	af00      	add	r7, sp, #0
 800c362:	4603      	mov	r3, r0
 800c364:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800c366:	2300      	movs	r3, #0
 800c368:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c36a:	88fb      	ldrh	r3, [r7, #6]
 800c36c:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800c36e:	88fa      	ldrh	r2, [r7, #6]
 800c370:	0a12      	lsrs	r2, r2, #8
 800c372:	b292      	uxth	r2, r2
 800c374:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c376:	3301      	adds	r3, #1
 800c378:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800c37a:	68fb      	ldr	r3, [r7, #12]
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3714      	adds	r7, #20
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr

0800c388 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b088      	sub	sp, #32
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	60f8      	str	r0, [r7, #12]
 800c390:	60b9      	str	r1, [r7, #8]
 800c392:	4613      	mov	r3, r2
 800c394:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800c396:	2300      	movs	r3, #0
 800c398:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800c39a:	79fb      	ldrb	r3, [r7, #7]
 800c39c:	4619      	mov	r1, r3
 800c39e:	68f8      	ldr	r0, [r7, #12]
 800c3a0:	f7ff ff94 	bl	800c2cc <VL53L0X_calc_macro_period_ps>
 800c3a4:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800c3a6:	69bb      	ldr	r3, [r7, #24]
 800c3a8:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800c3ac:	4a0a      	ldr	r2, [pc, #40]	@ (800c3d8 <VL53L0X_calc_timeout_mclks+0x50>)
 800c3ae:	fba2 2303 	umull	r2, r3, r2, r3
 800c3b2:	099b      	lsrs	r3, r3, #6
 800c3b4:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c3bc:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	085b      	lsrs	r3, r3, #1
 800c3c4:	441a      	add	r2, r3
	timeout_period_mclks =
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3cc:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800c3ce:	69fb      	ldr	r3, [r7, #28]
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3720      	adds	r7, #32
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}
 800c3d8:	10624dd3 	.word	0x10624dd3

0800c3dc <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b086      	sub	sp, #24
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	460b      	mov	r3, r1
 800c3e6:	807b      	strh	r3, [r7, #2]
 800c3e8:	4613      	mov	r3, r2
 800c3ea:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800c3f0:	787b      	ldrb	r3, [r7, #1]
 800c3f2:	4619      	mov	r1, r3
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f7ff ff69 	bl	800c2cc <VL53L0X_calc_macro_period_ps>
 800c3fa:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800c402:	4a0a      	ldr	r2, [pc, #40]	@ (800c42c <VL53L0X_calc_timeout_us+0x50>)
 800c404:	fba2 2303 	umull	r2, r3, r2, r3
 800c408:	099b      	lsrs	r3, r3, #6
 800c40a:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800c40c:	887b      	ldrh	r3, [r7, #2]
 800c40e:	68fa      	ldr	r2, [r7, #12]
 800c410:	fb02 f303 	mul.w	r3, r2, r3
 800c414:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
	actual_timeout_period_us =
 800c418:	4a04      	ldr	r2, [pc, #16]	@ (800c42c <VL53L0X_calc_timeout_us+0x50>)
 800c41a:	fba2 2303 	umull	r2, r3, r2, r3
 800c41e:	099b      	lsrs	r3, r3, #6
 800c420:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800c422:	697b      	ldr	r3, [r7, #20]
}
 800c424:	4618      	mov	r0, r3
 800c426:	3718      	adds	r7, #24
 800c428:	46bd      	mov	sp, r7
 800c42a:	bd80      	pop	{r7, pc}
 800c42c:	10624dd3 	.word	0x10624dd3

0800c430 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b08c      	sub	sp, #48	@ 0x30
 800c434:	af00      	add	r7, sp, #0
 800c436:	60f8      	str	r0, [r7, #12]
 800c438:	460b      	mov	r3, r1
 800c43a:	607a      	str	r2, [r7, #4]
 800c43c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c43e:	2300      	movs	r3, #0
 800c440:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800c444:	2300      	movs	r3, #0
 800c446:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800c44a:	2300      	movs	r3, #0
 800c44c:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800c44e:	2300      	movs	r3, #0
 800c450:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800c452:	2300      	movs	r3, #0
 800c454:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800c456:	7afb      	ldrb	r3, [r7, #11]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d005      	beq.n	800c468 <get_sequence_step_timeout+0x38>
 800c45c:	7afb      	ldrb	r3, [r7, #11]
 800c45e:	2b01      	cmp	r3, #1
 800c460:	d002      	beq.n	800c468 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800c462:	7afb      	ldrb	r3, [r7, #11]
 800c464:	2b02      	cmp	r3, #2
 800c466:	d127      	bne.n	800c4b8 <get_sequence_step_timeout+0x88>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c468:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800c46c:	461a      	mov	r2, r3
 800c46e:	2100      	movs	r1, #0
 800c470:	68f8      	ldr	r0, [r7, #12]
 800c472:	f7fd fa8d 	bl	8009990 <VL53L0X_GetVcselPulsePeriod>
 800c476:	4603      	mov	r3, r0
 800c478:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800c47c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800c480:	2b00      	cmp	r3, #0
 800c482:	d109      	bne.n	800c498 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800c484:	f107 0320 	add.w	r3, r7, #32
 800c488:	461a      	mov	r2, r3
 800c48a:	2146      	movs	r1, #70	@ 0x46
 800c48c:	68f8      	ldr	r0, [r7, #12]
 800c48e:	f001 fd89 	bl	800dfa4 <VL53L0X_RdByte>
 800c492:	4603      	mov	r3, r0
 800c494:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800c498:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c49c:	4618      	mov	r0, r3
 800c49e:	f7ff ff5d 	bl	800c35c <VL53L0X_decode_timeout>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	847b      	strh	r3, [r7, #34]	@ 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c4a6:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800c4aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	68f8      	ldr	r0, [r7, #12]
 800c4b0:	f7ff ff94 	bl	800c3dc <VL53L0X_calc_timeout_us>
 800c4b4:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c4b6:	e092      	b.n	800c5de <get_sequence_step_timeout+0x1ae>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800c4b8:	7afb      	ldrb	r3, [r7, #11]
 800c4ba:	2b03      	cmp	r3, #3
 800c4bc:	d135      	bne.n	800c52a <get_sequence_step_timeout+0xfa>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c4be:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800c4c2:	461a      	mov	r2, r3
 800c4c4:	2100      	movs	r1, #0
 800c4c6:	68f8      	ldr	r0, [r7, #12]
 800c4c8:	f7fd fa62 	bl	8009990 <VL53L0X_GetVcselPulsePeriod>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800c4d2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	f040 8081 	bne.w	800c5de <get_sequence_step_timeout+0x1ae>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c4dc:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	2100      	movs	r1, #0
 800c4e4:	68f8      	ldr	r0, [r7, #12]
 800c4e6:	f7fd fa53 	bl	8009990 <VL53L0X_GetVcselPulsePeriod>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800c4f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d109      	bne.n	800c50c <get_sequence_step_timeout+0xdc>
				Status = VL53L0X_RdWord(Dev,
 800c4f8:	f107 031e 	add.w	r3, r7, #30
 800c4fc:	461a      	mov	r2, r3
 800c4fe:	2151      	movs	r1, #81	@ 0x51
 800c500:	68f8      	ldr	r0, [r7, #12]
 800c502:	f001 fd79 	bl	800dff8 <VL53L0X_RdWord>
 800c506:	4603      	mov	r3, r0
 800c508:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c50c:	8bfb      	ldrh	r3, [r7, #30]
 800c50e:	4618      	mov	r0, r3
 800c510:	f7ff ff24 	bl	800c35c <VL53L0X_decode_timeout>
 800c514:	4603      	mov	r3, r0
 800c516:	84fb      	strh	r3, [r7, #38]	@ 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c518:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800c51c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c51e:	4619      	mov	r1, r3
 800c520:	68f8      	ldr	r0, [r7, #12]
 800c522:	f7ff ff5b 	bl	800c3dc <VL53L0X_calc_timeout_us>
 800c526:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c528:	e059      	b.n	800c5de <get_sequence_step_timeout+0x1ae>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800c52a:	7afb      	ldrb	r3, [r7, #11]
 800c52c:	2b04      	cmp	r3, #4
 800c52e:	d156      	bne.n	800c5de <get_sequence_step_timeout+0x1ae>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800c530:	f107 0314 	add.w	r3, r7, #20
 800c534:	4619      	mov	r1, r3
 800c536:	68f8      	ldr	r0, [r7, #12]
 800c538:	f7fd fb34 	bl	8009ba4 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800c53c:	2300      	movs	r3, #0
 800c53e:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800c540:	7dfb      	ldrb	r3, [r7, #23]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d01d      	beq.n	800c582 <get_sequence_step_timeout+0x152>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c546:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800c54a:	461a      	mov	r2, r3
 800c54c:	2100      	movs	r1, #0
 800c54e:	68f8      	ldr	r0, [r7, #12]
 800c550:	f7fd fa1e 	bl	8009990 <VL53L0X_GetVcselPulsePeriod>
 800c554:	4603      	mov	r3, r0
 800c556:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800c55a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d10f      	bne.n	800c582 <get_sequence_step_timeout+0x152>
				Status = VL53L0X_RdWord(Dev,
 800c562:	f107 031e 	add.w	r3, r7, #30
 800c566:	461a      	mov	r2, r3
 800c568:	2151      	movs	r1, #81	@ 0x51
 800c56a:	68f8      	ldr	r0, [r7, #12]
 800c56c:	f001 fd44 	bl	800dff8 <VL53L0X_RdWord>
 800c570:	4603      	mov	r3, r0
 800c572:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c576:	8bfb      	ldrh	r3, [r7, #30]
 800c578:	4618      	mov	r0, r3
 800c57a:	f7ff feef 	bl	800c35c <VL53L0X_decode_timeout>
 800c57e:	4603      	mov	r3, r0
 800c580:	84fb      	strh	r3, [r7, #38]	@ 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800c582:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800c586:	2b00      	cmp	r3, #0
 800c588:	d109      	bne.n	800c59e <get_sequence_step_timeout+0x16e>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c58a:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800c58e:	461a      	mov	r2, r3
 800c590:	2101      	movs	r1, #1
 800c592:	68f8      	ldr	r0, [r7, #12]
 800c594:	f7fd f9fc 	bl	8009990 <VL53L0X_GetVcselPulsePeriod>
 800c598:	4603      	mov	r3, r0
 800c59a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800c59e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d10f      	bne.n	800c5c6 <get_sequence_step_timeout+0x196>
			Status = VL53L0X_RdWord(Dev,
 800c5a6:	f107 031c 	add.w	r3, r7, #28
 800c5aa:	461a      	mov	r2, r3
 800c5ac:	2171      	movs	r1, #113	@ 0x71
 800c5ae:	68f8      	ldr	r0, [r7, #12]
 800c5b0:	f001 fd22 	bl	800dff8 <VL53L0X_RdWord>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c5ba:	8bbb      	ldrh	r3, [r7, #28]
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f7ff fecd 	bl	800c35c <VL53L0X_decode_timeout>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800c5c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c5c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c5ca:	1ad3      	subs	r3, r2, r3
 800c5cc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c5ce:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800c5d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c5d4:	4619      	mov	r1, r3
 800c5d6:	68f8      	ldr	r0, [r7, #12]
 800c5d8:	f7ff ff00 	bl	800c3dc <VL53L0X_calc_timeout_us>
 800c5dc:	62b8      	str	r0, [r7, #40]	@ 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c5e2:	601a      	str	r2, [r3, #0]

	return Status;
 800c5e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3730      	adds	r7, #48	@ 0x30
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}

0800c5f0 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b08a      	sub	sp, #40	@ 0x28
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	60f8      	str	r0, [r7, #12]
 800c5f8:	460b      	mov	r3, r1
 800c5fa:	607a      	str	r2, [r7, #4]
 800c5fc:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c5fe:	2300      	movs	r3, #0
 800c600:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800c604:	7afb      	ldrb	r3, [r7, #11]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d005      	beq.n	800c616 <set_sequence_step_timeout+0x26>
 800c60a:	7afb      	ldrb	r3, [r7, #11]
 800c60c:	2b01      	cmp	r3, #1
 800c60e:	d002      	beq.n	800c616 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800c610:	7afb      	ldrb	r3, [r7, #11]
 800c612:	2b02      	cmp	r3, #2
 800c614:	d138      	bne.n	800c688 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c616:	f107 031b 	add.w	r3, r7, #27
 800c61a:	461a      	mov	r2, r3
 800c61c:	2100      	movs	r1, #0
 800c61e:	68f8      	ldr	r0, [r7, #12]
 800c620:	f7fd f9b6 	bl	8009990 <VL53L0X_GetVcselPulsePeriod>
 800c624:	4603      	mov	r3, r0
 800c626:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800c62a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d11a      	bne.n	800c668 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800c632:	7efb      	ldrb	r3, [r7, #27]
 800c634:	461a      	mov	r2, r3
 800c636:	6879      	ldr	r1, [r7, #4]
 800c638:	68f8      	ldr	r0, [r7, #12]
 800c63a:	f7ff fea5 	bl	800c388 <VL53L0X_calc_timeout_mclks>
 800c63e:	4603      	mov	r3, r0
 800c640:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800c642:	8bbb      	ldrh	r3, [r7, #28]
 800c644:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c648:	d903      	bls.n	800c652 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800c64a:	23ff      	movs	r3, #255	@ 0xff
 800c64c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c650:	e004      	b.n	800c65c <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800c652:	8bbb      	ldrh	r3, [r7, #28]
 800c654:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800c656:	3b01      	subs	r3, #1
 800c658:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c65c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c660:	b29a      	uxth	r2, r3
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800c668:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	f040 80ab 	bne.w	800c7c8 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800c672:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c676:	461a      	mov	r2, r3
 800c678:	2146      	movs	r1, #70	@ 0x46
 800c67a:	68f8      	ldr	r0, [r7, #12]
 800c67c:	f001 fc10 	bl	800dea0 <VL53L0X_WrByte>
 800c680:	4603      	mov	r3, r0
 800c682:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800c686:	e09f      	b.n	800c7c8 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800c688:	7afb      	ldrb	r3, [r7, #11]
 800c68a:	2b03      	cmp	r3, #3
 800c68c:	d135      	bne.n	800c6fa <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800c68e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c692:	2b00      	cmp	r3, #0
 800c694:	d11b      	bne.n	800c6ce <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c696:	f107 031b 	add.w	r3, r7, #27
 800c69a:	461a      	mov	r2, r3
 800c69c:	2100      	movs	r1, #0
 800c69e:	68f8      	ldr	r0, [r7, #12]
 800c6a0:	f7fd f976 	bl	8009990 <VL53L0X_GetVcselPulsePeriod>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800c6aa:	7efb      	ldrb	r3, [r7, #27]
 800c6ac:	461a      	mov	r2, r3
 800c6ae:	6879      	ldr	r1, [r7, #4]
 800c6b0:	68f8      	ldr	r0, [r7, #12]
 800c6b2:	f7ff fe69 	bl	800c388 <VL53L0X_calc_timeout_mclks>
 800c6b6:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800c6b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800c6ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f7ff fe23 	bl	800c308 <VL53L0X_encode_timeout>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c6c6:	8b3a      	ldrh	r2, [r7, #24]
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800c6ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d108      	bne.n	800c6e8 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800c6d6:	8b3b      	ldrh	r3, [r7, #24]
 800c6d8:	461a      	mov	r2, r3
 800c6da:	2151      	movs	r1, #81	@ 0x51
 800c6dc:	68f8      	ldr	r0, [r7, #12]
 800c6de:	f001 fc03 	bl	800dee8 <VL53L0X_WrWord>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800c6e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d16b      	bne.n	800c7c8 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800c6f8:	e066      	b.n	800c7c8 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800c6fa:	7afb      	ldrb	r3, [r7, #11]
 800c6fc:	2b04      	cmp	r3, #4
 800c6fe:	d160      	bne.n	800c7c2 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800c700:	f107 0310 	add.w	r3, r7, #16
 800c704:	4619      	mov	r1, r3
 800c706:	68f8      	ldr	r0, [r7, #12]
 800c708:	f7fd fa4c 	bl	8009ba4 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800c70c:	2300      	movs	r3, #0
 800c70e:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800c710:	7cfb      	ldrb	r3, [r7, #19]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d01d      	beq.n	800c752 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c716:	f107 031b 	add.w	r3, r7, #27
 800c71a:	461a      	mov	r2, r3
 800c71c:	2100      	movs	r1, #0
 800c71e:	68f8      	ldr	r0, [r7, #12]
 800c720:	f7fd f936 	bl	8009990 <VL53L0X_GetVcselPulsePeriod>
 800c724:	4603      	mov	r3, r0
 800c726:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800c72a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d10f      	bne.n	800c752 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800c732:	f107 0318 	add.w	r3, r7, #24
 800c736:	461a      	mov	r2, r3
 800c738:	2151      	movs	r1, #81	@ 0x51
 800c73a:	68f8      	ldr	r0, [r7, #12]
 800c73c:	f001 fc5c 	bl	800dff8 <VL53L0X_RdWord>
 800c740:	4603      	mov	r3, r0
 800c742:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800c746:	8b3b      	ldrh	r3, [r7, #24]
 800c748:	4618      	mov	r0, r3
 800c74a:	f7ff fe07 	bl	800c35c <VL53L0X_decode_timeout>
 800c74e:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800c750:	84bb      	strh	r3, [r7, #36]	@ 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800c752:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c756:	2b00      	cmp	r3, #0
 800c758:	d109      	bne.n	800c76e <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c75a:	f107 031b 	add.w	r3, r7, #27
 800c75e:	461a      	mov	r2, r3
 800c760:	2101      	movs	r1, #1
 800c762:	68f8      	ldr	r0, [r7, #12]
 800c764:	f7fd f914 	bl	8009990 <VL53L0X_GetVcselPulsePeriod>
 800c768:	4603      	mov	r3, r0
 800c76a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800c76e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c772:	2b00      	cmp	r3, #0
 800c774:	d128      	bne.n	800c7c8 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800c776:	7efb      	ldrb	r3, [r7, #27]
 800c778:	461a      	mov	r2, r3
 800c77a:	6879      	ldr	r1, [r7, #4]
 800c77c:	68f8      	ldr	r0, [r7, #12]
 800c77e:	f7ff fe03 	bl	800c388 <VL53L0X_calc_timeout_mclks>
 800c782:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800c784:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c786:	6a3a      	ldr	r2, [r7, #32]
 800c788:	4413      	add	r3, r2
 800c78a:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800c78c:	6a38      	ldr	r0, [r7, #32]
 800c78e:	f7ff fdbb 	bl	800c308 <VL53L0X_encode_timeout>
 800c792:	4603      	mov	r3, r0
 800c794:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800c796:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d108      	bne.n	800c7b0 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800c79e:	8bfb      	ldrh	r3, [r7, #30]
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	2171      	movs	r1, #113	@ 0x71
 800c7a4:	68f8      	ldr	r0, [r7, #12]
 800c7a6:	f001 fb9f 	bl	800dee8 <VL53L0X_WrWord>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800c7b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d107      	bne.n	800c7c8 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	687a      	ldr	r2, [r7, #4]
 800c7bc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
 800c7c0:	e002      	b.n	800c7c8 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c7c2:	23fc      	movs	r3, #252	@ 0xfc
 800c7c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	}
	return Status;
 800c7c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	3728      	adds	r7, #40	@ 0x28
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	bd80      	pop	{r7, pc}

0800c7d4 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b08a      	sub	sp, #40	@ 0x28
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	460b      	mov	r3, r1
 800c7de:	70fb      	strb	r3, [r7, #3]
 800c7e0:	4613      	mov	r3, r2
 800c7e2:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800c7ea:	230c      	movs	r3, #12
 800c7ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800c7f0:	2312      	movs	r3, #18
 800c7f2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800c7f6:	2308      	movs	r3, #8
 800c7f8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800c7fc:	230e      	movs	r3, #14
 800c7fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800c802:	2300      	movs	r3, #0
 800c804:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800c806:	78bb      	ldrb	r3, [r7, #2]
 800c808:	f003 0301 	and.w	r3, r3, #1
 800c80c:	b2db      	uxtb	r3, r3
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d003      	beq.n	800c81a <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c812:	23fc      	movs	r3, #252	@ 0xfc
 800c814:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c818:	e020      	b.n	800c85c <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800c81a:	78fb      	ldrb	r3, [r7, #3]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d10d      	bne.n	800c83c <VL53L0X_set_vcsel_pulse_period+0x68>
 800c820:	78ba      	ldrb	r2, [r7, #2]
 800c822:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c826:	429a      	cmp	r2, r3
 800c828:	d304      	bcc.n	800c834 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800c82a:	78ba      	ldrb	r2, [r7, #2]
 800c82c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c830:	429a      	cmp	r2, r3
 800c832:	d903      	bls.n	800c83c <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c834:	23fc      	movs	r3, #252	@ 0xfc
 800c836:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c83a:	e00f      	b.n	800c85c <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800c83c:	78fb      	ldrb	r3, [r7, #3]
 800c83e:	2b01      	cmp	r3, #1
 800c840:	d10c      	bne.n	800c85c <VL53L0X_set_vcsel_pulse_period+0x88>
 800c842:	78ba      	ldrb	r2, [r7, #2]
 800c844:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c848:	429a      	cmp	r2, r3
 800c84a:	d304      	bcc.n	800c856 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800c84c:	78ba      	ldrb	r2, [r7, #2]
 800c84e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c852:	429a      	cmp	r2, r3
 800c854:	d902      	bls.n	800c85c <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c856:	23fc      	movs	r3, #252	@ 0xfc
 800c858:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800c85c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c860:	2b00      	cmp	r3, #0
 800c862:	d002      	beq.n	800c86a <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800c864:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c868:	e237      	b.n	800ccda <VL53L0X_set_vcsel_pulse_period+0x506>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800c86a:	78fb      	ldrb	r3, [r7, #3]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d150      	bne.n	800c912 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800c870:	78bb      	ldrb	r3, [r7, #2]
 800c872:	2b0c      	cmp	r3, #12
 800c874:	d110      	bne.n	800c898 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800c876:	2218      	movs	r2, #24
 800c878:	2157      	movs	r1, #87	@ 0x57
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f001 fb10 	bl	800dea0 <VL53L0X_WrByte>
 800c880:	4603      	mov	r3, r0
 800c882:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800c886:	2208      	movs	r2, #8
 800c888:	2156      	movs	r1, #86	@ 0x56
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f001 fb08 	bl	800dea0 <VL53L0X_WrByte>
 800c890:	4603      	mov	r3, r0
 800c892:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c896:	e17f      	b.n	800cb98 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800c898:	78bb      	ldrb	r3, [r7, #2]
 800c89a:	2b0e      	cmp	r3, #14
 800c89c:	d110      	bne.n	800c8c0 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800c89e:	2230      	movs	r2, #48	@ 0x30
 800c8a0:	2157      	movs	r1, #87	@ 0x57
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f001 fafc 	bl	800dea0 <VL53L0X_WrByte>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800c8ae:	2208      	movs	r2, #8
 800c8b0:	2156      	movs	r1, #86	@ 0x56
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f001 faf4 	bl	800dea0 <VL53L0X_WrByte>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c8be:	e16b      	b.n	800cb98 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800c8c0:	78bb      	ldrb	r3, [r7, #2]
 800c8c2:	2b10      	cmp	r3, #16
 800c8c4:	d110      	bne.n	800c8e8 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800c8c6:	2240      	movs	r2, #64	@ 0x40
 800c8c8:	2157      	movs	r1, #87	@ 0x57
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f001 fae8 	bl	800dea0 <VL53L0X_WrByte>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800c8d6:	2208      	movs	r2, #8
 800c8d8:	2156      	movs	r1, #86	@ 0x56
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f001 fae0 	bl	800dea0 <VL53L0X_WrByte>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c8e6:	e157      	b.n	800cb98 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800c8e8:	78bb      	ldrb	r3, [r7, #2]
 800c8ea:	2b12      	cmp	r3, #18
 800c8ec:	f040 8154 	bne.w	800cb98 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800c8f0:	2250      	movs	r2, #80	@ 0x50
 800c8f2:	2157      	movs	r1, #87	@ 0x57
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f001 fad3 	bl	800dea0 <VL53L0X_WrByte>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800c900:	2208      	movs	r2, #8
 800c902:	2156      	movs	r1, #86	@ 0x56
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f001 facb 	bl	800dea0 <VL53L0X_WrByte>
 800c90a:	4603      	mov	r3, r0
 800c90c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c910:	e142      	b.n	800cb98 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800c912:	78fb      	ldrb	r3, [r7, #3]
 800c914:	2b01      	cmp	r3, #1
 800c916:	f040 813f 	bne.w	800cb98 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800c91a:	78bb      	ldrb	r3, [r7, #2]
 800c91c:	2b08      	cmp	r3, #8
 800c91e:	d14c      	bne.n	800c9ba <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800c920:	2210      	movs	r2, #16
 800c922:	2148      	movs	r1, #72	@ 0x48
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f001 fabb 	bl	800dea0 <VL53L0X_WrByte>
 800c92a:	4603      	mov	r3, r0
 800c92c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800c930:	2208      	movs	r2, #8
 800c932:	2147      	movs	r1, #71	@ 0x47
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f001 fab3 	bl	800dea0 <VL53L0X_WrByte>
 800c93a:	4603      	mov	r3, r0
 800c93c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800c940:	2202      	movs	r2, #2
 800c942:	2132      	movs	r1, #50	@ 0x32
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f001 faab 	bl	800dea0 <VL53L0X_WrByte>
 800c94a:	4603      	mov	r3, r0
 800c94c:	461a      	mov	r2, r3
 800c94e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c952:	4313      	orrs	r3, r2
 800c954:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800c958:	220c      	movs	r2, #12
 800c95a:	2130      	movs	r1, #48	@ 0x30
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f001 fa9f 	bl	800dea0 <VL53L0X_WrByte>
 800c962:	4603      	mov	r3, r0
 800c964:	461a      	mov	r2, r3
 800c966:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c96a:	4313      	orrs	r3, r2
 800c96c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c970:	2201      	movs	r2, #1
 800c972:	21ff      	movs	r1, #255	@ 0xff
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f001 fa93 	bl	800dea0 <VL53L0X_WrByte>
 800c97a:	4603      	mov	r3, r0
 800c97c:	461a      	mov	r2, r3
 800c97e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c982:	4313      	orrs	r3, r2
 800c984:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 800c988:	2230      	movs	r2, #48	@ 0x30
 800c98a:	2130      	movs	r1, #48	@ 0x30
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f001 fa87 	bl	800dea0 <VL53L0X_WrByte>
 800c992:	4603      	mov	r3, r0
 800c994:	461a      	mov	r2, r3
 800c996:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c99a:	4313      	orrs	r3, r2
 800c99c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	21ff      	movs	r1, #255	@ 0xff
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f001 fa7b 	bl	800dea0 <VL53L0X_WrByte>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	461a      	mov	r2, r3
 800c9ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c9b2:	4313      	orrs	r3, r2
 800c9b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c9b8:	e0ee      	b.n	800cb98 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800c9ba:	78bb      	ldrb	r3, [r7, #2]
 800c9bc:	2b0a      	cmp	r3, #10
 800c9be:	d14c      	bne.n	800ca5a <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800c9c0:	2228      	movs	r2, #40	@ 0x28
 800c9c2:	2148      	movs	r1, #72	@ 0x48
 800c9c4:	6878      	ldr	r0, [r7, #4]
 800c9c6:	f001 fa6b 	bl	800dea0 <VL53L0X_WrByte>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800c9d0:	2208      	movs	r2, #8
 800c9d2:	2147      	movs	r1, #71	@ 0x47
 800c9d4:	6878      	ldr	r0, [r7, #4]
 800c9d6:	f001 fa63 	bl	800dea0 <VL53L0X_WrByte>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800c9e0:	2203      	movs	r2, #3
 800c9e2:	2132      	movs	r1, #50	@ 0x32
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f001 fa5b 	bl	800dea0 <VL53L0X_WrByte>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800c9f8:	2209      	movs	r2, #9
 800c9fa:	2130      	movs	r1, #48	@ 0x30
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f001 fa4f 	bl	800dea0 <VL53L0X_WrByte>
 800ca02:	4603      	mov	r3, r0
 800ca04:	461a      	mov	r2, r3
 800ca06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800ca10:	2201      	movs	r2, #1
 800ca12:	21ff      	movs	r1, #255	@ 0xff
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f001 fa43 	bl	800dea0 <VL53L0X_WrByte>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	461a      	mov	r2, r3
 800ca1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca22:	4313      	orrs	r3, r2
 800ca24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 800ca28:	2220      	movs	r2, #32
 800ca2a:	2130      	movs	r1, #48	@ 0x30
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f001 fa37 	bl	800dea0 <VL53L0X_WrByte>
 800ca32:	4603      	mov	r3, r0
 800ca34:	461a      	mov	r2, r3
 800ca36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca3a:	4313      	orrs	r3, r2
 800ca3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ca40:	2200      	movs	r2, #0
 800ca42:	21ff      	movs	r1, #255	@ 0xff
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f001 fa2b 	bl	800dea0 <VL53L0X_WrByte>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	461a      	mov	r2, r3
 800ca4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca52:	4313      	orrs	r3, r2
 800ca54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ca58:	e09e      	b.n	800cb98 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800ca5a:	78bb      	ldrb	r3, [r7, #2]
 800ca5c:	2b0c      	cmp	r3, #12
 800ca5e:	d14c      	bne.n	800cafa <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800ca60:	2238      	movs	r2, #56	@ 0x38
 800ca62:	2148      	movs	r1, #72	@ 0x48
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f001 fa1b 	bl	800dea0 <VL53L0X_WrByte>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800ca70:	2208      	movs	r2, #8
 800ca72:	2147      	movs	r1, #71	@ 0x47
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f001 fa13 	bl	800dea0 <VL53L0X_WrByte>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800ca80:	2203      	movs	r2, #3
 800ca82:	2132      	movs	r1, #50	@ 0x32
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f001 fa0b 	bl	800dea0 <VL53L0X_WrByte>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	461a      	mov	r2, r3
 800ca8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca92:	4313      	orrs	r3, r2
 800ca94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800ca98:	2208      	movs	r2, #8
 800ca9a:	2130      	movs	r1, #48	@ 0x30
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f001 f9ff 	bl	800dea0 <VL53L0X_WrByte>
 800caa2:	4603      	mov	r3, r0
 800caa4:	461a      	mov	r2, r3
 800caa6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800caaa:	4313      	orrs	r3, r2
 800caac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800cab0:	2201      	movs	r2, #1
 800cab2:	21ff      	movs	r1, #255	@ 0xff
 800cab4:	6878      	ldr	r0, [r7, #4]
 800cab6:	f001 f9f3 	bl	800dea0 <VL53L0X_WrByte>
 800caba:	4603      	mov	r3, r0
 800cabc:	461a      	mov	r2, r3
 800cabe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cac2:	4313      	orrs	r3, r2
 800cac4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 800cac8:	2220      	movs	r2, #32
 800caca:	2130      	movs	r1, #48	@ 0x30
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f001 f9e7 	bl	800dea0 <VL53L0X_WrByte>
 800cad2:	4603      	mov	r3, r0
 800cad4:	461a      	mov	r2, r3
 800cad6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cada:	4313      	orrs	r3, r2
 800cadc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800cae0:	2200      	movs	r2, #0
 800cae2:	21ff      	movs	r1, #255	@ 0xff
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f001 f9db 	bl	800dea0 <VL53L0X_WrByte>
 800caea:	4603      	mov	r3, r0
 800caec:	461a      	mov	r2, r3
 800caee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800caf2:	4313      	orrs	r3, r2
 800caf4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800caf8:	e04e      	b.n	800cb98 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800cafa:	78bb      	ldrb	r3, [r7, #2]
 800cafc:	2b0e      	cmp	r3, #14
 800cafe:	d14b      	bne.n	800cb98 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800cb00:	2248      	movs	r2, #72	@ 0x48
 800cb02:	2148      	movs	r1, #72	@ 0x48
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f001 f9cb 	bl	800dea0 <VL53L0X_WrByte>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800cb10:	2208      	movs	r2, #8
 800cb12:	2147      	movs	r1, #71	@ 0x47
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f001 f9c3 	bl	800dea0 <VL53L0X_WrByte>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800cb20:	2203      	movs	r2, #3
 800cb22:	2132      	movs	r1, #50	@ 0x32
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f001 f9bb 	bl	800dea0 <VL53L0X_WrByte>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	461a      	mov	r2, r3
 800cb2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb32:	4313      	orrs	r3, r2
 800cb34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800cb38:	2207      	movs	r2, #7
 800cb3a:	2130      	movs	r1, #48	@ 0x30
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f001 f9af 	bl	800dea0 <VL53L0X_WrByte>
 800cb42:	4603      	mov	r3, r0
 800cb44:	461a      	mov	r2, r3
 800cb46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb4a:	4313      	orrs	r3, r2
 800cb4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800cb50:	2201      	movs	r2, #1
 800cb52:	21ff      	movs	r1, #255	@ 0xff
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f001 f9a3 	bl	800dea0 <VL53L0X_WrByte>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	461a      	mov	r2, r3
 800cb5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb62:	4313      	orrs	r3, r2
 800cb64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 800cb68:	2220      	movs	r2, #32
 800cb6a:	2130      	movs	r1, #48	@ 0x30
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f001 f997 	bl	800dea0 <VL53L0X_WrByte>
 800cb72:	4603      	mov	r3, r0
 800cb74:	461a      	mov	r2, r3
 800cb76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb7a:	4313      	orrs	r3, r2
 800cb7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800cb80:	2200      	movs	r2, #0
 800cb82:	21ff      	movs	r1, #255	@ 0xff
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f001 f98b 	bl	800dea0 <VL53L0X_WrByte>
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb92:	4313      	orrs	r3, r2
 800cb94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800cb98:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d17e      	bne.n	800cc9e <VL53L0X_set_vcsel_pulse_period+0x4ca>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800cba0:	78bb      	ldrb	r3, [r7, #2]
 800cba2:	4618      	mov	r0, r3
 800cba4:	f7fe fe3b 	bl	800b81e <VL53L0X_encode_vcsel_period>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800cbae:	78fb      	ldrb	r3, [r7, #3]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d002      	beq.n	800cbba <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800cbb4:	2b01      	cmp	r3, #1
 800cbb6:	d045      	beq.n	800cc44 <VL53L0X_set_vcsel_pulse_period+0x470>
 800cbb8:	e06e      	b.n	800cc98 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800cbba:	f107 0314 	add.w	r3, r7, #20
 800cbbe:	461a      	mov	r2, r3
 800cbc0:	2103      	movs	r1, #3
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f7ff fc34 	bl	800c430 <get_sequence_step_timeout>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800cbce:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d109      	bne.n	800cbea <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800cbd6:	f107 0310 	add.w	r3, r7, #16
 800cbda:	461a      	mov	r2, r3
 800cbdc:	2102      	movs	r1, #2
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f7ff fc26 	bl	800c430 <get_sequence_step_timeout>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800cbea:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d109      	bne.n	800cc06 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800cbf2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	2150      	movs	r1, #80	@ 0x50
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f001 f950 	bl	800dea0 <VL53L0X_WrByte>
 800cc00:	4603      	mov	r3, r0
 800cc02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800cc06:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d108      	bne.n	800cc20 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	461a      	mov	r2, r3
 800cc12:	2103      	movs	r1, #3
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f7ff fceb 	bl	800c5f0 <set_sequence_step_timeout>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800cc20:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d108      	bne.n	800cc3a <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	461a      	mov	r2, r3
 800cc2c:	2102      	movs	r1, #2
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f7ff fcde 	bl	800c5f0 <set_sequence_step_timeout>
 800cc34:	4603      	mov	r3, r0
 800cc36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	78ba      	ldrb	r2, [r7, #2]
 800cc3e:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800cc42:	e02c      	b.n	800cc9e <VL53L0X_set_vcsel_pulse_period+0x4ca>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800cc44:	f107 0318 	add.w	r3, r7, #24
 800cc48:	461a      	mov	r2, r3
 800cc4a:	2104      	movs	r1, #4
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f7ff fbef 	bl	800c430 <get_sequence_step_timeout>
 800cc52:	4603      	mov	r3, r0
 800cc54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800cc58:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d109      	bne.n	800cc74 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800cc60:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800cc64:	461a      	mov	r2, r3
 800cc66:	2170      	movs	r1, #112	@ 0x70
 800cc68:	6878      	ldr	r0, [r7, #4]
 800cc6a:	f001 f919 	bl	800dea0 <VL53L0X_WrByte>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800cc74:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d108      	bne.n	800cc8e <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800cc7c:	69bb      	ldr	r3, [r7, #24]
 800cc7e:	461a      	mov	r2, r3
 800cc80:	2104      	movs	r1, #4
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f7ff fcb4 	bl	800c5f0 <set_sequence_step_timeout>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	78ba      	ldrb	r2, [r7, #2]
 800cc92:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800cc96:	e002      	b.n	800cc9e <VL53L0X_set_vcsel_pulse_period+0x4ca>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cc98:	23fc      	movs	r3, #252	@ 0xfc
 800cc9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
	}

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800cc9e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d109      	bne.n	800ccba <VL53L0X_set_vcsel_pulse_period+0x4e6>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	695b      	ldr	r3, [r3, #20]
 800ccaa:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800ccac:	69f9      	ldr	r1, [r7, #28]
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f7fc fe30 	bl	8009914 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800ccba:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d109      	bne.n	800ccd6 <VL53L0X_set_vcsel_pulse_period+0x502>
		Status = VL53L0X_perform_phase_calibration(
 800ccc2:	f107 010f 	add.w	r1, r7, #15
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	2200      	movs	r2, #0
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f7fe fcc2 	bl	800b654 <VL53L0X_perform_phase_calibration>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800ccd6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3728      	adds	r7, #40	@ 0x28
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}

0800cce2 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800cce2:	b580      	push	{r7, lr}
 800cce4:	b086      	sub	sp, #24
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	60f8      	str	r0, [r7, #12]
 800ccea:	460b      	mov	r3, r1
 800ccec:	607a      	str	r2, [r7, #4]
 800ccee:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800ccf4:	7afb      	ldrb	r3, [r7, #11]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d002      	beq.n	800cd00 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800ccfa:	2b01      	cmp	r3, #1
 800ccfc:	d00a      	beq.n	800cd14 <VL53L0X_get_vcsel_pulse_period+0x32>
 800ccfe:	e013      	b.n	800cd28 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800cd00:	f107 0316 	add.w	r3, r7, #22
 800cd04:	461a      	mov	r2, r3
 800cd06:	2150      	movs	r1, #80	@ 0x50
 800cd08:	68f8      	ldr	r0, [r7, #12]
 800cd0a:	f001 f94b 	bl	800dfa4 <VL53L0X_RdByte>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800cd12:	e00b      	b.n	800cd2c <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800cd14:	f107 0316 	add.w	r3, r7, #22
 800cd18:	461a      	mov	r2, r3
 800cd1a:	2170      	movs	r1, #112	@ 0x70
 800cd1c:	68f8      	ldr	r0, [r7, #12]
 800cd1e:	f001 f941 	bl	800dfa4 <VL53L0X_RdByte>
 800cd22:	4603      	mov	r3, r0
 800cd24:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800cd26:	e001      	b.n	800cd2c <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cd28:	23fc      	movs	r3, #252	@ 0xfc
 800cd2a:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800cd2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d107      	bne.n	800cd44 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800cd34:	7dbb      	ldrb	r3, [r7, #22]
 800cd36:	4618      	mov	r0, r3
 800cd38:	f7fe fd5e 	bl	800b7f8 <VL53L0X_decode_vcsel_period>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	701a      	strb	r2, [r3, #0]

	return Status;
 800cd44:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3718      	adds	r7, #24
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}

0800cd50 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b092      	sub	sp, #72	@ 0x48
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
 800cd58:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800cd60:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800cd64:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800cd66:	f240 7376 	movw	r3, #1910	@ 0x776
 800cd6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800cd6c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800cd70:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800cd72:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800cd76:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800cd78:	f240 234e 	movw	r3, #590	@ 0x24e
 800cd7c:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800cd7e:	f240 23b2 	movw	r3, #690	@ 0x2b2
 800cd82:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800cd84:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800cd88:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800cd8a:	f240 2326 	movw	r3, #550	@ 0x226
 800cd8e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800cd90:	2300      	movs	r3, #0
 800cd92:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800cd94:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800cd98:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800cd9e:	683a      	ldr	r2, [r7, #0]
 800cda0:	6a3b      	ldr	r3, [r7, #32]
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d205      	bcs.n	800cdb2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cda6:	23fc      	movs	r3, #252	@ 0xfc
 800cda8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		return Status;
 800cdac:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800cdb0:	e0aa      	b.n	800cf08 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800cdb2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cdb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cdb6:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800cdb8:	683a      	ldr	r2, [r7, #0]
 800cdba:	1ad3      	subs	r3, r2, r3
 800cdbc:	643b      	str	r3, [r7, #64]	@ 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800cdbe:	f107 0314 	add.w	r3, r7, #20
 800cdc2:	4619      	mov	r1, r3
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f7fc feed 	bl	8009ba4 <VL53L0X_GetSequenceStepEnables>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800cdd0:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d15b      	bne.n	800ce90 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800cdd8:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d105      	bne.n	800cdea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800cdde:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d102      	bne.n	800cdea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800cde4:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d052      	beq.n	800ce90 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800cdea:	f107 0310 	add.w	r3, r7, #16
 800cdee:	461a      	mov	r2, r3
 800cdf0:	2102      	movs	r1, #2
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f7ff fb1c 	bl	800c430 <get_sequence_step_timeout>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800cdfe:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d002      	beq.n	800ce0c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800ce06:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800ce0a:	e07d      	b.n	800cf08 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800ce0c:	7d3b      	ldrb	r3, [r7, #20]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d00f      	beq.n	800ce32 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800ce12:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800ce14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce16:	4413      	add	r3, r2
 800ce18:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800ce1a:	69fa      	ldr	r2, [r7, #28]
 800ce1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	d204      	bcs.n	800ce2c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800ce22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ce24:	69fb      	ldr	r3, [r7, #28]
 800ce26:	1ad3      	subs	r3, r2, r3
 800ce28:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce2a:	e002      	b.n	800ce32 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ce2c:	23fc      	movs	r3, #252	@ 0xfc
 800ce2e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800ce32:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d002      	beq.n	800ce40 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800ce3a:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800ce3e:	e063      	b.n	800cf08 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800ce40:	7dbb      	ldrb	r3, [r7, #22]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d011      	beq.n	800ce6a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800ce46:	693a      	ldr	r2, [r7, #16]
 800ce48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce4a:	4413      	add	r3, r2
 800ce4c:	005b      	lsls	r3, r3, #1
 800ce4e:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ce50:	69fa      	ldr	r2, [r7, #28]
 800ce52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce54:	429a      	cmp	r2, r3
 800ce56:	d204      	bcs.n	800ce62 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800ce58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ce5a:	69fb      	ldr	r3, [r7, #28]
 800ce5c:	1ad3      	subs	r3, r2, r3
 800ce5e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce60:	e016      	b.n	800ce90 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ce62:	23fc      	movs	r3, #252	@ 0xfc
 800ce64:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800ce68:	e012      	b.n	800ce90 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800ce6a:	7d7b      	ldrb	r3, [r7, #21]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d00f      	beq.n	800ce90 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800ce70:	693b      	ldr	r3, [r7, #16]
 800ce72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ce74:	4413      	add	r3, r2
 800ce76:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ce78:	69fa      	ldr	r2, [r7, #28]
 800ce7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d204      	bcs.n	800ce8a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800ce80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ce82:	69fb      	ldr	r3, [r7, #28]
 800ce84:	1ad3      	subs	r3, r2, r3
 800ce86:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce88:	e002      	b.n	800ce90 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ce8a:	23fc      	movs	r3, #252	@ 0xfc
 800ce8c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800ce90:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d002      	beq.n	800ce9e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800ce98:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800ce9c:	e034      	b.n	800cf08 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800ce9e:	7dfb      	ldrb	r3, [r7, #23]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d019      	beq.n	800ced8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800cea4:	f107 030c 	add.w	r3, r7, #12
 800cea8:	461a      	mov	r2, r3
 800ceaa:	2103      	movs	r1, #3
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f7ff fabf 	bl	800c430 <get_sequence_step_timeout>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cebc:	4413      	add	r3, r2
 800cebe:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800cec0:	69fa      	ldr	r2, [r7, #28]
 800cec2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d204      	bcs.n	800ced2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800cec8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ceca:	69fb      	ldr	r3, [r7, #28]
 800cecc:	1ad3      	subs	r3, r2, r3
 800cece:	643b      	str	r3, [r7, #64]	@ 0x40
 800ced0:	e002      	b.n	800ced8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ced2:	23fc      	movs	r3, #252	@ 0xfc
 800ced4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800ced8:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d111      	bne.n	800cf04 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800cee0:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d00e      	beq.n	800cf04 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800cee6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceea:	1ad3      	subs	r3, r2, r3
 800ceec:	643b      	str	r3, [r7, #64]	@ 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800ceee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cef0:	2104      	movs	r1, #4
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	f7ff fb7c 	bl	800c5f0 <set_sequence_step_timeout>
 800cef8:	4603      	mov	r3, r0
 800cefa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	683a      	ldr	r2, [r7, #0]
 800cf02:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800cf04:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	3748      	adds	r7, #72	@ 0x48
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd80      	pop	{r7, pc}

0800cf10 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b090      	sub	sp, #64	@ 0x40
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800cf20:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800cf24:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800cf26:	f240 7376 	movw	r3, #1910	@ 0x776
 800cf2a:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800cf2c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800cf30:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800cf32:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800cf36:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800cf38:	f240 234e 	movw	r3, #590	@ 0x24e
 800cf3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800cf3e:	f240 23b2 	movw	r3, #690	@ 0x2b2
 800cf42:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800cf44:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800cf48:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800cf4a:	f240 2326 	movw	r3, #550	@ 0x226
 800cf4e:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800cf50:	2300      	movs	r3, #0
 800cf52:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800cf54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cf56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf58:	441a      	add	r2, r3
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800cf5e:	f107 0318 	add.w	r3, r7, #24
 800cf62:	4619      	mov	r1, r3
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f7fc fe1d 	bl	8009ba4 <VL53L0X_GetSequenceStepEnables>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800cf70:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d002      	beq.n	800cf7e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800cf78:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800cf7c:	e075      	b.n	800d06a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800cf7e:	7e3b      	ldrb	r3, [r7, #24]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d105      	bne.n	800cf90 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800cf84:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d102      	bne.n	800cf90 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800cf8a:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d030      	beq.n	800cff2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800cf90:	f107 0310 	add.w	r3, r7, #16
 800cf94:	461a      	mov	r2, r3
 800cf96:	2102      	movs	r1, #2
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f7ff fa49 	bl	800c430 <get_sequence_step_timeout>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800cfa4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d122      	bne.n	800cff2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800cfac:	7e3b      	ldrb	r3, [r7, #24]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d007      	beq.n	800cfc2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800cfb6:	6939      	ldr	r1, [r7, #16]
 800cfb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfba:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800cfbc:	441a      	add	r2, r3
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800cfc2:	7ebb      	ldrb	r3, [r7, #26]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d009      	beq.n	800cfdc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800cfcc:	6939      	ldr	r1, [r7, #16]
 800cfce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfd0:	440b      	add	r3, r1
 800cfd2:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800cfd4:	441a      	add	r2, r3
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	601a      	str	r2, [r3, #0]
 800cfda:	e00a      	b.n	800cff2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800cfdc:	7e7b      	ldrb	r3, [r7, #25]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d007      	beq.n	800cff2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800cfe6:	6939      	ldr	r1, [r7, #16]
 800cfe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfea:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800cfec:	441a      	add	r2, r3
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800cff2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d114      	bne.n	800d024 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800cffa:	7efb      	ldrb	r3, [r7, #27]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d011      	beq.n	800d024 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800d000:	f107 030c 	add.w	r3, r7, #12
 800d004:	461a      	mov	r2, r3
 800d006:	2103      	movs	r1, #3
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f7ff fa11 	bl	800c430 <get_sequence_step_timeout>
 800d00e:	4603      	mov	r3, r0
 800d010:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800d018:	68f9      	ldr	r1, [r7, #12]
 800d01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d01c:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800d01e:	441a      	add	r2, r3
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d024:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d114      	bne.n	800d056 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800d02c:	7f3b      	ldrb	r3, [r7, #28]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d011      	beq.n	800d056 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800d032:	f107 0314 	add.w	r3, r7, #20
 800d036:	461a      	mov	r2, r3
 800d038:	2104      	movs	r1, #4
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f7ff f9f8 	bl	800c430 <get_sequence_step_timeout>
 800d040:	4603      	mov	r3, r0
 800d042:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800d04a:	6979      	ldr	r1, [r7, #20]
 800d04c:	6a3b      	ldr	r3, [r7, #32]
 800d04e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800d050:	441a      	add	r2, r3
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d056:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d103      	bne.n	800d066 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	681a      	ldr	r2, [r3, #0]
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d066:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800d06a:	4618      	mov	r0, r3
 800d06c:	3740      	adds	r7, #64	@ 0x40
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}
	...

0800d074 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b088      	sub	sp, #32
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
 800d07c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d07e:	2300      	movs	r3, #0
 800d080:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800d082:	2300      	movs	r3, #0
 800d084:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800d086:	e0c6      	b.n	800d216 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800d088:	697b      	ldr	r3, [r7, #20]
 800d08a:	683a      	ldr	r2, [r7, #0]
 800d08c:	4413      	add	r3, r2
 800d08e:	781b      	ldrb	r3, [r3, #0]
 800d090:	74fb      	strb	r3, [r7, #19]
		Index++;
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	3301      	adds	r3, #1
 800d096:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800d098:	7cfb      	ldrb	r3, [r7, #19]
 800d09a:	2bff      	cmp	r3, #255	@ 0xff
 800d09c:	f040 808d 	bne.w	800d1ba <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	683a      	ldr	r2, [r7, #0]
 800d0a4:	4413      	add	r3, r2
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	747b      	strb	r3, [r7, #17]
			Index++;
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	3301      	adds	r3, #1
 800d0ae:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800d0b0:	7c7b      	ldrb	r3, [r7, #17]
 800d0b2:	2b03      	cmp	r3, #3
 800d0b4:	d87e      	bhi.n	800d1b4 <VL53L0X_load_tuning_settings+0x140>
 800d0b6:	a201      	add	r2, pc, #4	@ (adr r2, 800d0bc <VL53L0X_load_tuning_settings+0x48>)
 800d0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0bc:	0800d0cd 	.word	0x0800d0cd
 800d0c0:	0800d107 	.word	0x0800d107
 800d0c4:	0800d141 	.word	0x0800d141
 800d0c8:	0800d17b 	.word	0x0800d17b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d0cc:	697b      	ldr	r3, [r7, #20]
 800d0ce:	683a      	ldr	r2, [r7, #0]
 800d0d0:	4413      	add	r3, r2
 800d0d2:	781b      	ldrb	r3, [r3, #0]
 800d0d4:	743b      	strb	r3, [r7, #16]
				Index++;
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	3301      	adds	r3, #1
 800d0da:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	683a      	ldr	r2, [r7, #0]
 800d0e0:	4413      	add	r3, r2
 800d0e2:	781b      	ldrb	r3, [r3, #0]
 800d0e4:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	3301      	adds	r3, #1
 800d0ea:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d0ec:	7c3b      	ldrb	r3, [r7, #16]
 800d0ee:	b29b      	uxth	r3, r3
 800d0f0:	021b      	lsls	r3, r3, #8
 800d0f2:	b29a      	uxth	r2, r3
 800d0f4:	7bfb      	ldrb	r3, [r7, #15]
 800d0f6:	b29b      	uxth	r3, r3
 800d0f8:	4413      	add	r3, r2
 800d0fa:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	89ba      	ldrh	r2, [r7, #12]
 800d100:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
				break;
 800d104:	e087      	b.n	800d216 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	683a      	ldr	r2, [r7, #0]
 800d10a:	4413      	add	r3, r2
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	743b      	strb	r3, [r7, #16]
				Index++;
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	3301      	adds	r3, #1
 800d114:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	683a      	ldr	r2, [r7, #0]
 800d11a:	4413      	add	r3, r2
 800d11c:	781b      	ldrb	r3, [r3, #0]
 800d11e:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	3301      	adds	r3, #1
 800d124:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d126:	7c3b      	ldrb	r3, [r7, #16]
 800d128:	b29b      	uxth	r3, r3
 800d12a:	021b      	lsls	r3, r3, #8
 800d12c:	b29a      	uxth	r2, r3
 800d12e:	7bfb      	ldrb	r3, [r7, #15]
 800d130:	b29b      	uxth	r3, r3
 800d132:	4413      	add	r3, r2
 800d134:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	89ba      	ldrh	r2, [r7, #12]
 800d13a:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
					Temp16);
				break;
 800d13e:	e06a      	b.n	800d216 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	683a      	ldr	r2, [r7, #0]
 800d144:	4413      	add	r3, r2
 800d146:	781b      	ldrb	r3, [r3, #0]
 800d148:	743b      	strb	r3, [r7, #16]
				Index++;
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	3301      	adds	r3, #1
 800d14e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	683a      	ldr	r2, [r7, #0]
 800d154:	4413      	add	r3, r2
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d15a:	697b      	ldr	r3, [r7, #20]
 800d15c:	3301      	adds	r3, #1
 800d15e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d160:	7c3b      	ldrb	r3, [r7, #16]
 800d162:	b29b      	uxth	r3, r3
 800d164:	021b      	lsls	r3, r3, #8
 800d166:	b29a      	uxth	r2, r3
 800d168:	7bfb      	ldrb	r3, [r7, #15]
 800d16a:	b29b      	uxth	r3, r3
 800d16c:	4413      	add	r3, r2
 800d16e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	89ba      	ldrh	r2, [r7, #12]
 800d174:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
				break;
 800d178:	e04d      	b.n	800d216 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	683a      	ldr	r2, [r7, #0]
 800d17e:	4413      	add	r3, r2
 800d180:	781b      	ldrb	r3, [r3, #0]
 800d182:	743b      	strb	r3, [r7, #16]
				Index++;
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	3301      	adds	r3, #1
 800d188:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	683a      	ldr	r2, [r7, #0]
 800d18e:	4413      	add	r3, r2
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	3301      	adds	r3, #1
 800d198:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d19a:	7c3b      	ldrb	r3, [r7, #16]
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	021b      	lsls	r3, r3, #8
 800d1a0:	b29a      	uxth	r2, r3
 800d1a2:	7bfb      	ldrb	r3, [r7, #15]
 800d1a4:	b29b      	uxth	r3, r3
 800d1a6:	4413      	add	r3, r2
 800d1a8:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	89ba      	ldrh	r2, [r7, #12]
 800d1ae:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c
				break;
 800d1b2:	e030      	b.n	800d216 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d1b4:	23fc      	movs	r3, #252	@ 0xfc
 800d1b6:	77fb      	strb	r3, [r7, #31]
 800d1b8:	e02d      	b.n	800d216 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800d1ba:	7cfb      	ldrb	r3, [r7, #19]
 800d1bc:	2b04      	cmp	r3, #4
 800d1be:	d828      	bhi.n	800d212 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	683a      	ldr	r2, [r7, #0]
 800d1c4:	4413      	add	r3, r2
 800d1c6:	781b      	ldrb	r3, [r3, #0]
 800d1c8:	74bb      	strb	r3, [r7, #18]
			Index++;
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	3301      	adds	r3, #1
 800d1ce:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	61bb      	str	r3, [r7, #24]
 800d1d4:	e00f      	b.n	800d1f6 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800d1d6:	697b      	ldr	r3, [r7, #20]
 800d1d8:	683a      	ldr	r2, [r7, #0]
 800d1da:	4413      	add	r3, r2
 800d1dc:	7819      	ldrb	r1, [r3, #0]
 800d1de:	f107 0208 	add.w	r2, r7, #8
 800d1e2:	69bb      	ldr	r3, [r7, #24]
 800d1e4:	4413      	add	r3, r2
 800d1e6:	460a      	mov	r2, r1
 800d1e8:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800d1ea:	697b      	ldr	r3, [r7, #20]
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800d1f0:	69bb      	ldr	r3, [r7, #24]
 800d1f2:	3301      	adds	r3, #1
 800d1f4:	61bb      	str	r3, [r7, #24]
 800d1f6:	7cfb      	ldrb	r3, [r7, #19]
 800d1f8:	69ba      	ldr	r2, [r7, #24]
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	dbeb      	blt.n	800d1d6 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800d1fe:	7cfb      	ldrb	r3, [r7, #19]
 800d200:	f107 0208 	add.w	r2, r7, #8
 800d204:	7cb9      	ldrb	r1, [r7, #18]
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 fdee 	bl	800dde8 <VL53L0X_WriteMulti>
 800d20c:	4603      	mov	r3, r0
 800d20e:	77fb      	strb	r3, [r7, #31]
 800d210:	e001      	b.n	800d216 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d212:	23fc      	movs	r3, #252	@ 0xfc
 800d214:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	683a      	ldr	r2, [r7, #0]
 800d21a:	4413      	add	r3, r2
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d004      	beq.n	800d22c <VL53L0X_load_tuning_settings+0x1b8>
 800d222:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d226:	2b00      	cmp	r3, #0
 800d228:	f43f af2e 	beq.w	800d088 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d22c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d230:	4618      	mov	r0, r3
 800d232:	3720      	adds	r7, #32
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}

0800d238 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b088      	sub	sp, #32
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	60f8      	str	r0, [r7, #12]
 800d240:	60b9      	str	r1, [r7, #8]
 800d242:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d244:	2300      	movs	r3, #0
 800d246:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2200      	movs	r2, #0
 800d24c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800d24e:	f107 0313 	add.w	r3, r7, #19
 800d252:	4619      	mov	r1, r3
 800d254:	68f8      	ldr	r0, [r7, #12]
 800d256:	f7fc fd31 	bl	8009cbc <VL53L0X_GetXTalkCompensationEnable>
 800d25a:	4603      	mov	r3, r0
 800d25c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800d25e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d111      	bne.n	800d28a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800d266:	7cfb      	ldrb	r3, [r7, #19]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d00e      	beq.n	800d28a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	6a1b      	ldr	r3, [r3, #32]
 800d270:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	8a9b      	ldrh	r3, [r3, #20]
 800d276:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800d278:	69bb      	ldr	r3, [r7, #24]
 800d27a:	fb02 f303 	mul.w	r3, r2, r3
 800d27e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	3380      	adds	r3, #128	@ 0x80
 800d284:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800d28a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3720      	adds	r7, #32
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}

0800d296 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800d296:	b580      	push	{r7, lr}
 800d298:	b086      	sub	sp, #24
 800d29a:	af00      	add	r7, sp, #0
 800d29c:	60f8      	str	r0, [r7, #12]
 800d29e:	60b9      	str	r1, [r7, #8]
 800d2a0:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800d2ae:	f107 0310 	add.w	r3, r7, #16
 800d2b2:	461a      	mov	r2, r3
 800d2b4:	68b9      	ldr	r1, [r7, #8]
 800d2b6:	68f8      	ldr	r0, [r7, #12]
 800d2b8:	f7ff ffbe 	bl	800d238 <VL53L0X_get_total_xtalk_rate>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800d2c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d105      	bne.n	800d2d4 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681a      	ldr	r2, [r3, #0]
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	441a      	add	r2, r3
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	601a      	str	r2, [r3, #0]

	return Status;
 800d2d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	3718      	adds	r7, #24
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}

0800d2e0 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b09a      	sub	sp, #104	@ 0x68
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	60f8      	str	r0, [r7, #12]
 800d2e8:	60b9      	str	r1, [r7, #8]
 800d2ea:	607a      	str	r2, [r7, #4]
 800d2ec:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800d2ee:	2312      	movs	r3, #18
 800d2f0:	657b      	str	r3, [r7, #84]	@ 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800d2f2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d2f6:	653b      	str	r3, [r7, #80]	@ 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800d2f8:	2342      	movs	r3, #66	@ 0x42
 800d2fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800d2fc:	2306      	movs	r3, #6
 800d2fe:	64bb      	str	r3, [r7, #72]	@ 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800d300:	2307      	movs	r3, #7
 800d302:	647b      	str	r3, [r7, #68]	@ 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d304:	2300      	movs	r3, #0
 800d306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	f8b3 3154 	ldrh.w	r3, [r3, #340]	@ 0x154
	dmaxCalRange_mm =
 800d310:	63fb      	str	r3, [r7, #60]	@ 0x3c

	dmaxCalSignalRateRtn_mcps =
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800d318:	63bb      	str	r3, [r7, #56]	@ 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800d31a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d31c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d31e:	fb02 f303 	mul.w	r3, r2, r3
 800d322:	637b      	str	r3, [r7, #52]	@ 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800d324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d326:	3380      	adds	r3, #128	@ 0x80
 800d328:	0a1b      	lsrs	r3, r3, #8
 800d32a:	637b      	str	r3, [r7, #52]	@ 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800d32c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d32e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d330:	fb02 f303 	mul.w	r3, r2, r3
 800d334:	637b      	str	r3, [r7, #52]	@ 0x34

	minSignalNeeded_p1 = 0;
 800d336:	2300      	movs	r3, #0
 800d338:	667b      	str	r3, [r7, #100]	@ 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d01a      	beq.n	800d376 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	029b      	lsls	r3, r3, #10
 800d344:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800d34a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d34c:	4413      	add	r3, r2
 800d34e:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800d350:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	fbb2 f3f3 	udiv	r3, r2, r3
 800d358:	667b      	str	r3, [r7, #100]	@ 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800d35a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d35c:	4613      	mov	r3, r2
 800d35e:	005b      	lsls	r3, r3, #1
 800d360:	4413      	add	r3, r2
 800d362:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800d364:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d366:	fb03 f303 	mul.w	r3, r3, r3
 800d36a:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800d36c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d36e:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800d372:	0c1b      	lsrs	r3, r3, #16
 800d374:	667b      	str	r3, [r7, #100]	@ 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800d37a:	fb02 f303 	mul.w	r3, r2, r3
 800d37e:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800d380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d382:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800d386:	0c1b      	lsrs	r3, r3, #16
 800d388:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800d38a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d38c:	fb03 f303 	mul.w	r3, r3, r3
 800d390:	62fb      	str	r3, [r7, #44]	@ 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800d392:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d394:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800d398:	0c1b      	lsrs	r3, r3, #16
 800d39a:	62bb      	str	r3, [r7, #40]	@ 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800d39c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d39e:	085a      	lsrs	r2, r3, #1
 800d3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3a2:	441a      	add	r2, r3
 800d3a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d3a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3aa:	62bb      	str	r3, [r7, #40]	@ 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800d3ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d3b0:	fb02 f303 	mul.w	r3, r2, r3
 800d3b4:	62bb      	str	r3, [r7, #40]	@ 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800d3b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d3bc:	d302      	bcc.n	800d3c4 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800d3be:	4b54      	ldr	r3, [pc, #336]	@ (800d510 <VL53L0X_calc_dmax+0x230>)
 800d3c0:	663b      	str	r3, [r7, #96]	@ 0x60
 800d3c2:	e015      	b.n	800d3f0 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800d3c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d3c6:	085a      	lsrs	r2, r3, #1
 800d3c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d3ca:	441a      	add	r2, r3
 800d3cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d3ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3d2:	677b      	str	r3, [r7, #116]	@ 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800d3d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d3d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d3d8:	fb02 f303 	mul.w	r3, r2, r3
 800d3dc:	677b      	str	r3, [r7, #116]	@ 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800d3de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d3e0:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800d3e4:	0c1b      	lsrs	r3, r3, #16
 800d3e6:	663b      	str	r3, [r7, #96]	@ 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800d3e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d3ea:	fb03 f303 	mul.w	r3, r3, r3
 800d3ee:	663b      	str	r3, [r7, #96]	@ 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800d3f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3f2:	039b      	lsls	r3, r3, #14
 800d3f4:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800d3f8:	4a46      	ldr	r2, [pc, #280]	@ (800d514 <VL53L0X_calc_dmax+0x234>)
 800d3fa:	fba2 2303 	umull	r2, r3, r2, r3
 800d3fe:	099b      	lsrs	r3, r3, #6
 800d400:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800d402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d404:	fb03 f303 	mul.w	r3, r3, r3
 800d408:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800d40a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d40c:	fb03 f303 	mul.w	r3, r3, r3
 800d410:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800d412:	6a3b      	ldr	r3, [r7, #32]
 800d414:	3308      	adds	r3, #8
 800d416:	091b      	lsrs	r3, r3, #4
 800d418:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800d41a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d41c:	6a3b      	ldr	r3, [r7, #32]
 800d41e:	1ad3      	subs	r3, r2, r3
 800d420:	627b      	str	r3, [r7, #36]	@ 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800d422:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d424:	4613      	mov	r3, r2
 800d426:	005b      	lsls	r3, r3, #1
 800d428:	4413      	add	r3, r2
 800d42a:	011b      	lsls	r3, r3, #4
 800d42c:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800d42e:	69fb      	ldr	r3, [r7, #28]
 800d430:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d434:	0b9b      	lsrs	r3, r3, #14
 800d436:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800d438:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d43a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d43c:	4413      	add	r3, r2
 800d43e:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800d440:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d442:	085b      	lsrs	r3, r3, #1
 800d444:	69ba      	ldr	r2, [r7, #24]
 800d446:	4413      	add	r3, r2
 800d448:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800d44a:	69ba      	ldr	r2, [r7, #24]
 800d44c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d44e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d452:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800d454:	69bb      	ldr	r3, [r7, #24]
 800d456:	039b      	lsls	r3, r3, #14
 800d458:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800d45a:	69fb      	ldr	r3, [r7, #28]
 800d45c:	085b      	lsrs	r3, r3, #1
 800d45e:	69ba      	ldr	r2, [r7, #24]
 800d460:	4413      	add	r3, r2
 800d462:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800d464:	69ba      	ldr	r2, [r7, #24]
 800d466:	69fb      	ldr	r3, [r7, #28]
 800d468:	fbb2 f3f3 	udiv	r3, r2, r3
 800d46c:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800d46e:	69bb      	ldr	r3, [r7, #24]
 800d470:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d472:	fb02 f303 	mul.w	r3, r2, r3
 800d476:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800d478:	69bb      	ldr	r3, [r7, #24]
 800d47a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800d47e:	4a25      	ldr	r2, [pc, #148]	@ (800d514 <VL53L0X_calc_dmax+0x234>)
 800d480:	fba2 2303 	umull	r2, r3, r2, r3
 800d484:	099b      	lsrs	r3, r3, #6
 800d486:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800d488:	69bb      	ldr	r3, [r7, #24]
 800d48a:	011b      	lsls	r3, r3, #4
 800d48c:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800d48e:	69bb      	ldr	r3, [r7, #24]
 800d490:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800d494:	4a1f      	ldr	r2, [pc, #124]	@ (800d514 <VL53L0X_calc_dmax+0x234>)
 800d496:	fba2 2303 	umull	r2, r3, r2, r3
 800d49a:	099b      	lsrs	r3, r3, #6
 800d49c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800d49e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4a0:	3380      	adds	r3, #128	@ 0x80
 800d4a2:	0a1b      	lsrs	r3, r3, #8
 800d4a4:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d008      	beq.n	800d4be <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	085a      	lsrs	r2, r3, #1
 800d4b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4b2:	441a      	add	r2, r3
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d4bc:	e001      	b.n	800d4c2 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	65bb      	str	r3, [r7, #88]	@ 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800d4c2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d4c4:	f7fe f9be 	bl	800b844 <VL53L0X_isqrt>
 800d4c8:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800d4ca:	69bb      	ldr	r3, [r7, #24]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d008      	beq.n	800d4e2 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800d4d0:	69bb      	ldr	r3, [r7, #24]
 800d4d2:	085a      	lsrs	r2, r3, #1
 800d4d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4d6:	441a      	add	r2, r3
 800d4d8:	69bb      	ldr	r3, [r7, #24]
 800d4da:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d4e0:	e001      	b.n	800d4e6 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	65fb      	str	r3, [r7, #92]	@ 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800d4e6:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800d4e8:	f7fe f9ac 	bl	800b844 <VL53L0X_isqrt>
 800d4ec:	65f8      	str	r0, [r7, #92]	@ 0x5c

	*pdmax_mm = dmaxDark;
 800d4ee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d4f0:	693a      	ldr	r2, [r7, #16]
 800d4f2:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800d4f4:	693a      	ldr	r2, [r7, #16]
 800d4f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d902      	bls.n	800d502 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800d4fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d4fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d500:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800d502:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
}
 800d506:	4618      	mov	r0, r3
 800d508:	3768      	adds	r7, #104	@ 0x68
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}
 800d50e:	bf00      	nop
 800d510:	fff00000 	.word	0xfff00000
 800d514:	10624dd3 	.word	0x10624dd3

0800d518 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b0b4      	sub	sp, #208	@ 0xd0
 800d51c:	af04      	add	r7, sp, #16
 800d51e:	60f8      	str	r0, [r7, #12]
 800d520:	60b9      	str	r1, [r7, #8]
 800d522:	607a      	str	r2, [r7, #4]
 800d524:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800d526:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800d52a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800d52e:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800d532:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800d536:	f44f 13c8 	mov.w	r3, #1638400	@ 0x190000
 800d53a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800d53e:	f241 235c 	movw	r3, #4700	@ 0x125c
 800d542:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800d546:	4b9e      	ldr	r3, [pc, #632]	@ (800d7c0 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800d548:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800d54c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800d550:	67fb      	str	r3, [r7, #124]	@ 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800d552:	f04f 4270 	mov.w	r2, #4026531840	@ 0xf0000000
 800d556:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d55a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d55e:	67bb      	str	r3, [r7, #120]	@ 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800d560:	4b98      	ldr	r3, [pc, #608]	@ (800d7c4 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800d562:	677b      	str	r3, [r7, #116]	@ 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800d564:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d568:	673b      	str	r3, [r7, #112]	@ 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800d56a:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 800d56e:	66fb      	str	r3, [r7, #108]	@ 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800d570:	f240 6377 	movw	r3, #1655	@ 0x677
 800d574:	66bb      	str	r3, [r7, #104]	@ 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d576:	2300      	movs	r3, #0
 800d578:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	6a1b      	ldr	r3, [r3, #32]
 800d580:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	691b      	ldr	r3, [r3, #16]
 800d586:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d58a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800d58e:	0c1b      	lsrs	r3, r3, #16
 800d590:	667b      	str	r3, [r7, #100]	@ 0x64

	correctedSignalRate_mcps =
 800d592:	68bb      	ldr	r3, [r7, #8]
 800d594:	68db      	ldr	r3, [r3, #12]
 800d596:	663b      	str	r3, [r7, #96]	@ 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800d598:	f107 0310 	add.w	r3, r7, #16
 800d59c:	461a      	mov	r2, r3
 800d59e:	68b9      	ldr	r1, [r7, #8]
 800d5a0:	68f8      	ldr	r0, [r7, #12]
 800d5a2:	f7ff fe78 	bl	800d296 <VL53L0X_get_total_signal_rate>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800d5ac:	f107 0314 	add.w	r3, r7, #20
 800d5b0:	461a      	mov	r2, r3
 800d5b2:	68b9      	ldr	r1, [r7, #8]
 800d5b4:	68f8      	ldr	r0, [r7, #12]
 800d5b6:	f7ff fe3f 	bl	800d238 <VL53L0X_get_total_xtalk_rate>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800d5c0:	693b      	ldr	r3, [r7, #16]
 800d5c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d5c6:	fb02 f303 	mul.w	r3, r2, r3
 800d5ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800d5cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d5ce:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800d5d2:	0c1b      	lsrs	r3, r3, #16
 800d5d4:	65fb      	str	r3, [r7, #92]	@ 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d5dc:	fb02 f303 	mul.w	r3, r2, r3
 800d5e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800d5e4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800d5e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	d902      	bls.n	800d5f4 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800d5ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d5f0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800d5f4:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d168      	bne.n	800d6ce <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800d602:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800d60c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800d610:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800d614:	461a      	mov	r2, r3
 800d616:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 800d61a:	68f8      	ldr	r0, [r7, #12]
 800d61c:	f7fe feb4 	bl	800c388 <VL53L0X_calc_timeout_mclks>
 800d620:	6578      	str	r0, [r7, #84]	@ 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d628:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 800d632:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800d636:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800d63a:	461a      	mov	r2, r3
 800d63c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 800d640:	68f8      	ldr	r0, [r7, #12]
 800d642:	f7fe fea1 	bl	800c388 <VL53L0X_calc_timeout_mclks>
 800d646:	64f8      	str	r0, [r7, #76]	@ 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800d648:	2303      	movs	r3, #3
 800d64a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		if (finalRangeVcselPCLKS == 8)
 800d64e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800d652:	2b08      	cmp	r3, #8
 800d654:	d102      	bne.n	800d65c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800d656:	2302      	movs	r3, #2
 800d658:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800d65c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d65e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d660:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800d662:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d666:	fb02 f303 	mul.w	r3, r2, r3
 800d66a:	02db      	lsls	r3, r3, #11
 800d66c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800d670:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d674:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800d678:	4a53      	ldr	r2, [pc, #332]	@ (800d7c8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d67a:	fba2 2303 	umull	r2, r3, r2, r3
 800d67e:	099b      	lsrs	r3, r3, #6
 800d680:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800d684:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d688:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d68a:	fb02 f303 	mul.w	r3, r2, r3
 800d68e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800d692:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d696:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800d69a:	4a4b      	ldr	r2, [pc, #300]	@ (800d7c8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d69c:	fba2 2303 	umull	r2, r3, r2, r3
 800d6a0:	099b      	lsrs	r3, r3, #6
 800d6a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800d6a6:	693b      	ldr	r3, [r7, #16]
 800d6a8:	3380      	adds	r3, #128	@ 0x80
 800d6aa:	0a1b      	lsrs	r3, r3, #8
 800d6ac:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800d6ae:	693a      	ldr	r2, [r7, #16]
 800d6b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d6b4:	fb02 f303 	mul.w	r3, r2, r3
 800d6b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800d6bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800d6c0:	3380      	adds	r3, #128	@ 0x80
 800d6c2:	0a1b      	lsrs	r3, r3, #8
 800d6c4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800d6c8:	693b      	ldr	r3, [r7, #16]
 800d6ca:	021b      	lsls	r3, r3, #8
 800d6cc:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800d6ce:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d002      	beq.n	800d6dc <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800d6d6:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800d6da:	e15e      	b.n	800d99a <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800d6dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d10c      	bne.n	800d6fc <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d6e8:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d6f0:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
		*pDmax_mm = 0;
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	601a      	str	r2, [r3, #0]
 800d6fa:	e14c      	b.n	800d996 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800d6fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800d700:	2b00      	cmp	r3, #0
 800d702:	d102      	bne.n	800d70a <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800d704:	2301      	movs	r3, #1
 800d706:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800d70a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d70e:	64bb      	str	r3, [r7, #72]	@ 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800d710:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d712:	041a      	lsls	r2, r3, #16
 800d714:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d716:	fbb2 f3f3 	udiv	r3, r2, r3
 800d71a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800d71e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d722:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d724:	429a      	cmp	r2, r3
 800d726:	d902      	bls.n	800d72e <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800d728:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d72a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800d72e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d732:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800d736:	fb02 f303 	mul.w	r3, r2, r3
 800d73a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800d73e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800d742:	4613      	mov	r3, r2
 800d744:	005b      	lsls	r3, r3, #1
 800d746:	4413      	add	r3, r2
 800d748:	009b      	lsls	r3, r3, #2
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7fe f87a 	bl	800b844 <VL53L0X_isqrt>
 800d750:	4603      	mov	r3, r0
 800d752:	005b      	lsls	r3, r3, #1
 800d754:	647b      	str	r3, [r7, #68]	@ 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800d756:	68bb      	ldr	r3, [r7, #8]
 800d758:	891b      	ldrh	r3, [r3, #8]
 800d75a:	461a      	mov	r2, r3
 800d75c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d75e:	fb02 f303 	mul.w	r3, r2, r3
 800d762:	643b      	str	r3, [r7, #64]	@ 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d764:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d766:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800d768:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d76c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d76e:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800d770:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d774:	4a14      	ldr	r2, [pc, #80]	@ (800d7c8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d776:	fba2 2303 	umull	r2, r3, r2, r3
 800d77a:	099b      	lsrs	r3, r3, #6
 800d77c:	63fb      	str	r3, [r7, #60]	@ 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800d77e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d780:	041b      	lsls	r3, r3, #16
 800d782:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800d786:	4a10      	ldr	r2, [pc, #64]	@ (800d7c8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d788:	fba2 2303 	umull	r2, r3, r2, r3
 800d78c:	099b      	lsrs	r3, r3, #6
 800d78e:	63bb      	str	r3, [r7, #56]	@ 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800d790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d792:	021b      	lsls	r3, r3, #8
 800d794:	63fb      	str	r3, [r7, #60]	@ 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800d796:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d79a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	bfb8      	it	lt
 800d7a2:	425b      	neglt	r3, r3
 800d7a4:	637b      	str	r3, [r7, #52]	@ 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800d7a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7a8:	021b      	lsls	r3, r3, #8
 800d7aa:	637b      	str	r3, [r7, #52]	@ 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	7e1b      	ldrb	r3, [r3, #24]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d00b      	beq.n	800d7cc <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800d7b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800d7b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d7bc:	e033      	b.n	800d826 <VL53L0X_calc_sigma_estimate+0x30e>
 800d7be:	bf00      	nop
 800d7c0:	028f87ae 	.word	0x028f87ae
 800d7c4:	0006999a 	.word	0x0006999a
 800d7c8:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800d7cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d7ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d7d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800d7da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7dc:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 800d7e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d7e4:	fb02 f303 	mul.w	r3, r2, r3
 800d7e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800d7ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d7f0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d7f2:	4413      	add	r3, r2
 800d7f4:	0c1b      	lsrs	r3, r3, #16
 800d7f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800d7fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d7fe:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800d802:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800d806:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d80a:	085b      	lsrs	r3, r3, #1
 800d80c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800d810:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d814:	fb03 f303 	mul.w	r3, r3, r3
 800d818:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800d81c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d820:	0b9b      	lsrs	r3, r3, #14
 800d822:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800d826:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d82a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d82c:	fb02 f303 	mul.w	r3, r2, r3
 800d830:	633b      	str	r3, [r7, #48]	@ 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800d832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d834:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800d838:	0c1b      	lsrs	r3, r3, #16
 800d83a:	633b      	str	r3, [r7, #48]	@ 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800d83c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d83e:	fb03 f303 	mul.w	r3, r3, r3
 800d842:	633b      	str	r3, [r7, #48]	@ 0x30

		sqr2 = sigmaEstimateP2;
 800d844:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d848:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800d84a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d84c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800d850:	0c1b      	lsrs	r3, r3, #16
 800d852:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800d854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d856:	fb03 f303 	mul.w	r3, r3, r3
 800d85a:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800d85c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d85e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d860:	4413      	add	r3, r2
 800d862:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800d864:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d866:	f7fd ffed 	bl	800b844 <VL53L0X_isqrt>
 800d86a:	6278      	str	r0, [r7, #36]	@ 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800d86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d86e:	041b      	lsls	r3, r3, #16
 800d870:	627b      	str	r3, [r7, #36]	@ 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800d872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d874:	3332      	adds	r3, #50	@ 0x32
 800d876:	4a4b      	ldr	r2, [pc, #300]	@ (800d9a4 <VL53L0X_calc_sigma_estimate+0x48c>)
 800d878:	fba2 2303 	umull	r2, r3, r2, r3
 800d87c:	095a      	lsrs	r2, r3, #5
 800d87e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d880:	fbb2 f3f3 	udiv	r3, r2, r3
 800d884:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800d888:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d88c:	f640 32b5 	movw	r2, #2997	@ 0xbb5
 800d890:	fb02 f303 	mul.w	r3, r2, r3
 800d894:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800d898:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d89c:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800d8a0:	3308      	adds	r3, #8
 800d8a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		sigmaEstRtn		 /= 10000;
 800d8a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d8aa:	4a3f      	ldr	r2, [pc, #252]	@ (800d9a8 <VL53L0X_calc_sigma_estimate+0x490>)
 800d8ac:	fba2 2303 	umull	r2, r3, r2, r3
 800d8b0:	0b5b      	lsrs	r3, r3, #13
 800d8b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800d8b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d8ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d902      	bls.n	800d8c6 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800d8c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d8c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800d8c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d8ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d8ce:	4413      	add	r3, r2
 800d8d0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800d8d4:	4a35      	ldr	r2, [pc, #212]	@ (800d9ac <VL53L0X_calc_sigma_estimate+0x494>)
 800d8d6:	fba2 2303 	umull	r2, r3, r2, r3
 800d8da:	099b      	lsrs	r3, r3, #6
 800d8dc:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800d8de:	6a3b      	ldr	r3, [r7, #32]
 800d8e0:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800d8e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d8e6:	441a      	add	r2, r3
 800d8e8:	6a3b      	ldr	r3, [r7, #32]
 800d8ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f7fd ffa8 	bl	800b844 <VL53L0X_isqrt>
 800d8f4:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800d8f6:	69fb      	ldr	r3, [r7, #28]
 800d8f8:	021b      	lsls	r3, r3, #8
 800d8fa:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800d8fc:	69fb      	ldr	r3, [r7, #28]
 800d8fe:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800d902:	4a2a      	ldr	r2, [pc, #168]	@ (800d9ac <VL53L0X_calc_sigma_estimate+0x494>)
 800d904:	fba2 2303 	umull	r2, r3, r2, r3
 800d908:	099b      	lsrs	r3, r3, #6
 800d90a:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800d90c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d910:	fb03 f303 	mul.w	r3, r3, r3
 800d914:	633b      	str	r3, [r7, #48]	@ 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800d916:	69fb      	ldr	r3, [r7, #28]
 800d918:	fb03 f303 	mul.w	r3, r3, r3
 800d91c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800d91e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d922:	4413      	add	r3, r2
 800d924:	4618      	mov	r0, r3
 800d926:	f7fd ff8d 	bl	800b844 <VL53L0X_isqrt>
 800d92a:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800d92c:	69bb      	ldr	r3, [r7, #24]
 800d92e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d932:	fb02 f303 	mul.w	r3, r2, r3
 800d936:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800d93a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d009      	beq.n	800d954 <VL53L0X_calc_sigma_estimate+0x43c>
 800d940:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800d944:	2b00      	cmp	r3, #0
 800d946:	d005      	beq.n	800d954 <VL53L0X_calc_sigma_estimate+0x43c>
 800d948:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800d94c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d950:	429a      	cmp	r2, r3
 800d952:	d903      	bls.n	800d95c <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800d954:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d958:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800d962:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681a      	ldr	r2, [r3, #0]
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
		Status = VL53L0X_calc_dmax(
 800d96e:	6939      	ldr	r1, [r7, #16]
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	9303      	str	r3, [sp, #12]
 800d974:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d978:	9302      	str	r3, [sp, #8]
 800d97a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d97e:	9301      	str	r3, [sp, #4]
 800d980:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d982:	9300      	str	r3, [sp, #0]
 800d984:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d988:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d98a:	68f8      	ldr	r0, [r7, #12]
 800d98c:	f7ff fca8 	bl	800d2e0 <VL53L0X_calc_dmax>
 800d990:	4603      	mov	r3, r0
 800d992:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d996:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	37c0      	adds	r7, #192	@ 0xc0
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
 800d9a2:	bf00      	nop
 800d9a4:	51eb851f 	.word	0x51eb851f
 800d9a8:	d1b71759 	.word	0xd1b71759
 800d9ac:	10624dd3 	.word	0x10624dd3

0800d9b0 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b090      	sub	sp, #64	@ 0x40
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	60f8      	str	r0, [r7, #12]
 800d9b8:	607a      	str	r2, [r7, #4]
 800d9ba:	461a      	mov	r2, r3
 800d9bc:	460b      	mov	r3, r1
 800d9be:	72fb      	strb	r3, [r7, #11]
 800d9c0:	4613      	mov	r3, r2
 800d9c2:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	uint8_t SignalRefClipflag = 0;
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint16_t tmpWord = 0;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800d9fe:	2300      	movs	r3, #0
 800da00:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800da02:	7afb      	ldrb	r3, [r7, #11]
 800da04:	10db      	asrs	r3, r3, #3
 800da06:	b2db      	uxtb	r3, r3
 800da08:	f003 030f 	and.w	r3, r3, #15
 800da0c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800da10:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800da14:	2b00      	cmp	r3, #0
 800da16:	d017      	beq.n	800da48 <VL53L0X_get_pal_range_status+0x98>
 800da18:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800da1c:	2b05      	cmp	r3, #5
 800da1e:	d013      	beq.n	800da48 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800da20:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800da24:	2b07      	cmp	r3, #7
 800da26:	d00f      	beq.n	800da48 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800da28:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800da2c:	2b0c      	cmp	r3, #12
 800da2e:	d00b      	beq.n	800da48 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800da30:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800da34:	2b0d      	cmp	r3, #13
 800da36:	d007      	beq.n	800da48 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800da38:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800da3c:	2b0e      	cmp	r3, #14
 800da3e:	d003      	beq.n	800da48 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800da40:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800da44:	2b0f      	cmp	r3, #15
 800da46:	d103      	bne.n	800da50 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800da48:	2301      	movs	r3, #1
 800da4a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800da4e:	e002      	b.n	800da56 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800da50:	2300      	movs	r3, #0
 800da52:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800da56:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d109      	bne.n	800da72 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800da5e:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800da62:	461a      	mov	r2, r3
 800da64:	2100      	movs	r1, #0
 800da66:	68f8      	ldr	r0, [r7, #12]
 800da68:	f7fc f9fc 	bl	8009e64 <VL53L0X_GetLimitCheckEnable>
 800da6c:	4603      	mov	r3, r0
 800da6e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800da72:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800da76:	2b00      	cmp	r3, #0
 800da78:	d02e      	beq.n	800dad8 <VL53L0X_get_pal_range_status+0x128>
 800da7a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d12a      	bne.n	800dad8 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800da82:	f107 0310 	add.w	r3, r7, #16
 800da86:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800da8a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800da8c:	68f8      	ldr	r0, [r7, #12]
 800da8e:	f7ff fd43 	bl	800d518 <VL53L0X_calc_sigma_estimate>
 800da92:	4603      	mov	r3, r0
 800da94:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800da98:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d103      	bne.n	800daa8 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	b29a      	uxth	r2, r3
 800daa4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800daa6:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800daa8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800daac:	2b00      	cmp	r3, #0
 800daae:	d113      	bne.n	800dad8 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800dab0:	f107 0320 	add.w	r3, r7, #32
 800dab4:	461a      	mov	r2, r3
 800dab6:	2100      	movs	r1, #0
 800dab8:	68f8      	ldr	r0, [r7, #12]
 800daba:	f7fc fa59 	bl	8009f70 <VL53L0X_GetLimitCheckValue>
 800dabe:	4603      	mov	r3, r0
 800dac0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800dac4:	6a3b      	ldr	r3, [r7, #32]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d006      	beq.n	800dad8 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800daca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dacc:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800dace:	429a      	cmp	r2, r3
 800dad0:	d902      	bls.n	800dad8 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800dad2:	2301      	movs	r3, #1
 800dad4:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800dad8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d109      	bne.n	800daf4 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800dae0:	f107 0329 	add.w	r3, r7, #41	@ 0x29
 800dae4:	461a      	mov	r2, r3
 800dae6:	2102      	movs	r1, #2
 800dae8:	68f8      	ldr	r0, [r7, #12]
 800daea:	f7fc f9bb 	bl	8009e64 <VL53L0X_GetLimitCheckEnable>
 800daee:	4603      	mov	r3, r0
 800daf0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800daf4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d044      	beq.n	800db86 <VL53L0X_get_pal_range_status+0x1d6>
 800dafc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800db00:	2b00      	cmp	r3, #0
 800db02:	d140      	bne.n	800db86 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800db04:	f107 031c 	add.w	r3, r7, #28
 800db08:	461a      	mov	r2, r3
 800db0a:	2102      	movs	r1, #2
 800db0c:	68f8      	ldr	r0, [r7, #12]
 800db0e:	f7fc fa2f 	bl	8009f70 <VL53L0X_GetLimitCheckValue>
 800db12:	4603      	mov	r3, r0
 800db14:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800db18:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d107      	bne.n	800db30 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800db20:	2201      	movs	r2, #1
 800db22:	21ff      	movs	r1, #255	@ 0xff
 800db24:	68f8      	ldr	r0, [r7, #12]
 800db26:	f000 f9bb 	bl	800dea0 <VL53L0X_WrByte>
 800db2a:	4603      	mov	r3, r0
 800db2c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800db30:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800db34:	2b00      	cmp	r3, #0
 800db36:	d109      	bne.n	800db4c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800db38:	f107 0316 	add.w	r3, r7, #22
 800db3c:	461a      	mov	r2, r3
 800db3e:	21b6      	movs	r1, #182	@ 0xb6
 800db40:	68f8      	ldr	r0, [r7, #12]
 800db42:	f000 fa59 	bl	800dff8 <VL53L0X_RdWord>
 800db46:	4603      	mov	r3, r0
 800db48:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800db4c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800db50:	2b00      	cmp	r3, #0
 800db52:	d107      	bne.n	800db64 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800db54:	2200      	movs	r2, #0
 800db56:	21ff      	movs	r1, #255	@ 0xff
 800db58:	68f8      	ldr	r0, [r7, #12]
 800db5a:	f000 f9a1 	bl	800dea0 <VL53L0X_WrByte>
 800db5e:	4603      	mov	r3, r0
 800db60:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800db64:	8afb      	ldrh	r3, [r7, #22]
 800db66:	025b      	lsls	r3, r3, #9
 800db68:	62fb      	str	r3, [r7, #44]	@ 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800db6e:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148

		if ((SignalRefClipValue > 0) &&
 800db72:	69fb      	ldr	r3, [r7, #28]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d006      	beq.n	800db86 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800db78:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800db7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800db7c:	429a      	cmp	r2, r3
 800db7e:	d902      	bls.n	800db86 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800db80:	2301      	movs	r3, #1
 800db82:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800db86:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d109      	bne.n	800dba2 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800db8e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800db92:	461a      	mov	r2, r3
 800db94:	2103      	movs	r1, #3
 800db96:	68f8      	ldr	r0, [r7, #12]
 800db98:	f7fc f964 	bl	8009e64 <VL53L0X_GetLimitCheckEnable>
 800db9c:	4603      	mov	r3, r0
 800db9e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800dba2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d023      	beq.n	800dbf2 <VL53L0X_get_pal_range_status+0x242>
 800dbaa:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d11f      	bne.n	800dbf2 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800dbb2:	893b      	ldrh	r3, [r7, #8]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d102      	bne.n	800dbbe <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800dbb8:	2300      	movs	r3, #0
 800dbba:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbbc:	e005      	b.n	800dbca <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	021a      	lsls	r2, r3, #8
 800dbc2:	893b      	ldrh	r3, [r7, #8]
 800dbc4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbc8:	637b      	str	r3, [r7, #52]	@ 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800dbca:	f107 0318 	add.w	r3, r7, #24
 800dbce:	461a      	mov	r2, r3
 800dbd0:	2103      	movs	r1, #3
 800dbd2:	68f8      	ldr	r0, [r7, #12]
 800dbd4:	f7fc f9cc 	bl	8009f70 <VL53L0X_GetLimitCheckValue>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800dbde:	69bb      	ldr	r3, [r7, #24]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d006      	beq.n	800dbf2 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800dbe4:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800dbe6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dbe8:	429a      	cmp	r2, r3
 800dbea:	d202      	bcs.n	800dbf2 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800dbec:	2301      	movs	r3, #1
 800dbee:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800dbf2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d14a      	bne.n	800dc90 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800dbfa:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800dbfe:	2b01      	cmp	r3, #1
 800dc00:	d103      	bne.n	800dc0a <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800dc02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc04:	22ff      	movs	r2, #255	@ 0xff
 800dc06:	701a      	strb	r2, [r3, #0]
 800dc08:	e042      	b.n	800dc90 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800dc0a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800dc0e:	2b01      	cmp	r3, #1
 800dc10:	d007      	beq.n	800dc22 <VL53L0X_get_pal_range_status+0x272>
 800dc12:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800dc16:	2b02      	cmp	r3, #2
 800dc18:	d003      	beq.n	800dc22 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800dc1a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800dc1e:	2b03      	cmp	r3, #3
 800dc20:	d103      	bne.n	800dc2a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800dc22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc24:	2205      	movs	r2, #5
 800dc26:	701a      	strb	r2, [r3, #0]
 800dc28:	e032      	b.n	800dc90 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800dc2a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800dc2e:	2b06      	cmp	r3, #6
 800dc30:	d003      	beq.n	800dc3a <VL53L0X_get_pal_range_status+0x28a>
 800dc32:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800dc36:	2b09      	cmp	r3, #9
 800dc38:	d103      	bne.n	800dc42 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800dc3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc3c:	2204      	movs	r2, #4
 800dc3e:	701a      	strb	r2, [r3, #0]
 800dc40:	e026      	b.n	800dc90 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800dc42:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800dc46:	2b08      	cmp	r3, #8
 800dc48:	d007      	beq.n	800dc5a <VL53L0X_get_pal_range_status+0x2aa>
 800dc4a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800dc4e:	2b0a      	cmp	r3, #10
 800dc50:	d003      	beq.n	800dc5a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800dc52:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800dc56:	2b01      	cmp	r3, #1
 800dc58:	d103      	bne.n	800dc62 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800dc5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc5c:	2203      	movs	r2, #3
 800dc5e:	701a      	strb	r2, [r3, #0]
 800dc60:	e016      	b.n	800dc90 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800dc62:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800dc66:	2b04      	cmp	r3, #4
 800dc68:	d003      	beq.n	800dc72 <VL53L0X_get_pal_range_status+0x2c2>
 800dc6a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800dc6e:	2b01      	cmp	r3, #1
 800dc70:	d103      	bne.n	800dc7a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800dc72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc74:	2202      	movs	r2, #2
 800dc76:	701a      	strb	r2, [r3, #0]
 800dc78:	e00a      	b.n	800dc90 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800dc7a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800dc7e:	2b01      	cmp	r3, #1
 800dc80:	d103      	bne.n	800dc8a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800dc82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc84:	2201      	movs	r2, #1
 800dc86:	701a      	strb	r2, [r3, #0]
 800dc88:	e002      	b.n	800dc90 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800dc8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800dc90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc92:	781b      	ldrb	r3, [r3, #0]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d102      	bne.n	800dc9e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800dc98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800dc9e:	f107 032a 	add.w	r3, r7, #42	@ 0x2a
 800dca2:	461a      	mov	r2, r3
 800dca4:	2101      	movs	r1, #1
 800dca6:	68f8      	ldr	r0, [r7, #12]
 800dca8:	f7fc f8dc 	bl	8009e64 <VL53L0X_GetLimitCheckEnable>
 800dcac:	4603      	mov	r3, r0
 800dcae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800dcb2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d14f      	bne.n	800dd5a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800dcba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d003      	beq.n	800dcca <VL53L0X_get_pal_range_status+0x31a>
 800dcc2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800dcc6:	2b01      	cmp	r3, #1
 800dcc8:	d103      	bne.n	800dcd2 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800dcca:	2301      	movs	r3, #1
 800dccc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800dcd0:	e002      	b.n	800dcd8 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800dcde:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800dce2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800dce6:	2b04      	cmp	r3, #4
 800dce8:	d003      	beq.n	800dcf2 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800dcea:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d103      	bne.n	800dcfa <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800dcf2:	2301      	movs	r3, #1
 800dcf4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800dcf8:	e002      	b.n	800dd00 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800dd06:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800dd0a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d003      	beq.n	800dd1a <VL53L0X_get_pal_range_status+0x36a>
 800dd12:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800dd16:	2b01      	cmp	r3, #1
 800dd18:	d103      	bne.n	800dd22 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800dd20:	e002      	b.n	800dd28 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800dd22:	2300      	movs	r3, #0
 800dd24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800dd2e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800dd32:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d003      	beq.n	800dd42 <VL53L0X_get_pal_range_status+0x392>
 800dd3a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800dd3e:	2b01      	cmp	r3, #1
 800dd40:	d103      	bne.n	800dd4a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800dd42:	2301      	movs	r3, #1
 800dd44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800dd48:	e002      	b.n	800dd50 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800dd56:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800dd5a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f

}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	3740      	adds	r7, #64	@ 0x40
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}

0800dd66 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800dd66:	b580      	push	{r7, lr}
 800dd68:	b088      	sub	sp, #32
 800dd6a:	af02      	add	r7, sp, #8
 800dd6c:	60f8      	str	r0, [r7, #12]
 800dd6e:	60b9      	str	r1, [r7, #8]
 800dd70:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	330a      	adds	r3, #10
 800dd76:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 800dd84:	4619      	mov	r1, r3
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	b29a      	uxth	r2, r3
 800dd8a:	697b      	ldr	r3, [r7, #20]
 800dd8c:	9300      	str	r3, [sp, #0]
 800dd8e:	4613      	mov	r3, r2
 800dd90:	68ba      	ldr	r2, [r7, #8]
 800dd92:	f7f7 f89b 	bl	8004ecc <HAL_I2C_Master_Transmit>
 800dd96:	4603      	mov	r3, r0
 800dd98:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800dd9a:	693b      	ldr	r3, [r7, #16]
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3718      	adds	r7, #24
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b088      	sub	sp, #32
 800dda8:	af02      	add	r7, sp, #8
 800ddaa:	60f8      	str	r0, [r7, #12]
 800ddac:	60b9      	str	r1, [r7, #8]
 800ddae:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	330a      	adds	r3, #10
 800ddb4:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 800ddc2:	f043 0301 	orr.w	r3, r3, #1
 800ddc6:	b2db      	uxtb	r3, r3
 800ddc8:	4619      	mov	r1, r3
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	b29a      	uxth	r2, r3
 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	9300      	str	r3, [sp, #0]
 800ddd2:	4613      	mov	r3, r2
 800ddd4:	68ba      	ldr	r2, [r7, #8]
 800ddd6:	f7f7 f977 	bl	80050c8 <HAL_I2C_Master_Receive>
 800ddda:	4603      	mov	r3, r0
 800dddc:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800ddde:	693b      	ldr	r3, [r7, #16]
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	3718      	adds	r7, #24
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}

0800dde8 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b086      	sub	sp, #24
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	60f8      	str	r0, [r7, #12]
 800ddf0:	607a      	str	r2, [r7, #4]
 800ddf2:	603b      	str	r3, [r7, #0]
 800ddf4:	460b      	mov	r3, r1
 800ddf6:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	2b3f      	cmp	r3, #63	@ 0x3f
 800de00:	d902      	bls.n	800de08 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800de02:	f06f 0303 	mvn.w	r3, #3
 800de06:	e016      	b.n	800de36 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800de08:	4a0d      	ldr	r2, [pc, #52]	@ (800de40 <VL53L0X_WriteMulti+0x58>)
 800de0a:	7afb      	ldrb	r3, [r7, #11]
 800de0c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800de0e:	683a      	ldr	r2, [r7, #0]
 800de10:	6879      	ldr	r1, [r7, #4]
 800de12:	480c      	ldr	r0, [pc, #48]	@ (800de44 <VL53L0X_WriteMulti+0x5c>)
 800de14:	f001 f8ad 	bl	800ef72 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	3301      	adds	r3, #1
 800de1c:	461a      	mov	r2, r3
 800de1e:	4908      	ldr	r1, [pc, #32]	@ (800de40 <VL53L0X_WriteMulti+0x58>)
 800de20:	68f8      	ldr	r0, [r7, #12]
 800de22:	f7ff ffa0 	bl	800dd66 <_I2CWrite>
 800de26:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800de28:	693b      	ldr	r3, [r7, #16]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d001      	beq.n	800de32 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800de2e:	23ec      	movs	r3, #236	@ 0xec
 800de30:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800de32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800de36:	4618      	mov	r0, r3
 800de38:	3718      	adds	r7, #24
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}
 800de3e:	bf00      	nop
 800de40:	200008b0 	.word	0x200008b0
 800de44:	200008b1 	.word	0x200008b1

0800de48 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800de48:	b580      	push	{r7, lr}
 800de4a:	b086      	sub	sp, #24
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	60f8      	str	r0, [r7, #12]
 800de50:	607a      	str	r2, [r7, #4]
 800de52:	603b      	str	r3, [r7, #0]
 800de54:	460b      	mov	r3, r1
 800de56:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800de58:	2300      	movs	r3, #0
 800de5a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800de5c:	f107 030b 	add.w	r3, r7, #11
 800de60:	2201      	movs	r2, #1
 800de62:	4619      	mov	r1, r3
 800de64:	68f8      	ldr	r0, [r7, #12]
 800de66:	f7ff ff7e 	bl	800dd66 <_I2CWrite>
 800de6a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800de6c:	693b      	ldr	r3, [r7, #16]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d002      	beq.n	800de78 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800de72:	23ec      	movs	r3, #236	@ 0xec
 800de74:	75fb      	strb	r3, [r7, #23]
        goto done;
 800de76:	e00c      	b.n	800de92 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800de78:	683a      	ldr	r2, [r7, #0]
 800de7a:	6879      	ldr	r1, [r7, #4]
 800de7c:	68f8      	ldr	r0, [r7, #12]
 800de7e:	f7ff ff91 	bl	800dda4 <_I2CRead>
 800de82:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800de84:	693b      	ldr	r3, [r7, #16]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d002      	beq.n	800de90 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800de8a:	23ec      	movs	r3, #236	@ 0xec
 800de8c:	75fb      	strb	r3, [r7, #23]
 800de8e:	e000      	b.n	800de92 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800de90:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800de92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800de96:	4618      	mov	r0, r3
 800de98:	3718      	adds	r7, #24
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}
	...

0800dea0 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b084      	sub	sp, #16
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	460b      	mov	r3, r1
 800deaa:	70fb      	strb	r3, [r7, #3]
 800deac:	4613      	mov	r3, r2
 800deae:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800deb0:	2300      	movs	r3, #0
 800deb2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800deb4:	4a0b      	ldr	r2, [pc, #44]	@ (800dee4 <VL53L0X_WrByte+0x44>)
 800deb6:	78fb      	ldrb	r3, [r7, #3]
 800deb8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800deba:	4a0a      	ldr	r2, [pc, #40]	@ (800dee4 <VL53L0X_WrByte+0x44>)
 800debc:	78bb      	ldrb	r3, [r7, #2]
 800debe:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800dec0:	2202      	movs	r2, #2
 800dec2:	4908      	ldr	r1, [pc, #32]	@ (800dee4 <VL53L0X_WrByte+0x44>)
 800dec4:	6878      	ldr	r0, [r7, #4]
 800dec6:	f7ff ff4e 	bl	800dd66 <_I2CWrite>
 800deca:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800decc:	68bb      	ldr	r3, [r7, #8]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d001      	beq.n	800ded6 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ded2:	23ec      	movs	r3, #236	@ 0xec
 800ded4:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ded6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800deda:	4618      	mov	r0, r3
 800dedc:	3710      	adds	r7, #16
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}
 800dee2:	bf00      	nop
 800dee4:	200008b0 	.word	0x200008b0

0800dee8 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800dee8:	b580      	push	{r7, lr}
 800deea:	b084      	sub	sp, #16
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	460b      	mov	r3, r1
 800def2:	70fb      	strb	r3, [r7, #3]
 800def4:	4613      	mov	r3, r2
 800def6:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800def8:	2300      	movs	r3, #0
 800defa:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800defc:	4a0e      	ldr	r2, [pc, #56]	@ (800df38 <VL53L0X_WrWord+0x50>)
 800defe:	78fb      	ldrb	r3, [r7, #3]
 800df00:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800df02:	883b      	ldrh	r3, [r7, #0]
 800df04:	0a1b      	lsrs	r3, r3, #8
 800df06:	b29b      	uxth	r3, r3
 800df08:	b2da      	uxtb	r2, r3
 800df0a:	4b0b      	ldr	r3, [pc, #44]	@ (800df38 <VL53L0X_WrWord+0x50>)
 800df0c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800df0e:	883b      	ldrh	r3, [r7, #0]
 800df10:	b2da      	uxtb	r2, r3
 800df12:	4b09      	ldr	r3, [pc, #36]	@ (800df38 <VL53L0X_WrWord+0x50>)
 800df14:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800df16:	2203      	movs	r2, #3
 800df18:	4907      	ldr	r1, [pc, #28]	@ (800df38 <VL53L0X_WrWord+0x50>)
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f7ff ff23 	bl	800dd66 <_I2CWrite>
 800df20:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d001      	beq.n	800df2c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800df28:	23ec      	movs	r3, #236	@ 0xec
 800df2a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800df2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800df30:	4618      	mov	r0, r3
 800df32:	3710      	adds	r7, #16
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}
 800df38:	200008b0 	.word	0x200008b0

0800df3c <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b084      	sub	sp, #16
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
 800df44:	4608      	mov	r0, r1
 800df46:	4611      	mov	r1, r2
 800df48:	461a      	mov	r2, r3
 800df4a:	4603      	mov	r3, r0
 800df4c:	70fb      	strb	r3, [r7, #3]
 800df4e:	460b      	mov	r3, r1
 800df50:	70bb      	strb	r3, [r7, #2]
 800df52:	4613      	mov	r3, r2
 800df54:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800df56:	2300      	movs	r3, #0
 800df58:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800df5a:	f107 020e 	add.w	r2, r7, #14
 800df5e:	78fb      	ldrb	r3, [r7, #3]
 800df60:	4619      	mov	r1, r3
 800df62:	6878      	ldr	r0, [r7, #4]
 800df64:	f000 f81e 	bl	800dfa4 <VL53L0X_RdByte>
 800df68:	4603      	mov	r3, r0
 800df6a:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800df6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d110      	bne.n	800df96 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800df74:	7bba      	ldrb	r2, [r7, #14]
 800df76:	78bb      	ldrb	r3, [r7, #2]
 800df78:	4013      	ands	r3, r2
 800df7a:	b2da      	uxtb	r2, r3
 800df7c:	787b      	ldrb	r3, [r7, #1]
 800df7e:	4313      	orrs	r3, r2
 800df80:	b2db      	uxtb	r3, r3
 800df82:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800df84:	7bba      	ldrb	r2, [r7, #14]
 800df86:	78fb      	ldrb	r3, [r7, #3]
 800df88:	4619      	mov	r1, r3
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f7ff ff88 	bl	800dea0 <VL53L0X_WrByte>
 800df90:	4603      	mov	r3, r0
 800df92:	73fb      	strb	r3, [r7, #15]
 800df94:	e000      	b.n	800df98 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800df96:	bf00      	nop
done:
    return Status;
 800df98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3710      	adds	r7, #16
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}

0800dfa4 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b086      	sub	sp, #24
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	60f8      	str	r0, [r7, #12]
 800dfac:	460b      	mov	r3, r1
 800dfae:	607a      	str	r2, [r7, #4]
 800dfb0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800dfb6:	f107 030b 	add.w	r3, r7, #11
 800dfba:	2201      	movs	r2, #1
 800dfbc:	4619      	mov	r1, r3
 800dfbe:	68f8      	ldr	r0, [r7, #12]
 800dfc0:	f7ff fed1 	bl	800dd66 <_I2CWrite>
 800dfc4:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800dfc6:	693b      	ldr	r3, [r7, #16]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d002      	beq.n	800dfd2 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dfcc:	23ec      	movs	r3, #236	@ 0xec
 800dfce:	75fb      	strb	r3, [r7, #23]
        goto done;
 800dfd0:	e00c      	b.n	800dfec <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800dfd2:	2201      	movs	r2, #1
 800dfd4:	6879      	ldr	r1, [r7, #4]
 800dfd6:	68f8      	ldr	r0, [r7, #12]
 800dfd8:	f7ff fee4 	bl	800dda4 <_I2CRead>
 800dfdc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800dfde:	693b      	ldr	r3, [r7, #16]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d002      	beq.n	800dfea <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dfe4:	23ec      	movs	r3, #236	@ 0xec
 800dfe6:	75fb      	strb	r3, [r7, #23]
 800dfe8:	e000      	b.n	800dfec <VL53L0X_RdByte+0x48>
    }
done:
 800dfea:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800dfec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dff0:	4618      	mov	r0, r3
 800dff2:	3718      	adds	r7, #24
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b086      	sub	sp, #24
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	60f8      	str	r0, [r7, #12]
 800e000:	460b      	mov	r3, r1
 800e002:	607a      	str	r2, [r7, #4]
 800e004:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e006:	2300      	movs	r3, #0
 800e008:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800e00a:	f107 030b 	add.w	r3, r7, #11
 800e00e:	2201      	movs	r2, #1
 800e010:	4619      	mov	r1, r3
 800e012:	68f8      	ldr	r0, [r7, #12]
 800e014:	f7ff fea7 	bl	800dd66 <_I2CWrite>
 800e018:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d002      	beq.n	800e026 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e020:	23ec      	movs	r3, #236	@ 0xec
 800e022:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e024:	e015      	b.n	800e052 <VL53L0X_RdWord+0x5a>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800e026:	2202      	movs	r2, #2
 800e028:	490d      	ldr	r1, [pc, #52]	@ (800e060 <VL53L0X_RdWord+0x68>)
 800e02a:	68f8      	ldr	r0, [r7, #12]
 800e02c:	f7ff feba 	bl	800dda4 <_I2CRead>
 800e030:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d002      	beq.n	800e03e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e038:	23ec      	movs	r3, #236	@ 0xec
 800e03a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e03c:	e009      	b.n	800e052 <VL53L0X_RdWord+0x5a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800e03e:	4b08      	ldr	r3, [pc, #32]	@ (800e060 <VL53L0X_RdWord+0x68>)
 800e040:	781b      	ldrb	r3, [r3, #0]
 800e042:	021b      	lsls	r3, r3, #8
 800e044:	b29b      	uxth	r3, r3
 800e046:	4a06      	ldr	r2, [pc, #24]	@ (800e060 <VL53L0X_RdWord+0x68>)
 800e048:	7852      	ldrb	r2, [r2, #1]
 800e04a:	4413      	add	r3, r2
 800e04c:	b29a      	uxth	r2, r3
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800e052:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e056:	4618      	mov	r0, r3
 800e058:	3718      	adds	r7, #24
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}
 800e05e:	bf00      	nop
 800e060:	200008b0 	.word	0x200008b0

0800e064 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800e064:	b580      	push	{r7, lr}
 800e066:	b086      	sub	sp, #24
 800e068:	af00      	add	r7, sp, #0
 800e06a:	60f8      	str	r0, [r7, #12]
 800e06c:	460b      	mov	r3, r1
 800e06e:	607a      	str	r2, [r7, #4]
 800e070:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e072:	2300      	movs	r3, #0
 800e074:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800e076:	f107 030b 	add.w	r3, r7, #11
 800e07a:	2201      	movs	r2, #1
 800e07c:	4619      	mov	r1, r3
 800e07e:	68f8      	ldr	r0, [r7, #12]
 800e080:	f7ff fe71 	bl	800dd66 <_I2CWrite>
 800e084:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d002      	beq.n	800e092 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e08c:	23ec      	movs	r3, #236	@ 0xec
 800e08e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e090:	e01b      	b.n	800e0ca <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800e092:	2204      	movs	r2, #4
 800e094:	4910      	ldr	r1, [pc, #64]	@ (800e0d8 <VL53L0X_RdDWord+0x74>)
 800e096:	68f8      	ldr	r0, [r7, #12]
 800e098:	f7ff fe84 	bl	800dda4 <_I2CRead>
 800e09c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800e09e:	693b      	ldr	r3, [r7, #16]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d002      	beq.n	800e0aa <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800e0a4:	23ec      	movs	r3, #236	@ 0xec
 800e0a6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800e0a8:	e00f      	b.n	800e0ca <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800e0aa:	4b0b      	ldr	r3, [pc, #44]	@ (800e0d8 <VL53L0X_RdDWord+0x74>)
 800e0ac:	781b      	ldrb	r3, [r3, #0]
 800e0ae:	061a      	lsls	r2, r3, #24
 800e0b0:	4b09      	ldr	r3, [pc, #36]	@ (800e0d8 <VL53L0X_RdDWord+0x74>)
 800e0b2:	785b      	ldrb	r3, [r3, #1]
 800e0b4:	041b      	lsls	r3, r3, #16
 800e0b6:	441a      	add	r2, r3
 800e0b8:	4b07      	ldr	r3, [pc, #28]	@ (800e0d8 <VL53L0X_RdDWord+0x74>)
 800e0ba:	789b      	ldrb	r3, [r3, #2]
 800e0bc:	021b      	lsls	r3, r3, #8
 800e0be:	4413      	add	r3, r2
 800e0c0:	4a05      	ldr	r2, [pc, #20]	@ (800e0d8 <VL53L0X_RdDWord+0x74>)
 800e0c2:	78d2      	ldrb	r2, [r2, #3]
 800e0c4:	441a      	add	r2, r3
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800e0ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	3718      	adds	r7, #24
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}
 800e0d6:	bf00      	nop
 800e0d8:	200008b0 	.word	0x200008b0

0800e0dc <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b084      	sub	sp, #16
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800e0e8:	2002      	movs	r0, #2
 800e0ea:	f7f6 fa8d 	bl	8004608 <HAL_Delay>
    return status;
 800e0ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	3710      	adds	r7, #16
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}

0800e0fa <_ZdlPvj>:
 800e0fa:	f000 b811 	b.w	800e120 <_ZdlPv>

0800e0fe <_Znwj>:
 800e0fe:	2801      	cmp	r0, #1
 800e100:	bf38      	it	cc
 800e102:	2001      	movcc	r0, #1
 800e104:	b510      	push	{r4, lr}
 800e106:	4604      	mov	r4, r0
 800e108:	4620      	mov	r0, r4
 800e10a:	f000 f81b 	bl	800e144 <malloc>
 800e10e:	b100      	cbz	r0, 800e112 <_Znwj+0x14>
 800e110:	bd10      	pop	{r4, pc}
 800e112:	f000 f807 	bl	800e124 <_ZSt15get_new_handlerv>
 800e116:	b908      	cbnz	r0, 800e11c <_Znwj+0x1e>
 800e118:	f000 f80c 	bl	800e134 <abort>
 800e11c:	4780      	blx	r0
 800e11e:	e7f3      	b.n	800e108 <_Znwj+0xa>

0800e120 <_ZdlPv>:
 800e120:	f000 b818 	b.w	800e154 <free>

0800e124 <_ZSt15get_new_handlerv>:
 800e124:	4b02      	ldr	r3, [pc, #8]	@ (800e130 <_ZSt15get_new_handlerv+0xc>)
 800e126:	6818      	ldr	r0, [r3, #0]
 800e128:	f3bf 8f5b 	dmb	ish
 800e12c:	4770      	bx	lr
 800e12e:	bf00      	nop
 800e130:	200008f0 	.word	0x200008f0

0800e134 <abort>:
 800e134:	b508      	push	{r3, lr}
 800e136:	2006      	movs	r0, #6
 800e138:	f000 fe70 	bl	800ee1c <raise>
 800e13c:	2001      	movs	r0, #1
 800e13e:	f7f6 f907 	bl	8004350 <_exit>
	...

0800e144 <malloc>:
 800e144:	4b02      	ldr	r3, [pc, #8]	@ (800e150 <malloc+0xc>)
 800e146:	4601      	mov	r1, r0
 800e148:	6818      	ldr	r0, [r3, #0]
 800e14a:	f000 b82d 	b.w	800e1a8 <_malloc_r>
 800e14e:	bf00      	nop
 800e150:	200002d8 	.word	0x200002d8

0800e154 <free>:
 800e154:	4b02      	ldr	r3, [pc, #8]	@ (800e160 <free+0xc>)
 800e156:	4601      	mov	r1, r0
 800e158:	6818      	ldr	r0, [r3, #0]
 800e15a:	f001 bd65 	b.w	800fc28 <_free_r>
 800e15e:	bf00      	nop
 800e160:	200002d8 	.word	0x200002d8

0800e164 <sbrk_aligned>:
 800e164:	b570      	push	{r4, r5, r6, lr}
 800e166:	4e0f      	ldr	r6, [pc, #60]	@ (800e1a4 <sbrk_aligned+0x40>)
 800e168:	460c      	mov	r4, r1
 800e16a:	6831      	ldr	r1, [r6, #0]
 800e16c:	4605      	mov	r5, r0
 800e16e:	b911      	cbnz	r1, 800e176 <sbrk_aligned+0x12>
 800e170:	f000 fea8 	bl	800eec4 <_sbrk_r>
 800e174:	6030      	str	r0, [r6, #0]
 800e176:	4621      	mov	r1, r4
 800e178:	4628      	mov	r0, r5
 800e17a:	f000 fea3 	bl	800eec4 <_sbrk_r>
 800e17e:	1c43      	adds	r3, r0, #1
 800e180:	d103      	bne.n	800e18a <sbrk_aligned+0x26>
 800e182:	f04f 34ff 	mov.w	r4, #4294967295
 800e186:	4620      	mov	r0, r4
 800e188:	bd70      	pop	{r4, r5, r6, pc}
 800e18a:	1cc4      	adds	r4, r0, #3
 800e18c:	f024 0403 	bic.w	r4, r4, #3
 800e190:	42a0      	cmp	r0, r4
 800e192:	d0f8      	beq.n	800e186 <sbrk_aligned+0x22>
 800e194:	1a21      	subs	r1, r4, r0
 800e196:	4628      	mov	r0, r5
 800e198:	f000 fe94 	bl	800eec4 <_sbrk_r>
 800e19c:	3001      	adds	r0, #1
 800e19e:	d1f2      	bne.n	800e186 <sbrk_aligned+0x22>
 800e1a0:	e7ef      	b.n	800e182 <sbrk_aligned+0x1e>
 800e1a2:	bf00      	nop
 800e1a4:	200008f4 	.word	0x200008f4

0800e1a8 <_malloc_r>:
 800e1a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1ac:	1ccd      	adds	r5, r1, #3
 800e1ae:	f025 0503 	bic.w	r5, r5, #3
 800e1b2:	3508      	adds	r5, #8
 800e1b4:	2d0c      	cmp	r5, #12
 800e1b6:	bf38      	it	cc
 800e1b8:	250c      	movcc	r5, #12
 800e1ba:	2d00      	cmp	r5, #0
 800e1bc:	4606      	mov	r6, r0
 800e1be:	db01      	blt.n	800e1c4 <_malloc_r+0x1c>
 800e1c0:	42a9      	cmp	r1, r5
 800e1c2:	d904      	bls.n	800e1ce <_malloc_r+0x26>
 800e1c4:	230c      	movs	r3, #12
 800e1c6:	6033      	str	r3, [r6, #0]
 800e1c8:	2000      	movs	r0, #0
 800e1ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e2a4 <_malloc_r+0xfc>
 800e1d2:	f000 f869 	bl	800e2a8 <__malloc_lock>
 800e1d6:	f8d8 3000 	ldr.w	r3, [r8]
 800e1da:	461c      	mov	r4, r3
 800e1dc:	bb44      	cbnz	r4, 800e230 <_malloc_r+0x88>
 800e1de:	4629      	mov	r1, r5
 800e1e0:	4630      	mov	r0, r6
 800e1e2:	f7ff ffbf 	bl	800e164 <sbrk_aligned>
 800e1e6:	1c43      	adds	r3, r0, #1
 800e1e8:	4604      	mov	r4, r0
 800e1ea:	d158      	bne.n	800e29e <_malloc_r+0xf6>
 800e1ec:	f8d8 4000 	ldr.w	r4, [r8]
 800e1f0:	4627      	mov	r7, r4
 800e1f2:	2f00      	cmp	r7, #0
 800e1f4:	d143      	bne.n	800e27e <_malloc_r+0xd6>
 800e1f6:	2c00      	cmp	r4, #0
 800e1f8:	d04b      	beq.n	800e292 <_malloc_r+0xea>
 800e1fa:	6823      	ldr	r3, [r4, #0]
 800e1fc:	4639      	mov	r1, r7
 800e1fe:	4630      	mov	r0, r6
 800e200:	eb04 0903 	add.w	r9, r4, r3
 800e204:	f000 fe5e 	bl	800eec4 <_sbrk_r>
 800e208:	4581      	cmp	r9, r0
 800e20a:	d142      	bne.n	800e292 <_malloc_r+0xea>
 800e20c:	6821      	ldr	r1, [r4, #0]
 800e20e:	1a6d      	subs	r5, r5, r1
 800e210:	4629      	mov	r1, r5
 800e212:	4630      	mov	r0, r6
 800e214:	f7ff ffa6 	bl	800e164 <sbrk_aligned>
 800e218:	3001      	adds	r0, #1
 800e21a:	d03a      	beq.n	800e292 <_malloc_r+0xea>
 800e21c:	6823      	ldr	r3, [r4, #0]
 800e21e:	442b      	add	r3, r5
 800e220:	6023      	str	r3, [r4, #0]
 800e222:	f8d8 3000 	ldr.w	r3, [r8]
 800e226:	685a      	ldr	r2, [r3, #4]
 800e228:	bb62      	cbnz	r2, 800e284 <_malloc_r+0xdc>
 800e22a:	f8c8 7000 	str.w	r7, [r8]
 800e22e:	e00f      	b.n	800e250 <_malloc_r+0xa8>
 800e230:	6822      	ldr	r2, [r4, #0]
 800e232:	1b52      	subs	r2, r2, r5
 800e234:	d420      	bmi.n	800e278 <_malloc_r+0xd0>
 800e236:	2a0b      	cmp	r2, #11
 800e238:	d917      	bls.n	800e26a <_malloc_r+0xc2>
 800e23a:	1961      	adds	r1, r4, r5
 800e23c:	42a3      	cmp	r3, r4
 800e23e:	6025      	str	r5, [r4, #0]
 800e240:	bf18      	it	ne
 800e242:	6059      	strne	r1, [r3, #4]
 800e244:	6863      	ldr	r3, [r4, #4]
 800e246:	bf08      	it	eq
 800e248:	f8c8 1000 	streq.w	r1, [r8]
 800e24c:	5162      	str	r2, [r4, r5]
 800e24e:	604b      	str	r3, [r1, #4]
 800e250:	4630      	mov	r0, r6
 800e252:	f000 f82f 	bl	800e2b4 <__malloc_unlock>
 800e256:	f104 000b 	add.w	r0, r4, #11
 800e25a:	1d23      	adds	r3, r4, #4
 800e25c:	f020 0007 	bic.w	r0, r0, #7
 800e260:	1ac2      	subs	r2, r0, r3
 800e262:	bf1c      	itt	ne
 800e264:	1a1b      	subne	r3, r3, r0
 800e266:	50a3      	strne	r3, [r4, r2]
 800e268:	e7af      	b.n	800e1ca <_malloc_r+0x22>
 800e26a:	6862      	ldr	r2, [r4, #4]
 800e26c:	42a3      	cmp	r3, r4
 800e26e:	bf0c      	ite	eq
 800e270:	f8c8 2000 	streq.w	r2, [r8]
 800e274:	605a      	strne	r2, [r3, #4]
 800e276:	e7eb      	b.n	800e250 <_malloc_r+0xa8>
 800e278:	4623      	mov	r3, r4
 800e27a:	6864      	ldr	r4, [r4, #4]
 800e27c:	e7ae      	b.n	800e1dc <_malloc_r+0x34>
 800e27e:	463c      	mov	r4, r7
 800e280:	687f      	ldr	r7, [r7, #4]
 800e282:	e7b6      	b.n	800e1f2 <_malloc_r+0x4a>
 800e284:	461a      	mov	r2, r3
 800e286:	685b      	ldr	r3, [r3, #4]
 800e288:	42a3      	cmp	r3, r4
 800e28a:	d1fb      	bne.n	800e284 <_malloc_r+0xdc>
 800e28c:	2300      	movs	r3, #0
 800e28e:	6053      	str	r3, [r2, #4]
 800e290:	e7de      	b.n	800e250 <_malloc_r+0xa8>
 800e292:	230c      	movs	r3, #12
 800e294:	6033      	str	r3, [r6, #0]
 800e296:	4630      	mov	r0, r6
 800e298:	f000 f80c 	bl	800e2b4 <__malloc_unlock>
 800e29c:	e794      	b.n	800e1c8 <_malloc_r+0x20>
 800e29e:	6005      	str	r5, [r0, #0]
 800e2a0:	e7d6      	b.n	800e250 <_malloc_r+0xa8>
 800e2a2:	bf00      	nop
 800e2a4:	200008f8 	.word	0x200008f8

0800e2a8 <__malloc_lock>:
 800e2a8:	4801      	ldr	r0, [pc, #4]	@ (800e2b0 <__malloc_lock+0x8>)
 800e2aa:	f000 be58 	b.w	800ef5e <__retarget_lock_acquire_recursive>
 800e2ae:	bf00      	nop
 800e2b0:	20000a3c 	.word	0x20000a3c

0800e2b4 <__malloc_unlock>:
 800e2b4:	4801      	ldr	r0, [pc, #4]	@ (800e2bc <__malloc_unlock+0x8>)
 800e2b6:	f000 be53 	b.w	800ef60 <__retarget_lock_release_recursive>
 800e2ba:	bf00      	nop
 800e2bc:	20000a3c 	.word	0x20000a3c

0800e2c0 <__cvt>:
 800e2c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e2c4:	ec57 6b10 	vmov	r6, r7, d0
 800e2c8:	2f00      	cmp	r7, #0
 800e2ca:	460c      	mov	r4, r1
 800e2cc:	4619      	mov	r1, r3
 800e2ce:	463b      	mov	r3, r7
 800e2d0:	bfbb      	ittet	lt
 800e2d2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e2d6:	461f      	movlt	r7, r3
 800e2d8:	2300      	movge	r3, #0
 800e2da:	232d      	movlt	r3, #45	@ 0x2d
 800e2dc:	700b      	strb	r3, [r1, #0]
 800e2de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e2e0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e2e4:	4691      	mov	r9, r2
 800e2e6:	f023 0820 	bic.w	r8, r3, #32
 800e2ea:	bfbc      	itt	lt
 800e2ec:	4632      	movlt	r2, r6
 800e2ee:	4616      	movlt	r6, r2
 800e2f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e2f4:	d005      	beq.n	800e302 <__cvt+0x42>
 800e2f6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e2fa:	d100      	bne.n	800e2fe <__cvt+0x3e>
 800e2fc:	3401      	adds	r4, #1
 800e2fe:	2102      	movs	r1, #2
 800e300:	e000      	b.n	800e304 <__cvt+0x44>
 800e302:	2103      	movs	r1, #3
 800e304:	ab03      	add	r3, sp, #12
 800e306:	9301      	str	r3, [sp, #4]
 800e308:	ab02      	add	r3, sp, #8
 800e30a:	9300      	str	r3, [sp, #0]
 800e30c:	ec47 6b10 	vmov	d0, r6, r7
 800e310:	4653      	mov	r3, sl
 800e312:	4622      	mov	r2, r4
 800e314:	f000 fec4 	bl	800f0a0 <_dtoa_r>
 800e318:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e31c:	4605      	mov	r5, r0
 800e31e:	d119      	bne.n	800e354 <__cvt+0x94>
 800e320:	f019 0f01 	tst.w	r9, #1
 800e324:	d00e      	beq.n	800e344 <__cvt+0x84>
 800e326:	eb00 0904 	add.w	r9, r0, r4
 800e32a:	2200      	movs	r2, #0
 800e32c:	2300      	movs	r3, #0
 800e32e:	4630      	mov	r0, r6
 800e330:	4639      	mov	r1, r7
 800e332:	f7f2 fbd1 	bl	8000ad8 <__aeabi_dcmpeq>
 800e336:	b108      	cbz	r0, 800e33c <__cvt+0x7c>
 800e338:	f8cd 900c 	str.w	r9, [sp, #12]
 800e33c:	2230      	movs	r2, #48	@ 0x30
 800e33e:	9b03      	ldr	r3, [sp, #12]
 800e340:	454b      	cmp	r3, r9
 800e342:	d31e      	bcc.n	800e382 <__cvt+0xc2>
 800e344:	9b03      	ldr	r3, [sp, #12]
 800e346:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e348:	1b5b      	subs	r3, r3, r5
 800e34a:	4628      	mov	r0, r5
 800e34c:	6013      	str	r3, [r2, #0]
 800e34e:	b004      	add	sp, #16
 800e350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e354:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e358:	eb00 0904 	add.w	r9, r0, r4
 800e35c:	d1e5      	bne.n	800e32a <__cvt+0x6a>
 800e35e:	7803      	ldrb	r3, [r0, #0]
 800e360:	2b30      	cmp	r3, #48	@ 0x30
 800e362:	d10a      	bne.n	800e37a <__cvt+0xba>
 800e364:	2200      	movs	r2, #0
 800e366:	2300      	movs	r3, #0
 800e368:	4630      	mov	r0, r6
 800e36a:	4639      	mov	r1, r7
 800e36c:	f7f2 fbb4 	bl	8000ad8 <__aeabi_dcmpeq>
 800e370:	b918      	cbnz	r0, 800e37a <__cvt+0xba>
 800e372:	f1c4 0401 	rsb	r4, r4, #1
 800e376:	f8ca 4000 	str.w	r4, [sl]
 800e37a:	f8da 3000 	ldr.w	r3, [sl]
 800e37e:	4499      	add	r9, r3
 800e380:	e7d3      	b.n	800e32a <__cvt+0x6a>
 800e382:	1c59      	adds	r1, r3, #1
 800e384:	9103      	str	r1, [sp, #12]
 800e386:	701a      	strb	r2, [r3, #0]
 800e388:	e7d9      	b.n	800e33e <__cvt+0x7e>

0800e38a <__exponent>:
 800e38a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e38c:	2900      	cmp	r1, #0
 800e38e:	bfba      	itte	lt
 800e390:	4249      	neglt	r1, r1
 800e392:	232d      	movlt	r3, #45	@ 0x2d
 800e394:	232b      	movge	r3, #43	@ 0x2b
 800e396:	2909      	cmp	r1, #9
 800e398:	7002      	strb	r2, [r0, #0]
 800e39a:	7043      	strb	r3, [r0, #1]
 800e39c:	dd29      	ble.n	800e3f2 <__exponent+0x68>
 800e39e:	f10d 0307 	add.w	r3, sp, #7
 800e3a2:	461d      	mov	r5, r3
 800e3a4:	270a      	movs	r7, #10
 800e3a6:	461a      	mov	r2, r3
 800e3a8:	fbb1 f6f7 	udiv	r6, r1, r7
 800e3ac:	fb07 1416 	mls	r4, r7, r6, r1
 800e3b0:	3430      	adds	r4, #48	@ 0x30
 800e3b2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e3b6:	460c      	mov	r4, r1
 800e3b8:	2c63      	cmp	r4, #99	@ 0x63
 800e3ba:	f103 33ff 	add.w	r3, r3, #4294967295
 800e3be:	4631      	mov	r1, r6
 800e3c0:	dcf1      	bgt.n	800e3a6 <__exponent+0x1c>
 800e3c2:	3130      	adds	r1, #48	@ 0x30
 800e3c4:	1e94      	subs	r4, r2, #2
 800e3c6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e3ca:	1c41      	adds	r1, r0, #1
 800e3cc:	4623      	mov	r3, r4
 800e3ce:	42ab      	cmp	r3, r5
 800e3d0:	d30a      	bcc.n	800e3e8 <__exponent+0x5e>
 800e3d2:	f10d 0309 	add.w	r3, sp, #9
 800e3d6:	1a9b      	subs	r3, r3, r2
 800e3d8:	42ac      	cmp	r4, r5
 800e3da:	bf88      	it	hi
 800e3dc:	2300      	movhi	r3, #0
 800e3de:	3302      	adds	r3, #2
 800e3e0:	4403      	add	r3, r0
 800e3e2:	1a18      	subs	r0, r3, r0
 800e3e4:	b003      	add	sp, #12
 800e3e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3e8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e3ec:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e3f0:	e7ed      	b.n	800e3ce <__exponent+0x44>
 800e3f2:	2330      	movs	r3, #48	@ 0x30
 800e3f4:	3130      	adds	r1, #48	@ 0x30
 800e3f6:	7083      	strb	r3, [r0, #2]
 800e3f8:	70c1      	strb	r1, [r0, #3]
 800e3fa:	1d03      	adds	r3, r0, #4
 800e3fc:	e7f1      	b.n	800e3e2 <__exponent+0x58>
	...

0800e400 <_printf_float>:
 800e400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e404:	b08d      	sub	sp, #52	@ 0x34
 800e406:	460c      	mov	r4, r1
 800e408:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e40c:	4616      	mov	r6, r2
 800e40e:	461f      	mov	r7, r3
 800e410:	4605      	mov	r5, r0
 800e412:	f000 fd0b 	bl	800ee2c <_localeconv_r>
 800e416:	6803      	ldr	r3, [r0, #0]
 800e418:	9304      	str	r3, [sp, #16]
 800e41a:	4618      	mov	r0, r3
 800e41c:	f7f1 ff30 	bl	8000280 <strlen>
 800e420:	2300      	movs	r3, #0
 800e422:	930a      	str	r3, [sp, #40]	@ 0x28
 800e424:	f8d8 3000 	ldr.w	r3, [r8]
 800e428:	9005      	str	r0, [sp, #20]
 800e42a:	3307      	adds	r3, #7
 800e42c:	f023 0307 	bic.w	r3, r3, #7
 800e430:	f103 0208 	add.w	r2, r3, #8
 800e434:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e438:	f8d4 b000 	ldr.w	fp, [r4]
 800e43c:	f8c8 2000 	str.w	r2, [r8]
 800e440:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e444:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e448:	9307      	str	r3, [sp, #28]
 800e44a:	f8cd 8018 	str.w	r8, [sp, #24]
 800e44e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e452:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e456:	4b9c      	ldr	r3, [pc, #624]	@ (800e6c8 <_printf_float+0x2c8>)
 800e458:	f04f 32ff 	mov.w	r2, #4294967295
 800e45c:	f7f2 fb6e 	bl	8000b3c <__aeabi_dcmpun>
 800e460:	bb70      	cbnz	r0, 800e4c0 <_printf_float+0xc0>
 800e462:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e466:	4b98      	ldr	r3, [pc, #608]	@ (800e6c8 <_printf_float+0x2c8>)
 800e468:	f04f 32ff 	mov.w	r2, #4294967295
 800e46c:	f7f2 fb48 	bl	8000b00 <__aeabi_dcmple>
 800e470:	bb30      	cbnz	r0, 800e4c0 <_printf_float+0xc0>
 800e472:	2200      	movs	r2, #0
 800e474:	2300      	movs	r3, #0
 800e476:	4640      	mov	r0, r8
 800e478:	4649      	mov	r1, r9
 800e47a:	f7f2 fb37 	bl	8000aec <__aeabi_dcmplt>
 800e47e:	b110      	cbz	r0, 800e486 <_printf_float+0x86>
 800e480:	232d      	movs	r3, #45	@ 0x2d
 800e482:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e486:	4a91      	ldr	r2, [pc, #580]	@ (800e6cc <_printf_float+0x2cc>)
 800e488:	4b91      	ldr	r3, [pc, #580]	@ (800e6d0 <_printf_float+0x2d0>)
 800e48a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e48e:	bf94      	ite	ls
 800e490:	4690      	movls	r8, r2
 800e492:	4698      	movhi	r8, r3
 800e494:	2303      	movs	r3, #3
 800e496:	6123      	str	r3, [r4, #16]
 800e498:	f02b 0304 	bic.w	r3, fp, #4
 800e49c:	6023      	str	r3, [r4, #0]
 800e49e:	f04f 0900 	mov.w	r9, #0
 800e4a2:	9700      	str	r7, [sp, #0]
 800e4a4:	4633      	mov	r3, r6
 800e4a6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e4a8:	4621      	mov	r1, r4
 800e4aa:	4628      	mov	r0, r5
 800e4ac:	f000 f9d2 	bl	800e854 <_printf_common>
 800e4b0:	3001      	adds	r0, #1
 800e4b2:	f040 808d 	bne.w	800e5d0 <_printf_float+0x1d0>
 800e4b6:	f04f 30ff 	mov.w	r0, #4294967295
 800e4ba:	b00d      	add	sp, #52	@ 0x34
 800e4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4c0:	4642      	mov	r2, r8
 800e4c2:	464b      	mov	r3, r9
 800e4c4:	4640      	mov	r0, r8
 800e4c6:	4649      	mov	r1, r9
 800e4c8:	f7f2 fb38 	bl	8000b3c <__aeabi_dcmpun>
 800e4cc:	b140      	cbz	r0, 800e4e0 <_printf_float+0xe0>
 800e4ce:	464b      	mov	r3, r9
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	bfbc      	itt	lt
 800e4d4:	232d      	movlt	r3, #45	@ 0x2d
 800e4d6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e4da:	4a7e      	ldr	r2, [pc, #504]	@ (800e6d4 <_printf_float+0x2d4>)
 800e4dc:	4b7e      	ldr	r3, [pc, #504]	@ (800e6d8 <_printf_float+0x2d8>)
 800e4de:	e7d4      	b.n	800e48a <_printf_float+0x8a>
 800e4e0:	6863      	ldr	r3, [r4, #4]
 800e4e2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e4e6:	9206      	str	r2, [sp, #24]
 800e4e8:	1c5a      	adds	r2, r3, #1
 800e4ea:	d13b      	bne.n	800e564 <_printf_float+0x164>
 800e4ec:	2306      	movs	r3, #6
 800e4ee:	6063      	str	r3, [r4, #4]
 800e4f0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	6022      	str	r2, [r4, #0]
 800e4f8:	9303      	str	r3, [sp, #12]
 800e4fa:	ab0a      	add	r3, sp, #40	@ 0x28
 800e4fc:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e500:	ab09      	add	r3, sp, #36	@ 0x24
 800e502:	9300      	str	r3, [sp, #0]
 800e504:	6861      	ldr	r1, [r4, #4]
 800e506:	ec49 8b10 	vmov	d0, r8, r9
 800e50a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e50e:	4628      	mov	r0, r5
 800e510:	f7ff fed6 	bl	800e2c0 <__cvt>
 800e514:	9b06      	ldr	r3, [sp, #24]
 800e516:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e518:	2b47      	cmp	r3, #71	@ 0x47
 800e51a:	4680      	mov	r8, r0
 800e51c:	d129      	bne.n	800e572 <_printf_float+0x172>
 800e51e:	1cc8      	adds	r0, r1, #3
 800e520:	db02      	blt.n	800e528 <_printf_float+0x128>
 800e522:	6863      	ldr	r3, [r4, #4]
 800e524:	4299      	cmp	r1, r3
 800e526:	dd41      	ble.n	800e5ac <_printf_float+0x1ac>
 800e528:	f1aa 0a02 	sub.w	sl, sl, #2
 800e52c:	fa5f fa8a 	uxtb.w	sl, sl
 800e530:	3901      	subs	r1, #1
 800e532:	4652      	mov	r2, sl
 800e534:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e538:	9109      	str	r1, [sp, #36]	@ 0x24
 800e53a:	f7ff ff26 	bl	800e38a <__exponent>
 800e53e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e540:	1813      	adds	r3, r2, r0
 800e542:	2a01      	cmp	r2, #1
 800e544:	4681      	mov	r9, r0
 800e546:	6123      	str	r3, [r4, #16]
 800e548:	dc02      	bgt.n	800e550 <_printf_float+0x150>
 800e54a:	6822      	ldr	r2, [r4, #0]
 800e54c:	07d2      	lsls	r2, r2, #31
 800e54e:	d501      	bpl.n	800e554 <_printf_float+0x154>
 800e550:	3301      	adds	r3, #1
 800e552:	6123      	str	r3, [r4, #16]
 800e554:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d0a2      	beq.n	800e4a2 <_printf_float+0xa2>
 800e55c:	232d      	movs	r3, #45	@ 0x2d
 800e55e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e562:	e79e      	b.n	800e4a2 <_printf_float+0xa2>
 800e564:	9a06      	ldr	r2, [sp, #24]
 800e566:	2a47      	cmp	r2, #71	@ 0x47
 800e568:	d1c2      	bne.n	800e4f0 <_printf_float+0xf0>
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d1c0      	bne.n	800e4f0 <_printf_float+0xf0>
 800e56e:	2301      	movs	r3, #1
 800e570:	e7bd      	b.n	800e4ee <_printf_float+0xee>
 800e572:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e576:	d9db      	bls.n	800e530 <_printf_float+0x130>
 800e578:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e57c:	d118      	bne.n	800e5b0 <_printf_float+0x1b0>
 800e57e:	2900      	cmp	r1, #0
 800e580:	6863      	ldr	r3, [r4, #4]
 800e582:	dd0b      	ble.n	800e59c <_printf_float+0x19c>
 800e584:	6121      	str	r1, [r4, #16]
 800e586:	b913      	cbnz	r3, 800e58e <_printf_float+0x18e>
 800e588:	6822      	ldr	r2, [r4, #0]
 800e58a:	07d0      	lsls	r0, r2, #31
 800e58c:	d502      	bpl.n	800e594 <_printf_float+0x194>
 800e58e:	3301      	adds	r3, #1
 800e590:	440b      	add	r3, r1
 800e592:	6123      	str	r3, [r4, #16]
 800e594:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e596:	f04f 0900 	mov.w	r9, #0
 800e59a:	e7db      	b.n	800e554 <_printf_float+0x154>
 800e59c:	b913      	cbnz	r3, 800e5a4 <_printf_float+0x1a4>
 800e59e:	6822      	ldr	r2, [r4, #0]
 800e5a0:	07d2      	lsls	r2, r2, #31
 800e5a2:	d501      	bpl.n	800e5a8 <_printf_float+0x1a8>
 800e5a4:	3302      	adds	r3, #2
 800e5a6:	e7f4      	b.n	800e592 <_printf_float+0x192>
 800e5a8:	2301      	movs	r3, #1
 800e5aa:	e7f2      	b.n	800e592 <_printf_float+0x192>
 800e5ac:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e5b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5b2:	4299      	cmp	r1, r3
 800e5b4:	db05      	blt.n	800e5c2 <_printf_float+0x1c2>
 800e5b6:	6823      	ldr	r3, [r4, #0]
 800e5b8:	6121      	str	r1, [r4, #16]
 800e5ba:	07d8      	lsls	r0, r3, #31
 800e5bc:	d5ea      	bpl.n	800e594 <_printf_float+0x194>
 800e5be:	1c4b      	adds	r3, r1, #1
 800e5c0:	e7e7      	b.n	800e592 <_printf_float+0x192>
 800e5c2:	2900      	cmp	r1, #0
 800e5c4:	bfd4      	ite	le
 800e5c6:	f1c1 0202 	rsble	r2, r1, #2
 800e5ca:	2201      	movgt	r2, #1
 800e5cc:	4413      	add	r3, r2
 800e5ce:	e7e0      	b.n	800e592 <_printf_float+0x192>
 800e5d0:	6823      	ldr	r3, [r4, #0]
 800e5d2:	055a      	lsls	r2, r3, #21
 800e5d4:	d407      	bmi.n	800e5e6 <_printf_float+0x1e6>
 800e5d6:	6923      	ldr	r3, [r4, #16]
 800e5d8:	4642      	mov	r2, r8
 800e5da:	4631      	mov	r1, r6
 800e5dc:	4628      	mov	r0, r5
 800e5de:	47b8      	blx	r7
 800e5e0:	3001      	adds	r0, #1
 800e5e2:	d12b      	bne.n	800e63c <_printf_float+0x23c>
 800e5e4:	e767      	b.n	800e4b6 <_printf_float+0xb6>
 800e5e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e5ea:	f240 80dd 	bls.w	800e7a8 <_printf_float+0x3a8>
 800e5ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	f7f2 fa6f 	bl	8000ad8 <__aeabi_dcmpeq>
 800e5fa:	2800      	cmp	r0, #0
 800e5fc:	d033      	beq.n	800e666 <_printf_float+0x266>
 800e5fe:	4a37      	ldr	r2, [pc, #220]	@ (800e6dc <_printf_float+0x2dc>)
 800e600:	2301      	movs	r3, #1
 800e602:	4631      	mov	r1, r6
 800e604:	4628      	mov	r0, r5
 800e606:	47b8      	blx	r7
 800e608:	3001      	adds	r0, #1
 800e60a:	f43f af54 	beq.w	800e4b6 <_printf_float+0xb6>
 800e60e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e612:	4543      	cmp	r3, r8
 800e614:	db02      	blt.n	800e61c <_printf_float+0x21c>
 800e616:	6823      	ldr	r3, [r4, #0]
 800e618:	07d8      	lsls	r0, r3, #31
 800e61a:	d50f      	bpl.n	800e63c <_printf_float+0x23c>
 800e61c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e620:	4631      	mov	r1, r6
 800e622:	4628      	mov	r0, r5
 800e624:	47b8      	blx	r7
 800e626:	3001      	adds	r0, #1
 800e628:	f43f af45 	beq.w	800e4b6 <_printf_float+0xb6>
 800e62c:	f04f 0900 	mov.w	r9, #0
 800e630:	f108 38ff 	add.w	r8, r8, #4294967295
 800e634:	f104 0a1a 	add.w	sl, r4, #26
 800e638:	45c8      	cmp	r8, r9
 800e63a:	dc09      	bgt.n	800e650 <_printf_float+0x250>
 800e63c:	6823      	ldr	r3, [r4, #0]
 800e63e:	079b      	lsls	r3, r3, #30
 800e640:	f100 8103 	bmi.w	800e84a <_printf_float+0x44a>
 800e644:	68e0      	ldr	r0, [r4, #12]
 800e646:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e648:	4298      	cmp	r0, r3
 800e64a:	bfb8      	it	lt
 800e64c:	4618      	movlt	r0, r3
 800e64e:	e734      	b.n	800e4ba <_printf_float+0xba>
 800e650:	2301      	movs	r3, #1
 800e652:	4652      	mov	r2, sl
 800e654:	4631      	mov	r1, r6
 800e656:	4628      	mov	r0, r5
 800e658:	47b8      	blx	r7
 800e65a:	3001      	adds	r0, #1
 800e65c:	f43f af2b 	beq.w	800e4b6 <_printf_float+0xb6>
 800e660:	f109 0901 	add.w	r9, r9, #1
 800e664:	e7e8      	b.n	800e638 <_printf_float+0x238>
 800e666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e668:	2b00      	cmp	r3, #0
 800e66a:	dc39      	bgt.n	800e6e0 <_printf_float+0x2e0>
 800e66c:	4a1b      	ldr	r2, [pc, #108]	@ (800e6dc <_printf_float+0x2dc>)
 800e66e:	2301      	movs	r3, #1
 800e670:	4631      	mov	r1, r6
 800e672:	4628      	mov	r0, r5
 800e674:	47b8      	blx	r7
 800e676:	3001      	adds	r0, #1
 800e678:	f43f af1d 	beq.w	800e4b6 <_printf_float+0xb6>
 800e67c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e680:	ea59 0303 	orrs.w	r3, r9, r3
 800e684:	d102      	bne.n	800e68c <_printf_float+0x28c>
 800e686:	6823      	ldr	r3, [r4, #0]
 800e688:	07d9      	lsls	r1, r3, #31
 800e68a:	d5d7      	bpl.n	800e63c <_printf_float+0x23c>
 800e68c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e690:	4631      	mov	r1, r6
 800e692:	4628      	mov	r0, r5
 800e694:	47b8      	blx	r7
 800e696:	3001      	adds	r0, #1
 800e698:	f43f af0d 	beq.w	800e4b6 <_printf_float+0xb6>
 800e69c:	f04f 0a00 	mov.w	sl, #0
 800e6a0:	f104 0b1a 	add.w	fp, r4, #26
 800e6a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e6a6:	425b      	negs	r3, r3
 800e6a8:	4553      	cmp	r3, sl
 800e6aa:	dc01      	bgt.n	800e6b0 <_printf_float+0x2b0>
 800e6ac:	464b      	mov	r3, r9
 800e6ae:	e793      	b.n	800e5d8 <_printf_float+0x1d8>
 800e6b0:	2301      	movs	r3, #1
 800e6b2:	465a      	mov	r2, fp
 800e6b4:	4631      	mov	r1, r6
 800e6b6:	4628      	mov	r0, r5
 800e6b8:	47b8      	blx	r7
 800e6ba:	3001      	adds	r0, #1
 800e6bc:	f43f aefb 	beq.w	800e4b6 <_printf_float+0xb6>
 800e6c0:	f10a 0a01 	add.w	sl, sl, #1
 800e6c4:	e7ee      	b.n	800e6a4 <_printf_float+0x2a4>
 800e6c6:	bf00      	nop
 800e6c8:	7fefffff 	.word	0x7fefffff
 800e6cc:	08010fc8 	.word	0x08010fc8
 800e6d0:	08010fcc 	.word	0x08010fcc
 800e6d4:	08010fd0 	.word	0x08010fd0
 800e6d8:	08010fd4 	.word	0x08010fd4
 800e6dc:	08010fd8 	.word	0x08010fd8
 800e6e0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e6e2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e6e6:	4553      	cmp	r3, sl
 800e6e8:	bfa8      	it	ge
 800e6ea:	4653      	movge	r3, sl
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	4699      	mov	r9, r3
 800e6f0:	dc36      	bgt.n	800e760 <_printf_float+0x360>
 800e6f2:	f04f 0b00 	mov.w	fp, #0
 800e6f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e6fa:	f104 021a 	add.w	r2, r4, #26
 800e6fe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e700:	9306      	str	r3, [sp, #24]
 800e702:	eba3 0309 	sub.w	r3, r3, r9
 800e706:	455b      	cmp	r3, fp
 800e708:	dc31      	bgt.n	800e76e <_printf_float+0x36e>
 800e70a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e70c:	459a      	cmp	sl, r3
 800e70e:	dc3a      	bgt.n	800e786 <_printf_float+0x386>
 800e710:	6823      	ldr	r3, [r4, #0]
 800e712:	07da      	lsls	r2, r3, #31
 800e714:	d437      	bmi.n	800e786 <_printf_float+0x386>
 800e716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e718:	ebaa 0903 	sub.w	r9, sl, r3
 800e71c:	9b06      	ldr	r3, [sp, #24]
 800e71e:	ebaa 0303 	sub.w	r3, sl, r3
 800e722:	4599      	cmp	r9, r3
 800e724:	bfa8      	it	ge
 800e726:	4699      	movge	r9, r3
 800e728:	f1b9 0f00 	cmp.w	r9, #0
 800e72c:	dc33      	bgt.n	800e796 <_printf_float+0x396>
 800e72e:	f04f 0800 	mov.w	r8, #0
 800e732:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e736:	f104 0b1a 	add.w	fp, r4, #26
 800e73a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e73c:	ebaa 0303 	sub.w	r3, sl, r3
 800e740:	eba3 0309 	sub.w	r3, r3, r9
 800e744:	4543      	cmp	r3, r8
 800e746:	f77f af79 	ble.w	800e63c <_printf_float+0x23c>
 800e74a:	2301      	movs	r3, #1
 800e74c:	465a      	mov	r2, fp
 800e74e:	4631      	mov	r1, r6
 800e750:	4628      	mov	r0, r5
 800e752:	47b8      	blx	r7
 800e754:	3001      	adds	r0, #1
 800e756:	f43f aeae 	beq.w	800e4b6 <_printf_float+0xb6>
 800e75a:	f108 0801 	add.w	r8, r8, #1
 800e75e:	e7ec      	b.n	800e73a <_printf_float+0x33a>
 800e760:	4642      	mov	r2, r8
 800e762:	4631      	mov	r1, r6
 800e764:	4628      	mov	r0, r5
 800e766:	47b8      	blx	r7
 800e768:	3001      	adds	r0, #1
 800e76a:	d1c2      	bne.n	800e6f2 <_printf_float+0x2f2>
 800e76c:	e6a3      	b.n	800e4b6 <_printf_float+0xb6>
 800e76e:	2301      	movs	r3, #1
 800e770:	4631      	mov	r1, r6
 800e772:	4628      	mov	r0, r5
 800e774:	9206      	str	r2, [sp, #24]
 800e776:	47b8      	blx	r7
 800e778:	3001      	adds	r0, #1
 800e77a:	f43f ae9c 	beq.w	800e4b6 <_printf_float+0xb6>
 800e77e:	9a06      	ldr	r2, [sp, #24]
 800e780:	f10b 0b01 	add.w	fp, fp, #1
 800e784:	e7bb      	b.n	800e6fe <_printf_float+0x2fe>
 800e786:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e78a:	4631      	mov	r1, r6
 800e78c:	4628      	mov	r0, r5
 800e78e:	47b8      	blx	r7
 800e790:	3001      	adds	r0, #1
 800e792:	d1c0      	bne.n	800e716 <_printf_float+0x316>
 800e794:	e68f      	b.n	800e4b6 <_printf_float+0xb6>
 800e796:	9a06      	ldr	r2, [sp, #24]
 800e798:	464b      	mov	r3, r9
 800e79a:	4442      	add	r2, r8
 800e79c:	4631      	mov	r1, r6
 800e79e:	4628      	mov	r0, r5
 800e7a0:	47b8      	blx	r7
 800e7a2:	3001      	adds	r0, #1
 800e7a4:	d1c3      	bne.n	800e72e <_printf_float+0x32e>
 800e7a6:	e686      	b.n	800e4b6 <_printf_float+0xb6>
 800e7a8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e7ac:	f1ba 0f01 	cmp.w	sl, #1
 800e7b0:	dc01      	bgt.n	800e7b6 <_printf_float+0x3b6>
 800e7b2:	07db      	lsls	r3, r3, #31
 800e7b4:	d536      	bpl.n	800e824 <_printf_float+0x424>
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	4642      	mov	r2, r8
 800e7ba:	4631      	mov	r1, r6
 800e7bc:	4628      	mov	r0, r5
 800e7be:	47b8      	blx	r7
 800e7c0:	3001      	adds	r0, #1
 800e7c2:	f43f ae78 	beq.w	800e4b6 <_printf_float+0xb6>
 800e7c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e7ca:	4631      	mov	r1, r6
 800e7cc:	4628      	mov	r0, r5
 800e7ce:	47b8      	blx	r7
 800e7d0:	3001      	adds	r0, #1
 800e7d2:	f43f ae70 	beq.w	800e4b6 <_printf_float+0xb6>
 800e7d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e7da:	2200      	movs	r2, #0
 800e7dc:	2300      	movs	r3, #0
 800e7de:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e7e2:	f7f2 f979 	bl	8000ad8 <__aeabi_dcmpeq>
 800e7e6:	b9c0      	cbnz	r0, 800e81a <_printf_float+0x41a>
 800e7e8:	4653      	mov	r3, sl
 800e7ea:	f108 0201 	add.w	r2, r8, #1
 800e7ee:	4631      	mov	r1, r6
 800e7f0:	4628      	mov	r0, r5
 800e7f2:	47b8      	blx	r7
 800e7f4:	3001      	adds	r0, #1
 800e7f6:	d10c      	bne.n	800e812 <_printf_float+0x412>
 800e7f8:	e65d      	b.n	800e4b6 <_printf_float+0xb6>
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	465a      	mov	r2, fp
 800e7fe:	4631      	mov	r1, r6
 800e800:	4628      	mov	r0, r5
 800e802:	47b8      	blx	r7
 800e804:	3001      	adds	r0, #1
 800e806:	f43f ae56 	beq.w	800e4b6 <_printf_float+0xb6>
 800e80a:	f108 0801 	add.w	r8, r8, #1
 800e80e:	45d0      	cmp	r8, sl
 800e810:	dbf3      	blt.n	800e7fa <_printf_float+0x3fa>
 800e812:	464b      	mov	r3, r9
 800e814:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e818:	e6df      	b.n	800e5da <_printf_float+0x1da>
 800e81a:	f04f 0800 	mov.w	r8, #0
 800e81e:	f104 0b1a 	add.w	fp, r4, #26
 800e822:	e7f4      	b.n	800e80e <_printf_float+0x40e>
 800e824:	2301      	movs	r3, #1
 800e826:	4642      	mov	r2, r8
 800e828:	e7e1      	b.n	800e7ee <_printf_float+0x3ee>
 800e82a:	2301      	movs	r3, #1
 800e82c:	464a      	mov	r2, r9
 800e82e:	4631      	mov	r1, r6
 800e830:	4628      	mov	r0, r5
 800e832:	47b8      	blx	r7
 800e834:	3001      	adds	r0, #1
 800e836:	f43f ae3e 	beq.w	800e4b6 <_printf_float+0xb6>
 800e83a:	f108 0801 	add.w	r8, r8, #1
 800e83e:	68e3      	ldr	r3, [r4, #12]
 800e840:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e842:	1a5b      	subs	r3, r3, r1
 800e844:	4543      	cmp	r3, r8
 800e846:	dcf0      	bgt.n	800e82a <_printf_float+0x42a>
 800e848:	e6fc      	b.n	800e644 <_printf_float+0x244>
 800e84a:	f04f 0800 	mov.w	r8, #0
 800e84e:	f104 0919 	add.w	r9, r4, #25
 800e852:	e7f4      	b.n	800e83e <_printf_float+0x43e>

0800e854 <_printf_common>:
 800e854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e858:	4616      	mov	r6, r2
 800e85a:	4698      	mov	r8, r3
 800e85c:	688a      	ldr	r2, [r1, #8]
 800e85e:	690b      	ldr	r3, [r1, #16]
 800e860:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e864:	4293      	cmp	r3, r2
 800e866:	bfb8      	it	lt
 800e868:	4613      	movlt	r3, r2
 800e86a:	6033      	str	r3, [r6, #0]
 800e86c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e870:	4607      	mov	r7, r0
 800e872:	460c      	mov	r4, r1
 800e874:	b10a      	cbz	r2, 800e87a <_printf_common+0x26>
 800e876:	3301      	adds	r3, #1
 800e878:	6033      	str	r3, [r6, #0]
 800e87a:	6823      	ldr	r3, [r4, #0]
 800e87c:	0699      	lsls	r1, r3, #26
 800e87e:	bf42      	ittt	mi
 800e880:	6833      	ldrmi	r3, [r6, #0]
 800e882:	3302      	addmi	r3, #2
 800e884:	6033      	strmi	r3, [r6, #0]
 800e886:	6825      	ldr	r5, [r4, #0]
 800e888:	f015 0506 	ands.w	r5, r5, #6
 800e88c:	d106      	bne.n	800e89c <_printf_common+0x48>
 800e88e:	f104 0a19 	add.w	sl, r4, #25
 800e892:	68e3      	ldr	r3, [r4, #12]
 800e894:	6832      	ldr	r2, [r6, #0]
 800e896:	1a9b      	subs	r3, r3, r2
 800e898:	42ab      	cmp	r3, r5
 800e89a:	dc26      	bgt.n	800e8ea <_printf_common+0x96>
 800e89c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e8a0:	6822      	ldr	r2, [r4, #0]
 800e8a2:	3b00      	subs	r3, #0
 800e8a4:	bf18      	it	ne
 800e8a6:	2301      	movne	r3, #1
 800e8a8:	0692      	lsls	r2, r2, #26
 800e8aa:	d42b      	bmi.n	800e904 <_printf_common+0xb0>
 800e8ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e8b0:	4641      	mov	r1, r8
 800e8b2:	4638      	mov	r0, r7
 800e8b4:	47c8      	blx	r9
 800e8b6:	3001      	adds	r0, #1
 800e8b8:	d01e      	beq.n	800e8f8 <_printf_common+0xa4>
 800e8ba:	6823      	ldr	r3, [r4, #0]
 800e8bc:	6922      	ldr	r2, [r4, #16]
 800e8be:	f003 0306 	and.w	r3, r3, #6
 800e8c2:	2b04      	cmp	r3, #4
 800e8c4:	bf02      	ittt	eq
 800e8c6:	68e5      	ldreq	r5, [r4, #12]
 800e8c8:	6833      	ldreq	r3, [r6, #0]
 800e8ca:	1aed      	subeq	r5, r5, r3
 800e8cc:	68a3      	ldr	r3, [r4, #8]
 800e8ce:	bf0c      	ite	eq
 800e8d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e8d4:	2500      	movne	r5, #0
 800e8d6:	4293      	cmp	r3, r2
 800e8d8:	bfc4      	itt	gt
 800e8da:	1a9b      	subgt	r3, r3, r2
 800e8dc:	18ed      	addgt	r5, r5, r3
 800e8de:	2600      	movs	r6, #0
 800e8e0:	341a      	adds	r4, #26
 800e8e2:	42b5      	cmp	r5, r6
 800e8e4:	d11a      	bne.n	800e91c <_printf_common+0xc8>
 800e8e6:	2000      	movs	r0, #0
 800e8e8:	e008      	b.n	800e8fc <_printf_common+0xa8>
 800e8ea:	2301      	movs	r3, #1
 800e8ec:	4652      	mov	r2, sl
 800e8ee:	4641      	mov	r1, r8
 800e8f0:	4638      	mov	r0, r7
 800e8f2:	47c8      	blx	r9
 800e8f4:	3001      	adds	r0, #1
 800e8f6:	d103      	bne.n	800e900 <_printf_common+0xac>
 800e8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e8fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e900:	3501      	adds	r5, #1
 800e902:	e7c6      	b.n	800e892 <_printf_common+0x3e>
 800e904:	18e1      	adds	r1, r4, r3
 800e906:	1c5a      	adds	r2, r3, #1
 800e908:	2030      	movs	r0, #48	@ 0x30
 800e90a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e90e:	4422      	add	r2, r4
 800e910:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e914:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e918:	3302      	adds	r3, #2
 800e91a:	e7c7      	b.n	800e8ac <_printf_common+0x58>
 800e91c:	2301      	movs	r3, #1
 800e91e:	4622      	mov	r2, r4
 800e920:	4641      	mov	r1, r8
 800e922:	4638      	mov	r0, r7
 800e924:	47c8      	blx	r9
 800e926:	3001      	adds	r0, #1
 800e928:	d0e6      	beq.n	800e8f8 <_printf_common+0xa4>
 800e92a:	3601      	adds	r6, #1
 800e92c:	e7d9      	b.n	800e8e2 <_printf_common+0x8e>
	...

0800e930 <_printf_i>:
 800e930:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e934:	7e0f      	ldrb	r7, [r1, #24]
 800e936:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e938:	2f78      	cmp	r7, #120	@ 0x78
 800e93a:	4691      	mov	r9, r2
 800e93c:	4680      	mov	r8, r0
 800e93e:	460c      	mov	r4, r1
 800e940:	469a      	mov	sl, r3
 800e942:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e946:	d807      	bhi.n	800e958 <_printf_i+0x28>
 800e948:	2f62      	cmp	r7, #98	@ 0x62
 800e94a:	d80a      	bhi.n	800e962 <_printf_i+0x32>
 800e94c:	2f00      	cmp	r7, #0
 800e94e:	f000 80d2 	beq.w	800eaf6 <_printf_i+0x1c6>
 800e952:	2f58      	cmp	r7, #88	@ 0x58
 800e954:	f000 80b9 	beq.w	800eaca <_printf_i+0x19a>
 800e958:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e95c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e960:	e03a      	b.n	800e9d8 <_printf_i+0xa8>
 800e962:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e966:	2b15      	cmp	r3, #21
 800e968:	d8f6      	bhi.n	800e958 <_printf_i+0x28>
 800e96a:	a101      	add	r1, pc, #4	@ (adr r1, 800e970 <_printf_i+0x40>)
 800e96c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e970:	0800e9c9 	.word	0x0800e9c9
 800e974:	0800e9dd 	.word	0x0800e9dd
 800e978:	0800e959 	.word	0x0800e959
 800e97c:	0800e959 	.word	0x0800e959
 800e980:	0800e959 	.word	0x0800e959
 800e984:	0800e959 	.word	0x0800e959
 800e988:	0800e9dd 	.word	0x0800e9dd
 800e98c:	0800e959 	.word	0x0800e959
 800e990:	0800e959 	.word	0x0800e959
 800e994:	0800e959 	.word	0x0800e959
 800e998:	0800e959 	.word	0x0800e959
 800e99c:	0800eadd 	.word	0x0800eadd
 800e9a0:	0800ea07 	.word	0x0800ea07
 800e9a4:	0800ea97 	.word	0x0800ea97
 800e9a8:	0800e959 	.word	0x0800e959
 800e9ac:	0800e959 	.word	0x0800e959
 800e9b0:	0800eaff 	.word	0x0800eaff
 800e9b4:	0800e959 	.word	0x0800e959
 800e9b8:	0800ea07 	.word	0x0800ea07
 800e9bc:	0800e959 	.word	0x0800e959
 800e9c0:	0800e959 	.word	0x0800e959
 800e9c4:	0800ea9f 	.word	0x0800ea9f
 800e9c8:	6833      	ldr	r3, [r6, #0]
 800e9ca:	1d1a      	adds	r2, r3, #4
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	6032      	str	r2, [r6, #0]
 800e9d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e9d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e9d8:	2301      	movs	r3, #1
 800e9da:	e09d      	b.n	800eb18 <_printf_i+0x1e8>
 800e9dc:	6833      	ldr	r3, [r6, #0]
 800e9de:	6820      	ldr	r0, [r4, #0]
 800e9e0:	1d19      	adds	r1, r3, #4
 800e9e2:	6031      	str	r1, [r6, #0]
 800e9e4:	0606      	lsls	r6, r0, #24
 800e9e6:	d501      	bpl.n	800e9ec <_printf_i+0xbc>
 800e9e8:	681d      	ldr	r5, [r3, #0]
 800e9ea:	e003      	b.n	800e9f4 <_printf_i+0xc4>
 800e9ec:	0645      	lsls	r5, r0, #25
 800e9ee:	d5fb      	bpl.n	800e9e8 <_printf_i+0xb8>
 800e9f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e9f4:	2d00      	cmp	r5, #0
 800e9f6:	da03      	bge.n	800ea00 <_printf_i+0xd0>
 800e9f8:	232d      	movs	r3, #45	@ 0x2d
 800e9fa:	426d      	negs	r5, r5
 800e9fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea00:	4859      	ldr	r0, [pc, #356]	@ (800eb68 <_printf_i+0x238>)
 800ea02:	230a      	movs	r3, #10
 800ea04:	e011      	b.n	800ea2a <_printf_i+0xfa>
 800ea06:	6821      	ldr	r1, [r4, #0]
 800ea08:	6833      	ldr	r3, [r6, #0]
 800ea0a:	0608      	lsls	r0, r1, #24
 800ea0c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ea10:	d402      	bmi.n	800ea18 <_printf_i+0xe8>
 800ea12:	0649      	lsls	r1, r1, #25
 800ea14:	bf48      	it	mi
 800ea16:	b2ad      	uxthmi	r5, r5
 800ea18:	2f6f      	cmp	r7, #111	@ 0x6f
 800ea1a:	4853      	ldr	r0, [pc, #332]	@ (800eb68 <_printf_i+0x238>)
 800ea1c:	6033      	str	r3, [r6, #0]
 800ea1e:	bf14      	ite	ne
 800ea20:	230a      	movne	r3, #10
 800ea22:	2308      	moveq	r3, #8
 800ea24:	2100      	movs	r1, #0
 800ea26:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ea2a:	6866      	ldr	r6, [r4, #4]
 800ea2c:	60a6      	str	r6, [r4, #8]
 800ea2e:	2e00      	cmp	r6, #0
 800ea30:	bfa2      	ittt	ge
 800ea32:	6821      	ldrge	r1, [r4, #0]
 800ea34:	f021 0104 	bicge.w	r1, r1, #4
 800ea38:	6021      	strge	r1, [r4, #0]
 800ea3a:	b90d      	cbnz	r5, 800ea40 <_printf_i+0x110>
 800ea3c:	2e00      	cmp	r6, #0
 800ea3e:	d04b      	beq.n	800ead8 <_printf_i+0x1a8>
 800ea40:	4616      	mov	r6, r2
 800ea42:	fbb5 f1f3 	udiv	r1, r5, r3
 800ea46:	fb03 5711 	mls	r7, r3, r1, r5
 800ea4a:	5dc7      	ldrb	r7, [r0, r7]
 800ea4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ea50:	462f      	mov	r7, r5
 800ea52:	42bb      	cmp	r3, r7
 800ea54:	460d      	mov	r5, r1
 800ea56:	d9f4      	bls.n	800ea42 <_printf_i+0x112>
 800ea58:	2b08      	cmp	r3, #8
 800ea5a:	d10b      	bne.n	800ea74 <_printf_i+0x144>
 800ea5c:	6823      	ldr	r3, [r4, #0]
 800ea5e:	07df      	lsls	r7, r3, #31
 800ea60:	d508      	bpl.n	800ea74 <_printf_i+0x144>
 800ea62:	6923      	ldr	r3, [r4, #16]
 800ea64:	6861      	ldr	r1, [r4, #4]
 800ea66:	4299      	cmp	r1, r3
 800ea68:	bfde      	ittt	le
 800ea6a:	2330      	movle	r3, #48	@ 0x30
 800ea6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ea70:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ea74:	1b92      	subs	r2, r2, r6
 800ea76:	6122      	str	r2, [r4, #16]
 800ea78:	f8cd a000 	str.w	sl, [sp]
 800ea7c:	464b      	mov	r3, r9
 800ea7e:	aa03      	add	r2, sp, #12
 800ea80:	4621      	mov	r1, r4
 800ea82:	4640      	mov	r0, r8
 800ea84:	f7ff fee6 	bl	800e854 <_printf_common>
 800ea88:	3001      	adds	r0, #1
 800ea8a:	d14a      	bne.n	800eb22 <_printf_i+0x1f2>
 800ea8c:	f04f 30ff 	mov.w	r0, #4294967295
 800ea90:	b004      	add	sp, #16
 800ea92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea96:	6823      	ldr	r3, [r4, #0]
 800ea98:	f043 0320 	orr.w	r3, r3, #32
 800ea9c:	6023      	str	r3, [r4, #0]
 800ea9e:	4833      	ldr	r0, [pc, #204]	@ (800eb6c <_printf_i+0x23c>)
 800eaa0:	2778      	movs	r7, #120	@ 0x78
 800eaa2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800eaa6:	6823      	ldr	r3, [r4, #0]
 800eaa8:	6831      	ldr	r1, [r6, #0]
 800eaaa:	061f      	lsls	r7, r3, #24
 800eaac:	f851 5b04 	ldr.w	r5, [r1], #4
 800eab0:	d402      	bmi.n	800eab8 <_printf_i+0x188>
 800eab2:	065f      	lsls	r7, r3, #25
 800eab4:	bf48      	it	mi
 800eab6:	b2ad      	uxthmi	r5, r5
 800eab8:	6031      	str	r1, [r6, #0]
 800eaba:	07d9      	lsls	r1, r3, #31
 800eabc:	bf44      	itt	mi
 800eabe:	f043 0320 	orrmi.w	r3, r3, #32
 800eac2:	6023      	strmi	r3, [r4, #0]
 800eac4:	b11d      	cbz	r5, 800eace <_printf_i+0x19e>
 800eac6:	2310      	movs	r3, #16
 800eac8:	e7ac      	b.n	800ea24 <_printf_i+0xf4>
 800eaca:	4827      	ldr	r0, [pc, #156]	@ (800eb68 <_printf_i+0x238>)
 800eacc:	e7e9      	b.n	800eaa2 <_printf_i+0x172>
 800eace:	6823      	ldr	r3, [r4, #0]
 800ead0:	f023 0320 	bic.w	r3, r3, #32
 800ead4:	6023      	str	r3, [r4, #0]
 800ead6:	e7f6      	b.n	800eac6 <_printf_i+0x196>
 800ead8:	4616      	mov	r6, r2
 800eada:	e7bd      	b.n	800ea58 <_printf_i+0x128>
 800eadc:	6833      	ldr	r3, [r6, #0]
 800eade:	6825      	ldr	r5, [r4, #0]
 800eae0:	6961      	ldr	r1, [r4, #20]
 800eae2:	1d18      	adds	r0, r3, #4
 800eae4:	6030      	str	r0, [r6, #0]
 800eae6:	062e      	lsls	r6, r5, #24
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	d501      	bpl.n	800eaf0 <_printf_i+0x1c0>
 800eaec:	6019      	str	r1, [r3, #0]
 800eaee:	e002      	b.n	800eaf6 <_printf_i+0x1c6>
 800eaf0:	0668      	lsls	r0, r5, #25
 800eaf2:	d5fb      	bpl.n	800eaec <_printf_i+0x1bc>
 800eaf4:	8019      	strh	r1, [r3, #0]
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	6123      	str	r3, [r4, #16]
 800eafa:	4616      	mov	r6, r2
 800eafc:	e7bc      	b.n	800ea78 <_printf_i+0x148>
 800eafe:	6833      	ldr	r3, [r6, #0]
 800eb00:	1d1a      	adds	r2, r3, #4
 800eb02:	6032      	str	r2, [r6, #0]
 800eb04:	681e      	ldr	r6, [r3, #0]
 800eb06:	6862      	ldr	r2, [r4, #4]
 800eb08:	2100      	movs	r1, #0
 800eb0a:	4630      	mov	r0, r6
 800eb0c:	f7f1 fb68 	bl	80001e0 <memchr>
 800eb10:	b108      	cbz	r0, 800eb16 <_printf_i+0x1e6>
 800eb12:	1b80      	subs	r0, r0, r6
 800eb14:	6060      	str	r0, [r4, #4]
 800eb16:	6863      	ldr	r3, [r4, #4]
 800eb18:	6123      	str	r3, [r4, #16]
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eb20:	e7aa      	b.n	800ea78 <_printf_i+0x148>
 800eb22:	6923      	ldr	r3, [r4, #16]
 800eb24:	4632      	mov	r2, r6
 800eb26:	4649      	mov	r1, r9
 800eb28:	4640      	mov	r0, r8
 800eb2a:	47d0      	blx	sl
 800eb2c:	3001      	adds	r0, #1
 800eb2e:	d0ad      	beq.n	800ea8c <_printf_i+0x15c>
 800eb30:	6823      	ldr	r3, [r4, #0]
 800eb32:	079b      	lsls	r3, r3, #30
 800eb34:	d413      	bmi.n	800eb5e <_printf_i+0x22e>
 800eb36:	68e0      	ldr	r0, [r4, #12]
 800eb38:	9b03      	ldr	r3, [sp, #12]
 800eb3a:	4298      	cmp	r0, r3
 800eb3c:	bfb8      	it	lt
 800eb3e:	4618      	movlt	r0, r3
 800eb40:	e7a6      	b.n	800ea90 <_printf_i+0x160>
 800eb42:	2301      	movs	r3, #1
 800eb44:	4632      	mov	r2, r6
 800eb46:	4649      	mov	r1, r9
 800eb48:	4640      	mov	r0, r8
 800eb4a:	47d0      	blx	sl
 800eb4c:	3001      	adds	r0, #1
 800eb4e:	d09d      	beq.n	800ea8c <_printf_i+0x15c>
 800eb50:	3501      	adds	r5, #1
 800eb52:	68e3      	ldr	r3, [r4, #12]
 800eb54:	9903      	ldr	r1, [sp, #12]
 800eb56:	1a5b      	subs	r3, r3, r1
 800eb58:	42ab      	cmp	r3, r5
 800eb5a:	dcf2      	bgt.n	800eb42 <_printf_i+0x212>
 800eb5c:	e7eb      	b.n	800eb36 <_printf_i+0x206>
 800eb5e:	2500      	movs	r5, #0
 800eb60:	f104 0619 	add.w	r6, r4, #25
 800eb64:	e7f5      	b.n	800eb52 <_printf_i+0x222>
 800eb66:	bf00      	nop
 800eb68:	08010fda 	.word	0x08010fda
 800eb6c:	08010feb 	.word	0x08010feb

0800eb70 <std>:
 800eb70:	2300      	movs	r3, #0
 800eb72:	b510      	push	{r4, lr}
 800eb74:	4604      	mov	r4, r0
 800eb76:	e9c0 3300 	strd	r3, r3, [r0]
 800eb7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eb7e:	6083      	str	r3, [r0, #8]
 800eb80:	8181      	strh	r1, [r0, #12]
 800eb82:	6643      	str	r3, [r0, #100]	@ 0x64
 800eb84:	81c2      	strh	r2, [r0, #14]
 800eb86:	6183      	str	r3, [r0, #24]
 800eb88:	4619      	mov	r1, r3
 800eb8a:	2208      	movs	r2, #8
 800eb8c:	305c      	adds	r0, #92	@ 0x5c
 800eb8e:	f000 f914 	bl	800edba <memset>
 800eb92:	4b0d      	ldr	r3, [pc, #52]	@ (800ebc8 <std+0x58>)
 800eb94:	6263      	str	r3, [r4, #36]	@ 0x24
 800eb96:	4b0d      	ldr	r3, [pc, #52]	@ (800ebcc <std+0x5c>)
 800eb98:	62a3      	str	r3, [r4, #40]	@ 0x28
 800eb9a:	4b0d      	ldr	r3, [pc, #52]	@ (800ebd0 <std+0x60>)
 800eb9c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800eb9e:	4b0d      	ldr	r3, [pc, #52]	@ (800ebd4 <std+0x64>)
 800eba0:	6323      	str	r3, [r4, #48]	@ 0x30
 800eba2:	4b0d      	ldr	r3, [pc, #52]	@ (800ebd8 <std+0x68>)
 800eba4:	6224      	str	r4, [r4, #32]
 800eba6:	429c      	cmp	r4, r3
 800eba8:	d006      	beq.n	800ebb8 <std+0x48>
 800ebaa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ebae:	4294      	cmp	r4, r2
 800ebb0:	d002      	beq.n	800ebb8 <std+0x48>
 800ebb2:	33d0      	adds	r3, #208	@ 0xd0
 800ebb4:	429c      	cmp	r4, r3
 800ebb6:	d105      	bne.n	800ebc4 <std+0x54>
 800ebb8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ebbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebc0:	f000 b9cc 	b.w	800ef5c <__retarget_lock_init_recursive>
 800ebc4:	bd10      	pop	{r4, pc}
 800ebc6:	bf00      	nop
 800ebc8:	0800ed35 	.word	0x0800ed35
 800ebcc:	0800ed57 	.word	0x0800ed57
 800ebd0:	0800ed8f 	.word	0x0800ed8f
 800ebd4:	0800edb3 	.word	0x0800edb3
 800ebd8:	200008fc 	.word	0x200008fc

0800ebdc <stdio_exit_handler>:
 800ebdc:	4a02      	ldr	r2, [pc, #8]	@ (800ebe8 <stdio_exit_handler+0xc>)
 800ebde:	4903      	ldr	r1, [pc, #12]	@ (800ebec <stdio_exit_handler+0x10>)
 800ebe0:	4803      	ldr	r0, [pc, #12]	@ (800ebf0 <stdio_exit_handler+0x14>)
 800ebe2:	f000 b869 	b.w	800ecb8 <_fwalk_sglue>
 800ebe6:	bf00      	nop
 800ebe8:	200002cc 	.word	0x200002cc
 800ebec:	08010779 	.word	0x08010779
 800ebf0:	200002dc 	.word	0x200002dc

0800ebf4 <cleanup_stdio>:
 800ebf4:	6841      	ldr	r1, [r0, #4]
 800ebf6:	4b0c      	ldr	r3, [pc, #48]	@ (800ec28 <cleanup_stdio+0x34>)
 800ebf8:	4299      	cmp	r1, r3
 800ebfa:	b510      	push	{r4, lr}
 800ebfc:	4604      	mov	r4, r0
 800ebfe:	d001      	beq.n	800ec04 <cleanup_stdio+0x10>
 800ec00:	f001 fdba 	bl	8010778 <_fflush_r>
 800ec04:	68a1      	ldr	r1, [r4, #8]
 800ec06:	4b09      	ldr	r3, [pc, #36]	@ (800ec2c <cleanup_stdio+0x38>)
 800ec08:	4299      	cmp	r1, r3
 800ec0a:	d002      	beq.n	800ec12 <cleanup_stdio+0x1e>
 800ec0c:	4620      	mov	r0, r4
 800ec0e:	f001 fdb3 	bl	8010778 <_fflush_r>
 800ec12:	68e1      	ldr	r1, [r4, #12]
 800ec14:	4b06      	ldr	r3, [pc, #24]	@ (800ec30 <cleanup_stdio+0x3c>)
 800ec16:	4299      	cmp	r1, r3
 800ec18:	d004      	beq.n	800ec24 <cleanup_stdio+0x30>
 800ec1a:	4620      	mov	r0, r4
 800ec1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec20:	f001 bdaa 	b.w	8010778 <_fflush_r>
 800ec24:	bd10      	pop	{r4, pc}
 800ec26:	bf00      	nop
 800ec28:	200008fc 	.word	0x200008fc
 800ec2c:	20000964 	.word	0x20000964
 800ec30:	200009cc 	.word	0x200009cc

0800ec34 <global_stdio_init.part.0>:
 800ec34:	b510      	push	{r4, lr}
 800ec36:	4b0b      	ldr	r3, [pc, #44]	@ (800ec64 <global_stdio_init.part.0+0x30>)
 800ec38:	4c0b      	ldr	r4, [pc, #44]	@ (800ec68 <global_stdio_init.part.0+0x34>)
 800ec3a:	4a0c      	ldr	r2, [pc, #48]	@ (800ec6c <global_stdio_init.part.0+0x38>)
 800ec3c:	601a      	str	r2, [r3, #0]
 800ec3e:	4620      	mov	r0, r4
 800ec40:	2200      	movs	r2, #0
 800ec42:	2104      	movs	r1, #4
 800ec44:	f7ff ff94 	bl	800eb70 <std>
 800ec48:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ec4c:	2201      	movs	r2, #1
 800ec4e:	2109      	movs	r1, #9
 800ec50:	f7ff ff8e 	bl	800eb70 <std>
 800ec54:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ec58:	2202      	movs	r2, #2
 800ec5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec5e:	2112      	movs	r1, #18
 800ec60:	f7ff bf86 	b.w	800eb70 <std>
 800ec64:	20000a34 	.word	0x20000a34
 800ec68:	200008fc 	.word	0x200008fc
 800ec6c:	0800ebdd 	.word	0x0800ebdd

0800ec70 <__sfp_lock_acquire>:
 800ec70:	4801      	ldr	r0, [pc, #4]	@ (800ec78 <__sfp_lock_acquire+0x8>)
 800ec72:	f000 b974 	b.w	800ef5e <__retarget_lock_acquire_recursive>
 800ec76:	bf00      	nop
 800ec78:	20000a3d 	.word	0x20000a3d

0800ec7c <__sfp_lock_release>:
 800ec7c:	4801      	ldr	r0, [pc, #4]	@ (800ec84 <__sfp_lock_release+0x8>)
 800ec7e:	f000 b96f 	b.w	800ef60 <__retarget_lock_release_recursive>
 800ec82:	bf00      	nop
 800ec84:	20000a3d 	.word	0x20000a3d

0800ec88 <__sinit>:
 800ec88:	b510      	push	{r4, lr}
 800ec8a:	4604      	mov	r4, r0
 800ec8c:	f7ff fff0 	bl	800ec70 <__sfp_lock_acquire>
 800ec90:	6a23      	ldr	r3, [r4, #32]
 800ec92:	b11b      	cbz	r3, 800ec9c <__sinit+0x14>
 800ec94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec98:	f7ff bff0 	b.w	800ec7c <__sfp_lock_release>
 800ec9c:	4b04      	ldr	r3, [pc, #16]	@ (800ecb0 <__sinit+0x28>)
 800ec9e:	6223      	str	r3, [r4, #32]
 800eca0:	4b04      	ldr	r3, [pc, #16]	@ (800ecb4 <__sinit+0x2c>)
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d1f5      	bne.n	800ec94 <__sinit+0xc>
 800eca8:	f7ff ffc4 	bl	800ec34 <global_stdio_init.part.0>
 800ecac:	e7f2      	b.n	800ec94 <__sinit+0xc>
 800ecae:	bf00      	nop
 800ecb0:	0800ebf5 	.word	0x0800ebf5
 800ecb4:	20000a34 	.word	0x20000a34

0800ecb8 <_fwalk_sglue>:
 800ecb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecbc:	4607      	mov	r7, r0
 800ecbe:	4688      	mov	r8, r1
 800ecc0:	4614      	mov	r4, r2
 800ecc2:	2600      	movs	r6, #0
 800ecc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ecc8:	f1b9 0901 	subs.w	r9, r9, #1
 800eccc:	d505      	bpl.n	800ecda <_fwalk_sglue+0x22>
 800ecce:	6824      	ldr	r4, [r4, #0]
 800ecd0:	2c00      	cmp	r4, #0
 800ecd2:	d1f7      	bne.n	800ecc4 <_fwalk_sglue+0xc>
 800ecd4:	4630      	mov	r0, r6
 800ecd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecda:	89ab      	ldrh	r3, [r5, #12]
 800ecdc:	2b01      	cmp	r3, #1
 800ecde:	d907      	bls.n	800ecf0 <_fwalk_sglue+0x38>
 800ece0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ece4:	3301      	adds	r3, #1
 800ece6:	d003      	beq.n	800ecf0 <_fwalk_sglue+0x38>
 800ece8:	4629      	mov	r1, r5
 800ecea:	4638      	mov	r0, r7
 800ecec:	47c0      	blx	r8
 800ecee:	4306      	orrs	r6, r0
 800ecf0:	3568      	adds	r5, #104	@ 0x68
 800ecf2:	e7e9      	b.n	800ecc8 <_fwalk_sglue+0x10>

0800ecf4 <siprintf>:
 800ecf4:	b40e      	push	{r1, r2, r3}
 800ecf6:	b500      	push	{lr}
 800ecf8:	b09c      	sub	sp, #112	@ 0x70
 800ecfa:	ab1d      	add	r3, sp, #116	@ 0x74
 800ecfc:	9002      	str	r0, [sp, #8]
 800ecfe:	9006      	str	r0, [sp, #24]
 800ed00:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ed04:	4809      	ldr	r0, [pc, #36]	@ (800ed2c <siprintf+0x38>)
 800ed06:	9107      	str	r1, [sp, #28]
 800ed08:	9104      	str	r1, [sp, #16]
 800ed0a:	4909      	ldr	r1, [pc, #36]	@ (800ed30 <siprintf+0x3c>)
 800ed0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed10:	9105      	str	r1, [sp, #20]
 800ed12:	6800      	ldr	r0, [r0, #0]
 800ed14:	9301      	str	r3, [sp, #4]
 800ed16:	a902      	add	r1, sp, #8
 800ed18:	f001 fbae 	bl	8010478 <_svfiprintf_r>
 800ed1c:	9b02      	ldr	r3, [sp, #8]
 800ed1e:	2200      	movs	r2, #0
 800ed20:	701a      	strb	r2, [r3, #0]
 800ed22:	b01c      	add	sp, #112	@ 0x70
 800ed24:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed28:	b003      	add	sp, #12
 800ed2a:	4770      	bx	lr
 800ed2c:	200002d8 	.word	0x200002d8
 800ed30:	ffff0208 	.word	0xffff0208

0800ed34 <__sread>:
 800ed34:	b510      	push	{r4, lr}
 800ed36:	460c      	mov	r4, r1
 800ed38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed3c:	f000 f89c 	bl	800ee78 <_read_r>
 800ed40:	2800      	cmp	r0, #0
 800ed42:	bfab      	itete	ge
 800ed44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ed46:	89a3      	ldrhlt	r3, [r4, #12]
 800ed48:	181b      	addge	r3, r3, r0
 800ed4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ed4e:	bfac      	ite	ge
 800ed50:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ed52:	81a3      	strhlt	r3, [r4, #12]
 800ed54:	bd10      	pop	{r4, pc}

0800ed56 <__swrite>:
 800ed56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed5a:	461f      	mov	r7, r3
 800ed5c:	898b      	ldrh	r3, [r1, #12]
 800ed5e:	05db      	lsls	r3, r3, #23
 800ed60:	4605      	mov	r5, r0
 800ed62:	460c      	mov	r4, r1
 800ed64:	4616      	mov	r6, r2
 800ed66:	d505      	bpl.n	800ed74 <__swrite+0x1e>
 800ed68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed6c:	2302      	movs	r3, #2
 800ed6e:	2200      	movs	r2, #0
 800ed70:	f000 f870 	bl	800ee54 <_lseek_r>
 800ed74:	89a3      	ldrh	r3, [r4, #12]
 800ed76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ed7e:	81a3      	strh	r3, [r4, #12]
 800ed80:	4632      	mov	r2, r6
 800ed82:	463b      	mov	r3, r7
 800ed84:	4628      	mov	r0, r5
 800ed86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed8a:	f000 b8ab 	b.w	800eee4 <_write_r>

0800ed8e <__sseek>:
 800ed8e:	b510      	push	{r4, lr}
 800ed90:	460c      	mov	r4, r1
 800ed92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed96:	f000 f85d 	bl	800ee54 <_lseek_r>
 800ed9a:	1c43      	adds	r3, r0, #1
 800ed9c:	89a3      	ldrh	r3, [r4, #12]
 800ed9e:	bf15      	itete	ne
 800eda0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800eda2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800eda6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800edaa:	81a3      	strheq	r3, [r4, #12]
 800edac:	bf18      	it	ne
 800edae:	81a3      	strhne	r3, [r4, #12]
 800edb0:	bd10      	pop	{r4, pc}

0800edb2 <__sclose>:
 800edb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edb6:	f000 b83d 	b.w	800ee34 <_close_r>

0800edba <memset>:
 800edba:	4402      	add	r2, r0
 800edbc:	4603      	mov	r3, r0
 800edbe:	4293      	cmp	r3, r2
 800edc0:	d100      	bne.n	800edc4 <memset+0xa>
 800edc2:	4770      	bx	lr
 800edc4:	f803 1b01 	strb.w	r1, [r3], #1
 800edc8:	e7f9      	b.n	800edbe <memset+0x4>

0800edca <_raise_r>:
 800edca:	291f      	cmp	r1, #31
 800edcc:	b538      	push	{r3, r4, r5, lr}
 800edce:	4605      	mov	r5, r0
 800edd0:	460c      	mov	r4, r1
 800edd2:	d904      	bls.n	800edde <_raise_r+0x14>
 800edd4:	2316      	movs	r3, #22
 800edd6:	6003      	str	r3, [r0, #0]
 800edd8:	f04f 30ff 	mov.w	r0, #4294967295
 800eddc:	bd38      	pop	{r3, r4, r5, pc}
 800edde:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ede0:	b112      	cbz	r2, 800ede8 <_raise_r+0x1e>
 800ede2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ede6:	b94b      	cbnz	r3, 800edfc <_raise_r+0x32>
 800ede8:	4628      	mov	r0, r5
 800edea:	f000 f869 	bl	800eec0 <_getpid_r>
 800edee:	4622      	mov	r2, r4
 800edf0:	4601      	mov	r1, r0
 800edf2:	4628      	mov	r0, r5
 800edf4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800edf8:	f000 b850 	b.w	800ee9c <_kill_r>
 800edfc:	2b01      	cmp	r3, #1
 800edfe:	d00a      	beq.n	800ee16 <_raise_r+0x4c>
 800ee00:	1c59      	adds	r1, r3, #1
 800ee02:	d103      	bne.n	800ee0c <_raise_r+0x42>
 800ee04:	2316      	movs	r3, #22
 800ee06:	6003      	str	r3, [r0, #0]
 800ee08:	2001      	movs	r0, #1
 800ee0a:	e7e7      	b.n	800eddc <_raise_r+0x12>
 800ee0c:	2100      	movs	r1, #0
 800ee0e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ee12:	4620      	mov	r0, r4
 800ee14:	4798      	blx	r3
 800ee16:	2000      	movs	r0, #0
 800ee18:	e7e0      	b.n	800eddc <_raise_r+0x12>
	...

0800ee1c <raise>:
 800ee1c:	4b02      	ldr	r3, [pc, #8]	@ (800ee28 <raise+0xc>)
 800ee1e:	4601      	mov	r1, r0
 800ee20:	6818      	ldr	r0, [r3, #0]
 800ee22:	f7ff bfd2 	b.w	800edca <_raise_r>
 800ee26:	bf00      	nop
 800ee28:	200002d8 	.word	0x200002d8

0800ee2c <_localeconv_r>:
 800ee2c:	4800      	ldr	r0, [pc, #0]	@ (800ee30 <_localeconv_r+0x4>)
 800ee2e:	4770      	bx	lr
 800ee30:	20000418 	.word	0x20000418

0800ee34 <_close_r>:
 800ee34:	b538      	push	{r3, r4, r5, lr}
 800ee36:	4d06      	ldr	r5, [pc, #24]	@ (800ee50 <_close_r+0x1c>)
 800ee38:	2300      	movs	r3, #0
 800ee3a:	4604      	mov	r4, r0
 800ee3c:	4608      	mov	r0, r1
 800ee3e:	602b      	str	r3, [r5, #0]
 800ee40:	f7f5 faca 	bl	80043d8 <_close>
 800ee44:	1c43      	adds	r3, r0, #1
 800ee46:	d102      	bne.n	800ee4e <_close_r+0x1a>
 800ee48:	682b      	ldr	r3, [r5, #0]
 800ee4a:	b103      	cbz	r3, 800ee4e <_close_r+0x1a>
 800ee4c:	6023      	str	r3, [r4, #0]
 800ee4e:	bd38      	pop	{r3, r4, r5, pc}
 800ee50:	20000a38 	.word	0x20000a38

0800ee54 <_lseek_r>:
 800ee54:	b538      	push	{r3, r4, r5, lr}
 800ee56:	4d07      	ldr	r5, [pc, #28]	@ (800ee74 <_lseek_r+0x20>)
 800ee58:	4604      	mov	r4, r0
 800ee5a:	4608      	mov	r0, r1
 800ee5c:	4611      	mov	r1, r2
 800ee5e:	2200      	movs	r2, #0
 800ee60:	602a      	str	r2, [r5, #0]
 800ee62:	461a      	mov	r2, r3
 800ee64:	f7f5 fadf 	bl	8004426 <_lseek>
 800ee68:	1c43      	adds	r3, r0, #1
 800ee6a:	d102      	bne.n	800ee72 <_lseek_r+0x1e>
 800ee6c:	682b      	ldr	r3, [r5, #0]
 800ee6e:	b103      	cbz	r3, 800ee72 <_lseek_r+0x1e>
 800ee70:	6023      	str	r3, [r4, #0]
 800ee72:	bd38      	pop	{r3, r4, r5, pc}
 800ee74:	20000a38 	.word	0x20000a38

0800ee78 <_read_r>:
 800ee78:	b538      	push	{r3, r4, r5, lr}
 800ee7a:	4d07      	ldr	r5, [pc, #28]	@ (800ee98 <_read_r+0x20>)
 800ee7c:	4604      	mov	r4, r0
 800ee7e:	4608      	mov	r0, r1
 800ee80:	4611      	mov	r1, r2
 800ee82:	2200      	movs	r2, #0
 800ee84:	602a      	str	r2, [r5, #0]
 800ee86:	461a      	mov	r2, r3
 800ee88:	f7f5 fa6d 	bl	8004366 <_read>
 800ee8c:	1c43      	adds	r3, r0, #1
 800ee8e:	d102      	bne.n	800ee96 <_read_r+0x1e>
 800ee90:	682b      	ldr	r3, [r5, #0]
 800ee92:	b103      	cbz	r3, 800ee96 <_read_r+0x1e>
 800ee94:	6023      	str	r3, [r4, #0]
 800ee96:	bd38      	pop	{r3, r4, r5, pc}
 800ee98:	20000a38 	.word	0x20000a38

0800ee9c <_kill_r>:
 800ee9c:	b538      	push	{r3, r4, r5, lr}
 800ee9e:	4d07      	ldr	r5, [pc, #28]	@ (800eebc <_kill_r+0x20>)
 800eea0:	2300      	movs	r3, #0
 800eea2:	4604      	mov	r4, r0
 800eea4:	4608      	mov	r0, r1
 800eea6:	4611      	mov	r1, r2
 800eea8:	602b      	str	r3, [r5, #0]
 800eeaa:	f7f5 fa41 	bl	8004330 <_kill>
 800eeae:	1c43      	adds	r3, r0, #1
 800eeb0:	d102      	bne.n	800eeb8 <_kill_r+0x1c>
 800eeb2:	682b      	ldr	r3, [r5, #0]
 800eeb4:	b103      	cbz	r3, 800eeb8 <_kill_r+0x1c>
 800eeb6:	6023      	str	r3, [r4, #0]
 800eeb8:	bd38      	pop	{r3, r4, r5, pc}
 800eeba:	bf00      	nop
 800eebc:	20000a38 	.word	0x20000a38

0800eec0 <_getpid_r>:
 800eec0:	f7f5 ba2e 	b.w	8004320 <_getpid>

0800eec4 <_sbrk_r>:
 800eec4:	b538      	push	{r3, r4, r5, lr}
 800eec6:	4d06      	ldr	r5, [pc, #24]	@ (800eee0 <_sbrk_r+0x1c>)
 800eec8:	2300      	movs	r3, #0
 800eeca:	4604      	mov	r4, r0
 800eecc:	4608      	mov	r0, r1
 800eece:	602b      	str	r3, [r5, #0]
 800eed0:	f7f5 fab6 	bl	8004440 <_sbrk>
 800eed4:	1c43      	adds	r3, r0, #1
 800eed6:	d102      	bne.n	800eede <_sbrk_r+0x1a>
 800eed8:	682b      	ldr	r3, [r5, #0]
 800eeda:	b103      	cbz	r3, 800eede <_sbrk_r+0x1a>
 800eedc:	6023      	str	r3, [r4, #0]
 800eede:	bd38      	pop	{r3, r4, r5, pc}
 800eee0:	20000a38 	.word	0x20000a38

0800eee4 <_write_r>:
 800eee4:	b538      	push	{r3, r4, r5, lr}
 800eee6:	4d07      	ldr	r5, [pc, #28]	@ (800ef04 <_write_r+0x20>)
 800eee8:	4604      	mov	r4, r0
 800eeea:	4608      	mov	r0, r1
 800eeec:	4611      	mov	r1, r2
 800eeee:	2200      	movs	r2, #0
 800eef0:	602a      	str	r2, [r5, #0]
 800eef2:	461a      	mov	r2, r3
 800eef4:	f7f5 fa54 	bl	80043a0 <_write>
 800eef8:	1c43      	adds	r3, r0, #1
 800eefa:	d102      	bne.n	800ef02 <_write_r+0x1e>
 800eefc:	682b      	ldr	r3, [r5, #0]
 800eefe:	b103      	cbz	r3, 800ef02 <_write_r+0x1e>
 800ef00:	6023      	str	r3, [r4, #0]
 800ef02:	bd38      	pop	{r3, r4, r5, pc}
 800ef04:	20000a38 	.word	0x20000a38

0800ef08 <__errno>:
 800ef08:	4b01      	ldr	r3, [pc, #4]	@ (800ef10 <__errno+0x8>)
 800ef0a:	6818      	ldr	r0, [r3, #0]
 800ef0c:	4770      	bx	lr
 800ef0e:	bf00      	nop
 800ef10:	200002d8 	.word	0x200002d8

0800ef14 <__libc_init_array>:
 800ef14:	b570      	push	{r4, r5, r6, lr}
 800ef16:	4d0d      	ldr	r5, [pc, #52]	@ (800ef4c <__libc_init_array+0x38>)
 800ef18:	4c0d      	ldr	r4, [pc, #52]	@ (800ef50 <__libc_init_array+0x3c>)
 800ef1a:	1b64      	subs	r4, r4, r5
 800ef1c:	10a4      	asrs	r4, r4, #2
 800ef1e:	2600      	movs	r6, #0
 800ef20:	42a6      	cmp	r6, r4
 800ef22:	d109      	bne.n	800ef38 <__libc_init_array+0x24>
 800ef24:	4d0b      	ldr	r5, [pc, #44]	@ (800ef54 <__libc_init_array+0x40>)
 800ef26:	4c0c      	ldr	r4, [pc, #48]	@ (800ef58 <__libc_init_array+0x44>)
 800ef28:	f001 ff5c 	bl	8010de4 <_init>
 800ef2c:	1b64      	subs	r4, r4, r5
 800ef2e:	10a4      	asrs	r4, r4, #2
 800ef30:	2600      	movs	r6, #0
 800ef32:	42a6      	cmp	r6, r4
 800ef34:	d105      	bne.n	800ef42 <__libc_init_array+0x2e>
 800ef36:	bd70      	pop	{r4, r5, r6, pc}
 800ef38:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef3c:	4798      	blx	r3
 800ef3e:	3601      	adds	r6, #1
 800ef40:	e7ee      	b.n	800ef20 <__libc_init_array+0xc>
 800ef42:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef46:	4798      	blx	r3
 800ef48:	3601      	adds	r6, #1
 800ef4a:	e7f2      	b.n	800ef32 <__libc_init_array+0x1e>
 800ef4c:	08011340 	.word	0x08011340
 800ef50:	08011340 	.word	0x08011340
 800ef54:	08011340 	.word	0x08011340
 800ef58:	08011344 	.word	0x08011344

0800ef5c <__retarget_lock_init_recursive>:
 800ef5c:	4770      	bx	lr

0800ef5e <__retarget_lock_acquire_recursive>:
 800ef5e:	4770      	bx	lr

0800ef60 <__retarget_lock_release_recursive>:
 800ef60:	4770      	bx	lr

0800ef62 <strcpy>:
 800ef62:	4603      	mov	r3, r0
 800ef64:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef68:	f803 2b01 	strb.w	r2, [r3], #1
 800ef6c:	2a00      	cmp	r2, #0
 800ef6e:	d1f9      	bne.n	800ef64 <strcpy+0x2>
 800ef70:	4770      	bx	lr

0800ef72 <memcpy>:
 800ef72:	440a      	add	r2, r1
 800ef74:	4291      	cmp	r1, r2
 800ef76:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef7a:	d100      	bne.n	800ef7e <memcpy+0xc>
 800ef7c:	4770      	bx	lr
 800ef7e:	b510      	push	{r4, lr}
 800ef80:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef84:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef88:	4291      	cmp	r1, r2
 800ef8a:	d1f9      	bne.n	800ef80 <memcpy+0xe>
 800ef8c:	bd10      	pop	{r4, pc}

0800ef8e <quorem>:
 800ef8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef92:	6903      	ldr	r3, [r0, #16]
 800ef94:	690c      	ldr	r4, [r1, #16]
 800ef96:	42a3      	cmp	r3, r4
 800ef98:	4607      	mov	r7, r0
 800ef9a:	db7e      	blt.n	800f09a <quorem+0x10c>
 800ef9c:	3c01      	subs	r4, #1
 800ef9e:	f101 0814 	add.w	r8, r1, #20
 800efa2:	00a3      	lsls	r3, r4, #2
 800efa4:	f100 0514 	add.w	r5, r0, #20
 800efa8:	9300      	str	r3, [sp, #0]
 800efaa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800efae:	9301      	str	r3, [sp, #4]
 800efb0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800efb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800efb8:	3301      	adds	r3, #1
 800efba:	429a      	cmp	r2, r3
 800efbc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800efc0:	fbb2 f6f3 	udiv	r6, r2, r3
 800efc4:	d32e      	bcc.n	800f024 <quorem+0x96>
 800efc6:	f04f 0a00 	mov.w	sl, #0
 800efca:	46c4      	mov	ip, r8
 800efcc:	46ae      	mov	lr, r5
 800efce:	46d3      	mov	fp, sl
 800efd0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800efd4:	b298      	uxth	r0, r3
 800efd6:	fb06 a000 	mla	r0, r6, r0, sl
 800efda:	0c02      	lsrs	r2, r0, #16
 800efdc:	0c1b      	lsrs	r3, r3, #16
 800efde:	fb06 2303 	mla	r3, r6, r3, r2
 800efe2:	f8de 2000 	ldr.w	r2, [lr]
 800efe6:	b280      	uxth	r0, r0
 800efe8:	b292      	uxth	r2, r2
 800efea:	1a12      	subs	r2, r2, r0
 800efec:	445a      	add	r2, fp
 800efee:	f8de 0000 	ldr.w	r0, [lr]
 800eff2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eff6:	b29b      	uxth	r3, r3
 800eff8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800effc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f000:	b292      	uxth	r2, r2
 800f002:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f006:	45e1      	cmp	r9, ip
 800f008:	f84e 2b04 	str.w	r2, [lr], #4
 800f00c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f010:	d2de      	bcs.n	800efd0 <quorem+0x42>
 800f012:	9b00      	ldr	r3, [sp, #0]
 800f014:	58eb      	ldr	r3, [r5, r3]
 800f016:	b92b      	cbnz	r3, 800f024 <quorem+0x96>
 800f018:	9b01      	ldr	r3, [sp, #4]
 800f01a:	3b04      	subs	r3, #4
 800f01c:	429d      	cmp	r5, r3
 800f01e:	461a      	mov	r2, r3
 800f020:	d32f      	bcc.n	800f082 <quorem+0xf4>
 800f022:	613c      	str	r4, [r7, #16]
 800f024:	4638      	mov	r0, r7
 800f026:	f001 f8c3 	bl	80101b0 <__mcmp>
 800f02a:	2800      	cmp	r0, #0
 800f02c:	db25      	blt.n	800f07a <quorem+0xec>
 800f02e:	4629      	mov	r1, r5
 800f030:	2000      	movs	r0, #0
 800f032:	f858 2b04 	ldr.w	r2, [r8], #4
 800f036:	f8d1 c000 	ldr.w	ip, [r1]
 800f03a:	fa1f fe82 	uxth.w	lr, r2
 800f03e:	fa1f f38c 	uxth.w	r3, ip
 800f042:	eba3 030e 	sub.w	r3, r3, lr
 800f046:	4403      	add	r3, r0
 800f048:	0c12      	lsrs	r2, r2, #16
 800f04a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f04e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f052:	b29b      	uxth	r3, r3
 800f054:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f058:	45c1      	cmp	r9, r8
 800f05a:	f841 3b04 	str.w	r3, [r1], #4
 800f05e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f062:	d2e6      	bcs.n	800f032 <quorem+0xa4>
 800f064:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f068:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f06c:	b922      	cbnz	r2, 800f078 <quorem+0xea>
 800f06e:	3b04      	subs	r3, #4
 800f070:	429d      	cmp	r5, r3
 800f072:	461a      	mov	r2, r3
 800f074:	d30b      	bcc.n	800f08e <quorem+0x100>
 800f076:	613c      	str	r4, [r7, #16]
 800f078:	3601      	adds	r6, #1
 800f07a:	4630      	mov	r0, r6
 800f07c:	b003      	add	sp, #12
 800f07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f082:	6812      	ldr	r2, [r2, #0]
 800f084:	3b04      	subs	r3, #4
 800f086:	2a00      	cmp	r2, #0
 800f088:	d1cb      	bne.n	800f022 <quorem+0x94>
 800f08a:	3c01      	subs	r4, #1
 800f08c:	e7c6      	b.n	800f01c <quorem+0x8e>
 800f08e:	6812      	ldr	r2, [r2, #0]
 800f090:	3b04      	subs	r3, #4
 800f092:	2a00      	cmp	r2, #0
 800f094:	d1ef      	bne.n	800f076 <quorem+0xe8>
 800f096:	3c01      	subs	r4, #1
 800f098:	e7ea      	b.n	800f070 <quorem+0xe2>
 800f09a:	2000      	movs	r0, #0
 800f09c:	e7ee      	b.n	800f07c <quorem+0xee>
	...

0800f0a0 <_dtoa_r>:
 800f0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0a4:	69c7      	ldr	r7, [r0, #28]
 800f0a6:	b099      	sub	sp, #100	@ 0x64
 800f0a8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f0ac:	ec55 4b10 	vmov	r4, r5, d0
 800f0b0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f0b2:	9109      	str	r1, [sp, #36]	@ 0x24
 800f0b4:	4683      	mov	fp, r0
 800f0b6:	920e      	str	r2, [sp, #56]	@ 0x38
 800f0b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f0ba:	b97f      	cbnz	r7, 800f0dc <_dtoa_r+0x3c>
 800f0bc:	2010      	movs	r0, #16
 800f0be:	f7ff f841 	bl	800e144 <malloc>
 800f0c2:	4602      	mov	r2, r0
 800f0c4:	f8cb 001c 	str.w	r0, [fp, #28]
 800f0c8:	b920      	cbnz	r0, 800f0d4 <_dtoa_r+0x34>
 800f0ca:	4ba7      	ldr	r3, [pc, #668]	@ (800f368 <_dtoa_r+0x2c8>)
 800f0cc:	21ef      	movs	r1, #239	@ 0xef
 800f0ce:	48a7      	ldr	r0, [pc, #668]	@ (800f36c <_dtoa_r+0x2cc>)
 800f0d0:	f001 fb94 	bl	80107fc <__assert_func>
 800f0d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f0d8:	6007      	str	r7, [r0, #0]
 800f0da:	60c7      	str	r7, [r0, #12]
 800f0dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f0e0:	6819      	ldr	r1, [r3, #0]
 800f0e2:	b159      	cbz	r1, 800f0fc <_dtoa_r+0x5c>
 800f0e4:	685a      	ldr	r2, [r3, #4]
 800f0e6:	604a      	str	r2, [r1, #4]
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	4093      	lsls	r3, r2
 800f0ec:	608b      	str	r3, [r1, #8]
 800f0ee:	4658      	mov	r0, fp
 800f0f0:	f000 fe24 	bl	800fd3c <_Bfree>
 800f0f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	601a      	str	r2, [r3, #0]
 800f0fc:	1e2b      	subs	r3, r5, #0
 800f0fe:	bfb9      	ittee	lt
 800f100:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f104:	9303      	strlt	r3, [sp, #12]
 800f106:	2300      	movge	r3, #0
 800f108:	6033      	strge	r3, [r6, #0]
 800f10a:	9f03      	ldr	r7, [sp, #12]
 800f10c:	4b98      	ldr	r3, [pc, #608]	@ (800f370 <_dtoa_r+0x2d0>)
 800f10e:	bfbc      	itt	lt
 800f110:	2201      	movlt	r2, #1
 800f112:	6032      	strlt	r2, [r6, #0]
 800f114:	43bb      	bics	r3, r7
 800f116:	d112      	bne.n	800f13e <_dtoa_r+0x9e>
 800f118:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f11a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f11e:	6013      	str	r3, [r2, #0]
 800f120:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f124:	4323      	orrs	r3, r4
 800f126:	f000 854d 	beq.w	800fbc4 <_dtoa_r+0xb24>
 800f12a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f12c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f384 <_dtoa_r+0x2e4>
 800f130:	2b00      	cmp	r3, #0
 800f132:	f000 854f 	beq.w	800fbd4 <_dtoa_r+0xb34>
 800f136:	f10a 0303 	add.w	r3, sl, #3
 800f13a:	f000 bd49 	b.w	800fbd0 <_dtoa_r+0xb30>
 800f13e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f142:	2200      	movs	r2, #0
 800f144:	ec51 0b17 	vmov	r0, r1, d7
 800f148:	2300      	movs	r3, #0
 800f14a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f14e:	f7f1 fcc3 	bl	8000ad8 <__aeabi_dcmpeq>
 800f152:	4680      	mov	r8, r0
 800f154:	b158      	cbz	r0, 800f16e <_dtoa_r+0xce>
 800f156:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f158:	2301      	movs	r3, #1
 800f15a:	6013      	str	r3, [r2, #0]
 800f15c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f15e:	b113      	cbz	r3, 800f166 <_dtoa_r+0xc6>
 800f160:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f162:	4b84      	ldr	r3, [pc, #528]	@ (800f374 <_dtoa_r+0x2d4>)
 800f164:	6013      	str	r3, [r2, #0]
 800f166:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f388 <_dtoa_r+0x2e8>
 800f16a:	f000 bd33 	b.w	800fbd4 <_dtoa_r+0xb34>
 800f16e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f172:	aa16      	add	r2, sp, #88	@ 0x58
 800f174:	a917      	add	r1, sp, #92	@ 0x5c
 800f176:	4658      	mov	r0, fp
 800f178:	f001 f8ca 	bl	8010310 <__d2b>
 800f17c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f180:	4681      	mov	r9, r0
 800f182:	2e00      	cmp	r6, #0
 800f184:	d077      	beq.n	800f276 <_dtoa_r+0x1d6>
 800f186:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f188:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f18c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f190:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f194:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f198:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f19c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f1a0:	4619      	mov	r1, r3
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	4b74      	ldr	r3, [pc, #464]	@ (800f378 <_dtoa_r+0x2d8>)
 800f1a6:	f7f1 f877 	bl	8000298 <__aeabi_dsub>
 800f1aa:	a369      	add	r3, pc, #420	@ (adr r3, 800f350 <_dtoa_r+0x2b0>)
 800f1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b0:	f7f1 fa2a 	bl	8000608 <__aeabi_dmul>
 800f1b4:	a368      	add	r3, pc, #416	@ (adr r3, 800f358 <_dtoa_r+0x2b8>)
 800f1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ba:	f7f1 f86f 	bl	800029c <__adddf3>
 800f1be:	4604      	mov	r4, r0
 800f1c0:	4630      	mov	r0, r6
 800f1c2:	460d      	mov	r5, r1
 800f1c4:	f7f1 f9b6 	bl	8000534 <__aeabi_i2d>
 800f1c8:	a365      	add	r3, pc, #404	@ (adr r3, 800f360 <_dtoa_r+0x2c0>)
 800f1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ce:	f7f1 fa1b 	bl	8000608 <__aeabi_dmul>
 800f1d2:	4602      	mov	r2, r0
 800f1d4:	460b      	mov	r3, r1
 800f1d6:	4620      	mov	r0, r4
 800f1d8:	4629      	mov	r1, r5
 800f1da:	f7f1 f85f 	bl	800029c <__adddf3>
 800f1de:	4604      	mov	r4, r0
 800f1e0:	460d      	mov	r5, r1
 800f1e2:	f7f1 fcc1 	bl	8000b68 <__aeabi_d2iz>
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	4607      	mov	r7, r0
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	4620      	mov	r0, r4
 800f1ee:	4629      	mov	r1, r5
 800f1f0:	f7f1 fc7c 	bl	8000aec <__aeabi_dcmplt>
 800f1f4:	b140      	cbz	r0, 800f208 <_dtoa_r+0x168>
 800f1f6:	4638      	mov	r0, r7
 800f1f8:	f7f1 f99c 	bl	8000534 <__aeabi_i2d>
 800f1fc:	4622      	mov	r2, r4
 800f1fe:	462b      	mov	r3, r5
 800f200:	f7f1 fc6a 	bl	8000ad8 <__aeabi_dcmpeq>
 800f204:	b900      	cbnz	r0, 800f208 <_dtoa_r+0x168>
 800f206:	3f01      	subs	r7, #1
 800f208:	2f16      	cmp	r7, #22
 800f20a:	d851      	bhi.n	800f2b0 <_dtoa_r+0x210>
 800f20c:	4b5b      	ldr	r3, [pc, #364]	@ (800f37c <_dtoa_r+0x2dc>)
 800f20e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f216:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f21a:	f7f1 fc67 	bl	8000aec <__aeabi_dcmplt>
 800f21e:	2800      	cmp	r0, #0
 800f220:	d048      	beq.n	800f2b4 <_dtoa_r+0x214>
 800f222:	3f01      	subs	r7, #1
 800f224:	2300      	movs	r3, #0
 800f226:	9312      	str	r3, [sp, #72]	@ 0x48
 800f228:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f22a:	1b9b      	subs	r3, r3, r6
 800f22c:	1e5a      	subs	r2, r3, #1
 800f22e:	bf44      	itt	mi
 800f230:	f1c3 0801 	rsbmi	r8, r3, #1
 800f234:	2300      	movmi	r3, #0
 800f236:	9208      	str	r2, [sp, #32]
 800f238:	bf54      	ite	pl
 800f23a:	f04f 0800 	movpl.w	r8, #0
 800f23e:	9308      	strmi	r3, [sp, #32]
 800f240:	2f00      	cmp	r7, #0
 800f242:	db39      	blt.n	800f2b8 <_dtoa_r+0x218>
 800f244:	9b08      	ldr	r3, [sp, #32]
 800f246:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f248:	443b      	add	r3, r7
 800f24a:	9308      	str	r3, [sp, #32]
 800f24c:	2300      	movs	r3, #0
 800f24e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f250:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f252:	2b09      	cmp	r3, #9
 800f254:	d864      	bhi.n	800f320 <_dtoa_r+0x280>
 800f256:	2b05      	cmp	r3, #5
 800f258:	bfc4      	itt	gt
 800f25a:	3b04      	subgt	r3, #4
 800f25c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f25e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f260:	f1a3 0302 	sub.w	r3, r3, #2
 800f264:	bfcc      	ite	gt
 800f266:	2400      	movgt	r4, #0
 800f268:	2401      	movle	r4, #1
 800f26a:	2b03      	cmp	r3, #3
 800f26c:	d863      	bhi.n	800f336 <_dtoa_r+0x296>
 800f26e:	e8df f003 	tbb	[pc, r3]
 800f272:	372a      	.short	0x372a
 800f274:	5535      	.short	0x5535
 800f276:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f27a:	441e      	add	r6, r3
 800f27c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f280:	2b20      	cmp	r3, #32
 800f282:	bfc1      	itttt	gt
 800f284:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f288:	409f      	lslgt	r7, r3
 800f28a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f28e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f292:	bfd6      	itet	le
 800f294:	f1c3 0320 	rsble	r3, r3, #32
 800f298:	ea47 0003 	orrgt.w	r0, r7, r3
 800f29c:	fa04 f003 	lslle.w	r0, r4, r3
 800f2a0:	f7f1 f938 	bl	8000514 <__aeabi_ui2d>
 800f2a4:	2201      	movs	r2, #1
 800f2a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f2aa:	3e01      	subs	r6, #1
 800f2ac:	9214      	str	r2, [sp, #80]	@ 0x50
 800f2ae:	e777      	b.n	800f1a0 <_dtoa_r+0x100>
 800f2b0:	2301      	movs	r3, #1
 800f2b2:	e7b8      	b.n	800f226 <_dtoa_r+0x186>
 800f2b4:	9012      	str	r0, [sp, #72]	@ 0x48
 800f2b6:	e7b7      	b.n	800f228 <_dtoa_r+0x188>
 800f2b8:	427b      	negs	r3, r7
 800f2ba:	930a      	str	r3, [sp, #40]	@ 0x28
 800f2bc:	2300      	movs	r3, #0
 800f2be:	eba8 0807 	sub.w	r8, r8, r7
 800f2c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f2c4:	e7c4      	b.n	800f250 <_dtoa_r+0x1b0>
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f2ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	dc35      	bgt.n	800f33c <_dtoa_r+0x29c>
 800f2d0:	2301      	movs	r3, #1
 800f2d2:	9300      	str	r3, [sp, #0]
 800f2d4:	9307      	str	r3, [sp, #28]
 800f2d6:	461a      	mov	r2, r3
 800f2d8:	920e      	str	r2, [sp, #56]	@ 0x38
 800f2da:	e00b      	b.n	800f2f4 <_dtoa_r+0x254>
 800f2dc:	2301      	movs	r3, #1
 800f2de:	e7f3      	b.n	800f2c8 <_dtoa_r+0x228>
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f2e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f2e6:	18fb      	adds	r3, r7, r3
 800f2e8:	9300      	str	r3, [sp, #0]
 800f2ea:	3301      	adds	r3, #1
 800f2ec:	2b01      	cmp	r3, #1
 800f2ee:	9307      	str	r3, [sp, #28]
 800f2f0:	bfb8      	it	lt
 800f2f2:	2301      	movlt	r3, #1
 800f2f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f2f8:	2100      	movs	r1, #0
 800f2fa:	2204      	movs	r2, #4
 800f2fc:	f102 0514 	add.w	r5, r2, #20
 800f300:	429d      	cmp	r5, r3
 800f302:	d91f      	bls.n	800f344 <_dtoa_r+0x2a4>
 800f304:	6041      	str	r1, [r0, #4]
 800f306:	4658      	mov	r0, fp
 800f308:	f000 fcd8 	bl	800fcbc <_Balloc>
 800f30c:	4682      	mov	sl, r0
 800f30e:	2800      	cmp	r0, #0
 800f310:	d13c      	bne.n	800f38c <_dtoa_r+0x2ec>
 800f312:	4b1b      	ldr	r3, [pc, #108]	@ (800f380 <_dtoa_r+0x2e0>)
 800f314:	4602      	mov	r2, r0
 800f316:	f240 11af 	movw	r1, #431	@ 0x1af
 800f31a:	e6d8      	b.n	800f0ce <_dtoa_r+0x2e>
 800f31c:	2301      	movs	r3, #1
 800f31e:	e7e0      	b.n	800f2e2 <_dtoa_r+0x242>
 800f320:	2401      	movs	r4, #1
 800f322:	2300      	movs	r3, #0
 800f324:	9309      	str	r3, [sp, #36]	@ 0x24
 800f326:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f328:	f04f 33ff 	mov.w	r3, #4294967295
 800f32c:	9300      	str	r3, [sp, #0]
 800f32e:	9307      	str	r3, [sp, #28]
 800f330:	2200      	movs	r2, #0
 800f332:	2312      	movs	r3, #18
 800f334:	e7d0      	b.n	800f2d8 <_dtoa_r+0x238>
 800f336:	2301      	movs	r3, #1
 800f338:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f33a:	e7f5      	b.n	800f328 <_dtoa_r+0x288>
 800f33c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f33e:	9300      	str	r3, [sp, #0]
 800f340:	9307      	str	r3, [sp, #28]
 800f342:	e7d7      	b.n	800f2f4 <_dtoa_r+0x254>
 800f344:	3101      	adds	r1, #1
 800f346:	0052      	lsls	r2, r2, #1
 800f348:	e7d8      	b.n	800f2fc <_dtoa_r+0x25c>
 800f34a:	bf00      	nop
 800f34c:	f3af 8000 	nop.w
 800f350:	636f4361 	.word	0x636f4361
 800f354:	3fd287a7 	.word	0x3fd287a7
 800f358:	8b60c8b3 	.word	0x8b60c8b3
 800f35c:	3fc68a28 	.word	0x3fc68a28
 800f360:	509f79fb 	.word	0x509f79fb
 800f364:	3fd34413 	.word	0x3fd34413
 800f368:	08011009 	.word	0x08011009
 800f36c:	08011020 	.word	0x08011020
 800f370:	7ff00000 	.word	0x7ff00000
 800f374:	08010fd9 	.word	0x08010fd9
 800f378:	3ff80000 	.word	0x3ff80000
 800f37c:	08011118 	.word	0x08011118
 800f380:	08011078 	.word	0x08011078
 800f384:	08011005 	.word	0x08011005
 800f388:	08010fd8 	.word	0x08010fd8
 800f38c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f390:	6018      	str	r0, [r3, #0]
 800f392:	9b07      	ldr	r3, [sp, #28]
 800f394:	2b0e      	cmp	r3, #14
 800f396:	f200 80a4 	bhi.w	800f4e2 <_dtoa_r+0x442>
 800f39a:	2c00      	cmp	r4, #0
 800f39c:	f000 80a1 	beq.w	800f4e2 <_dtoa_r+0x442>
 800f3a0:	2f00      	cmp	r7, #0
 800f3a2:	dd33      	ble.n	800f40c <_dtoa_r+0x36c>
 800f3a4:	4bad      	ldr	r3, [pc, #692]	@ (800f65c <_dtoa_r+0x5bc>)
 800f3a6:	f007 020f 	and.w	r2, r7, #15
 800f3aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f3ae:	ed93 7b00 	vldr	d7, [r3]
 800f3b2:	05f8      	lsls	r0, r7, #23
 800f3b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f3b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f3bc:	d516      	bpl.n	800f3ec <_dtoa_r+0x34c>
 800f3be:	4ba8      	ldr	r3, [pc, #672]	@ (800f660 <_dtoa_r+0x5c0>)
 800f3c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f3c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f3c8:	f7f1 fa48 	bl	800085c <__aeabi_ddiv>
 800f3cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3d0:	f004 040f 	and.w	r4, r4, #15
 800f3d4:	2603      	movs	r6, #3
 800f3d6:	4da2      	ldr	r5, [pc, #648]	@ (800f660 <_dtoa_r+0x5c0>)
 800f3d8:	b954      	cbnz	r4, 800f3f0 <_dtoa_r+0x350>
 800f3da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f3de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f3e2:	f7f1 fa3b 	bl	800085c <__aeabi_ddiv>
 800f3e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f3ea:	e028      	b.n	800f43e <_dtoa_r+0x39e>
 800f3ec:	2602      	movs	r6, #2
 800f3ee:	e7f2      	b.n	800f3d6 <_dtoa_r+0x336>
 800f3f0:	07e1      	lsls	r1, r4, #31
 800f3f2:	d508      	bpl.n	800f406 <_dtoa_r+0x366>
 800f3f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f3f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f3fc:	f7f1 f904 	bl	8000608 <__aeabi_dmul>
 800f400:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f404:	3601      	adds	r6, #1
 800f406:	1064      	asrs	r4, r4, #1
 800f408:	3508      	adds	r5, #8
 800f40a:	e7e5      	b.n	800f3d8 <_dtoa_r+0x338>
 800f40c:	f000 80d2 	beq.w	800f5b4 <_dtoa_r+0x514>
 800f410:	427c      	negs	r4, r7
 800f412:	4b92      	ldr	r3, [pc, #584]	@ (800f65c <_dtoa_r+0x5bc>)
 800f414:	4d92      	ldr	r5, [pc, #584]	@ (800f660 <_dtoa_r+0x5c0>)
 800f416:	f004 020f 	and.w	r2, r4, #15
 800f41a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f422:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f426:	f7f1 f8ef 	bl	8000608 <__aeabi_dmul>
 800f42a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f42e:	1124      	asrs	r4, r4, #4
 800f430:	2300      	movs	r3, #0
 800f432:	2602      	movs	r6, #2
 800f434:	2c00      	cmp	r4, #0
 800f436:	f040 80b2 	bne.w	800f59e <_dtoa_r+0x4fe>
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d1d3      	bne.n	800f3e6 <_dtoa_r+0x346>
 800f43e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f440:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f444:	2b00      	cmp	r3, #0
 800f446:	f000 80b7 	beq.w	800f5b8 <_dtoa_r+0x518>
 800f44a:	4b86      	ldr	r3, [pc, #536]	@ (800f664 <_dtoa_r+0x5c4>)
 800f44c:	2200      	movs	r2, #0
 800f44e:	4620      	mov	r0, r4
 800f450:	4629      	mov	r1, r5
 800f452:	f7f1 fb4b 	bl	8000aec <__aeabi_dcmplt>
 800f456:	2800      	cmp	r0, #0
 800f458:	f000 80ae 	beq.w	800f5b8 <_dtoa_r+0x518>
 800f45c:	9b07      	ldr	r3, [sp, #28]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	f000 80aa 	beq.w	800f5b8 <_dtoa_r+0x518>
 800f464:	9b00      	ldr	r3, [sp, #0]
 800f466:	2b00      	cmp	r3, #0
 800f468:	dd37      	ble.n	800f4da <_dtoa_r+0x43a>
 800f46a:	1e7b      	subs	r3, r7, #1
 800f46c:	9304      	str	r3, [sp, #16]
 800f46e:	4620      	mov	r0, r4
 800f470:	4b7d      	ldr	r3, [pc, #500]	@ (800f668 <_dtoa_r+0x5c8>)
 800f472:	2200      	movs	r2, #0
 800f474:	4629      	mov	r1, r5
 800f476:	f7f1 f8c7 	bl	8000608 <__aeabi_dmul>
 800f47a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f47e:	9c00      	ldr	r4, [sp, #0]
 800f480:	3601      	adds	r6, #1
 800f482:	4630      	mov	r0, r6
 800f484:	f7f1 f856 	bl	8000534 <__aeabi_i2d>
 800f488:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f48c:	f7f1 f8bc 	bl	8000608 <__aeabi_dmul>
 800f490:	4b76      	ldr	r3, [pc, #472]	@ (800f66c <_dtoa_r+0x5cc>)
 800f492:	2200      	movs	r2, #0
 800f494:	f7f0 ff02 	bl	800029c <__adddf3>
 800f498:	4605      	mov	r5, r0
 800f49a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f49e:	2c00      	cmp	r4, #0
 800f4a0:	f040 808d 	bne.w	800f5be <_dtoa_r+0x51e>
 800f4a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4a8:	4b71      	ldr	r3, [pc, #452]	@ (800f670 <_dtoa_r+0x5d0>)
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	f7f0 fef4 	bl	8000298 <__aeabi_dsub>
 800f4b0:	4602      	mov	r2, r0
 800f4b2:	460b      	mov	r3, r1
 800f4b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f4b8:	462a      	mov	r2, r5
 800f4ba:	4633      	mov	r3, r6
 800f4bc:	f7f1 fb34 	bl	8000b28 <__aeabi_dcmpgt>
 800f4c0:	2800      	cmp	r0, #0
 800f4c2:	f040 828b 	bne.w	800f9dc <_dtoa_r+0x93c>
 800f4c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4ca:	462a      	mov	r2, r5
 800f4cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f4d0:	f7f1 fb0c 	bl	8000aec <__aeabi_dcmplt>
 800f4d4:	2800      	cmp	r0, #0
 800f4d6:	f040 8128 	bne.w	800f72a <_dtoa_r+0x68a>
 800f4da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f4de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f4e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	f2c0 815a 	blt.w	800f79e <_dtoa_r+0x6fe>
 800f4ea:	2f0e      	cmp	r7, #14
 800f4ec:	f300 8157 	bgt.w	800f79e <_dtoa_r+0x6fe>
 800f4f0:	4b5a      	ldr	r3, [pc, #360]	@ (800f65c <_dtoa_r+0x5bc>)
 800f4f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f4f6:	ed93 7b00 	vldr	d7, [r3]
 800f4fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	ed8d 7b00 	vstr	d7, [sp]
 800f502:	da03      	bge.n	800f50c <_dtoa_r+0x46c>
 800f504:	9b07      	ldr	r3, [sp, #28]
 800f506:	2b00      	cmp	r3, #0
 800f508:	f340 8101 	ble.w	800f70e <_dtoa_r+0x66e>
 800f50c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f510:	4656      	mov	r6, sl
 800f512:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f516:	4620      	mov	r0, r4
 800f518:	4629      	mov	r1, r5
 800f51a:	f7f1 f99f 	bl	800085c <__aeabi_ddiv>
 800f51e:	f7f1 fb23 	bl	8000b68 <__aeabi_d2iz>
 800f522:	4680      	mov	r8, r0
 800f524:	f7f1 f806 	bl	8000534 <__aeabi_i2d>
 800f528:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f52c:	f7f1 f86c 	bl	8000608 <__aeabi_dmul>
 800f530:	4602      	mov	r2, r0
 800f532:	460b      	mov	r3, r1
 800f534:	4620      	mov	r0, r4
 800f536:	4629      	mov	r1, r5
 800f538:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f53c:	f7f0 feac 	bl	8000298 <__aeabi_dsub>
 800f540:	f806 4b01 	strb.w	r4, [r6], #1
 800f544:	9d07      	ldr	r5, [sp, #28]
 800f546:	eba6 040a 	sub.w	r4, r6, sl
 800f54a:	42a5      	cmp	r5, r4
 800f54c:	4602      	mov	r2, r0
 800f54e:	460b      	mov	r3, r1
 800f550:	f040 8117 	bne.w	800f782 <_dtoa_r+0x6e2>
 800f554:	f7f0 fea2 	bl	800029c <__adddf3>
 800f558:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f55c:	4604      	mov	r4, r0
 800f55e:	460d      	mov	r5, r1
 800f560:	f7f1 fae2 	bl	8000b28 <__aeabi_dcmpgt>
 800f564:	2800      	cmp	r0, #0
 800f566:	f040 80f9 	bne.w	800f75c <_dtoa_r+0x6bc>
 800f56a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f56e:	4620      	mov	r0, r4
 800f570:	4629      	mov	r1, r5
 800f572:	f7f1 fab1 	bl	8000ad8 <__aeabi_dcmpeq>
 800f576:	b118      	cbz	r0, 800f580 <_dtoa_r+0x4e0>
 800f578:	f018 0f01 	tst.w	r8, #1
 800f57c:	f040 80ee 	bne.w	800f75c <_dtoa_r+0x6bc>
 800f580:	4649      	mov	r1, r9
 800f582:	4658      	mov	r0, fp
 800f584:	f000 fbda 	bl	800fd3c <_Bfree>
 800f588:	2300      	movs	r3, #0
 800f58a:	7033      	strb	r3, [r6, #0]
 800f58c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f58e:	3701      	adds	r7, #1
 800f590:	601f      	str	r7, [r3, #0]
 800f592:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f594:	2b00      	cmp	r3, #0
 800f596:	f000 831d 	beq.w	800fbd4 <_dtoa_r+0xb34>
 800f59a:	601e      	str	r6, [r3, #0]
 800f59c:	e31a      	b.n	800fbd4 <_dtoa_r+0xb34>
 800f59e:	07e2      	lsls	r2, r4, #31
 800f5a0:	d505      	bpl.n	800f5ae <_dtoa_r+0x50e>
 800f5a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f5a6:	f7f1 f82f 	bl	8000608 <__aeabi_dmul>
 800f5aa:	3601      	adds	r6, #1
 800f5ac:	2301      	movs	r3, #1
 800f5ae:	1064      	asrs	r4, r4, #1
 800f5b0:	3508      	adds	r5, #8
 800f5b2:	e73f      	b.n	800f434 <_dtoa_r+0x394>
 800f5b4:	2602      	movs	r6, #2
 800f5b6:	e742      	b.n	800f43e <_dtoa_r+0x39e>
 800f5b8:	9c07      	ldr	r4, [sp, #28]
 800f5ba:	9704      	str	r7, [sp, #16]
 800f5bc:	e761      	b.n	800f482 <_dtoa_r+0x3e2>
 800f5be:	4b27      	ldr	r3, [pc, #156]	@ (800f65c <_dtoa_r+0x5bc>)
 800f5c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f5c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f5c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f5ca:	4454      	add	r4, sl
 800f5cc:	2900      	cmp	r1, #0
 800f5ce:	d053      	beq.n	800f678 <_dtoa_r+0x5d8>
 800f5d0:	4928      	ldr	r1, [pc, #160]	@ (800f674 <_dtoa_r+0x5d4>)
 800f5d2:	2000      	movs	r0, #0
 800f5d4:	f7f1 f942 	bl	800085c <__aeabi_ddiv>
 800f5d8:	4633      	mov	r3, r6
 800f5da:	462a      	mov	r2, r5
 800f5dc:	f7f0 fe5c 	bl	8000298 <__aeabi_dsub>
 800f5e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f5e4:	4656      	mov	r6, sl
 800f5e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5ea:	f7f1 fabd 	bl	8000b68 <__aeabi_d2iz>
 800f5ee:	4605      	mov	r5, r0
 800f5f0:	f7f0 ffa0 	bl	8000534 <__aeabi_i2d>
 800f5f4:	4602      	mov	r2, r0
 800f5f6:	460b      	mov	r3, r1
 800f5f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5fc:	f7f0 fe4c 	bl	8000298 <__aeabi_dsub>
 800f600:	3530      	adds	r5, #48	@ 0x30
 800f602:	4602      	mov	r2, r0
 800f604:	460b      	mov	r3, r1
 800f606:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f60a:	f806 5b01 	strb.w	r5, [r6], #1
 800f60e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f612:	f7f1 fa6b 	bl	8000aec <__aeabi_dcmplt>
 800f616:	2800      	cmp	r0, #0
 800f618:	d171      	bne.n	800f6fe <_dtoa_r+0x65e>
 800f61a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f61e:	4911      	ldr	r1, [pc, #68]	@ (800f664 <_dtoa_r+0x5c4>)
 800f620:	2000      	movs	r0, #0
 800f622:	f7f0 fe39 	bl	8000298 <__aeabi_dsub>
 800f626:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f62a:	f7f1 fa5f 	bl	8000aec <__aeabi_dcmplt>
 800f62e:	2800      	cmp	r0, #0
 800f630:	f040 8095 	bne.w	800f75e <_dtoa_r+0x6be>
 800f634:	42a6      	cmp	r6, r4
 800f636:	f43f af50 	beq.w	800f4da <_dtoa_r+0x43a>
 800f63a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f63e:	4b0a      	ldr	r3, [pc, #40]	@ (800f668 <_dtoa_r+0x5c8>)
 800f640:	2200      	movs	r2, #0
 800f642:	f7f0 ffe1 	bl	8000608 <__aeabi_dmul>
 800f646:	4b08      	ldr	r3, [pc, #32]	@ (800f668 <_dtoa_r+0x5c8>)
 800f648:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f64c:	2200      	movs	r2, #0
 800f64e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f652:	f7f0 ffd9 	bl	8000608 <__aeabi_dmul>
 800f656:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f65a:	e7c4      	b.n	800f5e6 <_dtoa_r+0x546>
 800f65c:	08011118 	.word	0x08011118
 800f660:	080110f0 	.word	0x080110f0
 800f664:	3ff00000 	.word	0x3ff00000
 800f668:	40240000 	.word	0x40240000
 800f66c:	401c0000 	.word	0x401c0000
 800f670:	40140000 	.word	0x40140000
 800f674:	3fe00000 	.word	0x3fe00000
 800f678:	4631      	mov	r1, r6
 800f67a:	4628      	mov	r0, r5
 800f67c:	f7f0 ffc4 	bl	8000608 <__aeabi_dmul>
 800f680:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f684:	9415      	str	r4, [sp, #84]	@ 0x54
 800f686:	4656      	mov	r6, sl
 800f688:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f68c:	f7f1 fa6c 	bl	8000b68 <__aeabi_d2iz>
 800f690:	4605      	mov	r5, r0
 800f692:	f7f0 ff4f 	bl	8000534 <__aeabi_i2d>
 800f696:	4602      	mov	r2, r0
 800f698:	460b      	mov	r3, r1
 800f69a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f69e:	f7f0 fdfb 	bl	8000298 <__aeabi_dsub>
 800f6a2:	3530      	adds	r5, #48	@ 0x30
 800f6a4:	f806 5b01 	strb.w	r5, [r6], #1
 800f6a8:	4602      	mov	r2, r0
 800f6aa:	460b      	mov	r3, r1
 800f6ac:	42a6      	cmp	r6, r4
 800f6ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f6b2:	f04f 0200 	mov.w	r2, #0
 800f6b6:	d124      	bne.n	800f702 <_dtoa_r+0x662>
 800f6b8:	4bac      	ldr	r3, [pc, #688]	@ (800f96c <_dtoa_r+0x8cc>)
 800f6ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f6be:	f7f0 fded 	bl	800029c <__adddf3>
 800f6c2:	4602      	mov	r2, r0
 800f6c4:	460b      	mov	r3, r1
 800f6c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6ca:	f7f1 fa2d 	bl	8000b28 <__aeabi_dcmpgt>
 800f6ce:	2800      	cmp	r0, #0
 800f6d0:	d145      	bne.n	800f75e <_dtoa_r+0x6be>
 800f6d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f6d6:	49a5      	ldr	r1, [pc, #660]	@ (800f96c <_dtoa_r+0x8cc>)
 800f6d8:	2000      	movs	r0, #0
 800f6da:	f7f0 fddd 	bl	8000298 <__aeabi_dsub>
 800f6de:	4602      	mov	r2, r0
 800f6e0:	460b      	mov	r3, r1
 800f6e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f6e6:	f7f1 fa01 	bl	8000aec <__aeabi_dcmplt>
 800f6ea:	2800      	cmp	r0, #0
 800f6ec:	f43f aef5 	beq.w	800f4da <_dtoa_r+0x43a>
 800f6f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f6f2:	1e73      	subs	r3, r6, #1
 800f6f4:	9315      	str	r3, [sp, #84]	@ 0x54
 800f6f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f6fa:	2b30      	cmp	r3, #48	@ 0x30
 800f6fc:	d0f8      	beq.n	800f6f0 <_dtoa_r+0x650>
 800f6fe:	9f04      	ldr	r7, [sp, #16]
 800f700:	e73e      	b.n	800f580 <_dtoa_r+0x4e0>
 800f702:	4b9b      	ldr	r3, [pc, #620]	@ (800f970 <_dtoa_r+0x8d0>)
 800f704:	f7f0 ff80 	bl	8000608 <__aeabi_dmul>
 800f708:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f70c:	e7bc      	b.n	800f688 <_dtoa_r+0x5e8>
 800f70e:	d10c      	bne.n	800f72a <_dtoa_r+0x68a>
 800f710:	4b98      	ldr	r3, [pc, #608]	@ (800f974 <_dtoa_r+0x8d4>)
 800f712:	2200      	movs	r2, #0
 800f714:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f718:	f7f0 ff76 	bl	8000608 <__aeabi_dmul>
 800f71c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f720:	f7f1 f9f8 	bl	8000b14 <__aeabi_dcmpge>
 800f724:	2800      	cmp	r0, #0
 800f726:	f000 8157 	beq.w	800f9d8 <_dtoa_r+0x938>
 800f72a:	2400      	movs	r4, #0
 800f72c:	4625      	mov	r5, r4
 800f72e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f730:	43db      	mvns	r3, r3
 800f732:	9304      	str	r3, [sp, #16]
 800f734:	4656      	mov	r6, sl
 800f736:	2700      	movs	r7, #0
 800f738:	4621      	mov	r1, r4
 800f73a:	4658      	mov	r0, fp
 800f73c:	f000 fafe 	bl	800fd3c <_Bfree>
 800f740:	2d00      	cmp	r5, #0
 800f742:	d0dc      	beq.n	800f6fe <_dtoa_r+0x65e>
 800f744:	b12f      	cbz	r7, 800f752 <_dtoa_r+0x6b2>
 800f746:	42af      	cmp	r7, r5
 800f748:	d003      	beq.n	800f752 <_dtoa_r+0x6b2>
 800f74a:	4639      	mov	r1, r7
 800f74c:	4658      	mov	r0, fp
 800f74e:	f000 faf5 	bl	800fd3c <_Bfree>
 800f752:	4629      	mov	r1, r5
 800f754:	4658      	mov	r0, fp
 800f756:	f000 faf1 	bl	800fd3c <_Bfree>
 800f75a:	e7d0      	b.n	800f6fe <_dtoa_r+0x65e>
 800f75c:	9704      	str	r7, [sp, #16]
 800f75e:	4633      	mov	r3, r6
 800f760:	461e      	mov	r6, r3
 800f762:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f766:	2a39      	cmp	r2, #57	@ 0x39
 800f768:	d107      	bne.n	800f77a <_dtoa_r+0x6da>
 800f76a:	459a      	cmp	sl, r3
 800f76c:	d1f8      	bne.n	800f760 <_dtoa_r+0x6c0>
 800f76e:	9a04      	ldr	r2, [sp, #16]
 800f770:	3201      	adds	r2, #1
 800f772:	9204      	str	r2, [sp, #16]
 800f774:	2230      	movs	r2, #48	@ 0x30
 800f776:	f88a 2000 	strb.w	r2, [sl]
 800f77a:	781a      	ldrb	r2, [r3, #0]
 800f77c:	3201      	adds	r2, #1
 800f77e:	701a      	strb	r2, [r3, #0]
 800f780:	e7bd      	b.n	800f6fe <_dtoa_r+0x65e>
 800f782:	4b7b      	ldr	r3, [pc, #492]	@ (800f970 <_dtoa_r+0x8d0>)
 800f784:	2200      	movs	r2, #0
 800f786:	f7f0 ff3f 	bl	8000608 <__aeabi_dmul>
 800f78a:	2200      	movs	r2, #0
 800f78c:	2300      	movs	r3, #0
 800f78e:	4604      	mov	r4, r0
 800f790:	460d      	mov	r5, r1
 800f792:	f7f1 f9a1 	bl	8000ad8 <__aeabi_dcmpeq>
 800f796:	2800      	cmp	r0, #0
 800f798:	f43f aebb 	beq.w	800f512 <_dtoa_r+0x472>
 800f79c:	e6f0      	b.n	800f580 <_dtoa_r+0x4e0>
 800f79e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f7a0:	2a00      	cmp	r2, #0
 800f7a2:	f000 80db 	beq.w	800f95c <_dtoa_r+0x8bc>
 800f7a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f7a8:	2a01      	cmp	r2, #1
 800f7aa:	f300 80bf 	bgt.w	800f92c <_dtoa_r+0x88c>
 800f7ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f7b0:	2a00      	cmp	r2, #0
 800f7b2:	f000 80b7 	beq.w	800f924 <_dtoa_r+0x884>
 800f7b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f7ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f7bc:	4646      	mov	r6, r8
 800f7be:	9a08      	ldr	r2, [sp, #32]
 800f7c0:	2101      	movs	r1, #1
 800f7c2:	441a      	add	r2, r3
 800f7c4:	4658      	mov	r0, fp
 800f7c6:	4498      	add	r8, r3
 800f7c8:	9208      	str	r2, [sp, #32]
 800f7ca:	f000 fb6b 	bl	800fea4 <__i2b>
 800f7ce:	4605      	mov	r5, r0
 800f7d0:	b15e      	cbz	r6, 800f7ea <_dtoa_r+0x74a>
 800f7d2:	9b08      	ldr	r3, [sp, #32]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	dd08      	ble.n	800f7ea <_dtoa_r+0x74a>
 800f7d8:	42b3      	cmp	r3, r6
 800f7da:	9a08      	ldr	r2, [sp, #32]
 800f7dc:	bfa8      	it	ge
 800f7de:	4633      	movge	r3, r6
 800f7e0:	eba8 0803 	sub.w	r8, r8, r3
 800f7e4:	1af6      	subs	r6, r6, r3
 800f7e6:	1ad3      	subs	r3, r2, r3
 800f7e8:	9308      	str	r3, [sp, #32]
 800f7ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f7ec:	b1f3      	cbz	r3, 800f82c <_dtoa_r+0x78c>
 800f7ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	f000 80b7 	beq.w	800f964 <_dtoa_r+0x8c4>
 800f7f6:	b18c      	cbz	r4, 800f81c <_dtoa_r+0x77c>
 800f7f8:	4629      	mov	r1, r5
 800f7fa:	4622      	mov	r2, r4
 800f7fc:	4658      	mov	r0, fp
 800f7fe:	f000 fc11 	bl	8010024 <__pow5mult>
 800f802:	464a      	mov	r2, r9
 800f804:	4601      	mov	r1, r0
 800f806:	4605      	mov	r5, r0
 800f808:	4658      	mov	r0, fp
 800f80a:	f000 fb61 	bl	800fed0 <__multiply>
 800f80e:	4649      	mov	r1, r9
 800f810:	9004      	str	r0, [sp, #16]
 800f812:	4658      	mov	r0, fp
 800f814:	f000 fa92 	bl	800fd3c <_Bfree>
 800f818:	9b04      	ldr	r3, [sp, #16]
 800f81a:	4699      	mov	r9, r3
 800f81c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f81e:	1b1a      	subs	r2, r3, r4
 800f820:	d004      	beq.n	800f82c <_dtoa_r+0x78c>
 800f822:	4649      	mov	r1, r9
 800f824:	4658      	mov	r0, fp
 800f826:	f000 fbfd 	bl	8010024 <__pow5mult>
 800f82a:	4681      	mov	r9, r0
 800f82c:	2101      	movs	r1, #1
 800f82e:	4658      	mov	r0, fp
 800f830:	f000 fb38 	bl	800fea4 <__i2b>
 800f834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f836:	4604      	mov	r4, r0
 800f838:	2b00      	cmp	r3, #0
 800f83a:	f000 81cf 	beq.w	800fbdc <_dtoa_r+0xb3c>
 800f83e:	461a      	mov	r2, r3
 800f840:	4601      	mov	r1, r0
 800f842:	4658      	mov	r0, fp
 800f844:	f000 fbee 	bl	8010024 <__pow5mult>
 800f848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f84a:	2b01      	cmp	r3, #1
 800f84c:	4604      	mov	r4, r0
 800f84e:	f300 8095 	bgt.w	800f97c <_dtoa_r+0x8dc>
 800f852:	9b02      	ldr	r3, [sp, #8]
 800f854:	2b00      	cmp	r3, #0
 800f856:	f040 8087 	bne.w	800f968 <_dtoa_r+0x8c8>
 800f85a:	9b03      	ldr	r3, [sp, #12]
 800f85c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f860:	2b00      	cmp	r3, #0
 800f862:	f040 8089 	bne.w	800f978 <_dtoa_r+0x8d8>
 800f866:	9b03      	ldr	r3, [sp, #12]
 800f868:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f86c:	0d1b      	lsrs	r3, r3, #20
 800f86e:	051b      	lsls	r3, r3, #20
 800f870:	b12b      	cbz	r3, 800f87e <_dtoa_r+0x7de>
 800f872:	9b08      	ldr	r3, [sp, #32]
 800f874:	3301      	adds	r3, #1
 800f876:	9308      	str	r3, [sp, #32]
 800f878:	f108 0801 	add.w	r8, r8, #1
 800f87c:	2301      	movs	r3, #1
 800f87e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f880:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f882:	2b00      	cmp	r3, #0
 800f884:	f000 81b0 	beq.w	800fbe8 <_dtoa_r+0xb48>
 800f888:	6923      	ldr	r3, [r4, #16]
 800f88a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f88e:	6918      	ldr	r0, [r3, #16]
 800f890:	f000 fabc 	bl	800fe0c <__hi0bits>
 800f894:	f1c0 0020 	rsb	r0, r0, #32
 800f898:	9b08      	ldr	r3, [sp, #32]
 800f89a:	4418      	add	r0, r3
 800f89c:	f010 001f 	ands.w	r0, r0, #31
 800f8a0:	d077      	beq.n	800f992 <_dtoa_r+0x8f2>
 800f8a2:	f1c0 0320 	rsb	r3, r0, #32
 800f8a6:	2b04      	cmp	r3, #4
 800f8a8:	dd6b      	ble.n	800f982 <_dtoa_r+0x8e2>
 800f8aa:	9b08      	ldr	r3, [sp, #32]
 800f8ac:	f1c0 001c 	rsb	r0, r0, #28
 800f8b0:	4403      	add	r3, r0
 800f8b2:	4480      	add	r8, r0
 800f8b4:	4406      	add	r6, r0
 800f8b6:	9308      	str	r3, [sp, #32]
 800f8b8:	f1b8 0f00 	cmp.w	r8, #0
 800f8bc:	dd05      	ble.n	800f8ca <_dtoa_r+0x82a>
 800f8be:	4649      	mov	r1, r9
 800f8c0:	4642      	mov	r2, r8
 800f8c2:	4658      	mov	r0, fp
 800f8c4:	f000 fc08 	bl	80100d8 <__lshift>
 800f8c8:	4681      	mov	r9, r0
 800f8ca:	9b08      	ldr	r3, [sp, #32]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	dd05      	ble.n	800f8dc <_dtoa_r+0x83c>
 800f8d0:	4621      	mov	r1, r4
 800f8d2:	461a      	mov	r2, r3
 800f8d4:	4658      	mov	r0, fp
 800f8d6:	f000 fbff 	bl	80100d8 <__lshift>
 800f8da:	4604      	mov	r4, r0
 800f8dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d059      	beq.n	800f996 <_dtoa_r+0x8f6>
 800f8e2:	4621      	mov	r1, r4
 800f8e4:	4648      	mov	r0, r9
 800f8e6:	f000 fc63 	bl	80101b0 <__mcmp>
 800f8ea:	2800      	cmp	r0, #0
 800f8ec:	da53      	bge.n	800f996 <_dtoa_r+0x8f6>
 800f8ee:	1e7b      	subs	r3, r7, #1
 800f8f0:	9304      	str	r3, [sp, #16]
 800f8f2:	4649      	mov	r1, r9
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	220a      	movs	r2, #10
 800f8f8:	4658      	mov	r0, fp
 800f8fa:	f000 fa41 	bl	800fd80 <__multadd>
 800f8fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f900:	4681      	mov	r9, r0
 800f902:	2b00      	cmp	r3, #0
 800f904:	f000 8172 	beq.w	800fbec <_dtoa_r+0xb4c>
 800f908:	2300      	movs	r3, #0
 800f90a:	4629      	mov	r1, r5
 800f90c:	220a      	movs	r2, #10
 800f90e:	4658      	mov	r0, fp
 800f910:	f000 fa36 	bl	800fd80 <__multadd>
 800f914:	9b00      	ldr	r3, [sp, #0]
 800f916:	2b00      	cmp	r3, #0
 800f918:	4605      	mov	r5, r0
 800f91a:	dc67      	bgt.n	800f9ec <_dtoa_r+0x94c>
 800f91c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f91e:	2b02      	cmp	r3, #2
 800f920:	dc41      	bgt.n	800f9a6 <_dtoa_r+0x906>
 800f922:	e063      	b.n	800f9ec <_dtoa_r+0x94c>
 800f924:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f926:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f92a:	e746      	b.n	800f7ba <_dtoa_r+0x71a>
 800f92c:	9b07      	ldr	r3, [sp, #28]
 800f92e:	1e5c      	subs	r4, r3, #1
 800f930:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f932:	42a3      	cmp	r3, r4
 800f934:	bfbf      	itttt	lt
 800f936:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f938:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f93a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f93c:	1ae3      	sublt	r3, r4, r3
 800f93e:	bfb4      	ite	lt
 800f940:	18d2      	addlt	r2, r2, r3
 800f942:	1b1c      	subge	r4, r3, r4
 800f944:	9b07      	ldr	r3, [sp, #28]
 800f946:	bfbc      	itt	lt
 800f948:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f94a:	2400      	movlt	r4, #0
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	bfb5      	itete	lt
 800f950:	eba8 0603 	sublt.w	r6, r8, r3
 800f954:	9b07      	ldrge	r3, [sp, #28]
 800f956:	2300      	movlt	r3, #0
 800f958:	4646      	movge	r6, r8
 800f95a:	e730      	b.n	800f7be <_dtoa_r+0x71e>
 800f95c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f95e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f960:	4646      	mov	r6, r8
 800f962:	e735      	b.n	800f7d0 <_dtoa_r+0x730>
 800f964:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f966:	e75c      	b.n	800f822 <_dtoa_r+0x782>
 800f968:	2300      	movs	r3, #0
 800f96a:	e788      	b.n	800f87e <_dtoa_r+0x7de>
 800f96c:	3fe00000 	.word	0x3fe00000
 800f970:	40240000 	.word	0x40240000
 800f974:	40140000 	.word	0x40140000
 800f978:	9b02      	ldr	r3, [sp, #8]
 800f97a:	e780      	b.n	800f87e <_dtoa_r+0x7de>
 800f97c:	2300      	movs	r3, #0
 800f97e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f980:	e782      	b.n	800f888 <_dtoa_r+0x7e8>
 800f982:	d099      	beq.n	800f8b8 <_dtoa_r+0x818>
 800f984:	9a08      	ldr	r2, [sp, #32]
 800f986:	331c      	adds	r3, #28
 800f988:	441a      	add	r2, r3
 800f98a:	4498      	add	r8, r3
 800f98c:	441e      	add	r6, r3
 800f98e:	9208      	str	r2, [sp, #32]
 800f990:	e792      	b.n	800f8b8 <_dtoa_r+0x818>
 800f992:	4603      	mov	r3, r0
 800f994:	e7f6      	b.n	800f984 <_dtoa_r+0x8e4>
 800f996:	9b07      	ldr	r3, [sp, #28]
 800f998:	9704      	str	r7, [sp, #16]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	dc20      	bgt.n	800f9e0 <_dtoa_r+0x940>
 800f99e:	9300      	str	r3, [sp, #0]
 800f9a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f9a2:	2b02      	cmp	r3, #2
 800f9a4:	dd1e      	ble.n	800f9e4 <_dtoa_r+0x944>
 800f9a6:	9b00      	ldr	r3, [sp, #0]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	f47f aec0 	bne.w	800f72e <_dtoa_r+0x68e>
 800f9ae:	4621      	mov	r1, r4
 800f9b0:	2205      	movs	r2, #5
 800f9b2:	4658      	mov	r0, fp
 800f9b4:	f000 f9e4 	bl	800fd80 <__multadd>
 800f9b8:	4601      	mov	r1, r0
 800f9ba:	4604      	mov	r4, r0
 800f9bc:	4648      	mov	r0, r9
 800f9be:	f000 fbf7 	bl	80101b0 <__mcmp>
 800f9c2:	2800      	cmp	r0, #0
 800f9c4:	f77f aeb3 	ble.w	800f72e <_dtoa_r+0x68e>
 800f9c8:	4656      	mov	r6, sl
 800f9ca:	2331      	movs	r3, #49	@ 0x31
 800f9cc:	f806 3b01 	strb.w	r3, [r6], #1
 800f9d0:	9b04      	ldr	r3, [sp, #16]
 800f9d2:	3301      	adds	r3, #1
 800f9d4:	9304      	str	r3, [sp, #16]
 800f9d6:	e6ae      	b.n	800f736 <_dtoa_r+0x696>
 800f9d8:	9c07      	ldr	r4, [sp, #28]
 800f9da:	9704      	str	r7, [sp, #16]
 800f9dc:	4625      	mov	r5, r4
 800f9de:	e7f3      	b.n	800f9c8 <_dtoa_r+0x928>
 800f9e0:	9b07      	ldr	r3, [sp, #28]
 800f9e2:	9300      	str	r3, [sp, #0]
 800f9e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	f000 8104 	beq.w	800fbf4 <_dtoa_r+0xb54>
 800f9ec:	2e00      	cmp	r6, #0
 800f9ee:	dd05      	ble.n	800f9fc <_dtoa_r+0x95c>
 800f9f0:	4629      	mov	r1, r5
 800f9f2:	4632      	mov	r2, r6
 800f9f4:	4658      	mov	r0, fp
 800f9f6:	f000 fb6f 	bl	80100d8 <__lshift>
 800f9fa:	4605      	mov	r5, r0
 800f9fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d05a      	beq.n	800fab8 <_dtoa_r+0xa18>
 800fa02:	6869      	ldr	r1, [r5, #4]
 800fa04:	4658      	mov	r0, fp
 800fa06:	f000 f959 	bl	800fcbc <_Balloc>
 800fa0a:	4606      	mov	r6, r0
 800fa0c:	b928      	cbnz	r0, 800fa1a <_dtoa_r+0x97a>
 800fa0e:	4b84      	ldr	r3, [pc, #528]	@ (800fc20 <_dtoa_r+0xb80>)
 800fa10:	4602      	mov	r2, r0
 800fa12:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fa16:	f7ff bb5a 	b.w	800f0ce <_dtoa_r+0x2e>
 800fa1a:	692a      	ldr	r2, [r5, #16]
 800fa1c:	3202      	adds	r2, #2
 800fa1e:	0092      	lsls	r2, r2, #2
 800fa20:	f105 010c 	add.w	r1, r5, #12
 800fa24:	300c      	adds	r0, #12
 800fa26:	f7ff faa4 	bl	800ef72 <memcpy>
 800fa2a:	2201      	movs	r2, #1
 800fa2c:	4631      	mov	r1, r6
 800fa2e:	4658      	mov	r0, fp
 800fa30:	f000 fb52 	bl	80100d8 <__lshift>
 800fa34:	f10a 0301 	add.w	r3, sl, #1
 800fa38:	9307      	str	r3, [sp, #28]
 800fa3a:	9b00      	ldr	r3, [sp, #0]
 800fa3c:	4453      	add	r3, sl
 800fa3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fa40:	9b02      	ldr	r3, [sp, #8]
 800fa42:	f003 0301 	and.w	r3, r3, #1
 800fa46:	462f      	mov	r7, r5
 800fa48:	930a      	str	r3, [sp, #40]	@ 0x28
 800fa4a:	4605      	mov	r5, r0
 800fa4c:	9b07      	ldr	r3, [sp, #28]
 800fa4e:	4621      	mov	r1, r4
 800fa50:	3b01      	subs	r3, #1
 800fa52:	4648      	mov	r0, r9
 800fa54:	9300      	str	r3, [sp, #0]
 800fa56:	f7ff fa9a 	bl	800ef8e <quorem>
 800fa5a:	4639      	mov	r1, r7
 800fa5c:	9002      	str	r0, [sp, #8]
 800fa5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fa62:	4648      	mov	r0, r9
 800fa64:	f000 fba4 	bl	80101b0 <__mcmp>
 800fa68:	462a      	mov	r2, r5
 800fa6a:	9008      	str	r0, [sp, #32]
 800fa6c:	4621      	mov	r1, r4
 800fa6e:	4658      	mov	r0, fp
 800fa70:	f000 fbba 	bl	80101e8 <__mdiff>
 800fa74:	68c2      	ldr	r2, [r0, #12]
 800fa76:	4606      	mov	r6, r0
 800fa78:	bb02      	cbnz	r2, 800fabc <_dtoa_r+0xa1c>
 800fa7a:	4601      	mov	r1, r0
 800fa7c:	4648      	mov	r0, r9
 800fa7e:	f000 fb97 	bl	80101b0 <__mcmp>
 800fa82:	4602      	mov	r2, r0
 800fa84:	4631      	mov	r1, r6
 800fa86:	4658      	mov	r0, fp
 800fa88:	920e      	str	r2, [sp, #56]	@ 0x38
 800fa8a:	f000 f957 	bl	800fd3c <_Bfree>
 800fa8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fa92:	9e07      	ldr	r6, [sp, #28]
 800fa94:	ea43 0102 	orr.w	r1, r3, r2
 800fa98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fa9a:	4319      	orrs	r1, r3
 800fa9c:	d110      	bne.n	800fac0 <_dtoa_r+0xa20>
 800fa9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800faa2:	d029      	beq.n	800faf8 <_dtoa_r+0xa58>
 800faa4:	9b08      	ldr	r3, [sp, #32]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	dd02      	ble.n	800fab0 <_dtoa_r+0xa10>
 800faaa:	9b02      	ldr	r3, [sp, #8]
 800faac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800fab0:	9b00      	ldr	r3, [sp, #0]
 800fab2:	f883 8000 	strb.w	r8, [r3]
 800fab6:	e63f      	b.n	800f738 <_dtoa_r+0x698>
 800fab8:	4628      	mov	r0, r5
 800faba:	e7bb      	b.n	800fa34 <_dtoa_r+0x994>
 800fabc:	2201      	movs	r2, #1
 800fabe:	e7e1      	b.n	800fa84 <_dtoa_r+0x9e4>
 800fac0:	9b08      	ldr	r3, [sp, #32]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	db04      	blt.n	800fad0 <_dtoa_r+0xa30>
 800fac6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fac8:	430b      	orrs	r3, r1
 800faca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800facc:	430b      	orrs	r3, r1
 800face:	d120      	bne.n	800fb12 <_dtoa_r+0xa72>
 800fad0:	2a00      	cmp	r2, #0
 800fad2:	dded      	ble.n	800fab0 <_dtoa_r+0xa10>
 800fad4:	4649      	mov	r1, r9
 800fad6:	2201      	movs	r2, #1
 800fad8:	4658      	mov	r0, fp
 800fada:	f000 fafd 	bl	80100d8 <__lshift>
 800fade:	4621      	mov	r1, r4
 800fae0:	4681      	mov	r9, r0
 800fae2:	f000 fb65 	bl	80101b0 <__mcmp>
 800fae6:	2800      	cmp	r0, #0
 800fae8:	dc03      	bgt.n	800faf2 <_dtoa_r+0xa52>
 800faea:	d1e1      	bne.n	800fab0 <_dtoa_r+0xa10>
 800faec:	f018 0f01 	tst.w	r8, #1
 800faf0:	d0de      	beq.n	800fab0 <_dtoa_r+0xa10>
 800faf2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800faf6:	d1d8      	bne.n	800faaa <_dtoa_r+0xa0a>
 800faf8:	9a00      	ldr	r2, [sp, #0]
 800fafa:	2339      	movs	r3, #57	@ 0x39
 800fafc:	7013      	strb	r3, [r2, #0]
 800fafe:	4633      	mov	r3, r6
 800fb00:	461e      	mov	r6, r3
 800fb02:	3b01      	subs	r3, #1
 800fb04:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fb08:	2a39      	cmp	r2, #57	@ 0x39
 800fb0a:	d052      	beq.n	800fbb2 <_dtoa_r+0xb12>
 800fb0c:	3201      	adds	r2, #1
 800fb0e:	701a      	strb	r2, [r3, #0]
 800fb10:	e612      	b.n	800f738 <_dtoa_r+0x698>
 800fb12:	2a00      	cmp	r2, #0
 800fb14:	dd07      	ble.n	800fb26 <_dtoa_r+0xa86>
 800fb16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fb1a:	d0ed      	beq.n	800faf8 <_dtoa_r+0xa58>
 800fb1c:	9a00      	ldr	r2, [sp, #0]
 800fb1e:	f108 0301 	add.w	r3, r8, #1
 800fb22:	7013      	strb	r3, [r2, #0]
 800fb24:	e608      	b.n	800f738 <_dtoa_r+0x698>
 800fb26:	9b07      	ldr	r3, [sp, #28]
 800fb28:	9a07      	ldr	r2, [sp, #28]
 800fb2a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800fb2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fb30:	4293      	cmp	r3, r2
 800fb32:	d028      	beq.n	800fb86 <_dtoa_r+0xae6>
 800fb34:	4649      	mov	r1, r9
 800fb36:	2300      	movs	r3, #0
 800fb38:	220a      	movs	r2, #10
 800fb3a:	4658      	mov	r0, fp
 800fb3c:	f000 f920 	bl	800fd80 <__multadd>
 800fb40:	42af      	cmp	r7, r5
 800fb42:	4681      	mov	r9, r0
 800fb44:	f04f 0300 	mov.w	r3, #0
 800fb48:	f04f 020a 	mov.w	r2, #10
 800fb4c:	4639      	mov	r1, r7
 800fb4e:	4658      	mov	r0, fp
 800fb50:	d107      	bne.n	800fb62 <_dtoa_r+0xac2>
 800fb52:	f000 f915 	bl	800fd80 <__multadd>
 800fb56:	4607      	mov	r7, r0
 800fb58:	4605      	mov	r5, r0
 800fb5a:	9b07      	ldr	r3, [sp, #28]
 800fb5c:	3301      	adds	r3, #1
 800fb5e:	9307      	str	r3, [sp, #28]
 800fb60:	e774      	b.n	800fa4c <_dtoa_r+0x9ac>
 800fb62:	f000 f90d 	bl	800fd80 <__multadd>
 800fb66:	4629      	mov	r1, r5
 800fb68:	4607      	mov	r7, r0
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	220a      	movs	r2, #10
 800fb6e:	4658      	mov	r0, fp
 800fb70:	f000 f906 	bl	800fd80 <__multadd>
 800fb74:	4605      	mov	r5, r0
 800fb76:	e7f0      	b.n	800fb5a <_dtoa_r+0xaba>
 800fb78:	9b00      	ldr	r3, [sp, #0]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	bfcc      	ite	gt
 800fb7e:	461e      	movgt	r6, r3
 800fb80:	2601      	movle	r6, #1
 800fb82:	4456      	add	r6, sl
 800fb84:	2700      	movs	r7, #0
 800fb86:	4649      	mov	r1, r9
 800fb88:	2201      	movs	r2, #1
 800fb8a:	4658      	mov	r0, fp
 800fb8c:	f000 faa4 	bl	80100d8 <__lshift>
 800fb90:	4621      	mov	r1, r4
 800fb92:	4681      	mov	r9, r0
 800fb94:	f000 fb0c 	bl	80101b0 <__mcmp>
 800fb98:	2800      	cmp	r0, #0
 800fb9a:	dcb0      	bgt.n	800fafe <_dtoa_r+0xa5e>
 800fb9c:	d102      	bne.n	800fba4 <_dtoa_r+0xb04>
 800fb9e:	f018 0f01 	tst.w	r8, #1
 800fba2:	d1ac      	bne.n	800fafe <_dtoa_r+0xa5e>
 800fba4:	4633      	mov	r3, r6
 800fba6:	461e      	mov	r6, r3
 800fba8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fbac:	2a30      	cmp	r2, #48	@ 0x30
 800fbae:	d0fa      	beq.n	800fba6 <_dtoa_r+0xb06>
 800fbb0:	e5c2      	b.n	800f738 <_dtoa_r+0x698>
 800fbb2:	459a      	cmp	sl, r3
 800fbb4:	d1a4      	bne.n	800fb00 <_dtoa_r+0xa60>
 800fbb6:	9b04      	ldr	r3, [sp, #16]
 800fbb8:	3301      	adds	r3, #1
 800fbba:	9304      	str	r3, [sp, #16]
 800fbbc:	2331      	movs	r3, #49	@ 0x31
 800fbbe:	f88a 3000 	strb.w	r3, [sl]
 800fbc2:	e5b9      	b.n	800f738 <_dtoa_r+0x698>
 800fbc4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fbc6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800fc24 <_dtoa_r+0xb84>
 800fbca:	b11b      	cbz	r3, 800fbd4 <_dtoa_r+0xb34>
 800fbcc:	f10a 0308 	add.w	r3, sl, #8
 800fbd0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fbd2:	6013      	str	r3, [r2, #0]
 800fbd4:	4650      	mov	r0, sl
 800fbd6:	b019      	add	sp, #100	@ 0x64
 800fbd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbde:	2b01      	cmp	r3, #1
 800fbe0:	f77f ae37 	ble.w	800f852 <_dtoa_r+0x7b2>
 800fbe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fbe6:	930a      	str	r3, [sp, #40]	@ 0x28
 800fbe8:	2001      	movs	r0, #1
 800fbea:	e655      	b.n	800f898 <_dtoa_r+0x7f8>
 800fbec:	9b00      	ldr	r3, [sp, #0]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	f77f aed6 	ble.w	800f9a0 <_dtoa_r+0x900>
 800fbf4:	4656      	mov	r6, sl
 800fbf6:	4621      	mov	r1, r4
 800fbf8:	4648      	mov	r0, r9
 800fbfa:	f7ff f9c8 	bl	800ef8e <quorem>
 800fbfe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fc02:	f806 8b01 	strb.w	r8, [r6], #1
 800fc06:	9b00      	ldr	r3, [sp, #0]
 800fc08:	eba6 020a 	sub.w	r2, r6, sl
 800fc0c:	4293      	cmp	r3, r2
 800fc0e:	ddb3      	ble.n	800fb78 <_dtoa_r+0xad8>
 800fc10:	4649      	mov	r1, r9
 800fc12:	2300      	movs	r3, #0
 800fc14:	220a      	movs	r2, #10
 800fc16:	4658      	mov	r0, fp
 800fc18:	f000 f8b2 	bl	800fd80 <__multadd>
 800fc1c:	4681      	mov	r9, r0
 800fc1e:	e7ea      	b.n	800fbf6 <_dtoa_r+0xb56>
 800fc20:	08011078 	.word	0x08011078
 800fc24:	08010ffc 	.word	0x08010ffc

0800fc28 <_free_r>:
 800fc28:	b538      	push	{r3, r4, r5, lr}
 800fc2a:	4605      	mov	r5, r0
 800fc2c:	2900      	cmp	r1, #0
 800fc2e:	d041      	beq.n	800fcb4 <_free_r+0x8c>
 800fc30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc34:	1f0c      	subs	r4, r1, #4
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	bfb8      	it	lt
 800fc3a:	18e4      	addlt	r4, r4, r3
 800fc3c:	f7fe fb34 	bl	800e2a8 <__malloc_lock>
 800fc40:	4a1d      	ldr	r2, [pc, #116]	@ (800fcb8 <_free_r+0x90>)
 800fc42:	6813      	ldr	r3, [r2, #0]
 800fc44:	b933      	cbnz	r3, 800fc54 <_free_r+0x2c>
 800fc46:	6063      	str	r3, [r4, #4]
 800fc48:	6014      	str	r4, [r2, #0]
 800fc4a:	4628      	mov	r0, r5
 800fc4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc50:	f7fe bb30 	b.w	800e2b4 <__malloc_unlock>
 800fc54:	42a3      	cmp	r3, r4
 800fc56:	d908      	bls.n	800fc6a <_free_r+0x42>
 800fc58:	6820      	ldr	r0, [r4, #0]
 800fc5a:	1821      	adds	r1, r4, r0
 800fc5c:	428b      	cmp	r3, r1
 800fc5e:	bf01      	itttt	eq
 800fc60:	6819      	ldreq	r1, [r3, #0]
 800fc62:	685b      	ldreq	r3, [r3, #4]
 800fc64:	1809      	addeq	r1, r1, r0
 800fc66:	6021      	streq	r1, [r4, #0]
 800fc68:	e7ed      	b.n	800fc46 <_free_r+0x1e>
 800fc6a:	461a      	mov	r2, r3
 800fc6c:	685b      	ldr	r3, [r3, #4]
 800fc6e:	b10b      	cbz	r3, 800fc74 <_free_r+0x4c>
 800fc70:	42a3      	cmp	r3, r4
 800fc72:	d9fa      	bls.n	800fc6a <_free_r+0x42>
 800fc74:	6811      	ldr	r1, [r2, #0]
 800fc76:	1850      	adds	r0, r2, r1
 800fc78:	42a0      	cmp	r0, r4
 800fc7a:	d10b      	bne.n	800fc94 <_free_r+0x6c>
 800fc7c:	6820      	ldr	r0, [r4, #0]
 800fc7e:	4401      	add	r1, r0
 800fc80:	1850      	adds	r0, r2, r1
 800fc82:	4283      	cmp	r3, r0
 800fc84:	6011      	str	r1, [r2, #0]
 800fc86:	d1e0      	bne.n	800fc4a <_free_r+0x22>
 800fc88:	6818      	ldr	r0, [r3, #0]
 800fc8a:	685b      	ldr	r3, [r3, #4]
 800fc8c:	6053      	str	r3, [r2, #4]
 800fc8e:	4408      	add	r0, r1
 800fc90:	6010      	str	r0, [r2, #0]
 800fc92:	e7da      	b.n	800fc4a <_free_r+0x22>
 800fc94:	d902      	bls.n	800fc9c <_free_r+0x74>
 800fc96:	230c      	movs	r3, #12
 800fc98:	602b      	str	r3, [r5, #0]
 800fc9a:	e7d6      	b.n	800fc4a <_free_r+0x22>
 800fc9c:	6820      	ldr	r0, [r4, #0]
 800fc9e:	1821      	adds	r1, r4, r0
 800fca0:	428b      	cmp	r3, r1
 800fca2:	bf04      	itt	eq
 800fca4:	6819      	ldreq	r1, [r3, #0]
 800fca6:	685b      	ldreq	r3, [r3, #4]
 800fca8:	6063      	str	r3, [r4, #4]
 800fcaa:	bf04      	itt	eq
 800fcac:	1809      	addeq	r1, r1, r0
 800fcae:	6021      	streq	r1, [r4, #0]
 800fcb0:	6054      	str	r4, [r2, #4]
 800fcb2:	e7ca      	b.n	800fc4a <_free_r+0x22>
 800fcb4:	bd38      	pop	{r3, r4, r5, pc}
 800fcb6:	bf00      	nop
 800fcb8:	200008f8 	.word	0x200008f8

0800fcbc <_Balloc>:
 800fcbc:	b570      	push	{r4, r5, r6, lr}
 800fcbe:	69c6      	ldr	r6, [r0, #28]
 800fcc0:	4604      	mov	r4, r0
 800fcc2:	460d      	mov	r5, r1
 800fcc4:	b976      	cbnz	r6, 800fce4 <_Balloc+0x28>
 800fcc6:	2010      	movs	r0, #16
 800fcc8:	f7fe fa3c 	bl	800e144 <malloc>
 800fccc:	4602      	mov	r2, r0
 800fcce:	61e0      	str	r0, [r4, #28]
 800fcd0:	b920      	cbnz	r0, 800fcdc <_Balloc+0x20>
 800fcd2:	4b18      	ldr	r3, [pc, #96]	@ (800fd34 <_Balloc+0x78>)
 800fcd4:	4818      	ldr	r0, [pc, #96]	@ (800fd38 <_Balloc+0x7c>)
 800fcd6:	216b      	movs	r1, #107	@ 0x6b
 800fcd8:	f000 fd90 	bl	80107fc <__assert_func>
 800fcdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fce0:	6006      	str	r6, [r0, #0]
 800fce2:	60c6      	str	r6, [r0, #12]
 800fce4:	69e6      	ldr	r6, [r4, #28]
 800fce6:	68f3      	ldr	r3, [r6, #12]
 800fce8:	b183      	cbz	r3, 800fd0c <_Balloc+0x50>
 800fcea:	69e3      	ldr	r3, [r4, #28]
 800fcec:	68db      	ldr	r3, [r3, #12]
 800fcee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fcf2:	b9b8      	cbnz	r0, 800fd24 <_Balloc+0x68>
 800fcf4:	2101      	movs	r1, #1
 800fcf6:	fa01 f605 	lsl.w	r6, r1, r5
 800fcfa:	1d72      	adds	r2, r6, #5
 800fcfc:	0092      	lsls	r2, r2, #2
 800fcfe:	4620      	mov	r0, r4
 800fd00:	f000 fd9a 	bl	8010838 <_calloc_r>
 800fd04:	b160      	cbz	r0, 800fd20 <_Balloc+0x64>
 800fd06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fd0a:	e00e      	b.n	800fd2a <_Balloc+0x6e>
 800fd0c:	2221      	movs	r2, #33	@ 0x21
 800fd0e:	2104      	movs	r1, #4
 800fd10:	4620      	mov	r0, r4
 800fd12:	f000 fd91 	bl	8010838 <_calloc_r>
 800fd16:	69e3      	ldr	r3, [r4, #28]
 800fd18:	60f0      	str	r0, [r6, #12]
 800fd1a:	68db      	ldr	r3, [r3, #12]
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d1e4      	bne.n	800fcea <_Balloc+0x2e>
 800fd20:	2000      	movs	r0, #0
 800fd22:	bd70      	pop	{r4, r5, r6, pc}
 800fd24:	6802      	ldr	r2, [r0, #0]
 800fd26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fd30:	e7f7      	b.n	800fd22 <_Balloc+0x66>
 800fd32:	bf00      	nop
 800fd34:	08011009 	.word	0x08011009
 800fd38:	08011089 	.word	0x08011089

0800fd3c <_Bfree>:
 800fd3c:	b570      	push	{r4, r5, r6, lr}
 800fd3e:	69c6      	ldr	r6, [r0, #28]
 800fd40:	4605      	mov	r5, r0
 800fd42:	460c      	mov	r4, r1
 800fd44:	b976      	cbnz	r6, 800fd64 <_Bfree+0x28>
 800fd46:	2010      	movs	r0, #16
 800fd48:	f7fe f9fc 	bl	800e144 <malloc>
 800fd4c:	4602      	mov	r2, r0
 800fd4e:	61e8      	str	r0, [r5, #28]
 800fd50:	b920      	cbnz	r0, 800fd5c <_Bfree+0x20>
 800fd52:	4b09      	ldr	r3, [pc, #36]	@ (800fd78 <_Bfree+0x3c>)
 800fd54:	4809      	ldr	r0, [pc, #36]	@ (800fd7c <_Bfree+0x40>)
 800fd56:	218f      	movs	r1, #143	@ 0x8f
 800fd58:	f000 fd50 	bl	80107fc <__assert_func>
 800fd5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fd60:	6006      	str	r6, [r0, #0]
 800fd62:	60c6      	str	r6, [r0, #12]
 800fd64:	b13c      	cbz	r4, 800fd76 <_Bfree+0x3a>
 800fd66:	69eb      	ldr	r3, [r5, #28]
 800fd68:	6862      	ldr	r2, [r4, #4]
 800fd6a:	68db      	ldr	r3, [r3, #12]
 800fd6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fd70:	6021      	str	r1, [r4, #0]
 800fd72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fd76:	bd70      	pop	{r4, r5, r6, pc}
 800fd78:	08011009 	.word	0x08011009
 800fd7c:	08011089 	.word	0x08011089

0800fd80 <__multadd>:
 800fd80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd84:	690d      	ldr	r5, [r1, #16]
 800fd86:	4607      	mov	r7, r0
 800fd88:	460c      	mov	r4, r1
 800fd8a:	461e      	mov	r6, r3
 800fd8c:	f101 0c14 	add.w	ip, r1, #20
 800fd90:	2000      	movs	r0, #0
 800fd92:	f8dc 3000 	ldr.w	r3, [ip]
 800fd96:	b299      	uxth	r1, r3
 800fd98:	fb02 6101 	mla	r1, r2, r1, r6
 800fd9c:	0c1e      	lsrs	r6, r3, #16
 800fd9e:	0c0b      	lsrs	r3, r1, #16
 800fda0:	fb02 3306 	mla	r3, r2, r6, r3
 800fda4:	b289      	uxth	r1, r1
 800fda6:	3001      	adds	r0, #1
 800fda8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fdac:	4285      	cmp	r5, r0
 800fdae:	f84c 1b04 	str.w	r1, [ip], #4
 800fdb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fdb6:	dcec      	bgt.n	800fd92 <__multadd+0x12>
 800fdb8:	b30e      	cbz	r6, 800fdfe <__multadd+0x7e>
 800fdba:	68a3      	ldr	r3, [r4, #8]
 800fdbc:	42ab      	cmp	r3, r5
 800fdbe:	dc19      	bgt.n	800fdf4 <__multadd+0x74>
 800fdc0:	6861      	ldr	r1, [r4, #4]
 800fdc2:	4638      	mov	r0, r7
 800fdc4:	3101      	adds	r1, #1
 800fdc6:	f7ff ff79 	bl	800fcbc <_Balloc>
 800fdca:	4680      	mov	r8, r0
 800fdcc:	b928      	cbnz	r0, 800fdda <__multadd+0x5a>
 800fdce:	4602      	mov	r2, r0
 800fdd0:	4b0c      	ldr	r3, [pc, #48]	@ (800fe04 <__multadd+0x84>)
 800fdd2:	480d      	ldr	r0, [pc, #52]	@ (800fe08 <__multadd+0x88>)
 800fdd4:	21ba      	movs	r1, #186	@ 0xba
 800fdd6:	f000 fd11 	bl	80107fc <__assert_func>
 800fdda:	6922      	ldr	r2, [r4, #16]
 800fddc:	3202      	adds	r2, #2
 800fdde:	f104 010c 	add.w	r1, r4, #12
 800fde2:	0092      	lsls	r2, r2, #2
 800fde4:	300c      	adds	r0, #12
 800fde6:	f7ff f8c4 	bl	800ef72 <memcpy>
 800fdea:	4621      	mov	r1, r4
 800fdec:	4638      	mov	r0, r7
 800fdee:	f7ff ffa5 	bl	800fd3c <_Bfree>
 800fdf2:	4644      	mov	r4, r8
 800fdf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fdf8:	3501      	adds	r5, #1
 800fdfa:	615e      	str	r6, [r3, #20]
 800fdfc:	6125      	str	r5, [r4, #16]
 800fdfe:	4620      	mov	r0, r4
 800fe00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe04:	08011078 	.word	0x08011078
 800fe08:	08011089 	.word	0x08011089

0800fe0c <__hi0bits>:
 800fe0c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fe10:	4603      	mov	r3, r0
 800fe12:	bf36      	itet	cc
 800fe14:	0403      	lslcc	r3, r0, #16
 800fe16:	2000      	movcs	r0, #0
 800fe18:	2010      	movcc	r0, #16
 800fe1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fe1e:	bf3c      	itt	cc
 800fe20:	021b      	lslcc	r3, r3, #8
 800fe22:	3008      	addcc	r0, #8
 800fe24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fe28:	bf3c      	itt	cc
 800fe2a:	011b      	lslcc	r3, r3, #4
 800fe2c:	3004      	addcc	r0, #4
 800fe2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fe32:	bf3c      	itt	cc
 800fe34:	009b      	lslcc	r3, r3, #2
 800fe36:	3002      	addcc	r0, #2
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	db05      	blt.n	800fe48 <__hi0bits+0x3c>
 800fe3c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fe40:	f100 0001 	add.w	r0, r0, #1
 800fe44:	bf08      	it	eq
 800fe46:	2020      	moveq	r0, #32
 800fe48:	4770      	bx	lr

0800fe4a <__lo0bits>:
 800fe4a:	6803      	ldr	r3, [r0, #0]
 800fe4c:	4602      	mov	r2, r0
 800fe4e:	f013 0007 	ands.w	r0, r3, #7
 800fe52:	d00b      	beq.n	800fe6c <__lo0bits+0x22>
 800fe54:	07d9      	lsls	r1, r3, #31
 800fe56:	d421      	bmi.n	800fe9c <__lo0bits+0x52>
 800fe58:	0798      	lsls	r0, r3, #30
 800fe5a:	bf49      	itett	mi
 800fe5c:	085b      	lsrmi	r3, r3, #1
 800fe5e:	089b      	lsrpl	r3, r3, #2
 800fe60:	2001      	movmi	r0, #1
 800fe62:	6013      	strmi	r3, [r2, #0]
 800fe64:	bf5c      	itt	pl
 800fe66:	6013      	strpl	r3, [r2, #0]
 800fe68:	2002      	movpl	r0, #2
 800fe6a:	4770      	bx	lr
 800fe6c:	b299      	uxth	r1, r3
 800fe6e:	b909      	cbnz	r1, 800fe74 <__lo0bits+0x2a>
 800fe70:	0c1b      	lsrs	r3, r3, #16
 800fe72:	2010      	movs	r0, #16
 800fe74:	b2d9      	uxtb	r1, r3
 800fe76:	b909      	cbnz	r1, 800fe7c <__lo0bits+0x32>
 800fe78:	3008      	adds	r0, #8
 800fe7a:	0a1b      	lsrs	r3, r3, #8
 800fe7c:	0719      	lsls	r1, r3, #28
 800fe7e:	bf04      	itt	eq
 800fe80:	091b      	lsreq	r3, r3, #4
 800fe82:	3004      	addeq	r0, #4
 800fe84:	0799      	lsls	r1, r3, #30
 800fe86:	bf04      	itt	eq
 800fe88:	089b      	lsreq	r3, r3, #2
 800fe8a:	3002      	addeq	r0, #2
 800fe8c:	07d9      	lsls	r1, r3, #31
 800fe8e:	d403      	bmi.n	800fe98 <__lo0bits+0x4e>
 800fe90:	085b      	lsrs	r3, r3, #1
 800fe92:	f100 0001 	add.w	r0, r0, #1
 800fe96:	d003      	beq.n	800fea0 <__lo0bits+0x56>
 800fe98:	6013      	str	r3, [r2, #0]
 800fe9a:	4770      	bx	lr
 800fe9c:	2000      	movs	r0, #0
 800fe9e:	4770      	bx	lr
 800fea0:	2020      	movs	r0, #32
 800fea2:	4770      	bx	lr

0800fea4 <__i2b>:
 800fea4:	b510      	push	{r4, lr}
 800fea6:	460c      	mov	r4, r1
 800fea8:	2101      	movs	r1, #1
 800feaa:	f7ff ff07 	bl	800fcbc <_Balloc>
 800feae:	4602      	mov	r2, r0
 800feb0:	b928      	cbnz	r0, 800febe <__i2b+0x1a>
 800feb2:	4b05      	ldr	r3, [pc, #20]	@ (800fec8 <__i2b+0x24>)
 800feb4:	4805      	ldr	r0, [pc, #20]	@ (800fecc <__i2b+0x28>)
 800feb6:	f240 1145 	movw	r1, #325	@ 0x145
 800feba:	f000 fc9f 	bl	80107fc <__assert_func>
 800febe:	2301      	movs	r3, #1
 800fec0:	6144      	str	r4, [r0, #20]
 800fec2:	6103      	str	r3, [r0, #16]
 800fec4:	bd10      	pop	{r4, pc}
 800fec6:	bf00      	nop
 800fec8:	08011078 	.word	0x08011078
 800fecc:	08011089 	.word	0x08011089

0800fed0 <__multiply>:
 800fed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fed4:	4614      	mov	r4, r2
 800fed6:	690a      	ldr	r2, [r1, #16]
 800fed8:	6923      	ldr	r3, [r4, #16]
 800feda:	429a      	cmp	r2, r3
 800fedc:	bfa8      	it	ge
 800fede:	4623      	movge	r3, r4
 800fee0:	460f      	mov	r7, r1
 800fee2:	bfa4      	itt	ge
 800fee4:	460c      	movge	r4, r1
 800fee6:	461f      	movge	r7, r3
 800fee8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800feec:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fef0:	68a3      	ldr	r3, [r4, #8]
 800fef2:	6861      	ldr	r1, [r4, #4]
 800fef4:	eb0a 0609 	add.w	r6, sl, r9
 800fef8:	42b3      	cmp	r3, r6
 800fefa:	b085      	sub	sp, #20
 800fefc:	bfb8      	it	lt
 800fefe:	3101      	addlt	r1, #1
 800ff00:	f7ff fedc 	bl	800fcbc <_Balloc>
 800ff04:	b930      	cbnz	r0, 800ff14 <__multiply+0x44>
 800ff06:	4602      	mov	r2, r0
 800ff08:	4b44      	ldr	r3, [pc, #272]	@ (801001c <__multiply+0x14c>)
 800ff0a:	4845      	ldr	r0, [pc, #276]	@ (8010020 <__multiply+0x150>)
 800ff0c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ff10:	f000 fc74 	bl	80107fc <__assert_func>
 800ff14:	f100 0514 	add.w	r5, r0, #20
 800ff18:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ff1c:	462b      	mov	r3, r5
 800ff1e:	2200      	movs	r2, #0
 800ff20:	4543      	cmp	r3, r8
 800ff22:	d321      	bcc.n	800ff68 <__multiply+0x98>
 800ff24:	f107 0114 	add.w	r1, r7, #20
 800ff28:	f104 0214 	add.w	r2, r4, #20
 800ff2c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ff30:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ff34:	9302      	str	r3, [sp, #8]
 800ff36:	1b13      	subs	r3, r2, r4
 800ff38:	3b15      	subs	r3, #21
 800ff3a:	f023 0303 	bic.w	r3, r3, #3
 800ff3e:	3304      	adds	r3, #4
 800ff40:	f104 0715 	add.w	r7, r4, #21
 800ff44:	42ba      	cmp	r2, r7
 800ff46:	bf38      	it	cc
 800ff48:	2304      	movcc	r3, #4
 800ff4a:	9301      	str	r3, [sp, #4]
 800ff4c:	9b02      	ldr	r3, [sp, #8]
 800ff4e:	9103      	str	r1, [sp, #12]
 800ff50:	428b      	cmp	r3, r1
 800ff52:	d80c      	bhi.n	800ff6e <__multiply+0x9e>
 800ff54:	2e00      	cmp	r6, #0
 800ff56:	dd03      	ble.n	800ff60 <__multiply+0x90>
 800ff58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d05b      	beq.n	8010018 <__multiply+0x148>
 800ff60:	6106      	str	r6, [r0, #16]
 800ff62:	b005      	add	sp, #20
 800ff64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff68:	f843 2b04 	str.w	r2, [r3], #4
 800ff6c:	e7d8      	b.n	800ff20 <__multiply+0x50>
 800ff6e:	f8b1 a000 	ldrh.w	sl, [r1]
 800ff72:	f1ba 0f00 	cmp.w	sl, #0
 800ff76:	d024      	beq.n	800ffc2 <__multiply+0xf2>
 800ff78:	f104 0e14 	add.w	lr, r4, #20
 800ff7c:	46a9      	mov	r9, r5
 800ff7e:	f04f 0c00 	mov.w	ip, #0
 800ff82:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ff86:	f8d9 3000 	ldr.w	r3, [r9]
 800ff8a:	fa1f fb87 	uxth.w	fp, r7
 800ff8e:	b29b      	uxth	r3, r3
 800ff90:	fb0a 330b 	mla	r3, sl, fp, r3
 800ff94:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ff98:	f8d9 7000 	ldr.w	r7, [r9]
 800ff9c:	4463      	add	r3, ip
 800ff9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ffa2:	fb0a c70b 	mla	r7, sl, fp, ip
 800ffa6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ffaa:	b29b      	uxth	r3, r3
 800ffac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ffb0:	4572      	cmp	r2, lr
 800ffb2:	f849 3b04 	str.w	r3, [r9], #4
 800ffb6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ffba:	d8e2      	bhi.n	800ff82 <__multiply+0xb2>
 800ffbc:	9b01      	ldr	r3, [sp, #4]
 800ffbe:	f845 c003 	str.w	ip, [r5, r3]
 800ffc2:	9b03      	ldr	r3, [sp, #12]
 800ffc4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ffc8:	3104      	adds	r1, #4
 800ffca:	f1b9 0f00 	cmp.w	r9, #0
 800ffce:	d021      	beq.n	8010014 <__multiply+0x144>
 800ffd0:	682b      	ldr	r3, [r5, #0]
 800ffd2:	f104 0c14 	add.w	ip, r4, #20
 800ffd6:	46ae      	mov	lr, r5
 800ffd8:	f04f 0a00 	mov.w	sl, #0
 800ffdc:	f8bc b000 	ldrh.w	fp, [ip]
 800ffe0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ffe4:	fb09 770b 	mla	r7, r9, fp, r7
 800ffe8:	4457      	add	r7, sl
 800ffea:	b29b      	uxth	r3, r3
 800ffec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fff0:	f84e 3b04 	str.w	r3, [lr], #4
 800fff4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fff8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fffc:	f8be 3000 	ldrh.w	r3, [lr]
 8010000:	fb09 330a 	mla	r3, r9, sl, r3
 8010004:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010008:	4562      	cmp	r2, ip
 801000a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801000e:	d8e5      	bhi.n	800ffdc <__multiply+0x10c>
 8010010:	9f01      	ldr	r7, [sp, #4]
 8010012:	51eb      	str	r3, [r5, r7]
 8010014:	3504      	adds	r5, #4
 8010016:	e799      	b.n	800ff4c <__multiply+0x7c>
 8010018:	3e01      	subs	r6, #1
 801001a:	e79b      	b.n	800ff54 <__multiply+0x84>
 801001c:	08011078 	.word	0x08011078
 8010020:	08011089 	.word	0x08011089

08010024 <__pow5mult>:
 8010024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010028:	4615      	mov	r5, r2
 801002a:	f012 0203 	ands.w	r2, r2, #3
 801002e:	4607      	mov	r7, r0
 8010030:	460e      	mov	r6, r1
 8010032:	d007      	beq.n	8010044 <__pow5mult+0x20>
 8010034:	4c25      	ldr	r4, [pc, #148]	@ (80100cc <__pow5mult+0xa8>)
 8010036:	3a01      	subs	r2, #1
 8010038:	2300      	movs	r3, #0
 801003a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801003e:	f7ff fe9f 	bl	800fd80 <__multadd>
 8010042:	4606      	mov	r6, r0
 8010044:	10ad      	asrs	r5, r5, #2
 8010046:	d03d      	beq.n	80100c4 <__pow5mult+0xa0>
 8010048:	69fc      	ldr	r4, [r7, #28]
 801004a:	b97c      	cbnz	r4, 801006c <__pow5mult+0x48>
 801004c:	2010      	movs	r0, #16
 801004e:	f7fe f879 	bl	800e144 <malloc>
 8010052:	4602      	mov	r2, r0
 8010054:	61f8      	str	r0, [r7, #28]
 8010056:	b928      	cbnz	r0, 8010064 <__pow5mult+0x40>
 8010058:	4b1d      	ldr	r3, [pc, #116]	@ (80100d0 <__pow5mult+0xac>)
 801005a:	481e      	ldr	r0, [pc, #120]	@ (80100d4 <__pow5mult+0xb0>)
 801005c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010060:	f000 fbcc 	bl	80107fc <__assert_func>
 8010064:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010068:	6004      	str	r4, [r0, #0]
 801006a:	60c4      	str	r4, [r0, #12]
 801006c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010070:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010074:	b94c      	cbnz	r4, 801008a <__pow5mult+0x66>
 8010076:	f240 2171 	movw	r1, #625	@ 0x271
 801007a:	4638      	mov	r0, r7
 801007c:	f7ff ff12 	bl	800fea4 <__i2b>
 8010080:	2300      	movs	r3, #0
 8010082:	f8c8 0008 	str.w	r0, [r8, #8]
 8010086:	4604      	mov	r4, r0
 8010088:	6003      	str	r3, [r0, #0]
 801008a:	f04f 0900 	mov.w	r9, #0
 801008e:	07eb      	lsls	r3, r5, #31
 8010090:	d50a      	bpl.n	80100a8 <__pow5mult+0x84>
 8010092:	4631      	mov	r1, r6
 8010094:	4622      	mov	r2, r4
 8010096:	4638      	mov	r0, r7
 8010098:	f7ff ff1a 	bl	800fed0 <__multiply>
 801009c:	4631      	mov	r1, r6
 801009e:	4680      	mov	r8, r0
 80100a0:	4638      	mov	r0, r7
 80100a2:	f7ff fe4b 	bl	800fd3c <_Bfree>
 80100a6:	4646      	mov	r6, r8
 80100a8:	106d      	asrs	r5, r5, #1
 80100aa:	d00b      	beq.n	80100c4 <__pow5mult+0xa0>
 80100ac:	6820      	ldr	r0, [r4, #0]
 80100ae:	b938      	cbnz	r0, 80100c0 <__pow5mult+0x9c>
 80100b0:	4622      	mov	r2, r4
 80100b2:	4621      	mov	r1, r4
 80100b4:	4638      	mov	r0, r7
 80100b6:	f7ff ff0b 	bl	800fed0 <__multiply>
 80100ba:	6020      	str	r0, [r4, #0]
 80100bc:	f8c0 9000 	str.w	r9, [r0]
 80100c0:	4604      	mov	r4, r0
 80100c2:	e7e4      	b.n	801008e <__pow5mult+0x6a>
 80100c4:	4630      	mov	r0, r6
 80100c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100ca:	bf00      	nop
 80100cc:	080110e4 	.word	0x080110e4
 80100d0:	08011009 	.word	0x08011009
 80100d4:	08011089 	.word	0x08011089

080100d8 <__lshift>:
 80100d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100dc:	460c      	mov	r4, r1
 80100de:	6849      	ldr	r1, [r1, #4]
 80100e0:	6923      	ldr	r3, [r4, #16]
 80100e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80100e6:	68a3      	ldr	r3, [r4, #8]
 80100e8:	4607      	mov	r7, r0
 80100ea:	4691      	mov	r9, r2
 80100ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80100f0:	f108 0601 	add.w	r6, r8, #1
 80100f4:	42b3      	cmp	r3, r6
 80100f6:	db0b      	blt.n	8010110 <__lshift+0x38>
 80100f8:	4638      	mov	r0, r7
 80100fa:	f7ff fddf 	bl	800fcbc <_Balloc>
 80100fe:	4605      	mov	r5, r0
 8010100:	b948      	cbnz	r0, 8010116 <__lshift+0x3e>
 8010102:	4602      	mov	r2, r0
 8010104:	4b28      	ldr	r3, [pc, #160]	@ (80101a8 <__lshift+0xd0>)
 8010106:	4829      	ldr	r0, [pc, #164]	@ (80101ac <__lshift+0xd4>)
 8010108:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801010c:	f000 fb76 	bl	80107fc <__assert_func>
 8010110:	3101      	adds	r1, #1
 8010112:	005b      	lsls	r3, r3, #1
 8010114:	e7ee      	b.n	80100f4 <__lshift+0x1c>
 8010116:	2300      	movs	r3, #0
 8010118:	f100 0114 	add.w	r1, r0, #20
 801011c:	f100 0210 	add.w	r2, r0, #16
 8010120:	4618      	mov	r0, r3
 8010122:	4553      	cmp	r3, sl
 8010124:	db33      	blt.n	801018e <__lshift+0xb6>
 8010126:	6920      	ldr	r0, [r4, #16]
 8010128:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801012c:	f104 0314 	add.w	r3, r4, #20
 8010130:	f019 091f 	ands.w	r9, r9, #31
 8010134:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010138:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801013c:	d02b      	beq.n	8010196 <__lshift+0xbe>
 801013e:	f1c9 0e20 	rsb	lr, r9, #32
 8010142:	468a      	mov	sl, r1
 8010144:	2200      	movs	r2, #0
 8010146:	6818      	ldr	r0, [r3, #0]
 8010148:	fa00 f009 	lsl.w	r0, r0, r9
 801014c:	4310      	orrs	r0, r2
 801014e:	f84a 0b04 	str.w	r0, [sl], #4
 8010152:	f853 2b04 	ldr.w	r2, [r3], #4
 8010156:	459c      	cmp	ip, r3
 8010158:	fa22 f20e 	lsr.w	r2, r2, lr
 801015c:	d8f3      	bhi.n	8010146 <__lshift+0x6e>
 801015e:	ebac 0304 	sub.w	r3, ip, r4
 8010162:	3b15      	subs	r3, #21
 8010164:	f023 0303 	bic.w	r3, r3, #3
 8010168:	3304      	adds	r3, #4
 801016a:	f104 0015 	add.w	r0, r4, #21
 801016e:	4584      	cmp	ip, r0
 8010170:	bf38      	it	cc
 8010172:	2304      	movcc	r3, #4
 8010174:	50ca      	str	r2, [r1, r3]
 8010176:	b10a      	cbz	r2, 801017c <__lshift+0xa4>
 8010178:	f108 0602 	add.w	r6, r8, #2
 801017c:	3e01      	subs	r6, #1
 801017e:	4638      	mov	r0, r7
 8010180:	612e      	str	r6, [r5, #16]
 8010182:	4621      	mov	r1, r4
 8010184:	f7ff fdda 	bl	800fd3c <_Bfree>
 8010188:	4628      	mov	r0, r5
 801018a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801018e:	f842 0f04 	str.w	r0, [r2, #4]!
 8010192:	3301      	adds	r3, #1
 8010194:	e7c5      	b.n	8010122 <__lshift+0x4a>
 8010196:	3904      	subs	r1, #4
 8010198:	f853 2b04 	ldr.w	r2, [r3], #4
 801019c:	f841 2f04 	str.w	r2, [r1, #4]!
 80101a0:	459c      	cmp	ip, r3
 80101a2:	d8f9      	bhi.n	8010198 <__lshift+0xc0>
 80101a4:	e7ea      	b.n	801017c <__lshift+0xa4>
 80101a6:	bf00      	nop
 80101a8:	08011078 	.word	0x08011078
 80101ac:	08011089 	.word	0x08011089

080101b0 <__mcmp>:
 80101b0:	690a      	ldr	r2, [r1, #16]
 80101b2:	4603      	mov	r3, r0
 80101b4:	6900      	ldr	r0, [r0, #16]
 80101b6:	1a80      	subs	r0, r0, r2
 80101b8:	b530      	push	{r4, r5, lr}
 80101ba:	d10e      	bne.n	80101da <__mcmp+0x2a>
 80101bc:	3314      	adds	r3, #20
 80101be:	3114      	adds	r1, #20
 80101c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80101c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80101c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80101cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80101d0:	4295      	cmp	r5, r2
 80101d2:	d003      	beq.n	80101dc <__mcmp+0x2c>
 80101d4:	d205      	bcs.n	80101e2 <__mcmp+0x32>
 80101d6:	f04f 30ff 	mov.w	r0, #4294967295
 80101da:	bd30      	pop	{r4, r5, pc}
 80101dc:	42a3      	cmp	r3, r4
 80101de:	d3f3      	bcc.n	80101c8 <__mcmp+0x18>
 80101e0:	e7fb      	b.n	80101da <__mcmp+0x2a>
 80101e2:	2001      	movs	r0, #1
 80101e4:	e7f9      	b.n	80101da <__mcmp+0x2a>
	...

080101e8 <__mdiff>:
 80101e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101ec:	4689      	mov	r9, r1
 80101ee:	4606      	mov	r6, r0
 80101f0:	4611      	mov	r1, r2
 80101f2:	4648      	mov	r0, r9
 80101f4:	4614      	mov	r4, r2
 80101f6:	f7ff ffdb 	bl	80101b0 <__mcmp>
 80101fa:	1e05      	subs	r5, r0, #0
 80101fc:	d112      	bne.n	8010224 <__mdiff+0x3c>
 80101fe:	4629      	mov	r1, r5
 8010200:	4630      	mov	r0, r6
 8010202:	f7ff fd5b 	bl	800fcbc <_Balloc>
 8010206:	4602      	mov	r2, r0
 8010208:	b928      	cbnz	r0, 8010216 <__mdiff+0x2e>
 801020a:	4b3f      	ldr	r3, [pc, #252]	@ (8010308 <__mdiff+0x120>)
 801020c:	f240 2137 	movw	r1, #567	@ 0x237
 8010210:	483e      	ldr	r0, [pc, #248]	@ (801030c <__mdiff+0x124>)
 8010212:	f000 faf3 	bl	80107fc <__assert_func>
 8010216:	2301      	movs	r3, #1
 8010218:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801021c:	4610      	mov	r0, r2
 801021e:	b003      	add	sp, #12
 8010220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010224:	bfbc      	itt	lt
 8010226:	464b      	movlt	r3, r9
 8010228:	46a1      	movlt	r9, r4
 801022a:	4630      	mov	r0, r6
 801022c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010230:	bfba      	itte	lt
 8010232:	461c      	movlt	r4, r3
 8010234:	2501      	movlt	r5, #1
 8010236:	2500      	movge	r5, #0
 8010238:	f7ff fd40 	bl	800fcbc <_Balloc>
 801023c:	4602      	mov	r2, r0
 801023e:	b918      	cbnz	r0, 8010248 <__mdiff+0x60>
 8010240:	4b31      	ldr	r3, [pc, #196]	@ (8010308 <__mdiff+0x120>)
 8010242:	f240 2145 	movw	r1, #581	@ 0x245
 8010246:	e7e3      	b.n	8010210 <__mdiff+0x28>
 8010248:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801024c:	6926      	ldr	r6, [r4, #16]
 801024e:	60c5      	str	r5, [r0, #12]
 8010250:	f109 0310 	add.w	r3, r9, #16
 8010254:	f109 0514 	add.w	r5, r9, #20
 8010258:	f104 0e14 	add.w	lr, r4, #20
 801025c:	f100 0b14 	add.w	fp, r0, #20
 8010260:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010264:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010268:	9301      	str	r3, [sp, #4]
 801026a:	46d9      	mov	r9, fp
 801026c:	f04f 0c00 	mov.w	ip, #0
 8010270:	9b01      	ldr	r3, [sp, #4]
 8010272:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010276:	f853 af04 	ldr.w	sl, [r3, #4]!
 801027a:	9301      	str	r3, [sp, #4]
 801027c:	fa1f f38a 	uxth.w	r3, sl
 8010280:	4619      	mov	r1, r3
 8010282:	b283      	uxth	r3, r0
 8010284:	1acb      	subs	r3, r1, r3
 8010286:	0c00      	lsrs	r0, r0, #16
 8010288:	4463      	add	r3, ip
 801028a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801028e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010292:	b29b      	uxth	r3, r3
 8010294:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010298:	4576      	cmp	r6, lr
 801029a:	f849 3b04 	str.w	r3, [r9], #4
 801029e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80102a2:	d8e5      	bhi.n	8010270 <__mdiff+0x88>
 80102a4:	1b33      	subs	r3, r6, r4
 80102a6:	3b15      	subs	r3, #21
 80102a8:	f023 0303 	bic.w	r3, r3, #3
 80102ac:	3415      	adds	r4, #21
 80102ae:	3304      	adds	r3, #4
 80102b0:	42a6      	cmp	r6, r4
 80102b2:	bf38      	it	cc
 80102b4:	2304      	movcc	r3, #4
 80102b6:	441d      	add	r5, r3
 80102b8:	445b      	add	r3, fp
 80102ba:	461e      	mov	r6, r3
 80102bc:	462c      	mov	r4, r5
 80102be:	4544      	cmp	r4, r8
 80102c0:	d30e      	bcc.n	80102e0 <__mdiff+0xf8>
 80102c2:	f108 0103 	add.w	r1, r8, #3
 80102c6:	1b49      	subs	r1, r1, r5
 80102c8:	f021 0103 	bic.w	r1, r1, #3
 80102cc:	3d03      	subs	r5, #3
 80102ce:	45a8      	cmp	r8, r5
 80102d0:	bf38      	it	cc
 80102d2:	2100      	movcc	r1, #0
 80102d4:	440b      	add	r3, r1
 80102d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80102da:	b191      	cbz	r1, 8010302 <__mdiff+0x11a>
 80102dc:	6117      	str	r7, [r2, #16]
 80102de:	e79d      	b.n	801021c <__mdiff+0x34>
 80102e0:	f854 1b04 	ldr.w	r1, [r4], #4
 80102e4:	46e6      	mov	lr, ip
 80102e6:	0c08      	lsrs	r0, r1, #16
 80102e8:	fa1c fc81 	uxtah	ip, ip, r1
 80102ec:	4471      	add	r1, lr
 80102ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80102f2:	b289      	uxth	r1, r1
 80102f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80102f8:	f846 1b04 	str.w	r1, [r6], #4
 80102fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010300:	e7dd      	b.n	80102be <__mdiff+0xd6>
 8010302:	3f01      	subs	r7, #1
 8010304:	e7e7      	b.n	80102d6 <__mdiff+0xee>
 8010306:	bf00      	nop
 8010308:	08011078 	.word	0x08011078
 801030c:	08011089 	.word	0x08011089

08010310 <__d2b>:
 8010310:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010314:	460f      	mov	r7, r1
 8010316:	2101      	movs	r1, #1
 8010318:	ec59 8b10 	vmov	r8, r9, d0
 801031c:	4616      	mov	r6, r2
 801031e:	f7ff fccd 	bl	800fcbc <_Balloc>
 8010322:	4604      	mov	r4, r0
 8010324:	b930      	cbnz	r0, 8010334 <__d2b+0x24>
 8010326:	4602      	mov	r2, r0
 8010328:	4b23      	ldr	r3, [pc, #140]	@ (80103b8 <__d2b+0xa8>)
 801032a:	4824      	ldr	r0, [pc, #144]	@ (80103bc <__d2b+0xac>)
 801032c:	f240 310f 	movw	r1, #783	@ 0x30f
 8010330:	f000 fa64 	bl	80107fc <__assert_func>
 8010334:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010338:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801033c:	b10d      	cbz	r5, 8010342 <__d2b+0x32>
 801033e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010342:	9301      	str	r3, [sp, #4]
 8010344:	f1b8 0300 	subs.w	r3, r8, #0
 8010348:	d023      	beq.n	8010392 <__d2b+0x82>
 801034a:	4668      	mov	r0, sp
 801034c:	9300      	str	r3, [sp, #0]
 801034e:	f7ff fd7c 	bl	800fe4a <__lo0bits>
 8010352:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010356:	b1d0      	cbz	r0, 801038e <__d2b+0x7e>
 8010358:	f1c0 0320 	rsb	r3, r0, #32
 801035c:	fa02 f303 	lsl.w	r3, r2, r3
 8010360:	430b      	orrs	r3, r1
 8010362:	40c2      	lsrs	r2, r0
 8010364:	6163      	str	r3, [r4, #20]
 8010366:	9201      	str	r2, [sp, #4]
 8010368:	9b01      	ldr	r3, [sp, #4]
 801036a:	61a3      	str	r3, [r4, #24]
 801036c:	2b00      	cmp	r3, #0
 801036e:	bf0c      	ite	eq
 8010370:	2201      	moveq	r2, #1
 8010372:	2202      	movne	r2, #2
 8010374:	6122      	str	r2, [r4, #16]
 8010376:	b1a5      	cbz	r5, 80103a2 <__d2b+0x92>
 8010378:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801037c:	4405      	add	r5, r0
 801037e:	603d      	str	r5, [r7, #0]
 8010380:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010384:	6030      	str	r0, [r6, #0]
 8010386:	4620      	mov	r0, r4
 8010388:	b003      	add	sp, #12
 801038a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801038e:	6161      	str	r1, [r4, #20]
 8010390:	e7ea      	b.n	8010368 <__d2b+0x58>
 8010392:	a801      	add	r0, sp, #4
 8010394:	f7ff fd59 	bl	800fe4a <__lo0bits>
 8010398:	9b01      	ldr	r3, [sp, #4]
 801039a:	6163      	str	r3, [r4, #20]
 801039c:	3020      	adds	r0, #32
 801039e:	2201      	movs	r2, #1
 80103a0:	e7e8      	b.n	8010374 <__d2b+0x64>
 80103a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80103a6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80103aa:	6038      	str	r0, [r7, #0]
 80103ac:	6918      	ldr	r0, [r3, #16]
 80103ae:	f7ff fd2d 	bl	800fe0c <__hi0bits>
 80103b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80103b6:	e7e5      	b.n	8010384 <__d2b+0x74>
 80103b8:	08011078 	.word	0x08011078
 80103bc:	08011089 	.word	0x08011089

080103c0 <__ssputs_r>:
 80103c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103c4:	688e      	ldr	r6, [r1, #8]
 80103c6:	461f      	mov	r7, r3
 80103c8:	42be      	cmp	r6, r7
 80103ca:	680b      	ldr	r3, [r1, #0]
 80103cc:	4682      	mov	sl, r0
 80103ce:	460c      	mov	r4, r1
 80103d0:	4690      	mov	r8, r2
 80103d2:	d82d      	bhi.n	8010430 <__ssputs_r+0x70>
 80103d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80103d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80103dc:	d026      	beq.n	801042c <__ssputs_r+0x6c>
 80103de:	6965      	ldr	r5, [r4, #20]
 80103e0:	6909      	ldr	r1, [r1, #16]
 80103e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80103e6:	eba3 0901 	sub.w	r9, r3, r1
 80103ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80103ee:	1c7b      	adds	r3, r7, #1
 80103f0:	444b      	add	r3, r9
 80103f2:	106d      	asrs	r5, r5, #1
 80103f4:	429d      	cmp	r5, r3
 80103f6:	bf38      	it	cc
 80103f8:	461d      	movcc	r5, r3
 80103fa:	0553      	lsls	r3, r2, #21
 80103fc:	d527      	bpl.n	801044e <__ssputs_r+0x8e>
 80103fe:	4629      	mov	r1, r5
 8010400:	f7fd fed2 	bl	800e1a8 <_malloc_r>
 8010404:	4606      	mov	r6, r0
 8010406:	b360      	cbz	r0, 8010462 <__ssputs_r+0xa2>
 8010408:	6921      	ldr	r1, [r4, #16]
 801040a:	464a      	mov	r2, r9
 801040c:	f7fe fdb1 	bl	800ef72 <memcpy>
 8010410:	89a3      	ldrh	r3, [r4, #12]
 8010412:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801041a:	81a3      	strh	r3, [r4, #12]
 801041c:	6126      	str	r6, [r4, #16]
 801041e:	6165      	str	r5, [r4, #20]
 8010420:	444e      	add	r6, r9
 8010422:	eba5 0509 	sub.w	r5, r5, r9
 8010426:	6026      	str	r6, [r4, #0]
 8010428:	60a5      	str	r5, [r4, #8]
 801042a:	463e      	mov	r6, r7
 801042c:	42be      	cmp	r6, r7
 801042e:	d900      	bls.n	8010432 <__ssputs_r+0x72>
 8010430:	463e      	mov	r6, r7
 8010432:	6820      	ldr	r0, [r4, #0]
 8010434:	4632      	mov	r2, r6
 8010436:	4641      	mov	r1, r8
 8010438:	f000 f9c6 	bl	80107c8 <memmove>
 801043c:	68a3      	ldr	r3, [r4, #8]
 801043e:	1b9b      	subs	r3, r3, r6
 8010440:	60a3      	str	r3, [r4, #8]
 8010442:	6823      	ldr	r3, [r4, #0]
 8010444:	4433      	add	r3, r6
 8010446:	6023      	str	r3, [r4, #0]
 8010448:	2000      	movs	r0, #0
 801044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801044e:	462a      	mov	r2, r5
 8010450:	f000 fa18 	bl	8010884 <_realloc_r>
 8010454:	4606      	mov	r6, r0
 8010456:	2800      	cmp	r0, #0
 8010458:	d1e0      	bne.n	801041c <__ssputs_r+0x5c>
 801045a:	6921      	ldr	r1, [r4, #16]
 801045c:	4650      	mov	r0, sl
 801045e:	f7ff fbe3 	bl	800fc28 <_free_r>
 8010462:	230c      	movs	r3, #12
 8010464:	f8ca 3000 	str.w	r3, [sl]
 8010468:	89a3      	ldrh	r3, [r4, #12]
 801046a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801046e:	81a3      	strh	r3, [r4, #12]
 8010470:	f04f 30ff 	mov.w	r0, #4294967295
 8010474:	e7e9      	b.n	801044a <__ssputs_r+0x8a>
	...

08010478 <_svfiprintf_r>:
 8010478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801047c:	4698      	mov	r8, r3
 801047e:	898b      	ldrh	r3, [r1, #12]
 8010480:	061b      	lsls	r3, r3, #24
 8010482:	b09d      	sub	sp, #116	@ 0x74
 8010484:	4607      	mov	r7, r0
 8010486:	460d      	mov	r5, r1
 8010488:	4614      	mov	r4, r2
 801048a:	d510      	bpl.n	80104ae <_svfiprintf_r+0x36>
 801048c:	690b      	ldr	r3, [r1, #16]
 801048e:	b973      	cbnz	r3, 80104ae <_svfiprintf_r+0x36>
 8010490:	2140      	movs	r1, #64	@ 0x40
 8010492:	f7fd fe89 	bl	800e1a8 <_malloc_r>
 8010496:	6028      	str	r0, [r5, #0]
 8010498:	6128      	str	r0, [r5, #16]
 801049a:	b930      	cbnz	r0, 80104aa <_svfiprintf_r+0x32>
 801049c:	230c      	movs	r3, #12
 801049e:	603b      	str	r3, [r7, #0]
 80104a0:	f04f 30ff 	mov.w	r0, #4294967295
 80104a4:	b01d      	add	sp, #116	@ 0x74
 80104a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104aa:	2340      	movs	r3, #64	@ 0x40
 80104ac:	616b      	str	r3, [r5, #20]
 80104ae:	2300      	movs	r3, #0
 80104b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80104b2:	2320      	movs	r3, #32
 80104b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80104b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80104bc:	2330      	movs	r3, #48	@ 0x30
 80104be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801065c <_svfiprintf_r+0x1e4>
 80104c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80104c6:	f04f 0901 	mov.w	r9, #1
 80104ca:	4623      	mov	r3, r4
 80104cc:	469a      	mov	sl, r3
 80104ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104d2:	b10a      	cbz	r2, 80104d8 <_svfiprintf_r+0x60>
 80104d4:	2a25      	cmp	r2, #37	@ 0x25
 80104d6:	d1f9      	bne.n	80104cc <_svfiprintf_r+0x54>
 80104d8:	ebba 0b04 	subs.w	fp, sl, r4
 80104dc:	d00b      	beq.n	80104f6 <_svfiprintf_r+0x7e>
 80104de:	465b      	mov	r3, fp
 80104e0:	4622      	mov	r2, r4
 80104e2:	4629      	mov	r1, r5
 80104e4:	4638      	mov	r0, r7
 80104e6:	f7ff ff6b 	bl	80103c0 <__ssputs_r>
 80104ea:	3001      	adds	r0, #1
 80104ec:	f000 80a7 	beq.w	801063e <_svfiprintf_r+0x1c6>
 80104f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80104f2:	445a      	add	r2, fp
 80104f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80104f6:	f89a 3000 	ldrb.w	r3, [sl]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	f000 809f 	beq.w	801063e <_svfiprintf_r+0x1c6>
 8010500:	2300      	movs	r3, #0
 8010502:	f04f 32ff 	mov.w	r2, #4294967295
 8010506:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801050a:	f10a 0a01 	add.w	sl, sl, #1
 801050e:	9304      	str	r3, [sp, #16]
 8010510:	9307      	str	r3, [sp, #28]
 8010512:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010516:	931a      	str	r3, [sp, #104]	@ 0x68
 8010518:	4654      	mov	r4, sl
 801051a:	2205      	movs	r2, #5
 801051c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010520:	484e      	ldr	r0, [pc, #312]	@ (801065c <_svfiprintf_r+0x1e4>)
 8010522:	f7ef fe5d 	bl	80001e0 <memchr>
 8010526:	9a04      	ldr	r2, [sp, #16]
 8010528:	b9d8      	cbnz	r0, 8010562 <_svfiprintf_r+0xea>
 801052a:	06d0      	lsls	r0, r2, #27
 801052c:	bf44      	itt	mi
 801052e:	2320      	movmi	r3, #32
 8010530:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010534:	0711      	lsls	r1, r2, #28
 8010536:	bf44      	itt	mi
 8010538:	232b      	movmi	r3, #43	@ 0x2b
 801053a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801053e:	f89a 3000 	ldrb.w	r3, [sl]
 8010542:	2b2a      	cmp	r3, #42	@ 0x2a
 8010544:	d015      	beq.n	8010572 <_svfiprintf_r+0xfa>
 8010546:	9a07      	ldr	r2, [sp, #28]
 8010548:	4654      	mov	r4, sl
 801054a:	2000      	movs	r0, #0
 801054c:	f04f 0c0a 	mov.w	ip, #10
 8010550:	4621      	mov	r1, r4
 8010552:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010556:	3b30      	subs	r3, #48	@ 0x30
 8010558:	2b09      	cmp	r3, #9
 801055a:	d94b      	bls.n	80105f4 <_svfiprintf_r+0x17c>
 801055c:	b1b0      	cbz	r0, 801058c <_svfiprintf_r+0x114>
 801055e:	9207      	str	r2, [sp, #28]
 8010560:	e014      	b.n	801058c <_svfiprintf_r+0x114>
 8010562:	eba0 0308 	sub.w	r3, r0, r8
 8010566:	fa09 f303 	lsl.w	r3, r9, r3
 801056a:	4313      	orrs	r3, r2
 801056c:	9304      	str	r3, [sp, #16]
 801056e:	46a2      	mov	sl, r4
 8010570:	e7d2      	b.n	8010518 <_svfiprintf_r+0xa0>
 8010572:	9b03      	ldr	r3, [sp, #12]
 8010574:	1d19      	adds	r1, r3, #4
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	9103      	str	r1, [sp, #12]
 801057a:	2b00      	cmp	r3, #0
 801057c:	bfbb      	ittet	lt
 801057e:	425b      	neglt	r3, r3
 8010580:	f042 0202 	orrlt.w	r2, r2, #2
 8010584:	9307      	strge	r3, [sp, #28]
 8010586:	9307      	strlt	r3, [sp, #28]
 8010588:	bfb8      	it	lt
 801058a:	9204      	strlt	r2, [sp, #16]
 801058c:	7823      	ldrb	r3, [r4, #0]
 801058e:	2b2e      	cmp	r3, #46	@ 0x2e
 8010590:	d10a      	bne.n	80105a8 <_svfiprintf_r+0x130>
 8010592:	7863      	ldrb	r3, [r4, #1]
 8010594:	2b2a      	cmp	r3, #42	@ 0x2a
 8010596:	d132      	bne.n	80105fe <_svfiprintf_r+0x186>
 8010598:	9b03      	ldr	r3, [sp, #12]
 801059a:	1d1a      	adds	r2, r3, #4
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	9203      	str	r2, [sp, #12]
 80105a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80105a4:	3402      	adds	r4, #2
 80105a6:	9305      	str	r3, [sp, #20]
 80105a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801066c <_svfiprintf_r+0x1f4>
 80105ac:	7821      	ldrb	r1, [r4, #0]
 80105ae:	2203      	movs	r2, #3
 80105b0:	4650      	mov	r0, sl
 80105b2:	f7ef fe15 	bl	80001e0 <memchr>
 80105b6:	b138      	cbz	r0, 80105c8 <_svfiprintf_r+0x150>
 80105b8:	9b04      	ldr	r3, [sp, #16]
 80105ba:	eba0 000a 	sub.w	r0, r0, sl
 80105be:	2240      	movs	r2, #64	@ 0x40
 80105c0:	4082      	lsls	r2, r0
 80105c2:	4313      	orrs	r3, r2
 80105c4:	3401      	adds	r4, #1
 80105c6:	9304      	str	r3, [sp, #16]
 80105c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105cc:	4824      	ldr	r0, [pc, #144]	@ (8010660 <_svfiprintf_r+0x1e8>)
 80105ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80105d2:	2206      	movs	r2, #6
 80105d4:	f7ef fe04 	bl	80001e0 <memchr>
 80105d8:	2800      	cmp	r0, #0
 80105da:	d036      	beq.n	801064a <_svfiprintf_r+0x1d2>
 80105dc:	4b21      	ldr	r3, [pc, #132]	@ (8010664 <_svfiprintf_r+0x1ec>)
 80105de:	bb1b      	cbnz	r3, 8010628 <_svfiprintf_r+0x1b0>
 80105e0:	9b03      	ldr	r3, [sp, #12]
 80105e2:	3307      	adds	r3, #7
 80105e4:	f023 0307 	bic.w	r3, r3, #7
 80105e8:	3308      	adds	r3, #8
 80105ea:	9303      	str	r3, [sp, #12]
 80105ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105ee:	4433      	add	r3, r6
 80105f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80105f2:	e76a      	b.n	80104ca <_svfiprintf_r+0x52>
 80105f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80105f8:	460c      	mov	r4, r1
 80105fa:	2001      	movs	r0, #1
 80105fc:	e7a8      	b.n	8010550 <_svfiprintf_r+0xd8>
 80105fe:	2300      	movs	r3, #0
 8010600:	3401      	adds	r4, #1
 8010602:	9305      	str	r3, [sp, #20]
 8010604:	4619      	mov	r1, r3
 8010606:	f04f 0c0a 	mov.w	ip, #10
 801060a:	4620      	mov	r0, r4
 801060c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010610:	3a30      	subs	r2, #48	@ 0x30
 8010612:	2a09      	cmp	r2, #9
 8010614:	d903      	bls.n	801061e <_svfiprintf_r+0x1a6>
 8010616:	2b00      	cmp	r3, #0
 8010618:	d0c6      	beq.n	80105a8 <_svfiprintf_r+0x130>
 801061a:	9105      	str	r1, [sp, #20]
 801061c:	e7c4      	b.n	80105a8 <_svfiprintf_r+0x130>
 801061e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010622:	4604      	mov	r4, r0
 8010624:	2301      	movs	r3, #1
 8010626:	e7f0      	b.n	801060a <_svfiprintf_r+0x192>
 8010628:	ab03      	add	r3, sp, #12
 801062a:	9300      	str	r3, [sp, #0]
 801062c:	462a      	mov	r2, r5
 801062e:	4b0e      	ldr	r3, [pc, #56]	@ (8010668 <_svfiprintf_r+0x1f0>)
 8010630:	a904      	add	r1, sp, #16
 8010632:	4638      	mov	r0, r7
 8010634:	f7fd fee4 	bl	800e400 <_printf_float>
 8010638:	1c42      	adds	r2, r0, #1
 801063a:	4606      	mov	r6, r0
 801063c:	d1d6      	bne.n	80105ec <_svfiprintf_r+0x174>
 801063e:	89ab      	ldrh	r3, [r5, #12]
 8010640:	065b      	lsls	r3, r3, #25
 8010642:	f53f af2d 	bmi.w	80104a0 <_svfiprintf_r+0x28>
 8010646:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010648:	e72c      	b.n	80104a4 <_svfiprintf_r+0x2c>
 801064a:	ab03      	add	r3, sp, #12
 801064c:	9300      	str	r3, [sp, #0]
 801064e:	462a      	mov	r2, r5
 8010650:	4b05      	ldr	r3, [pc, #20]	@ (8010668 <_svfiprintf_r+0x1f0>)
 8010652:	a904      	add	r1, sp, #16
 8010654:	4638      	mov	r0, r7
 8010656:	f7fe f96b 	bl	800e930 <_printf_i>
 801065a:	e7ed      	b.n	8010638 <_svfiprintf_r+0x1c0>
 801065c:	080111e0 	.word	0x080111e0
 8010660:	080111ea 	.word	0x080111ea
 8010664:	0800e401 	.word	0x0800e401
 8010668:	080103c1 	.word	0x080103c1
 801066c:	080111e6 	.word	0x080111e6

08010670 <__sflush_r>:
 8010670:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010678:	0716      	lsls	r6, r2, #28
 801067a:	4605      	mov	r5, r0
 801067c:	460c      	mov	r4, r1
 801067e:	d454      	bmi.n	801072a <__sflush_r+0xba>
 8010680:	684b      	ldr	r3, [r1, #4]
 8010682:	2b00      	cmp	r3, #0
 8010684:	dc02      	bgt.n	801068c <__sflush_r+0x1c>
 8010686:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010688:	2b00      	cmp	r3, #0
 801068a:	dd48      	ble.n	801071e <__sflush_r+0xae>
 801068c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801068e:	2e00      	cmp	r6, #0
 8010690:	d045      	beq.n	801071e <__sflush_r+0xae>
 8010692:	2300      	movs	r3, #0
 8010694:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010698:	682f      	ldr	r7, [r5, #0]
 801069a:	6a21      	ldr	r1, [r4, #32]
 801069c:	602b      	str	r3, [r5, #0]
 801069e:	d030      	beq.n	8010702 <__sflush_r+0x92>
 80106a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80106a2:	89a3      	ldrh	r3, [r4, #12]
 80106a4:	0759      	lsls	r1, r3, #29
 80106a6:	d505      	bpl.n	80106b4 <__sflush_r+0x44>
 80106a8:	6863      	ldr	r3, [r4, #4]
 80106aa:	1ad2      	subs	r2, r2, r3
 80106ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80106ae:	b10b      	cbz	r3, 80106b4 <__sflush_r+0x44>
 80106b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80106b2:	1ad2      	subs	r2, r2, r3
 80106b4:	2300      	movs	r3, #0
 80106b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80106b8:	6a21      	ldr	r1, [r4, #32]
 80106ba:	4628      	mov	r0, r5
 80106bc:	47b0      	blx	r6
 80106be:	1c43      	adds	r3, r0, #1
 80106c0:	89a3      	ldrh	r3, [r4, #12]
 80106c2:	d106      	bne.n	80106d2 <__sflush_r+0x62>
 80106c4:	6829      	ldr	r1, [r5, #0]
 80106c6:	291d      	cmp	r1, #29
 80106c8:	d82b      	bhi.n	8010722 <__sflush_r+0xb2>
 80106ca:	4a2a      	ldr	r2, [pc, #168]	@ (8010774 <__sflush_r+0x104>)
 80106cc:	410a      	asrs	r2, r1
 80106ce:	07d6      	lsls	r6, r2, #31
 80106d0:	d427      	bmi.n	8010722 <__sflush_r+0xb2>
 80106d2:	2200      	movs	r2, #0
 80106d4:	6062      	str	r2, [r4, #4]
 80106d6:	04d9      	lsls	r1, r3, #19
 80106d8:	6922      	ldr	r2, [r4, #16]
 80106da:	6022      	str	r2, [r4, #0]
 80106dc:	d504      	bpl.n	80106e8 <__sflush_r+0x78>
 80106de:	1c42      	adds	r2, r0, #1
 80106e0:	d101      	bne.n	80106e6 <__sflush_r+0x76>
 80106e2:	682b      	ldr	r3, [r5, #0]
 80106e4:	b903      	cbnz	r3, 80106e8 <__sflush_r+0x78>
 80106e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80106e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80106ea:	602f      	str	r7, [r5, #0]
 80106ec:	b1b9      	cbz	r1, 801071e <__sflush_r+0xae>
 80106ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80106f2:	4299      	cmp	r1, r3
 80106f4:	d002      	beq.n	80106fc <__sflush_r+0x8c>
 80106f6:	4628      	mov	r0, r5
 80106f8:	f7ff fa96 	bl	800fc28 <_free_r>
 80106fc:	2300      	movs	r3, #0
 80106fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8010700:	e00d      	b.n	801071e <__sflush_r+0xae>
 8010702:	2301      	movs	r3, #1
 8010704:	4628      	mov	r0, r5
 8010706:	47b0      	blx	r6
 8010708:	4602      	mov	r2, r0
 801070a:	1c50      	adds	r0, r2, #1
 801070c:	d1c9      	bne.n	80106a2 <__sflush_r+0x32>
 801070e:	682b      	ldr	r3, [r5, #0]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d0c6      	beq.n	80106a2 <__sflush_r+0x32>
 8010714:	2b1d      	cmp	r3, #29
 8010716:	d001      	beq.n	801071c <__sflush_r+0xac>
 8010718:	2b16      	cmp	r3, #22
 801071a:	d11e      	bne.n	801075a <__sflush_r+0xea>
 801071c:	602f      	str	r7, [r5, #0]
 801071e:	2000      	movs	r0, #0
 8010720:	e022      	b.n	8010768 <__sflush_r+0xf8>
 8010722:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010726:	b21b      	sxth	r3, r3
 8010728:	e01b      	b.n	8010762 <__sflush_r+0xf2>
 801072a:	690f      	ldr	r7, [r1, #16]
 801072c:	2f00      	cmp	r7, #0
 801072e:	d0f6      	beq.n	801071e <__sflush_r+0xae>
 8010730:	0793      	lsls	r3, r2, #30
 8010732:	680e      	ldr	r6, [r1, #0]
 8010734:	bf08      	it	eq
 8010736:	694b      	ldreq	r3, [r1, #20]
 8010738:	600f      	str	r7, [r1, #0]
 801073a:	bf18      	it	ne
 801073c:	2300      	movne	r3, #0
 801073e:	eba6 0807 	sub.w	r8, r6, r7
 8010742:	608b      	str	r3, [r1, #8]
 8010744:	f1b8 0f00 	cmp.w	r8, #0
 8010748:	dde9      	ble.n	801071e <__sflush_r+0xae>
 801074a:	6a21      	ldr	r1, [r4, #32]
 801074c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801074e:	4643      	mov	r3, r8
 8010750:	463a      	mov	r2, r7
 8010752:	4628      	mov	r0, r5
 8010754:	47b0      	blx	r6
 8010756:	2800      	cmp	r0, #0
 8010758:	dc08      	bgt.n	801076c <__sflush_r+0xfc>
 801075a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801075e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010762:	81a3      	strh	r3, [r4, #12]
 8010764:	f04f 30ff 	mov.w	r0, #4294967295
 8010768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801076c:	4407      	add	r7, r0
 801076e:	eba8 0800 	sub.w	r8, r8, r0
 8010772:	e7e7      	b.n	8010744 <__sflush_r+0xd4>
 8010774:	dfbffffe 	.word	0xdfbffffe

08010778 <_fflush_r>:
 8010778:	b538      	push	{r3, r4, r5, lr}
 801077a:	690b      	ldr	r3, [r1, #16]
 801077c:	4605      	mov	r5, r0
 801077e:	460c      	mov	r4, r1
 8010780:	b913      	cbnz	r3, 8010788 <_fflush_r+0x10>
 8010782:	2500      	movs	r5, #0
 8010784:	4628      	mov	r0, r5
 8010786:	bd38      	pop	{r3, r4, r5, pc}
 8010788:	b118      	cbz	r0, 8010792 <_fflush_r+0x1a>
 801078a:	6a03      	ldr	r3, [r0, #32]
 801078c:	b90b      	cbnz	r3, 8010792 <_fflush_r+0x1a>
 801078e:	f7fe fa7b 	bl	800ec88 <__sinit>
 8010792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d0f3      	beq.n	8010782 <_fflush_r+0xa>
 801079a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801079c:	07d0      	lsls	r0, r2, #31
 801079e:	d404      	bmi.n	80107aa <_fflush_r+0x32>
 80107a0:	0599      	lsls	r1, r3, #22
 80107a2:	d402      	bmi.n	80107aa <_fflush_r+0x32>
 80107a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80107a6:	f7fe fbda 	bl	800ef5e <__retarget_lock_acquire_recursive>
 80107aa:	4628      	mov	r0, r5
 80107ac:	4621      	mov	r1, r4
 80107ae:	f7ff ff5f 	bl	8010670 <__sflush_r>
 80107b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80107b4:	07da      	lsls	r2, r3, #31
 80107b6:	4605      	mov	r5, r0
 80107b8:	d4e4      	bmi.n	8010784 <_fflush_r+0xc>
 80107ba:	89a3      	ldrh	r3, [r4, #12]
 80107bc:	059b      	lsls	r3, r3, #22
 80107be:	d4e1      	bmi.n	8010784 <_fflush_r+0xc>
 80107c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80107c2:	f7fe fbcd 	bl	800ef60 <__retarget_lock_release_recursive>
 80107c6:	e7dd      	b.n	8010784 <_fflush_r+0xc>

080107c8 <memmove>:
 80107c8:	4288      	cmp	r0, r1
 80107ca:	b510      	push	{r4, lr}
 80107cc:	eb01 0402 	add.w	r4, r1, r2
 80107d0:	d902      	bls.n	80107d8 <memmove+0x10>
 80107d2:	4284      	cmp	r4, r0
 80107d4:	4623      	mov	r3, r4
 80107d6:	d807      	bhi.n	80107e8 <memmove+0x20>
 80107d8:	1e43      	subs	r3, r0, #1
 80107da:	42a1      	cmp	r1, r4
 80107dc:	d008      	beq.n	80107f0 <memmove+0x28>
 80107de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80107e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80107e6:	e7f8      	b.n	80107da <memmove+0x12>
 80107e8:	4402      	add	r2, r0
 80107ea:	4601      	mov	r1, r0
 80107ec:	428a      	cmp	r2, r1
 80107ee:	d100      	bne.n	80107f2 <memmove+0x2a>
 80107f0:	bd10      	pop	{r4, pc}
 80107f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80107f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80107fa:	e7f7      	b.n	80107ec <memmove+0x24>

080107fc <__assert_func>:
 80107fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80107fe:	4614      	mov	r4, r2
 8010800:	461a      	mov	r2, r3
 8010802:	4b09      	ldr	r3, [pc, #36]	@ (8010828 <__assert_func+0x2c>)
 8010804:	681b      	ldr	r3, [r3, #0]
 8010806:	4605      	mov	r5, r0
 8010808:	68d8      	ldr	r0, [r3, #12]
 801080a:	b954      	cbnz	r4, 8010822 <__assert_func+0x26>
 801080c:	4b07      	ldr	r3, [pc, #28]	@ (801082c <__assert_func+0x30>)
 801080e:	461c      	mov	r4, r3
 8010810:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010814:	9100      	str	r1, [sp, #0]
 8010816:	462b      	mov	r3, r5
 8010818:	4905      	ldr	r1, [pc, #20]	@ (8010830 <__assert_func+0x34>)
 801081a:	f000 f86f 	bl	80108fc <fiprintf>
 801081e:	f7fd fc89 	bl	800e134 <abort>
 8010822:	4b04      	ldr	r3, [pc, #16]	@ (8010834 <__assert_func+0x38>)
 8010824:	e7f4      	b.n	8010810 <__assert_func+0x14>
 8010826:	bf00      	nop
 8010828:	200002d8 	.word	0x200002d8
 801082c:	08011236 	.word	0x08011236
 8010830:	08011208 	.word	0x08011208
 8010834:	080111fb 	.word	0x080111fb

08010838 <_calloc_r>:
 8010838:	b570      	push	{r4, r5, r6, lr}
 801083a:	fba1 5402 	umull	r5, r4, r1, r2
 801083e:	b93c      	cbnz	r4, 8010850 <_calloc_r+0x18>
 8010840:	4629      	mov	r1, r5
 8010842:	f7fd fcb1 	bl	800e1a8 <_malloc_r>
 8010846:	4606      	mov	r6, r0
 8010848:	b928      	cbnz	r0, 8010856 <_calloc_r+0x1e>
 801084a:	2600      	movs	r6, #0
 801084c:	4630      	mov	r0, r6
 801084e:	bd70      	pop	{r4, r5, r6, pc}
 8010850:	220c      	movs	r2, #12
 8010852:	6002      	str	r2, [r0, #0]
 8010854:	e7f9      	b.n	801084a <_calloc_r+0x12>
 8010856:	462a      	mov	r2, r5
 8010858:	4621      	mov	r1, r4
 801085a:	f7fe faae 	bl	800edba <memset>
 801085e:	e7f5      	b.n	801084c <_calloc_r+0x14>

08010860 <__ascii_mbtowc>:
 8010860:	b082      	sub	sp, #8
 8010862:	b901      	cbnz	r1, 8010866 <__ascii_mbtowc+0x6>
 8010864:	a901      	add	r1, sp, #4
 8010866:	b142      	cbz	r2, 801087a <__ascii_mbtowc+0x1a>
 8010868:	b14b      	cbz	r3, 801087e <__ascii_mbtowc+0x1e>
 801086a:	7813      	ldrb	r3, [r2, #0]
 801086c:	600b      	str	r3, [r1, #0]
 801086e:	7812      	ldrb	r2, [r2, #0]
 8010870:	1e10      	subs	r0, r2, #0
 8010872:	bf18      	it	ne
 8010874:	2001      	movne	r0, #1
 8010876:	b002      	add	sp, #8
 8010878:	4770      	bx	lr
 801087a:	4610      	mov	r0, r2
 801087c:	e7fb      	b.n	8010876 <__ascii_mbtowc+0x16>
 801087e:	f06f 0001 	mvn.w	r0, #1
 8010882:	e7f8      	b.n	8010876 <__ascii_mbtowc+0x16>

08010884 <_realloc_r>:
 8010884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010888:	4680      	mov	r8, r0
 801088a:	4615      	mov	r5, r2
 801088c:	460c      	mov	r4, r1
 801088e:	b921      	cbnz	r1, 801089a <_realloc_r+0x16>
 8010890:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010894:	4611      	mov	r1, r2
 8010896:	f7fd bc87 	b.w	800e1a8 <_malloc_r>
 801089a:	b92a      	cbnz	r2, 80108a8 <_realloc_r+0x24>
 801089c:	f7ff f9c4 	bl	800fc28 <_free_r>
 80108a0:	2400      	movs	r4, #0
 80108a2:	4620      	mov	r0, r4
 80108a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108a8:	f000 f83a 	bl	8010920 <_malloc_usable_size_r>
 80108ac:	4285      	cmp	r5, r0
 80108ae:	4606      	mov	r6, r0
 80108b0:	d802      	bhi.n	80108b8 <_realloc_r+0x34>
 80108b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80108b6:	d8f4      	bhi.n	80108a2 <_realloc_r+0x1e>
 80108b8:	4629      	mov	r1, r5
 80108ba:	4640      	mov	r0, r8
 80108bc:	f7fd fc74 	bl	800e1a8 <_malloc_r>
 80108c0:	4607      	mov	r7, r0
 80108c2:	2800      	cmp	r0, #0
 80108c4:	d0ec      	beq.n	80108a0 <_realloc_r+0x1c>
 80108c6:	42b5      	cmp	r5, r6
 80108c8:	462a      	mov	r2, r5
 80108ca:	4621      	mov	r1, r4
 80108cc:	bf28      	it	cs
 80108ce:	4632      	movcs	r2, r6
 80108d0:	f7fe fb4f 	bl	800ef72 <memcpy>
 80108d4:	4621      	mov	r1, r4
 80108d6:	4640      	mov	r0, r8
 80108d8:	f7ff f9a6 	bl	800fc28 <_free_r>
 80108dc:	463c      	mov	r4, r7
 80108de:	e7e0      	b.n	80108a2 <_realloc_r+0x1e>

080108e0 <__ascii_wctomb>:
 80108e0:	4603      	mov	r3, r0
 80108e2:	4608      	mov	r0, r1
 80108e4:	b141      	cbz	r1, 80108f8 <__ascii_wctomb+0x18>
 80108e6:	2aff      	cmp	r2, #255	@ 0xff
 80108e8:	d904      	bls.n	80108f4 <__ascii_wctomb+0x14>
 80108ea:	228a      	movs	r2, #138	@ 0x8a
 80108ec:	601a      	str	r2, [r3, #0]
 80108ee:	f04f 30ff 	mov.w	r0, #4294967295
 80108f2:	4770      	bx	lr
 80108f4:	700a      	strb	r2, [r1, #0]
 80108f6:	2001      	movs	r0, #1
 80108f8:	4770      	bx	lr
	...

080108fc <fiprintf>:
 80108fc:	b40e      	push	{r1, r2, r3}
 80108fe:	b503      	push	{r0, r1, lr}
 8010900:	4601      	mov	r1, r0
 8010902:	ab03      	add	r3, sp, #12
 8010904:	4805      	ldr	r0, [pc, #20]	@ (801091c <fiprintf+0x20>)
 8010906:	f853 2b04 	ldr.w	r2, [r3], #4
 801090a:	6800      	ldr	r0, [r0, #0]
 801090c:	9301      	str	r3, [sp, #4]
 801090e:	f000 f839 	bl	8010984 <_vfiprintf_r>
 8010912:	b002      	add	sp, #8
 8010914:	f85d eb04 	ldr.w	lr, [sp], #4
 8010918:	b003      	add	sp, #12
 801091a:	4770      	bx	lr
 801091c:	200002d8 	.word	0x200002d8

08010920 <_malloc_usable_size_r>:
 8010920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010924:	1f18      	subs	r0, r3, #4
 8010926:	2b00      	cmp	r3, #0
 8010928:	bfbc      	itt	lt
 801092a:	580b      	ldrlt	r3, [r1, r0]
 801092c:	18c0      	addlt	r0, r0, r3
 801092e:	4770      	bx	lr

08010930 <__sfputc_r>:
 8010930:	6893      	ldr	r3, [r2, #8]
 8010932:	3b01      	subs	r3, #1
 8010934:	2b00      	cmp	r3, #0
 8010936:	b410      	push	{r4}
 8010938:	6093      	str	r3, [r2, #8]
 801093a:	da08      	bge.n	801094e <__sfputc_r+0x1e>
 801093c:	6994      	ldr	r4, [r2, #24]
 801093e:	42a3      	cmp	r3, r4
 8010940:	db01      	blt.n	8010946 <__sfputc_r+0x16>
 8010942:	290a      	cmp	r1, #10
 8010944:	d103      	bne.n	801094e <__sfputc_r+0x1e>
 8010946:	f85d 4b04 	ldr.w	r4, [sp], #4
 801094a:	f000 b933 	b.w	8010bb4 <__swbuf_r>
 801094e:	6813      	ldr	r3, [r2, #0]
 8010950:	1c58      	adds	r0, r3, #1
 8010952:	6010      	str	r0, [r2, #0]
 8010954:	7019      	strb	r1, [r3, #0]
 8010956:	4608      	mov	r0, r1
 8010958:	f85d 4b04 	ldr.w	r4, [sp], #4
 801095c:	4770      	bx	lr

0801095e <__sfputs_r>:
 801095e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010960:	4606      	mov	r6, r0
 8010962:	460f      	mov	r7, r1
 8010964:	4614      	mov	r4, r2
 8010966:	18d5      	adds	r5, r2, r3
 8010968:	42ac      	cmp	r4, r5
 801096a:	d101      	bne.n	8010970 <__sfputs_r+0x12>
 801096c:	2000      	movs	r0, #0
 801096e:	e007      	b.n	8010980 <__sfputs_r+0x22>
 8010970:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010974:	463a      	mov	r2, r7
 8010976:	4630      	mov	r0, r6
 8010978:	f7ff ffda 	bl	8010930 <__sfputc_r>
 801097c:	1c43      	adds	r3, r0, #1
 801097e:	d1f3      	bne.n	8010968 <__sfputs_r+0xa>
 8010980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010984 <_vfiprintf_r>:
 8010984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010988:	460d      	mov	r5, r1
 801098a:	b09d      	sub	sp, #116	@ 0x74
 801098c:	4614      	mov	r4, r2
 801098e:	4698      	mov	r8, r3
 8010990:	4606      	mov	r6, r0
 8010992:	b118      	cbz	r0, 801099c <_vfiprintf_r+0x18>
 8010994:	6a03      	ldr	r3, [r0, #32]
 8010996:	b90b      	cbnz	r3, 801099c <_vfiprintf_r+0x18>
 8010998:	f7fe f976 	bl	800ec88 <__sinit>
 801099c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801099e:	07d9      	lsls	r1, r3, #31
 80109a0:	d405      	bmi.n	80109ae <_vfiprintf_r+0x2a>
 80109a2:	89ab      	ldrh	r3, [r5, #12]
 80109a4:	059a      	lsls	r2, r3, #22
 80109a6:	d402      	bmi.n	80109ae <_vfiprintf_r+0x2a>
 80109a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80109aa:	f7fe fad8 	bl	800ef5e <__retarget_lock_acquire_recursive>
 80109ae:	89ab      	ldrh	r3, [r5, #12]
 80109b0:	071b      	lsls	r3, r3, #28
 80109b2:	d501      	bpl.n	80109b8 <_vfiprintf_r+0x34>
 80109b4:	692b      	ldr	r3, [r5, #16]
 80109b6:	b99b      	cbnz	r3, 80109e0 <_vfiprintf_r+0x5c>
 80109b8:	4629      	mov	r1, r5
 80109ba:	4630      	mov	r0, r6
 80109bc:	f000 f938 	bl	8010c30 <__swsetup_r>
 80109c0:	b170      	cbz	r0, 80109e0 <_vfiprintf_r+0x5c>
 80109c2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80109c4:	07dc      	lsls	r4, r3, #31
 80109c6:	d504      	bpl.n	80109d2 <_vfiprintf_r+0x4e>
 80109c8:	f04f 30ff 	mov.w	r0, #4294967295
 80109cc:	b01d      	add	sp, #116	@ 0x74
 80109ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109d2:	89ab      	ldrh	r3, [r5, #12]
 80109d4:	0598      	lsls	r0, r3, #22
 80109d6:	d4f7      	bmi.n	80109c8 <_vfiprintf_r+0x44>
 80109d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80109da:	f7fe fac1 	bl	800ef60 <__retarget_lock_release_recursive>
 80109de:	e7f3      	b.n	80109c8 <_vfiprintf_r+0x44>
 80109e0:	2300      	movs	r3, #0
 80109e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80109e4:	2320      	movs	r3, #32
 80109e6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80109ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80109ee:	2330      	movs	r3, #48	@ 0x30
 80109f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010ba0 <_vfiprintf_r+0x21c>
 80109f4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80109f8:	f04f 0901 	mov.w	r9, #1
 80109fc:	4623      	mov	r3, r4
 80109fe:	469a      	mov	sl, r3
 8010a00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a04:	b10a      	cbz	r2, 8010a0a <_vfiprintf_r+0x86>
 8010a06:	2a25      	cmp	r2, #37	@ 0x25
 8010a08:	d1f9      	bne.n	80109fe <_vfiprintf_r+0x7a>
 8010a0a:	ebba 0b04 	subs.w	fp, sl, r4
 8010a0e:	d00b      	beq.n	8010a28 <_vfiprintf_r+0xa4>
 8010a10:	465b      	mov	r3, fp
 8010a12:	4622      	mov	r2, r4
 8010a14:	4629      	mov	r1, r5
 8010a16:	4630      	mov	r0, r6
 8010a18:	f7ff ffa1 	bl	801095e <__sfputs_r>
 8010a1c:	3001      	adds	r0, #1
 8010a1e:	f000 80a7 	beq.w	8010b70 <_vfiprintf_r+0x1ec>
 8010a22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010a24:	445a      	add	r2, fp
 8010a26:	9209      	str	r2, [sp, #36]	@ 0x24
 8010a28:	f89a 3000 	ldrb.w	r3, [sl]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	f000 809f 	beq.w	8010b70 <_vfiprintf_r+0x1ec>
 8010a32:	2300      	movs	r3, #0
 8010a34:	f04f 32ff 	mov.w	r2, #4294967295
 8010a38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a3c:	f10a 0a01 	add.w	sl, sl, #1
 8010a40:	9304      	str	r3, [sp, #16]
 8010a42:	9307      	str	r3, [sp, #28]
 8010a44:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010a48:	931a      	str	r3, [sp, #104]	@ 0x68
 8010a4a:	4654      	mov	r4, sl
 8010a4c:	2205      	movs	r2, #5
 8010a4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a52:	4853      	ldr	r0, [pc, #332]	@ (8010ba0 <_vfiprintf_r+0x21c>)
 8010a54:	f7ef fbc4 	bl	80001e0 <memchr>
 8010a58:	9a04      	ldr	r2, [sp, #16]
 8010a5a:	b9d8      	cbnz	r0, 8010a94 <_vfiprintf_r+0x110>
 8010a5c:	06d1      	lsls	r1, r2, #27
 8010a5e:	bf44      	itt	mi
 8010a60:	2320      	movmi	r3, #32
 8010a62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a66:	0713      	lsls	r3, r2, #28
 8010a68:	bf44      	itt	mi
 8010a6a:	232b      	movmi	r3, #43	@ 0x2b
 8010a6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a70:	f89a 3000 	ldrb.w	r3, [sl]
 8010a74:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a76:	d015      	beq.n	8010aa4 <_vfiprintf_r+0x120>
 8010a78:	9a07      	ldr	r2, [sp, #28]
 8010a7a:	4654      	mov	r4, sl
 8010a7c:	2000      	movs	r0, #0
 8010a7e:	f04f 0c0a 	mov.w	ip, #10
 8010a82:	4621      	mov	r1, r4
 8010a84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a88:	3b30      	subs	r3, #48	@ 0x30
 8010a8a:	2b09      	cmp	r3, #9
 8010a8c:	d94b      	bls.n	8010b26 <_vfiprintf_r+0x1a2>
 8010a8e:	b1b0      	cbz	r0, 8010abe <_vfiprintf_r+0x13a>
 8010a90:	9207      	str	r2, [sp, #28]
 8010a92:	e014      	b.n	8010abe <_vfiprintf_r+0x13a>
 8010a94:	eba0 0308 	sub.w	r3, r0, r8
 8010a98:	fa09 f303 	lsl.w	r3, r9, r3
 8010a9c:	4313      	orrs	r3, r2
 8010a9e:	9304      	str	r3, [sp, #16]
 8010aa0:	46a2      	mov	sl, r4
 8010aa2:	e7d2      	b.n	8010a4a <_vfiprintf_r+0xc6>
 8010aa4:	9b03      	ldr	r3, [sp, #12]
 8010aa6:	1d19      	adds	r1, r3, #4
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	9103      	str	r1, [sp, #12]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	bfbb      	ittet	lt
 8010ab0:	425b      	neglt	r3, r3
 8010ab2:	f042 0202 	orrlt.w	r2, r2, #2
 8010ab6:	9307      	strge	r3, [sp, #28]
 8010ab8:	9307      	strlt	r3, [sp, #28]
 8010aba:	bfb8      	it	lt
 8010abc:	9204      	strlt	r2, [sp, #16]
 8010abe:	7823      	ldrb	r3, [r4, #0]
 8010ac0:	2b2e      	cmp	r3, #46	@ 0x2e
 8010ac2:	d10a      	bne.n	8010ada <_vfiprintf_r+0x156>
 8010ac4:	7863      	ldrb	r3, [r4, #1]
 8010ac6:	2b2a      	cmp	r3, #42	@ 0x2a
 8010ac8:	d132      	bne.n	8010b30 <_vfiprintf_r+0x1ac>
 8010aca:	9b03      	ldr	r3, [sp, #12]
 8010acc:	1d1a      	adds	r2, r3, #4
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	9203      	str	r2, [sp, #12]
 8010ad2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010ad6:	3402      	adds	r4, #2
 8010ad8:	9305      	str	r3, [sp, #20]
 8010ada:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010bb0 <_vfiprintf_r+0x22c>
 8010ade:	7821      	ldrb	r1, [r4, #0]
 8010ae0:	2203      	movs	r2, #3
 8010ae2:	4650      	mov	r0, sl
 8010ae4:	f7ef fb7c 	bl	80001e0 <memchr>
 8010ae8:	b138      	cbz	r0, 8010afa <_vfiprintf_r+0x176>
 8010aea:	9b04      	ldr	r3, [sp, #16]
 8010aec:	eba0 000a 	sub.w	r0, r0, sl
 8010af0:	2240      	movs	r2, #64	@ 0x40
 8010af2:	4082      	lsls	r2, r0
 8010af4:	4313      	orrs	r3, r2
 8010af6:	3401      	adds	r4, #1
 8010af8:	9304      	str	r3, [sp, #16]
 8010afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010afe:	4829      	ldr	r0, [pc, #164]	@ (8010ba4 <_vfiprintf_r+0x220>)
 8010b00:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010b04:	2206      	movs	r2, #6
 8010b06:	f7ef fb6b 	bl	80001e0 <memchr>
 8010b0a:	2800      	cmp	r0, #0
 8010b0c:	d03f      	beq.n	8010b8e <_vfiprintf_r+0x20a>
 8010b0e:	4b26      	ldr	r3, [pc, #152]	@ (8010ba8 <_vfiprintf_r+0x224>)
 8010b10:	bb1b      	cbnz	r3, 8010b5a <_vfiprintf_r+0x1d6>
 8010b12:	9b03      	ldr	r3, [sp, #12]
 8010b14:	3307      	adds	r3, #7
 8010b16:	f023 0307 	bic.w	r3, r3, #7
 8010b1a:	3308      	adds	r3, #8
 8010b1c:	9303      	str	r3, [sp, #12]
 8010b1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b20:	443b      	add	r3, r7
 8010b22:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b24:	e76a      	b.n	80109fc <_vfiprintf_r+0x78>
 8010b26:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b2a:	460c      	mov	r4, r1
 8010b2c:	2001      	movs	r0, #1
 8010b2e:	e7a8      	b.n	8010a82 <_vfiprintf_r+0xfe>
 8010b30:	2300      	movs	r3, #0
 8010b32:	3401      	adds	r4, #1
 8010b34:	9305      	str	r3, [sp, #20]
 8010b36:	4619      	mov	r1, r3
 8010b38:	f04f 0c0a 	mov.w	ip, #10
 8010b3c:	4620      	mov	r0, r4
 8010b3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b42:	3a30      	subs	r2, #48	@ 0x30
 8010b44:	2a09      	cmp	r2, #9
 8010b46:	d903      	bls.n	8010b50 <_vfiprintf_r+0x1cc>
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d0c6      	beq.n	8010ada <_vfiprintf_r+0x156>
 8010b4c:	9105      	str	r1, [sp, #20]
 8010b4e:	e7c4      	b.n	8010ada <_vfiprintf_r+0x156>
 8010b50:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b54:	4604      	mov	r4, r0
 8010b56:	2301      	movs	r3, #1
 8010b58:	e7f0      	b.n	8010b3c <_vfiprintf_r+0x1b8>
 8010b5a:	ab03      	add	r3, sp, #12
 8010b5c:	9300      	str	r3, [sp, #0]
 8010b5e:	462a      	mov	r2, r5
 8010b60:	4b12      	ldr	r3, [pc, #72]	@ (8010bac <_vfiprintf_r+0x228>)
 8010b62:	a904      	add	r1, sp, #16
 8010b64:	4630      	mov	r0, r6
 8010b66:	f7fd fc4b 	bl	800e400 <_printf_float>
 8010b6a:	4607      	mov	r7, r0
 8010b6c:	1c78      	adds	r0, r7, #1
 8010b6e:	d1d6      	bne.n	8010b1e <_vfiprintf_r+0x19a>
 8010b70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010b72:	07d9      	lsls	r1, r3, #31
 8010b74:	d405      	bmi.n	8010b82 <_vfiprintf_r+0x1fe>
 8010b76:	89ab      	ldrh	r3, [r5, #12]
 8010b78:	059a      	lsls	r2, r3, #22
 8010b7a:	d402      	bmi.n	8010b82 <_vfiprintf_r+0x1fe>
 8010b7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010b7e:	f7fe f9ef 	bl	800ef60 <__retarget_lock_release_recursive>
 8010b82:	89ab      	ldrh	r3, [r5, #12]
 8010b84:	065b      	lsls	r3, r3, #25
 8010b86:	f53f af1f 	bmi.w	80109c8 <_vfiprintf_r+0x44>
 8010b8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010b8c:	e71e      	b.n	80109cc <_vfiprintf_r+0x48>
 8010b8e:	ab03      	add	r3, sp, #12
 8010b90:	9300      	str	r3, [sp, #0]
 8010b92:	462a      	mov	r2, r5
 8010b94:	4b05      	ldr	r3, [pc, #20]	@ (8010bac <_vfiprintf_r+0x228>)
 8010b96:	a904      	add	r1, sp, #16
 8010b98:	4630      	mov	r0, r6
 8010b9a:	f7fd fec9 	bl	800e930 <_printf_i>
 8010b9e:	e7e4      	b.n	8010b6a <_vfiprintf_r+0x1e6>
 8010ba0:	080111e0 	.word	0x080111e0
 8010ba4:	080111ea 	.word	0x080111ea
 8010ba8:	0800e401 	.word	0x0800e401
 8010bac:	0801095f 	.word	0x0801095f
 8010bb0:	080111e6 	.word	0x080111e6

08010bb4 <__swbuf_r>:
 8010bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bb6:	460e      	mov	r6, r1
 8010bb8:	4614      	mov	r4, r2
 8010bba:	4605      	mov	r5, r0
 8010bbc:	b118      	cbz	r0, 8010bc6 <__swbuf_r+0x12>
 8010bbe:	6a03      	ldr	r3, [r0, #32]
 8010bc0:	b90b      	cbnz	r3, 8010bc6 <__swbuf_r+0x12>
 8010bc2:	f7fe f861 	bl	800ec88 <__sinit>
 8010bc6:	69a3      	ldr	r3, [r4, #24]
 8010bc8:	60a3      	str	r3, [r4, #8]
 8010bca:	89a3      	ldrh	r3, [r4, #12]
 8010bcc:	071a      	lsls	r2, r3, #28
 8010bce:	d501      	bpl.n	8010bd4 <__swbuf_r+0x20>
 8010bd0:	6923      	ldr	r3, [r4, #16]
 8010bd2:	b943      	cbnz	r3, 8010be6 <__swbuf_r+0x32>
 8010bd4:	4621      	mov	r1, r4
 8010bd6:	4628      	mov	r0, r5
 8010bd8:	f000 f82a 	bl	8010c30 <__swsetup_r>
 8010bdc:	b118      	cbz	r0, 8010be6 <__swbuf_r+0x32>
 8010bde:	f04f 37ff 	mov.w	r7, #4294967295
 8010be2:	4638      	mov	r0, r7
 8010be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010be6:	6823      	ldr	r3, [r4, #0]
 8010be8:	6922      	ldr	r2, [r4, #16]
 8010bea:	1a98      	subs	r0, r3, r2
 8010bec:	6963      	ldr	r3, [r4, #20]
 8010bee:	b2f6      	uxtb	r6, r6
 8010bf0:	4283      	cmp	r3, r0
 8010bf2:	4637      	mov	r7, r6
 8010bf4:	dc05      	bgt.n	8010c02 <__swbuf_r+0x4e>
 8010bf6:	4621      	mov	r1, r4
 8010bf8:	4628      	mov	r0, r5
 8010bfa:	f7ff fdbd 	bl	8010778 <_fflush_r>
 8010bfe:	2800      	cmp	r0, #0
 8010c00:	d1ed      	bne.n	8010bde <__swbuf_r+0x2a>
 8010c02:	68a3      	ldr	r3, [r4, #8]
 8010c04:	3b01      	subs	r3, #1
 8010c06:	60a3      	str	r3, [r4, #8]
 8010c08:	6823      	ldr	r3, [r4, #0]
 8010c0a:	1c5a      	adds	r2, r3, #1
 8010c0c:	6022      	str	r2, [r4, #0]
 8010c0e:	701e      	strb	r6, [r3, #0]
 8010c10:	6962      	ldr	r2, [r4, #20]
 8010c12:	1c43      	adds	r3, r0, #1
 8010c14:	429a      	cmp	r2, r3
 8010c16:	d004      	beq.n	8010c22 <__swbuf_r+0x6e>
 8010c18:	89a3      	ldrh	r3, [r4, #12]
 8010c1a:	07db      	lsls	r3, r3, #31
 8010c1c:	d5e1      	bpl.n	8010be2 <__swbuf_r+0x2e>
 8010c1e:	2e0a      	cmp	r6, #10
 8010c20:	d1df      	bne.n	8010be2 <__swbuf_r+0x2e>
 8010c22:	4621      	mov	r1, r4
 8010c24:	4628      	mov	r0, r5
 8010c26:	f7ff fda7 	bl	8010778 <_fflush_r>
 8010c2a:	2800      	cmp	r0, #0
 8010c2c:	d0d9      	beq.n	8010be2 <__swbuf_r+0x2e>
 8010c2e:	e7d6      	b.n	8010bde <__swbuf_r+0x2a>

08010c30 <__swsetup_r>:
 8010c30:	b538      	push	{r3, r4, r5, lr}
 8010c32:	4b29      	ldr	r3, [pc, #164]	@ (8010cd8 <__swsetup_r+0xa8>)
 8010c34:	4605      	mov	r5, r0
 8010c36:	6818      	ldr	r0, [r3, #0]
 8010c38:	460c      	mov	r4, r1
 8010c3a:	b118      	cbz	r0, 8010c44 <__swsetup_r+0x14>
 8010c3c:	6a03      	ldr	r3, [r0, #32]
 8010c3e:	b90b      	cbnz	r3, 8010c44 <__swsetup_r+0x14>
 8010c40:	f7fe f822 	bl	800ec88 <__sinit>
 8010c44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c48:	0719      	lsls	r1, r3, #28
 8010c4a:	d422      	bmi.n	8010c92 <__swsetup_r+0x62>
 8010c4c:	06da      	lsls	r2, r3, #27
 8010c4e:	d407      	bmi.n	8010c60 <__swsetup_r+0x30>
 8010c50:	2209      	movs	r2, #9
 8010c52:	602a      	str	r2, [r5, #0]
 8010c54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c58:	81a3      	strh	r3, [r4, #12]
 8010c5a:	f04f 30ff 	mov.w	r0, #4294967295
 8010c5e:	e033      	b.n	8010cc8 <__swsetup_r+0x98>
 8010c60:	0758      	lsls	r0, r3, #29
 8010c62:	d512      	bpl.n	8010c8a <__swsetup_r+0x5a>
 8010c64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010c66:	b141      	cbz	r1, 8010c7a <__swsetup_r+0x4a>
 8010c68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010c6c:	4299      	cmp	r1, r3
 8010c6e:	d002      	beq.n	8010c76 <__swsetup_r+0x46>
 8010c70:	4628      	mov	r0, r5
 8010c72:	f7fe ffd9 	bl	800fc28 <_free_r>
 8010c76:	2300      	movs	r3, #0
 8010c78:	6363      	str	r3, [r4, #52]	@ 0x34
 8010c7a:	89a3      	ldrh	r3, [r4, #12]
 8010c7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010c80:	81a3      	strh	r3, [r4, #12]
 8010c82:	2300      	movs	r3, #0
 8010c84:	6063      	str	r3, [r4, #4]
 8010c86:	6923      	ldr	r3, [r4, #16]
 8010c88:	6023      	str	r3, [r4, #0]
 8010c8a:	89a3      	ldrh	r3, [r4, #12]
 8010c8c:	f043 0308 	orr.w	r3, r3, #8
 8010c90:	81a3      	strh	r3, [r4, #12]
 8010c92:	6923      	ldr	r3, [r4, #16]
 8010c94:	b94b      	cbnz	r3, 8010caa <__swsetup_r+0x7a>
 8010c96:	89a3      	ldrh	r3, [r4, #12]
 8010c98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010c9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010ca0:	d003      	beq.n	8010caa <__swsetup_r+0x7a>
 8010ca2:	4621      	mov	r1, r4
 8010ca4:	4628      	mov	r0, r5
 8010ca6:	f000 f83f 	bl	8010d28 <__smakebuf_r>
 8010caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cae:	f013 0201 	ands.w	r2, r3, #1
 8010cb2:	d00a      	beq.n	8010cca <__swsetup_r+0x9a>
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	60a2      	str	r2, [r4, #8]
 8010cb8:	6962      	ldr	r2, [r4, #20]
 8010cba:	4252      	negs	r2, r2
 8010cbc:	61a2      	str	r2, [r4, #24]
 8010cbe:	6922      	ldr	r2, [r4, #16]
 8010cc0:	b942      	cbnz	r2, 8010cd4 <__swsetup_r+0xa4>
 8010cc2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010cc6:	d1c5      	bne.n	8010c54 <__swsetup_r+0x24>
 8010cc8:	bd38      	pop	{r3, r4, r5, pc}
 8010cca:	0799      	lsls	r1, r3, #30
 8010ccc:	bf58      	it	pl
 8010cce:	6962      	ldrpl	r2, [r4, #20]
 8010cd0:	60a2      	str	r2, [r4, #8]
 8010cd2:	e7f4      	b.n	8010cbe <__swsetup_r+0x8e>
 8010cd4:	2000      	movs	r0, #0
 8010cd6:	e7f7      	b.n	8010cc8 <__swsetup_r+0x98>
 8010cd8:	200002d8 	.word	0x200002d8

08010cdc <__swhatbuf_r>:
 8010cdc:	b570      	push	{r4, r5, r6, lr}
 8010cde:	460c      	mov	r4, r1
 8010ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ce4:	2900      	cmp	r1, #0
 8010ce6:	b096      	sub	sp, #88	@ 0x58
 8010ce8:	4615      	mov	r5, r2
 8010cea:	461e      	mov	r6, r3
 8010cec:	da0d      	bge.n	8010d0a <__swhatbuf_r+0x2e>
 8010cee:	89a3      	ldrh	r3, [r4, #12]
 8010cf0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010cf4:	f04f 0100 	mov.w	r1, #0
 8010cf8:	bf14      	ite	ne
 8010cfa:	2340      	movne	r3, #64	@ 0x40
 8010cfc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010d00:	2000      	movs	r0, #0
 8010d02:	6031      	str	r1, [r6, #0]
 8010d04:	602b      	str	r3, [r5, #0]
 8010d06:	b016      	add	sp, #88	@ 0x58
 8010d08:	bd70      	pop	{r4, r5, r6, pc}
 8010d0a:	466a      	mov	r2, sp
 8010d0c:	f000 f848 	bl	8010da0 <_fstat_r>
 8010d10:	2800      	cmp	r0, #0
 8010d12:	dbec      	blt.n	8010cee <__swhatbuf_r+0x12>
 8010d14:	9901      	ldr	r1, [sp, #4]
 8010d16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010d1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010d1e:	4259      	negs	r1, r3
 8010d20:	4159      	adcs	r1, r3
 8010d22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010d26:	e7eb      	b.n	8010d00 <__swhatbuf_r+0x24>

08010d28 <__smakebuf_r>:
 8010d28:	898b      	ldrh	r3, [r1, #12]
 8010d2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d2c:	079d      	lsls	r5, r3, #30
 8010d2e:	4606      	mov	r6, r0
 8010d30:	460c      	mov	r4, r1
 8010d32:	d507      	bpl.n	8010d44 <__smakebuf_r+0x1c>
 8010d34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010d38:	6023      	str	r3, [r4, #0]
 8010d3a:	6123      	str	r3, [r4, #16]
 8010d3c:	2301      	movs	r3, #1
 8010d3e:	6163      	str	r3, [r4, #20]
 8010d40:	b003      	add	sp, #12
 8010d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d44:	ab01      	add	r3, sp, #4
 8010d46:	466a      	mov	r2, sp
 8010d48:	f7ff ffc8 	bl	8010cdc <__swhatbuf_r>
 8010d4c:	9f00      	ldr	r7, [sp, #0]
 8010d4e:	4605      	mov	r5, r0
 8010d50:	4639      	mov	r1, r7
 8010d52:	4630      	mov	r0, r6
 8010d54:	f7fd fa28 	bl	800e1a8 <_malloc_r>
 8010d58:	b948      	cbnz	r0, 8010d6e <__smakebuf_r+0x46>
 8010d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d5e:	059a      	lsls	r2, r3, #22
 8010d60:	d4ee      	bmi.n	8010d40 <__smakebuf_r+0x18>
 8010d62:	f023 0303 	bic.w	r3, r3, #3
 8010d66:	f043 0302 	orr.w	r3, r3, #2
 8010d6a:	81a3      	strh	r3, [r4, #12]
 8010d6c:	e7e2      	b.n	8010d34 <__smakebuf_r+0xc>
 8010d6e:	89a3      	ldrh	r3, [r4, #12]
 8010d70:	6020      	str	r0, [r4, #0]
 8010d72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010d76:	81a3      	strh	r3, [r4, #12]
 8010d78:	9b01      	ldr	r3, [sp, #4]
 8010d7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010d7e:	b15b      	cbz	r3, 8010d98 <__smakebuf_r+0x70>
 8010d80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d84:	4630      	mov	r0, r6
 8010d86:	f000 f81d 	bl	8010dc4 <_isatty_r>
 8010d8a:	b128      	cbz	r0, 8010d98 <__smakebuf_r+0x70>
 8010d8c:	89a3      	ldrh	r3, [r4, #12]
 8010d8e:	f023 0303 	bic.w	r3, r3, #3
 8010d92:	f043 0301 	orr.w	r3, r3, #1
 8010d96:	81a3      	strh	r3, [r4, #12]
 8010d98:	89a3      	ldrh	r3, [r4, #12]
 8010d9a:	431d      	orrs	r5, r3
 8010d9c:	81a5      	strh	r5, [r4, #12]
 8010d9e:	e7cf      	b.n	8010d40 <__smakebuf_r+0x18>

08010da0 <_fstat_r>:
 8010da0:	b538      	push	{r3, r4, r5, lr}
 8010da2:	4d07      	ldr	r5, [pc, #28]	@ (8010dc0 <_fstat_r+0x20>)
 8010da4:	2300      	movs	r3, #0
 8010da6:	4604      	mov	r4, r0
 8010da8:	4608      	mov	r0, r1
 8010daa:	4611      	mov	r1, r2
 8010dac:	602b      	str	r3, [r5, #0]
 8010dae:	f7f3 fb1f 	bl	80043f0 <_fstat>
 8010db2:	1c43      	adds	r3, r0, #1
 8010db4:	d102      	bne.n	8010dbc <_fstat_r+0x1c>
 8010db6:	682b      	ldr	r3, [r5, #0]
 8010db8:	b103      	cbz	r3, 8010dbc <_fstat_r+0x1c>
 8010dba:	6023      	str	r3, [r4, #0]
 8010dbc:	bd38      	pop	{r3, r4, r5, pc}
 8010dbe:	bf00      	nop
 8010dc0:	20000a38 	.word	0x20000a38

08010dc4 <_isatty_r>:
 8010dc4:	b538      	push	{r3, r4, r5, lr}
 8010dc6:	4d06      	ldr	r5, [pc, #24]	@ (8010de0 <_isatty_r+0x1c>)
 8010dc8:	2300      	movs	r3, #0
 8010dca:	4604      	mov	r4, r0
 8010dcc:	4608      	mov	r0, r1
 8010dce:	602b      	str	r3, [r5, #0]
 8010dd0:	f7f3 fb1e 	bl	8004410 <_isatty>
 8010dd4:	1c43      	adds	r3, r0, #1
 8010dd6:	d102      	bne.n	8010dde <_isatty_r+0x1a>
 8010dd8:	682b      	ldr	r3, [r5, #0]
 8010dda:	b103      	cbz	r3, 8010dde <_isatty_r+0x1a>
 8010ddc:	6023      	str	r3, [r4, #0]
 8010dde:	bd38      	pop	{r3, r4, r5, pc}
 8010de0:	20000a38 	.word	0x20000a38

08010de4 <_init>:
 8010de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010de6:	bf00      	nop
 8010de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010dea:	bc08      	pop	{r3}
 8010dec:	469e      	mov	lr, r3
 8010dee:	4770      	bx	lr

08010df0 <_fini>:
 8010df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010df2:	bf00      	nop
 8010df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010df6:	bc08      	pop	{r3}
 8010df8:	469e      	mov	lr, r3
 8010dfa:	4770      	bx	lr
