
test-19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008970  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08008b10  08008b10  00009b10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f80  08008f80  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008f80  08008f80  00009f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f88  08008f88  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f88  08008f88  00009f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f8c  08008f8c  00009f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008f90  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200001d4  08009164  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  08009164  0000a4e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001093d  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bee  00000000  00000000  0001ab41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  0001d730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000af4  00000000  00000000  0001e558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f2a  00000000  00000000  0001f04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c8b  00000000  00000000  00038f76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009136b  00000000  00000000  00049c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000daf6c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cc0  00000000  00000000  000dafb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  000dfc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008af8 	.word	0x08008af8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08008af8 	.word	0x08008af8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <_ZN12MotorControlC1EP15TB6612FNG_MotorP13PololuEncodermfff>:
 * @date Jun 2, 2024
 */

#include "MotorControl.h"

MotorControl::MotorControl(
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	61f8      	str	r0, [r7, #28]
 8000eb0:	61b9      	str	r1, [r7, #24]
 8000eb2:	617a      	str	r2, [r7, #20]
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	ed87 0a03 	vstr	s0, [r7, #12]
 8000eba:	edc7 0a02 	vstr	s1, [r7, #8]
 8000ebe:	ed87 1a01 	vstr	s2, [r7, #4]
		: motor(motor),
		  encoder(encoder),
		  control_frequency_Hz(control_frequency_Hz),
		  K_P(K_P),
		  K_I(K_I),
		  K_D(K_D)
 8000ec2:	4a16      	ldr	r2, [pc, #88]	@ (8000f1c <_ZN12MotorControlC1EP15TB6612FNG_MotorP13PololuEncodermfff+0x74>)
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	601a      	str	r2, [r3, #0]
		: motor(motor),
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	605a      	str	r2, [r3, #4]
		  encoder(encoder),
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	609a      	str	r2, [r3, #8]
		  control_frequency_Hz(control_frequency_Hz),
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	60da      	str	r2, [r3, #12]
		  K_P(K_P),
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	68fa      	ldr	r2, [r7, #12]
 8000ede:	611a      	str	r2, [r3, #16]
		  K_I(K_I),
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	615a      	str	r2, [r3, #20]
		  K_D(K_D)
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	619a      	str	r2, [r3, #24]
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f04f 0200 	mov.w	r2, #0
 8000ef2:	61da      	str	r2, [r3, #28]
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f04f 0200 	mov.w	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	625a      	str	r2, [r3, #36]	@ 0x24
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	2200      	movs	r2, #0
 8000f08:	859a      	strh	r2, [r3, #44]	@ 0x2c
{
	reinitialize();
 8000f0a:	69f8      	ldr	r0, [r7, #28]
 8000f0c:	f000 f94a 	bl	80011a4 <_ZN12MotorControl12reinitializeEv>
}
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	4618      	mov	r0, r3
 8000f14:	3720      	adds	r7, #32
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	08008bb0 	.word	0x08008bb0

08000f20 <_ZN12MotorControlD1Ev>:

MotorControl::~MotorControl()
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	4a06      	ldr	r2, [pc, #24]	@ (8000f44 <_ZN12MotorControlD1Ev+0x24>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	601a      	str	r2, [r3, #0]
{
	motor->stop();
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 fd59 	bl	80019ea <_ZN15TB6612FNG_Motor4stopEv>
}
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	08008bb0 	.word	0x08008bb0

08000f48 <_ZN12MotorControlD0Ev>:
MotorControl::~MotorControl()
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
}
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff ffe5 	bl	8000f20 <_ZN12MotorControlD1Ev>
 8000f56:	2130      	movs	r1, #48	@ 0x30
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f004 ff2b 	bl	8005db4 <_ZdlPvj>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <_ZN12MotorControl13debug_messageEP20__UART_HandleTypeDef>:


void MotorControl::debug_message(UART_HandleTypeDef* uart_handle)
{
 8000f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6a:	b0a9      	sub	sp, #164	@ 0xa4
 8000f6c:	af0a      	add	r7, sp, #40	@ 0x28
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
	#define VALUE_WIDTH 5
	#define MESSAGE_LENGTH 100
	char my_message[MESSAGE_LENGTH] = "";
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	2260      	movs	r2, #96	@ 0x60
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f005 fdad 	bl	8006ade <memset>
    int string_length = snprintf(my_message, MESSAGE_LENGTH, "Controller effort: %*i/%*i, Error: %*.3f RPM, Intgtr: %*.3f \r\n",
                             VALUE_WIDTH, effort,
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
    int string_length = snprintf(my_message, MESSAGE_LENGTH, "Controller effort: %*i/%*i, Error: %*.3f RPM, Intgtr: %*.3f \r\n",
 8000f8a:	461e      	mov	r6, r3
							 VALUE_WIDTH, saturation_limit,
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
    int string_length = snprintf(my_message, MESSAGE_LENGTH, "Controller effort: %*i/%*i, Error: %*.3f RPM, Intgtr: %*.3f \r\n",
 8000f92:	607b      	str	r3, [r7, #4]
							 VALUE_WIDTH, error,
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	6a1b      	ldr	r3, [r3, #32]
    int string_length = snprintf(my_message, MESSAGE_LENGTH, "Controller effort: %*i/%*i, Error: %*.3f RPM, Intgtr: %*.3f \r\n",
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fadd 	bl	8000558 <__aeabi_f2d>
 8000f9e:	4604      	mov	r4, r0
 8000fa0:	460d      	mov	r5, r1
							 VALUE_WIDTH, running_error );
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    int string_length = snprintf(my_message, MESSAGE_LENGTH, "Controller effort: %*i/%*i, Error: %*.3f RPM, Intgtr: %*.3f \r\n",
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fad6 	bl	8000558 <__aeabi_f2d>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	f107 0010 	add.w	r0, r7, #16
 8000fb4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8000fb8:	2305      	movs	r3, #5
 8000fba:	9306      	str	r3, [sp, #24]
 8000fbc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8000fc0:	2305      	movs	r3, #5
 8000fc2:	9303      	str	r3, [sp, #12]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	9302      	str	r3, [sp, #8]
 8000fc8:	2305      	movs	r3, #5
 8000fca:	9301      	str	r3, [sp, #4]
 8000fcc:	9600      	str	r6, [sp, #0]
 8000fce:	2305      	movs	r3, #5
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	@ (8001000 <_ZN12MotorControl13debug_messageEP20__UART_HandleTypeDef+0x98>)
 8000fd2:	2164      	movs	r1, #100	@ 0x64
 8000fd4:	f005 fcec 	bl	80069b0 <sniprintf>
 8000fd8:	6778      	str	r0, [r7, #116]	@ 0x74
    HAL_UART_Transmit(uart_handle, (uint8_t*)my_message, string_length, HAL_MAX_DELAY);
 8000fda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	f107 0110 	add.w	r1, r7, #16
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe6:	68b8      	ldr	r0, [r7, #8]
 8000fe8:	f004 fb28 	bl	800563c <HAL_UART_Transmit>
    encoder->debug_message(uart_handle);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	68b9      	ldr	r1, [r7, #8]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f9ee 	bl	80013d4 <_ZN13PololuEncoder13debug_messageEP20__UART_HandleTypeDef>
}
 8000ff8:	bf00      	nop
 8000ffa:	377c      	adds	r7, #124	@ 0x7c
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001000:	08008b10 	.word	0x08008b10

08001004 <_ZN12MotorControl3runEf>:

void MotorControl::run(float setpoint)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	ed87 0a00 	vstr	s0, [r7]
	// Grab the latest data from the encoder.
	encoder->update();
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f945 	bl	80012a4 <_ZN13PololuEncoder6updateEv>
	float process_value = encoder->get_speed(control_frequency_Hz);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689a      	ldr	r2, [r3, #8]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	4619      	mov	r1, r3
 8001024:	4610      	mov	r0, r2
 8001026:	f000 f997 	bl	8001358 <_ZN13PololuEncoder9get_speedEm>
 800102a:	ed87 0a03 	vstr	s0, [r7, #12]

	// Get the effort and send to motor
	get_effort_sat(setpoint, process_value);
 800102e:	edd7 0a03 	vldr	s1, [r7, #12]
 8001032:	ed97 0a00 	vldr	s0, [r7]
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f000 f80f 	bl	800105a <_ZN12MotorControl14get_effort_satEff>
	motor->set_duty(effort, saturation_limit);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6858      	ldr	r0, [r3, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f9b3 102c 	ldrsh.w	r1, [r3, #44]	@ 0x2c
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 800104c:	461a      	mov	r2, r3
 800104e:	f000 fc4d 	bl	80018ec <_ZN15TB6612FNG_Motor8set_dutyEss>
}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <_ZN12MotorControl14get_effort_satEff>:

int16_t MotorControl::get_effort_sat(
					float setpoint,
					float process_value
					)
{
 800105a:	b480      	push	{r7}
 800105c:	b089      	sub	sp, #36	@ 0x24
 800105e:	af00      	add	r7, sp, #0
 8001060:	60f8      	str	r0, [r7, #12]
 8001062:	ed87 0a02 	vstr	s0, [r7, #8]
 8001066:	edc7 0a01 	vstr	s1, [r7, #4]
	// Calculating error for P control
	error = setpoint - process_value; // RPM, a float
 800106a:	ed97 7a02 	vldr	s14, [r7, #8]
 800106e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001072:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	edc3 7a08 	vstr	s15, [r3, #32]

	// Calculating running error for I control
	running_error += error/(control_frequency_Hz); // RPM*s, float arithmetic cast to an int
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	ed93 6a08 	vldr	s12, [r3, #32]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	ee07 3a90 	vmov	s15, r3
 8001090:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001094:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
//	{
//		running_error += 0;
//	}

	// Calculating error slope for D control
	error_slope = (error-last_error)*((float)control_frequency_Hz); // RPM/s, a float
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	ed93 7a08 	vldr	s14, [r3, #32]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	edd3 7a07 	vldr	s15, [r3, #28]
 80010ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	ee07 3a90 	vmov	s15, r3
 80010ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	last_error = error;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6a1a      	ldr	r2, [r3, #32]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	61da      	str	r2, [r3, #28]

	// Controller effort
    float P_effort = K_P*error;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	ed93 7a04 	vldr	s14, [r3, #16]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	edd3 7a08 	vldr	s15, [r3, #32]
 80010dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e0:	edc7 7a07 	vstr	s15, [r7, #28]
    float I_effort = K_I*running_error;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	ed93 7a05 	vldr	s14, [r3, #20]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80010f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f4:	edc7 7a06 	vstr	s15, [r7, #24]
    float D_effort = K_D*error_slope;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	ed93 7a06 	vldr	s14, [r3, #24]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001108:	edc7 7a05 	vstr	s15, [r7, #20]
    float effort_unsat = P_effort + I_effort + D_effort;
 800110c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001110:	edd7 7a06 	vldr	s15, [r7, #24]
 8001114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001118:	ed97 7a05 	vldr	s14, [r7, #20]
 800111c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001120:	edc7 7a04 	vstr	s15, [r7, #16]

    // Saturation
	if (effort_unsat > (float)saturation_limit)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001132:	ed97 7a04 	vldr	s14, [r7, #16]
 8001136:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800113a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113e:	dd05      	ble.n	800114c <_ZN12MotorControl14get_effort_satEff+0xf2>
	{
		effort = saturation_limit;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	@ 0x2e
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	859a      	strh	r2, [r3, #44]	@ 0x2c
 800114a:	e022      	b.n	8001192 <_ZN12MotorControl14get_effort_satEff+0x138>
	}
	else if (effort_unsat < -1*(float)saturation_limit)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8001152:	ee07 3a90 	vmov	s15, r3
 8001156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800115a:	eef1 7a67 	vneg.f32	s15, s15
 800115e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001162:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116a:	d509      	bpl.n	8001180 <_ZN12MotorControl14get_effort_satEff+0x126>
	{
		effort = -saturation_limit;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8001172:	b29b      	uxth	r3, r3
 8001174:	425b      	negs	r3, r3
 8001176:	b29b      	uxth	r3, r3
 8001178:	b21a      	sxth	r2, r3
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	859a      	strh	r2, [r3, #44]	@ 0x2c
 800117e:	e008      	b.n	8001192 <_ZN12MotorControl14get_effort_satEff+0x138>
	}
	else
	{
		effort = (int16_t)effort_unsat;
 8001180:	edd7 7a04 	vldr	s15, [r7, #16]
 8001184:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001188:	ee17 3a90 	vmov	r3, s15
 800118c:	b21a      	sxth	r2, r3
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	859a      	strh	r2, [r3, #44]	@ 0x2c
	}

	return effort;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
}
 8001198:	4618      	mov	r0, r3
 800119a:	3724      	adds	r7, #36	@ 0x24
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <_ZN12MotorControl12reinitializeEv>:

void MotorControl::reinitialize()
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
	// Stop motor
	motor->set_duty(0);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2264      	movs	r2, #100	@ 0x64
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f000 fb99 	bl	80018ec <_ZN15TB6612FNG_Motor8set_dutyEss>

	// Reset important stuff
	last_error = 0;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
    error = 0;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	621a      	str	r2, [r3, #32]
    effort = 0;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	859a      	strh	r2, [r3, #44]	@ 0x2c
    running_error = 0; // Most important
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	625a      	str	r2, [r3, #36]	@ 0x24

    // Grab the new saturation limit.
    saturation_limit = motor->timer_handle->Instance->ARR; // Assuming no prescalar is used.
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	85da      	strh	r2, [r3, #46]	@ 0x2e
}
 80011e8:	bf00      	nop
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb>:
 * @date Jun 2, 2024
 */

#include "PololuEncoder.h"

PololuEncoder::PololuEncoder(
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	4611      	mov	r1, r2
 80011fc:	ed87 0a00 	vstr	s0, [r7]
 8001200:	461a      	mov	r2, r3
 8001202:	460b      	mov	r3, r1
 8001204:	80fb      	strh	r3, [r7, #6]
 8001206:	4613      	mov	r3, r2
 8001208:	717b      	strb	r3, [r7, #5]
		)
		: timer_handle(timer_handle),
		  CPR(CPR),
		  gear_ratio(gear_ratio),
		  timer_bit_size(timer_bit_size),
		  interrupt_mode(interrupt_mode)
 800120a:	4a25      	ldr	r2, [pc, #148]	@ (80012a0 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0xb0>)
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	601a      	str	r2, [r3, #0]
		: timer_handle(timer_handle),
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	605a      	str	r2, [r3, #4]
		  CPR(CPR),
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	88fa      	ldrh	r2, [r7, #6]
 800121a:	811a      	strh	r2, [r3, #8]
		  gear_ratio(gear_ratio),
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	683a      	ldr	r2, [r7, #0]
 8001220:	60da      	str	r2, [r3, #12]
		  timer_bit_size(timer_bit_size),
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	797a      	ldrb	r2, [r7, #5]
 8001226:	741a      	strb	r2, [r3, #16]
		  interrupt_mode(interrupt_mode)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	7e3a      	ldrb	r2, [r7, #24]
 800122c:	745a      	strb	r2, [r3, #17]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2200      	movs	r2, #0
 8001232:	825a      	strh	r2, [r3, #18]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2200      	movs	r2, #0
 8001238:	829a      	strh	r2, [r3, #20]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2200      	movs	r2, #0
 800123e:	82da      	strh	r2, [r3, #22]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2200      	movs	r2, #0
 8001244:	619a      	str	r2, [r3, #24]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	61da      	str	r2, [r3, #28]
{
	// Start encoder
	if (interrupt_mode)
 800124e:	7e3b      	ldrb	r3, [r7, #24]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d004      	beq.n	800125e <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0x6e>
	{
		HAL_TIM_Encoder_Start_IT(timer_handle, TIM_CHANNEL_ALL);
 8001254:	213c      	movs	r1, #60	@ 0x3c
 8001256:	68b8      	ldr	r0, [r7, #8]
 8001258:	f003 f84d 	bl	80042f6 <HAL_TIM_Encoder_Start_IT>
 800125c:	e003      	b.n	8001266 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0x76>
	}
	else
	{
		HAL_TIM_Encoder_Start(timer_handle, TIM_CHANNEL_ALL);
 800125e:	213c      	movs	r1, #60	@ 0x3c
 8001260:	68b8      	ldr	r0, [r7, #8]
 8001262:	f002 ff23 	bl	80040ac <HAL_TIM_Encoder_Start>
	}

	// Number of bits for the select timer
	if (timer_bit_size == 32)
 8001266:	797b      	ldrb	r3, [r7, #5]
 8001268:	2b20      	cmp	r3, #32
 800126a:	d104      	bne.n	8001276 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0x86>
	{
		max_count = 0xffffffff;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f04f 32ff 	mov.w	r2, #4294967295
 8001272:	621a      	str	r2, [r3, #32]
 8001274:	e003      	b.n	800127e <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0x8e>
	}
	else
	{
		max_count = 0xffff;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800127c:	621a      	str	r2, [r3, #32]
	}
	half_max_count = max_count/2;
	neg_half_max_count = -half_max_count;
}
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	085b      	lsrs	r3, r3, #1
 8001284:	461a      	mov	r2, r3
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	625a      	str	r2, [r3, #36]	@ 0x24

 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800128e:	425a      	negs	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	629a      	str	r2, [r3, #40]	@ 0x28
void PololuEncoder::update()
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4618      	mov	r0, r3
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	08008bc0 	.word	0x08008bc0

080012a4 <_ZN13PololuEncoder6updateEv>:
{
	// Read encoder
	if (not interrupt_mode)
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	{
		count = __HAL_TIM_GET_COUNTER(timer_handle);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	7c5b      	ldrb	r3, [r3, #17]
 80012b0:	f083 0301 	eor.w	r3, r3, #1
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d006      	beq.n	80012c8 <_ZN13PololuEncoder6updateEv+0x24>
	}
	delta = (int32_t) (count-last_count);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	82da      	strh	r2, [r3, #22]
	last_count = count;

 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	8ada      	ldrh	r2, [r3, #22]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	8a9b      	ldrh	r3, [r3, #20]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	b21a      	sxth	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	825a      	strh	r2, [r3, #18]
	// Fix delta from timer overflow
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	8ada      	ldrh	r2, [r3, #22]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	829a      	strh	r2, [r3, #20]
	if (delta > half_max_count)
	{
		// We've overflowed in the negative direction.
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80012e8:	461a      	mov	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ee:	429a      	cmp	r2, r3
 80012f0:	dd0e      	ble.n	8001310 <_ZN13PololuEncoder6updateEv+0x6c>
		delta -= max_count + 1;
	}
	else if (delta < neg_half_max_count)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a1b      	ldr	r3, [r3, #32]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	b29b      	uxth	r3, r3
 8001304:	3b01      	subs	r3, #1
 8001306:	b29b      	uxth	r3, r3
 8001308:	b21a      	sxth	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	825a      	strh	r2, [r3, #18]
 800130e:	e015      	b.n	800133c <_ZN13PololuEncoder6updateEv+0x98>
	{
	    // We've overflowed in the positive direciton.
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001316:	461a      	mov	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800131c:	429a      	cmp	r2, r3
 800131e:	da0d      	bge.n	800133c <_ZN13PololuEncoder6updateEv+0x98>
		delta += max_count + 1;
	}

 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001326:	b29a      	uxth	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6a1b      	ldr	r3, [r3, #32]
 800132c:	b29b      	uxth	r3, r3
 800132e:	4413      	add	r3, r2
 8001330:	b29b      	uxth	r3, r3
 8001332:	3301      	adds	r3, #1
 8001334:	b29b      	uxth	r3, r3
 8001336:	b21a      	sxth	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	825a      	strh	r2, [r3, #18]
	// Finish up
	position += delta;
}

 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001346:	441a      	add	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	619a      	str	r2, [r3, #24]
void PololuEncoder::zero()
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <_ZN13PololuEncoder9get_speedEm>:
}

float PololuEncoder::get_speed(uint32_t control_frequency_Hz)
{
	float numerator = delta*(float)control_frequency_Hz*60;
	float denominator = (float)CPR*gear_ratio;
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
    speed = numerator/denominator; //RPM
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001368:	ee07 3a90 	vmov	s15, r3
 800136c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	ee07 3a90 	vmov	s15, r3
 8001376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800137a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800137e:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80013d0 <_ZN13PololuEncoder9get_speedEm+0x78>
 8001382:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001386:	edc7 7a03 	vstr	s15, [r7, #12]
    return speed;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001390:	ee07 3a90 	vmov	s15, r3
 8001394:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	edd3 7a03 	vldr	s15, [r3, #12]
 800139e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013a2:	edc7 7a02 	vstr	s15, [r7, #8]
}
 80013a6:	edd7 6a03 	vldr	s13, [r7, #12]
 80013aa:	ed97 7a02 	vldr	s14, [r7, #8]
 80013ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	edc3 7a07 	vstr	s15, [r3, #28]

 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	69db      	ldr	r3, [r3, #28]
 80013bc:	ee07 3a90 	vmov	s15, r3
void PololuEncoder::debug_message(UART_HandleTypeDef* uart_handle)
 80013c0:	eeb0 0a67 	vmov.f32	s0, s15
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	42700000 	.word	0x42700000

080013d4 <_ZN13PololuEncoder13debug_messageEP20__UART_HandleTypeDef>:
{
	#define VALUE_WIDTH 5
	#define MESSAGE_LENGTH 100
 80013d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013d6:	b0a5      	sub	sp, #148	@ 0x94
 80013d8:	af08      	add	r7, sp, #32
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
	char my_message[MESSAGE_LENGTH] = "";
    int string_length = snprintf(my_message, MESSAGE_LENGTH, "Encoder cnt: %*i, pos: %*li, delta: %*i, speed: %*.3f RPM.\r\n",
                             VALUE_WIDTH, count,
 80013de:	2300      	movs	r3, #0
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	f107 030c 	add.w	r3, r7, #12
 80013e6:	2260      	movs	r2, #96	@ 0x60
 80013e8:	2100      	movs	r1, #0
 80013ea:	4618      	mov	r0, r3
 80013ec:	f005 fb77 	bl	8006ade <memset>
                             VALUE_WIDTH, position,
                             VALUE_WIDTH, delta,
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	8adb      	ldrh	r3, [r3, #22]
                             VALUE_WIDTH, position,
 80013f4:	461d      	mov	r5, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	699c      	ldr	r4, [r3, #24]
							 VALUE_WIDTH+3, speed);
    HAL_UART_Transmit(uart_handle, (uint8_t*)my_message, string_length, HAL_MAX_DELAY);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
                             VALUE_WIDTH, position,
 8001400:	461e      	mov	r6, r3
}
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69db      	ldr	r3, [r3, #28]
                             VALUE_WIDTH, position,
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f8a6 	bl	8000558 <__aeabi_f2d>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	f107 0008 	add.w	r0, r7, #8
 8001414:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001418:	2308      	movs	r3, #8
 800141a:	9305      	str	r3, [sp, #20]
 800141c:	9604      	str	r6, [sp, #16]
 800141e:	2305      	movs	r3, #5
 8001420:	9303      	str	r3, [sp, #12]
 8001422:	9402      	str	r4, [sp, #8]
 8001424:	2305      	movs	r3, #5
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	9500      	str	r5, [sp, #0]
 800142a:	2305      	movs	r3, #5
 800142c:	4a08      	ldr	r2, [pc, #32]	@ (8001450 <_ZN13PololuEncoder13debug_messageEP20__UART_HandleTypeDef+0x7c>)
 800142e:	2164      	movs	r1, #100	@ 0x64
 8001430:	f005 fabe 	bl	80069b0 <sniprintf>
 8001434:	66f8      	str	r0, [r7, #108]	@ 0x6c

 8001436:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001438:	b29a      	uxth	r2, r3
 800143a:	f107 0108 	add.w	r1, r7, #8
 800143e:	f04f 33ff 	mov.w	r3, #4294967295
 8001442:	6838      	ldr	r0, [r7, #0]
 8001444:	f004 f8fa 	bl	800563c <HAL_UART_Transmit>
PololuEncoder::~PololuEncoder()
 8001448:	bf00      	nop
 800144a:	3774      	adds	r7, #116	@ 0x74
 800144c:	46bd      	mov	sp, r7
 800144e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001450:	08008b50 	.word	0x08008b50

08001454 <_ZN13PololuEncoderD1Ev>:
{
	// TODO Auto-generated destructor stub
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	4a0c      	ldr	r2, [pc, #48]	@ (8001490 <_ZN13PololuEncoderD1Ev+0x3c>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	601a      	str	r2, [r3, #0]
}

 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	7c5b      	ldrb	r3, [r3, #17]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d006      	beq.n	8001478 <_ZN13PololuEncoderD1Ev+0x24>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	213c      	movs	r1, #60	@ 0x3c
 8001470:	4618      	mov	r0, r3
 8001472:	f002 ffee 	bl	8004452 <HAL_TIM_Encoder_Stop_IT>
 8001476:	e005      	b.n	8001484 <_ZN13PololuEncoderD1Ev+0x30>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	213c      	movs	r1, #60	@ 0x3c
 800147e:	4618      	mov	r0, r3
 8001480:	f002 fea2 	bl	80041c8 <HAL_TIM_Encoder_Stop>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4618      	mov	r0, r3
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	08008bc0 	.word	0x08008bc0

08001494 <_ZN13PololuEncoderD0Ev>:
	// TODO Auto-generated destructor stub
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff ffd9 	bl	8001454 <_ZN13PololuEncoderD1Ev>
 80014a2:	212c      	movs	r1, #44	@ 0x2c
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f004 fc85 	bl	8005db4 <_ZdlPvj>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb>:
 * @param neutral_us_width Width of the neutral signal in microseconds.
 * @param full_forward_us_width Width of the full forward signal in microseconds.
 * @param rescale_forward_magnitude Maximum value for rescaling the forward signal. Overridden if fed into RemoteControlControl.
 * @param rescale_reverse_magnitude Minimum value for rescaling the reverse signal. Overridden if fed into RemoteControlControl.
 */
RCChannel::RCChannel(
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	4613      	mov	r3, r2
 80014c2:	80fb      	strh	r3, [r7, #6]
	full_reverse_us_width(full_reverse_us_width),
	neutral_us_width(neutral_us_width),
	full_forward_us_width(full_forward_us_width),
	rescale_forward_magnitude(rescale_forward_magnitude),
	rescale_reverse_magnitude(rescale_reverse_magnitude),
	saturate(saturate)
 80014c4:	4a3c      	ldr	r2, [pc, #240]	@ (80015b8 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0x104>)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2200      	movs	r2, #0
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2200      	movs	r2, #0
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2200      	movs	r2, #0
 80014e6:	615a      	str	r2, [r3, #20]
	pin_group(pin_group),
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	619a      	str	r2, [r3, #24]
	pin(pin),
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	88fa      	ldrh	r2, [r7, #6]
 80014f2:	839a      	strh	r2, [r3, #28]
	timer_handle(timer_handle),
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	683a      	ldr	r2, [r7, #0]
 80014f8:	621a      	str	r2, [r3, #32]
	timer_channel(timer_channel),
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6a3a      	ldr	r2, [r7, #32]
 80014fe:	625a      	str	r2, [r3, #36]	@ 0x24
	RC_signal_period_us(RC_signal_period_us),
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001504:	629a      	str	r2, [r3, #40]	@ 0x28
	CPU_clock_speed_MHz(CPU_clock_speed_MHz),
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800150a:	62da      	str	r2, [r3, #44]	@ 0x2c
	full_reverse_us_width(full_reverse_us_width),
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001510:	631a      	str	r2, [r3, #48]	@ 0x30
	neutral_us_width(neutral_us_width),
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001516:	635a      	str	r2, [r3, #52]	@ 0x34
	full_forward_us_width(full_forward_us_width),
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800151c:	639a      	str	r2, [r3, #56]	@ 0x38
	rescale_forward_magnitude(rescale_forward_magnitude),
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001522:	63da      	str	r2, [r3, #60]	@ 0x3c
	rescale_reverse_magnitude(rescale_reverse_magnitude),
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001528:	641a      	str	r2, [r3, #64]	@ 0x40
	saturate(saturate)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001530:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
{
	// Critical. Starts the first interrupt.
	HAL_TIM_IC_Start_IT(timer_handle, timer_channel);
 800153c:	6a39      	ldr	r1, [r7, #32]
 800153e:	6838      	ldr	r0, [r7, #0]
 8001540:	f002 fb46 	bl	8003bd0 <HAL_TIM_IC_Start_IT>

	// Set minuend depending on whether it's a 16-bit or 32-bit timer.
	// This is specific to the STM32F411CUE6!!
	if (((timer_handle->Instance) == TIM2) or ((timer_handle->Instance) == TIM5))
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800154c:	d004      	beq.n	8001558 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0xa4>
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a1a      	ldr	r2, [pc, #104]	@ (80015bc <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0x108>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d104      	bne.n	8001562 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0xae>
	{
		minuend = 0xffffffff;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f04f 32ff 	mov.w	r2, #4294967295
 800155e:	649a      	str	r2, [r3, #72]	@ 0x48
 8001560:	e003      	b.n	800156a <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0xb6>
	}
	else
	{
		minuend = 0xffff;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001568:	649a      	str	r2, [r3, #72]	@ 0x48
	}

	// For later scaling
	uint32_t prescalar = timer_handle->Instance->PSC + 1;
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001570:	3301      	adds	r3, #1
 8001572:	617b      	str	r3, [r7, #20]
	float refClock = CPU_clock_speed_MHz/prescalar;
 8001574:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	fbb2 f3f3 	udiv	r3, r2, r3
 800157c:	ee07 3a90 	vmov	s15, r3
 8001580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001584:	edc7 7a04 	vstr	s15, [r7, #16]
	mFactor = 1/refClock;
 8001588:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800158c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001590:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

	// Needed later
	forward_range = full_forward_us_width - neutral_us_width;
 800159a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800159c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800159e:	1ad2      	subs	r2, r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	659a      	str	r2, [r3, #88]	@ 0x58
	reverse_range = neutral_us_width - full_reverse_us_width;
 80015a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80015a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015a8:	1ad2      	subs	r2, r2, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	655a      	str	r2, [r3, #84]	@ 0x54
}
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	08008bd0 	.word	0x08008bd0
 80015bc:	40000c00 	.word	0x40000c00

080015c0 <_ZN9RCChannel8callbackEv>:
 * 
 * @note This function assumes that the timer handle and channel have been properly initialized.
 * Please set the associated timer channel to input capture mode, direct. 
 * Leave the auto-reload value as large as possible.
 */
void RCChannel::callback(){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	// Was it a rising edge or a falling edge?
	GPIO_PinState pinState = HAL_GPIO_ReadPin(pin_group, pin);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	699a      	ldr	r2, [r3, #24]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	8b9b      	ldrh	r3, [r3, #28]
 80015d0:	4619      	mov	r1, r3
 80015d2:	4610      	mov	r0, r2
 80015d4:	f001 fc2a 	bl	8002e2c <HAL_GPIO_ReadPin>
 80015d8:	4603      	mov	r3, r0
 80015da:	73fb      	strb	r3, [r7, #15]

	if(pinState == GPIO_PIN_SET) // Rising edge
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d10c      	bne.n	80015fc <_ZN9RCChannel8callbackEv+0x3c>
		{
			// Read
			first_value = HAL_TIM_ReadCapturedValue(timer_handle, timer_channel);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a1a      	ldr	r2, [r3, #32]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ea:	4619      	mov	r1, r3
 80015ec:	4610      	mov	r0, r2
 80015ee:	f003 fafb 	bl	8004be8 <HAL_TIM_ReadCapturedValue>
 80015f2:	4603      	mov	r3, r0
 80015f4:	461a      	mov	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	605a      	str	r2, [r3, #4]
		}

 	// Finally
 	first_capture = true;
 	}
}
 80015fa:	e07a      	b.n	80016f2 <_ZN9RCChannel8callbackEv+0x132>
 		second_value = HAL_TIM_ReadCapturedValue(timer_handle, timer_channel);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a1a      	ldr	r2, [r3, #32]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001604:	4619      	mov	r1, r3
 8001606:	4610      	mov	r0, r2
 8001608:	f003 faee 	bl	8004be8 <HAL_TIM_ReadCapturedValue>
 800160c:	4603      	mov	r3, r0
 800160e:	461a      	mov	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	609a      	str	r2, [r3, #8]
 		if(first_value > second_value)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685a      	ldr	r2, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	429a      	cmp	r2, r3
 800161e:	dd0c      	ble.n	800163a <_ZN9RCChannel8callbackEv+0x7a>
 			difference = minuend - first_value + second_value + 1;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	6852      	ldr	r2, [r2, #4]
 8001628:	1a9b      	subs	r3, r3, r2
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	6892      	ldr	r2, [r2, #8]
 800162e:	4413      	add	r3, r2
 8001630:	3301      	adds	r3, #1
 8001632:	461a      	mov	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	60da      	str	r2, [r3, #12]
 8001638:	e006      	b.n	8001648 <_ZN9RCChannel8callbackEv+0x88>
 			difference = second_value - first_value;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	1ad2      	subs	r2, r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	60da      	str	r2, [r3, #12]
 		us_width = difference;//*mFactor;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68da      	ldr	r2, [r3, #12]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	611a      	str	r2, [r3, #16]
		int32_t centered_value = us_width - neutral_us_width;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691a      	ldr	r2, [r3, #16]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	60bb      	str	r3, [r7, #8]
 		if(centered_value >= 0)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	2b00      	cmp	r3, #0
 8001660:	db23      	blt.n	80016aa <_ZN9RCChannel8callbackEv+0xea>
 			value = centered_value*rescale_forward_magnitude/forward_range;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	fb03 f202 	mul.w	r2, r3, r2
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001670:	fb92 f2f3 	sdiv	r2, r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	615a      	str	r2, [r3, #20]
			if(value>rescale_forward_magnitude && saturate)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	695a      	ldr	r2, [r3, #20]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001680:	429a      	cmp	r2, r3
 8001682:	dd0d      	ble.n	80016a0 <_ZN9RCChannel8callbackEv+0xe0>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800168a:	2b00      	cmp	r3, #0
 800168c:	d008      	beq.n	80016a0 <_ZN9RCChannel8callbackEv+0xe0>
				value = rescale_forward_magnitude;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	615a      	str	r2, [r3, #20]
	 			saturate_flag = true;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800169e:	e024      	b.n	80016ea <_ZN9RCChannel8callbackEv+0x12a>
	 			saturate_flag = false;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80016a8:	e01f      	b.n	80016ea <_ZN9RCChannel8callbackEv+0x12a>
			value =  centered_value*rescale_reverse_magnitude/reverse_range;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	68ba      	ldr	r2, [r7, #8]
 80016b0:	fb03 f202 	mul.w	r2, r3, r2
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016b8:	fb92 f2f3 	sdiv	r2, r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	615a      	str	r2, [r3, #20]
	 		if(value<-rescale_reverse_magnitude)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	695a      	ldr	r2, [r3, #20]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c8:	425b      	negs	r3, r3
 80016ca:	429a      	cmp	r2, r3
 80016cc:	da09      	bge.n	80016e2 <_ZN9RCChannel8callbackEv+0x122>
	 			value = -rescale_reverse_magnitude;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	425a      	negs	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	615a      	str	r2, [r3, #20]
	 			saturate_flag = true;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80016e0:	e003      	b.n	80016ea <_ZN9RCChannel8callbackEv+0x12a>
	 			saturate_flag = false;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 	first_capture = true;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2201      	movs	r2, #1
 80016ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <_ZN9RCChannelD1Ev>:
/**
 * @brief Destructor for the RCChannel class.
 * 
 * This destructor stops the interrupts for the RCChannel object.
 */
RCChannel::~RCChannel() {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	4a07      	ldr	r2, [pc, #28]	@ (8001724 <_ZN9RCChannelD1Ev+0x28>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	601a      	str	r2, [r3, #0]
	// Stop interrupts
	HAL_TIM_IC_Stop_IT(timer_handle, timer_channel);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a1a      	ldr	r2, [r3, #32]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001712:	4619      	mov	r1, r3
 8001714:	4610      	mov	r0, r2
 8001716:	f002 fb75 	bl	8003e04 <HAL_TIM_IC_Stop_IT>
}
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4618      	mov	r0, r3
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	08008bd0 	.word	0x08008bd0

08001728 <_ZN9RCChannelD0Ev>:
RCChannel::~RCChannel() {
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
}
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff ffe3 	bl	80016fc <_ZN9RCChannelD1Ev>
 8001736:	215c      	movs	r1, #92	@ 0x5c
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f004 fb3b 	bl	8005db4 <_ZdlPvj>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}

08001748 <_ZN20RemoteControlControlC1EP9RCChannelP12MotorControlt>:
/**
 * @brief Constructs a RemoteControlControl object with the given remote control channel and motor driver.
 * @param rc_channel Pointer to the RCChannel object.
 * @param motor Pointer to a TB6612FNG_Motor object.
 */
RemoteControlControl::RemoteControlControl(
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
 8001754:	807b      	strh	r3, [r7, #2]
		RCChannel* rc_channel,
		MotorControl* motor_controller,
		uint16_t maximum_speed)
	: rc_channel(rc_channel),
	  motor_controller(motor_controller),
	  maximum_speed(maximum_speed)
 8001756:	4a09      	ldr	r2, [pc, #36]	@ (800177c <_ZN20RemoteControlControlC1EP9RCChannelP12MotorControlt+0x34>)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	601a      	str	r2, [r3, #0]
	: rc_channel(rc_channel),
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	605a      	str	r2, [r3, #4]
	  motor_controller(motor_controller),
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	609a      	str	r2, [r3, #8]
	  maximum_speed(maximum_speed)
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	887a      	ldrh	r2, [r7, #2]
 800176c:	819a      	strh	r2, [r3, #12]
{
//	// Reassign the magnitudes.
//	rc_channel->rescale_forward_magnitude = maximum_speed;
//	rc_channel->rescale_reverse_magnitude = maximum_speed;
}
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	4618      	mov	r0, r3
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr
 800177c:	08008be0 	.word	0x08008be0

08001780 <_ZN20RemoteControlControlD1Ev>:
}

/**
 * @brief Destructs the RemoteControlControl object and releases any dynamically allocated resources.
 */
RemoteControlControl::~RemoteControlControl()
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	4a13      	ldr	r2, [pc, #76]	@ (80017d8 <_ZN20RemoteControlControlD1Ev+0x58>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	601a      	str	r2, [r3, #0]
{
	// Deallocate memory for rc_channel if it was dynamically allocated
	if (rc_channel != nullptr)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d00b      	beq.n	80017ae <_ZN20RemoteControlControlD1Ev+0x2e>
	{
		delete rc_channel;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d004      	beq.n	80017a8 <_ZN20RemoteControlControlD1Ev+0x28>
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	3204      	adds	r2, #4
 80017a2:	6812      	ldr	r2, [r2, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	4790      	blx	r2
		rc_channel = nullptr; // Optional: Set to nullptr to avoid dangling pointers
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	605a      	str	r2, [r3, #4]
	}

	// Deallocate memory for motor if it was dynamically allocated
	if (motor_controller != nullptr)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00b      	beq.n	80017ce <_ZN20RemoteControlControlD1Ev+0x4e>
	{
		delete motor_controller;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d004      	beq.n	80017c8 <_ZN20RemoteControlControlD1Ev+0x48>
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	3204      	adds	r2, #4
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	4790      	blx	r2
		motor_controller = nullptr; // Optional: Set to nullptr to avoid dangling pointers
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
	}
}
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4618      	mov	r0, r3
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	08008be0 	.word	0x08008be0

080017dc <_ZN20RemoteControlControlD0Ev>:
RemoteControlControl::~RemoteControlControl()
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
}
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff ffcb 	bl	8001780 <_ZN20RemoteControlControlD1Ev>
 80017ea:	2114      	movs	r1, #20
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f004 fae1 	bl	8005db4 <_ZdlPvj>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4618      	mov	r0, r3
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm>:
 * @param timer_channel The channel number to be used with the timer (like TIM_CHANNEL_1).
 * @param CPU_clock_speed_MHz The CPU clock speed in MHz (like 96).
 * @param PWM_frequency_Hz The PWM frequency in Hz (20,000 to 100,000 allowed).
 */

TB6612FNG_Motor::TB6612FNG_Motor(
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	603b      	str	r3, [r7, #0]
 8001808:	4613      	mov	r3, r2
 800180a:	80fb      	strh	r3, [r7, #6]

	: IN1_pin_group(IN1_pin_group), IN1_pin(IN1_pin),
	  IN2_pin_group(IN2_pin_group), IN2_pin(IN2_pin),
	  pTimer(pTimer), timer_channel(timer_channel),
	  CPU_clock_speed_MHz(CPU_clock_speed_MHz),
	  PWM_frequency_Hz(PWM_frequency_Hz)
 800180c:	4a23      	ldr	r2, [pc, #140]	@ (800189c <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa0>)
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	601a      	str	r2, [r3, #0]
	: IN1_pin_group(IN1_pin_group), IN1_pin(IN1_pin),
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	68ba      	ldr	r2, [r7, #8]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	88fa      	ldrh	r2, [r7, #6]
 800181c:	811a      	strh	r2, [r3, #8]
	  IN2_pin_group(IN2_pin_group), IN2_pin(IN2_pin),
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	60da      	str	r2, [r3, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	8b3a      	ldrh	r2, [r7, #24]
 8001828:	821a      	strh	r2, [r3, #16]
	  pTimer(pTimer), timer_channel(timer_channel),
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	69fa      	ldr	r2, [r7, #28]
 800182e:	615a      	str	r2, [r3, #20]
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6a3a      	ldr	r2, [r7, #32]
 8001834:	619a      	str	r2, [r3, #24]
	  CPU_clock_speed_MHz(CPU_clock_speed_MHz),
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800183a:	61da      	str	r2, [r3, #28]
	  PWM_frequency_Hz(PWM_frequency_Hz)
 800183c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800183e:	b29a      	uxth	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	841a      	strh	r2, [r3, #32]
{
	// Make sure the motor is off to start
	stop();
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	f000 f8d0 	bl	80019ea <_ZN15TB6612FNG_Motor4stopEv>

	// Make sure the PWM frequency is within bounds
	if(PWM_frequency_Hz < 20000)
 800184a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800184c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001850:	4293      	cmp	r3, r2
 8001852:	d803      	bhi.n	800185c <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0x60>
	{
		// Too low. Human can hear this.
		PWM_frequency_Hz = 20000;
 8001854:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001858:	62bb      	str	r3, [r7, #40]	@ 0x28
 800185a:	e005      	b.n	8001868 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0x6c>
	}
	else if(PWM_frequency_Hz > 100000)
 800185c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800185e:	4a10      	ldr	r2, [pc, #64]	@ (80018a0 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa4>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d901      	bls.n	8001868 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0x6c>
	{
		// Very high. May interfere with other tasks.
		PWM_frequency_Hz = 100000;
 8001864:	4b0e      	ldr	r3, [pc, #56]	@ (80018a0 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa4>)
 8001866:	62bb      	str	r3, [r7, #40]	@ 0x28
	}

	// Set the auto-reload value based on the CPU clock speed and the desired PWM frequency
	auto_reload_value =( CPU_clock_speed_MHz * 1000000 / PWM_frequency_Hz ) - 1;
 8001868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800186a:	4a0e      	ldr	r2, [pc, #56]	@ (80018a4 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa8>)
 800186c:	fb03 f202 	mul.w	r2, r3, r2
 8001870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001872:	fbb2 f3f3 	udiv	r3, r2, r3
 8001876:	b29b      	uxth	r3, r3
 8001878:	3b01      	subs	r3, #1
 800187a:	b29a      	uxth	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	845a      	strh	r2, [r3, #34]	@ 0x22
	pTimer->Init.AutoReloadPreload = auto_reload_value;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001884:	461a      	mov	r2, r3
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	619a      	str	r2, [r3, #24]

	// Start the PWM generation
	start();
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f000 f89d 	bl	80019ca <_ZN15TB6612FNG_Motor5startEv>
}
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	08008bf0 	.word	0x08008bf0
 80018a0:	000186a0 	.word	0x000186a0
 80018a4:	000f4240 	.word	0x000f4240

080018a8 <_ZN15TB6612FNG_MotorD1Ev>:

/**
 * @brief Destructor for the TB6612FNG_Motor class.
 */
TB6612FNG_Motor::~TB6612FNG_Motor()
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	4a05      	ldr	r2, [pc, #20]	@ (80018c8 <_ZN15TB6612FNG_MotorD1Ev+0x20>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	601a      	str	r2, [r3, #0]
{
	stop();
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 f897 	bl	80019ea <_ZN15TB6612FNG_Motor4stopEv>
}
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	08008bf0 	.word	0x08008bf0

080018cc <_ZN15TB6612FNG_MotorD0Ev>:
TB6612FNG_Motor::~TB6612FNG_Motor()
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
}
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ffe7 	bl	80018a8 <_ZN15TB6612FNG_MotorD1Ev>
 80018da:	2124      	movs	r1, #36	@ 0x24
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f004 fa69 	bl	8005db4 <_ZdlPvj>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4618      	mov	r0, r3
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <_ZN15TB6612FNG_Motor8set_dutyEss>:
/**
 * @brief Sets the duty cycle of the motor.
 * @param speed The duty cycle value, ranging from -100 to 100 by default.
 */
void TB6612FNG_Motor::set_duty(int16_t duty, int16_t maximum_value)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	460b      	mov	r3, r1
 80018f6:	807b      	strh	r3, [r7, #2]
 80018f8:	4613      	mov	r3, r2
 80018fa:	803b      	strh	r3, [r7, #0]
	// Raise the appropriate pins
	if(duty >= 0)
 80018fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001900:	2b00      	cmp	r3, #0
 8001902:	db10      	blt.n	8001926 <_ZN15TB6612FNG_Motor8set_dutyEss+0x3a>
	{
		HAL_GPIO_WritePin(IN1_pin_group, IN1_pin, GPIO_PIN_SET);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6858      	ldr	r0, [r3, #4]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	891b      	ldrh	r3, [r3, #8]
 800190c:	2201      	movs	r2, #1
 800190e:	4619      	mov	r1, r3
 8001910:	f001 faa4 	bl	8002e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_pin_group, IN2_pin, GPIO_PIN_RESET);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68d8      	ldr	r0, [r3, #12]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	8a1b      	ldrh	r3, [r3, #16]
 800191c:	2200      	movs	r2, #0
 800191e:	4619      	mov	r1, r3
 8001920:	f001 fa9c 	bl	8002e5c <HAL_GPIO_WritePin>
 8001924:	e00f      	b.n	8001946 <_ZN15TB6612FNG_Motor8set_dutyEss+0x5a>
	}
	else
	{
		HAL_GPIO_WritePin(IN1_pin_group, IN1_pin, GPIO_PIN_RESET);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6858      	ldr	r0, [r3, #4]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	891b      	ldrh	r3, [r3, #8]
 800192e:	2200      	movs	r2, #0
 8001930:	4619      	mov	r1, r3
 8001932:	f001 fa93 	bl	8002e5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_pin_group, IN2_pin, GPIO_PIN_SET);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68d8      	ldr	r0, [r3, #12]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	8a1b      	ldrh	r3, [r3, #16]
 800193e:	2201      	movs	r2, #1
 8001940:	4619      	mov	r1, r3
 8001942:	f001 fa8b 	bl	8002e5c <HAL_GPIO_WritePin>
	}

	uint16_t duty_magnitude;
	if(duty<0)
 8001946:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800194a:	2b00      	cmp	r3, #0
 800194c:	da03      	bge.n	8001956 <_ZN15TB6612FNG_Motor8set_dutyEss+0x6a>
	{
		duty_magnitude = duty*-1;
 800194e:	887b      	ldrh	r3, [r7, #2]
 8001950:	425b      	negs	r3, r3
 8001952:	81fb      	strh	r3, [r7, #14]
 8001954:	e001      	b.n	800195a <_ZN15TB6612FNG_Motor8set_dutyEss+0x6e>
	}
	else
	{
		duty_magnitude = duty;
 8001956:	887b      	ldrh	r3, [r7, #2]
 8001958:	81fb      	strh	r3, [r7, #14]
	}

	// Check if duty cycle is within bounds
	if(duty_magnitude > maximum_value)
 800195a:	89fa      	ldrh	r2, [r7, #14]
 800195c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001960:	429a      	cmp	r2, r3
 8001962:	dd01      	ble.n	8001968 <_ZN15TB6612FNG_Motor8set_dutyEss+0x7c>
	{
		duty = maximum_value;
 8001964:	883b      	ldrh	r3, [r7, #0]
 8001966:	807b      	strh	r3, [r7, #2]
	}


	// Set the compare value
	uint16_t compare_value = duty_magnitude * auto_reload_value / maximum_value;
 8001968:	89fb      	ldrh	r3, [r7, #14]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800196e:	fb03 f202 	mul.w	r2, r3, r2
 8001972:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001976:	fb92 f3f3 	sdiv	r3, r2, r3
 800197a:	81bb      	strh	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(pTimer, timer_channel, compare_value);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d105      	bne.n	8001990 <_ZN15TB6612FNG_Motor8set_dutyEss+0xa4>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	89ba      	ldrh	r2, [r7, #12]
 800198c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800198e:	e018      	b.n	80019c2 <_ZN15TB6612FNG_Motor8set_dutyEss+0xd6>
	__HAL_TIM_SET_COMPARE(pTimer, timer_channel, compare_value);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	2b04      	cmp	r3, #4
 8001996:	d105      	bne.n	80019a4 <_ZN15TB6612FNG_Motor8set_dutyEss+0xb8>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	89ba      	ldrh	r2, [r7, #12]
 80019a0:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80019a2:	e00e      	b.n	80019c2 <_ZN15TB6612FNG_Motor8set_dutyEss+0xd6>
	__HAL_TIM_SET_COMPARE(pTimer, timer_channel, compare_value);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d105      	bne.n	80019b8 <_ZN15TB6612FNG_Motor8set_dutyEss+0xcc>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	695b      	ldr	r3, [r3, #20]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	89ba      	ldrh	r2, [r7, #12]
 80019b4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80019b6:	e004      	b.n	80019c2 <_ZN15TB6612FNG_Motor8set_dutyEss+0xd6>
	__HAL_TIM_SET_COMPARE(pTimer, timer_channel, compare_value);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	89ba      	ldrh	r2, [r7, #12]
 80019c0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <_ZN15TB6612FNG_Motor5startEv>:

/**
 * @brief starts the motor by starting PWM generation.
 */
void TB6612FNG_Motor::start()
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(pTimer, timer_channel);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	695a      	ldr	r2, [r3, #20]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	4619      	mov	r1, r3
 80019dc:	4610      	mov	r0, r2
 80019de:	f001 ff89 	bl	80038f4 <HAL_TIM_PWM_Start>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <_ZN15TB6612FNG_Motor4stopEv>:

/**
 * @brief stops the motor by stopping PWM generation.
 */
void TB6612FNG_Motor::stop()
{	
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(IN1_pin_group, IN1_pin, GPIO_PIN_RESET);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6858      	ldr	r0, [r3, #4]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	891b      	ldrh	r3, [r3, #8]
 80019fa:	2200      	movs	r2, #0
 80019fc:	4619      	mov	r1, r3
 80019fe:	f001 fa2d 	bl	8002e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_pin_group, IN2_pin, GPIO_PIN_RESET);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	68d8      	ldr	r0, [r3, #12]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	8a1b      	ldrh	r3, [r3, #16]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f001 fa25 	bl	8002e5c <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(pTimer, timer_channel);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	695a      	ldr	r2, [r3, #20]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	699b      	ldr	r3, [r3, #24]
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4610      	mov	r0, r2
 8001a1e:	f002 f819 	bl	8003a54 <HAL_TIM_PWM_Stop>
}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <HAL_GPIO_EXTI_Callback>:
RemoteControlControl* Throttle;
RemoteControlControl* Steering;
PololuEncoder* My_Encoder;
MotorControl* My_Controller;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN) {
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	80fb      	strh	r3, [r7, #6]
   // Your interrupt handling code here
	if(GPIO_PIN == GPIO_PIN_13)
 8001a36:	88fb      	ldrh	r3, [r7, #6]
 8001a38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a3c:	d10f      	bne.n	8001a5e <HAL_GPIO_EXTI_Callback+0x32>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8001a3e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001a42:	4809      	ldr	r0, [pc, #36]	@ (8001a68 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001a44:	f001 fa23 	bl	8002e8e <HAL_GPIO_TogglePin>
		sprintf(my_message, "Interrupt triggered.\r\n");
 8001a48:	4908      	ldr	r1, [pc, #32]	@ (8001a6c <HAL_GPIO_EXTI_Callback+0x40>)
 8001a4a:	4809      	ldr	r0, [pc, #36]	@ (8001a70 <HAL_GPIO_EXTI_Callback+0x44>)
 8001a4c:	f004 ffe4 	bl	8006a18 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)my_message, MESSAGE_LENGTH, HAL_MAX_DELAY);
 8001a50:	f04f 33ff 	mov.w	r3, #4294967295
 8001a54:	2264      	movs	r2, #100	@ 0x64
 8001a56:	4906      	ldr	r1, [pc, #24]	@ (8001a70 <HAL_GPIO_EXTI_Callback+0x44>)
 8001a58:	4806      	ldr	r0, [pc, #24]	@ (8001a74 <HAL_GPIO_EXTI_Callback+0x48>)
 8001a5a:	f003 fdef 	bl	800563c <HAL_UART_Transmit>
	}
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40020400 	.word	0x40020400
 8001a6c:	08008b90 	.word	0x08008b90
 8001a70:	20000310 	.word	0x20000310
 8001a74:	200002c8 	.word	0x200002c8

08001a78 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
//	sprintf(my_message, "Timer input capture callback.\r\n");
//	HAL_UART_Transmit(&huart2, (uint8_t*)my_message, MESSAGE_LENGTH, HAL_MAX_DELAY);
	if (initialized) // Timers must be initalized before this code can run successfully.
 8001a80:	4b12      	ldr	r3, [pc, #72]	@ (8001acc <HAL_TIM_IC_CaptureCallback+0x54>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d01d      	beq.n	8001ac4 <HAL_TIM_IC_CaptureCallback+0x4c>
		{
			if((htim->Instance = TIM1))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a11      	ldr	r2, [pc, #68]	@ (8001ad0 <HAL_TIM_IC_CaptureCallback+0x58>)
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	bf14      	ite	ne
 8001a96:	2301      	movne	r3, #1
 8001a98:	2300      	moveq	r3, #0
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d011      	beq.n	8001ac4 <HAL_TIM_IC_CaptureCallback+0x4c>
			{
				if ( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 )
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	7f1b      	ldrb	r3, [r3, #28]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d104      	bne.n	8001ab2 <HAL_TIM_IC_CaptureCallback+0x3a>
				{
					// Handle channel
					SteeringChannel->callback();
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad4 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff fd87 	bl	80015c0 <_ZN9RCChannel8callbackEv>
				}

				if ( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	7f1b      	ldrb	r3, [r3, #28]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d104      	bne.n	8001ac4 <HAL_TIM_IC_CaptureCallback+0x4c>
				{
					// Handle channel
					ThrottleChannel->callback();
 8001aba:	4b07      	ldr	r3, [pc, #28]	@ (8001ad8 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fd7e 	bl	80015c0 <_ZN9RCChannel8callbackEv>
					//Throttle->update_motor();
				}
			}
		}
}
 8001ac4:	bf00      	nop
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20000374 	.word	0x20000374
 8001ad0:	40010000 	.word	0x40010000
 8001ad4:	20000380 	.word	0x20000380
 8001ad8:	2000037c 	.word	0x2000037c

08001adc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a07      	ldr	r2, [pc, #28]	@ (8001b08 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d106      	bne.n	8001afc <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		My_Encoder->count = __HAL_TIM_GET_COUNTER(htim);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001af4:	4b05      	ldr	r3, [pc, #20]	@ (8001b0c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	b292      	uxth	r2, r2
 8001afa:	82da      	strh	r2, [r3, #22]
	}
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	40000c00 	.word	0x40000c00
 8001b0c:	20000388 	.word	0x20000388

08001b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b10:	b590      	push	{r4, r7, lr}
 8001b12:	b08d      	sub	sp, #52	@ 0x34
 8001b14:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b16:	f000 fe5d 	bl	80027d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b1a:	f000 f8f3 	bl	8001d04 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b1e:	f000 fb19 	bl	8002154 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8001b22:	f000 fae9 	bl	80020f8 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 8001b26:	f000 f9fb 	bl	8001f20 <_ZL12MX_TIM2_Initv>
  MX_TIM5_Init();
 8001b2a:	f000 fa87 	bl	800203c <_ZL12MX_TIM5_Initv>
  MX_TIM1_Init();
 8001b2e:	f000 f95b 	bl	8001de8 <_ZL12MX_TIM1_Initv>
  My_Motor = new TB6612FNG_Motor(
		  GPIOB, GPIO_PIN_14,
		  GPIOB, GPIO_PIN_15,
		  &htim2, TIM_CHANNEL_1,
		  CPU_CLOCK_MHZ,
		  MOTOR_PWM_HZ);
 8001b32:	2024      	movs	r0, #36	@ 0x24
 8001b34:	f004 f940 	bl	8005db8 <_Znwj>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	461c      	mov	r4, r3
 8001b3c:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001b40:	9304      	str	r3, [sp, #16]
 8001b42:	2364      	movs	r3, #100	@ 0x64
 8001b44:	9303      	str	r3, [sp, #12]
 8001b46:	2300      	movs	r3, #0
 8001b48:	9302      	str	r3, [sp, #8]
 8001b4a:	4b5c      	ldr	r3, [pc, #368]	@ (8001cbc <main+0x1ac>)
 8001b4c:	9301      	str	r3, [sp, #4]
 8001b4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	4b5a      	ldr	r3, [pc, #360]	@ (8001cc0 <main+0x1b0>)
 8001b56:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b5a:	4959      	ldr	r1, [pc, #356]	@ (8001cc0 <main+0x1b0>)
 8001b5c:	4620      	mov	r0, r4
 8001b5e:	f7ff fe4d 	bl	80017fc <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm>
  My_Motor = new TB6612FNG_Motor(
 8001b62:	4b58      	ldr	r3, [pc, #352]	@ (8001cc4 <main+0x1b4>)
 8001b64:	601c      	str	r4, [r3, #0]
  		  1520,      // Calibrated neutral
  		  2035,      // Calibrated full left
  		  10000,       // New max positive
		  10000,       // New max negative (magnitude)
		  true     // Saturate if signal is over full? True by default. False good for debugging.
		  );
 8001b66:	205c      	movs	r0, #92	@ 0x5c
 8001b68:	f004 f926 	bl	8005db8 <_Znwj>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	461c      	mov	r4, r3
 8001b70:	2301      	movs	r3, #1
 8001b72:	9308      	str	r3, [sp, #32]
 8001b74:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001b78:	9307      	str	r3, [sp, #28]
 8001b7a:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001b7e:	9306      	str	r3, [sp, #24]
 8001b80:	f240 73f3 	movw	r3, #2035	@ 0x7f3
 8001b84:	9305      	str	r3, [sp, #20]
 8001b86:	f44f 63be 	mov.w	r3, #1520	@ 0x5f0
 8001b8a:	9304      	str	r3, [sp, #16]
 8001b8c:	f240 33ea 	movw	r3, #1002	@ 0x3ea
 8001b90:	9303      	str	r3, [sp, #12]
 8001b92:	2364      	movs	r3, #100	@ 0x64
 8001b94:	9302      	str	r3, [sp, #8]
 8001b96:	f244 435c 	movw	r3, #17500	@ 0x445c
 8001b9a:	9301      	str	r3, [sp, #4]
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	4b49      	ldr	r3, [pc, #292]	@ (8001cc8 <main+0x1b8>)
 8001ba2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ba6:	4949      	ldr	r1, [pc, #292]	@ (8001ccc <main+0x1bc>)
 8001ba8:	4620      	mov	r0, r4
 8001baa:	f7ff fc83 	bl	80014b4 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb>
  SteeringChannel = new RCChannel
 8001bae:	4b48      	ldr	r3, [pc, #288]	@ (8001cd0 <main+0x1c0>)
 8001bb0:	601c      	str	r4, [r3, #0]
		  		  1533,  // Calibrated neutral
		  		  2017,  // Calibrated full speed
		  		  10000,   // New max positive
				  10000,    // New max negative (magnitude)
				  true  // Saturate if signal is over full? True by default. False good for debugging.
		  	  	  );
 8001bb2:	205c      	movs	r0, #92	@ 0x5c
 8001bb4:	f004 f900 	bl	8005db8 <_Znwj>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	461c      	mov	r4, r3
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	9308      	str	r3, [sp, #32]
 8001bc0:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001bc4:	9307      	str	r3, [sp, #28]
 8001bc6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001bca:	9306      	str	r3, [sp, #24]
 8001bcc:	f240 73e1 	movw	r3, #2017	@ 0x7e1
 8001bd0:	9305      	str	r3, [sp, #20]
 8001bd2:	f240 53fd 	movw	r3, #1533	@ 0x5fd
 8001bd6:	9304      	str	r3, [sp, #16]
 8001bd8:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8001bdc:	9303      	str	r3, [sp, #12]
 8001bde:	2364      	movs	r3, #100	@ 0x64
 8001be0:	9302      	str	r3, [sp, #8]
 8001be2:	f244 435c 	movw	r3, #17500	@ 0x445c
 8001be6:	9301      	str	r3, [sp, #4]
 8001be8:	2304      	movs	r3, #4
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	4b36      	ldr	r3, [pc, #216]	@ (8001cc8 <main+0x1b8>)
 8001bee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bf2:	4936      	ldr	r1, [pc, #216]	@ (8001ccc <main+0x1bc>)
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	f7ff fc5d 	bl	80014b4 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb>
  ThrottleChannel = new RCChannel
 8001bfa:	4b36      	ldr	r3, [pc, #216]	@ (8001cd4 <main+0x1c4>)
 8001bfc:	601c      	str	r4, [r3, #0]
		  &htim5,
		  20,
		  488.3f,
		  16,
		  false // true doesn't work yet!
		  );
 8001bfe:	202c      	movs	r0, #44	@ 0x2c
 8001c00:	f004 f8da 	bl	8005db8 <_Znwj>
 8001c04:	4603      	mov	r3, r0
 8001c06:	461c      	mov	r4, r3
 8001c08:	2300      	movs	r3, #0
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	2310      	movs	r3, #16
 8001c0e:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 8001cd8 <main+0x1c8>
 8001c12:	2214      	movs	r2, #20
 8001c14:	4931      	ldr	r1, [pc, #196]	@ (8001cdc <main+0x1cc>)
 8001c16:	4620      	mov	r0, r4
 8001c18:	f7ff faea 	bl	80011f0 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb>
  My_Encoder = new PololuEncoder
 8001c1c:	4b30      	ldr	r3, [pc, #192]	@ (8001ce0 <main+0x1d0>)
 8001c1e:	601c      	str	r4, [r3, #0]
		  My_Encoder,
		  CONTROL_FREQUENCY_HZ,
		  100.0f,
		  650.0f,
		  0.0f
		  );
 8001c20:	2030      	movs	r0, #48	@ 0x30
 8001c22:	f004 f8c9 	bl	8005db8 <_Znwj>
 8001c26:	4603      	mov	r3, r0
 8001c28:	461c      	mov	r4, r3
 8001c2a:	4b26      	ldr	r3, [pc, #152]	@ (8001cc4 <main+0x1b4>)
 8001c2c:	6819      	ldr	r1, [r3, #0]
 8001c2e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ce0 <main+0x1d0>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	ed9f 1a2c 	vldr	s2, [pc, #176]	@ 8001ce4 <main+0x1d4>
 8001c36:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 8001ce8 <main+0x1d8>
 8001c3a:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8001cec <main+0x1dc>
 8001c3e:	2308      	movs	r3, #8
 8001c40:	4620      	mov	r0, r4
 8001c42:	f7ff f931 	bl	8000ea8 <_ZN12MotorControlC1EP15TB6612FNG_MotorP13PololuEncodermfff>
  My_Controller = new MotorControl
 8001c46:	4b2a      	ldr	r3, [pc, #168]	@ (8001cf0 <main+0x1e0>)
 8001c48:	601c      	str	r4, [r3, #0]
  Throttle = new RemoteControlControl
		  (
		  ThrottleChannel,
		  My_Controller,
		  30
		  );
 8001c4a:	2014      	movs	r0, #20
 8001c4c:	f004 f8b4 	bl	8005db8 <_Znwj>
 8001c50:	4603      	mov	r3, r0
 8001c52:	461c      	mov	r4, r3
 8001c54:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd4 <main+0x1c4>)
 8001c56:	6819      	ldr	r1, [r3, #0]
 8001c58:	4b25      	ldr	r3, [pc, #148]	@ (8001cf0 <main+0x1e0>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	231e      	movs	r3, #30
 8001c5e:	4620      	mov	r0, r4
 8001c60:	f7ff fd72 	bl	8001748 <_ZN20RemoteControlControlC1EP9RCChannelP12MotorControlt>
  Throttle = new RemoteControlControl
 8001c64:	4b23      	ldr	r3, [pc, #140]	@ (8001cf4 <main+0x1e4>)
 8001c66:	601c      	str	r4, [r3, #0]

  initialized = true;
 8001c68:	4b23      	ldr	r3, [pc, #140]	@ (8001cf8 <main+0x1e8>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  HAL_Delay(300);
 8001c6e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001c72:	f000 fe21 	bl	80028b8 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  float setpoint = 0; // RPM
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	607b      	str	r3, [r7, #4]
  My_Controller->run(setpoint);
 8001c7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf0 <main+0x1e0>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff f9bd 	bl	8001004 <_ZN12MotorControl3runEf>
  HAL_Delay(1000);
 8001c8a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c8e:	f000 fe13 	bl	80028b8 <HAL_Delay>

//	  string_length = snprintf(my_message, MESSAGE_LENGTH, "Throttle: %*.3f RPM (%*li)\r\n",
//								  VALUE_WIDTH+5, Throttle->setpoint,
//								  VALUE_WIDTH+5, (long signed int)ThrottleChannel->value);
//	  HAL_UART_Transmit(&huart2, (uint8_t*)my_message, string_length, HAL_MAX_DELAY);
	  float setpoint = 15; // RPM
 8001c92:	4b1a      	ldr	r3, [pc, #104]	@ (8001cfc <main+0x1ec>)
 8001c94:	603b      	str	r3, [r7, #0]
	  My_Controller->run(setpoint);
 8001c96:	4b16      	ldr	r3, [pc, #88]	@ (8001cf0 <main+0x1e0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	ed97 0a00 	vldr	s0, [r7]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff f9b0 	bl	8001004 <_ZN12MotorControl3runEf>
	  HAL_Delay(1000/CONTROL_FREQUENCY_HZ);
 8001ca4:	207d      	movs	r0, #125	@ 0x7d
 8001ca6:	f000 fe07 	bl	80028b8 <HAL_Delay>
	  My_Controller->debug_message(&huart2);
 8001caa:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <main+0x1e0>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4914      	ldr	r1, [pc, #80]	@ (8001d00 <main+0x1f0>)
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff f959 	bl	8000f68 <_ZN12MotorControl13debug_messageEP20__UART_HandleTypeDef>
  }
 8001cb6:	bf00      	nop
 8001cb8:	e7eb      	b.n	8001c92 <main+0x182>
 8001cba:	bf00      	nop
 8001cbc:	20000238 	.word	0x20000238
 8001cc0:	40020400 	.word	0x40020400
 8001cc4:	20000378 	.word	0x20000378
 8001cc8:	200001f0 	.word	0x200001f0
 8001ccc:	40020000 	.word	0x40020000
 8001cd0:	20000380 	.word	0x20000380
 8001cd4:	2000037c 	.word	0x2000037c
 8001cd8:	43f42666 	.word	0x43f42666
 8001cdc:	20000280 	.word	0x20000280
 8001ce0:	20000388 	.word	0x20000388
 8001ce4:	00000000 	.word	0x00000000
 8001ce8:	44228000 	.word	0x44228000
 8001cec:	42c80000 	.word	0x42c80000
 8001cf0:	2000038c 	.word	0x2000038c
 8001cf4:	20000384 	.word	0x20000384
 8001cf8:	20000374 	.word	0x20000374
 8001cfc:	41700000 	.word	0x41700000
 8001d00:	200002c8 	.word	0x200002c8

08001d04 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b094      	sub	sp, #80	@ 0x50
 8001d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d0a:	f107 0320 	add.w	r3, r7, #32
 8001d0e:	2230      	movs	r2, #48	@ 0x30
 8001d10:	2100      	movs	r1, #0
 8001d12:	4618      	mov	r0, r3
 8001d14:	f004 fee3 	bl	8006ade <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d18:	f107 030c 	add.w	r3, r7, #12
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60bb      	str	r3, [r7, #8]
 8001d2c:	4b2c      	ldr	r3, [pc, #176]	@ (8001de0 <_Z18SystemClock_Configv+0xdc>)
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d30:	4a2b      	ldr	r2, [pc, #172]	@ (8001de0 <_Z18SystemClock_Configv+0xdc>)
 8001d32:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d36:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d38:	4b29      	ldr	r3, [pc, #164]	@ (8001de0 <_Z18SystemClock_Configv+0xdc>)
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d44:	2300      	movs	r3, #0
 8001d46:	607b      	str	r3, [r7, #4]
 8001d48:	4b26      	ldr	r3, [pc, #152]	@ (8001de4 <_Z18SystemClock_Configv+0xe0>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a25      	ldr	r2, [pc, #148]	@ (8001de4 <_Z18SystemClock_Configv+0xe0>)
 8001d4e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	4b23      	ldr	r3, [pc, #140]	@ (8001de4 <_Z18SystemClock_Configv+0xe0>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001d5c:	607b      	str	r3, [r7, #4]
 8001d5e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d60:	2302      	movs	r3, #2
 8001d62:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d64:	2301      	movs	r3, #1
 8001d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d68:	2310      	movs	r3, #16
 8001d6a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d70:	2300      	movs	r3, #0
 8001d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d74:	2308      	movs	r3, #8
 8001d76:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001d78:	2364      	movs	r3, #100	@ 0x64
 8001d7a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d80:	2304      	movs	r3, #4
 8001d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d84:	f107 0320 	add.w	r3, r7, #32
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f001 f8b3 	bl	8002ef4 <HAL_RCC_OscConfig>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	bf14      	ite	ne
 8001d94:	2301      	movne	r3, #1
 8001d96:	2300      	moveq	r3, #0
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8001d9e:	f000 fa33 	bl	8002208 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001da2:	230f      	movs	r3, #15
 8001da4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001da6:	2302      	movs	r3, #2
 8001da8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001daa:	2300      	movs	r3, #0
 8001dac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001dae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001db2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001db8:	f107 030c 	add.w	r3, r7, #12
 8001dbc:	2103      	movs	r1, #3
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f001 fb10 	bl	80033e4 <HAL_RCC_ClockConfig>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	bf14      	ite	ne
 8001dca:	2301      	movne	r3, #1
 8001dcc:	2300      	moveq	r3, #0
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8001dd4:	f000 fa18 	bl	8002208 <Error_Handler>
  }
}
 8001dd8:	bf00      	nop
 8001dda:	3750      	adds	r7, #80	@ 0x50
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40007000 	.word	0x40007000

08001de8 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08a      	sub	sp, #40	@ 0x28
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dee:	f107 0318 	add.w	r3, r7, #24
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dfc:	f107 0310 	add.w	r3, r7, #16
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001e06:	463b      	mov	r3, r7
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	609a      	str	r2, [r3, #8]
 8001e10:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e12:	4b41      	ldr	r3, [pc, #260]	@ (8001f18 <_ZL12MX_TIM1_Initv+0x130>)
 8001e14:	4a41      	ldr	r2, [pc, #260]	@ (8001f1c <_ZL12MX_TIM1_Initv+0x134>)
 8001e16:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8001e18:	4b3f      	ldr	r3, [pc, #252]	@ (8001f18 <_ZL12MX_TIM1_Initv+0x130>)
 8001e1a:	2263      	movs	r2, #99	@ 0x63
 8001e1c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e1e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f18 <_ZL12MX_TIM1_Initv+0x130>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e24:	4b3c      	ldr	r3, [pc, #240]	@ (8001f18 <_ZL12MX_TIM1_Initv+0x130>)
 8001e26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e2a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e2c:	4b3a      	ldr	r3, [pc, #232]	@ (8001f18 <_ZL12MX_TIM1_Initv+0x130>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e32:	4b39      	ldr	r3, [pc, #228]	@ (8001f18 <_ZL12MX_TIM1_Initv+0x130>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e38:	4b37      	ldr	r3, [pc, #220]	@ (8001f18 <_ZL12MX_TIM1_Initv+0x130>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e3e:	4836      	ldr	r0, [pc, #216]	@ (8001f18 <_ZL12MX_TIM1_Initv+0x130>)
 8001e40:	f001 fcb0 	bl	80037a4 <HAL_TIM_Base_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	bf14      	ite	ne
 8001e4a:	2301      	movne	r3, #1
 8001e4c:	2300      	moveq	r3, #0
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <_ZL12MX_TIM1_Initv+0x70>
  {
    Error_Handler();
 8001e54:	f000 f9d8 	bl	8002208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e5c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001e5e:	f107 0318 	add.w	r3, r7, #24
 8001e62:	4619      	mov	r1, r3
 8001e64:	482c      	ldr	r0, [pc, #176]	@ (8001f18 <_ZL12MX_TIM1_Initv+0x130>)
 8001e66:	f002 fdf7 	bl	8004a58 <HAL_TIM_ConfigClockSource>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf14      	ite	ne
 8001e70:	2301      	movne	r3, #1
 8001e72:	2300      	moveq	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <_ZL12MX_TIM1_Initv+0x96>
  {
    Error_Handler();
 8001e7a:	f000 f9c5 	bl	8002208 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001e7e:	4826      	ldr	r0, [pc, #152]	@ (8001f18 <_ZL12MX_TIM1_Initv+0x130>)
 8001e80:	f001 fe4c 	bl	8003b1c <HAL_TIM_IC_Init>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	bf14      	ite	ne
 8001e8a:	2301      	movne	r3, #1
 8001e8c:	2300      	moveq	r3, #0
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <_ZL12MX_TIM1_Initv+0xb0>
  {
    Error_Handler();
 8001e94:	f000 f9b8 	bl	8002208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ea0:	f107 0310 	add.w	r3, r7, #16
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	481c      	ldr	r0, [pc, #112]	@ (8001f18 <_ZL12MX_TIM1_Initv+0x130>)
 8001ea8:	f003 faf6 	bl	8005498 <HAL_TIMEx_MasterConfigSynchronization>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	bf14      	ite	ne
 8001eb2:	2301      	movne	r3, #1
 8001eb4:	2300      	moveq	r3, #0
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <_ZL12MX_TIM1_Initv+0xd8>
  {
    Error_Handler();
 8001ebc:	f000 f9a4 	bl	8002208 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001ec0:	230a      	movs	r3, #10
 8001ec2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001ed0:	463b      	mov	r3, r7
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4810      	ldr	r0, [pc, #64]	@ (8001f18 <_ZL12MX_TIM1_Initv+0x130>)
 8001ed8:	f002 fc60 	bl	800479c <HAL_TIM_IC_ConfigChannel>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	bf14      	ite	ne
 8001ee2:	2301      	movne	r3, #1
 8001ee4:	2300      	moveq	r3, #0
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <_ZL12MX_TIM1_Initv+0x108>
  {
    Error_Handler();
 8001eec:	f000 f98c 	bl	8002208 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001ef0:	463b      	mov	r3, r7
 8001ef2:	2204      	movs	r2, #4
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4808      	ldr	r0, [pc, #32]	@ (8001f18 <_ZL12MX_TIM1_Initv+0x130>)
 8001ef8:	f002 fc50 	bl	800479c <HAL_TIM_IC_ConfigChannel>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	bf14      	ite	ne
 8001f02:	2301      	movne	r3, #1
 8001f04:	2300      	moveq	r3, #0
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <_ZL12MX_TIM1_Initv+0x128>
  {
    Error_Handler();
 8001f0c:	f000 f97c 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f10:	bf00      	nop
 8001f12:	3728      	adds	r7, #40	@ 0x28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	200001f0 	.word	0x200001f0
 8001f1c:	40010000 	.word	0x40010000

08001f20 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08e      	sub	sp, #56	@ 0x38
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	609a      	str	r2, [r3, #8]
 8001f32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f34:	f107 0320 	add.w	r3, r7, #32
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
 8001f4c:	615a      	str	r2, [r3, #20]
 8001f4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f50:	4b39      	ldr	r3, [pc, #228]	@ (8002038 <_ZL12MX_TIM2_Initv+0x118>)
 8001f52:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f58:	4b37      	ldr	r3, [pc, #220]	@ (8002038 <_ZL12MX_TIM2_Initv+0x118>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f5e:	4b36      	ldr	r3, [pc, #216]	@ (8002038 <_ZL12MX_TIM2_Initv+0x118>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 8001f64:	4b34      	ldr	r3, [pc, #208]	@ (8002038 <_ZL12MX_TIM2_Initv+0x118>)
 8001f66:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001f6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f6c:	4b32      	ldr	r3, [pc, #200]	@ (8002038 <_ZL12MX_TIM2_Initv+0x118>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f72:	4b31      	ldr	r3, [pc, #196]	@ (8002038 <_ZL12MX_TIM2_Initv+0x118>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f78:	482f      	ldr	r0, [pc, #188]	@ (8002038 <_ZL12MX_TIM2_Initv+0x118>)
 8001f7a:	f001 fc13 	bl	80037a4 <HAL_TIM_Base_Init>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	bf14      	ite	ne
 8001f84:	2301      	movne	r3, #1
 8001f86:	2300      	moveq	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 8001f8e:	f000 f93b 	bl	8002208 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f96:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f98:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4826      	ldr	r0, [pc, #152]	@ (8002038 <_ZL12MX_TIM2_Initv+0x118>)
 8001fa0:	f002 fd5a 	bl	8004a58 <HAL_TIM_ConfigClockSource>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	bf14      	ite	ne
 8001faa:	2301      	movne	r3, #1
 8001fac:	2300      	moveq	r3, #0
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 8001fb4:	f000 f928 	bl	8002208 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001fb8:	481f      	ldr	r0, [pc, #124]	@ (8002038 <_ZL12MX_TIM2_Initv+0x118>)
 8001fba:	f001 fc42 	bl	8003842 <HAL_TIM_PWM_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	bf14      	ite	ne
 8001fc4:	2301      	movne	r3, #1
 8001fc6:	2300      	moveq	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 8001fce:	f000 f91b 	bl	8002208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fda:	f107 0320 	add.w	r3, r7, #32
 8001fde:	4619      	mov	r1, r3
 8001fe0:	4815      	ldr	r0, [pc, #84]	@ (8002038 <_ZL12MX_TIM2_Initv+0x118>)
 8001fe2:	f003 fa59 	bl	8005498 <HAL_TIMEx_MasterConfigSynchronization>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	bf14      	ite	ne
 8001fec:	2301      	movne	r3, #1
 8001fee:	2300      	moveq	r3, #0
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8001ff6:	f000 f907 	bl	8002208 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ffa:	2360      	movs	r3, #96	@ 0x60
 8001ffc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800200a:	1d3b      	adds	r3, r7, #4
 800200c:	2200      	movs	r2, #0
 800200e:	4619      	mov	r1, r3
 8002010:	4809      	ldr	r0, [pc, #36]	@ (8002038 <_ZL12MX_TIM2_Initv+0x118>)
 8002012:	f002 fc5f 	bl	80048d4 <HAL_TIM_PWM_ConfigChannel>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	bf14      	ite	ne
 800201c:	2301      	movne	r3, #1
 800201e:	2300      	moveq	r3, #0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 8002026:	f000 f8ef 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800202a:	4803      	ldr	r0, [pc, #12]	@ (8002038 <_ZL12MX_TIM2_Initv+0x118>)
 800202c:	f000 f9e6 	bl	80023fc <HAL_TIM_MspPostInit>

}
 8002030:	bf00      	nop
 8002032:	3738      	adds	r7, #56	@ 0x38
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20000238 	.word	0x20000238

0800203c <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08c      	sub	sp, #48	@ 0x30
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002042:	f107 030c 	add.w	r3, r7, #12
 8002046:	2224      	movs	r2, #36	@ 0x24
 8002048:	2100      	movs	r1, #0
 800204a:	4618      	mov	r0, r3
 800204c:	f004 fd47 	bl	8006ade <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002058:	4b25      	ldr	r3, [pc, #148]	@ (80020f0 <_ZL12MX_TIM5_Initv+0xb4>)
 800205a:	4a26      	ldr	r2, [pc, #152]	@ (80020f4 <_ZL12MX_TIM5_Initv+0xb8>)
 800205c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800205e:	4b24      	ldr	r3, [pc, #144]	@ (80020f0 <_ZL12MX_TIM5_Initv+0xb4>)
 8002060:	2200      	movs	r2, #0
 8002062:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002064:	4b22      	ldr	r3, [pc, #136]	@ (80020f0 <_ZL12MX_TIM5_Initv+0xb4>)
 8002066:	2200      	movs	r2, #0
 8002068:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800206a:	4b21      	ldr	r3, [pc, #132]	@ (80020f0 <_ZL12MX_TIM5_Initv+0xb4>)
 800206c:	f04f 32ff 	mov.w	r2, #4294967295
 8002070:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002072:	4b1f      	ldr	r3, [pc, #124]	@ (80020f0 <_ZL12MX_TIM5_Initv+0xb4>)
 8002074:	2200      	movs	r2, #0
 8002076:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002078:	4b1d      	ldr	r3, [pc, #116]	@ (80020f0 <_ZL12MX_TIM5_Initv+0xb4>)
 800207a:	2200      	movs	r2, #0
 800207c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800207e:	2303      	movs	r3, #3
 8002080:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002086:	2301      	movs	r3, #1
 8002088:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002092:	2300      	movs	r3, #0
 8002094:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002096:	2301      	movs	r3, #1
 8002098:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800209a:	2300      	movs	r3, #0
 800209c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80020a2:	f107 030c 	add.w	r3, r7, #12
 80020a6:	4619      	mov	r1, r3
 80020a8:	4811      	ldr	r0, [pc, #68]	@ (80020f0 <_ZL12MX_TIM5_Initv+0xb4>)
 80020aa:	f001 ff59 	bl	8003f60 <HAL_TIM_Encoder_Init>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	bf14      	ite	ne
 80020b4:	2301      	movne	r3, #1
 80020b6:	2300      	moveq	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <_ZL12MX_TIM5_Initv+0x86>
  {
    Error_Handler();
 80020be:	f000 f8a3 	bl	8002208 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020ca:	1d3b      	adds	r3, r7, #4
 80020cc:	4619      	mov	r1, r3
 80020ce:	4808      	ldr	r0, [pc, #32]	@ (80020f0 <_ZL12MX_TIM5_Initv+0xb4>)
 80020d0:	f003 f9e2 	bl	8005498 <HAL_TIMEx_MasterConfigSynchronization>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	bf14      	ite	ne
 80020da:	2301      	movne	r3, #1
 80020dc:	2300      	moveq	r3, #0
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <_ZL12MX_TIM5_Initv+0xac>
  {
    Error_Handler();
 80020e4:	f000 f890 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80020e8:	bf00      	nop
 80020ea:	3730      	adds	r7, #48	@ 0x30
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20000280 	.word	0x20000280
 80020f4:	40000c00 	.word	0x40000c00

080020f8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020fc:	4b13      	ldr	r3, [pc, #76]	@ (800214c <_ZL19MX_USART2_UART_Initv+0x54>)
 80020fe:	4a14      	ldr	r2, [pc, #80]	@ (8002150 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002100:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002102:	4b12      	ldr	r3, [pc, #72]	@ (800214c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002104:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002108:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800210a:	4b10      	ldr	r3, [pc, #64]	@ (800214c <_ZL19MX_USART2_UART_Initv+0x54>)
 800210c:	2200      	movs	r2, #0
 800210e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002110:	4b0e      	ldr	r3, [pc, #56]	@ (800214c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002112:	2200      	movs	r2, #0
 8002114:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002116:	4b0d      	ldr	r3, [pc, #52]	@ (800214c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002118:	2200      	movs	r2, #0
 800211a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800211c:	4b0b      	ldr	r3, [pc, #44]	@ (800214c <_ZL19MX_USART2_UART_Initv+0x54>)
 800211e:	220c      	movs	r2, #12
 8002120:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002122:	4b0a      	ldr	r3, [pc, #40]	@ (800214c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002124:	2200      	movs	r2, #0
 8002126:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002128:	4b08      	ldr	r3, [pc, #32]	@ (800214c <_ZL19MX_USART2_UART_Initv+0x54>)
 800212a:	2200      	movs	r2, #0
 800212c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800212e:	4807      	ldr	r0, [pc, #28]	@ (800214c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002130:	f003 fa34 	bl	800559c <HAL_UART_Init>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	bf14      	ite	ne
 800213a:	2301      	movne	r3, #1
 800213c:	2300      	moveq	r3, #0
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002144:	f000 f860 	bl	8002208 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}
 800214c:	200002c8 	.word	0x200002c8
 8002150:	40004400 	.word	0x40004400

08002154 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b088      	sub	sp, #32
 8002158:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215a:	f107 030c 	add.w	r3, r7, #12
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	609a      	str	r2, [r3, #8]
 8002166:	60da      	str	r2, [r3, #12]
 8002168:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	4b24      	ldr	r3, [pc, #144]	@ (8002200 <_ZL12MX_GPIO_Initv+0xac>)
 8002170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002172:	4a23      	ldr	r2, [pc, #140]	@ (8002200 <_ZL12MX_GPIO_Initv+0xac>)
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	6313      	str	r3, [r2, #48]	@ 0x30
 800217a:	4b21      	ldr	r3, [pc, #132]	@ (8002200 <_ZL12MX_GPIO_Initv+0xac>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	4b1d      	ldr	r3, [pc, #116]	@ (8002200 <_ZL12MX_GPIO_Initv+0xac>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218e:	4a1c      	ldr	r2, [pc, #112]	@ (8002200 <_ZL12MX_GPIO_Initv+0xac>)
 8002190:	f043 0302 	orr.w	r3, r3, #2
 8002194:	6313      	str	r3, [r2, #48]	@ 0x30
 8002196:	4b1a      	ldr	r3, [pc, #104]	@ (8002200 <_ZL12MX_GPIO_Initv+0xac>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	607b      	str	r3, [r7, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80021a2:	2200      	movs	r2, #0
 80021a4:	f44f 4150 	mov.w	r1, #53248	@ 0xd000
 80021a8:	4816      	ldr	r0, [pc, #88]	@ (8002204 <_ZL12MX_GPIO_Initv+0xb0>)
 80021aa:	f000 fe57 	bl	8002e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 80021ae:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80021b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b4:	2301      	movs	r3, #1
 80021b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b8:	2300      	movs	r3, #0
 80021ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021bc:	2300      	movs	r3, #0
 80021be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021c0:	f107 030c 	add.w	r3, r7, #12
 80021c4:	4619      	mov	r1, r3
 80021c6:	480f      	ldr	r0, [pc, #60]	@ (8002204 <_ZL12MX_GPIO_Initv+0xb0>)
 80021c8:	f000 fcac 	bl	8002b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80021cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80021d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021dc:	f107 030c 	add.w	r3, r7, #12
 80021e0:	4619      	mov	r1, r3
 80021e2:	4808      	ldr	r0, [pc, #32]	@ (8002204 <_ZL12MX_GPIO_Initv+0xb0>)
 80021e4:	f000 fc9e 	bl	8002b24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80021e8:	2200      	movs	r2, #0
 80021ea:	2100      	movs	r1, #0
 80021ec:	2028      	movs	r0, #40	@ 0x28
 80021ee:	f000 fc62 	bl	8002ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80021f2:	2028      	movs	r0, #40	@ 0x28
 80021f4:	f000 fc7b 	bl	8002aee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021f8:	bf00      	nop
 80021fa:	3720      	adds	r7, #32
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40023800 	.word	0x40023800
 8002204:	40020400 	.word	0x40020400

08002208 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800220c:	b672      	cpsid	i
}
 800220e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002210:	bf00      	nop
 8002212:	e7fd      	b.n	8002210 <Error_Handler+0x8>

08002214 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	607b      	str	r3, [r7, #4]
 800221e:	4b10      	ldr	r3, [pc, #64]	@ (8002260 <HAL_MspInit+0x4c>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002222:	4a0f      	ldr	r2, [pc, #60]	@ (8002260 <HAL_MspInit+0x4c>)
 8002224:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002228:	6453      	str	r3, [r2, #68]	@ 0x44
 800222a:	4b0d      	ldr	r3, [pc, #52]	@ (8002260 <HAL_MspInit+0x4c>)
 800222c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800222e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002232:	607b      	str	r3, [r7, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	603b      	str	r3, [r7, #0]
 800223a:	4b09      	ldr	r3, [pc, #36]	@ (8002260 <HAL_MspInit+0x4c>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	4a08      	ldr	r2, [pc, #32]	@ (8002260 <HAL_MspInit+0x4c>)
 8002240:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002244:	6413      	str	r3, [r2, #64]	@ 0x40
 8002246:	4b06      	ldr	r3, [pc, #24]	@ (8002260 <HAL_MspInit+0x4c>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800224e:	603b      	str	r3, [r7, #0]
 8002250:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40023800 	.word	0x40023800

08002264 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08a      	sub	sp, #40	@ 0x28
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226c:	f107 0314 	add.w	r3, r7, #20
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a33      	ldr	r2, [pc, #204]	@ (8002350 <HAL_TIM_Base_MspInit+0xec>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d14d      	bne.n	8002322 <HAL_TIM_Base_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	4b32      	ldr	r3, [pc, #200]	@ (8002354 <HAL_TIM_Base_MspInit+0xf0>)
 800228c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228e:	4a31      	ldr	r2, [pc, #196]	@ (8002354 <HAL_TIM_Base_MspInit+0xf0>)
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	6453      	str	r3, [r2, #68]	@ 0x44
 8002296:	4b2f      	ldr	r3, [pc, #188]	@ (8002354 <HAL_TIM_Base_MspInit+0xf0>)
 8002298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	4b2b      	ldr	r3, [pc, #172]	@ (8002354 <HAL_TIM_Base_MspInit+0xf0>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022aa:	4a2a      	ldr	r2, [pc, #168]	@ (8002354 <HAL_TIM_Base_MspInit+0xf0>)
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b2:	4b28      	ldr	r3, [pc, #160]	@ (8002354 <HAL_TIM_Base_MspInit+0xf0>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80022c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c4:	2302      	movs	r3, #2
 80022c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022cc:	2300      	movs	r3, #0
 80022ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022d0:	2301      	movs	r3, #1
 80022d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d4:	f107 0314 	add.w	r3, r7, #20
 80022d8:	4619      	mov	r1, r3
 80022da:	481f      	ldr	r0, [pc, #124]	@ (8002358 <HAL_TIM_Base_MspInit+0xf4>)
 80022dc:	f000 fc22 	bl	8002b24 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80022e0:	2200      	movs	r2, #0
 80022e2:	2100      	movs	r1, #0
 80022e4:	2018      	movs	r0, #24
 80022e6:	f000 fbe6 	bl	8002ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80022ea:	2018      	movs	r0, #24
 80022ec:	f000 fbff 	bl	8002aee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80022f0:	2200      	movs	r2, #0
 80022f2:	2100      	movs	r1, #0
 80022f4:	2019      	movs	r0, #25
 80022f6:	f000 fbde 	bl	8002ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80022fa:	2019      	movs	r0, #25
 80022fc:	f000 fbf7 	bl	8002aee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002300:	2200      	movs	r2, #0
 8002302:	2100      	movs	r1, #0
 8002304:	201a      	movs	r0, #26
 8002306:	f000 fbd6 	bl	8002ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800230a:	201a      	movs	r0, #26
 800230c:	f000 fbef 	bl	8002aee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002310:	2200      	movs	r2, #0
 8002312:	2100      	movs	r1, #0
 8002314:	201b      	movs	r0, #27
 8002316:	f000 fbce 	bl	8002ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800231a:	201b      	movs	r0, #27
 800231c:	f000 fbe7 	bl	8002aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002320:	e012      	b.n	8002348 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800232a:	d10d      	bne.n	8002348 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800232c:	2300      	movs	r3, #0
 800232e:	60bb      	str	r3, [r7, #8]
 8002330:	4b08      	ldr	r3, [pc, #32]	@ (8002354 <HAL_TIM_Base_MspInit+0xf0>)
 8002332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002334:	4a07      	ldr	r2, [pc, #28]	@ (8002354 <HAL_TIM_Base_MspInit+0xf0>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	6413      	str	r3, [r2, #64]	@ 0x40
 800233c:	4b05      	ldr	r3, [pc, #20]	@ (8002354 <HAL_TIM_Base_MspInit+0xf0>)
 800233e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	60bb      	str	r3, [r7, #8]
 8002346:	68bb      	ldr	r3, [r7, #8]
}
 8002348:	bf00      	nop
 800234a:	3728      	adds	r7, #40	@ 0x28
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40010000 	.word	0x40010000
 8002354:	40023800 	.word	0x40023800
 8002358:	40020000 	.word	0x40020000

0800235c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08a      	sub	sp, #40	@ 0x28
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002364:	f107 0314 	add.w	r3, r7, #20
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a1d      	ldr	r2, [pc, #116]	@ (80023f0 <HAL_TIM_Encoder_MspInit+0x94>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d133      	bne.n	80023e6 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	613b      	str	r3, [r7, #16]
 8002382:	4b1c      	ldr	r3, [pc, #112]	@ (80023f4 <HAL_TIM_Encoder_MspInit+0x98>)
 8002384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002386:	4a1b      	ldr	r2, [pc, #108]	@ (80023f4 <HAL_TIM_Encoder_MspInit+0x98>)
 8002388:	f043 0308 	orr.w	r3, r3, #8
 800238c:	6413      	str	r3, [r2, #64]	@ 0x40
 800238e:	4b19      	ldr	r3, [pc, #100]	@ (80023f4 <HAL_TIM_Encoder_MspInit+0x98>)
 8002390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	613b      	str	r3, [r7, #16]
 8002398:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	4b15      	ldr	r3, [pc, #84]	@ (80023f4 <HAL_TIM_Encoder_MspInit+0x98>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a2:	4a14      	ldr	r2, [pc, #80]	@ (80023f4 <HAL_TIM_Encoder_MspInit+0x98>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023aa:	4b12      	ldr	r3, [pc, #72]	@ (80023f4 <HAL_TIM_Encoder_MspInit+0x98>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023b6:	2303      	movs	r3, #3
 80023b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ba:	2302      	movs	r3, #2
 80023bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c2:	2300      	movs	r3, #0
 80023c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80023c6:	2302      	movs	r3, #2
 80023c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ca:	f107 0314 	add.w	r3, r7, #20
 80023ce:	4619      	mov	r1, r3
 80023d0:	4809      	ldr	r0, [pc, #36]	@ (80023f8 <HAL_TIM_Encoder_MspInit+0x9c>)
 80023d2:	f000 fba7 	bl	8002b24 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80023d6:	2200      	movs	r2, #0
 80023d8:	2100      	movs	r1, #0
 80023da:	2032      	movs	r0, #50	@ 0x32
 80023dc:	f000 fb6b 	bl	8002ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80023e0:	2032      	movs	r0, #50	@ 0x32
 80023e2:	f000 fb84 	bl	8002aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80023e6:	bf00      	nop
 80023e8:	3728      	adds	r7, #40	@ 0x28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40000c00 	.word	0x40000c00
 80023f4:	40023800 	.word	0x40023800
 80023f8:	40020000 	.word	0x40020000

080023fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b088      	sub	sp, #32
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002404:	f107 030c 	add.w	r3, r7, #12
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800241c:	d11e      	bne.n	800245c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	4b10      	ldr	r3, [pc, #64]	@ (8002464 <HAL_TIM_MspPostInit+0x68>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002426:	4a0f      	ldr	r2, [pc, #60]	@ (8002464 <HAL_TIM_MspPostInit+0x68>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	6313      	str	r3, [r2, #48]	@ 0x30
 800242e:	4b0d      	ldr	r3, [pc, #52]	@ (8002464 <HAL_TIM_MspPostInit+0x68>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	60bb      	str	r3, [r7, #8]
 8002438:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800243a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800243e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002440:	2302      	movs	r3, #2
 8002442:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002448:	2300      	movs	r3, #0
 800244a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800244c:	2301      	movs	r3, #1
 800244e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002450:	f107 030c 	add.w	r3, r7, #12
 8002454:	4619      	mov	r1, r3
 8002456:	4804      	ldr	r0, [pc, #16]	@ (8002468 <HAL_TIM_MspPostInit+0x6c>)
 8002458:	f000 fb64 	bl	8002b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800245c:	bf00      	nop
 800245e:	3720      	adds	r7, #32
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40023800 	.word	0x40023800
 8002468:	40020000 	.word	0x40020000

0800246c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08a      	sub	sp, #40	@ 0x28
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002474:	f107 0314 	add.w	r3, r7, #20
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	605a      	str	r2, [r3, #4]
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	60da      	str	r2, [r3, #12]
 8002482:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a19      	ldr	r2, [pc, #100]	@ (80024f0 <HAL_UART_MspInit+0x84>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d12b      	bne.n	80024e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	613b      	str	r3, [r7, #16]
 8002492:	4b18      	ldr	r3, [pc, #96]	@ (80024f4 <HAL_UART_MspInit+0x88>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002496:	4a17      	ldr	r2, [pc, #92]	@ (80024f4 <HAL_UART_MspInit+0x88>)
 8002498:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800249c:	6413      	str	r3, [r2, #64]	@ 0x40
 800249e:	4b15      	ldr	r3, [pc, #84]	@ (80024f4 <HAL_UART_MspInit+0x88>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a6:	613b      	str	r3, [r7, #16]
 80024a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	4b11      	ldr	r3, [pc, #68]	@ (80024f4 <HAL_UART_MspInit+0x88>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b2:	4a10      	ldr	r2, [pc, #64]	@ (80024f4 <HAL_UART_MspInit+0x88>)
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ba:	4b0e      	ldr	r3, [pc, #56]	@ (80024f4 <HAL_UART_MspInit+0x88>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024c6:	230c      	movs	r3, #12
 80024c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ca:	2302      	movs	r3, #2
 80024cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d2:	2303      	movs	r3, #3
 80024d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024d6:	2307      	movs	r3, #7
 80024d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024da:	f107 0314 	add.w	r3, r7, #20
 80024de:	4619      	mov	r1, r3
 80024e0:	4805      	ldr	r0, [pc, #20]	@ (80024f8 <HAL_UART_MspInit+0x8c>)
 80024e2:	f000 fb1f 	bl	8002b24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024e6:	bf00      	nop
 80024e8:	3728      	adds	r7, #40	@ 0x28
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40004400 	.word	0x40004400
 80024f4:	40023800 	.word	0x40023800
 80024f8:	40020000 	.word	0x40020000

080024fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002500:	bf00      	nop
 8002502:	e7fd      	b.n	8002500 <NMI_Handler+0x4>

08002504 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002508:	bf00      	nop
 800250a:	e7fd      	b.n	8002508 <HardFault_Handler+0x4>

0800250c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002510:	bf00      	nop
 8002512:	e7fd      	b.n	8002510 <MemManage_Handler+0x4>

08002514 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002518:	bf00      	nop
 800251a:	e7fd      	b.n	8002518 <BusFault_Handler+0x4>

0800251c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002520:	bf00      	nop
 8002522:	e7fd      	b.n	8002520 <UsageFault_Handler+0x4>

08002524 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002536:	bf00      	nop
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002544:	bf00      	nop
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002552:	f000 f991 	bl	8002878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002560:	4802      	ldr	r0, [pc, #8]	@ (800256c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002562:	f002 f82b 	bl	80045bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	200001f0 	.word	0x200001f0

08002570 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002574:	4802      	ldr	r0, [pc, #8]	@ (8002580 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002576:	f002 f821 	bl	80045bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	200001f0 	.word	0x200001f0

08002584 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002588:	4802      	ldr	r0, [pc, #8]	@ (8002594 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800258a:	f002 f817 	bl	80045bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	200001f0 	.word	0x200001f0

08002598 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800259c:	4802      	ldr	r0, [pc, #8]	@ (80025a8 <TIM1_CC_IRQHandler+0x10>)
 800259e:	f002 f80d 	bl	80045bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	200001f0 	.word	0x200001f0

080025ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80025b0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80025b4:	f000 fc86 	bl	8002ec4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025b8:	bf00      	nop
 80025ba:	bd80      	pop	{r7, pc}

080025bc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80025c0:	4802      	ldr	r0, [pc, #8]	@ (80025cc <TIM5_IRQHandler+0x10>)
 80025c2:	f001 fffb 	bl	80045bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000280 	.word	0x20000280

080025d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return 1;
 80025d4:	2301      	movs	r3, #1
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <_kill>:

int _kill(int pid, int sig)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025ea:	f004 fb1f 	bl	8006c2c <__errno>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2216      	movs	r2, #22
 80025f2:	601a      	str	r2, [r3, #0]
  return -1;
 80025f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <_exit>:

void _exit (int status)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002608:	f04f 31ff 	mov.w	r1, #4294967295
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f7ff ffe7 	bl	80025e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002612:	bf00      	nop
 8002614:	e7fd      	b.n	8002612 <_exit+0x12>

08002616 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b086      	sub	sp, #24
 800261a:	af00      	add	r7, sp, #0
 800261c:	60f8      	str	r0, [r7, #12]
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002622:	2300      	movs	r3, #0
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	e00a      	b.n	800263e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002628:	f3af 8000 	nop.w
 800262c:	4601      	mov	r1, r0
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	60ba      	str	r2, [r7, #8]
 8002634:	b2ca      	uxtb	r2, r1
 8002636:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	3301      	adds	r3, #1
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	429a      	cmp	r2, r3
 8002644:	dbf0      	blt.n	8002628 <_read+0x12>
  }

  return len;
 8002646:	687b      	ldr	r3, [r7, #4]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800265c:	2300      	movs	r3, #0
 800265e:	617b      	str	r3, [r7, #20]
 8002660:	e009      	b.n	8002676 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	60ba      	str	r2, [r7, #8]
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	3301      	adds	r3, #1
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	429a      	cmp	r2, r3
 800267c:	dbf1      	blt.n	8002662 <_write+0x12>
  }
  return len;
 800267e:	687b      	ldr	r3, [r7, #4]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <_close>:

int _close(int file)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002690:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002694:	4618      	mov	r0, r3
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026b0:	605a      	str	r2, [r3, #4]
  return 0;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <_isatty>:

int _isatty(int file)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026c8:	2301      	movs	r3, #1
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr

080026d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026d6:	b480      	push	{r7}
 80026d8:	b085      	sub	sp, #20
 80026da:	af00      	add	r7, sp, #0
 80026dc:	60f8      	str	r0, [r7, #12]
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026f8:	4a14      	ldr	r2, [pc, #80]	@ (800274c <_sbrk+0x5c>)
 80026fa:	4b15      	ldr	r3, [pc, #84]	@ (8002750 <_sbrk+0x60>)
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002704:	4b13      	ldr	r3, [pc, #76]	@ (8002754 <_sbrk+0x64>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d102      	bne.n	8002712 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800270c:	4b11      	ldr	r3, [pc, #68]	@ (8002754 <_sbrk+0x64>)
 800270e:	4a12      	ldr	r2, [pc, #72]	@ (8002758 <_sbrk+0x68>)
 8002710:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002712:	4b10      	ldr	r3, [pc, #64]	@ (8002754 <_sbrk+0x64>)
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4413      	add	r3, r2
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	429a      	cmp	r2, r3
 800271e:	d207      	bcs.n	8002730 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002720:	f004 fa84 	bl	8006c2c <__errno>
 8002724:	4603      	mov	r3, r0
 8002726:	220c      	movs	r2, #12
 8002728:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800272a:	f04f 33ff 	mov.w	r3, #4294967295
 800272e:	e009      	b.n	8002744 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002730:	4b08      	ldr	r3, [pc, #32]	@ (8002754 <_sbrk+0x64>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002736:	4b07      	ldr	r3, [pc, #28]	@ (8002754 <_sbrk+0x64>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4413      	add	r3, r2
 800273e:	4a05      	ldr	r2, [pc, #20]	@ (8002754 <_sbrk+0x64>)
 8002740:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002742:	68fb      	ldr	r3, [r7, #12]
}
 8002744:	4618      	mov	r0, r3
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	20020000 	.word	0x20020000
 8002750:	00000400 	.word	0x00000400
 8002754:	20000390 	.word	0x20000390
 8002758:	200004e8 	.word	0x200004e8

0800275c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002760:	4b06      	ldr	r3, [pc, #24]	@ (800277c <SystemInit+0x20>)
 8002762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002766:	4a05      	ldr	r2, [pc, #20]	@ (800277c <SystemInit+0x20>)
 8002768:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800276c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002770:	bf00      	nop
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	e000ed00 	.word	0xe000ed00

08002780 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002780:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002784:	f7ff ffea 	bl	800275c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002788:	480c      	ldr	r0, [pc, #48]	@ (80027bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800278a:	490d      	ldr	r1, [pc, #52]	@ (80027c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800278c:	4a0d      	ldr	r2, [pc, #52]	@ (80027c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800278e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002790:	e002      	b.n	8002798 <LoopCopyDataInit>

08002792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002796:	3304      	adds	r3, #4

08002798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800279a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800279c:	d3f9      	bcc.n	8002792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800279e:	4a0a      	ldr	r2, [pc, #40]	@ (80027c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027a0:	4c0a      	ldr	r4, [pc, #40]	@ (80027cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80027a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027a4:	e001      	b.n	80027aa <LoopFillZerobss>

080027a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027a8:	3204      	adds	r2, #4

080027aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027ac:	d3fb      	bcc.n	80027a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027ae:	f004 fa43 	bl	8006c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027b2:	f7ff f9ad 	bl	8001b10 <main>
  bx  lr    
 80027b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80027b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027c0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80027c4:	08008f90 	.word	0x08008f90
  ldr r2, =_sbss
 80027c8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80027cc:	200004e8 	.word	0x200004e8

080027d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027d0:	e7fe      	b.n	80027d0 <ADC_IRQHandler>
	...

080027d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002814 <HAL_Init+0x40>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002814 <HAL_Init+0x40>)
 80027de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002814 <HAL_Init+0x40>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002814 <HAL_Init+0x40>)
 80027ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027f0:	4b08      	ldr	r3, [pc, #32]	@ (8002814 <HAL_Init+0x40>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a07      	ldr	r2, [pc, #28]	@ (8002814 <HAL_Init+0x40>)
 80027f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027fc:	2003      	movs	r0, #3
 80027fe:	f000 f94f 	bl	8002aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002802:	200f      	movs	r0, #15
 8002804:	f000 f808 	bl	8002818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002808:	f7ff fd04 	bl	8002214 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40023c00 	.word	0x40023c00

08002818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002820:	4b12      	ldr	r3, [pc, #72]	@ (800286c <HAL_InitTick+0x54>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	4b12      	ldr	r3, [pc, #72]	@ (8002870 <HAL_InitTick+0x58>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	4619      	mov	r1, r3
 800282a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800282e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002832:	fbb2 f3f3 	udiv	r3, r2, r3
 8002836:	4618      	mov	r0, r3
 8002838:	f000 f967 	bl	8002b0a <HAL_SYSTICK_Config>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e00e      	b.n	8002864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b0f      	cmp	r3, #15
 800284a:	d80a      	bhi.n	8002862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800284c:	2200      	movs	r2, #0
 800284e:	6879      	ldr	r1, [r7, #4]
 8002850:	f04f 30ff 	mov.w	r0, #4294967295
 8002854:	f000 f92f 	bl	8002ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002858:	4a06      	ldr	r2, [pc, #24]	@ (8002874 <HAL_InitTick+0x5c>)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800285e:	2300      	movs	r3, #0
 8002860:	e000      	b.n	8002864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
}
 8002864:	4618      	mov	r0, r3
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	20000000 	.word	0x20000000
 8002870:	20000008 	.word	0x20000008
 8002874:	20000004 	.word	0x20000004

08002878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800287c:	4b06      	ldr	r3, [pc, #24]	@ (8002898 <HAL_IncTick+0x20>)
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	461a      	mov	r2, r3
 8002882:	4b06      	ldr	r3, [pc, #24]	@ (800289c <HAL_IncTick+0x24>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4413      	add	r3, r2
 8002888:	4a04      	ldr	r2, [pc, #16]	@ (800289c <HAL_IncTick+0x24>)
 800288a:	6013      	str	r3, [r2, #0]
}
 800288c:	bf00      	nop
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	20000008 	.word	0x20000008
 800289c:	20000394 	.word	0x20000394

080028a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return uwTick;
 80028a4:	4b03      	ldr	r3, [pc, #12]	@ (80028b4 <HAL_GetTick+0x14>)
 80028a6:	681b      	ldr	r3, [r3, #0]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	20000394 	.word	0x20000394

080028b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028c0:	f7ff ffee 	bl	80028a0 <HAL_GetTick>
 80028c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d0:	d005      	beq.n	80028de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028d2:	4b0a      	ldr	r3, [pc, #40]	@ (80028fc <HAL_Delay+0x44>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4413      	add	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028de:	bf00      	nop
 80028e0:	f7ff ffde 	bl	80028a0 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d8f7      	bhi.n	80028e0 <HAL_Delay+0x28>
  {
  }
}
 80028f0:	bf00      	nop
 80028f2:	bf00      	nop
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	20000008 	.word	0x20000008

08002900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002910:	4b0c      	ldr	r3, [pc, #48]	@ (8002944 <__NVIC_SetPriorityGrouping+0x44>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002916:	68ba      	ldr	r2, [r7, #8]
 8002918:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800291c:	4013      	ands	r3, r2
 800291e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002928:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800292c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002932:	4a04      	ldr	r2, [pc, #16]	@ (8002944 <__NVIC_SetPriorityGrouping+0x44>)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	60d3      	str	r3, [r2, #12]
}
 8002938:	bf00      	nop
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	e000ed00 	.word	0xe000ed00

08002948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800294c:	4b04      	ldr	r3, [pc, #16]	@ (8002960 <__NVIC_GetPriorityGrouping+0x18>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	0a1b      	lsrs	r3, r3, #8
 8002952:	f003 0307 	and.w	r3, r3, #7
}
 8002956:	4618      	mov	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	e000ed00 	.word	0xe000ed00

08002964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	4603      	mov	r3, r0
 800296c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800296e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002972:	2b00      	cmp	r3, #0
 8002974:	db0b      	blt.n	800298e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002976:	79fb      	ldrb	r3, [r7, #7]
 8002978:	f003 021f 	and.w	r2, r3, #31
 800297c:	4907      	ldr	r1, [pc, #28]	@ (800299c <__NVIC_EnableIRQ+0x38>)
 800297e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002982:	095b      	lsrs	r3, r3, #5
 8002984:	2001      	movs	r0, #1
 8002986:	fa00 f202 	lsl.w	r2, r0, r2
 800298a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	e000e100 	.word	0xe000e100

080029a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	6039      	str	r1, [r7, #0]
 80029aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	db0a      	blt.n	80029ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	490c      	ldr	r1, [pc, #48]	@ (80029ec <__NVIC_SetPriority+0x4c>)
 80029ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029be:	0112      	lsls	r2, r2, #4
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	440b      	add	r3, r1
 80029c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029c8:	e00a      	b.n	80029e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	4908      	ldr	r1, [pc, #32]	@ (80029f0 <__NVIC_SetPriority+0x50>)
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	3b04      	subs	r3, #4
 80029d8:	0112      	lsls	r2, r2, #4
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	440b      	add	r3, r1
 80029de:	761a      	strb	r2, [r3, #24]
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	e000e100 	.word	0xe000e100
 80029f0:	e000ed00 	.word	0xe000ed00

080029f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b089      	sub	sp, #36	@ 0x24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	f1c3 0307 	rsb	r3, r3, #7
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	bf28      	it	cs
 8002a12:	2304      	movcs	r3, #4
 8002a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	3304      	adds	r3, #4
 8002a1a:	2b06      	cmp	r3, #6
 8002a1c:	d902      	bls.n	8002a24 <NVIC_EncodePriority+0x30>
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	3b03      	subs	r3, #3
 8002a22:	e000      	b.n	8002a26 <NVIC_EncodePriority+0x32>
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a28:	f04f 32ff 	mov.w	r2, #4294967295
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43da      	mvns	r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	401a      	ands	r2, r3
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	fa01 f303 	lsl.w	r3, r1, r3
 8002a46:	43d9      	mvns	r1, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a4c:	4313      	orrs	r3, r2
         );
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3724      	adds	r7, #36	@ 0x24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
	...

08002a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a6c:	d301      	bcc.n	8002a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e00f      	b.n	8002a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a72:	4a0a      	ldr	r2, [pc, #40]	@ (8002a9c <SysTick_Config+0x40>)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a7a:	210f      	movs	r1, #15
 8002a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a80:	f7ff ff8e 	bl	80029a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a84:	4b05      	ldr	r3, [pc, #20]	@ (8002a9c <SysTick_Config+0x40>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a8a:	4b04      	ldr	r3, [pc, #16]	@ (8002a9c <SysTick_Config+0x40>)
 8002a8c:	2207      	movs	r2, #7
 8002a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	e000e010 	.word	0xe000e010

08002aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff ff29 	bl	8002900 <__NVIC_SetPriorityGrouping>
}
 8002aae:	bf00      	nop
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b086      	sub	sp, #24
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	4603      	mov	r3, r0
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
 8002ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ac8:	f7ff ff3e 	bl	8002948 <__NVIC_GetPriorityGrouping>
 8002acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	68b9      	ldr	r1, [r7, #8]
 8002ad2:	6978      	ldr	r0, [r7, #20]
 8002ad4:	f7ff ff8e 	bl	80029f4 <NVIC_EncodePriority>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ade:	4611      	mov	r1, r2
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff ff5d 	bl	80029a0 <__NVIC_SetPriority>
}
 8002ae6:	bf00      	nop
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b082      	sub	sp, #8
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	4603      	mov	r3, r0
 8002af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff ff31 	bl	8002964 <__NVIC_EnableIRQ>
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b082      	sub	sp, #8
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7ff ffa2 	bl	8002a5c <SysTick_Config>
 8002b18:	4603      	mov	r3, r0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b089      	sub	sp, #36	@ 0x24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61fb      	str	r3, [r7, #28]
 8002b3e:	e159      	b.n	8002df4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b40:	2201      	movs	r2, #1
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	4013      	ands	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	f040 8148 	bne.w	8002dee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 0303 	and.w	r3, r3, #3
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d005      	beq.n	8002b76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d130      	bne.n	8002bd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	2203      	movs	r2, #3
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	43db      	mvns	r3, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bac:	2201      	movs	r2, #1
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	f003 0201 	and.w	r2, r3, #1
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d017      	beq.n	8002c14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	2203      	movs	r2, #3
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 0303 	and.w	r3, r3, #3
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d123      	bne.n	8002c68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	08da      	lsrs	r2, r3, #3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	3208      	adds	r2, #8
 8002c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	220f      	movs	r2, #15
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	4013      	ands	r3, r2
 8002c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	08da      	lsrs	r2, r3, #3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	3208      	adds	r2, #8
 8002c62:	69b9      	ldr	r1, [r7, #24]
 8002c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	2203      	movs	r2, #3
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 0203 	and.w	r2, r3, #3
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 80a2 	beq.w	8002dee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	4b57      	ldr	r3, [pc, #348]	@ (8002e0c <HAL_GPIO_Init+0x2e8>)
 8002cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb2:	4a56      	ldr	r2, [pc, #344]	@ (8002e0c <HAL_GPIO_Init+0x2e8>)
 8002cb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cba:	4b54      	ldr	r3, [pc, #336]	@ (8002e0c <HAL_GPIO_Init+0x2e8>)
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cc6:	4a52      	ldr	r2, [pc, #328]	@ (8002e10 <HAL_GPIO_Init+0x2ec>)
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	089b      	lsrs	r3, r3, #2
 8002ccc:	3302      	adds	r3, #2
 8002cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	f003 0303 	and.w	r3, r3, #3
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	220f      	movs	r2, #15
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a49      	ldr	r2, [pc, #292]	@ (8002e14 <HAL_GPIO_Init+0x2f0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d019      	beq.n	8002d26 <HAL_GPIO_Init+0x202>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a48      	ldr	r2, [pc, #288]	@ (8002e18 <HAL_GPIO_Init+0x2f4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d013      	beq.n	8002d22 <HAL_GPIO_Init+0x1fe>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a47      	ldr	r2, [pc, #284]	@ (8002e1c <HAL_GPIO_Init+0x2f8>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d00d      	beq.n	8002d1e <HAL_GPIO_Init+0x1fa>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a46      	ldr	r2, [pc, #280]	@ (8002e20 <HAL_GPIO_Init+0x2fc>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d007      	beq.n	8002d1a <HAL_GPIO_Init+0x1f6>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a45      	ldr	r2, [pc, #276]	@ (8002e24 <HAL_GPIO_Init+0x300>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d101      	bne.n	8002d16 <HAL_GPIO_Init+0x1f2>
 8002d12:	2304      	movs	r3, #4
 8002d14:	e008      	b.n	8002d28 <HAL_GPIO_Init+0x204>
 8002d16:	2307      	movs	r3, #7
 8002d18:	e006      	b.n	8002d28 <HAL_GPIO_Init+0x204>
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e004      	b.n	8002d28 <HAL_GPIO_Init+0x204>
 8002d1e:	2302      	movs	r3, #2
 8002d20:	e002      	b.n	8002d28 <HAL_GPIO_Init+0x204>
 8002d22:	2301      	movs	r3, #1
 8002d24:	e000      	b.n	8002d28 <HAL_GPIO_Init+0x204>
 8002d26:	2300      	movs	r3, #0
 8002d28:	69fa      	ldr	r2, [r7, #28]
 8002d2a:	f002 0203 	and.w	r2, r2, #3
 8002d2e:	0092      	lsls	r2, r2, #2
 8002d30:	4093      	lsls	r3, r2
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d38:	4935      	ldr	r1, [pc, #212]	@ (8002e10 <HAL_GPIO_Init+0x2ec>)
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	089b      	lsrs	r3, r3, #2
 8002d3e:	3302      	adds	r3, #2
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d46:	4b38      	ldr	r3, [pc, #224]	@ (8002e28 <HAL_GPIO_Init+0x304>)
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	43db      	mvns	r3, r3
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	4013      	ands	r3, r2
 8002d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d6a:	4a2f      	ldr	r2, [pc, #188]	@ (8002e28 <HAL_GPIO_Init+0x304>)
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d70:	4b2d      	ldr	r3, [pc, #180]	@ (8002e28 <HAL_GPIO_Init+0x304>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d94:	4a24      	ldr	r2, [pc, #144]	@ (8002e28 <HAL_GPIO_Init+0x304>)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d9a:	4b23      	ldr	r3, [pc, #140]	@ (8002e28 <HAL_GPIO_Init+0x304>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	43db      	mvns	r3, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4013      	ands	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002dbe:	4a1a      	ldr	r2, [pc, #104]	@ (8002e28 <HAL_GPIO_Init+0x304>)
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dc4:	4b18      	ldr	r3, [pc, #96]	@ (8002e28 <HAL_GPIO_Init+0x304>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002de8:	4a0f      	ldr	r2, [pc, #60]	@ (8002e28 <HAL_GPIO_Init+0x304>)
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	3301      	adds	r3, #1
 8002df2:	61fb      	str	r3, [r7, #28]
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	2b0f      	cmp	r3, #15
 8002df8:	f67f aea2 	bls.w	8002b40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dfc:	bf00      	nop
 8002dfe:	bf00      	nop
 8002e00:	3724      	adds	r7, #36	@ 0x24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40013800 	.word	0x40013800
 8002e14:	40020000 	.word	0x40020000
 8002e18:	40020400 	.word	0x40020400
 8002e1c:	40020800 	.word	0x40020800
 8002e20:	40020c00 	.word	0x40020c00
 8002e24:	40021000 	.word	0x40021000
 8002e28:	40013c00 	.word	0x40013c00

08002e2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	887b      	ldrh	r3, [r7, #2]
 8002e3e:	4013      	ands	r3, r2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d002      	beq.n	8002e4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e44:	2301      	movs	r3, #1
 8002e46:	73fb      	strb	r3, [r7, #15]
 8002e48:	e001      	b.n	8002e4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	807b      	strh	r3, [r7, #2]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e6c:	787b      	ldrb	r3, [r7, #1]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e72:	887a      	ldrh	r2, [r7, #2]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e78:	e003      	b.n	8002e82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e7a:	887b      	ldrh	r3, [r7, #2]
 8002e7c:	041a      	lsls	r2, r3, #16
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	619a      	str	r2, [r3, #24]
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b085      	sub	sp, #20
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
 8002e96:	460b      	mov	r3, r1
 8002e98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ea0:	887a      	ldrh	r2, [r7, #2]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	041a      	lsls	r2, r3, #16
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	43d9      	mvns	r1, r3
 8002eac:	887b      	ldrh	r3, [r7, #2]
 8002eae:	400b      	ands	r3, r1
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	619a      	str	r2, [r3, #24]
}
 8002eb6:	bf00      	nop
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
	...

08002ec4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ece:	4b08      	ldr	r3, [pc, #32]	@ (8002ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ed0:	695a      	ldr	r2, [r3, #20]
 8002ed2:	88fb      	ldrh	r3, [r7, #6]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d006      	beq.n	8002ee8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002eda:	4a05      	ldr	r2, [pc, #20]	@ (8002ef0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002edc:	88fb      	ldrh	r3, [r7, #6]
 8002ede:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ee0:	88fb      	ldrh	r3, [r7, #6]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fe fda2 	bl	8001a2c <HAL_GPIO_EXTI_Callback>
  }
}
 8002ee8:	bf00      	nop
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40013c00 	.word	0x40013c00

08002ef4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e267      	b.n	80033d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d075      	beq.n	8002ffe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f12:	4b88      	ldr	r3, [pc, #544]	@ (8003134 <HAL_RCC_OscConfig+0x240>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 030c 	and.w	r3, r3, #12
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	d00c      	beq.n	8002f38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f1e:	4b85      	ldr	r3, [pc, #532]	@ (8003134 <HAL_RCC_OscConfig+0x240>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f26:	2b08      	cmp	r3, #8
 8002f28:	d112      	bne.n	8002f50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f2a:	4b82      	ldr	r3, [pc, #520]	@ (8003134 <HAL_RCC_OscConfig+0x240>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f36:	d10b      	bne.n	8002f50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f38:	4b7e      	ldr	r3, [pc, #504]	@ (8003134 <HAL_RCC_OscConfig+0x240>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d05b      	beq.n	8002ffc <HAL_RCC_OscConfig+0x108>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d157      	bne.n	8002ffc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e242      	b.n	80033d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f58:	d106      	bne.n	8002f68 <HAL_RCC_OscConfig+0x74>
 8002f5a:	4b76      	ldr	r3, [pc, #472]	@ (8003134 <HAL_RCC_OscConfig+0x240>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a75      	ldr	r2, [pc, #468]	@ (8003134 <HAL_RCC_OscConfig+0x240>)
 8002f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	e01d      	b.n	8002fa4 <HAL_RCC_OscConfig+0xb0>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f70:	d10c      	bne.n	8002f8c <HAL_RCC_OscConfig+0x98>
 8002f72:	4b70      	ldr	r3, [pc, #448]	@ (8003134 <HAL_RCC_OscConfig+0x240>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a6f      	ldr	r2, [pc, #444]	@ (8003134 <HAL_RCC_OscConfig+0x240>)
 8002f78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	4b6d      	ldr	r3, [pc, #436]	@ (8003134 <HAL_RCC_OscConfig+0x240>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a6c      	ldr	r2, [pc, #432]	@ (8003134 <HAL_RCC_OscConfig+0x240>)
 8002f84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	e00b      	b.n	8002fa4 <HAL_RCC_OscConfig+0xb0>
 8002f8c:	4b69      	ldr	r3, [pc, #420]	@ (8003134 <HAL_RCC_OscConfig+0x240>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a68      	ldr	r2, [pc, #416]	@ (8003134 <HAL_RCC_OscConfig+0x240>)
 8002f92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	4b66      	ldr	r3, [pc, #408]	@ (8003134 <HAL_RCC_OscConfig+0x240>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a65      	ldr	r2, [pc, #404]	@ (8003134 <HAL_RCC_OscConfig+0x240>)
 8002f9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d013      	beq.n	8002fd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fac:	f7ff fc78 	bl	80028a0 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fb4:	f7ff fc74 	bl	80028a0 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b64      	cmp	r3, #100	@ 0x64
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e207      	b.n	80033d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc6:	4b5b      	ldr	r3, [pc, #364]	@ (8003134 <HAL_RCC_OscConfig+0x240>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0f0      	beq.n	8002fb4 <HAL_RCC_OscConfig+0xc0>
 8002fd2:	e014      	b.n	8002ffe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd4:	f7ff fc64 	bl	80028a0 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fdc:	f7ff fc60 	bl	80028a0 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b64      	cmp	r3, #100	@ 0x64
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e1f3      	b.n	80033d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fee:	4b51      	ldr	r3, [pc, #324]	@ (8003134 <HAL_RCC_OscConfig+0x240>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f0      	bne.n	8002fdc <HAL_RCC_OscConfig+0xe8>
 8002ffa:	e000      	b.n	8002ffe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d063      	beq.n	80030d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800300a:	4b4a      	ldr	r3, [pc, #296]	@ (8003134 <HAL_RCC_OscConfig+0x240>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 030c 	and.w	r3, r3, #12
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00b      	beq.n	800302e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003016:	4b47      	ldr	r3, [pc, #284]	@ (8003134 <HAL_RCC_OscConfig+0x240>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800301e:	2b08      	cmp	r3, #8
 8003020:	d11c      	bne.n	800305c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003022:	4b44      	ldr	r3, [pc, #272]	@ (8003134 <HAL_RCC_OscConfig+0x240>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d116      	bne.n	800305c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800302e:	4b41      	ldr	r3, [pc, #260]	@ (8003134 <HAL_RCC_OscConfig+0x240>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d005      	beq.n	8003046 <HAL_RCC_OscConfig+0x152>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d001      	beq.n	8003046 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e1c7      	b.n	80033d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003046:	4b3b      	ldr	r3, [pc, #236]	@ (8003134 <HAL_RCC_OscConfig+0x240>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	4937      	ldr	r1, [pc, #220]	@ (8003134 <HAL_RCC_OscConfig+0x240>)
 8003056:	4313      	orrs	r3, r2
 8003058:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800305a:	e03a      	b.n	80030d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d020      	beq.n	80030a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003064:	4b34      	ldr	r3, [pc, #208]	@ (8003138 <HAL_RCC_OscConfig+0x244>)
 8003066:	2201      	movs	r2, #1
 8003068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306a:	f7ff fc19 	bl	80028a0 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003072:	f7ff fc15 	bl	80028a0 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e1a8      	b.n	80033d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003084:	4b2b      	ldr	r3, [pc, #172]	@ (8003134 <HAL_RCC_OscConfig+0x240>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0302 	and.w	r3, r3, #2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0f0      	beq.n	8003072 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003090:	4b28      	ldr	r3, [pc, #160]	@ (8003134 <HAL_RCC_OscConfig+0x240>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	4925      	ldr	r1, [pc, #148]	@ (8003134 <HAL_RCC_OscConfig+0x240>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	600b      	str	r3, [r1, #0]
 80030a4:	e015      	b.n	80030d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030a6:	4b24      	ldr	r3, [pc, #144]	@ (8003138 <HAL_RCC_OscConfig+0x244>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ac:	f7ff fbf8 	bl	80028a0 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030b4:	f7ff fbf4 	bl	80028a0 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e187      	b.n	80033d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003134 <HAL_RCC_OscConfig+0x240>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f0      	bne.n	80030b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d036      	beq.n	800314c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d016      	beq.n	8003114 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030e6:	4b15      	ldr	r3, [pc, #84]	@ (800313c <HAL_RCC_OscConfig+0x248>)
 80030e8:	2201      	movs	r2, #1
 80030ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ec:	f7ff fbd8 	bl	80028a0 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030f4:	f7ff fbd4 	bl	80028a0 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e167      	b.n	80033d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003106:	4b0b      	ldr	r3, [pc, #44]	@ (8003134 <HAL_RCC_OscConfig+0x240>)
 8003108:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0f0      	beq.n	80030f4 <HAL_RCC_OscConfig+0x200>
 8003112:	e01b      	b.n	800314c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003114:	4b09      	ldr	r3, [pc, #36]	@ (800313c <HAL_RCC_OscConfig+0x248>)
 8003116:	2200      	movs	r2, #0
 8003118:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800311a:	f7ff fbc1 	bl	80028a0 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003120:	e00e      	b.n	8003140 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003122:	f7ff fbbd 	bl	80028a0 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d907      	bls.n	8003140 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e150      	b.n	80033d6 <HAL_RCC_OscConfig+0x4e2>
 8003134:	40023800 	.word	0x40023800
 8003138:	42470000 	.word	0x42470000
 800313c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003140:	4b88      	ldr	r3, [pc, #544]	@ (8003364 <HAL_RCC_OscConfig+0x470>)
 8003142:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1ea      	bne.n	8003122 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 8097 	beq.w	8003288 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800315a:	2300      	movs	r3, #0
 800315c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800315e:	4b81      	ldr	r3, [pc, #516]	@ (8003364 <HAL_RCC_OscConfig+0x470>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10f      	bne.n	800318a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800316a:	2300      	movs	r3, #0
 800316c:	60bb      	str	r3, [r7, #8]
 800316e:	4b7d      	ldr	r3, [pc, #500]	@ (8003364 <HAL_RCC_OscConfig+0x470>)
 8003170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003172:	4a7c      	ldr	r2, [pc, #496]	@ (8003364 <HAL_RCC_OscConfig+0x470>)
 8003174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003178:	6413      	str	r3, [r2, #64]	@ 0x40
 800317a:	4b7a      	ldr	r3, [pc, #488]	@ (8003364 <HAL_RCC_OscConfig+0x470>)
 800317c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003182:	60bb      	str	r3, [r7, #8]
 8003184:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003186:	2301      	movs	r3, #1
 8003188:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318a:	4b77      	ldr	r3, [pc, #476]	@ (8003368 <HAL_RCC_OscConfig+0x474>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003192:	2b00      	cmp	r3, #0
 8003194:	d118      	bne.n	80031c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003196:	4b74      	ldr	r3, [pc, #464]	@ (8003368 <HAL_RCC_OscConfig+0x474>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a73      	ldr	r2, [pc, #460]	@ (8003368 <HAL_RCC_OscConfig+0x474>)
 800319c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031a2:	f7ff fb7d 	bl	80028a0 <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a8:	e008      	b.n	80031bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031aa:	f7ff fb79 	bl	80028a0 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d901      	bls.n	80031bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	e10c      	b.n	80033d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031bc:	4b6a      	ldr	r3, [pc, #424]	@ (8003368 <HAL_RCC_OscConfig+0x474>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d0f0      	beq.n	80031aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d106      	bne.n	80031de <HAL_RCC_OscConfig+0x2ea>
 80031d0:	4b64      	ldr	r3, [pc, #400]	@ (8003364 <HAL_RCC_OscConfig+0x470>)
 80031d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d4:	4a63      	ldr	r2, [pc, #396]	@ (8003364 <HAL_RCC_OscConfig+0x470>)
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	6713      	str	r3, [r2, #112]	@ 0x70
 80031dc:	e01c      	b.n	8003218 <HAL_RCC_OscConfig+0x324>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	2b05      	cmp	r3, #5
 80031e4:	d10c      	bne.n	8003200 <HAL_RCC_OscConfig+0x30c>
 80031e6:	4b5f      	ldr	r3, [pc, #380]	@ (8003364 <HAL_RCC_OscConfig+0x470>)
 80031e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ea:	4a5e      	ldr	r2, [pc, #376]	@ (8003364 <HAL_RCC_OscConfig+0x470>)
 80031ec:	f043 0304 	orr.w	r3, r3, #4
 80031f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80031f2:	4b5c      	ldr	r3, [pc, #368]	@ (8003364 <HAL_RCC_OscConfig+0x470>)
 80031f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f6:	4a5b      	ldr	r2, [pc, #364]	@ (8003364 <HAL_RCC_OscConfig+0x470>)
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80031fe:	e00b      	b.n	8003218 <HAL_RCC_OscConfig+0x324>
 8003200:	4b58      	ldr	r3, [pc, #352]	@ (8003364 <HAL_RCC_OscConfig+0x470>)
 8003202:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003204:	4a57      	ldr	r2, [pc, #348]	@ (8003364 <HAL_RCC_OscConfig+0x470>)
 8003206:	f023 0301 	bic.w	r3, r3, #1
 800320a:	6713      	str	r3, [r2, #112]	@ 0x70
 800320c:	4b55      	ldr	r3, [pc, #340]	@ (8003364 <HAL_RCC_OscConfig+0x470>)
 800320e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003210:	4a54      	ldr	r2, [pc, #336]	@ (8003364 <HAL_RCC_OscConfig+0x470>)
 8003212:	f023 0304 	bic.w	r3, r3, #4
 8003216:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d015      	beq.n	800324c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003220:	f7ff fb3e 	bl	80028a0 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003226:	e00a      	b.n	800323e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003228:	f7ff fb3a 	bl	80028a0 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003236:	4293      	cmp	r3, r2
 8003238:	d901      	bls.n	800323e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800323a:	2303      	movs	r3, #3
 800323c:	e0cb      	b.n	80033d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323e:	4b49      	ldr	r3, [pc, #292]	@ (8003364 <HAL_RCC_OscConfig+0x470>)
 8003240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d0ee      	beq.n	8003228 <HAL_RCC_OscConfig+0x334>
 800324a:	e014      	b.n	8003276 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324c:	f7ff fb28 	bl	80028a0 <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003252:	e00a      	b.n	800326a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003254:	f7ff fb24 	bl	80028a0 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003262:	4293      	cmp	r3, r2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e0b5      	b.n	80033d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800326a:	4b3e      	ldr	r3, [pc, #248]	@ (8003364 <HAL_RCC_OscConfig+0x470>)
 800326c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1ee      	bne.n	8003254 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003276:	7dfb      	ldrb	r3, [r7, #23]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d105      	bne.n	8003288 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800327c:	4b39      	ldr	r3, [pc, #228]	@ (8003364 <HAL_RCC_OscConfig+0x470>)
 800327e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003280:	4a38      	ldr	r2, [pc, #224]	@ (8003364 <HAL_RCC_OscConfig+0x470>)
 8003282:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003286:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 80a1 	beq.w	80033d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003292:	4b34      	ldr	r3, [pc, #208]	@ (8003364 <HAL_RCC_OscConfig+0x470>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 030c 	and.w	r3, r3, #12
 800329a:	2b08      	cmp	r3, #8
 800329c:	d05c      	beq.n	8003358 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d141      	bne.n	800332a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a6:	4b31      	ldr	r3, [pc, #196]	@ (800336c <HAL_RCC_OscConfig+0x478>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ac:	f7ff faf8 	bl	80028a0 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b4:	f7ff faf4 	bl	80028a0 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e087      	b.n	80033d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c6:	4b27      	ldr	r3, [pc, #156]	@ (8003364 <HAL_RCC_OscConfig+0x470>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f0      	bne.n	80032b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69da      	ldr	r2, [r3, #28]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	431a      	orrs	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e0:	019b      	lsls	r3, r3, #6
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e8:	085b      	lsrs	r3, r3, #1
 80032ea:	3b01      	subs	r3, #1
 80032ec:	041b      	lsls	r3, r3, #16
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f4:	061b      	lsls	r3, r3, #24
 80032f6:	491b      	ldr	r1, [pc, #108]	@ (8003364 <HAL_RCC_OscConfig+0x470>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032fc:	4b1b      	ldr	r3, [pc, #108]	@ (800336c <HAL_RCC_OscConfig+0x478>)
 80032fe:	2201      	movs	r2, #1
 8003300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003302:	f7ff facd 	bl	80028a0 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800330a:	f7ff fac9 	bl	80028a0 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e05c      	b.n	80033d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800331c:	4b11      	ldr	r3, [pc, #68]	@ (8003364 <HAL_RCC_OscConfig+0x470>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0f0      	beq.n	800330a <HAL_RCC_OscConfig+0x416>
 8003328:	e054      	b.n	80033d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800332a:	4b10      	ldr	r3, [pc, #64]	@ (800336c <HAL_RCC_OscConfig+0x478>)
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003330:	f7ff fab6 	bl	80028a0 <HAL_GetTick>
 8003334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003336:	e008      	b.n	800334a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003338:	f7ff fab2 	bl	80028a0 <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e045      	b.n	80033d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800334a:	4b06      	ldr	r3, [pc, #24]	@ (8003364 <HAL_RCC_OscConfig+0x470>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1f0      	bne.n	8003338 <HAL_RCC_OscConfig+0x444>
 8003356:	e03d      	b.n	80033d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d107      	bne.n	8003370 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e038      	b.n	80033d6 <HAL_RCC_OscConfig+0x4e2>
 8003364:	40023800 	.word	0x40023800
 8003368:	40007000 	.word	0x40007000
 800336c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003370:	4b1b      	ldr	r3, [pc, #108]	@ (80033e0 <HAL_RCC_OscConfig+0x4ec>)
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d028      	beq.n	80033d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003388:	429a      	cmp	r2, r3
 800338a:	d121      	bne.n	80033d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003396:	429a      	cmp	r2, r3
 8003398:	d11a      	bne.n	80033d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80033a0:	4013      	ands	r3, r2
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d111      	bne.n	80033d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b6:	085b      	lsrs	r3, r3, #1
 80033b8:	3b01      	subs	r3, #1
 80033ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033bc:	429a      	cmp	r2, r3
 80033be:	d107      	bne.n	80033d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d001      	beq.n	80033d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e000      	b.n	80033d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40023800 	.word	0x40023800

080033e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e0cc      	b.n	8003592 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033f8:	4b68      	ldr	r3, [pc, #416]	@ (800359c <HAL_RCC_ClockConfig+0x1b8>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d90c      	bls.n	8003420 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003406:	4b65      	ldr	r3, [pc, #404]	@ (800359c <HAL_RCC_ClockConfig+0x1b8>)
 8003408:	683a      	ldr	r2, [r7, #0]
 800340a:	b2d2      	uxtb	r2, r2
 800340c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800340e:	4b63      	ldr	r3, [pc, #396]	@ (800359c <HAL_RCC_ClockConfig+0x1b8>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	429a      	cmp	r2, r3
 800341a:	d001      	beq.n	8003420 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e0b8      	b.n	8003592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d020      	beq.n	800346e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b00      	cmp	r3, #0
 8003436:	d005      	beq.n	8003444 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003438:	4b59      	ldr	r3, [pc, #356]	@ (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	4a58      	ldr	r2, [pc, #352]	@ (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 800343e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003442:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0308 	and.w	r3, r3, #8
 800344c:	2b00      	cmp	r3, #0
 800344e:	d005      	beq.n	800345c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003450:	4b53      	ldr	r3, [pc, #332]	@ (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	4a52      	ldr	r2, [pc, #328]	@ (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003456:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800345a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800345c:	4b50      	ldr	r3, [pc, #320]	@ (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	494d      	ldr	r1, [pc, #308]	@ (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	4313      	orrs	r3, r2
 800346c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d044      	beq.n	8003504 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d107      	bne.n	8003492 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003482:	4b47      	ldr	r3, [pc, #284]	@ (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d119      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e07f      	b.n	8003592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	2b02      	cmp	r3, #2
 8003498:	d003      	beq.n	80034a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800349e:	2b03      	cmp	r3, #3
 80034a0:	d107      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a2:	4b3f      	ldr	r3, [pc, #252]	@ (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d109      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e06f      	b.n	8003592 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b2:	4b3b      	ldr	r3, [pc, #236]	@ (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e067      	b.n	8003592 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034c2:	4b37      	ldr	r3, [pc, #220]	@ (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f023 0203 	bic.w	r2, r3, #3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	4934      	ldr	r1, [pc, #208]	@ (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034d4:	f7ff f9e4 	bl	80028a0 <HAL_GetTick>
 80034d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034da:	e00a      	b.n	80034f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034dc:	f7ff f9e0 	bl	80028a0 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e04f      	b.n	8003592 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f2:	4b2b      	ldr	r3, [pc, #172]	@ (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 020c 	and.w	r2, r3, #12
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	429a      	cmp	r2, r3
 8003502:	d1eb      	bne.n	80034dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003504:	4b25      	ldr	r3, [pc, #148]	@ (800359c <HAL_RCC_ClockConfig+0x1b8>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	429a      	cmp	r2, r3
 8003510:	d20c      	bcs.n	800352c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003512:	4b22      	ldr	r3, [pc, #136]	@ (800359c <HAL_RCC_ClockConfig+0x1b8>)
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800351a:	4b20      	ldr	r3, [pc, #128]	@ (800359c <HAL_RCC_ClockConfig+0x1b8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d001      	beq.n	800352c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e032      	b.n	8003592 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	d008      	beq.n	800354a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003538:	4b19      	ldr	r3, [pc, #100]	@ (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	4916      	ldr	r1, [pc, #88]	@ (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	4313      	orrs	r3, r2
 8003548:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	2b00      	cmp	r3, #0
 8003554:	d009      	beq.n	800356a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003556:	4b12      	ldr	r3, [pc, #72]	@ (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	490e      	ldr	r1, [pc, #56]	@ (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	4313      	orrs	r3, r2
 8003568:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800356a:	f000 f821 	bl	80035b0 <HAL_RCC_GetSysClockFreq>
 800356e:	4602      	mov	r2, r0
 8003570:	4b0b      	ldr	r3, [pc, #44]	@ (80035a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	091b      	lsrs	r3, r3, #4
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	490a      	ldr	r1, [pc, #40]	@ (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 800357c:	5ccb      	ldrb	r3, [r1, r3]
 800357e:	fa22 f303 	lsr.w	r3, r2, r3
 8003582:	4a09      	ldr	r2, [pc, #36]	@ (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003584:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003586:	4b09      	ldr	r3, [pc, #36]	@ (80035ac <HAL_RCC_ClockConfig+0x1c8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff f944 	bl	8002818 <HAL_InitTick>

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40023c00 	.word	0x40023c00
 80035a0:	40023800 	.word	0x40023800
 80035a4:	08008bf8 	.word	0x08008bf8
 80035a8:	20000000 	.word	0x20000000
 80035ac:	20000004 	.word	0x20000004

080035b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035b4:	b090      	sub	sp, #64	@ 0x40
 80035b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035b8:	2300      	movs	r3, #0
 80035ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80035bc:	2300      	movs	r3, #0
 80035be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035c0:	2300      	movs	r3, #0
 80035c2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035c8:	4b59      	ldr	r3, [pc, #356]	@ (8003730 <HAL_RCC_GetSysClockFreq+0x180>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 030c 	and.w	r3, r3, #12
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d00d      	beq.n	80035f0 <HAL_RCC_GetSysClockFreq+0x40>
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	f200 80a1 	bhi.w	800371c <HAL_RCC_GetSysClockFreq+0x16c>
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d002      	beq.n	80035e4 <HAL_RCC_GetSysClockFreq+0x34>
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d003      	beq.n	80035ea <HAL_RCC_GetSysClockFreq+0x3a>
 80035e2:	e09b      	b.n	800371c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035e4:	4b53      	ldr	r3, [pc, #332]	@ (8003734 <HAL_RCC_GetSysClockFreq+0x184>)
 80035e6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80035e8:	e09b      	b.n	8003722 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035ea:	4b53      	ldr	r3, [pc, #332]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x188>)
 80035ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035ee:	e098      	b.n	8003722 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035f0:	4b4f      	ldr	r3, [pc, #316]	@ (8003730 <HAL_RCC_GetSysClockFreq+0x180>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035f8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035fa:	4b4d      	ldr	r3, [pc, #308]	@ (8003730 <HAL_RCC_GetSysClockFreq+0x180>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d028      	beq.n	8003658 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003606:	4b4a      	ldr	r3, [pc, #296]	@ (8003730 <HAL_RCC_GetSysClockFreq+0x180>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	099b      	lsrs	r3, r3, #6
 800360c:	2200      	movs	r2, #0
 800360e:	623b      	str	r3, [r7, #32]
 8003610:	627a      	str	r2, [r7, #36]	@ 0x24
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003618:	2100      	movs	r1, #0
 800361a:	4b47      	ldr	r3, [pc, #284]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x188>)
 800361c:	fb03 f201 	mul.w	r2, r3, r1
 8003620:	2300      	movs	r3, #0
 8003622:	fb00 f303 	mul.w	r3, r0, r3
 8003626:	4413      	add	r3, r2
 8003628:	4a43      	ldr	r2, [pc, #268]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x188>)
 800362a:	fba0 1202 	umull	r1, r2, r0, r2
 800362e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003630:	460a      	mov	r2, r1
 8003632:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003634:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003636:	4413      	add	r3, r2
 8003638:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800363a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800363c:	2200      	movs	r2, #0
 800363e:	61bb      	str	r3, [r7, #24]
 8003640:	61fa      	str	r2, [r7, #28]
 8003642:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003646:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800364a:	f7fd fab5 	bl	8000bb8 <__aeabi_uldivmod>
 800364e:	4602      	mov	r2, r0
 8003650:	460b      	mov	r3, r1
 8003652:	4613      	mov	r3, r2
 8003654:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003656:	e053      	b.n	8003700 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003658:	4b35      	ldr	r3, [pc, #212]	@ (8003730 <HAL_RCC_GetSysClockFreq+0x180>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	099b      	lsrs	r3, r3, #6
 800365e:	2200      	movs	r2, #0
 8003660:	613b      	str	r3, [r7, #16]
 8003662:	617a      	str	r2, [r7, #20]
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800366a:	f04f 0b00 	mov.w	fp, #0
 800366e:	4652      	mov	r2, sl
 8003670:	465b      	mov	r3, fp
 8003672:	f04f 0000 	mov.w	r0, #0
 8003676:	f04f 0100 	mov.w	r1, #0
 800367a:	0159      	lsls	r1, r3, #5
 800367c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003680:	0150      	lsls	r0, r2, #5
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	ebb2 080a 	subs.w	r8, r2, sl
 800368a:	eb63 090b 	sbc.w	r9, r3, fp
 800368e:	f04f 0200 	mov.w	r2, #0
 8003692:	f04f 0300 	mov.w	r3, #0
 8003696:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800369a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800369e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80036a2:	ebb2 0408 	subs.w	r4, r2, r8
 80036a6:	eb63 0509 	sbc.w	r5, r3, r9
 80036aa:	f04f 0200 	mov.w	r2, #0
 80036ae:	f04f 0300 	mov.w	r3, #0
 80036b2:	00eb      	lsls	r3, r5, #3
 80036b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036b8:	00e2      	lsls	r2, r4, #3
 80036ba:	4614      	mov	r4, r2
 80036bc:	461d      	mov	r5, r3
 80036be:	eb14 030a 	adds.w	r3, r4, sl
 80036c2:	603b      	str	r3, [r7, #0]
 80036c4:	eb45 030b 	adc.w	r3, r5, fp
 80036c8:	607b      	str	r3, [r7, #4]
 80036ca:	f04f 0200 	mov.w	r2, #0
 80036ce:	f04f 0300 	mov.w	r3, #0
 80036d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036d6:	4629      	mov	r1, r5
 80036d8:	028b      	lsls	r3, r1, #10
 80036da:	4621      	mov	r1, r4
 80036dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036e0:	4621      	mov	r1, r4
 80036e2:	028a      	lsls	r2, r1, #10
 80036e4:	4610      	mov	r0, r2
 80036e6:	4619      	mov	r1, r3
 80036e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ea:	2200      	movs	r2, #0
 80036ec:	60bb      	str	r3, [r7, #8]
 80036ee:	60fa      	str	r2, [r7, #12]
 80036f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036f4:	f7fd fa60 	bl	8000bb8 <__aeabi_uldivmod>
 80036f8:	4602      	mov	r2, r0
 80036fa:	460b      	mov	r3, r1
 80036fc:	4613      	mov	r3, r2
 80036fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003700:	4b0b      	ldr	r3, [pc, #44]	@ (8003730 <HAL_RCC_GetSysClockFreq+0x180>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	0c1b      	lsrs	r3, r3, #16
 8003706:	f003 0303 	and.w	r3, r3, #3
 800370a:	3301      	adds	r3, #1
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003710:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003714:	fbb2 f3f3 	udiv	r3, r2, r3
 8003718:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800371a:	e002      	b.n	8003722 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800371c:	4b05      	ldr	r3, [pc, #20]	@ (8003734 <HAL_RCC_GetSysClockFreq+0x184>)
 800371e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003720:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003724:	4618      	mov	r0, r3
 8003726:	3740      	adds	r7, #64	@ 0x40
 8003728:	46bd      	mov	sp, r7
 800372a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800372e:	bf00      	nop
 8003730:	40023800 	.word	0x40023800
 8003734:	00f42400 	.word	0x00f42400
 8003738:	017d7840 	.word	0x017d7840

0800373c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003740:	4b03      	ldr	r3, [pc, #12]	@ (8003750 <HAL_RCC_GetHCLKFreq+0x14>)
 8003742:	681b      	ldr	r3, [r3, #0]
}
 8003744:	4618      	mov	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	20000000 	.word	0x20000000

08003754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003758:	f7ff fff0 	bl	800373c <HAL_RCC_GetHCLKFreq>
 800375c:	4602      	mov	r2, r0
 800375e:	4b05      	ldr	r3, [pc, #20]	@ (8003774 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	0a9b      	lsrs	r3, r3, #10
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	4903      	ldr	r1, [pc, #12]	@ (8003778 <HAL_RCC_GetPCLK1Freq+0x24>)
 800376a:	5ccb      	ldrb	r3, [r1, r3]
 800376c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003770:	4618      	mov	r0, r3
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40023800 	.word	0x40023800
 8003778:	08008c08 	.word	0x08008c08

0800377c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003780:	f7ff ffdc 	bl	800373c <HAL_RCC_GetHCLKFreq>
 8003784:	4602      	mov	r2, r0
 8003786:	4b05      	ldr	r3, [pc, #20]	@ (800379c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	0b5b      	lsrs	r3, r3, #13
 800378c:	f003 0307 	and.w	r3, r3, #7
 8003790:	4903      	ldr	r1, [pc, #12]	@ (80037a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003792:	5ccb      	ldrb	r3, [r1, r3]
 8003794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003798:	4618      	mov	r0, r3
 800379a:	bd80      	pop	{r7, pc}
 800379c:	40023800 	.word	0x40023800
 80037a0:	08008c08 	.word	0x08008c08

080037a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e041      	b.n	800383a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d106      	bne.n	80037d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7fe fd4a 	bl	8002264 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2202      	movs	r2, #2
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3304      	adds	r3, #4
 80037e0:	4619      	mov	r1, r3
 80037e2:	4610      	mov	r0, r2
 80037e4:	f001 fa62 	bl	8004cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b082      	sub	sp, #8
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d101      	bne.n	8003854 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e041      	b.n	80038d8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b00      	cmp	r3, #0
 800385e:	d106      	bne.n	800386e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f839 	bl	80038e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2202      	movs	r2, #2
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	3304      	adds	r3, #4
 800387e:	4619      	mov	r1, r3
 8003880:	4610      	mov	r0, r2
 8003882:	f001 fa13 	bl	8004cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d109      	bne.n	8003918 <HAL_TIM_PWM_Start+0x24>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b01      	cmp	r3, #1
 800390e:	bf14      	ite	ne
 8003910:	2301      	movne	r3, #1
 8003912:	2300      	moveq	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	e022      	b.n	800395e <HAL_TIM_PWM_Start+0x6a>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2b04      	cmp	r3, #4
 800391c:	d109      	bne.n	8003932 <HAL_TIM_PWM_Start+0x3e>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b01      	cmp	r3, #1
 8003928:	bf14      	ite	ne
 800392a:	2301      	movne	r3, #1
 800392c:	2300      	moveq	r3, #0
 800392e:	b2db      	uxtb	r3, r3
 8003930:	e015      	b.n	800395e <HAL_TIM_PWM_Start+0x6a>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b08      	cmp	r3, #8
 8003936:	d109      	bne.n	800394c <HAL_TIM_PWM_Start+0x58>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800393e:	b2db      	uxtb	r3, r3
 8003940:	2b01      	cmp	r3, #1
 8003942:	bf14      	ite	ne
 8003944:	2301      	movne	r3, #1
 8003946:	2300      	moveq	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	e008      	b.n	800395e <HAL_TIM_PWM_Start+0x6a>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b01      	cmp	r3, #1
 8003956:	bf14      	ite	ne
 8003958:	2301      	movne	r3, #1
 800395a:	2300      	moveq	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e068      	b.n	8003a38 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d104      	bne.n	8003976 <HAL_TIM_PWM_Start+0x82>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003974:	e013      	b.n	800399e <HAL_TIM_PWM_Start+0xaa>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b04      	cmp	r3, #4
 800397a:	d104      	bne.n	8003986 <HAL_TIM_PWM_Start+0x92>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2202      	movs	r2, #2
 8003980:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003984:	e00b      	b.n	800399e <HAL_TIM_PWM_Start+0xaa>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b08      	cmp	r3, #8
 800398a:	d104      	bne.n	8003996 <HAL_TIM_PWM_Start+0xa2>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2202      	movs	r2, #2
 8003990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003994:	e003      	b.n	800399e <HAL_TIM_PWM_Start+0xaa>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2202      	movs	r2, #2
 800399a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2201      	movs	r2, #1
 80039a4:	6839      	ldr	r1, [r7, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f001 fd50 	bl	800544c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a23      	ldr	r2, [pc, #140]	@ (8003a40 <HAL_TIM_PWM_Start+0x14c>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d107      	bne.n	80039c6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a1d      	ldr	r2, [pc, #116]	@ (8003a40 <HAL_TIM_PWM_Start+0x14c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d018      	beq.n	8003a02 <HAL_TIM_PWM_Start+0x10e>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039d8:	d013      	beq.n	8003a02 <HAL_TIM_PWM_Start+0x10e>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a19      	ldr	r2, [pc, #100]	@ (8003a44 <HAL_TIM_PWM_Start+0x150>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d00e      	beq.n	8003a02 <HAL_TIM_PWM_Start+0x10e>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a17      	ldr	r2, [pc, #92]	@ (8003a48 <HAL_TIM_PWM_Start+0x154>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d009      	beq.n	8003a02 <HAL_TIM_PWM_Start+0x10e>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a16      	ldr	r2, [pc, #88]	@ (8003a4c <HAL_TIM_PWM_Start+0x158>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d004      	beq.n	8003a02 <HAL_TIM_PWM_Start+0x10e>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a14      	ldr	r2, [pc, #80]	@ (8003a50 <HAL_TIM_PWM_Start+0x15c>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d111      	bne.n	8003a26 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2b06      	cmp	r3, #6
 8003a12:	d010      	beq.n	8003a36 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0201 	orr.w	r2, r2, #1
 8003a22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a24:	e007      	b.n	8003a36 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f042 0201 	orr.w	r2, r2, #1
 8003a34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40010000 	.word	0x40010000
 8003a44:	40000400 	.word	0x40000400
 8003a48:	40000800 	.word	0x40000800
 8003a4c:	40000c00 	.word	0x40000c00
 8003a50:	40014000 	.word	0x40014000

08003a54 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2200      	movs	r2, #0
 8003a64:	6839      	ldr	r1, [r7, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f001 fcf0 	bl	800544c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a29      	ldr	r2, [pc, #164]	@ (8003b18 <HAL_TIM_PWM_Stop+0xc4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d117      	bne.n	8003aa6 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6a1a      	ldr	r2, [r3, #32]
 8003a7c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003a80:	4013      	ands	r3, r2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10f      	bne.n	8003aa6 <HAL_TIM_PWM_Stop+0x52>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6a1a      	ldr	r2, [r3, #32]
 8003a8c:	f240 4344 	movw	r3, #1092	@ 0x444
 8003a90:	4013      	ands	r3, r2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d107      	bne.n	8003aa6 <HAL_TIM_PWM_Stop+0x52>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003aa4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6a1a      	ldr	r2, [r3, #32]
 8003aac:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10f      	bne.n	8003ad6 <HAL_TIM_PWM_Stop+0x82>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6a1a      	ldr	r2, [r3, #32]
 8003abc:	f240 4344 	movw	r3, #1092	@ 0x444
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d107      	bne.n	8003ad6 <HAL_TIM_PWM_Stop+0x82>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 0201 	bic.w	r2, r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d104      	bne.n	8003ae6 <HAL_TIM_PWM_Stop+0x92>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ae4:	e013      	b.n	8003b0e <HAL_TIM_PWM_Stop+0xba>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	d104      	bne.n	8003af6 <HAL_TIM_PWM_Stop+0xa2>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003af4:	e00b      	b.n	8003b0e <HAL_TIM_PWM_Stop+0xba>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d104      	bne.n	8003b06 <HAL_TIM_PWM_Stop+0xb2>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b04:	e003      	b.n	8003b0e <HAL_TIM_PWM_Stop+0xba>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40010000 	.word	0x40010000

08003b1c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e041      	b.n	8003bb2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d106      	bne.n	8003b48 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f839 	bl	8003bba <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3304      	adds	r3, #4
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	f001 f8a6 	bl	8004cac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b083      	sub	sp, #12
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
	...

08003bd0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d104      	bne.n	8003bee <HAL_TIM_IC_Start_IT+0x1e>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	e013      	b.n	8003c16 <HAL_TIM_IC_Start_IT+0x46>
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	2b04      	cmp	r3, #4
 8003bf2:	d104      	bne.n	8003bfe <HAL_TIM_IC_Start_IT+0x2e>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	e00b      	b.n	8003c16 <HAL_TIM_IC_Start_IT+0x46>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d104      	bne.n	8003c0e <HAL_TIM_IC_Start_IT+0x3e>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	e003      	b.n	8003c16 <HAL_TIM_IC_Start_IT+0x46>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d104      	bne.n	8003c28 <HAL_TIM_IC_Start_IT+0x58>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	e013      	b.n	8003c50 <HAL_TIM_IC_Start_IT+0x80>
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d104      	bne.n	8003c38 <HAL_TIM_IC_Start_IT+0x68>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	e00b      	b.n	8003c50 <HAL_TIM_IC_Start_IT+0x80>
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	2b08      	cmp	r3, #8
 8003c3c:	d104      	bne.n	8003c48 <HAL_TIM_IC_Start_IT+0x78>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	e003      	b.n	8003c50 <HAL_TIM_IC_Start_IT+0x80>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c52:	7bbb      	ldrb	r3, [r7, #14]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d102      	bne.n	8003c5e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c58:	7b7b      	ldrb	r3, [r7, #13]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d001      	beq.n	8003c62 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e0c2      	b.n	8003de8 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d104      	bne.n	8003c72 <HAL_TIM_IC_Start_IT+0xa2>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c70:	e013      	b.n	8003c9a <HAL_TIM_IC_Start_IT+0xca>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d104      	bne.n	8003c82 <HAL_TIM_IC_Start_IT+0xb2>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c80:	e00b      	b.n	8003c9a <HAL_TIM_IC_Start_IT+0xca>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d104      	bne.n	8003c92 <HAL_TIM_IC_Start_IT+0xc2>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c90:	e003      	b.n	8003c9a <HAL_TIM_IC_Start_IT+0xca>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2202      	movs	r2, #2
 8003c96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d104      	bne.n	8003caa <HAL_TIM_IC_Start_IT+0xda>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ca8:	e013      	b.n	8003cd2 <HAL_TIM_IC_Start_IT+0x102>
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	d104      	bne.n	8003cba <HAL_TIM_IC_Start_IT+0xea>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003cb8:	e00b      	b.n	8003cd2 <HAL_TIM_IC_Start_IT+0x102>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d104      	bne.n	8003cca <HAL_TIM_IC_Start_IT+0xfa>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2202      	movs	r2, #2
 8003cc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cc8:	e003      	b.n	8003cd2 <HAL_TIM_IC_Start_IT+0x102>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2202      	movs	r2, #2
 8003cce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b0c      	cmp	r3, #12
 8003cd6:	d841      	bhi.n	8003d5c <HAL_TIM_IC_Start_IT+0x18c>
 8003cd8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ce0 <HAL_TIM_IC_Start_IT+0x110>)
 8003cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cde:	bf00      	nop
 8003ce0:	08003d15 	.word	0x08003d15
 8003ce4:	08003d5d 	.word	0x08003d5d
 8003ce8:	08003d5d 	.word	0x08003d5d
 8003cec:	08003d5d 	.word	0x08003d5d
 8003cf0:	08003d27 	.word	0x08003d27
 8003cf4:	08003d5d 	.word	0x08003d5d
 8003cf8:	08003d5d 	.word	0x08003d5d
 8003cfc:	08003d5d 	.word	0x08003d5d
 8003d00:	08003d39 	.word	0x08003d39
 8003d04:	08003d5d 	.word	0x08003d5d
 8003d08:	08003d5d 	.word	0x08003d5d
 8003d0c:	08003d5d 	.word	0x08003d5d
 8003d10:	08003d4b 	.word	0x08003d4b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68da      	ldr	r2, [r3, #12]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0202 	orr.w	r2, r2, #2
 8003d22:	60da      	str	r2, [r3, #12]
      break;
 8003d24:	e01d      	b.n	8003d62 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68da      	ldr	r2, [r3, #12]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f042 0204 	orr.w	r2, r2, #4
 8003d34:	60da      	str	r2, [r3, #12]
      break;
 8003d36:	e014      	b.n	8003d62 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0208 	orr.w	r2, r2, #8
 8003d46:	60da      	str	r2, [r3, #12]
      break;
 8003d48:	e00b      	b.n	8003d62 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f042 0210 	orr.w	r2, r2, #16
 8003d58:	60da      	str	r2, [r3, #12]
      break;
 8003d5a:	e002      	b.n	8003d62 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d60:	bf00      	nop
  }

  if (status == HAL_OK)
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d13e      	bne.n	8003de6 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	6839      	ldr	r1, [r7, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f001 fb6b 	bl	800544c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a1d      	ldr	r2, [pc, #116]	@ (8003df0 <HAL_TIM_IC_Start_IT+0x220>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d018      	beq.n	8003db2 <HAL_TIM_IC_Start_IT+0x1e2>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d88:	d013      	beq.n	8003db2 <HAL_TIM_IC_Start_IT+0x1e2>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a19      	ldr	r2, [pc, #100]	@ (8003df4 <HAL_TIM_IC_Start_IT+0x224>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d00e      	beq.n	8003db2 <HAL_TIM_IC_Start_IT+0x1e2>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a17      	ldr	r2, [pc, #92]	@ (8003df8 <HAL_TIM_IC_Start_IT+0x228>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d009      	beq.n	8003db2 <HAL_TIM_IC_Start_IT+0x1e2>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a16      	ldr	r2, [pc, #88]	@ (8003dfc <HAL_TIM_IC_Start_IT+0x22c>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d004      	beq.n	8003db2 <HAL_TIM_IC_Start_IT+0x1e2>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a14      	ldr	r2, [pc, #80]	@ (8003e00 <HAL_TIM_IC_Start_IT+0x230>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d111      	bne.n	8003dd6 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2b06      	cmp	r3, #6
 8003dc2:	d010      	beq.n	8003de6 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0201 	orr.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd4:	e007      	b.n	8003de6 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f042 0201 	orr.w	r2, r2, #1
 8003de4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40010000 	.word	0x40010000
 8003df4:	40000400 	.word	0x40000400
 8003df8:	40000800 	.word	0x40000800
 8003dfc:	40000c00 	.word	0x40000c00
 8003e00:	40014000 	.word	0x40014000

08003e04 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2b0c      	cmp	r3, #12
 8003e16:	d841      	bhi.n	8003e9c <HAL_TIM_IC_Stop_IT+0x98>
 8003e18:	a201      	add	r2, pc, #4	@ (adr r2, 8003e20 <HAL_TIM_IC_Stop_IT+0x1c>)
 8003e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1e:	bf00      	nop
 8003e20:	08003e55 	.word	0x08003e55
 8003e24:	08003e9d 	.word	0x08003e9d
 8003e28:	08003e9d 	.word	0x08003e9d
 8003e2c:	08003e9d 	.word	0x08003e9d
 8003e30:	08003e67 	.word	0x08003e67
 8003e34:	08003e9d 	.word	0x08003e9d
 8003e38:	08003e9d 	.word	0x08003e9d
 8003e3c:	08003e9d 	.word	0x08003e9d
 8003e40:	08003e79 	.word	0x08003e79
 8003e44:	08003e9d 	.word	0x08003e9d
 8003e48:	08003e9d 	.word	0x08003e9d
 8003e4c:	08003e9d 	.word	0x08003e9d
 8003e50:	08003e8b 	.word	0x08003e8b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 0202 	bic.w	r2, r2, #2
 8003e62:	60da      	str	r2, [r3, #12]
      break;
 8003e64:	e01d      	b.n	8003ea2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68da      	ldr	r2, [r3, #12]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0204 	bic.w	r2, r2, #4
 8003e74:	60da      	str	r2, [r3, #12]
      break;
 8003e76:	e014      	b.n	8003ea2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0208 	bic.w	r2, r2, #8
 8003e86:	60da      	str	r2, [r3, #12]
      break;
 8003e88:	e00b      	b.n	8003ea2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0210 	bic.w	r2, r2, #16
 8003e98:	60da      	str	r2, [r3, #12]
      break;
 8003e9a:	e002      	b.n	8003ea2 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003ea0:	bf00      	nop
  }

  if (status == HAL_OK)
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d156      	bne.n	8003f56 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2200      	movs	r2, #0
 8003eae:	6839      	ldr	r1, [r7, #0]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f001 facb 	bl	800544c <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6a1a      	ldr	r2, [r3, #32]
 8003ebc:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10f      	bne.n	8003ee6 <HAL_TIM_IC_Stop_IT+0xe2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6a1a      	ldr	r2, [r3, #32]
 8003ecc:	f240 4344 	movw	r3, #1092	@ 0x444
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d107      	bne.n	8003ee6 <HAL_TIM_IC_Stop_IT+0xe2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0201 	bic.w	r2, r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d104      	bne.n	8003ef6 <HAL_TIM_IC_Stop_IT+0xf2>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ef4:	e013      	b.n	8003f1e <HAL_TIM_IC_Stop_IT+0x11a>
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d104      	bne.n	8003f06 <HAL_TIM_IC_Stop_IT+0x102>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f04:	e00b      	b.n	8003f1e <HAL_TIM_IC_Stop_IT+0x11a>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b08      	cmp	r3, #8
 8003f0a:	d104      	bne.n	8003f16 <HAL_TIM_IC_Stop_IT+0x112>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f14:	e003      	b.n	8003f1e <HAL_TIM_IC_Stop_IT+0x11a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d104      	bne.n	8003f2e <HAL_TIM_IC_Stop_IT+0x12a>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f2c:	e013      	b.n	8003f56 <HAL_TIM_IC_Stop_IT+0x152>
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2b04      	cmp	r3, #4
 8003f32:	d104      	bne.n	8003f3e <HAL_TIM_IC_Stop_IT+0x13a>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f3c:	e00b      	b.n	8003f56 <HAL_TIM_IC_Stop_IT+0x152>
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d104      	bne.n	8003f4e <HAL_TIM_IC_Stop_IT+0x14a>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f4c:	e003      	b.n	8003f56 <HAL_TIM_IC_Stop_IT+0x152>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b086      	sub	sp, #24
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e097      	b.n	80040a4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d106      	bne.n	8003f8e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7fe f9e7 	bl	800235c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2202      	movs	r2, #2
 8003f92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	6812      	ldr	r2, [r2, #0]
 8003fa0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fa4:	f023 0307 	bic.w	r3, r3, #7
 8003fa8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	4610      	mov	r0, r2
 8003fb6:	f000 fe79 	bl	8004cac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	699b      	ldr	r3, [r3, #24]
 8003fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fe2:	f023 0303 	bic.w	r3, r3, #3
 8003fe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	689a      	ldr	r2, [r3, #8]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	021b      	lsls	r3, r3, #8
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004000:	f023 030c 	bic.w	r3, r3, #12
 8004004:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800400c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004010:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	68da      	ldr	r2, [r3, #12]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	021b      	lsls	r3, r3, #8
 800401c:	4313      	orrs	r3, r2
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	4313      	orrs	r3, r2
 8004022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	011a      	lsls	r2, r3, #4
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	031b      	lsls	r3, r3, #12
 8004030:	4313      	orrs	r3, r2
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	4313      	orrs	r3, r2
 8004036:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800403e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004046:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	011b      	lsls	r3, r3, #4
 8004052:	4313      	orrs	r3, r2
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	4313      	orrs	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	3718      	adds	r7, #24
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b084      	sub	sp, #16
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040bc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80040c4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80040cc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80040d4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d110      	bne.n	80040fe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d102      	bne.n	80040e8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80040e2:	7b7b      	ldrb	r3, [r7, #13]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d001      	beq.n	80040ec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e069      	b.n	80041c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2202      	movs	r2, #2
 80040f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040fc:	e031      	b.n	8004162 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2b04      	cmp	r3, #4
 8004102:	d110      	bne.n	8004126 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004104:	7bbb      	ldrb	r3, [r7, #14]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d102      	bne.n	8004110 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800410a:	7b3b      	ldrb	r3, [r7, #12]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d001      	beq.n	8004114 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e055      	b.n	80041c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004124:	e01d      	b.n	8004162 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004126:	7bfb      	ldrb	r3, [r7, #15]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d108      	bne.n	800413e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800412c:	7bbb      	ldrb	r3, [r7, #14]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d105      	bne.n	800413e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004132:	7b7b      	ldrb	r3, [r7, #13]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d102      	bne.n	800413e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004138:	7b3b      	ldrb	r3, [r7, #12]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d001      	beq.n	8004142 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e03e      	b.n	80041c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2202      	movs	r2, #2
 8004146:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2202      	movs	r2, #2
 800414e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2202      	movs	r2, #2
 8004156:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2202      	movs	r2, #2
 800415e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <HAL_TIM_Encoder_Start+0xc4>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	2b04      	cmp	r3, #4
 800416c:	d008      	beq.n	8004180 <HAL_TIM_Encoder_Start+0xd4>
 800416e:	e00f      	b.n	8004190 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2201      	movs	r2, #1
 8004176:	2100      	movs	r1, #0
 8004178:	4618      	mov	r0, r3
 800417a:	f001 f967 	bl	800544c <TIM_CCxChannelCmd>
      break;
 800417e:	e016      	b.n	80041ae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2201      	movs	r2, #1
 8004186:	2104      	movs	r1, #4
 8004188:	4618      	mov	r0, r3
 800418a:	f001 f95f 	bl	800544c <TIM_CCxChannelCmd>
      break;
 800418e:	e00e      	b.n	80041ae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2201      	movs	r2, #1
 8004196:	2100      	movs	r1, #0
 8004198:	4618      	mov	r0, r3
 800419a:	f001 f957 	bl	800544c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2201      	movs	r2, #1
 80041a4:	2104      	movs	r1, #4
 80041a6:	4618      	mov	r0, r3
 80041a8:	f001 f950 	bl	800544c <TIM_CCxChannelCmd>
      break;
 80041ac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f042 0201 	orr.w	r2, r2, #1
 80041bc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <HAL_TIM_Encoder_Stop+0x18>
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	2b04      	cmp	r3, #4
 80041dc:	d008      	beq.n	80041f0 <HAL_TIM_Encoder_Stop+0x28>
 80041de:	e00f      	b.n	8004200 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2200      	movs	r2, #0
 80041e6:	2100      	movs	r1, #0
 80041e8:	4618      	mov	r0, r3
 80041ea:	f001 f92f 	bl	800544c <TIM_CCxChannelCmd>
      break;
 80041ee:	e016      	b.n	800421e <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2200      	movs	r2, #0
 80041f6:	2104      	movs	r1, #4
 80041f8:	4618      	mov	r0, r3
 80041fa:	f001 f927 	bl	800544c <TIM_CCxChannelCmd>
      break;
 80041fe:	e00e      	b.n	800421e <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2200      	movs	r2, #0
 8004206:	2100      	movs	r1, #0
 8004208:	4618      	mov	r0, r3
 800420a:	f001 f91f 	bl	800544c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2200      	movs	r2, #0
 8004214:	2104      	movs	r1, #4
 8004216:	4618      	mov	r0, r3
 8004218:	f001 f918 	bl	800544c <TIM_CCxChannelCmd>
      break;
 800421c:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6a1a      	ldr	r2, [r3, #32]
 8004224:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004228:	4013      	ands	r3, r2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10f      	bne.n	800424e <HAL_TIM_Encoder_Stop+0x86>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	6a1a      	ldr	r2, [r3, #32]
 8004234:	f240 4344 	movw	r3, #1092	@ 0x444
 8004238:	4013      	ands	r3, r2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d107      	bne.n	800424e <HAL_TIM_Encoder_Stop+0x86>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0201 	bic.w	r2, r2, #1
 800424c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d002      	beq.n	800425a <HAL_TIM_Encoder_Stop+0x92>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2b04      	cmp	r3, #4
 8004258:	d138      	bne.n	80042cc <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d104      	bne.n	800426a <HAL_TIM_Encoder_Stop+0xa2>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004268:	e013      	b.n	8004292 <HAL_TIM_Encoder_Stop+0xca>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b04      	cmp	r3, #4
 800426e:	d104      	bne.n	800427a <HAL_TIM_Encoder_Stop+0xb2>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004278:	e00b      	b.n	8004292 <HAL_TIM_Encoder_Stop+0xca>
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b08      	cmp	r3, #8
 800427e:	d104      	bne.n	800428a <HAL_TIM_Encoder_Stop+0xc2>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004288:	e003      	b.n	8004292 <HAL_TIM_Encoder_Stop+0xca>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d104      	bne.n	80042a2 <HAL_TIM_Encoder_Stop+0xda>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042a0:	e024      	b.n	80042ec <HAL_TIM_Encoder_Stop+0x124>
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b04      	cmp	r3, #4
 80042a6:	d104      	bne.n	80042b2 <HAL_TIM_Encoder_Stop+0xea>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042b0:	e01c      	b.n	80042ec <HAL_TIM_Encoder_Stop+0x124>
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d104      	bne.n	80042c2 <HAL_TIM_Encoder_Stop+0xfa>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042c0:	e014      	b.n	80042ec <HAL_TIM_Encoder_Stop+0x124>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042ca:	e00f      	b.n	80042ec <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b084      	sub	sp, #16
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
 80042fe:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004306:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800430e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004316:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800431e:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d110      	bne.n	8004348 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004326:	7bfb      	ldrb	r3, [r7, #15]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d102      	bne.n	8004332 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800432c:	7b7b      	ldrb	r3, [r7, #13]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d001      	beq.n	8004336 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e089      	b.n	800444a <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2202      	movs	r2, #2
 800433a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2202      	movs	r2, #2
 8004342:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004346:	e031      	b.n	80043ac <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	2b04      	cmp	r3, #4
 800434c:	d110      	bne.n	8004370 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800434e:	7bbb      	ldrb	r3, [r7, #14]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d102      	bne.n	800435a <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004354:	7b3b      	ldrb	r3, [r7, #12]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d001      	beq.n	800435e <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e075      	b.n	800444a <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2202      	movs	r2, #2
 8004362:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2202      	movs	r2, #2
 800436a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800436e:	e01d      	b.n	80043ac <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004370:	7bfb      	ldrb	r3, [r7, #15]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d108      	bne.n	8004388 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004376:	7bbb      	ldrb	r3, [r7, #14]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d105      	bne.n	8004388 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800437c:	7b7b      	ldrb	r3, [r7, #13]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d102      	bne.n	8004388 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004382:	7b3b      	ldrb	r3, [r7, #12]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d001      	beq.n	800438c <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e05e      	b.n	800444a <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2202      	movs	r2, #2
 8004390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_TIM_Encoder_Start_IT+0xc4>
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	d010      	beq.n	80043da <HAL_TIM_Encoder_Start_IT+0xe4>
 80043b8:	e01f      	b.n	80043fa <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2201      	movs	r2, #1
 80043c0:	2100      	movs	r1, #0
 80043c2:	4618      	mov	r0, r3
 80043c4:	f001 f842 	bl	800544c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68da      	ldr	r2, [r3, #12]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0202 	orr.w	r2, r2, #2
 80043d6:	60da      	str	r2, [r3, #12]
      break;
 80043d8:	e02e      	b.n	8004438 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2201      	movs	r2, #1
 80043e0:	2104      	movs	r1, #4
 80043e2:	4618      	mov	r0, r3
 80043e4:	f001 f832 	bl	800544c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68da      	ldr	r2, [r3, #12]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0204 	orr.w	r2, r2, #4
 80043f6:	60da      	str	r2, [r3, #12]
      break;
 80043f8:	e01e      	b.n	8004438 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2201      	movs	r2, #1
 8004400:	2100      	movs	r1, #0
 8004402:	4618      	mov	r0, r3
 8004404:	f001 f822 	bl	800544c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2201      	movs	r2, #1
 800440e:	2104      	movs	r1, #4
 8004410:	4618      	mov	r0, r3
 8004412:	f001 f81b 	bl	800544c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68da      	ldr	r2, [r3, #12]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f042 0202 	orr.w	r2, r2, #2
 8004424:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f042 0204 	orr.w	r2, r2, #4
 8004434:	60da      	str	r2, [r3, #12]
      break;
 8004436:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f042 0201 	orr.w	r2, r2, #1
 8004446:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b082      	sub	sp, #8
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
 800445a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10f      	bne.n	8004482 <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2200      	movs	r2, #0
 8004468:	2100      	movs	r1, #0
 800446a:	4618      	mov	r0, r3
 800446c:	f000 ffee 	bl	800544c <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0202 	bic.w	r2, r2, #2
 800447e:	60da      	str	r2, [r3, #12]
 8004480:	e030      	b.n	80044e4 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	2b04      	cmp	r3, #4
 8004486:	d10f      	bne.n	80044a8 <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2200      	movs	r2, #0
 800448e:	2104      	movs	r1, #4
 8004490:	4618      	mov	r0, r3
 8004492:	f000 ffdb 	bl	800544c <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0204 	bic.w	r2, r2, #4
 80044a4:	60da      	str	r2, [r3, #12]
 80044a6:	e01d      	b.n	80044e4 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2200      	movs	r2, #0
 80044ae:	2100      	movs	r1, #0
 80044b0:	4618      	mov	r0, r3
 80044b2:	f000 ffcb 	bl	800544c <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2200      	movs	r2, #0
 80044bc:	2104      	movs	r1, #4
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 ffc4 	bl	800544c <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0202 	bic.w	r2, r2, #2
 80044d2:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f022 0204 	bic.w	r2, r2, #4
 80044e2:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6a1a      	ldr	r2, [r3, #32]
 80044ea:	f241 1311 	movw	r3, #4369	@ 0x1111
 80044ee:	4013      	ands	r3, r2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10f      	bne.n	8004514 <HAL_TIM_Encoder_Stop_IT+0xc2>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6a1a      	ldr	r2, [r3, #32]
 80044fa:	f240 4344 	movw	r3, #1092	@ 0x444
 80044fe:	4013      	ands	r3, r2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d107      	bne.n	8004514 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0201 	bic.w	r2, r2, #1
 8004512:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d002      	beq.n	8004520 <HAL_TIM_Encoder_Stop_IT+0xce>
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	2b04      	cmp	r3, #4
 800451e:	d138      	bne.n	8004592 <HAL_TIM_Encoder_Stop_IT+0x140>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d104      	bne.n	8004530 <HAL_TIM_Encoder_Stop_IT+0xde>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800452e:	e013      	b.n	8004558 <HAL_TIM_Encoder_Stop_IT+0x106>
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	2b04      	cmp	r3, #4
 8004534:	d104      	bne.n	8004540 <HAL_TIM_Encoder_Stop_IT+0xee>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800453e:	e00b      	b.n	8004558 <HAL_TIM_Encoder_Stop_IT+0x106>
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	2b08      	cmp	r3, #8
 8004544:	d104      	bne.n	8004550 <HAL_TIM_Encoder_Stop_IT+0xfe>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800454e:	e003      	b.n	8004558 <HAL_TIM_Encoder_Stop_IT+0x106>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d104      	bne.n	8004568 <HAL_TIM_Encoder_Stop_IT+0x116>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004566:	e024      	b.n	80045b2 <HAL_TIM_Encoder_Stop_IT+0x160>
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	2b04      	cmp	r3, #4
 800456c:	d104      	bne.n	8004578 <HAL_TIM_Encoder_Stop_IT+0x126>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004576:	e01c      	b.n	80045b2 <HAL_TIM_Encoder_Stop_IT+0x160>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	2b08      	cmp	r3, #8
 800457c:	d104      	bne.n	8004588 <HAL_TIM_Encoder_Stop_IT+0x136>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004586:	e014      	b.n	80045b2 <HAL_TIM_Encoder_Stop_IT+0x160>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004590:	e00f      	b.n	80045b2 <HAL_TIM_Encoder_Stop_IT+0x160>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3708      	adds	r7, #8
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d020      	beq.n	8004620 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d01b      	beq.n	8004620 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f06f 0202 	mvn.w	r2, #2
 80045f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	f003 0303 	and.w	r3, r3, #3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7fd fa36 	bl	8001a78 <HAL_TIM_IC_CaptureCallback>
 800460c:	e005      	b.n	800461a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 fb2e 	bl	8004c70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 fb35 	bl	8004c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f003 0304 	and.w	r3, r3, #4
 8004626:	2b00      	cmp	r3, #0
 8004628:	d020      	beq.n	800466c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f003 0304 	and.w	r3, r3, #4
 8004630:	2b00      	cmp	r3, #0
 8004632:	d01b      	beq.n	800466c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f06f 0204 	mvn.w	r2, #4
 800463c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2202      	movs	r2, #2
 8004642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f7fd fa10 	bl	8001a78 <HAL_TIM_IC_CaptureCallback>
 8004658:	e005      	b.n	8004666 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 fb08 	bl	8004c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 fb0f 	bl	8004c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	2b00      	cmp	r3, #0
 8004674:	d020      	beq.n	80046b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f003 0308 	and.w	r3, r3, #8
 800467c:	2b00      	cmp	r3, #0
 800467e:	d01b      	beq.n	80046b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f06f 0208 	mvn.w	r2, #8
 8004688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2204      	movs	r2, #4
 800468e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	f003 0303 	and.w	r3, r3, #3
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f7fd f9ea 	bl	8001a78 <HAL_TIM_IC_CaptureCallback>
 80046a4:	e005      	b.n	80046b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 fae2 	bl	8004c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 fae9 	bl	8004c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f003 0310 	and.w	r3, r3, #16
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d020      	beq.n	8004704 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f003 0310 	and.w	r3, r3, #16
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d01b      	beq.n	8004704 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f06f 0210 	mvn.w	r2, #16
 80046d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2208      	movs	r2, #8
 80046da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7fd f9c4 	bl	8001a78 <HAL_TIM_IC_CaptureCallback>
 80046f0:	e005      	b.n	80046fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 fabc 	bl	8004c70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 fac3 	bl	8004c84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00c      	beq.n	8004728 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b00      	cmp	r3, #0
 8004716:	d007      	beq.n	8004728 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f06f 0201 	mvn.w	r2, #1
 8004720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7fd f9da 	bl	8001adc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00c      	beq.n	800474c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004738:	2b00      	cmp	r3, #0
 800473a:	d007      	beq.n	800474c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 ff1e 	bl	8005588 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00c      	beq.n	8004770 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800475c:	2b00      	cmp	r3, #0
 800475e:	d007      	beq.n	8004770 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fa94 	bl	8004c98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	f003 0320 	and.w	r3, r3, #32
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00c      	beq.n	8004794 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f003 0320 	and.w	r3, r3, #32
 8004780:	2b00      	cmp	r3, #0
 8004782:	d007      	beq.n	8004794 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f06f 0220 	mvn.w	r2, #32
 800478c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fef0 	bl	8005574 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004794:	bf00      	nop
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047a8:	2300      	movs	r3, #0
 80047aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d101      	bne.n	80047ba <HAL_TIM_IC_ConfigChannel+0x1e>
 80047b6:	2302      	movs	r3, #2
 80047b8:	e088      	b.n	80048cc <HAL_TIM_IC_ConfigChannel+0x130>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d11b      	bne.n	8004800 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80047d8:	f000 fc80 	bl	80050dc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	699a      	ldr	r2, [r3, #24]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 020c 	bic.w	r2, r2, #12
 80047ea:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6999      	ldr	r1, [r3, #24]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	689a      	ldr	r2, [r3, #8]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	619a      	str	r2, [r3, #24]
 80047fe:	e060      	b.n	80048c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b04      	cmp	r3, #4
 8004804:	d11c      	bne.n	8004840 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004816:	f000 fcf8 	bl	800520a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	699a      	ldr	r2, [r3, #24]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004828:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6999      	ldr	r1, [r3, #24]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	021a      	lsls	r2, r3, #8
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	619a      	str	r2, [r3, #24]
 800483e:	e040      	b.n	80048c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b08      	cmp	r3, #8
 8004844:	d11b      	bne.n	800487e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004856:	f000 fd45 	bl	80052e4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	69da      	ldr	r2, [r3, #28]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f022 020c 	bic.w	r2, r2, #12
 8004868:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	69d9      	ldr	r1, [r3, #28]
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	61da      	str	r2, [r3, #28]
 800487c:	e021      	b.n	80048c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b0c      	cmp	r3, #12
 8004882:	d11c      	bne.n	80048be <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004894:	f000 fd62 	bl	800535c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	69da      	ldr	r2, [r3, #28]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80048a6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	69d9      	ldr	r1, [r3, #28]
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	021a      	lsls	r2, r3, #8
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	430a      	orrs	r2, r1
 80048ba:	61da      	str	r2, [r3, #28]
 80048bc:	e001      	b.n	80048c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3718      	adds	r7, #24
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d101      	bne.n	80048f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048ee:	2302      	movs	r3, #2
 80048f0:	e0ae      	b.n	8004a50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b0c      	cmp	r3, #12
 80048fe:	f200 809f 	bhi.w	8004a40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004902:	a201      	add	r2, pc, #4	@ (adr r2, 8004908 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004908:	0800493d 	.word	0x0800493d
 800490c:	08004a41 	.word	0x08004a41
 8004910:	08004a41 	.word	0x08004a41
 8004914:	08004a41 	.word	0x08004a41
 8004918:	0800497d 	.word	0x0800497d
 800491c:	08004a41 	.word	0x08004a41
 8004920:	08004a41 	.word	0x08004a41
 8004924:	08004a41 	.word	0x08004a41
 8004928:	080049bf 	.word	0x080049bf
 800492c:	08004a41 	.word	0x08004a41
 8004930:	08004a41 	.word	0x08004a41
 8004934:	08004a41 	.word	0x08004a41
 8004938:	080049ff 	.word	0x080049ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68b9      	ldr	r1, [r7, #8]
 8004942:	4618      	mov	r0, r3
 8004944:	f000 fa3e 	bl	8004dc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	699a      	ldr	r2, [r3, #24]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0208 	orr.w	r2, r2, #8
 8004956:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	699a      	ldr	r2, [r3, #24]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 0204 	bic.w	r2, r2, #4
 8004966:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6999      	ldr	r1, [r3, #24]
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	691a      	ldr	r2, [r3, #16]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	619a      	str	r2, [r3, #24]
      break;
 800497a:	e064      	b.n	8004a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68b9      	ldr	r1, [r7, #8]
 8004982:	4618      	mov	r0, r3
 8004984:	f000 fa84 	bl	8004e90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	699a      	ldr	r2, [r3, #24]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	699a      	ldr	r2, [r3, #24]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6999      	ldr	r1, [r3, #24]
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	021a      	lsls	r2, r3, #8
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	619a      	str	r2, [r3, #24]
      break;
 80049bc:	e043      	b.n	8004a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68b9      	ldr	r1, [r7, #8]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f000 facf 	bl	8004f68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	69da      	ldr	r2, [r3, #28]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f042 0208 	orr.w	r2, r2, #8
 80049d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	69da      	ldr	r2, [r3, #28]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 0204 	bic.w	r2, r2, #4
 80049e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	69d9      	ldr	r1, [r3, #28]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	691a      	ldr	r2, [r3, #16]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	430a      	orrs	r2, r1
 80049fa:	61da      	str	r2, [r3, #28]
      break;
 80049fc:	e023      	b.n	8004a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68b9      	ldr	r1, [r7, #8]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 fb19 	bl	800503c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	69da      	ldr	r2, [r3, #28]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	69da      	ldr	r2, [r3, #28]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	69d9      	ldr	r1, [r3, #28]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	021a      	lsls	r2, r3, #8
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	61da      	str	r2, [r3, #28]
      break;
 8004a3e:	e002      	b.n	8004a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	75fb      	strb	r3, [r7, #23]
      break;
 8004a44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3718      	adds	r7, #24
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d101      	bne.n	8004a74 <HAL_TIM_ConfigClockSource+0x1c>
 8004a70:	2302      	movs	r3, #2
 8004a72:	e0b4      	b.n	8004bde <HAL_TIM_ConfigClockSource+0x186>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004a92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aac:	d03e      	beq.n	8004b2c <HAL_TIM_ConfigClockSource+0xd4>
 8004aae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ab2:	f200 8087 	bhi.w	8004bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ab6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aba:	f000 8086 	beq.w	8004bca <HAL_TIM_ConfigClockSource+0x172>
 8004abe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ac2:	d87f      	bhi.n	8004bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ac4:	2b70      	cmp	r3, #112	@ 0x70
 8004ac6:	d01a      	beq.n	8004afe <HAL_TIM_ConfigClockSource+0xa6>
 8004ac8:	2b70      	cmp	r3, #112	@ 0x70
 8004aca:	d87b      	bhi.n	8004bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8004acc:	2b60      	cmp	r3, #96	@ 0x60
 8004ace:	d050      	beq.n	8004b72 <HAL_TIM_ConfigClockSource+0x11a>
 8004ad0:	2b60      	cmp	r3, #96	@ 0x60
 8004ad2:	d877      	bhi.n	8004bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ad4:	2b50      	cmp	r3, #80	@ 0x50
 8004ad6:	d03c      	beq.n	8004b52 <HAL_TIM_ConfigClockSource+0xfa>
 8004ad8:	2b50      	cmp	r3, #80	@ 0x50
 8004ada:	d873      	bhi.n	8004bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8004adc:	2b40      	cmp	r3, #64	@ 0x40
 8004ade:	d058      	beq.n	8004b92 <HAL_TIM_ConfigClockSource+0x13a>
 8004ae0:	2b40      	cmp	r3, #64	@ 0x40
 8004ae2:	d86f      	bhi.n	8004bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ae4:	2b30      	cmp	r3, #48	@ 0x30
 8004ae6:	d064      	beq.n	8004bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8004ae8:	2b30      	cmp	r3, #48	@ 0x30
 8004aea:	d86b      	bhi.n	8004bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8004aec:	2b20      	cmp	r3, #32
 8004aee:	d060      	beq.n	8004bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8004af0:	2b20      	cmp	r3, #32
 8004af2:	d867      	bhi.n	8004bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d05c      	beq.n	8004bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8004af8:	2b10      	cmp	r3, #16
 8004afa:	d05a      	beq.n	8004bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8004afc:	e062      	b.n	8004bc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b0e:	f000 fc7d 	bl	800540c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68ba      	ldr	r2, [r7, #8]
 8004b28:	609a      	str	r2, [r3, #8]
      break;
 8004b2a:	e04f      	b.n	8004bcc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b3c:	f000 fc66 	bl	800540c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b4e:	609a      	str	r2, [r3, #8]
      break;
 8004b50:	e03c      	b.n	8004bcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b5e:	461a      	mov	r2, r3
 8004b60:	f000 fb24 	bl	80051ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2150      	movs	r1, #80	@ 0x50
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 fc33 	bl	80053d6 <TIM_ITRx_SetConfig>
      break;
 8004b70:	e02c      	b.n	8004bcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b7e:	461a      	mov	r2, r3
 8004b80:	f000 fb80 	bl	8005284 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2160      	movs	r1, #96	@ 0x60
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 fc23 	bl	80053d6 <TIM_ITRx_SetConfig>
      break;
 8004b90:	e01c      	b.n	8004bcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f000 fb04 	bl	80051ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2140      	movs	r1, #64	@ 0x40
 8004baa:	4618      	mov	r0, r3
 8004bac:	f000 fc13 	bl	80053d6 <TIM_ITRx_SetConfig>
      break;
 8004bb0:	e00c      	b.n	8004bcc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4619      	mov	r1, r3
 8004bbc:	4610      	mov	r0, r2
 8004bbe:	f000 fc0a 	bl	80053d6 <TIM_ITRx_SetConfig>
      break;
 8004bc2:	e003      	b.n	8004bcc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8004bc8:	e000      	b.n	8004bcc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004bca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
	...

08004be8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b0c      	cmp	r3, #12
 8004bfa:	d831      	bhi.n	8004c60 <HAL_TIM_ReadCapturedValue+0x78>
 8004bfc:	a201      	add	r2, pc, #4	@ (adr r2, 8004c04 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c02:	bf00      	nop
 8004c04:	08004c39 	.word	0x08004c39
 8004c08:	08004c61 	.word	0x08004c61
 8004c0c:	08004c61 	.word	0x08004c61
 8004c10:	08004c61 	.word	0x08004c61
 8004c14:	08004c43 	.word	0x08004c43
 8004c18:	08004c61 	.word	0x08004c61
 8004c1c:	08004c61 	.word	0x08004c61
 8004c20:	08004c61 	.word	0x08004c61
 8004c24:	08004c4d 	.word	0x08004c4d
 8004c28:	08004c61 	.word	0x08004c61
 8004c2c:	08004c61 	.word	0x08004c61
 8004c30:	08004c61 	.word	0x08004c61
 8004c34:	08004c57 	.word	0x08004c57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c3e:	60fb      	str	r3, [r7, #12]

      break;
 8004c40:	e00f      	b.n	8004c62 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c48:	60fb      	str	r3, [r7, #12]

      break;
 8004c4a:	e00a      	b.n	8004c62 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c52:	60fb      	str	r3, [r7, #12]

      break;
 8004c54:	e005      	b.n	8004c62 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5c:	60fb      	str	r3, [r7, #12]

      break;
 8004c5e:	e000      	b.n	8004c62 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004c60:	bf00      	nop
  }

  return tmpreg;
 8004c62:	68fb      	ldr	r3, [r7, #12]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c78:	bf00      	nop
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a3a      	ldr	r2, [pc, #232]	@ (8004da8 <TIM_Base_SetConfig+0xfc>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d00f      	beq.n	8004ce4 <TIM_Base_SetConfig+0x38>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cca:	d00b      	beq.n	8004ce4 <TIM_Base_SetConfig+0x38>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a37      	ldr	r2, [pc, #220]	@ (8004dac <TIM_Base_SetConfig+0x100>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d007      	beq.n	8004ce4 <TIM_Base_SetConfig+0x38>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a36      	ldr	r2, [pc, #216]	@ (8004db0 <TIM_Base_SetConfig+0x104>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d003      	beq.n	8004ce4 <TIM_Base_SetConfig+0x38>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a35      	ldr	r2, [pc, #212]	@ (8004db4 <TIM_Base_SetConfig+0x108>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d108      	bne.n	8004cf6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a2b      	ldr	r2, [pc, #172]	@ (8004da8 <TIM_Base_SetConfig+0xfc>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d01b      	beq.n	8004d36 <TIM_Base_SetConfig+0x8a>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d04:	d017      	beq.n	8004d36 <TIM_Base_SetConfig+0x8a>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a28      	ldr	r2, [pc, #160]	@ (8004dac <TIM_Base_SetConfig+0x100>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d013      	beq.n	8004d36 <TIM_Base_SetConfig+0x8a>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a27      	ldr	r2, [pc, #156]	@ (8004db0 <TIM_Base_SetConfig+0x104>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d00f      	beq.n	8004d36 <TIM_Base_SetConfig+0x8a>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a26      	ldr	r2, [pc, #152]	@ (8004db4 <TIM_Base_SetConfig+0x108>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d00b      	beq.n	8004d36 <TIM_Base_SetConfig+0x8a>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a25      	ldr	r2, [pc, #148]	@ (8004db8 <TIM_Base_SetConfig+0x10c>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d007      	beq.n	8004d36 <TIM_Base_SetConfig+0x8a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a24      	ldr	r2, [pc, #144]	@ (8004dbc <TIM_Base_SetConfig+0x110>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d003      	beq.n	8004d36 <TIM_Base_SetConfig+0x8a>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a23      	ldr	r2, [pc, #140]	@ (8004dc0 <TIM_Base_SetConfig+0x114>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d108      	bne.n	8004d48 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a0e      	ldr	r2, [pc, #56]	@ (8004da8 <TIM_Base_SetConfig+0xfc>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d103      	bne.n	8004d7c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	691a      	ldr	r2, [r3, #16]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d105      	bne.n	8004d9a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	f023 0201 	bic.w	r2, r3, #1
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	611a      	str	r2, [r3, #16]
  }
}
 8004d9a:	bf00      	nop
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	40010000 	.word	0x40010000
 8004dac:	40000400 	.word	0x40000400
 8004db0:	40000800 	.word	0x40000800
 8004db4:	40000c00 	.word	0x40000c00
 8004db8:	40014000 	.word	0x40014000
 8004dbc:	40014400 	.word	0x40014400
 8004dc0:	40014800 	.word	0x40014800

08004dc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b087      	sub	sp, #28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	f023 0201 	bic.w	r2, r3, #1
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 0303 	bic.w	r3, r3, #3
 8004dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f023 0302 	bic.w	r3, r3, #2
 8004e0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	689b      	ldr	r3, [r3, #8]
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8004e8c <TIM_OC1_SetConfig+0xc8>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d10c      	bne.n	8004e3a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f023 0308 	bic.w	r3, r3, #8
 8004e26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f023 0304 	bic.w	r3, r3, #4
 8004e38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a13      	ldr	r2, [pc, #76]	@ (8004e8c <TIM_OC1_SetConfig+0xc8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d111      	bne.n	8004e66 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	621a      	str	r2, [r3, #32]
}
 8004e80:	bf00      	nop
 8004e82:	371c      	adds	r7, #28
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	40010000 	.word	0x40010000

08004e90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a1b      	ldr	r3, [r3, #32]
 8004ea4:	f023 0210 	bic.w	r2, r3, #16
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ec6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	021b      	lsls	r3, r3, #8
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f023 0320 	bic.w	r3, r3, #32
 8004eda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	011b      	lsls	r3, r3, #4
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a1e      	ldr	r2, [pc, #120]	@ (8004f64 <TIM_OC2_SetConfig+0xd4>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d10d      	bne.n	8004f0c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	011b      	lsls	r3, r3, #4
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a15      	ldr	r2, [pc, #84]	@ (8004f64 <TIM_OC2_SetConfig+0xd4>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d113      	bne.n	8004f3c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	695b      	ldr	r3, [r3, #20]
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	621a      	str	r2, [r3, #32]
}
 8004f56:	bf00      	nop
 8004f58:	371c      	adds	r7, #28
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	40010000 	.word	0x40010000

08004f68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b087      	sub	sp, #28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f023 0303 	bic.w	r3, r3, #3
 8004f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	021b      	lsls	r3, r3, #8
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a1d      	ldr	r2, [pc, #116]	@ (8005038 <TIM_OC3_SetConfig+0xd0>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d10d      	bne.n	8004fe2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004fcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	021b      	lsls	r3, r3, #8
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004fe0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a14      	ldr	r2, [pc, #80]	@ (8005038 <TIM_OC3_SetConfig+0xd0>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d113      	bne.n	8005012 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ff0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	011b      	lsls	r3, r3, #4
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	4313      	orrs	r3, r2
 8005004:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	011b      	lsls	r3, r3, #4
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	4313      	orrs	r3, r2
 8005010:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685a      	ldr	r2, [r3, #4]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	621a      	str	r2, [r3, #32]
}
 800502c:	bf00      	nop
 800502e:	371c      	adds	r7, #28
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	40010000 	.word	0x40010000

0800503c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800503c:	b480      	push	{r7}
 800503e:	b087      	sub	sp, #28
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800506a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005072:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	021b      	lsls	r3, r3, #8
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	4313      	orrs	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005086:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	031b      	lsls	r3, r3, #12
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	4313      	orrs	r3, r2
 8005092:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a10      	ldr	r2, [pc, #64]	@ (80050d8 <TIM_OC4_SetConfig+0x9c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d109      	bne.n	80050b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	019b      	lsls	r3, r3, #6
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685a      	ldr	r2, [r3, #4]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	621a      	str	r2, [r3, #32]
}
 80050ca:	bf00      	nop
 80050cc:	371c      	adds	r7, #28
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	40010000 	.word	0x40010000

080050dc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80050dc:	b480      	push	{r7}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
 80050e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	f023 0201 	bic.w	r2, r3, #1
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	4a24      	ldr	r2, [pc, #144]	@ (8005198 <TIM_TI1_SetConfig+0xbc>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d013      	beq.n	8005132 <TIM_TI1_SetConfig+0x56>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005110:	d00f      	beq.n	8005132 <TIM_TI1_SetConfig+0x56>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	4a21      	ldr	r2, [pc, #132]	@ (800519c <TIM_TI1_SetConfig+0xc0>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d00b      	beq.n	8005132 <TIM_TI1_SetConfig+0x56>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	4a20      	ldr	r2, [pc, #128]	@ (80051a0 <TIM_TI1_SetConfig+0xc4>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d007      	beq.n	8005132 <TIM_TI1_SetConfig+0x56>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	4a1f      	ldr	r2, [pc, #124]	@ (80051a4 <TIM_TI1_SetConfig+0xc8>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d003      	beq.n	8005132 <TIM_TI1_SetConfig+0x56>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4a1e      	ldr	r2, [pc, #120]	@ (80051a8 <TIM_TI1_SetConfig+0xcc>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d101      	bne.n	8005136 <TIM_TI1_SetConfig+0x5a>
 8005132:	2301      	movs	r3, #1
 8005134:	e000      	b.n	8005138 <TIM_TI1_SetConfig+0x5c>
 8005136:	2300      	movs	r3, #0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d008      	beq.n	800514e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f023 0303 	bic.w	r3, r3, #3
 8005142:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4313      	orrs	r3, r2
 800514a:	617b      	str	r3, [r7, #20]
 800514c:	e003      	b.n	8005156 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f043 0301 	orr.w	r3, r3, #1
 8005154:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800515c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	011b      	lsls	r3, r3, #4
 8005162:	b2db      	uxtb	r3, r3
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	4313      	orrs	r3, r2
 8005168:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f023 030a 	bic.w	r3, r3, #10
 8005170:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	f003 030a 	and.w	r3, r3, #10
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	4313      	orrs	r3, r2
 800517c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	621a      	str	r2, [r3, #32]
}
 800518a:	bf00      	nop
 800518c:	371c      	adds	r7, #28
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	40010000 	.word	0x40010000
 800519c:	40000400 	.word	0x40000400
 80051a0:	40000800 	.word	0x40000800
 80051a4:	40000c00 	.word	0x40000c00
 80051a8:	40014000 	.word	0x40014000

080051ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	f023 0201 	bic.w	r2, r3, #1
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80051d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	4313      	orrs	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f023 030a 	bic.w	r3, r3, #10
 80051e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	621a      	str	r2, [r3, #32]
}
 80051fe:	bf00      	nop
 8005200:	371c      	adds	r7, #28
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800520a:	b480      	push	{r7}
 800520c:	b087      	sub	sp, #28
 800520e:	af00      	add	r7, sp, #0
 8005210:	60f8      	str	r0, [r7, #12]
 8005212:	60b9      	str	r1, [r7, #8]
 8005214:	607a      	str	r2, [r7, #4]
 8005216:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	f023 0210 	bic.w	r2, r3, #16
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	021b      	lsls	r3, r3, #8
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	4313      	orrs	r3, r2
 8005240:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005248:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	031b      	lsls	r3, r3, #12
 800524e:	b29b      	uxth	r3, r3
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	4313      	orrs	r3, r2
 8005254:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800525c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	011b      	lsls	r3, r3, #4
 8005262:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	4313      	orrs	r3, r2
 800526a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	697a      	ldr	r2, [r7, #20]
 8005276:	621a      	str	r2, [r3, #32]
}
 8005278:	bf00      	nop
 800527a:	371c      	adds	r7, #28
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005284:	b480      	push	{r7}
 8005286:	b087      	sub	sp, #28
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	f023 0210 	bic.w	r2, r3, #16
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80052ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	031b      	lsls	r3, r3, #12
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80052c0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	011b      	lsls	r3, r3, #4
 80052c6:	697a      	ldr	r2, [r7, #20]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	621a      	str	r2, [r3, #32]
}
 80052d8:	bf00      	nop
 80052da:	371c      	adds	r7, #28
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
 80052f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6a1b      	ldr	r3, [r3, #32]
 80052f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	69db      	ldr	r3, [r3, #28]
 8005308:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	f023 0303 	bic.w	r3, r3, #3
 8005310:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4313      	orrs	r3, r2
 8005318:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005320:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	011b      	lsls	r3, r3, #4
 8005326:	b2db      	uxtb	r3, r3
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	4313      	orrs	r3, r2
 800532c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005334:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	021b      	lsls	r3, r3, #8
 800533a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	4313      	orrs	r3, r2
 8005342:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	621a      	str	r2, [r3, #32]
}
 8005350:	bf00      	nop
 8005352:	371c      	adds	r7, #28
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
 8005368:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	69db      	ldr	r3, [r3, #28]
 8005380:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005388:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	021b      	lsls	r3, r3, #8
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4313      	orrs	r3, r2
 8005392:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800539a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	031b      	lsls	r3, r3, #12
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80053ae:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	031b      	lsls	r3, r3, #12
 80053b4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80053b8:	697a      	ldr	r2, [r7, #20]
 80053ba:	4313      	orrs	r3, r2
 80053bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	697a      	ldr	r2, [r7, #20]
 80053c8:	621a      	str	r2, [r3, #32]
}
 80053ca:	bf00      	nop
 80053cc:	371c      	adds	r7, #28
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b085      	sub	sp, #20
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
 80053de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	f043 0307 	orr.w	r3, r3, #7
 80053f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	609a      	str	r2, [r3, #8]
}
 8005400:	bf00      	nop
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800540c:	b480      	push	{r7}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
 8005418:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005426:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	021a      	lsls	r2, r3, #8
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	431a      	orrs	r2, r3
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	4313      	orrs	r3, r2
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	4313      	orrs	r3, r2
 8005438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	609a      	str	r2, [r3, #8]
}
 8005440:	bf00      	nop
 8005442:	371c      	adds	r7, #28
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800544c:	b480      	push	{r7}
 800544e:	b087      	sub	sp, #28
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	f003 031f 	and.w	r3, r3, #31
 800545e:	2201      	movs	r2, #1
 8005460:	fa02 f303 	lsl.w	r3, r2, r3
 8005464:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6a1a      	ldr	r2, [r3, #32]
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	43db      	mvns	r3, r3
 800546e:	401a      	ands	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6a1a      	ldr	r2, [r3, #32]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f003 031f 	and.w	r3, r3, #31
 800547e:	6879      	ldr	r1, [r7, #4]
 8005480:	fa01 f303 	lsl.w	r3, r1, r3
 8005484:	431a      	orrs	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	621a      	str	r2, [r3, #32]
}
 800548a:	bf00      	nop
 800548c:	371c      	adds	r7, #28
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
	...

08005498 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d101      	bne.n	80054b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054ac:	2302      	movs	r3, #2
 80054ae:	e050      	b.n	8005552 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2202      	movs	r2, #2
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	4313      	orrs	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005560 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d018      	beq.n	8005526 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054fc:	d013      	beq.n	8005526 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a18      	ldr	r2, [pc, #96]	@ (8005564 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d00e      	beq.n	8005526 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a16      	ldr	r2, [pc, #88]	@ (8005568 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d009      	beq.n	8005526 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a15      	ldr	r2, [pc, #84]	@ (800556c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d004      	beq.n	8005526 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a13      	ldr	r2, [pc, #76]	@ (8005570 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d10c      	bne.n	8005540 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800552c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	68ba      	ldr	r2, [r7, #8]
 8005534:	4313      	orrs	r3, r2
 8005536:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3714      	adds	r7, #20
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	40010000 	.word	0x40010000
 8005564:	40000400 	.word	0x40000400
 8005568:	40000800 	.word	0x40000800
 800556c:	40000c00 	.word	0x40000c00
 8005570:	40014000 	.word	0x40014000

08005574 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e042      	b.n	8005634 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d106      	bne.n	80055c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7fc ff52 	bl	800246c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2224      	movs	r2, #36	@ 0x24
 80055cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68da      	ldr	r2, [r3, #12]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80055de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f973 	bl	80058cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	691a      	ldr	r2, [r3, #16]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	695a      	ldr	r2, [r3, #20]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005604:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68da      	ldr	r2, [r3, #12]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005614:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2220      	movs	r2, #32
 8005620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2220      	movs	r2, #32
 8005628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3708      	adds	r7, #8
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b08a      	sub	sp, #40	@ 0x28
 8005640:	af02      	add	r7, sp, #8
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	603b      	str	r3, [r7, #0]
 8005648:	4613      	mov	r3, r2
 800564a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800564c:	2300      	movs	r3, #0
 800564e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b20      	cmp	r3, #32
 800565a:	d175      	bne.n	8005748 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d002      	beq.n	8005668 <HAL_UART_Transmit+0x2c>
 8005662:	88fb      	ldrh	r3, [r7, #6]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e06e      	b.n	800574a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2221      	movs	r2, #33	@ 0x21
 8005676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800567a:	f7fd f911 	bl	80028a0 <HAL_GetTick>
 800567e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	88fa      	ldrh	r2, [r7, #6]
 8005684:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	88fa      	ldrh	r2, [r7, #6]
 800568a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005694:	d108      	bne.n	80056a8 <HAL_UART_Transmit+0x6c>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d104      	bne.n	80056a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800569e:	2300      	movs	r3, #0
 80056a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	61bb      	str	r3, [r7, #24]
 80056a6:	e003      	b.n	80056b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056ac:	2300      	movs	r3, #0
 80056ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80056b0:	e02e      	b.n	8005710 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	9300      	str	r3, [sp, #0]
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	2200      	movs	r2, #0
 80056ba:	2180      	movs	r1, #128	@ 0x80
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f000 f848 	bl	8005752 <UART_WaitOnFlagUntilTimeout>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d005      	beq.n	80056d4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2220      	movs	r2, #32
 80056cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e03a      	b.n	800574a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10b      	bne.n	80056f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	881b      	ldrh	r3, [r3, #0]
 80056de:	461a      	mov	r2, r3
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	3302      	adds	r3, #2
 80056ee:	61bb      	str	r3, [r7, #24]
 80056f0:	e007      	b.n	8005702 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	781a      	ldrb	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	3301      	adds	r3, #1
 8005700:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005706:	b29b      	uxth	r3, r3
 8005708:	3b01      	subs	r3, #1
 800570a:	b29a      	uxth	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005714:	b29b      	uxth	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1cb      	bne.n	80056b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	2200      	movs	r2, #0
 8005722:	2140      	movs	r1, #64	@ 0x40
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 f814 	bl	8005752 <UART_WaitOnFlagUntilTimeout>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d005      	beq.n	800573c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2220      	movs	r2, #32
 8005734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e006      	b.n	800574a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2220      	movs	r2, #32
 8005740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005744:	2300      	movs	r3, #0
 8005746:	e000      	b.n	800574a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005748:	2302      	movs	r3, #2
  }
}
 800574a:	4618      	mov	r0, r3
 800574c:	3720      	adds	r7, #32
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b086      	sub	sp, #24
 8005756:	af00      	add	r7, sp, #0
 8005758:	60f8      	str	r0, [r7, #12]
 800575a:	60b9      	str	r1, [r7, #8]
 800575c:	603b      	str	r3, [r7, #0]
 800575e:	4613      	mov	r3, r2
 8005760:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005762:	e03b      	b.n	80057dc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005764:	6a3b      	ldr	r3, [r7, #32]
 8005766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576a:	d037      	beq.n	80057dc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800576c:	f7fd f898 	bl	80028a0 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	6a3a      	ldr	r2, [r7, #32]
 8005778:	429a      	cmp	r2, r3
 800577a:	d302      	bcc.n	8005782 <UART_WaitOnFlagUntilTimeout+0x30>
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e03a      	b.n	80057fc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	68db      	ldr	r3, [r3, #12]
 800578c:	f003 0304 	and.w	r3, r3, #4
 8005790:	2b00      	cmp	r3, #0
 8005792:	d023      	beq.n	80057dc <UART_WaitOnFlagUntilTimeout+0x8a>
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	2b80      	cmp	r3, #128	@ 0x80
 8005798:	d020      	beq.n	80057dc <UART_WaitOnFlagUntilTimeout+0x8a>
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	2b40      	cmp	r3, #64	@ 0x40
 800579e:	d01d      	beq.n	80057dc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0308 	and.w	r3, r3, #8
 80057aa:	2b08      	cmp	r3, #8
 80057ac:	d116      	bne.n	80057dc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80057ae:	2300      	movs	r3, #0
 80057b0:	617b      	str	r3, [r7, #20]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	617b      	str	r3, [r7, #20]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	617b      	str	r3, [r7, #20]
 80057c2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f000 f81d 	bl	8005804 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2208      	movs	r2, #8
 80057ce:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e00f      	b.n	80057fc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	4013      	ands	r3, r2
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	bf0c      	ite	eq
 80057ec:	2301      	moveq	r3, #1
 80057ee:	2300      	movne	r3, #0
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	461a      	mov	r2, r3
 80057f4:	79fb      	ldrb	r3, [r7, #7]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d0b4      	beq.n	8005764 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3718      	adds	r7, #24
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005804:	b480      	push	{r7}
 8005806:	b095      	sub	sp, #84	@ 0x54
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	330c      	adds	r3, #12
 8005812:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005816:	e853 3f00 	ldrex	r3, [r3]
 800581a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800581c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800581e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005822:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	330c      	adds	r3, #12
 800582a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800582c:	643a      	str	r2, [r7, #64]	@ 0x40
 800582e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005830:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005832:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005834:	e841 2300 	strex	r3, r2, [r1]
 8005838:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800583a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1e5      	bne.n	800580c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3314      	adds	r3, #20
 8005846:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005848:	6a3b      	ldr	r3, [r7, #32]
 800584a:	e853 3f00 	ldrex	r3, [r3]
 800584e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	f023 0301 	bic.w	r3, r3, #1
 8005856:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	3314      	adds	r3, #20
 800585e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005860:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005862:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005864:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005866:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005868:	e841 2300 	strex	r3, r2, [r1]
 800586c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800586e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1e5      	bne.n	8005840 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005878:	2b01      	cmp	r3, #1
 800587a:	d119      	bne.n	80058b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	330c      	adds	r3, #12
 8005882:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	e853 3f00 	ldrex	r3, [r3]
 800588a:	60bb      	str	r3, [r7, #8]
   return(result);
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	f023 0310 	bic.w	r3, r3, #16
 8005892:	647b      	str	r3, [r7, #68]	@ 0x44
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	330c      	adds	r3, #12
 800589a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800589c:	61ba      	str	r2, [r7, #24]
 800589e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a0:	6979      	ldr	r1, [r7, #20]
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	e841 2300 	strex	r3, r2, [r1]
 80058a8:	613b      	str	r3, [r7, #16]
   return(result);
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1e5      	bne.n	800587c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2220      	movs	r2, #32
 80058b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80058be:	bf00      	nop
 80058c0:	3754      	adds	r7, #84	@ 0x54
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr
	...

080058cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058d0:	b0c0      	sub	sp, #256	@ 0x100
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80058e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e8:	68d9      	ldr	r1, [r3, #12]
 80058ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	ea40 0301 	orr.w	r3, r0, r1
 80058f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	431a      	orrs	r2, r3
 8005904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	431a      	orrs	r2, r3
 800590c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	4313      	orrs	r3, r2
 8005914:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005924:	f021 010c 	bic.w	r1, r1, #12
 8005928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005932:	430b      	orrs	r3, r1
 8005934:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005946:	6999      	ldr	r1, [r3, #24]
 8005948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	ea40 0301 	orr.w	r3, r0, r1
 8005952:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	4b8f      	ldr	r3, [pc, #572]	@ (8005b98 <UART_SetConfig+0x2cc>)
 800595c:	429a      	cmp	r2, r3
 800595e:	d005      	beq.n	800596c <UART_SetConfig+0xa0>
 8005960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	4b8d      	ldr	r3, [pc, #564]	@ (8005b9c <UART_SetConfig+0x2d0>)
 8005968:	429a      	cmp	r2, r3
 800596a:	d104      	bne.n	8005976 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800596c:	f7fd ff06 	bl	800377c <HAL_RCC_GetPCLK2Freq>
 8005970:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005974:	e003      	b.n	800597e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005976:	f7fd feed 	bl	8003754 <HAL_RCC_GetPCLK1Freq>
 800597a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800597e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005982:	69db      	ldr	r3, [r3, #28]
 8005984:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005988:	f040 810c 	bne.w	8005ba4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800598c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005990:	2200      	movs	r2, #0
 8005992:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005996:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800599a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800599e:	4622      	mov	r2, r4
 80059a0:	462b      	mov	r3, r5
 80059a2:	1891      	adds	r1, r2, r2
 80059a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80059a6:	415b      	adcs	r3, r3
 80059a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80059aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80059ae:	4621      	mov	r1, r4
 80059b0:	eb12 0801 	adds.w	r8, r2, r1
 80059b4:	4629      	mov	r1, r5
 80059b6:	eb43 0901 	adc.w	r9, r3, r1
 80059ba:	f04f 0200 	mov.w	r2, #0
 80059be:	f04f 0300 	mov.w	r3, #0
 80059c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059ce:	4690      	mov	r8, r2
 80059d0:	4699      	mov	r9, r3
 80059d2:	4623      	mov	r3, r4
 80059d4:	eb18 0303 	adds.w	r3, r8, r3
 80059d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80059dc:	462b      	mov	r3, r5
 80059de:	eb49 0303 	adc.w	r3, r9, r3
 80059e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80059e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80059f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80059f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80059fa:	460b      	mov	r3, r1
 80059fc:	18db      	adds	r3, r3, r3
 80059fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a00:	4613      	mov	r3, r2
 8005a02:	eb42 0303 	adc.w	r3, r2, r3
 8005a06:	657b      	str	r3, [r7, #84]	@ 0x54
 8005a08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005a0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005a10:	f7fb f8d2 	bl	8000bb8 <__aeabi_uldivmod>
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	4b61      	ldr	r3, [pc, #388]	@ (8005ba0 <UART_SetConfig+0x2d4>)
 8005a1a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a1e:	095b      	lsrs	r3, r3, #5
 8005a20:	011c      	lsls	r4, r3, #4
 8005a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a26:	2200      	movs	r2, #0
 8005a28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a2c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005a30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005a34:	4642      	mov	r2, r8
 8005a36:	464b      	mov	r3, r9
 8005a38:	1891      	adds	r1, r2, r2
 8005a3a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005a3c:	415b      	adcs	r3, r3
 8005a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005a44:	4641      	mov	r1, r8
 8005a46:	eb12 0a01 	adds.w	sl, r2, r1
 8005a4a:	4649      	mov	r1, r9
 8005a4c:	eb43 0b01 	adc.w	fp, r3, r1
 8005a50:	f04f 0200 	mov.w	r2, #0
 8005a54:	f04f 0300 	mov.w	r3, #0
 8005a58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a64:	4692      	mov	sl, r2
 8005a66:	469b      	mov	fp, r3
 8005a68:	4643      	mov	r3, r8
 8005a6a:	eb1a 0303 	adds.w	r3, sl, r3
 8005a6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a72:	464b      	mov	r3, r9
 8005a74:	eb4b 0303 	adc.w	r3, fp, r3
 8005a78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a88:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005a8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a90:	460b      	mov	r3, r1
 8005a92:	18db      	adds	r3, r3, r3
 8005a94:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a96:	4613      	mov	r3, r2
 8005a98:	eb42 0303 	adc.w	r3, r2, r3
 8005a9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005aa2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005aa6:	f7fb f887 	bl	8000bb8 <__aeabi_uldivmod>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	460b      	mov	r3, r1
 8005aae:	4611      	mov	r1, r2
 8005ab0:	4b3b      	ldr	r3, [pc, #236]	@ (8005ba0 <UART_SetConfig+0x2d4>)
 8005ab2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ab6:	095b      	lsrs	r3, r3, #5
 8005ab8:	2264      	movs	r2, #100	@ 0x64
 8005aba:	fb02 f303 	mul.w	r3, r2, r3
 8005abe:	1acb      	subs	r3, r1, r3
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005ac6:	4b36      	ldr	r3, [pc, #216]	@ (8005ba0 <UART_SetConfig+0x2d4>)
 8005ac8:	fba3 2302 	umull	r2, r3, r3, r2
 8005acc:	095b      	lsrs	r3, r3, #5
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005ad4:	441c      	add	r4, r3
 8005ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ada:	2200      	movs	r2, #0
 8005adc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ae0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005ae4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005ae8:	4642      	mov	r2, r8
 8005aea:	464b      	mov	r3, r9
 8005aec:	1891      	adds	r1, r2, r2
 8005aee:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005af0:	415b      	adcs	r3, r3
 8005af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005af4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005af8:	4641      	mov	r1, r8
 8005afa:	1851      	adds	r1, r2, r1
 8005afc:	6339      	str	r1, [r7, #48]	@ 0x30
 8005afe:	4649      	mov	r1, r9
 8005b00:	414b      	adcs	r3, r1
 8005b02:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b04:	f04f 0200 	mov.w	r2, #0
 8005b08:	f04f 0300 	mov.w	r3, #0
 8005b0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005b10:	4659      	mov	r1, fp
 8005b12:	00cb      	lsls	r3, r1, #3
 8005b14:	4651      	mov	r1, sl
 8005b16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b1a:	4651      	mov	r1, sl
 8005b1c:	00ca      	lsls	r2, r1, #3
 8005b1e:	4610      	mov	r0, r2
 8005b20:	4619      	mov	r1, r3
 8005b22:	4603      	mov	r3, r0
 8005b24:	4642      	mov	r2, r8
 8005b26:	189b      	adds	r3, r3, r2
 8005b28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b2c:	464b      	mov	r3, r9
 8005b2e:	460a      	mov	r2, r1
 8005b30:	eb42 0303 	adc.w	r3, r2, r3
 8005b34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b44:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005b48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	18db      	adds	r3, r3, r3
 8005b50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b52:	4613      	mov	r3, r2
 8005b54:	eb42 0303 	adc.w	r3, r2, r3
 8005b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b62:	f7fb f829 	bl	8000bb8 <__aeabi_uldivmod>
 8005b66:	4602      	mov	r2, r0
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ba0 <UART_SetConfig+0x2d4>)
 8005b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b70:	095b      	lsrs	r3, r3, #5
 8005b72:	2164      	movs	r1, #100	@ 0x64
 8005b74:	fb01 f303 	mul.w	r3, r1, r3
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	3332      	adds	r3, #50	@ 0x32
 8005b7e:	4a08      	ldr	r2, [pc, #32]	@ (8005ba0 <UART_SetConfig+0x2d4>)
 8005b80:	fba2 2303 	umull	r2, r3, r2, r3
 8005b84:	095b      	lsrs	r3, r3, #5
 8005b86:	f003 0207 	and.w	r2, r3, #7
 8005b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4422      	add	r2, r4
 8005b92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b94:	e106      	b.n	8005da4 <UART_SetConfig+0x4d8>
 8005b96:	bf00      	nop
 8005b98:	40011000 	.word	0x40011000
 8005b9c:	40011400 	.word	0x40011400
 8005ba0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ba4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005bae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005bb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005bb6:	4642      	mov	r2, r8
 8005bb8:	464b      	mov	r3, r9
 8005bba:	1891      	adds	r1, r2, r2
 8005bbc:	6239      	str	r1, [r7, #32]
 8005bbe:	415b      	adcs	r3, r3
 8005bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bc6:	4641      	mov	r1, r8
 8005bc8:	1854      	adds	r4, r2, r1
 8005bca:	4649      	mov	r1, r9
 8005bcc:	eb43 0501 	adc.w	r5, r3, r1
 8005bd0:	f04f 0200 	mov.w	r2, #0
 8005bd4:	f04f 0300 	mov.w	r3, #0
 8005bd8:	00eb      	lsls	r3, r5, #3
 8005bda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bde:	00e2      	lsls	r2, r4, #3
 8005be0:	4614      	mov	r4, r2
 8005be2:	461d      	mov	r5, r3
 8005be4:	4643      	mov	r3, r8
 8005be6:	18e3      	adds	r3, r4, r3
 8005be8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005bec:	464b      	mov	r3, r9
 8005bee:	eb45 0303 	adc.w	r3, r5, r3
 8005bf2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005c02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c06:	f04f 0200 	mov.w	r2, #0
 8005c0a:	f04f 0300 	mov.w	r3, #0
 8005c0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005c12:	4629      	mov	r1, r5
 8005c14:	008b      	lsls	r3, r1, #2
 8005c16:	4621      	mov	r1, r4
 8005c18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c1c:	4621      	mov	r1, r4
 8005c1e:	008a      	lsls	r2, r1, #2
 8005c20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005c24:	f7fa ffc8 	bl	8000bb8 <__aeabi_uldivmod>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	4b60      	ldr	r3, [pc, #384]	@ (8005db0 <UART_SetConfig+0x4e4>)
 8005c2e:	fba3 2302 	umull	r2, r3, r3, r2
 8005c32:	095b      	lsrs	r3, r3, #5
 8005c34:	011c      	lsls	r4, r3, #4
 8005c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c40:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005c44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005c48:	4642      	mov	r2, r8
 8005c4a:	464b      	mov	r3, r9
 8005c4c:	1891      	adds	r1, r2, r2
 8005c4e:	61b9      	str	r1, [r7, #24]
 8005c50:	415b      	adcs	r3, r3
 8005c52:	61fb      	str	r3, [r7, #28]
 8005c54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c58:	4641      	mov	r1, r8
 8005c5a:	1851      	adds	r1, r2, r1
 8005c5c:	6139      	str	r1, [r7, #16]
 8005c5e:	4649      	mov	r1, r9
 8005c60:	414b      	adcs	r3, r1
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	f04f 0200 	mov.w	r2, #0
 8005c68:	f04f 0300 	mov.w	r3, #0
 8005c6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c70:	4659      	mov	r1, fp
 8005c72:	00cb      	lsls	r3, r1, #3
 8005c74:	4651      	mov	r1, sl
 8005c76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c7a:	4651      	mov	r1, sl
 8005c7c:	00ca      	lsls	r2, r1, #3
 8005c7e:	4610      	mov	r0, r2
 8005c80:	4619      	mov	r1, r3
 8005c82:	4603      	mov	r3, r0
 8005c84:	4642      	mov	r2, r8
 8005c86:	189b      	adds	r3, r3, r2
 8005c88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c8c:	464b      	mov	r3, r9
 8005c8e:	460a      	mov	r2, r1
 8005c90:	eb42 0303 	adc.w	r3, r2, r3
 8005c94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ca2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005ca4:	f04f 0200 	mov.w	r2, #0
 8005ca8:	f04f 0300 	mov.w	r3, #0
 8005cac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005cb0:	4649      	mov	r1, r9
 8005cb2:	008b      	lsls	r3, r1, #2
 8005cb4:	4641      	mov	r1, r8
 8005cb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cba:	4641      	mov	r1, r8
 8005cbc:	008a      	lsls	r2, r1, #2
 8005cbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005cc2:	f7fa ff79 	bl	8000bb8 <__aeabi_uldivmod>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	460b      	mov	r3, r1
 8005cca:	4611      	mov	r1, r2
 8005ccc:	4b38      	ldr	r3, [pc, #224]	@ (8005db0 <UART_SetConfig+0x4e4>)
 8005cce:	fba3 2301 	umull	r2, r3, r3, r1
 8005cd2:	095b      	lsrs	r3, r3, #5
 8005cd4:	2264      	movs	r2, #100	@ 0x64
 8005cd6:	fb02 f303 	mul.w	r3, r2, r3
 8005cda:	1acb      	subs	r3, r1, r3
 8005cdc:	011b      	lsls	r3, r3, #4
 8005cde:	3332      	adds	r3, #50	@ 0x32
 8005ce0:	4a33      	ldr	r2, [pc, #204]	@ (8005db0 <UART_SetConfig+0x4e4>)
 8005ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce6:	095b      	lsrs	r3, r3, #5
 8005ce8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cec:	441c      	add	r4, r3
 8005cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	673b      	str	r3, [r7, #112]	@ 0x70
 8005cf6:	677a      	str	r2, [r7, #116]	@ 0x74
 8005cf8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005cfc:	4642      	mov	r2, r8
 8005cfe:	464b      	mov	r3, r9
 8005d00:	1891      	adds	r1, r2, r2
 8005d02:	60b9      	str	r1, [r7, #8]
 8005d04:	415b      	adcs	r3, r3
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d0c:	4641      	mov	r1, r8
 8005d0e:	1851      	adds	r1, r2, r1
 8005d10:	6039      	str	r1, [r7, #0]
 8005d12:	4649      	mov	r1, r9
 8005d14:	414b      	adcs	r3, r1
 8005d16:	607b      	str	r3, [r7, #4]
 8005d18:	f04f 0200 	mov.w	r2, #0
 8005d1c:	f04f 0300 	mov.w	r3, #0
 8005d20:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005d24:	4659      	mov	r1, fp
 8005d26:	00cb      	lsls	r3, r1, #3
 8005d28:	4651      	mov	r1, sl
 8005d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d2e:	4651      	mov	r1, sl
 8005d30:	00ca      	lsls	r2, r1, #3
 8005d32:	4610      	mov	r0, r2
 8005d34:	4619      	mov	r1, r3
 8005d36:	4603      	mov	r3, r0
 8005d38:	4642      	mov	r2, r8
 8005d3a:	189b      	adds	r3, r3, r2
 8005d3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d3e:	464b      	mov	r3, r9
 8005d40:	460a      	mov	r2, r1
 8005d42:	eb42 0303 	adc.w	r3, r2, r3
 8005d46:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d52:	667a      	str	r2, [r7, #100]	@ 0x64
 8005d54:	f04f 0200 	mov.w	r2, #0
 8005d58:	f04f 0300 	mov.w	r3, #0
 8005d5c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005d60:	4649      	mov	r1, r9
 8005d62:	008b      	lsls	r3, r1, #2
 8005d64:	4641      	mov	r1, r8
 8005d66:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d6a:	4641      	mov	r1, r8
 8005d6c:	008a      	lsls	r2, r1, #2
 8005d6e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005d72:	f7fa ff21 	bl	8000bb8 <__aeabi_uldivmod>
 8005d76:	4602      	mov	r2, r0
 8005d78:	460b      	mov	r3, r1
 8005d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8005db0 <UART_SetConfig+0x4e4>)
 8005d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d80:	095b      	lsrs	r3, r3, #5
 8005d82:	2164      	movs	r1, #100	@ 0x64
 8005d84:	fb01 f303 	mul.w	r3, r1, r3
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	011b      	lsls	r3, r3, #4
 8005d8c:	3332      	adds	r3, #50	@ 0x32
 8005d8e:	4a08      	ldr	r2, [pc, #32]	@ (8005db0 <UART_SetConfig+0x4e4>)
 8005d90:	fba2 2303 	umull	r2, r3, r2, r3
 8005d94:	095b      	lsrs	r3, r3, #5
 8005d96:	f003 020f 	and.w	r2, r3, #15
 8005d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4422      	add	r2, r4
 8005da2:	609a      	str	r2, [r3, #8]
}
 8005da4:	bf00      	nop
 8005da6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005daa:	46bd      	mov	sp, r7
 8005dac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005db0:	51eb851f 	.word	0x51eb851f

08005db4 <_ZdlPvj>:
 8005db4:	f000 b811 	b.w	8005dda <_ZdlPv>

08005db8 <_Znwj>:
 8005db8:	2801      	cmp	r0, #1
 8005dba:	bf38      	it	cc
 8005dbc:	2001      	movcc	r0, #1
 8005dbe:	b510      	push	{r4, lr}
 8005dc0:	4604      	mov	r4, r0
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	f000 f81c 	bl	8005e00 <malloc>
 8005dc8:	b100      	cbz	r0, 8005dcc <_Znwj+0x14>
 8005dca:	bd10      	pop	{r4, pc}
 8005dcc:	f000 f808 	bl	8005de0 <_ZSt15get_new_handlerv>
 8005dd0:	b908      	cbnz	r0, 8005dd6 <_Znwj+0x1e>
 8005dd2:	f000 f80d 	bl	8005df0 <abort>
 8005dd6:	4780      	blx	r0
 8005dd8:	e7f3      	b.n	8005dc2 <_Znwj+0xa>

08005dda <_ZdlPv>:
 8005dda:	f000 b819 	b.w	8005e10 <free>
	...

08005de0 <_ZSt15get_new_handlerv>:
 8005de0:	4b02      	ldr	r3, [pc, #8]	@ (8005dec <_ZSt15get_new_handlerv+0xc>)
 8005de2:	6818      	ldr	r0, [r3, #0]
 8005de4:	f3bf 8f5b 	dmb	ish
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	20000398 	.word	0x20000398

08005df0 <abort>:
 8005df0:	b508      	push	{r3, lr}
 8005df2:	2006      	movs	r0, #6
 8005df4:	f000 fea4 	bl	8006b40 <raise>
 8005df8:	2001      	movs	r0, #1
 8005dfa:	f7fc fc01 	bl	8002600 <_exit>
	...

08005e00 <malloc>:
 8005e00:	4b02      	ldr	r3, [pc, #8]	@ (8005e0c <malloc+0xc>)
 8005e02:	4601      	mov	r1, r0
 8005e04:	6818      	ldr	r0, [r3, #0]
 8005e06:	f000 b82d 	b.w	8005e64 <_malloc_r>
 8005e0a:	bf00      	nop
 8005e0c:	20000018 	.word	0x20000018

08005e10 <free>:
 8005e10:	4b02      	ldr	r3, [pc, #8]	@ (8005e1c <free+0xc>)
 8005e12:	4601      	mov	r1, r0
 8005e14:	6818      	ldr	r0, [r3, #0]
 8005e16:	f001 bd83 	b.w	8007920 <_free_r>
 8005e1a:	bf00      	nop
 8005e1c:	20000018 	.word	0x20000018

08005e20 <sbrk_aligned>:
 8005e20:	b570      	push	{r4, r5, r6, lr}
 8005e22:	4e0f      	ldr	r6, [pc, #60]	@ (8005e60 <sbrk_aligned+0x40>)
 8005e24:	460c      	mov	r4, r1
 8005e26:	6831      	ldr	r1, [r6, #0]
 8005e28:	4605      	mov	r5, r0
 8005e2a:	b911      	cbnz	r1, 8005e32 <sbrk_aligned+0x12>
 8005e2c:	f000 fedc 	bl	8006be8 <_sbrk_r>
 8005e30:	6030      	str	r0, [r6, #0]
 8005e32:	4621      	mov	r1, r4
 8005e34:	4628      	mov	r0, r5
 8005e36:	f000 fed7 	bl	8006be8 <_sbrk_r>
 8005e3a:	1c43      	adds	r3, r0, #1
 8005e3c:	d103      	bne.n	8005e46 <sbrk_aligned+0x26>
 8005e3e:	f04f 34ff 	mov.w	r4, #4294967295
 8005e42:	4620      	mov	r0, r4
 8005e44:	bd70      	pop	{r4, r5, r6, pc}
 8005e46:	1cc4      	adds	r4, r0, #3
 8005e48:	f024 0403 	bic.w	r4, r4, #3
 8005e4c:	42a0      	cmp	r0, r4
 8005e4e:	d0f8      	beq.n	8005e42 <sbrk_aligned+0x22>
 8005e50:	1a21      	subs	r1, r4, r0
 8005e52:	4628      	mov	r0, r5
 8005e54:	f000 fec8 	bl	8006be8 <_sbrk_r>
 8005e58:	3001      	adds	r0, #1
 8005e5a:	d1f2      	bne.n	8005e42 <sbrk_aligned+0x22>
 8005e5c:	e7ef      	b.n	8005e3e <sbrk_aligned+0x1e>
 8005e5e:	bf00      	nop
 8005e60:	2000039c 	.word	0x2000039c

08005e64 <_malloc_r>:
 8005e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e68:	1ccd      	adds	r5, r1, #3
 8005e6a:	f025 0503 	bic.w	r5, r5, #3
 8005e6e:	3508      	adds	r5, #8
 8005e70:	2d0c      	cmp	r5, #12
 8005e72:	bf38      	it	cc
 8005e74:	250c      	movcc	r5, #12
 8005e76:	2d00      	cmp	r5, #0
 8005e78:	4606      	mov	r6, r0
 8005e7a:	db01      	blt.n	8005e80 <_malloc_r+0x1c>
 8005e7c:	42a9      	cmp	r1, r5
 8005e7e:	d904      	bls.n	8005e8a <_malloc_r+0x26>
 8005e80:	230c      	movs	r3, #12
 8005e82:	6033      	str	r3, [r6, #0]
 8005e84:	2000      	movs	r0, #0
 8005e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f60 <_malloc_r+0xfc>
 8005e8e:	f000 f869 	bl	8005f64 <__malloc_lock>
 8005e92:	f8d8 3000 	ldr.w	r3, [r8]
 8005e96:	461c      	mov	r4, r3
 8005e98:	bb44      	cbnz	r4, 8005eec <_malloc_r+0x88>
 8005e9a:	4629      	mov	r1, r5
 8005e9c:	4630      	mov	r0, r6
 8005e9e:	f7ff ffbf 	bl	8005e20 <sbrk_aligned>
 8005ea2:	1c43      	adds	r3, r0, #1
 8005ea4:	4604      	mov	r4, r0
 8005ea6:	d158      	bne.n	8005f5a <_malloc_r+0xf6>
 8005ea8:	f8d8 4000 	ldr.w	r4, [r8]
 8005eac:	4627      	mov	r7, r4
 8005eae:	2f00      	cmp	r7, #0
 8005eb0:	d143      	bne.n	8005f3a <_malloc_r+0xd6>
 8005eb2:	2c00      	cmp	r4, #0
 8005eb4:	d04b      	beq.n	8005f4e <_malloc_r+0xea>
 8005eb6:	6823      	ldr	r3, [r4, #0]
 8005eb8:	4639      	mov	r1, r7
 8005eba:	4630      	mov	r0, r6
 8005ebc:	eb04 0903 	add.w	r9, r4, r3
 8005ec0:	f000 fe92 	bl	8006be8 <_sbrk_r>
 8005ec4:	4581      	cmp	r9, r0
 8005ec6:	d142      	bne.n	8005f4e <_malloc_r+0xea>
 8005ec8:	6821      	ldr	r1, [r4, #0]
 8005eca:	1a6d      	subs	r5, r5, r1
 8005ecc:	4629      	mov	r1, r5
 8005ece:	4630      	mov	r0, r6
 8005ed0:	f7ff ffa6 	bl	8005e20 <sbrk_aligned>
 8005ed4:	3001      	adds	r0, #1
 8005ed6:	d03a      	beq.n	8005f4e <_malloc_r+0xea>
 8005ed8:	6823      	ldr	r3, [r4, #0]
 8005eda:	442b      	add	r3, r5
 8005edc:	6023      	str	r3, [r4, #0]
 8005ede:	f8d8 3000 	ldr.w	r3, [r8]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	bb62      	cbnz	r2, 8005f40 <_malloc_r+0xdc>
 8005ee6:	f8c8 7000 	str.w	r7, [r8]
 8005eea:	e00f      	b.n	8005f0c <_malloc_r+0xa8>
 8005eec:	6822      	ldr	r2, [r4, #0]
 8005eee:	1b52      	subs	r2, r2, r5
 8005ef0:	d420      	bmi.n	8005f34 <_malloc_r+0xd0>
 8005ef2:	2a0b      	cmp	r2, #11
 8005ef4:	d917      	bls.n	8005f26 <_malloc_r+0xc2>
 8005ef6:	1961      	adds	r1, r4, r5
 8005ef8:	42a3      	cmp	r3, r4
 8005efa:	6025      	str	r5, [r4, #0]
 8005efc:	bf18      	it	ne
 8005efe:	6059      	strne	r1, [r3, #4]
 8005f00:	6863      	ldr	r3, [r4, #4]
 8005f02:	bf08      	it	eq
 8005f04:	f8c8 1000 	streq.w	r1, [r8]
 8005f08:	5162      	str	r2, [r4, r5]
 8005f0a:	604b      	str	r3, [r1, #4]
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	f000 f82f 	bl	8005f70 <__malloc_unlock>
 8005f12:	f104 000b 	add.w	r0, r4, #11
 8005f16:	1d23      	adds	r3, r4, #4
 8005f18:	f020 0007 	bic.w	r0, r0, #7
 8005f1c:	1ac2      	subs	r2, r0, r3
 8005f1e:	bf1c      	itt	ne
 8005f20:	1a1b      	subne	r3, r3, r0
 8005f22:	50a3      	strne	r3, [r4, r2]
 8005f24:	e7af      	b.n	8005e86 <_malloc_r+0x22>
 8005f26:	6862      	ldr	r2, [r4, #4]
 8005f28:	42a3      	cmp	r3, r4
 8005f2a:	bf0c      	ite	eq
 8005f2c:	f8c8 2000 	streq.w	r2, [r8]
 8005f30:	605a      	strne	r2, [r3, #4]
 8005f32:	e7eb      	b.n	8005f0c <_malloc_r+0xa8>
 8005f34:	4623      	mov	r3, r4
 8005f36:	6864      	ldr	r4, [r4, #4]
 8005f38:	e7ae      	b.n	8005e98 <_malloc_r+0x34>
 8005f3a:	463c      	mov	r4, r7
 8005f3c:	687f      	ldr	r7, [r7, #4]
 8005f3e:	e7b6      	b.n	8005eae <_malloc_r+0x4a>
 8005f40:	461a      	mov	r2, r3
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	42a3      	cmp	r3, r4
 8005f46:	d1fb      	bne.n	8005f40 <_malloc_r+0xdc>
 8005f48:	2300      	movs	r3, #0
 8005f4a:	6053      	str	r3, [r2, #4]
 8005f4c:	e7de      	b.n	8005f0c <_malloc_r+0xa8>
 8005f4e:	230c      	movs	r3, #12
 8005f50:	6033      	str	r3, [r6, #0]
 8005f52:	4630      	mov	r0, r6
 8005f54:	f000 f80c 	bl	8005f70 <__malloc_unlock>
 8005f58:	e794      	b.n	8005e84 <_malloc_r+0x20>
 8005f5a:	6005      	str	r5, [r0, #0]
 8005f5c:	e7d6      	b.n	8005f0c <_malloc_r+0xa8>
 8005f5e:	bf00      	nop
 8005f60:	200003a0 	.word	0x200003a0

08005f64 <__malloc_lock>:
 8005f64:	4801      	ldr	r0, [pc, #4]	@ (8005f6c <__malloc_lock+0x8>)
 8005f66:	f000 be8c 	b.w	8006c82 <__retarget_lock_acquire_recursive>
 8005f6a:	bf00      	nop
 8005f6c:	200004e4 	.word	0x200004e4

08005f70 <__malloc_unlock>:
 8005f70:	4801      	ldr	r0, [pc, #4]	@ (8005f78 <__malloc_unlock+0x8>)
 8005f72:	f000 be87 	b.w	8006c84 <__retarget_lock_release_recursive>
 8005f76:	bf00      	nop
 8005f78:	200004e4 	.word	0x200004e4

08005f7c <__cvt>:
 8005f7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f80:	ec57 6b10 	vmov	r6, r7, d0
 8005f84:	2f00      	cmp	r7, #0
 8005f86:	460c      	mov	r4, r1
 8005f88:	4619      	mov	r1, r3
 8005f8a:	463b      	mov	r3, r7
 8005f8c:	bfbb      	ittet	lt
 8005f8e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005f92:	461f      	movlt	r7, r3
 8005f94:	2300      	movge	r3, #0
 8005f96:	232d      	movlt	r3, #45	@ 0x2d
 8005f98:	700b      	strb	r3, [r1, #0]
 8005f9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f9c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005fa0:	4691      	mov	r9, r2
 8005fa2:	f023 0820 	bic.w	r8, r3, #32
 8005fa6:	bfbc      	itt	lt
 8005fa8:	4632      	movlt	r2, r6
 8005faa:	4616      	movlt	r6, r2
 8005fac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005fb0:	d005      	beq.n	8005fbe <__cvt+0x42>
 8005fb2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005fb6:	d100      	bne.n	8005fba <__cvt+0x3e>
 8005fb8:	3401      	adds	r4, #1
 8005fba:	2102      	movs	r1, #2
 8005fbc:	e000      	b.n	8005fc0 <__cvt+0x44>
 8005fbe:	2103      	movs	r1, #3
 8005fc0:	ab03      	add	r3, sp, #12
 8005fc2:	9301      	str	r3, [sp, #4]
 8005fc4:	ab02      	add	r3, sp, #8
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	ec47 6b10 	vmov	d0, r6, r7
 8005fcc:	4653      	mov	r3, sl
 8005fce:	4622      	mov	r2, r4
 8005fd0:	f000 fee2 	bl	8006d98 <_dtoa_r>
 8005fd4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005fd8:	4605      	mov	r5, r0
 8005fda:	d119      	bne.n	8006010 <__cvt+0x94>
 8005fdc:	f019 0f01 	tst.w	r9, #1
 8005fe0:	d00e      	beq.n	8006000 <__cvt+0x84>
 8005fe2:	eb00 0904 	add.w	r9, r0, r4
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	2300      	movs	r3, #0
 8005fea:	4630      	mov	r0, r6
 8005fec:	4639      	mov	r1, r7
 8005fee:	f7fa fd73 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ff2:	b108      	cbz	r0, 8005ff8 <__cvt+0x7c>
 8005ff4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ff8:	2230      	movs	r2, #48	@ 0x30
 8005ffa:	9b03      	ldr	r3, [sp, #12]
 8005ffc:	454b      	cmp	r3, r9
 8005ffe:	d31e      	bcc.n	800603e <__cvt+0xc2>
 8006000:	9b03      	ldr	r3, [sp, #12]
 8006002:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006004:	1b5b      	subs	r3, r3, r5
 8006006:	4628      	mov	r0, r5
 8006008:	6013      	str	r3, [r2, #0]
 800600a:	b004      	add	sp, #16
 800600c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006010:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006014:	eb00 0904 	add.w	r9, r0, r4
 8006018:	d1e5      	bne.n	8005fe6 <__cvt+0x6a>
 800601a:	7803      	ldrb	r3, [r0, #0]
 800601c:	2b30      	cmp	r3, #48	@ 0x30
 800601e:	d10a      	bne.n	8006036 <__cvt+0xba>
 8006020:	2200      	movs	r2, #0
 8006022:	2300      	movs	r3, #0
 8006024:	4630      	mov	r0, r6
 8006026:	4639      	mov	r1, r7
 8006028:	f7fa fd56 	bl	8000ad8 <__aeabi_dcmpeq>
 800602c:	b918      	cbnz	r0, 8006036 <__cvt+0xba>
 800602e:	f1c4 0401 	rsb	r4, r4, #1
 8006032:	f8ca 4000 	str.w	r4, [sl]
 8006036:	f8da 3000 	ldr.w	r3, [sl]
 800603a:	4499      	add	r9, r3
 800603c:	e7d3      	b.n	8005fe6 <__cvt+0x6a>
 800603e:	1c59      	adds	r1, r3, #1
 8006040:	9103      	str	r1, [sp, #12]
 8006042:	701a      	strb	r2, [r3, #0]
 8006044:	e7d9      	b.n	8005ffa <__cvt+0x7e>

08006046 <__exponent>:
 8006046:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006048:	2900      	cmp	r1, #0
 800604a:	bfba      	itte	lt
 800604c:	4249      	neglt	r1, r1
 800604e:	232d      	movlt	r3, #45	@ 0x2d
 8006050:	232b      	movge	r3, #43	@ 0x2b
 8006052:	2909      	cmp	r1, #9
 8006054:	7002      	strb	r2, [r0, #0]
 8006056:	7043      	strb	r3, [r0, #1]
 8006058:	dd29      	ble.n	80060ae <__exponent+0x68>
 800605a:	f10d 0307 	add.w	r3, sp, #7
 800605e:	461d      	mov	r5, r3
 8006060:	270a      	movs	r7, #10
 8006062:	461a      	mov	r2, r3
 8006064:	fbb1 f6f7 	udiv	r6, r1, r7
 8006068:	fb07 1416 	mls	r4, r7, r6, r1
 800606c:	3430      	adds	r4, #48	@ 0x30
 800606e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006072:	460c      	mov	r4, r1
 8006074:	2c63      	cmp	r4, #99	@ 0x63
 8006076:	f103 33ff 	add.w	r3, r3, #4294967295
 800607a:	4631      	mov	r1, r6
 800607c:	dcf1      	bgt.n	8006062 <__exponent+0x1c>
 800607e:	3130      	adds	r1, #48	@ 0x30
 8006080:	1e94      	subs	r4, r2, #2
 8006082:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006086:	1c41      	adds	r1, r0, #1
 8006088:	4623      	mov	r3, r4
 800608a:	42ab      	cmp	r3, r5
 800608c:	d30a      	bcc.n	80060a4 <__exponent+0x5e>
 800608e:	f10d 0309 	add.w	r3, sp, #9
 8006092:	1a9b      	subs	r3, r3, r2
 8006094:	42ac      	cmp	r4, r5
 8006096:	bf88      	it	hi
 8006098:	2300      	movhi	r3, #0
 800609a:	3302      	adds	r3, #2
 800609c:	4403      	add	r3, r0
 800609e:	1a18      	subs	r0, r3, r0
 80060a0:	b003      	add	sp, #12
 80060a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060a4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80060a8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80060ac:	e7ed      	b.n	800608a <__exponent+0x44>
 80060ae:	2330      	movs	r3, #48	@ 0x30
 80060b0:	3130      	adds	r1, #48	@ 0x30
 80060b2:	7083      	strb	r3, [r0, #2]
 80060b4:	70c1      	strb	r1, [r0, #3]
 80060b6:	1d03      	adds	r3, r0, #4
 80060b8:	e7f1      	b.n	800609e <__exponent+0x58>
	...

080060bc <_printf_float>:
 80060bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c0:	b08d      	sub	sp, #52	@ 0x34
 80060c2:	460c      	mov	r4, r1
 80060c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80060c8:	4616      	mov	r6, r2
 80060ca:	461f      	mov	r7, r3
 80060cc:	4605      	mov	r5, r0
 80060ce:	f000 fd3f 	bl	8006b50 <_localeconv_r>
 80060d2:	6803      	ldr	r3, [r0, #0]
 80060d4:	9304      	str	r3, [sp, #16]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7fa f8d2 	bl	8000280 <strlen>
 80060dc:	2300      	movs	r3, #0
 80060de:	930a      	str	r3, [sp, #40]	@ 0x28
 80060e0:	f8d8 3000 	ldr.w	r3, [r8]
 80060e4:	9005      	str	r0, [sp, #20]
 80060e6:	3307      	adds	r3, #7
 80060e8:	f023 0307 	bic.w	r3, r3, #7
 80060ec:	f103 0208 	add.w	r2, r3, #8
 80060f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80060f4:	f8d4 b000 	ldr.w	fp, [r4]
 80060f8:	f8c8 2000 	str.w	r2, [r8]
 80060fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006100:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006104:	9307      	str	r3, [sp, #28]
 8006106:	f8cd 8018 	str.w	r8, [sp, #24]
 800610a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800610e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006112:	4b9c      	ldr	r3, [pc, #624]	@ (8006384 <_printf_float+0x2c8>)
 8006114:	f04f 32ff 	mov.w	r2, #4294967295
 8006118:	f7fa fd10 	bl	8000b3c <__aeabi_dcmpun>
 800611c:	bb70      	cbnz	r0, 800617c <_printf_float+0xc0>
 800611e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006122:	4b98      	ldr	r3, [pc, #608]	@ (8006384 <_printf_float+0x2c8>)
 8006124:	f04f 32ff 	mov.w	r2, #4294967295
 8006128:	f7fa fcea 	bl	8000b00 <__aeabi_dcmple>
 800612c:	bb30      	cbnz	r0, 800617c <_printf_float+0xc0>
 800612e:	2200      	movs	r2, #0
 8006130:	2300      	movs	r3, #0
 8006132:	4640      	mov	r0, r8
 8006134:	4649      	mov	r1, r9
 8006136:	f7fa fcd9 	bl	8000aec <__aeabi_dcmplt>
 800613a:	b110      	cbz	r0, 8006142 <_printf_float+0x86>
 800613c:	232d      	movs	r3, #45	@ 0x2d
 800613e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006142:	4a91      	ldr	r2, [pc, #580]	@ (8006388 <_printf_float+0x2cc>)
 8006144:	4b91      	ldr	r3, [pc, #580]	@ (800638c <_printf_float+0x2d0>)
 8006146:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800614a:	bf94      	ite	ls
 800614c:	4690      	movls	r8, r2
 800614e:	4698      	movhi	r8, r3
 8006150:	2303      	movs	r3, #3
 8006152:	6123      	str	r3, [r4, #16]
 8006154:	f02b 0304 	bic.w	r3, fp, #4
 8006158:	6023      	str	r3, [r4, #0]
 800615a:	f04f 0900 	mov.w	r9, #0
 800615e:	9700      	str	r7, [sp, #0]
 8006160:	4633      	mov	r3, r6
 8006162:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006164:	4621      	mov	r1, r4
 8006166:	4628      	mov	r0, r5
 8006168:	f000 f9d2 	bl	8006510 <_printf_common>
 800616c:	3001      	adds	r0, #1
 800616e:	f040 808d 	bne.w	800628c <_printf_float+0x1d0>
 8006172:	f04f 30ff 	mov.w	r0, #4294967295
 8006176:	b00d      	add	sp, #52	@ 0x34
 8006178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800617c:	4642      	mov	r2, r8
 800617e:	464b      	mov	r3, r9
 8006180:	4640      	mov	r0, r8
 8006182:	4649      	mov	r1, r9
 8006184:	f7fa fcda 	bl	8000b3c <__aeabi_dcmpun>
 8006188:	b140      	cbz	r0, 800619c <_printf_float+0xe0>
 800618a:	464b      	mov	r3, r9
 800618c:	2b00      	cmp	r3, #0
 800618e:	bfbc      	itt	lt
 8006190:	232d      	movlt	r3, #45	@ 0x2d
 8006192:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006196:	4a7e      	ldr	r2, [pc, #504]	@ (8006390 <_printf_float+0x2d4>)
 8006198:	4b7e      	ldr	r3, [pc, #504]	@ (8006394 <_printf_float+0x2d8>)
 800619a:	e7d4      	b.n	8006146 <_printf_float+0x8a>
 800619c:	6863      	ldr	r3, [r4, #4]
 800619e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80061a2:	9206      	str	r2, [sp, #24]
 80061a4:	1c5a      	adds	r2, r3, #1
 80061a6:	d13b      	bne.n	8006220 <_printf_float+0x164>
 80061a8:	2306      	movs	r3, #6
 80061aa:	6063      	str	r3, [r4, #4]
 80061ac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80061b0:	2300      	movs	r3, #0
 80061b2:	6022      	str	r2, [r4, #0]
 80061b4:	9303      	str	r3, [sp, #12]
 80061b6:	ab0a      	add	r3, sp, #40	@ 0x28
 80061b8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80061bc:	ab09      	add	r3, sp, #36	@ 0x24
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	6861      	ldr	r1, [r4, #4]
 80061c2:	ec49 8b10 	vmov	d0, r8, r9
 80061c6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80061ca:	4628      	mov	r0, r5
 80061cc:	f7ff fed6 	bl	8005f7c <__cvt>
 80061d0:	9b06      	ldr	r3, [sp, #24]
 80061d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80061d4:	2b47      	cmp	r3, #71	@ 0x47
 80061d6:	4680      	mov	r8, r0
 80061d8:	d129      	bne.n	800622e <_printf_float+0x172>
 80061da:	1cc8      	adds	r0, r1, #3
 80061dc:	db02      	blt.n	80061e4 <_printf_float+0x128>
 80061de:	6863      	ldr	r3, [r4, #4]
 80061e0:	4299      	cmp	r1, r3
 80061e2:	dd41      	ble.n	8006268 <_printf_float+0x1ac>
 80061e4:	f1aa 0a02 	sub.w	sl, sl, #2
 80061e8:	fa5f fa8a 	uxtb.w	sl, sl
 80061ec:	3901      	subs	r1, #1
 80061ee:	4652      	mov	r2, sl
 80061f0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80061f4:	9109      	str	r1, [sp, #36]	@ 0x24
 80061f6:	f7ff ff26 	bl	8006046 <__exponent>
 80061fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80061fc:	1813      	adds	r3, r2, r0
 80061fe:	2a01      	cmp	r2, #1
 8006200:	4681      	mov	r9, r0
 8006202:	6123      	str	r3, [r4, #16]
 8006204:	dc02      	bgt.n	800620c <_printf_float+0x150>
 8006206:	6822      	ldr	r2, [r4, #0]
 8006208:	07d2      	lsls	r2, r2, #31
 800620a:	d501      	bpl.n	8006210 <_printf_float+0x154>
 800620c:	3301      	adds	r3, #1
 800620e:	6123      	str	r3, [r4, #16]
 8006210:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006214:	2b00      	cmp	r3, #0
 8006216:	d0a2      	beq.n	800615e <_printf_float+0xa2>
 8006218:	232d      	movs	r3, #45	@ 0x2d
 800621a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800621e:	e79e      	b.n	800615e <_printf_float+0xa2>
 8006220:	9a06      	ldr	r2, [sp, #24]
 8006222:	2a47      	cmp	r2, #71	@ 0x47
 8006224:	d1c2      	bne.n	80061ac <_printf_float+0xf0>
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1c0      	bne.n	80061ac <_printf_float+0xf0>
 800622a:	2301      	movs	r3, #1
 800622c:	e7bd      	b.n	80061aa <_printf_float+0xee>
 800622e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006232:	d9db      	bls.n	80061ec <_printf_float+0x130>
 8006234:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006238:	d118      	bne.n	800626c <_printf_float+0x1b0>
 800623a:	2900      	cmp	r1, #0
 800623c:	6863      	ldr	r3, [r4, #4]
 800623e:	dd0b      	ble.n	8006258 <_printf_float+0x19c>
 8006240:	6121      	str	r1, [r4, #16]
 8006242:	b913      	cbnz	r3, 800624a <_printf_float+0x18e>
 8006244:	6822      	ldr	r2, [r4, #0]
 8006246:	07d0      	lsls	r0, r2, #31
 8006248:	d502      	bpl.n	8006250 <_printf_float+0x194>
 800624a:	3301      	adds	r3, #1
 800624c:	440b      	add	r3, r1
 800624e:	6123      	str	r3, [r4, #16]
 8006250:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006252:	f04f 0900 	mov.w	r9, #0
 8006256:	e7db      	b.n	8006210 <_printf_float+0x154>
 8006258:	b913      	cbnz	r3, 8006260 <_printf_float+0x1a4>
 800625a:	6822      	ldr	r2, [r4, #0]
 800625c:	07d2      	lsls	r2, r2, #31
 800625e:	d501      	bpl.n	8006264 <_printf_float+0x1a8>
 8006260:	3302      	adds	r3, #2
 8006262:	e7f4      	b.n	800624e <_printf_float+0x192>
 8006264:	2301      	movs	r3, #1
 8006266:	e7f2      	b.n	800624e <_printf_float+0x192>
 8006268:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800626c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800626e:	4299      	cmp	r1, r3
 8006270:	db05      	blt.n	800627e <_printf_float+0x1c2>
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	6121      	str	r1, [r4, #16]
 8006276:	07d8      	lsls	r0, r3, #31
 8006278:	d5ea      	bpl.n	8006250 <_printf_float+0x194>
 800627a:	1c4b      	adds	r3, r1, #1
 800627c:	e7e7      	b.n	800624e <_printf_float+0x192>
 800627e:	2900      	cmp	r1, #0
 8006280:	bfd4      	ite	le
 8006282:	f1c1 0202 	rsble	r2, r1, #2
 8006286:	2201      	movgt	r2, #1
 8006288:	4413      	add	r3, r2
 800628a:	e7e0      	b.n	800624e <_printf_float+0x192>
 800628c:	6823      	ldr	r3, [r4, #0]
 800628e:	055a      	lsls	r2, r3, #21
 8006290:	d407      	bmi.n	80062a2 <_printf_float+0x1e6>
 8006292:	6923      	ldr	r3, [r4, #16]
 8006294:	4642      	mov	r2, r8
 8006296:	4631      	mov	r1, r6
 8006298:	4628      	mov	r0, r5
 800629a:	47b8      	blx	r7
 800629c:	3001      	adds	r0, #1
 800629e:	d12b      	bne.n	80062f8 <_printf_float+0x23c>
 80062a0:	e767      	b.n	8006172 <_printf_float+0xb6>
 80062a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80062a6:	f240 80dd 	bls.w	8006464 <_printf_float+0x3a8>
 80062aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80062ae:	2200      	movs	r2, #0
 80062b0:	2300      	movs	r3, #0
 80062b2:	f7fa fc11 	bl	8000ad8 <__aeabi_dcmpeq>
 80062b6:	2800      	cmp	r0, #0
 80062b8:	d033      	beq.n	8006322 <_printf_float+0x266>
 80062ba:	4a37      	ldr	r2, [pc, #220]	@ (8006398 <_printf_float+0x2dc>)
 80062bc:	2301      	movs	r3, #1
 80062be:	4631      	mov	r1, r6
 80062c0:	4628      	mov	r0, r5
 80062c2:	47b8      	blx	r7
 80062c4:	3001      	adds	r0, #1
 80062c6:	f43f af54 	beq.w	8006172 <_printf_float+0xb6>
 80062ca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80062ce:	4543      	cmp	r3, r8
 80062d0:	db02      	blt.n	80062d8 <_printf_float+0x21c>
 80062d2:	6823      	ldr	r3, [r4, #0]
 80062d4:	07d8      	lsls	r0, r3, #31
 80062d6:	d50f      	bpl.n	80062f8 <_printf_float+0x23c>
 80062d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062dc:	4631      	mov	r1, r6
 80062de:	4628      	mov	r0, r5
 80062e0:	47b8      	blx	r7
 80062e2:	3001      	adds	r0, #1
 80062e4:	f43f af45 	beq.w	8006172 <_printf_float+0xb6>
 80062e8:	f04f 0900 	mov.w	r9, #0
 80062ec:	f108 38ff 	add.w	r8, r8, #4294967295
 80062f0:	f104 0a1a 	add.w	sl, r4, #26
 80062f4:	45c8      	cmp	r8, r9
 80062f6:	dc09      	bgt.n	800630c <_printf_float+0x250>
 80062f8:	6823      	ldr	r3, [r4, #0]
 80062fa:	079b      	lsls	r3, r3, #30
 80062fc:	f100 8103 	bmi.w	8006506 <_printf_float+0x44a>
 8006300:	68e0      	ldr	r0, [r4, #12]
 8006302:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006304:	4298      	cmp	r0, r3
 8006306:	bfb8      	it	lt
 8006308:	4618      	movlt	r0, r3
 800630a:	e734      	b.n	8006176 <_printf_float+0xba>
 800630c:	2301      	movs	r3, #1
 800630e:	4652      	mov	r2, sl
 8006310:	4631      	mov	r1, r6
 8006312:	4628      	mov	r0, r5
 8006314:	47b8      	blx	r7
 8006316:	3001      	adds	r0, #1
 8006318:	f43f af2b 	beq.w	8006172 <_printf_float+0xb6>
 800631c:	f109 0901 	add.w	r9, r9, #1
 8006320:	e7e8      	b.n	80062f4 <_printf_float+0x238>
 8006322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006324:	2b00      	cmp	r3, #0
 8006326:	dc39      	bgt.n	800639c <_printf_float+0x2e0>
 8006328:	4a1b      	ldr	r2, [pc, #108]	@ (8006398 <_printf_float+0x2dc>)
 800632a:	2301      	movs	r3, #1
 800632c:	4631      	mov	r1, r6
 800632e:	4628      	mov	r0, r5
 8006330:	47b8      	blx	r7
 8006332:	3001      	adds	r0, #1
 8006334:	f43f af1d 	beq.w	8006172 <_printf_float+0xb6>
 8006338:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800633c:	ea59 0303 	orrs.w	r3, r9, r3
 8006340:	d102      	bne.n	8006348 <_printf_float+0x28c>
 8006342:	6823      	ldr	r3, [r4, #0]
 8006344:	07d9      	lsls	r1, r3, #31
 8006346:	d5d7      	bpl.n	80062f8 <_printf_float+0x23c>
 8006348:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800634c:	4631      	mov	r1, r6
 800634e:	4628      	mov	r0, r5
 8006350:	47b8      	blx	r7
 8006352:	3001      	adds	r0, #1
 8006354:	f43f af0d 	beq.w	8006172 <_printf_float+0xb6>
 8006358:	f04f 0a00 	mov.w	sl, #0
 800635c:	f104 0b1a 	add.w	fp, r4, #26
 8006360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006362:	425b      	negs	r3, r3
 8006364:	4553      	cmp	r3, sl
 8006366:	dc01      	bgt.n	800636c <_printf_float+0x2b0>
 8006368:	464b      	mov	r3, r9
 800636a:	e793      	b.n	8006294 <_printf_float+0x1d8>
 800636c:	2301      	movs	r3, #1
 800636e:	465a      	mov	r2, fp
 8006370:	4631      	mov	r1, r6
 8006372:	4628      	mov	r0, r5
 8006374:	47b8      	blx	r7
 8006376:	3001      	adds	r0, #1
 8006378:	f43f aefb 	beq.w	8006172 <_printf_float+0xb6>
 800637c:	f10a 0a01 	add.w	sl, sl, #1
 8006380:	e7ee      	b.n	8006360 <_printf_float+0x2a4>
 8006382:	bf00      	nop
 8006384:	7fefffff 	.word	0x7fefffff
 8006388:	08008c10 	.word	0x08008c10
 800638c:	08008c14 	.word	0x08008c14
 8006390:	08008c18 	.word	0x08008c18
 8006394:	08008c1c 	.word	0x08008c1c
 8006398:	08008c20 	.word	0x08008c20
 800639c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800639e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80063a2:	4553      	cmp	r3, sl
 80063a4:	bfa8      	it	ge
 80063a6:	4653      	movge	r3, sl
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	4699      	mov	r9, r3
 80063ac:	dc36      	bgt.n	800641c <_printf_float+0x360>
 80063ae:	f04f 0b00 	mov.w	fp, #0
 80063b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063b6:	f104 021a 	add.w	r2, r4, #26
 80063ba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80063bc:	9306      	str	r3, [sp, #24]
 80063be:	eba3 0309 	sub.w	r3, r3, r9
 80063c2:	455b      	cmp	r3, fp
 80063c4:	dc31      	bgt.n	800642a <_printf_float+0x36e>
 80063c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063c8:	459a      	cmp	sl, r3
 80063ca:	dc3a      	bgt.n	8006442 <_printf_float+0x386>
 80063cc:	6823      	ldr	r3, [r4, #0]
 80063ce:	07da      	lsls	r2, r3, #31
 80063d0:	d437      	bmi.n	8006442 <_printf_float+0x386>
 80063d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063d4:	ebaa 0903 	sub.w	r9, sl, r3
 80063d8:	9b06      	ldr	r3, [sp, #24]
 80063da:	ebaa 0303 	sub.w	r3, sl, r3
 80063de:	4599      	cmp	r9, r3
 80063e0:	bfa8      	it	ge
 80063e2:	4699      	movge	r9, r3
 80063e4:	f1b9 0f00 	cmp.w	r9, #0
 80063e8:	dc33      	bgt.n	8006452 <_printf_float+0x396>
 80063ea:	f04f 0800 	mov.w	r8, #0
 80063ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063f2:	f104 0b1a 	add.w	fp, r4, #26
 80063f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063f8:	ebaa 0303 	sub.w	r3, sl, r3
 80063fc:	eba3 0309 	sub.w	r3, r3, r9
 8006400:	4543      	cmp	r3, r8
 8006402:	f77f af79 	ble.w	80062f8 <_printf_float+0x23c>
 8006406:	2301      	movs	r3, #1
 8006408:	465a      	mov	r2, fp
 800640a:	4631      	mov	r1, r6
 800640c:	4628      	mov	r0, r5
 800640e:	47b8      	blx	r7
 8006410:	3001      	adds	r0, #1
 8006412:	f43f aeae 	beq.w	8006172 <_printf_float+0xb6>
 8006416:	f108 0801 	add.w	r8, r8, #1
 800641a:	e7ec      	b.n	80063f6 <_printf_float+0x33a>
 800641c:	4642      	mov	r2, r8
 800641e:	4631      	mov	r1, r6
 8006420:	4628      	mov	r0, r5
 8006422:	47b8      	blx	r7
 8006424:	3001      	adds	r0, #1
 8006426:	d1c2      	bne.n	80063ae <_printf_float+0x2f2>
 8006428:	e6a3      	b.n	8006172 <_printf_float+0xb6>
 800642a:	2301      	movs	r3, #1
 800642c:	4631      	mov	r1, r6
 800642e:	4628      	mov	r0, r5
 8006430:	9206      	str	r2, [sp, #24]
 8006432:	47b8      	blx	r7
 8006434:	3001      	adds	r0, #1
 8006436:	f43f ae9c 	beq.w	8006172 <_printf_float+0xb6>
 800643a:	9a06      	ldr	r2, [sp, #24]
 800643c:	f10b 0b01 	add.w	fp, fp, #1
 8006440:	e7bb      	b.n	80063ba <_printf_float+0x2fe>
 8006442:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006446:	4631      	mov	r1, r6
 8006448:	4628      	mov	r0, r5
 800644a:	47b8      	blx	r7
 800644c:	3001      	adds	r0, #1
 800644e:	d1c0      	bne.n	80063d2 <_printf_float+0x316>
 8006450:	e68f      	b.n	8006172 <_printf_float+0xb6>
 8006452:	9a06      	ldr	r2, [sp, #24]
 8006454:	464b      	mov	r3, r9
 8006456:	4442      	add	r2, r8
 8006458:	4631      	mov	r1, r6
 800645a:	4628      	mov	r0, r5
 800645c:	47b8      	blx	r7
 800645e:	3001      	adds	r0, #1
 8006460:	d1c3      	bne.n	80063ea <_printf_float+0x32e>
 8006462:	e686      	b.n	8006172 <_printf_float+0xb6>
 8006464:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006468:	f1ba 0f01 	cmp.w	sl, #1
 800646c:	dc01      	bgt.n	8006472 <_printf_float+0x3b6>
 800646e:	07db      	lsls	r3, r3, #31
 8006470:	d536      	bpl.n	80064e0 <_printf_float+0x424>
 8006472:	2301      	movs	r3, #1
 8006474:	4642      	mov	r2, r8
 8006476:	4631      	mov	r1, r6
 8006478:	4628      	mov	r0, r5
 800647a:	47b8      	blx	r7
 800647c:	3001      	adds	r0, #1
 800647e:	f43f ae78 	beq.w	8006172 <_printf_float+0xb6>
 8006482:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006486:	4631      	mov	r1, r6
 8006488:	4628      	mov	r0, r5
 800648a:	47b8      	blx	r7
 800648c:	3001      	adds	r0, #1
 800648e:	f43f ae70 	beq.w	8006172 <_printf_float+0xb6>
 8006492:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006496:	2200      	movs	r2, #0
 8006498:	2300      	movs	r3, #0
 800649a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800649e:	f7fa fb1b 	bl	8000ad8 <__aeabi_dcmpeq>
 80064a2:	b9c0      	cbnz	r0, 80064d6 <_printf_float+0x41a>
 80064a4:	4653      	mov	r3, sl
 80064a6:	f108 0201 	add.w	r2, r8, #1
 80064aa:	4631      	mov	r1, r6
 80064ac:	4628      	mov	r0, r5
 80064ae:	47b8      	blx	r7
 80064b0:	3001      	adds	r0, #1
 80064b2:	d10c      	bne.n	80064ce <_printf_float+0x412>
 80064b4:	e65d      	b.n	8006172 <_printf_float+0xb6>
 80064b6:	2301      	movs	r3, #1
 80064b8:	465a      	mov	r2, fp
 80064ba:	4631      	mov	r1, r6
 80064bc:	4628      	mov	r0, r5
 80064be:	47b8      	blx	r7
 80064c0:	3001      	adds	r0, #1
 80064c2:	f43f ae56 	beq.w	8006172 <_printf_float+0xb6>
 80064c6:	f108 0801 	add.w	r8, r8, #1
 80064ca:	45d0      	cmp	r8, sl
 80064cc:	dbf3      	blt.n	80064b6 <_printf_float+0x3fa>
 80064ce:	464b      	mov	r3, r9
 80064d0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80064d4:	e6df      	b.n	8006296 <_printf_float+0x1da>
 80064d6:	f04f 0800 	mov.w	r8, #0
 80064da:	f104 0b1a 	add.w	fp, r4, #26
 80064de:	e7f4      	b.n	80064ca <_printf_float+0x40e>
 80064e0:	2301      	movs	r3, #1
 80064e2:	4642      	mov	r2, r8
 80064e4:	e7e1      	b.n	80064aa <_printf_float+0x3ee>
 80064e6:	2301      	movs	r3, #1
 80064e8:	464a      	mov	r2, r9
 80064ea:	4631      	mov	r1, r6
 80064ec:	4628      	mov	r0, r5
 80064ee:	47b8      	blx	r7
 80064f0:	3001      	adds	r0, #1
 80064f2:	f43f ae3e 	beq.w	8006172 <_printf_float+0xb6>
 80064f6:	f108 0801 	add.w	r8, r8, #1
 80064fa:	68e3      	ldr	r3, [r4, #12]
 80064fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80064fe:	1a5b      	subs	r3, r3, r1
 8006500:	4543      	cmp	r3, r8
 8006502:	dcf0      	bgt.n	80064e6 <_printf_float+0x42a>
 8006504:	e6fc      	b.n	8006300 <_printf_float+0x244>
 8006506:	f04f 0800 	mov.w	r8, #0
 800650a:	f104 0919 	add.w	r9, r4, #25
 800650e:	e7f4      	b.n	80064fa <_printf_float+0x43e>

08006510 <_printf_common>:
 8006510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006514:	4616      	mov	r6, r2
 8006516:	4698      	mov	r8, r3
 8006518:	688a      	ldr	r2, [r1, #8]
 800651a:	690b      	ldr	r3, [r1, #16]
 800651c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006520:	4293      	cmp	r3, r2
 8006522:	bfb8      	it	lt
 8006524:	4613      	movlt	r3, r2
 8006526:	6033      	str	r3, [r6, #0]
 8006528:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800652c:	4607      	mov	r7, r0
 800652e:	460c      	mov	r4, r1
 8006530:	b10a      	cbz	r2, 8006536 <_printf_common+0x26>
 8006532:	3301      	adds	r3, #1
 8006534:	6033      	str	r3, [r6, #0]
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	0699      	lsls	r1, r3, #26
 800653a:	bf42      	ittt	mi
 800653c:	6833      	ldrmi	r3, [r6, #0]
 800653e:	3302      	addmi	r3, #2
 8006540:	6033      	strmi	r3, [r6, #0]
 8006542:	6825      	ldr	r5, [r4, #0]
 8006544:	f015 0506 	ands.w	r5, r5, #6
 8006548:	d106      	bne.n	8006558 <_printf_common+0x48>
 800654a:	f104 0a19 	add.w	sl, r4, #25
 800654e:	68e3      	ldr	r3, [r4, #12]
 8006550:	6832      	ldr	r2, [r6, #0]
 8006552:	1a9b      	subs	r3, r3, r2
 8006554:	42ab      	cmp	r3, r5
 8006556:	dc26      	bgt.n	80065a6 <_printf_common+0x96>
 8006558:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800655c:	6822      	ldr	r2, [r4, #0]
 800655e:	3b00      	subs	r3, #0
 8006560:	bf18      	it	ne
 8006562:	2301      	movne	r3, #1
 8006564:	0692      	lsls	r2, r2, #26
 8006566:	d42b      	bmi.n	80065c0 <_printf_common+0xb0>
 8006568:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800656c:	4641      	mov	r1, r8
 800656e:	4638      	mov	r0, r7
 8006570:	47c8      	blx	r9
 8006572:	3001      	adds	r0, #1
 8006574:	d01e      	beq.n	80065b4 <_printf_common+0xa4>
 8006576:	6823      	ldr	r3, [r4, #0]
 8006578:	6922      	ldr	r2, [r4, #16]
 800657a:	f003 0306 	and.w	r3, r3, #6
 800657e:	2b04      	cmp	r3, #4
 8006580:	bf02      	ittt	eq
 8006582:	68e5      	ldreq	r5, [r4, #12]
 8006584:	6833      	ldreq	r3, [r6, #0]
 8006586:	1aed      	subeq	r5, r5, r3
 8006588:	68a3      	ldr	r3, [r4, #8]
 800658a:	bf0c      	ite	eq
 800658c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006590:	2500      	movne	r5, #0
 8006592:	4293      	cmp	r3, r2
 8006594:	bfc4      	itt	gt
 8006596:	1a9b      	subgt	r3, r3, r2
 8006598:	18ed      	addgt	r5, r5, r3
 800659a:	2600      	movs	r6, #0
 800659c:	341a      	adds	r4, #26
 800659e:	42b5      	cmp	r5, r6
 80065a0:	d11a      	bne.n	80065d8 <_printf_common+0xc8>
 80065a2:	2000      	movs	r0, #0
 80065a4:	e008      	b.n	80065b8 <_printf_common+0xa8>
 80065a6:	2301      	movs	r3, #1
 80065a8:	4652      	mov	r2, sl
 80065aa:	4641      	mov	r1, r8
 80065ac:	4638      	mov	r0, r7
 80065ae:	47c8      	blx	r9
 80065b0:	3001      	adds	r0, #1
 80065b2:	d103      	bne.n	80065bc <_printf_common+0xac>
 80065b4:	f04f 30ff 	mov.w	r0, #4294967295
 80065b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065bc:	3501      	adds	r5, #1
 80065be:	e7c6      	b.n	800654e <_printf_common+0x3e>
 80065c0:	18e1      	adds	r1, r4, r3
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	2030      	movs	r0, #48	@ 0x30
 80065c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80065ca:	4422      	add	r2, r4
 80065cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80065d0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80065d4:	3302      	adds	r3, #2
 80065d6:	e7c7      	b.n	8006568 <_printf_common+0x58>
 80065d8:	2301      	movs	r3, #1
 80065da:	4622      	mov	r2, r4
 80065dc:	4641      	mov	r1, r8
 80065de:	4638      	mov	r0, r7
 80065e0:	47c8      	blx	r9
 80065e2:	3001      	adds	r0, #1
 80065e4:	d0e6      	beq.n	80065b4 <_printf_common+0xa4>
 80065e6:	3601      	adds	r6, #1
 80065e8:	e7d9      	b.n	800659e <_printf_common+0x8e>
	...

080065ec <_printf_i>:
 80065ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80065f0:	7e0f      	ldrb	r7, [r1, #24]
 80065f2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80065f4:	2f78      	cmp	r7, #120	@ 0x78
 80065f6:	4691      	mov	r9, r2
 80065f8:	4680      	mov	r8, r0
 80065fa:	460c      	mov	r4, r1
 80065fc:	469a      	mov	sl, r3
 80065fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006602:	d807      	bhi.n	8006614 <_printf_i+0x28>
 8006604:	2f62      	cmp	r7, #98	@ 0x62
 8006606:	d80a      	bhi.n	800661e <_printf_i+0x32>
 8006608:	2f00      	cmp	r7, #0
 800660a:	f000 80d2 	beq.w	80067b2 <_printf_i+0x1c6>
 800660e:	2f58      	cmp	r7, #88	@ 0x58
 8006610:	f000 80b9 	beq.w	8006786 <_printf_i+0x19a>
 8006614:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006618:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800661c:	e03a      	b.n	8006694 <_printf_i+0xa8>
 800661e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006622:	2b15      	cmp	r3, #21
 8006624:	d8f6      	bhi.n	8006614 <_printf_i+0x28>
 8006626:	a101      	add	r1, pc, #4	@ (adr r1, 800662c <_printf_i+0x40>)
 8006628:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800662c:	08006685 	.word	0x08006685
 8006630:	08006699 	.word	0x08006699
 8006634:	08006615 	.word	0x08006615
 8006638:	08006615 	.word	0x08006615
 800663c:	08006615 	.word	0x08006615
 8006640:	08006615 	.word	0x08006615
 8006644:	08006699 	.word	0x08006699
 8006648:	08006615 	.word	0x08006615
 800664c:	08006615 	.word	0x08006615
 8006650:	08006615 	.word	0x08006615
 8006654:	08006615 	.word	0x08006615
 8006658:	08006799 	.word	0x08006799
 800665c:	080066c3 	.word	0x080066c3
 8006660:	08006753 	.word	0x08006753
 8006664:	08006615 	.word	0x08006615
 8006668:	08006615 	.word	0x08006615
 800666c:	080067bb 	.word	0x080067bb
 8006670:	08006615 	.word	0x08006615
 8006674:	080066c3 	.word	0x080066c3
 8006678:	08006615 	.word	0x08006615
 800667c:	08006615 	.word	0x08006615
 8006680:	0800675b 	.word	0x0800675b
 8006684:	6833      	ldr	r3, [r6, #0]
 8006686:	1d1a      	adds	r2, r3, #4
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	6032      	str	r2, [r6, #0]
 800668c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006690:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006694:	2301      	movs	r3, #1
 8006696:	e09d      	b.n	80067d4 <_printf_i+0x1e8>
 8006698:	6833      	ldr	r3, [r6, #0]
 800669a:	6820      	ldr	r0, [r4, #0]
 800669c:	1d19      	adds	r1, r3, #4
 800669e:	6031      	str	r1, [r6, #0]
 80066a0:	0606      	lsls	r6, r0, #24
 80066a2:	d501      	bpl.n	80066a8 <_printf_i+0xbc>
 80066a4:	681d      	ldr	r5, [r3, #0]
 80066a6:	e003      	b.n	80066b0 <_printf_i+0xc4>
 80066a8:	0645      	lsls	r5, r0, #25
 80066aa:	d5fb      	bpl.n	80066a4 <_printf_i+0xb8>
 80066ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80066b0:	2d00      	cmp	r5, #0
 80066b2:	da03      	bge.n	80066bc <_printf_i+0xd0>
 80066b4:	232d      	movs	r3, #45	@ 0x2d
 80066b6:	426d      	negs	r5, r5
 80066b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066bc:	4859      	ldr	r0, [pc, #356]	@ (8006824 <_printf_i+0x238>)
 80066be:	230a      	movs	r3, #10
 80066c0:	e011      	b.n	80066e6 <_printf_i+0xfa>
 80066c2:	6821      	ldr	r1, [r4, #0]
 80066c4:	6833      	ldr	r3, [r6, #0]
 80066c6:	0608      	lsls	r0, r1, #24
 80066c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80066cc:	d402      	bmi.n	80066d4 <_printf_i+0xe8>
 80066ce:	0649      	lsls	r1, r1, #25
 80066d0:	bf48      	it	mi
 80066d2:	b2ad      	uxthmi	r5, r5
 80066d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80066d6:	4853      	ldr	r0, [pc, #332]	@ (8006824 <_printf_i+0x238>)
 80066d8:	6033      	str	r3, [r6, #0]
 80066da:	bf14      	ite	ne
 80066dc:	230a      	movne	r3, #10
 80066de:	2308      	moveq	r3, #8
 80066e0:	2100      	movs	r1, #0
 80066e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80066e6:	6866      	ldr	r6, [r4, #4]
 80066e8:	60a6      	str	r6, [r4, #8]
 80066ea:	2e00      	cmp	r6, #0
 80066ec:	bfa2      	ittt	ge
 80066ee:	6821      	ldrge	r1, [r4, #0]
 80066f0:	f021 0104 	bicge.w	r1, r1, #4
 80066f4:	6021      	strge	r1, [r4, #0]
 80066f6:	b90d      	cbnz	r5, 80066fc <_printf_i+0x110>
 80066f8:	2e00      	cmp	r6, #0
 80066fa:	d04b      	beq.n	8006794 <_printf_i+0x1a8>
 80066fc:	4616      	mov	r6, r2
 80066fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8006702:	fb03 5711 	mls	r7, r3, r1, r5
 8006706:	5dc7      	ldrb	r7, [r0, r7]
 8006708:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800670c:	462f      	mov	r7, r5
 800670e:	42bb      	cmp	r3, r7
 8006710:	460d      	mov	r5, r1
 8006712:	d9f4      	bls.n	80066fe <_printf_i+0x112>
 8006714:	2b08      	cmp	r3, #8
 8006716:	d10b      	bne.n	8006730 <_printf_i+0x144>
 8006718:	6823      	ldr	r3, [r4, #0]
 800671a:	07df      	lsls	r7, r3, #31
 800671c:	d508      	bpl.n	8006730 <_printf_i+0x144>
 800671e:	6923      	ldr	r3, [r4, #16]
 8006720:	6861      	ldr	r1, [r4, #4]
 8006722:	4299      	cmp	r1, r3
 8006724:	bfde      	ittt	le
 8006726:	2330      	movle	r3, #48	@ 0x30
 8006728:	f806 3c01 	strble.w	r3, [r6, #-1]
 800672c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006730:	1b92      	subs	r2, r2, r6
 8006732:	6122      	str	r2, [r4, #16]
 8006734:	f8cd a000 	str.w	sl, [sp]
 8006738:	464b      	mov	r3, r9
 800673a:	aa03      	add	r2, sp, #12
 800673c:	4621      	mov	r1, r4
 800673e:	4640      	mov	r0, r8
 8006740:	f7ff fee6 	bl	8006510 <_printf_common>
 8006744:	3001      	adds	r0, #1
 8006746:	d14a      	bne.n	80067de <_printf_i+0x1f2>
 8006748:	f04f 30ff 	mov.w	r0, #4294967295
 800674c:	b004      	add	sp, #16
 800674e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	f043 0320 	orr.w	r3, r3, #32
 8006758:	6023      	str	r3, [r4, #0]
 800675a:	4833      	ldr	r0, [pc, #204]	@ (8006828 <_printf_i+0x23c>)
 800675c:	2778      	movs	r7, #120	@ 0x78
 800675e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006762:	6823      	ldr	r3, [r4, #0]
 8006764:	6831      	ldr	r1, [r6, #0]
 8006766:	061f      	lsls	r7, r3, #24
 8006768:	f851 5b04 	ldr.w	r5, [r1], #4
 800676c:	d402      	bmi.n	8006774 <_printf_i+0x188>
 800676e:	065f      	lsls	r7, r3, #25
 8006770:	bf48      	it	mi
 8006772:	b2ad      	uxthmi	r5, r5
 8006774:	6031      	str	r1, [r6, #0]
 8006776:	07d9      	lsls	r1, r3, #31
 8006778:	bf44      	itt	mi
 800677a:	f043 0320 	orrmi.w	r3, r3, #32
 800677e:	6023      	strmi	r3, [r4, #0]
 8006780:	b11d      	cbz	r5, 800678a <_printf_i+0x19e>
 8006782:	2310      	movs	r3, #16
 8006784:	e7ac      	b.n	80066e0 <_printf_i+0xf4>
 8006786:	4827      	ldr	r0, [pc, #156]	@ (8006824 <_printf_i+0x238>)
 8006788:	e7e9      	b.n	800675e <_printf_i+0x172>
 800678a:	6823      	ldr	r3, [r4, #0]
 800678c:	f023 0320 	bic.w	r3, r3, #32
 8006790:	6023      	str	r3, [r4, #0]
 8006792:	e7f6      	b.n	8006782 <_printf_i+0x196>
 8006794:	4616      	mov	r6, r2
 8006796:	e7bd      	b.n	8006714 <_printf_i+0x128>
 8006798:	6833      	ldr	r3, [r6, #0]
 800679a:	6825      	ldr	r5, [r4, #0]
 800679c:	6961      	ldr	r1, [r4, #20]
 800679e:	1d18      	adds	r0, r3, #4
 80067a0:	6030      	str	r0, [r6, #0]
 80067a2:	062e      	lsls	r6, r5, #24
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	d501      	bpl.n	80067ac <_printf_i+0x1c0>
 80067a8:	6019      	str	r1, [r3, #0]
 80067aa:	e002      	b.n	80067b2 <_printf_i+0x1c6>
 80067ac:	0668      	lsls	r0, r5, #25
 80067ae:	d5fb      	bpl.n	80067a8 <_printf_i+0x1bc>
 80067b0:	8019      	strh	r1, [r3, #0]
 80067b2:	2300      	movs	r3, #0
 80067b4:	6123      	str	r3, [r4, #16]
 80067b6:	4616      	mov	r6, r2
 80067b8:	e7bc      	b.n	8006734 <_printf_i+0x148>
 80067ba:	6833      	ldr	r3, [r6, #0]
 80067bc:	1d1a      	adds	r2, r3, #4
 80067be:	6032      	str	r2, [r6, #0]
 80067c0:	681e      	ldr	r6, [r3, #0]
 80067c2:	6862      	ldr	r2, [r4, #4]
 80067c4:	2100      	movs	r1, #0
 80067c6:	4630      	mov	r0, r6
 80067c8:	f7f9 fd0a 	bl	80001e0 <memchr>
 80067cc:	b108      	cbz	r0, 80067d2 <_printf_i+0x1e6>
 80067ce:	1b80      	subs	r0, r0, r6
 80067d0:	6060      	str	r0, [r4, #4]
 80067d2:	6863      	ldr	r3, [r4, #4]
 80067d4:	6123      	str	r3, [r4, #16]
 80067d6:	2300      	movs	r3, #0
 80067d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067dc:	e7aa      	b.n	8006734 <_printf_i+0x148>
 80067de:	6923      	ldr	r3, [r4, #16]
 80067e0:	4632      	mov	r2, r6
 80067e2:	4649      	mov	r1, r9
 80067e4:	4640      	mov	r0, r8
 80067e6:	47d0      	blx	sl
 80067e8:	3001      	adds	r0, #1
 80067ea:	d0ad      	beq.n	8006748 <_printf_i+0x15c>
 80067ec:	6823      	ldr	r3, [r4, #0]
 80067ee:	079b      	lsls	r3, r3, #30
 80067f0:	d413      	bmi.n	800681a <_printf_i+0x22e>
 80067f2:	68e0      	ldr	r0, [r4, #12]
 80067f4:	9b03      	ldr	r3, [sp, #12]
 80067f6:	4298      	cmp	r0, r3
 80067f8:	bfb8      	it	lt
 80067fa:	4618      	movlt	r0, r3
 80067fc:	e7a6      	b.n	800674c <_printf_i+0x160>
 80067fe:	2301      	movs	r3, #1
 8006800:	4632      	mov	r2, r6
 8006802:	4649      	mov	r1, r9
 8006804:	4640      	mov	r0, r8
 8006806:	47d0      	blx	sl
 8006808:	3001      	adds	r0, #1
 800680a:	d09d      	beq.n	8006748 <_printf_i+0x15c>
 800680c:	3501      	adds	r5, #1
 800680e:	68e3      	ldr	r3, [r4, #12]
 8006810:	9903      	ldr	r1, [sp, #12]
 8006812:	1a5b      	subs	r3, r3, r1
 8006814:	42ab      	cmp	r3, r5
 8006816:	dcf2      	bgt.n	80067fe <_printf_i+0x212>
 8006818:	e7eb      	b.n	80067f2 <_printf_i+0x206>
 800681a:	2500      	movs	r5, #0
 800681c:	f104 0619 	add.w	r6, r4, #25
 8006820:	e7f5      	b.n	800680e <_printf_i+0x222>
 8006822:	bf00      	nop
 8006824:	08008c22 	.word	0x08008c22
 8006828:	08008c33 	.word	0x08008c33

0800682c <std>:
 800682c:	2300      	movs	r3, #0
 800682e:	b510      	push	{r4, lr}
 8006830:	4604      	mov	r4, r0
 8006832:	e9c0 3300 	strd	r3, r3, [r0]
 8006836:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800683a:	6083      	str	r3, [r0, #8]
 800683c:	8181      	strh	r1, [r0, #12]
 800683e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006840:	81c2      	strh	r2, [r0, #14]
 8006842:	6183      	str	r3, [r0, #24]
 8006844:	4619      	mov	r1, r3
 8006846:	2208      	movs	r2, #8
 8006848:	305c      	adds	r0, #92	@ 0x5c
 800684a:	f000 f948 	bl	8006ade <memset>
 800684e:	4b0d      	ldr	r3, [pc, #52]	@ (8006884 <std+0x58>)
 8006850:	6263      	str	r3, [r4, #36]	@ 0x24
 8006852:	4b0d      	ldr	r3, [pc, #52]	@ (8006888 <std+0x5c>)
 8006854:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006856:	4b0d      	ldr	r3, [pc, #52]	@ (800688c <std+0x60>)
 8006858:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800685a:	4b0d      	ldr	r3, [pc, #52]	@ (8006890 <std+0x64>)
 800685c:	6323      	str	r3, [r4, #48]	@ 0x30
 800685e:	4b0d      	ldr	r3, [pc, #52]	@ (8006894 <std+0x68>)
 8006860:	6224      	str	r4, [r4, #32]
 8006862:	429c      	cmp	r4, r3
 8006864:	d006      	beq.n	8006874 <std+0x48>
 8006866:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800686a:	4294      	cmp	r4, r2
 800686c:	d002      	beq.n	8006874 <std+0x48>
 800686e:	33d0      	adds	r3, #208	@ 0xd0
 8006870:	429c      	cmp	r4, r3
 8006872:	d105      	bne.n	8006880 <std+0x54>
 8006874:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800687c:	f000 ba00 	b.w	8006c80 <__retarget_lock_init_recursive>
 8006880:	bd10      	pop	{r4, pc}
 8006882:	bf00      	nop
 8006884:	08006a59 	.word	0x08006a59
 8006888:	08006a7b 	.word	0x08006a7b
 800688c:	08006ab3 	.word	0x08006ab3
 8006890:	08006ad7 	.word	0x08006ad7
 8006894:	200003a4 	.word	0x200003a4

08006898 <stdio_exit_handler>:
 8006898:	4a02      	ldr	r2, [pc, #8]	@ (80068a4 <stdio_exit_handler+0xc>)
 800689a:	4903      	ldr	r1, [pc, #12]	@ (80068a8 <stdio_exit_handler+0x10>)
 800689c:	4803      	ldr	r0, [pc, #12]	@ (80068ac <stdio_exit_handler+0x14>)
 800689e:	f000 b869 	b.w	8006974 <_fwalk_sglue>
 80068a2:	bf00      	nop
 80068a4:	2000000c 	.word	0x2000000c
 80068a8:	08008471 	.word	0x08008471
 80068ac:	2000001c 	.word	0x2000001c

080068b0 <cleanup_stdio>:
 80068b0:	6841      	ldr	r1, [r0, #4]
 80068b2:	4b0c      	ldr	r3, [pc, #48]	@ (80068e4 <cleanup_stdio+0x34>)
 80068b4:	4299      	cmp	r1, r3
 80068b6:	b510      	push	{r4, lr}
 80068b8:	4604      	mov	r4, r0
 80068ba:	d001      	beq.n	80068c0 <cleanup_stdio+0x10>
 80068bc:	f001 fdd8 	bl	8008470 <_fflush_r>
 80068c0:	68a1      	ldr	r1, [r4, #8]
 80068c2:	4b09      	ldr	r3, [pc, #36]	@ (80068e8 <cleanup_stdio+0x38>)
 80068c4:	4299      	cmp	r1, r3
 80068c6:	d002      	beq.n	80068ce <cleanup_stdio+0x1e>
 80068c8:	4620      	mov	r0, r4
 80068ca:	f001 fdd1 	bl	8008470 <_fflush_r>
 80068ce:	68e1      	ldr	r1, [r4, #12]
 80068d0:	4b06      	ldr	r3, [pc, #24]	@ (80068ec <cleanup_stdio+0x3c>)
 80068d2:	4299      	cmp	r1, r3
 80068d4:	d004      	beq.n	80068e0 <cleanup_stdio+0x30>
 80068d6:	4620      	mov	r0, r4
 80068d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068dc:	f001 bdc8 	b.w	8008470 <_fflush_r>
 80068e0:	bd10      	pop	{r4, pc}
 80068e2:	bf00      	nop
 80068e4:	200003a4 	.word	0x200003a4
 80068e8:	2000040c 	.word	0x2000040c
 80068ec:	20000474 	.word	0x20000474

080068f0 <global_stdio_init.part.0>:
 80068f0:	b510      	push	{r4, lr}
 80068f2:	4b0b      	ldr	r3, [pc, #44]	@ (8006920 <global_stdio_init.part.0+0x30>)
 80068f4:	4c0b      	ldr	r4, [pc, #44]	@ (8006924 <global_stdio_init.part.0+0x34>)
 80068f6:	4a0c      	ldr	r2, [pc, #48]	@ (8006928 <global_stdio_init.part.0+0x38>)
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	4620      	mov	r0, r4
 80068fc:	2200      	movs	r2, #0
 80068fe:	2104      	movs	r1, #4
 8006900:	f7ff ff94 	bl	800682c <std>
 8006904:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006908:	2201      	movs	r2, #1
 800690a:	2109      	movs	r1, #9
 800690c:	f7ff ff8e 	bl	800682c <std>
 8006910:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006914:	2202      	movs	r2, #2
 8006916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800691a:	2112      	movs	r1, #18
 800691c:	f7ff bf86 	b.w	800682c <std>
 8006920:	200004dc 	.word	0x200004dc
 8006924:	200003a4 	.word	0x200003a4
 8006928:	08006899 	.word	0x08006899

0800692c <__sfp_lock_acquire>:
 800692c:	4801      	ldr	r0, [pc, #4]	@ (8006934 <__sfp_lock_acquire+0x8>)
 800692e:	f000 b9a8 	b.w	8006c82 <__retarget_lock_acquire_recursive>
 8006932:	bf00      	nop
 8006934:	200004e5 	.word	0x200004e5

08006938 <__sfp_lock_release>:
 8006938:	4801      	ldr	r0, [pc, #4]	@ (8006940 <__sfp_lock_release+0x8>)
 800693a:	f000 b9a3 	b.w	8006c84 <__retarget_lock_release_recursive>
 800693e:	bf00      	nop
 8006940:	200004e5 	.word	0x200004e5

08006944 <__sinit>:
 8006944:	b510      	push	{r4, lr}
 8006946:	4604      	mov	r4, r0
 8006948:	f7ff fff0 	bl	800692c <__sfp_lock_acquire>
 800694c:	6a23      	ldr	r3, [r4, #32]
 800694e:	b11b      	cbz	r3, 8006958 <__sinit+0x14>
 8006950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006954:	f7ff bff0 	b.w	8006938 <__sfp_lock_release>
 8006958:	4b04      	ldr	r3, [pc, #16]	@ (800696c <__sinit+0x28>)
 800695a:	6223      	str	r3, [r4, #32]
 800695c:	4b04      	ldr	r3, [pc, #16]	@ (8006970 <__sinit+0x2c>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1f5      	bne.n	8006950 <__sinit+0xc>
 8006964:	f7ff ffc4 	bl	80068f0 <global_stdio_init.part.0>
 8006968:	e7f2      	b.n	8006950 <__sinit+0xc>
 800696a:	bf00      	nop
 800696c:	080068b1 	.word	0x080068b1
 8006970:	200004dc 	.word	0x200004dc

08006974 <_fwalk_sglue>:
 8006974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006978:	4607      	mov	r7, r0
 800697a:	4688      	mov	r8, r1
 800697c:	4614      	mov	r4, r2
 800697e:	2600      	movs	r6, #0
 8006980:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006984:	f1b9 0901 	subs.w	r9, r9, #1
 8006988:	d505      	bpl.n	8006996 <_fwalk_sglue+0x22>
 800698a:	6824      	ldr	r4, [r4, #0]
 800698c:	2c00      	cmp	r4, #0
 800698e:	d1f7      	bne.n	8006980 <_fwalk_sglue+0xc>
 8006990:	4630      	mov	r0, r6
 8006992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006996:	89ab      	ldrh	r3, [r5, #12]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d907      	bls.n	80069ac <_fwalk_sglue+0x38>
 800699c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069a0:	3301      	adds	r3, #1
 80069a2:	d003      	beq.n	80069ac <_fwalk_sglue+0x38>
 80069a4:	4629      	mov	r1, r5
 80069a6:	4638      	mov	r0, r7
 80069a8:	47c0      	blx	r8
 80069aa:	4306      	orrs	r6, r0
 80069ac:	3568      	adds	r5, #104	@ 0x68
 80069ae:	e7e9      	b.n	8006984 <_fwalk_sglue+0x10>

080069b0 <sniprintf>:
 80069b0:	b40c      	push	{r2, r3}
 80069b2:	b530      	push	{r4, r5, lr}
 80069b4:	4b17      	ldr	r3, [pc, #92]	@ (8006a14 <sniprintf+0x64>)
 80069b6:	1e0c      	subs	r4, r1, #0
 80069b8:	681d      	ldr	r5, [r3, #0]
 80069ba:	b09d      	sub	sp, #116	@ 0x74
 80069bc:	da08      	bge.n	80069d0 <sniprintf+0x20>
 80069be:	238b      	movs	r3, #139	@ 0x8b
 80069c0:	602b      	str	r3, [r5, #0]
 80069c2:	f04f 30ff 	mov.w	r0, #4294967295
 80069c6:	b01d      	add	sp, #116	@ 0x74
 80069c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069cc:	b002      	add	sp, #8
 80069ce:	4770      	bx	lr
 80069d0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80069d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80069d8:	bf14      	ite	ne
 80069da:	f104 33ff 	addne.w	r3, r4, #4294967295
 80069de:	4623      	moveq	r3, r4
 80069e0:	9304      	str	r3, [sp, #16]
 80069e2:	9307      	str	r3, [sp, #28]
 80069e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80069e8:	9002      	str	r0, [sp, #8]
 80069ea:	9006      	str	r0, [sp, #24]
 80069ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 80069f0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80069f2:	ab21      	add	r3, sp, #132	@ 0x84
 80069f4:	a902      	add	r1, sp, #8
 80069f6:	4628      	mov	r0, r5
 80069f8:	9301      	str	r3, [sp, #4]
 80069fa:	f001 fbb9 	bl	8008170 <_svfiprintf_r>
 80069fe:	1c43      	adds	r3, r0, #1
 8006a00:	bfbc      	itt	lt
 8006a02:	238b      	movlt	r3, #139	@ 0x8b
 8006a04:	602b      	strlt	r3, [r5, #0]
 8006a06:	2c00      	cmp	r4, #0
 8006a08:	d0dd      	beq.n	80069c6 <sniprintf+0x16>
 8006a0a:	9b02      	ldr	r3, [sp, #8]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	701a      	strb	r2, [r3, #0]
 8006a10:	e7d9      	b.n	80069c6 <sniprintf+0x16>
 8006a12:	bf00      	nop
 8006a14:	20000018 	.word	0x20000018

08006a18 <siprintf>:
 8006a18:	b40e      	push	{r1, r2, r3}
 8006a1a:	b500      	push	{lr}
 8006a1c:	b09c      	sub	sp, #112	@ 0x70
 8006a1e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006a20:	9002      	str	r0, [sp, #8]
 8006a22:	9006      	str	r0, [sp, #24]
 8006a24:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006a28:	4809      	ldr	r0, [pc, #36]	@ (8006a50 <siprintf+0x38>)
 8006a2a:	9107      	str	r1, [sp, #28]
 8006a2c:	9104      	str	r1, [sp, #16]
 8006a2e:	4909      	ldr	r1, [pc, #36]	@ (8006a54 <siprintf+0x3c>)
 8006a30:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a34:	9105      	str	r1, [sp, #20]
 8006a36:	6800      	ldr	r0, [r0, #0]
 8006a38:	9301      	str	r3, [sp, #4]
 8006a3a:	a902      	add	r1, sp, #8
 8006a3c:	f001 fb98 	bl	8008170 <_svfiprintf_r>
 8006a40:	9b02      	ldr	r3, [sp, #8]
 8006a42:	2200      	movs	r2, #0
 8006a44:	701a      	strb	r2, [r3, #0]
 8006a46:	b01c      	add	sp, #112	@ 0x70
 8006a48:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a4c:	b003      	add	sp, #12
 8006a4e:	4770      	bx	lr
 8006a50:	20000018 	.word	0x20000018
 8006a54:	ffff0208 	.word	0xffff0208

08006a58 <__sread>:
 8006a58:	b510      	push	{r4, lr}
 8006a5a:	460c      	mov	r4, r1
 8006a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a60:	f000 f89c 	bl	8006b9c <_read_r>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	bfab      	itete	ge
 8006a68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006a6a:	89a3      	ldrhlt	r3, [r4, #12]
 8006a6c:	181b      	addge	r3, r3, r0
 8006a6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a72:	bfac      	ite	ge
 8006a74:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006a76:	81a3      	strhlt	r3, [r4, #12]
 8006a78:	bd10      	pop	{r4, pc}

08006a7a <__swrite>:
 8006a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a7e:	461f      	mov	r7, r3
 8006a80:	898b      	ldrh	r3, [r1, #12]
 8006a82:	05db      	lsls	r3, r3, #23
 8006a84:	4605      	mov	r5, r0
 8006a86:	460c      	mov	r4, r1
 8006a88:	4616      	mov	r6, r2
 8006a8a:	d505      	bpl.n	8006a98 <__swrite+0x1e>
 8006a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a90:	2302      	movs	r3, #2
 8006a92:	2200      	movs	r2, #0
 8006a94:	f000 f870 	bl	8006b78 <_lseek_r>
 8006a98:	89a3      	ldrh	r3, [r4, #12]
 8006a9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006aa2:	81a3      	strh	r3, [r4, #12]
 8006aa4:	4632      	mov	r2, r6
 8006aa6:	463b      	mov	r3, r7
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006aae:	f000 b8ab 	b.w	8006c08 <_write_r>

08006ab2 <__sseek>:
 8006ab2:	b510      	push	{r4, lr}
 8006ab4:	460c      	mov	r4, r1
 8006ab6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aba:	f000 f85d 	bl	8006b78 <_lseek_r>
 8006abe:	1c43      	adds	r3, r0, #1
 8006ac0:	89a3      	ldrh	r3, [r4, #12]
 8006ac2:	bf15      	itete	ne
 8006ac4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006ac6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006aca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006ace:	81a3      	strheq	r3, [r4, #12]
 8006ad0:	bf18      	it	ne
 8006ad2:	81a3      	strhne	r3, [r4, #12]
 8006ad4:	bd10      	pop	{r4, pc}

08006ad6 <__sclose>:
 8006ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ada:	f000 b83d 	b.w	8006b58 <_close_r>

08006ade <memset>:
 8006ade:	4402      	add	r2, r0
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d100      	bne.n	8006ae8 <memset+0xa>
 8006ae6:	4770      	bx	lr
 8006ae8:	f803 1b01 	strb.w	r1, [r3], #1
 8006aec:	e7f9      	b.n	8006ae2 <memset+0x4>

08006aee <_raise_r>:
 8006aee:	291f      	cmp	r1, #31
 8006af0:	b538      	push	{r3, r4, r5, lr}
 8006af2:	4605      	mov	r5, r0
 8006af4:	460c      	mov	r4, r1
 8006af6:	d904      	bls.n	8006b02 <_raise_r+0x14>
 8006af8:	2316      	movs	r3, #22
 8006afa:	6003      	str	r3, [r0, #0]
 8006afc:	f04f 30ff 	mov.w	r0, #4294967295
 8006b00:	bd38      	pop	{r3, r4, r5, pc}
 8006b02:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006b04:	b112      	cbz	r2, 8006b0c <_raise_r+0x1e>
 8006b06:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b0a:	b94b      	cbnz	r3, 8006b20 <_raise_r+0x32>
 8006b0c:	4628      	mov	r0, r5
 8006b0e:	f000 f869 	bl	8006be4 <_getpid_r>
 8006b12:	4622      	mov	r2, r4
 8006b14:	4601      	mov	r1, r0
 8006b16:	4628      	mov	r0, r5
 8006b18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b1c:	f000 b850 	b.w	8006bc0 <_kill_r>
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d00a      	beq.n	8006b3a <_raise_r+0x4c>
 8006b24:	1c59      	adds	r1, r3, #1
 8006b26:	d103      	bne.n	8006b30 <_raise_r+0x42>
 8006b28:	2316      	movs	r3, #22
 8006b2a:	6003      	str	r3, [r0, #0]
 8006b2c:	2001      	movs	r0, #1
 8006b2e:	e7e7      	b.n	8006b00 <_raise_r+0x12>
 8006b30:	2100      	movs	r1, #0
 8006b32:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006b36:	4620      	mov	r0, r4
 8006b38:	4798      	blx	r3
 8006b3a:	2000      	movs	r0, #0
 8006b3c:	e7e0      	b.n	8006b00 <_raise_r+0x12>
	...

08006b40 <raise>:
 8006b40:	4b02      	ldr	r3, [pc, #8]	@ (8006b4c <raise+0xc>)
 8006b42:	4601      	mov	r1, r0
 8006b44:	6818      	ldr	r0, [r3, #0]
 8006b46:	f7ff bfd2 	b.w	8006aee <_raise_r>
 8006b4a:	bf00      	nop
 8006b4c:	20000018 	.word	0x20000018

08006b50 <_localeconv_r>:
 8006b50:	4800      	ldr	r0, [pc, #0]	@ (8006b54 <_localeconv_r+0x4>)
 8006b52:	4770      	bx	lr
 8006b54:	20000158 	.word	0x20000158

08006b58 <_close_r>:
 8006b58:	b538      	push	{r3, r4, r5, lr}
 8006b5a:	4d06      	ldr	r5, [pc, #24]	@ (8006b74 <_close_r+0x1c>)
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	4604      	mov	r4, r0
 8006b60:	4608      	mov	r0, r1
 8006b62:	602b      	str	r3, [r5, #0]
 8006b64:	f7fb fd90 	bl	8002688 <_close>
 8006b68:	1c43      	adds	r3, r0, #1
 8006b6a:	d102      	bne.n	8006b72 <_close_r+0x1a>
 8006b6c:	682b      	ldr	r3, [r5, #0]
 8006b6e:	b103      	cbz	r3, 8006b72 <_close_r+0x1a>
 8006b70:	6023      	str	r3, [r4, #0]
 8006b72:	bd38      	pop	{r3, r4, r5, pc}
 8006b74:	200004e0 	.word	0x200004e0

08006b78 <_lseek_r>:
 8006b78:	b538      	push	{r3, r4, r5, lr}
 8006b7a:	4d07      	ldr	r5, [pc, #28]	@ (8006b98 <_lseek_r+0x20>)
 8006b7c:	4604      	mov	r4, r0
 8006b7e:	4608      	mov	r0, r1
 8006b80:	4611      	mov	r1, r2
 8006b82:	2200      	movs	r2, #0
 8006b84:	602a      	str	r2, [r5, #0]
 8006b86:	461a      	mov	r2, r3
 8006b88:	f7fb fda5 	bl	80026d6 <_lseek>
 8006b8c:	1c43      	adds	r3, r0, #1
 8006b8e:	d102      	bne.n	8006b96 <_lseek_r+0x1e>
 8006b90:	682b      	ldr	r3, [r5, #0]
 8006b92:	b103      	cbz	r3, 8006b96 <_lseek_r+0x1e>
 8006b94:	6023      	str	r3, [r4, #0]
 8006b96:	bd38      	pop	{r3, r4, r5, pc}
 8006b98:	200004e0 	.word	0x200004e0

08006b9c <_read_r>:
 8006b9c:	b538      	push	{r3, r4, r5, lr}
 8006b9e:	4d07      	ldr	r5, [pc, #28]	@ (8006bbc <_read_r+0x20>)
 8006ba0:	4604      	mov	r4, r0
 8006ba2:	4608      	mov	r0, r1
 8006ba4:	4611      	mov	r1, r2
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	602a      	str	r2, [r5, #0]
 8006baa:	461a      	mov	r2, r3
 8006bac:	f7fb fd33 	bl	8002616 <_read>
 8006bb0:	1c43      	adds	r3, r0, #1
 8006bb2:	d102      	bne.n	8006bba <_read_r+0x1e>
 8006bb4:	682b      	ldr	r3, [r5, #0]
 8006bb6:	b103      	cbz	r3, 8006bba <_read_r+0x1e>
 8006bb8:	6023      	str	r3, [r4, #0]
 8006bba:	bd38      	pop	{r3, r4, r5, pc}
 8006bbc:	200004e0 	.word	0x200004e0

08006bc0 <_kill_r>:
 8006bc0:	b538      	push	{r3, r4, r5, lr}
 8006bc2:	4d07      	ldr	r5, [pc, #28]	@ (8006be0 <_kill_r+0x20>)
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	4604      	mov	r4, r0
 8006bc8:	4608      	mov	r0, r1
 8006bca:	4611      	mov	r1, r2
 8006bcc:	602b      	str	r3, [r5, #0]
 8006bce:	f7fb fd07 	bl	80025e0 <_kill>
 8006bd2:	1c43      	adds	r3, r0, #1
 8006bd4:	d102      	bne.n	8006bdc <_kill_r+0x1c>
 8006bd6:	682b      	ldr	r3, [r5, #0]
 8006bd8:	b103      	cbz	r3, 8006bdc <_kill_r+0x1c>
 8006bda:	6023      	str	r3, [r4, #0]
 8006bdc:	bd38      	pop	{r3, r4, r5, pc}
 8006bde:	bf00      	nop
 8006be0:	200004e0 	.word	0x200004e0

08006be4 <_getpid_r>:
 8006be4:	f7fb bcf4 	b.w	80025d0 <_getpid>

08006be8 <_sbrk_r>:
 8006be8:	b538      	push	{r3, r4, r5, lr}
 8006bea:	4d06      	ldr	r5, [pc, #24]	@ (8006c04 <_sbrk_r+0x1c>)
 8006bec:	2300      	movs	r3, #0
 8006bee:	4604      	mov	r4, r0
 8006bf0:	4608      	mov	r0, r1
 8006bf2:	602b      	str	r3, [r5, #0]
 8006bf4:	f7fb fd7c 	bl	80026f0 <_sbrk>
 8006bf8:	1c43      	adds	r3, r0, #1
 8006bfa:	d102      	bne.n	8006c02 <_sbrk_r+0x1a>
 8006bfc:	682b      	ldr	r3, [r5, #0]
 8006bfe:	b103      	cbz	r3, 8006c02 <_sbrk_r+0x1a>
 8006c00:	6023      	str	r3, [r4, #0]
 8006c02:	bd38      	pop	{r3, r4, r5, pc}
 8006c04:	200004e0 	.word	0x200004e0

08006c08 <_write_r>:
 8006c08:	b538      	push	{r3, r4, r5, lr}
 8006c0a:	4d07      	ldr	r5, [pc, #28]	@ (8006c28 <_write_r+0x20>)
 8006c0c:	4604      	mov	r4, r0
 8006c0e:	4608      	mov	r0, r1
 8006c10:	4611      	mov	r1, r2
 8006c12:	2200      	movs	r2, #0
 8006c14:	602a      	str	r2, [r5, #0]
 8006c16:	461a      	mov	r2, r3
 8006c18:	f7fb fd1a 	bl	8002650 <_write>
 8006c1c:	1c43      	adds	r3, r0, #1
 8006c1e:	d102      	bne.n	8006c26 <_write_r+0x1e>
 8006c20:	682b      	ldr	r3, [r5, #0]
 8006c22:	b103      	cbz	r3, 8006c26 <_write_r+0x1e>
 8006c24:	6023      	str	r3, [r4, #0]
 8006c26:	bd38      	pop	{r3, r4, r5, pc}
 8006c28:	200004e0 	.word	0x200004e0

08006c2c <__errno>:
 8006c2c:	4b01      	ldr	r3, [pc, #4]	@ (8006c34 <__errno+0x8>)
 8006c2e:	6818      	ldr	r0, [r3, #0]
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	20000018 	.word	0x20000018

08006c38 <__libc_init_array>:
 8006c38:	b570      	push	{r4, r5, r6, lr}
 8006c3a:	4d0d      	ldr	r5, [pc, #52]	@ (8006c70 <__libc_init_array+0x38>)
 8006c3c:	4c0d      	ldr	r4, [pc, #52]	@ (8006c74 <__libc_init_array+0x3c>)
 8006c3e:	1b64      	subs	r4, r4, r5
 8006c40:	10a4      	asrs	r4, r4, #2
 8006c42:	2600      	movs	r6, #0
 8006c44:	42a6      	cmp	r6, r4
 8006c46:	d109      	bne.n	8006c5c <__libc_init_array+0x24>
 8006c48:	4d0b      	ldr	r5, [pc, #44]	@ (8006c78 <__libc_init_array+0x40>)
 8006c4a:	4c0c      	ldr	r4, [pc, #48]	@ (8006c7c <__libc_init_array+0x44>)
 8006c4c:	f001 ff54 	bl	8008af8 <_init>
 8006c50:	1b64      	subs	r4, r4, r5
 8006c52:	10a4      	asrs	r4, r4, #2
 8006c54:	2600      	movs	r6, #0
 8006c56:	42a6      	cmp	r6, r4
 8006c58:	d105      	bne.n	8006c66 <__libc_init_array+0x2e>
 8006c5a:	bd70      	pop	{r4, r5, r6, pc}
 8006c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c60:	4798      	blx	r3
 8006c62:	3601      	adds	r6, #1
 8006c64:	e7ee      	b.n	8006c44 <__libc_init_array+0xc>
 8006c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c6a:	4798      	blx	r3
 8006c6c:	3601      	adds	r6, #1
 8006c6e:	e7f2      	b.n	8006c56 <__libc_init_array+0x1e>
 8006c70:	08008f88 	.word	0x08008f88
 8006c74:	08008f88 	.word	0x08008f88
 8006c78:	08008f88 	.word	0x08008f88
 8006c7c:	08008f8c 	.word	0x08008f8c

08006c80 <__retarget_lock_init_recursive>:
 8006c80:	4770      	bx	lr

08006c82 <__retarget_lock_acquire_recursive>:
 8006c82:	4770      	bx	lr

08006c84 <__retarget_lock_release_recursive>:
 8006c84:	4770      	bx	lr

08006c86 <quorem>:
 8006c86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c8a:	6903      	ldr	r3, [r0, #16]
 8006c8c:	690c      	ldr	r4, [r1, #16]
 8006c8e:	42a3      	cmp	r3, r4
 8006c90:	4607      	mov	r7, r0
 8006c92:	db7e      	blt.n	8006d92 <quorem+0x10c>
 8006c94:	3c01      	subs	r4, #1
 8006c96:	f101 0814 	add.w	r8, r1, #20
 8006c9a:	00a3      	lsls	r3, r4, #2
 8006c9c:	f100 0514 	add.w	r5, r0, #20
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ca6:	9301      	str	r3, [sp, #4]
 8006ca8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006cac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006cb8:	fbb2 f6f3 	udiv	r6, r2, r3
 8006cbc:	d32e      	bcc.n	8006d1c <quorem+0x96>
 8006cbe:	f04f 0a00 	mov.w	sl, #0
 8006cc2:	46c4      	mov	ip, r8
 8006cc4:	46ae      	mov	lr, r5
 8006cc6:	46d3      	mov	fp, sl
 8006cc8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006ccc:	b298      	uxth	r0, r3
 8006cce:	fb06 a000 	mla	r0, r6, r0, sl
 8006cd2:	0c02      	lsrs	r2, r0, #16
 8006cd4:	0c1b      	lsrs	r3, r3, #16
 8006cd6:	fb06 2303 	mla	r3, r6, r3, r2
 8006cda:	f8de 2000 	ldr.w	r2, [lr]
 8006cde:	b280      	uxth	r0, r0
 8006ce0:	b292      	uxth	r2, r2
 8006ce2:	1a12      	subs	r2, r2, r0
 8006ce4:	445a      	add	r2, fp
 8006ce6:	f8de 0000 	ldr.w	r0, [lr]
 8006cea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006cf4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006cf8:	b292      	uxth	r2, r2
 8006cfa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006cfe:	45e1      	cmp	r9, ip
 8006d00:	f84e 2b04 	str.w	r2, [lr], #4
 8006d04:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006d08:	d2de      	bcs.n	8006cc8 <quorem+0x42>
 8006d0a:	9b00      	ldr	r3, [sp, #0]
 8006d0c:	58eb      	ldr	r3, [r5, r3]
 8006d0e:	b92b      	cbnz	r3, 8006d1c <quorem+0x96>
 8006d10:	9b01      	ldr	r3, [sp, #4]
 8006d12:	3b04      	subs	r3, #4
 8006d14:	429d      	cmp	r5, r3
 8006d16:	461a      	mov	r2, r3
 8006d18:	d32f      	bcc.n	8006d7a <quorem+0xf4>
 8006d1a:	613c      	str	r4, [r7, #16]
 8006d1c:	4638      	mov	r0, r7
 8006d1e:	f001 f8c3 	bl	8007ea8 <__mcmp>
 8006d22:	2800      	cmp	r0, #0
 8006d24:	db25      	blt.n	8006d72 <quorem+0xec>
 8006d26:	4629      	mov	r1, r5
 8006d28:	2000      	movs	r0, #0
 8006d2a:	f858 2b04 	ldr.w	r2, [r8], #4
 8006d2e:	f8d1 c000 	ldr.w	ip, [r1]
 8006d32:	fa1f fe82 	uxth.w	lr, r2
 8006d36:	fa1f f38c 	uxth.w	r3, ip
 8006d3a:	eba3 030e 	sub.w	r3, r3, lr
 8006d3e:	4403      	add	r3, r0
 8006d40:	0c12      	lsrs	r2, r2, #16
 8006d42:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006d46:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d50:	45c1      	cmp	r9, r8
 8006d52:	f841 3b04 	str.w	r3, [r1], #4
 8006d56:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006d5a:	d2e6      	bcs.n	8006d2a <quorem+0xa4>
 8006d5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d60:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d64:	b922      	cbnz	r2, 8006d70 <quorem+0xea>
 8006d66:	3b04      	subs	r3, #4
 8006d68:	429d      	cmp	r5, r3
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	d30b      	bcc.n	8006d86 <quorem+0x100>
 8006d6e:	613c      	str	r4, [r7, #16]
 8006d70:	3601      	adds	r6, #1
 8006d72:	4630      	mov	r0, r6
 8006d74:	b003      	add	sp, #12
 8006d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d7a:	6812      	ldr	r2, [r2, #0]
 8006d7c:	3b04      	subs	r3, #4
 8006d7e:	2a00      	cmp	r2, #0
 8006d80:	d1cb      	bne.n	8006d1a <quorem+0x94>
 8006d82:	3c01      	subs	r4, #1
 8006d84:	e7c6      	b.n	8006d14 <quorem+0x8e>
 8006d86:	6812      	ldr	r2, [r2, #0]
 8006d88:	3b04      	subs	r3, #4
 8006d8a:	2a00      	cmp	r2, #0
 8006d8c:	d1ef      	bne.n	8006d6e <quorem+0xe8>
 8006d8e:	3c01      	subs	r4, #1
 8006d90:	e7ea      	b.n	8006d68 <quorem+0xe2>
 8006d92:	2000      	movs	r0, #0
 8006d94:	e7ee      	b.n	8006d74 <quorem+0xee>
	...

08006d98 <_dtoa_r>:
 8006d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d9c:	69c7      	ldr	r7, [r0, #28]
 8006d9e:	b099      	sub	sp, #100	@ 0x64
 8006da0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006da4:	ec55 4b10 	vmov	r4, r5, d0
 8006da8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006daa:	9109      	str	r1, [sp, #36]	@ 0x24
 8006dac:	4683      	mov	fp, r0
 8006dae:	920e      	str	r2, [sp, #56]	@ 0x38
 8006db0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006db2:	b97f      	cbnz	r7, 8006dd4 <_dtoa_r+0x3c>
 8006db4:	2010      	movs	r0, #16
 8006db6:	f7ff f823 	bl	8005e00 <malloc>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	f8cb 001c 	str.w	r0, [fp, #28]
 8006dc0:	b920      	cbnz	r0, 8006dcc <_dtoa_r+0x34>
 8006dc2:	4ba7      	ldr	r3, [pc, #668]	@ (8007060 <_dtoa_r+0x2c8>)
 8006dc4:	21ef      	movs	r1, #239	@ 0xef
 8006dc6:	48a7      	ldr	r0, [pc, #668]	@ (8007064 <_dtoa_r+0x2cc>)
 8006dc8:	f001 fba2 	bl	8008510 <__assert_func>
 8006dcc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006dd0:	6007      	str	r7, [r0, #0]
 8006dd2:	60c7      	str	r7, [r0, #12]
 8006dd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006dd8:	6819      	ldr	r1, [r3, #0]
 8006dda:	b159      	cbz	r1, 8006df4 <_dtoa_r+0x5c>
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	604a      	str	r2, [r1, #4]
 8006de0:	2301      	movs	r3, #1
 8006de2:	4093      	lsls	r3, r2
 8006de4:	608b      	str	r3, [r1, #8]
 8006de6:	4658      	mov	r0, fp
 8006de8:	f000 fe24 	bl	8007a34 <_Bfree>
 8006dec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006df0:	2200      	movs	r2, #0
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	1e2b      	subs	r3, r5, #0
 8006df6:	bfb9      	ittee	lt
 8006df8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006dfc:	9303      	strlt	r3, [sp, #12]
 8006dfe:	2300      	movge	r3, #0
 8006e00:	6033      	strge	r3, [r6, #0]
 8006e02:	9f03      	ldr	r7, [sp, #12]
 8006e04:	4b98      	ldr	r3, [pc, #608]	@ (8007068 <_dtoa_r+0x2d0>)
 8006e06:	bfbc      	itt	lt
 8006e08:	2201      	movlt	r2, #1
 8006e0a:	6032      	strlt	r2, [r6, #0]
 8006e0c:	43bb      	bics	r3, r7
 8006e0e:	d112      	bne.n	8006e36 <_dtoa_r+0x9e>
 8006e10:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006e12:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006e16:	6013      	str	r3, [r2, #0]
 8006e18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006e1c:	4323      	orrs	r3, r4
 8006e1e:	f000 854d 	beq.w	80078bc <_dtoa_r+0xb24>
 8006e22:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e24:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800707c <_dtoa_r+0x2e4>
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f000 854f 	beq.w	80078cc <_dtoa_r+0xb34>
 8006e2e:	f10a 0303 	add.w	r3, sl, #3
 8006e32:	f000 bd49 	b.w	80078c8 <_dtoa_r+0xb30>
 8006e36:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	ec51 0b17 	vmov	r0, r1, d7
 8006e40:	2300      	movs	r3, #0
 8006e42:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006e46:	f7f9 fe47 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e4a:	4680      	mov	r8, r0
 8006e4c:	b158      	cbz	r0, 8006e66 <_dtoa_r+0xce>
 8006e4e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006e50:	2301      	movs	r3, #1
 8006e52:	6013      	str	r3, [r2, #0]
 8006e54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e56:	b113      	cbz	r3, 8006e5e <_dtoa_r+0xc6>
 8006e58:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006e5a:	4b84      	ldr	r3, [pc, #528]	@ (800706c <_dtoa_r+0x2d4>)
 8006e5c:	6013      	str	r3, [r2, #0]
 8006e5e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007080 <_dtoa_r+0x2e8>
 8006e62:	f000 bd33 	b.w	80078cc <_dtoa_r+0xb34>
 8006e66:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006e6a:	aa16      	add	r2, sp, #88	@ 0x58
 8006e6c:	a917      	add	r1, sp, #92	@ 0x5c
 8006e6e:	4658      	mov	r0, fp
 8006e70:	f001 f8ca 	bl	8008008 <__d2b>
 8006e74:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006e78:	4681      	mov	r9, r0
 8006e7a:	2e00      	cmp	r6, #0
 8006e7c:	d077      	beq.n	8006f6e <_dtoa_r+0x1d6>
 8006e7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e80:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006e84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e8c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006e90:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006e94:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006e98:	4619      	mov	r1, r3
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	4b74      	ldr	r3, [pc, #464]	@ (8007070 <_dtoa_r+0x2d8>)
 8006e9e:	f7f9 f9fb 	bl	8000298 <__aeabi_dsub>
 8006ea2:	a369      	add	r3, pc, #420	@ (adr r3, 8007048 <_dtoa_r+0x2b0>)
 8006ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea8:	f7f9 fbae 	bl	8000608 <__aeabi_dmul>
 8006eac:	a368      	add	r3, pc, #416	@ (adr r3, 8007050 <_dtoa_r+0x2b8>)
 8006eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb2:	f7f9 f9f3 	bl	800029c <__adddf3>
 8006eb6:	4604      	mov	r4, r0
 8006eb8:	4630      	mov	r0, r6
 8006eba:	460d      	mov	r5, r1
 8006ebc:	f7f9 fb3a 	bl	8000534 <__aeabi_i2d>
 8006ec0:	a365      	add	r3, pc, #404	@ (adr r3, 8007058 <_dtoa_r+0x2c0>)
 8006ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec6:	f7f9 fb9f 	bl	8000608 <__aeabi_dmul>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	460b      	mov	r3, r1
 8006ece:	4620      	mov	r0, r4
 8006ed0:	4629      	mov	r1, r5
 8006ed2:	f7f9 f9e3 	bl	800029c <__adddf3>
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	460d      	mov	r5, r1
 8006eda:	f7f9 fe45 	bl	8000b68 <__aeabi_d2iz>
 8006ede:	2200      	movs	r2, #0
 8006ee0:	4607      	mov	r7, r0
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	4629      	mov	r1, r5
 8006ee8:	f7f9 fe00 	bl	8000aec <__aeabi_dcmplt>
 8006eec:	b140      	cbz	r0, 8006f00 <_dtoa_r+0x168>
 8006eee:	4638      	mov	r0, r7
 8006ef0:	f7f9 fb20 	bl	8000534 <__aeabi_i2d>
 8006ef4:	4622      	mov	r2, r4
 8006ef6:	462b      	mov	r3, r5
 8006ef8:	f7f9 fdee 	bl	8000ad8 <__aeabi_dcmpeq>
 8006efc:	b900      	cbnz	r0, 8006f00 <_dtoa_r+0x168>
 8006efe:	3f01      	subs	r7, #1
 8006f00:	2f16      	cmp	r7, #22
 8006f02:	d851      	bhi.n	8006fa8 <_dtoa_r+0x210>
 8006f04:	4b5b      	ldr	r3, [pc, #364]	@ (8007074 <_dtoa_r+0x2dc>)
 8006f06:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f12:	f7f9 fdeb 	bl	8000aec <__aeabi_dcmplt>
 8006f16:	2800      	cmp	r0, #0
 8006f18:	d048      	beq.n	8006fac <_dtoa_r+0x214>
 8006f1a:	3f01      	subs	r7, #1
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006f20:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006f22:	1b9b      	subs	r3, r3, r6
 8006f24:	1e5a      	subs	r2, r3, #1
 8006f26:	bf44      	itt	mi
 8006f28:	f1c3 0801 	rsbmi	r8, r3, #1
 8006f2c:	2300      	movmi	r3, #0
 8006f2e:	9208      	str	r2, [sp, #32]
 8006f30:	bf54      	ite	pl
 8006f32:	f04f 0800 	movpl.w	r8, #0
 8006f36:	9308      	strmi	r3, [sp, #32]
 8006f38:	2f00      	cmp	r7, #0
 8006f3a:	db39      	blt.n	8006fb0 <_dtoa_r+0x218>
 8006f3c:	9b08      	ldr	r3, [sp, #32]
 8006f3e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006f40:	443b      	add	r3, r7
 8006f42:	9308      	str	r3, [sp, #32]
 8006f44:	2300      	movs	r3, #0
 8006f46:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f4a:	2b09      	cmp	r3, #9
 8006f4c:	d864      	bhi.n	8007018 <_dtoa_r+0x280>
 8006f4e:	2b05      	cmp	r3, #5
 8006f50:	bfc4      	itt	gt
 8006f52:	3b04      	subgt	r3, #4
 8006f54:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006f56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f58:	f1a3 0302 	sub.w	r3, r3, #2
 8006f5c:	bfcc      	ite	gt
 8006f5e:	2400      	movgt	r4, #0
 8006f60:	2401      	movle	r4, #1
 8006f62:	2b03      	cmp	r3, #3
 8006f64:	d863      	bhi.n	800702e <_dtoa_r+0x296>
 8006f66:	e8df f003 	tbb	[pc, r3]
 8006f6a:	372a      	.short	0x372a
 8006f6c:	5535      	.short	0x5535
 8006f6e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006f72:	441e      	add	r6, r3
 8006f74:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006f78:	2b20      	cmp	r3, #32
 8006f7a:	bfc1      	itttt	gt
 8006f7c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006f80:	409f      	lslgt	r7, r3
 8006f82:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006f86:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006f8a:	bfd6      	itet	le
 8006f8c:	f1c3 0320 	rsble	r3, r3, #32
 8006f90:	ea47 0003 	orrgt.w	r0, r7, r3
 8006f94:	fa04 f003 	lslle.w	r0, r4, r3
 8006f98:	f7f9 fabc 	bl	8000514 <__aeabi_ui2d>
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006fa2:	3e01      	subs	r6, #1
 8006fa4:	9214      	str	r2, [sp, #80]	@ 0x50
 8006fa6:	e777      	b.n	8006e98 <_dtoa_r+0x100>
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e7b8      	b.n	8006f1e <_dtoa_r+0x186>
 8006fac:	9012      	str	r0, [sp, #72]	@ 0x48
 8006fae:	e7b7      	b.n	8006f20 <_dtoa_r+0x188>
 8006fb0:	427b      	negs	r3, r7
 8006fb2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	eba8 0807 	sub.w	r8, r8, r7
 8006fba:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006fbc:	e7c4      	b.n	8006f48 <_dtoa_r+0x1b0>
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006fc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	dc35      	bgt.n	8007034 <_dtoa_r+0x29c>
 8006fc8:	2301      	movs	r3, #1
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	9307      	str	r3, [sp, #28]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	920e      	str	r2, [sp, #56]	@ 0x38
 8006fd2:	e00b      	b.n	8006fec <_dtoa_r+0x254>
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e7f3      	b.n	8006fc0 <_dtoa_r+0x228>
 8006fd8:	2300      	movs	r3, #0
 8006fda:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006fdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fde:	18fb      	adds	r3, r7, r3
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	9307      	str	r3, [sp, #28]
 8006fe8:	bfb8      	it	lt
 8006fea:	2301      	movlt	r3, #1
 8006fec:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	2204      	movs	r2, #4
 8006ff4:	f102 0514 	add.w	r5, r2, #20
 8006ff8:	429d      	cmp	r5, r3
 8006ffa:	d91f      	bls.n	800703c <_dtoa_r+0x2a4>
 8006ffc:	6041      	str	r1, [r0, #4]
 8006ffe:	4658      	mov	r0, fp
 8007000:	f000 fcd8 	bl	80079b4 <_Balloc>
 8007004:	4682      	mov	sl, r0
 8007006:	2800      	cmp	r0, #0
 8007008:	d13c      	bne.n	8007084 <_dtoa_r+0x2ec>
 800700a:	4b1b      	ldr	r3, [pc, #108]	@ (8007078 <_dtoa_r+0x2e0>)
 800700c:	4602      	mov	r2, r0
 800700e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007012:	e6d8      	b.n	8006dc6 <_dtoa_r+0x2e>
 8007014:	2301      	movs	r3, #1
 8007016:	e7e0      	b.n	8006fda <_dtoa_r+0x242>
 8007018:	2401      	movs	r4, #1
 800701a:	2300      	movs	r3, #0
 800701c:	9309      	str	r3, [sp, #36]	@ 0x24
 800701e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007020:	f04f 33ff 	mov.w	r3, #4294967295
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	9307      	str	r3, [sp, #28]
 8007028:	2200      	movs	r2, #0
 800702a:	2312      	movs	r3, #18
 800702c:	e7d0      	b.n	8006fd0 <_dtoa_r+0x238>
 800702e:	2301      	movs	r3, #1
 8007030:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007032:	e7f5      	b.n	8007020 <_dtoa_r+0x288>
 8007034:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	9307      	str	r3, [sp, #28]
 800703a:	e7d7      	b.n	8006fec <_dtoa_r+0x254>
 800703c:	3101      	adds	r1, #1
 800703e:	0052      	lsls	r2, r2, #1
 8007040:	e7d8      	b.n	8006ff4 <_dtoa_r+0x25c>
 8007042:	bf00      	nop
 8007044:	f3af 8000 	nop.w
 8007048:	636f4361 	.word	0x636f4361
 800704c:	3fd287a7 	.word	0x3fd287a7
 8007050:	8b60c8b3 	.word	0x8b60c8b3
 8007054:	3fc68a28 	.word	0x3fc68a28
 8007058:	509f79fb 	.word	0x509f79fb
 800705c:	3fd34413 	.word	0x3fd34413
 8007060:	08008c51 	.word	0x08008c51
 8007064:	08008c68 	.word	0x08008c68
 8007068:	7ff00000 	.word	0x7ff00000
 800706c:	08008c21 	.word	0x08008c21
 8007070:	3ff80000 	.word	0x3ff80000
 8007074:	08008d60 	.word	0x08008d60
 8007078:	08008cc0 	.word	0x08008cc0
 800707c:	08008c4d 	.word	0x08008c4d
 8007080:	08008c20 	.word	0x08008c20
 8007084:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007088:	6018      	str	r0, [r3, #0]
 800708a:	9b07      	ldr	r3, [sp, #28]
 800708c:	2b0e      	cmp	r3, #14
 800708e:	f200 80a4 	bhi.w	80071da <_dtoa_r+0x442>
 8007092:	2c00      	cmp	r4, #0
 8007094:	f000 80a1 	beq.w	80071da <_dtoa_r+0x442>
 8007098:	2f00      	cmp	r7, #0
 800709a:	dd33      	ble.n	8007104 <_dtoa_r+0x36c>
 800709c:	4bad      	ldr	r3, [pc, #692]	@ (8007354 <_dtoa_r+0x5bc>)
 800709e:	f007 020f 	and.w	r2, r7, #15
 80070a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070a6:	ed93 7b00 	vldr	d7, [r3]
 80070aa:	05f8      	lsls	r0, r7, #23
 80070ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 80070b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80070b4:	d516      	bpl.n	80070e4 <_dtoa_r+0x34c>
 80070b6:	4ba8      	ldr	r3, [pc, #672]	@ (8007358 <_dtoa_r+0x5c0>)
 80070b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80070c0:	f7f9 fbcc 	bl	800085c <__aeabi_ddiv>
 80070c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070c8:	f004 040f 	and.w	r4, r4, #15
 80070cc:	2603      	movs	r6, #3
 80070ce:	4da2      	ldr	r5, [pc, #648]	@ (8007358 <_dtoa_r+0x5c0>)
 80070d0:	b954      	cbnz	r4, 80070e8 <_dtoa_r+0x350>
 80070d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070da:	f7f9 fbbf 	bl	800085c <__aeabi_ddiv>
 80070de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070e2:	e028      	b.n	8007136 <_dtoa_r+0x39e>
 80070e4:	2602      	movs	r6, #2
 80070e6:	e7f2      	b.n	80070ce <_dtoa_r+0x336>
 80070e8:	07e1      	lsls	r1, r4, #31
 80070ea:	d508      	bpl.n	80070fe <_dtoa_r+0x366>
 80070ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80070f4:	f7f9 fa88 	bl	8000608 <__aeabi_dmul>
 80070f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070fc:	3601      	adds	r6, #1
 80070fe:	1064      	asrs	r4, r4, #1
 8007100:	3508      	adds	r5, #8
 8007102:	e7e5      	b.n	80070d0 <_dtoa_r+0x338>
 8007104:	f000 80d2 	beq.w	80072ac <_dtoa_r+0x514>
 8007108:	427c      	negs	r4, r7
 800710a:	4b92      	ldr	r3, [pc, #584]	@ (8007354 <_dtoa_r+0x5bc>)
 800710c:	4d92      	ldr	r5, [pc, #584]	@ (8007358 <_dtoa_r+0x5c0>)
 800710e:	f004 020f 	and.w	r2, r4, #15
 8007112:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800711e:	f7f9 fa73 	bl	8000608 <__aeabi_dmul>
 8007122:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007126:	1124      	asrs	r4, r4, #4
 8007128:	2300      	movs	r3, #0
 800712a:	2602      	movs	r6, #2
 800712c:	2c00      	cmp	r4, #0
 800712e:	f040 80b2 	bne.w	8007296 <_dtoa_r+0x4fe>
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1d3      	bne.n	80070de <_dtoa_r+0x346>
 8007136:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007138:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800713c:	2b00      	cmp	r3, #0
 800713e:	f000 80b7 	beq.w	80072b0 <_dtoa_r+0x518>
 8007142:	4b86      	ldr	r3, [pc, #536]	@ (800735c <_dtoa_r+0x5c4>)
 8007144:	2200      	movs	r2, #0
 8007146:	4620      	mov	r0, r4
 8007148:	4629      	mov	r1, r5
 800714a:	f7f9 fccf 	bl	8000aec <__aeabi_dcmplt>
 800714e:	2800      	cmp	r0, #0
 8007150:	f000 80ae 	beq.w	80072b0 <_dtoa_r+0x518>
 8007154:	9b07      	ldr	r3, [sp, #28]
 8007156:	2b00      	cmp	r3, #0
 8007158:	f000 80aa 	beq.w	80072b0 <_dtoa_r+0x518>
 800715c:	9b00      	ldr	r3, [sp, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	dd37      	ble.n	80071d2 <_dtoa_r+0x43a>
 8007162:	1e7b      	subs	r3, r7, #1
 8007164:	9304      	str	r3, [sp, #16]
 8007166:	4620      	mov	r0, r4
 8007168:	4b7d      	ldr	r3, [pc, #500]	@ (8007360 <_dtoa_r+0x5c8>)
 800716a:	2200      	movs	r2, #0
 800716c:	4629      	mov	r1, r5
 800716e:	f7f9 fa4b 	bl	8000608 <__aeabi_dmul>
 8007172:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007176:	9c00      	ldr	r4, [sp, #0]
 8007178:	3601      	adds	r6, #1
 800717a:	4630      	mov	r0, r6
 800717c:	f7f9 f9da 	bl	8000534 <__aeabi_i2d>
 8007180:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007184:	f7f9 fa40 	bl	8000608 <__aeabi_dmul>
 8007188:	4b76      	ldr	r3, [pc, #472]	@ (8007364 <_dtoa_r+0x5cc>)
 800718a:	2200      	movs	r2, #0
 800718c:	f7f9 f886 	bl	800029c <__adddf3>
 8007190:	4605      	mov	r5, r0
 8007192:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007196:	2c00      	cmp	r4, #0
 8007198:	f040 808d 	bne.w	80072b6 <_dtoa_r+0x51e>
 800719c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071a0:	4b71      	ldr	r3, [pc, #452]	@ (8007368 <_dtoa_r+0x5d0>)
 80071a2:	2200      	movs	r2, #0
 80071a4:	f7f9 f878 	bl	8000298 <__aeabi_dsub>
 80071a8:	4602      	mov	r2, r0
 80071aa:	460b      	mov	r3, r1
 80071ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80071b0:	462a      	mov	r2, r5
 80071b2:	4633      	mov	r3, r6
 80071b4:	f7f9 fcb8 	bl	8000b28 <__aeabi_dcmpgt>
 80071b8:	2800      	cmp	r0, #0
 80071ba:	f040 828b 	bne.w	80076d4 <_dtoa_r+0x93c>
 80071be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071c2:	462a      	mov	r2, r5
 80071c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80071c8:	f7f9 fc90 	bl	8000aec <__aeabi_dcmplt>
 80071cc:	2800      	cmp	r0, #0
 80071ce:	f040 8128 	bne.w	8007422 <_dtoa_r+0x68a>
 80071d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80071d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80071da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f2c0 815a 	blt.w	8007496 <_dtoa_r+0x6fe>
 80071e2:	2f0e      	cmp	r7, #14
 80071e4:	f300 8157 	bgt.w	8007496 <_dtoa_r+0x6fe>
 80071e8:	4b5a      	ldr	r3, [pc, #360]	@ (8007354 <_dtoa_r+0x5bc>)
 80071ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80071ee:	ed93 7b00 	vldr	d7, [r3]
 80071f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	ed8d 7b00 	vstr	d7, [sp]
 80071fa:	da03      	bge.n	8007204 <_dtoa_r+0x46c>
 80071fc:	9b07      	ldr	r3, [sp, #28]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f340 8101 	ble.w	8007406 <_dtoa_r+0x66e>
 8007204:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007208:	4656      	mov	r6, sl
 800720a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800720e:	4620      	mov	r0, r4
 8007210:	4629      	mov	r1, r5
 8007212:	f7f9 fb23 	bl	800085c <__aeabi_ddiv>
 8007216:	f7f9 fca7 	bl	8000b68 <__aeabi_d2iz>
 800721a:	4680      	mov	r8, r0
 800721c:	f7f9 f98a 	bl	8000534 <__aeabi_i2d>
 8007220:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007224:	f7f9 f9f0 	bl	8000608 <__aeabi_dmul>
 8007228:	4602      	mov	r2, r0
 800722a:	460b      	mov	r3, r1
 800722c:	4620      	mov	r0, r4
 800722e:	4629      	mov	r1, r5
 8007230:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007234:	f7f9 f830 	bl	8000298 <__aeabi_dsub>
 8007238:	f806 4b01 	strb.w	r4, [r6], #1
 800723c:	9d07      	ldr	r5, [sp, #28]
 800723e:	eba6 040a 	sub.w	r4, r6, sl
 8007242:	42a5      	cmp	r5, r4
 8007244:	4602      	mov	r2, r0
 8007246:	460b      	mov	r3, r1
 8007248:	f040 8117 	bne.w	800747a <_dtoa_r+0x6e2>
 800724c:	f7f9 f826 	bl	800029c <__adddf3>
 8007250:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007254:	4604      	mov	r4, r0
 8007256:	460d      	mov	r5, r1
 8007258:	f7f9 fc66 	bl	8000b28 <__aeabi_dcmpgt>
 800725c:	2800      	cmp	r0, #0
 800725e:	f040 80f9 	bne.w	8007454 <_dtoa_r+0x6bc>
 8007262:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007266:	4620      	mov	r0, r4
 8007268:	4629      	mov	r1, r5
 800726a:	f7f9 fc35 	bl	8000ad8 <__aeabi_dcmpeq>
 800726e:	b118      	cbz	r0, 8007278 <_dtoa_r+0x4e0>
 8007270:	f018 0f01 	tst.w	r8, #1
 8007274:	f040 80ee 	bne.w	8007454 <_dtoa_r+0x6bc>
 8007278:	4649      	mov	r1, r9
 800727a:	4658      	mov	r0, fp
 800727c:	f000 fbda 	bl	8007a34 <_Bfree>
 8007280:	2300      	movs	r3, #0
 8007282:	7033      	strb	r3, [r6, #0]
 8007284:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007286:	3701      	adds	r7, #1
 8007288:	601f      	str	r7, [r3, #0]
 800728a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800728c:	2b00      	cmp	r3, #0
 800728e:	f000 831d 	beq.w	80078cc <_dtoa_r+0xb34>
 8007292:	601e      	str	r6, [r3, #0]
 8007294:	e31a      	b.n	80078cc <_dtoa_r+0xb34>
 8007296:	07e2      	lsls	r2, r4, #31
 8007298:	d505      	bpl.n	80072a6 <_dtoa_r+0x50e>
 800729a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800729e:	f7f9 f9b3 	bl	8000608 <__aeabi_dmul>
 80072a2:	3601      	adds	r6, #1
 80072a4:	2301      	movs	r3, #1
 80072a6:	1064      	asrs	r4, r4, #1
 80072a8:	3508      	adds	r5, #8
 80072aa:	e73f      	b.n	800712c <_dtoa_r+0x394>
 80072ac:	2602      	movs	r6, #2
 80072ae:	e742      	b.n	8007136 <_dtoa_r+0x39e>
 80072b0:	9c07      	ldr	r4, [sp, #28]
 80072b2:	9704      	str	r7, [sp, #16]
 80072b4:	e761      	b.n	800717a <_dtoa_r+0x3e2>
 80072b6:	4b27      	ldr	r3, [pc, #156]	@ (8007354 <_dtoa_r+0x5bc>)
 80072b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80072ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80072be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80072c2:	4454      	add	r4, sl
 80072c4:	2900      	cmp	r1, #0
 80072c6:	d053      	beq.n	8007370 <_dtoa_r+0x5d8>
 80072c8:	4928      	ldr	r1, [pc, #160]	@ (800736c <_dtoa_r+0x5d4>)
 80072ca:	2000      	movs	r0, #0
 80072cc:	f7f9 fac6 	bl	800085c <__aeabi_ddiv>
 80072d0:	4633      	mov	r3, r6
 80072d2:	462a      	mov	r2, r5
 80072d4:	f7f8 ffe0 	bl	8000298 <__aeabi_dsub>
 80072d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80072dc:	4656      	mov	r6, sl
 80072de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072e2:	f7f9 fc41 	bl	8000b68 <__aeabi_d2iz>
 80072e6:	4605      	mov	r5, r0
 80072e8:	f7f9 f924 	bl	8000534 <__aeabi_i2d>
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072f4:	f7f8 ffd0 	bl	8000298 <__aeabi_dsub>
 80072f8:	3530      	adds	r5, #48	@ 0x30
 80072fa:	4602      	mov	r2, r0
 80072fc:	460b      	mov	r3, r1
 80072fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007302:	f806 5b01 	strb.w	r5, [r6], #1
 8007306:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800730a:	f7f9 fbef 	bl	8000aec <__aeabi_dcmplt>
 800730e:	2800      	cmp	r0, #0
 8007310:	d171      	bne.n	80073f6 <_dtoa_r+0x65e>
 8007312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007316:	4911      	ldr	r1, [pc, #68]	@ (800735c <_dtoa_r+0x5c4>)
 8007318:	2000      	movs	r0, #0
 800731a:	f7f8 ffbd 	bl	8000298 <__aeabi_dsub>
 800731e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007322:	f7f9 fbe3 	bl	8000aec <__aeabi_dcmplt>
 8007326:	2800      	cmp	r0, #0
 8007328:	f040 8095 	bne.w	8007456 <_dtoa_r+0x6be>
 800732c:	42a6      	cmp	r6, r4
 800732e:	f43f af50 	beq.w	80071d2 <_dtoa_r+0x43a>
 8007332:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007336:	4b0a      	ldr	r3, [pc, #40]	@ (8007360 <_dtoa_r+0x5c8>)
 8007338:	2200      	movs	r2, #0
 800733a:	f7f9 f965 	bl	8000608 <__aeabi_dmul>
 800733e:	4b08      	ldr	r3, [pc, #32]	@ (8007360 <_dtoa_r+0x5c8>)
 8007340:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007344:	2200      	movs	r2, #0
 8007346:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800734a:	f7f9 f95d 	bl	8000608 <__aeabi_dmul>
 800734e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007352:	e7c4      	b.n	80072de <_dtoa_r+0x546>
 8007354:	08008d60 	.word	0x08008d60
 8007358:	08008d38 	.word	0x08008d38
 800735c:	3ff00000 	.word	0x3ff00000
 8007360:	40240000 	.word	0x40240000
 8007364:	401c0000 	.word	0x401c0000
 8007368:	40140000 	.word	0x40140000
 800736c:	3fe00000 	.word	0x3fe00000
 8007370:	4631      	mov	r1, r6
 8007372:	4628      	mov	r0, r5
 8007374:	f7f9 f948 	bl	8000608 <__aeabi_dmul>
 8007378:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800737c:	9415      	str	r4, [sp, #84]	@ 0x54
 800737e:	4656      	mov	r6, sl
 8007380:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007384:	f7f9 fbf0 	bl	8000b68 <__aeabi_d2iz>
 8007388:	4605      	mov	r5, r0
 800738a:	f7f9 f8d3 	bl	8000534 <__aeabi_i2d>
 800738e:	4602      	mov	r2, r0
 8007390:	460b      	mov	r3, r1
 8007392:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007396:	f7f8 ff7f 	bl	8000298 <__aeabi_dsub>
 800739a:	3530      	adds	r5, #48	@ 0x30
 800739c:	f806 5b01 	strb.w	r5, [r6], #1
 80073a0:	4602      	mov	r2, r0
 80073a2:	460b      	mov	r3, r1
 80073a4:	42a6      	cmp	r6, r4
 80073a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073aa:	f04f 0200 	mov.w	r2, #0
 80073ae:	d124      	bne.n	80073fa <_dtoa_r+0x662>
 80073b0:	4bac      	ldr	r3, [pc, #688]	@ (8007664 <_dtoa_r+0x8cc>)
 80073b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80073b6:	f7f8 ff71 	bl	800029c <__adddf3>
 80073ba:	4602      	mov	r2, r0
 80073bc:	460b      	mov	r3, r1
 80073be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073c2:	f7f9 fbb1 	bl	8000b28 <__aeabi_dcmpgt>
 80073c6:	2800      	cmp	r0, #0
 80073c8:	d145      	bne.n	8007456 <_dtoa_r+0x6be>
 80073ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80073ce:	49a5      	ldr	r1, [pc, #660]	@ (8007664 <_dtoa_r+0x8cc>)
 80073d0:	2000      	movs	r0, #0
 80073d2:	f7f8 ff61 	bl	8000298 <__aeabi_dsub>
 80073d6:	4602      	mov	r2, r0
 80073d8:	460b      	mov	r3, r1
 80073da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073de:	f7f9 fb85 	bl	8000aec <__aeabi_dcmplt>
 80073e2:	2800      	cmp	r0, #0
 80073e4:	f43f aef5 	beq.w	80071d2 <_dtoa_r+0x43a>
 80073e8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80073ea:	1e73      	subs	r3, r6, #1
 80073ec:	9315      	str	r3, [sp, #84]	@ 0x54
 80073ee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80073f2:	2b30      	cmp	r3, #48	@ 0x30
 80073f4:	d0f8      	beq.n	80073e8 <_dtoa_r+0x650>
 80073f6:	9f04      	ldr	r7, [sp, #16]
 80073f8:	e73e      	b.n	8007278 <_dtoa_r+0x4e0>
 80073fa:	4b9b      	ldr	r3, [pc, #620]	@ (8007668 <_dtoa_r+0x8d0>)
 80073fc:	f7f9 f904 	bl	8000608 <__aeabi_dmul>
 8007400:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007404:	e7bc      	b.n	8007380 <_dtoa_r+0x5e8>
 8007406:	d10c      	bne.n	8007422 <_dtoa_r+0x68a>
 8007408:	4b98      	ldr	r3, [pc, #608]	@ (800766c <_dtoa_r+0x8d4>)
 800740a:	2200      	movs	r2, #0
 800740c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007410:	f7f9 f8fa 	bl	8000608 <__aeabi_dmul>
 8007414:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007418:	f7f9 fb7c 	bl	8000b14 <__aeabi_dcmpge>
 800741c:	2800      	cmp	r0, #0
 800741e:	f000 8157 	beq.w	80076d0 <_dtoa_r+0x938>
 8007422:	2400      	movs	r4, #0
 8007424:	4625      	mov	r5, r4
 8007426:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007428:	43db      	mvns	r3, r3
 800742a:	9304      	str	r3, [sp, #16]
 800742c:	4656      	mov	r6, sl
 800742e:	2700      	movs	r7, #0
 8007430:	4621      	mov	r1, r4
 8007432:	4658      	mov	r0, fp
 8007434:	f000 fafe 	bl	8007a34 <_Bfree>
 8007438:	2d00      	cmp	r5, #0
 800743a:	d0dc      	beq.n	80073f6 <_dtoa_r+0x65e>
 800743c:	b12f      	cbz	r7, 800744a <_dtoa_r+0x6b2>
 800743e:	42af      	cmp	r7, r5
 8007440:	d003      	beq.n	800744a <_dtoa_r+0x6b2>
 8007442:	4639      	mov	r1, r7
 8007444:	4658      	mov	r0, fp
 8007446:	f000 faf5 	bl	8007a34 <_Bfree>
 800744a:	4629      	mov	r1, r5
 800744c:	4658      	mov	r0, fp
 800744e:	f000 faf1 	bl	8007a34 <_Bfree>
 8007452:	e7d0      	b.n	80073f6 <_dtoa_r+0x65e>
 8007454:	9704      	str	r7, [sp, #16]
 8007456:	4633      	mov	r3, r6
 8007458:	461e      	mov	r6, r3
 800745a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800745e:	2a39      	cmp	r2, #57	@ 0x39
 8007460:	d107      	bne.n	8007472 <_dtoa_r+0x6da>
 8007462:	459a      	cmp	sl, r3
 8007464:	d1f8      	bne.n	8007458 <_dtoa_r+0x6c0>
 8007466:	9a04      	ldr	r2, [sp, #16]
 8007468:	3201      	adds	r2, #1
 800746a:	9204      	str	r2, [sp, #16]
 800746c:	2230      	movs	r2, #48	@ 0x30
 800746e:	f88a 2000 	strb.w	r2, [sl]
 8007472:	781a      	ldrb	r2, [r3, #0]
 8007474:	3201      	adds	r2, #1
 8007476:	701a      	strb	r2, [r3, #0]
 8007478:	e7bd      	b.n	80073f6 <_dtoa_r+0x65e>
 800747a:	4b7b      	ldr	r3, [pc, #492]	@ (8007668 <_dtoa_r+0x8d0>)
 800747c:	2200      	movs	r2, #0
 800747e:	f7f9 f8c3 	bl	8000608 <__aeabi_dmul>
 8007482:	2200      	movs	r2, #0
 8007484:	2300      	movs	r3, #0
 8007486:	4604      	mov	r4, r0
 8007488:	460d      	mov	r5, r1
 800748a:	f7f9 fb25 	bl	8000ad8 <__aeabi_dcmpeq>
 800748e:	2800      	cmp	r0, #0
 8007490:	f43f aebb 	beq.w	800720a <_dtoa_r+0x472>
 8007494:	e6f0      	b.n	8007278 <_dtoa_r+0x4e0>
 8007496:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007498:	2a00      	cmp	r2, #0
 800749a:	f000 80db 	beq.w	8007654 <_dtoa_r+0x8bc>
 800749e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074a0:	2a01      	cmp	r2, #1
 80074a2:	f300 80bf 	bgt.w	8007624 <_dtoa_r+0x88c>
 80074a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80074a8:	2a00      	cmp	r2, #0
 80074aa:	f000 80b7 	beq.w	800761c <_dtoa_r+0x884>
 80074ae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80074b2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80074b4:	4646      	mov	r6, r8
 80074b6:	9a08      	ldr	r2, [sp, #32]
 80074b8:	2101      	movs	r1, #1
 80074ba:	441a      	add	r2, r3
 80074bc:	4658      	mov	r0, fp
 80074be:	4498      	add	r8, r3
 80074c0:	9208      	str	r2, [sp, #32]
 80074c2:	f000 fb6b 	bl	8007b9c <__i2b>
 80074c6:	4605      	mov	r5, r0
 80074c8:	b15e      	cbz	r6, 80074e2 <_dtoa_r+0x74a>
 80074ca:	9b08      	ldr	r3, [sp, #32]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	dd08      	ble.n	80074e2 <_dtoa_r+0x74a>
 80074d0:	42b3      	cmp	r3, r6
 80074d2:	9a08      	ldr	r2, [sp, #32]
 80074d4:	bfa8      	it	ge
 80074d6:	4633      	movge	r3, r6
 80074d8:	eba8 0803 	sub.w	r8, r8, r3
 80074dc:	1af6      	subs	r6, r6, r3
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	9308      	str	r3, [sp, #32]
 80074e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074e4:	b1f3      	cbz	r3, 8007524 <_dtoa_r+0x78c>
 80074e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f000 80b7 	beq.w	800765c <_dtoa_r+0x8c4>
 80074ee:	b18c      	cbz	r4, 8007514 <_dtoa_r+0x77c>
 80074f0:	4629      	mov	r1, r5
 80074f2:	4622      	mov	r2, r4
 80074f4:	4658      	mov	r0, fp
 80074f6:	f000 fc11 	bl	8007d1c <__pow5mult>
 80074fa:	464a      	mov	r2, r9
 80074fc:	4601      	mov	r1, r0
 80074fe:	4605      	mov	r5, r0
 8007500:	4658      	mov	r0, fp
 8007502:	f000 fb61 	bl	8007bc8 <__multiply>
 8007506:	4649      	mov	r1, r9
 8007508:	9004      	str	r0, [sp, #16]
 800750a:	4658      	mov	r0, fp
 800750c:	f000 fa92 	bl	8007a34 <_Bfree>
 8007510:	9b04      	ldr	r3, [sp, #16]
 8007512:	4699      	mov	r9, r3
 8007514:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007516:	1b1a      	subs	r2, r3, r4
 8007518:	d004      	beq.n	8007524 <_dtoa_r+0x78c>
 800751a:	4649      	mov	r1, r9
 800751c:	4658      	mov	r0, fp
 800751e:	f000 fbfd 	bl	8007d1c <__pow5mult>
 8007522:	4681      	mov	r9, r0
 8007524:	2101      	movs	r1, #1
 8007526:	4658      	mov	r0, fp
 8007528:	f000 fb38 	bl	8007b9c <__i2b>
 800752c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800752e:	4604      	mov	r4, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	f000 81cf 	beq.w	80078d4 <_dtoa_r+0xb3c>
 8007536:	461a      	mov	r2, r3
 8007538:	4601      	mov	r1, r0
 800753a:	4658      	mov	r0, fp
 800753c:	f000 fbee 	bl	8007d1c <__pow5mult>
 8007540:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007542:	2b01      	cmp	r3, #1
 8007544:	4604      	mov	r4, r0
 8007546:	f300 8095 	bgt.w	8007674 <_dtoa_r+0x8dc>
 800754a:	9b02      	ldr	r3, [sp, #8]
 800754c:	2b00      	cmp	r3, #0
 800754e:	f040 8087 	bne.w	8007660 <_dtoa_r+0x8c8>
 8007552:	9b03      	ldr	r3, [sp, #12]
 8007554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007558:	2b00      	cmp	r3, #0
 800755a:	f040 8089 	bne.w	8007670 <_dtoa_r+0x8d8>
 800755e:	9b03      	ldr	r3, [sp, #12]
 8007560:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007564:	0d1b      	lsrs	r3, r3, #20
 8007566:	051b      	lsls	r3, r3, #20
 8007568:	b12b      	cbz	r3, 8007576 <_dtoa_r+0x7de>
 800756a:	9b08      	ldr	r3, [sp, #32]
 800756c:	3301      	adds	r3, #1
 800756e:	9308      	str	r3, [sp, #32]
 8007570:	f108 0801 	add.w	r8, r8, #1
 8007574:	2301      	movs	r3, #1
 8007576:	930a      	str	r3, [sp, #40]	@ 0x28
 8007578:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800757a:	2b00      	cmp	r3, #0
 800757c:	f000 81b0 	beq.w	80078e0 <_dtoa_r+0xb48>
 8007580:	6923      	ldr	r3, [r4, #16]
 8007582:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007586:	6918      	ldr	r0, [r3, #16]
 8007588:	f000 fabc 	bl	8007b04 <__hi0bits>
 800758c:	f1c0 0020 	rsb	r0, r0, #32
 8007590:	9b08      	ldr	r3, [sp, #32]
 8007592:	4418      	add	r0, r3
 8007594:	f010 001f 	ands.w	r0, r0, #31
 8007598:	d077      	beq.n	800768a <_dtoa_r+0x8f2>
 800759a:	f1c0 0320 	rsb	r3, r0, #32
 800759e:	2b04      	cmp	r3, #4
 80075a0:	dd6b      	ble.n	800767a <_dtoa_r+0x8e2>
 80075a2:	9b08      	ldr	r3, [sp, #32]
 80075a4:	f1c0 001c 	rsb	r0, r0, #28
 80075a8:	4403      	add	r3, r0
 80075aa:	4480      	add	r8, r0
 80075ac:	4406      	add	r6, r0
 80075ae:	9308      	str	r3, [sp, #32]
 80075b0:	f1b8 0f00 	cmp.w	r8, #0
 80075b4:	dd05      	ble.n	80075c2 <_dtoa_r+0x82a>
 80075b6:	4649      	mov	r1, r9
 80075b8:	4642      	mov	r2, r8
 80075ba:	4658      	mov	r0, fp
 80075bc:	f000 fc08 	bl	8007dd0 <__lshift>
 80075c0:	4681      	mov	r9, r0
 80075c2:	9b08      	ldr	r3, [sp, #32]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	dd05      	ble.n	80075d4 <_dtoa_r+0x83c>
 80075c8:	4621      	mov	r1, r4
 80075ca:	461a      	mov	r2, r3
 80075cc:	4658      	mov	r0, fp
 80075ce:	f000 fbff 	bl	8007dd0 <__lshift>
 80075d2:	4604      	mov	r4, r0
 80075d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d059      	beq.n	800768e <_dtoa_r+0x8f6>
 80075da:	4621      	mov	r1, r4
 80075dc:	4648      	mov	r0, r9
 80075de:	f000 fc63 	bl	8007ea8 <__mcmp>
 80075e2:	2800      	cmp	r0, #0
 80075e4:	da53      	bge.n	800768e <_dtoa_r+0x8f6>
 80075e6:	1e7b      	subs	r3, r7, #1
 80075e8:	9304      	str	r3, [sp, #16]
 80075ea:	4649      	mov	r1, r9
 80075ec:	2300      	movs	r3, #0
 80075ee:	220a      	movs	r2, #10
 80075f0:	4658      	mov	r0, fp
 80075f2:	f000 fa41 	bl	8007a78 <__multadd>
 80075f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075f8:	4681      	mov	r9, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	f000 8172 	beq.w	80078e4 <_dtoa_r+0xb4c>
 8007600:	2300      	movs	r3, #0
 8007602:	4629      	mov	r1, r5
 8007604:	220a      	movs	r2, #10
 8007606:	4658      	mov	r0, fp
 8007608:	f000 fa36 	bl	8007a78 <__multadd>
 800760c:	9b00      	ldr	r3, [sp, #0]
 800760e:	2b00      	cmp	r3, #0
 8007610:	4605      	mov	r5, r0
 8007612:	dc67      	bgt.n	80076e4 <_dtoa_r+0x94c>
 8007614:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007616:	2b02      	cmp	r3, #2
 8007618:	dc41      	bgt.n	800769e <_dtoa_r+0x906>
 800761a:	e063      	b.n	80076e4 <_dtoa_r+0x94c>
 800761c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800761e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007622:	e746      	b.n	80074b2 <_dtoa_r+0x71a>
 8007624:	9b07      	ldr	r3, [sp, #28]
 8007626:	1e5c      	subs	r4, r3, #1
 8007628:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800762a:	42a3      	cmp	r3, r4
 800762c:	bfbf      	itttt	lt
 800762e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007630:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007632:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007634:	1ae3      	sublt	r3, r4, r3
 8007636:	bfb4      	ite	lt
 8007638:	18d2      	addlt	r2, r2, r3
 800763a:	1b1c      	subge	r4, r3, r4
 800763c:	9b07      	ldr	r3, [sp, #28]
 800763e:	bfbc      	itt	lt
 8007640:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007642:	2400      	movlt	r4, #0
 8007644:	2b00      	cmp	r3, #0
 8007646:	bfb5      	itete	lt
 8007648:	eba8 0603 	sublt.w	r6, r8, r3
 800764c:	9b07      	ldrge	r3, [sp, #28]
 800764e:	2300      	movlt	r3, #0
 8007650:	4646      	movge	r6, r8
 8007652:	e730      	b.n	80074b6 <_dtoa_r+0x71e>
 8007654:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007656:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007658:	4646      	mov	r6, r8
 800765a:	e735      	b.n	80074c8 <_dtoa_r+0x730>
 800765c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800765e:	e75c      	b.n	800751a <_dtoa_r+0x782>
 8007660:	2300      	movs	r3, #0
 8007662:	e788      	b.n	8007576 <_dtoa_r+0x7de>
 8007664:	3fe00000 	.word	0x3fe00000
 8007668:	40240000 	.word	0x40240000
 800766c:	40140000 	.word	0x40140000
 8007670:	9b02      	ldr	r3, [sp, #8]
 8007672:	e780      	b.n	8007576 <_dtoa_r+0x7de>
 8007674:	2300      	movs	r3, #0
 8007676:	930a      	str	r3, [sp, #40]	@ 0x28
 8007678:	e782      	b.n	8007580 <_dtoa_r+0x7e8>
 800767a:	d099      	beq.n	80075b0 <_dtoa_r+0x818>
 800767c:	9a08      	ldr	r2, [sp, #32]
 800767e:	331c      	adds	r3, #28
 8007680:	441a      	add	r2, r3
 8007682:	4498      	add	r8, r3
 8007684:	441e      	add	r6, r3
 8007686:	9208      	str	r2, [sp, #32]
 8007688:	e792      	b.n	80075b0 <_dtoa_r+0x818>
 800768a:	4603      	mov	r3, r0
 800768c:	e7f6      	b.n	800767c <_dtoa_r+0x8e4>
 800768e:	9b07      	ldr	r3, [sp, #28]
 8007690:	9704      	str	r7, [sp, #16]
 8007692:	2b00      	cmp	r3, #0
 8007694:	dc20      	bgt.n	80076d8 <_dtoa_r+0x940>
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800769a:	2b02      	cmp	r3, #2
 800769c:	dd1e      	ble.n	80076dc <_dtoa_r+0x944>
 800769e:	9b00      	ldr	r3, [sp, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f47f aec0 	bne.w	8007426 <_dtoa_r+0x68e>
 80076a6:	4621      	mov	r1, r4
 80076a8:	2205      	movs	r2, #5
 80076aa:	4658      	mov	r0, fp
 80076ac:	f000 f9e4 	bl	8007a78 <__multadd>
 80076b0:	4601      	mov	r1, r0
 80076b2:	4604      	mov	r4, r0
 80076b4:	4648      	mov	r0, r9
 80076b6:	f000 fbf7 	bl	8007ea8 <__mcmp>
 80076ba:	2800      	cmp	r0, #0
 80076bc:	f77f aeb3 	ble.w	8007426 <_dtoa_r+0x68e>
 80076c0:	4656      	mov	r6, sl
 80076c2:	2331      	movs	r3, #49	@ 0x31
 80076c4:	f806 3b01 	strb.w	r3, [r6], #1
 80076c8:	9b04      	ldr	r3, [sp, #16]
 80076ca:	3301      	adds	r3, #1
 80076cc:	9304      	str	r3, [sp, #16]
 80076ce:	e6ae      	b.n	800742e <_dtoa_r+0x696>
 80076d0:	9c07      	ldr	r4, [sp, #28]
 80076d2:	9704      	str	r7, [sp, #16]
 80076d4:	4625      	mov	r5, r4
 80076d6:	e7f3      	b.n	80076c0 <_dtoa_r+0x928>
 80076d8:	9b07      	ldr	r3, [sp, #28]
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f000 8104 	beq.w	80078ec <_dtoa_r+0xb54>
 80076e4:	2e00      	cmp	r6, #0
 80076e6:	dd05      	ble.n	80076f4 <_dtoa_r+0x95c>
 80076e8:	4629      	mov	r1, r5
 80076ea:	4632      	mov	r2, r6
 80076ec:	4658      	mov	r0, fp
 80076ee:	f000 fb6f 	bl	8007dd0 <__lshift>
 80076f2:	4605      	mov	r5, r0
 80076f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d05a      	beq.n	80077b0 <_dtoa_r+0xa18>
 80076fa:	6869      	ldr	r1, [r5, #4]
 80076fc:	4658      	mov	r0, fp
 80076fe:	f000 f959 	bl	80079b4 <_Balloc>
 8007702:	4606      	mov	r6, r0
 8007704:	b928      	cbnz	r0, 8007712 <_dtoa_r+0x97a>
 8007706:	4b84      	ldr	r3, [pc, #528]	@ (8007918 <_dtoa_r+0xb80>)
 8007708:	4602      	mov	r2, r0
 800770a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800770e:	f7ff bb5a 	b.w	8006dc6 <_dtoa_r+0x2e>
 8007712:	692a      	ldr	r2, [r5, #16]
 8007714:	3202      	adds	r2, #2
 8007716:	0092      	lsls	r2, r2, #2
 8007718:	f105 010c 	add.w	r1, r5, #12
 800771c:	300c      	adds	r0, #12
 800771e:	f000 fee9 	bl	80084f4 <memcpy>
 8007722:	2201      	movs	r2, #1
 8007724:	4631      	mov	r1, r6
 8007726:	4658      	mov	r0, fp
 8007728:	f000 fb52 	bl	8007dd0 <__lshift>
 800772c:	f10a 0301 	add.w	r3, sl, #1
 8007730:	9307      	str	r3, [sp, #28]
 8007732:	9b00      	ldr	r3, [sp, #0]
 8007734:	4453      	add	r3, sl
 8007736:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007738:	9b02      	ldr	r3, [sp, #8]
 800773a:	f003 0301 	and.w	r3, r3, #1
 800773e:	462f      	mov	r7, r5
 8007740:	930a      	str	r3, [sp, #40]	@ 0x28
 8007742:	4605      	mov	r5, r0
 8007744:	9b07      	ldr	r3, [sp, #28]
 8007746:	4621      	mov	r1, r4
 8007748:	3b01      	subs	r3, #1
 800774a:	4648      	mov	r0, r9
 800774c:	9300      	str	r3, [sp, #0]
 800774e:	f7ff fa9a 	bl	8006c86 <quorem>
 8007752:	4639      	mov	r1, r7
 8007754:	9002      	str	r0, [sp, #8]
 8007756:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800775a:	4648      	mov	r0, r9
 800775c:	f000 fba4 	bl	8007ea8 <__mcmp>
 8007760:	462a      	mov	r2, r5
 8007762:	9008      	str	r0, [sp, #32]
 8007764:	4621      	mov	r1, r4
 8007766:	4658      	mov	r0, fp
 8007768:	f000 fbba 	bl	8007ee0 <__mdiff>
 800776c:	68c2      	ldr	r2, [r0, #12]
 800776e:	4606      	mov	r6, r0
 8007770:	bb02      	cbnz	r2, 80077b4 <_dtoa_r+0xa1c>
 8007772:	4601      	mov	r1, r0
 8007774:	4648      	mov	r0, r9
 8007776:	f000 fb97 	bl	8007ea8 <__mcmp>
 800777a:	4602      	mov	r2, r0
 800777c:	4631      	mov	r1, r6
 800777e:	4658      	mov	r0, fp
 8007780:	920e      	str	r2, [sp, #56]	@ 0x38
 8007782:	f000 f957 	bl	8007a34 <_Bfree>
 8007786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007788:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800778a:	9e07      	ldr	r6, [sp, #28]
 800778c:	ea43 0102 	orr.w	r1, r3, r2
 8007790:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007792:	4319      	orrs	r1, r3
 8007794:	d110      	bne.n	80077b8 <_dtoa_r+0xa20>
 8007796:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800779a:	d029      	beq.n	80077f0 <_dtoa_r+0xa58>
 800779c:	9b08      	ldr	r3, [sp, #32]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	dd02      	ble.n	80077a8 <_dtoa_r+0xa10>
 80077a2:	9b02      	ldr	r3, [sp, #8]
 80077a4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80077a8:	9b00      	ldr	r3, [sp, #0]
 80077aa:	f883 8000 	strb.w	r8, [r3]
 80077ae:	e63f      	b.n	8007430 <_dtoa_r+0x698>
 80077b0:	4628      	mov	r0, r5
 80077b2:	e7bb      	b.n	800772c <_dtoa_r+0x994>
 80077b4:	2201      	movs	r2, #1
 80077b6:	e7e1      	b.n	800777c <_dtoa_r+0x9e4>
 80077b8:	9b08      	ldr	r3, [sp, #32]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	db04      	blt.n	80077c8 <_dtoa_r+0xa30>
 80077be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80077c0:	430b      	orrs	r3, r1
 80077c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80077c4:	430b      	orrs	r3, r1
 80077c6:	d120      	bne.n	800780a <_dtoa_r+0xa72>
 80077c8:	2a00      	cmp	r2, #0
 80077ca:	dded      	ble.n	80077a8 <_dtoa_r+0xa10>
 80077cc:	4649      	mov	r1, r9
 80077ce:	2201      	movs	r2, #1
 80077d0:	4658      	mov	r0, fp
 80077d2:	f000 fafd 	bl	8007dd0 <__lshift>
 80077d6:	4621      	mov	r1, r4
 80077d8:	4681      	mov	r9, r0
 80077da:	f000 fb65 	bl	8007ea8 <__mcmp>
 80077de:	2800      	cmp	r0, #0
 80077e0:	dc03      	bgt.n	80077ea <_dtoa_r+0xa52>
 80077e2:	d1e1      	bne.n	80077a8 <_dtoa_r+0xa10>
 80077e4:	f018 0f01 	tst.w	r8, #1
 80077e8:	d0de      	beq.n	80077a8 <_dtoa_r+0xa10>
 80077ea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80077ee:	d1d8      	bne.n	80077a2 <_dtoa_r+0xa0a>
 80077f0:	9a00      	ldr	r2, [sp, #0]
 80077f2:	2339      	movs	r3, #57	@ 0x39
 80077f4:	7013      	strb	r3, [r2, #0]
 80077f6:	4633      	mov	r3, r6
 80077f8:	461e      	mov	r6, r3
 80077fa:	3b01      	subs	r3, #1
 80077fc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007800:	2a39      	cmp	r2, #57	@ 0x39
 8007802:	d052      	beq.n	80078aa <_dtoa_r+0xb12>
 8007804:	3201      	adds	r2, #1
 8007806:	701a      	strb	r2, [r3, #0]
 8007808:	e612      	b.n	8007430 <_dtoa_r+0x698>
 800780a:	2a00      	cmp	r2, #0
 800780c:	dd07      	ble.n	800781e <_dtoa_r+0xa86>
 800780e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007812:	d0ed      	beq.n	80077f0 <_dtoa_r+0xa58>
 8007814:	9a00      	ldr	r2, [sp, #0]
 8007816:	f108 0301 	add.w	r3, r8, #1
 800781a:	7013      	strb	r3, [r2, #0]
 800781c:	e608      	b.n	8007430 <_dtoa_r+0x698>
 800781e:	9b07      	ldr	r3, [sp, #28]
 8007820:	9a07      	ldr	r2, [sp, #28]
 8007822:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007826:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007828:	4293      	cmp	r3, r2
 800782a:	d028      	beq.n	800787e <_dtoa_r+0xae6>
 800782c:	4649      	mov	r1, r9
 800782e:	2300      	movs	r3, #0
 8007830:	220a      	movs	r2, #10
 8007832:	4658      	mov	r0, fp
 8007834:	f000 f920 	bl	8007a78 <__multadd>
 8007838:	42af      	cmp	r7, r5
 800783a:	4681      	mov	r9, r0
 800783c:	f04f 0300 	mov.w	r3, #0
 8007840:	f04f 020a 	mov.w	r2, #10
 8007844:	4639      	mov	r1, r7
 8007846:	4658      	mov	r0, fp
 8007848:	d107      	bne.n	800785a <_dtoa_r+0xac2>
 800784a:	f000 f915 	bl	8007a78 <__multadd>
 800784e:	4607      	mov	r7, r0
 8007850:	4605      	mov	r5, r0
 8007852:	9b07      	ldr	r3, [sp, #28]
 8007854:	3301      	adds	r3, #1
 8007856:	9307      	str	r3, [sp, #28]
 8007858:	e774      	b.n	8007744 <_dtoa_r+0x9ac>
 800785a:	f000 f90d 	bl	8007a78 <__multadd>
 800785e:	4629      	mov	r1, r5
 8007860:	4607      	mov	r7, r0
 8007862:	2300      	movs	r3, #0
 8007864:	220a      	movs	r2, #10
 8007866:	4658      	mov	r0, fp
 8007868:	f000 f906 	bl	8007a78 <__multadd>
 800786c:	4605      	mov	r5, r0
 800786e:	e7f0      	b.n	8007852 <_dtoa_r+0xaba>
 8007870:	9b00      	ldr	r3, [sp, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	bfcc      	ite	gt
 8007876:	461e      	movgt	r6, r3
 8007878:	2601      	movle	r6, #1
 800787a:	4456      	add	r6, sl
 800787c:	2700      	movs	r7, #0
 800787e:	4649      	mov	r1, r9
 8007880:	2201      	movs	r2, #1
 8007882:	4658      	mov	r0, fp
 8007884:	f000 faa4 	bl	8007dd0 <__lshift>
 8007888:	4621      	mov	r1, r4
 800788a:	4681      	mov	r9, r0
 800788c:	f000 fb0c 	bl	8007ea8 <__mcmp>
 8007890:	2800      	cmp	r0, #0
 8007892:	dcb0      	bgt.n	80077f6 <_dtoa_r+0xa5e>
 8007894:	d102      	bne.n	800789c <_dtoa_r+0xb04>
 8007896:	f018 0f01 	tst.w	r8, #1
 800789a:	d1ac      	bne.n	80077f6 <_dtoa_r+0xa5e>
 800789c:	4633      	mov	r3, r6
 800789e:	461e      	mov	r6, r3
 80078a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078a4:	2a30      	cmp	r2, #48	@ 0x30
 80078a6:	d0fa      	beq.n	800789e <_dtoa_r+0xb06>
 80078a8:	e5c2      	b.n	8007430 <_dtoa_r+0x698>
 80078aa:	459a      	cmp	sl, r3
 80078ac:	d1a4      	bne.n	80077f8 <_dtoa_r+0xa60>
 80078ae:	9b04      	ldr	r3, [sp, #16]
 80078b0:	3301      	adds	r3, #1
 80078b2:	9304      	str	r3, [sp, #16]
 80078b4:	2331      	movs	r3, #49	@ 0x31
 80078b6:	f88a 3000 	strb.w	r3, [sl]
 80078ba:	e5b9      	b.n	8007430 <_dtoa_r+0x698>
 80078bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80078be:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800791c <_dtoa_r+0xb84>
 80078c2:	b11b      	cbz	r3, 80078cc <_dtoa_r+0xb34>
 80078c4:	f10a 0308 	add.w	r3, sl, #8
 80078c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80078ca:	6013      	str	r3, [r2, #0]
 80078cc:	4650      	mov	r0, sl
 80078ce:	b019      	add	sp, #100	@ 0x64
 80078d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	f77f ae37 	ble.w	800754a <_dtoa_r+0x7b2>
 80078dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078de:	930a      	str	r3, [sp, #40]	@ 0x28
 80078e0:	2001      	movs	r0, #1
 80078e2:	e655      	b.n	8007590 <_dtoa_r+0x7f8>
 80078e4:	9b00      	ldr	r3, [sp, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f77f aed6 	ble.w	8007698 <_dtoa_r+0x900>
 80078ec:	4656      	mov	r6, sl
 80078ee:	4621      	mov	r1, r4
 80078f0:	4648      	mov	r0, r9
 80078f2:	f7ff f9c8 	bl	8006c86 <quorem>
 80078f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80078fa:	f806 8b01 	strb.w	r8, [r6], #1
 80078fe:	9b00      	ldr	r3, [sp, #0]
 8007900:	eba6 020a 	sub.w	r2, r6, sl
 8007904:	4293      	cmp	r3, r2
 8007906:	ddb3      	ble.n	8007870 <_dtoa_r+0xad8>
 8007908:	4649      	mov	r1, r9
 800790a:	2300      	movs	r3, #0
 800790c:	220a      	movs	r2, #10
 800790e:	4658      	mov	r0, fp
 8007910:	f000 f8b2 	bl	8007a78 <__multadd>
 8007914:	4681      	mov	r9, r0
 8007916:	e7ea      	b.n	80078ee <_dtoa_r+0xb56>
 8007918:	08008cc0 	.word	0x08008cc0
 800791c:	08008c44 	.word	0x08008c44

08007920 <_free_r>:
 8007920:	b538      	push	{r3, r4, r5, lr}
 8007922:	4605      	mov	r5, r0
 8007924:	2900      	cmp	r1, #0
 8007926:	d041      	beq.n	80079ac <_free_r+0x8c>
 8007928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800792c:	1f0c      	subs	r4, r1, #4
 800792e:	2b00      	cmp	r3, #0
 8007930:	bfb8      	it	lt
 8007932:	18e4      	addlt	r4, r4, r3
 8007934:	f7fe fb16 	bl	8005f64 <__malloc_lock>
 8007938:	4a1d      	ldr	r2, [pc, #116]	@ (80079b0 <_free_r+0x90>)
 800793a:	6813      	ldr	r3, [r2, #0]
 800793c:	b933      	cbnz	r3, 800794c <_free_r+0x2c>
 800793e:	6063      	str	r3, [r4, #4]
 8007940:	6014      	str	r4, [r2, #0]
 8007942:	4628      	mov	r0, r5
 8007944:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007948:	f7fe bb12 	b.w	8005f70 <__malloc_unlock>
 800794c:	42a3      	cmp	r3, r4
 800794e:	d908      	bls.n	8007962 <_free_r+0x42>
 8007950:	6820      	ldr	r0, [r4, #0]
 8007952:	1821      	adds	r1, r4, r0
 8007954:	428b      	cmp	r3, r1
 8007956:	bf01      	itttt	eq
 8007958:	6819      	ldreq	r1, [r3, #0]
 800795a:	685b      	ldreq	r3, [r3, #4]
 800795c:	1809      	addeq	r1, r1, r0
 800795e:	6021      	streq	r1, [r4, #0]
 8007960:	e7ed      	b.n	800793e <_free_r+0x1e>
 8007962:	461a      	mov	r2, r3
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	b10b      	cbz	r3, 800796c <_free_r+0x4c>
 8007968:	42a3      	cmp	r3, r4
 800796a:	d9fa      	bls.n	8007962 <_free_r+0x42>
 800796c:	6811      	ldr	r1, [r2, #0]
 800796e:	1850      	adds	r0, r2, r1
 8007970:	42a0      	cmp	r0, r4
 8007972:	d10b      	bne.n	800798c <_free_r+0x6c>
 8007974:	6820      	ldr	r0, [r4, #0]
 8007976:	4401      	add	r1, r0
 8007978:	1850      	adds	r0, r2, r1
 800797a:	4283      	cmp	r3, r0
 800797c:	6011      	str	r1, [r2, #0]
 800797e:	d1e0      	bne.n	8007942 <_free_r+0x22>
 8007980:	6818      	ldr	r0, [r3, #0]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	6053      	str	r3, [r2, #4]
 8007986:	4408      	add	r0, r1
 8007988:	6010      	str	r0, [r2, #0]
 800798a:	e7da      	b.n	8007942 <_free_r+0x22>
 800798c:	d902      	bls.n	8007994 <_free_r+0x74>
 800798e:	230c      	movs	r3, #12
 8007990:	602b      	str	r3, [r5, #0]
 8007992:	e7d6      	b.n	8007942 <_free_r+0x22>
 8007994:	6820      	ldr	r0, [r4, #0]
 8007996:	1821      	adds	r1, r4, r0
 8007998:	428b      	cmp	r3, r1
 800799a:	bf04      	itt	eq
 800799c:	6819      	ldreq	r1, [r3, #0]
 800799e:	685b      	ldreq	r3, [r3, #4]
 80079a0:	6063      	str	r3, [r4, #4]
 80079a2:	bf04      	itt	eq
 80079a4:	1809      	addeq	r1, r1, r0
 80079a6:	6021      	streq	r1, [r4, #0]
 80079a8:	6054      	str	r4, [r2, #4]
 80079aa:	e7ca      	b.n	8007942 <_free_r+0x22>
 80079ac:	bd38      	pop	{r3, r4, r5, pc}
 80079ae:	bf00      	nop
 80079b0:	200003a0 	.word	0x200003a0

080079b4 <_Balloc>:
 80079b4:	b570      	push	{r4, r5, r6, lr}
 80079b6:	69c6      	ldr	r6, [r0, #28]
 80079b8:	4604      	mov	r4, r0
 80079ba:	460d      	mov	r5, r1
 80079bc:	b976      	cbnz	r6, 80079dc <_Balloc+0x28>
 80079be:	2010      	movs	r0, #16
 80079c0:	f7fe fa1e 	bl	8005e00 <malloc>
 80079c4:	4602      	mov	r2, r0
 80079c6:	61e0      	str	r0, [r4, #28]
 80079c8:	b920      	cbnz	r0, 80079d4 <_Balloc+0x20>
 80079ca:	4b18      	ldr	r3, [pc, #96]	@ (8007a2c <_Balloc+0x78>)
 80079cc:	4818      	ldr	r0, [pc, #96]	@ (8007a30 <_Balloc+0x7c>)
 80079ce:	216b      	movs	r1, #107	@ 0x6b
 80079d0:	f000 fd9e 	bl	8008510 <__assert_func>
 80079d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079d8:	6006      	str	r6, [r0, #0]
 80079da:	60c6      	str	r6, [r0, #12]
 80079dc:	69e6      	ldr	r6, [r4, #28]
 80079de:	68f3      	ldr	r3, [r6, #12]
 80079e0:	b183      	cbz	r3, 8007a04 <_Balloc+0x50>
 80079e2:	69e3      	ldr	r3, [r4, #28]
 80079e4:	68db      	ldr	r3, [r3, #12]
 80079e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80079ea:	b9b8      	cbnz	r0, 8007a1c <_Balloc+0x68>
 80079ec:	2101      	movs	r1, #1
 80079ee:	fa01 f605 	lsl.w	r6, r1, r5
 80079f2:	1d72      	adds	r2, r6, #5
 80079f4:	0092      	lsls	r2, r2, #2
 80079f6:	4620      	mov	r0, r4
 80079f8:	f000 fda8 	bl	800854c <_calloc_r>
 80079fc:	b160      	cbz	r0, 8007a18 <_Balloc+0x64>
 80079fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a02:	e00e      	b.n	8007a22 <_Balloc+0x6e>
 8007a04:	2221      	movs	r2, #33	@ 0x21
 8007a06:	2104      	movs	r1, #4
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f000 fd9f 	bl	800854c <_calloc_r>
 8007a0e:	69e3      	ldr	r3, [r4, #28]
 8007a10:	60f0      	str	r0, [r6, #12]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1e4      	bne.n	80079e2 <_Balloc+0x2e>
 8007a18:	2000      	movs	r0, #0
 8007a1a:	bd70      	pop	{r4, r5, r6, pc}
 8007a1c:	6802      	ldr	r2, [r0, #0]
 8007a1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a22:	2300      	movs	r3, #0
 8007a24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a28:	e7f7      	b.n	8007a1a <_Balloc+0x66>
 8007a2a:	bf00      	nop
 8007a2c:	08008c51 	.word	0x08008c51
 8007a30:	08008cd1 	.word	0x08008cd1

08007a34 <_Bfree>:
 8007a34:	b570      	push	{r4, r5, r6, lr}
 8007a36:	69c6      	ldr	r6, [r0, #28]
 8007a38:	4605      	mov	r5, r0
 8007a3a:	460c      	mov	r4, r1
 8007a3c:	b976      	cbnz	r6, 8007a5c <_Bfree+0x28>
 8007a3e:	2010      	movs	r0, #16
 8007a40:	f7fe f9de 	bl	8005e00 <malloc>
 8007a44:	4602      	mov	r2, r0
 8007a46:	61e8      	str	r0, [r5, #28]
 8007a48:	b920      	cbnz	r0, 8007a54 <_Bfree+0x20>
 8007a4a:	4b09      	ldr	r3, [pc, #36]	@ (8007a70 <_Bfree+0x3c>)
 8007a4c:	4809      	ldr	r0, [pc, #36]	@ (8007a74 <_Bfree+0x40>)
 8007a4e:	218f      	movs	r1, #143	@ 0x8f
 8007a50:	f000 fd5e 	bl	8008510 <__assert_func>
 8007a54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a58:	6006      	str	r6, [r0, #0]
 8007a5a:	60c6      	str	r6, [r0, #12]
 8007a5c:	b13c      	cbz	r4, 8007a6e <_Bfree+0x3a>
 8007a5e:	69eb      	ldr	r3, [r5, #28]
 8007a60:	6862      	ldr	r2, [r4, #4]
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a68:	6021      	str	r1, [r4, #0]
 8007a6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a6e:	bd70      	pop	{r4, r5, r6, pc}
 8007a70:	08008c51 	.word	0x08008c51
 8007a74:	08008cd1 	.word	0x08008cd1

08007a78 <__multadd>:
 8007a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a7c:	690d      	ldr	r5, [r1, #16]
 8007a7e:	4607      	mov	r7, r0
 8007a80:	460c      	mov	r4, r1
 8007a82:	461e      	mov	r6, r3
 8007a84:	f101 0c14 	add.w	ip, r1, #20
 8007a88:	2000      	movs	r0, #0
 8007a8a:	f8dc 3000 	ldr.w	r3, [ip]
 8007a8e:	b299      	uxth	r1, r3
 8007a90:	fb02 6101 	mla	r1, r2, r1, r6
 8007a94:	0c1e      	lsrs	r6, r3, #16
 8007a96:	0c0b      	lsrs	r3, r1, #16
 8007a98:	fb02 3306 	mla	r3, r2, r6, r3
 8007a9c:	b289      	uxth	r1, r1
 8007a9e:	3001      	adds	r0, #1
 8007aa0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007aa4:	4285      	cmp	r5, r0
 8007aa6:	f84c 1b04 	str.w	r1, [ip], #4
 8007aaa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007aae:	dcec      	bgt.n	8007a8a <__multadd+0x12>
 8007ab0:	b30e      	cbz	r6, 8007af6 <__multadd+0x7e>
 8007ab2:	68a3      	ldr	r3, [r4, #8]
 8007ab4:	42ab      	cmp	r3, r5
 8007ab6:	dc19      	bgt.n	8007aec <__multadd+0x74>
 8007ab8:	6861      	ldr	r1, [r4, #4]
 8007aba:	4638      	mov	r0, r7
 8007abc:	3101      	adds	r1, #1
 8007abe:	f7ff ff79 	bl	80079b4 <_Balloc>
 8007ac2:	4680      	mov	r8, r0
 8007ac4:	b928      	cbnz	r0, 8007ad2 <__multadd+0x5a>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8007afc <__multadd+0x84>)
 8007aca:	480d      	ldr	r0, [pc, #52]	@ (8007b00 <__multadd+0x88>)
 8007acc:	21ba      	movs	r1, #186	@ 0xba
 8007ace:	f000 fd1f 	bl	8008510 <__assert_func>
 8007ad2:	6922      	ldr	r2, [r4, #16]
 8007ad4:	3202      	adds	r2, #2
 8007ad6:	f104 010c 	add.w	r1, r4, #12
 8007ada:	0092      	lsls	r2, r2, #2
 8007adc:	300c      	adds	r0, #12
 8007ade:	f000 fd09 	bl	80084f4 <memcpy>
 8007ae2:	4621      	mov	r1, r4
 8007ae4:	4638      	mov	r0, r7
 8007ae6:	f7ff ffa5 	bl	8007a34 <_Bfree>
 8007aea:	4644      	mov	r4, r8
 8007aec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007af0:	3501      	adds	r5, #1
 8007af2:	615e      	str	r6, [r3, #20]
 8007af4:	6125      	str	r5, [r4, #16]
 8007af6:	4620      	mov	r0, r4
 8007af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007afc:	08008cc0 	.word	0x08008cc0
 8007b00:	08008cd1 	.word	0x08008cd1

08007b04 <__hi0bits>:
 8007b04:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007b08:	4603      	mov	r3, r0
 8007b0a:	bf36      	itet	cc
 8007b0c:	0403      	lslcc	r3, r0, #16
 8007b0e:	2000      	movcs	r0, #0
 8007b10:	2010      	movcc	r0, #16
 8007b12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b16:	bf3c      	itt	cc
 8007b18:	021b      	lslcc	r3, r3, #8
 8007b1a:	3008      	addcc	r0, #8
 8007b1c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b20:	bf3c      	itt	cc
 8007b22:	011b      	lslcc	r3, r3, #4
 8007b24:	3004      	addcc	r0, #4
 8007b26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b2a:	bf3c      	itt	cc
 8007b2c:	009b      	lslcc	r3, r3, #2
 8007b2e:	3002      	addcc	r0, #2
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	db05      	blt.n	8007b40 <__hi0bits+0x3c>
 8007b34:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007b38:	f100 0001 	add.w	r0, r0, #1
 8007b3c:	bf08      	it	eq
 8007b3e:	2020      	moveq	r0, #32
 8007b40:	4770      	bx	lr

08007b42 <__lo0bits>:
 8007b42:	6803      	ldr	r3, [r0, #0]
 8007b44:	4602      	mov	r2, r0
 8007b46:	f013 0007 	ands.w	r0, r3, #7
 8007b4a:	d00b      	beq.n	8007b64 <__lo0bits+0x22>
 8007b4c:	07d9      	lsls	r1, r3, #31
 8007b4e:	d421      	bmi.n	8007b94 <__lo0bits+0x52>
 8007b50:	0798      	lsls	r0, r3, #30
 8007b52:	bf49      	itett	mi
 8007b54:	085b      	lsrmi	r3, r3, #1
 8007b56:	089b      	lsrpl	r3, r3, #2
 8007b58:	2001      	movmi	r0, #1
 8007b5a:	6013      	strmi	r3, [r2, #0]
 8007b5c:	bf5c      	itt	pl
 8007b5e:	6013      	strpl	r3, [r2, #0]
 8007b60:	2002      	movpl	r0, #2
 8007b62:	4770      	bx	lr
 8007b64:	b299      	uxth	r1, r3
 8007b66:	b909      	cbnz	r1, 8007b6c <__lo0bits+0x2a>
 8007b68:	0c1b      	lsrs	r3, r3, #16
 8007b6a:	2010      	movs	r0, #16
 8007b6c:	b2d9      	uxtb	r1, r3
 8007b6e:	b909      	cbnz	r1, 8007b74 <__lo0bits+0x32>
 8007b70:	3008      	adds	r0, #8
 8007b72:	0a1b      	lsrs	r3, r3, #8
 8007b74:	0719      	lsls	r1, r3, #28
 8007b76:	bf04      	itt	eq
 8007b78:	091b      	lsreq	r3, r3, #4
 8007b7a:	3004      	addeq	r0, #4
 8007b7c:	0799      	lsls	r1, r3, #30
 8007b7e:	bf04      	itt	eq
 8007b80:	089b      	lsreq	r3, r3, #2
 8007b82:	3002      	addeq	r0, #2
 8007b84:	07d9      	lsls	r1, r3, #31
 8007b86:	d403      	bmi.n	8007b90 <__lo0bits+0x4e>
 8007b88:	085b      	lsrs	r3, r3, #1
 8007b8a:	f100 0001 	add.w	r0, r0, #1
 8007b8e:	d003      	beq.n	8007b98 <__lo0bits+0x56>
 8007b90:	6013      	str	r3, [r2, #0]
 8007b92:	4770      	bx	lr
 8007b94:	2000      	movs	r0, #0
 8007b96:	4770      	bx	lr
 8007b98:	2020      	movs	r0, #32
 8007b9a:	4770      	bx	lr

08007b9c <__i2b>:
 8007b9c:	b510      	push	{r4, lr}
 8007b9e:	460c      	mov	r4, r1
 8007ba0:	2101      	movs	r1, #1
 8007ba2:	f7ff ff07 	bl	80079b4 <_Balloc>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	b928      	cbnz	r0, 8007bb6 <__i2b+0x1a>
 8007baa:	4b05      	ldr	r3, [pc, #20]	@ (8007bc0 <__i2b+0x24>)
 8007bac:	4805      	ldr	r0, [pc, #20]	@ (8007bc4 <__i2b+0x28>)
 8007bae:	f240 1145 	movw	r1, #325	@ 0x145
 8007bb2:	f000 fcad 	bl	8008510 <__assert_func>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	6144      	str	r4, [r0, #20]
 8007bba:	6103      	str	r3, [r0, #16]
 8007bbc:	bd10      	pop	{r4, pc}
 8007bbe:	bf00      	nop
 8007bc0:	08008cc0 	.word	0x08008cc0
 8007bc4:	08008cd1 	.word	0x08008cd1

08007bc8 <__multiply>:
 8007bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bcc:	4614      	mov	r4, r2
 8007bce:	690a      	ldr	r2, [r1, #16]
 8007bd0:	6923      	ldr	r3, [r4, #16]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	bfa8      	it	ge
 8007bd6:	4623      	movge	r3, r4
 8007bd8:	460f      	mov	r7, r1
 8007bda:	bfa4      	itt	ge
 8007bdc:	460c      	movge	r4, r1
 8007bde:	461f      	movge	r7, r3
 8007be0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007be4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007be8:	68a3      	ldr	r3, [r4, #8]
 8007bea:	6861      	ldr	r1, [r4, #4]
 8007bec:	eb0a 0609 	add.w	r6, sl, r9
 8007bf0:	42b3      	cmp	r3, r6
 8007bf2:	b085      	sub	sp, #20
 8007bf4:	bfb8      	it	lt
 8007bf6:	3101      	addlt	r1, #1
 8007bf8:	f7ff fedc 	bl	80079b4 <_Balloc>
 8007bfc:	b930      	cbnz	r0, 8007c0c <__multiply+0x44>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	4b44      	ldr	r3, [pc, #272]	@ (8007d14 <__multiply+0x14c>)
 8007c02:	4845      	ldr	r0, [pc, #276]	@ (8007d18 <__multiply+0x150>)
 8007c04:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007c08:	f000 fc82 	bl	8008510 <__assert_func>
 8007c0c:	f100 0514 	add.w	r5, r0, #20
 8007c10:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007c14:	462b      	mov	r3, r5
 8007c16:	2200      	movs	r2, #0
 8007c18:	4543      	cmp	r3, r8
 8007c1a:	d321      	bcc.n	8007c60 <__multiply+0x98>
 8007c1c:	f107 0114 	add.w	r1, r7, #20
 8007c20:	f104 0214 	add.w	r2, r4, #20
 8007c24:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007c28:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007c2c:	9302      	str	r3, [sp, #8]
 8007c2e:	1b13      	subs	r3, r2, r4
 8007c30:	3b15      	subs	r3, #21
 8007c32:	f023 0303 	bic.w	r3, r3, #3
 8007c36:	3304      	adds	r3, #4
 8007c38:	f104 0715 	add.w	r7, r4, #21
 8007c3c:	42ba      	cmp	r2, r7
 8007c3e:	bf38      	it	cc
 8007c40:	2304      	movcc	r3, #4
 8007c42:	9301      	str	r3, [sp, #4]
 8007c44:	9b02      	ldr	r3, [sp, #8]
 8007c46:	9103      	str	r1, [sp, #12]
 8007c48:	428b      	cmp	r3, r1
 8007c4a:	d80c      	bhi.n	8007c66 <__multiply+0x9e>
 8007c4c:	2e00      	cmp	r6, #0
 8007c4e:	dd03      	ble.n	8007c58 <__multiply+0x90>
 8007c50:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d05b      	beq.n	8007d10 <__multiply+0x148>
 8007c58:	6106      	str	r6, [r0, #16]
 8007c5a:	b005      	add	sp, #20
 8007c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c60:	f843 2b04 	str.w	r2, [r3], #4
 8007c64:	e7d8      	b.n	8007c18 <__multiply+0x50>
 8007c66:	f8b1 a000 	ldrh.w	sl, [r1]
 8007c6a:	f1ba 0f00 	cmp.w	sl, #0
 8007c6e:	d024      	beq.n	8007cba <__multiply+0xf2>
 8007c70:	f104 0e14 	add.w	lr, r4, #20
 8007c74:	46a9      	mov	r9, r5
 8007c76:	f04f 0c00 	mov.w	ip, #0
 8007c7a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007c7e:	f8d9 3000 	ldr.w	r3, [r9]
 8007c82:	fa1f fb87 	uxth.w	fp, r7
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	fb0a 330b 	mla	r3, sl, fp, r3
 8007c8c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007c90:	f8d9 7000 	ldr.w	r7, [r9]
 8007c94:	4463      	add	r3, ip
 8007c96:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007c9a:	fb0a c70b 	mla	r7, sl, fp, ip
 8007c9e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007ca8:	4572      	cmp	r2, lr
 8007caa:	f849 3b04 	str.w	r3, [r9], #4
 8007cae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007cb2:	d8e2      	bhi.n	8007c7a <__multiply+0xb2>
 8007cb4:	9b01      	ldr	r3, [sp, #4]
 8007cb6:	f845 c003 	str.w	ip, [r5, r3]
 8007cba:	9b03      	ldr	r3, [sp, #12]
 8007cbc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007cc0:	3104      	adds	r1, #4
 8007cc2:	f1b9 0f00 	cmp.w	r9, #0
 8007cc6:	d021      	beq.n	8007d0c <__multiply+0x144>
 8007cc8:	682b      	ldr	r3, [r5, #0]
 8007cca:	f104 0c14 	add.w	ip, r4, #20
 8007cce:	46ae      	mov	lr, r5
 8007cd0:	f04f 0a00 	mov.w	sl, #0
 8007cd4:	f8bc b000 	ldrh.w	fp, [ip]
 8007cd8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007cdc:	fb09 770b 	mla	r7, r9, fp, r7
 8007ce0:	4457      	add	r7, sl
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007ce8:	f84e 3b04 	str.w	r3, [lr], #4
 8007cec:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007cf0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007cf4:	f8be 3000 	ldrh.w	r3, [lr]
 8007cf8:	fb09 330a 	mla	r3, r9, sl, r3
 8007cfc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007d00:	4562      	cmp	r2, ip
 8007d02:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d06:	d8e5      	bhi.n	8007cd4 <__multiply+0x10c>
 8007d08:	9f01      	ldr	r7, [sp, #4]
 8007d0a:	51eb      	str	r3, [r5, r7]
 8007d0c:	3504      	adds	r5, #4
 8007d0e:	e799      	b.n	8007c44 <__multiply+0x7c>
 8007d10:	3e01      	subs	r6, #1
 8007d12:	e79b      	b.n	8007c4c <__multiply+0x84>
 8007d14:	08008cc0 	.word	0x08008cc0
 8007d18:	08008cd1 	.word	0x08008cd1

08007d1c <__pow5mult>:
 8007d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d20:	4615      	mov	r5, r2
 8007d22:	f012 0203 	ands.w	r2, r2, #3
 8007d26:	4607      	mov	r7, r0
 8007d28:	460e      	mov	r6, r1
 8007d2a:	d007      	beq.n	8007d3c <__pow5mult+0x20>
 8007d2c:	4c25      	ldr	r4, [pc, #148]	@ (8007dc4 <__pow5mult+0xa8>)
 8007d2e:	3a01      	subs	r2, #1
 8007d30:	2300      	movs	r3, #0
 8007d32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d36:	f7ff fe9f 	bl	8007a78 <__multadd>
 8007d3a:	4606      	mov	r6, r0
 8007d3c:	10ad      	asrs	r5, r5, #2
 8007d3e:	d03d      	beq.n	8007dbc <__pow5mult+0xa0>
 8007d40:	69fc      	ldr	r4, [r7, #28]
 8007d42:	b97c      	cbnz	r4, 8007d64 <__pow5mult+0x48>
 8007d44:	2010      	movs	r0, #16
 8007d46:	f7fe f85b 	bl	8005e00 <malloc>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	61f8      	str	r0, [r7, #28]
 8007d4e:	b928      	cbnz	r0, 8007d5c <__pow5mult+0x40>
 8007d50:	4b1d      	ldr	r3, [pc, #116]	@ (8007dc8 <__pow5mult+0xac>)
 8007d52:	481e      	ldr	r0, [pc, #120]	@ (8007dcc <__pow5mult+0xb0>)
 8007d54:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007d58:	f000 fbda 	bl	8008510 <__assert_func>
 8007d5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d60:	6004      	str	r4, [r0, #0]
 8007d62:	60c4      	str	r4, [r0, #12]
 8007d64:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007d68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d6c:	b94c      	cbnz	r4, 8007d82 <__pow5mult+0x66>
 8007d6e:	f240 2171 	movw	r1, #625	@ 0x271
 8007d72:	4638      	mov	r0, r7
 8007d74:	f7ff ff12 	bl	8007b9c <__i2b>
 8007d78:	2300      	movs	r3, #0
 8007d7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d7e:	4604      	mov	r4, r0
 8007d80:	6003      	str	r3, [r0, #0]
 8007d82:	f04f 0900 	mov.w	r9, #0
 8007d86:	07eb      	lsls	r3, r5, #31
 8007d88:	d50a      	bpl.n	8007da0 <__pow5mult+0x84>
 8007d8a:	4631      	mov	r1, r6
 8007d8c:	4622      	mov	r2, r4
 8007d8e:	4638      	mov	r0, r7
 8007d90:	f7ff ff1a 	bl	8007bc8 <__multiply>
 8007d94:	4631      	mov	r1, r6
 8007d96:	4680      	mov	r8, r0
 8007d98:	4638      	mov	r0, r7
 8007d9a:	f7ff fe4b 	bl	8007a34 <_Bfree>
 8007d9e:	4646      	mov	r6, r8
 8007da0:	106d      	asrs	r5, r5, #1
 8007da2:	d00b      	beq.n	8007dbc <__pow5mult+0xa0>
 8007da4:	6820      	ldr	r0, [r4, #0]
 8007da6:	b938      	cbnz	r0, 8007db8 <__pow5mult+0x9c>
 8007da8:	4622      	mov	r2, r4
 8007daa:	4621      	mov	r1, r4
 8007dac:	4638      	mov	r0, r7
 8007dae:	f7ff ff0b 	bl	8007bc8 <__multiply>
 8007db2:	6020      	str	r0, [r4, #0]
 8007db4:	f8c0 9000 	str.w	r9, [r0]
 8007db8:	4604      	mov	r4, r0
 8007dba:	e7e4      	b.n	8007d86 <__pow5mult+0x6a>
 8007dbc:	4630      	mov	r0, r6
 8007dbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dc2:	bf00      	nop
 8007dc4:	08008d2c 	.word	0x08008d2c
 8007dc8:	08008c51 	.word	0x08008c51
 8007dcc:	08008cd1 	.word	0x08008cd1

08007dd0 <__lshift>:
 8007dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dd4:	460c      	mov	r4, r1
 8007dd6:	6849      	ldr	r1, [r1, #4]
 8007dd8:	6923      	ldr	r3, [r4, #16]
 8007dda:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007dde:	68a3      	ldr	r3, [r4, #8]
 8007de0:	4607      	mov	r7, r0
 8007de2:	4691      	mov	r9, r2
 8007de4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007de8:	f108 0601 	add.w	r6, r8, #1
 8007dec:	42b3      	cmp	r3, r6
 8007dee:	db0b      	blt.n	8007e08 <__lshift+0x38>
 8007df0:	4638      	mov	r0, r7
 8007df2:	f7ff fddf 	bl	80079b4 <_Balloc>
 8007df6:	4605      	mov	r5, r0
 8007df8:	b948      	cbnz	r0, 8007e0e <__lshift+0x3e>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	4b28      	ldr	r3, [pc, #160]	@ (8007ea0 <__lshift+0xd0>)
 8007dfe:	4829      	ldr	r0, [pc, #164]	@ (8007ea4 <__lshift+0xd4>)
 8007e00:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007e04:	f000 fb84 	bl	8008510 <__assert_func>
 8007e08:	3101      	adds	r1, #1
 8007e0a:	005b      	lsls	r3, r3, #1
 8007e0c:	e7ee      	b.n	8007dec <__lshift+0x1c>
 8007e0e:	2300      	movs	r3, #0
 8007e10:	f100 0114 	add.w	r1, r0, #20
 8007e14:	f100 0210 	add.w	r2, r0, #16
 8007e18:	4618      	mov	r0, r3
 8007e1a:	4553      	cmp	r3, sl
 8007e1c:	db33      	blt.n	8007e86 <__lshift+0xb6>
 8007e1e:	6920      	ldr	r0, [r4, #16]
 8007e20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e24:	f104 0314 	add.w	r3, r4, #20
 8007e28:	f019 091f 	ands.w	r9, r9, #31
 8007e2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e34:	d02b      	beq.n	8007e8e <__lshift+0xbe>
 8007e36:	f1c9 0e20 	rsb	lr, r9, #32
 8007e3a:	468a      	mov	sl, r1
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	6818      	ldr	r0, [r3, #0]
 8007e40:	fa00 f009 	lsl.w	r0, r0, r9
 8007e44:	4310      	orrs	r0, r2
 8007e46:	f84a 0b04 	str.w	r0, [sl], #4
 8007e4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e4e:	459c      	cmp	ip, r3
 8007e50:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e54:	d8f3      	bhi.n	8007e3e <__lshift+0x6e>
 8007e56:	ebac 0304 	sub.w	r3, ip, r4
 8007e5a:	3b15      	subs	r3, #21
 8007e5c:	f023 0303 	bic.w	r3, r3, #3
 8007e60:	3304      	adds	r3, #4
 8007e62:	f104 0015 	add.w	r0, r4, #21
 8007e66:	4584      	cmp	ip, r0
 8007e68:	bf38      	it	cc
 8007e6a:	2304      	movcc	r3, #4
 8007e6c:	50ca      	str	r2, [r1, r3]
 8007e6e:	b10a      	cbz	r2, 8007e74 <__lshift+0xa4>
 8007e70:	f108 0602 	add.w	r6, r8, #2
 8007e74:	3e01      	subs	r6, #1
 8007e76:	4638      	mov	r0, r7
 8007e78:	612e      	str	r6, [r5, #16]
 8007e7a:	4621      	mov	r1, r4
 8007e7c:	f7ff fdda 	bl	8007a34 <_Bfree>
 8007e80:	4628      	mov	r0, r5
 8007e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e86:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	e7c5      	b.n	8007e1a <__lshift+0x4a>
 8007e8e:	3904      	subs	r1, #4
 8007e90:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e94:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e98:	459c      	cmp	ip, r3
 8007e9a:	d8f9      	bhi.n	8007e90 <__lshift+0xc0>
 8007e9c:	e7ea      	b.n	8007e74 <__lshift+0xa4>
 8007e9e:	bf00      	nop
 8007ea0:	08008cc0 	.word	0x08008cc0
 8007ea4:	08008cd1 	.word	0x08008cd1

08007ea8 <__mcmp>:
 8007ea8:	690a      	ldr	r2, [r1, #16]
 8007eaa:	4603      	mov	r3, r0
 8007eac:	6900      	ldr	r0, [r0, #16]
 8007eae:	1a80      	subs	r0, r0, r2
 8007eb0:	b530      	push	{r4, r5, lr}
 8007eb2:	d10e      	bne.n	8007ed2 <__mcmp+0x2a>
 8007eb4:	3314      	adds	r3, #20
 8007eb6:	3114      	adds	r1, #20
 8007eb8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007ebc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007ec0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007ec4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007ec8:	4295      	cmp	r5, r2
 8007eca:	d003      	beq.n	8007ed4 <__mcmp+0x2c>
 8007ecc:	d205      	bcs.n	8007eda <__mcmp+0x32>
 8007ece:	f04f 30ff 	mov.w	r0, #4294967295
 8007ed2:	bd30      	pop	{r4, r5, pc}
 8007ed4:	42a3      	cmp	r3, r4
 8007ed6:	d3f3      	bcc.n	8007ec0 <__mcmp+0x18>
 8007ed8:	e7fb      	b.n	8007ed2 <__mcmp+0x2a>
 8007eda:	2001      	movs	r0, #1
 8007edc:	e7f9      	b.n	8007ed2 <__mcmp+0x2a>
	...

08007ee0 <__mdiff>:
 8007ee0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee4:	4689      	mov	r9, r1
 8007ee6:	4606      	mov	r6, r0
 8007ee8:	4611      	mov	r1, r2
 8007eea:	4648      	mov	r0, r9
 8007eec:	4614      	mov	r4, r2
 8007eee:	f7ff ffdb 	bl	8007ea8 <__mcmp>
 8007ef2:	1e05      	subs	r5, r0, #0
 8007ef4:	d112      	bne.n	8007f1c <__mdiff+0x3c>
 8007ef6:	4629      	mov	r1, r5
 8007ef8:	4630      	mov	r0, r6
 8007efa:	f7ff fd5b 	bl	80079b4 <_Balloc>
 8007efe:	4602      	mov	r2, r0
 8007f00:	b928      	cbnz	r0, 8007f0e <__mdiff+0x2e>
 8007f02:	4b3f      	ldr	r3, [pc, #252]	@ (8008000 <__mdiff+0x120>)
 8007f04:	f240 2137 	movw	r1, #567	@ 0x237
 8007f08:	483e      	ldr	r0, [pc, #248]	@ (8008004 <__mdiff+0x124>)
 8007f0a:	f000 fb01 	bl	8008510 <__assert_func>
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f14:	4610      	mov	r0, r2
 8007f16:	b003      	add	sp, #12
 8007f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f1c:	bfbc      	itt	lt
 8007f1e:	464b      	movlt	r3, r9
 8007f20:	46a1      	movlt	r9, r4
 8007f22:	4630      	mov	r0, r6
 8007f24:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007f28:	bfba      	itte	lt
 8007f2a:	461c      	movlt	r4, r3
 8007f2c:	2501      	movlt	r5, #1
 8007f2e:	2500      	movge	r5, #0
 8007f30:	f7ff fd40 	bl	80079b4 <_Balloc>
 8007f34:	4602      	mov	r2, r0
 8007f36:	b918      	cbnz	r0, 8007f40 <__mdiff+0x60>
 8007f38:	4b31      	ldr	r3, [pc, #196]	@ (8008000 <__mdiff+0x120>)
 8007f3a:	f240 2145 	movw	r1, #581	@ 0x245
 8007f3e:	e7e3      	b.n	8007f08 <__mdiff+0x28>
 8007f40:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007f44:	6926      	ldr	r6, [r4, #16]
 8007f46:	60c5      	str	r5, [r0, #12]
 8007f48:	f109 0310 	add.w	r3, r9, #16
 8007f4c:	f109 0514 	add.w	r5, r9, #20
 8007f50:	f104 0e14 	add.w	lr, r4, #20
 8007f54:	f100 0b14 	add.w	fp, r0, #20
 8007f58:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007f5c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007f60:	9301      	str	r3, [sp, #4]
 8007f62:	46d9      	mov	r9, fp
 8007f64:	f04f 0c00 	mov.w	ip, #0
 8007f68:	9b01      	ldr	r3, [sp, #4]
 8007f6a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007f6e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007f72:	9301      	str	r3, [sp, #4]
 8007f74:	fa1f f38a 	uxth.w	r3, sl
 8007f78:	4619      	mov	r1, r3
 8007f7a:	b283      	uxth	r3, r0
 8007f7c:	1acb      	subs	r3, r1, r3
 8007f7e:	0c00      	lsrs	r0, r0, #16
 8007f80:	4463      	add	r3, ip
 8007f82:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007f86:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007f90:	4576      	cmp	r6, lr
 8007f92:	f849 3b04 	str.w	r3, [r9], #4
 8007f96:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007f9a:	d8e5      	bhi.n	8007f68 <__mdiff+0x88>
 8007f9c:	1b33      	subs	r3, r6, r4
 8007f9e:	3b15      	subs	r3, #21
 8007fa0:	f023 0303 	bic.w	r3, r3, #3
 8007fa4:	3415      	adds	r4, #21
 8007fa6:	3304      	adds	r3, #4
 8007fa8:	42a6      	cmp	r6, r4
 8007faa:	bf38      	it	cc
 8007fac:	2304      	movcc	r3, #4
 8007fae:	441d      	add	r5, r3
 8007fb0:	445b      	add	r3, fp
 8007fb2:	461e      	mov	r6, r3
 8007fb4:	462c      	mov	r4, r5
 8007fb6:	4544      	cmp	r4, r8
 8007fb8:	d30e      	bcc.n	8007fd8 <__mdiff+0xf8>
 8007fba:	f108 0103 	add.w	r1, r8, #3
 8007fbe:	1b49      	subs	r1, r1, r5
 8007fc0:	f021 0103 	bic.w	r1, r1, #3
 8007fc4:	3d03      	subs	r5, #3
 8007fc6:	45a8      	cmp	r8, r5
 8007fc8:	bf38      	it	cc
 8007fca:	2100      	movcc	r1, #0
 8007fcc:	440b      	add	r3, r1
 8007fce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007fd2:	b191      	cbz	r1, 8007ffa <__mdiff+0x11a>
 8007fd4:	6117      	str	r7, [r2, #16]
 8007fd6:	e79d      	b.n	8007f14 <__mdiff+0x34>
 8007fd8:	f854 1b04 	ldr.w	r1, [r4], #4
 8007fdc:	46e6      	mov	lr, ip
 8007fde:	0c08      	lsrs	r0, r1, #16
 8007fe0:	fa1c fc81 	uxtah	ip, ip, r1
 8007fe4:	4471      	add	r1, lr
 8007fe6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007fea:	b289      	uxth	r1, r1
 8007fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007ff0:	f846 1b04 	str.w	r1, [r6], #4
 8007ff4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ff8:	e7dd      	b.n	8007fb6 <__mdiff+0xd6>
 8007ffa:	3f01      	subs	r7, #1
 8007ffc:	e7e7      	b.n	8007fce <__mdiff+0xee>
 8007ffe:	bf00      	nop
 8008000:	08008cc0 	.word	0x08008cc0
 8008004:	08008cd1 	.word	0x08008cd1

08008008 <__d2b>:
 8008008:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800800c:	460f      	mov	r7, r1
 800800e:	2101      	movs	r1, #1
 8008010:	ec59 8b10 	vmov	r8, r9, d0
 8008014:	4616      	mov	r6, r2
 8008016:	f7ff fccd 	bl	80079b4 <_Balloc>
 800801a:	4604      	mov	r4, r0
 800801c:	b930      	cbnz	r0, 800802c <__d2b+0x24>
 800801e:	4602      	mov	r2, r0
 8008020:	4b23      	ldr	r3, [pc, #140]	@ (80080b0 <__d2b+0xa8>)
 8008022:	4824      	ldr	r0, [pc, #144]	@ (80080b4 <__d2b+0xac>)
 8008024:	f240 310f 	movw	r1, #783	@ 0x30f
 8008028:	f000 fa72 	bl	8008510 <__assert_func>
 800802c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008030:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008034:	b10d      	cbz	r5, 800803a <__d2b+0x32>
 8008036:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800803a:	9301      	str	r3, [sp, #4]
 800803c:	f1b8 0300 	subs.w	r3, r8, #0
 8008040:	d023      	beq.n	800808a <__d2b+0x82>
 8008042:	4668      	mov	r0, sp
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	f7ff fd7c 	bl	8007b42 <__lo0bits>
 800804a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800804e:	b1d0      	cbz	r0, 8008086 <__d2b+0x7e>
 8008050:	f1c0 0320 	rsb	r3, r0, #32
 8008054:	fa02 f303 	lsl.w	r3, r2, r3
 8008058:	430b      	orrs	r3, r1
 800805a:	40c2      	lsrs	r2, r0
 800805c:	6163      	str	r3, [r4, #20]
 800805e:	9201      	str	r2, [sp, #4]
 8008060:	9b01      	ldr	r3, [sp, #4]
 8008062:	61a3      	str	r3, [r4, #24]
 8008064:	2b00      	cmp	r3, #0
 8008066:	bf0c      	ite	eq
 8008068:	2201      	moveq	r2, #1
 800806a:	2202      	movne	r2, #2
 800806c:	6122      	str	r2, [r4, #16]
 800806e:	b1a5      	cbz	r5, 800809a <__d2b+0x92>
 8008070:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008074:	4405      	add	r5, r0
 8008076:	603d      	str	r5, [r7, #0]
 8008078:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800807c:	6030      	str	r0, [r6, #0]
 800807e:	4620      	mov	r0, r4
 8008080:	b003      	add	sp, #12
 8008082:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008086:	6161      	str	r1, [r4, #20]
 8008088:	e7ea      	b.n	8008060 <__d2b+0x58>
 800808a:	a801      	add	r0, sp, #4
 800808c:	f7ff fd59 	bl	8007b42 <__lo0bits>
 8008090:	9b01      	ldr	r3, [sp, #4]
 8008092:	6163      	str	r3, [r4, #20]
 8008094:	3020      	adds	r0, #32
 8008096:	2201      	movs	r2, #1
 8008098:	e7e8      	b.n	800806c <__d2b+0x64>
 800809a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800809e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80080a2:	6038      	str	r0, [r7, #0]
 80080a4:	6918      	ldr	r0, [r3, #16]
 80080a6:	f7ff fd2d 	bl	8007b04 <__hi0bits>
 80080aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80080ae:	e7e5      	b.n	800807c <__d2b+0x74>
 80080b0:	08008cc0 	.word	0x08008cc0
 80080b4:	08008cd1 	.word	0x08008cd1

080080b8 <__ssputs_r>:
 80080b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080bc:	688e      	ldr	r6, [r1, #8]
 80080be:	461f      	mov	r7, r3
 80080c0:	42be      	cmp	r6, r7
 80080c2:	680b      	ldr	r3, [r1, #0]
 80080c4:	4682      	mov	sl, r0
 80080c6:	460c      	mov	r4, r1
 80080c8:	4690      	mov	r8, r2
 80080ca:	d82d      	bhi.n	8008128 <__ssputs_r+0x70>
 80080cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80080d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80080d4:	d026      	beq.n	8008124 <__ssputs_r+0x6c>
 80080d6:	6965      	ldr	r5, [r4, #20]
 80080d8:	6909      	ldr	r1, [r1, #16]
 80080da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080de:	eba3 0901 	sub.w	r9, r3, r1
 80080e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080e6:	1c7b      	adds	r3, r7, #1
 80080e8:	444b      	add	r3, r9
 80080ea:	106d      	asrs	r5, r5, #1
 80080ec:	429d      	cmp	r5, r3
 80080ee:	bf38      	it	cc
 80080f0:	461d      	movcc	r5, r3
 80080f2:	0553      	lsls	r3, r2, #21
 80080f4:	d527      	bpl.n	8008146 <__ssputs_r+0x8e>
 80080f6:	4629      	mov	r1, r5
 80080f8:	f7fd feb4 	bl	8005e64 <_malloc_r>
 80080fc:	4606      	mov	r6, r0
 80080fe:	b360      	cbz	r0, 800815a <__ssputs_r+0xa2>
 8008100:	6921      	ldr	r1, [r4, #16]
 8008102:	464a      	mov	r2, r9
 8008104:	f000 f9f6 	bl	80084f4 <memcpy>
 8008108:	89a3      	ldrh	r3, [r4, #12]
 800810a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800810e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008112:	81a3      	strh	r3, [r4, #12]
 8008114:	6126      	str	r6, [r4, #16]
 8008116:	6165      	str	r5, [r4, #20]
 8008118:	444e      	add	r6, r9
 800811a:	eba5 0509 	sub.w	r5, r5, r9
 800811e:	6026      	str	r6, [r4, #0]
 8008120:	60a5      	str	r5, [r4, #8]
 8008122:	463e      	mov	r6, r7
 8008124:	42be      	cmp	r6, r7
 8008126:	d900      	bls.n	800812a <__ssputs_r+0x72>
 8008128:	463e      	mov	r6, r7
 800812a:	6820      	ldr	r0, [r4, #0]
 800812c:	4632      	mov	r2, r6
 800812e:	4641      	mov	r1, r8
 8008130:	f000 f9c6 	bl	80084c0 <memmove>
 8008134:	68a3      	ldr	r3, [r4, #8]
 8008136:	1b9b      	subs	r3, r3, r6
 8008138:	60a3      	str	r3, [r4, #8]
 800813a:	6823      	ldr	r3, [r4, #0]
 800813c:	4433      	add	r3, r6
 800813e:	6023      	str	r3, [r4, #0]
 8008140:	2000      	movs	r0, #0
 8008142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008146:	462a      	mov	r2, r5
 8008148:	f000 fa26 	bl	8008598 <_realloc_r>
 800814c:	4606      	mov	r6, r0
 800814e:	2800      	cmp	r0, #0
 8008150:	d1e0      	bne.n	8008114 <__ssputs_r+0x5c>
 8008152:	6921      	ldr	r1, [r4, #16]
 8008154:	4650      	mov	r0, sl
 8008156:	f7ff fbe3 	bl	8007920 <_free_r>
 800815a:	230c      	movs	r3, #12
 800815c:	f8ca 3000 	str.w	r3, [sl]
 8008160:	89a3      	ldrh	r3, [r4, #12]
 8008162:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008166:	81a3      	strh	r3, [r4, #12]
 8008168:	f04f 30ff 	mov.w	r0, #4294967295
 800816c:	e7e9      	b.n	8008142 <__ssputs_r+0x8a>
	...

08008170 <_svfiprintf_r>:
 8008170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008174:	4698      	mov	r8, r3
 8008176:	898b      	ldrh	r3, [r1, #12]
 8008178:	061b      	lsls	r3, r3, #24
 800817a:	b09d      	sub	sp, #116	@ 0x74
 800817c:	4607      	mov	r7, r0
 800817e:	460d      	mov	r5, r1
 8008180:	4614      	mov	r4, r2
 8008182:	d510      	bpl.n	80081a6 <_svfiprintf_r+0x36>
 8008184:	690b      	ldr	r3, [r1, #16]
 8008186:	b973      	cbnz	r3, 80081a6 <_svfiprintf_r+0x36>
 8008188:	2140      	movs	r1, #64	@ 0x40
 800818a:	f7fd fe6b 	bl	8005e64 <_malloc_r>
 800818e:	6028      	str	r0, [r5, #0]
 8008190:	6128      	str	r0, [r5, #16]
 8008192:	b930      	cbnz	r0, 80081a2 <_svfiprintf_r+0x32>
 8008194:	230c      	movs	r3, #12
 8008196:	603b      	str	r3, [r7, #0]
 8008198:	f04f 30ff 	mov.w	r0, #4294967295
 800819c:	b01d      	add	sp, #116	@ 0x74
 800819e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a2:	2340      	movs	r3, #64	@ 0x40
 80081a4:	616b      	str	r3, [r5, #20]
 80081a6:	2300      	movs	r3, #0
 80081a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80081aa:	2320      	movs	r3, #32
 80081ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80081b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80081b4:	2330      	movs	r3, #48	@ 0x30
 80081b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008354 <_svfiprintf_r+0x1e4>
 80081ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80081be:	f04f 0901 	mov.w	r9, #1
 80081c2:	4623      	mov	r3, r4
 80081c4:	469a      	mov	sl, r3
 80081c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081ca:	b10a      	cbz	r2, 80081d0 <_svfiprintf_r+0x60>
 80081cc:	2a25      	cmp	r2, #37	@ 0x25
 80081ce:	d1f9      	bne.n	80081c4 <_svfiprintf_r+0x54>
 80081d0:	ebba 0b04 	subs.w	fp, sl, r4
 80081d4:	d00b      	beq.n	80081ee <_svfiprintf_r+0x7e>
 80081d6:	465b      	mov	r3, fp
 80081d8:	4622      	mov	r2, r4
 80081da:	4629      	mov	r1, r5
 80081dc:	4638      	mov	r0, r7
 80081de:	f7ff ff6b 	bl	80080b8 <__ssputs_r>
 80081e2:	3001      	adds	r0, #1
 80081e4:	f000 80a7 	beq.w	8008336 <_svfiprintf_r+0x1c6>
 80081e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081ea:	445a      	add	r2, fp
 80081ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80081ee:	f89a 3000 	ldrb.w	r3, [sl]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f000 809f 	beq.w	8008336 <_svfiprintf_r+0x1c6>
 80081f8:	2300      	movs	r3, #0
 80081fa:	f04f 32ff 	mov.w	r2, #4294967295
 80081fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008202:	f10a 0a01 	add.w	sl, sl, #1
 8008206:	9304      	str	r3, [sp, #16]
 8008208:	9307      	str	r3, [sp, #28]
 800820a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800820e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008210:	4654      	mov	r4, sl
 8008212:	2205      	movs	r2, #5
 8008214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008218:	484e      	ldr	r0, [pc, #312]	@ (8008354 <_svfiprintf_r+0x1e4>)
 800821a:	f7f7 ffe1 	bl	80001e0 <memchr>
 800821e:	9a04      	ldr	r2, [sp, #16]
 8008220:	b9d8      	cbnz	r0, 800825a <_svfiprintf_r+0xea>
 8008222:	06d0      	lsls	r0, r2, #27
 8008224:	bf44      	itt	mi
 8008226:	2320      	movmi	r3, #32
 8008228:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800822c:	0711      	lsls	r1, r2, #28
 800822e:	bf44      	itt	mi
 8008230:	232b      	movmi	r3, #43	@ 0x2b
 8008232:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008236:	f89a 3000 	ldrb.w	r3, [sl]
 800823a:	2b2a      	cmp	r3, #42	@ 0x2a
 800823c:	d015      	beq.n	800826a <_svfiprintf_r+0xfa>
 800823e:	9a07      	ldr	r2, [sp, #28]
 8008240:	4654      	mov	r4, sl
 8008242:	2000      	movs	r0, #0
 8008244:	f04f 0c0a 	mov.w	ip, #10
 8008248:	4621      	mov	r1, r4
 800824a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800824e:	3b30      	subs	r3, #48	@ 0x30
 8008250:	2b09      	cmp	r3, #9
 8008252:	d94b      	bls.n	80082ec <_svfiprintf_r+0x17c>
 8008254:	b1b0      	cbz	r0, 8008284 <_svfiprintf_r+0x114>
 8008256:	9207      	str	r2, [sp, #28]
 8008258:	e014      	b.n	8008284 <_svfiprintf_r+0x114>
 800825a:	eba0 0308 	sub.w	r3, r0, r8
 800825e:	fa09 f303 	lsl.w	r3, r9, r3
 8008262:	4313      	orrs	r3, r2
 8008264:	9304      	str	r3, [sp, #16]
 8008266:	46a2      	mov	sl, r4
 8008268:	e7d2      	b.n	8008210 <_svfiprintf_r+0xa0>
 800826a:	9b03      	ldr	r3, [sp, #12]
 800826c:	1d19      	adds	r1, r3, #4
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	9103      	str	r1, [sp, #12]
 8008272:	2b00      	cmp	r3, #0
 8008274:	bfbb      	ittet	lt
 8008276:	425b      	neglt	r3, r3
 8008278:	f042 0202 	orrlt.w	r2, r2, #2
 800827c:	9307      	strge	r3, [sp, #28]
 800827e:	9307      	strlt	r3, [sp, #28]
 8008280:	bfb8      	it	lt
 8008282:	9204      	strlt	r2, [sp, #16]
 8008284:	7823      	ldrb	r3, [r4, #0]
 8008286:	2b2e      	cmp	r3, #46	@ 0x2e
 8008288:	d10a      	bne.n	80082a0 <_svfiprintf_r+0x130>
 800828a:	7863      	ldrb	r3, [r4, #1]
 800828c:	2b2a      	cmp	r3, #42	@ 0x2a
 800828e:	d132      	bne.n	80082f6 <_svfiprintf_r+0x186>
 8008290:	9b03      	ldr	r3, [sp, #12]
 8008292:	1d1a      	adds	r2, r3, #4
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	9203      	str	r2, [sp, #12]
 8008298:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800829c:	3402      	adds	r4, #2
 800829e:	9305      	str	r3, [sp, #20]
 80082a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008364 <_svfiprintf_r+0x1f4>
 80082a4:	7821      	ldrb	r1, [r4, #0]
 80082a6:	2203      	movs	r2, #3
 80082a8:	4650      	mov	r0, sl
 80082aa:	f7f7 ff99 	bl	80001e0 <memchr>
 80082ae:	b138      	cbz	r0, 80082c0 <_svfiprintf_r+0x150>
 80082b0:	9b04      	ldr	r3, [sp, #16]
 80082b2:	eba0 000a 	sub.w	r0, r0, sl
 80082b6:	2240      	movs	r2, #64	@ 0x40
 80082b8:	4082      	lsls	r2, r0
 80082ba:	4313      	orrs	r3, r2
 80082bc:	3401      	adds	r4, #1
 80082be:	9304      	str	r3, [sp, #16]
 80082c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082c4:	4824      	ldr	r0, [pc, #144]	@ (8008358 <_svfiprintf_r+0x1e8>)
 80082c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80082ca:	2206      	movs	r2, #6
 80082cc:	f7f7 ff88 	bl	80001e0 <memchr>
 80082d0:	2800      	cmp	r0, #0
 80082d2:	d036      	beq.n	8008342 <_svfiprintf_r+0x1d2>
 80082d4:	4b21      	ldr	r3, [pc, #132]	@ (800835c <_svfiprintf_r+0x1ec>)
 80082d6:	bb1b      	cbnz	r3, 8008320 <_svfiprintf_r+0x1b0>
 80082d8:	9b03      	ldr	r3, [sp, #12]
 80082da:	3307      	adds	r3, #7
 80082dc:	f023 0307 	bic.w	r3, r3, #7
 80082e0:	3308      	adds	r3, #8
 80082e2:	9303      	str	r3, [sp, #12]
 80082e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082e6:	4433      	add	r3, r6
 80082e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80082ea:	e76a      	b.n	80081c2 <_svfiprintf_r+0x52>
 80082ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80082f0:	460c      	mov	r4, r1
 80082f2:	2001      	movs	r0, #1
 80082f4:	e7a8      	b.n	8008248 <_svfiprintf_r+0xd8>
 80082f6:	2300      	movs	r3, #0
 80082f8:	3401      	adds	r4, #1
 80082fa:	9305      	str	r3, [sp, #20]
 80082fc:	4619      	mov	r1, r3
 80082fe:	f04f 0c0a 	mov.w	ip, #10
 8008302:	4620      	mov	r0, r4
 8008304:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008308:	3a30      	subs	r2, #48	@ 0x30
 800830a:	2a09      	cmp	r2, #9
 800830c:	d903      	bls.n	8008316 <_svfiprintf_r+0x1a6>
 800830e:	2b00      	cmp	r3, #0
 8008310:	d0c6      	beq.n	80082a0 <_svfiprintf_r+0x130>
 8008312:	9105      	str	r1, [sp, #20]
 8008314:	e7c4      	b.n	80082a0 <_svfiprintf_r+0x130>
 8008316:	fb0c 2101 	mla	r1, ip, r1, r2
 800831a:	4604      	mov	r4, r0
 800831c:	2301      	movs	r3, #1
 800831e:	e7f0      	b.n	8008302 <_svfiprintf_r+0x192>
 8008320:	ab03      	add	r3, sp, #12
 8008322:	9300      	str	r3, [sp, #0]
 8008324:	462a      	mov	r2, r5
 8008326:	4b0e      	ldr	r3, [pc, #56]	@ (8008360 <_svfiprintf_r+0x1f0>)
 8008328:	a904      	add	r1, sp, #16
 800832a:	4638      	mov	r0, r7
 800832c:	f7fd fec6 	bl	80060bc <_printf_float>
 8008330:	1c42      	adds	r2, r0, #1
 8008332:	4606      	mov	r6, r0
 8008334:	d1d6      	bne.n	80082e4 <_svfiprintf_r+0x174>
 8008336:	89ab      	ldrh	r3, [r5, #12]
 8008338:	065b      	lsls	r3, r3, #25
 800833a:	f53f af2d 	bmi.w	8008198 <_svfiprintf_r+0x28>
 800833e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008340:	e72c      	b.n	800819c <_svfiprintf_r+0x2c>
 8008342:	ab03      	add	r3, sp, #12
 8008344:	9300      	str	r3, [sp, #0]
 8008346:	462a      	mov	r2, r5
 8008348:	4b05      	ldr	r3, [pc, #20]	@ (8008360 <_svfiprintf_r+0x1f0>)
 800834a:	a904      	add	r1, sp, #16
 800834c:	4638      	mov	r0, r7
 800834e:	f7fe f94d 	bl	80065ec <_printf_i>
 8008352:	e7ed      	b.n	8008330 <_svfiprintf_r+0x1c0>
 8008354:	08008e28 	.word	0x08008e28
 8008358:	08008e32 	.word	0x08008e32
 800835c:	080060bd 	.word	0x080060bd
 8008360:	080080b9 	.word	0x080080b9
 8008364:	08008e2e 	.word	0x08008e2e

08008368 <__sflush_r>:
 8008368:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800836c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008370:	0716      	lsls	r6, r2, #28
 8008372:	4605      	mov	r5, r0
 8008374:	460c      	mov	r4, r1
 8008376:	d454      	bmi.n	8008422 <__sflush_r+0xba>
 8008378:	684b      	ldr	r3, [r1, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	dc02      	bgt.n	8008384 <__sflush_r+0x1c>
 800837e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008380:	2b00      	cmp	r3, #0
 8008382:	dd48      	ble.n	8008416 <__sflush_r+0xae>
 8008384:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008386:	2e00      	cmp	r6, #0
 8008388:	d045      	beq.n	8008416 <__sflush_r+0xae>
 800838a:	2300      	movs	r3, #0
 800838c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008390:	682f      	ldr	r7, [r5, #0]
 8008392:	6a21      	ldr	r1, [r4, #32]
 8008394:	602b      	str	r3, [r5, #0]
 8008396:	d030      	beq.n	80083fa <__sflush_r+0x92>
 8008398:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800839a:	89a3      	ldrh	r3, [r4, #12]
 800839c:	0759      	lsls	r1, r3, #29
 800839e:	d505      	bpl.n	80083ac <__sflush_r+0x44>
 80083a0:	6863      	ldr	r3, [r4, #4]
 80083a2:	1ad2      	subs	r2, r2, r3
 80083a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80083a6:	b10b      	cbz	r3, 80083ac <__sflush_r+0x44>
 80083a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80083aa:	1ad2      	subs	r2, r2, r3
 80083ac:	2300      	movs	r3, #0
 80083ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80083b0:	6a21      	ldr	r1, [r4, #32]
 80083b2:	4628      	mov	r0, r5
 80083b4:	47b0      	blx	r6
 80083b6:	1c43      	adds	r3, r0, #1
 80083b8:	89a3      	ldrh	r3, [r4, #12]
 80083ba:	d106      	bne.n	80083ca <__sflush_r+0x62>
 80083bc:	6829      	ldr	r1, [r5, #0]
 80083be:	291d      	cmp	r1, #29
 80083c0:	d82b      	bhi.n	800841a <__sflush_r+0xb2>
 80083c2:	4a2a      	ldr	r2, [pc, #168]	@ (800846c <__sflush_r+0x104>)
 80083c4:	410a      	asrs	r2, r1
 80083c6:	07d6      	lsls	r6, r2, #31
 80083c8:	d427      	bmi.n	800841a <__sflush_r+0xb2>
 80083ca:	2200      	movs	r2, #0
 80083cc:	6062      	str	r2, [r4, #4]
 80083ce:	04d9      	lsls	r1, r3, #19
 80083d0:	6922      	ldr	r2, [r4, #16]
 80083d2:	6022      	str	r2, [r4, #0]
 80083d4:	d504      	bpl.n	80083e0 <__sflush_r+0x78>
 80083d6:	1c42      	adds	r2, r0, #1
 80083d8:	d101      	bne.n	80083de <__sflush_r+0x76>
 80083da:	682b      	ldr	r3, [r5, #0]
 80083dc:	b903      	cbnz	r3, 80083e0 <__sflush_r+0x78>
 80083de:	6560      	str	r0, [r4, #84]	@ 0x54
 80083e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083e2:	602f      	str	r7, [r5, #0]
 80083e4:	b1b9      	cbz	r1, 8008416 <__sflush_r+0xae>
 80083e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083ea:	4299      	cmp	r1, r3
 80083ec:	d002      	beq.n	80083f4 <__sflush_r+0x8c>
 80083ee:	4628      	mov	r0, r5
 80083f0:	f7ff fa96 	bl	8007920 <_free_r>
 80083f4:	2300      	movs	r3, #0
 80083f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80083f8:	e00d      	b.n	8008416 <__sflush_r+0xae>
 80083fa:	2301      	movs	r3, #1
 80083fc:	4628      	mov	r0, r5
 80083fe:	47b0      	blx	r6
 8008400:	4602      	mov	r2, r0
 8008402:	1c50      	adds	r0, r2, #1
 8008404:	d1c9      	bne.n	800839a <__sflush_r+0x32>
 8008406:	682b      	ldr	r3, [r5, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d0c6      	beq.n	800839a <__sflush_r+0x32>
 800840c:	2b1d      	cmp	r3, #29
 800840e:	d001      	beq.n	8008414 <__sflush_r+0xac>
 8008410:	2b16      	cmp	r3, #22
 8008412:	d11e      	bne.n	8008452 <__sflush_r+0xea>
 8008414:	602f      	str	r7, [r5, #0]
 8008416:	2000      	movs	r0, #0
 8008418:	e022      	b.n	8008460 <__sflush_r+0xf8>
 800841a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800841e:	b21b      	sxth	r3, r3
 8008420:	e01b      	b.n	800845a <__sflush_r+0xf2>
 8008422:	690f      	ldr	r7, [r1, #16]
 8008424:	2f00      	cmp	r7, #0
 8008426:	d0f6      	beq.n	8008416 <__sflush_r+0xae>
 8008428:	0793      	lsls	r3, r2, #30
 800842a:	680e      	ldr	r6, [r1, #0]
 800842c:	bf08      	it	eq
 800842e:	694b      	ldreq	r3, [r1, #20]
 8008430:	600f      	str	r7, [r1, #0]
 8008432:	bf18      	it	ne
 8008434:	2300      	movne	r3, #0
 8008436:	eba6 0807 	sub.w	r8, r6, r7
 800843a:	608b      	str	r3, [r1, #8]
 800843c:	f1b8 0f00 	cmp.w	r8, #0
 8008440:	dde9      	ble.n	8008416 <__sflush_r+0xae>
 8008442:	6a21      	ldr	r1, [r4, #32]
 8008444:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008446:	4643      	mov	r3, r8
 8008448:	463a      	mov	r2, r7
 800844a:	4628      	mov	r0, r5
 800844c:	47b0      	blx	r6
 800844e:	2800      	cmp	r0, #0
 8008450:	dc08      	bgt.n	8008464 <__sflush_r+0xfc>
 8008452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008456:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800845a:	81a3      	strh	r3, [r4, #12]
 800845c:	f04f 30ff 	mov.w	r0, #4294967295
 8008460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008464:	4407      	add	r7, r0
 8008466:	eba8 0800 	sub.w	r8, r8, r0
 800846a:	e7e7      	b.n	800843c <__sflush_r+0xd4>
 800846c:	dfbffffe 	.word	0xdfbffffe

08008470 <_fflush_r>:
 8008470:	b538      	push	{r3, r4, r5, lr}
 8008472:	690b      	ldr	r3, [r1, #16]
 8008474:	4605      	mov	r5, r0
 8008476:	460c      	mov	r4, r1
 8008478:	b913      	cbnz	r3, 8008480 <_fflush_r+0x10>
 800847a:	2500      	movs	r5, #0
 800847c:	4628      	mov	r0, r5
 800847e:	bd38      	pop	{r3, r4, r5, pc}
 8008480:	b118      	cbz	r0, 800848a <_fflush_r+0x1a>
 8008482:	6a03      	ldr	r3, [r0, #32]
 8008484:	b90b      	cbnz	r3, 800848a <_fflush_r+0x1a>
 8008486:	f7fe fa5d 	bl	8006944 <__sinit>
 800848a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d0f3      	beq.n	800847a <_fflush_r+0xa>
 8008492:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008494:	07d0      	lsls	r0, r2, #31
 8008496:	d404      	bmi.n	80084a2 <_fflush_r+0x32>
 8008498:	0599      	lsls	r1, r3, #22
 800849a:	d402      	bmi.n	80084a2 <_fflush_r+0x32>
 800849c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800849e:	f7fe fbf0 	bl	8006c82 <__retarget_lock_acquire_recursive>
 80084a2:	4628      	mov	r0, r5
 80084a4:	4621      	mov	r1, r4
 80084a6:	f7ff ff5f 	bl	8008368 <__sflush_r>
 80084aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80084ac:	07da      	lsls	r2, r3, #31
 80084ae:	4605      	mov	r5, r0
 80084b0:	d4e4      	bmi.n	800847c <_fflush_r+0xc>
 80084b2:	89a3      	ldrh	r3, [r4, #12]
 80084b4:	059b      	lsls	r3, r3, #22
 80084b6:	d4e1      	bmi.n	800847c <_fflush_r+0xc>
 80084b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084ba:	f7fe fbe3 	bl	8006c84 <__retarget_lock_release_recursive>
 80084be:	e7dd      	b.n	800847c <_fflush_r+0xc>

080084c0 <memmove>:
 80084c0:	4288      	cmp	r0, r1
 80084c2:	b510      	push	{r4, lr}
 80084c4:	eb01 0402 	add.w	r4, r1, r2
 80084c8:	d902      	bls.n	80084d0 <memmove+0x10>
 80084ca:	4284      	cmp	r4, r0
 80084cc:	4623      	mov	r3, r4
 80084ce:	d807      	bhi.n	80084e0 <memmove+0x20>
 80084d0:	1e43      	subs	r3, r0, #1
 80084d2:	42a1      	cmp	r1, r4
 80084d4:	d008      	beq.n	80084e8 <memmove+0x28>
 80084d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084de:	e7f8      	b.n	80084d2 <memmove+0x12>
 80084e0:	4402      	add	r2, r0
 80084e2:	4601      	mov	r1, r0
 80084e4:	428a      	cmp	r2, r1
 80084e6:	d100      	bne.n	80084ea <memmove+0x2a>
 80084e8:	bd10      	pop	{r4, pc}
 80084ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80084f2:	e7f7      	b.n	80084e4 <memmove+0x24>

080084f4 <memcpy>:
 80084f4:	440a      	add	r2, r1
 80084f6:	4291      	cmp	r1, r2
 80084f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80084fc:	d100      	bne.n	8008500 <memcpy+0xc>
 80084fe:	4770      	bx	lr
 8008500:	b510      	push	{r4, lr}
 8008502:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008506:	f803 4f01 	strb.w	r4, [r3, #1]!
 800850a:	4291      	cmp	r1, r2
 800850c:	d1f9      	bne.n	8008502 <memcpy+0xe>
 800850e:	bd10      	pop	{r4, pc}

08008510 <__assert_func>:
 8008510:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008512:	4614      	mov	r4, r2
 8008514:	461a      	mov	r2, r3
 8008516:	4b09      	ldr	r3, [pc, #36]	@ (800853c <__assert_func+0x2c>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4605      	mov	r5, r0
 800851c:	68d8      	ldr	r0, [r3, #12]
 800851e:	b954      	cbnz	r4, 8008536 <__assert_func+0x26>
 8008520:	4b07      	ldr	r3, [pc, #28]	@ (8008540 <__assert_func+0x30>)
 8008522:	461c      	mov	r4, r3
 8008524:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008528:	9100      	str	r1, [sp, #0]
 800852a:	462b      	mov	r3, r5
 800852c:	4905      	ldr	r1, [pc, #20]	@ (8008544 <__assert_func+0x34>)
 800852e:	f000 f86f 	bl	8008610 <fiprintf>
 8008532:	f7fd fc5d 	bl	8005df0 <abort>
 8008536:	4b04      	ldr	r3, [pc, #16]	@ (8008548 <__assert_func+0x38>)
 8008538:	e7f4      	b.n	8008524 <__assert_func+0x14>
 800853a:	bf00      	nop
 800853c:	20000018 	.word	0x20000018
 8008540:	08008e7e 	.word	0x08008e7e
 8008544:	08008e50 	.word	0x08008e50
 8008548:	08008e43 	.word	0x08008e43

0800854c <_calloc_r>:
 800854c:	b570      	push	{r4, r5, r6, lr}
 800854e:	fba1 5402 	umull	r5, r4, r1, r2
 8008552:	b93c      	cbnz	r4, 8008564 <_calloc_r+0x18>
 8008554:	4629      	mov	r1, r5
 8008556:	f7fd fc85 	bl	8005e64 <_malloc_r>
 800855a:	4606      	mov	r6, r0
 800855c:	b928      	cbnz	r0, 800856a <_calloc_r+0x1e>
 800855e:	2600      	movs	r6, #0
 8008560:	4630      	mov	r0, r6
 8008562:	bd70      	pop	{r4, r5, r6, pc}
 8008564:	220c      	movs	r2, #12
 8008566:	6002      	str	r2, [r0, #0]
 8008568:	e7f9      	b.n	800855e <_calloc_r+0x12>
 800856a:	462a      	mov	r2, r5
 800856c:	4621      	mov	r1, r4
 800856e:	f7fe fab6 	bl	8006ade <memset>
 8008572:	e7f5      	b.n	8008560 <_calloc_r+0x14>

08008574 <__ascii_mbtowc>:
 8008574:	b082      	sub	sp, #8
 8008576:	b901      	cbnz	r1, 800857a <__ascii_mbtowc+0x6>
 8008578:	a901      	add	r1, sp, #4
 800857a:	b142      	cbz	r2, 800858e <__ascii_mbtowc+0x1a>
 800857c:	b14b      	cbz	r3, 8008592 <__ascii_mbtowc+0x1e>
 800857e:	7813      	ldrb	r3, [r2, #0]
 8008580:	600b      	str	r3, [r1, #0]
 8008582:	7812      	ldrb	r2, [r2, #0]
 8008584:	1e10      	subs	r0, r2, #0
 8008586:	bf18      	it	ne
 8008588:	2001      	movne	r0, #1
 800858a:	b002      	add	sp, #8
 800858c:	4770      	bx	lr
 800858e:	4610      	mov	r0, r2
 8008590:	e7fb      	b.n	800858a <__ascii_mbtowc+0x16>
 8008592:	f06f 0001 	mvn.w	r0, #1
 8008596:	e7f8      	b.n	800858a <__ascii_mbtowc+0x16>

08008598 <_realloc_r>:
 8008598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800859c:	4680      	mov	r8, r0
 800859e:	4615      	mov	r5, r2
 80085a0:	460c      	mov	r4, r1
 80085a2:	b921      	cbnz	r1, 80085ae <_realloc_r+0x16>
 80085a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085a8:	4611      	mov	r1, r2
 80085aa:	f7fd bc5b 	b.w	8005e64 <_malloc_r>
 80085ae:	b92a      	cbnz	r2, 80085bc <_realloc_r+0x24>
 80085b0:	f7ff f9b6 	bl	8007920 <_free_r>
 80085b4:	2400      	movs	r4, #0
 80085b6:	4620      	mov	r0, r4
 80085b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085bc:	f000 f83a 	bl	8008634 <_malloc_usable_size_r>
 80085c0:	4285      	cmp	r5, r0
 80085c2:	4606      	mov	r6, r0
 80085c4:	d802      	bhi.n	80085cc <_realloc_r+0x34>
 80085c6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80085ca:	d8f4      	bhi.n	80085b6 <_realloc_r+0x1e>
 80085cc:	4629      	mov	r1, r5
 80085ce:	4640      	mov	r0, r8
 80085d0:	f7fd fc48 	bl	8005e64 <_malloc_r>
 80085d4:	4607      	mov	r7, r0
 80085d6:	2800      	cmp	r0, #0
 80085d8:	d0ec      	beq.n	80085b4 <_realloc_r+0x1c>
 80085da:	42b5      	cmp	r5, r6
 80085dc:	462a      	mov	r2, r5
 80085de:	4621      	mov	r1, r4
 80085e0:	bf28      	it	cs
 80085e2:	4632      	movcs	r2, r6
 80085e4:	f7ff ff86 	bl	80084f4 <memcpy>
 80085e8:	4621      	mov	r1, r4
 80085ea:	4640      	mov	r0, r8
 80085ec:	f7ff f998 	bl	8007920 <_free_r>
 80085f0:	463c      	mov	r4, r7
 80085f2:	e7e0      	b.n	80085b6 <_realloc_r+0x1e>

080085f4 <__ascii_wctomb>:
 80085f4:	4603      	mov	r3, r0
 80085f6:	4608      	mov	r0, r1
 80085f8:	b141      	cbz	r1, 800860c <__ascii_wctomb+0x18>
 80085fa:	2aff      	cmp	r2, #255	@ 0xff
 80085fc:	d904      	bls.n	8008608 <__ascii_wctomb+0x14>
 80085fe:	228a      	movs	r2, #138	@ 0x8a
 8008600:	601a      	str	r2, [r3, #0]
 8008602:	f04f 30ff 	mov.w	r0, #4294967295
 8008606:	4770      	bx	lr
 8008608:	700a      	strb	r2, [r1, #0]
 800860a:	2001      	movs	r0, #1
 800860c:	4770      	bx	lr
	...

08008610 <fiprintf>:
 8008610:	b40e      	push	{r1, r2, r3}
 8008612:	b503      	push	{r0, r1, lr}
 8008614:	4601      	mov	r1, r0
 8008616:	ab03      	add	r3, sp, #12
 8008618:	4805      	ldr	r0, [pc, #20]	@ (8008630 <fiprintf+0x20>)
 800861a:	f853 2b04 	ldr.w	r2, [r3], #4
 800861e:	6800      	ldr	r0, [r0, #0]
 8008620:	9301      	str	r3, [sp, #4]
 8008622:	f000 f839 	bl	8008698 <_vfiprintf_r>
 8008626:	b002      	add	sp, #8
 8008628:	f85d eb04 	ldr.w	lr, [sp], #4
 800862c:	b003      	add	sp, #12
 800862e:	4770      	bx	lr
 8008630:	20000018 	.word	0x20000018

08008634 <_malloc_usable_size_r>:
 8008634:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008638:	1f18      	subs	r0, r3, #4
 800863a:	2b00      	cmp	r3, #0
 800863c:	bfbc      	itt	lt
 800863e:	580b      	ldrlt	r3, [r1, r0]
 8008640:	18c0      	addlt	r0, r0, r3
 8008642:	4770      	bx	lr

08008644 <__sfputc_r>:
 8008644:	6893      	ldr	r3, [r2, #8]
 8008646:	3b01      	subs	r3, #1
 8008648:	2b00      	cmp	r3, #0
 800864a:	b410      	push	{r4}
 800864c:	6093      	str	r3, [r2, #8]
 800864e:	da08      	bge.n	8008662 <__sfputc_r+0x1e>
 8008650:	6994      	ldr	r4, [r2, #24]
 8008652:	42a3      	cmp	r3, r4
 8008654:	db01      	blt.n	800865a <__sfputc_r+0x16>
 8008656:	290a      	cmp	r1, #10
 8008658:	d103      	bne.n	8008662 <__sfputc_r+0x1e>
 800865a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800865e:	f000 b933 	b.w	80088c8 <__swbuf_r>
 8008662:	6813      	ldr	r3, [r2, #0]
 8008664:	1c58      	adds	r0, r3, #1
 8008666:	6010      	str	r0, [r2, #0]
 8008668:	7019      	strb	r1, [r3, #0]
 800866a:	4608      	mov	r0, r1
 800866c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008670:	4770      	bx	lr

08008672 <__sfputs_r>:
 8008672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008674:	4606      	mov	r6, r0
 8008676:	460f      	mov	r7, r1
 8008678:	4614      	mov	r4, r2
 800867a:	18d5      	adds	r5, r2, r3
 800867c:	42ac      	cmp	r4, r5
 800867e:	d101      	bne.n	8008684 <__sfputs_r+0x12>
 8008680:	2000      	movs	r0, #0
 8008682:	e007      	b.n	8008694 <__sfputs_r+0x22>
 8008684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008688:	463a      	mov	r2, r7
 800868a:	4630      	mov	r0, r6
 800868c:	f7ff ffda 	bl	8008644 <__sfputc_r>
 8008690:	1c43      	adds	r3, r0, #1
 8008692:	d1f3      	bne.n	800867c <__sfputs_r+0xa>
 8008694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008698 <_vfiprintf_r>:
 8008698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800869c:	460d      	mov	r5, r1
 800869e:	b09d      	sub	sp, #116	@ 0x74
 80086a0:	4614      	mov	r4, r2
 80086a2:	4698      	mov	r8, r3
 80086a4:	4606      	mov	r6, r0
 80086a6:	b118      	cbz	r0, 80086b0 <_vfiprintf_r+0x18>
 80086a8:	6a03      	ldr	r3, [r0, #32]
 80086aa:	b90b      	cbnz	r3, 80086b0 <_vfiprintf_r+0x18>
 80086ac:	f7fe f94a 	bl	8006944 <__sinit>
 80086b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086b2:	07d9      	lsls	r1, r3, #31
 80086b4:	d405      	bmi.n	80086c2 <_vfiprintf_r+0x2a>
 80086b6:	89ab      	ldrh	r3, [r5, #12]
 80086b8:	059a      	lsls	r2, r3, #22
 80086ba:	d402      	bmi.n	80086c2 <_vfiprintf_r+0x2a>
 80086bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086be:	f7fe fae0 	bl	8006c82 <__retarget_lock_acquire_recursive>
 80086c2:	89ab      	ldrh	r3, [r5, #12]
 80086c4:	071b      	lsls	r3, r3, #28
 80086c6:	d501      	bpl.n	80086cc <_vfiprintf_r+0x34>
 80086c8:	692b      	ldr	r3, [r5, #16]
 80086ca:	b99b      	cbnz	r3, 80086f4 <_vfiprintf_r+0x5c>
 80086cc:	4629      	mov	r1, r5
 80086ce:	4630      	mov	r0, r6
 80086d0:	f000 f938 	bl	8008944 <__swsetup_r>
 80086d4:	b170      	cbz	r0, 80086f4 <_vfiprintf_r+0x5c>
 80086d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086d8:	07dc      	lsls	r4, r3, #31
 80086da:	d504      	bpl.n	80086e6 <_vfiprintf_r+0x4e>
 80086dc:	f04f 30ff 	mov.w	r0, #4294967295
 80086e0:	b01d      	add	sp, #116	@ 0x74
 80086e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e6:	89ab      	ldrh	r3, [r5, #12]
 80086e8:	0598      	lsls	r0, r3, #22
 80086ea:	d4f7      	bmi.n	80086dc <_vfiprintf_r+0x44>
 80086ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086ee:	f7fe fac9 	bl	8006c84 <__retarget_lock_release_recursive>
 80086f2:	e7f3      	b.n	80086dc <_vfiprintf_r+0x44>
 80086f4:	2300      	movs	r3, #0
 80086f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80086f8:	2320      	movs	r3, #32
 80086fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80086fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008702:	2330      	movs	r3, #48	@ 0x30
 8008704:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80088b4 <_vfiprintf_r+0x21c>
 8008708:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800870c:	f04f 0901 	mov.w	r9, #1
 8008710:	4623      	mov	r3, r4
 8008712:	469a      	mov	sl, r3
 8008714:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008718:	b10a      	cbz	r2, 800871e <_vfiprintf_r+0x86>
 800871a:	2a25      	cmp	r2, #37	@ 0x25
 800871c:	d1f9      	bne.n	8008712 <_vfiprintf_r+0x7a>
 800871e:	ebba 0b04 	subs.w	fp, sl, r4
 8008722:	d00b      	beq.n	800873c <_vfiprintf_r+0xa4>
 8008724:	465b      	mov	r3, fp
 8008726:	4622      	mov	r2, r4
 8008728:	4629      	mov	r1, r5
 800872a:	4630      	mov	r0, r6
 800872c:	f7ff ffa1 	bl	8008672 <__sfputs_r>
 8008730:	3001      	adds	r0, #1
 8008732:	f000 80a7 	beq.w	8008884 <_vfiprintf_r+0x1ec>
 8008736:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008738:	445a      	add	r2, fp
 800873a:	9209      	str	r2, [sp, #36]	@ 0x24
 800873c:	f89a 3000 	ldrb.w	r3, [sl]
 8008740:	2b00      	cmp	r3, #0
 8008742:	f000 809f 	beq.w	8008884 <_vfiprintf_r+0x1ec>
 8008746:	2300      	movs	r3, #0
 8008748:	f04f 32ff 	mov.w	r2, #4294967295
 800874c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008750:	f10a 0a01 	add.w	sl, sl, #1
 8008754:	9304      	str	r3, [sp, #16]
 8008756:	9307      	str	r3, [sp, #28]
 8008758:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800875c:	931a      	str	r3, [sp, #104]	@ 0x68
 800875e:	4654      	mov	r4, sl
 8008760:	2205      	movs	r2, #5
 8008762:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008766:	4853      	ldr	r0, [pc, #332]	@ (80088b4 <_vfiprintf_r+0x21c>)
 8008768:	f7f7 fd3a 	bl	80001e0 <memchr>
 800876c:	9a04      	ldr	r2, [sp, #16]
 800876e:	b9d8      	cbnz	r0, 80087a8 <_vfiprintf_r+0x110>
 8008770:	06d1      	lsls	r1, r2, #27
 8008772:	bf44      	itt	mi
 8008774:	2320      	movmi	r3, #32
 8008776:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800877a:	0713      	lsls	r3, r2, #28
 800877c:	bf44      	itt	mi
 800877e:	232b      	movmi	r3, #43	@ 0x2b
 8008780:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008784:	f89a 3000 	ldrb.w	r3, [sl]
 8008788:	2b2a      	cmp	r3, #42	@ 0x2a
 800878a:	d015      	beq.n	80087b8 <_vfiprintf_r+0x120>
 800878c:	9a07      	ldr	r2, [sp, #28]
 800878e:	4654      	mov	r4, sl
 8008790:	2000      	movs	r0, #0
 8008792:	f04f 0c0a 	mov.w	ip, #10
 8008796:	4621      	mov	r1, r4
 8008798:	f811 3b01 	ldrb.w	r3, [r1], #1
 800879c:	3b30      	subs	r3, #48	@ 0x30
 800879e:	2b09      	cmp	r3, #9
 80087a0:	d94b      	bls.n	800883a <_vfiprintf_r+0x1a2>
 80087a2:	b1b0      	cbz	r0, 80087d2 <_vfiprintf_r+0x13a>
 80087a4:	9207      	str	r2, [sp, #28]
 80087a6:	e014      	b.n	80087d2 <_vfiprintf_r+0x13a>
 80087a8:	eba0 0308 	sub.w	r3, r0, r8
 80087ac:	fa09 f303 	lsl.w	r3, r9, r3
 80087b0:	4313      	orrs	r3, r2
 80087b2:	9304      	str	r3, [sp, #16]
 80087b4:	46a2      	mov	sl, r4
 80087b6:	e7d2      	b.n	800875e <_vfiprintf_r+0xc6>
 80087b8:	9b03      	ldr	r3, [sp, #12]
 80087ba:	1d19      	adds	r1, r3, #4
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	9103      	str	r1, [sp, #12]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	bfbb      	ittet	lt
 80087c4:	425b      	neglt	r3, r3
 80087c6:	f042 0202 	orrlt.w	r2, r2, #2
 80087ca:	9307      	strge	r3, [sp, #28]
 80087cc:	9307      	strlt	r3, [sp, #28]
 80087ce:	bfb8      	it	lt
 80087d0:	9204      	strlt	r2, [sp, #16]
 80087d2:	7823      	ldrb	r3, [r4, #0]
 80087d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80087d6:	d10a      	bne.n	80087ee <_vfiprintf_r+0x156>
 80087d8:	7863      	ldrb	r3, [r4, #1]
 80087da:	2b2a      	cmp	r3, #42	@ 0x2a
 80087dc:	d132      	bne.n	8008844 <_vfiprintf_r+0x1ac>
 80087de:	9b03      	ldr	r3, [sp, #12]
 80087e0:	1d1a      	adds	r2, r3, #4
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	9203      	str	r2, [sp, #12]
 80087e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80087ea:	3402      	adds	r4, #2
 80087ec:	9305      	str	r3, [sp, #20]
 80087ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80088c4 <_vfiprintf_r+0x22c>
 80087f2:	7821      	ldrb	r1, [r4, #0]
 80087f4:	2203      	movs	r2, #3
 80087f6:	4650      	mov	r0, sl
 80087f8:	f7f7 fcf2 	bl	80001e0 <memchr>
 80087fc:	b138      	cbz	r0, 800880e <_vfiprintf_r+0x176>
 80087fe:	9b04      	ldr	r3, [sp, #16]
 8008800:	eba0 000a 	sub.w	r0, r0, sl
 8008804:	2240      	movs	r2, #64	@ 0x40
 8008806:	4082      	lsls	r2, r0
 8008808:	4313      	orrs	r3, r2
 800880a:	3401      	adds	r4, #1
 800880c:	9304      	str	r3, [sp, #16]
 800880e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008812:	4829      	ldr	r0, [pc, #164]	@ (80088b8 <_vfiprintf_r+0x220>)
 8008814:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008818:	2206      	movs	r2, #6
 800881a:	f7f7 fce1 	bl	80001e0 <memchr>
 800881e:	2800      	cmp	r0, #0
 8008820:	d03f      	beq.n	80088a2 <_vfiprintf_r+0x20a>
 8008822:	4b26      	ldr	r3, [pc, #152]	@ (80088bc <_vfiprintf_r+0x224>)
 8008824:	bb1b      	cbnz	r3, 800886e <_vfiprintf_r+0x1d6>
 8008826:	9b03      	ldr	r3, [sp, #12]
 8008828:	3307      	adds	r3, #7
 800882a:	f023 0307 	bic.w	r3, r3, #7
 800882e:	3308      	adds	r3, #8
 8008830:	9303      	str	r3, [sp, #12]
 8008832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008834:	443b      	add	r3, r7
 8008836:	9309      	str	r3, [sp, #36]	@ 0x24
 8008838:	e76a      	b.n	8008710 <_vfiprintf_r+0x78>
 800883a:	fb0c 3202 	mla	r2, ip, r2, r3
 800883e:	460c      	mov	r4, r1
 8008840:	2001      	movs	r0, #1
 8008842:	e7a8      	b.n	8008796 <_vfiprintf_r+0xfe>
 8008844:	2300      	movs	r3, #0
 8008846:	3401      	adds	r4, #1
 8008848:	9305      	str	r3, [sp, #20]
 800884a:	4619      	mov	r1, r3
 800884c:	f04f 0c0a 	mov.w	ip, #10
 8008850:	4620      	mov	r0, r4
 8008852:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008856:	3a30      	subs	r2, #48	@ 0x30
 8008858:	2a09      	cmp	r2, #9
 800885a:	d903      	bls.n	8008864 <_vfiprintf_r+0x1cc>
 800885c:	2b00      	cmp	r3, #0
 800885e:	d0c6      	beq.n	80087ee <_vfiprintf_r+0x156>
 8008860:	9105      	str	r1, [sp, #20]
 8008862:	e7c4      	b.n	80087ee <_vfiprintf_r+0x156>
 8008864:	fb0c 2101 	mla	r1, ip, r1, r2
 8008868:	4604      	mov	r4, r0
 800886a:	2301      	movs	r3, #1
 800886c:	e7f0      	b.n	8008850 <_vfiprintf_r+0x1b8>
 800886e:	ab03      	add	r3, sp, #12
 8008870:	9300      	str	r3, [sp, #0]
 8008872:	462a      	mov	r2, r5
 8008874:	4b12      	ldr	r3, [pc, #72]	@ (80088c0 <_vfiprintf_r+0x228>)
 8008876:	a904      	add	r1, sp, #16
 8008878:	4630      	mov	r0, r6
 800887a:	f7fd fc1f 	bl	80060bc <_printf_float>
 800887e:	4607      	mov	r7, r0
 8008880:	1c78      	adds	r0, r7, #1
 8008882:	d1d6      	bne.n	8008832 <_vfiprintf_r+0x19a>
 8008884:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008886:	07d9      	lsls	r1, r3, #31
 8008888:	d405      	bmi.n	8008896 <_vfiprintf_r+0x1fe>
 800888a:	89ab      	ldrh	r3, [r5, #12]
 800888c:	059a      	lsls	r2, r3, #22
 800888e:	d402      	bmi.n	8008896 <_vfiprintf_r+0x1fe>
 8008890:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008892:	f7fe f9f7 	bl	8006c84 <__retarget_lock_release_recursive>
 8008896:	89ab      	ldrh	r3, [r5, #12]
 8008898:	065b      	lsls	r3, r3, #25
 800889a:	f53f af1f 	bmi.w	80086dc <_vfiprintf_r+0x44>
 800889e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088a0:	e71e      	b.n	80086e0 <_vfiprintf_r+0x48>
 80088a2:	ab03      	add	r3, sp, #12
 80088a4:	9300      	str	r3, [sp, #0]
 80088a6:	462a      	mov	r2, r5
 80088a8:	4b05      	ldr	r3, [pc, #20]	@ (80088c0 <_vfiprintf_r+0x228>)
 80088aa:	a904      	add	r1, sp, #16
 80088ac:	4630      	mov	r0, r6
 80088ae:	f7fd fe9d 	bl	80065ec <_printf_i>
 80088b2:	e7e4      	b.n	800887e <_vfiprintf_r+0x1e6>
 80088b4:	08008e28 	.word	0x08008e28
 80088b8:	08008e32 	.word	0x08008e32
 80088bc:	080060bd 	.word	0x080060bd
 80088c0:	08008673 	.word	0x08008673
 80088c4:	08008e2e 	.word	0x08008e2e

080088c8 <__swbuf_r>:
 80088c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ca:	460e      	mov	r6, r1
 80088cc:	4614      	mov	r4, r2
 80088ce:	4605      	mov	r5, r0
 80088d0:	b118      	cbz	r0, 80088da <__swbuf_r+0x12>
 80088d2:	6a03      	ldr	r3, [r0, #32]
 80088d4:	b90b      	cbnz	r3, 80088da <__swbuf_r+0x12>
 80088d6:	f7fe f835 	bl	8006944 <__sinit>
 80088da:	69a3      	ldr	r3, [r4, #24]
 80088dc:	60a3      	str	r3, [r4, #8]
 80088de:	89a3      	ldrh	r3, [r4, #12]
 80088e0:	071a      	lsls	r2, r3, #28
 80088e2:	d501      	bpl.n	80088e8 <__swbuf_r+0x20>
 80088e4:	6923      	ldr	r3, [r4, #16]
 80088e6:	b943      	cbnz	r3, 80088fa <__swbuf_r+0x32>
 80088e8:	4621      	mov	r1, r4
 80088ea:	4628      	mov	r0, r5
 80088ec:	f000 f82a 	bl	8008944 <__swsetup_r>
 80088f0:	b118      	cbz	r0, 80088fa <__swbuf_r+0x32>
 80088f2:	f04f 37ff 	mov.w	r7, #4294967295
 80088f6:	4638      	mov	r0, r7
 80088f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088fa:	6823      	ldr	r3, [r4, #0]
 80088fc:	6922      	ldr	r2, [r4, #16]
 80088fe:	1a98      	subs	r0, r3, r2
 8008900:	6963      	ldr	r3, [r4, #20]
 8008902:	b2f6      	uxtb	r6, r6
 8008904:	4283      	cmp	r3, r0
 8008906:	4637      	mov	r7, r6
 8008908:	dc05      	bgt.n	8008916 <__swbuf_r+0x4e>
 800890a:	4621      	mov	r1, r4
 800890c:	4628      	mov	r0, r5
 800890e:	f7ff fdaf 	bl	8008470 <_fflush_r>
 8008912:	2800      	cmp	r0, #0
 8008914:	d1ed      	bne.n	80088f2 <__swbuf_r+0x2a>
 8008916:	68a3      	ldr	r3, [r4, #8]
 8008918:	3b01      	subs	r3, #1
 800891a:	60a3      	str	r3, [r4, #8]
 800891c:	6823      	ldr	r3, [r4, #0]
 800891e:	1c5a      	adds	r2, r3, #1
 8008920:	6022      	str	r2, [r4, #0]
 8008922:	701e      	strb	r6, [r3, #0]
 8008924:	6962      	ldr	r2, [r4, #20]
 8008926:	1c43      	adds	r3, r0, #1
 8008928:	429a      	cmp	r2, r3
 800892a:	d004      	beq.n	8008936 <__swbuf_r+0x6e>
 800892c:	89a3      	ldrh	r3, [r4, #12]
 800892e:	07db      	lsls	r3, r3, #31
 8008930:	d5e1      	bpl.n	80088f6 <__swbuf_r+0x2e>
 8008932:	2e0a      	cmp	r6, #10
 8008934:	d1df      	bne.n	80088f6 <__swbuf_r+0x2e>
 8008936:	4621      	mov	r1, r4
 8008938:	4628      	mov	r0, r5
 800893a:	f7ff fd99 	bl	8008470 <_fflush_r>
 800893e:	2800      	cmp	r0, #0
 8008940:	d0d9      	beq.n	80088f6 <__swbuf_r+0x2e>
 8008942:	e7d6      	b.n	80088f2 <__swbuf_r+0x2a>

08008944 <__swsetup_r>:
 8008944:	b538      	push	{r3, r4, r5, lr}
 8008946:	4b29      	ldr	r3, [pc, #164]	@ (80089ec <__swsetup_r+0xa8>)
 8008948:	4605      	mov	r5, r0
 800894a:	6818      	ldr	r0, [r3, #0]
 800894c:	460c      	mov	r4, r1
 800894e:	b118      	cbz	r0, 8008958 <__swsetup_r+0x14>
 8008950:	6a03      	ldr	r3, [r0, #32]
 8008952:	b90b      	cbnz	r3, 8008958 <__swsetup_r+0x14>
 8008954:	f7fd fff6 	bl	8006944 <__sinit>
 8008958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800895c:	0719      	lsls	r1, r3, #28
 800895e:	d422      	bmi.n	80089a6 <__swsetup_r+0x62>
 8008960:	06da      	lsls	r2, r3, #27
 8008962:	d407      	bmi.n	8008974 <__swsetup_r+0x30>
 8008964:	2209      	movs	r2, #9
 8008966:	602a      	str	r2, [r5, #0]
 8008968:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800896c:	81a3      	strh	r3, [r4, #12]
 800896e:	f04f 30ff 	mov.w	r0, #4294967295
 8008972:	e033      	b.n	80089dc <__swsetup_r+0x98>
 8008974:	0758      	lsls	r0, r3, #29
 8008976:	d512      	bpl.n	800899e <__swsetup_r+0x5a>
 8008978:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800897a:	b141      	cbz	r1, 800898e <__swsetup_r+0x4a>
 800897c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008980:	4299      	cmp	r1, r3
 8008982:	d002      	beq.n	800898a <__swsetup_r+0x46>
 8008984:	4628      	mov	r0, r5
 8008986:	f7fe ffcb 	bl	8007920 <_free_r>
 800898a:	2300      	movs	r3, #0
 800898c:	6363      	str	r3, [r4, #52]	@ 0x34
 800898e:	89a3      	ldrh	r3, [r4, #12]
 8008990:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008994:	81a3      	strh	r3, [r4, #12]
 8008996:	2300      	movs	r3, #0
 8008998:	6063      	str	r3, [r4, #4]
 800899a:	6923      	ldr	r3, [r4, #16]
 800899c:	6023      	str	r3, [r4, #0]
 800899e:	89a3      	ldrh	r3, [r4, #12]
 80089a0:	f043 0308 	orr.w	r3, r3, #8
 80089a4:	81a3      	strh	r3, [r4, #12]
 80089a6:	6923      	ldr	r3, [r4, #16]
 80089a8:	b94b      	cbnz	r3, 80089be <__swsetup_r+0x7a>
 80089aa:	89a3      	ldrh	r3, [r4, #12]
 80089ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80089b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089b4:	d003      	beq.n	80089be <__swsetup_r+0x7a>
 80089b6:	4621      	mov	r1, r4
 80089b8:	4628      	mov	r0, r5
 80089ba:	f000 f83f 	bl	8008a3c <__smakebuf_r>
 80089be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089c2:	f013 0201 	ands.w	r2, r3, #1
 80089c6:	d00a      	beq.n	80089de <__swsetup_r+0x9a>
 80089c8:	2200      	movs	r2, #0
 80089ca:	60a2      	str	r2, [r4, #8]
 80089cc:	6962      	ldr	r2, [r4, #20]
 80089ce:	4252      	negs	r2, r2
 80089d0:	61a2      	str	r2, [r4, #24]
 80089d2:	6922      	ldr	r2, [r4, #16]
 80089d4:	b942      	cbnz	r2, 80089e8 <__swsetup_r+0xa4>
 80089d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80089da:	d1c5      	bne.n	8008968 <__swsetup_r+0x24>
 80089dc:	bd38      	pop	{r3, r4, r5, pc}
 80089de:	0799      	lsls	r1, r3, #30
 80089e0:	bf58      	it	pl
 80089e2:	6962      	ldrpl	r2, [r4, #20]
 80089e4:	60a2      	str	r2, [r4, #8]
 80089e6:	e7f4      	b.n	80089d2 <__swsetup_r+0x8e>
 80089e8:	2000      	movs	r0, #0
 80089ea:	e7f7      	b.n	80089dc <__swsetup_r+0x98>
 80089ec:	20000018 	.word	0x20000018

080089f0 <__swhatbuf_r>:
 80089f0:	b570      	push	{r4, r5, r6, lr}
 80089f2:	460c      	mov	r4, r1
 80089f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089f8:	2900      	cmp	r1, #0
 80089fa:	b096      	sub	sp, #88	@ 0x58
 80089fc:	4615      	mov	r5, r2
 80089fe:	461e      	mov	r6, r3
 8008a00:	da0d      	bge.n	8008a1e <__swhatbuf_r+0x2e>
 8008a02:	89a3      	ldrh	r3, [r4, #12]
 8008a04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008a08:	f04f 0100 	mov.w	r1, #0
 8008a0c:	bf14      	ite	ne
 8008a0e:	2340      	movne	r3, #64	@ 0x40
 8008a10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008a14:	2000      	movs	r0, #0
 8008a16:	6031      	str	r1, [r6, #0]
 8008a18:	602b      	str	r3, [r5, #0]
 8008a1a:	b016      	add	sp, #88	@ 0x58
 8008a1c:	bd70      	pop	{r4, r5, r6, pc}
 8008a1e:	466a      	mov	r2, sp
 8008a20:	f000 f848 	bl	8008ab4 <_fstat_r>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	dbec      	blt.n	8008a02 <__swhatbuf_r+0x12>
 8008a28:	9901      	ldr	r1, [sp, #4]
 8008a2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008a2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008a32:	4259      	negs	r1, r3
 8008a34:	4159      	adcs	r1, r3
 8008a36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a3a:	e7eb      	b.n	8008a14 <__swhatbuf_r+0x24>

08008a3c <__smakebuf_r>:
 8008a3c:	898b      	ldrh	r3, [r1, #12]
 8008a3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a40:	079d      	lsls	r5, r3, #30
 8008a42:	4606      	mov	r6, r0
 8008a44:	460c      	mov	r4, r1
 8008a46:	d507      	bpl.n	8008a58 <__smakebuf_r+0x1c>
 8008a48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a4c:	6023      	str	r3, [r4, #0]
 8008a4e:	6123      	str	r3, [r4, #16]
 8008a50:	2301      	movs	r3, #1
 8008a52:	6163      	str	r3, [r4, #20]
 8008a54:	b003      	add	sp, #12
 8008a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a58:	ab01      	add	r3, sp, #4
 8008a5a:	466a      	mov	r2, sp
 8008a5c:	f7ff ffc8 	bl	80089f0 <__swhatbuf_r>
 8008a60:	9f00      	ldr	r7, [sp, #0]
 8008a62:	4605      	mov	r5, r0
 8008a64:	4639      	mov	r1, r7
 8008a66:	4630      	mov	r0, r6
 8008a68:	f7fd f9fc 	bl	8005e64 <_malloc_r>
 8008a6c:	b948      	cbnz	r0, 8008a82 <__smakebuf_r+0x46>
 8008a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a72:	059a      	lsls	r2, r3, #22
 8008a74:	d4ee      	bmi.n	8008a54 <__smakebuf_r+0x18>
 8008a76:	f023 0303 	bic.w	r3, r3, #3
 8008a7a:	f043 0302 	orr.w	r3, r3, #2
 8008a7e:	81a3      	strh	r3, [r4, #12]
 8008a80:	e7e2      	b.n	8008a48 <__smakebuf_r+0xc>
 8008a82:	89a3      	ldrh	r3, [r4, #12]
 8008a84:	6020      	str	r0, [r4, #0]
 8008a86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a8a:	81a3      	strh	r3, [r4, #12]
 8008a8c:	9b01      	ldr	r3, [sp, #4]
 8008a8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a92:	b15b      	cbz	r3, 8008aac <__smakebuf_r+0x70>
 8008a94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a98:	4630      	mov	r0, r6
 8008a9a:	f000 f81d 	bl	8008ad8 <_isatty_r>
 8008a9e:	b128      	cbz	r0, 8008aac <__smakebuf_r+0x70>
 8008aa0:	89a3      	ldrh	r3, [r4, #12]
 8008aa2:	f023 0303 	bic.w	r3, r3, #3
 8008aa6:	f043 0301 	orr.w	r3, r3, #1
 8008aaa:	81a3      	strh	r3, [r4, #12]
 8008aac:	89a3      	ldrh	r3, [r4, #12]
 8008aae:	431d      	orrs	r5, r3
 8008ab0:	81a5      	strh	r5, [r4, #12]
 8008ab2:	e7cf      	b.n	8008a54 <__smakebuf_r+0x18>

08008ab4 <_fstat_r>:
 8008ab4:	b538      	push	{r3, r4, r5, lr}
 8008ab6:	4d07      	ldr	r5, [pc, #28]	@ (8008ad4 <_fstat_r+0x20>)
 8008ab8:	2300      	movs	r3, #0
 8008aba:	4604      	mov	r4, r0
 8008abc:	4608      	mov	r0, r1
 8008abe:	4611      	mov	r1, r2
 8008ac0:	602b      	str	r3, [r5, #0]
 8008ac2:	f7f9 fded 	bl	80026a0 <_fstat>
 8008ac6:	1c43      	adds	r3, r0, #1
 8008ac8:	d102      	bne.n	8008ad0 <_fstat_r+0x1c>
 8008aca:	682b      	ldr	r3, [r5, #0]
 8008acc:	b103      	cbz	r3, 8008ad0 <_fstat_r+0x1c>
 8008ace:	6023      	str	r3, [r4, #0]
 8008ad0:	bd38      	pop	{r3, r4, r5, pc}
 8008ad2:	bf00      	nop
 8008ad4:	200004e0 	.word	0x200004e0

08008ad8 <_isatty_r>:
 8008ad8:	b538      	push	{r3, r4, r5, lr}
 8008ada:	4d06      	ldr	r5, [pc, #24]	@ (8008af4 <_isatty_r+0x1c>)
 8008adc:	2300      	movs	r3, #0
 8008ade:	4604      	mov	r4, r0
 8008ae0:	4608      	mov	r0, r1
 8008ae2:	602b      	str	r3, [r5, #0]
 8008ae4:	f7f9 fdec 	bl	80026c0 <_isatty>
 8008ae8:	1c43      	adds	r3, r0, #1
 8008aea:	d102      	bne.n	8008af2 <_isatty_r+0x1a>
 8008aec:	682b      	ldr	r3, [r5, #0]
 8008aee:	b103      	cbz	r3, 8008af2 <_isatty_r+0x1a>
 8008af0:	6023      	str	r3, [r4, #0]
 8008af2:	bd38      	pop	{r3, r4, r5, pc}
 8008af4:	200004e0 	.word	0x200004e0

08008af8 <_init>:
 8008af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008afa:	bf00      	nop
 8008afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008afe:	bc08      	pop	{r3}
 8008b00:	469e      	mov	lr, r3
 8008b02:	4770      	bx	lr

08008b04 <_fini>:
 8008b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b06:	bf00      	nop
 8008b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b0a:	bc08      	pop	{r3}
 8008b0c:	469e      	mov	lr, r3
 8008b0e:	4770      	bx	lr
