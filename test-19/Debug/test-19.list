
test-19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009474  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  08009618  08009618  0000a618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009aa0  08009aa0  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009aa0  08009aa0  0000aaa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009aa8  08009aa8  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009aa8  08009aa8  0000aaa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009aac  08009aac  0000aaac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009ab0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  200001d4  08009c84  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000524  08009c84  0000b524  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145f0  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032ac  00000000  00000000  0001f7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  00022aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d80  00000000  00000000  00023bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001afa0  00000000  00000000  00024958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000157ca  00000000  00000000  0003f8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000975f5  00000000  00000000  000550c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec6b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a64  00000000  00000000  000ec6fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  000f2160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080095fc 	.word	0x080095fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	080095fc 	.word	0x080095fc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <_ZN12MotorControlC1EP15TB6612FNG_MotorP13PololuEncodermfff>:
 * @date Jun 2, 2024
 */

#include "MotorControl.h"

MotorControl::MotorControl(
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	61f8      	str	r0, [r7, #28]
 8000eb0:	61b9      	str	r1, [r7, #24]
 8000eb2:	617a      	str	r2, [r7, #20]
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	ed87 0a03 	vstr	s0, [r7, #12]
 8000eba:	edc7 0a02 	vstr	s1, [r7, #8]
 8000ebe:	ed87 1a01 	vstr	s2, [r7, #4]
		: motor(motor),
		  encoder(encoder),
		  control_frequency_Hz(control_frequency_Hz),
		  K_P(K_P),
		  K_I(K_I),
		  K_D(K_D)
 8000ec2:	4a16      	ldr	r2, [pc, #88]	@ (8000f1c <_ZN12MotorControlC1EP15TB6612FNG_MotorP13PololuEncodermfff+0x74>)
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	601a      	str	r2, [r3, #0]
		: motor(motor),
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	605a      	str	r2, [r3, #4]
		  encoder(encoder),
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	609a      	str	r2, [r3, #8]
		  control_frequency_Hz(control_frequency_Hz),
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	60da      	str	r2, [r3, #12]
		  K_P(K_P),
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	68fa      	ldr	r2, [r7, #12]
 8000ede:	611a      	str	r2, [r3, #16]
		  K_I(K_I),
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	615a      	str	r2, [r3, #20]
		  K_D(K_D)
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	619a      	str	r2, [r3, #24]
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f04f 0200 	mov.w	r2, #0
 8000ef2:	61da      	str	r2, [r3, #28]
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f04f 0200 	mov.w	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f04f 0200 	mov.w	r2, #0
 8000f02:	625a      	str	r2, [r3, #36]	@ 0x24
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	2200      	movs	r2, #0
 8000f08:	859a      	strh	r2, [r3, #44]	@ 0x2c
{
	reinitialize();
 8000f0a:	69f8      	ldr	r0, [r7, #28]
 8000f0c:	f000 f95b 	bl	80011c6 <_ZN12MotorControl12reinitializeEv>
}
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	4618      	mov	r0, r3
 8000f14:	3720      	adds	r7, #32
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	080096bc 	.word	0x080096bc

08000f20 <_ZN12MotorControlD1Ev>:

MotorControl::~MotorControl()
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	4a06      	ldr	r2, [pc, #24]	@ (8000f44 <_ZN12MotorControlD1Ev+0x24>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	601a      	str	r2, [r3, #0]
{
	motor->stop();
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 feed 	bl	8001d12 <_ZN15TB6612FNG_Motor4stopEv>
}
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	080096bc 	.word	0x080096bc

08000f48 <_ZN12MotorControlD0Ev>:
MotorControl::~MotorControl()
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
}
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff ffe5 	bl	8000f20 <_ZN12MotorControlD1Ev>
 8000f56:	2134      	movs	r1, #52	@ 0x34
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f005 fccd 	bl	80068f8 <_ZdlPvj>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <_ZN12MotorControl13debug_messageEP20__UART_HandleTypeDef>:


void MotorControl::debug_message(UART_HandleTypeDef* uart_handle)
{
 8000f68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f6c:	b0ad      	sub	sp, #180	@ 0xb4
 8000f6e:	af0e      	add	r7, sp, #56	@ 0x38
 8000f70:	60f8      	str	r0, [r7, #12]
 8000f72:	60b9      	str	r1, [r7, #8]
	#define VALUE_WIDTH 5
	#define MESSAGE_LENGTH 100
	char my_message[MESSAGE_LENGTH] = "";
 8000f74:	2300      	movs	r3, #0
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2260      	movs	r2, #96	@ 0x60
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f006 fb2e 	bl	80075e2 <memset>
    int string_length = snprintf(my_message, MESSAGE_LENGTH, "SP %*.2f, EFF: %*i/%*i, ERR: %*.3f RPM, Intgtr: %*.3f \r\n",
    						 VALUE_WIDTH, SP,
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    int string_length = snprintf(my_message, MESSAGE_LENGTH, "SP %*.2f, EFF: %*i/%*i, ERR: %*.3f RPM, Intgtr: %*.3f \r\n",
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fae4 	bl	8000558 <__aeabi_f2d>
 8000f90:	4604      	mov	r4, r0
 8000f92:	460d      	mov	r5, r1
                             VALUE_WIDTH, effort,
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
    int string_length = snprintf(my_message, MESSAGE_LENGTH, "SP %*.2f, EFF: %*i/%*i, ERR: %*.3f RPM, Intgtr: %*.3f \r\n",
 8000f9a:	461e      	mov	r6, r3
							 VALUE_WIDTH, saturation_limit,
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
    int string_length = snprintf(my_message, MESSAGE_LENGTH, "SP %*.2f, EFF: %*i/%*i, ERR: %*.3f RPM, Intgtr: %*.3f \r\n",
 8000fa2:	607b      	str	r3, [r7, #4]
							 VALUE_WIDTH, error,
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	6a1b      	ldr	r3, [r3, #32]
    int string_length = snprintf(my_message, MESSAGE_LENGTH, "SP %*.2f, EFF: %*i/%*i, ERR: %*.3f RPM, Intgtr: %*.3f \r\n",
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fad5 	bl	8000558 <__aeabi_f2d>
 8000fae:	4680      	mov	r8, r0
 8000fb0:	4689      	mov	r9, r1
							 VALUE_WIDTH, running_error );
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    int string_length = snprintf(my_message, MESSAGE_LENGTH, "SP %*.2f, EFF: %*i/%*i, ERR: %*.3f RPM, Intgtr: %*.3f \r\n",
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff face 	bl	8000558 <__aeabi_f2d>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	f107 0010 	add.w	r0, r7, #16
 8000fc4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8000fc8:	2305      	movs	r3, #5
 8000fca:	930a      	str	r3, [sp, #40]	@ 0x28
 8000fcc:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8000fd0:	2305      	movs	r3, #5
 8000fd2:	9306      	str	r3, [sp, #24]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	9305      	str	r3, [sp, #20]
 8000fd8:	2305      	movs	r3, #5
 8000fda:	9304      	str	r3, [sp, #16]
 8000fdc:	9603      	str	r6, [sp, #12]
 8000fde:	2305      	movs	r3, #5
 8000fe0:	9302      	str	r3, [sp, #8]
 8000fe2:	e9cd 4500 	strd	r4, r5, [sp]
 8000fe6:	2305      	movs	r3, #5
 8000fe8:	4a0c      	ldr	r2, [pc, #48]	@ (800101c <_ZN12MotorControl13debug_messageEP20__UART_HandleTypeDef+0xb4>)
 8000fea:	2164      	movs	r1, #100	@ 0x64
 8000fec:	f006 fa82 	bl	80074f4 <sniprintf>
 8000ff0:	6778      	str	r0, [r7, #116]	@ 0x74
    HAL_UART_Transmit(uart_handle, (uint8_t*)my_message, string_length, HAL_MAX_DELAY);
 8000ff2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	f107 0110 	add.w	r1, r7, #16
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	68b8      	ldr	r0, [r7, #8]
 8001000:	f005 f8be 	bl	8006180 <HAL_UART_Transmit>
    encoder->debug_message(uart_handle);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f9f4 	bl	80013f8 <_ZN13PololuEncoder13debug_messageEP20__UART_HandleTypeDef>
}
 8001010:	bf00      	nop
 8001012:	377c      	adds	r7, #124	@ 0x7c
 8001014:	46bd      	mov	sp, r7
 8001016:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800101a:	bf00      	nop
 800101c:	08009618 	.word	0x08009618

08001020 <_ZN12MotorControl3runEf>:

void MotorControl::run(float setpoint)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	ed87 0a00 	vstr	s0, [r7]
	// Store to the class
	SP = setpoint;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	631a      	str	r2, [r3, #48]	@ 0x30

	// Grab the latest data from the encoder.
	encoder->update();
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	4618      	mov	r0, r3
 8001038:	f000 f946 	bl	80012c8 <_ZN13PololuEncoder6updateEv>
	float process_value = encoder->get_speed(control_frequency_Hz);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	4619      	mov	r1, r3
 8001046:	4610      	mov	r0, r2
 8001048:	f000 f998 	bl	800137c <_ZN13PololuEncoder9get_speedEm>
 800104c:	ed87 0a03 	vstr	s0, [r7, #12]

	// Get the effort and send to motor
	get_effort_sat(setpoint, process_value);
 8001050:	edd7 0a03 	vldr	s1, [r7, #12]
 8001054:	ed97 0a00 	vldr	s0, [r7]
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f000 f80f 	bl	800107c <_ZN12MotorControl14get_effort_satEff>
	motor->set_duty(effort, saturation_limit);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6858      	ldr	r0, [r3, #4]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f9b3 102c 	ldrsh.w	r1, [r3, #44]	@ 0x2c
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 800106e:	461a      	mov	r2, r3
 8001070:	f000 fdd0 	bl	8001c14 <_ZN15TB6612FNG_Motor8set_dutyEss>
}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <_ZN12MotorControl14get_effort_satEff>:

int16_t MotorControl::get_effort_sat(
					float setpoint,
					float process_value
					)
{
 800107c:	b480      	push	{r7}
 800107e:	b089      	sub	sp, #36	@ 0x24
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	ed87 0a02 	vstr	s0, [r7, #8]
 8001088:	edc7 0a01 	vstr	s1, [r7, #4]
	// Calculating error for P control
	error = setpoint - process_value; // RPM, a float
 800108c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001090:	edd7 7a01 	vldr	s15, [r7, #4]
 8001094:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	edc3 7a08 	vstr	s15, [r3, #32]

	// Calculating running error for I control
	running_error += error/(control_frequency_Hz); // RPM*s, float arithmetic cast to an int
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	ed93 6a08 	vldr	s12, [r3, #32]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	ee07 3a90 	vmov	s15, r3
 80010b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80010b6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80010ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
//	{
//		running_error += 0;
//	}

	// Calculating error slope for D control
	error_slope = (error-last_error)*((float)control_frequency_Hz); // RPM/s, a float
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	ed93 7a08 	vldr	s14, [r3, #32]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	edd3 7a07 	vldr	s15, [r3, #28]
 80010d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	ee07 3a90 	vmov	s15, r3
 80010dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	last_error = error;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6a1a      	ldr	r2, [r3, #32]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	61da      	str	r2, [r3, #28]

	// Controller effort
    float P_effort = K_P*error;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	ed93 7a04 	vldr	s14, [r3, #16]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	edd3 7a08 	vldr	s15, [r3, #32]
 80010fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001102:	edc7 7a07 	vstr	s15, [r7, #28]
    float I_effort = K_I*running_error;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	ed93 7a05 	vldr	s14, [r3, #20]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001116:	edc7 7a06 	vstr	s15, [r7, #24]
    float D_effort = K_D*error_slope;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112a:	edc7 7a05 	vstr	s15, [r7, #20]
    float effort_unsat = P_effort + I_effort + D_effort;
 800112e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001132:	edd7 7a06 	vldr	s15, [r7, #24]
 8001136:	ee77 7a27 	vadd.f32	s15, s14, s15
 800113a:	ed97 7a05 	vldr	s14, [r7, #20]
 800113e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001142:	edc7 7a04 	vstr	s15, [r7, #16]

    // Saturation
	if (effort_unsat > (float)saturation_limit)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 800114c:	ee07 3a90 	vmov	s15, r3
 8001150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001154:	ed97 7a04 	vldr	s14, [r7, #16]
 8001158:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800115c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001160:	dd05      	ble.n	800116e <_ZN12MotorControl14get_effort_satEff+0xf2>
	{
		effort = saturation_limit;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	@ 0x2e
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	859a      	strh	r2, [r3, #44]	@ 0x2c
 800116c:	e022      	b.n	80011b4 <_ZN12MotorControl14get_effort_satEff+0x138>
	}
	else if (effort_unsat < -1*(float)saturation_limit)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8001174:	ee07 3a90 	vmov	s15, r3
 8001178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800117c:	eef1 7a67 	vneg.f32	s15, s15
 8001180:	ed97 7a04 	vldr	s14, [r7, #16]
 8001184:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118c:	d509      	bpl.n	80011a2 <_ZN12MotorControl14get_effort_satEff+0x126>
	{
		effort = -saturation_limit;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8001194:	b29b      	uxth	r3, r3
 8001196:	425b      	negs	r3, r3
 8001198:	b29b      	uxth	r3, r3
 800119a:	b21a      	sxth	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	859a      	strh	r2, [r3, #44]	@ 0x2c
 80011a0:	e008      	b.n	80011b4 <_ZN12MotorControl14get_effort_satEff+0x138>
	}
	else
	{
		effort = (int16_t)effort_unsat;
 80011a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80011a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011aa:	ee17 3a90 	vmov	r3, s15
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	859a      	strh	r2, [r3, #44]	@ 0x2c
	}

	return effort;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3724      	adds	r7, #36	@ 0x24
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <_ZN12MotorControl12reinitializeEv>:

void MotorControl::reinitialize()
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
	// Stop motor
	motor->set_duty(0);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2264      	movs	r2, #100	@ 0x64
 80011d4:	2100      	movs	r1, #0
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 fd1c 	bl	8001c14 <_ZN15TB6612FNG_Motor8set_dutyEss>

	// Reset important stuff
	last_error = 0;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	61da      	str	r2, [r3, #28]
    error = 0;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f04f 0200 	mov.w	r2, #0
 80011ea:	621a      	str	r2, [r3, #32]
    effort = 0;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	859a      	strh	r2, [r3, #44]	@ 0x2c
    running_error = 0; // Most important
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f04f 0200 	mov.w	r2, #0
 80011f8:	625a      	str	r2, [r3, #36]	@ 0x24

    // Grab the new saturation limit.
    saturation_limit = motor->timer_handle->Instance->ARR; // Assuming no prescalar is used.
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	695b      	ldr	r3, [r3, #20]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001204:	b21a      	sxth	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	85da      	strh	r2, [r3, #46]	@ 0x2e
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb>:
 * @date Jun 2, 2024
 */

#include "PololuEncoder.h"

PololuEncoder::PololuEncoder(
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	4611      	mov	r1, r2
 8001220:	ed87 0a00 	vstr	s0, [r7]
 8001224:	461a      	mov	r2, r3
 8001226:	460b      	mov	r3, r1
 8001228:	80fb      	strh	r3, [r7, #6]
 800122a:	4613      	mov	r3, r2
 800122c:	717b      	strb	r3, [r7, #5]
		)
		: timer_handle(timer_handle),
		  CPR(CPR),
		  gear_ratio(gear_ratio),
		  timer_bit_size(timer_bit_size),
		  interrupt_mode(interrupt_mode)
 800122e:	4a25      	ldr	r2, [pc, #148]	@ (80012c4 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0xb0>)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	601a      	str	r2, [r3, #0]
		: timer_handle(timer_handle),
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	605a      	str	r2, [r3, #4]
		  CPR(CPR),
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	88fa      	ldrh	r2, [r7, #6]
 800123e:	811a      	strh	r2, [r3, #8]
		  gear_ratio(gear_ratio),
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	683a      	ldr	r2, [r7, #0]
 8001244:	60da      	str	r2, [r3, #12]
		  timer_bit_size(timer_bit_size),
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	797a      	ldrb	r2, [r7, #5]
 800124a:	741a      	strb	r2, [r3, #16]
		  interrupt_mode(interrupt_mode)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	7e3a      	ldrb	r2, [r7, #24]
 8001250:	745a      	strb	r2, [r3, #17]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2200      	movs	r2, #0
 8001256:	825a      	strh	r2, [r3, #18]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2200      	movs	r2, #0
 800125c:	829a      	strh	r2, [r3, #20]
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2200      	movs	r2, #0
 8001262:	82da      	strh	r2, [r3, #22]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
{
	// Start encoder
	if (interrupt_mode)
 8001272:	7e3b      	ldrb	r3, [r7, #24]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d004      	beq.n	8001282 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0x6e>
	{
		HAL_TIM_Encoder_Start_IT(timer_handle, TIM_CHANNEL_ALL);
 8001278:	213c      	movs	r1, #60	@ 0x3c
 800127a:	68b8      	ldr	r0, [r7, #8]
 800127c:	f003 fddd 	bl	8004e3a <HAL_TIM_Encoder_Start_IT>
 8001280:	e003      	b.n	800128a <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0x76>
	}
	else
	{
		HAL_TIM_Encoder_Start(timer_handle, TIM_CHANNEL_ALL);
 8001282:	213c      	movs	r1, #60	@ 0x3c
 8001284:	68b8      	ldr	r0, [r7, #8]
 8001286:	f003 fcb3 	bl	8004bf0 <HAL_TIM_Encoder_Start>
	}

	// Number of bits for the select timer
	if (timer_bit_size == 32)
 800128a:	797b      	ldrb	r3, [r7, #5]
 800128c:	2b20      	cmp	r3, #32
 800128e:	d104      	bne.n	800129a <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0x86>
	{
		max_count = 0xffffffff;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f04f 32ff 	mov.w	r2, #4294967295
 8001296:	621a      	str	r2, [r3, #32]
 8001298:	e003      	b.n	80012a2 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0x8e>
	}
	else
	{
		max_count = 0xffff;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012a0:	621a      	str	r2, [r3, #32]
	}

	// Set pertinent values for later.
	half_max_count = max_count/2;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	6a1b      	ldr	r3, [r3, #32]
 80012a6:	085b      	lsrs	r3, r3, #1
 80012a8:	461a      	mov	r2, r3
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	625a      	str	r2, [r3, #36]	@ 0x24
	neg_half_max_count = -half_max_count;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b2:	425a      	negs	r2, r3
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	080096cc 	.word	0x080096cc

080012c8 <_ZN13PololuEncoder6updateEv>:

void PololuEncoder::update()
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	// Read encoder
	if (not interrupt_mode)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	7c5b      	ldrb	r3, [r3, #17]
 80012d4:	f083 0301 	eor.w	r3, r3, #1
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d006      	beq.n	80012ec <_ZN13PololuEncoder6updateEv+0x24>
	{
		count = __HAL_TIM_GET_COUNTER(timer_handle);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	82da      	strh	r2, [r3, #22]
	}
	delta = (int32_t) (count-last_count);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	8ada      	ldrh	r2, [r3, #22]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	8a9b      	ldrh	r3, [r3, #20]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	b21a      	sxth	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	825a      	strh	r2, [r3, #18]
	last_count = count;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	8ada      	ldrh	r2, [r3, #22]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	829a      	strh	r2, [r3, #20]

	// Fix delta from timer overflow
	if (delta > half_max_count)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800130c:	461a      	mov	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001312:	429a      	cmp	r2, r3
 8001314:	dd0e      	ble.n	8001334 <_ZN13PololuEncoder6updateEv+0x6c>
	{
		// We've overflowed in the negative direction.
		delta -= max_count + 1;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800131c:	b29a      	uxth	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a1b      	ldr	r3, [r3, #32]
 8001322:	b29b      	uxth	r3, r3
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	b29b      	uxth	r3, r3
 8001328:	3b01      	subs	r3, #1
 800132a:	b29b      	uxth	r3, r3
 800132c:	b21a      	sxth	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	825a      	strh	r2, [r3, #18]
 8001332:	e015      	b.n	8001360 <_ZN13PololuEncoder6updateEv+0x98>
	}
	else if (delta < neg_half_max_count)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800133a:	461a      	mov	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001340:	429a      	cmp	r2, r3
 8001342:	da0d      	bge.n	8001360 <_ZN13PololuEncoder6updateEv+0x98>
	{
	    // We've overflowed in the positive direciton.
		delta += max_count + 1;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800134a:	b29a      	uxth	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	b29b      	uxth	r3, r3
 8001352:	4413      	add	r3, r2
 8001354:	b29b      	uxth	r3, r3
 8001356:	3301      	adds	r3, #1
 8001358:	b29b      	uxth	r3, r3
 800135a:	b21a      	sxth	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	825a      	strh	r2, [r3, #18]
	}

	// Finish up
	position += delta;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800136a:	441a      	add	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	619a      	str	r2, [r3, #24]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <_ZN13PololuEncoder9get_speedEm>:
{
	return delta;
}

float PololuEncoder::get_speed(uint32_t control_frequency_Hz)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
	float numerator = delta*(float)control_frequency_Hz*60;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800138c:	ee07 3a90 	vmov	s15, r3
 8001390:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	ee07 3a90 	vmov	s15, r3
 800139a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800139e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013a2:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80013f4 <_ZN13PololuEncoder9get_speedEm+0x78>
 80013a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013aa:	edc7 7a03 	vstr	s15, [r7, #12]
	float denominator = (float)CPR*gear_ratio;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	edd3 7a03 	vldr	s15, [r3, #12]
 80013c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013c6:	edc7 7a02 	vstr	s15, [r7, #8]
    speed = numerator/denominator; //RPM
 80013ca:	edd7 6a03 	vldr	s13, [r7, #12]
 80013ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80013d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	edc3 7a07 	vstr	s15, [r3, #28]
    return speed;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69db      	ldr	r3, [r3, #28]
 80013e0:	ee07 3a90 	vmov	s15, r3
}
 80013e4:	eeb0 0a67 	vmov.f32	s0, s15
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	42700000 	.word	0x42700000

080013f8 <_ZN13PololuEncoder13debug_messageEP20__UART_HandleTypeDef>:

void PololuEncoder::debug_message(UART_HandleTypeDef* uart_handle)
{
 80013f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fa:	b0a5      	sub	sp, #148	@ 0x94
 80013fc:	af08      	add	r7, sp, #32
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
	#define VALUE_WIDTH 5
	#define MESSAGE_LENGTH 100
	char my_message[MESSAGE_LENGTH] = "";
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	2260      	movs	r2, #96	@ 0x60
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f006 f8e7 	bl	80075e2 <memset>
    int string_length = snprintf(my_message, MESSAGE_LENGTH, "Encoder cnt: %*i, pos: %*li, delta: %*i, speed: %*.3f RPM.\r\n",
                             VALUE_WIDTH, count,
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	8adb      	ldrh	r3, [r3, #22]
    int string_length = snprintf(my_message, MESSAGE_LENGTH, "Encoder cnt: %*i, pos: %*li, delta: %*i, speed: %*.3f RPM.\r\n",
 8001418:	461d      	mov	r5, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	699c      	ldr	r4, [r3, #24]
                             VALUE_WIDTH, position,
                             VALUE_WIDTH, delta,
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
    int string_length = snprintf(my_message, MESSAGE_LENGTH, "Encoder cnt: %*i, pos: %*li, delta: %*i, speed: %*.3f RPM.\r\n",
 8001424:	461e      	mov	r6, r3
							 VALUE_WIDTH+3, speed);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69db      	ldr	r3, [r3, #28]
    int string_length = snprintf(my_message, MESSAGE_LENGTH, "Encoder cnt: %*i, pos: %*li, delta: %*i, speed: %*.3f RPM.\r\n",
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff f894 	bl	8000558 <__aeabi_f2d>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	f107 0008 	add.w	r0, r7, #8
 8001438:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800143c:	2308      	movs	r3, #8
 800143e:	9305      	str	r3, [sp, #20]
 8001440:	9604      	str	r6, [sp, #16]
 8001442:	2305      	movs	r3, #5
 8001444:	9303      	str	r3, [sp, #12]
 8001446:	9402      	str	r4, [sp, #8]
 8001448:	2305      	movs	r3, #5
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	9500      	str	r5, [sp, #0]
 800144e:	2305      	movs	r3, #5
 8001450:	4a08      	ldr	r2, [pc, #32]	@ (8001474 <_ZN13PololuEncoder13debug_messageEP20__UART_HandleTypeDef+0x7c>)
 8001452:	2164      	movs	r1, #100	@ 0x64
 8001454:	f006 f84e 	bl	80074f4 <sniprintf>
 8001458:	66f8      	str	r0, [r7, #108]	@ 0x6c
    HAL_UART_Transmit(uart_handle, (uint8_t*)my_message, string_length, HAL_MAX_DELAY);
 800145a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800145c:	b29a      	uxth	r2, r3
 800145e:	f107 0108 	add.w	r1, r7, #8
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	6838      	ldr	r0, [r7, #0]
 8001468:	f004 fe8a 	bl	8006180 <HAL_UART_Transmit>
}
 800146c:	bf00      	nop
 800146e:	3774      	adds	r7, #116	@ 0x74
 8001470:	46bd      	mov	sp, r7
 8001472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001474:	08009654 	.word	0x08009654

08001478 <_ZN13PololuEncoderD1Ev>:

PololuEncoder::~PololuEncoder()
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	4a0c      	ldr	r2, [pc, #48]	@ (80014b4 <_ZN13PololuEncoderD1Ev+0x3c>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	601a      	str	r2, [r3, #0]
{
	// Stop encoder
	if (interrupt_mode)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	7c5b      	ldrb	r3, [r3, #17]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d006      	beq.n	800149c <_ZN13PololuEncoderD1Ev+0x24>
	{
		HAL_TIM_Encoder_Stop_IT(timer_handle, TIM_CHANNEL_ALL);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	213c      	movs	r1, #60	@ 0x3c
 8001494:	4618      	mov	r0, r3
 8001496:	f003 fd7e 	bl	8004f96 <HAL_TIM_Encoder_Stop_IT>
 800149a:	e005      	b.n	80014a8 <_ZN13PololuEncoderD1Ev+0x30>
	}
	else
	{
		HAL_TIM_Encoder_Stop(timer_handle, TIM_CHANNEL_ALL);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	213c      	movs	r1, #60	@ 0x3c
 80014a2:	4618      	mov	r0, r3
 80014a4:	f003 fc32 	bl	8004d0c <HAL_TIM_Encoder_Stop>
	}
}
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	080096cc 	.word	0x080096cc

080014b8 <_ZN13PololuEncoderD0Ev>:
PololuEncoder::~PololuEncoder()
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
}
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ffd9 	bl	8001478 <_ZN13PololuEncoderD1Ev>
 80014c6:	212c      	movs	r1, #44	@ 0x2c
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f005 fa15 	bl	80068f8 <_ZdlPvj>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <_ZN11PololuServoC1EP17TIM_HandleTypeDefmtmtttt>:
 * @date Jun 3, 2024
 */

#include "PololuServo.h"

PololuServo::PololuServo(TIM_HandleTypeDef* timer_handle,
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
 80014e4:	807b      	strh	r3, [r7, #2]
						  PWM_period_us(PWM_period_us),
						  CPU_clock_speed_MHz(CPU_clock_speed_MHz),
						  maximum_angle_magnitude(maximum_angle_magnitude),
						  full_left_pulse_width_us(full_left_pulse_width_us),
						  neutral_pulse_width_us(neutral_pulse_width_us),
						  full_right_pulse_width_us(full_right_pulse_width_us)
 80014e6:	4a1e      	ldr	r2, [pc, #120]	@ (8001560 <_ZN11PololuServoC1EP17TIM_HandleTypeDefmtmtttt+0x88>)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	601a      	str	r2, [r3, #0]
						: timer_handle(timer_handle),
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	605a      	str	r2, [r3, #4]
						  timer_channel(timer_channel),
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	609a      	str	r2, [r3, #8]
						  PWM_period_us(PWM_period_us),
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	887a      	ldrh	r2, [r7, #2]
 80014fc:	819a      	strh	r2, [r3, #12]
						  CPU_clock_speed_MHz(CPU_clock_speed_MHz),
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	611a      	str	r2, [r3, #16]
						  maximum_angle_magnitude(maximum_angle_magnitude),
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	8bba      	ldrh	r2, [r7, #28]
 8001508:	829a      	strh	r2, [r3, #20]
						  full_left_pulse_width_us(full_left_pulse_width_us),
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	8c3a      	ldrh	r2, [r7, #32]
 800150e:	82da      	strh	r2, [r3, #22]
						  neutral_pulse_width_us(neutral_pulse_width_us),
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001514:	831a      	strh	r2, [r3, #24]
						  full_right_pulse_width_us(full_right_pulse_width_us)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800151a:	835a      	strh	r2, [r3, #26]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001522:	839a      	strh	r2, [r3, #28]
{
	// Set correct PWM period.
	timer_handle->Instance->ARR = autoreload_value;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	8b9a      	ldrh	r2, [r3, #28]
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	62da      	str	r2, [r3, #44]	@ 0x2c
	timer_handle->Instance->PSC = (CPU_clock_speed_MHz * PWM_period_us)/autoreload_value;
 800152e:	887b      	ldrh	r3, [r7, #2]
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	fb03 f202 	mul.w	r2, r3, r2
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	8b9b      	ldrh	r3, [r3, #28]
 800153a:	4619      	mov	r1, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	fbb2 f2f1 	udiv	r2, r2, r1
 8001544:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_TIM_PWM_Start(timer_handle, timer_channel);
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	68b8      	ldr	r0, [r7, #8]
 800154a:	f002 ff75 	bl	8004438 <HAL_TIM_PWM_Start>

	// Home servo
	set_position(0);
 800154e:	2100      	movs	r1, #0
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f000 f807 	bl	8001564 <_ZN11PololuServo12set_positionEs>
}
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	080096dc 	.word	0x080096dc

08001564 <_ZN11PololuServo12set_positionEs>:

void PololuServo::set_position(int16_t position_deg) // should be int8_t
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	807b      	strh	r3, [r7, #2]
	// Saturate requested position
	if (position_deg > maximum_angle_magnitude){
 8001570:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	8a92      	ldrh	r2, [r2, #20]
 8001578:	4293      	cmp	r3, r2
 800157a:	dd03      	ble.n	8001584 <_ZN11PololuServo12set_positionEs+0x20>
		position_deg = maximum_angle_magnitude;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	8a9b      	ldrh	r3, [r3, #20]
 8001580:	807b      	strh	r3, [r7, #2]
 8001582:	e00b      	b.n	800159c <_ZN11PololuServo12set_positionEs+0x38>
	}
	else if (position_deg < -maximum_angle_magnitude)
 8001584:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	8a9b      	ldrh	r3, [r3, #20]
 800158c:	425b      	negs	r3, r3
 800158e:	429a      	cmp	r2, r3
 8001590:	da04      	bge.n	800159c <_ZN11PololuServo12set_positionEs+0x38>
	{
		position_deg = -maximum_angle_magnitude;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	8a9b      	ldrh	r3, [r3, #20]
 8001596:	425b      	negs	r3, r3
 8001598:	b29b      	uxth	r3, r3
 800159a:	807b      	strh	r3, [r7, #2]
	}

	// Convert the postion requested from degrees to a pulse width in microseconds.
	float slope;
	if (position_deg>=0)
 800159c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	db18      	blt.n	80015d6 <_ZN11PololuServo12set_positionEs+0x72>
	{
		slope = ((float)full_right_pulse_width_us - (float)neutral_pulse_width_us)/(float)maximum_angle_magnitude;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	8b5b      	ldrh	r3, [r3, #26]
 80015a8:	ee07 3a90 	vmov	s15, r3
 80015ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	8b1b      	ldrh	r3, [r3, #24]
 80015b4:	ee07 3a90 	vmov	s15, r3
 80015b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015bc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	8a9b      	ldrh	r3, [r3, #20]
 80015c4:	ee07 3a90 	vmov	s15, r3
 80015c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015d0:	edc7 7a03 	vstr	s15, [r7, #12]
 80015d4:	e017      	b.n	8001606 <_ZN11PololuServo12set_positionEs+0xa2>
	}
	else
	{
		slope = ((float)neutral_pulse_width_us - (float)full_left_pulse_width_us)/(float)maximum_angle_magnitude;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	8b1b      	ldrh	r3, [r3, #24]
 80015da:	ee07 3a90 	vmov	s15, r3
 80015de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	8adb      	ldrh	r3, [r3, #22]
 80015e6:	ee07 3a90 	vmov	s15, r3
 80015ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015ee:	ee77 6a67 	vsub.f32	s13, s14, s15
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	8a9b      	ldrh	r3, [r3, #20]
 80015f6:	ee07 3a90 	vmov	s15, r3
 80015fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001602:	edc7 7a03 	vstr	s15, [r7, #12]
	//	{
	//		slope *= -1;
	//	}

	// Calculate compare value from pulse width
	uint16_t pulse_width = slope*position_deg + neutral_pulse_width_us;
 8001606:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800160a:	ee07 3a90 	vmov	s15, r3
 800160e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001612:	edd7 7a03 	vldr	s15, [r7, #12]
 8001616:	ee27 7a27 	vmul.f32	s14, s14, s15
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	8b1b      	ldrh	r3, [r3, #24]
 800161e:	ee07 3a90 	vmov	s15, r3
 8001622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001626:	ee77 7a27 	vadd.f32	s15, s14, s15
 800162a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800162e:	ee17 3a90 	vmov	r3, s15
 8001632:	817b      	strh	r3, [r7, #10]
	uint16_t compare_value = pulse_width*autoreload_value/PWM_period_us;
 8001634:	897b      	ldrh	r3, [r7, #10]
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	8b92      	ldrh	r2, [r2, #28]
 800163a:	fb02 f303 	mul.w	r3, r2, r3
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	8992      	ldrh	r2, [r2, #12]
 8001642:	fb93 f3f2 	sdiv	r3, r3, r2
 8001646:	813b      	strh	r3, [r7, #8]
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d105      	bne.n	800165c <_ZN11PololuServo12set_positionEs+0xf8>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	893a      	ldrh	r2, [r7, #8]
 8001658:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800165a:	e018      	b.n	800168e <_ZN11PololuServo12set_positionEs+0x12a>
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	2b04      	cmp	r3, #4
 8001662:	d105      	bne.n	8001670 <_ZN11PololuServo12set_positionEs+0x10c>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	893a      	ldrh	r2, [r7, #8]
 800166c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800166e:	e00e      	b.n	800168e <_ZN11PololuServo12set_positionEs+0x12a>
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2b08      	cmp	r3, #8
 8001676:	d105      	bne.n	8001684 <_ZN11PololuServo12set_positionEs+0x120>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	893a      	ldrh	r2, [r7, #8]
 8001680:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001682:	e004      	b.n	800168e <_ZN11PololuServo12set_positionEs+0x12a>
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	893a      	ldrh	r2, [r7, #8]
 800168c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800168e:	bf00      	nop
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
	...

0800169c <_ZN11PololuServoD1Ev>:

PololuServo::~PololuServo() {
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	4a04      	ldr	r2, [pc, #16]	@ (80016b8 <_ZN11PololuServoD1Ev+0x1c>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	080096dc 	.word	0x080096dc

080016bc <_ZN11PololuServoD0Ev>:
PololuServo::~PololuServo() {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
}
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ffe9 	bl	800169c <_ZN11PololuServoD1Ev>
 80016ca:	2120      	movs	r1, #32
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f005 f913 	bl	80068f8 <_ZdlPvj>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb>:
 * @param neutral_us_width Width of the neutral signal in microseconds.
 * @param full_forward_us_width Width of the full forward signal in microseconds.
 * @param rescale_forward_magnitude Maximum value for rescaling the forward signal. Overridden if fed into RemoteControlControl.
 * @param rescale_reverse_magnitude Minimum value for rescaling the reverse signal. Overridden if fed into RemoteControlControl.
 */
RCChannel::RCChannel(
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	4613      	mov	r3, r2
 80016ea:	80fb      	strh	r3, [r7, #6]
	full_reverse_us_width(full_reverse_us_width),
	neutral_us_width(neutral_us_width),
	full_forward_us_width(full_forward_us_width),
	rescale_forward_magnitude(rescale_forward_magnitude),
	rescale_reverse_magnitude(rescale_reverse_magnitude),
	saturate(saturate)
 80016ec:	4a3c      	ldr	r2, [pc, #240]	@ (80017e0 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0x104>)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2200      	movs	r2, #0
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2200      	movs	r2, #0
 8001702:	60da      	str	r2, [r3, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2200      	movs	r2, #0
 800170e:	615a      	str	r2, [r3, #20]
	pin_group(pin_group),
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	619a      	str	r2, [r3, #24]
	pin(pin),
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	88fa      	ldrh	r2, [r7, #6]
 800171a:	839a      	strh	r2, [r3, #28]
	timer_handle(timer_handle),
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	621a      	str	r2, [r3, #32]
	timer_channel(timer_channel),
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6a3a      	ldr	r2, [r7, #32]
 8001726:	625a      	str	r2, [r3, #36]	@ 0x24
	RC_signal_period_us(RC_signal_period_us),
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800172c:	629a      	str	r2, [r3, #40]	@ 0x28
	CPU_clock_speed_MHz(CPU_clock_speed_MHz),
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001732:	62da      	str	r2, [r3, #44]	@ 0x2c
	full_reverse_us_width(full_reverse_us_width),
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001738:	631a      	str	r2, [r3, #48]	@ 0x30
	neutral_us_width(neutral_us_width),
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800173e:	635a      	str	r2, [r3, #52]	@ 0x34
	full_forward_us_width(full_forward_us_width),
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001744:	639a      	str	r2, [r3, #56]	@ 0x38
	rescale_forward_magnitude(rescale_forward_magnitude),
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800174a:	63da      	str	r2, [r3, #60]	@ 0x3c
	rescale_reverse_magnitude(rescale_reverse_magnitude),
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001750:	641a      	str	r2, [r3, #64]	@ 0x40
	saturate(saturate)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001758:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
{
	// Critical. Starts the first interrupt.
	HAL_TIM_IC_Start_IT(timer_handle, timer_channel);
 8001764:	6a39      	ldr	r1, [r7, #32]
 8001766:	6838      	ldr	r0, [r7, #0]
 8001768:	f002 ffd4 	bl	8004714 <HAL_TIM_IC_Start_IT>

	// Set minuend depending on whether it's a 16-bit or 32-bit timer.
	// This is specific to the STM32F411CUE6!!
	if (((timer_handle->Instance) == TIM2) or ((timer_handle->Instance) == TIM5))
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001774:	d004      	beq.n	8001780 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0xa4>
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a1a      	ldr	r2, [pc, #104]	@ (80017e4 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0x108>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d104      	bne.n	800178a <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0xae>
	{
		minuend = 0xffffffff;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f04f 32ff 	mov.w	r2, #4294967295
 8001786:	649a      	str	r2, [r3, #72]	@ 0x48
 8001788:	e003      	b.n	8001792 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0xb6>
	}
	else
	{
		minuend = 0xffff;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001790:	649a      	str	r2, [r3, #72]	@ 0x48
	}

	// For later scaling
	uint32_t prescalar = timer_handle->Instance->PSC + 1;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001798:	3301      	adds	r3, #1
 800179a:	617b      	str	r3, [r7, #20]
	float refClock = CPU_clock_speed_MHz/prescalar;
 800179c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a4:	ee07 3a90 	vmov	s15, r3
 80017a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ac:	edc7 7a04 	vstr	s15, [r7, #16]
	mFactor = 1/refClock;
 80017b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80017b4:	ed97 7a04 	vldr	s14, [r7, #16]
 80017b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

	// Needed later
	forward_range = full_forward_us_width - neutral_us_width;
 80017c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80017c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017c6:	1ad2      	subs	r2, r2, r3
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	659a      	str	r2, [r3, #88]	@ 0x58
	reverse_range = neutral_us_width - full_reverse_us_width;
 80017cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017d0:	1ad2      	subs	r2, r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	655a      	str	r2, [r3, #84]	@ 0x54
}
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	4618      	mov	r0, r3
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	080096ec 	.word	0x080096ec
 80017e4:	40000c00 	.word	0x40000c00

080017e8 <_ZN9RCChannel8callbackEv>:
 * 
 * @note This function assumes that the timer handle and channel have been properly initialized.
 * Please set the associated timer channel to input capture mode, direct. 
 * Leave the auto-reload value as large as possible.
 */
void RCChannel::callback(){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	// Was it a rising edge or a falling edge?
	GPIO_PinState pinState = HAL_GPIO_ReadPin(pin_group, pin);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	699a      	ldr	r2, [r3, #24]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	8b9b      	ldrh	r3, [r3, #28]
 80017f8:	4619      	mov	r1, r3
 80017fa:	4610      	mov	r0, r2
 80017fc:	f001 ff74 	bl	80036e8 <HAL_GPIO_ReadPin>
 8001800:	4603      	mov	r3, r0
 8001802:	73fb      	strb	r3, [r7, #15]

	if(pinState == GPIO_PIN_SET) // Rising edge
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d10c      	bne.n	8001824 <_ZN9RCChannel8callbackEv+0x3c>
		{
			// Read
			first_value = HAL_TIM_ReadCapturedValue(timer_handle, timer_channel);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a1a      	ldr	r2, [r3, #32]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001812:	4619      	mov	r1, r3
 8001814:	4610      	mov	r0, r2
 8001816:	f003 ff89 	bl	800572c <HAL_TIM_ReadCapturedValue>
 800181a:	4603      	mov	r3, r0
 800181c:	461a      	mov	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	605a      	str	r2, [r3, #4]
		}

 	// Finally
 	first_capture = true;
 	}
}
 8001822:	e07a      	b.n	800191a <_ZN9RCChannel8callbackEv+0x132>
 		second_value = HAL_TIM_ReadCapturedValue(timer_handle, timer_channel);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a1a      	ldr	r2, [r3, #32]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182c:	4619      	mov	r1, r3
 800182e:	4610      	mov	r0, r2
 8001830:	f003 ff7c 	bl	800572c <HAL_TIM_ReadCapturedValue>
 8001834:	4603      	mov	r3, r0
 8001836:	461a      	mov	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	609a      	str	r2, [r3, #8]
 		if(first_value > second_value)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	429a      	cmp	r2, r3
 8001846:	dd0c      	ble.n	8001862 <_ZN9RCChannel8callbackEv+0x7a>
 			difference = minuend - first_value + second_value + 1;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6852      	ldr	r2, [r2, #4]
 8001850:	1a9b      	subs	r3, r3, r2
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6892      	ldr	r2, [r2, #8]
 8001856:	4413      	add	r3, r2
 8001858:	3301      	adds	r3, #1
 800185a:	461a      	mov	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	60da      	str	r2, [r3, #12]
 8001860:	e006      	b.n	8001870 <_ZN9RCChannel8callbackEv+0x88>
 			difference = second_value - first_value;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	1ad2      	subs	r2, r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	60da      	str	r2, [r3, #12]
 		us_width = difference;//*mFactor;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68da      	ldr	r2, [r3, #12]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	611a      	str	r2, [r3, #16]
		int32_t centered_value = us_width - neutral_us_width;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	691a      	ldr	r2, [r3, #16]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	60bb      	str	r3, [r7, #8]
 		if(centered_value >= 0)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	db23      	blt.n	80018d2 <_ZN9RCChannel8callbackEv+0xea>
 			value = centered_value*rescale_forward_magnitude/forward_range;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800188e:	68ba      	ldr	r2, [r7, #8]
 8001890:	fb03 f202 	mul.w	r2, r3, r2
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001898:	fb92 f2f3 	sdiv	r2, r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	615a      	str	r2, [r3, #20]
			if(value>rescale_forward_magnitude && saturate)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	695a      	ldr	r2, [r3, #20]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018a8:	429a      	cmp	r2, r3
 80018aa:	dd0d      	ble.n	80018c8 <_ZN9RCChannel8callbackEv+0xe0>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d008      	beq.n	80018c8 <_ZN9RCChannel8callbackEv+0xe0>
				value = rescale_forward_magnitude;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	615a      	str	r2, [r3, #20]
	 			saturate_flag = true;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80018c6:	e024      	b.n	8001912 <_ZN9RCChannel8callbackEv+0x12a>
	 			saturate_flag = false;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80018d0:	e01f      	b.n	8001912 <_ZN9RCChannel8callbackEv+0x12a>
			value =  centered_value*rescale_reverse_magnitude/reverse_range;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d6:	68ba      	ldr	r2, [r7, #8]
 80018d8:	fb03 f202 	mul.w	r2, r3, r2
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018e0:	fb92 f2f3 	sdiv	r2, r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	615a      	str	r2, [r3, #20]
	 		if(value<-rescale_reverse_magnitude)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	695a      	ldr	r2, [r3, #20]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f0:	425b      	negs	r3, r3
 80018f2:	429a      	cmp	r2, r3
 80018f4:	da09      	bge.n	800190a <_ZN9RCChannel8callbackEv+0x122>
	 			value = -rescale_reverse_magnitude;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	425a      	negs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	615a      	str	r2, [r3, #20]
	 			saturate_flag = true;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001908:	e003      	b.n	8001912 <_ZN9RCChannel8callbackEv+0x12a>
	 			saturate_flag = false;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 	first_capture = true;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 800191a:	bf00      	nop
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <_ZN9RCChannelD1Ev>:
/**
 * @brief Destructor for the RCChannel class.
 * 
 * This destructor stops the interrupts for the RCChannel object.
 */
RCChannel::~RCChannel() {
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	4a07      	ldr	r2, [pc, #28]	@ (800194c <_ZN9RCChannelD1Ev+0x28>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	601a      	str	r2, [r3, #0]
	// Stop interrupts
	HAL_TIM_IC_Stop_IT(timer_handle, timer_channel);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a1a      	ldr	r2, [r3, #32]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193a:	4619      	mov	r1, r3
 800193c:	4610      	mov	r0, r2
 800193e:	f003 f803 	bl	8004948 <HAL_TIM_IC_Stop_IT>
}
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	080096ec 	.word	0x080096ec

08001950 <_ZN9RCChannelD0Ev>:
RCChannel::~RCChannel() {
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
}
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f7ff ffe3 	bl	8001924 <_ZN9RCChannelD1Ev>
 800195e:	215c      	movs	r1, #92	@ 0x5c
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f004 ffc9 	bl	80068f8 <_ZdlPvj>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <_ZN20RemoteControlControlC1EP9RCChannelP12MotorControlt>:
/**
 * @brief Constructs a RemoteControlControl object with the given remote control channel and motor driver.
 * @param rc_channel Pointer to the RCChannel object.
 * @param motor Pointer to a TB6612FNG_Motor object.
 */
RemoteControlControl::RemoteControlControl(
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
 800197c:	807b      	strh	r3, [r7, #2]
		RCChannel* rc_channel,
		MotorControl* motor_controller,
		uint16_t maximum_speed)
	: rc_channel(rc_channel),
	  motor_controller(motor_controller),
	  maximum_speed(maximum_speed)
 800197e:	4a09      	ldr	r2, [pc, #36]	@ (80019a4 <_ZN20RemoteControlControlC1EP9RCChannelP12MotorControlt+0x34>)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	601a      	str	r2, [r3, #0]
	: rc_channel(rc_channel),
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	605a      	str	r2, [r3, #4]
	  motor_controller(motor_controller),
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	609a      	str	r2, [r3, #8]
	  maximum_speed(maximum_speed)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	887a      	ldrh	r2, [r7, #2]
 8001994:	819a      	strh	r2, [r3, #12]
{
//	// Reassign the magnitudes.
//	rc_channel->rescale_forward_magnitude = maximum_speed;
//	rc_channel->rescale_reverse_magnitude = maximum_speed;
}
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4618      	mov	r0, r3
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	080096fc 	.word	0x080096fc

080019a8 <_ZN20RemoteControlControl12update_motorEv>:
/**
 * @brief Updates a TB6612FNG_Motor object based on the remote control channel value.
 * Run this function in your HAL_TIM_IC_CaptureCallback() function to update the motor as often as your RC sends new values.
 */
void RemoteControlControl::update_motor()
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	// Read from the remote control channel
	int32_t value = rc_channel->value;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	60fb      	str	r3, [r7, #12]

	// Rescale to maximum speed.
	if (value>=0)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	db19      	blt.n	80019f2 <_ZN20RemoteControlControl12update_motorEv+0x4a>
	{
		setpoint = (float)value*(float)maximum_speed/((float)rc_channel->rescale_forward_magnitude);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	899b      	ldrh	r3, [r3, #12]
 80019cc:	ee07 3a90 	vmov	s15, r3
 80019d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019d4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019de:	ee07 3a90 	vmov	s15, r3
 80019e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	edc3 7a04 	vstr	s15, [r3, #16]
 80019f0:	e018      	b.n	8001a24 <_ZN20RemoteControlControl12update_motorEv+0x7c>
	}
	else
	{
		setpoint = (float)value*(float)maximum_speed/((float)rc_channel->rescale_reverse_magnitude);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	ee07 3a90 	vmov	s15, r3
 80019f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	899b      	ldrh	r3, [r3, #12]
 8001a00:	ee07 3a90 	vmov	s15, r3
 8001a04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a08:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	ee07 3a90 	vmov	s15, r3
 8001a16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	edc3 7a04 	vstr	s15, [r3, #16]
	}

	// Update the controller
	motor_controller->run(setpoint);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689a      	ldr	r2, [r3, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a2e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a32:	4610      	mov	r0, r2
 8001a34:	f7ff faf4 	bl	8001020 <_ZN12MotorControl3runEf>
}
 8001a38:	bf00      	nop
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <_ZN20RemoteControlControl13debug_messageEP20__UART_HandleTypeDef>:


void RemoteControlControl::debug_message(UART_HandleTypeDef* uart_handle)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b0a0      	sub	sp, #128	@ 0x80
 8001a44:	af04      	add	r7, sp, #16
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
	char my_message[100] = "";
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	f107 030c 	add.w	r3, r7, #12
 8001a52:	2260      	movs	r2, #96	@ 0x60
 8001a54:	2100      	movs	r1, #0
 8001a56:	4618      	mov	r0, r3
 8001a58:	f005 fdc3 	bl	80075e2 <memset>
	int string_length = snprintf(my_message, 100, "Throttle: %*.3f RPM (%*li)\r\n",
									  10, setpoint,
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
	int string_length = snprintf(my_message, 100, "Throttle: %*.3f RPM (%*li)\r\n",
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7fe fd79 	bl	8000558 <__aeabi_f2d>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
									  10, (long signed int)rc_channel->value);
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	6849      	ldr	r1, [r1, #4]
 8001a6e:	6949      	ldr	r1, [r1, #20]
	int string_length = snprintf(my_message, 100, "Throttle: %*.3f RPM (%*li)\r\n",
 8001a70:	f107 0008 	add.w	r0, r7, #8
 8001a74:	9103      	str	r1, [sp, #12]
 8001a76:	210a      	movs	r1, #10
 8001a78:	9102      	str	r1, [sp, #8]
 8001a7a:	e9cd 2300 	strd	r2, r3, [sp]
 8001a7e:	230a      	movs	r3, #10
 8001a80:	4a08      	ldr	r2, [pc, #32]	@ (8001aa4 <_ZN20RemoteControlControl13debug_messageEP20__UART_HandleTypeDef+0x64>)
 8001a82:	2164      	movs	r1, #100	@ 0x64
 8001a84:	f005 fd36 	bl	80074f4 <sniprintf>
 8001a88:	66f8      	str	r0, [r7, #108]	@ 0x6c
	HAL_UART_Transmit(uart_handle, (uint8_t*)my_message, string_length, HAL_MAX_DELAY);
 8001a8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	f107 0108 	add.w	r1, r7, #8
 8001a92:	f04f 33ff 	mov.w	r3, #4294967295
 8001a96:	6838      	ldr	r0, [r7, #0]
 8001a98:	f004 fb72 	bl	8006180 <HAL_UART_Transmit>
}
 8001a9c:	bf00      	nop
 8001a9e:	3770      	adds	r7, #112	@ 0x70
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	08009694 	.word	0x08009694

08001aa8 <_ZN20RemoteControlControlD1Ev>:


/**
 * @brief Destructs the RemoteControlControl object and releases any dynamically allocated resources.
 */
RemoteControlControl::~RemoteControlControl()
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	4a13      	ldr	r2, [pc, #76]	@ (8001b00 <_ZN20RemoteControlControlD1Ev+0x58>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	601a      	str	r2, [r3, #0]
{
	// Deallocate memory for rc_channel if it was dynamically allocated
	if (rc_channel != nullptr)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00b      	beq.n	8001ad6 <_ZN20RemoteControlControlD1Ev+0x2e>
	{
		delete rc_channel;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d004      	beq.n	8001ad0 <_ZN20RemoteControlControlD1Ev+0x28>
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	3204      	adds	r2, #4
 8001aca:	6812      	ldr	r2, [r2, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	4790      	blx	r2
		rc_channel = nullptr; // Optional: Set to nullptr to avoid dangling pointers
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	605a      	str	r2, [r3, #4]
	}

	// Deallocate memory for motor if it was dynamically allocated
	if (motor_controller != nullptr)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d00b      	beq.n	8001af6 <_ZN20RemoteControlControlD1Ev+0x4e>
	{
		delete motor_controller;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d004      	beq.n	8001af0 <_ZN20RemoteControlControlD1Ev+0x48>
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	3204      	adds	r2, #4
 8001aea:	6812      	ldr	r2, [r2, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	4790      	blx	r2
		motor_controller = nullptr; // Optional: Set to nullptr to avoid dangling pointers
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
	}
}
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	080096fc 	.word	0x080096fc

08001b04 <_ZN20RemoteControlControlD0Ev>:
RemoteControlControl::~RemoteControlControl()
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
}
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ffcb 	bl	8001aa8 <_ZN20RemoteControlControlD1Ev>
 8001b12:	2114      	movs	r1, #20
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f004 feef 	bl	80068f8 <_ZdlPvj>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm>:
 * @param timer_channel The channel number to be used with the timer (like TIM_CHANNEL_1).
 * @param CPU_clock_speed_MHz The CPU clock speed in MHz (like 96).
 * @param PWM_frequency_Hz The PWM frequency in Hz (20,000 to 100,000 allowed).
 */

TB6612FNG_Motor::TB6612FNG_Motor(
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	4613      	mov	r3, r2
 8001b32:	80fb      	strh	r3, [r7, #6]

	: IN1_pin_group(IN1_pin_group), IN1_pin(IN1_pin),
	  IN2_pin_group(IN2_pin_group), IN2_pin(IN2_pin),
	  timer_handle(timer_handle), timer_channel(timer_channel),
	  CPU_clock_speed_MHz(CPU_clock_speed_MHz),
	  PWM_frequency_Hz(PWM_frequency_Hz)
 8001b34:	4a23      	ldr	r2, [pc, #140]	@ (8001bc4 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa0>)
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	601a      	str	r2, [r3, #0]
	: IN1_pin_group(IN1_pin_group), IN1_pin(IN1_pin),
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	68ba      	ldr	r2, [r7, #8]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	88fa      	ldrh	r2, [r7, #6]
 8001b44:	811a      	strh	r2, [r3, #8]
	  IN2_pin_group(IN2_pin_group), IN2_pin(IN2_pin),
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	60da      	str	r2, [r3, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8b3a      	ldrh	r2, [r7, #24]
 8001b50:	821a      	strh	r2, [r3, #16]
	  timer_handle(timer_handle), timer_channel(timer_channel),
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	69fa      	ldr	r2, [r7, #28]
 8001b56:	615a      	str	r2, [r3, #20]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6a3a      	ldr	r2, [r7, #32]
 8001b5c:	619a      	str	r2, [r3, #24]
	  CPU_clock_speed_MHz(CPU_clock_speed_MHz),
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b62:	61da      	str	r2, [r3, #28]
	  PWM_frequency_Hz(PWM_frequency_Hz)
 8001b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	841a      	strh	r2, [r3, #32]
{
	// Make sure the motor is off to start
	stop();
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f000 f8d0 	bl	8001d12 <_ZN15TB6612FNG_Motor4stopEv>

	// Make sure the PWM frequency is within bounds
	if(PWM_frequency_Hz < 20000)
 8001b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b74:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d803      	bhi.n	8001b84 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0x60>
	{
		// Too low. Human can hear this.
		PWM_frequency_Hz = 20000;
 8001b7c:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001b80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b82:	e005      	b.n	8001b90 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0x6c>
	}
	else if(PWM_frequency_Hz > 100000)
 8001b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b86:	4a10      	ldr	r2, [pc, #64]	@ (8001bc8 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d901      	bls.n	8001b90 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0x6c>
	{
		// Very high. May interfere with other tasks.
		PWM_frequency_Hz = 100000;
 8001b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001bc8 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa4>)
 8001b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
	}

	// Set the auto-reload value based on the CPU clock speed and the desired PWM frequency
	auto_reload_value =( CPU_clock_speed_MHz * 1000000 / PWM_frequency_Hz ) - 1;
 8001b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b92:	4a0e      	ldr	r2, [pc, #56]	@ (8001bcc <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa8>)
 8001b94:	fb03 f202 	mul.w	r2, r3, r2
 8001b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	845a      	strh	r2, [r3, #34]	@ 0x22
	timer_handle->Instance->ARR = auto_reload_value;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Start the PWM generation
	start();
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	f000 f89d 	bl	8001cf2 <_ZN15TB6612FNG_Motor5startEv>
}
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	0800970c 	.word	0x0800970c
 8001bc8:	000186a0 	.word	0x000186a0
 8001bcc:	000f4240 	.word	0x000f4240

08001bd0 <_ZN15TB6612FNG_MotorD1Ev>:

/**
 * @brief Destructor for the TB6612FNG_Motor class.
 */
TB6612FNG_Motor::~TB6612FNG_Motor()
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	4a05      	ldr	r2, [pc, #20]	@ (8001bf0 <_ZN15TB6612FNG_MotorD1Ev+0x20>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	601a      	str	r2, [r3, #0]
{
	stop();
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f897 	bl	8001d12 <_ZN15TB6612FNG_Motor4stopEv>
}
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	0800970c 	.word	0x0800970c

08001bf4 <_ZN15TB6612FNG_MotorD0Ev>:
TB6612FNG_Motor::~TB6612FNG_Motor()
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
}
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7ff ffe7 	bl	8001bd0 <_ZN15TB6612FNG_MotorD1Ev>
 8001c02:	2124      	movs	r1, #36	@ 0x24
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f004 fe77 	bl	80068f8 <_ZdlPvj>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <_ZN15TB6612FNG_Motor8set_dutyEss>:
/**
 * @brief Sets the duty cycle of the motor.
 * @param speed The duty cycle value, ranging from -100 to 100 by default.
 */
void TB6612FNG_Motor::set_duty(int16_t duty, int16_t maximum_value)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	807b      	strh	r3, [r7, #2]
 8001c20:	4613      	mov	r3, r2
 8001c22:	803b      	strh	r3, [r7, #0]
	// Raise the appropriate pins
	if(duty >= 0)
 8001c24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	db10      	blt.n	8001c4e <_ZN15TB6612FNG_Motor8set_dutyEss+0x3a>
	{
		HAL_GPIO_WritePin(IN1_pin_group, IN1_pin, GPIO_PIN_SET);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6858      	ldr	r0, [r3, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	891b      	ldrh	r3, [r3, #8]
 8001c34:	2201      	movs	r2, #1
 8001c36:	4619      	mov	r1, r3
 8001c38:	f001 fd6e 	bl	8003718 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_pin_group, IN2_pin, GPIO_PIN_RESET);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68d8      	ldr	r0, [r3, #12]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	8a1b      	ldrh	r3, [r3, #16]
 8001c44:	2200      	movs	r2, #0
 8001c46:	4619      	mov	r1, r3
 8001c48:	f001 fd66 	bl	8003718 <HAL_GPIO_WritePin>
 8001c4c:	e00f      	b.n	8001c6e <_ZN15TB6612FNG_Motor8set_dutyEss+0x5a>
	}
	else
	{
		HAL_GPIO_WritePin(IN1_pin_group, IN1_pin, GPIO_PIN_RESET);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6858      	ldr	r0, [r3, #4]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	891b      	ldrh	r3, [r3, #8]
 8001c56:	2200      	movs	r2, #0
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f001 fd5d 	bl	8003718 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_pin_group, IN2_pin, GPIO_PIN_SET);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68d8      	ldr	r0, [r3, #12]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	8a1b      	ldrh	r3, [r3, #16]
 8001c66:	2201      	movs	r2, #1
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f001 fd55 	bl	8003718 <HAL_GPIO_WritePin>
	}

	uint16_t duty_magnitude;
	if(duty<0)
 8001c6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	da03      	bge.n	8001c7e <_ZN15TB6612FNG_Motor8set_dutyEss+0x6a>
	{
		duty_magnitude = duty*-1;
 8001c76:	887b      	ldrh	r3, [r7, #2]
 8001c78:	425b      	negs	r3, r3
 8001c7a:	81fb      	strh	r3, [r7, #14]
 8001c7c:	e001      	b.n	8001c82 <_ZN15TB6612FNG_Motor8set_dutyEss+0x6e>
	}
	else
	{
		duty_magnitude = duty;
 8001c7e:	887b      	ldrh	r3, [r7, #2]
 8001c80:	81fb      	strh	r3, [r7, #14]
	}

	// Check if duty cycle is within bounds
	if(duty_magnitude > maximum_value)
 8001c82:	89fa      	ldrh	r2, [r7, #14]
 8001c84:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	dd01      	ble.n	8001c90 <_ZN15TB6612FNG_Motor8set_dutyEss+0x7c>
	{
		duty = maximum_value;
 8001c8c:	883b      	ldrh	r3, [r7, #0]
 8001c8e:	807b      	strh	r3, [r7, #2]
	}


	// Set the compare value
	uint16_t compare_value = duty_magnitude * auto_reload_value / maximum_value;
 8001c90:	89fb      	ldrh	r3, [r7, #14]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8001c96:	fb03 f202 	mul.w	r2, r3, r2
 8001c9a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001c9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ca2:	81bb      	strh	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d105      	bne.n	8001cb8 <_ZN15TB6612FNG_Motor8set_dutyEss+0xa4>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	89ba      	ldrh	r2, [r7, #12]
 8001cb4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001cb6:	e018      	b.n	8001cea <_ZN15TB6612FNG_Motor8set_dutyEss+0xd6>
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d105      	bne.n	8001ccc <_ZN15TB6612FNG_Motor8set_dutyEss+0xb8>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	89ba      	ldrh	r2, [r7, #12]
 8001cc8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001cca:	e00e      	b.n	8001cea <_ZN15TB6612FNG_Motor8set_dutyEss+0xd6>
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	699b      	ldr	r3, [r3, #24]
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d105      	bne.n	8001ce0 <_ZN15TB6612FNG_Motor8set_dutyEss+0xcc>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	89ba      	ldrh	r2, [r7, #12]
 8001cdc:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001cde:	e004      	b.n	8001cea <_ZN15TB6612FNG_Motor8set_dutyEss+0xd6>
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	89ba      	ldrh	r2, [r7, #12]
 8001ce8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001cea:	bf00      	nop
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <_ZN15TB6612FNG_Motor5startEv>:

/**
 * @brief starts the motor by starting PWM generation.
 */
void TB6612FNG_Motor::start()
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(timer_handle, timer_channel);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	695a      	ldr	r2, [r3, #20]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	4619      	mov	r1, r3
 8001d04:	4610      	mov	r0, r2
 8001d06:	f002 fb97 	bl	8004438 <HAL_TIM_PWM_Start>
}
 8001d0a:	bf00      	nop
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <_ZN15TB6612FNG_Motor4stopEv>:

/**
 * @brief stops the motor by stopping PWM generation.
 */
void TB6612FNG_Motor::stop()
{	
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(IN1_pin_group, IN1_pin, GPIO_PIN_RESET);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6858      	ldr	r0, [r3, #4]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	891b      	ldrh	r3, [r3, #8]
 8001d22:	2200      	movs	r2, #0
 8001d24:	4619      	mov	r1, r3
 8001d26:	f001 fcf7 	bl	8003718 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_pin_group, IN2_pin, GPIO_PIN_RESET);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68d8      	ldr	r0, [r3, #12]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	8a1b      	ldrh	r3, [r3, #16]
 8001d32:	2200      	movs	r2, #0
 8001d34:	4619      	mov	r1, r3
 8001d36:	f001 fcef 	bl	8003718 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(timer_handle, timer_channel);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695a      	ldr	r2, [r3, #20]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	4619      	mov	r1, r3
 8001d44:	4610      	mov	r0, r2
 8001d46:	f002 fc27 	bl	8004598 <HAL_TIM_PWM_Stop>
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <HAL_GPIO_EXTI_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	80fb      	strh	r3, [r7, #6]
   // Your interrupt handling code here
	if(initialized)
 8001d5e:	4b08      	ldr	r3, [pc, #32]	@ (8001d80 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d008      	beq.n	8001d78 <HAL_GPIO_EXTI_Callback+0x24>
	{
		if(GPIO_PIN == GPIO_PIN_13)
 8001d66:	88fb      	ldrh	r3, [r7, #6]
 8001d68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d6c:	d104      	bne.n	8001d78 <HAL_GPIO_EXTI_Callback+0x24>
		{
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8001d6e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001d72:	4804      	ldr	r0, [pc, #16]	@ (8001d84 <HAL_GPIO_EXTI_Callback+0x30>)
 8001d74:	f001 fce9 	bl	800374a <HAL_GPIO_TogglePin>
		}
	}
}
 8001d78:	bf00      	nop
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	200003ac 	.word	0x200003ac
 8001d84:	40020400 	.word	0x40020400

08001d88 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
	if (initialized) // Timers must be initalized before this code can run successfully.
 8001d90:	4b12      	ldr	r3, [pc, #72]	@ (8001ddc <HAL_TIM_IC_CaptureCallback+0x54>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d01d      	beq.n	8001dd4 <HAL_TIM_IC_CaptureCallback+0x4c>
	{
		if((htim->Instance = TIM1))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4a11      	ldr	r2, [pc, #68]	@ (8001de0 <HAL_TIM_IC_CaptureCallback+0x58>)
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	bf14      	ite	ne
 8001da6:	2301      	movne	r3, #1
 8001da8:	2300      	moveq	r3, #0
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d011      	beq.n	8001dd4 <HAL_TIM_IC_CaptureCallback+0x4c>
		{
			if ( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 )
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	7f1b      	ldrb	r3, [r3, #28]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d104      	bne.n	8001dc2 <HAL_TIM_IC_CaptureCallback+0x3a>
			{
				// Handle channel
				SteeringChannel->callback();
 8001db8:	4b0a      	ldr	r3, [pc, #40]	@ (8001de4 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fd13 	bl	80017e8 <_ZN9RCChannel8callbackEv>
			}

			if ( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	7f1b      	ldrb	r3, [r3, #28]
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d104      	bne.n	8001dd4 <HAL_TIM_IC_CaptureCallback+0x4c>
			{
				// Handle channel
				ThrottleChannel->callback();
 8001dca:	4b07      	ldr	r3, [pc, #28]	@ (8001de8 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fd0a 	bl	80017e8 <_ZN9RCChannel8callbackEv>
			}
		}
	}
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	200003ac 	.word	0x200003ac
 8001de0:	40010000 	.word	0x40010000
 8001de4:	200003b8 	.word	0x200003b8
 8001de8:	200003b4 	.word	0x200003b4

08001dec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // Not needed
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a07      	ldr	r2, [pc, #28]	@ (8001e18 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d106      	bne.n	8001e0c <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		My_Encoder->count = __HAL_TIM_GET_COUNTER(htim);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e04:	4b05      	ldr	r3, [pc, #20]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	b292      	uxth	r2, r2
 8001e0a:	82da      	strh	r2, [r3, #22]
	}
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	40000c00 	.word	0x40000c00
 8001e1c:	200003c0 	.word	0x200003c0

08001e20 <_Z10Servo_Taskh>:

uint8_t Servo_Task(uint8_t state)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
	switch(state)
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d002      	beq.n	8001e36 <_Z10Servo_Taskh+0x16>
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d009      	beq.n	8001e48 <_Z10Servo_Taskh+0x28>
 8001e34:	e010      	b.n	8001e58 <_Z10Servo_Taskh+0x38>
	{
		case 1:
	  		My_Servo->set_position(-30);
 8001e36:	4b0b      	ldr	r3, [pc, #44]	@ (8001e64 <_Z10Servo_Taskh+0x44>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f06f 011d 	mvn.w	r1, #29
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fb90 	bl	8001564 <_ZN11PololuServo12set_positionEs>
	  		return 2;
 8001e44:	2302      	movs	r3, #2
 8001e46:	e008      	b.n	8001e5a <_Z10Servo_Taskh+0x3a>
		case 2:
	  		My_Servo->set_position(30);
 8001e48:	4b06      	ldr	r3, [pc, #24]	@ (8001e64 <_Z10Servo_Taskh+0x44>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	211e      	movs	r1, #30
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff fb88 	bl	8001564 <_ZN11PololuServo12set_positionEs>
	  		return 1;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e000      	b.n	8001e5a <_Z10Servo_Taskh+0x3a>
		default:
			return 0;
 8001e58:	2300      	movs	r3, #0
	}
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	200003c8 	.word	0x200003c8

08001e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e6c:	b09d      	sub	sp, #116	@ 0x74
 8001e6e:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e70:	f001 f90e 	bl	8003090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e74:	f000 fa4a 	bl	800230c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e78:	f000 fd44 	bl	8002904 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8001e7c:	f000 fd14 	bl	80028a8 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 8001e80:	f000 fb86 	bl	8002590 <_ZL12MX_TIM2_Initv>
  MX_TIM5_Init();
 8001e84:	f000 fcb2 	bl	80027ec <_ZL12MX_TIM5_Initv>
  MX_TIM1_Init();
 8001e88:	f000 fae6 	bl	8002458 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8001e8c:	f000 fc0e 	bl	80026ac <_ZL12MX_TIM3_Initv>
  MX_I2C1_Init();
 8001e90:	f000 faae 	bl	80023f0 <_ZL12MX_I2C1_Initv>
		  GPIOB, GPIO_PIN_14,
		  GPIOB, GPIO_PIN_15,
		  &htim2, TIM_CHANNEL_1,
		  CPU_CLOCK_SPEED_MHZ,
		  MOTOR_PWM_HZ
		  );
 8001e94:	2024      	movs	r0, #36	@ 0x24
 8001e96:	f004 fd31 	bl	80068fc <_Znwj>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	461c      	mov	r4, r3
 8001e9e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001ea2:	9304      	str	r3, [sp, #16]
 8001ea4:	2364      	movs	r3, #100	@ 0x64
 8001ea6:	9303      	str	r3, [sp, #12]
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	9302      	str	r3, [sp, #8]
 8001eac:	4bbf      	ldr	r3, [pc, #764]	@ (80021ac <main+0x344>)
 8001eae:	9301      	str	r3, [sp, #4]
 8001eb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	4bbe      	ldr	r3, [pc, #760]	@ (80021b0 <main+0x348>)
 8001eb8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ebc:	49bc      	ldr	r1, [pc, #752]	@ (80021b0 <main+0x348>)
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	f7ff fe30 	bl	8001b24 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm>
  My_Motor = new TB6612FNG_Motor
 8001ec4:	4bbb      	ldr	r3, [pc, #748]	@ (80021b4 <main+0x34c>)
 8001ec6:	601c      	str	r4, [r3, #0]
  		  1520,      // Calibrated neutral
  		  2035,      // Calibrated full left
  		  10000,       // New max positive
		  10000,       // New max negative (magnitude)
		  true     // Saturate if signal is over full? True by default. False good for debugging.
		  );
 8001ec8:	205c      	movs	r0, #92	@ 0x5c
 8001eca:	f004 fd17 	bl	80068fc <_Znwj>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	461c      	mov	r4, r3
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	9308      	str	r3, [sp, #32]
 8001ed6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001eda:	9307      	str	r3, [sp, #28]
 8001edc:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001ee0:	9306      	str	r3, [sp, #24]
 8001ee2:	f240 73f3 	movw	r3, #2035	@ 0x7f3
 8001ee6:	9305      	str	r3, [sp, #20]
 8001ee8:	f44f 63be 	mov.w	r3, #1520	@ 0x5f0
 8001eec:	9304      	str	r3, [sp, #16]
 8001eee:	f240 33ea 	movw	r3, #1002	@ 0x3ea
 8001ef2:	9303      	str	r3, [sp, #12]
 8001ef4:	2364      	movs	r3, #100	@ 0x64
 8001ef6:	9302      	str	r3, [sp, #8]
 8001ef8:	f244 435c 	movw	r3, #17500	@ 0x445c
 8001efc:	9301      	str	r3, [sp, #4]
 8001efe:	2300      	movs	r3, #0
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	4bad      	ldr	r3, [pc, #692]	@ (80021b8 <main+0x350>)
 8001f04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f08:	49ac      	ldr	r1, [pc, #688]	@ (80021bc <main+0x354>)
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	f7ff fbe6 	bl	80016dc <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb>
  SteeringChannel = new RCChannel
 8001f10:	4bab      	ldr	r3, [pc, #684]	@ (80021c0 <main+0x358>)
 8001f12:	601c      	str	r4, [r3, #0]
		  		  1533,  // Calibrated neutral
		  		  2017,  // Calibrated full speed
		  		  10000,   // New max positive
				  10000,    // New max negative (magnitude)
				  true  // Saturate if signal is over full? True by default. False good for debugging.
		  	  	  );
 8001f14:	205c      	movs	r0, #92	@ 0x5c
 8001f16:	f004 fcf1 	bl	80068fc <_Znwj>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	461c      	mov	r4, r3
 8001f1e:	2301      	movs	r3, #1
 8001f20:	9308      	str	r3, [sp, #32]
 8001f22:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001f26:	9307      	str	r3, [sp, #28]
 8001f28:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001f2c:	9306      	str	r3, [sp, #24]
 8001f2e:	f240 73e1 	movw	r3, #2017	@ 0x7e1
 8001f32:	9305      	str	r3, [sp, #20]
 8001f34:	f240 53fd 	movw	r3, #1533	@ 0x5fd
 8001f38:	9304      	str	r3, [sp, #16]
 8001f3a:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8001f3e:	9303      	str	r3, [sp, #12]
 8001f40:	2364      	movs	r3, #100	@ 0x64
 8001f42:	9302      	str	r3, [sp, #8]
 8001f44:	f244 435c 	movw	r3, #17500	@ 0x445c
 8001f48:	9301      	str	r3, [sp, #4]
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	4b9a      	ldr	r3, [pc, #616]	@ (80021b8 <main+0x350>)
 8001f50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f54:	4999      	ldr	r1, [pc, #612]	@ (80021bc <main+0x354>)
 8001f56:	4620      	mov	r0, r4
 8001f58:	f7ff fbc0 	bl	80016dc <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb>
  ThrottleChannel = new RCChannel
 8001f5c:	4b99      	ldr	r3, [pc, #612]	@ (80021c4 <main+0x35c>)
 8001f5e:	601c      	str	r4, [r3, #0]
		  &htim5,
		  20,
		  488.3f,
		  16,
		  false // true doesn't work yet!
		  );
 8001f60:	202c      	movs	r0, #44	@ 0x2c
 8001f62:	f004 fccb 	bl	80068fc <_Znwj>
 8001f66:	4603      	mov	r3, r0
 8001f68:	461c      	mov	r4, r3
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	2310      	movs	r3, #16
 8001f70:	ed9f 0a95 	vldr	s0, [pc, #596]	@ 80021c8 <main+0x360>
 8001f74:	2214      	movs	r2, #20
 8001f76:	4995      	ldr	r1, [pc, #596]	@ (80021cc <main+0x364>)
 8001f78:	4620      	mov	r0, r4
 8001f7a:	f7ff f94b 	bl	8001214 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb>
  My_Encoder = new PololuEncoder
 8001f7e:	4b94      	ldr	r3, [pc, #592]	@ (80021d0 <main+0x368>)
 8001f80:	601c      	str	r4, [r3, #0]
		  My_Encoder,
		  CONTROL_FREQUENCY_HZ,
		  100.0f,
		  650.0f,
		  0.0f
		  );
 8001f82:	2034      	movs	r0, #52	@ 0x34
 8001f84:	f004 fcba 	bl	80068fc <_Znwj>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	461c      	mov	r4, r3
 8001f8c:	4b89      	ldr	r3, [pc, #548]	@ (80021b4 <main+0x34c>)
 8001f8e:	6819      	ldr	r1, [r3, #0]
 8001f90:	4b8f      	ldr	r3, [pc, #572]	@ (80021d0 <main+0x368>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	ed9f 1a8f 	vldr	s2, [pc, #572]	@ 80021d4 <main+0x36c>
 8001f98:	eddf 0a8f 	vldr	s1, [pc, #572]	@ 80021d8 <main+0x370>
 8001f9c:	ed9f 0a8f 	vldr	s0, [pc, #572]	@ 80021dc <main+0x374>
 8001fa0:	2308      	movs	r3, #8
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	f7fe ff80 	bl	8000ea8 <_ZN12MotorControlC1EP15TB6612FNG_MotorP13PololuEncodermfff>
  My_Controller = new MotorControl
 8001fa8:	4b8d      	ldr	r3, [pc, #564]	@ (80021e0 <main+0x378>)
 8001faa:	601c      	str	r4, [r3, #0]
  Throttle = new RemoteControlControl
		  (
		  ThrottleChannel,
		  My_Controller,
		  30
		  );
 8001fac:	2014      	movs	r0, #20
 8001fae:	f004 fca5 	bl	80068fc <_Znwj>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	461c      	mov	r4, r3
 8001fb6:	4b83      	ldr	r3, [pc, #524]	@ (80021c4 <main+0x35c>)
 8001fb8:	6819      	ldr	r1, [r3, #0]
 8001fba:	4b89      	ldr	r3, [pc, #548]	@ (80021e0 <main+0x378>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	231e      	movs	r3, #30
 8001fc0:	4620      	mov	r0, r4
 8001fc2:	f7ff fcd5 	bl	8001970 <_ZN20RemoteControlControlC1EP9RCChannelP12MotorControlt>
  Throttle = new RemoteControlControl
 8001fc6:	4b87      	ldr	r3, [pc, #540]	@ (80021e4 <main+0x37c>)
 8001fc8:	601c      	str	r4, [r3, #0]
	  	  CPU_CLOCK_SPEED_MHZ,
		  60,
		  1000,
		  1500,
		  2000
		  );
 8001fca:	2020      	movs	r0, #32
 8001fcc:	f004 fc96 	bl	80068fc <_Znwj>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	461c      	mov	r4, r3
 8001fd4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001fd8:	9304      	str	r3, [sp, #16]
 8001fda:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001fde:	9303      	str	r3, [sp, #12]
 8001fe0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fe4:	9302      	str	r3, [sp, #8]
 8001fe6:	233c      	movs	r3, #60	@ 0x3c
 8001fe8:	9301      	str	r3, [sp, #4]
 8001fea:	2364      	movs	r3, #100	@ 0x64
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	f244 435c 	movw	r3, #17500	@ 0x445c
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	497c      	ldr	r1, [pc, #496]	@ (80021e8 <main+0x380>)
 8001ff6:	4620      	mov	r0, r4
 8001ff8:	f7ff fa6e 	bl	80014d8 <_ZN11PololuServoC1EP17TIM_HandleTypeDefmtmtttt>
  My_Servo = new PololuServo
 8001ffc:	4b7b      	ldr	r3, [pc, #492]	@ (80021ec <main+0x384>)
 8001ffe:	601c      	str	r4, [r3, #0]

  uint8_t task = 0; // Start on task 0
 8002000:	2300      	movs	r3, #0
 8002002:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  int number_of_states = 5;
 8002006:	2305      	movs	r3, #5
 8002008:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t last_tick_state[number_of_states] = {0};
 800200a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800200c:	1e4b      	subs	r3, r1, #1
 800200e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002010:	460a      	mov	r2, r1
 8002012:	2300      	movs	r3, #0
 8002014:	4690      	mov	r8, r2
 8002016:	4699      	mov	r9, r3
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	f04f 0300 	mov.w	r3, #0
 8002020:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8002024:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002028:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800202c:	460a      	mov	r2, r1
 800202e:	2300      	movs	r3, #0
 8002030:	613a      	str	r2, [r7, #16]
 8002032:	617b      	str	r3, [r7, #20]
 8002034:	f04f 0200 	mov.w	r2, #0
 8002038:	f04f 0300 	mov.w	r3, #0
 800203c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002040:	4648      	mov	r0, r9
 8002042:	0143      	lsls	r3, r0, #5
 8002044:	4640      	mov	r0, r8
 8002046:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800204a:	4640      	mov	r0, r8
 800204c:	0142      	lsls	r2, r0, #5
 800204e:	460b      	mov	r3, r1
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	3307      	adds	r3, #7
 8002054:	08db      	lsrs	r3, r3, #3
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	ebad 0d03 	sub.w	sp, sp, r3
 800205c:	ab0a      	add	r3, sp, #40	@ 0x28
 800205e:	3303      	adds	r3, #3
 8002060:	089b      	lsrs	r3, r3, #2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	633b      	str	r3, [r7, #48]	@ 0x30
 8002066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002068:	3901      	subs	r1, #1
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	1d1a      	adds	r2, r3, #4
 8002070:	1e4b      	subs	r3, r1, #1
 8002072:	e003      	b.n	800207c <main+0x214>
 8002074:	2100      	movs	r1, #0
 8002076:	6011      	str	r1, [r2, #0]
 8002078:	3b01      	subs	r3, #1
 800207a:	3204      	adds	r2, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	daf9      	bge.n	8002074 <main+0x20c>
  uint16_t task_frequencies[number_of_states] = {0};
 8002080:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002082:	1e4b      	subs	r3, r1, #1
 8002084:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002086:	460a      	mov	r2, r1
 8002088:	2300      	movs	r3, #0
 800208a:	60ba      	str	r2, [r7, #8]
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800209a:	4648      	mov	r0, r9
 800209c:	0103      	lsls	r3, r0, #4
 800209e:	4640      	mov	r0, r8
 80020a0:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80020a4:	4640      	mov	r0, r8
 80020a6:	0102      	lsls	r2, r0, #4
 80020a8:	460a      	mov	r2, r1
 80020aa:	2300      	movs	r3, #0
 80020ac:	603a      	str	r2, [r7, #0]
 80020ae:	607b      	str	r3, [r7, #4]
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	f04f 0300 	mov.w	r3, #0
 80020b8:	e9d7 8900 	ldrd	r8, r9, [r7]
 80020bc:	4648      	mov	r0, r9
 80020be:	0103      	lsls	r3, r0, #4
 80020c0:	4640      	mov	r0, r8
 80020c2:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80020c6:	4640      	mov	r0, r8
 80020c8:	0102      	lsls	r2, r0, #4
 80020ca:	460b      	mov	r3, r1
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	3307      	adds	r3, #7
 80020d0:	08db      	lsrs	r3, r3, #3
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	ebad 0d03 	sub.w	sp, sp, r3
 80020d8:	ab0a      	add	r3, sp, #40	@ 0x28
 80020da:	3301      	adds	r3, #1
 80020dc:	085b      	lsrs	r3, r3, #1
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020e4:	3901      	subs	r1, #1
 80020e6:	2200      	movs	r2, #0
 80020e8:	801a      	strh	r2, [r3, #0]
 80020ea:	1c9a      	adds	r2, r3, #2
 80020ec:	1e4b      	subs	r3, r1, #1
 80020ee:	e003      	b.n	80020f8 <main+0x290>
 80020f0:	2100      	movs	r1, #0
 80020f2:	8011      	strh	r1, [r2, #0]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	3202      	adds	r2, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	daf9      	bge.n	80020f0 <main+0x288>
  task_frequencies[1] = 1; // Hz
 80020fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020fe:	2201      	movs	r2, #1
 8002100:	805a      	strh	r2, [r3, #2]
  task_frequencies[2] = CONTROL_FREQUENCY_HZ; // Hz
 8002102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002104:	2208      	movs	r2, #8
 8002106:	809a      	strh	r2, [r3, #4]
  task_frequencies[3] = 2; // Hz
 8002108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800210a:	2202      	movs	r2, #2
 800210c:	80da      	strh	r2, [r3, #6]
  uint16_t task_periods[number_of_states] = {0};
 800210e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002110:	1e4b      	subs	r3, r1, #1
 8002112:	627b      	str	r3, [r7, #36]	@ 0x24
 8002114:	460a      	mov	r2, r1
 8002116:	2300      	movs	r3, #0
 8002118:	4615      	mov	r5, r2
 800211a:	461e      	mov	r6, r3
 800211c:	f04f 0200 	mov.w	r2, #0
 8002120:	f04f 0300 	mov.w	r3, #0
 8002124:	0133      	lsls	r3, r6, #4
 8002126:	ea43 7315 	orr.w	r3, r3, r5, lsr #28
 800212a:	012a      	lsls	r2, r5, #4
 800212c:	460a      	mov	r2, r1
 800212e:	2300      	movs	r3, #0
 8002130:	4692      	mov	sl, r2
 8002132:	469b      	mov	fp, r3
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	f04f 0300 	mov.w	r3, #0
 800213c:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8002140:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8002144:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8002148:	460b      	mov	r3, r1
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	3307      	adds	r3, #7
 800214e:	08db      	lsrs	r3, r3, #3
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	ebad 0d03 	sub.w	sp, sp, r3
 8002156:	ab0a      	add	r3, sp, #40	@ 0x28
 8002158:	3301      	adds	r3, #1
 800215a:	085b      	lsrs	r3, r3, #1
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	623b      	str	r3, [r7, #32]
 8002160:	6a3b      	ldr	r3, [r7, #32]
 8002162:	3901      	subs	r1, #1
 8002164:	2200      	movs	r2, #0
 8002166:	801a      	strh	r2, [r3, #0]
 8002168:	1c9a      	adds	r2, r3, #2
 800216a:	1e4b      	subs	r3, r1, #1
 800216c:	e003      	b.n	8002176 <main+0x30e>
 800216e:	2100      	movs	r1, #0
 8002170:	8011      	strh	r1, [r2, #0]
 8002172:	3b01      	subs	r3, #1
 8002174:	3202      	adds	r2, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	daf9      	bge.n	800216e <main+0x306>

  // Loop to calculate periods based on frequencies
  for (int index = 0; index < number_of_states; index++) {
 800217a:	2300      	movs	r3, #0
 800217c:	643b      	str	r3, [r7, #64]	@ 0x40
 800217e:	e03f      	b.n	8002200 <main+0x398>
      if (task_frequencies[index] != 0) {
 8002180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002182:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002184:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d031      	beq.n	80021f0 <main+0x388>
          task_periods[index] = 1000 / task_frequencies[index];
 800218c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800218e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002190:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002194:	461a      	mov	r2, r3
 8002196:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800219a:	fb93 f3f2 	sdiv	r3, r3, r2
 800219e:	b299      	uxth	r1, r3
 80021a0:	6a3b      	ldr	r3, [r7, #32]
 80021a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80021a4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80021a8:	e027      	b.n	80021fa <main+0x392>
 80021aa:	bf00      	nop
 80021ac:	2000028c 	.word	0x2000028c
 80021b0:	40020400 	.word	0x40020400
 80021b4:	200003b0 	.word	0x200003b0
 80021b8:	20000244 	.word	0x20000244
 80021bc:	40020000 	.word	0x40020000
 80021c0:	200003b8 	.word	0x200003b8
 80021c4:	200003b4 	.word	0x200003b4
 80021c8:	43f42666 	.word	0x43f42666
 80021cc:	2000031c 	.word	0x2000031c
 80021d0:	200003c0 	.word	0x200003c0
 80021d4:	00000000 	.word	0x00000000
 80021d8:	44228000 	.word	0x44228000
 80021dc:	42c80000 	.word	0x42c80000
 80021e0:	200003c4 	.word	0x200003c4
 80021e4:	200003bc 	.word	0x200003bc
 80021e8:	200002d4 	.word	0x200002d4
 80021ec:	200003c8 	.word	0x200003c8
      } else {
          task_periods[index] = 0; // Avoid division by zero
 80021f0:	6a3b      	ldr	r3, [r7, #32]
 80021f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80021f4:	2100      	movs	r1, #0
 80021f6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (int index = 0; index < number_of_states; index++) {
 80021fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021fc:	3301      	adds	r3, #1
 80021fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8002200:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002204:	429a      	cmp	r2, r3
 8002206:	dbbb      	blt.n	8002180 <main+0x318>
      }
  }

  uint8_t task_1_state = 1;
 8002208:	2301      	movs	r3, #1
 800220a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint32_t current_tick = HAL_GetTick();
 800220e:	f000 ffa5 	bl	800315c <HAL_GetTick>
 8002212:	61f8      	str	r0, [r7, #28]

	  switch(task)
 8002214:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002218:	2b03      	cmp	r3, #3
 800221a:	d867      	bhi.n	80022ec <main+0x484>
 800221c:	a201      	add	r2, pc, #4	@ (adr r2, 8002224 <main+0x3bc>)
 800221e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002222:	bf00      	nop
 8002224:	08002235 	.word	0x08002235
 8002228:	08002261 	.word	0x08002261
 800222c:	0800228f 	.word	0x0800228f
 8002230:	080022b7 	.word	0x080022b7
	  {
	  	  case 0:
	  		  // Init
	  		  HAL_Delay(300);
 8002234:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002238:	f000 ff9c 	bl	8003174 <HAL_Delay>
	  		  My_Controller->run(0);
 800223c:	4b2e      	ldr	r3, [pc, #184]	@ (80022f8 <main+0x490>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 80022fc <main+0x494>
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe feeb 	bl	8001020 <_ZN12MotorControl3runEf>
	  		  HAL_Delay(500);
 800224a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800224e:	f000 ff91 	bl	8003174 <HAL_Delay>
	  		  initialized = true;
 8002252:	4b2b      	ldr	r3, [pc, #172]	@ (8002300 <main+0x498>)
 8002254:	2201      	movs	r2, #1
 8002256:	701a      	strb	r2, [r3, #0]

	  		  // State change
	  		  task = 1;
 8002258:	2301      	movs	r3, #1
 800225a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	  		  break;
 800225e:	e049      	b.n	80022f4 <main+0x48c>

	  	  case 1: // Servo Control
			  if (current_tick - last_tick_state[1] >= task_periods[1])
 8002260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	69fa      	ldr	r2, [r7, #28]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	6a3a      	ldr	r2, [r7, #32]
 800226a:	8852      	ldrh	r2, [r2, #2]
 800226c:	4293      	cmp	r3, r2
 800226e:	d30a      	bcc.n	8002286 <main+0x41e>
			  {
				  last_tick_state[1] = current_tick;
 8002270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002272:	69fa      	ldr	r2, [r7, #28]
 8002274:	605a      	str	r2, [r3, #4]
				  task_1_state = Servo_Task(task_1_state);
 8002276:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff fdd0 	bl	8001e20 <_Z10Servo_Taskh>
 8002280:	4603      	mov	r3, r0
 8002282:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			  }

			  // State change
			  task = 2;
 8002286:	2302      	movs	r3, #2
 8002288:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			  break;
 800228c:	e032      	b.n	80022f4 <main+0x48c>

	  	  case 2:
	  		  if (current_tick - last_tick_state[2] >= task_periods[2])
 800228e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	69fa      	ldr	r2, [r7, #28]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	6a3a      	ldr	r2, [r7, #32]
 8002298:	8892      	ldrh	r2, [r2, #4]
 800229a:	4293      	cmp	r3, r2
 800229c:	d307      	bcc.n	80022ae <main+0x446>
	  		  {
	  			  last_tick_state[2] = current_tick;
 800229e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a0:	69fa      	ldr	r2, [r7, #28]
 80022a2:	609a      	str	r2, [r3, #8]
	  			  Throttle->update_motor();
 80022a4:	4b17      	ldr	r3, [pc, #92]	@ (8002304 <main+0x49c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff fb7d 	bl	80019a8 <_ZN20RemoteControlControl12update_motorEv>
	  		  }

	  		  // State change
	  		  task = 3;
 80022ae:	2303      	movs	r3, #3
 80022b0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	  		  break;
 80022b4:	e01e      	b.n	80022f4 <main+0x48c>

	  	  case 3: // Debug messages
	  		  if (current_tick - last_tick_state[3] >= task_periods[3])
 80022b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	69fa      	ldr	r2, [r7, #28]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	6a3a      	ldr	r2, [r7, #32]
 80022c0:	88d2      	ldrh	r2, [r2, #6]
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d30e      	bcc.n	80022e4 <main+0x47c>
	  		  {
	  			  last_tick_state[3] = current_tick;
 80022c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	60da      	str	r2, [r3, #12]
	  			  My_Controller->debug_message(&huart2);
 80022cc:	4b0a      	ldr	r3, [pc, #40]	@ (80022f8 <main+0x490>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	490d      	ldr	r1, [pc, #52]	@ (8002308 <main+0x4a0>)
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe fe48 	bl	8000f68 <_ZN12MotorControl13debug_messageEP20__UART_HandleTypeDef>
	  			  Throttle->debug_message(&huart2);
 80022d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002304 <main+0x49c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	490a      	ldr	r1, [pc, #40]	@ (8002308 <main+0x4a0>)
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fbae 	bl	8001a40 <_ZN20RemoteControlControl13debug_messageEP20__UART_HandleTypeDef>
	  		  }

	  		  // State change
	  		  task = 1;
 80022e4:	2301      	movs	r3, #1
 80022e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	  		  break;
 80022ea:	e003      	b.n	80022f4 <main+0x48c>

	  	  default:
	  		  task = 0;
 80022ec:	2300      	movs	r3, #0
 80022ee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	  		  break;
 80022f2:	bf00      	nop
//	  Throttle->update_motor();
//	  My_Controller->debug_message(&huart2);
//	  HAL_Delay(1000/CONTROL_FREQUENCY_HZ);


  }
 80022f4:	e78b      	b.n	800220e <main+0x3a6>
 80022f6:	bf00      	nop
 80022f8:	200003c4 	.word	0x200003c4
 80022fc:	00000000 	.word	0x00000000
 8002300:	200003ac 	.word	0x200003ac
 8002304:	200003bc 	.word	0x200003bc
 8002308:	20000364 	.word	0x20000364

0800230c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b094      	sub	sp, #80	@ 0x50
 8002310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002312:	f107 0320 	add.w	r3, r7, #32
 8002316:	2230      	movs	r2, #48	@ 0x30
 8002318:	2100      	movs	r1, #0
 800231a:	4618      	mov	r0, r3
 800231c:	f005 f961 	bl	80075e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002320:	f107 030c 	add.w	r3, r7, #12
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	605a      	str	r2, [r3, #4]
 800232a:	609a      	str	r2, [r3, #8]
 800232c:	60da      	str	r2, [r3, #12]
 800232e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002330:	2300      	movs	r3, #0
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	4b2c      	ldr	r3, [pc, #176]	@ (80023e8 <_Z18SystemClock_Configv+0xdc>)
 8002336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002338:	4a2b      	ldr	r2, [pc, #172]	@ (80023e8 <_Z18SystemClock_Configv+0xdc>)
 800233a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800233e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002340:	4b29      	ldr	r3, [pc, #164]	@ (80023e8 <_Z18SystemClock_Configv+0xdc>)
 8002342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002344:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800234c:	2300      	movs	r3, #0
 800234e:	607b      	str	r3, [r7, #4]
 8002350:	4b26      	ldr	r3, [pc, #152]	@ (80023ec <_Z18SystemClock_Configv+0xe0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a25      	ldr	r2, [pc, #148]	@ (80023ec <_Z18SystemClock_Configv+0xe0>)
 8002356:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800235a:	6013      	str	r3, [r2, #0]
 800235c:	4b23      	ldr	r3, [pc, #140]	@ (80023ec <_Z18SystemClock_Configv+0xe0>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002364:	607b      	str	r3, [r7, #4]
 8002366:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002368:	2302      	movs	r3, #2
 800236a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800236c:	2301      	movs	r3, #1
 800236e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002370:	2310      	movs	r3, #16
 8002372:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002374:	2302      	movs	r3, #2
 8002376:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002378:	2300      	movs	r3, #0
 800237a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800237c:	2308      	movs	r3, #8
 800237e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002380:	2364      	movs	r3, #100	@ 0x64
 8002382:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002384:	2302      	movs	r3, #2
 8002386:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002388:	2304      	movs	r3, #4
 800238a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800238c:	f107 0320 	add.w	r3, r7, #32
 8002390:	4618      	mov	r0, r3
 8002392:	f001 fb51 	bl	8003a38 <HAL_RCC_OscConfig>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	bf14      	ite	ne
 800239c:	2301      	movne	r3, #1
 800239e:	2300      	moveq	r3, #0
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 80023a6:	f000 fb07 	bl	80029b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023aa:	230f      	movs	r3, #15
 80023ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023ae:	2302      	movs	r3, #2
 80023b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023b2:	2300      	movs	r3, #0
 80023b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023bc:	2300      	movs	r3, #0
 80023be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80023c0:	f107 030c 	add.w	r3, r7, #12
 80023c4:	2103      	movs	r1, #3
 80023c6:	4618      	mov	r0, r3
 80023c8:	f001 fdae 	bl	8003f28 <HAL_RCC_ClockConfig>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	bf14      	ite	ne
 80023d2:	2301      	movne	r3, #1
 80023d4:	2300      	moveq	r3, #0
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 80023dc:	f000 faec 	bl	80029b8 <Error_Handler>
  }
}
 80023e0:	bf00      	nop
 80023e2:	3750      	adds	r7, #80	@ 0x50
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40023800 	.word	0x40023800
 80023ec:	40007000 	.word	0x40007000

080023f0 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80023f4:	4b15      	ldr	r3, [pc, #84]	@ (800244c <_ZL12MX_I2C1_Initv+0x5c>)
 80023f6:	4a16      	ldr	r2, [pc, #88]	@ (8002450 <_ZL12MX_I2C1_Initv+0x60>)
 80023f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80023fa:	4b14      	ldr	r3, [pc, #80]	@ (800244c <_ZL12MX_I2C1_Initv+0x5c>)
 80023fc:	4a15      	ldr	r2, [pc, #84]	@ (8002454 <_ZL12MX_I2C1_Initv+0x64>)
 80023fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002400:	4b12      	ldr	r3, [pc, #72]	@ (800244c <_ZL12MX_I2C1_Initv+0x5c>)
 8002402:	2200      	movs	r2, #0
 8002404:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002406:	4b11      	ldr	r3, [pc, #68]	@ (800244c <_ZL12MX_I2C1_Initv+0x5c>)
 8002408:	2200      	movs	r2, #0
 800240a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800240c:	4b0f      	ldr	r3, [pc, #60]	@ (800244c <_ZL12MX_I2C1_Initv+0x5c>)
 800240e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002412:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002414:	4b0d      	ldr	r3, [pc, #52]	@ (800244c <_ZL12MX_I2C1_Initv+0x5c>)
 8002416:	2200      	movs	r2, #0
 8002418:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800241a:	4b0c      	ldr	r3, [pc, #48]	@ (800244c <_ZL12MX_I2C1_Initv+0x5c>)
 800241c:	2200      	movs	r2, #0
 800241e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002420:	4b0a      	ldr	r3, [pc, #40]	@ (800244c <_ZL12MX_I2C1_Initv+0x5c>)
 8002422:	2200      	movs	r2, #0
 8002424:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002426:	4b09      	ldr	r3, [pc, #36]	@ (800244c <_ZL12MX_I2C1_Initv+0x5c>)
 8002428:	2200      	movs	r2, #0
 800242a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800242c:	4807      	ldr	r0, [pc, #28]	@ (800244c <_ZL12MX_I2C1_Initv+0x5c>)
 800242e:	f001 f9bf 	bl	80037b0 <HAL_I2C_Init>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	bf14      	ite	ne
 8002438:	2301      	movne	r3, #1
 800243a:	2300      	moveq	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8002442:	f000 fab9 	bl	80029b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	200001f0 	.word	0x200001f0
 8002450:	40005400 	.word	0x40005400
 8002454:	000186a0 	.word	0x000186a0

08002458 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08a      	sub	sp, #40	@ 0x28
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800245e:	f107 0318 	add.w	r3, r7, #24
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	605a      	str	r2, [r3, #4]
 8002468:	609a      	str	r2, [r3, #8]
 800246a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800246c:	f107 0310 	add.w	r3, r7, #16
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
 8002474:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002476:	463b      	mov	r3, r7
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	605a      	str	r2, [r3, #4]
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002482:	4b41      	ldr	r3, [pc, #260]	@ (8002588 <_ZL12MX_TIM1_Initv+0x130>)
 8002484:	4a41      	ldr	r2, [pc, #260]	@ (800258c <_ZL12MX_TIM1_Initv+0x134>)
 8002486:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8002488:	4b3f      	ldr	r3, [pc, #252]	@ (8002588 <_ZL12MX_TIM1_Initv+0x130>)
 800248a:	2263      	movs	r2, #99	@ 0x63
 800248c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800248e:	4b3e      	ldr	r3, [pc, #248]	@ (8002588 <_ZL12MX_TIM1_Initv+0x130>)
 8002490:	2200      	movs	r2, #0
 8002492:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002494:	4b3c      	ldr	r3, [pc, #240]	@ (8002588 <_ZL12MX_TIM1_Initv+0x130>)
 8002496:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800249a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800249c:	4b3a      	ldr	r3, [pc, #232]	@ (8002588 <_ZL12MX_TIM1_Initv+0x130>)
 800249e:	2200      	movs	r2, #0
 80024a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024a2:	4b39      	ldr	r3, [pc, #228]	@ (8002588 <_ZL12MX_TIM1_Initv+0x130>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024a8:	4b37      	ldr	r3, [pc, #220]	@ (8002588 <_ZL12MX_TIM1_Initv+0x130>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024ae:	4836      	ldr	r0, [pc, #216]	@ (8002588 <_ZL12MX_TIM1_Initv+0x130>)
 80024b0:	f001 ff1a 	bl	80042e8 <HAL_TIM_Base_Init>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	bf14      	ite	ne
 80024ba:	2301      	movne	r3, #1
 80024bc:	2300      	moveq	r3, #0
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <_ZL12MX_TIM1_Initv+0x70>
  {
    Error_Handler();
 80024c4:	f000 fa78 	bl	80029b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024cc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024ce:	f107 0318 	add.w	r3, r7, #24
 80024d2:	4619      	mov	r1, r3
 80024d4:	482c      	ldr	r0, [pc, #176]	@ (8002588 <_ZL12MX_TIM1_Initv+0x130>)
 80024d6:	f003 f861 	bl	800559c <HAL_TIM_ConfigClockSource>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	bf14      	ite	ne
 80024e0:	2301      	movne	r3, #1
 80024e2:	2300      	moveq	r3, #0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <_ZL12MX_TIM1_Initv+0x96>
  {
    Error_Handler();
 80024ea:	f000 fa65 	bl	80029b8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80024ee:	4826      	ldr	r0, [pc, #152]	@ (8002588 <_ZL12MX_TIM1_Initv+0x130>)
 80024f0:	f002 f8b6 	bl	8004660 <HAL_TIM_IC_Init>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	bf14      	ite	ne
 80024fa:	2301      	movne	r3, #1
 80024fc:	2300      	moveq	r3, #0
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <_ZL12MX_TIM1_Initv+0xb0>
  {
    Error_Handler();
 8002504:	f000 fa58 	bl	80029b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002508:	2300      	movs	r3, #0
 800250a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002510:	f107 0310 	add.w	r3, r7, #16
 8002514:	4619      	mov	r1, r3
 8002516:	481c      	ldr	r0, [pc, #112]	@ (8002588 <_ZL12MX_TIM1_Initv+0x130>)
 8002518:	f003 fd60 	bl	8005fdc <HAL_TIMEx_MasterConfigSynchronization>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	bf14      	ite	ne
 8002522:	2301      	movne	r3, #1
 8002524:	2300      	moveq	r3, #0
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <_ZL12MX_TIM1_Initv+0xd8>
  {
    Error_Handler();
 800252c:	f000 fa44 	bl	80029b8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002530:	230a      	movs	r3, #10
 8002532:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002534:	2301      	movs	r3, #1
 8002536:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002538:	2300      	movs	r3, #0
 800253a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800253c:	2300      	movs	r3, #0
 800253e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002540:	463b      	mov	r3, r7
 8002542:	2200      	movs	r2, #0
 8002544:	4619      	mov	r1, r3
 8002546:	4810      	ldr	r0, [pc, #64]	@ (8002588 <_ZL12MX_TIM1_Initv+0x130>)
 8002548:	f002 feca 	bl	80052e0 <HAL_TIM_IC_ConfigChannel>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	bf14      	ite	ne
 8002552:	2301      	movne	r3, #1
 8002554:	2300      	moveq	r3, #0
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <_ZL12MX_TIM1_Initv+0x108>
  {
    Error_Handler();
 800255c:	f000 fa2c 	bl	80029b8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002560:	463b      	mov	r3, r7
 8002562:	2204      	movs	r2, #4
 8002564:	4619      	mov	r1, r3
 8002566:	4808      	ldr	r0, [pc, #32]	@ (8002588 <_ZL12MX_TIM1_Initv+0x130>)
 8002568:	f002 feba 	bl	80052e0 <HAL_TIM_IC_ConfigChannel>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	bf14      	ite	ne
 8002572:	2301      	movne	r3, #1
 8002574:	2300      	moveq	r3, #0
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <_ZL12MX_TIM1_Initv+0x128>
  {
    Error_Handler();
 800257c:	f000 fa1c 	bl	80029b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002580:	bf00      	nop
 8002582:	3728      	adds	r7, #40	@ 0x28
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	20000244 	.word	0x20000244
 800258c:	40010000 	.word	0x40010000

08002590 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08e      	sub	sp, #56	@ 0x38
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002596:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	605a      	str	r2, [r3, #4]
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025a4:	f107 0320 	add.w	r3, r7, #32
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025ae:	1d3b      	adds	r3, r7, #4
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	605a      	str	r2, [r3, #4]
 80025b6:	609a      	str	r2, [r3, #8]
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	611a      	str	r2, [r3, #16]
 80025bc:	615a      	str	r2, [r3, #20]
 80025be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80025c0:	4b39      	ldr	r3, [pc, #228]	@ (80026a8 <_ZL12MX_TIM2_Initv+0x118>)
 80025c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80025c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80025c8:	4b37      	ldr	r3, [pc, #220]	@ (80026a8 <_ZL12MX_TIM2_Initv+0x118>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ce:	4b36      	ldr	r3, [pc, #216]	@ (80026a8 <_ZL12MX_TIM2_Initv+0x118>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 80025d4:	4b34      	ldr	r3, [pc, #208]	@ (80026a8 <_ZL12MX_TIM2_Initv+0x118>)
 80025d6:	f241 3287 	movw	r2, #4999	@ 0x1387
 80025da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025dc:	4b32      	ldr	r3, [pc, #200]	@ (80026a8 <_ZL12MX_TIM2_Initv+0x118>)
 80025de:	2200      	movs	r2, #0
 80025e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e2:	4b31      	ldr	r3, [pc, #196]	@ (80026a8 <_ZL12MX_TIM2_Initv+0x118>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025e8:	482f      	ldr	r0, [pc, #188]	@ (80026a8 <_ZL12MX_TIM2_Initv+0x118>)
 80025ea:	f001 fe7d 	bl	80042e8 <HAL_TIM_Base_Init>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	bf14      	ite	ne
 80025f4:	2301      	movne	r3, #1
 80025f6:	2300      	moveq	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 80025fe:	f000 f9db 	bl	80029b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002602:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002606:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002608:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800260c:	4619      	mov	r1, r3
 800260e:	4826      	ldr	r0, [pc, #152]	@ (80026a8 <_ZL12MX_TIM2_Initv+0x118>)
 8002610:	f002 ffc4 	bl	800559c <HAL_TIM_ConfigClockSource>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	bf14      	ite	ne
 800261a:	2301      	movne	r3, #1
 800261c:	2300      	moveq	r3, #0
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 8002624:	f000 f9c8 	bl	80029b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002628:	481f      	ldr	r0, [pc, #124]	@ (80026a8 <_ZL12MX_TIM2_Initv+0x118>)
 800262a:	f001 feac 	bl	8004386 <HAL_TIM_PWM_Init>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	bf14      	ite	ne
 8002634:	2301      	movne	r3, #1
 8002636:	2300      	moveq	r3, #0
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 800263e:	f000 f9bb 	bl	80029b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002642:	2300      	movs	r3, #0
 8002644:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002646:	2300      	movs	r3, #0
 8002648:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800264a:	f107 0320 	add.w	r3, r7, #32
 800264e:	4619      	mov	r1, r3
 8002650:	4815      	ldr	r0, [pc, #84]	@ (80026a8 <_ZL12MX_TIM2_Initv+0x118>)
 8002652:	f003 fcc3 	bl	8005fdc <HAL_TIMEx_MasterConfigSynchronization>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	bf14      	ite	ne
 800265c:	2301      	movne	r3, #1
 800265e:	2300      	moveq	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8002666:	f000 f9a7 	bl	80029b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800266a:	2360      	movs	r3, #96	@ 0x60
 800266c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800266e:	2300      	movs	r3, #0
 8002670:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002676:	2300      	movs	r3, #0
 8002678:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800267a:	1d3b      	adds	r3, r7, #4
 800267c:	2200      	movs	r2, #0
 800267e:	4619      	mov	r1, r3
 8002680:	4809      	ldr	r0, [pc, #36]	@ (80026a8 <_ZL12MX_TIM2_Initv+0x118>)
 8002682:	f002 fec9 	bl	8005418 <HAL_TIM_PWM_ConfigChannel>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	bf14      	ite	ne
 800268c:	2301      	movne	r3, #1
 800268e:	2300      	moveq	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 8002696:	f000 f98f 	bl	80029b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800269a:	4803      	ldr	r0, [pc, #12]	@ (80026a8 <_ZL12MX_TIM2_Initv+0x118>)
 800269c:	f000 fae4 	bl	8002c68 <HAL_TIM_MspPostInit>

}
 80026a0:	bf00      	nop
 80026a2:	3738      	adds	r7, #56	@ 0x38
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	2000028c 	.word	0x2000028c

080026ac <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08e      	sub	sp, #56	@ 0x38
 80026b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	605a      	str	r2, [r3, #4]
 80026bc:	609a      	str	r2, [r3, #8]
 80026be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026c0:	f107 0320 	add.w	r3, r7, #32
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026ca:	1d3b      	adds	r3, r7, #4
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	60da      	str	r2, [r3, #12]
 80026d6:	611a      	str	r2, [r3, #16]
 80026d8:	615a      	str	r2, [r3, #20]
 80026da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026dc:	4b41      	ldr	r3, [pc, #260]	@ (80027e4 <_ZL12MX_TIM3_Initv+0x138>)
 80026de:	4a42      	ldr	r2, [pc, #264]	@ (80027e8 <_ZL12MX_TIM3_Initv+0x13c>)
 80026e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80026e2:	4b40      	ldr	r3, [pc, #256]	@ (80027e4 <_ZL12MX_TIM3_Initv+0x138>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e8:	4b3e      	ldr	r3, [pc, #248]	@ (80027e4 <_ZL12MX_TIM3_Initv+0x138>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000-1;
 80026ee:	4b3d      	ldr	r3, [pc, #244]	@ (80027e4 <_ZL12MX_TIM3_Initv+0x138>)
 80026f0:	f241 3287 	movw	r2, #4999	@ 0x1387
 80026f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026f6:	4b3b      	ldr	r3, [pc, #236]	@ (80027e4 <_ZL12MX_TIM3_Initv+0x138>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026fc:	4b39      	ldr	r3, [pc, #228]	@ (80027e4 <_ZL12MX_TIM3_Initv+0x138>)
 80026fe:	2200      	movs	r2, #0
 8002700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002702:	4838      	ldr	r0, [pc, #224]	@ (80027e4 <_ZL12MX_TIM3_Initv+0x138>)
 8002704:	f001 fdf0 	bl	80042e8 <HAL_TIM_Base_Init>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	bf14      	ite	ne
 800270e:	2301      	movne	r3, #1
 8002710:	2300      	moveq	r3, #0
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 8002718:	f000 f94e 	bl	80029b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800271c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002720:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002722:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002726:	4619      	mov	r1, r3
 8002728:	482e      	ldr	r0, [pc, #184]	@ (80027e4 <_ZL12MX_TIM3_Initv+0x138>)
 800272a:	f002 ff37 	bl	800559c <HAL_TIM_ConfigClockSource>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	bf14      	ite	ne
 8002734:	2301      	movne	r3, #1
 8002736:	2300      	moveq	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 800273e:	f000 f93b 	bl	80029b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002742:	4828      	ldr	r0, [pc, #160]	@ (80027e4 <_ZL12MX_TIM3_Initv+0x138>)
 8002744:	f001 fe1f 	bl	8004386 <HAL_TIM_PWM_Init>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	bf14      	ite	ne
 800274e:	2301      	movne	r3, #1
 8002750:	2300      	moveq	r3, #0
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 8002758:	f000 f92e 	bl	80029b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800275c:	2300      	movs	r3, #0
 800275e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002760:	2300      	movs	r3, #0
 8002762:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002764:	f107 0320 	add.w	r3, r7, #32
 8002768:	4619      	mov	r1, r3
 800276a:	481e      	ldr	r0, [pc, #120]	@ (80027e4 <_ZL12MX_TIM3_Initv+0x138>)
 800276c:	f003 fc36 	bl	8005fdc <HAL_TIMEx_MasterConfigSynchronization>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	bf14      	ite	ne
 8002776:	2301      	movne	r3, #1
 8002778:	2300      	moveq	r3, #0
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8002780:	f000 f91a 	bl	80029b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002784:	2360      	movs	r3, #96	@ 0x60
 8002786:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002788:	2300      	movs	r3, #0
 800278a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800278c:	2300      	movs	r3, #0
 800278e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002794:	1d3b      	adds	r3, r7, #4
 8002796:	2200      	movs	r2, #0
 8002798:	4619      	mov	r1, r3
 800279a:	4812      	ldr	r0, [pc, #72]	@ (80027e4 <_ZL12MX_TIM3_Initv+0x138>)
 800279c:	f002 fe3c 	bl	8005418 <HAL_TIM_PWM_ConfigChannel>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	bf14      	ite	ne
 80027a6:	2301      	movne	r3, #1
 80027a8:	2300      	moveq	r3, #0
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 80027b0:	f000 f902 	bl	80029b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80027b4:	1d3b      	adds	r3, r7, #4
 80027b6:	2204      	movs	r2, #4
 80027b8:	4619      	mov	r1, r3
 80027ba:	480a      	ldr	r0, [pc, #40]	@ (80027e4 <_ZL12MX_TIM3_Initv+0x138>)
 80027bc:	f002 fe2c 	bl	8005418 <HAL_TIM_PWM_ConfigChannel>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	bf14      	ite	ne
 80027c6:	2301      	movne	r3, #1
 80027c8:	2300      	moveq	r3, #0
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <_ZL12MX_TIM3_Initv+0x128>
  {
    Error_Handler();
 80027d0:	f000 f8f2 	bl	80029b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80027d4:	4803      	ldr	r0, [pc, #12]	@ (80027e4 <_ZL12MX_TIM3_Initv+0x138>)
 80027d6:	f000 fa47 	bl	8002c68 <HAL_TIM_MspPostInit>

}
 80027da:	bf00      	nop
 80027dc:	3738      	adds	r7, #56	@ 0x38
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	200002d4 	.word	0x200002d4
 80027e8:	40000400 	.word	0x40000400

080027ec <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08c      	sub	sp, #48	@ 0x30
 80027f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80027f2:	f107 030c 	add.w	r3, r7, #12
 80027f6:	2224      	movs	r2, #36	@ 0x24
 80027f8:	2100      	movs	r1, #0
 80027fa:	4618      	mov	r0, r3
 80027fc:	f004 fef1 	bl	80075e2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002800:	1d3b      	adds	r3, r7, #4
 8002802:	2200      	movs	r2, #0
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002808:	4b25      	ldr	r3, [pc, #148]	@ (80028a0 <_ZL12MX_TIM5_Initv+0xb4>)
 800280a:	4a26      	ldr	r2, [pc, #152]	@ (80028a4 <_ZL12MX_TIM5_Initv+0xb8>)
 800280c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800280e:	4b24      	ldr	r3, [pc, #144]	@ (80028a0 <_ZL12MX_TIM5_Initv+0xb4>)
 8002810:	2200      	movs	r2, #0
 8002812:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002814:	4b22      	ldr	r3, [pc, #136]	@ (80028a0 <_ZL12MX_TIM5_Initv+0xb4>)
 8002816:	2200      	movs	r2, #0
 8002818:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800281a:	4b21      	ldr	r3, [pc, #132]	@ (80028a0 <_ZL12MX_TIM5_Initv+0xb4>)
 800281c:	f04f 32ff 	mov.w	r2, #4294967295
 8002820:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002822:	4b1f      	ldr	r3, [pc, #124]	@ (80028a0 <_ZL12MX_TIM5_Initv+0xb4>)
 8002824:	2200      	movs	r2, #0
 8002826:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002828:	4b1d      	ldr	r3, [pc, #116]	@ (80028a0 <_ZL12MX_TIM5_Initv+0xb4>)
 800282a:	2200      	movs	r2, #0
 800282c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800282e:	2303      	movs	r3, #3
 8002830:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002832:	2300      	movs	r3, #0
 8002834:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002836:	2301      	movs	r3, #1
 8002838:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800283a:	2300      	movs	r3, #0
 800283c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002842:	2300      	movs	r3, #0
 8002844:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002846:	2301      	movs	r3, #1
 8002848:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800284a:	2300      	movs	r3, #0
 800284c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800284e:	2300      	movs	r3, #0
 8002850:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002852:	f107 030c 	add.w	r3, r7, #12
 8002856:	4619      	mov	r1, r3
 8002858:	4811      	ldr	r0, [pc, #68]	@ (80028a0 <_ZL12MX_TIM5_Initv+0xb4>)
 800285a:	f002 f923 	bl	8004aa4 <HAL_TIM_Encoder_Init>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	bf14      	ite	ne
 8002864:	2301      	movne	r3, #1
 8002866:	2300      	moveq	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <_ZL12MX_TIM5_Initv+0x86>
  {
    Error_Handler();
 800286e:	f000 f8a3 	bl	80029b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002872:	2300      	movs	r3, #0
 8002874:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002876:	2300      	movs	r3, #0
 8002878:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800287a:	1d3b      	adds	r3, r7, #4
 800287c:	4619      	mov	r1, r3
 800287e:	4808      	ldr	r0, [pc, #32]	@ (80028a0 <_ZL12MX_TIM5_Initv+0xb4>)
 8002880:	f003 fbac 	bl	8005fdc <HAL_TIMEx_MasterConfigSynchronization>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	bf14      	ite	ne
 800288a:	2301      	movne	r3, #1
 800288c:	2300      	moveq	r3, #0
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <_ZL12MX_TIM5_Initv+0xac>
  {
    Error_Handler();
 8002894:	f000 f890 	bl	80029b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002898:	bf00      	nop
 800289a:	3730      	adds	r7, #48	@ 0x30
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	2000031c 	.word	0x2000031c
 80028a4:	40000c00 	.word	0x40000c00

080028a8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028ac:	4b13      	ldr	r3, [pc, #76]	@ (80028fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80028ae:	4a14      	ldr	r2, [pc, #80]	@ (8002900 <_ZL19MX_USART2_UART_Initv+0x58>)
 80028b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80028b2:	4b12      	ldr	r3, [pc, #72]	@ (80028fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80028b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80028b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028ba:	4b10      	ldr	r3, [pc, #64]	@ (80028fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80028bc:	2200      	movs	r2, #0
 80028be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028c0:	4b0e      	ldr	r3, [pc, #56]	@ (80028fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028c6:	4b0d      	ldr	r3, [pc, #52]	@ (80028fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028cc:	4b0b      	ldr	r3, [pc, #44]	@ (80028fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80028ce:	220c      	movs	r2, #12
 80028d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028d2:	4b0a      	ldr	r3, [pc, #40]	@ (80028fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028d8:	4b08      	ldr	r3, [pc, #32]	@ (80028fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80028da:	2200      	movs	r2, #0
 80028dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028de:	4807      	ldr	r0, [pc, #28]	@ (80028fc <_ZL19MX_USART2_UART_Initv+0x54>)
 80028e0:	f003 fbfe 	bl	80060e0 <HAL_UART_Init>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	bf14      	ite	ne
 80028ea:	2301      	movne	r3, #1
 80028ec:	2300      	moveq	r3, #0
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80028f4:	f000 f860 	bl	80029b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028f8:	bf00      	nop
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	20000364 	.word	0x20000364
 8002900:	40004400 	.word	0x40004400

08002904 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b088      	sub	sp, #32
 8002908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800290a:	f107 030c 	add.w	r3, r7, #12
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	605a      	str	r2, [r3, #4]
 8002914:	609a      	str	r2, [r3, #8]
 8002916:	60da      	str	r2, [r3, #12]
 8002918:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	4b24      	ldr	r3, [pc, #144]	@ (80029b0 <_ZL12MX_GPIO_Initv+0xac>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002922:	4a23      	ldr	r2, [pc, #140]	@ (80029b0 <_ZL12MX_GPIO_Initv+0xac>)
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	6313      	str	r3, [r2, #48]	@ 0x30
 800292a:	4b21      	ldr	r3, [pc, #132]	@ (80029b0 <_ZL12MX_GPIO_Initv+0xac>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	607b      	str	r3, [r7, #4]
 800293a:	4b1d      	ldr	r3, [pc, #116]	@ (80029b0 <_ZL12MX_GPIO_Initv+0xac>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293e:	4a1c      	ldr	r2, [pc, #112]	@ (80029b0 <_ZL12MX_GPIO_Initv+0xac>)
 8002940:	f043 0302 	orr.w	r3, r3, #2
 8002944:	6313      	str	r3, [r2, #48]	@ 0x30
 8002946:	4b1a      	ldr	r3, [pc, #104]	@ (80029b0 <_ZL12MX_GPIO_Initv+0xac>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294a:	f003 0302 	and.w	r3, r3, #2
 800294e:	607b      	str	r3, [r7, #4]
 8002950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002952:	2200      	movs	r2, #0
 8002954:	f44f 4150 	mov.w	r1, #53248	@ 0xd000
 8002958:	4816      	ldr	r0, [pc, #88]	@ (80029b4 <_ZL12MX_GPIO_Initv+0xb0>)
 800295a:	f000 fedd 	bl	8003718 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 800295e:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8002962:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002964:	2301      	movs	r3, #1
 8002966:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296c:	2300      	movs	r3, #0
 800296e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002970:	f107 030c 	add.w	r3, r7, #12
 8002974:	4619      	mov	r1, r3
 8002976:	480f      	ldr	r0, [pc, #60]	@ (80029b4 <_ZL12MX_GPIO_Initv+0xb0>)
 8002978:	f000 fd32 	bl	80033e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800297c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002980:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002982:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002986:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800298c:	f107 030c 	add.w	r3, r7, #12
 8002990:	4619      	mov	r1, r3
 8002992:	4808      	ldr	r0, [pc, #32]	@ (80029b4 <_ZL12MX_GPIO_Initv+0xb0>)
 8002994:	f000 fd24 	bl	80033e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002998:	2200      	movs	r2, #0
 800299a:	2100      	movs	r1, #0
 800299c:	2028      	movs	r0, #40	@ 0x28
 800299e:	f000 fce8 	bl	8003372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80029a2:	2028      	movs	r0, #40	@ 0x28
 80029a4:	f000 fd01 	bl	80033aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80029a8:	bf00      	nop
 80029aa:	3720      	adds	r7, #32
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	40023800 	.word	0x40023800
 80029b4:	40020400 	.word	0x40020400

080029b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029bc:	b672      	cpsid	i
}
 80029be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029c0:	bf00      	nop
 80029c2:	e7fd      	b.n	80029c0 <Error_Handler+0x8>

080029c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	607b      	str	r3, [r7, #4]
 80029ce:	4b10      	ldr	r3, [pc, #64]	@ (8002a10 <HAL_MspInit+0x4c>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d2:	4a0f      	ldr	r2, [pc, #60]	@ (8002a10 <HAL_MspInit+0x4c>)
 80029d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80029da:	4b0d      	ldr	r3, [pc, #52]	@ (8002a10 <HAL_MspInit+0x4c>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029e2:	607b      	str	r3, [r7, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	603b      	str	r3, [r7, #0]
 80029ea:	4b09      	ldr	r3, [pc, #36]	@ (8002a10 <HAL_MspInit+0x4c>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	4a08      	ldr	r2, [pc, #32]	@ (8002a10 <HAL_MspInit+0x4c>)
 80029f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029f6:	4b06      	ldr	r3, [pc, #24]	@ (8002a10 <HAL_MspInit+0x4c>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40023800 	.word	0x40023800

08002a14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b08a      	sub	sp, #40	@ 0x28
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1c:	f107 0314 	add.w	r3, r7, #20
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	609a      	str	r2, [r3, #8]
 8002a28:	60da      	str	r2, [r3, #12]
 8002a2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a19      	ldr	r2, [pc, #100]	@ (8002a98 <HAL_I2C_MspInit+0x84>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d12c      	bne.n	8002a90 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	4b18      	ldr	r3, [pc, #96]	@ (8002a9c <HAL_I2C_MspInit+0x88>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3e:	4a17      	ldr	r2, [pc, #92]	@ (8002a9c <HAL_I2C_MspInit+0x88>)
 8002a40:	f043 0302 	orr.w	r3, r3, #2
 8002a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a46:	4b15      	ldr	r3, [pc, #84]	@ (8002a9c <HAL_I2C_MspInit+0x88>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002a52:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a58:	2312      	movs	r3, #18
 8002a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a60:	2303      	movs	r3, #3
 8002a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a64:	2304      	movs	r3, #4
 8002a66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a68:	f107 0314 	add.w	r3, r7, #20
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	480c      	ldr	r0, [pc, #48]	@ (8002aa0 <HAL_I2C_MspInit+0x8c>)
 8002a70:	f000 fcb6 	bl	80033e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a74:	2300      	movs	r3, #0
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	4b08      	ldr	r3, [pc, #32]	@ (8002a9c <HAL_I2C_MspInit+0x88>)
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7c:	4a07      	ldr	r2, [pc, #28]	@ (8002a9c <HAL_I2C_MspInit+0x88>)
 8002a7e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a82:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a84:	4b05      	ldr	r3, [pc, #20]	@ (8002a9c <HAL_I2C_MspInit+0x88>)
 8002a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a90:	bf00      	nop
 8002a92:	3728      	adds	r7, #40	@ 0x28
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40005400 	.word	0x40005400
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	40020400 	.word	0x40020400

08002aa4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08c      	sub	sp, #48	@ 0x30
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aac:	f107 031c 	add.w	r3, r7, #28
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a3d      	ldr	r2, [pc, #244]	@ (8002bb8 <HAL_TIM_Base_MspInit+0x114>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d14d      	bne.n	8002b62 <HAL_TIM_Base_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61bb      	str	r3, [r7, #24]
 8002aca:	4b3c      	ldr	r3, [pc, #240]	@ (8002bbc <HAL_TIM_Base_MspInit+0x118>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ace:	4a3b      	ldr	r2, [pc, #236]	@ (8002bbc <HAL_TIM_Base_MspInit+0x118>)
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ad6:	4b39      	ldr	r3, [pc, #228]	@ (8002bbc <HAL_TIM_Base_MspInit+0x118>)
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	61bb      	str	r3, [r7, #24]
 8002ae0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	4b35      	ldr	r3, [pc, #212]	@ (8002bbc <HAL_TIM_Base_MspInit+0x118>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aea:	4a34      	ldr	r2, [pc, #208]	@ (8002bbc <HAL_TIM_Base_MspInit+0x118>)
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002af2:	4b32      	ldr	r3, [pc, #200]	@ (8002bbc <HAL_TIM_Base_MspInit+0x118>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002afe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b04:	2302      	movs	r3, #2
 8002b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b10:	2301      	movs	r3, #1
 8002b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b14:	f107 031c 	add.w	r3, r7, #28
 8002b18:	4619      	mov	r1, r3
 8002b1a:	4829      	ldr	r0, [pc, #164]	@ (8002bc0 <HAL_TIM_Base_MspInit+0x11c>)
 8002b1c:	f000 fc60 	bl	80033e0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002b20:	2200      	movs	r2, #0
 8002b22:	2100      	movs	r1, #0
 8002b24:	2018      	movs	r0, #24
 8002b26:	f000 fc24 	bl	8003372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002b2a:	2018      	movs	r0, #24
 8002b2c:	f000 fc3d 	bl	80033aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002b30:	2200      	movs	r2, #0
 8002b32:	2100      	movs	r1, #0
 8002b34:	2019      	movs	r0, #25
 8002b36:	f000 fc1c 	bl	8003372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002b3a:	2019      	movs	r0, #25
 8002b3c:	f000 fc35 	bl	80033aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002b40:	2200      	movs	r2, #0
 8002b42:	2100      	movs	r1, #0
 8002b44:	201a      	movs	r0, #26
 8002b46:	f000 fc14 	bl	8003372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002b4a:	201a      	movs	r0, #26
 8002b4c:	f000 fc2d 	bl	80033aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002b50:	2200      	movs	r2, #0
 8002b52:	2100      	movs	r1, #0
 8002b54:	201b      	movs	r0, #27
 8002b56:	f000 fc0c 	bl	8003372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002b5a:	201b      	movs	r0, #27
 8002b5c:	f000 fc25 	bl	80033aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002b60:	e026      	b.n	8002bb0 <HAL_TIM_Base_MspInit+0x10c>
  else if(htim_base->Instance==TIM2)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b6a:	d10e      	bne.n	8002b8a <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	4b12      	ldr	r3, [pc, #72]	@ (8002bbc <HAL_TIM_Base_MspInit+0x118>)
 8002b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b74:	4a11      	ldr	r2, [pc, #68]	@ (8002bbc <HAL_TIM_Base_MspInit+0x118>)
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8002bbc <HAL_TIM_Base_MspInit+0x118>)
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	693b      	ldr	r3, [r7, #16]
}
 8002b88:	e012      	b.n	8002bb0 <HAL_TIM_Base_MspInit+0x10c>
  else if(htim_base->Instance==TIM3)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a0d      	ldr	r2, [pc, #52]	@ (8002bc4 <HAL_TIM_Base_MspInit+0x120>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d10d      	bne.n	8002bb0 <HAL_TIM_Base_MspInit+0x10c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b94:	2300      	movs	r3, #0
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	4b08      	ldr	r3, [pc, #32]	@ (8002bbc <HAL_TIM_Base_MspInit+0x118>)
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9c:	4a07      	ldr	r2, [pc, #28]	@ (8002bbc <HAL_TIM_Base_MspInit+0x118>)
 8002b9e:	f043 0302 	orr.w	r3, r3, #2
 8002ba2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ba4:	4b05      	ldr	r3, [pc, #20]	@ (8002bbc <HAL_TIM_Base_MspInit+0x118>)
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	68fb      	ldr	r3, [r7, #12]
}
 8002bb0:	bf00      	nop
 8002bb2:	3730      	adds	r7, #48	@ 0x30
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40010000 	.word	0x40010000
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	40020000 	.word	0x40020000
 8002bc4:	40000400 	.word	0x40000400

08002bc8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08a      	sub	sp, #40	@ 0x28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd0:	f107 0314 	add.w	r3, r7, #20
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a1d      	ldr	r2, [pc, #116]	@ (8002c5c <HAL_TIM_Encoder_MspInit+0x94>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d133      	bne.n	8002c52 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	4b1c      	ldr	r3, [pc, #112]	@ (8002c60 <HAL_TIM_Encoder_MspInit+0x98>)
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c60 <HAL_TIM_Encoder_MspInit+0x98>)
 8002bf4:	f043 0308 	orr.w	r3, r3, #8
 8002bf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bfa:	4b19      	ldr	r3, [pc, #100]	@ (8002c60 <HAL_TIM_Encoder_MspInit+0x98>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfe:	f003 0308 	and.w	r3, r3, #8
 8002c02:	613b      	str	r3, [r7, #16]
 8002c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	4b15      	ldr	r3, [pc, #84]	@ (8002c60 <HAL_TIM_Encoder_MspInit+0x98>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	4a14      	ldr	r2, [pc, #80]	@ (8002c60 <HAL_TIM_Encoder_MspInit+0x98>)
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c16:	4b12      	ldr	r3, [pc, #72]	@ (8002c60 <HAL_TIM_Encoder_MspInit+0x98>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c22:	2303      	movs	r3, #3
 8002c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c26:	2302      	movs	r3, #2
 8002c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002c32:	2302      	movs	r3, #2
 8002c34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c36:	f107 0314 	add.w	r3, r7, #20
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4809      	ldr	r0, [pc, #36]	@ (8002c64 <HAL_TIM_Encoder_MspInit+0x9c>)
 8002c3e:	f000 fbcf 	bl	80033e0 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002c42:	2200      	movs	r2, #0
 8002c44:	2100      	movs	r1, #0
 8002c46:	2032      	movs	r0, #50	@ 0x32
 8002c48:	f000 fb93 	bl	8003372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002c4c:	2032      	movs	r0, #50	@ 0x32
 8002c4e:	f000 fbac 	bl	80033aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002c52:	bf00      	nop
 8002c54:	3728      	adds	r7, #40	@ 0x28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40000c00 	.word	0x40000c00
 8002c60:	40023800 	.word	0x40023800
 8002c64:	40020000 	.word	0x40020000

08002c68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08a      	sub	sp, #40	@ 0x28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c70:	f107 0314 	add.w	r3, r7, #20
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	60da      	str	r2, [r3, #12]
 8002c7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c88:	d11f      	bne.n	8002cca <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	4b22      	ldr	r3, [pc, #136]	@ (8002d18 <HAL_TIM_MspPostInit+0xb0>)
 8002c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c92:	4a21      	ldr	r2, [pc, #132]	@ (8002d18 <HAL_TIM_MspPostInit+0xb0>)
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8002d18 <HAL_TIM_MspPostInit+0xb0>)
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	613b      	str	r3, [r7, #16]
 8002ca4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002ca6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cac:	2302      	movs	r3, #2
 8002cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cbc:	f107 0314 	add.w	r3, r7, #20
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4816      	ldr	r0, [pc, #88]	@ (8002d1c <HAL_TIM_MspPostInit+0xb4>)
 8002cc4:	f000 fb8c 	bl	80033e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002cc8:	e022      	b.n	8002d10 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a14      	ldr	r2, [pc, #80]	@ (8002d20 <HAL_TIM_MspPostInit+0xb8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d11d      	bne.n	8002d10 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8002d18 <HAL_TIM_MspPostInit+0xb0>)
 8002cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cdc:	4a0e      	ldr	r2, [pc, #56]	@ (8002d18 <HAL_TIM_MspPostInit+0xb0>)
 8002cde:	f043 0302 	orr.w	r3, r3, #2
 8002ce2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d18 <HAL_TIM_MspPostInit+0xb0>)
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002cf0:	2330      	movs	r3, #48	@ 0x30
 8002cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d00:	2302      	movs	r3, #2
 8002d02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d04:	f107 0314 	add.w	r3, r7, #20
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4806      	ldr	r0, [pc, #24]	@ (8002d24 <HAL_TIM_MspPostInit+0xbc>)
 8002d0c:	f000 fb68 	bl	80033e0 <HAL_GPIO_Init>
}
 8002d10:	bf00      	nop
 8002d12:	3728      	adds	r7, #40	@ 0x28
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40020000 	.word	0x40020000
 8002d20:	40000400 	.word	0x40000400
 8002d24:	40020400 	.word	0x40020400

08002d28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08a      	sub	sp, #40	@ 0x28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d30:	f107 0314 	add.w	r3, r7, #20
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	605a      	str	r2, [r3, #4]
 8002d3a:	609a      	str	r2, [r3, #8]
 8002d3c:	60da      	str	r2, [r3, #12]
 8002d3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a19      	ldr	r2, [pc, #100]	@ (8002dac <HAL_UART_MspInit+0x84>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d12b      	bne.n	8002da2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	613b      	str	r3, [r7, #16]
 8002d4e:	4b18      	ldr	r3, [pc, #96]	@ (8002db0 <HAL_UART_MspInit+0x88>)
 8002d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d52:	4a17      	ldr	r2, [pc, #92]	@ (8002db0 <HAL_UART_MspInit+0x88>)
 8002d54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d58:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d5a:	4b15      	ldr	r3, [pc, #84]	@ (8002db0 <HAL_UART_MspInit+0x88>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d62:	613b      	str	r3, [r7, #16]
 8002d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	4b11      	ldr	r3, [pc, #68]	@ (8002db0 <HAL_UART_MspInit+0x88>)
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6e:	4a10      	ldr	r2, [pc, #64]	@ (8002db0 <HAL_UART_MspInit+0x88>)
 8002d70:	f043 0301 	orr.w	r3, r3, #1
 8002d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d76:	4b0e      	ldr	r3, [pc, #56]	@ (8002db0 <HAL_UART_MspInit+0x88>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002d82:	230c      	movs	r3, #12
 8002d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d86:	2302      	movs	r3, #2
 8002d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d92:	2307      	movs	r3, #7
 8002d94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d96:	f107 0314 	add.w	r3, r7, #20
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	4805      	ldr	r0, [pc, #20]	@ (8002db4 <HAL_UART_MspInit+0x8c>)
 8002d9e:	f000 fb1f 	bl	80033e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002da2:	bf00      	nop
 8002da4:	3728      	adds	r7, #40	@ 0x28
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	40004400 	.word	0x40004400
 8002db0:	40023800 	.word	0x40023800
 8002db4:	40020000 	.word	0x40020000

08002db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002dbc:	bf00      	nop
 8002dbe:	e7fd      	b.n	8002dbc <NMI_Handler+0x4>

08002dc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dc4:	bf00      	nop
 8002dc6:	e7fd      	b.n	8002dc4 <HardFault_Handler+0x4>

08002dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dcc:	bf00      	nop
 8002dce:	e7fd      	b.n	8002dcc <MemManage_Handler+0x4>

08002dd0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dd4:	bf00      	nop
 8002dd6:	e7fd      	b.n	8002dd4 <BusFault_Handler+0x4>

08002dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ddc:	bf00      	nop
 8002dde:	e7fd      	b.n	8002ddc <UsageFault_Handler+0x4>

08002de0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002de4:	bf00      	nop
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dee:	b480      	push	{r7}
 8002df0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e00:	bf00      	nop
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e0e:	f000 f991 	bl	8003134 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e1c:	4802      	ldr	r0, [pc, #8]	@ (8002e28 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002e1e:	f002 f96f 	bl	8005100 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20000244 	.word	0x20000244

08002e2c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e30:	4802      	ldr	r0, [pc, #8]	@ (8002e3c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002e32:	f002 f965 	bl	8005100 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002e36:	bf00      	nop
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20000244 	.word	0x20000244

08002e40 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e44:	4802      	ldr	r0, [pc, #8]	@ (8002e50 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002e46:	f002 f95b 	bl	8005100 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	20000244 	.word	0x20000244

08002e54 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e58:	4802      	ldr	r0, [pc, #8]	@ (8002e64 <TIM1_CC_IRQHandler+0x10>)
 8002e5a:	f002 f951 	bl	8005100 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000244 	.word	0x20000244

08002e68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002e6c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002e70:	f000 fc86 	bl	8003780 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e74:	bf00      	nop
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002e7c:	4802      	ldr	r0, [pc, #8]	@ (8002e88 <TIM5_IRQHandler+0x10>)
 8002e7e:	f002 f93f 	bl	8005100 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	2000031c 	.word	0x2000031c

08002e8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  return 1;
 8002e90:	2301      	movs	r3, #1
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <_kill>:

int _kill(int pid, int sig)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ea6:	f004 fc43 	bl	8007730 <__errno>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2216      	movs	r2, #22
 8002eae:	601a      	str	r2, [r3, #0]
  return -1;
 8002eb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3708      	adds	r7, #8
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <_exit>:

void _exit (int status)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff ffe7 	bl	8002e9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ece:	bf00      	nop
 8002ed0:	e7fd      	b.n	8002ece <_exit+0x12>

08002ed2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b086      	sub	sp, #24
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ede:	2300      	movs	r3, #0
 8002ee0:	617b      	str	r3, [r7, #20]
 8002ee2:	e00a      	b.n	8002efa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ee4:	f3af 8000 	nop.w
 8002ee8:	4601      	mov	r1, r0
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	60ba      	str	r2, [r7, #8]
 8002ef0:	b2ca      	uxtb	r2, r1
 8002ef2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	617b      	str	r3, [r7, #20]
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	dbf0      	blt.n	8002ee4 <_read+0x12>
  }

  return len;
 8002f02:	687b      	ldr	r3, [r7, #4]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	e009      	b.n	8002f32 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	60ba      	str	r2, [r7, #8]
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	dbf1      	blt.n	8002f1e <_write+0x12>
  }
  return len;
 8002f3a:	687b      	ldr	r3, [r7, #4]
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3718      	adds	r7, #24
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <_close>:

int _close(int file)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f6c:	605a      	str	r2, [r3, #4]
  return 0;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <_isatty>:

int _isatty(int file)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f84:	2301      	movs	r3, #1
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b085      	sub	sp, #20
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b086      	sub	sp, #24
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fb4:	4a14      	ldr	r2, [pc, #80]	@ (8003008 <_sbrk+0x5c>)
 8002fb6:	4b15      	ldr	r3, [pc, #84]	@ (800300c <_sbrk+0x60>)
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fc0:	4b13      	ldr	r3, [pc, #76]	@ (8003010 <_sbrk+0x64>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d102      	bne.n	8002fce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fc8:	4b11      	ldr	r3, [pc, #68]	@ (8003010 <_sbrk+0x64>)
 8002fca:	4a12      	ldr	r2, [pc, #72]	@ (8003014 <_sbrk+0x68>)
 8002fcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fce:	4b10      	ldr	r3, [pc, #64]	@ (8003010 <_sbrk+0x64>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d207      	bcs.n	8002fec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fdc:	f004 fba8 	bl	8007730 <__errno>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	220c      	movs	r2, #12
 8002fe4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fea:	e009      	b.n	8003000 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fec:	4b08      	ldr	r3, [pc, #32]	@ (8003010 <_sbrk+0x64>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ff2:	4b07      	ldr	r3, [pc, #28]	@ (8003010 <_sbrk+0x64>)
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	4a05      	ldr	r2, [pc, #20]	@ (8003010 <_sbrk+0x64>)
 8002ffc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	20020000 	.word	0x20020000
 800300c:	00000400 	.word	0x00000400
 8003010:	200003cc 	.word	0x200003cc
 8003014:	20000528 	.word	0x20000528

08003018 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800301c:	4b06      	ldr	r3, [pc, #24]	@ (8003038 <SystemInit+0x20>)
 800301e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003022:	4a05      	ldr	r2, [pc, #20]	@ (8003038 <SystemInit+0x20>)
 8003024:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003028:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800302c:	bf00      	nop
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800303c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003074 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003040:	f7ff ffea 	bl	8003018 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003044:	480c      	ldr	r0, [pc, #48]	@ (8003078 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003046:	490d      	ldr	r1, [pc, #52]	@ (800307c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003048:	4a0d      	ldr	r2, [pc, #52]	@ (8003080 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800304a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800304c:	e002      	b.n	8003054 <LoopCopyDataInit>

0800304e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800304e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003052:	3304      	adds	r3, #4

08003054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003058:	d3f9      	bcc.n	800304e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800305a:	4a0a      	ldr	r2, [pc, #40]	@ (8003084 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800305c:	4c0a      	ldr	r4, [pc, #40]	@ (8003088 <LoopFillZerobss+0x22>)
  movs r3, #0
 800305e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003060:	e001      	b.n	8003066 <LoopFillZerobss>

08003062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003064:	3204      	adds	r2, #4

08003066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003068:	d3fb      	bcc.n	8003062 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800306a:	f004 fb67 	bl	800773c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800306e:	f7fe fefb 	bl	8001e68 <main>
  bx  lr    
 8003072:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003074:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800307c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003080:	08009ab0 	.word	0x08009ab0
  ldr r2, =_sbss
 8003084:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003088:	20000524 	.word	0x20000524

0800308c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800308c:	e7fe      	b.n	800308c <ADC_IRQHandler>
	...

08003090 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003094:	4b0e      	ldr	r3, [pc, #56]	@ (80030d0 <HAL_Init+0x40>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a0d      	ldr	r2, [pc, #52]	@ (80030d0 <HAL_Init+0x40>)
 800309a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800309e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030a0:	4b0b      	ldr	r3, [pc, #44]	@ (80030d0 <HAL_Init+0x40>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a0a      	ldr	r2, [pc, #40]	@ (80030d0 <HAL_Init+0x40>)
 80030a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030ac:	4b08      	ldr	r3, [pc, #32]	@ (80030d0 <HAL_Init+0x40>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a07      	ldr	r2, [pc, #28]	@ (80030d0 <HAL_Init+0x40>)
 80030b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030b8:	2003      	movs	r0, #3
 80030ba:	f000 f94f 	bl	800335c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030be:	200f      	movs	r0, #15
 80030c0:	f000 f808 	bl	80030d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030c4:	f7ff fc7e 	bl	80029c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	40023c00 	.word	0x40023c00

080030d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030dc:	4b12      	ldr	r3, [pc, #72]	@ (8003128 <HAL_InitTick+0x54>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	4b12      	ldr	r3, [pc, #72]	@ (800312c <HAL_InitTick+0x58>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	4619      	mov	r1, r3
 80030e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80030ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 f967 	bl	80033c6 <HAL_SYSTICK_Config>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e00e      	b.n	8003120 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b0f      	cmp	r3, #15
 8003106:	d80a      	bhi.n	800311e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003108:	2200      	movs	r2, #0
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	f04f 30ff 	mov.w	r0, #4294967295
 8003110:	f000 f92f 	bl	8003372 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003114:	4a06      	ldr	r2, [pc, #24]	@ (8003130 <HAL_InitTick+0x5c>)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
 800311c:	e000      	b.n	8003120 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
}
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	20000000 	.word	0x20000000
 800312c:	20000008 	.word	0x20000008
 8003130:	20000004 	.word	0x20000004

08003134 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003138:	4b06      	ldr	r3, [pc, #24]	@ (8003154 <HAL_IncTick+0x20>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	461a      	mov	r2, r3
 800313e:	4b06      	ldr	r3, [pc, #24]	@ (8003158 <HAL_IncTick+0x24>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4413      	add	r3, r2
 8003144:	4a04      	ldr	r2, [pc, #16]	@ (8003158 <HAL_IncTick+0x24>)
 8003146:	6013      	str	r3, [r2, #0]
}
 8003148:	bf00      	nop
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	20000008 	.word	0x20000008
 8003158:	200003d0 	.word	0x200003d0

0800315c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  return uwTick;
 8003160:	4b03      	ldr	r3, [pc, #12]	@ (8003170 <HAL_GetTick+0x14>)
 8003162:	681b      	ldr	r3, [r3, #0]
}
 8003164:	4618      	mov	r0, r3
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	200003d0 	.word	0x200003d0

08003174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800317c:	f7ff ffee 	bl	800315c <HAL_GetTick>
 8003180:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318c:	d005      	beq.n	800319a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800318e:	4b0a      	ldr	r3, [pc, #40]	@ (80031b8 <HAL_Delay+0x44>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	461a      	mov	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4413      	add	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800319a:	bf00      	nop
 800319c:	f7ff ffde 	bl	800315c <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d8f7      	bhi.n	800319c <HAL_Delay+0x28>
  {
  }
}
 80031ac:	bf00      	nop
 80031ae:	bf00      	nop
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20000008 	.word	0x20000008

080031bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003200 <__NVIC_SetPriorityGrouping+0x44>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031d8:	4013      	ands	r3, r2
 80031da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ee:	4a04      	ldr	r2, [pc, #16]	@ (8003200 <__NVIC_SetPriorityGrouping+0x44>)
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	60d3      	str	r3, [r2, #12]
}
 80031f4:	bf00      	nop
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	e000ed00 	.word	0xe000ed00

08003204 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003208:	4b04      	ldr	r3, [pc, #16]	@ (800321c <__NVIC_GetPriorityGrouping+0x18>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	0a1b      	lsrs	r3, r3, #8
 800320e:	f003 0307 	and.w	r3, r3, #7
}
 8003212:	4618      	mov	r0, r3
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	e000ed00 	.word	0xe000ed00

08003220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800322a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322e:	2b00      	cmp	r3, #0
 8003230:	db0b      	blt.n	800324a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	f003 021f 	and.w	r2, r3, #31
 8003238:	4907      	ldr	r1, [pc, #28]	@ (8003258 <__NVIC_EnableIRQ+0x38>)
 800323a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323e:	095b      	lsrs	r3, r3, #5
 8003240:	2001      	movs	r0, #1
 8003242:	fa00 f202 	lsl.w	r2, r0, r2
 8003246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	e000e100 	.word	0xe000e100

0800325c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	6039      	str	r1, [r7, #0]
 8003266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326c:	2b00      	cmp	r3, #0
 800326e:	db0a      	blt.n	8003286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	b2da      	uxtb	r2, r3
 8003274:	490c      	ldr	r1, [pc, #48]	@ (80032a8 <__NVIC_SetPriority+0x4c>)
 8003276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327a:	0112      	lsls	r2, r2, #4
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	440b      	add	r3, r1
 8003280:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003284:	e00a      	b.n	800329c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	b2da      	uxtb	r2, r3
 800328a:	4908      	ldr	r1, [pc, #32]	@ (80032ac <__NVIC_SetPriority+0x50>)
 800328c:	79fb      	ldrb	r3, [r7, #7]
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	3b04      	subs	r3, #4
 8003294:	0112      	lsls	r2, r2, #4
 8003296:	b2d2      	uxtb	r2, r2
 8003298:	440b      	add	r3, r1
 800329a:	761a      	strb	r2, [r3, #24]
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	e000e100 	.word	0xe000e100
 80032ac:	e000ed00 	.word	0xe000ed00

080032b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b089      	sub	sp, #36	@ 0x24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	60b9      	str	r1, [r7, #8]
 80032ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	f1c3 0307 	rsb	r3, r3, #7
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	bf28      	it	cs
 80032ce:	2304      	movcs	r3, #4
 80032d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	3304      	adds	r3, #4
 80032d6:	2b06      	cmp	r3, #6
 80032d8:	d902      	bls.n	80032e0 <NVIC_EncodePriority+0x30>
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	3b03      	subs	r3, #3
 80032de:	e000      	b.n	80032e2 <NVIC_EncodePriority+0x32>
 80032e0:	2300      	movs	r3, #0
 80032e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e4:	f04f 32ff 	mov.w	r2, #4294967295
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43da      	mvns	r2, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	401a      	ands	r2, r3
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032f8:	f04f 31ff 	mov.w	r1, #4294967295
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003302:	43d9      	mvns	r1, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003308:	4313      	orrs	r3, r2
         );
}
 800330a:	4618      	mov	r0, r3
 800330c:	3724      	adds	r7, #36	@ 0x24
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
	...

08003318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3b01      	subs	r3, #1
 8003324:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003328:	d301      	bcc.n	800332e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800332a:	2301      	movs	r3, #1
 800332c:	e00f      	b.n	800334e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800332e:	4a0a      	ldr	r2, [pc, #40]	@ (8003358 <SysTick_Config+0x40>)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3b01      	subs	r3, #1
 8003334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003336:	210f      	movs	r1, #15
 8003338:	f04f 30ff 	mov.w	r0, #4294967295
 800333c:	f7ff ff8e 	bl	800325c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003340:	4b05      	ldr	r3, [pc, #20]	@ (8003358 <SysTick_Config+0x40>)
 8003342:	2200      	movs	r2, #0
 8003344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003346:	4b04      	ldr	r3, [pc, #16]	@ (8003358 <SysTick_Config+0x40>)
 8003348:	2207      	movs	r2, #7
 800334a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	e000e010 	.word	0xe000e010

0800335c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff ff29 	bl	80031bc <__NVIC_SetPriorityGrouping>
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003372:	b580      	push	{r7, lr}
 8003374:	b086      	sub	sp, #24
 8003376:	af00      	add	r7, sp, #0
 8003378:	4603      	mov	r3, r0
 800337a:	60b9      	str	r1, [r7, #8]
 800337c:	607a      	str	r2, [r7, #4]
 800337e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003380:	2300      	movs	r3, #0
 8003382:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003384:	f7ff ff3e 	bl	8003204 <__NVIC_GetPriorityGrouping>
 8003388:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	68b9      	ldr	r1, [r7, #8]
 800338e:	6978      	ldr	r0, [r7, #20]
 8003390:	f7ff ff8e 	bl	80032b0 <NVIC_EncodePriority>
 8003394:	4602      	mov	r2, r0
 8003396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800339a:	4611      	mov	r1, r2
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff ff5d 	bl	800325c <__NVIC_SetPriority>
}
 80033a2:	bf00      	nop
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b082      	sub	sp, #8
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	4603      	mov	r3, r0
 80033b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff ff31 	bl	8003220 <__NVIC_EnableIRQ>
}
 80033be:	bf00      	nop
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b082      	sub	sp, #8
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7ff ffa2 	bl	8003318 <SysTick_Config>
 80033d4:	4603      	mov	r3, r0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
	...

080033e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b089      	sub	sp, #36	@ 0x24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033f6:	2300      	movs	r3, #0
 80033f8:	61fb      	str	r3, [r7, #28]
 80033fa:	e159      	b.n	80036b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033fc:	2201      	movs	r2, #1
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	4013      	ands	r3, r2
 800340e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	429a      	cmp	r2, r3
 8003416:	f040 8148 	bne.w	80036aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	2b01      	cmp	r3, #1
 8003424:	d005      	beq.n	8003432 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800342e:	2b02      	cmp	r3, #2
 8003430:	d130      	bne.n	8003494 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	2203      	movs	r2, #3
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43db      	mvns	r3, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4013      	ands	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4313      	orrs	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003468:	2201      	movs	r2, #1
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	43db      	mvns	r3, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4013      	ands	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	091b      	lsrs	r3, r3, #4
 800347e:	f003 0201 	and.w	r2, r3, #1
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	fa02 f303 	lsl.w	r3, r2, r3
 8003488:	69ba      	ldr	r2, [r7, #24]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 0303 	and.w	r3, r3, #3
 800349c:	2b03      	cmp	r3, #3
 800349e:	d017      	beq.n	80034d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	2203      	movs	r2, #3
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	689a      	ldr	r2, [r3, #8]
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d123      	bne.n	8003524 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	08da      	lsrs	r2, r3, #3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3208      	adds	r2, #8
 80034e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	220f      	movs	r2, #15
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4013      	ands	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	691a      	ldr	r2, [r3, #16]
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	4313      	orrs	r3, r2
 8003514:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	08da      	lsrs	r2, r3, #3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	3208      	adds	r2, #8
 800351e:	69b9      	ldr	r1, [r7, #24]
 8003520:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	2203      	movs	r2, #3
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	43db      	mvns	r3, r3
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4013      	ands	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 0203 	and.w	r2, r3, #3
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4313      	orrs	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 80a2 	beq.w	80036aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003566:	2300      	movs	r3, #0
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	4b57      	ldr	r3, [pc, #348]	@ (80036c8 <HAL_GPIO_Init+0x2e8>)
 800356c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800356e:	4a56      	ldr	r2, [pc, #344]	@ (80036c8 <HAL_GPIO_Init+0x2e8>)
 8003570:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003574:	6453      	str	r3, [r2, #68]	@ 0x44
 8003576:	4b54      	ldr	r3, [pc, #336]	@ (80036c8 <HAL_GPIO_Init+0x2e8>)
 8003578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800357a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003582:	4a52      	ldr	r2, [pc, #328]	@ (80036cc <HAL_GPIO_Init+0x2ec>)
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	089b      	lsrs	r3, r3, #2
 8003588:	3302      	adds	r3, #2
 800358a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800358e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	220f      	movs	r2, #15
 800359a:	fa02 f303 	lsl.w	r3, r2, r3
 800359e:	43db      	mvns	r3, r3
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	4013      	ands	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a49      	ldr	r2, [pc, #292]	@ (80036d0 <HAL_GPIO_Init+0x2f0>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d019      	beq.n	80035e2 <HAL_GPIO_Init+0x202>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a48      	ldr	r2, [pc, #288]	@ (80036d4 <HAL_GPIO_Init+0x2f4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d013      	beq.n	80035de <HAL_GPIO_Init+0x1fe>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a47      	ldr	r2, [pc, #284]	@ (80036d8 <HAL_GPIO_Init+0x2f8>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00d      	beq.n	80035da <HAL_GPIO_Init+0x1fa>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a46      	ldr	r2, [pc, #280]	@ (80036dc <HAL_GPIO_Init+0x2fc>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d007      	beq.n	80035d6 <HAL_GPIO_Init+0x1f6>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a45      	ldr	r2, [pc, #276]	@ (80036e0 <HAL_GPIO_Init+0x300>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d101      	bne.n	80035d2 <HAL_GPIO_Init+0x1f2>
 80035ce:	2304      	movs	r3, #4
 80035d0:	e008      	b.n	80035e4 <HAL_GPIO_Init+0x204>
 80035d2:	2307      	movs	r3, #7
 80035d4:	e006      	b.n	80035e4 <HAL_GPIO_Init+0x204>
 80035d6:	2303      	movs	r3, #3
 80035d8:	e004      	b.n	80035e4 <HAL_GPIO_Init+0x204>
 80035da:	2302      	movs	r3, #2
 80035dc:	e002      	b.n	80035e4 <HAL_GPIO_Init+0x204>
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <HAL_GPIO_Init+0x204>
 80035e2:	2300      	movs	r3, #0
 80035e4:	69fa      	ldr	r2, [r7, #28]
 80035e6:	f002 0203 	and.w	r2, r2, #3
 80035ea:	0092      	lsls	r2, r2, #2
 80035ec:	4093      	lsls	r3, r2
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035f4:	4935      	ldr	r1, [pc, #212]	@ (80036cc <HAL_GPIO_Init+0x2ec>)
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	089b      	lsrs	r3, r3, #2
 80035fa:	3302      	adds	r3, #2
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003602:	4b38      	ldr	r3, [pc, #224]	@ (80036e4 <HAL_GPIO_Init+0x304>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	43db      	mvns	r3, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4013      	ands	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4313      	orrs	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003626:	4a2f      	ldr	r2, [pc, #188]	@ (80036e4 <HAL_GPIO_Init+0x304>)
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800362c:	4b2d      	ldr	r3, [pc, #180]	@ (80036e4 <HAL_GPIO_Init+0x304>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	43db      	mvns	r3, r3
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4013      	ands	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003650:	4a24      	ldr	r2, [pc, #144]	@ (80036e4 <HAL_GPIO_Init+0x304>)
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003656:	4b23      	ldr	r3, [pc, #140]	@ (80036e4 <HAL_GPIO_Init+0x304>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	43db      	mvns	r3, r3
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4013      	ands	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	4313      	orrs	r3, r2
 8003678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800367a:	4a1a      	ldr	r2, [pc, #104]	@ (80036e4 <HAL_GPIO_Init+0x304>)
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003680:	4b18      	ldr	r3, [pc, #96]	@ (80036e4 <HAL_GPIO_Init+0x304>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	43db      	mvns	r3, r3
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	4013      	ands	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036a4:	4a0f      	ldr	r2, [pc, #60]	@ (80036e4 <HAL_GPIO_Init+0x304>)
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	3301      	adds	r3, #1
 80036ae:	61fb      	str	r3, [r7, #28]
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	2b0f      	cmp	r3, #15
 80036b4:	f67f aea2 	bls.w	80033fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036b8:	bf00      	nop
 80036ba:	bf00      	nop
 80036bc:	3724      	adds	r7, #36	@ 0x24
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	40023800 	.word	0x40023800
 80036cc:	40013800 	.word	0x40013800
 80036d0:	40020000 	.word	0x40020000
 80036d4:	40020400 	.word	0x40020400
 80036d8:	40020800 	.word	0x40020800
 80036dc:	40020c00 	.word	0x40020c00
 80036e0:	40021000 	.word	0x40021000
 80036e4:	40013c00 	.word	0x40013c00

080036e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	460b      	mov	r3, r1
 80036f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691a      	ldr	r2, [r3, #16]
 80036f8:	887b      	ldrh	r3, [r7, #2]
 80036fa:	4013      	ands	r3, r2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003700:	2301      	movs	r3, #1
 8003702:	73fb      	strb	r3, [r7, #15]
 8003704:	e001      	b.n	800370a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003706:	2300      	movs	r3, #0
 8003708:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800370a:	7bfb      	ldrb	r3, [r7, #15]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	460b      	mov	r3, r1
 8003722:	807b      	strh	r3, [r7, #2]
 8003724:	4613      	mov	r3, r2
 8003726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003728:	787b      	ldrb	r3, [r7, #1]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800372e:	887a      	ldrh	r2, [r7, #2]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003734:	e003      	b.n	800373e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003736:	887b      	ldrh	r3, [r7, #2]
 8003738:	041a      	lsls	r2, r3, #16
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	619a      	str	r2, [r3, #24]
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800374a:	b480      	push	{r7}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	460b      	mov	r3, r1
 8003754:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800375c:	887a      	ldrh	r2, [r7, #2]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	4013      	ands	r3, r2
 8003762:	041a      	lsls	r2, r3, #16
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	43d9      	mvns	r1, r3
 8003768:	887b      	ldrh	r3, [r7, #2]
 800376a:	400b      	ands	r3, r1
 800376c:	431a      	orrs	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	619a      	str	r2, [r3, #24]
}
 8003772:	bf00      	nop
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
	...

08003780 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	4603      	mov	r3, r0
 8003788:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800378a:	4b08      	ldr	r3, [pc, #32]	@ (80037ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800378c:	695a      	ldr	r2, [r3, #20]
 800378e:	88fb      	ldrh	r3, [r7, #6]
 8003790:	4013      	ands	r3, r2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d006      	beq.n	80037a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003796:	4a05      	ldr	r2, [pc, #20]	@ (80037ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003798:	88fb      	ldrh	r3, [r7, #6]
 800379a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800379c:	88fb      	ldrh	r3, [r7, #6]
 800379e:	4618      	mov	r0, r3
 80037a0:	f7fe fad8 	bl	8001d54 <HAL_GPIO_EXTI_Callback>
  }
}
 80037a4:	bf00      	nop
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40013c00 	.word	0x40013c00

080037b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e12b      	b.n	8003a1a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d106      	bne.n	80037dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7ff f91c 	bl	8002a14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2224      	movs	r2, #36	@ 0x24
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0201 	bic.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003802:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003812:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003814:	f000 fd40 	bl	8004298 <HAL_RCC_GetPCLK1Freq>
 8003818:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	4a81      	ldr	r2, [pc, #516]	@ (8003a24 <HAL_I2C_Init+0x274>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d807      	bhi.n	8003834 <HAL_I2C_Init+0x84>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4a80      	ldr	r2, [pc, #512]	@ (8003a28 <HAL_I2C_Init+0x278>)
 8003828:	4293      	cmp	r3, r2
 800382a:	bf94      	ite	ls
 800382c:	2301      	movls	r3, #1
 800382e:	2300      	movhi	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	e006      	b.n	8003842 <HAL_I2C_Init+0x92>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4a7d      	ldr	r2, [pc, #500]	@ (8003a2c <HAL_I2C_Init+0x27c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	bf94      	ite	ls
 800383c:	2301      	movls	r3, #1
 800383e:	2300      	movhi	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e0e7      	b.n	8003a1a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	4a78      	ldr	r2, [pc, #480]	@ (8003a30 <HAL_I2C_Init+0x280>)
 800384e:	fba2 2303 	umull	r2, r3, r2, r3
 8003852:	0c9b      	lsrs	r3, r3, #18
 8003854:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	430a      	orrs	r2, r1
 8003868:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	4a6a      	ldr	r2, [pc, #424]	@ (8003a24 <HAL_I2C_Init+0x274>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d802      	bhi.n	8003884 <HAL_I2C_Init+0xd4>
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	3301      	adds	r3, #1
 8003882:	e009      	b.n	8003898 <HAL_I2C_Init+0xe8>
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800388a:	fb02 f303 	mul.w	r3, r2, r3
 800388e:	4a69      	ldr	r2, [pc, #420]	@ (8003a34 <HAL_I2C_Init+0x284>)
 8003890:	fba2 2303 	umull	r2, r3, r2, r3
 8003894:	099b      	lsrs	r3, r3, #6
 8003896:	3301      	adds	r3, #1
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6812      	ldr	r2, [r2, #0]
 800389c:	430b      	orrs	r3, r1
 800389e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80038aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	495c      	ldr	r1, [pc, #368]	@ (8003a24 <HAL_I2C_Init+0x274>)
 80038b4:	428b      	cmp	r3, r1
 80038b6:	d819      	bhi.n	80038ec <HAL_I2C_Init+0x13c>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	1e59      	subs	r1, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80038c6:	1c59      	adds	r1, r3, #1
 80038c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80038cc:	400b      	ands	r3, r1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00a      	beq.n	80038e8 <HAL_I2C_Init+0x138>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1e59      	subs	r1, r3, #1
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80038e0:	3301      	adds	r3, #1
 80038e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e6:	e051      	b.n	800398c <HAL_I2C_Init+0x1dc>
 80038e8:	2304      	movs	r3, #4
 80038ea:	e04f      	b.n	800398c <HAL_I2C_Init+0x1dc>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d111      	bne.n	8003918 <HAL_I2C_Init+0x168>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	1e58      	subs	r0, r3, #1
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6859      	ldr	r1, [r3, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	005b      	lsls	r3, r3, #1
 8003900:	440b      	add	r3, r1
 8003902:	fbb0 f3f3 	udiv	r3, r0, r3
 8003906:	3301      	adds	r3, #1
 8003908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800390c:	2b00      	cmp	r3, #0
 800390e:	bf0c      	ite	eq
 8003910:	2301      	moveq	r3, #1
 8003912:	2300      	movne	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	e012      	b.n	800393e <HAL_I2C_Init+0x18e>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	1e58      	subs	r0, r3, #1
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6859      	ldr	r1, [r3, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	0099      	lsls	r1, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	fbb0 f3f3 	udiv	r3, r0, r3
 800392e:	3301      	adds	r3, #1
 8003930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003934:	2b00      	cmp	r3, #0
 8003936:	bf0c      	ite	eq
 8003938:	2301      	moveq	r3, #1
 800393a:	2300      	movne	r3, #0
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <HAL_I2C_Init+0x196>
 8003942:	2301      	movs	r3, #1
 8003944:	e022      	b.n	800398c <HAL_I2C_Init+0x1dc>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10e      	bne.n	800396c <HAL_I2C_Init+0x1bc>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	1e58      	subs	r0, r3, #1
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6859      	ldr	r1, [r3, #4]
 8003956:	460b      	mov	r3, r1
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	440b      	add	r3, r1
 800395c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003960:	3301      	adds	r3, #1
 8003962:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003966:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800396a:	e00f      	b.n	800398c <HAL_I2C_Init+0x1dc>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	1e58      	subs	r0, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6859      	ldr	r1, [r3, #4]
 8003974:	460b      	mov	r3, r1
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	0099      	lsls	r1, r3, #2
 800397c:	440b      	add	r3, r1
 800397e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003982:	3301      	adds	r3, #1
 8003984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003988:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	6809      	ldr	r1, [r1, #0]
 8003990:	4313      	orrs	r3, r2
 8003992:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69da      	ldr	r2, [r3, #28]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80039ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	6911      	ldr	r1, [r2, #16]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	68d2      	ldr	r2, [r2, #12]
 80039c6:	4311      	orrs	r1, r2
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6812      	ldr	r2, [r2, #0]
 80039cc:	430b      	orrs	r3, r1
 80039ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695a      	ldr	r2, [r3, #20]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0201 	orr.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2220      	movs	r2, #32
 8003a06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	000186a0 	.word	0x000186a0
 8003a28:	001e847f 	.word	0x001e847f
 8003a2c:	003d08ff 	.word	0x003d08ff
 8003a30:	431bde83 	.word	0x431bde83
 8003a34:	10624dd3 	.word	0x10624dd3

08003a38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e267      	b.n	8003f1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d075      	beq.n	8003b42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a56:	4b88      	ldr	r3, [pc, #544]	@ (8003c78 <HAL_RCC_OscConfig+0x240>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f003 030c 	and.w	r3, r3, #12
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d00c      	beq.n	8003a7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a62:	4b85      	ldr	r3, [pc, #532]	@ (8003c78 <HAL_RCC_OscConfig+0x240>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a6a:	2b08      	cmp	r3, #8
 8003a6c:	d112      	bne.n	8003a94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a6e:	4b82      	ldr	r3, [pc, #520]	@ (8003c78 <HAL_RCC_OscConfig+0x240>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a7a:	d10b      	bne.n	8003a94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a7c:	4b7e      	ldr	r3, [pc, #504]	@ (8003c78 <HAL_RCC_OscConfig+0x240>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d05b      	beq.n	8003b40 <HAL_RCC_OscConfig+0x108>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d157      	bne.n	8003b40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e242      	b.n	8003f1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a9c:	d106      	bne.n	8003aac <HAL_RCC_OscConfig+0x74>
 8003a9e:	4b76      	ldr	r3, [pc, #472]	@ (8003c78 <HAL_RCC_OscConfig+0x240>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a75      	ldr	r2, [pc, #468]	@ (8003c78 <HAL_RCC_OscConfig+0x240>)
 8003aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	e01d      	b.n	8003ae8 <HAL_RCC_OscConfig+0xb0>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ab4:	d10c      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x98>
 8003ab6:	4b70      	ldr	r3, [pc, #448]	@ (8003c78 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a6f      	ldr	r2, [pc, #444]	@ (8003c78 <HAL_RCC_OscConfig+0x240>)
 8003abc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	4b6d      	ldr	r3, [pc, #436]	@ (8003c78 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a6c      	ldr	r2, [pc, #432]	@ (8003c78 <HAL_RCC_OscConfig+0x240>)
 8003ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	e00b      	b.n	8003ae8 <HAL_RCC_OscConfig+0xb0>
 8003ad0:	4b69      	ldr	r3, [pc, #420]	@ (8003c78 <HAL_RCC_OscConfig+0x240>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a68      	ldr	r2, [pc, #416]	@ (8003c78 <HAL_RCC_OscConfig+0x240>)
 8003ad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	4b66      	ldr	r3, [pc, #408]	@ (8003c78 <HAL_RCC_OscConfig+0x240>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a65      	ldr	r2, [pc, #404]	@ (8003c78 <HAL_RCC_OscConfig+0x240>)
 8003ae2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d013      	beq.n	8003b18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af0:	f7ff fb34 	bl	800315c <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003af8:	f7ff fb30 	bl	800315c <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b64      	cmp	r3, #100	@ 0x64
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e207      	b.n	8003f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b0a:	4b5b      	ldr	r3, [pc, #364]	@ (8003c78 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0f0      	beq.n	8003af8 <HAL_RCC_OscConfig+0xc0>
 8003b16:	e014      	b.n	8003b42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b18:	f7ff fb20 	bl	800315c <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b20:	f7ff fb1c 	bl	800315c <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b64      	cmp	r3, #100	@ 0x64
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e1f3      	b.n	8003f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b32:	4b51      	ldr	r3, [pc, #324]	@ (8003c78 <HAL_RCC_OscConfig+0x240>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f0      	bne.n	8003b20 <HAL_RCC_OscConfig+0xe8>
 8003b3e:	e000      	b.n	8003b42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d063      	beq.n	8003c16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b4e:	4b4a      	ldr	r3, [pc, #296]	@ (8003c78 <HAL_RCC_OscConfig+0x240>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 030c 	and.w	r3, r3, #12
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00b      	beq.n	8003b72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b5a:	4b47      	ldr	r3, [pc, #284]	@ (8003c78 <HAL_RCC_OscConfig+0x240>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b62:	2b08      	cmp	r3, #8
 8003b64:	d11c      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b66:	4b44      	ldr	r3, [pc, #272]	@ (8003c78 <HAL_RCC_OscConfig+0x240>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d116      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b72:	4b41      	ldr	r3, [pc, #260]	@ (8003c78 <HAL_RCC_OscConfig+0x240>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d005      	beq.n	8003b8a <HAL_RCC_OscConfig+0x152>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d001      	beq.n	8003b8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e1c7      	b.n	8003f1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b8a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c78 <HAL_RCC_OscConfig+0x240>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	4937      	ldr	r1, [pc, #220]	@ (8003c78 <HAL_RCC_OscConfig+0x240>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b9e:	e03a      	b.n	8003c16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d020      	beq.n	8003bea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ba8:	4b34      	ldr	r3, [pc, #208]	@ (8003c7c <HAL_RCC_OscConfig+0x244>)
 8003baa:	2201      	movs	r2, #1
 8003bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bae:	f7ff fad5 	bl	800315c <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bb6:	f7ff fad1 	bl	800315c <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e1a8      	b.n	8003f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8003c78 <HAL_RCC_OscConfig+0x240>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0f0      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd4:	4b28      	ldr	r3, [pc, #160]	@ (8003c78 <HAL_RCC_OscConfig+0x240>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	4925      	ldr	r1, [pc, #148]	@ (8003c78 <HAL_RCC_OscConfig+0x240>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	600b      	str	r3, [r1, #0]
 8003be8:	e015      	b.n	8003c16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bea:	4b24      	ldr	r3, [pc, #144]	@ (8003c7c <HAL_RCC_OscConfig+0x244>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf0:	f7ff fab4 	bl	800315c <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bf8:	f7ff fab0 	bl	800315c <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e187      	b.n	8003f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8003c78 <HAL_RCC_OscConfig+0x240>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1f0      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0308 	and.w	r3, r3, #8
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d036      	beq.n	8003c90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d016      	beq.n	8003c58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c2a:	4b15      	ldr	r3, [pc, #84]	@ (8003c80 <HAL_RCC_OscConfig+0x248>)
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c30:	f7ff fa94 	bl	800315c <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c38:	f7ff fa90 	bl	800315c <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e167      	b.n	8003f1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c78 <HAL_RCC_OscConfig+0x240>)
 8003c4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d0f0      	beq.n	8003c38 <HAL_RCC_OscConfig+0x200>
 8003c56:	e01b      	b.n	8003c90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c58:	4b09      	ldr	r3, [pc, #36]	@ (8003c80 <HAL_RCC_OscConfig+0x248>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c5e:	f7ff fa7d 	bl	800315c <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c64:	e00e      	b.n	8003c84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c66:	f7ff fa79 	bl	800315c <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d907      	bls.n	8003c84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e150      	b.n	8003f1a <HAL_RCC_OscConfig+0x4e2>
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	42470000 	.word	0x42470000
 8003c80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c84:	4b88      	ldr	r3, [pc, #544]	@ (8003ea8 <HAL_RCC_OscConfig+0x470>)
 8003c86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1ea      	bne.n	8003c66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 8097 	beq.w	8003dcc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ca2:	4b81      	ldr	r3, [pc, #516]	@ (8003ea8 <HAL_RCC_OscConfig+0x470>)
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10f      	bne.n	8003cce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60bb      	str	r3, [r7, #8]
 8003cb2:	4b7d      	ldr	r3, [pc, #500]	@ (8003ea8 <HAL_RCC_OscConfig+0x470>)
 8003cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb6:	4a7c      	ldr	r2, [pc, #496]	@ (8003ea8 <HAL_RCC_OscConfig+0x470>)
 8003cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cbe:	4b7a      	ldr	r3, [pc, #488]	@ (8003ea8 <HAL_RCC_OscConfig+0x470>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cc6:	60bb      	str	r3, [r7, #8]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cce:	4b77      	ldr	r3, [pc, #476]	@ (8003eac <HAL_RCC_OscConfig+0x474>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d118      	bne.n	8003d0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cda:	4b74      	ldr	r3, [pc, #464]	@ (8003eac <HAL_RCC_OscConfig+0x474>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a73      	ldr	r2, [pc, #460]	@ (8003eac <HAL_RCC_OscConfig+0x474>)
 8003ce0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ce4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ce6:	f7ff fa39 	bl	800315c <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cec:	e008      	b.n	8003d00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cee:	f7ff fa35 	bl	800315c <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e10c      	b.n	8003f1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d00:	4b6a      	ldr	r3, [pc, #424]	@ (8003eac <HAL_RCC_OscConfig+0x474>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0f0      	beq.n	8003cee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d106      	bne.n	8003d22 <HAL_RCC_OscConfig+0x2ea>
 8003d14:	4b64      	ldr	r3, [pc, #400]	@ (8003ea8 <HAL_RCC_OscConfig+0x470>)
 8003d16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d18:	4a63      	ldr	r2, [pc, #396]	@ (8003ea8 <HAL_RCC_OscConfig+0x470>)
 8003d1a:	f043 0301 	orr.w	r3, r3, #1
 8003d1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d20:	e01c      	b.n	8003d5c <HAL_RCC_OscConfig+0x324>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	2b05      	cmp	r3, #5
 8003d28:	d10c      	bne.n	8003d44 <HAL_RCC_OscConfig+0x30c>
 8003d2a:	4b5f      	ldr	r3, [pc, #380]	@ (8003ea8 <HAL_RCC_OscConfig+0x470>)
 8003d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d2e:	4a5e      	ldr	r2, [pc, #376]	@ (8003ea8 <HAL_RCC_OscConfig+0x470>)
 8003d30:	f043 0304 	orr.w	r3, r3, #4
 8003d34:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d36:	4b5c      	ldr	r3, [pc, #368]	@ (8003ea8 <HAL_RCC_OscConfig+0x470>)
 8003d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d3a:	4a5b      	ldr	r2, [pc, #364]	@ (8003ea8 <HAL_RCC_OscConfig+0x470>)
 8003d3c:	f043 0301 	orr.w	r3, r3, #1
 8003d40:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d42:	e00b      	b.n	8003d5c <HAL_RCC_OscConfig+0x324>
 8003d44:	4b58      	ldr	r3, [pc, #352]	@ (8003ea8 <HAL_RCC_OscConfig+0x470>)
 8003d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d48:	4a57      	ldr	r2, [pc, #348]	@ (8003ea8 <HAL_RCC_OscConfig+0x470>)
 8003d4a:	f023 0301 	bic.w	r3, r3, #1
 8003d4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d50:	4b55      	ldr	r3, [pc, #340]	@ (8003ea8 <HAL_RCC_OscConfig+0x470>)
 8003d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d54:	4a54      	ldr	r2, [pc, #336]	@ (8003ea8 <HAL_RCC_OscConfig+0x470>)
 8003d56:	f023 0304 	bic.w	r3, r3, #4
 8003d5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d015      	beq.n	8003d90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d64:	f7ff f9fa 	bl	800315c <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d6a:	e00a      	b.n	8003d82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d6c:	f7ff f9f6 	bl	800315c <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e0cb      	b.n	8003f1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d82:	4b49      	ldr	r3, [pc, #292]	@ (8003ea8 <HAL_RCC_OscConfig+0x470>)
 8003d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0ee      	beq.n	8003d6c <HAL_RCC_OscConfig+0x334>
 8003d8e:	e014      	b.n	8003dba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d90:	f7ff f9e4 	bl	800315c <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d96:	e00a      	b.n	8003dae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d98:	f7ff f9e0 	bl	800315c <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e0b5      	b.n	8003f1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dae:	4b3e      	ldr	r3, [pc, #248]	@ (8003ea8 <HAL_RCC_OscConfig+0x470>)
 8003db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1ee      	bne.n	8003d98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dba:	7dfb      	ldrb	r3, [r7, #23]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d105      	bne.n	8003dcc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc0:	4b39      	ldr	r3, [pc, #228]	@ (8003ea8 <HAL_RCC_OscConfig+0x470>)
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc4:	4a38      	ldr	r2, [pc, #224]	@ (8003ea8 <HAL_RCC_OscConfig+0x470>)
 8003dc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 80a1 	beq.w	8003f18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003dd6:	4b34      	ldr	r3, [pc, #208]	@ (8003ea8 <HAL_RCC_OscConfig+0x470>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 030c 	and.w	r3, r3, #12
 8003dde:	2b08      	cmp	r3, #8
 8003de0:	d05c      	beq.n	8003e9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d141      	bne.n	8003e6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dea:	4b31      	ldr	r3, [pc, #196]	@ (8003eb0 <HAL_RCC_OscConfig+0x478>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df0:	f7ff f9b4 	bl	800315c <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003df8:	f7ff f9b0 	bl	800315c <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e087      	b.n	8003f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0a:	4b27      	ldr	r3, [pc, #156]	@ (8003ea8 <HAL_RCC_OscConfig+0x470>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f0      	bne.n	8003df8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69da      	ldr	r2, [r3, #28]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e24:	019b      	lsls	r3, r3, #6
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e2c:	085b      	lsrs	r3, r3, #1
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	041b      	lsls	r3, r3, #16
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e38:	061b      	lsls	r3, r3, #24
 8003e3a:	491b      	ldr	r1, [pc, #108]	@ (8003ea8 <HAL_RCC_OscConfig+0x470>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e40:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb0 <HAL_RCC_OscConfig+0x478>)
 8003e42:	2201      	movs	r2, #1
 8003e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e46:	f7ff f989 	bl	800315c <HAL_GetTick>
 8003e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e4c:	e008      	b.n	8003e60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e4e:	f7ff f985 	bl	800315c <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	2b02      	cmp	r3, #2
 8003e5a:	d901      	bls.n	8003e60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e05c      	b.n	8003f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e60:	4b11      	ldr	r3, [pc, #68]	@ (8003ea8 <HAL_RCC_OscConfig+0x470>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0f0      	beq.n	8003e4e <HAL_RCC_OscConfig+0x416>
 8003e6c:	e054      	b.n	8003f18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e6e:	4b10      	ldr	r3, [pc, #64]	@ (8003eb0 <HAL_RCC_OscConfig+0x478>)
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e74:	f7ff f972 	bl	800315c <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e7c:	f7ff f96e 	bl	800315c <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e045      	b.n	8003f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e8e:	4b06      	ldr	r3, [pc, #24]	@ (8003ea8 <HAL_RCC_OscConfig+0x470>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1f0      	bne.n	8003e7c <HAL_RCC_OscConfig+0x444>
 8003e9a:	e03d      	b.n	8003f18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d107      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e038      	b.n	8003f1a <HAL_RCC_OscConfig+0x4e2>
 8003ea8:	40023800 	.word	0x40023800
 8003eac:	40007000 	.word	0x40007000
 8003eb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8003f24 <HAL_RCC_OscConfig+0x4ec>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d028      	beq.n	8003f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d121      	bne.n	8003f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d11a      	bne.n	8003f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003eea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d111      	bne.n	8003f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efa:	085b      	lsrs	r3, r3, #1
 8003efc:	3b01      	subs	r3, #1
 8003efe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d107      	bne.n	8003f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d001      	beq.n	8003f18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e000      	b.n	8003f1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3718      	adds	r7, #24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	40023800 	.word	0x40023800

08003f28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e0cc      	b.n	80040d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f3c:	4b68      	ldr	r3, [pc, #416]	@ (80040e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d90c      	bls.n	8003f64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f4a:	4b65      	ldr	r3, [pc, #404]	@ (80040e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f52:	4b63      	ldr	r3, [pc, #396]	@ (80040e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f003 0307 	and.w	r3, r3, #7
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d001      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e0b8      	b.n	80040d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d020      	beq.n	8003fb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0304 	and.w	r3, r3, #4
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d005      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f7c:	4b59      	ldr	r3, [pc, #356]	@ (80040e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	4a58      	ldr	r2, [pc, #352]	@ (80040e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f82:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0308 	and.w	r3, r3, #8
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d005      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f94:	4b53      	ldr	r3, [pc, #332]	@ (80040e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	4a52      	ldr	r2, [pc, #328]	@ (80040e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003f9a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fa0:	4b50      	ldr	r3, [pc, #320]	@ (80040e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	494d      	ldr	r1, [pc, #308]	@ (80040e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d044      	beq.n	8004048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d107      	bne.n	8003fd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc6:	4b47      	ldr	r3, [pc, #284]	@ (80040e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d119      	bne.n	8004006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e07f      	b.n	80040d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d003      	beq.n	8003fe6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003fe2:	2b03      	cmp	r3, #3
 8003fe4:	d107      	bne.n	8003ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe6:	4b3f      	ldr	r3, [pc, #252]	@ (80040e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d109      	bne.n	8004006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e06f      	b.n	80040d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ff6:	4b3b      	ldr	r3, [pc, #236]	@ (80040e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e067      	b.n	80040d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004006:	4b37      	ldr	r3, [pc, #220]	@ (80040e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f023 0203 	bic.w	r2, r3, #3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	4934      	ldr	r1, [pc, #208]	@ (80040e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004014:	4313      	orrs	r3, r2
 8004016:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004018:	f7ff f8a0 	bl	800315c <HAL_GetTick>
 800401c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800401e:	e00a      	b.n	8004036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004020:	f7ff f89c 	bl	800315c <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800402e:	4293      	cmp	r3, r2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e04f      	b.n	80040d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004036:	4b2b      	ldr	r3, [pc, #172]	@ (80040e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 020c 	and.w	r2, r3, #12
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	429a      	cmp	r2, r3
 8004046:	d1eb      	bne.n	8004020 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004048:	4b25      	ldr	r3, [pc, #148]	@ (80040e0 <HAL_RCC_ClockConfig+0x1b8>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0307 	and.w	r3, r3, #7
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	429a      	cmp	r2, r3
 8004054:	d20c      	bcs.n	8004070 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004056:	4b22      	ldr	r3, [pc, #136]	@ (80040e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	b2d2      	uxtb	r2, r2
 800405c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800405e:	4b20      	ldr	r3, [pc, #128]	@ (80040e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	429a      	cmp	r2, r3
 800406a:	d001      	beq.n	8004070 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e032      	b.n	80040d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	d008      	beq.n	800408e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800407c:	4b19      	ldr	r3, [pc, #100]	@ (80040e4 <HAL_RCC_ClockConfig+0x1bc>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	4916      	ldr	r1, [pc, #88]	@ (80040e4 <HAL_RCC_ClockConfig+0x1bc>)
 800408a:	4313      	orrs	r3, r2
 800408c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0308 	and.w	r3, r3, #8
 8004096:	2b00      	cmp	r3, #0
 8004098:	d009      	beq.n	80040ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800409a:	4b12      	ldr	r3, [pc, #72]	@ (80040e4 <HAL_RCC_ClockConfig+0x1bc>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	490e      	ldr	r1, [pc, #56]	@ (80040e4 <HAL_RCC_ClockConfig+0x1bc>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040ae:	f000 f821 	bl	80040f4 <HAL_RCC_GetSysClockFreq>
 80040b2:	4602      	mov	r2, r0
 80040b4:	4b0b      	ldr	r3, [pc, #44]	@ (80040e4 <HAL_RCC_ClockConfig+0x1bc>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	091b      	lsrs	r3, r3, #4
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	490a      	ldr	r1, [pc, #40]	@ (80040e8 <HAL_RCC_ClockConfig+0x1c0>)
 80040c0:	5ccb      	ldrb	r3, [r1, r3]
 80040c2:	fa22 f303 	lsr.w	r3, r2, r3
 80040c6:	4a09      	ldr	r2, [pc, #36]	@ (80040ec <HAL_RCC_ClockConfig+0x1c4>)
 80040c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040ca:	4b09      	ldr	r3, [pc, #36]	@ (80040f0 <HAL_RCC_ClockConfig+0x1c8>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff f800 	bl	80030d4 <HAL_InitTick>

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	40023c00 	.word	0x40023c00
 80040e4:	40023800 	.word	0x40023800
 80040e8:	08009714 	.word	0x08009714
 80040ec:	20000000 	.word	0x20000000
 80040f0:	20000004 	.word	0x20000004

080040f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040f8:	b090      	sub	sp, #64	@ 0x40
 80040fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004100:	2300      	movs	r3, #0
 8004102:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004104:	2300      	movs	r3, #0
 8004106:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800410c:	4b59      	ldr	r3, [pc, #356]	@ (8004274 <HAL_RCC_GetSysClockFreq+0x180>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f003 030c 	and.w	r3, r3, #12
 8004114:	2b08      	cmp	r3, #8
 8004116:	d00d      	beq.n	8004134 <HAL_RCC_GetSysClockFreq+0x40>
 8004118:	2b08      	cmp	r3, #8
 800411a:	f200 80a1 	bhi.w	8004260 <HAL_RCC_GetSysClockFreq+0x16c>
 800411e:	2b00      	cmp	r3, #0
 8004120:	d002      	beq.n	8004128 <HAL_RCC_GetSysClockFreq+0x34>
 8004122:	2b04      	cmp	r3, #4
 8004124:	d003      	beq.n	800412e <HAL_RCC_GetSysClockFreq+0x3a>
 8004126:	e09b      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004128:	4b53      	ldr	r3, [pc, #332]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x184>)
 800412a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800412c:	e09b      	b.n	8004266 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800412e:	4b53      	ldr	r3, [pc, #332]	@ (800427c <HAL_RCC_GetSysClockFreq+0x188>)
 8004130:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004132:	e098      	b.n	8004266 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004134:	4b4f      	ldr	r3, [pc, #316]	@ (8004274 <HAL_RCC_GetSysClockFreq+0x180>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800413c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800413e:	4b4d      	ldr	r3, [pc, #308]	@ (8004274 <HAL_RCC_GetSysClockFreq+0x180>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d028      	beq.n	800419c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800414a:	4b4a      	ldr	r3, [pc, #296]	@ (8004274 <HAL_RCC_GetSysClockFreq+0x180>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	099b      	lsrs	r3, r3, #6
 8004150:	2200      	movs	r2, #0
 8004152:	623b      	str	r3, [r7, #32]
 8004154:	627a      	str	r2, [r7, #36]	@ 0x24
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800415c:	2100      	movs	r1, #0
 800415e:	4b47      	ldr	r3, [pc, #284]	@ (800427c <HAL_RCC_GetSysClockFreq+0x188>)
 8004160:	fb03 f201 	mul.w	r2, r3, r1
 8004164:	2300      	movs	r3, #0
 8004166:	fb00 f303 	mul.w	r3, r0, r3
 800416a:	4413      	add	r3, r2
 800416c:	4a43      	ldr	r2, [pc, #268]	@ (800427c <HAL_RCC_GetSysClockFreq+0x188>)
 800416e:	fba0 1202 	umull	r1, r2, r0, r2
 8004172:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004174:	460a      	mov	r2, r1
 8004176:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004178:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800417a:	4413      	add	r3, r2
 800417c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800417e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004180:	2200      	movs	r2, #0
 8004182:	61bb      	str	r3, [r7, #24]
 8004184:	61fa      	str	r2, [r7, #28]
 8004186:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800418a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800418e:	f7fc fd13 	bl	8000bb8 <__aeabi_uldivmod>
 8004192:	4602      	mov	r2, r0
 8004194:	460b      	mov	r3, r1
 8004196:	4613      	mov	r3, r2
 8004198:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800419a:	e053      	b.n	8004244 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800419c:	4b35      	ldr	r3, [pc, #212]	@ (8004274 <HAL_RCC_GetSysClockFreq+0x180>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	099b      	lsrs	r3, r3, #6
 80041a2:	2200      	movs	r2, #0
 80041a4:	613b      	str	r3, [r7, #16]
 80041a6:	617a      	str	r2, [r7, #20]
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80041ae:	f04f 0b00 	mov.w	fp, #0
 80041b2:	4652      	mov	r2, sl
 80041b4:	465b      	mov	r3, fp
 80041b6:	f04f 0000 	mov.w	r0, #0
 80041ba:	f04f 0100 	mov.w	r1, #0
 80041be:	0159      	lsls	r1, r3, #5
 80041c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041c4:	0150      	lsls	r0, r2, #5
 80041c6:	4602      	mov	r2, r0
 80041c8:	460b      	mov	r3, r1
 80041ca:	ebb2 080a 	subs.w	r8, r2, sl
 80041ce:	eb63 090b 	sbc.w	r9, r3, fp
 80041d2:	f04f 0200 	mov.w	r2, #0
 80041d6:	f04f 0300 	mov.w	r3, #0
 80041da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80041de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80041e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80041e6:	ebb2 0408 	subs.w	r4, r2, r8
 80041ea:	eb63 0509 	sbc.w	r5, r3, r9
 80041ee:	f04f 0200 	mov.w	r2, #0
 80041f2:	f04f 0300 	mov.w	r3, #0
 80041f6:	00eb      	lsls	r3, r5, #3
 80041f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041fc:	00e2      	lsls	r2, r4, #3
 80041fe:	4614      	mov	r4, r2
 8004200:	461d      	mov	r5, r3
 8004202:	eb14 030a 	adds.w	r3, r4, sl
 8004206:	603b      	str	r3, [r7, #0]
 8004208:	eb45 030b 	adc.w	r3, r5, fp
 800420c:	607b      	str	r3, [r7, #4]
 800420e:	f04f 0200 	mov.w	r2, #0
 8004212:	f04f 0300 	mov.w	r3, #0
 8004216:	e9d7 4500 	ldrd	r4, r5, [r7]
 800421a:	4629      	mov	r1, r5
 800421c:	028b      	lsls	r3, r1, #10
 800421e:	4621      	mov	r1, r4
 8004220:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004224:	4621      	mov	r1, r4
 8004226:	028a      	lsls	r2, r1, #10
 8004228:	4610      	mov	r0, r2
 800422a:	4619      	mov	r1, r3
 800422c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800422e:	2200      	movs	r2, #0
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	60fa      	str	r2, [r7, #12]
 8004234:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004238:	f7fc fcbe 	bl	8000bb8 <__aeabi_uldivmod>
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	4613      	mov	r3, r2
 8004242:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004244:	4b0b      	ldr	r3, [pc, #44]	@ (8004274 <HAL_RCC_GetSysClockFreq+0x180>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	0c1b      	lsrs	r3, r3, #16
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	3301      	adds	r3, #1
 8004250:	005b      	lsls	r3, r3, #1
 8004252:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004254:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004258:	fbb2 f3f3 	udiv	r3, r2, r3
 800425c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800425e:	e002      	b.n	8004266 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004260:	4b05      	ldr	r3, [pc, #20]	@ (8004278 <HAL_RCC_GetSysClockFreq+0x184>)
 8004262:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004264:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004268:	4618      	mov	r0, r3
 800426a:	3740      	adds	r7, #64	@ 0x40
 800426c:	46bd      	mov	sp, r7
 800426e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004272:	bf00      	nop
 8004274:	40023800 	.word	0x40023800
 8004278:	00f42400 	.word	0x00f42400
 800427c:	017d7840 	.word	0x017d7840

08004280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004284:	4b03      	ldr	r3, [pc, #12]	@ (8004294 <HAL_RCC_GetHCLKFreq+0x14>)
 8004286:	681b      	ldr	r3, [r3, #0]
}
 8004288:	4618      	mov	r0, r3
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	20000000 	.word	0x20000000

08004298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800429c:	f7ff fff0 	bl	8004280 <HAL_RCC_GetHCLKFreq>
 80042a0:	4602      	mov	r2, r0
 80042a2:	4b05      	ldr	r3, [pc, #20]	@ (80042b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	0a9b      	lsrs	r3, r3, #10
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	4903      	ldr	r1, [pc, #12]	@ (80042bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ae:	5ccb      	ldrb	r3, [r1, r3]
 80042b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40023800 	.word	0x40023800
 80042bc:	08009724 	.word	0x08009724

080042c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80042c4:	f7ff ffdc 	bl	8004280 <HAL_RCC_GetHCLKFreq>
 80042c8:	4602      	mov	r2, r0
 80042ca:	4b05      	ldr	r3, [pc, #20]	@ (80042e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	0b5b      	lsrs	r3, r3, #13
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	4903      	ldr	r1, [pc, #12]	@ (80042e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042d6:	5ccb      	ldrb	r3, [r1, r3]
 80042d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042dc:	4618      	mov	r0, r3
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	40023800 	.word	0x40023800
 80042e4:	08009724 	.word	0x08009724

080042e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e041      	b.n	800437e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d106      	bne.n	8004314 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7fe fbc8 	bl	8002aa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3304      	adds	r3, #4
 8004324:	4619      	mov	r1, r3
 8004326:	4610      	mov	r0, r2
 8004328:	f001 fa62 	bl	80057f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b082      	sub	sp, #8
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e041      	b.n	800441c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d106      	bne.n	80043b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f839 	bl	8004424 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2202      	movs	r2, #2
 80043b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	3304      	adds	r3, #4
 80043c2:	4619      	mov	r1, r3
 80043c4:	4610      	mov	r0, r2
 80043c6:	f001 fa13 	bl	80057f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d109      	bne.n	800445c <HAL_TIM_PWM_Start+0x24>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b01      	cmp	r3, #1
 8004452:	bf14      	ite	ne
 8004454:	2301      	movne	r3, #1
 8004456:	2300      	moveq	r3, #0
 8004458:	b2db      	uxtb	r3, r3
 800445a:	e022      	b.n	80044a2 <HAL_TIM_PWM_Start+0x6a>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	2b04      	cmp	r3, #4
 8004460:	d109      	bne.n	8004476 <HAL_TIM_PWM_Start+0x3e>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b01      	cmp	r3, #1
 800446c:	bf14      	ite	ne
 800446e:	2301      	movne	r3, #1
 8004470:	2300      	moveq	r3, #0
 8004472:	b2db      	uxtb	r3, r3
 8004474:	e015      	b.n	80044a2 <HAL_TIM_PWM_Start+0x6a>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b08      	cmp	r3, #8
 800447a:	d109      	bne.n	8004490 <HAL_TIM_PWM_Start+0x58>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b01      	cmp	r3, #1
 8004486:	bf14      	ite	ne
 8004488:	2301      	movne	r3, #1
 800448a:	2300      	moveq	r3, #0
 800448c:	b2db      	uxtb	r3, r3
 800448e:	e008      	b.n	80044a2 <HAL_TIM_PWM_Start+0x6a>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b01      	cmp	r3, #1
 800449a:	bf14      	ite	ne
 800449c:	2301      	movne	r3, #1
 800449e:	2300      	moveq	r3, #0
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e068      	b.n	800457c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d104      	bne.n	80044ba <HAL_TIM_PWM_Start+0x82>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2202      	movs	r2, #2
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044b8:	e013      	b.n	80044e2 <HAL_TIM_PWM_Start+0xaa>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d104      	bne.n	80044ca <HAL_TIM_PWM_Start+0x92>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2202      	movs	r2, #2
 80044c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044c8:	e00b      	b.n	80044e2 <HAL_TIM_PWM_Start+0xaa>
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	2b08      	cmp	r3, #8
 80044ce:	d104      	bne.n	80044da <HAL_TIM_PWM_Start+0xa2>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2202      	movs	r2, #2
 80044d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044d8:	e003      	b.n	80044e2 <HAL_TIM_PWM_Start+0xaa>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2202      	movs	r2, #2
 80044de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2201      	movs	r2, #1
 80044e8:	6839      	ldr	r1, [r7, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f001 fd50 	bl	8005f90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a23      	ldr	r2, [pc, #140]	@ (8004584 <HAL_TIM_PWM_Start+0x14c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d107      	bne.n	800450a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004508:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a1d      	ldr	r2, [pc, #116]	@ (8004584 <HAL_TIM_PWM_Start+0x14c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d018      	beq.n	8004546 <HAL_TIM_PWM_Start+0x10e>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800451c:	d013      	beq.n	8004546 <HAL_TIM_PWM_Start+0x10e>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a19      	ldr	r2, [pc, #100]	@ (8004588 <HAL_TIM_PWM_Start+0x150>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d00e      	beq.n	8004546 <HAL_TIM_PWM_Start+0x10e>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a17      	ldr	r2, [pc, #92]	@ (800458c <HAL_TIM_PWM_Start+0x154>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d009      	beq.n	8004546 <HAL_TIM_PWM_Start+0x10e>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a16      	ldr	r2, [pc, #88]	@ (8004590 <HAL_TIM_PWM_Start+0x158>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d004      	beq.n	8004546 <HAL_TIM_PWM_Start+0x10e>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a14      	ldr	r2, [pc, #80]	@ (8004594 <HAL_TIM_PWM_Start+0x15c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d111      	bne.n	800456a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2b06      	cmp	r3, #6
 8004556:	d010      	beq.n	800457a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 0201 	orr.w	r2, r2, #1
 8004566:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004568:	e007      	b.n	800457a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f042 0201 	orr.w	r2, r2, #1
 8004578:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40010000 	.word	0x40010000
 8004588:	40000400 	.word	0x40000400
 800458c:	40000800 	.word	0x40000800
 8004590:	40000c00 	.word	0x40000c00
 8004594:	40014000 	.word	0x40014000

08004598 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2200      	movs	r2, #0
 80045a8:	6839      	ldr	r1, [r7, #0]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f001 fcf0 	bl	8005f90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a29      	ldr	r2, [pc, #164]	@ (800465c <HAL_TIM_PWM_Stop+0xc4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d117      	bne.n	80045ea <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	6a1a      	ldr	r2, [r3, #32]
 80045c0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80045c4:	4013      	ands	r3, r2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10f      	bne.n	80045ea <HAL_TIM_PWM_Stop+0x52>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6a1a      	ldr	r2, [r3, #32]
 80045d0:	f240 4344 	movw	r3, #1092	@ 0x444
 80045d4:	4013      	ands	r3, r2
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d107      	bne.n	80045ea <HAL_TIM_PWM_Stop+0x52>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80045e8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6a1a      	ldr	r2, [r3, #32]
 80045f0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80045f4:	4013      	ands	r3, r2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10f      	bne.n	800461a <HAL_TIM_PWM_Stop+0x82>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6a1a      	ldr	r2, [r3, #32]
 8004600:	f240 4344 	movw	r3, #1092	@ 0x444
 8004604:	4013      	ands	r3, r2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d107      	bne.n	800461a <HAL_TIM_PWM_Stop+0x82>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0201 	bic.w	r2, r2, #1
 8004618:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d104      	bne.n	800462a <HAL_TIM_PWM_Stop+0x92>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004628:	e013      	b.n	8004652 <HAL_TIM_PWM_Stop+0xba>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b04      	cmp	r3, #4
 800462e:	d104      	bne.n	800463a <HAL_TIM_PWM_Stop+0xa2>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004638:	e00b      	b.n	8004652 <HAL_TIM_PWM_Stop+0xba>
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b08      	cmp	r3, #8
 800463e:	d104      	bne.n	800464a <HAL_TIM_PWM_Stop+0xb2>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004648:	e003      	b.n	8004652 <HAL_TIM_PWM_Stop+0xba>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40010000 	.word	0x40010000

08004660 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e041      	b.n	80046f6 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d106      	bne.n	800468c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f839 	bl	80046fe <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3304      	adds	r3, #4
 800469c:	4619      	mov	r1, r3
 800469e:	4610      	mov	r0, r2
 80046a0:	f001 f8a6 	bl	80057f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
	...

08004714 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d104      	bne.n	8004732 <HAL_TIM_IC_Start_IT+0x1e>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800472e:	b2db      	uxtb	r3, r3
 8004730:	e013      	b.n	800475a <HAL_TIM_IC_Start_IT+0x46>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b04      	cmp	r3, #4
 8004736:	d104      	bne.n	8004742 <HAL_TIM_IC_Start_IT+0x2e>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800473e:	b2db      	uxtb	r3, r3
 8004740:	e00b      	b.n	800475a <HAL_TIM_IC_Start_IT+0x46>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	2b08      	cmp	r3, #8
 8004746:	d104      	bne.n	8004752 <HAL_TIM_IC_Start_IT+0x3e>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800474e:	b2db      	uxtb	r3, r3
 8004750:	e003      	b.n	800475a <HAL_TIM_IC_Start_IT+0x46>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004758:	b2db      	uxtb	r3, r3
 800475a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d104      	bne.n	800476c <HAL_TIM_IC_Start_IT+0x58>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004768:	b2db      	uxtb	r3, r3
 800476a:	e013      	b.n	8004794 <HAL_TIM_IC_Start_IT+0x80>
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	2b04      	cmp	r3, #4
 8004770:	d104      	bne.n	800477c <HAL_TIM_IC_Start_IT+0x68>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004778:	b2db      	uxtb	r3, r3
 800477a:	e00b      	b.n	8004794 <HAL_TIM_IC_Start_IT+0x80>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	2b08      	cmp	r3, #8
 8004780:	d104      	bne.n	800478c <HAL_TIM_IC_Start_IT+0x78>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004788:	b2db      	uxtb	r3, r3
 800478a:	e003      	b.n	8004794 <HAL_TIM_IC_Start_IT+0x80>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004792:	b2db      	uxtb	r3, r3
 8004794:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004796:	7bbb      	ldrb	r3, [r7, #14]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d102      	bne.n	80047a2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800479c:	7b7b      	ldrb	r3, [r7, #13]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d001      	beq.n	80047a6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e0c2      	b.n	800492c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d104      	bne.n	80047b6 <HAL_TIM_IC_Start_IT+0xa2>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2202      	movs	r2, #2
 80047b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047b4:	e013      	b.n	80047de <HAL_TIM_IC_Start_IT+0xca>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2b04      	cmp	r3, #4
 80047ba:	d104      	bne.n	80047c6 <HAL_TIM_IC_Start_IT+0xb2>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047c4:	e00b      	b.n	80047de <HAL_TIM_IC_Start_IT+0xca>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d104      	bne.n	80047d6 <HAL_TIM_IC_Start_IT+0xc2>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2202      	movs	r2, #2
 80047d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047d4:	e003      	b.n	80047de <HAL_TIM_IC_Start_IT+0xca>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2202      	movs	r2, #2
 80047da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d104      	bne.n	80047ee <HAL_TIM_IC_Start_IT+0xda>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047ec:	e013      	b.n	8004816 <HAL_TIM_IC_Start_IT+0x102>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b04      	cmp	r3, #4
 80047f2:	d104      	bne.n	80047fe <HAL_TIM_IC_Start_IT+0xea>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047fc:	e00b      	b.n	8004816 <HAL_TIM_IC_Start_IT+0x102>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b08      	cmp	r3, #8
 8004802:	d104      	bne.n	800480e <HAL_TIM_IC_Start_IT+0xfa>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800480c:	e003      	b.n	8004816 <HAL_TIM_IC_Start_IT+0x102>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2202      	movs	r2, #2
 8004812:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b0c      	cmp	r3, #12
 800481a:	d841      	bhi.n	80048a0 <HAL_TIM_IC_Start_IT+0x18c>
 800481c:	a201      	add	r2, pc, #4	@ (adr r2, 8004824 <HAL_TIM_IC_Start_IT+0x110>)
 800481e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004822:	bf00      	nop
 8004824:	08004859 	.word	0x08004859
 8004828:	080048a1 	.word	0x080048a1
 800482c:	080048a1 	.word	0x080048a1
 8004830:	080048a1 	.word	0x080048a1
 8004834:	0800486b 	.word	0x0800486b
 8004838:	080048a1 	.word	0x080048a1
 800483c:	080048a1 	.word	0x080048a1
 8004840:	080048a1 	.word	0x080048a1
 8004844:	0800487d 	.word	0x0800487d
 8004848:	080048a1 	.word	0x080048a1
 800484c:	080048a1 	.word	0x080048a1
 8004850:	080048a1 	.word	0x080048a1
 8004854:	0800488f 	.word	0x0800488f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68da      	ldr	r2, [r3, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0202 	orr.w	r2, r2, #2
 8004866:	60da      	str	r2, [r3, #12]
      break;
 8004868:	e01d      	b.n	80048a6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68da      	ldr	r2, [r3, #12]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f042 0204 	orr.w	r2, r2, #4
 8004878:	60da      	str	r2, [r3, #12]
      break;
 800487a:	e014      	b.n	80048a6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0208 	orr.w	r2, r2, #8
 800488a:	60da      	str	r2, [r3, #12]
      break;
 800488c:	e00b      	b.n	80048a6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68da      	ldr	r2, [r3, #12]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f042 0210 	orr.w	r2, r2, #16
 800489c:	60da      	str	r2, [r3, #12]
      break;
 800489e:	e002      	b.n	80048a6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	73fb      	strb	r3, [r7, #15]
      break;
 80048a4:	bf00      	nop
  }

  if (status == HAL_OK)
 80048a6:	7bfb      	ldrb	r3, [r7, #15]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d13e      	bne.n	800492a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2201      	movs	r2, #1
 80048b2:	6839      	ldr	r1, [r7, #0]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f001 fb6b 	bl	8005f90 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a1d      	ldr	r2, [pc, #116]	@ (8004934 <HAL_TIM_IC_Start_IT+0x220>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d018      	beq.n	80048f6 <HAL_TIM_IC_Start_IT+0x1e2>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048cc:	d013      	beq.n	80048f6 <HAL_TIM_IC_Start_IT+0x1e2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a19      	ldr	r2, [pc, #100]	@ (8004938 <HAL_TIM_IC_Start_IT+0x224>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d00e      	beq.n	80048f6 <HAL_TIM_IC_Start_IT+0x1e2>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a17      	ldr	r2, [pc, #92]	@ (800493c <HAL_TIM_IC_Start_IT+0x228>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d009      	beq.n	80048f6 <HAL_TIM_IC_Start_IT+0x1e2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a16      	ldr	r2, [pc, #88]	@ (8004940 <HAL_TIM_IC_Start_IT+0x22c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d004      	beq.n	80048f6 <HAL_TIM_IC_Start_IT+0x1e2>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a14      	ldr	r2, [pc, #80]	@ (8004944 <HAL_TIM_IC_Start_IT+0x230>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d111      	bne.n	800491a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2b06      	cmp	r3, #6
 8004906:	d010      	beq.n	800492a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0201 	orr.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004918:	e007      	b.n	800492a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f042 0201 	orr.w	r2, r2, #1
 8004928:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800492a:	7bfb      	ldrb	r3, [r7, #15]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40010000 	.word	0x40010000
 8004938:	40000400 	.word	0x40000400
 800493c:	40000800 	.word	0x40000800
 8004940:	40000c00 	.word	0x40000c00
 8004944:	40014000 	.word	0x40014000

08004948 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004952:	2300      	movs	r3, #0
 8004954:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b0c      	cmp	r3, #12
 800495a:	d841      	bhi.n	80049e0 <HAL_TIM_IC_Stop_IT+0x98>
 800495c:	a201      	add	r2, pc, #4	@ (adr r2, 8004964 <HAL_TIM_IC_Stop_IT+0x1c>)
 800495e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004962:	bf00      	nop
 8004964:	08004999 	.word	0x08004999
 8004968:	080049e1 	.word	0x080049e1
 800496c:	080049e1 	.word	0x080049e1
 8004970:	080049e1 	.word	0x080049e1
 8004974:	080049ab 	.word	0x080049ab
 8004978:	080049e1 	.word	0x080049e1
 800497c:	080049e1 	.word	0x080049e1
 8004980:	080049e1 	.word	0x080049e1
 8004984:	080049bd 	.word	0x080049bd
 8004988:	080049e1 	.word	0x080049e1
 800498c:	080049e1 	.word	0x080049e1
 8004990:	080049e1 	.word	0x080049e1
 8004994:	080049cf 	.word	0x080049cf
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f022 0202 	bic.w	r2, r2, #2
 80049a6:	60da      	str	r2, [r3, #12]
      break;
 80049a8:	e01d      	b.n	80049e6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0204 	bic.w	r2, r2, #4
 80049b8:	60da      	str	r2, [r3, #12]
      break;
 80049ba:	e014      	b.n	80049e6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 0208 	bic.w	r2, r2, #8
 80049ca:	60da      	str	r2, [r3, #12]
      break;
 80049cc:	e00b      	b.n	80049e6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0210 	bic.w	r2, r2, #16
 80049dc:	60da      	str	r2, [r3, #12]
      break;
 80049de:	e002      	b.n	80049e6 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	73fb      	strb	r3, [r7, #15]
      break;
 80049e4:	bf00      	nop
  }

  if (status == HAL_OK)
 80049e6:	7bfb      	ldrb	r3, [r7, #15]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d156      	bne.n	8004a9a <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2200      	movs	r2, #0
 80049f2:	6839      	ldr	r1, [r7, #0]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f001 facb 	bl	8005f90 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	6a1a      	ldr	r2, [r3, #32]
 8004a00:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004a04:	4013      	ands	r3, r2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10f      	bne.n	8004a2a <HAL_TIM_IC_Stop_IT+0xe2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6a1a      	ldr	r2, [r3, #32]
 8004a10:	f240 4344 	movw	r3, #1092	@ 0x444
 8004a14:	4013      	ands	r3, r2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d107      	bne.n	8004a2a <HAL_TIM_IC_Stop_IT+0xe2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 0201 	bic.w	r2, r2, #1
 8004a28:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d104      	bne.n	8004a3a <HAL_TIM_IC_Stop_IT+0xf2>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a38:	e013      	b.n	8004a62 <HAL_TIM_IC_Stop_IT+0x11a>
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	2b04      	cmp	r3, #4
 8004a3e:	d104      	bne.n	8004a4a <HAL_TIM_IC_Stop_IT+0x102>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a48:	e00b      	b.n	8004a62 <HAL_TIM_IC_Stop_IT+0x11a>
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b08      	cmp	r3, #8
 8004a4e:	d104      	bne.n	8004a5a <HAL_TIM_IC_Stop_IT+0x112>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a58:	e003      	b.n	8004a62 <HAL_TIM_IC_Stop_IT+0x11a>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d104      	bne.n	8004a72 <HAL_TIM_IC_Stop_IT+0x12a>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a70:	e013      	b.n	8004a9a <HAL_TIM_IC_Stop_IT+0x152>
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	d104      	bne.n	8004a82 <HAL_TIM_IC_Stop_IT+0x13a>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a80:	e00b      	b.n	8004a9a <HAL_TIM_IC_Stop_IT+0x152>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d104      	bne.n	8004a92 <HAL_TIM_IC_Stop_IT+0x14a>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a90:	e003      	b.n	8004a9a <HAL_TIM_IC_Stop_IT+0x152>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e097      	b.n	8004be8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d106      	bne.n	8004ad2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f7fe f87b 	bl	8002bc8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	6812      	ldr	r2, [r2, #0]
 8004ae4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ae8:	f023 0307 	bic.w	r3, r3, #7
 8004aec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	3304      	adds	r3, #4
 8004af6:	4619      	mov	r1, r3
 8004af8:	4610      	mov	r0, r2
 8004afa:	f000 fe79 	bl	80057f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	697a      	ldr	r2, [r7, #20]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b26:	f023 0303 	bic.w	r3, r3, #3
 8004b2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	021b      	lsls	r3, r3, #8
 8004b36:	4313      	orrs	r3, r2
 8004b38:	693a      	ldr	r2, [r7, #16]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004b44:	f023 030c 	bic.w	r3, r3, #12
 8004b48:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b50:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	021b      	lsls	r3, r3, #8
 8004b60:	4313      	orrs	r3, r2
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	011a      	lsls	r2, r3, #4
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	031b      	lsls	r3, r3, #12
 8004b74:	4313      	orrs	r3, r2
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004b82:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004b8a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	695b      	ldr	r3, [r3, #20]
 8004b94:	011b      	lsls	r3, r3, #4
 8004b96:	4313      	orrs	r3, r2
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3718      	adds	r7, #24
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c00:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004c08:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c10:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004c18:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d110      	bne.n	8004c42 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d102      	bne.n	8004c2c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c26:	7b7b      	ldrb	r3, [r7, #13]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d001      	beq.n	8004c30 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e069      	b.n	8004d04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c40:	e031      	b.n	8004ca6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2b04      	cmp	r3, #4
 8004c46:	d110      	bne.n	8004c6a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c48:	7bbb      	ldrb	r3, [r7, #14]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d102      	bne.n	8004c54 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c4e:	7b3b      	ldrb	r3, [r7, #12]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d001      	beq.n	8004c58 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e055      	b.n	8004d04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2202      	movs	r2, #2
 8004c64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c68:	e01d      	b.n	8004ca6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d108      	bne.n	8004c82 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c70:	7bbb      	ldrb	r3, [r7, #14]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d105      	bne.n	8004c82 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c76:	7b7b      	ldrb	r3, [r7, #13]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d102      	bne.n	8004c82 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c7c:	7b3b      	ldrb	r3, [r7, #12]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d001      	beq.n	8004c86 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e03e      	b.n	8004d04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2202      	movs	r2, #2
 8004c8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2202      	movs	r2, #2
 8004c92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2202      	movs	r2, #2
 8004c9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <HAL_TIM_Encoder_Start+0xc4>
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	d008      	beq.n	8004cc4 <HAL_TIM_Encoder_Start+0xd4>
 8004cb2:	e00f      	b.n	8004cd4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	2100      	movs	r1, #0
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f001 f967 	bl	8005f90 <TIM_CCxChannelCmd>
      break;
 8004cc2:	e016      	b.n	8004cf2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	2104      	movs	r1, #4
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f001 f95f 	bl	8005f90 <TIM_CCxChannelCmd>
      break;
 8004cd2:	e00e      	b.n	8004cf2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	2100      	movs	r1, #0
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f001 f957 	bl	8005f90 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	2104      	movs	r1, #4
 8004cea:	4618      	mov	r0, r3
 8004cec:	f001 f950 	bl	8005f90 <TIM_CCxChannelCmd>
      break;
 8004cf0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f042 0201 	orr.w	r2, r2, #1
 8004d00:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3710      	adds	r7, #16
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d003      	beq.n	8004d24 <HAL_TIM_Encoder_Stop+0x18>
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d008      	beq.n	8004d34 <HAL_TIM_Encoder_Stop+0x28>
 8004d22:	e00f      	b.n	8004d44 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f001 f92f 	bl	8005f90 <TIM_CCxChannelCmd>
      break;
 8004d32:	e016      	b.n	8004d62 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	2104      	movs	r1, #4
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f001 f927 	bl	8005f90 <TIM_CCxChannelCmd>
      break;
 8004d42:	e00e      	b.n	8004d62 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f001 f91f 	bl	8005f90 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2200      	movs	r2, #0
 8004d58:	2104      	movs	r1, #4
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f001 f918 	bl	8005f90 <TIM_CCxChannelCmd>
      break;
 8004d60:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6a1a      	ldr	r2, [r3, #32]
 8004d68:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10f      	bne.n	8004d92 <HAL_TIM_Encoder_Stop+0x86>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6a1a      	ldr	r2, [r3, #32]
 8004d78:	f240 4344 	movw	r3, #1092	@ 0x444
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d107      	bne.n	8004d92 <HAL_TIM_Encoder_Stop+0x86>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f022 0201 	bic.w	r2, r2, #1
 8004d90:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <HAL_TIM_Encoder_Stop+0x92>
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d138      	bne.n	8004e10 <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d104      	bne.n	8004dae <HAL_TIM_Encoder_Stop+0xa2>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dac:	e013      	b.n	8004dd6 <HAL_TIM_Encoder_Stop+0xca>
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b04      	cmp	r3, #4
 8004db2:	d104      	bne.n	8004dbe <HAL_TIM_Encoder_Stop+0xb2>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dbc:	e00b      	b.n	8004dd6 <HAL_TIM_Encoder_Stop+0xca>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d104      	bne.n	8004dce <HAL_TIM_Encoder_Stop+0xc2>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dcc:	e003      	b.n	8004dd6 <HAL_TIM_Encoder_Stop+0xca>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d104      	bne.n	8004de6 <HAL_TIM_Encoder_Stop+0xda>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004de4:	e024      	b.n	8004e30 <HAL_TIM_Encoder_Stop+0x124>
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d104      	bne.n	8004df6 <HAL_TIM_Encoder_Stop+0xea>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004df4:	e01c      	b.n	8004e30 <HAL_TIM_Encoder_Stop+0x124>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d104      	bne.n	8004e06 <HAL_TIM_Encoder_Stop+0xfa>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e04:	e014      	b.n	8004e30 <HAL_TIM_Encoder_Stop+0x124>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e0e:	e00f      	b.n	8004e30 <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e3a:	b580      	push	{r7, lr}
 8004e3c:	b084      	sub	sp, #16
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
 8004e42:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e4a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004e52:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e5a:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004e62:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d110      	bne.n	8004e8c <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e6a:	7bfb      	ldrb	r3, [r7, #15]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d102      	bne.n	8004e76 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e70:	7b7b      	ldrb	r3, [r7, #13]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d001      	beq.n	8004e7a <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e089      	b.n	8004f8e <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2202      	movs	r2, #2
 8004e86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e8a:	e031      	b.n	8004ef0 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	2b04      	cmp	r3, #4
 8004e90:	d110      	bne.n	8004eb4 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e92:	7bbb      	ldrb	r3, [r7, #14]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d102      	bne.n	8004e9e <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e98:	7b3b      	ldrb	r3, [r7, #12]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d001      	beq.n	8004ea2 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e075      	b.n	8004f8e <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2202      	movs	r2, #2
 8004eae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004eb2:	e01d      	b.n	8004ef0 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d108      	bne.n	8004ecc <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004eba:	7bbb      	ldrb	r3, [r7, #14]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d105      	bne.n	8004ecc <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ec0:	7b7b      	ldrb	r3, [r7, #13]
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d102      	bne.n	8004ecc <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ec6:	7b3b      	ldrb	r3, [r7, #12]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d001      	beq.n	8004ed0 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e05e      	b.n	8004f8e <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2202      	movs	r2, #2
 8004edc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_TIM_Encoder_Start_IT+0xc4>
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b04      	cmp	r3, #4
 8004efa:	d010      	beq.n	8004f1e <HAL_TIM_Encoder_Start_IT+0xe4>
 8004efc:	e01f      	b.n	8004f3e <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2201      	movs	r2, #1
 8004f04:	2100      	movs	r1, #0
 8004f06:	4618      	mov	r0, r3
 8004f08:	f001 f842 	bl	8005f90 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68da      	ldr	r2, [r3, #12]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f042 0202 	orr.w	r2, r2, #2
 8004f1a:	60da      	str	r2, [r3, #12]
      break;
 8004f1c:	e02e      	b.n	8004f7c <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2201      	movs	r2, #1
 8004f24:	2104      	movs	r1, #4
 8004f26:	4618      	mov	r0, r3
 8004f28:	f001 f832 	bl	8005f90 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0204 	orr.w	r2, r2, #4
 8004f3a:	60da      	str	r2, [r3, #12]
      break;
 8004f3c:	e01e      	b.n	8004f7c <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2201      	movs	r2, #1
 8004f44:	2100      	movs	r1, #0
 8004f46:	4618      	mov	r0, r3
 8004f48:	f001 f822 	bl	8005f90 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2201      	movs	r2, #1
 8004f52:	2104      	movs	r1, #4
 8004f54:	4618      	mov	r0, r3
 8004f56:	f001 f81b 	bl	8005f90 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68da      	ldr	r2, [r3, #12]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f042 0202 	orr.w	r2, r2, #2
 8004f68:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68da      	ldr	r2, [r3, #12]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f042 0204 	orr.w	r2, r2, #4
 8004f78:	60da      	str	r2, [r3, #12]
      break;
 8004f7a:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0201 	orr.w	r2, r2, #1
 8004f8a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b082      	sub	sp, #8
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
 8004f9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10f      	bne.n	8004fc6 <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2200      	movs	r2, #0
 8004fac:	2100      	movs	r1, #0
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 ffee 	bl	8005f90 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68da      	ldr	r2, [r3, #12]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 0202 	bic.w	r2, r2, #2
 8004fc2:	60da      	str	r2, [r3, #12]
 8004fc4:	e030      	b.n	8005028 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b04      	cmp	r3, #4
 8004fca:	d10f      	bne.n	8004fec <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	2104      	movs	r1, #4
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 ffdb 	bl	8005f90 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68da      	ldr	r2, [r3, #12]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 0204 	bic.w	r2, r2, #4
 8004fe8:	60da      	str	r2, [r3, #12]
 8004fea:	e01d      	b.n	8005028 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 ffcb 	bl	8005f90 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	2200      	movs	r2, #0
 8005000:	2104      	movs	r1, #4
 8005002:	4618      	mov	r0, r3
 8005004:	f000 ffc4 	bl	8005f90 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68da      	ldr	r2, [r3, #12]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0202 	bic.w	r2, r2, #2
 8005016:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 0204 	bic.w	r2, r2, #4
 8005026:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6a1a      	ldr	r2, [r3, #32]
 800502e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005032:	4013      	ands	r3, r2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10f      	bne.n	8005058 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6a1a      	ldr	r2, [r3, #32]
 800503e:	f240 4344 	movw	r3, #1092	@ 0x444
 8005042:	4013      	ands	r3, r2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d107      	bne.n	8005058 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f022 0201 	bic.w	r2, r2, #1
 8005056:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <HAL_TIM_Encoder_Stop_IT+0xce>
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	2b04      	cmp	r3, #4
 8005062:	d138      	bne.n	80050d6 <HAL_TIM_Encoder_Stop_IT+0x140>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d104      	bne.n	8005074 <HAL_TIM_Encoder_Stop_IT+0xde>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005072:	e013      	b.n	800509c <HAL_TIM_Encoder_Stop_IT+0x106>
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	2b04      	cmp	r3, #4
 8005078:	d104      	bne.n	8005084 <HAL_TIM_Encoder_Stop_IT+0xee>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005082:	e00b      	b.n	800509c <HAL_TIM_Encoder_Stop_IT+0x106>
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	2b08      	cmp	r3, #8
 8005088:	d104      	bne.n	8005094 <HAL_TIM_Encoder_Stop_IT+0xfe>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005092:	e003      	b.n	800509c <HAL_TIM_Encoder_Stop_IT+0x106>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d104      	bne.n	80050ac <HAL_TIM_Encoder_Stop_IT+0x116>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050aa:	e024      	b.n	80050f6 <HAL_TIM_Encoder_Stop_IT+0x160>
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2b04      	cmp	r3, #4
 80050b0:	d104      	bne.n	80050bc <HAL_TIM_Encoder_Stop_IT+0x126>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050ba:	e01c      	b.n	80050f6 <HAL_TIM_Encoder_Stop_IT+0x160>
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	2b08      	cmp	r3, #8
 80050c0:	d104      	bne.n	80050cc <HAL_TIM_Encoder_Stop_IT+0x136>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050ca:	e014      	b.n	80050f6 <HAL_TIM_Encoder_Stop_IT+0x160>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050d4:	e00f      	b.n	80050f6 <HAL_TIM_Encoder_Stop_IT+0x160>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d020      	beq.n	8005164 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d01b      	beq.n	8005164 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f06f 0202 	mvn.w	r2, #2
 8005134:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f7fc fe1c 	bl	8001d88 <HAL_TIM_IC_CaptureCallback>
 8005150:	e005      	b.n	800515e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fb2e 	bl	80057b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 fb35 	bl	80057c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	f003 0304 	and.w	r3, r3, #4
 800516a:	2b00      	cmp	r3, #0
 800516c:	d020      	beq.n	80051b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f003 0304 	and.w	r3, r3, #4
 8005174:	2b00      	cmp	r3, #0
 8005176:	d01b      	beq.n	80051b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f06f 0204 	mvn.w	r2, #4
 8005180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2202      	movs	r2, #2
 8005186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7fc fdf6 	bl	8001d88 <HAL_TIM_IC_CaptureCallback>
 800519c:	e005      	b.n	80051aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fb08 	bl	80057b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fb0f 	bl	80057c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f003 0308 	and.w	r3, r3, #8
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d020      	beq.n	80051fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f003 0308 	and.w	r3, r3, #8
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d01b      	beq.n	80051fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f06f 0208 	mvn.w	r2, #8
 80051cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2204      	movs	r2, #4
 80051d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	f003 0303 	and.w	r3, r3, #3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7fc fdd0 	bl	8001d88 <HAL_TIM_IC_CaptureCallback>
 80051e8:	e005      	b.n	80051f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 fae2 	bl	80057b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 fae9 	bl	80057c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	f003 0310 	and.w	r3, r3, #16
 8005202:	2b00      	cmp	r3, #0
 8005204:	d020      	beq.n	8005248 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f003 0310 	and.w	r3, r3, #16
 800520c:	2b00      	cmp	r3, #0
 800520e:	d01b      	beq.n	8005248 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f06f 0210 	mvn.w	r2, #16
 8005218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2208      	movs	r2, #8
 800521e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f7fc fdaa 	bl	8001d88 <HAL_TIM_IC_CaptureCallback>
 8005234:	e005      	b.n	8005242 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 fabc 	bl	80057b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 fac3 	bl	80057c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00c      	beq.n	800526c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f003 0301 	and.w	r3, r3, #1
 8005258:	2b00      	cmp	r3, #0
 800525a:	d007      	beq.n	800526c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f06f 0201 	mvn.w	r2, #1
 8005264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7fc fdc0 	bl	8001dec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00c      	beq.n	8005290 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800527c:	2b00      	cmp	r3, #0
 800527e:	d007      	beq.n	8005290 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 ff1e 	bl	80060cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00c      	beq.n	80052b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d007      	beq.n	80052b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80052ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 fa94 	bl	80057dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	f003 0320 	and.w	r3, r3, #32
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00c      	beq.n	80052d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f003 0320 	and.w	r3, r3, #32
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d007      	beq.n	80052d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f06f 0220 	mvn.w	r2, #32
 80052d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 fef0 	bl	80060b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052d8:	bf00      	nop
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052ec:	2300      	movs	r3, #0
 80052ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d101      	bne.n	80052fe <HAL_TIM_IC_ConfigChannel+0x1e>
 80052fa:	2302      	movs	r3, #2
 80052fc:	e088      	b.n	8005410 <HAL_TIM_IC_ConfigChannel+0x130>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d11b      	bne.n	8005344 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800531c:	f000 fc80 	bl	8005c20 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699a      	ldr	r2, [r3, #24]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f022 020c 	bic.w	r2, r2, #12
 800532e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6999      	ldr	r1, [r3, #24]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	689a      	ldr	r2, [r3, #8]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	619a      	str	r2, [r3, #24]
 8005342:	e060      	b.n	8005406 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b04      	cmp	r3, #4
 8005348:	d11c      	bne.n	8005384 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800535a:	f000 fcf8 	bl	8005d4e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	699a      	ldr	r2, [r3, #24]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800536c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	6999      	ldr	r1, [r3, #24]
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	021a      	lsls	r2, r3, #8
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	619a      	str	r2, [r3, #24]
 8005382:	e040      	b.n	8005406 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b08      	cmp	r3, #8
 8005388:	d11b      	bne.n	80053c2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 800539a:	f000 fd45 	bl	8005e28 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	69da      	ldr	r2, [r3, #28]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 020c 	bic.w	r2, r2, #12
 80053ac:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	69d9      	ldr	r1, [r3, #28]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	430a      	orrs	r2, r1
 80053be:	61da      	str	r2, [r3, #28]
 80053c0:	e021      	b.n	8005406 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b0c      	cmp	r3, #12
 80053c6:	d11c      	bne.n	8005402 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80053d8:	f000 fd62 	bl	8005ea0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	69da      	ldr	r2, [r3, #28]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80053ea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	69d9      	ldr	r1, [r3, #28]
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	021a      	lsls	r2, r3, #8
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	61da      	str	r2, [r3, #28]
 8005400:	e001      	b.n	8005406 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800540e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3718      	adds	r7, #24
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005424:	2300      	movs	r3, #0
 8005426:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800542e:	2b01      	cmp	r3, #1
 8005430:	d101      	bne.n	8005436 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005432:	2302      	movs	r3, #2
 8005434:	e0ae      	b.n	8005594 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2b0c      	cmp	r3, #12
 8005442:	f200 809f 	bhi.w	8005584 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005446:	a201      	add	r2, pc, #4	@ (adr r2, 800544c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544c:	08005481 	.word	0x08005481
 8005450:	08005585 	.word	0x08005585
 8005454:	08005585 	.word	0x08005585
 8005458:	08005585 	.word	0x08005585
 800545c:	080054c1 	.word	0x080054c1
 8005460:	08005585 	.word	0x08005585
 8005464:	08005585 	.word	0x08005585
 8005468:	08005585 	.word	0x08005585
 800546c:	08005503 	.word	0x08005503
 8005470:	08005585 	.word	0x08005585
 8005474:	08005585 	.word	0x08005585
 8005478:	08005585 	.word	0x08005585
 800547c:	08005543 	.word	0x08005543
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68b9      	ldr	r1, [r7, #8]
 8005486:	4618      	mov	r0, r3
 8005488:	f000 fa3e 	bl	8005908 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	699a      	ldr	r2, [r3, #24]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0208 	orr.w	r2, r2, #8
 800549a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	699a      	ldr	r2, [r3, #24]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0204 	bic.w	r2, r2, #4
 80054aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6999      	ldr	r1, [r3, #24]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	691a      	ldr	r2, [r3, #16]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	619a      	str	r2, [r3, #24]
      break;
 80054be:	e064      	b.n	800558a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68b9      	ldr	r1, [r7, #8]
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 fa84 	bl	80059d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699a      	ldr	r2, [r3, #24]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699a      	ldr	r2, [r3, #24]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6999      	ldr	r1, [r3, #24]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	021a      	lsls	r2, r3, #8
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	430a      	orrs	r2, r1
 80054fe:	619a      	str	r2, [r3, #24]
      break;
 8005500:	e043      	b.n	800558a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68b9      	ldr	r1, [r7, #8]
 8005508:	4618      	mov	r0, r3
 800550a:	f000 facf 	bl	8005aac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	69da      	ldr	r2, [r3, #28]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f042 0208 	orr.w	r2, r2, #8
 800551c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	69da      	ldr	r2, [r3, #28]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 0204 	bic.w	r2, r2, #4
 800552c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	69d9      	ldr	r1, [r3, #28]
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	691a      	ldr	r2, [r3, #16]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	61da      	str	r2, [r3, #28]
      break;
 8005540:	e023      	b.n	800558a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68b9      	ldr	r1, [r7, #8]
 8005548:	4618      	mov	r0, r3
 800554a:	f000 fb19 	bl	8005b80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	69da      	ldr	r2, [r3, #28]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800555c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	69da      	ldr	r2, [r3, #28]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800556c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	69d9      	ldr	r1, [r3, #28]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	021a      	lsls	r2, r3, #8
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	430a      	orrs	r2, r1
 8005580:	61da      	str	r2, [r3, #28]
      break;
 8005582:	e002      	b.n	800558a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	75fb      	strb	r3, [r7, #23]
      break;
 8005588:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005592:	7dfb      	ldrb	r3, [r7, #23]
}
 8005594:	4618      	mov	r0, r3
 8005596:	3718      	adds	r7, #24
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055a6:	2300      	movs	r3, #0
 80055a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d101      	bne.n	80055b8 <HAL_TIM_ConfigClockSource+0x1c>
 80055b4:	2302      	movs	r3, #2
 80055b6:	e0b4      	b.n	8005722 <HAL_TIM_ConfigClockSource+0x186>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80055d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055f0:	d03e      	beq.n	8005670 <HAL_TIM_ConfigClockSource+0xd4>
 80055f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055f6:	f200 8087 	bhi.w	8005708 <HAL_TIM_ConfigClockSource+0x16c>
 80055fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055fe:	f000 8086 	beq.w	800570e <HAL_TIM_ConfigClockSource+0x172>
 8005602:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005606:	d87f      	bhi.n	8005708 <HAL_TIM_ConfigClockSource+0x16c>
 8005608:	2b70      	cmp	r3, #112	@ 0x70
 800560a:	d01a      	beq.n	8005642 <HAL_TIM_ConfigClockSource+0xa6>
 800560c:	2b70      	cmp	r3, #112	@ 0x70
 800560e:	d87b      	bhi.n	8005708 <HAL_TIM_ConfigClockSource+0x16c>
 8005610:	2b60      	cmp	r3, #96	@ 0x60
 8005612:	d050      	beq.n	80056b6 <HAL_TIM_ConfigClockSource+0x11a>
 8005614:	2b60      	cmp	r3, #96	@ 0x60
 8005616:	d877      	bhi.n	8005708 <HAL_TIM_ConfigClockSource+0x16c>
 8005618:	2b50      	cmp	r3, #80	@ 0x50
 800561a:	d03c      	beq.n	8005696 <HAL_TIM_ConfigClockSource+0xfa>
 800561c:	2b50      	cmp	r3, #80	@ 0x50
 800561e:	d873      	bhi.n	8005708 <HAL_TIM_ConfigClockSource+0x16c>
 8005620:	2b40      	cmp	r3, #64	@ 0x40
 8005622:	d058      	beq.n	80056d6 <HAL_TIM_ConfigClockSource+0x13a>
 8005624:	2b40      	cmp	r3, #64	@ 0x40
 8005626:	d86f      	bhi.n	8005708 <HAL_TIM_ConfigClockSource+0x16c>
 8005628:	2b30      	cmp	r3, #48	@ 0x30
 800562a:	d064      	beq.n	80056f6 <HAL_TIM_ConfigClockSource+0x15a>
 800562c:	2b30      	cmp	r3, #48	@ 0x30
 800562e:	d86b      	bhi.n	8005708 <HAL_TIM_ConfigClockSource+0x16c>
 8005630:	2b20      	cmp	r3, #32
 8005632:	d060      	beq.n	80056f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005634:	2b20      	cmp	r3, #32
 8005636:	d867      	bhi.n	8005708 <HAL_TIM_ConfigClockSource+0x16c>
 8005638:	2b00      	cmp	r3, #0
 800563a:	d05c      	beq.n	80056f6 <HAL_TIM_ConfigClockSource+0x15a>
 800563c:	2b10      	cmp	r3, #16
 800563e:	d05a      	beq.n	80056f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005640:	e062      	b.n	8005708 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005652:	f000 fc7d 	bl	8005f50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005664:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	609a      	str	r2, [r3, #8]
      break;
 800566e:	e04f      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005680:	f000 fc66 	bl	8005f50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689a      	ldr	r2, [r3, #8]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005692:	609a      	str	r2, [r3, #8]
      break;
 8005694:	e03c      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056a2:	461a      	mov	r2, r3
 80056a4:	f000 fb24 	bl	8005cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2150      	movs	r1, #80	@ 0x50
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 fc33 	bl	8005f1a <TIM_ITRx_SetConfig>
      break;
 80056b4:	e02c      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056c2:	461a      	mov	r2, r3
 80056c4:	f000 fb80 	bl	8005dc8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2160      	movs	r1, #96	@ 0x60
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 fc23 	bl	8005f1a <TIM_ITRx_SetConfig>
      break;
 80056d4:	e01c      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056e2:	461a      	mov	r2, r3
 80056e4:	f000 fb04 	bl	8005cf0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2140      	movs	r1, #64	@ 0x40
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 fc13 	bl	8005f1a <TIM_ITRx_SetConfig>
      break;
 80056f4:	e00c      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4619      	mov	r1, r3
 8005700:	4610      	mov	r0, r2
 8005702:	f000 fc0a 	bl	8005f1a <TIM_ITRx_SetConfig>
      break;
 8005706:	e003      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	73fb      	strb	r3, [r7, #15]
      break;
 800570c:	e000      	b.n	8005710 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800570e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005720:	7bfb      	ldrb	r3, [r7, #15]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
	...

0800572c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005736:	2300      	movs	r3, #0
 8005738:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b0c      	cmp	r3, #12
 800573e:	d831      	bhi.n	80057a4 <HAL_TIM_ReadCapturedValue+0x78>
 8005740:	a201      	add	r2, pc, #4	@ (adr r2, 8005748 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005746:	bf00      	nop
 8005748:	0800577d 	.word	0x0800577d
 800574c:	080057a5 	.word	0x080057a5
 8005750:	080057a5 	.word	0x080057a5
 8005754:	080057a5 	.word	0x080057a5
 8005758:	08005787 	.word	0x08005787
 800575c:	080057a5 	.word	0x080057a5
 8005760:	080057a5 	.word	0x080057a5
 8005764:	080057a5 	.word	0x080057a5
 8005768:	08005791 	.word	0x08005791
 800576c:	080057a5 	.word	0x080057a5
 8005770:	080057a5 	.word	0x080057a5
 8005774:	080057a5 	.word	0x080057a5
 8005778:	0800579b 	.word	0x0800579b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005782:	60fb      	str	r3, [r7, #12]

      break;
 8005784:	e00f      	b.n	80057a6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800578c:	60fb      	str	r3, [r7, #12]

      break;
 800578e:	e00a      	b.n	80057a6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005796:	60fb      	str	r3, [r7, #12]

      break;
 8005798:	e005      	b.n	80057a6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a0:	60fb      	str	r3, [r7, #12]

      break;
 80057a2:	e000      	b.n	80057a6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80057a4:	bf00      	nop
  }

  return tmpreg;
 80057a6:	68fb      	ldr	r3, [r7, #12]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3714      	adds	r7, #20
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a3a      	ldr	r2, [pc, #232]	@ (80058ec <TIM_Base_SetConfig+0xfc>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d00f      	beq.n	8005828 <TIM_Base_SetConfig+0x38>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800580e:	d00b      	beq.n	8005828 <TIM_Base_SetConfig+0x38>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a37      	ldr	r2, [pc, #220]	@ (80058f0 <TIM_Base_SetConfig+0x100>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d007      	beq.n	8005828 <TIM_Base_SetConfig+0x38>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a36      	ldr	r2, [pc, #216]	@ (80058f4 <TIM_Base_SetConfig+0x104>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d003      	beq.n	8005828 <TIM_Base_SetConfig+0x38>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a35      	ldr	r2, [pc, #212]	@ (80058f8 <TIM_Base_SetConfig+0x108>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d108      	bne.n	800583a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800582e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a2b      	ldr	r2, [pc, #172]	@ (80058ec <TIM_Base_SetConfig+0xfc>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d01b      	beq.n	800587a <TIM_Base_SetConfig+0x8a>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005848:	d017      	beq.n	800587a <TIM_Base_SetConfig+0x8a>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a28      	ldr	r2, [pc, #160]	@ (80058f0 <TIM_Base_SetConfig+0x100>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d013      	beq.n	800587a <TIM_Base_SetConfig+0x8a>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a27      	ldr	r2, [pc, #156]	@ (80058f4 <TIM_Base_SetConfig+0x104>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d00f      	beq.n	800587a <TIM_Base_SetConfig+0x8a>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a26      	ldr	r2, [pc, #152]	@ (80058f8 <TIM_Base_SetConfig+0x108>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00b      	beq.n	800587a <TIM_Base_SetConfig+0x8a>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a25      	ldr	r2, [pc, #148]	@ (80058fc <TIM_Base_SetConfig+0x10c>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d007      	beq.n	800587a <TIM_Base_SetConfig+0x8a>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a24      	ldr	r2, [pc, #144]	@ (8005900 <TIM_Base_SetConfig+0x110>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d003      	beq.n	800587a <TIM_Base_SetConfig+0x8a>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a23      	ldr	r2, [pc, #140]	@ (8005904 <TIM_Base_SetConfig+0x114>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d108      	bne.n	800588c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	4313      	orrs	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	4313      	orrs	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	689a      	ldr	r2, [r3, #8]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a0e      	ldr	r2, [pc, #56]	@ (80058ec <TIM_Base_SetConfig+0xfc>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d103      	bne.n	80058c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	691a      	ldr	r2, [r3, #16]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d105      	bne.n	80058de <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	f023 0201 	bic.w	r2, r3, #1
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	611a      	str	r2, [r3, #16]
  }
}
 80058de:	bf00      	nop
 80058e0:	3714      	adds	r7, #20
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	40010000 	.word	0x40010000
 80058f0:	40000400 	.word	0x40000400
 80058f4:	40000800 	.word	0x40000800
 80058f8:	40000c00 	.word	0x40000c00
 80058fc:	40014000 	.word	0x40014000
 8005900:	40014400 	.word	0x40014400
 8005904:	40014800 	.word	0x40014800

08005908 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005908:	b480      	push	{r7}
 800590a:	b087      	sub	sp, #28
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a1b      	ldr	r3, [r3, #32]
 8005916:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	f023 0201 	bic.w	r2, r3, #1
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f023 0303 	bic.w	r3, r3, #3
 800593e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	4313      	orrs	r3, r2
 8005948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	f023 0302 	bic.w	r3, r3, #2
 8005950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	4313      	orrs	r3, r2
 800595a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a1c      	ldr	r2, [pc, #112]	@ (80059d0 <TIM_OC1_SetConfig+0xc8>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d10c      	bne.n	800597e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f023 0308 	bic.w	r3, r3, #8
 800596a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	4313      	orrs	r3, r2
 8005974:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f023 0304 	bic.w	r3, r3, #4
 800597c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a13      	ldr	r2, [pc, #76]	@ (80059d0 <TIM_OC1_SetConfig+0xc8>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d111      	bne.n	80059aa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800598c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	4313      	orrs	r3, r2
 800599e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	621a      	str	r2, [r3, #32]
}
 80059c4:	bf00      	nop
 80059c6:	371c      	adds	r7, #28
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	40010000 	.word	0x40010000

080059d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b087      	sub	sp, #28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a1b      	ldr	r3, [r3, #32]
 80059e8:	f023 0210 	bic.w	r2, r3, #16
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	021b      	lsls	r3, r3, #8
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f023 0320 	bic.w	r3, r3, #32
 8005a1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	011b      	lsls	r3, r3, #4
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a1e      	ldr	r2, [pc, #120]	@ (8005aa8 <TIM_OC2_SetConfig+0xd4>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d10d      	bne.n	8005a50 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	011b      	lsls	r3, r3, #4
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a15      	ldr	r2, [pc, #84]	@ (8005aa8 <TIM_OC2_SetConfig+0xd4>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d113      	bne.n	8005a80 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	685a      	ldr	r2, [r3, #4]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	621a      	str	r2, [r3, #32]
}
 8005a9a:	bf00      	nop
 8005a9c:	371c      	adds	r7, #28
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	40010000 	.word	0x40010000

08005aac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b087      	sub	sp, #28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f023 0303 	bic.w	r3, r3, #3
 8005ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005af4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	021b      	lsls	r3, r3, #8
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a1d      	ldr	r2, [pc, #116]	@ (8005b7c <TIM_OC3_SetConfig+0xd0>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d10d      	bne.n	8005b26 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	021b      	lsls	r3, r3, #8
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a14      	ldr	r2, [pc, #80]	@ (8005b7c <TIM_OC3_SetConfig+0xd0>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d113      	bne.n	8005b56 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	011b      	lsls	r3, r3, #4
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	011b      	lsls	r3, r3, #4
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	685a      	ldr	r2, [r3, #4]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	621a      	str	r2, [r3, #32]
}
 8005b70:	bf00      	nop
 8005b72:	371c      	adds	r7, #28
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr
 8005b7c:	40010000 	.word	0x40010000

08005b80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	021b      	lsls	r3, r3, #8
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005bca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	031b      	lsls	r3, r3, #12
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a10      	ldr	r2, [pc, #64]	@ (8005c1c <TIM_OC4_SetConfig+0x9c>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d109      	bne.n	8005bf4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005be6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	019b      	lsls	r3, r3, #6
 8005bee:	697a      	ldr	r2, [r7, #20]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	621a      	str	r2, [r3, #32]
}
 8005c0e:	bf00      	nop
 8005c10:	371c      	adds	r7, #28
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	40010000 	.word	0x40010000

08005c20 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
 8005c2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6a1b      	ldr	r3, [r3, #32]
 8005c38:	f023 0201 	bic.w	r2, r3, #1
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	4a24      	ldr	r2, [pc, #144]	@ (8005cdc <TIM_TI1_SetConfig+0xbc>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d013      	beq.n	8005c76 <TIM_TI1_SetConfig+0x56>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c54:	d00f      	beq.n	8005c76 <TIM_TI1_SetConfig+0x56>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	4a21      	ldr	r2, [pc, #132]	@ (8005ce0 <TIM_TI1_SetConfig+0xc0>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d00b      	beq.n	8005c76 <TIM_TI1_SetConfig+0x56>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	4a20      	ldr	r2, [pc, #128]	@ (8005ce4 <TIM_TI1_SetConfig+0xc4>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d007      	beq.n	8005c76 <TIM_TI1_SetConfig+0x56>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	4a1f      	ldr	r2, [pc, #124]	@ (8005ce8 <TIM_TI1_SetConfig+0xc8>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d003      	beq.n	8005c76 <TIM_TI1_SetConfig+0x56>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	4a1e      	ldr	r2, [pc, #120]	@ (8005cec <TIM_TI1_SetConfig+0xcc>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d101      	bne.n	8005c7a <TIM_TI1_SetConfig+0x5a>
 8005c76:	2301      	movs	r3, #1
 8005c78:	e000      	b.n	8005c7c <TIM_TI1_SetConfig+0x5c>
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d008      	beq.n	8005c92 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	f023 0303 	bic.w	r3, r3, #3
 8005c86:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	617b      	str	r3, [r7, #20]
 8005c90:	e003      	b.n	8005c9a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f043 0301 	orr.w	r3, r3, #1
 8005c98:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ca0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	011b      	lsls	r3, r3, #4
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	f023 030a 	bic.w	r3, r3, #10
 8005cb4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	f003 030a 	and.w	r3, r3, #10
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	621a      	str	r2, [r3, #32]
}
 8005cce:	bf00      	nop
 8005cd0:	371c      	adds	r7, #28
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	40010000 	.word	0x40010000
 8005ce0:	40000400 	.word	0x40000400
 8005ce4:	40000800 	.word	0x40000800
 8005ce8:	40000c00 	.word	0x40000c00
 8005cec:	40014000 	.word	0x40014000

08005cf0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b087      	sub	sp, #28
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	f023 0201 	bic.w	r2, r3, #1
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	011b      	lsls	r3, r3, #4
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f023 030a 	bic.w	r3, r3, #10
 8005d2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	693a      	ldr	r2, [r7, #16]
 8005d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	621a      	str	r2, [r3, #32]
}
 8005d42:	bf00      	nop
 8005d44:	371c      	adds	r7, #28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b087      	sub	sp, #28
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	60f8      	str	r0, [r7, #12]
 8005d56:	60b9      	str	r1, [r7, #8]
 8005d58:	607a      	str	r2, [r7, #4]
 8005d5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	f023 0210 	bic.w	r2, r3, #16
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	021b      	lsls	r3, r3, #8
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	031b      	lsls	r3, r3, #12
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005da0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	011b      	lsls	r3, r3, #4
 8005da6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	621a      	str	r2, [r3, #32]
}
 8005dbc:	bf00      	nop
 8005dbe:	371c      	adds	r7, #28
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b087      	sub	sp, #28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6a1b      	ldr	r3, [r3, #32]
 8005dd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	f023 0210 	bic.w	r2, r3, #16
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005df2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	031b      	lsls	r3, r3, #12
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005e04:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	011b      	lsls	r3, r3, #4
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	621a      	str	r2, [r3, #32]
}
 8005e1c:	bf00      	nop
 8005e1e:	371c      	adds	r7, #28
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b087      	sub	sp, #28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	607a      	str	r2, [r7, #4]
 8005e34:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6a1b      	ldr	r3, [r3, #32]
 8005e40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	69db      	ldr	r3, [r3, #28]
 8005e4c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	f023 0303 	bic.w	r3, r3, #3
 8005e54:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e64:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	011b      	lsls	r3, r3, #4
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005e78:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	021b      	lsls	r3, r3, #8
 8005e7e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	621a      	str	r2, [r3, #32]
}
 8005e94:	bf00      	nop
 8005e96:	371c      	adds	r7, #28
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b087      	sub	sp, #28
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
 8005eac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6a1b      	ldr	r3, [r3, #32]
 8005eb8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	69db      	ldr	r3, [r3, #28]
 8005ec4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ecc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	021b      	lsls	r3, r3, #8
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ede:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	031b      	lsls	r3, r3, #12
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005ef2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	031b      	lsls	r3, r3, #12
 8005ef8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	621a      	str	r2, [r3, #32]
}
 8005f0e:	bf00      	nop
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b085      	sub	sp, #20
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	f043 0307 	orr.w	r3, r3, #7
 8005f3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	609a      	str	r2, [r3, #8]
}
 8005f44:	bf00      	nop
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	021a      	lsls	r2, r3, #8
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	431a      	orrs	r2, r3
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	609a      	str	r2, [r3, #8]
}
 8005f84:	bf00      	nop
 8005f86:	371c      	adds	r7, #28
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f003 031f 	and.w	r3, r3, #31
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6a1a      	ldr	r2, [r3, #32]
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	43db      	mvns	r3, r3
 8005fb2:	401a      	ands	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6a1a      	ldr	r2, [r3, #32]
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	f003 031f 	and.w	r3, r3, #31
 8005fc2:	6879      	ldr	r1, [r7, #4]
 8005fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8005fc8:	431a      	orrs	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	621a      	str	r2, [r3, #32]
}
 8005fce:	bf00      	nop
 8005fd0:	371c      	adds	r7, #28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
	...

08005fdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d101      	bne.n	8005ff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ff0:	2302      	movs	r3, #2
 8005ff2:	e050      	b.n	8006096 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2202      	movs	r2, #2
 8006000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800601a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	4313      	orrs	r3, r2
 8006024:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a1c      	ldr	r2, [pc, #112]	@ (80060a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d018      	beq.n	800606a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006040:	d013      	beq.n	800606a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a18      	ldr	r2, [pc, #96]	@ (80060a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d00e      	beq.n	800606a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a16      	ldr	r2, [pc, #88]	@ (80060ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d009      	beq.n	800606a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a15      	ldr	r2, [pc, #84]	@ (80060b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d004      	beq.n	800606a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a13      	ldr	r2, [pc, #76]	@ (80060b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d10c      	bne.n	8006084 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006070:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	4313      	orrs	r3, r2
 800607a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3714      	adds	r7, #20
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	40010000 	.word	0x40010000
 80060a8:	40000400 	.word	0x40000400
 80060ac:	40000800 	.word	0x40000800
 80060b0:	40000c00 	.word	0x40000c00
 80060b4:	40014000 	.word	0x40014000

080060b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060c0:	bf00      	nop
 80060c2:	370c      	adds	r7, #12
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e042      	b.n	8006178 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d106      	bne.n	800610c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7fc fe0e 	bl	8002d28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2224      	movs	r2, #36	@ 0x24
 8006110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68da      	ldr	r2, [r3, #12]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006122:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 f973 	bl	8006410 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	691a      	ldr	r2, [r3, #16]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006138:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	695a      	ldr	r2, [r3, #20]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006148:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68da      	ldr	r2, [r3, #12]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006158:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2220      	movs	r2, #32
 8006164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2220      	movs	r2, #32
 800616c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3708      	adds	r7, #8
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}

08006180 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b08a      	sub	sp, #40	@ 0x28
 8006184:	af02      	add	r7, sp, #8
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	603b      	str	r3, [r7, #0]
 800618c:	4613      	mov	r3, r2
 800618e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006190:	2300      	movs	r3, #0
 8006192:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800619a:	b2db      	uxtb	r3, r3
 800619c:	2b20      	cmp	r3, #32
 800619e:	d175      	bne.n	800628c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d002      	beq.n	80061ac <HAL_UART_Transmit+0x2c>
 80061a6:	88fb      	ldrh	r3, [r7, #6]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e06e      	b.n	800628e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2200      	movs	r2, #0
 80061b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2221      	movs	r2, #33	@ 0x21
 80061ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061be:	f7fc ffcd 	bl	800315c <HAL_GetTick>
 80061c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	88fa      	ldrh	r2, [r7, #6]
 80061c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	88fa      	ldrh	r2, [r7, #6]
 80061ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061d8:	d108      	bne.n	80061ec <HAL_UART_Transmit+0x6c>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d104      	bne.n	80061ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80061e2:	2300      	movs	r3, #0
 80061e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	61bb      	str	r3, [r7, #24]
 80061ea:	e003      	b.n	80061f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061f0:	2300      	movs	r3, #0
 80061f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061f4:	e02e      	b.n	8006254 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	2200      	movs	r2, #0
 80061fe:	2180      	movs	r1, #128	@ 0x80
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f000 f848 	bl	8006296 <UART_WaitOnFlagUntilTimeout>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d005      	beq.n	8006218 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2220      	movs	r2, #32
 8006210:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e03a      	b.n	800628e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10b      	bne.n	8006236 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	881b      	ldrh	r3, [r3, #0]
 8006222:	461a      	mov	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800622c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	3302      	adds	r3, #2
 8006232:	61bb      	str	r3, [r7, #24]
 8006234:	e007      	b.n	8006246 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	781a      	ldrb	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	3301      	adds	r3, #1
 8006244:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800624a:	b29b      	uxth	r3, r3
 800624c:	3b01      	subs	r3, #1
 800624e:	b29a      	uxth	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006258:	b29b      	uxth	r3, r3
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1cb      	bne.n	80061f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	9300      	str	r3, [sp, #0]
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	2200      	movs	r2, #0
 8006266:	2140      	movs	r1, #64	@ 0x40
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f000 f814 	bl	8006296 <UART_WaitOnFlagUntilTimeout>
 800626e:	4603      	mov	r3, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	d005      	beq.n	8006280 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2220      	movs	r2, #32
 8006278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	e006      	b.n	800628e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2220      	movs	r2, #32
 8006284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006288:	2300      	movs	r3, #0
 800628a:	e000      	b.n	800628e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800628c:	2302      	movs	r3, #2
  }
}
 800628e:	4618      	mov	r0, r3
 8006290:	3720      	adds	r7, #32
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b086      	sub	sp, #24
 800629a:	af00      	add	r7, sp, #0
 800629c:	60f8      	str	r0, [r7, #12]
 800629e:	60b9      	str	r1, [r7, #8]
 80062a0:	603b      	str	r3, [r7, #0]
 80062a2:	4613      	mov	r3, r2
 80062a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062a6:	e03b      	b.n	8006320 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062a8:	6a3b      	ldr	r3, [r7, #32]
 80062aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ae:	d037      	beq.n	8006320 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062b0:	f7fc ff54 	bl	800315c <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	6a3a      	ldr	r2, [r7, #32]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d302      	bcc.n	80062c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80062c0:	6a3b      	ldr	r3, [r7, #32]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e03a      	b.n	8006340 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	f003 0304 	and.w	r3, r3, #4
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d023      	beq.n	8006320 <UART_WaitOnFlagUntilTimeout+0x8a>
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	2b80      	cmp	r3, #128	@ 0x80
 80062dc:	d020      	beq.n	8006320 <UART_WaitOnFlagUntilTimeout+0x8a>
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	2b40      	cmp	r3, #64	@ 0x40
 80062e2:	d01d      	beq.n	8006320 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0308 	and.w	r3, r3, #8
 80062ee:	2b08      	cmp	r3, #8
 80062f0:	d116      	bne.n	8006320 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80062f2:	2300      	movs	r3, #0
 80062f4:	617b      	str	r3, [r7, #20]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	617b      	str	r3, [r7, #20]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	617b      	str	r3, [r7, #20]
 8006306:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f000 f81d 	bl	8006348 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2208      	movs	r2, #8
 8006312:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e00f      	b.n	8006340 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	4013      	ands	r3, r2
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	429a      	cmp	r2, r3
 800632e:	bf0c      	ite	eq
 8006330:	2301      	moveq	r3, #1
 8006332:	2300      	movne	r3, #0
 8006334:	b2db      	uxtb	r3, r3
 8006336:	461a      	mov	r2, r3
 8006338:	79fb      	ldrb	r3, [r7, #7]
 800633a:	429a      	cmp	r2, r3
 800633c:	d0b4      	beq.n	80062a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3718      	adds	r7, #24
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006348:	b480      	push	{r7}
 800634a:	b095      	sub	sp, #84	@ 0x54
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	330c      	adds	r3, #12
 8006356:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800635a:	e853 3f00 	ldrex	r3, [r3]
 800635e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006362:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006366:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	330c      	adds	r3, #12
 800636e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006370:	643a      	str	r2, [r7, #64]	@ 0x40
 8006372:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006374:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006376:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006378:	e841 2300 	strex	r3, r2, [r1]
 800637c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800637e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1e5      	bne.n	8006350 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3314      	adds	r3, #20
 800638a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	e853 3f00 	ldrex	r3, [r3]
 8006392:	61fb      	str	r3, [r7, #28]
   return(result);
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	f023 0301 	bic.w	r3, r3, #1
 800639a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	3314      	adds	r3, #20
 80063a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063ac:	e841 2300 	strex	r3, r2, [r1]
 80063b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80063b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d1e5      	bne.n	8006384 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d119      	bne.n	80063f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	330c      	adds	r3, #12
 80063c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	e853 3f00 	ldrex	r3, [r3]
 80063ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	f023 0310 	bic.w	r3, r3, #16
 80063d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	330c      	adds	r3, #12
 80063de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063e0:	61ba      	str	r2, [r7, #24]
 80063e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e4:	6979      	ldr	r1, [r7, #20]
 80063e6:	69ba      	ldr	r2, [r7, #24]
 80063e8:	e841 2300 	strex	r3, r2, [r1]
 80063ec:	613b      	str	r3, [r7, #16]
   return(result);
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1e5      	bne.n	80063c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2220      	movs	r2, #32
 80063f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006402:	bf00      	nop
 8006404:	3754      	adds	r7, #84	@ 0x54
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
	...

08006410 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006414:	b0c0      	sub	sp, #256	@ 0x100
 8006416:	af00      	add	r7, sp, #0
 8006418:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800641c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800642c:	68d9      	ldr	r1, [r3, #12]
 800642e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	ea40 0301 	orr.w	r3, r0, r1
 8006438:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800643a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800643e:	689a      	ldr	r2, [r3, #8]
 8006440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	431a      	orrs	r2, r3
 8006448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	431a      	orrs	r2, r3
 8006450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006454:	69db      	ldr	r3, [r3, #28]
 8006456:	4313      	orrs	r3, r2
 8006458:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800645c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006468:	f021 010c 	bic.w	r1, r1, #12
 800646c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006476:	430b      	orrs	r3, r1
 8006478:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800647a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800648a:	6999      	ldr	r1, [r3, #24]
 800648c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	ea40 0301 	orr.w	r3, r0, r1
 8006496:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	4b8f      	ldr	r3, [pc, #572]	@ (80066dc <UART_SetConfig+0x2cc>)
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d005      	beq.n	80064b0 <UART_SetConfig+0xa0>
 80064a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	4b8d      	ldr	r3, [pc, #564]	@ (80066e0 <UART_SetConfig+0x2d0>)
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d104      	bne.n	80064ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80064b0:	f7fd ff06 	bl	80042c0 <HAL_RCC_GetPCLK2Freq>
 80064b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80064b8:	e003      	b.n	80064c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064ba:	f7fd feed 	bl	8004298 <HAL_RCC_GetPCLK1Freq>
 80064be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064c6:	69db      	ldr	r3, [r3, #28]
 80064c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064cc:	f040 810c 	bne.w	80066e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064d4:	2200      	movs	r2, #0
 80064d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80064da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80064de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80064e2:	4622      	mov	r2, r4
 80064e4:	462b      	mov	r3, r5
 80064e6:	1891      	adds	r1, r2, r2
 80064e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80064ea:	415b      	adcs	r3, r3
 80064ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80064ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80064f2:	4621      	mov	r1, r4
 80064f4:	eb12 0801 	adds.w	r8, r2, r1
 80064f8:	4629      	mov	r1, r5
 80064fa:	eb43 0901 	adc.w	r9, r3, r1
 80064fe:	f04f 0200 	mov.w	r2, #0
 8006502:	f04f 0300 	mov.w	r3, #0
 8006506:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800650a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800650e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006512:	4690      	mov	r8, r2
 8006514:	4699      	mov	r9, r3
 8006516:	4623      	mov	r3, r4
 8006518:	eb18 0303 	adds.w	r3, r8, r3
 800651c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006520:	462b      	mov	r3, r5
 8006522:	eb49 0303 	adc.w	r3, r9, r3
 8006526:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800652a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006536:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800653a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800653e:	460b      	mov	r3, r1
 8006540:	18db      	adds	r3, r3, r3
 8006542:	653b      	str	r3, [r7, #80]	@ 0x50
 8006544:	4613      	mov	r3, r2
 8006546:	eb42 0303 	adc.w	r3, r2, r3
 800654a:	657b      	str	r3, [r7, #84]	@ 0x54
 800654c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006550:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006554:	f7fa fb30 	bl	8000bb8 <__aeabi_uldivmod>
 8006558:	4602      	mov	r2, r0
 800655a:	460b      	mov	r3, r1
 800655c:	4b61      	ldr	r3, [pc, #388]	@ (80066e4 <UART_SetConfig+0x2d4>)
 800655e:	fba3 2302 	umull	r2, r3, r3, r2
 8006562:	095b      	lsrs	r3, r3, #5
 8006564:	011c      	lsls	r4, r3, #4
 8006566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800656a:	2200      	movs	r2, #0
 800656c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006570:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006574:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006578:	4642      	mov	r2, r8
 800657a:	464b      	mov	r3, r9
 800657c:	1891      	adds	r1, r2, r2
 800657e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006580:	415b      	adcs	r3, r3
 8006582:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006584:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006588:	4641      	mov	r1, r8
 800658a:	eb12 0a01 	adds.w	sl, r2, r1
 800658e:	4649      	mov	r1, r9
 8006590:	eb43 0b01 	adc.w	fp, r3, r1
 8006594:	f04f 0200 	mov.w	r2, #0
 8006598:	f04f 0300 	mov.w	r3, #0
 800659c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80065a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80065a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065a8:	4692      	mov	sl, r2
 80065aa:	469b      	mov	fp, r3
 80065ac:	4643      	mov	r3, r8
 80065ae:	eb1a 0303 	adds.w	r3, sl, r3
 80065b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80065b6:	464b      	mov	r3, r9
 80065b8:	eb4b 0303 	adc.w	r3, fp, r3
 80065bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80065c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80065cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80065d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80065d4:	460b      	mov	r3, r1
 80065d6:	18db      	adds	r3, r3, r3
 80065d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80065da:	4613      	mov	r3, r2
 80065dc:	eb42 0303 	adc.w	r3, r2, r3
 80065e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80065e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80065e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80065ea:	f7fa fae5 	bl	8000bb8 <__aeabi_uldivmod>
 80065ee:	4602      	mov	r2, r0
 80065f0:	460b      	mov	r3, r1
 80065f2:	4611      	mov	r1, r2
 80065f4:	4b3b      	ldr	r3, [pc, #236]	@ (80066e4 <UART_SetConfig+0x2d4>)
 80065f6:	fba3 2301 	umull	r2, r3, r3, r1
 80065fa:	095b      	lsrs	r3, r3, #5
 80065fc:	2264      	movs	r2, #100	@ 0x64
 80065fe:	fb02 f303 	mul.w	r3, r2, r3
 8006602:	1acb      	subs	r3, r1, r3
 8006604:	00db      	lsls	r3, r3, #3
 8006606:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800660a:	4b36      	ldr	r3, [pc, #216]	@ (80066e4 <UART_SetConfig+0x2d4>)
 800660c:	fba3 2302 	umull	r2, r3, r3, r2
 8006610:	095b      	lsrs	r3, r3, #5
 8006612:	005b      	lsls	r3, r3, #1
 8006614:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006618:	441c      	add	r4, r3
 800661a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800661e:	2200      	movs	r2, #0
 8006620:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006624:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006628:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800662c:	4642      	mov	r2, r8
 800662e:	464b      	mov	r3, r9
 8006630:	1891      	adds	r1, r2, r2
 8006632:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006634:	415b      	adcs	r3, r3
 8006636:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006638:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800663c:	4641      	mov	r1, r8
 800663e:	1851      	adds	r1, r2, r1
 8006640:	6339      	str	r1, [r7, #48]	@ 0x30
 8006642:	4649      	mov	r1, r9
 8006644:	414b      	adcs	r3, r1
 8006646:	637b      	str	r3, [r7, #52]	@ 0x34
 8006648:	f04f 0200 	mov.w	r2, #0
 800664c:	f04f 0300 	mov.w	r3, #0
 8006650:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006654:	4659      	mov	r1, fp
 8006656:	00cb      	lsls	r3, r1, #3
 8006658:	4651      	mov	r1, sl
 800665a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800665e:	4651      	mov	r1, sl
 8006660:	00ca      	lsls	r2, r1, #3
 8006662:	4610      	mov	r0, r2
 8006664:	4619      	mov	r1, r3
 8006666:	4603      	mov	r3, r0
 8006668:	4642      	mov	r2, r8
 800666a:	189b      	adds	r3, r3, r2
 800666c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006670:	464b      	mov	r3, r9
 8006672:	460a      	mov	r2, r1
 8006674:	eb42 0303 	adc.w	r3, r2, r3
 8006678:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800667c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006688:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800668c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006690:	460b      	mov	r3, r1
 8006692:	18db      	adds	r3, r3, r3
 8006694:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006696:	4613      	mov	r3, r2
 8006698:	eb42 0303 	adc.w	r3, r2, r3
 800669c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800669e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80066a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80066a6:	f7fa fa87 	bl	8000bb8 <__aeabi_uldivmod>
 80066aa:	4602      	mov	r2, r0
 80066ac:	460b      	mov	r3, r1
 80066ae:	4b0d      	ldr	r3, [pc, #52]	@ (80066e4 <UART_SetConfig+0x2d4>)
 80066b0:	fba3 1302 	umull	r1, r3, r3, r2
 80066b4:	095b      	lsrs	r3, r3, #5
 80066b6:	2164      	movs	r1, #100	@ 0x64
 80066b8:	fb01 f303 	mul.w	r3, r1, r3
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	00db      	lsls	r3, r3, #3
 80066c0:	3332      	adds	r3, #50	@ 0x32
 80066c2:	4a08      	ldr	r2, [pc, #32]	@ (80066e4 <UART_SetConfig+0x2d4>)
 80066c4:	fba2 2303 	umull	r2, r3, r2, r3
 80066c8:	095b      	lsrs	r3, r3, #5
 80066ca:	f003 0207 	and.w	r2, r3, #7
 80066ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4422      	add	r2, r4
 80066d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80066d8:	e106      	b.n	80068e8 <UART_SetConfig+0x4d8>
 80066da:	bf00      	nop
 80066dc:	40011000 	.word	0x40011000
 80066e0:	40011400 	.word	0x40011400
 80066e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066ec:	2200      	movs	r2, #0
 80066ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80066f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80066f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80066fa:	4642      	mov	r2, r8
 80066fc:	464b      	mov	r3, r9
 80066fe:	1891      	adds	r1, r2, r2
 8006700:	6239      	str	r1, [r7, #32]
 8006702:	415b      	adcs	r3, r3
 8006704:	627b      	str	r3, [r7, #36]	@ 0x24
 8006706:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800670a:	4641      	mov	r1, r8
 800670c:	1854      	adds	r4, r2, r1
 800670e:	4649      	mov	r1, r9
 8006710:	eb43 0501 	adc.w	r5, r3, r1
 8006714:	f04f 0200 	mov.w	r2, #0
 8006718:	f04f 0300 	mov.w	r3, #0
 800671c:	00eb      	lsls	r3, r5, #3
 800671e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006722:	00e2      	lsls	r2, r4, #3
 8006724:	4614      	mov	r4, r2
 8006726:	461d      	mov	r5, r3
 8006728:	4643      	mov	r3, r8
 800672a:	18e3      	adds	r3, r4, r3
 800672c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006730:	464b      	mov	r3, r9
 8006732:	eb45 0303 	adc.w	r3, r5, r3
 8006736:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800673a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006746:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800674a:	f04f 0200 	mov.w	r2, #0
 800674e:	f04f 0300 	mov.w	r3, #0
 8006752:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006756:	4629      	mov	r1, r5
 8006758:	008b      	lsls	r3, r1, #2
 800675a:	4621      	mov	r1, r4
 800675c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006760:	4621      	mov	r1, r4
 8006762:	008a      	lsls	r2, r1, #2
 8006764:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006768:	f7fa fa26 	bl	8000bb8 <__aeabi_uldivmod>
 800676c:	4602      	mov	r2, r0
 800676e:	460b      	mov	r3, r1
 8006770:	4b60      	ldr	r3, [pc, #384]	@ (80068f4 <UART_SetConfig+0x4e4>)
 8006772:	fba3 2302 	umull	r2, r3, r3, r2
 8006776:	095b      	lsrs	r3, r3, #5
 8006778:	011c      	lsls	r4, r3, #4
 800677a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800677e:	2200      	movs	r2, #0
 8006780:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006784:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006788:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800678c:	4642      	mov	r2, r8
 800678e:	464b      	mov	r3, r9
 8006790:	1891      	adds	r1, r2, r2
 8006792:	61b9      	str	r1, [r7, #24]
 8006794:	415b      	adcs	r3, r3
 8006796:	61fb      	str	r3, [r7, #28]
 8006798:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800679c:	4641      	mov	r1, r8
 800679e:	1851      	adds	r1, r2, r1
 80067a0:	6139      	str	r1, [r7, #16]
 80067a2:	4649      	mov	r1, r9
 80067a4:	414b      	adcs	r3, r1
 80067a6:	617b      	str	r3, [r7, #20]
 80067a8:	f04f 0200 	mov.w	r2, #0
 80067ac:	f04f 0300 	mov.w	r3, #0
 80067b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80067b4:	4659      	mov	r1, fp
 80067b6:	00cb      	lsls	r3, r1, #3
 80067b8:	4651      	mov	r1, sl
 80067ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067be:	4651      	mov	r1, sl
 80067c0:	00ca      	lsls	r2, r1, #3
 80067c2:	4610      	mov	r0, r2
 80067c4:	4619      	mov	r1, r3
 80067c6:	4603      	mov	r3, r0
 80067c8:	4642      	mov	r2, r8
 80067ca:	189b      	adds	r3, r3, r2
 80067cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80067d0:	464b      	mov	r3, r9
 80067d2:	460a      	mov	r2, r1
 80067d4:	eb42 0303 	adc.w	r3, r2, r3
 80067d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80067dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80067e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80067e8:	f04f 0200 	mov.w	r2, #0
 80067ec:	f04f 0300 	mov.w	r3, #0
 80067f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80067f4:	4649      	mov	r1, r9
 80067f6:	008b      	lsls	r3, r1, #2
 80067f8:	4641      	mov	r1, r8
 80067fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067fe:	4641      	mov	r1, r8
 8006800:	008a      	lsls	r2, r1, #2
 8006802:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006806:	f7fa f9d7 	bl	8000bb8 <__aeabi_uldivmod>
 800680a:	4602      	mov	r2, r0
 800680c:	460b      	mov	r3, r1
 800680e:	4611      	mov	r1, r2
 8006810:	4b38      	ldr	r3, [pc, #224]	@ (80068f4 <UART_SetConfig+0x4e4>)
 8006812:	fba3 2301 	umull	r2, r3, r3, r1
 8006816:	095b      	lsrs	r3, r3, #5
 8006818:	2264      	movs	r2, #100	@ 0x64
 800681a:	fb02 f303 	mul.w	r3, r2, r3
 800681e:	1acb      	subs	r3, r1, r3
 8006820:	011b      	lsls	r3, r3, #4
 8006822:	3332      	adds	r3, #50	@ 0x32
 8006824:	4a33      	ldr	r2, [pc, #204]	@ (80068f4 <UART_SetConfig+0x4e4>)
 8006826:	fba2 2303 	umull	r2, r3, r2, r3
 800682a:	095b      	lsrs	r3, r3, #5
 800682c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006830:	441c      	add	r4, r3
 8006832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006836:	2200      	movs	r2, #0
 8006838:	673b      	str	r3, [r7, #112]	@ 0x70
 800683a:	677a      	str	r2, [r7, #116]	@ 0x74
 800683c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006840:	4642      	mov	r2, r8
 8006842:	464b      	mov	r3, r9
 8006844:	1891      	adds	r1, r2, r2
 8006846:	60b9      	str	r1, [r7, #8]
 8006848:	415b      	adcs	r3, r3
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006850:	4641      	mov	r1, r8
 8006852:	1851      	adds	r1, r2, r1
 8006854:	6039      	str	r1, [r7, #0]
 8006856:	4649      	mov	r1, r9
 8006858:	414b      	adcs	r3, r1
 800685a:	607b      	str	r3, [r7, #4]
 800685c:	f04f 0200 	mov.w	r2, #0
 8006860:	f04f 0300 	mov.w	r3, #0
 8006864:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006868:	4659      	mov	r1, fp
 800686a:	00cb      	lsls	r3, r1, #3
 800686c:	4651      	mov	r1, sl
 800686e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006872:	4651      	mov	r1, sl
 8006874:	00ca      	lsls	r2, r1, #3
 8006876:	4610      	mov	r0, r2
 8006878:	4619      	mov	r1, r3
 800687a:	4603      	mov	r3, r0
 800687c:	4642      	mov	r2, r8
 800687e:	189b      	adds	r3, r3, r2
 8006880:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006882:	464b      	mov	r3, r9
 8006884:	460a      	mov	r2, r1
 8006886:	eb42 0303 	adc.w	r3, r2, r3
 800688a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800688c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	663b      	str	r3, [r7, #96]	@ 0x60
 8006896:	667a      	str	r2, [r7, #100]	@ 0x64
 8006898:	f04f 0200 	mov.w	r2, #0
 800689c:	f04f 0300 	mov.w	r3, #0
 80068a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80068a4:	4649      	mov	r1, r9
 80068a6:	008b      	lsls	r3, r1, #2
 80068a8:	4641      	mov	r1, r8
 80068aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068ae:	4641      	mov	r1, r8
 80068b0:	008a      	lsls	r2, r1, #2
 80068b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80068b6:	f7fa f97f 	bl	8000bb8 <__aeabi_uldivmod>
 80068ba:	4602      	mov	r2, r0
 80068bc:	460b      	mov	r3, r1
 80068be:	4b0d      	ldr	r3, [pc, #52]	@ (80068f4 <UART_SetConfig+0x4e4>)
 80068c0:	fba3 1302 	umull	r1, r3, r3, r2
 80068c4:	095b      	lsrs	r3, r3, #5
 80068c6:	2164      	movs	r1, #100	@ 0x64
 80068c8:	fb01 f303 	mul.w	r3, r1, r3
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	011b      	lsls	r3, r3, #4
 80068d0:	3332      	adds	r3, #50	@ 0x32
 80068d2:	4a08      	ldr	r2, [pc, #32]	@ (80068f4 <UART_SetConfig+0x4e4>)
 80068d4:	fba2 2303 	umull	r2, r3, r2, r3
 80068d8:	095b      	lsrs	r3, r3, #5
 80068da:	f003 020f 	and.w	r2, r3, #15
 80068de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4422      	add	r2, r4
 80068e6:	609a      	str	r2, [r3, #8]
}
 80068e8:	bf00      	nop
 80068ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80068ee:	46bd      	mov	sp, r7
 80068f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068f4:	51eb851f 	.word	0x51eb851f

080068f8 <_ZdlPvj>:
 80068f8:	f000 b811 	b.w	800691e <_ZdlPv>

080068fc <_Znwj>:
 80068fc:	2801      	cmp	r0, #1
 80068fe:	bf38      	it	cc
 8006900:	2001      	movcc	r0, #1
 8006902:	b510      	push	{r4, lr}
 8006904:	4604      	mov	r4, r0
 8006906:	4620      	mov	r0, r4
 8006908:	f000 f81c 	bl	8006944 <malloc>
 800690c:	b100      	cbz	r0, 8006910 <_Znwj+0x14>
 800690e:	bd10      	pop	{r4, pc}
 8006910:	f000 f808 	bl	8006924 <_ZSt15get_new_handlerv>
 8006914:	b908      	cbnz	r0, 800691a <_Znwj+0x1e>
 8006916:	f000 f80d 	bl	8006934 <abort>
 800691a:	4780      	blx	r0
 800691c:	e7f3      	b.n	8006906 <_Znwj+0xa>

0800691e <_ZdlPv>:
 800691e:	f000 b819 	b.w	8006954 <free>
	...

08006924 <_ZSt15get_new_handlerv>:
 8006924:	4b02      	ldr	r3, [pc, #8]	@ (8006930 <_ZSt15get_new_handlerv+0xc>)
 8006926:	6818      	ldr	r0, [r3, #0]
 8006928:	f3bf 8f5b 	dmb	ish
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	200003d4 	.word	0x200003d4

08006934 <abort>:
 8006934:	b508      	push	{r3, lr}
 8006936:	2006      	movs	r0, #6
 8006938:	f000 fe84 	bl	8007644 <raise>
 800693c:	2001      	movs	r0, #1
 800693e:	f7fc fabd 	bl	8002ebc <_exit>
	...

08006944 <malloc>:
 8006944:	4b02      	ldr	r3, [pc, #8]	@ (8006950 <malloc+0xc>)
 8006946:	4601      	mov	r1, r0
 8006948:	6818      	ldr	r0, [r3, #0]
 800694a:	f000 b82d 	b.w	80069a8 <_malloc_r>
 800694e:	bf00      	nop
 8006950:	20000018 	.word	0x20000018

08006954 <free>:
 8006954:	4b02      	ldr	r3, [pc, #8]	@ (8006960 <free+0xc>)
 8006956:	4601      	mov	r1, r0
 8006958:	6818      	ldr	r0, [r3, #0]
 800695a:	f001 bd71 	b.w	8008440 <_free_r>
 800695e:	bf00      	nop
 8006960:	20000018 	.word	0x20000018

08006964 <sbrk_aligned>:
 8006964:	b570      	push	{r4, r5, r6, lr}
 8006966:	4e0f      	ldr	r6, [pc, #60]	@ (80069a4 <sbrk_aligned+0x40>)
 8006968:	460c      	mov	r4, r1
 800696a:	6831      	ldr	r1, [r6, #0]
 800696c:	4605      	mov	r5, r0
 800696e:	b911      	cbnz	r1, 8006976 <sbrk_aligned+0x12>
 8006970:	f000 febc 	bl	80076ec <_sbrk_r>
 8006974:	6030      	str	r0, [r6, #0]
 8006976:	4621      	mov	r1, r4
 8006978:	4628      	mov	r0, r5
 800697a:	f000 feb7 	bl	80076ec <_sbrk_r>
 800697e:	1c43      	adds	r3, r0, #1
 8006980:	d103      	bne.n	800698a <sbrk_aligned+0x26>
 8006982:	f04f 34ff 	mov.w	r4, #4294967295
 8006986:	4620      	mov	r0, r4
 8006988:	bd70      	pop	{r4, r5, r6, pc}
 800698a:	1cc4      	adds	r4, r0, #3
 800698c:	f024 0403 	bic.w	r4, r4, #3
 8006990:	42a0      	cmp	r0, r4
 8006992:	d0f8      	beq.n	8006986 <sbrk_aligned+0x22>
 8006994:	1a21      	subs	r1, r4, r0
 8006996:	4628      	mov	r0, r5
 8006998:	f000 fea8 	bl	80076ec <_sbrk_r>
 800699c:	3001      	adds	r0, #1
 800699e:	d1f2      	bne.n	8006986 <sbrk_aligned+0x22>
 80069a0:	e7ef      	b.n	8006982 <sbrk_aligned+0x1e>
 80069a2:	bf00      	nop
 80069a4:	200003d8 	.word	0x200003d8

080069a8 <_malloc_r>:
 80069a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069ac:	1ccd      	adds	r5, r1, #3
 80069ae:	f025 0503 	bic.w	r5, r5, #3
 80069b2:	3508      	adds	r5, #8
 80069b4:	2d0c      	cmp	r5, #12
 80069b6:	bf38      	it	cc
 80069b8:	250c      	movcc	r5, #12
 80069ba:	2d00      	cmp	r5, #0
 80069bc:	4606      	mov	r6, r0
 80069be:	db01      	blt.n	80069c4 <_malloc_r+0x1c>
 80069c0:	42a9      	cmp	r1, r5
 80069c2:	d904      	bls.n	80069ce <_malloc_r+0x26>
 80069c4:	230c      	movs	r3, #12
 80069c6:	6033      	str	r3, [r6, #0]
 80069c8:	2000      	movs	r0, #0
 80069ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006aa4 <_malloc_r+0xfc>
 80069d2:	f000 f869 	bl	8006aa8 <__malloc_lock>
 80069d6:	f8d8 3000 	ldr.w	r3, [r8]
 80069da:	461c      	mov	r4, r3
 80069dc:	bb44      	cbnz	r4, 8006a30 <_malloc_r+0x88>
 80069de:	4629      	mov	r1, r5
 80069e0:	4630      	mov	r0, r6
 80069e2:	f7ff ffbf 	bl	8006964 <sbrk_aligned>
 80069e6:	1c43      	adds	r3, r0, #1
 80069e8:	4604      	mov	r4, r0
 80069ea:	d158      	bne.n	8006a9e <_malloc_r+0xf6>
 80069ec:	f8d8 4000 	ldr.w	r4, [r8]
 80069f0:	4627      	mov	r7, r4
 80069f2:	2f00      	cmp	r7, #0
 80069f4:	d143      	bne.n	8006a7e <_malloc_r+0xd6>
 80069f6:	2c00      	cmp	r4, #0
 80069f8:	d04b      	beq.n	8006a92 <_malloc_r+0xea>
 80069fa:	6823      	ldr	r3, [r4, #0]
 80069fc:	4639      	mov	r1, r7
 80069fe:	4630      	mov	r0, r6
 8006a00:	eb04 0903 	add.w	r9, r4, r3
 8006a04:	f000 fe72 	bl	80076ec <_sbrk_r>
 8006a08:	4581      	cmp	r9, r0
 8006a0a:	d142      	bne.n	8006a92 <_malloc_r+0xea>
 8006a0c:	6821      	ldr	r1, [r4, #0]
 8006a0e:	1a6d      	subs	r5, r5, r1
 8006a10:	4629      	mov	r1, r5
 8006a12:	4630      	mov	r0, r6
 8006a14:	f7ff ffa6 	bl	8006964 <sbrk_aligned>
 8006a18:	3001      	adds	r0, #1
 8006a1a:	d03a      	beq.n	8006a92 <_malloc_r+0xea>
 8006a1c:	6823      	ldr	r3, [r4, #0]
 8006a1e:	442b      	add	r3, r5
 8006a20:	6023      	str	r3, [r4, #0]
 8006a22:	f8d8 3000 	ldr.w	r3, [r8]
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	bb62      	cbnz	r2, 8006a84 <_malloc_r+0xdc>
 8006a2a:	f8c8 7000 	str.w	r7, [r8]
 8006a2e:	e00f      	b.n	8006a50 <_malloc_r+0xa8>
 8006a30:	6822      	ldr	r2, [r4, #0]
 8006a32:	1b52      	subs	r2, r2, r5
 8006a34:	d420      	bmi.n	8006a78 <_malloc_r+0xd0>
 8006a36:	2a0b      	cmp	r2, #11
 8006a38:	d917      	bls.n	8006a6a <_malloc_r+0xc2>
 8006a3a:	1961      	adds	r1, r4, r5
 8006a3c:	42a3      	cmp	r3, r4
 8006a3e:	6025      	str	r5, [r4, #0]
 8006a40:	bf18      	it	ne
 8006a42:	6059      	strne	r1, [r3, #4]
 8006a44:	6863      	ldr	r3, [r4, #4]
 8006a46:	bf08      	it	eq
 8006a48:	f8c8 1000 	streq.w	r1, [r8]
 8006a4c:	5162      	str	r2, [r4, r5]
 8006a4e:	604b      	str	r3, [r1, #4]
 8006a50:	4630      	mov	r0, r6
 8006a52:	f000 f82f 	bl	8006ab4 <__malloc_unlock>
 8006a56:	f104 000b 	add.w	r0, r4, #11
 8006a5a:	1d23      	adds	r3, r4, #4
 8006a5c:	f020 0007 	bic.w	r0, r0, #7
 8006a60:	1ac2      	subs	r2, r0, r3
 8006a62:	bf1c      	itt	ne
 8006a64:	1a1b      	subne	r3, r3, r0
 8006a66:	50a3      	strne	r3, [r4, r2]
 8006a68:	e7af      	b.n	80069ca <_malloc_r+0x22>
 8006a6a:	6862      	ldr	r2, [r4, #4]
 8006a6c:	42a3      	cmp	r3, r4
 8006a6e:	bf0c      	ite	eq
 8006a70:	f8c8 2000 	streq.w	r2, [r8]
 8006a74:	605a      	strne	r2, [r3, #4]
 8006a76:	e7eb      	b.n	8006a50 <_malloc_r+0xa8>
 8006a78:	4623      	mov	r3, r4
 8006a7a:	6864      	ldr	r4, [r4, #4]
 8006a7c:	e7ae      	b.n	80069dc <_malloc_r+0x34>
 8006a7e:	463c      	mov	r4, r7
 8006a80:	687f      	ldr	r7, [r7, #4]
 8006a82:	e7b6      	b.n	80069f2 <_malloc_r+0x4a>
 8006a84:	461a      	mov	r2, r3
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	42a3      	cmp	r3, r4
 8006a8a:	d1fb      	bne.n	8006a84 <_malloc_r+0xdc>
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	6053      	str	r3, [r2, #4]
 8006a90:	e7de      	b.n	8006a50 <_malloc_r+0xa8>
 8006a92:	230c      	movs	r3, #12
 8006a94:	6033      	str	r3, [r6, #0]
 8006a96:	4630      	mov	r0, r6
 8006a98:	f000 f80c 	bl	8006ab4 <__malloc_unlock>
 8006a9c:	e794      	b.n	80069c8 <_malloc_r+0x20>
 8006a9e:	6005      	str	r5, [r0, #0]
 8006aa0:	e7d6      	b.n	8006a50 <_malloc_r+0xa8>
 8006aa2:	bf00      	nop
 8006aa4:	200003dc 	.word	0x200003dc

08006aa8 <__malloc_lock>:
 8006aa8:	4801      	ldr	r0, [pc, #4]	@ (8006ab0 <__malloc_lock+0x8>)
 8006aaa:	f000 be6c 	b.w	8007786 <__retarget_lock_acquire_recursive>
 8006aae:	bf00      	nop
 8006ab0:	20000520 	.word	0x20000520

08006ab4 <__malloc_unlock>:
 8006ab4:	4801      	ldr	r0, [pc, #4]	@ (8006abc <__malloc_unlock+0x8>)
 8006ab6:	f000 be67 	b.w	8007788 <__retarget_lock_release_recursive>
 8006aba:	bf00      	nop
 8006abc:	20000520 	.word	0x20000520

08006ac0 <__cvt>:
 8006ac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac4:	ec57 6b10 	vmov	r6, r7, d0
 8006ac8:	2f00      	cmp	r7, #0
 8006aca:	460c      	mov	r4, r1
 8006acc:	4619      	mov	r1, r3
 8006ace:	463b      	mov	r3, r7
 8006ad0:	bfbb      	ittet	lt
 8006ad2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006ad6:	461f      	movlt	r7, r3
 8006ad8:	2300      	movge	r3, #0
 8006ada:	232d      	movlt	r3, #45	@ 0x2d
 8006adc:	700b      	strb	r3, [r1, #0]
 8006ade:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ae0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006ae4:	4691      	mov	r9, r2
 8006ae6:	f023 0820 	bic.w	r8, r3, #32
 8006aea:	bfbc      	itt	lt
 8006aec:	4632      	movlt	r2, r6
 8006aee:	4616      	movlt	r6, r2
 8006af0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006af4:	d005      	beq.n	8006b02 <__cvt+0x42>
 8006af6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006afa:	d100      	bne.n	8006afe <__cvt+0x3e>
 8006afc:	3401      	adds	r4, #1
 8006afe:	2102      	movs	r1, #2
 8006b00:	e000      	b.n	8006b04 <__cvt+0x44>
 8006b02:	2103      	movs	r1, #3
 8006b04:	ab03      	add	r3, sp, #12
 8006b06:	9301      	str	r3, [sp, #4]
 8006b08:	ab02      	add	r3, sp, #8
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	ec47 6b10 	vmov	d0, r6, r7
 8006b10:	4653      	mov	r3, sl
 8006b12:	4622      	mov	r2, r4
 8006b14:	f000 fed0 	bl	80078b8 <_dtoa_r>
 8006b18:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006b1c:	4605      	mov	r5, r0
 8006b1e:	d119      	bne.n	8006b54 <__cvt+0x94>
 8006b20:	f019 0f01 	tst.w	r9, #1
 8006b24:	d00e      	beq.n	8006b44 <__cvt+0x84>
 8006b26:	eb00 0904 	add.w	r9, r0, r4
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	4630      	mov	r0, r6
 8006b30:	4639      	mov	r1, r7
 8006b32:	f7f9 ffd1 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b36:	b108      	cbz	r0, 8006b3c <__cvt+0x7c>
 8006b38:	f8cd 900c 	str.w	r9, [sp, #12]
 8006b3c:	2230      	movs	r2, #48	@ 0x30
 8006b3e:	9b03      	ldr	r3, [sp, #12]
 8006b40:	454b      	cmp	r3, r9
 8006b42:	d31e      	bcc.n	8006b82 <__cvt+0xc2>
 8006b44:	9b03      	ldr	r3, [sp, #12]
 8006b46:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b48:	1b5b      	subs	r3, r3, r5
 8006b4a:	4628      	mov	r0, r5
 8006b4c:	6013      	str	r3, [r2, #0]
 8006b4e:	b004      	add	sp, #16
 8006b50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b54:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006b58:	eb00 0904 	add.w	r9, r0, r4
 8006b5c:	d1e5      	bne.n	8006b2a <__cvt+0x6a>
 8006b5e:	7803      	ldrb	r3, [r0, #0]
 8006b60:	2b30      	cmp	r3, #48	@ 0x30
 8006b62:	d10a      	bne.n	8006b7a <__cvt+0xba>
 8006b64:	2200      	movs	r2, #0
 8006b66:	2300      	movs	r3, #0
 8006b68:	4630      	mov	r0, r6
 8006b6a:	4639      	mov	r1, r7
 8006b6c:	f7f9 ffb4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b70:	b918      	cbnz	r0, 8006b7a <__cvt+0xba>
 8006b72:	f1c4 0401 	rsb	r4, r4, #1
 8006b76:	f8ca 4000 	str.w	r4, [sl]
 8006b7a:	f8da 3000 	ldr.w	r3, [sl]
 8006b7e:	4499      	add	r9, r3
 8006b80:	e7d3      	b.n	8006b2a <__cvt+0x6a>
 8006b82:	1c59      	adds	r1, r3, #1
 8006b84:	9103      	str	r1, [sp, #12]
 8006b86:	701a      	strb	r2, [r3, #0]
 8006b88:	e7d9      	b.n	8006b3e <__cvt+0x7e>

08006b8a <__exponent>:
 8006b8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b8c:	2900      	cmp	r1, #0
 8006b8e:	bfba      	itte	lt
 8006b90:	4249      	neglt	r1, r1
 8006b92:	232d      	movlt	r3, #45	@ 0x2d
 8006b94:	232b      	movge	r3, #43	@ 0x2b
 8006b96:	2909      	cmp	r1, #9
 8006b98:	7002      	strb	r2, [r0, #0]
 8006b9a:	7043      	strb	r3, [r0, #1]
 8006b9c:	dd29      	ble.n	8006bf2 <__exponent+0x68>
 8006b9e:	f10d 0307 	add.w	r3, sp, #7
 8006ba2:	461d      	mov	r5, r3
 8006ba4:	270a      	movs	r7, #10
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	fbb1 f6f7 	udiv	r6, r1, r7
 8006bac:	fb07 1416 	mls	r4, r7, r6, r1
 8006bb0:	3430      	adds	r4, #48	@ 0x30
 8006bb2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006bb6:	460c      	mov	r4, r1
 8006bb8:	2c63      	cmp	r4, #99	@ 0x63
 8006bba:	f103 33ff 	add.w	r3, r3, #4294967295
 8006bbe:	4631      	mov	r1, r6
 8006bc0:	dcf1      	bgt.n	8006ba6 <__exponent+0x1c>
 8006bc2:	3130      	adds	r1, #48	@ 0x30
 8006bc4:	1e94      	subs	r4, r2, #2
 8006bc6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006bca:	1c41      	adds	r1, r0, #1
 8006bcc:	4623      	mov	r3, r4
 8006bce:	42ab      	cmp	r3, r5
 8006bd0:	d30a      	bcc.n	8006be8 <__exponent+0x5e>
 8006bd2:	f10d 0309 	add.w	r3, sp, #9
 8006bd6:	1a9b      	subs	r3, r3, r2
 8006bd8:	42ac      	cmp	r4, r5
 8006bda:	bf88      	it	hi
 8006bdc:	2300      	movhi	r3, #0
 8006bde:	3302      	adds	r3, #2
 8006be0:	4403      	add	r3, r0
 8006be2:	1a18      	subs	r0, r3, r0
 8006be4:	b003      	add	sp, #12
 8006be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006be8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006bec:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006bf0:	e7ed      	b.n	8006bce <__exponent+0x44>
 8006bf2:	2330      	movs	r3, #48	@ 0x30
 8006bf4:	3130      	adds	r1, #48	@ 0x30
 8006bf6:	7083      	strb	r3, [r0, #2]
 8006bf8:	70c1      	strb	r1, [r0, #3]
 8006bfa:	1d03      	adds	r3, r0, #4
 8006bfc:	e7f1      	b.n	8006be2 <__exponent+0x58>
	...

08006c00 <_printf_float>:
 8006c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c04:	b08d      	sub	sp, #52	@ 0x34
 8006c06:	460c      	mov	r4, r1
 8006c08:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006c0c:	4616      	mov	r6, r2
 8006c0e:	461f      	mov	r7, r3
 8006c10:	4605      	mov	r5, r0
 8006c12:	f000 fd1f 	bl	8007654 <_localeconv_r>
 8006c16:	6803      	ldr	r3, [r0, #0]
 8006c18:	9304      	str	r3, [sp, #16]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7f9 fb30 	bl	8000280 <strlen>
 8006c20:	2300      	movs	r3, #0
 8006c22:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c24:	f8d8 3000 	ldr.w	r3, [r8]
 8006c28:	9005      	str	r0, [sp, #20]
 8006c2a:	3307      	adds	r3, #7
 8006c2c:	f023 0307 	bic.w	r3, r3, #7
 8006c30:	f103 0208 	add.w	r2, r3, #8
 8006c34:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006c38:	f8d4 b000 	ldr.w	fp, [r4]
 8006c3c:	f8c8 2000 	str.w	r2, [r8]
 8006c40:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c44:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006c48:	9307      	str	r3, [sp, #28]
 8006c4a:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c4e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006c52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c56:	4b9c      	ldr	r3, [pc, #624]	@ (8006ec8 <_printf_float+0x2c8>)
 8006c58:	f04f 32ff 	mov.w	r2, #4294967295
 8006c5c:	f7f9 ff6e 	bl	8000b3c <__aeabi_dcmpun>
 8006c60:	bb70      	cbnz	r0, 8006cc0 <_printf_float+0xc0>
 8006c62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c66:	4b98      	ldr	r3, [pc, #608]	@ (8006ec8 <_printf_float+0x2c8>)
 8006c68:	f04f 32ff 	mov.w	r2, #4294967295
 8006c6c:	f7f9 ff48 	bl	8000b00 <__aeabi_dcmple>
 8006c70:	bb30      	cbnz	r0, 8006cc0 <_printf_float+0xc0>
 8006c72:	2200      	movs	r2, #0
 8006c74:	2300      	movs	r3, #0
 8006c76:	4640      	mov	r0, r8
 8006c78:	4649      	mov	r1, r9
 8006c7a:	f7f9 ff37 	bl	8000aec <__aeabi_dcmplt>
 8006c7e:	b110      	cbz	r0, 8006c86 <_printf_float+0x86>
 8006c80:	232d      	movs	r3, #45	@ 0x2d
 8006c82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c86:	4a91      	ldr	r2, [pc, #580]	@ (8006ecc <_printf_float+0x2cc>)
 8006c88:	4b91      	ldr	r3, [pc, #580]	@ (8006ed0 <_printf_float+0x2d0>)
 8006c8a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006c8e:	bf94      	ite	ls
 8006c90:	4690      	movls	r8, r2
 8006c92:	4698      	movhi	r8, r3
 8006c94:	2303      	movs	r3, #3
 8006c96:	6123      	str	r3, [r4, #16]
 8006c98:	f02b 0304 	bic.w	r3, fp, #4
 8006c9c:	6023      	str	r3, [r4, #0]
 8006c9e:	f04f 0900 	mov.w	r9, #0
 8006ca2:	9700      	str	r7, [sp, #0]
 8006ca4:	4633      	mov	r3, r6
 8006ca6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006ca8:	4621      	mov	r1, r4
 8006caa:	4628      	mov	r0, r5
 8006cac:	f000 f9d2 	bl	8007054 <_printf_common>
 8006cb0:	3001      	adds	r0, #1
 8006cb2:	f040 808d 	bne.w	8006dd0 <_printf_float+0x1d0>
 8006cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8006cba:	b00d      	add	sp, #52	@ 0x34
 8006cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cc0:	4642      	mov	r2, r8
 8006cc2:	464b      	mov	r3, r9
 8006cc4:	4640      	mov	r0, r8
 8006cc6:	4649      	mov	r1, r9
 8006cc8:	f7f9 ff38 	bl	8000b3c <__aeabi_dcmpun>
 8006ccc:	b140      	cbz	r0, 8006ce0 <_printf_float+0xe0>
 8006cce:	464b      	mov	r3, r9
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	bfbc      	itt	lt
 8006cd4:	232d      	movlt	r3, #45	@ 0x2d
 8006cd6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006cda:	4a7e      	ldr	r2, [pc, #504]	@ (8006ed4 <_printf_float+0x2d4>)
 8006cdc:	4b7e      	ldr	r3, [pc, #504]	@ (8006ed8 <_printf_float+0x2d8>)
 8006cde:	e7d4      	b.n	8006c8a <_printf_float+0x8a>
 8006ce0:	6863      	ldr	r3, [r4, #4]
 8006ce2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006ce6:	9206      	str	r2, [sp, #24]
 8006ce8:	1c5a      	adds	r2, r3, #1
 8006cea:	d13b      	bne.n	8006d64 <_printf_float+0x164>
 8006cec:	2306      	movs	r3, #6
 8006cee:	6063      	str	r3, [r4, #4]
 8006cf0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	6022      	str	r2, [r4, #0]
 8006cf8:	9303      	str	r3, [sp, #12]
 8006cfa:	ab0a      	add	r3, sp, #40	@ 0x28
 8006cfc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006d00:	ab09      	add	r3, sp, #36	@ 0x24
 8006d02:	9300      	str	r3, [sp, #0]
 8006d04:	6861      	ldr	r1, [r4, #4]
 8006d06:	ec49 8b10 	vmov	d0, r8, r9
 8006d0a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006d0e:	4628      	mov	r0, r5
 8006d10:	f7ff fed6 	bl	8006ac0 <__cvt>
 8006d14:	9b06      	ldr	r3, [sp, #24]
 8006d16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006d18:	2b47      	cmp	r3, #71	@ 0x47
 8006d1a:	4680      	mov	r8, r0
 8006d1c:	d129      	bne.n	8006d72 <_printf_float+0x172>
 8006d1e:	1cc8      	adds	r0, r1, #3
 8006d20:	db02      	blt.n	8006d28 <_printf_float+0x128>
 8006d22:	6863      	ldr	r3, [r4, #4]
 8006d24:	4299      	cmp	r1, r3
 8006d26:	dd41      	ble.n	8006dac <_printf_float+0x1ac>
 8006d28:	f1aa 0a02 	sub.w	sl, sl, #2
 8006d2c:	fa5f fa8a 	uxtb.w	sl, sl
 8006d30:	3901      	subs	r1, #1
 8006d32:	4652      	mov	r2, sl
 8006d34:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006d38:	9109      	str	r1, [sp, #36]	@ 0x24
 8006d3a:	f7ff ff26 	bl	8006b8a <__exponent>
 8006d3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d40:	1813      	adds	r3, r2, r0
 8006d42:	2a01      	cmp	r2, #1
 8006d44:	4681      	mov	r9, r0
 8006d46:	6123      	str	r3, [r4, #16]
 8006d48:	dc02      	bgt.n	8006d50 <_printf_float+0x150>
 8006d4a:	6822      	ldr	r2, [r4, #0]
 8006d4c:	07d2      	lsls	r2, r2, #31
 8006d4e:	d501      	bpl.n	8006d54 <_printf_float+0x154>
 8006d50:	3301      	adds	r3, #1
 8006d52:	6123      	str	r3, [r4, #16]
 8006d54:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d0a2      	beq.n	8006ca2 <_printf_float+0xa2>
 8006d5c:	232d      	movs	r3, #45	@ 0x2d
 8006d5e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d62:	e79e      	b.n	8006ca2 <_printf_float+0xa2>
 8006d64:	9a06      	ldr	r2, [sp, #24]
 8006d66:	2a47      	cmp	r2, #71	@ 0x47
 8006d68:	d1c2      	bne.n	8006cf0 <_printf_float+0xf0>
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1c0      	bne.n	8006cf0 <_printf_float+0xf0>
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e7bd      	b.n	8006cee <_printf_float+0xee>
 8006d72:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d76:	d9db      	bls.n	8006d30 <_printf_float+0x130>
 8006d78:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006d7c:	d118      	bne.n	8006db0 <_printf_float+0x1b0>
 8006d7e:	2900      	cmp	r1, #0
 8006d80:	6863      	ldr	r3, [r4, #4]
 8006d82:	dd0b      	ble.n	8006d9c <_printf_float+0x19c>
 8006d84:	6121      	str	r1, [r4, #16]
 8006d86:	b913      	cbnz	r3, 8006d8e <_printf_float+0x18e>
 8006d88:	6822      	ldr	r2, [r4, #0]
 8006d8a:	07d0      	lsls	r0, r2, #31
 8006d8c:	d502      	bpl.n	8006d94 <_printf_float+0x194>
 8006d8e:	3301      	adds	r3, #1
 8006d90:	440b      	add	r3, r1
 8006d92:	6123      	str	r3, [r4, #16]
 8006d94:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006d96:	f04f 0900 	mov.w	r9, #0
 8006d9a:	e7db      	b.n	8006d54 <_printf_float+0x154>
 8006d9c:	b913      	cbnz	r3, 8006da4 <_printf_float+0x1a4>
 8006d9e:	6822      	ldr	r2, [r4, #0]
 8006da0:	07d2      	lsls	r2, r2, #31
 8006da2:	d501      	bpl.n	8006da8 <_printf_float+0x1a8>
 8006da4:	3302      	adds	r3, #2
 8006da6:	e7f4      	b.n	8006d92 <_printf_float+0x192>
 8006da8:	2301      	movs	r3, #1
 8006daa:	e7f2      	b.n	8006d92 <_printf_float+0x192>
 8006dac:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006db0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006db2:	4299      	cmp	r1, r3
 8006db4:	db05      	blt.n	8006dc2 <_printf_float+0x1c2>
 8006db6:	6823      	ldr	r3, [r4, #0]
 8006db8:	6121      	str	r1, [r4, #16]
 8006dba:	07d8      	lsls	r0, r3, #31
 8006dbc:	d5ea      	bpl.n	8006d94 <_printf_float+0x194>
 8006dbe:	1c4b      	adds	r3, r1, #1
 8006dc0:	e7e7      	b.n	8006d92 <_printf_float+0x192>
 8006dc2:	2900      	cmp	r1, #0
 8006dc4:	bfd4      	ite	le
 8006dc6:	f1c1 0202 	rsble	r2, r1, #2
 8006dca:	2201      	movgt	r2, #1
 8006dcc:	4413      	add	r3, r2
 8006dce:	e7e0      	b.n	8006d92 <_printf_float+0x192>
 8006dd0:	6823      	ldr	r3, [r4, #0]
 8006dd2:	055a      	lsls	r2, r3, #21
 8006dd4:	d407      	bmi.n	8006de6 <_printf_float+0x1e6>
 8006dd6:	6923      	ldr	r3, [r4, #16]
 8006dd8:	4642      	mov	r2, r8
 8006dda:	4631      	mov	r1, r6
 8006ddc:	4628      	mov	r0, r5
 8006dde:	47b8      	blx	r7
 8006de0:	3001      	adds	r0, #1
 8006de2:	d12b      	bne.n	8006e3c <_printf_float+0x23c>
 8006de4:	e767      	b.n	8006cb6 <_printf_float+0xb6>
 8006de6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006dea:	f240 80dd 	bls.w	8006fa8 <_printf_float+0x3a8>
 8006dee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006df2:	2200      	movs	r2, #0
 8006df4:	2300      	movs	r3, #0
 8006df6:	f7f9 fe6f 	bl	8000ad8 <__aeabi_dcmpeq>
 8006dfa:	2800      	cmp	r0, #0
 8006dfc:	d033      	beq.n	8006e66 <_printf_float+0x266>
 8006dfe:	4a37      	ldr	r2, [pc, #220]	@ (8006edc <_printf_float+0x2dc>)
 8006e00:	2301      	movs	r3, #1
 8006e02:	4631      	mov	r1, r6
 8006e04:	4628      	mov	r0, r5
 8006e06:	47b8      	blx	r7
 8006e08:	3001      	adds	r0, #1
 8006e0a:	f43f af54 	beq.w	8006cb6 <_printf_float+0xb6>
 8006e0e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006e12:	4543      	cmp	r3, r8
 8006e14:	db02      	blt.n	8006e1c <_printf_float+0x21c>
 8006e16:	6823      	ldr	r3, [r4, #0]
 8006e18:	07d8      	lsls	r0, r3, #31
 8006e1a:	d50f      	bpl.n	8006e3c <_printf_float+0x23c>
 8006e1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e20:	4631      	mov	r1, r6
 8006e22:	4628      	mov	r0, r5
 8006e24:	47b8      	blx	r7
 8006e26:	3001      	adds	r0, #1
 8006e28:	f43f af45 	beq.w	8006cb6 <_printf_float+0xb6>
 8006e2c:	f04f 0900 	mov.w	r9, #0
 8006e30:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e34:	f104 0a1a 	add.w	sl, r4, #26
 8006e38:	45c8      	cmp	r8, r9
 8006e3a:	dc09      	bgt.n	8006e50 <_printf_float+0x250>
 8006e3c:	6823      	ldr	r3, [r4, #0]
 8006e3e:	079b      	lsls	r3, r3, #30
 8006e40:	f100 8103 	bmi.w	800704a <_printf_float+0x44a>
 8006e44:	68e0      	ldr	r0, [r4, #12]
 8006e46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e48:	4298      	cmp	r0, r3
 8006e4a:	bfb8      	it	lt
 8006e4c:	4618      	movlt	r0, r3
 8006e4e:	e734      	b.n	8006cba <_printf_float+0xba>
 8006e50:	2301      	movs	r3, #1
 8006e52:	4652      	mov	r2, sl
 8006e54:	4631      	mov	r1, r6
 8006e56:	4628      	mov	r0, r5
 8006e58:	47b8      	blx	r7
 8006e5a:	3001      	adds	r0, #1
 8006e5c:	f43f af2b 	beq.w	8006cb6 <_printf_float+0xb6>
 8006e60:	f109 0901 	add.w	r9, r9, #1
 8006e64:	e7e8      	b.n	8006e38 <_printf_float+0x238>
 8006e66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	dc39      	bgt.n	8006ee0 <_printf_float+0x2e0>
 8006e6c:	4a1b      	ldr	r2, [pc, #108]	@ (8006edc <_printf_float+0x2dc>)
 8006e6e:	2301      	movs	r3, #1
 8006e70:	4631      	mov	r1, r6
 8006e72:	4628      	mov	r0, r5
 8006e74:	47b8      	blx	r7
 8006e76:	3001      	adds	r0, #1
 8006e78:	f43f af1d 	beq.w	8006cb6 <_printf_float+0xb6>
 8006e7c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006e80:	ea59 0303 	orrs.w	r3, r9, r3
 8006e84:	d102      	bne.n	8006e8c <_printf_float+0x28c>
 8006e86:	6823      	ldr	r3, [r4, #0]
 8006e88:	07d9      	lsls	r1, r3, #31
 8006e8a:	d5d7      	bpl.n	8006e3c <_printf_float+0x23c>
 8006e8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e90:	4631      	mov	r1, r6
 8006e92:	4628      	mov	r0, r5
 8006e94:	47b8      	blx	r7
 8006e96:	3001      	adds	r0, #1
 8006e98:	f43f af0d 	beq.w	8006cb6 <_printf_float+0xb6>
 8006e9c:	f04f 0a00 	mov.w	sl, #0
 8006ea0:	f104 0b1a 	add.w	fp, r4, #26
 8006ea4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ea6:	425b      	negs	r3, r3
 8006ea8:	4553      	cmp	r3, sl
 8006eaa:	dc01      	bgt.n	8006eb0 <_printf_float+0x2b0>
 8006eac:	464b      	mov	r3, r9
 8006eae:	e793      	b.n	8006dd8 <_printf_float+0x1d8>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	465a      	mov	r2, fp
 8006eb4:	4631      	mov	r1, r6
 8006eb6:	4628      	mov	r0, r5
 8006eb8:	47b8      	blx	r7
 8006eba:	3001      	adds	r0, #1
 8006ebc:	f43f aefb 	beq.w	8006cb6 <_printf_float+0xb6>
 8006ec0:	f10a 0a01 	add.w	sl, sl, #1
 8006ec4:	e7ee      	b.n	8006ea4 <_printf_float+0x2a4>
 8006ec6:	bf00      	nop
 8006ec8:	7fefffff 	.word	0x7fefffff
 8006ecc:	0800972c 	.word	0x0800972c
 8006ed0:	08009730 	.word	0x08009730
 8006ed4:	08009734 	.word	0x08009734
 8006ed8:	08009738 	.word	0x08009738
 8006edc:	0800973c 	.word	0x0800973c
 8006ee0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ee2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006ee6:	4553      	cmp	r3, sl
 8006ee8:	bfa8      	it	ge
 8006eea:	4653      	movge	r3, sl
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	4699      	mov	r9, r3
 8006ef0:	dc36      	bgt.n	8006f60 <_printf_float+0x360>
 8006ef2:	f04f 0b00 	mov.w	fp, #0
 8006ef6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006efa:	f104 021a 	add.w	r2, r4, #26
 8006efe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006f00:	9306      	str	r3, [sp, #24]
 8006f02:	eba3 0309 	sub.w	r3, r3, r9
 8006f06:	455b      	cmp	r3, fp
 8006f08:	dc31      	bgt.n	8006f6e <_printf_float+0x36e>
 8006f0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f0c:	459a      	cmp	sl, r3
 8006f0e:	dc3a      	bgt.n	8006f86 <_printf_float+0x386>
 8006f10:	6823      	ldr	r3, [r4, #0]
 8006f12:	07da      	lsls	r2, r3, #31
 8006f14:	d437      	bmi.n	8006f86 <_printf_float+0x386>
 8006f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f18:	ebaa 0903 	sub.w	r9, sl, r3
 8006f1c:	9b06      	ldr	r3, [sp, #24]
 8006f1e:	ebaa 0303 	sub.w	r3, sl, r3
 8006f22:	4599      	cmp	r9, r3
 8006f24:	bfa8      	it	ge
 8006f26:	4699      	movge	r9, r3
 8006f28:	f1b9 0f00 	cmp.w	r9, #0
 8006f2c:	dc33      	bgt.n	8006f96 <_printf_float+0x396>
 8006f2e:	f04f 0800 	mov.w	r8, #0
 8006f32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f36:	f104 0b1a 	add.w	fp, r4, #26
 8006f3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f3c:	ebaa 0303 	sub.w	r3, sl, r3
 8006f40:	eba3 0309 	sub.w	r3, r3, r9
 8006f44:	4543      	cmp	r3, r8
 8006f46:	f77f af79 	ble.w	8006e3c <_printf_float+0x23c>
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	465a      	mov	r2, fp
 8006f4e:	4631      	mov	r1, r6
 8006f50:	4628      	mov	r0, r5
 8006f52:	47b8      	blx	r7
 8006f54:	3001      	adds	r0, #1
 8006f56:	f43f aeae 	beq.w	8006cb6 <_printf_float+0xb6>
 8006f5a:	f108 0801 	add.w	r8, r8, #1
 8006f5e:	e7ec      	b.n	8006f3a <_printf_float+0x33a>
 8006f60:	4642      	mov	r2, r8
 8006f62:	4631      	mov	r1, r6
 8006f64:	4628      	mov	r0, r5
 8006f66:	47b8      	blx	r7
 8006f68:	3001      	adds	r0, #1
 8006f6a:	d1c2      	bne.n	8006ef2 <_printf_float+0x2f2>
 8006f6c:	e6a3      	b.n	8006cb6 <_printf_float+0xb6>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	4631      	mov	r1, r6
 8006f72:	4628      	mov	r0, r5
 8006f74:	9206      	str	r2, [sp, #24]
 8006f76:	47b8      	blx	r7
 8006f78:	3001      	adds	r0, #1
 8006f7a:	f43f ae9c 	beq.w	8006cb6 <_printf_float+0xb6>
 8006f7e:	9a06      	ldr	r2, [sp, #24]
 8006f80:	f10b 0b01 	add.w	fp, fp, #1
 8006f84:	e7bb      	b.n	8006efe <_printf_float+0x2fe>
 8006f86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f8a:	4631      	mov	r1, r6
 8006f8c:	4628      	mov	r0, r5
 8006f8e:	47b8      	blx	r7
 8006f90:	3001      	adds	r0, #1
 8006f92:	d1c0      	bne.n	8006f16 <_printf_float+0x316>
 8006f94:	e68f      	b.n	8006cb6 <_printf_float+0xb6>
 8006f96:	9a06      	ldr	r2, [sp, #24]
 8006f98:	464b      	mov	r3, r9
 8006f9a:	4442      	add	r2, r8
 8006f9c:	4631      	mov	r1, r6
 8006f9e:	4628      	mov	r0, r5
 8006fa0:	47b8      	blx	r7
 8006fa2:	3001      	adds	r0, #1
 8006fa4:	d1c3      	bne.n	8006f2e <_printf_float+0x32e>
 8006fa6:	e686      	b.n	8006cb6 <_printf_float+0xb6>
 8006fa8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006fac:	f1ba 0f01 	cmp.w	sl, #1
 8006fb0:	dc01      	bgt.n	8006fb6 <_printf_float+0x3b6>
 8006fb2:	07db      	lsls	r3, r3, #31
 8006fb4:	d536      	bpl.n	8007024 <_printf_float+0x424>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	4642      	mov	r2, r8
 8006fba:	4631      	mov	r1, r6
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	47b8      	blx	r7
 8006fc0:	3001      	adds	r0, #1
 8006fc2:	f43f ae78 	beq.w	8006cb6 <_printf_float+0xb6>
 8006fc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fca:	4631      	mov	r1, r6
 8006fcc:	4628      	mov	r0, r5
 8006fce:	47b8      	blx	r7
 8006fd0:	3001      	adds	r0, #1
 8006fd2:	f43f ae70 	beq.w	8006cb6 <_printf_float+0xb6>
 8006fd6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006fda:	2200      	movs	r2, #0
 8006fdc:	2300      	movs	r3, #0
 8006fde:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006fe2:	f7f9 fd79 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fe6:	b9c0      	cbnz	r0, 800701a <_printf_float+0x41a>
 8006fe8:	4653      	mov	r3, sl
 8006fea:	f108 0201 	add.w	r2, r8, #1
 8006fee:	4631      	mov	r1, r6
 8006ff0:	4628      	mov	r0, r5
 8006ff2:	47b8      	blx	r7
 8006ff4:	3001      	adds	r0, #1
 8006ff6:	d10c      	bne.n	8007012 <_printf_float+0x412>
 8006ff8:	e65d      	b.n	8006cb6 <_printf_float+0xb6>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	465a      	mov	r2, fp
 8006ffe:	4631      	mov	r1, r6
 8007000:	4628      	mov	r0, r5
 8007002:	47b8      	blx	r7
 8007004:	3001      	adds	r0, #1
 8007006:	f43f ae56 	beq.w	8006cb6 <_printf_float+0xb6>
 800700a:	f108 0801 	add.w	r8, r8, #1
 800700e:	45d0      	cmp	r8, sl
 8007010:	dbf3      	blt.n	8006ffa <_printf_float+0x3fa>
 8007012:	464b      	mov	r3, r9
 8007014:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007018:	e6df      	b.n	8006dda <_printf_float+0x1da>
 800701a:	f04f 0800 	mov.w	r8, #0
 800701e:	f104 0b1a 	add.w	fp, r4, #26
 8007022:	e7f4      	b.n	800700e <_printf_float+0x40e>
 8007024:	2301      	movs	r3, #1
 8007026:	4642      	mov	r2, r8
 8007028:	e7e1      	b.n	8006fee <_printf_float+0x3ee>
 800702a:	2301      	movs	r3, #1
 800702c:	464a      	mov	r2, r9
 800702e:	4631      	mov	r1, r6
 8007030:	4628      	mov	r0, r5
 8007032:	47b8      	blx	r7
 8007034:	3001      	adds	r0, #1
 8007036:	f43f ae3e 	beq.w	8006cb6 <_printf_float+0xb6>
 800703a:	f108 0801 	add.w	r8, r8, #1
 800703e:	68e3      	ldr	r3, [r4, #12]
 8007040:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007042:	1a5b      	subs	r3, r3, r1
 8007044:	4543      	cmp	r3, r8
 8007046:	dcf0      	bgt.n	800702a <_printf_float+0x42a>
 8007048:	e6fc      	b.n	8006e44 <_printf_float+0x244>
 800704a:	f04f 0800 	mov.w	r8, #0
 800704e:	f104 0919 	add.w	r9, r4, #25
 8007052:	e7f4      	b.n	800703e <_printf_float+0x43e>

08007054 <_printf_common>:
 8007054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007058:	4616      	mov	r6, r2
 800705a:	4698      	mov	r8, r3
 800705c:	688a      	ldr	r2, [r1, #8]
 800705e:	690b      	ldr	r3, [r1, #16]
 8007060:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007064:	4293      	cmp	r3, r2
 8007066:	bfb8      	it	lt
 8007068:	4613      	movlt	r3, r2
 800706a:	6033      	str	r3, [r6, #0]
 800706c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007070:	4607      	mov	r7, r0
 8007072:	460c      	mov	r4, r1
 8007074:	b10a      	cbz	r2, 800707a <_printf_common+0x26>
 8007076:	3301      	adds	r3, #1
 8007078:	6033      	str	r3, [r6, #0]
 800707a:	6823      	ldr	r3, [r4, #0]
 800707c:	0699      	lsls	r1, r3, #26
 800707e:	bf42      	ittt	mi
 8007080:	6833      	ldrmi	r3, [r6, #0]
 8007082:	3302      	addmi	r3, #2
 8007084:	6033      	strmi	r3, [r6, #0]
 8007086:	6825      	ldr	r5, [r4, #0]
 8007088:	f015 0506 	ands.w	r5, r5, #6
 800708c:	d106      	bne.n	800709c <_printf_common+0x48>
 800708e:	f104 0a19 	add.w	sl, r4, #25
 8007092:	68e3      	ldr	r3, [r4, #12]
 8007094:	6832      	ldr	r2, [r6, #0]
 8007096:	1a9b      	subs	r3, r3, r2
 8007098:	42ab      	cmp	r3, r5
 800709a:	dc26      	bgt.n	80070ea <_printf_common+0x96>
 800709c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80070a0:	6822      	ldr	r2, [r4, #0]
 80070a2:	3b00      	subs	r3, #0
 80070a4:	bf18      	it	ne
 80070a6:	2301      	movne	r3, #1
 80070a8:	0692      	lsls	r2, r2, #26
 80070aa:	d42b      	bmi.n	8007104 <_printf_common+0xb0>
 80070ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80070b0:	4641      	mov	r1, r8
 80070b2:	4638      	mov	r0, r7
 80070b4:	47c8      	blx	r9
 80070b6:	3001      	adds	r0, #1
 80070b8:	d01e      	beq.n	80070f8 <_printf_common+0xa4>
 80070ba:	6823      	ldr	r3, [r4, #0]
 80070bc:	6922      	ldr	r2, [r4, #16]
 80070be:	f003 0306 	and.w	r3, r3, #6
 80070c2:	2b04      	cmp	r3, #4
 80070c4:	bf02      	ittt	eq
 80070c6:	68e5      	ldreq	r5, [r4, #12]
 80070c8:	6833      	ldreq	r3, [r6, #0]
 80070ca:	1aed      	subeq	r5, r5, r3
 80070cc:	68a3      	ldr	r3, [r4, #8]
 80070ce:	bf0c      	ite	eq
 80070d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070d4:	2500      	movne	r5, #0
 80070d6:	4293      	cmp	r3, r2
 80070d8:	bfc4      	itt	gt
 80070da:	1a9b      	subgt	r3, r3, r2
 80070dc:	18ed      	addgt	r5, r5, r3
 80070de:	2600      	movs	r6, #0
 80070e0:	341a      	adds	r4, #26
 80070e2:	42b5      	cmp	r5, r6
 80070e4:	d11a      	bne.n	800711c <_printf_common+0xc8>
 80070e6:	2000      	movs	r0, #0
 80070e8:	e008      	b.n	80070fc <_printf_common+0xa8>
 80070ea:	2301      	movs	r3, #1
 80070ec:	4652      	mov	r2, sl
 80070ee:	4641      	mov	r1, r8
 80070f0:	4638      	mov	r0, r7
 80070f2:	47c8      	blx	r9
 80070f4:	3001      	adds	r0, #1
 80070f6:	d103      	bne.n	8007100 <_printf_common+0xac>
 80070f8:	f04f 30ff 	mov.w	r0, #4294967295
 80070fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007100:	3501      	adds	r5, #1
 8007102:	e7c6      	b.n	8007092 <_printf_common+0x3e>
 8007104:	18e1      	adds	r1, r4, r3
 8007106:	1c5a      	adds	r2, r3, #1
 8007108:	2030      	movs	r0, #48	@ 0x30
 800710a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800710e:	4422      	add	r2, r4
 8007110:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007114:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007118:	3302      	adds	r3, #2
 800711a:	e7c7      	b.n	80070ac <_printf_common+0x58>
 800711c:	2301      	movs	r3, #1
 800711e:	4622      	mov	r2, r4
 8007120:	4641      	mov	r1, r8
 8007122:	4638      	mov	r0, r7
 8007124:	47c8      	blx	r9
 8007126:	3001      	adds	r0, #1
 8007128:	d0e6      	beq.n	80070f8 <_printf_common+0xa4>
 800712a:	3601      	adds	r6, #1
 800712c:	e7d9      	b.n	80070e2 <_printf_common+0x8e>
	...

08007130 <_printf_i>:
 8007130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007134:	7e0f      	ldrb	r7, [r1, #24]
 8007136:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007138:	2f78      	cmp	r7, #120	@ 0x78
 800713a:	4691      	mov	r9, r2
 800713c:	4680      	mov	r8, r0
 800713e:	460c      	mov	r4, r1
 8007140:	469a      	mov	sl, r3
 8007142:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007146:	d807      	bhi.n	8007158 <_printf_i+0x28>
 8007148:	2f62      	cmp	r7, #98	@ 0x62
 800714a:	d80a      	bhi.n	8007162 <_printf_i+0x32>
 800714c:	2f00      	cmp	r7, #0
 800714e:	f000 80d2 	beq.w	80072f6 <_printf_i+0x1c6>
 8007152:	2f58      	cmp	r7, #88	@ 0x58
 8007154:	f000 80b9 	beq.w	80072ca <_printf_i+0x19a>
 8007158:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800715c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007160:	e03a      	b.n	80071d8 <_printf_i+0xa8>
 8007162:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007166:	2b15      	cmp	r3, #21
 8007168:	d8f6      	bhi.n	8007158 <_printf_i+0x28>
 800716a:	a101      	add	r1, pc, #4	@ (adr r1, 8007170 <_printf_i+0x40>)
 800716c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007170:	080071c9 	.word	0x080071c9
 8007174:	080071dd 	.word	0x080071dd
 8007178:	08007159 	.word	0x08007159
 800717c:	08007159 	.word	0x08007159
 8007180:	08007159 	.word	0x08007159
 8007184:	08007159 	.word	0x08007159
 8007188:	080071dd 	.word	0x080071dd
 800718c:	08007159 	.word	0x08007159
 8007190:	08007159 	.word	0x08007159
 8007194:	08007159 	.word	0x08007159
 8007198:	08007159 	.word	0x08007159
 800719c:	080072dd 	.word	0x080072dd
 80071a0:	08007207 	.word	0x08007207
 80071a4:	08007297 	.word	0x08007297
 80071a8:	08007159 	.word	0x08007159
 80071ac:	08007159 	.word	0x08007159
 80071b0:	080072ff 	.word	0x080072ff
 80071b4:	08007159 	.word	0x08007159
 80071b8:	08007207 	.word	0x08007207
 80071bc:	08007159 	.word	0x08007159
 80071c0:	08007159 	.word	0x08007159
 80071c4:	0800729f 	.word	0x0800729f
 80071c8:	6833      	ldr	r3, [r6, #0]
 80071ca:	1d1a      	adds	r2, r3, #4
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	6032      	str	r2, [r6, #0]
 80071d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80071d8:	2301      	movs	r3, #1
 80071da:	e09d      	b.n	8007318 <_printf_i+0x1e8>
 80071dc:	6833      	ldr	r3, [r6, #0]
 80071de:	6820      	ldr	r0, [r4, #0]
 80071e0:	1d19      	adds	r1, r3, #4
 80071e2:	6031      	str	r1, [r6, #0]
 80071e4:	0606      	lsls	r6, r0, #24
 80071e6:	d501      	bpl.n	80071ec <_printf_i+0xbc>
 80071e8:	681d      	ldr	r5, [r3, #0]
 80071ea:	e003      	b.n	80071f4 <_printf_i+0xc4>
 80071ec:	0645      	lsls	r5, r0, #25
 80071ee:	d5fb      	bpl.n	80071e8 <_printf_i+0xb8>
 80071f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071f4:	2d00      	cmp	r5, #0
 80071f6:	da03      	bge.n	8007200 <_printf_i+0xd0>
 80071f8:	232d      	movs	r3, #45	@ 0x2d
 80071fa:	426d      	negs	r5, r5
 80071fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007200:	4859      	ldr	r0, [pc, #356]	@ (8007368 <_printf_i+0x238>)
 8007202:	230a      	movs	r3, #10
 8007204:	e011      	b.n	800722a <_printf_i+0xfa>
 8007206:	6821      	ldr	r1, [r4, #0]
 8007208:	6833      	ldr	r3, [r6, #0]
 800720a:	0608      	lsls	r0, r1, #24
 800720c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007210:	d402      	bmi.n	8007218 <_printf_i+0xe8>
 8007212:	0649      	lsls	r1, r1, #25
 8007214:	bf48      	it	mi
 8007216:	b2ad      	uxthmi	r5, r5
 8007218:	2f6f      	cmp	r7, #111	@ 0x6f
 800721a:	4853      	ldr	r0, [pc, #332]	@ (8007368 <_printf_i+0x238>)
 800721c:	6033      	str	r3, [r6, #0]
 800721e:	bf14      	ite	ne
 8007220:	230a      	movne	r3, #10
 8007222:	2308      	moveq	r3, #8
 8007224:	2100      	movs	r1, #0
 8007226:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800722a:	6866      	ldr	r6, [r4, #4]
 800722c:	60a6      	str	r6, [r4, #8]
 800722e:	2e00      	cmp	r6, #0
 8007230:	bfa2      	ittt	ge
 8007232:	6821      	ldrge	r1, [r4, #0]
 8007234:	f021 0104 	bicge.w	r1, r1, #4
 8007238:	6021      	strge	r1, [r4, #0]
 800723a:	b90d      	cbnz	r5, 8007240 <_printf_i+0x110>
 800723c:	2e00      	cmp	r6, #0
 800723e:	d04b      	beq.n	80072d8 <_printf_i+0x1a8>
 8007240:	4616      	mov	r6, r2
 8007242:	fbb5 f1f3 	udiv	r1, r5, r3
 8007246:	fb03 5711 	mls	r7, r3, r1, r5
 800724a:	5dc7      	ldrb	r7, [r0, r7]
 800724c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007250:	462f      	mov	r7, r5
 8007252:	42bb      	cmp	r3, r7
 8007254:	460d      	mov	r5, r1
 8007256:	d9f4      	bls.n	8007242 <_printf_i+0x112>
 8007258:	2b08      	cmp	r3, #8
 800725a:	d10b      	bne.n	8007274 <_printf_i+0x144>
 800725c:	6823      	ldr	r3, [r4, #0]
 800725e:	07df      	lsls	r7, r3, #31
 8007260:	d508      	bpl.n	8007274 <_printf_i+0x144>
 8007262:	6923      	ldr	r3, [r4, #16]
 8007264:	6861      	ldr	r1, [r4, #4]
 8007266:	4299      	cmp	r1, r3
 8007268:	bfde      	ittt	le
 800726a:	2330      	movle	r3, #48	@ 0x30
 800726c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007270:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007274:	1b92      	subs	r2, r2, r6
 8007276:	6122      	str	r2, [r4, #16]
 8007278:	f8cd a000 	str.w	sl, [sp]
 800727c:	464b      	mov	r3, r9
 800727e:	aa03      	add	r2, sp, #12
 8007280:	4621      	mov	r1, r4
 8007282:	4640      	mov	r0, r8
 8007284:	f7ff fee6 	bl	8007054 <_printf_common>
 8007288:	3001      	adds	r0, #1
 800728a:	d14a      	bne.n	8007322 <_printf_i+0x1f2>
 800728c:	f04f 30ff 	mov.w	r0, #4294967295
 8007290:	b004      	add	sp, #16
 8007292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007296:	6823      	ldr	r3, [r4, #0]
 8007298:	f043 0320 	orr.w	r3, r3, #32
 800729c:	6023      	str	r3, [r4, #0]
 800729e:	4833      	ldr	r0, [pc, #204]	@ (800736c <_printf_i+0x23c>)
 80072a0:	2778      	movs	r7, #120	@ 0x78
 80072a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80072a6:	6823      	ldr	r3, [r4, #0]
 80072a8:	6831      	ldr	r1, [r6, #0]
 80072aa:	061f      	lsls	r7, r3, #24
 80072ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80072b0:	d402      	bmi.n	80072b8 <_printf_i+0x188>
 80072b2:	065f      	lsls	r7, r3, #25
 80072b4:	bf48      	it	mi
 80072b6:	b2ad      	uxthmi	r5, r5
 80072b8:	6031      	str	r1, [r6, #0]
 80072ba:	07d9      	lsls	r1, r3, #31
 80072bc:	bf44      	itt	mi
 80072be:	f043 0320 	orrmi.w	r3, r3, #32
 80072c2:	6023      	strmi	r3, [r4, #0]
 80072c4:	b11d      	cbz	r5, 80072ce <_printf_i+0x19e>
 80072c6:	2310      	movs	r3, #16
 80072c8:	e7ac      	b.n	8007224 <_printf_i+0xf4>
 80072ca:	4827      	ldr	r0, [pc, #156]	@ (8007368 <_printf_i+0x238>)
 80072cc:	e7e9      	b.n	80072a2 <_printf_i+0x172>
 80072ce:	6823      	ldr	r3, [r4, #0]
 80072d0:	f023 0320 	bic.w	r3, r3, #32
 80072d4:	6023      	str	r3, [r4, #0]
 80072d6:	e7f6      	b.n	80072c6 <_printf_i+0x196>
 80072d8:	4616      	mov	r6, r2
 80072da:	e7bd      	b.n	8007258 <_printf_i+0x128>
 80072dc:	6833      	ldr	r3, [r6, #0]
 80072de:	6825      	ldr	r5, [r4, #0]
 80072e0:	6961      	ldr	r1, [r4, #20]
 80072e2:	1d18      	adds	r0, r3, #4
 80072e4:	6030      	str	r0, [r6, #0]
 80072e6:	062e      	lsls	r6, r5, #24
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	d501      	bpl.n	80072f0 <_printf_i+0x1c0>
 80072ec:	6019      	str	r1, [r3, #0]
 80072ee:	e002      	b.n	80072f6 <_printf_i+0x1c6>
 80072f0:	0668      	lsls	r0, r5, #25
 80072f2:	d5fb      	bpl.n	80072ec <_printf_i+0x1bc>
 80072f4:	8019      	strh	r1, [r3, #0]
 80072f6:	2300      	movs	r3, #0
 80072f8:	6123      	str	r3, [r4, #16]
 80072fa:	4616      	mov	r6, r2
 80072fc:	e7bc      	b.n	8007278 <_printf_i+0x148>
 80072fe:	6833      	ldr	r3, [r6, #0]
 8007300:	1d1a      	adds	r2, r3, #4
 8007302:	6032      	str	r2, [r6, #0]
 8007304:	681e      	ldr	r6, [r3, #0]
 8007306:	6862      	ldr	r2, [r4, #4]
 8007308:	2100      	movs	r1, #0
 800730a:	4630      	mov	r0, r6
 800730c:	f7f8 ff68 	bl	80001e0 <memchr>
 8007310:	b108      	cbz	r0, 8007316 <_printf_i+0x1e6>
 8007312:	1b80      	subs	r0, r0, r6
 8007314:	6060      	str	r0, [r4, #4]
 8007316:	6863      	ldr	r3, [r4, #4]
 8007318:	6123      	str	r3, [r4, #16]
 800731a:	2300      	movs	r3, #0
 800731c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007320:	e7aa      	b.n	8007278 <_printf_i+0x148>
 8007322:	6923      	ldr	r3, [r4, #16]
 8007324:	4632      	mov	r2, r6
 8007326:	4649      	mov	r1, r9
 8007328:	4640      	mov	r0, r8
 800732a:	47d0      	blx	sl
 800732c:	3001      	adds	r0, #1
 800732e:	d0ad      	beq.n	800728c <_printf_i+0x15c>
 8007330:	6823      	ldr	r3, [r4, #0]
 8007332:	079b      	lsls	r3, r3, #30
 8007334:	d413      	bmi.n	800735e <_printf_i+0x22e>
 8007336:	68e0      	ldr	r0, [r4, #12]
 8007338:	9b03      	ldr	r3, [sp, #12]
 800733a:	4298      	cmp	r0, r3
 800733c:	bfb8      	it	lt
 800733e:	4618      	movlt	r0, r3
 8007340:	e7a6      	b.n	8007290 <_printf_i+0x160>
 8007342:	2301      	movs	r3, #1
 8007344:	4632      	mov	r2, r6
 8007346:	4649      	mov	r1, r9
 8007348:	4640      	mov	r0, r8
 800734a:	47d0      	blx	sl
 800734c:	3001      	adds	r0, #1
 800734e:	d09d      	beq.n	800728c <_printf_i+0x15c>
 8007350:	3501      	adds	r5, #1
 8007352:	68e3      	ldr	r3, [r4, #12]
 8007354:	9903      	ldr	r1, [sp, #12]
 8007356:	1a5b      	subs	r3, r3, r1
 8007358:	42ab      	cmp	r3, r5
 800735a:	dcf2      	bgt.n	8007342 <_printf_i+0x212>
 800735c:	e7eb      	b.n	8007336 <_printf_i+0x206>
 800735e:	2500      	movs	r5, #0
 8007360:	f104 0619 	add.w	r6, r4, #25
 8007364:	e7f5      	b.n	8007352 <_printf_i+0x222>
 8007366:	bf00      	nop
 8007368:	0800973e 	.word	0x0800973e
 800736c:	0800974f 	.word	0x0800974f

08007370 <std>:
 8007370:	2300      	movs	r3, #0
 8007372:	b510      	push	{r4, lr}
 8007374:	4604      	mov	r4, r0
 8007376:	e9c0 3300 	strd	r3, r3, [r0]
 800737a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800737e:	6083      	str	r3, [r0, #8]
 8007380:	8181      	strh	r1, [r0, #12]
 8007382:	6643      	str	r3, [r0, #100]	@ 0x64
 8007384:	81c2      	strh	r2, [r0, #14]
 8007386:	6183      	str	r3, [r0, #24]
 8007388:	4619      	mov	r1, r3
 800738a:	2208      	movs	r2, #8
 800738c:	305c      	adds	r0, #92	@ 0x5c
 800738e:	f000 f928 	bl	80075e2 <memset>
 8007392:	4b0d      	ldr	r3, [pc, #52]	@ (80073c8 <std+0x58>)
 8007394:	6263      	str	r3, [r4, #36]	@ 0x24
 8007396:	4b0d      	ldr	r3, [pc, #52]	@ (80073cc <std+0x5c>)
 8007398:	62a3      	str	r3, [r4, #40]	@ 0x28
 800739a:	4b0d      	ldr	r3, [pc, #52]	@ (80073d0 <std+0x60>)
 800739c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800739e:	4b0d      	ldr	r3, [pc, #52]	@ (80073d4 <std+0x64>)
 80073a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80073a2:	4b0d      	ldr	r3, [pc, #52]	@ (80073d8 <std+0x68>)
 80073a4:	6224      	str	r4, [r4, #32]
 80073a6:	429c      	cmp	r4, r3
 80073a8:	d006      	beq.n	80073b8 <std+0x48>
 80073aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80073ae:	4294      	cmp	r4, r2
 80073b0:	d002      	beq.n	80073b8 <std+0x48>
 80073b2:	33d0      	adds	r3, #208	@ 0xd0
 80073b4:	429c      	cmp	r4, r3
 80073b6:	d105      	bne.n	80073c4 <std+0x54>
 80073b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80073bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073c0:	f000 b9e0 	b.w	8007784 <__retarget_lock_init_recursive>
 80073c4:	bd10      	pop	{r4, pc}
 80073c6:	bf00      	nop
 80073c8:	0800755d 	.word	0x0800755d
 80073cc:	0800757f 	.word	0x0800757f
 80073d0:	080075b7 	.word	0x080075b7
 80073d4:	080075db 	.word	0x080075db
 80073d8:	200003e0 	.word	0x200003e0

080073dc <stdio_exit_handler>:
 80073dc:	4a02      	ldr	r2, [pc, #8]	@ (80073e8 <stdio_exit_handler+0xc>)
 80073de:	4903      	ldr	r1, [pc, #12]	@ (80073ec <stdio_exit_handler+0x10>)
 80073e0:	4803      	ldr	r0, [pc, #12]	@ (80073f0 <stdio_exit_handler+0x14>)
 80073e2:	f000 b869 	b.w	80074b8 <_fwalk_sglue>
 80073e6:	bf00      	nop
 80073e8:	2000000c 	.word	0x2000000c
 80073ec:	08008f91 	.word	0x08008f91
 80073f0:	2000001c 	.word	0x2000001c

080073f4 <cleanup_stdio>:
 80073f4:	6841      	ldr	r1, [r0, #4]
 80073f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007428 <cleanup_stdio+0x34>)
 80073f8:	4299      	cmp	r1, r3
 80073fa:	b510      	push	{r4, lr}
 80073fc:	4604      	mov	r4, r0
 80073fe:	d001      	beq.n	8007404 <cleanup_stdio+0x10>
 8007400:	f001 fdc6 	bl	8008f90 <_fflush_r>
 8007404:	68a1      	ldr	r1, [r4, #8]
 8007406:	4b09      	ldr	r3, [pc, #36]	@ (800742c <cleanup_stdio+0x38>)
 8007408:	4299      	cmp	r1, r3
 800740a:	d002      	beq.n	8007412 <cleanup_stdio+0x1e>
 800740c:	4620      	mov	r0, r4
 800740e:	f001 fdbf 	bl	8008f90 <_fflush_r>
 8007412:	68e1      	ldr	r1, [r4, #12]
 8007414:	4b06      	ldr	r3, [pc, #24]	@ (8007430 <cleanup_stdio+0x3c>)
 8007416:	4299      	cmp	r1, r3
 8007418:	d004      	beq.n	8007424 <cleanup_stdio+0x30>
 800741a:	4620      	mov	r0, r4
 800741c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007420:	f001 bdb6 	b.w	8008f90 <_fflush_r>
 8007424:	bd10      	pop	{r4, pc}
 8007426:	bf00      	nop
 8007428:	200003e0 	.word	0x200003e0
 800742c:	20000448 	.word	0x20000448
 8007430:	200004b0 	.word	0x200004b0

08007434 <global_stdio_init.part.0>:
 8007434:	b510      	push	{r4, lr}
 8007436:	4b0b      	ldr	r3, [pc, #44]	@ (8007464 <global_stdio_init.part.0+0x30>)
 8007438:	4c0b      	ldr	r4, [pc, #44]	@ (8007468 <global_stdio_init.part.0+0x34>)
 800743a:	4a0c      	ldr	r2, [pc, #48]	@ (800746c <global_stdio_init.part.0+0x38>)
 800743c:	601a      	str	r2, [r3, #0]
 800743e:	4620      	mov	r0, r4
 8007440:	2200      	movs	r2, #0
 8007442:	2104      	movs	r1, #4
 8007444:	f7ff ff94 	bl	8007370 <std>
 8007448:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800744c:	2201      	movs	r2, #1
 800744e:	2109      	movs	r1, #9
 8007450:	f7ff ff8e 	bl	8007370 <std>
 8007454:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007458:	2202      	movs	r2, #2
 800745a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800745e:	2112      	movs	r1, #18
 8007460:	f7ff bf86 	b.w	8007370 <std>
 8007464:	20000518 	.word	0x20000518
 8007468:	200003e0 	.word	0x200003e0
 800746c:	080073dd 	.word	0x080073dd

08007470 <__sfp_lock_acquire>:
 8007470:	4801      	ldr	r0, [pc, #4]	@ (8007478 <__sfp_lock_acquire+0x8>)
 8007472:	f000 b988 	b.w	8007786 <__retarget_lock_acquire_recursive>
 8007476:	bf00      	nop
 8007478:	20000521 	.word	0x20000521

0800747c <__sfp_lock_release>:
 800747c:	4801      	ldr	r0, [pc, #4]	@ (8007484 <__sfp_lock_release+0x8>)
 800747e:	f000 b983 	b.w	8007788 <__retarget_lock_release_recursive>
 8007482:	bf00      	nop
 8007484:	20000521 	.word	0x20000521

08007488 <__sinit>:
 8007488:	b510      	push	{r4, lr}
 800748a:	4604      	mov	r4, r0
 800748c:	f7ff fff0 	bl	8007470 <__sfp_lock_acquire>
 8007490:	6a23      	ldr	r3, [r4, #32]
 8007492:	b11b      	cbz	r3, 800749c <__sinit+0x14>
 8007494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007498:	f7ff bff0 	b.w	800747c <__sfp_lock_release>
 800749c:	4b04      	ldr	r3, [pc, #16]	@ (80074b0 <__sinit+0x28>)
 800749e:	6223      	str	r3, [r4, #32]
 80074a0:	4b04      	ldr	r3, [pc, #16]	@ (80074b4 <__sinit+0x2c>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1f5      	bne.n	8007494 <__sinit+0xc>
 80074a8:	f7ff ffc4 	bl	8007434 <global_stdio_init.part.0>
 80074ac:	e7f2      	b.n	8007494 <__sinit+0xc>
 80074ae:	bf00      	nop
 80074b0:	080073f5 	.word	0x080073f5
 80074b4:	20000518 	.word	0x20000518

080074b8 <_fwalk_sglue>:
 80074b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074bc:	4607      	mov	r7, r0
 80074be:	4688      	mov	r8, r1
 80074c0:	4614      	mov	r4, r2
 80074c2:	2600      	movs	r6, #0
 80074c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80074c8:	f1b9 0901 	subs.w	r9, r9, #1
 80074cc:	d505      	bpl.n	80074da <_fwalk_sglue+0x22>
 80074ce:	6824      	ldr	r4, [r4, #0]
 80074d0:	2c00      	cmp	r4, #0
 80074d2:	d1f7      	bne.n	80074c4 <_fwalk_sglue+0xc>
 80074d4:	4630      	mov	r0, r6
 80074d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074da:	89ab      	ldrh	r3, [r5, #12]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d907      	bls.n	80074f0 <_fwalk_sglue+0x38>
 80074e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074e4:	3301      	adds	r3, #1
 80074e6:	d003      	beq.n	80074f0 <_fwalk_sglue+0x38>
 80074e8:	4629      	mov	r1, r5
 80074ea:	4638      	mov	r0, r7
 80074ec:	47c0      	blx	r8
 80074ee:	4306      	orrs	r6, r0
 80074f0:	3568      	adds	r5, #104	@ 0x68
 80074f2:	e7e9      	b.n	80074c8 <_fwalk_sglue+0x10>

080074f4 <sniprintf>:
 80074f4:	b40c      	push	{r2, r3}
 80074f6:	b530      	push	{r4, r5, lr}
 80074f8:	4b17      	ldr	r3, [pc, #92]	@ (8007558 <sniprintf+0x64>)
 80074fa:	1e0c      	subs	r4, r1, #0
 80074fc:	681d      	ldr	r5, [r3, #0]
 80074fe:	b09d      	sub	sp, #116	@ 0x74
 8007500:	da08      	bge.n	8007514 <sniprintf+0x20>
 8007502:	238b      	movs	r3, #139	@ 0x8b
 8007504:	602b      	str	r3, [r5, #0]
 8007506:	f04f 30ff 	mov.w	r0, #4294967295
 800750a:	b01d      	add	sp, #116	@ 0x74
 800750c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007510:	b002      	add	sp, #8
 8007512:	4770      	bx	lr
 8007514:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007518:	f8ad 3014 	strh.w	r3, [sp, #20]
 800751c:	bf14      	ite	ne
 800751e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007522:	4623      	moveq	r3, r4
 8007524:	9304      	str	r3, [sp, #16]
 8007526:	9307      	str	r3, [sp, #28]
 8007528:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800752c:	9002      	str	r0, [sp, #8]
 800752e:	9006      	str	r0, [sp, #24]
 8007530:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007534:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007536:	ab21      	add	r3, sp, #132	@ 0x84
 8007538:	a902      	add	r1, sp, #8
 800753a:	4628      	mov	r0, r5
 800753c:	9301      	str	r3, [sp, #4]
 800753e:	f001 fba7 	bl	8008c90 <_svfiprintf_r>
 8007542:	1c43      	adds	r3, r0, #1
 8007544:	bfbc      	itt	lt
 8007546:	238b      	movlt	r3, #139	@ 0x8b
 8007548:	602b      	strlt	r3, [r5, #0]
 800754a:	2c00      	cmp	r4, #0
 800754c:	d0dd      	beq.n	800750a <sniprintf+0x16>
 800754e:	9b02      	ldr	r3, [sp, #8]
 8007550:	2200      	movs	r2, #0
 8007552:	701a      	strb	r2, [r3, #0]
 8007554:	e7d9      	b.n	800750a <sniprintf+0x16>
 8007556:	bf00      	nop
 8007558:	20000018 	.word	0x20000018

0800755c <__sread>:
 800755c:	b510      	push	{r4, lr}
 800755e:	460c      	mov	r4, r1
 8007560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007564:	f000 f89c 	bl	80076a0 <_read_r>
 8007568:	2800      	cmp	r0, #0
 800756a:	bfab      	itete	ge
 800756c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800756e:	89a3      	ldrhlt	r3, [r4, #12]
 8007570:	181b      	addge	r3, r3, r0
 8007572:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007576:	bfac      	ite	ge
 8007578:	6563      	strge	r3, [r4, #84]	@ 0x54
 800757a:	81a3      	strhlt	r3, [r4, #12]
 800757c:	bd10      	pop	{r4, pc}

0800757e <__swrite>:
 800757e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007582:	461f      	mov	r7, r3
 8007584:	898b      	ldrh	r3, [r1, #12]
 8007586:	05db      	lsls	r3, r3, #23
 8007588:	4605      	mov	r5, r0
 800758a:	460c      	mov	r4, r1
 800758c:	4616      	mov	r6, r2
 800758e:	d505      	bpl.n	800759c <__swrite+0x1e>
 8007590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007594:	2302      	movs	r3, #2
 8007596:	2200      	movs	r2, #0
 8007598:	f000 f870 	bl	800767c <_lseek_r>
 800759c:	89a3      	ldrh	r3, [r4, #12]
 800759e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075a2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80075a6:	81a3      	strh	r3, [r4, #12]
 80075a8:	4632      	mov	r2, r6
 80075aa:	463b      	mov	r3, r7
 80075ac:	4628      	mov	r0, r5
 80075ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075b2:	f000 b8ab 	b.w	800770c <_write_r>

080075b6 <__sseek>:
 80075b6:	b510      	push	{r4, lr}
 80075b8:	460c      	mov	r4, r1
 80075ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075be:	f000 f85d 	bl	800767c <_lseek_r>
 80075c2:	1c43      	adds	r3, r0, #1
 80075c4:	89a3      	ldrh	r3, [r4, #12]
 80075c6:	bf15      	itete	ne
 80075c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80075ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80075ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80075d2:	81a3      	strheq	r3, [r4, #12]
 80075d4:	bf18      	it	ne
 80075d6:	81a3      	strhne	r3, [r4, #12]
 80075d8:	bd10      	pop	{r4, pc}

080075da <__sclose>:
 80075da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075de:	f000 b83d 	b.w	800765c <_close_r>

080075e2 <memset>:
 80075e2:	4402      	add	r2, r0
 80075e4:	4603      	mov	r3, r0
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d100      	bne.n	80075ec <memset+0xa>
 80075ea:	4770      	bx	lr
 80075ec:	f803 1b01 	strb.w	r1, [r3], #1
 80075f0:	e7f9      	b.n	80075e6 <memset+0x4>

080075f2 <_raise_r>:
 80075f2:	291f      	cmp	r1, #31
 80075f4:	b538      	push	{r3, r4, r5, lr}
 80075f6:	4605      	mov	r5, r0
 80075f8:	460c      	mov	r4, r1
 80075fa:	d904      	bls.n	8007606 <_raise_r+0x14>
 80075fc:	2316      	movs	r3, #22
 80075fe:	6003      	str	r3, [r0, #0]
 8007600:	f04f 30ff 	mov.w	r0, #4294967295
 8007604:	bd38      	pop	{r3, r4, r5, pc}
 8007606:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007608:	b112      	cbz	r2, 8007610 <_raise_r+0x1e>
 800760a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800760e:	b94b      	cbnz	r3, 8007624 <_raise_r+0x32>
 8007610:	4628      	mov	r0, r5
 8007612:	f000 f869 	bl	80076e8 <_getpid_r>
 8007616:	4622      	mov	r2, r4
 8007618:	4601      	mov	r1, r0
 800761a:	4628      	mov	r0, r5
 800761c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007620:	f000 b850 	b.w	80076c4 <_kill_r>
 8007624:	2b01      	cmp	r3, #1
 8007626:	d00a      	beq.n	800763e <_raise_r+0x4c>
 8007628:	1c59      	adds	r1, r3, #1
 800762a:	d103      	bne.n	8007634 <_raise_r+0x42>
 800762c:	2316      	movs	r3, #22
 800762e:	6003      	str	r3, [r0, #0]
 8007630:	2001      	movs	r0, #1
 8007632:	e7e7      	b.n	8007604 <_raise_r+0x12>
 8007634:	2100      	movs	r1, #0
 8007636:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800763a:	4620      	mov	r0, r4
 800763c:	4798      	blx	r3
 800763e:	2000      	movs	r0, #0
 8007640:	e7e0      	b.n	8007604 <_raise_r+0x12>
	...

08007644 <raise>:
 8007644:	4b02      	ldr	r3, [pc, #8]	@ (8007650 <raise+0xc>)
 8007646:	4601      	mov	r1, r0
 8007648:	6818      	ldr	r0, [r3, #0]
 800764a:	f7ff bfd2 	b.w	80075f2 <_raise_r>
 800764e:	bf00      	nop
 8007650:	20000018 	.word	0x20000018

08007654 <_localeconv_r>:
 8007654:	4800      	ldr	r0, [pc, #0]	@ (8007658 <_localeconv_r+0x4>)
 8007656:	4770      	bx	lr
 8007658:	20000158 	.word	0x20000158

0800765c <_close_r>:
 800765c:	b538      	push	{r3, r4, r5, lr}
 800765e:	4d06      	ldr	r5, [pc, #24]	@ (8007678 <_close_r+0x1c>)
 8007660:	2300      	movs	r3, #0
 8007662:	4604      	mov	r4, r0
 8007664:	4608      	mov	r0, r1
 8007666:	602b      	str	r3, [r5, #0]
 8007668:	f7fb fc6c 	bl	8002f44 <_close>
 800766c:	1c43      	adds	r3, r0, #1
 800766e:	d102      	bne.n	8007676 <_close_r+0x1a>
 8007670:	682b      	ldr	r3, [r5, #0]
 8007672:	b103      	cbz	r3, 8007676 <_close_r+0x1a>
 8007674:	6023      	str	r3, [r4, #0]
 8007676:	bd38      	pop	{r3, r4, r5, pc}
 8007678:	2000051c 	.word	0x2000051c

0800767c <_lseek_r>:
 800767c:	b538      	push	{r3, r4, r5, lr}
 800767e:	4d07      	ldr	r5, [pc, #28]	@ (800769c <_lseek_r+0x20>)
 8007680:	4604      	mov	r4, r0
 8007682:	4608      	mov	r0, r1
 8007684:	4611      	mov	r1, r2
 8007686:	2200      	movs	r2, #0
 8007688:	602a      	str	r2, [r5, #0]
 800768a:	461a      	mov	r2, r3
 800768c:	f7fb fc81 	bl	8002f92 <_lseek>
 8007690:	1c43      	adds	r3, r0, #1
 8007692:	d102      	bne.n	800769a <_lseek_r+0x1e>
 8007694:	682b      	ldr	r3, [r5, #0]
 8007696:	b103      	cbz	r3, 800769a <_lseek_r+0x1e>
 8007698:	6023      	str	r3, [r4, #0]
 800769a:	bd38      	pop	{r3, r4, r5, pc}
 800769c:	2000051c 	.word	0x2000051c

080076a0 <_read_r>:
 80076a0:	b538      	push	{r3, r4, r5, lr}
 80076a2:	4d07      	ldr	r5, [pc, #28]	@ (80076c0 <_read_r+0x20>)
 80076a4:	4604      	mov	r4, r0
 80076a6:	4608      	mov	r0, r1
 80076a8:	4611      	mov	r1, r2
 80076aa:	2200      	movs	r2, #0
 80076ac:	602a      	str	r2, [r5, #0]
 80076ae:	461a      	mov	r2, r3
 80076b0:	f7fb fc0f 	bl	8002ed2 <_read>
 80076b4:	1c43      	adds	r3, r0, #1
 80076b6:	d102      	bne.n	80076be <_read_r+0x1e>
 80076b8:	682b      	ldr	r3, [r5, #0]
 80076ba:	b103      	cbz	r3, 80076be <_read_r+0x1e>
 80076bc:	6023      	str	r3, [r4, #0]
 80076be:	bd38      	pop	{r3, r4, r5, pc}
 80076c0:	2000051c 	.word	0x2000051c

080076c4 <_kill_r>:
 80076c4:	b538      	push	{r3, r4, r5, lr}
 80076c6:	4d07      	ldr	r5, [pc, #28]	@ (80076e4 <_kill_r+0x20>)
 80076c8:	2300      	movs	r3, #0
 80076ca:	4604      	mov	r4, r0
 80076cc:	4608      	mov	r0, r1
 80076ce:	4611      	mov	r1, r2
 80076d0:	602b      	str	r3, [r5, #0]
 80076d2:	f7fb fbe3 	bl	8002e9c <_kill>
 80076d6:	1c43      	adds	r3, r0, #1
 80076d8:	d102      	bne.n	80076e0 <_kill_r+0x1c>
 80076da:	682b      	ldr	r3, [r5, #0]
 80076dc:	b103      	cbz	r3, 80076e0 <_kill_r+0x1c>
 80076de:	6023      	str	r3, [r4, #0]
 80076e0:	bd38      	pop	{r3, r4, r5, pc}
 80076e2:	bf00      	nop
 80076e4:	2000051c 	.word	0x2000051c

080076e8 <_getpid_r>:
 80076e8:	f7fb bbd0 	b.w	8002e8c <_getpid>

080076ec <_sbrk_r>:
 80076ec:	b538      	push	{r3, r4, r5, lr}
 80076ee:	4d06      	ldr	r5, [pc, #24]	@ (8007708 <_sbrk_r+0x1c>)
 80076f0:	2300      	movs	r3, #0
 80076f2:	4604      	mov	r4, r0
 80076f4:	4608      	mov	r0, r1
 80076f6:	602b      	str	r3, [r5, #0]
 80076f8:	f7fb fc58 	bl	8002fac <_sbrk>
 80076fc:	1c43      	adds	r3, r0, #1
 80076fe:	d102      	bne.n	8007706 <_sbrk_r+0x1a>
 8007700:	682b      	ldr	r3, [r5, #0]
 8007702:	b103      	cbz	r3, 8007706 <_sbrk_r+0x1a>
 8007704:	6023      	str	r3, [r4, #0]
 8007706:	bd38      	pop	{r3, r4, r5, pc}
 8007708:	2000051c 	.word	0x2000051c

0800770c <_write_r>:
 800770c:	b538      	push	{r3, r4, r5, lr}
 800770e:	4d07      	ldr	r5, [pc, #28]	@ (800772c <_write_r+0x20>)
 8007710:	4604      	mov	r4, r0
 8007712:	4608      	mov	r0, r1
 8007714:	4611      	mov	r1, r2
 8007716:	2200      	movs	r2, #0
 8007718:	602a      	str	r2, [r5, #0]
 800771a:	461a      	mov	r2, r3
 800771c:	f7fb fbf6 	bl	8002f0c <_write>
 8007720:	1c43      	adds	r3, r0, #1
 8007722:	d102      	bne.n	800772a <_write_r+0x1e>
 8007724:	682b      	ldr	r3, [r5, #0]
 8007726:	b103      	cbz	r3, 800772a <_write_r+0x1e>
 8007728:	6023      	str	r3, [r4, #0]
 800772a:	bd38      	pop	{r3, r4, r5, pc}
 800772c:	2000051c 	.word	0x2000051c

08007730 <__errno>:
 8007730:	4b01      	ldr	r3, [pc, #4]	@ (8007738 <__errno+0x8>)
 8007732:	6818      	ldr	r0, [r3, #0]
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	20000018 	.word	0x20000018

0800773c <__libc_init_array>:
 800773c:	b570      	push	{r4, r5, r6, lr}
 800773e:	4d0d      	ldr	r5, [pc, #52]	@ (8007774 <__libc_init_array+0x38>)
 8007740:	4c0d      	ldr	r4, [pc, #52]	@ (8007778 <__libc_init_array+0x3c>)
 8007742:	1b64      	subs	r4, r4, r5
 8007744:	10a4      	asrs	r4, r4, #2
 8007746:	2600      	movs	r6, #0
 8007748:	42a6      	cmp	r6, r4
 800774a:	d109      	bne.n	8007760 <__libc_init_array+0x24>
 800774c:	4d0b      	ldr	r5, [pc, #44]	@ (800777c <__libc_init_array+0x40>)
 800774e:	4c0c      	ldr	r4, [pc, #48]	@ (8007780 <__libc_init_array+0x44>)
 8007750:	f001 ff54 	bl	80095fc <_init>
 8007754:	1b64      	subs	r4, r4, r5
 8007756:	10a4      	asrs	r4, r4, #2
 8007758:	2600      	movs	r6, #0
 800775a:	42a6      	cmp	r6, r4
 800775c:	d105      	bne.n	800776a <__libc_init_array+0x2e>
 800775e:	bd70      	pop	{r4, r5, r6, pc}
 8007760:	f855 3b04 	ldr.w	r3, [r5], #4
 8007764:	4798      	blx	r3
 8007766:	3601      	adds	r6, #1
 8007768:	e7ee      	b.n	8007748 <__libc_init_array+0xc>
 800776a:	f855 3b04 	ldr.w	r3, [r5], #4
 800776e:	4798      	blx	r3
 8007770:	3601      	adds	r6, #1
 8007772:	e7f2      	b.n	800775a <__libc_init_array+0x1e>
 8007774:	08009aa8 	.word	0x08009aa8
 8007778:	08009aa8 	.word	0x08009aa8
 800777c:	08009aa8 	.word	0x08009aa8
 8007780:	08009aac 	.word	0x08009aac

08007784 <__retarget_lock_init_recursive>:
 8007784:	4770      	bx	lr

08007786 <__retarget_lock_acquire_recursive>:
 8007786:	4770      	bx	lr

08007788 <__retarget_lock_release_recursive>:
 8007788:	4770      	bx	lr

0800778a <memcpy>:
 800778a:	440a      	add	r2, r1
 800778c:	4291      	cmp	r1, r2
 800778e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007792:	d100      	bne.n	8007796 <memcpy+0xc>
 8007794:	4770      	bx	lr
 8007796:	b510      	push	{r4, lr}
 8007798:	f811 4b01 	ldrb.w	r4, [r1], #1
 800779c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077a0:	4291      	cmp	r1, r2
 80077a2:	d1f9      	bne.n	8007798 <memcpy+0xe>
 80077a4:	bd10      	pop	{r4, pc}

080077a6 <quorem>:
 80077a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077aa:	6903      	ldr	r3, [r0, #16]
 80077ac:	690c      	ldr	r4, [r1, #16]
 80077ae:	42a3      	cmp	r3, r4
 80077b0:	4607      	mov	r7, r0
 80077b2:	db7e      	blt.n	80078b2 <quorem+0x10c>
 80077b4:	3c01      	subs	r4, #1
 80077b6:	f101 0814 	add.w	r8, r1, #20
 80077ba:	00a3      	lsls	r3, r4, #2
 80077bc:	f100 0514 	add.w	r5, r0, #20
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077c6:	9301      	str	r3, [sp, #4]
 80077c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80077cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077d0:	3301      	adds	r3, #1
 80077d2:	429a      	cmp	r2, r3
 80077d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80077d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80077dc:	d32e      	bcc.n	800783c <quorem+0x96>
 80077de:	f04f 0a00 	mov.w	sl, #0
 80077e2:	46c4      	mov	ip, r8
 80077e4:	46ae      	mov	lr, r5
 80077e6:	46d3      	mov	fp, sl
 80077e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80077ec:	b298      	uxth	r0, r3
 80077ee:	fb06 a000 	mla	r0, r6, r0, sl
 80077f2:	0c02      	lsrs	r2, r0, #16
 80077f4:	0c1b      	lsrs	r3, r3, #16
 80077f6:	fb06 2303 	mla	r3, r6, r3, r2
 80077fa:	f8de 2000 	ldr.w	r2, [lr]
 80077fe:	b280      	uxth	r0, r0
 8007800:	b292      	uxth	r2, r2
 8007802:	1a12      	subs	r2, r2, r0
 8007804:	445a      	add	r2, fp
 8007806:	f8de 0000 	ldr.w	r0, [lr]
 800780a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800780e:	b29b      	uxth	r3, r3
 8007810:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007814:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007818:	b292      	uxth	r2, r2
 800781a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800781e:	45e1      	cmp	r9, ip
 8007820:	f84e 2b04 	str.w	r2, [lr], #4
 8007824:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007828:	d2de      	bcs.n	80077e8 <quorem+0x42>
 800782a:	9b00      	ldr	r3, [sp, #0]
 800782c:	58eb      	ldr	r3, [r5, r3]
 800782e:	b92b      	cbnz	r3, 800783c <quorem+0x96>
 8007830:	9b01      	ldr	r3, [sp, #4]
 8007832:	3b04      	subs	r3, #4
 8007834:	429d      	cmp	r5, r3
 8007836:	461a      	mov	r2, r3
 8007838:	d32f      	bcc.n	800789a <quorem+0xf4>
 800783a:	613c      	str	r4, [r7, #16]
 800783c:	4638      	mov	r0, r7
 800783e:	f001 f8c3 	bl	80089c8 <__mcmp>
 8007842:	2800      	cmp	r0, #0
 8007844:	db25      	blt.n	8007892 <quorem+0xec>
 8007846:	4629      	mov	r1, r5
 8007848:	2000      	movs	r0, #0
 800784a:	f858 2b04 	ldr.w	r2, [r8], #4
 800784e:	f8d1 c000 	ldr.w	ip, [r1]
 8007852:	fa1f fe82 	uxth.w	lr, r2
 8007856:	fa1f f38c 	uxth.w	r3, ip
 800785a:	eba3 030e 	sub.w	r3, r3, lr
 800785e:	4403      	add	r3, r0
 8007860:	0c12      	lsrs	r2, r2, #16
 8007862:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007866:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800786a:	b29b      	uxth	r3, r3
 800786c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007870:	45c1      	cmp	r9, r8
 8007872:	f841 3b04 	str.w	r3, [r1], #4
 8007876:	ea4f 4022 	mov.w	r0, r2, asr #16
 800787a:	d2e6      	bcs.n	800784a <quorem+0xa4>
 800787c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007880:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007884:	b922      	cbnz	r2, 8007890 <quorem+0xea>
 8007886:	3b04      	subs	r3, #4
 8007888:	429d      	cmp	r5, r3
 800788a:	461a      	mov	r2, r3
 800788c:	d30b      	bcc.n	80078a6 <quorem+0x100>
 800788e:	613c      	str	r4, [r7, #16]
 8007890:	3601      	adds	r6, #1
 8007892:	4630      	mov	r0, r6
 8007894:	b003      	add	sp, #12
 8007896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800789a:	6812      	ldr	r2, [r2, #0]
 800789c:	3b04      	subs	r3, #4
 800789e:	2a00      	cmp	r2, #0
 80078a0:	d1cb      	bne.n	800783a <quorem+0x94>
 80078a2:	3c01      	subs	r4, #1
 80078a4:	e7c6      	b.n	8007834 <quorem+0x8e>
 80078a6:	6812      	ldr	r2, [r2, #0]
 80078a8:	3b04      	subs	r3, #4
 80078aa:	2a00      	cmp	r2, #0
 80078ac:	d1ef      	bne.n	800788e <quorem+0xe8>
 80078ae:	3c01      	subs	r4, #1
 80078b0:	e7ea      	b.n	8007888 <quorem+0xe2>
 80078b2:	2000      	movs	r0, #0
 80078b4:	e7ee      	b.n	8007894 <quorem+0xee>
	...

080078b8 <_dtoa_r>:
 80078b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078bc:	69c7      	ldr	r7, [r0, #28]
 80078be:	b099      	sub	sp, #100	@ 0x64
 80078c0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80078c4:	ec55 4b10 	vmov	r4, r5, d0
 80078c8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80078ca:	9109      	str	r1, [sp, #36]	@ 0x24
 80078cc:	4683      	mov	fp, r0
 80078ce:	920e      	str	r2, [sp, #56]	@ 0x38
 80078d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80078d2:	b97f      	cbnz	r7, 80078f4 <_dtoa_r+0x3c>
 80078d4:	2010      	movs	r0, #16
 80078d6:	f7ff f835 	bl	8006944 <malloc>
 80078da:	4602      	mov	r2, r0
 80078dc:	f8cb 001c 	str.w	r0, [fp, #28]
 80078e0:	b920      	cbnz	r0, 80078ec <_dtoa_r+0x34>
 80078e2:	4ba7      	ldr	r3, [pc, #668]	@ (8007b80 <_dtoa_r+0x2c8>)
 80078e4:	21ef      	movs	r1, #239	@ 0xef
 80078e6:	48a7      	ldr	r0, [pc, #668]	@ (8007b84 <_dtoa_r+0x2cc>)
 80078e8:	f001 fb94 	bl	8009014 <__assert_func>
 80078ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80078f0:	6007      	str	r7, [r0, #0]
 80078f2:	60c7      	str	r7, [r0, #12]
 80078f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80078f8:	6819      	ldr	r1, [r3, #0]
 80078fa:	b159      	cbz	r1, 8007914 <_dtoa_r+0x5c>
 80078fc:	685a      	ldr	r2, [r3, #4]
 80078fe:	604a      	str	r2, [r1, #4]
 8007900:	2301      	movs	r3, #1
 8007902:	4093      	lsls	r3, r2
 8007904:	608b      	str	r3, [r1, #8]
 8007906:	4658      	mov	r0, fp
 8007908:	f000 fe24 	bl	8008554 <_Bfree>
 800790c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007910:	2200      	movs	r2, #0
 8007912:	601a      	str	r2, [r3, #0]
 8007914:	1e2b      	subs	r3, r5, #0
 8007916:	bfb9      	ittee	lt
 8007918:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800791c:	9303      	strlt	r3, [sp, #12]
 800791e:	2300      	movge	r3, #0
 8007920:	6033      	strge	r3, [r6, #0]
 8007922:	9f03      	ldr	r7, [sp, #12]
 8007924:	4b98      	ldr	r3, [pc, #608]	@ (8007b88 <_dtoa_r+0x2d0>)
 8007926:	bfbc      	itt	lt
 8007928:	2201      	movlt	r2, #1
 800792a:	6032      	strlt	r2, [r6, #0]
 800792c:	43bb      	bics	r3, r7
 800792e:	d112      	bne.n	8007956 <_dtoa_r+0x9e>
 8007930:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007932:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007936:	6013      	str	r3, [r2, #0]
 8007938:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800793c:	4323      	orrs	r3, r4
 800793e:	f000 854d 	beq.w	80083dc <_dtoa_r+0xb24>
 8007942:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007944:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007b9c <_dtoa_r+0x2e4>
 8007948:	2b00      	cmp	r3, #0
 800794a:	f000 854f 	beq.w	80083ec <_dtoa_r+0xb34>
 800794e:	f10a 0303 	add.w	r3, sl, #3
 8007952:	f000 bd49 	b.w	80083e8 <_dtoa_r+0xb30>
 8007956:	ed9d 7b02 	vldr	d7, [sp, #8]
 800795a:	2200      	movs	r2, #0
 800795c:	ec51 0b17 	vmov	r0, r1, d7
 8007960:	2300      	movs	r3, #0
 8007962:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007966:	f7f9 f8b7 	bl	8000ad8 <__aeabi_dcmpeq>
 800796a:	4680      	mov	r8, r0
 800796c:	b158      	cbz	r0, 8007986 <_dtoa_r+0xce>
 800796e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007970:	2301      	movs	r3, #1
 8007972:	6013      	str	r3, [r2, #0]
 8007974:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007976:	b113      	cbz	r3, 800797e <_dtoa_r+0xc6>
 8007978:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800797a:	4b84      	ldr	r3, [pc, #528]	@ (8007b8c <_dtoa_r+0x2d4>)
 800797c:	6013      	str	r3, [r2, #0]
 800797e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007ba0 <_dtoa_r+0x2e8>
 8007982:	f000 bd33 	b.w	80083ec <_dtoa_r+0xb34>
 8007986:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800798a:	aa16      	add	r2, sp, #88	@ 0x58
 800798c:	a917      	add	r1, sp, #92	@ 0x5c
 800798e:	4658      	mov	r0, fp
 8007990:	f001 f8ca 	bl	8008b28 <__d2b>
 8007994:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007998:	4681      	mov	r9, r0
 800799a:	2e00      	cmp	r6, #0
 800799c:	d077      	beq.n	8007a8e <_dtoa_r+0x1d6>
 800799e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80079a0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80079a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80079b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80079b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80079b8:	4619      	mov	r1, r3
 80079ba:	2200      	movs	r2, #0
 80079bc:	4b74      	ldr	r3, [pc, #464]	@ (8007b90 <_dtoa_r+0x2d8>)
 80079be:	f7f8 fc6b 	bl	8000298 <__aeabi_dsub>
 80079c2:	a369      	add	r3, pc, #420	@ (adr r3, 8007b68 <_dtoa_r+0x2b0>)
 80079c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079c8:	f7f8 fe1e 	bl	8000608 <__aeabi_dmul>
 80079cc:	a368      	add	r3, pc, #416	@ (adr r3, 8007b70 <_dtoa_r+0x2b8>)
 80079ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d2:	f7f8 fc63 	bl	800029c <__adddf3>
 80079d6:	4604      	mov	r4, r0
 80079d8:	4630      	mov	r0, r6
 80079da:	460d      	mov	r5, r1
 80079dc:	f7f8 fdaa 	bl	8000534 <__aeabi_i2d>
 80079e0:	a365      	add	r3, pc, #404	@ (adr r3, 8007b78 <_dtoa_r+0x2c0>)
 80079e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e6:	f7f8 fe0f 	bl	8000608 <__aeabi_dmul>
 80079ea:	4602      	mov	r2, r0
 80079ec:	460b      	mov	r3, r1
 80079ee:	4620      	mov	r0, r4
 80079f0:	4629      	mov	r1, r5
 80079f2:	f7f8 fc53 	bl	800029c <__adddf3>
 80079f6:	4604      	mov	r4, r0
 80079f8:	460d      	mov	r5, r1
 80079fa:	f7f9 f8b5 	bl	8000b68 <__aeabi_d2iz>
 80079fe:	2200      	movs	r2, #0
 8007a00:	4607      	mov	r7, r0
 8007a02:	2300      	movs	r3, #0
 8007a04:	4620      	mov	r0, r4
 8007a06:	4629      	mov	r1, r5
 8007a08:	f7f9 f870 	bl	8000aec <__aeabi_dcmplt>
 8007a0c:	b140      	cbz	r0, 8007a20 <_dtoa_r+0x168>
 8007a0e:	4638      	mov	r0, r7
 8007a10:	f7f8 fd90 	bl	8000534 <__aeabi_i2d>
 8007a14:	4622      	mov	r2, r4
 8007a16:	462b      	mov	r3, r5
 8007a18:	f7f9 f85e 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a1c:	b900      	cbnz	r0, 8007a20 <_dtoa_r+0x168>
 8007a1e:	3f01      	subs	r7, #1
 8007a20:	2f16      	cmp	r7, #22
 8007a22:	d851      	bhi.n	8007ac8 <_dtoa_r+0x210>
 8007a24:	4b5b      	ldr	r3, [pc, #364]	@ (8007b94 <_dtoa_r+0x2dc>)
 8007a26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a32:	f7f9 f85b 	bl	8000aec <__aeabi_dcmplt>
 8007a36:	2800      	cmp	r0, #0
 8007a38:	d048      	beq.n	8007acc <_dtoa_r+0x214>
 8007a3a:	3f01      	subs	r7, #1
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007a40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007a42:	1b9b      	subs	r3, r3, r6
 8007a44:	1e5a      	subs	r2, r3, #1
 8007a46:	bf44      	itt	mi
 8007a48:	f1c3 0801 	rsbmi	r8, r3, #1
 8007a4c:	2300      	movmi	r3, #0
 8007a4e:	9208      	str	r2, [sp, #32]
 8007a50:	bf54      	ite	pl
 8007a52:	f04f 0800 	movpl.w	r8, #0
 8007a56:	9308      	strmi	r3, [sp, #32]
 8007a58:	2f00      	cmp	r7, #0
 8007a5a:	db39      	blt.n	8007ad0 <_dtoa_r+0x218>
 8007a5c:	9b08      	ldr	r3, [sp, #32]
 8007a5e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007a60:	443b      	add	r3, r7
 8007a62:	9308      	str	r3, [sp, #32]
 8007a64:	2300      	movs	r3, #0
 8007a66:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a6a:	2b09      	cmp	r3, #9
 8007a6c:	d864      	bhi.n	8007b38 <_dtoa_r+0x280>
 8007a6e:	2b05      	cmp	r3, #5
 8007a70:	bfc4      	itt	gt
 8007a72:	3b04      	subgt	r3, #4
 8007a74:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a78:	f1a3 0302 	sub.w	r3, r3, #2
 8007a7c:	bfcc      	ite	gt
 8007a7e:	2400      	movgt	r4, #0
 8007a80:	2401      	movle	r4, #1
 8007a82:	2b03      	cmp	r3, #3
 8007a84:	d863      	bhi.n	8007b4e <_dtoa_r+0x296>
 8007a86:	e8df f003 	tbb	[pc, r3]
 8007a8a:	372a      	.short	0x372a
 8007a8c:	5535      	.short	0x5535
 8007a8e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007a92:	441e      	add	r6, r3
 8007a94:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007a98:	2b20      	cmp	r3, #32
 8007a9a:	bfc1      	itttt	gt
 8007a9c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007aa0:	409f      	lslgt	r7, r3
 8007aa2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007aa6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007aaa:	bfd6      	itet	le
 8007aac:	f1c3 0320 	rsble	r3, r3, #32
 8007ab0:	ea47 0003 	orrgt.w	r0, r7, r3
 8007ab4:	fa04 f003 	lslle.w	r0, r4, r3
 8007ab8:	f7f8 fd2c 	bl	8000514 <__aeabi_ui2d>
 8007abc:	2201      	movs	r2, #1
 8007abe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007ac2:	3e01      	subs	r6, #1
 8007ac4:	9214      	str	r2, [sp, #80]	@ 0x50
 8007ac6:	e777      	b.n	80079b8 <_dtoa_r+0x100>
 8007ac8:	2301      	movs	r3, #1
 8007aca:	e7b8      	b.n	8007a3e <_dtoa_r+0x186>
 8007acc:	9012      	str	r0, [sp, #72]	@ 0x48
 8007ace:	e7b7      	b.n	8007a40 <_dtoa_r+0x188>
 8007ad0:	427b      	negs	r3, r7
 8007ad2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	eba8 0807 	sub.w	r8, r8, r7
 8007ada:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007adc:	e7c4      	b.n	8007a68 <_dtoa_r+0x1b0>
 8007ade:	2300      	movs	r3, #0
 8007ae0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ae2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	dc35      	bgt.n	8007b54 <_dtoa_r+0x29c>
 8007ae8:	2301      	movs	r3, #1
 8007aea:	9300      	str	r3, [sp, #0]
 8007aec:	9307      	str	r3, [sp, #28]
 8007aee:	461a      	mov	r2, r3
 8007af0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007af2:	e00b      	b.n	8007b0c <_dtoa_r+0x254>
 8007af4:	2301      	movs	r3, #1
 8007af6:	e7f3      	b.n	8007ae0 <_dtoa_r+0x228>
 8007af8:	2300      	movs	r3, #0
 8007afa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007afc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007afe:	18fb      	adds	r3, r7, r3
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	3301      	adds	r3, #1
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	9307      	str	r3, [sp, #28]
 8007b08:	bfb8      	it	lt
 8007b0a:	2301      	movlt	r3, #1
 8007b0c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007b10:	2100      	movs	r1, #0
 8007b12:	2204      	movs	r2, #4
 8007b14:	f102 0514 	add.w	r5, r2, #20
 8007b18:	429d      	cmp	r5, r3
 8007b1a:	d91f      	bls.n	8007b5c <_dtoa_r+0x2a4>
 8007b1c:	6041      	str	r1, [r0, #4]
 8007b1e:	4658      	mov	r0, fp
 8007b20:	f000 fcd8 	bl	80084d4 <_Balloc>
 8007b24:	4682      	mov	sl, r0
 8007b26:	2800      	cmp	r0, #0
 8007b28:	d13c      	bne.n	8007ba4 <_dtoa_r+0x2ec>
 8007b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8007b98 <_dtoa_r+0x2e0>)
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007b32:	e6d8      	b.n	80078e6 <_dtoa_r+0x2e>
 8007b34:	2301      	movs	r3, #1
 8007b36:	e7e0      	b.n	8007afa <_dtoa_r+0x242>
 8007b38:	2401      	movs	r4, #1
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b3e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007b40:	f04f 33ff 	mov.w	r3, #4294967295
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	9307      	str	r3, [sp, #28]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	2312      	movs	r3, #18
 8007b4c:	e7d0      	b.n	8007af0 <_dtoa_r+0x238>
 8007b4e:	2301      	movs	r3, #1
 8007b50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b52:	e7f5      	b.n	8007b40 <_dtoa_r+0x288>
 8007b54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b56:	9300      	str	r3, [sp, #0]
 8007b58:	9307      	str	r3, [sp, #28]
 8007b5a:	e7d7      	b.n	8007b0c <_dtoa_r+0x254>
 8007b5c:	3101      	adds	r1, #1
 8007b5e:	0052      	lsls	r2, r2, #1
 8007b60:	e7d8      	b.n	8007b14 <_dtoa_r+0x25c>
 8007b62:	bf00      	nop
 8007b64:	f3af 8000 	nop.w
 8007b68:	636f4361 	.word	0x636f4361
 8007b6c:	3fd287a7 	.word	0x3fd287a7
 8007b70:	8b60c8b3 	.word	0x8b60c8b3
 8007b74:	3fc68a28 	.word	0x3fc68a28
 8007b78:	509f79fb 	.word	0x509f79fb
 8007b7c:	3fd34413 	.word	0x3fd34413
 8007b80:	0800976d 	.word	0x0800976d
 8007b84:	08009784 	.word	0x08009784
 8007b88:	7ff00000 	.word	0x7ff00000
 8007b8c:	0800973d 	.word	0x0800973d
 8007b90:	3ff80000 	.word	0x3ff80000
 8007b94:	08009880 	.word	0x08009880
 8007b98:	080097dc 	.word	0x080097dc
 8007b9c:	08009769 	.word	0x08009769
 8007ba0:	0800973c 	.word	0x0800973c
 8007ba4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ba8:	6018      	str	r0, [r3, #0]
 8007baa:	9b07      	ldr	r3, [sp, #28]
 8007bac:	2b0e      	cmp	r3, #14
 8007bae:	f200 80a4 	bhi.w	8007cfa <_dtoa_r+0x442>
 8007bb2:	2c00      	cmp	r4, #0
 8007bb4:	f000 80a1 	beq.w	8007cfa <_dtoa_r+0x442>
 8007bb8:	2f00      	cmp	r7, #0
 8007bba:	dd33      	ble.n	8007c24 <_dtoa_r+0x36c>
 8007bbc:	4bad      	ldr	r3, [pc, #692]	@ (8007e74 <_dtoa_r+0x5bc>)
 8007bbe:	f007 020f 	and.w	r2, r7, #15
 8007bc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bc6:	ed93 7b00 	vldr	d7, [r3]
 8007bca:	05f8      	lsls	r0, r7, #23
 8007bcc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007bd0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007bd4:	d516      	bpl.n	8007c04 <_dtoa_r+0x34c>
 8007bd6:	4ba8      	ldr	r3, [pc, #672]	@ (8007e78 <_dtoa_r+0x5c0>)
 8007bd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bdc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007be0:	f7f8 fe3c 	bl	800085c <__aeabi_ddiv>
 8007be4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007be8:	f004 040f 	and.w	r4, r4, #15
 8007bec:	2603      	movs	r6, #3
 8007bee:	4da2      	ldr	r5, [pc, #648]	@ (8007e78 <_dtoa_r+0x5c0>)
 8007bf0:	b954      	cbnz	r4, 8007c08 <_dtoa_r+0x350>
 8007bf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bfa:	f7f8 fe2f 	bl	800085c <__aeabi_ddiv>
 8007bfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c02:	e028      	b.n	8007c56 <_dtoa_r+0x39e>
 8007c04:	2602      	movs	r6, #2
 8007c06:	e7f2      	b.n	8007bee <_dtoa_r+0x336>
 8007c08:	07e1      	lsls	r1, r4, #31
 8007c0a:	d508      	bpl.n	8007c1e <_dtoa_r+0x366>
 8007c0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c14:	f7f8 fcf8 	bl	8000608 <__aeabi_dmul>
 8007c18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c1c:	3601      	adds	r6, #1
 8007c1e:	1064      	asrs	r4, r4, #1
 8007c20:	3508      	adds	r5, #8
 8007c22:	e7e5      	b.n	8007bf0 <_dtoa_r+0x338>
 8007c24:	f000 80d2 	beq.w	8007dcc <_dtoa_r+0x514>
 8007c28:	427c      	negs	r4, r7
 8007c2a:	4b92      	ldr	r3, [pc, #584]	@ (8007e74 <_dtoa_r+0x5bc>)
 8007c2c:	4d92      	ldr	r5, [pc, #584]	@ (8007e78 <_dtoa_r+0x5c0>)
 8007c2e:	f004 020f 	and.w	r2, r4, #15
 8007c32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c3e:	f7f8 fce3 	bl	8000608 <__aeabi_dmul>
 8007c42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c46:	1124      	asrs	r4, r4, #4
 8007c48:	2300      	movs	r3, #0
 8007c4a:	2602      	movs	r6, #2
 8007c4c:	2c00      	cmp	r4, #0
 8007c4e:	f040 80b2 	bne.w	8007db6 <_dtoa_r+0x4fe>
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1d3      	bne.n	8007bfe <_dtoa_r+0x346>
 8007c56:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007c58:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f000 80b7 	beq.w	8007dd0 <_dtoa_r+0x518>
 8007c62:	4b86      	ldr	r3, [pc, #536]	@ (8007e7c <_dtoa_r+0x5c4>)
 8007c64:	2200      	movs	r2, #0
 8007c66:	4620      	mov	r0, r4
 8007c68:	4629      	mov	r1, r5
 8007c6a:	f7f8 ff3f 	bl	8000aec <__aeabi_dcmplt>
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	f000 80ae 	beq.w	8007dd0 <_dtoa_r+0x518>
 8007c74:	9b07      	ldr	r3, [sp, #28]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f000 80aa 	beq.w	8007dd0 <_dtoa_r+0x518>
 8007c7c:	9b00      	ldr	r3, [sp, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	dd37      	ble.n	8007cf2 <_dtoa_r+0x43a>
 8007c82:	1e7b      	subs	r3, r7, #1
 8007c84:	9304      	str	r3, [sp, #16]
 8007c86:	4620      	mov	r0, r4
 8007c88:	4b7d      	ldr	r3, [pc, #500]	@ (8007e80 <_dtoa_r+0x5c8>)
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	4629      	mov	r1, r5
 8007c8e:	f7f8 fcbb 	bl	8000608 <__aeabi_dmul>
 8007c92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c96:	9c00      	ldr	r4, [sp, #0]
 8007c98:	3601      	adds	r6, #1
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	f7f8 fc4a 	bl	8000534 <__aeabi_i2d>
 8007ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ca4:	f7f8 fcb0 	bl	8000608 <__aeabi_dmul>
 8007ca8:	4b76      	ldr	r3, [pc, #472]	@ (8007e84 <_dtoa_r+0x5cc>)
 8007caa:	2200      	movs	r2, #0
 8007cac:	f7f8 faf6 	bl	800029c <__adddf3>
 8007cb0:	4605      	mov	r5, r0
 8007cb2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007cb6:	2c00      	cmp	r4, #0
 8007cb8:	f040 808d 	bne.w	8007dd6 <_dtoa_r+0x51e>
 8007cbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cc0:	4b71      	ldr	r3, [pc, #452]	@ (8007e88 <_dtoa_r+0x5d0>)
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f7f8 fae8 	bl	8000298 <__aeabi_dsub>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	460b      	mov	r3, r1
 8007ccc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007cd0:	462a      	mov	r2, r5
 8007cd2:	4633      	mov	r3, r6
 8007cd4:	f7f8 ff28 	bl	8000b28 <__aeabi_dcmpgt>
 8007cd8:	2800      	cmp	r0, #0
 8007cda:	f040 828b 	bne.w	80081f4 <_dtoa_r+0x93c>
 8007cde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ce2:	462a      	mov	r2, r5
 8007ce4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007ce8:	f7f8 ff00 	bl	8000aec <__aeabi_dcmplt>
 8007cec:	2800      	cmp	r0, #0
 8007cee:	f040 8128 	bne.w	8007f42 <_dtoa_r+0x68a>
 8007cf2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007cf6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007cfa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	f2c0 815a 	blt.w	8007fb6 <_dtoa_r+0x6fe>
 8007d02:	2f0e      	cmp	r7, #14
 8007d04:	f300 8157 	bgt.w	8007fb6 <_dtoa_r+0x6fe>
 8007d08:	4b5a      	ldr	r3, [pc, #360]	@ (8007e74 <_dtoa_r+0x5bc>)
 8007d0a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d0e:	ed93 7b00 	vldr	d7, [r3]
 8007d12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	ed8d 7b00 	vstr	d7, [sp]
 8007d1a:	da03      	bge.n	8007d24 <_dtoa_r+0x46c>
 8007d1c:	9b07      	ldr	r3, [sp, #28]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	f340 8101 	ble.w	8007f26 <_dtoa_r+0x66e>
 8007d24:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007d28:	4656      	mov	r6, sl
 8007d2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d2e:	4620      	mov	r0, r4
 8007d30:	4629      	mov	r1, r5
 8007d32:	f7f8 fd93 	bl	800085c <__aeabi_ddiv>
 8007d36:	f7f8 ff17 	bl	8000b68 <__aeabi_d2iz>
 8007d3a:	4680      	mov	r8, r0
 8007d3c:	f7f8 fbfa 	bl	8000534 <__aeabi_i2d>
 8007d40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d44:	f7f8 fc60 	bl	8000608 <__aeabi_dmul>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	4629      	mov	r1, r5
 8007d50:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007d54:	f7f8 faa0 	bl	8000298 <__aeabi_dsub>
 8007d58:	f806 4b01 	strb.w	r4, [r6], #1
 8007d5c:	9d07      	ldr	r5, [sp, #28]
 8007d5e:	eba6 040a 	sub.w	r4, r6, sl
 8007d62:	42a5      	cmp	r5, r4
 8007d64:	4602      	mov	r2, r0
 8007d66:	460b      	mov	r3, r1
 8007d68:	f040 8117 	bne.w	8007f9a <_dtoa_r+0x6e2>
 8007d6c:	f7f8 fa96 	bl	800029c <__adddf3>
 8007d70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d74:	4604      	mov	r4, r0
 8007d76:	460d      	mov	r5, r1
 8007d78:	f7f8 fed6 	bl	8000b28 <__aeabi_dcmpgt>
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	f040 80f9 	bne.w	8007f74 <_dtoa_r+0x6bc>
 8007d82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d86:	4620      	mov	r0, r4
 8007d88:	4629      	mov	r1, r5
 8007d8a:	f7f8 fea5 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d8e:	b118      	cbz	r0, 8007d98 <_dtoa_r+0x4e0>
 8007d90:	f018 0f01 	tst.w	r8, #1
 8007d94:	f040 80ee 	bne.w	8007f74 <_dtoa_r+0x6bc>
 8007d98:	4649      	mov	r1, r9
 8007d9a:	4658      	mov	r0, fp
 8007d9c:	f000 fbda 	bl	8008554 <_Bfree>
 8007da0:	2300      	movs	r3, #0
 8007da2:	7033      	strb	r3, [r6, #0]
 8007da4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007da6:	3701      	adds	r7, #1
 8007da8:	601f      	str	r7, [r3, #0]
 8007daa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f000 831d 	beq.w	80083ec <_dtoa_r+0xb34>
 8007db2:	601e      	str	r6, [r3, #0]
 8007db4:	e31a      	b.n	80083ec <_dtoa_r+0xb34>
 8007db6:	07e2      	lsls	r2, r4, #31
 8007db8:	d505      	bpl.n	8007dc6 <_dtoa_r+0x50e>
 8007dba:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007dbe:	f7f8 fc23 	bl	8000608 <__aeabi_dmul>
 8007dc2:	3601      	adds	r6, #1
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	1064      	asrs	r4, r4, #1
 8007dc8:	3508      	adds	r5, #8
 8007dca:	e73f      	b.n	8007c4c <_dtoa_r+0x394>
 8007dcc:	2602      	movs	r6, #2
 8007dce:	e742      	b.n	8007c56 <_dtoa_r+0x39e>
 8007dd0:	9c07      	ldr	r4, [sp, #28]
 8007dd2:	9704      	str	r7, [sp, #16]
 8007dd4:	e761      	b.n	8007c9a <_dtoa_r+0x3e2>
 8007dd6:	4b27      	ldr	r3, [pc, #156]	@ (8007e74 <_dtoa_r+0x5bc>)
 8007dd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007dda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007dde:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007de2:	4454      	add	r4, sl
 8007de4:	2900      	cmp	r1, #0
 8007de6:	d053      	beq.n	8007e90 <_dtoa_r+0x5d8>
 8007de8:	4928      	ldr	r1, [pc, #160]	@ (8007e8c <_dtoa_r+0x5d4>)
 8007dea:	2000      	movs	r0, #0
 8007dec:	f7f8 fd36 	bl	800085c <__aeabi_ddiv>
 8007df0:	4633      	mov	r3, r6
 8007df2:	462a      	mov	r2, r5
 8007df4:	f7f8 fa50 	bl	8000298 <__aeabi_dsub>
 8007df8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007dfc:	4656      	mov	r6, sl
 8007dfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e02:	f7f8 feb1 	bl	8000b68 <__aeabi_d2iz>
 8007e06:	4605      	mov	r5, r0
 8007e08:	f7f8 fb94 	bl	8000534 <__aeabi_i2d>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	460b      	mov	r3, r1
 8007e10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e14:	f7f8 fa40 	bl	8000298 <__aeabi_dsub>
 8007e18:	3530      	adds	r5, #48	@ 0x30
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e22:	f806 5b01 	strb.w	r5, [r6], #1
 8007e26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007e2a:	f7f8 fe5f 	bl	8000aec <__aeabi_dcmplt>
 8007e2e:	2800      	cmp	r0, #0
 8007e30:	d171      	bne.n	8007f16 <_dtoa_r+0x65e>
 8007e32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e36:	4911      	ldr	r1, [pc, #68]	@ (8007e7c <_dtoa_r+0x5c4>)
 8007e38:	2000      	movs	r0, #0
 8007e3a:	f7f8 fa2d 	bl	8000298 <__aeabi_dsub>
 8007e3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007e42:	f7f8 fe53 	bl	8000aec <__aeabi_dcmplt>
 8007e46:	2800      	cmp	r0, #0
 8007e48:	f040 8095 	bne.w	8007f76 <_dtoa_r+0x6be>
 8007e4c:	42a6      	cmp	r6, r4
 8007e4e:	f43f af50 	beq.w	8007cf2 <_dtoa_r+0x43a>
 8007e52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007e56:	4b0a      	ldr	r3, [pc, #40]	@ (8007e80 <_dtoa_r+0x5c8>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f7f8 fbd5 	bl	8000608 <__aeabi_dmul>
 8007e5e:	4b08      	ldr	r3, [pc, #32]	@ (8007e80 <_dtoa_r+0x5c8>)
 8007e60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e64:	2200      	movs	r2, #0
 8007e66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e6a:	f7f8 fbcd 	bl	8000608 <__aeabi_dmul>
 8007e6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e72:	e7c4      	b.n	8007dfe <_dtoa_r+0x546>
 8007e74:	08009880 	.word	0x08009880
 8007e78:	08009858 	.word	0x08009858
 8007e7c:	3ff00000 	.word	0x3ff00000
 8007e80:	40240000 	.word	0x40240000
 8007e84:	401c0000 	.word	0x401c0000
 8007e88:	40140000 	.word	0x40140000
 8007e8c:	3fe00000 	.word	0x3fe00000
 8007e90:	4631      	mov	r1, r6
 8007e92:	4628      	mov	r0, r5
 8007e94:	f7f8 fbb8 	bl	8000608 <__aeabi_dmul>
 8007e98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e9c:	9415      	str	r4, [sp, #84]	@ 0x54
 8007e9e:	4656      	mov	r6, sl
 8007ea0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ea4:	f7f8 fe60 	bl	8000b68 <__aeabi_d2iz>
 8007ea8:	4605      	mov	r5, r0
 8007eaa:	f7f8 fb43 	bl	8000534 <__aeabi_i2d>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eb6:	f7f8 f9ef 	bl	8000298 <__aeabi_dsub>
 8007eba:	3530      	adds	r5, #48	@ 0x30
 8007ebc:	f806 5b01 	strb.w	r5, [r6], #1
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	42a6      	cmp	r6, r4
 8007ec6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007eca:	f04f 0200 	mov.w	r2, #0
 8007ece:	d124      	bne.n	8007f1a <_dtoa_r+0x662>
 8007ed0:	4bac      	ldr	r3, [pc, #688]	@ (8008184 <_dtoa_r+0x8cc>)
 8007ed2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007ed6:	f7f8 f9e1 	bl	800029c <__adddf3>
 8007eda:	4602      	mov	r2, r0
 8007edc:	460b      	mov	r3, r1
 8007ede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ee2:	f7f8 fe21 	bl	8000b28 <__aeabi_dcmpgt>
 8007ee6:	2800      	cmp	r0, #0
 8007ee8:	d145      	bne.n	8007f76 <_dtoa_r+0x6be>
 8007eea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007eee:	49a5      	ldr	r1, [pc, #660]	@ (8008184 <_dtoa_r+0x8cc>)
 8007ef0:	2000      	movs	r0, #0
 8007ef2:	f7f8 f9d1 	bl	8000298 <__aeabi_dsub>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	460b      	mov	r3, r1
 8007efa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007efe:	f7f8 fdf5 	bl	8000aec <__aeabi_dcmplt>
 8007f02:	2800      	cmp	r0, #0
 8007f04:	f43f aef5 	beq.w	8007cf2 <_dtoa_r+0x43a>
 8007f08:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007f0a:	1e73      	subs	r3, r6, #1
 8007f0c:	9315      	str	r3, [sp, #84]	@ 0x54
 8007f0e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007f12:	2b30      	cmp	r3, #48	@ 0x30
 8007f14:	d0f8      	beq.n	8007f08 <_dtoa_r+0x650>
 8007f16:	9f04      	ldr	r7, [sp, #16]
 8007f18:	e73e      	b.n	8007d98 <_dtoa_r+0x4e0>
 8007f1a:	4b9b      	ldr	r3, [pc, #620]	@ (8008188 <_dtoa_r+0x8d0>)
 8007f1c:	f7f8 fb74 	bl	8000608 <__aeabi_dmul>
 8007f20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f24:	e7bc      	b.n	8007ea0 <_dtoa_r+0x5e8>
 8007f26:	d10c      	bne.n	8007f42 <_dtoa_r+0x68a>
 8007f28:	4b98      	ldr	r3, [pc, #608]	@ (800818c <_dtoa_r+0x8d4>)
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f30:	f7f8 fb6a 	bl	8000608 <__aeabi_dmul>
 8007f34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f38:	f7f8 fdec 	bl	8000b14 <__aeabi_dcmpge>
 8007f3c:	2800      	cmp	r0, #0
 8007f3e:	f000 8157 	beq.w	80081f0 <_dtoa_r+0x938>
 8007f42:	2400      	movs	r4, #0
 8007f44:	4625      	mov	r5, r4
 8007f46:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f48:	43db      	mvns	r3, r3
 8007f4a:	9304      	str	r3, [sp, #16]
 8007f4c:	4656      	mov	r6, sl
 8007f4e:	2700      	movs	r7, #0
 8007f50:	4621      	mov	r1, r4
 8007f52:	4658      	mov	r0, fp
 8007f54:	f000 fafe 	bl	8008554 <_Bfree>
 8007f58:	2d00      	cmp	r5, #0
 8007f5a:	d0dc      	beq.n	8007f16 <_dtoa_r+0x65e>
 8007f5c:	b12f      	cbz	r7, 8007f6a <_dtoa_r+0x6b2>
 8007f5e:	42af      	cmp	r7, r5
 8007f60:	d003      	beq.n	8007f6a <_dtoa_r+0x6b2>
 8007f62:	4639      	mov	r1, r7
 8007f64:	4658      	mov	r0, fp
 8007f66:	f000 faf5 	bl	8008554 <_Bfree>
 8007f6a:	4629      	mov	r1, r5
 8007f6c:	4658      	mov	r0, fp
 8007f6e:	f000 faf1 	bl	8008554 <_Bfree>
 8007f72:	e7d0      	b.n	8007f16 <_dtoa_r+0x65e>
 8007f74:	9704      	str	r7, [sp, #16]
 8007f76:	4633      	mov	r3, r6
 8007f78:	461e      	mov	r6, r3
 8007f7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f7e:	2a39      	cmp	r2, #57	@ 0x39
 8007f80:	d107      	bne.n	8007f92 <_dtoa_r+0x6da>
 8007f82:	459a      	cmp	sl, r3
 8007f84:	d1f8      	bne.n	8007f78 <_dtoa_r+0x6c0>
 8007f86:	9a04      	ldr	r2, [sp, #16]
 8007f88:	3201      	adds	r2, #1
 8007f8a:	9204      	str	r2, [sp, #16]
 8007f8c:	2230      	movs	r2, #48	@ 0x30
 8007f8e:	f88a 2000 	strb.w	r2, [sl]
 8007f92:	781a      	ldrb	r2, [r3, #0]
 8007f94:	3201      	adds	r2, #1
 8007f96:	701a      	strb	r2, [r3, #0]
 8007f98:	e7bd      	b.n	8007f16 <_dtoa_r+0x65e>
 8007f9a:	4b7b      	ldr	r3, [pc, #492]	@ (8008188 <_dtoa_r+0x8d0>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f7f8 fb33 	bl	8000608 <__aeabi_dmul>
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	460d      	mov	r5, r1
 8007faa:	f7f8 fd95 	bl	8000ad8 <__aeabi_dcmpeq>
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	f43f aebb 	beq.w	8007d2a <_dtoa_r+0x472>
 8007fb4:	e6f0      	b.n	8007d98 <_dtoa_r+0x4e0>
 8007fb6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007fb8:	2a00      	cmp	r2, #0
 8007fba:	f000 80db 	beq.w	8008174 <_dtoa_r+0x8bc>
 8007fbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fc0:	2a01      	cmp	r2, #1
 8007fc2:	f300 80bf 	bgt.w	8008144 <_dtoa_r+0x88c>
 8007fc6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007fc8:	2a00      	cmp	r2, #0
 8007fca:	f000 80b7 	beq.w	800813c <_dtoa_r+0x884>
 8007fce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007fd2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007fd4:	4646      	mov	r6, r8
 8007fd6:	9a08      	ldr	r2, [sp, #32]
 8007fd8:	2101      	movs	r1, #1
 8007fda:	441a      	add	r2, r3
 8007fdc:	4658      	mov	r0, fp
 8007fde:	4498      	add	r8, r3
 8007fe0:	9208      	str	r2, [sp, #32]
 8007fe2:	f000 fb6b 	bl	80086bc <__i2b>
 8007fe6:	4605      	mov	r5, r0
 8007fe8:	b15e      	cbz	r6, 8008002 <_dtoa_r+0x74a>
 8007fea:	9b08      	ldr	r3, [sp, #32]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	dd08      	ble.n	8008002 <_dtoa_r+0x74a>
 8007ff0:	42b3      	cmp	r3, r6
 8007ff2:	9a08      	ldr	r2, [sp, #32]
 8007ff4:	bfa8      	it	ge
 8007ff6:	4633      	movge	r3, r6
 8007ff8:	eba8 0803 	sub.w	r8, r8, r3
 8007ffc:	1af6      	subs	r6, r6, r3
 8007ffe:	1ad3      	subs	r3, r2, r3
 8008000:	9308      	str	r3, [sp, #32]
 8008002:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008004:	b1f3      	cbz	r3, 8008044 <_dtoa_r+0x78c>
 8008006:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008008:	2b00      	cmp	r3, #0
 800800a:	f000 80b7 	beq.w	800817c <_dtoa_r+0x8c4>
 800800e:	b18c      	cbz	r4, 8008034 <_dtoa_r+0x77c>
 8008010:	4629      	mov	r1, r5
 8008012:	4622      	mov	r2, r4
 8008014:	4658      	mov	r0, fp
 8008016:	f000 fc11 	bl	800883c <__pow5mult>
 800801a:	464a      	mov	r2, r9
 800801c:	4601      	mov	r1, r0
 800801e:	4605      	mov	r5, r0
 8008020:	4658      	mov	r0, fp
 8008022:	f000 fb61 	bl	80086e8 <__multiply>
 8008026:	4649      	mov	r1, r9
 8008028:	9004      	str	r0, [sp, #16]
 800802a:	4658      	mov	r0, fp
 800802c:	f000 fa92 	bl	8008554 <_Bfree>
 8008030:	9b04      	ldr	r3, [sp, #16]
 8008032:	4699      	mov	r9, r3
 8008034:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008036:	1b1a      	subs	r2, r3, r4
 8008038:	d004      	beq.n	8008044 <_dtoa_r+0x78c>
 800803a:	4649      	mov	r1, r9
 800803c:	4658      	mov	r0, fp
 800803e:	f000 fbfd 	bl	800883c <__pow5mult>
 8008042:	4681      	mov	r9, r0
 8008044:	2101      	movs	r1, #1
 8008046:	4658      	mov	r0, fp
 8008048:	f000 fb38 	bl	80086bc <__i2b>
 800804c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800804e:	4604      	mov	r4, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	f000 81cf 	beq.w	80083f4 <_dtoa_r+0xb3c>
 8008056:	461a      	mov	r2, r3
 8008058:	4601      	mov	r1, r0
 800805a:	4658      	mov	r0, fp
 800805c:	f000 fbee 	bl	800883c <__pow5mult>
 8008060:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008062:	2b01      	cmp	r3, #1
 8008064:	4604      	mov	r4, r0
 8008066:	f300 8095 	bgt.w	8008194 <_dtoa_r+0x8dc>
 800806a:	9b02      	ldr	r3, [sp, #8]
 800806c:	2b00      	cmp	r3, #0
 800806e:	f040 8087 	bne.w	8008180 <_dtoa_r+0x8c8>
 8008072:	9b03      	ldr	r3, [sp, #12]
 8008074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008078:	2b00      	cmp	r3, #0
 800807a:	f040 8089 	bne.w	8008190 <_dtoa_r+0x8d8>
 800807e:	9b03      	ldr	r3, [sp, #12]
 8008080:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008084:	0d1b      	lsrs	r3, r3, #20
 8008086:	051b      	lsls	r3, r3, #20
 8008088:	b12b      	cbz	r3, 8008096 <_dtoa_r+0x7de>
 800808a:	9b08      	ldr	r3, [sp, #32]
 800808c:	3301      	adds	r3, #1
 800808e:	9308      	str	r3, [sp, #32]
 8008090:	f108 0801 	add.w	r8, r8, #1
 8008094:	2301      	movs	r3, #1
 8008096:	930a      	str	r3, [sp, #40]	@ 0x28
 8008098:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800809a:	2b00      	cmp	r3, #0
 800809c:	f000 81b0 	beq.w	8008400 <_dtoa_r+0xb48>
 80080a0:	6923      	ldr	r3, [r4, #16]
 80080a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80080a6:	6918      	ldr	r0, [r3, #16]
 80080a8:	f000 fabc 	bl	8008624 <__hi0bits>
 80080ac:	f1c0 0020 	rsb	r0, r0, #32
 80080b0:	9b08      	ldr	r3, [sp, #32]
 80080b2:	4418      	add	r0, r3
 80080b4:	f010 001f 	ands.w	r0, r0, #31
 80080b8:	d077      	beq.n	80081aa <_dtoa_r+0x8f2>
 80080ba:	f1c0 0320 	rsb	r3, r0, #32
 80080be:	2b04      	cmp	r3, #4
 80080c0:	dd6b      	ble.n	800819a <_dtoa_r+0x8e2>
 80080c2:	9b08      	ldr	r3, [sp, #32]
 80080c4:	f1c0 001c 	rsb	r0, r0, #28
 80080c8:	4403      	add	r3, r0
 80080ca:	4480      	add	r8, r0
 80080cc:	4406      	add	r6, r0
 80080ce:	9308      	str	r3, [sp, #32]
 80080d0:	f1b8 0f00 	cmp.w	r8, #0
 80080d4:	dd05      	ble.n	80080e2 <_dtoa_r+0x82a>
 80080d6:	4649      	mov	r1, r9
 80080d8:	4642      	mov	r2, r8
 80080da:	4658      	mov	r0, fp
 80080dc:	f000 fc08 	bl	80088f0 <__lshift>
 80080e0:	4681      	mov	r9, r0
 80080e2:	9b08      	ldr	r3, [sp, #32]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	dd05      	ble.n	80080f4 <_dtoa_r+0x83c>
 80080e8:	4621      	mov	r1, r4
 80080ea:	461a      	mov	r2, r3
 80080ec:	4658      	mov	r0, fp
 80080ee:	f000 fbff 	bl	80088f0 <__lshift>
 80080f2:	4604      	mov	r4, r0
 80080f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d059      	beq.n	80081ae <_dtoa_r+0x8f6>
 80080fa:	4621      	mov	r1, r4
 80080fc:	4648      	mov	r0, r9
 80080fe:	f000 fc63 	bl	80089c8 <__mcmp>
 8008102:	2800      	cmp	r0, #0
 8008104:	da53      	bge.n	80081ae <_dtoa_r+0x8f6>
 8008106:	1e7b      	subs	r3, r7, #1
 8008108:	9304      	str	r3, [sp, #16]
 800810a:	4649      	mov	r1, r9
 800810c:	2300      	movs	r3, #0
 800810e:	220a      	movs	r2, #10
 8008110:	4658      	mov	r0, fp
 8008112:	f000 fa41 	bl	8008598 <__multadd>
 8008116:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008118:	4681      	mov	r9, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	f000 8172 	beq.w	8008404 <_dtoa_r+0xb4c>
 8008120:	2300      	movs	r3, #0
 8008122:	4629      	mov	r1, r5
 8008124:	220a      	movs	r2, #10
 8008126:	4658      	mov	r0, fp
 8008128:	f000 fa36 	bl	8008598 <__multadd>
 800812c:	9b00      	ldr	r3, [sp, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	4605      	mov	r5, r0
 8008132:	dc67      	bgt.n	8008204 <_dtoa_r+0x94c>
 8008134:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008136:	2b02      	cmp	r3, #2
 8008138:	dc41      	bgt.n	80081be <_dtoa_r+0x906>
 800813a:	e063      	b.n	8008204 <_dtoa_r+0x94c>
 800813c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800813e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008142:	e746      	b.n	8007fd2 <_dtoa_r+0x71a>
 8008144:	9b07      	ldr	r3, [sp, #28]
 8008146:	1e5c      	subs	r4, r3, #1
 8008148:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800814a:	42a3      	cmp	r3, r4
 800814c:	bfbf      	itttt	lt
 800814e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008150:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008152:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008154:	1ae3      	sublt	r3, r4, r3
 8008156:	bfb4      	ite	lt
 8008158:	18d2      	addlt	r2, r2, r3
 800815a:	1b1c      	subge	r4, r3, r4
 800815c:	9b07      	ldr	r3, [sp, #28]
 800815e:	bfbc      	itt	lt
 8008160:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008162:	2400      	movlt	r4, #0
 8008164:	2b00      	cmp	r3, #0
 8008166:	bfb5      	itete	lt
 8008168:	eba8 0603 	sublt.w	r6, r8, r3
 800816c:	9b07      	ldrge	r3, [sp, #28]
 800816e:	2300      	movlt	r3, #0
 8008170:	4646      	movge	r6, r8
 8008172:	e730      	b.n	8007fd6 <_dtoa_r+0x71e>
 8008174:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008176:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008178:	4646      	mov	r6, r8
 800817a:	e735      	b.n	8007fe8 <_dtoa_r+0x730>
 800817c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800817e:	e75c      	b.n	800803a <_dtoa_r+0x782>
 8008180:	2300      	movs	r3, #0
 8008182:	e788      	b.n	8008096 <_dtoa_r+0x7de>
 8008184:	3fe00000 	.word	0x3fe00000
 8008188:	40240000 	.word	0x40240000
 800818c:	40140000 	.word	0x40140000
 8008190:	9b02      	ldr	r3, [sp, #8]
 8008192:	e780      	b.n	8008096 <_dtoa_r+0x7de>
 8008194:	2300      	movs	r3, #0
 8008196:	930a      	str	r3, [sp, #40]	@ 0x28
 8008198:	e782      	b.n	80080a0 <_dtoa_r+0x7e8>
 800819a:	d099      	beq.n	80080d0 <_dtoa_r+0x818>
 800819c:	9a08      	ldr	r2, [sp, #32]
 800819e:	331c      	adds	r3, #28
 80081a0:	441a      	add	r2, r3
 80081a2:	4498      	add	r8, r3
 80081a4:	441e      	add	r6, r3
 80081a6:	9208      	str	r2, [sp, #32]
 80081a8:	e792      	b.n	80080d0 <_dtoa_r+0x818>
 80081aa:	4603      	mov	r3, r0
 80081ac:	e7f6      	b.n	800819c <_dtoa_r+0x8e4>
 80081ae:	9b07      	ldr	r3, [sp, #28]
 80081b0:	9704      	str	r7, [sp, #16]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	dc20      	bgt.n	80081f8 <_dtoa_r+0x940>
 80081b6:	9300      	str	r3, [sp, #0]
 80081b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	dd1e      	ble.n	80081fc <_dtoa_r+0x944>
 80081be:	9b00      	ldr	r3, [sp, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f47f aec0 	bne.w	8007f46 <_dtoa_r+0x68e>
 80081c6:	4621      	mov	r1, r4
 80081c8:	2205      	movs	r2, #5
 80081ca:	4658      	mov	r0, fp
 80081cc:	f000 f9e4 	bl	8008598 <__multadd>
 80081d0:	4601      	mov	r1, r0
 80081d2:	4604      	mov	r4, r0
 80081d4:	4648      	mov	r0, r9
 80081d6:	f000 fbf7 	bl	80089c8 <__mcmp>
 80081da:	2800      	cmp	r0, #0
 80081dc:	f77f aeb3 	ble.w	8007f46 <_dtoa_r+0x68e>
 80081e0:	4656      	mov	r6, sl
 80081e2:	2331      	movs	r3, #49	@ 0x31
 80081e4:	f806 3b01 	strb.w	r3, [r6], #1
 80081e8:	9b04      	ldr	r3, [sp, #16]
 80081ea:	3301      	adds	r3, #1
 80081ec:	9304      	str	r3, [sp, #16]
 80081ee:	e6ae      	b.n	8007f4e <_dtoa_r+0x696>
 80081f0:	9c07      	ldr	r4, [sp, #28]
 80081f2:	9704      	str	r7, [sp, #16]
 80081f4:	4625      	mov	r5, r4
 80081f6:	e7f3      	b.n	80081e0 <_dtoa_r+0x928>
 80081f8:	9b07      	ldr	r3, [sp, #28]
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f000 8104 	beq.w	800840c <_dtoa_r+0xb54>
 8008204:	2e00      	cmp	r6, #0
 8008206:	dd05      	ble.n	8008214 <_dtoa_r+0x95c>
 8008208:	4629      	mov	r1, r5
 800820a:	4632      	mov	r2, r6
 800820c:	4658      	mov	r0, fp
 800820e:	f000 fb6f 	bl	80088f0 <__lshift>
 8008212:	4605      	mov	r5, r0
 8008214:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008216:	2b00      	cmp	r3, #0
 8008218:	d05a      	beq.n	80082d0 <_dtoa_r+0xa18>
 800821a:	6869      	ldr	r1, [r5, #4]
 800821c:	4658      	mov	r0, fp
 800821e:	f000 f959 	bl	80084d4 <_Balloc>
 8008222:	4606      	mov	r6, r0
 8008224:	b928      	cbnz	r0, 8008232 <_dtoa_r+0x97a>
 8008226:	4b84      	ldr	r3, [pc, #528]	@ (8008438 <_dtoa_r+0xb80>)
 8008228:	4602      	mov	r2, r0
 800822a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800822e:	f7ff bb5a 	b.w	80078e6 <_dtoa_r+0x2e>
 8008232:	692a      	ldr	r2, [r5, #16]
 8008234:	3202      	adds	r2, #2
 8008236:	0092      	lsls	r2, r2, #2
 8008238:	f105 010c 	add.w	r1, r5, #12
 800823c:	300c      	adds	r0, #12
 800823e:	f7ff faa4 	bl	800778a <memcpy>
 8008242:	2201      	movs	r2, #1
 8008244:	4631      	mov	r1, r6
 8008246:	4658      	mov	r0, fp
 8008248:	f000 fb52 	bl	80088f0 <__lshift>
 800824c:	f10a 0301 	add.w	r3, sl, #1
 8008250:	9307      	str	r3, [sp, #28]
 8008252:	9b00      	ldr	r3, [sp, #0]
 8008254:	4453      	add	r3, sl
 8008256:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008258:	9b02      	ldr	r3, [sp, #8]
 800825a:	f003 0301 	and.w	r3, r3, #1
 800825e:	462f      	mov	r7, r5
 8008260:	930a      	str	r3, [sp, #40]	@ 0x28
 8008262:	4605      	mov	r5, r0
 8008264:	9b07      	ldr	r3, [sp, #28]
 8008266:	4621      	mov	r1, r4
 8008268:	3b01      	subs	r3, #1
 800826a:	4648      	mov	r0, r9
 800826c:	9300      	str	r3, [sp, #0]
 800826e:	f7ff fa9a 	bl	80077a6 <quorem>
 8008272:	4639      	mov	r1, r7
 8008274:	9002      	str	r0, [sp, #8]
 8008276:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800827a:	4648      	mov	r0, r9
 800827c:	f000 fba4 	bl	80089c8 <__mcmp>
 8008280:	462a      	mov	r2, r5
 8008282:	9008      	str	r0, [sp, #32]
 8008284:	4621      	mov	r1, r4
 8008286:	4658      	mov	r0, fp
 8008288:	f000 fbba 	bl	8008a00 <__mdiff>
 800828c:	68c2      	ldr	r2, [r0, #12]
 800828e:	4606      	mov	r6, r0
 8008290:	bb02      	cbnz	r2, 80082d4 <_dtoa_r+0xa1c>
 8008292:	4601      	mov	r1, r0
 8008294:	4648      	mov	r0, r9
 8008296:	f000 fb97 	bl	80089c8 <__mcmp>
 800829a:	4602      	mov	r2, r0
 800829c:	4631      	mov	r1, r6
 800829e:	4658      	mov	r0, fp
 80082a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80082a2:	f000 f957 	bl	8008554 <_Bfree>
 80082a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80082aa:	9e07      	ldr	r6, [sp, #28]
 80082ac:	ea43 0102 	orr.w	r1, r3, r2
 80082b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082b2:	4319      	orrs	r1, r3
 80082b4:	d110      	bne.n	80082d8 <_dtoa_r+0xa20>
 80082b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80082ba:	d029      	beq.n	8008310 <_dtoa_r+0xa58>
 80082bc:	9b08      	ldr	r3, [sp, #32]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	dd02      	ble.n	80082c8 <_dtoa_r+0xa10>
 80082c2:	9b02      	ldr	r3, [sp, #8]
 80082c4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80082c8:	9b00      	ldr	r3, [sp, #0]
 80082ca:	f883 8000 	strb.w	r8, [r3]
 80082ce:	e63f      	b.n	8007f50 <_dtoa_r+0x698>
 80082d0:	4628      	mov	r0, r5
 80082d2:	e7bb      	b.n	800824c <_dtoa_r+0x994>
 80082d4:	2201      	movs	r2, #1
 80082d6:	e7e1      	b.n	800829c <_dtoa_r+0x9e4>
 80082d8:	9b08      	ldr	r3, [sp, #32]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	db04      	blt.n	80082e8 <_dtoa_r+0xa30>
 80082de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80082e0:	430b      	orrs	r3, r1
 80082e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80082e4:	430b      	orrs	r3, r1
 80082e6:	d120      	bne.n	800832a <_dtoa_r+0xa72>
 80082e8:	2a00      	cmp	r2, #0
 80082ea:	dded      	ble.n	80082c8 <_dtoa_r+0xa10>
 80082ec:	4649      	mov	r1, r9
 80082ee:	2201      	movs	r2, #1
 80082f0:	4658      	mov	r0, fp
 80082f2:	f000 fafd 	bl	80088f0 <__lshift>
 80082f6:	4621      	mov	r1, r4
 80082f8:	4681      	mov	r9, r0
 80082fa:	f000 fb65 	bl	80089c8 <__mcmp>
 80082fe:	2800      	cmp	r0, #0
 8008300:	dc03      	bgt.n	800830a <_dtoa_r+0xa52>
 8008302:	d1e1      	bne.n	80082c8 <_dtoa_r+0xa10>
 8008304:	f018 0f01 	tst.w	r8, #1
 8008308:	d0de      	beq.n	80082c8 <_dtoa_r+0xa10>
 800830a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800830e:	d1d8      	bne.n	80082c2 <_dtoa_r+0xa0a>
 8008310:	9a00      	ldr	r2, [sp, #0]
 8008312:	2339      	movs	r3, #57	@ 0x39
 8008314:	7013      	strb	r3, [r2, #0]
 8008316:	4633      	mov	r3, r6
 8008318:	461e      	mov	r6, r3
 800831a:	3b01      	subs	r3, #1
 800831c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008320:	2a39      	cmp	r2, #57	@ 0x39
 8008322:	d052      	beq.n	80083ca <_dtoa_r+0xb12>
 8008324:	3201      	adds	r2, #1
 8008326:	701a      	strb	r2, [r3, #0]
 8008328:	e612      	b.n	8007f50 <_dtoa_r+0x698>
 800832a:	2a00      	cmp	r2, #0
 800832c:	dd07      	ble.n	800833e <_dtoa_r+0xa86>
 800832e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008332:	d0ed      	beq.n	8008310 <_dtoa_r+0xa58>
 8008334:	9a00      	ldr	r2, [sp, #0]
 8008336:	f108 0301 	add.w	r3, r8, #1
 800833a:	7013      	strb	r3, [r2, #0]
 800833c:	e608      	b.n	8007f50 <_dtoa_r+0x698>
 800833e:	9b07      	ldr	r3, [sp, #28]
 8008340:	9a07      	ldr	r2, [sp, #28]
 8008342:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008346:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008348:	4293      	cmp	r3, r2
 800834a:	d028      	beq.n	800839e <_dtoa_r+0xae6>
 800834c:	4649      	mov	r1, r9
 800834e:	2300      	movs	r3, #0
 8008350:	220a      	movs	r2, #10
 8008352:	4658      	mov	r0, fp
 8008354:	f000 f920 	bl	8008598 <__multadd>
 8008358:	42af      	cmp	r7, r5
 800835a:	4681      	mov	r9, r0
 800835c:	f04f 0300 	mov.w	r3, #0
 8008360:	f04f 020a 	mov.w	r2, #10
 8008364:	4639      	mov	r1, r7
 8008366:	4658      	mov	r0, fp
 8008368:	d107      	bne.n	800837a <_dtoa_r+0xac2>
 800836a:	f000 f915 	bl	8008598 <__multadd>
 800836e:	4607      	mov	r7, r0
 8008370:	4605      	mov	r5, r0
 8008372:	9b07      	ldr	r3, [sp, #28]
 8008374:	3301      	adds	r3, #1
 8008376:	9307      	str	r3, [sp, #28]
 8008378:	e774      	b.n	8008264 <_dtoa_r+0x9ac>
 800837a:	f000 f90d 	bl	8008598 <__multadd>
 800837e:	4629      	mov	r1, r5
 8008380:	4607      	mov	r7, r0
 8008382:	2300      	movs	r3, #0
 8008384:	220a      	movs	r2, #10
 8008386:	4658      	mov	r0, fp
 8008388:	f000 f906 	bl	8008598 <__multadd>
 800838c:	4605      	mov	r5, r0
 800838e:	e7f0      	b.n	8008372 <_dtoa_r+0xaba>
 8008390:	9b00      	ldr	r3, [sp, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	bfcc      	ite	gt
 8008396:	461e      	movgt	r6, r3
 8008398:	2601      	movle	r6, #1
 800839a:	4456      	add	r6, sl
 800839c:	2700      	movs	r7, #0
 800839e:	4649      	mov	r1, r9
 80083a0:	2201      	movs	r2, #1
 80083a2:	4658      	mov	r0, fp
 80083a4:	f000 faa4 	bl	80088f0 <__lshift>
 80083a8:	4621      	mov	r1, r4
 80083aa:	4681      	mov	r9, r0
 80083ac:	f000 fb0c 	bl	80089c8 <__mcmp>
 80083b0:	2800      	cmp	r0, #0
 80083b2:	dcb0      	bgt.n	8008316 <_dtoa_r+0xa5e>
 80083b4:	d102      	bne.n	80083bc <_dtoa_r+0xb04>
 80083b6:	f018 0f01 	tst.w	r8, #1
 80083ba:	d1ac      	bne.n	8008316 <_dtoa_r+0xa5e>
 80083bc:	4633      	mov	r3, r6
 80083be:	461e      	mov	r6, r3
 80083c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083c4:	2a30      	cmp	r2, #48	@ 0x30
 80083c6:	d0fa      	beq.n	80083be <_dtoa_r+0xb06>
 80083c8:	e5c2      	b.n	8007f50 <_dtoa_r+0x698>
 80083ca:	459a      	cmp	sl, r3
 80083cc:	d1a4      	bne.n	8008318 <_dtoa_r+0xa60>
 80083ce:	9b04      	ldr	r3, [sp, #16]
 80083d0:	3301      	adds	r3, #1
 80083d2:	9304      	str	r3, [sp, #16]
 80083d4:	2331      	movs	r3, #49	@ 0x31
 80083d6:	f88a 3000 	strb.w	r3, [sl]
 80083da:	e5b9      	b.n	8007f50 <_dtoa_r+0x698>
 80083dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80083de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800843c <_dtoa_r+0xb84>
 80083e2:	b11b      	cbz	r3, 80083ec <_dtoa_r+0xb34>
 80083e4:	f10a 0308 	add.w	r3, sl, #8
 80083e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80083ea:	6013      	str	r3, [r2, #0]
 80083ec:	4650      	mov	r0, sl
 80083ee:	b019      	add	sp, #100	@ 0x64
 80083f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	f77f ae37 	ble.w	800806a <_dtoa_r+0x7b2>
 80083fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8008400:	2001      	movs	r0, #1
 8008402:	e655      	b.n	80080b0 <_dtoa_r+0x7f8>
 8008404:	9b00      	ldr	r3, [sp, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	f77f aed6 	ble.w	80081b8 <_dtoa_r+0x900>
 800840c:	4656      	mov	r6, sl
 800840e:	4621      	mov	r1, r4
 8008410:	4648      	mov	r0, r9
 8008412:	f7ff f9c8 	bl	80077a6 <quorem>
 8008416:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800841a:	f806 8b01 	strb.w	r8, [r6], #1
 800841e:	9b00      	ldr	r3, [sp, #0]
 8008420:	eba6 020a 	sub.w	r2, r6, sl
 8008424:	4293      	cmp	r3, r2
 8008426:	ddb3      	ble.n	8008390 <_dtoa_r+0xad8>
 8008428:	4649      	mov	r1, r9
 800842a:	2300      	movs	r3, #0
 800842c:	220a      	movs	r2, #10
 800842e:	4658      	mov	r0, fp
 8008430:	f000 f8b2 	bl	8008598 <__multadd>
 8008434:	4681      	mov	r9, r0
 8008436:	e7ea      	b.n	800840e <_dtoa_r+0xb56>
 8008438:	080097dc 	.word	0x080097dc
 800843c:	08009760 	.word	0x08009760

08008440 <_free_r>:
 8008440:	b538      	push	{r3, r4, r5, lr}
 8008442:	4605      	mov	r5, r0
 8008444:	2900      	cmp	r1, #0
 8008446:	d041      	beq.n	80084cc <_free_r+0x8c>
 8008448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800844c:	1f0c      	subs	r4, r1, #4
 800844e:	2b00      	cmp	r3, #0
 8008450:	bfb8      	it	lt
 8008452:	18e4      	addlt	r4, r4, r3
 8008454:	f7fe fb28 	bl	8006aa8 <__malloc_lock>
 8008458:	4a1d      	ldr	r2, [pc, #116]	@ (80084d0 <_free_r+0x90>)
 800845a:	6813      	ldr	r3, [r2, #0]
 800845c:	b933      	cbnz	r3, 800846c <_free_r+0x2c>
 800845e:	6063      	str	r3, [r4, #4]
 8008460:	6014      	str	r4, [r2, #0]
 8008462:	4628      	mov	r0, r5
 8008464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008468:	f7fe bb24 	b.w	8006ab4 <__malloc_unlock>
 800846c:	42a3      	cmp	r3, r4
 800846e:	d908      	bls.n	8008482 <_free_r+0x42>
 8008470:	6820      	ldr	r0, [r4, #0]
 8008472:	1821      	adds	r1, r4, r0
 8008474:	428b      	cmp	r3, r1
 8008476:	bf01      	itttt	eq
 8008478:	6819      	ldreq	r1, [r3, #0]
 800847a:	685b      	ldreq	r3, [r3, #4]
 800847c:	1809      	addeq	r1, r1, r0
 800847e:	6021      	streq	r1, [r4, #0]
 8008480:	e7ed      	b.n	800845e <_free_r+0x1e>
 8008482:	461a      	mov	r2, r3
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	b10b      	cbz	r3, 800848c <_free_r+0x4c>
 8008488:	42a3      	cmp	r3, r4
 800848a:	d9fa      	bls.n	8008482 <_free_r+0x42>
 800848c:	6811      	ldr	r1, [r2, #0]
 800848e:	1850      	adds	r0, r2, r1
 8008490:	42a0      	cmp	r0, r4
 8008492:	d10b      	bne.n	80084ac <_free_r+0x6c>
 8008494:	6820      	ldr	r0, [r4, #0]
 8008496:	4401      	add	r1, r0
 8008498:	1850      	adds	r0, r2, r1
 800849a:	4283      	cmp	r3, r0
 800849c:	6011      	str	r1, [r2, #0]
 800849e:	d1e0      	bne.n	8008462 <_free_r+0x22>
 80084a0:	6818      	ldr	r0, [r3, #0]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	6053      	str	r3, [r2, #4]
 80084a6:	4408      	add	r0, r1
 80084a8:	6010      	str	r0, [r2, #0]
 80084aa:	e7da      	b.n	8008462 <_free_r+0x22>
 80084ac:	d902      	bls.n	80084b4 <_free_r+0x74>
 80084ae:	230c      	movs	r3, #12
 80084b0:	602b      	str	r3, [r5, #0]
 80084b2:	e7d6      	b.n	8008462 <_free_r+0x22>
 80084b4:	6820      	ldr	r0, [r4, #0]
 80084b6:	1821      	adds	r1, r4, r0
 80084b8:	428b      	cmp	r3, r1
 80084ba:	bf04      	itt	eq
 80084bc:	6819      	ldreq	r1, [r3, #0]
 80084be:	685b      	ldreq	r3, [r3, #4]
 80084c0:	6063      	str	r3, [r4, #4]
 80084c2:	bf04      	itt	eq
 80084c4:	1809      	addeq	r1, r1, r0
 80084c6:	6021      	streq	r1, [r4, #0]
 80084c8:	6054      	str	r4, [r2, #4]
 80084ca:	e7ca      	b.n	8008462 <_free_r+0x22>
 80084cc:	bd38      	pop	{r3, r4, r5, pc}
 80084ce:	bf00      	nop
 80084d0:	200003dc 	.word	0x200003dc

080084d4 <_Balloc>:
 80084d4:	b570      	push	{r4, r5, r6, lr}
 80084d6:	69c6      	ldr	r6, [r0, #28]
 80084d8:	4604      	mov	r4, r0
 80084da:	460d      	mov	r5, r1
 80084dc:	b976      	cbnz	r6, 80084fc <_Balloc+0x28>
 80084de:	2010      	movs	r0, #16
 80084e0:	f7fe fa30 	bl	8006944 <malloc>
 80084e4:	4602      	mov	r2, r0
 80084e6:	61e0      	str	r0, [r4, #28]
 80084e8:	b920      	cbnz	r0, 80084f4 <_Balloc+0x20>
 80084ea:	4b18      	ldr	r3, [pc, #96]	@ (800854c <_Balloc+0x78>)
 80084ec:	4818      	ldr	r0, [pc, #96]	@ (8008550 <_Balloc+0x7c>)
 80084ee:	216b      	movs	r1, #107	@ 0x6b
 80084f0:	f000 fd90 	bl	8009014 <__assert_func>
 80084f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084f8:	6006      	str	r6, [r0, #0]
 80084fa:	60c6      	str	r6, [r0, #12]
 80084fc:	69e6      	ldr	r6, [r4, #28]
 80084fe:	68f3      	ldr	r3, [r6, #12]
 8008500:	b183      	cbz	r3, 8008524 <_Balloc+0x50>
 8008502:	69e3      	ldr	r3, [r4, #28]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800850a:	b9b8      	cbnz	r0, 800853c <_Balloc+0x68>
 800850c:	2101      	movs	r1, #1
 800850e:	fa01 f605 	lsl.w	r6, r1, r5
 8008512:	1d72      	adds	r2, r6, #5
 8008514:	0092      	lsls	r2, r2, #2
 8008516:	4620      	mov	r0, r4
 8008518:	f000 fd9a 	bl	8009050 <_calloc_r>
 800851c:	b160      	cbz	r0, 8008538 <_Balloc+0x64>
 800851e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008522:	e00e      	b.n	8008542 <_Balloc+0x6e>
 8008524:	2221      	movs	r2, #33	@ 0x21
 8008526:	2104      	movs	r1, #4
 8008528:	4620      	mov	r0, r4
 800852a:	f000 fd91 	bl	8009050 <_calloc_r>
 800852e:	69e3      	ldr	r3, [r4, #28]
 8008530:	60f0      	str	r0, [r6, #12]
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d1e4      	bne.n	8008502 <_Balloc+0x2e>
 8008538:	2000      	movs	r0, #0
 800853a:	bd70      	pop	{r4, r5, r6, pc}
 800853c:	6802      	ldr	r2, [r0, #0]
 800853e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008542:	2300      	movs	r3, #0
 8008544:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008548:	e7f7      	b.n	800853a <_Balloc+0x66>
 800854a:	bf00      	nop
 800854c:	0800976d 	.word	0x0800976d
 8008550:	080097ed 	.word	0x080097ed

08008554 <_Bfree>:
 8008554:	b570      	push	{r4, r5, r6, lr}
 8008556:	69c6      	ldr	r6, [r0, #28]
 8008558:	4605      	mov	r5, r0
 800855a:	460c      	mov	r4, r1
 800855c:	b976      	cbnz	r6, 800857c <_Bfree+0x28>
 800855e:	2010      	movs	r0, #16
 8008560:	f7fe f9f0 	bl	8006944 <malloc>
 8008564:	4602      	mov	r2, r0
 8008566:	61e8      	str	r0, [r5, #28]
 8008568:	b920      	cbnz	r0, 8008574 <_Bfree+0x20>
 800856a:	4b09      	ldr	r3, [pc, #36]	@ (8008590 <_Bfree+0x3c>)
 800856c:	4809      	ldr	r0, [pc, #36]	@ (8008594 <_Bfree+0x40>)
 800856e:	218f      	movs	r1, #143	@ 0x8f
 8008570:	f000 fd50 	bl	8009014 <__assert_func>
 8008574:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008578:	6006      	str	r6, [r0, #0]
 800857a:	60c6      	str	r6, [r0, #12]
 800857c:	b13c      	cbz	r4, 800858e <_Bfree+0x3a>
 800857e:	69eb      	ldr	r3, [r5, #28]
 8008580:	6862      	ldr	r2, [r4, #4]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008588:	6021      	str	r1, [r4, #0]
 800858a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800858e:	bd70      	pop	{r4, r5, r6, pc}
 8008590:	0800976d 	.word	0x0800976d
 8008594:	080097ed 	.word	0x080097ed

08008598 <__multadd>:
 8008598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800859c:	690d      	ldr	r5, [r1, #16]
 800859e:	4607      	mov	r7, r0
 80085a0:	460c      	mov	r4, r1
 80085a2:	461e      	mov	r6, r3
 80085a4:	f101 0c14 	add.w	ip, r1, #20
 80085a8:	2000      	movs	r0, #0
 80085aa:	f8dc 3000 	ldr.w	r3, [ip]
 80085ae:	b299      	uxth	r1, r3
 80085b0:	fb02 6101 	mla	r1, r2, r1, r6
 80085b4:	0c1e      	lsrs	r6, r3, #16
 80085b6:	0c0b      	lsrs	r3, r1, #16
 80085b8:	fb02 3306 	mla	r3, r2, r6, r3
 80085bc:	b289      	uxth	r1, r1
 80085be:	3001      	adds	r0, #1
 80085c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80085c4:	4285      	cmp	r5, r0
 80085c6:	f84c 1b04 	str.w	r1, [ip], #4
 80085ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085ce:	dcec      	bgt.n	80085aa <__multadd+0x12>
 80085d0:	b30e      	cbz	r6, 8008616 <__multadd+0x7e>
 80085d2:	68a3      	ldr	r3, [r4, #8]
 80085d4:	42ab      	cmp	r3, r5
 80085d6:	dc19      	bgt.n	800860c <__multadd+0x74>
 80085d8:	6861      	ldr	r1, [r4, #4]
 80085da:	4638      	mov	r0, r7
 80085dc:	3101      	adds	r1, #1
 80085de:	f7ff ff79 	bl	80084d4 <_Balloc>
 80085e2:	4680      	mov	r8, r0
 80085e4:	b928      	cbnz	r0, 80085f2 <__multadd+0x5a>
 80085e6:	4602      	mov	r2, r0
 80085e8:	4b0c      	ldr	r3, [pc, #48]	@ (800861c <__multadd+0x84>)
 80085ea:	480d      	ldr	r0, [pc, #52]	@ (8008620 <__multadd+0x88>)
 80085ec:	21ba      	movs	r1, #186	@ 0xba
 80085ee:	f000 fd11 	bl	8009014 <__assert_func>
 80085f2:	6922      	ldr	r2, [r4, #16]
 80085f4:	3202      	adds	r2, #2
 80085f6:	f104 010c 	add.w	r1, r4, #12
 80085fa:	0092      	lsls	r2, r2, #2
 80085fc:	300c      	adds	r0, #12
 80085fe:	f7ff f8c4 	bl	800778a <memcpy>
 8008602:	4621      	mov	r1, r4
 8008604:	4638      	mov	r0, r7
 8008606:	f7ff ffa5 	bl	8008554 <_Bfree>
 800860a:	4644      	mov	r4, r8
 800860c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008610:	3501      	adds	r5, #1
 8008612:	615e      	str	r6, [r3, #20]
 8008614:	6125      	str	r5, [r4, #16]
 8008616:	4620      	mov	r0, r4
 8008618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800861c:	080097dc 	.word	0x080097dc
 8008620:	080097ed 	.word	0x080097ed

08008624 <__hi0bits>:
 8008624:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008628:	4603      	mov	r3, r0
 800862a:	bf36      	itet	cc
 800862c:	0403      	lslcc	r3, r0, #16
 800862e:	2000      	movcs	r0, #0
 8008630:	2010      	movcc	r0, #16
 8008632:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008636:	bf3c      	itt	cc
 8008638:	021b      	lslcc	r3, r3, #8
 800863a:	3008      	addcc	r0, #8
 800863c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008640:	bf3c      	itt	cc
 8008642:	011b      	lslcc	r3, r3, #4
 8008644:	3004      	addcc	r0, #4
 8008646:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800864a:	bf3c      	itt	cc
 800864c:	009b      	lslcc	r3, r3, #2
 800864e:	3002      	addcc	r0, #2
 8008650:	2b00      	cmp	r3, #0
 8008652:	db05      	blt.n	8008660 <__hi0bits+0x3c>
 8008654:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008658:	f100 0001 	add.w	r0, r0, #1
 800865c:	bf08      	it	eq
 800865e:	2020      	moveq	r0, #32
 8008660:	4770      	bx	lr

08008662 <__lo0bits>:
 8008662:	6803      	ldr	r3, [r0, #0]
 8008664:	4602      	mov	r2, r0
 8008666:	f013 0007 	ands.w	r0, r3, #7
 800866a:	d00b      	beq.n	8008684 <__lo0bits+0x22>
 800866c:	07d9      	lsls	r1, r3, #31
 800866e:	d421      	bmi.n	80086b4 <__lo0bits+0x52>
 8008670:	0798      	lsls	r0, r3, #30
 8008672:	bf49      	itett	mi
 8008674:	085b      	lsrmi	r3, r3, #1
 8008676:	089b      	lsrpl	r3, r3, #2
 8008678:	2001      	movmi	r0, #1
 800867a:	6013      	strmi	r3, [r2, #0]
 800867c:	bf5c      	itt	pl
 800867e:	6013      	strpl	r3, [r2, #0]
 8008680:	2002      	movpl	r0, #2
 8008682:	4770      	bx	lr
 8008684:	b299      	uxth	r1, r3
 8008686:	b909      	cbnz	r1, 800868c <__lo0bits+0x2a>
 8008688:	0c1b      	lsrs	r3, r3, #16
 800868a:	2010      	movs	r0, #16
 800868c:	b2d9      	uxtb	r1, r3
 800868e:	b909      	cbnz	r1, 8008694 <__lo0bits+0x32>
 8008690:	3008      	adds	r0, #8
 8008692:	0a1b      	lsrs	r3, r3, #8
 8008694:	0719      	lsls	r1, r3, #28
 8008696:	bf04      	itt	eq
 8008698:	091b      	lsreq	r3, r3, #4
 800869a:	3004      	addeq	r0, #4
 800869c:	0799      	lsls	r1, r3, #30
 800869e:	bf04      	itt	eq
 80086a0:	089b      	lsreq	r3, r3, #2
 80086a2:	3002      	addeq	r0, #2
 80086a4:	07d9      	lsls	r1, r3, #31
 80086a6:	d403      	bmi.n	80086b0 <__lo0bits+0x4e>
 80086a8:	085b      	lsrs	r3, r3, #1
 80086aa:	f100 0001 	add.w	r0, r0, #1
 80086ae:	d003      	beq.n	80086b8 <__lo0bits+0x56>
 80086b0:	6013      	str	r3, [r2, #0]
 80086b2:	4770      	bx	lr
 80086b4:	2000      	movs	r0, #0
 80086b6:	4770      	bx	lr
 80086b8:	2020      	movs	r0, #32
 80086ba:	4770      	bx	lr

080086bc <__i2b>:
 80086bc:	b510      	push	{r4, lr}
 80086be:	460c      	mov	r4, r1
 80086c0:	2101      	movs	r1, #1
 80086c2:	f7ff ff07 	bl	80084d4 <_Balloc>
 80086c6:	4602      	mov	r2, r0
 80086c8:	b928      	cbnz	r0, 80086d6 <__i2b+0x1a>
 80086ca:	4b05      	ldr	r3, [pc, #20]	@ (80086e0 <__i2b+0x24>)
 80086cc:	4805      	ldr	r0, [pc, #20]	@ (80086e4 <__i2b+0x28>)
 80086ce:	f240 1145 	movw	r1, #325	@ 0x145
 80086d2:	f000 fc9f 	bl	8009014 <__assert_func>
 80086d6:	2301      	movs	r3, #1
 80086d8:	6144      	str	r4, [r0, #20]
 80086da:	6103      	str	r3, [r0, #16]
 80086dc:	bd10      	pop	{r4, pc}
 80086de:	bf00      	nop
 80086e0:	080097dc 	.word	0x080097dc
 80086e4:	080097ed 	.word	0x080097ed

080086e8 <__multiply>:
 80086e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ec:	4614      	mov	r4, r2
 80086ee:	690a      	ldr	r2, [r1, #16]
 80086f0:	6923      	ldr	r3, [r4, #16]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	bfa8      	it	ge
 80086f6:	4623      	movge	r3, r4
 80086f8:	460f      	mov	r7, r1
 80086fa:	bfa4      	itt	ge
 80086fc:	460c      	movge	r4, r1
 80086fe:	461f      	movge	r7, r3
 8008700:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008704:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008708:	68a3      	ldr	r3, [r4, #8]
 800870a:	6861      	ldr	r1, [r4, #4]
 800870c:	eb0a 0609 	add.w	r6, sl, r9
 8008710:	42b3      	cmp	r3, r6
 8008712:	b085      	sub	sp, #20
 8008714:	bfb8      	it	lt
 8008716:	3101      	addlt	r1, #1
 8008718:	f7ff fedc 	bl	80084d4 <_Balloc>
 800871c:	b930      	cbnz	r0, 800872c <__multiply+0x44>
 800871e:	4602      	mov	r2, r0
 8008720:	4b44      	ldr	r3, [pc, #272]	@ (8008834 <__multiply+0x14c>)
 8008722:	4845      	ldr	r0, [pc, #276]	@ (8008838 <__multiply+0x150>)
 8008724:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008728:	f000 fc74 	bl	8009014 <__assert_func>
 800872c:	f100 0514 	add.w	r5, r0, #20
 8008730:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008734:	462b      	mov	r3, r5
 8008736:	2200      	movs	r2, #0
 8008738:	4543      	cmp	r3, r8
 800873a:	d321      	bcc.n	8008780 <__multiply+0x98>
 800873c:	f107 0114 	add.w	r1, r7, #20
 8008740:	f104 0214 	add.w	r2, r4, #20
 8008744:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008748:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800874c:	9302      	str	r3, [sp, #8]
 800874e:	1b13      	subs	r3, r2, r4
 8008750:	3b15      	subs	r3, #21
 8008752:	f023 0303 	bic.w	r3, r3, #3
 8008756:	3304      	adds	r3, #4
 8008758:	f104 0715 	add.w	r7, r4, #21
 800875c:	42ba      	cmp	r2, r7
 800875e:	bf38      	it	cc
 8008760:	2304      	movcc	r3, #4
 8008762:	9301      	str	r3, [sp, #4]
 8008764:	9b02      	ldr	r3, [sp, #8]
 8008766:	9103      	str	r1, [sp, #12]
 8008768:	428b      	cmp	r3, r1
 800876a:	d80c      	bhi.n	8008786 <__multiply+0x9e>
 800876c:	2e00      	cmp	r6, #0
 800876e:	dd03      	ble.n	8008778 <__multiply+0x90>
 8008770:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008774:	2b00      	cmp	r3, #0
 8008776:	d05b      	beq.n	8008830 <__multiply+0x148>
 8008778:	6106      	str	r6, [r0, #16]
 800877a:	b005      	add	sp, #20
 800877c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008780:	f843 2b04 	str.w	r2, [r3], #4
 8008784:	e7d8      	b.n	8008738 <__multiply+0x50>
 8008786:	f8b1 a000 	ldrh.w	sl, [r1]
 800878a:	f1ba 0f00 	cmp.w	sl, #0
 800878e:	d024      	beq.n	80087da <__multiply+0xf2>
 8008790:	f104 0e14 	add.w	lr, r4, #20
 8008794:	46a9      	mov	r9, r5
 8008796:	f04f 0c00 	mov.w	ip, #0
 800879a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800879e:	f8d9 3000 	ldr.w	r3, [r9]
 80087a2:	fa1f fb87 	uxth.w	fp, r7
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	fb0a 330b 	mla	r3, sl, fp, r3
 80087ac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80087b0:	f8d9 7000 	ldr.w	r7, [r9]
 80087b4:	4463      	add	r3, ip
 80087b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80087ba:	fb0a c70b 	mla	r7, sl, fp, ip
 80087be:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80087c8:	4572      	cmp	r2, lr
 80087ca:	f849 3b04 	str.w	r3, [r9], #4
 80087ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80087d2:	d8e2      	bhi.n	800879a <__multiply+0xb2>
 80087d4:	9b01      	ldr	r3, [sp, #4]
 80087d6:	f845 c003 	str.w	ip, [r5, r3]
 80087da:	9b03      	ldr	r3, [sp, #12]
 80087dc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80087e0:	3104      	adds	r1, #4
 80087e2:	f1b9 0f00 	cmp.w	r9, #0
 80087e6:	d021      	beq.n	800882c <__multiply+0x144>
 80087e8:	682b      	ldr	r3, [r5, #0]
 80087ea:	f104 0c14 	add.w	ip, r4, #20
 80087ee:	46ae      	mov	lr, r5
 80087f0:	f04f 0a00 	mov.w	sl, #0
 80087f4:	f8bc b000 	ldrh.w	fp, [ip]
 80087f8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80087fc:	fb09 770b 	mla	r7, r9, fp, r7
 8008800:	4457      	add	r7, sl
 8008802:	b29b      	uxth	r3, r3
 8008804:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008808:	f84e 3b04 	str.w	r3, [lr], #4
 800880c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008810:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008814:	f8be 3000 	ldrh.w	r3, [lr]
 8008818:	fb09 330a 	mla	r3, r9, sl, r3
 800881c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008820:	4562      	cmp	r2, ip
 8008822:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008826:	d8e5      	bhi.n	80087f4 <__multiply+0x10c>
 8008828:	9f01      	ldr	r7, [sp, #4]
 800882a:	51eb      	str	r3, [r5, r7]
 800882c:	3504      	adds	r5, #4
 800882e:	e799      	b.n	8008764 <__multiply+0x7c>
 8008830:	3e01      	subs	r6, #1
 8008832:	e79b      	b.n	800876c <__multiply+0x84>
 8008834:	080097dc 	.word	0x080097dc
 8008838:	080097ed 	.word	0x080097ed

0800883c <__pow5mult>:
 800883c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008840:	4615      	mov	r5, r2
 8008842:	f012 0203 	ands.w	r2, r2, #3
 8008846:	4607      	mov	r7, r0
 8008848:	460e      	mov	r6, r1
 800884a:	d007      	beq.n	800885c <__pow5mult+0x20>
 800884c:	4c25      	ldr	r4, [pc, #148]	@ (80088e4 <__pow5mult+0xa8>)
 800884e:	3a01      	subs	r2, #1
 8008850:	2300      	movs	r3, #0
 8008852:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008856:	f7ff fe9f 	bl	8008598 <__multadd>
 800885a:	4606      	mov	r6, r0
 800885c:	10ad      	asrs	r5, r5, #2
 800885e:	d03d      	beq.n	80088dc <__pow5mult+0xa0>
 8008860:	69fc      	ldr	r4, [r7, #28]
 8008862:	b97c      	cbnz	r4, 8008884 <__pow5mult+0x48>
 8008864:	2010      	movs	r0, #16
 8008866:	f7fe f86d 	bl	8006944 <malloc>
 800886a:	4602      	mov	r2, r0
 800886c:	61f8      	str	r0, [r7, #28]
 800886e:	b928      	cbnz	r0, 800887c <__pow5mult+0x40>
 8008870:	4b1d      	ldr	r3, [pc, #116]	@ (80088e8 <__pow5mult+0xac>)
 8008872:	481e      	ldr	r0, [pc, #120]	@ (80088ec <__pow5mult+0xb0>)
 8008874:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008878:	f000 fbcc 	bl	8009014 <__assert_func>
 800887c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008880:	6004      	str	r4, [r0, #0]
 8008882:	60c4      	str	r4, [r0, #12]
 8008884:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008888:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800888c:	b94c      	cbnz	r4, 80088a2 <__pow5mult+0x66>
 800888e:	f240 2171 	movw	r1, #625	@ 0x271
 8008892:	4638      	mov	r0, r7
 8008894:	f7ff ff12 	bl	80086bc <__i2b>
 8008898:	2300      	movs	r3, #0
 800889a:	f8c8 0008 	str.w	r0, [r8, #8]
 800889e:	4604      	mov	r4, r0
 80088a0:	6003      	str	r3, [r0, #0]
 80088a2:	f04f 0900 	mov.w	r9, #0
 80088a6:	07eb      	lsls	r3, r5, #31
 80088a8:	d50a      	bpl.n	80088c0 <__pow5mult+0x84>
 80088aa:	4631      	mov	r1, r6
 80088ac:	4622      	mov	r2, r4
 80088ae:	4638      	mov	r0, r7
 80088b0:	f7ff ff1a 	bl	80086e8 <__multiply>
 80088b4:	4631      	mov	r1, r6
 80088b6:	4680      	mov	r8, r0
 80088b8:	4638      	mov	r0, r7
 80088ba:	f7ff fe4b 	bl	8008554 <_Bfree>
 80088be:	4646      	mov	r6, r8
 80088c0:	106d      	asrs	r5, r5, #1
 80088c2:	d00b      	beq.n	80088dc <__pow5mult+0xa0>
 80088c4:	6820      	ldr	r0, [r4, #0]
 80088c6:	b938      	cbnz	r0, 80088d8 <__pow5mult+0x9c>
 80088c8:	4622      	mov	r2, r4
 80088ca:	4621      	mov	r1, r4
 80088cc:	4638      	mov	r0, r7
 80088ce:	f7ff ff0b 	bl	80086e8 <__multiply>
 80088d2:	6020      	str	r0, [r4, #0]
 80088d4:	f8c0 9000 	str.w	r9, [r0]
 80088d8:	4604      	mov	r4, r0
 80088da:	e7e4      	b.n	80088a6 <__pow5mult+0x6a>
 80088dc:	4630      	mov	r0, r6
 80088de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088e2:	bf00      	nop
 80088e4:	08009848 	.word	0x08009848
 80088e8:	0800976d 	.word	0x0800976d
 80088ec:	080097ed 	.word	0x080097ed

080088f0 <__lshift>:
 80088f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088f4:	460c      	mov	r4, r1
 80088f6:	6849      	ldr	r1, [r1, #4]
 80088f8:	6923      	ldr	r3, [r4, #16]
 80088fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80088fe:	68a3      	ldr	r3, [r4, #8]
 8008900:	4607      	mov	r7, r0
 8008902:	4691      	mov	r9, r2
 8008904:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008908:	f108 0601 	add.w	r6, r8, #1
 800890c:	42b3      	cmp	r3, r6
 800890e:	db0b      	blt.n	8008928 <__lshift+0x38>
 8008910:	4638      	mov	r0, r7
 8008912:	f7ff fddf 	bl	80084d4 <_Balloc>
 8008916:	4605      	mov	r5, r0
 8008918:	b948      	cbnz	r0, 800892e <__lshift+0x3e>
 800891a:	4602      	mov	r2, r0
 800891c:	4b28      	ldr	r3, [pc, #160]	@ (80089c0 <__lshift+0xd0>)
 800891e:	4829      	ldr	r0, [pc, #164]	@ (80089c4 <__lshift+0xd4>)
 8008920:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008924:	f000 fb76 	bl	8009014 <__assert_func>
 8008928:	3101      	adds	r1, #1
 800892a:	005b      	lsls	r3, r3, #1
 800892c:	e7ee      	b.n	800890c <__lshift+0x1c>
 800892e:	2300      	movs	r3, #0
 8008930:	f100 0114 	add.w	r1, r0, #20
 8008934:	f100 0210 	add.w	r2, r0, #16
 8008938:	4618      	mov	r0, r3
 800893a:	4553      	cmp	r3, sl
 800893c:	db33      	blt.n	80089a6 <__lshift+0xb6>
 800893e:	6920      	ldr	r0, [r4, #16]
 8008940:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008944:	f104 0314 	add.w	r3, r4, #20
 8008948:	f019 091f 	ands.w	r9, r9, #31
 800894c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008950:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008954:	d02b      	beq.n	80089ae <__lshift+0xbe>
 8008956:	f1c9 0e20 	rsb	lr, r9, #32
 800895a:	468a      	mov	sl, r1
 800895c:	2200      	movs	r2, #0
 800895e:	6818      	ldr	r0, [r3, #0]
 8008960:	fa00 f009 	lsl.w	r0, r0, r9
 8008964:	4310      	orrs	r0, r2
 8008966:	f84a 0b04 	str.w	r0, [sl], #4
 800896a:	f853 2b04 	ldr.w	r2, [r3], #4
 800896e:	459c      	cmp	ip, r3
 8008970:	fa22 f20e 	lsr.w	r2, r2, lr
 8008974:	d8f3      	bhi.n	800895e <__lshift+0x6e>
 8008976:	ebac 0304 	sub.w	r3, ip, r4
 800897a:	3b15      	subs	r3, #21
 800897c:	f023 0303 	bic.w	r3, r3, #3
 8008980:	3304      	adds	r3, #4
 8008982:	f104 0015 	add.w	r0, r4, #21
 8008986:	4584      	cmp	ip, r0
 8008988:	bf38      	it	cc
 800898a:	2304      	movcc	r3, #4
 800898c:	50ca      	str	r2, [r1, r3]
 800898e:	b10a      	cbz	r2, 8008994 <__lshift+0xa4>
 8008990:	f108 0602 	add.w	r6, r8, #2
 8008994:	3e01      	subs	r6, #1
 8008996:	4638      	mov	r0, r7
 8008998:	612e      	str	r6, [r5, #16]
 800899a:	4621      	mov	r1, r4
 800899c:	f7ff fdda 	bl	8008554 <_Bfree>
 80089a0:	4628      	mov	r0, r5
 80089a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80089aa:	3301      	adds	r3, #1
 80089ac:	e7c5      	b.n	800893a <__lshift+0x4a>
 80089ae:	3904      	subs	r1, #4
 80089b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80089b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80089b8:	459c      	cmp	ip, r3
 80089ba:	d8f9      	bhi.n	80089b0 <__lshift+0xc0>
 80089bc:	e7ea      	b.n	8008994 <__lshift+0xa4>
 80089be:	bf00      	nop
 80089c0:	080097dc 	.word	0x080097dc
 80089c4:	080097ed 	.word	0x080097ed

080089c8 <__mcmp>:
 80089c8:	690a      	ldr	r2, [r1, #16]
 80089ca:	4603      	mov	r3, r0
 80089cc:	6900      	ldr	r0, [r0, #16]
 80089ce:	1a80      	subs	r0, r0, r2
 80089d0:	b530      	push	{r4, r5, lr}
 80089d2:	d10e      	bne.n	80089f2 <__mcmp+0x2a>
 80089d4:	3314      	adds	r3, #20
 80089d6:	3114      	adds	r1, #20
 80089d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80089dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80089e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80089e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80089e8:	4295      	cmp	r5, r2
 80089ea:	d003      	beq.n	80089f4 <__mcmp+0x2c>
 80089ec:	d205      	bcs.n	80089fa <__mcmp+0x32>
 80089ee:	f04f 30ff 	mov.w	r0, #4294967295
 80089f2:	bd30      	pop	{r4, r5, pc}
 80089f4:	42a3      	cmp	r3, r4
 80089f6:	d3f3      	bcc.n	80089e0 <__mcmp+0x18>
 80089f8:	e7fb      	b.n	80089f2 <__mcmp+0x2a>
 80089fa:	2001      	movs	r0, #1
 80089fc:	e7f9      	b.n	80089f2 <__mcmp+0x2a>
	...

08008a00 <__mdiff>:
 8008a00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a04:	4689      	mov	r9, r1
 8008a06:	4606      	mov	r6, r0
 8008a08:	4611      	mov	r1, r2
 8008a0a:	4648      	mov	r0, r9
 8008a0c:	4614      	mov	r4, r2
 8008a0e:	f7ff ffdb 	bl	80089c8 <__mcmp>
 8008a12:	1e05      	subs	r5, r0, #0
 8008a14:	d112      	bne.n	8008a3c <__mdiff+0x3c>
 8008a16:	4629      	mov	r1, r5
 8008a18:	4630      	mov	r0, r6
 8008a1a:	f7ff fd5b 	bl	80084d4 <_Balloc>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	b928      	cbnz	r0, 8008a2e <__mdiff+0x2e>
 8008a22:	4b3f      	ldr	r3, [pc, #252]	@ (8008b20 <__mdiff+0x120>)
 8008a24:	f240 2137 	movw	r1, #567	@ 0x237
 8008a28:	483e      	ldr	r0, [pc, #248]	@ (8008b24 <__mdiff+0x124>)
 8008a2a:	f000 faf3 	bl	8009014 <__assert_func>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a34:	4610      	mov	r0, r2
 8008a36:	b003      	add	sp, #12
 8008a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a3c:	bfbc      	itt	lt
 8008a3e:	464b      	movlt	r3, r9
 8008a40:	46a1      	movlt	r9, r4
 8008a42:	4630      	mov	r0, r6
 8008a44:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008a48:	bfba      	itte	lt
 8008a4a:	461c      	movlt	r4, r3
 8008a4c:	2501      	movlt	r5, #1
 8008a4e:	2500      	movge	r5, #0
 8008a50:	f7ff fd40 	bl	80084d4 <_Balloc>
 8008a54:	4602      	mov	r2, r0
 8008a56:	b918      	cbnz	r0, 8008a60 <__mdiff+0x60>
 8008a58:	4b31      	ldr	r3, [pc, #196]	@ (8008b20 <__mdiff+0x120>)
 8008a5a:	f240 2145 	movw	r1, #581	@ 0x245
 8008a5e:	e7e3      	b.n	8008a28 <__mdiff+0x28>
 8008a60:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008a64:	6926      	ldr	r6, [r4, #16]
 8008a66:	60c5      	str	r5, [r0, #12]
 8008a68:	f109 0310 	add.w	r3, r9, #16
 8008a6c:	f109 0514 	add.w	r5, r9, #20
 8008a70:	f104 0e14 	add.w	lr, r4, #20
 8008a74:	f100 0b14 	add.w	fp, r0, #20
 8008a78:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008a7c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008a80:	9301      	str	r3, [sp, #4]
 8008a82:	46d9      	mov	r9, fp
 8008a84:	f04f 0c00 	mov.w	ip, #0
 8008a88:	9b01      	ldr	r3, [sp, #4]
 8008a8a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008a8e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008a92:	9301      	str	r3, [sp, #4]
 8008a94:	fa1f f38a 	uxth.w	r3, sl
 8008a98:	4619      	mov	r1, r3
 8008a9a:	b283      	uxth	r3, r0
 8008a9c:	1acb      	subs	r3, r1, r3
 8008a9e:	0c00      	lsrs	r0, r0, #16
 8008aa0:	4463      	add	r3, ip
 8008aa2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008aa6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008ab0:	4576      	cmp	r6, lr
 8008ab2:	f849 3b04 	str.w	r3, [r9], #4
 8008ab6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008aba:	d8e5      	bhi.n	8008a88 <__mdiff+0x88>
 8008abc:	1b33      	subs	r3, r6, r4
 8008abe:	3b15      	subs	r3, #21
 8008ac0:	f023 0303 	bic.w	r3, r3, #3
 8008ac4:	3415      	adds	r4, #21
 8008ac6:	3304      	adds	r3, #4
 8008ac8:	42a6      	cmp	r6, r4
 8008aca:	bf38      	it	cc
 8008acc:	2304      	movcc	r3, #4
 8008ace:	441d      	add	r5, r3
 8008ad0:	445b      	add	r3, fp
 8008ad2:	461e      	mov	r6, r3
 8008ad4:	462c      	mov	r4, r5
 8008ad6:	4544      	cmp	r4, r8
 8008ad8:	d30e      	bcc.n	8008af8 <__mdiff+0xf8>
 8008ada:	f108 0103 	add.w	r1, r8, #3
 8008ade:	1b49      	subs	r1, r1, r5
 8008ae0:	f021 0103 	bic.w	r1, r1, #3
 8008ae4:	3d03      	subs	r5, #3
 8008ae6:	45a8      	cmp	r8, r5
 8008ae8:	bf38      	it	cc
 8008aea:	2100      	movcc	r1, #0
 8008aec:	440b      	add	r3, r1
 8008aee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008af2:	b191      	cbz	r1, 8008b1a <__mdiff+0x11a>
 8008af4:	6117      	str	r7, [r2, #16]
 8008af6:	e79d      	b.n	8008a34 <__mdiff+0x34>
 8008af8:	f854 1b04 	ldr.w	r1, [r4], #4
 8008afc:	46e6      	mov	lr, ip
 8008afe:	0c08      	lsrs	r0, r1, #16
 8008b00:	fa1c fc81 	uxtah	ip, ip, r1
 8008b04:	4471      	add	r1, lr
 8008b06:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008b0a:	b289      	uxth	r1, r1
 8008b0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008b10:	f846 1b04 	str.w	r1, [r6], #4
 8008b14:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b18:	e7dd      	b.n	8008ad6 <__mdiff+0xd6>
 8008b1a:	3f01      	subs	r7, #1
 8008b1c:	e7e7      	b.n	8008aee <__mdiff+0xee>
 8008b1e:	bf00      	nop
 8008b20:	080097dc 	.word	0x080097dc
 8008b24:	080097ed 	.word	0x080097ed

08008b28 <__d2b>:
 8008b28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b2c:	460f      	mov	r7, r1
 8008b2e:	2101      	movs	r1, #1
 8008b30:	ec59 8b10 	vmov	r8, r9, d0
 8008b34:	4616      	mov	r6, r2
 8008b36:	f7ff fccd 	bl	80084d4 <_Balloc>
 8008b3a:	4604      	mov	r4, r0
 8008b3c:	b930      	cbnz	r0, 8008b4c <__d2b+0x24>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	4b23      	ldr	r3, [pc, #140]	@ (8008bd0 <__d2b+0xa8>)
 8008b42:	4824      	ldr	r0, [pc, #144]	@ (8008bd4 <__d2b+0xac>)
 8008b44:	f240 310f 	movw	r1, #783	@ 0x30f
 8008b48:	f000 fa64 	bl	8009014 <__assert_func>
 8008b4c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b54:	b10d      	cbz	r5, 8008b5a <__d2b+0x32>
 8008b56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b5a:	9301      	str	r3, [sp, #4]
 8008b5c:	f1b8 0300 	subs.w	r3, r8, #0
 8008b60:	d023      	beq.n	8008baa <__d2b+0x82>
 8008b62:	4668      	mov	r0, sp
 8008b64:	9300      	str	r3, [sp, #0]
 8008b66:	f7ff fd7c 	bl	8008662 <__lo0bits>
 8008b6a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008b6e:	b1d0      	cbz	r0, 8008ba6 <__d2b+0x7e>
 8008b70:	f1c0 0320 	rsb	r3, r0, #32
 8008b74:	fa02 f303 	lsl.w	r3, r2, r3
 8008b78:	430b      	orrs	r3, r1
 8008b7a:	40c2      	lsrs	r2, r0
 8008b7c:	6163      	str	r3, [r4, #20]
 8008b7e:	9201      	str	r2, [sp, #4]
 8008b80:	9b01      	ldr	r3, [sp, #4]
 8008b82:	61a3      	str	r3, [r4, #24]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	bf0c      	ite	eq
 8008b88:	2201      	moveq	r2, #1
 8008b8a:	2202      	movne	r2, #2
 8008b8c:	6122      	str	r2, [r4, #16]
 8008b8e:	b1a5      	cbz	r5, 8008bba <__d2b+0x92>
 8008b90:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008b94:	4405      	add	r5, r0
 8008b96:	603d      	str	r5, [r7, #0]
 8008b98:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008b9c:	6030      	str	r0, [r6, #0]
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	b003      	add	sp, #12
 8008ba2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ba6:	6161      	str	r1, [r4, #20]
 8008ba8:	e7ea      	b.n	8008b80 <__d2b+0x58>
 8008baa:	a801      	add	r0, sp, #4
 8008bac:	f7ff fd59 	bl	8008662 <__lo0bits>
 8008bb0:	9b01      	ldr	r3, [sp, #4]
 8008bb2:	6163      	str	r3, [r4, #20]
 8008bb4:	3020      	adds	r0, #32
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	e7e8      	b.n	8008b8c <__d2b+0x64>
 8008bba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008bbe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008bc2:	6038      	str	r0, [r7, #0]
 8008bc4:	6918      	ldr	r0, [r3, #16]
 8008bc6:	f7ff fd2d 	bl	8008624 <__hi0bits>
 8008bca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008bce:	e7e5      	b.n	8008b9c <__d2b+0x74>
 8008bd0:	080097dc 	.word	0x080097dc
 8008bd4:	080097ed 	.word	0x080097ed

08008bd8 <__ssputs_r>:
 8008bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bdc:	688e      	ldr	r6, [r1, #8]
 8008bde:	461f      	mov	r7, r3
 8008be0:	42be      	cmp	r6, r7
 8008be2:	680b      	ldr	r3, [r1, #0]
 8008be4:	4682      	mov	sl, r0
 8008be6:	460c      	mov	r4, r1
 8008be8:	4690      	mov	r8, r2
 8008bea:	d82d      	bhi.n	8008c48 <__ssputs_r+0x70>
 8008bec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008bf0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008bf4:	d026      	beq.n	8008c44 <__ssputs_r+0x6c>
 8008bf6:	6965      	ldr	r5, [r4, #20]
 8008bf8:	6909      	ldr	r1, [r1, #16]
 8008bfa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bfe:	eba3 0901 	sub.w	r9, r3, r1
 8008c02:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c06:	1c7b      	adds	r3, r7, #1
 8008c08:	444b      	add	r3, r9
 8008c0a:	106d      	asrs	r5, r5, #1
 8008c0c:	429d      	cmp	r5, r3
 8008c0e:	bf38      	it	cc
 8008c10:	461d      	movcc	r5, r3
 8008c12:	0553      	lsls	r3, r2, #21
 8008c14:	d527      	bpl.n	8008c66 <__ssputs_r+0x8e>
 8008c16:	4629      	mov	r1, r5
 8008c18:	f7fd fec6 	bl	80069a8 <_malloc_r>
 8008c1c:	4606      	mov	r6, r0
 8008c1e:	b360      	cbz	r0, 8008c7a <__ssputs_r+0xa2>
 8008c20:	6921      	ldr	r1, [r4, #16]
 8008c22:	464a      	mov	r2, r9
 8008c24:	f7fe fdb1 	bl	800778a <memcpy>
 8008c28:	89a3      	ldrh	r3, [r4, #12]
 8008c2a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008c2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c32:	81a3      	strh	r3, [r4, #12]
 8008c34:	6126      	str	r6, [r4, #16]
 8008c36:	6165      	str	r5, [r4, #20]
 8008c38:	444e      	add	r6, r9
 8008c3a:	eba5 0509 	sub.w	r5, r5, r9
 8008c3e:	6026      	str	r6, [r4, #0]
 8008c40:	60a5      	str	r5, [r4, #8]
 8008c42:	463e      	mov	r6, r7
 8008c44:	42be      	cmp	r6, r7
 8008c46:	d900      	bls.n	8008c4a <__ssputs_r+0x72>
 8008c48:	463e      	mov	r6, r7
 8008c4a:	6820      	ldr	r0, [r4, #0]
 8008c4c:	4632      	mov	r2, r6
 8008c4e:	4641      	mov	r1, r8
 8008c50:	f000 f9c6 	bl	8008fe0 <memmove>
 8008c54:	68a3      	ldr	r3, [r4, #8]
 8008c56:	1b9b      	subs	r3, r3, r6
 8008c58:	60a3      	str	r3, [r4, #8]
 8008c5a:	6823      	ldr	r3, [r4, #0]
 8008c5c:	4433      	add	r3, r6
 8008c5e:	6023      	str	r3, [r4, #0]
 8008c60:	2000      	movs	r0, #0
 8008c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c66:	462a      	mov	r2, r5
 8008c68:	f000 fa18 	bl	800909c <_realloc_r>
 8008c6c:	4606      	mov	r6, r0
 8008c6e:	2800      	cmp	r0, #0
 8008c70:	d1e0      	bne.n	8008c34 <__ssputs_r+0x5c>
 8008c72:	6921      	ldr	r1, [r4, #16]
 8008c74:	4650      	mov	r0, sl
 8008c76:	f7ff fbe3 	bl	8008440 <_free_r>
 8008c7a:	230c      	movs	r3, #12
 8008c7c:	f8ca 3000 	str.w	r3, [sl]
 8008c80:	89a3      	ldrh	r3, [r4, #12]
 8008c82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c86:	81a3      	strh	r3, [r4, #12]
 8008c88:	f04f 30ff 	mov.w	r0, #4294967295
 8008c8c:	e7e9      	b.n	8008c62 <__ssputs_r+0x8a>
	...

08008c90 <_svfiprintf_r>:
 8008c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c94:	4698      	mov	r8, r3
 8008c96:	898b      	ldrh	r3, [r1, #12]
 8008c98:	061b      	lsls	r3, r3, #24
 8008c9a:	b09d      	sub	sp, #116	@ 0x74
 8008c9c:	4607      	mov	r7, r0
 8008c9e:	460d      	mov	r5, r1
 8008ca0:	4614      	mov	r4, r2
 8008ca2:	d510      	bpl.n	8008cc6 <_svfiprintf_r+0x36>
 8008ca4:	690b      	ldr	r3, [r1, #16]
 8008ca6:	b973      	cbnz	r3, 8008cc6 <_svfiprintf_r+0x36>
 8008ca8:	2140      	movs	r1, #64	@ 0x40
 8008caa:	f7fd fe7d 	bl	80069a8 <_malloc_r>
 8008cae:	6028      	str	r0, [r5, #0]
 8008cb0:	6128      	str	r0, [r5, #16]
 8008cb2:	b930      	cbnz	r0, 8008cc2 <_svfiprintf_r+0x32>
 8008cb4:	230c      	movs	r3, #12
 8008cb6:	603b      	str	r3, [r7, #0]
 8008cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cbc:	b01d      	add	sp, #116	@ 0x74
 8008cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cc2:	2340      	movs	r3, #64	@ 0x40
 8008cc4:	616b      	str	r3, [r5, #20]
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cca:	2320      	movs	r3, #32
 8008ccc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008cd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cd4:	2330      	movs	r3, #48	@ 0x30
 8008cd6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008e74 <_svfiprintf_r+0x1e4>
 8008cda:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008cde:	f04f 0901 	mov.w	r9, #1
 8008ce2:	4623      	mov	r3, r4
 8008ce4:	469a      	mov	sl, r3
 8008ce6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cea:	b10a      	cbz	r2, 8008cf0 <_svfiprintf_r+0x60>
 8008cec:	2a25      	cmp	r2, #37	@ 0x25
 8008cee:	d1f9      	bne.n	8008ce4 <_svfiprintf_r+0x54>
 8008cf0:	ebba 0b04 	subs.w	fp, sl, r4
 8008cf4:	d00b      	beq.n	8008d0e <_svfiprintf_r+0x7e>
 8008cf6:	465b      	mov	r3, fp
 8008cf8:	4622      	mov	r2, r4
 8008cfa:	4629      	mov	r1, r5
 8008cfc:	4638      	mov	r0, r7
 8008cfe:	f7ff ff6b 	bl	8008bd8 <__ssputs_r>
 8008d02:	3001      	adds	r0, #1
 8008d04:	f000 80a7 	beq.w	8008e56 <_svfiprintf_r+0x1c6>
 8008d08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d0a:	445a      	add	r2, fp
 8008d0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d0e:	f89a 3000 	ldrb.w	r3, [sl]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	f000 809f 	beq.w	8008e56 <_svfiprintf_r+0x1c6>
 8008d18:	2300      	movs	r3, #0
 8008d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d22:	f10a 0a01 	add.w	sl, sl, #1
 8008d26:	9304      	str	r3, [sp, #16]
 8008d28:	9307      	str	r3, [sp, #28]
 8008d2a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d2e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d30:	4654      	mov	r4, sl
 8008d32:	2205      	movs	r2, #5
 8008d34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d38:	484e      	ldr	r0, [pc, #312]	@ (8008e74 <_svfiprintf_r+0x1e4>)
 8008d3a:	f7f7 fa51 	bl	80001e0 <memchr>
 8008d3e:	9a04      	ldr	r2, [sp, #16]
 8008d40:	b9d8      	cbnz	r0, 8008d7a <_svfiprintf_r+0xea>
 8008d42:	06d0      	lsls	r0, r2, #27
 8008d44:	bf44      	itt	mi
 8008d46:	2320      	movmi	r3, #32
 8008d48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d4c:	0711      	lsls	r1, r2, #28
 8008d4e:	bf44      	itt	mi
 8008d50:	232b      	movmi	r3, #43	@ 0x2b
 8008d52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d56:	f89a 3000 	ldrb.w	r3, [sl]
 8008d5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d5c:	d015      	beq.n	8008d8a <_svfiprintf_r+0xfa>
 8008d5e:	9a07      	ldr	r2, [sp, #28]
 8008d60:	4654      	mov	r4, sl
 8008d62:	2000      	movs	r0, #0
 8008d64:	f04f 0c0a 	mov.w	ip, #10
 8008d68:	4621      	mov	r1, r4
 8008d6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d6e:	3b30      	subs	r3, #48	@ 0x30
 8008d70:	2b09      	cmp	r3, #9
 8008d72:	d94b      	bls.n	8008e0c <_svfiprintf_r+0x17c>
 8008d74:	b1b0      	cbz	r0, 8008da4 <_svfiprintf_r+0x114>
 8008d76:	9207      	str	r2, [sp, #28]
 8008d78:	e014      	b.n	8008da4 <_svfiprintf_r+0x114>
 8008d7a:	eba0 0308 	sub.w	r3, r0, r8
 8008d7e:	fa09 f303 	lsl.w	r3, r9, r3
 8008d82:	4313      	orrs	r3, r2
 8008d84:	9304      	str	r3, [sp, #16]
 8008d86:	46a2      	mov	sl, r4
 8008d88:	e7d2      	b.n	8008d30 <_svfiprintf_r+0xa0>
 8008d8a:	9b03      	ldr	r3, [sp, #12]
 8008d8c:	1d19      	adds	r1, r3, #4
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	9103      	str	r1, [sp, #12]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	bfbb      	ittet	lt
 8008d96:	425b      	neglt	r3, r3
 8008d98:	f042 0202 	orrlt.w	r2, r2, #2
 8008d9c:	9307      	strge	r3, [sp, #28]
 8008d9e:	9307      	strlt	r3, [sp, #28]
 8008da0:	bfb8      	it	lt
 8008da2:	9204      	strlt	r2, [sp, #16]
 8008da4:	7823      	ldrb	r3, [r4, #0]
 8008da6:	2b2e      	cmp	r3, #46	@ 0x2e
 8008da8:	d10a      	bne.n	8008dc0 <_svfiprintf_r+0x130>
 8008daa:	7863      	ldrb	r3, [r4, #1]
 8008dac:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dae:	d132      	bne.n	8008e16 <_svfiprintf_r+0x186>
 8008db0:	9b03      	ldr	r3, [sp, #12]
 8008db2:	1d1a      	adds	r2, r3, #4
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	9203      	str	r2, [sp, #12]
 8008db8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008dbc:	3402      	adds	r4, #2
 8008dbe:	9305      	str	r3, [sp, #20]
 8008dc0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008e84 <_svfiprintf_r+0x1f4>
 8008dc4:	7821      	ldrb	r1, [r4, #0]
 8008dc6:	2203      	movs	r2, #3
 8008dc8:	4650      	mov	r0, sl
 8008dca:	f7f7 fa09 	bl	80001e0 <memchr>
 8008dce:	b138      	cbz	r0, 8008de0 <_svfiprintf_r+0x150>
 8008dd0:	9b04      	ldr	r3, [sp, #16]
 8008dd2:	eba0 000a 	sub.w	r0, r0, sl
 8008dd6:	2240      	movs	r2, #64	@ 0x40
 8008dd8:	4082      	lsls	r2, r0
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	3401      	adds	r4, #1
 8008dde:	9304      	str	r3, [sp, #16]
 8008de0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008de4:	4824      	ldr	r0, [pc, #144]	@ (8008e78 <_svfiprintf_r+0x1e8>)
 8008de6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008dea:	2206      	movs	r2, #6
 8008dec:	f7f7 f9f8 	bl	80001e0 <memchr>
 8008df0:	2800      	cmp	r0, #0
 8008df2:	d036      	beq.n	8008e62 <_svfiprintf_r+0x1d2>
 8008df4:	4b21      	ldr	r3, [pc, #132]	@ (8008e7c <_svfiprintf_r+0x1ec>)
 8008df6:	bb1b      	cbnz	r3, 8008e40 <_svfiprintf_r+0x1b0>
 8008df8:	9b03      	ldr	r3, [sp, #12]
 8008dfa:	3307      	adds	r3, #7
 8008dfc:	f023 0307 	bic.w	r3, r3, #7
 8008e00:	3308      	adds	r3, #8
 8008e02:	9303      	str	r3, [sp, #12]
 8008e04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e06:	4433      	add	r3, r6
 8008e08:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e0a:	e76a      	b.n	8008ce2 <_svfiprintf_r+0x52>
 8008e0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e10:	460c      	mov	r4, r1
 8008e12:	2001      	movs	r0, #1
 8008e14:	e7a8      	b.n	8008d68 <_svfiprintf_r+0xd8>
 8008e16:	2300      	movs	r3, #0
 8008e18:	3401      	adds	r4, #1
 8008e1a:	9305      	str	r3, [sp, #20]
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	f04f 0c0a 	mov.w	ip, #10
 8008e22:	4620      	mov	r0, r4
 8008e24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e28:	3a30      	subs	r2, #48	@ 0x30
 8008e2a:	2a09      	cmp	r2, #9
 8008e2c:	d903      	bls.n	8008e36 <_svfiprintf_r+0x1a6>
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d0c6      	beq.n	8008dc0 <_svfiprintf_r+0x130>
 8008e32:	9105      	str	r1, [sp, #20]
 8008e34:	e7c4      	b.n	8008dc0 <_svfiprintf_r+0x130>
 8008e36:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e3a:	4604      	mov	r4, r0
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	e7f0      	b.n	8008e22 <_svfiprintf_r+0x192>
 8008e40:	ab03      	add	r3, sp, #12
 8008e42:	9300      	str	r3, [sp, #0]
 8008e44:	462a      	mov	r2, r5
 8008e46:	4b0e      	ldr	r3, [pc, #56]	@ (8008e80 <_svfiprintf_r+0x1f0>)
 8008e48:	a904      	add	r1, sp, #16
 8008e4a:	4638      	mov	r0, r7
 8008e4c:	f7fd fed8 	bl	8006c00 <_printf_float>
 8008e50:	1c42      	adds	r2, r0, #1
 8008e52:	4606      	mov	r6, r0
 8008e54:	d1d6      	bne.n	8008e04 <_svfiprintf_r+0x174>
 8008e56:	89ab      	ldrh	r3, [r5, #12]
 8008e58:	065b      	lsls	r3, r3, #25
 8008e5a:	f53f af2d 	bmi.w	8008cb8 <_svfiprintf_r+0x28>
 8008e5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e60:	e72c      	b.n	8008cbc <_svfiprintf_r+0x2c>
 8008e62:	ab03      	add	r3, sp, #12
 8008e64:	9300      	str	r3, [sp, #0]
 8008e66:	462a      	mov	r2, r5
 8008e68:	4b05      	ldr	r3, [pc, #20]	@ (8008e80 <_svfiprintf_r+0x1f0>)
 8008e6a:	a904      	add	r1, sp, #16
 8008e6c:	4638      	mov	r0, r7
 8008e6e:	f7fe f95f 	bl	8007130 <_printf_i>
 8008e72:	e7ed      	b.n	8008e50 <_svfiprintf_r+0x1c0>
 8008e74:	08009948 	.word	0x08009948
 8008e78:	08009952 	.word	0x08009952
 8008e7c:	08006c01 	.word	0x08006c01
 8008e80:	08008bd9 	.word	0x08008bd9
 8008e84:	0800994e 	.word	0x0800994e

08008e88 <__sflush_r>:
 8008e88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e90:	0716      	lsls	r6, r2, #28
 8008e92:	4605      	mov	r5, r0
 8008e94:	460c      	mov	r4, r1
 8008e96:	d454      	bmi.n	8008f42 <__sflush_r+0xba>
 8008e98:	684b      	ldr	r3, [r1, #4]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	dc02      	bgt.n	8008ea4 <__sflush_r+0x1c>
 8008e9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	dd48      	ble.n	8008f36 <__sflush_r+0xae>
 8008ea4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ea6:	2e00      	cmp	r6, #0
 8008ea8:	d045      	beq.n	8008f36 <__sflush_r+0xae>
 8008eaa:	2300      	movs	r3, #0
 8008eac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008eb0:	682f      	ldr	r7, [r5, #0]
 8008eb2:	6a21      	ldr	r1, [r4, #32]
 8008eb4:	602b      	str	r3, [r5, #0]
 8008eb6:	d030      	beq.n	8008f1a <__sflush_r+0x92>
 8008eb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008eba:	89a3      	ldrh	r3, [r4, #12]
 8008ebc:	0759      	lsls	r1, r3, #29
 8008ebe:	d505      	bpl.n	8008ecc <__sflush_r+0x44>
 8008ec0:	6863      	ldr	r3, [r4, #4]
 8008ec2:	1ad2      	subs	r2, r2, r3
 8008ec4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008ec6:	b10b      	cbz	r3, 8008ecc <__sflush_r+0x44>
 8008ec8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008eca:	1ad2      	subs	r2, r2, r3
 8008ecc:	2300      	movs	r3, #0
 8008ece:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ed0:	6a21      	ldr	r1, [r4, #32]
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	47b0      	blx	r6
 8008ed6:	1c43      	adds	r3, r0, #1
 8008ed8:	89a3      	ldrh	r3, [r4, #12]
 8008eda:	d106      	bne.n	8008eea <__sflush_r+0x62>
 8008edc:	6829      	ldr	r1, [r5, #0]
 8008ede:	291d      	cmp	r1, #29
 8008ee0:	d82b      	bhi.n	8008f3a <__sflush_r+0xb2>
 8008ee2:	4a2a      	ldr	r2, [pc, #168]	@ (8008f8c <__sflush_r+0x104>)
 8008ee4:	410a      	asrs	r2, r1
 8008ee6:	07d6      	lsls	r6, r2, #31
 8008ee8:	d427      	bmi.n	8008f3a <__sflush_r+0xb2>
 8008eea:	2200      	movs	r2, #0
 8008eec:	6062      	str	r2, [r4, #4]
 8008eee:	04d9      	lsls	r1, r3, #19
 8008ef0:	6922      	ldr	r2, [r4, #16]
 8008ef2:	6022      	str	r2, [r4, #0]
 8008ef4:	d504      	bpl.n	8008f00 <__sflush_r+0x78>
 8008ef6:	1c42      	adds	r2, r0, #1
 8008ef8:	d101      	bne.n	8008efe <__sflush_r+0x76>
 8008efa:	682b      	ldr	r3, [r5, #0]
 8008efc:	b903      	cbnz	r3, 8008f00 <__sflush_r+0x78>
 8008efe:	6560      	str	r0, [r4, #84]	@ 0x54
 8008f00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f02:	602f      	str	r7, [r5, #0]
 8008f04:	b1b9      	cbz	r1, 8008f36 <__sflush_r+0xae>
 8008f06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f0a:	4299      	cmp	r1, r3
 8008f0c:	d002      	beq.n	8008f14 <__sflush_r+0x8c>
 8008f0e:	4628      	mov	r0, r5
 8008f10:	f7ff fa96 	bl	8008440 <_free_r>
 8008f14:	2300      	movs	r3, #0
 8008f16:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f18:	e00d      	b.n	8008f36 <__sflush_r+0xae>
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	4628      	mov	r0, r5
 8008f1e:	47b0      	blx	r6
 8008f20:	4602      	mov	r2, r0
 8008f22:	1c50      	adds	r0, r2, #1
 8008f24:	d1c9      	bne.n	8008eba <__sflush_r+0x32>
 8008f26:	682b      	ldr	r3, [r5, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d0c6      	beq.n	8008eba <__sflush_r+0x32>
 8008f2c:	2b1d      	cmp	r3, #29
 8008f2e:	d001      	beq.n	8008f34 <__sflush_r+0xac>
 8008f30:	2b16      	cmp	r3, #22
 8008f32:	d11e      	bne.n	8008f72 <__sflush_r+0xea>
 8008f34:	602f      	str	r7, [r5, #0]
 8008f36:	2000      	movs	r0, #0
 8008f38:	e022      	b.n	8008f80 <__sflush_r+0xf8>
 8008f3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f3e:	b21b      	sxth	r3, r3
 8008f40:	e01b      	b.n	8008f7a <__sflush_r+0xf2>
 8008f42:	690f      	ldr	r7, [r1, #16]
 8008f44:	2f00      	cmp	r7, #0
 8008f46:	d0f6      	beq.n	8008f36 <__sflush_r+0xae>
 8008f48:	0793      	lsls	r3, r2, #30
 8008f4a:	680e      	ldr	r6, [r1, #0]
 8008f4c:	bf08      	it	eq
 8008f4e:	694b      	ldreq	r3, [r1, #20]
 8008f50:	600f      	str	r7, [r1, #0]
 8008f52:	bf18      	it	ne
 8008f54:	2300      	movne	r3, #0
 8008f56:	eba6 0807 	sub.w	r8, r6, r7
 8008f5a:	608b      	str	r3, [r1, #8]
 8008f5c:	f1b8 0f00 	cmp.w	r8, #0
 8008f60:	dde9      	ble.n	8008f36 <__sflush_r+0xae>
 8008f62:	6a21      	ldr	r1, [r4, #32]
 8008f64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008f66:	4643      	mov	r3, r8
 8008f68:	463a      	mov	r2, r7
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	47b0      	blx	r6
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	dc08      	bgt.n	8008f84 <__sflush_r+0xfc>
 8008f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f7a:	81a3      	strh	r3, [r4, #12]
 8008f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f84:	4407      	add	r7, r0
 8008f86:	eba8 0800 	sub.w	r8, r8, r0
 8008f8a:	e7e7      	b.n	8008f5c <__sflush_r+0xd4>
 8008f8c:	dfbffffe 	.word	0xdfbffffe

08008f90 <_fflush_r>:
 8008f90:	b538      	push	{r3, r4, r5, lr}
 8008f92:	690b      	ldr	r3, [r1, #16]
 8008f94:	4605      	mov	r5, r0
 8008f96:	460c      	mov	r4, r1
 8008f98:	b913      	cbnz	r3, 8008fa0 <_fflush_r+0x10>
 8008f9a:	2500      	movs	r5, #0
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	bd38      	pop	{r3, r4, r5, pc}
 8008fa0:	b118      	cbz	r0, 8008faa <_fflush_r+0x1a>
 8008fa2:	6a03      	ldr	r3, [r0, #32]
 8008fa4:	b90b      	cbnz	r3, 8008faa <_fflush_r+0x1a>
 8008fa6:	f7fe fa6f 	bl	8007488 <__sinit>
 8008faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d0f3      	beq.n	8008f9a <_fflush_r+0xa>
 8008fb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008fb4:	07d0      	lsls	r0, r2, #31
 8008fb6:	d404      	bmi.n	8008fc2 <_fflush_r+0x32>
 8008fb8:	0599      	lsls	r1, r3, #22
 8008fba:	d402      	bmi.n	8008fc2 <_fflush_r+0x32>
 8008fbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008fbe:	f7fe fbe2 	bl	8007786 <__retarget_lock_acquire_recursive>
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	4621      	mov	r1, r4
 8008fc6:	f7ff ff5f 	bl	8008e88 <__sflush_r>
 8008fca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008fcc:	07da      	lsls	r2, r3, #31
 8008fce:	4605      	mov	r5, r0
 8008fd0:	d4e4      	bmi.n	8008f9c <_fflush_r+0xc>
 8008fd2:	89a3      	ldrh	r3, [r4, #12]
 8008fd4:	059b      	lsls	r3, r3, #22
 8008fd6:	d4e1      	bmi.n	8008f9c <_fflush_r+0xc>
 8008fd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008fda:	f7fe fbd5 	bl	8007788 <__retarget_lock_release_recursive>
 8008fde:	e7dd      	b.n	8008f9c <_fflush_r+0xc>

08008fe0 <memmove>:
 8008fe0:	4288      	cmp	r0, r1
 8008fe2:	b510      	push	{r4, lr}
 8008fe4:	eb01 0402 	add.w	r4, r1, r2
 8008fe8:	d902      	bls.n	8008ff0 <memmove+0x10>
 8008fea:	4284      	cmp	r4, r0
 8008fec:	4623      	mov	r3, r4
 8008fee:	d807      	bhi.n	8009000 <memmove+0x20>
 8008ff0:	1e43      	subs	r3, r0, #1
 8008ff2:	42a1      	cmp	r1, r4
 8008ff4:	d008      	beq.n	8009008 <memmove+0x28>
 8008ff6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ffa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ffe:	e7f8      	b.n	8008ff2 <memmove+0x12>
 8009000:	4402      	add	r2, r0
 8009002:	4601      	mov	r1, r0
 8009004:	428a      	cmp	r2, r1
 8009006:	d100      	bne.n	800900a <memmove+0x2a>
 8009008:	bd10      	pop	{r4, pc}
 800900a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800900e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009012:	e7f7      	b.n	8009004 <memmove+0x24>

08009014 <__assert_func>:
 8009014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009016:	4614      	mov	r4, r2
 8009018:	461a      	mov	r2, r3
 800901a:	4b09      	ldr	r3, [pc, #36]	@ (8009040 <__assert_func+0x2c>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4605      	mov	r5, r0
 8009020:	68d8      	ldr	r0, [r3, #12]
 8009022:	b954      	cbnz	r4, 800903a <__assert_func+0x26>
 8009024:	4b07      	ldr	r3, [pc, #28]	@ (8009044 <__assert_func+0x30>)
 8009026:	461c      	mov	r4, r3
 8009028:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800902c:	9100      	str	r1, [sp, #0]
 800902e:	462b      	mov	r3, r5
 8009030:	4905      	ldr	r1, [pc, #20]	@ (8009048 <__assert_func+0x34>)
 8009032:	f000 f86f 	bl	8009114 <fiprintf>
 8009036:	f7fd fc7d 	bl	8006934 <abort>
 800903a:	4b04      	ldr	r3, [pc, #16]	@ (800904c <__assert_func+0x38>)
 800903c:	e7f4      	b.n	8009028 <__assert_func+0x14>
 800903e:	bf00      	nop
 8009040:	20000018 	.word	0x20000018
 8009044:	0800999e 	.word	0x0800999e
 8009048:	08009970 	.word	0x08009970
 800904c:	08009963 	.word	0x08009963

08009050 <_calloc_r>:
 8009050:	b570      	push	{r4, r5, r6, lr}
 8009052:	fba1 5402 	umull	r5, r4, r1, r2
 8009056:	b93c      	cbnz	r4, 8009068 <_calloc_r+0x18>
 8009058:	4629      	mov	r1, r5
 800905a:	f7fd fca5 	bl	80069a8 <_malloc_r>
 800905e:	4606      	mov	r6, r0
 8009060:	b928      	cbnz	r0, 800906e <_calloc_r+0x1e>
 8009062:	2600      	movs	r6, #0
 8009064:	4630      	mov	r0, r6
 8009066:	bd70      	pop	{r4, r5, r6, pc}
 8009068:	220c      	movs	r2, #12
 800906a:	6002      	str	r2, [r0, #0]
 800906c:	e7f9      	b.n	8009062 <_calloc_r+0x12>
 800906e:	462a      	mov	r2, r5
 8009070:	4621      	mov	r1, r4
 8009072:	f7fe fab6 	bl	80075e2 <memset>
 8009076:	e7f5      	b.n	8009064 <_calloc_r+0x14>

08009078 <__ascii_mbtowc>:
 8009078:	b082      	sub	sp, #8
 800907a:	b901      	cbnz	r1, 800907e <__ascii_mbtowc+0x6>
 800907c:	a901      	add	r1, sp, #4
 800907e:	b142      	cbz	r2, 8009092 <__ascii_mbtowc+0x1a>
 8009080:	b14b      	cbz	r3, 8009096 <__ascii_mbtowc+0x1e>
 8009082:	7813      	ldrb	r3, [r2, #0]
 8009084:	600b      	str	r3, [r1, #0]
 8009086:	7812      	ldrb	r2, [r2, #0]
 8009088:	1e10      	subs	r0, r2, #0
 800908a:	bf18      	it	ne
 800908c:	2001      	movne	r0, #1
 800908e:	b002      	add	sp, #8
 8009090:	4770      	bx	lr
 8009092:	4610      	mov	r0, r2
 8009094:	e7fb      	b.n	800908e <__ascii_mbtowc+0x16>
 8009096:	f06f 0001 	mvn.w	r0, #1
 800909a:	e7f8      	b.n	800908e <__ascii_mbtowc+0x16>

0800909c <_realloc_r>:
 800909c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090a0:	4680      	mov	r8, r0
 80090a2:	4615      	mov	r5, r2
 80090a4:	460c      	mov	r4, r1
 80090a6:	b921      	cbnz	r1, 80090b2 <_realloc_r+0x16>
 80090a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090ac:	4611      	mov	r1, r2
 80090ae:	f7fd bc7b 	b.w	80069a8 <_malloc_r>
 80090b2:	b92a      	cbnz	r2, 80090c0 <_realloc_r+0x24>
 80090b4:	f7ff f9c4 	bl	8008440 <_free_r>
 80090b8:	2400      	movs	r4, #0
 80090ba:	4620      	mov	r0, r4
 80090bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090c0:	f000 f83a 	bl	8009138 <_malloc_usable_size_r>
 80090c4:	4285      	cmp	r5, r0
 80090c6:	4606      	mov	r6, r0
 80090c8:	d802      	bhi.n	80090d0 <_realloc_r+0x34>
 80090ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80090ce:	d8f4      	bhi.n	80090ba <_realloc_r+0x1e>
 80090d0:	4629      	mov	r1, r5
 80090d2:	4640      	mov	r0, r8
 80090d4:	f7fd fc68 	bl	80069a8 <_malloc_r>
 80090d8:	4607      	mov	r7, r0
 80090da:	2800      	cmp	r0, #0
 80090dc:	d0ec      	beq.n	80090b8 <_realloc_r+0x1c>
 80090de:	42b5      	cmp	r5, r6
 80090e0:	462a      	mov	r2, r5
 80090e2:	4621      	mov	r1, r4
 80090e4:	bf28      	it	cs
 80090e6:	4632      	movcs	r2, r6
 80090e8:	f7fe fb4f 	bl	800778a <memcpy>
 80090ec:	4621      	mov	r1, r4
 80090ee:	4640      	mov	r0, r8
 80090f0:	f7ff f9a6 	bl	8008440 <_free_r>
 80090f4:	463c      	mov	r4, r7
 80090f6:	e7e0      	b.n	80090ba <_realloc_r+0x1e>

080090f8 <__ascii_wctomb>:
 80090f8:	4603      	mov	r3, r0
 80090fa:	4608      	mov	r0, r1
 80090fc:	b141      	cbz	r1, 8009110 <__ascii_wctomb+0x18>
 80090fe:	2aff      	cmp	r2, #255	@ 0xff
 8009100:	d904      	bls.n	800910c <__ascii_wctomb+0x14>
 8009102:	228a      	movs	r2, #138	@ 0x8a
 8009104:	601a      	str	r2, [r3, #0]
 8009106:	f04f 30ff 	mov.w	r0, #4294967295
 800910a:	4770      	bx	lr
 800910c:	700a      	strb	r2, [r1, #0]
 800910e:	2001      	movs	r0, #1
 8009110:	4770      	bx	lr
	...

08009114 <fiprintf>:
 8009114:	b40e      	push	{r1, r2, r3}
 8009116:	b503      	push	{r0, r1, lr}
 8009118:	4601      	mov	r1, r0
 800911a:	ab03      	add	r3, sp, #12
 800911c:	4805      	ldr	r0, [pc, #20]	@ (8009134 <fiprintf+0x20>)
 800911e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009122:	6800      	ldr	r0, [r0, #0]
 8009124:	9301      	str	r3, [sp, #4]
 8009126:	f000 f839 	bl	800919c <_vfiprintf_r>
 800912a:	b002      	add	sp, #8
 800912c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009130:	b003      	add	sp, #12
 8009132:	4770      	bx	lr
 8009134:	20000018 	.word	0x20000018

08009138 <_malloc_usable_size_r>:
 8009138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800913c:	1f18      	subs	r0, r3, #4
 800913e:	2b00      	cmp	r3, #0
 8009140:	bfbc      	itt	lt
 8009142:	580b      	ldrlt	r3, [r1, r0]
 8009144:	18c0      	addlt	r0, r0, r3
 8009146:	4770      	bx	lr

08009148 <__sfputc_r>:
 8009148:	6893      	ldr	r3, [r2, #8]
 800914a:	3b01      	subs	r3, #1
 800914c:	2b00      	cmp	r3, #0
 800914e:	b410      	push	{r4}
 8009150:	6093      	str	r3, [r2, #8]
 8009152:	da08      	bge.n	8009166 <__sfputc_r+0x1e>
 8009154:	6994      	ldr	r4, [r2, #24]
 8009156:	42a3      	cmp	r3, r4
 8009158:	db01      	blt.n	800915e <__sfputc_r+0x16>
 800915a:	290a      	cmp	r1, #10
 800915c:	d103      	bne.n	8009166 <__sfputc_r+0x1e>
 800915e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009162:	f000 b933 	b.w	80093cc <__swbuf_r>
 8009166:	6813      	ldr	r3, [r2, #0]
 8009168:	1c58      	adds	r0, r3, #1
 800916a:	6010      	str	r0, [r2, #0]
 800916c:	7019      	strb	r1, [r3, #0]
 800916e:	4608      	mov	r0, r1
 8009170:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009174:	4770      	bx	lr

08009176 <__sfputs_r>:
 8009176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009178:	4606      	mov	r6, r0
 800917a:	460f      	mov	r7, r1
 800917c:	4614      	mov	r4, r2
 800917e:	18d5      	adds	r5, r2, r3
 8009180:	42ac      	cmp	r4, r5
 8009182:	d101      	bne.n	8009188 <__sfputs_r+0x12>
 8009184:	2000      	movs	r0, #0
 8009186:	e007      	b.n	8009198 <__sfputs_r+0x22>
 8009188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800918c:	463a      	mov	r2, r7
 800918e:	4630      	mov	r0, r6
 8009190:	f7ff ffda 	bl	8009148 <__sfputc_r>
 8009194:	1c43      	adds	r3, r0, #1
 8009196:	d1f3      	bne.n	8009180 <__sfputs_r+0xa>
 8009198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800919c <_vfiprintf_r>:
 800919c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a0:	460d      	mov	r5, r1
 80091a2:	b09d      	sub	sp, #116	@ 0x74
 80091a4:	4614      	mov	r4, r2
 80091a6:	4698      	mov	r8, r3
 80091a8:	4606      	mov	r6, r0
 80091aa:	b118      	cbz	r0, 80091b4 <_vfiprintf_r+0x18>
 80091ac:	6a03      	ldr	r3, [r0, #32]
 80091ae:	b90b      	cbnz	r3, 80091b4 <_vfiprintf_r+0x18>
 80091b0:	f7fe f96a 	bl	8007488 <__sinit>
 80091b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091b6:	07d9      	lsls	r1, r3, #31
 80091b8:	d405      	bmi.n	80091c6 <_vfiprintf_r+0x2a>
 80091ba:	89ab      	ldrh	r3, [r5, #12]
 80091bc:	059a      	lsls	r2, r3, #22
 80091be:	d402      	bmi.n	80091c6 <_vfiprintf_r+0x2a>
 80091c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091c2:	f7fe fae0 	bl	8007786 <__retarget_lock_acquire_recursive>
 80091c6:	89ab      	ldrh	r3, [r5, #12]
 80091c8:	071b      	lsls	r3, r3, #28
 80091ca:	d501      	bpl.n	80091d0 <_vfiprintf_r+0x34>
 80091cc:	692b      	ldr	r3, [r5, #16]
 80091ce:	b99b      	cbnz	r3, 80091f8 <_vfiprintf_r+0x5c>
 80091d0:	4629      	mov	r1, r5
 80091d2:	4630      	mov	r0, r6
 80091d4:	f000 f938 	bl	8009448 <__swsetup_r>
 80091d8:	b170      	cbz	r0, 80091f8 <_vfiprintf_r+0x5c>
 80091da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091dc:	07dc      	lsls	r4, r3, #31
 80091de:	d504      	bpl.n	80091ea <_vfiprintf_r+0x4e>
 80091e0:	f04f 30ff 	mov.w	r0, #4294967295
 80091e4:	b01d      	add	sp, #116	@ 0x74
 80091e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ea:	89ab      	ldrh	r3, [r5, #12]
 80091ec:	0598      	lsls	r0, r3, #22
 80091ee:	d4f7      	bmi.n	80091e0 <_vfiprintf_r+0x44>
 80091f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091f2:	f7fe fac9 	bl	8007788 <__retarget_lock_release_recursive>
 80091f6:	e7f3      	b.n	80091e0 <_vfiprintf_r+0x44>
 80091f8:	2300      	movs	r3, #0
 80091fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80091fc:	2320      	movs	r3, #32
 80091fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009202:	f8cd 800c 	str.w	r8, [sp, #12]
 8009206:	2330      	movs	r3, #48	@ 0x30
 8009208:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80093b8 <_vfiprintf_r+0x21c>
 800920c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009210:	f04f 0901 	mov.w	r9, #1
 8009214:	4623      	mov	r3, r4
 8009216:	469a      	mov	sl, r3
 8009218:	f813 2b01 	ldrb.w	r2, [r3], #1
 800921c:	b10a      	cbz	r2, 8009222 <_vfiprintf_r+0x86>
 800921e:	2a25      	cmp	r2, #37	@ 0x25
 8009220:	d1f9      	bne.n	8009216 <_vfiprintf_r+0x7a>
 8009222:	ebba 0b04 	subs.w	fp, sl, r4
 8009226:	d00b      	beq.n	8009240 <_vfiprintf_r+0xa4>
 8009228:	465b      	mov	r3, fp
 800922a:	4622      	mov	r2, r4
 800922c:	4629      	mov	r1, r5
 800922e:	4630      	mov	r0, r6
 8009230:	f7ff ffa1 	bl	8009176 <__sfputs_r>
 8009234:	3001      	adds	r0, #1
 8009236:	f000 80a7 	beq.w	8009388 <_vfiprintf_r+0x1ec>
 800923a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800923c:	445a      	add	r2, fp
 800923e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009240:	f89a 3000 	ldrb.w	r3, [sl]
 8009244:	2b00      	cmp	r3, #0
 8009246:	f000 809f 	beq.w	8009388 <_vfiprintf_r+0x1ec>
 800924a:	2300      	movs	r3, #0
 800924c:	f04f 32ff 	mov.w	r2, #4294967295
 8009250:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009254:	f10a 0a01 	add.w	sl, sl, #1
 8009258:	9304      	str	r3, [sp, #16]
 800925a:	9307      	str	r3, [sp, #28]
 800925c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009260:	931a      	str	r3, [sp, #104]	@ 0x68
 8009262:	4654      	mov	r4, sl
 8009264:	2205      	movs	r2, #5
 8009266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800926a:	4853      	ldr	r0, [pc, #332]	@ (80093b8 <_vfiprintf_r+0x21c>)
 800926c:	f7f6 ffb8 	bl	80001e0 <memchr>
 8009270:	9a04      	ldr	r2, [sp, #16]
 8009272:	b9d8      	cbnz	r0, 80092ac <_vfiprintf_r+0x110>
 8009274:	06d1      	lsls	r1, r2, #27
 8009276:	bf44      	itt	mi
 8009278:	2320      	movmi	r3, #32
 800927a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800927e:	0713      	lsls	r3, r2, #28
 8009280:	bf44      	itt	mi
 8009282:	232b      	movmi	r3, #43	@ 0x2b
 8009284:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009288:	f89a 3000 	ldrb.w	r3, [sl]
 800928c:	2b2a      	cmp	r3, #42	@ 0x2a
 800928e:	d015      	beq.n	80092bc <_vfiprintf_r+0x120>
 8009290:	9a07      	ldr	r2, [sp, #28]
 8009292:	4654      	mov	r4, sl
 8009294:	2000      	movs	r0, #0
 8009296:	f04f 0c0a 	mov.w	ip, #10
 800929a:	4621      	mov	r1, r4
 800929c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092a0:	3b30      	subs	r3, #48	@ 0x30
 80092a2:	2b09      	cmp	r3, #9
 80092a4:	d94b      	bls.n	800933e <_vfiprintf_r+0x1a2>
 80092a6:	b1b0      	cbz	r0, 80092d6 <_vfiprintf_r+0x13a>
 80092a8:	9207      	str	r2, [sp, #28]
 80092aa:	e014      	b.n	80092d6 <_vfiprintf_r+0x13a>
 80092ac:	eba0 0308 	sub.w	r3, r0, r8
 80092b0:	fa09 f303 	lsl.w	r3, r9, r3
 80092b4:	4313      	orrs	r3, r2
 80092b6:	9304      	str	r3, [sp, #16]
 80092b8:	46a2      	mov	sl, r4
 80092ba:	e7d2      	b.n	8009262 <_vfiprintf_r+0xc6>
 80092bc:	9b03      	ldr	r3, [sp, #12]
 80092be:	1d19      	adds	r1, r3, #4
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	9103      	str	r1, [sp, #12]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	bfbb      	ittet	lt
 80092c8:	425b      	neglt	r3, r3
 80092ca:	f042 0202 	orrlt.w	r2, r2, #2
 80092ce:	9307      	strge	r3, [sp, #28]
 80092d0:	9307      	strlt	r3, [sp, #28]
 80092d2:	bfb8      	it	lt
 80092d4:	9204      	strlt	r2, [sp, #16]
 80092d6:	7823      	ldrb	r3, [r4, #0]
 80092d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80092da:	d10a      	bne.n	80092f2 <_vfiprintf_r+0x156>
 80092dc:	7863      	ldrb	r3, [r4, #1]
 80092de:	2b2a      	cmp	r3, #42	@ 0x2a
 80092e0:	d132      	bne.n	8009348 <_vfiprintf_r+0x1ac>
 80092e2:	9b03      	ldr	r3, [sp, #12]
 80092e4:	1d1a      	adds	r2, r3, #4
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	9203      	str	r2, [sp, #12]
 80092ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80092ee:	3402      	adds	r4, #2
 80092f0:	9305      	str	r3, [sp, #20]
 80092f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80093c8 <_vfiprintf_r+0x22c>
 80092f6:	7821      	ldrb	r1, [r4, #0]
 80092f8:	2203      	movs	r2, #3
 80092fa:	4650      	mov	r0, sl
 80092fc:	f7f6 ff70 	bl	80001e0 <memchr>
 8009300:	b138      	cbz	r0, 8009312 <_vfiprintf_r+0x176>
 8009302:	9b04      	ldr	r3, [sp, #16]
 8009304:	eba0 000a 	sub.w	r0, r0, sl
 8009308:	2240      	movs	r2, #64	@ 0x40
 800930a:	4082      	lsls	r2, r0
 800930c:	4313      	orrs	r3, r2
 800930e:	3401      	adds	r4, #1
 8009310:	9304      	str	r3, [sp, #16]
 8009312:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009316:	4829      	ldr	r0, [pc, #164]	@ (80093bc <_vfiprintf_r+0x220>)
 8009318:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800931c:	2206      	movs	r2, #6
 800931e:	f7f6 ff5f 	bl	80001e0 <memchr>
 8009322:	2800      	cmp	r0, #0
 8009324:	d03f      	beq.n	80093a6 <_vfiprintf_r+0x20a>
 8009326:	4b26      	ldr	r3, [pc, #152]	@ (80093c0 <_vfiprintf_r+0x224>)
 8009328:	bb1b      	cbnz	r3, 8009372 <_vfiprintf_r+0x1d6>
 800932a:	9b03      	ldr	r3, [sp, #12]
 800932c:	3307      	adds	r3, #7
 800932e:	f023 0307 	bic.w	r3, r3, #7
 8009332:	3308      	adds	r3, #8
 8009334:	9303      	str	r3, [sp, #12]
 8009336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009338:	443b      	add	r3, r7
 800933a:	9309      	str	r3, [sp, #36]	@ 0x24
 800933c:	e76a      	b.n	8009214 <_vfiprintf_r+0x78>
 800933e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009342:	460c      	mov	r4, r1
 8009344:	2001      	movs	r0, #1
 8009346:	e7a8      	b.n	800929a <_vfiprintf_r+0xfe>
 8009348:	2300      	movs	r3, #0
 800934a:	3401      	adds	r4, #1
 800934c:	9305      	str	r3, [sp, #20]
 800934e:	4619      	mov	r1, r3
 8009350:	f04f 0c0a 	mov.w	ip, #10
 8009354:	4620      	mov	r0, r4
 8009356:	f810 2b01 	ldrb.w	r2, [r0], #1
 800935a:	3a30      	subs	r2, #48	@ 0x30
 800935c:	2a09      	cmp	r2, #9
 800935e:	d903      	bls.n	8009368 <_vfiprintf_r+0x1cc>
 8009360:	2b00      	cmp	r3, #0
 8009362:	d0c6      	beq.n	80092f2 <_vfiprintf_r+0x156>
 8009364:	9105      	str	r1, [sp, #20]
 8009366:	e7c4      	b.n	80092f2 <_vfiprintf_r+0x156>
 8009368:	fb0c 2101 	mla	r1, ip, r1, r2
 800936c:	4604      	mov	r4, r0
 800936e:	2301      	movs	r3, #1
 8009370:	e7f0      	b.n	8009354 <_vfiprintf_r+0x1b8>
 8009372:	ab03      	add	r3, sp, #12
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	462a      	mov	r2, r5
 8009378:	4b12      	ldr	r3, [pc, #72]	@ (80093c4 <_vfiprintf_r+0x228>)
 800937a:	a904      	add	r1, sp, #16
 800937c:	4630      	mov	r0, r6
 800937e:	f7fd fc3f 	bl	8006c00 <_printf_float>
 8009382:	4607      	mov	r7, r0
 8009384:	1c78      	adds	r0, r7, #1
 8009386:	d1d6      	bne.n	8009336 <_vfiprintf_r+0x19a>
 8009388:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800938a:	07d9      	lsls	r1, r3, #31
 800938c:	d405      	bmi.n	800939a <_vfiprintf_r+0x1fe>
 800938e:	89ab      	ldrh	r3, [r5, #12]
 8009390:	059a      	lsls	r2, r3, #22
 8009392:	d402      	bmi.n	800939a <_vfiprintf_r+0x1fe>
 8009394:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009396:	f7fe f9f7 	bl	8007788 <__retarget_lock_release_recursive>
 800939a:	89ab      	ldrh	r3, [r5, #12]
 800939c:	065b      	lsls	r3, r3, #25
 800939e:	f53f af1f 	bmi.w	80091e0 <_vfiprintf_r+0x44>
 80093a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093a4:	e71e      	b.n	80091e4 <_vfiprintf_r+0x48>
 80093a6:	ab03      	add	r3, sp, #12
 80093a8:	9300      	str	r3, [sp, #0]
 80093aa:	462a      	mov	r2, r5
 80093ac:	4b05      	ldr	r3, [pc, #20]	@ (80093c4 <_vfiprintf_r+0x228>)
 80093ae:	a904      	add	r1, sp, #16
 80093b0:	4630      	mov	r0, r6
 80093b2:	f7fd febd 	bl	8007130 <_printf_i>
 80093b6:	e7e4      	b.n	8009382 <_vfiprintf_r+0x1e6>
 80093b8:	08009948 	.word	0x08009948
 80093bc:	08009952 	.word	0x08009952
 80093c0:	08006c01 	.word	0x08006c01
 80093c4:	08009177 	.word	0x08009177
 80093c8:	0800994e 	.word	0x0800994e

080093cc <__swbuf_r>:
 80093cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ce:	460e      	mov	r6, r1
 80093d0:	4614      	mov	r4, r2
 80093d2:	4605      	mov	r5, r0
 80093d4:	b118      	cbz	r0, 80093de <__swbuf_r+0x12>
 80093d6:	6a03      	ldr	r3, [r0, #32]
 80093d8:	b90b      	cbnz	r3, 80093de <__swbuf_r+0x12>
 80093da:	f7fe f855 	bl	8007488 <__sinit>
 80093de:	69a3      	ldr	r3, [r4, #24]
 80093e0:	60a3      	str	r3, [r4, #8]
 80093e2:	89a3      	ldrh	r3, [r4, #12]
 80093e4:	071a      	lsls	r2, r3, #28
 80093e6:	d501      	bpl.n	80093ec <__swbuf_r+0x20>
 80093e8:	6923      	ldr	r3, [r4, #16]
 80093ea:	b943      	cbnz	r3, 80093fe <__swbuf_r+0x32>
 80093ec:	4621      	mov	r1, r4
 80093ee:	4628      	mov	r0, r5
 80093f0:	f000 f82a 	bl	8009448 <__swsetup_r>
 80093f4:	b118      	cbz	r0, 80093fe <__swbuf_r+0x32>
 80093f6:	f04f 37ff 	mov.w	r7, #4294967295
 80093fa:	4638      	mov	r0, r7
 80093fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093fe:	6823      	ldr	r3, [r4, #0]
 8009400:	6922      	ldr	r2, [r4, #16]
 8009402:	1a98      	subs	r0, r3, r2
 8009404:	6963      	ldr	r3, [r4, #20]
 8009406:	b2f6      	uxtb	r6, r6
 8009408:	4283      	cmp	r3, r0
 800940a:	4637      	mov	r7, r6
 800940c:	dc05      	bgt.n	800941a <__swbuf_r+0x4e>
 800940e:	4621      	mov	r1, r4
 8009410:	4628      	mov	r0, r5
 8009412:	f7ff fdbd 	bl	8008f90 <_fflush_r>
 8009416:	2800      	cmp	r0, #0
 8009418:	d1ed      	bne.n	80093f6 <__swbuf_r+0x2a>
 800941a:	68a3      	ldr	r3, [r4, #8]
 800941c:	3b01      	subs	r3, #1
 800941e:	60a3      	str	r3, [r4, #8]
 8009420:	6823      	ldr	r3, [r4, #0]
 8009422:	1c5a      	adds	r2, r3, #1
 8009424:	6022      	str	r2, [r4, #0]
 8009426:	701e      	strb	r6, [r3, #0]
 8009428:	6962      	ldr	r2, [r4, #20]
 800942a:	1c43      	adds	r3, r0, #1
 800942c:	429a      	cmp	r2, r3
 800942e:	d004      	beq.n	800943a <__swbuf_r+0x6e>
 8009430:	89a3      	ldrh	r3, [r4, #12]
 8009432:	07db      	lsls	r3, r3, #31
 8009434:	d5e1      	bpl.n	80093fa <__swbuf_r+0x2e>
 8009436:	2e0a      	cmp	r6, #10
 8009438:	d1df      	bne.n	80093fa <__swbuf_r+0x2e>
 800943a:	4621      	mov	r1, r4
 800943c:	4628      	mov	r0, r5
 800943e:	f7ff fda7 	bl	8008f90 <_fflush_r>
 8009442:	2800      	cmp	r0, #0
 8009444:	d0d9      	beq.n	80093fa <__swbuf_r+0x2e>
 8009446:	e7d6      	b.n	80093f6 <__swbuf_r+0x2a>

08009448 <__swsetup_r>:
 8009448:	b538      	push	{r3, r4, r5, lr}
 800944a:	4b29      	ldr	r3, [pc, #164]	@ (80094f0 <__swsetup_r+0xa8>)
 800944c:	4605      	mov	r5, r0
 800944e:	6818      	ldr	r0, [r3, #0]
 8009450:	460c      	mov	r4, r1
 8009452:	b118      	cbz	r0, 800945c <__swsetup_r+0x14>
 8009454:	6a03      	ldr	r3, [r0, #32]
 8009456:	b90b      	cbnz	r3, 800945c <__swsetup_r+0x14>
 8009458:	f7fe f816 	bl	8007488 <__sinit>
 800945c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009460:	0719      	lsls	r1, r3, #28
 8009462:	d422      	bmi.n	80094aa <__swsetup_r+0x62>
 8009464:	06da      	lsls	r2, r3, #27
 8009466:	d407      	bmi.n	8009478 <__swsetup_r+0x30>
 8009468:	2209      	movs	r2, #9
 800946a:	602a      	str	r2, [r5, #0]
 800946c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009470:	81a3      	strh	r3, [r4, #12]
 8009472:	f04f 30ff 	mov.w	r0, #4294967295
 8009476:	e033      	b.n	80094e0 <__swsetup_r+0x98>
 8009478:	0758      	lsls	r0, r3, #29
 800947a:	d512      	bpl.n	80094a2 <__swsetup_r+0x5a>
 800947c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800947e:	b141      	cbz	r1, 8009492 <__swsetup_r+0x4a>
 8009480:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009484:	4299      	cmp	r1, r3
 8009486:	d002      	beq.n	800948e <__swsetup_r+0x46>
 8009488:	4628      	mov	r0, r5
 800948a:	f7fe ffd9 	bl	8008440 <_free_r>
 800948e:	2300      	movs	r3, #0
 8009490:	6363      	str	r3, [r4, #52]	@ 0x34
 8009492:	89a3      	ldrh	r3, [r4, #12]
 8009494:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009498:	81a3      	strh	r3, [r4, #12]
 800949a:	2300      	movs	r3, #0
 800949c:	6063      	str	r3, [r4, #4]
 800949e:	6923      	ldr	r3, [r4, #16]
 80094a0:	6023      	str	r3, [r4, #0]
 80094a2:	89a3      	ldrh	r3, [r4, #12]
 80094a4:	f043 0308 	orr.w	r3, r3, #8
 80094a8:	81a3      	strh	r3, [r4, #12]
 80094aa:	6923      	ldr	r3, [r4, #16]
 80094ac:	b94b      	cbnz	r3, 80094c2 <__swsetup_r+0x7a>
 80094ae:	89a3      	ldrh	r3, [r4, #12]
 80094b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80094b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094b8:	d003      	beq.n	80094c2 <__swsetup_r+0x7a>
 80094ba:	4621      	mov	r1, r4
 80094bc:	4628      	mov	r0, r5
 80094be:	f000 f83f 	bl	8009540 <__smakebuf_r>
 80094c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094c6:	f013 0201 	ands.w	r2, r3, #1
 80094ca:	d00a      	beq.n	80094e2 <__swsetup_r+0x9a>
 80094cc:	2200      	movs	r2, #0
 80094ce:	60a2      	str	r2, [r4, #8]
 80094d0:	6962      	ldr	r2, [r4, #20]
 80094d2:	4252      	negs	r2, r2
 80094d4:	61a2      	str	r2, [r4, #24]
 80094d6:	6922      	ldr	r2, [r4, #16]
 80094d8:	b942      	cbnz	r2, 80094ec <__swsetup_r+0xa4>
 80094da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80094de:	d1c5      	bne.n	800946c <__swsetup_r+0x24>
 80094e0:	bd38      	pop	{r3, r4, r5, pc}
 80094e2:	0799      	lsls	r1, r3, #30
 80094e4:	bf58      	it	pl
 80094e6:	6962      	ldrpl	r2, [r4, #20]
 80094e8:	60a2      	str	r2, [r4, #8]
 80094ea:	e7f4      	b.n	80094d6 <__swsetup_r+0x8e>
 80094ec:	2000      	movs	r0, #0
 80094ee:	e7f7      	b.n	80094e0 <__swsetup_r+0x98>
 80094f0:	20000018 	.word	0x20000018

080094f4 <__swhatbuf_r>:
 80094f4:	b570      	push	{r4, r5, r6, lr}
 80094f6:	460c      	mov	r4, r1
 80094f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094fc:	2900      	cmp	r1, #0
 80094fe:	b096      	sub	sp, #88	@ 0x58
 8009500:	4615      	mov	r5, r2
 8009502:	461e      	mov	r6, r3
 8009504:	da0d      	bge.n	8009522 <__swhatbuf_r+0x2e>
 8009506:	89a3      	ldrh	r3, [r4, #12]
 8009508:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800950c:	f04f 0100 	mov.w	r1, #0
 8009510:	bf14      	ite	ne
 8009512:	2340      	movne	r3, #64	@ 0x40
 8009514:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009518:	2000      	movs	r0, #0
 800951a:	6031      	str	r1, [r6, #0]
 800951c:	602b      	str	r3, [r5, #0]
 800951e:	b016      	add	sp, #88	@ 0x58
 8009520:	bd70      	pop	{r4, r5, r6, pc}
 8009522:	466a      	mov	r2, sp
 8009524:	f000 f848 	bl	80095b8 <_fstat_r>
 8009528:	2800      	cmp	r0, #0
 800952a:	dbec      	blt.n	8009506 <__swhatbuf_r+0x12>
 800952c:	9901      	ldr	r1, [sp, #4]
 800952e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009532:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009536:	4259      	negs	r1, r3
 8009538:	4159      	adcs	r1, r3
 800953a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800953e:	e7eb      	b.n	8009518 <__swhatbuf_r+0x24>

08009540 <__smakebuf_r>:
 8009540:	898b      	ldrh	r3, [r1, #12]
 8009542:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009544:	079d      	lsls	r5, r3, #30
 8009546:	4606      	mov	r6, r0
 8009548:	460c      	mov	r4, r1
 800954a:	d507      	bpl.n	800955c <__smakebuf_r+0x1c>
 800954c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009550:	6023      	str	r3, [r4, #0]
 8009552:	6123      	str	r3, [r4, #16]
 8009554:	2301      	movs	r3, #1
 8009556:	6163      	str	r3, [r4, #20]
 8009558:	b003      	add	sp, #12
 800955a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800955c:	ab01      	add	r3, sp, #4
 800955e:	466a      	mov	r2, sp
 8009560:	f7ff ffc8 	bl	80094f4 <__swhatbuf_r>
 8009564:	9f00      	ldr	r7, [sp, #0]
 8009566:	4605      	mov	r5, r0
 8009568:	4639      	mov	r1, r7
 800956a:	4630      	mov	r0, r6
 800956c:	f7fd fa1c 	bl	80069a8 <_malloc_r>
 8009570:	b948      	cbnz	r0, 8009586 <__smakebuf_r+0x46>
 8009572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009576:	059a      	lsls	r2, r3, #22
 8009578:	d4ee      	bmi.n	8009558 <__smakebuf_r+0x18>
 800957a:	f023 0303 	bic.w	r3, r3, #3
 800957e:	f043 0302 	orr.w	r3, r3, #2
 8009582:	81a3      	strh	r3, [r4, #12]
 8009584:	e7e2      	b.n	800954c <__smakebuf_r+0xc>
 8009586:	89a3      	ldrh	r3, [r4, #12]
 8009588:	6020      	str	r0, [r4, #0]
 800958a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800958e:	81a3      	strh	r3, [r4, #12]
 8009590:	9b01      	ldr	r3, [sp, #4]
 8009592:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009596:	b15b      	cbz	r3, 80095b0 <__smakebuf_r+0x70>
 8009598:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800959c:	4630      	mov	r0, r6
 800959e:	f000 f81d 	bl	80095dc <_isatty_r>
 80095a2:	b128      	cbz	r0, 80095b0 <__smakebuf_r+0x70>
 80095a4:	89a3      	ldrh	r3, [r4, #12]
 80095a6:	f023 0303 	bic.w	r3, r3, #3
 80095aa:	f043 0301 	orr.w	r3, r3, #1
 80095ae:	81a3      	strh	r3, [r4, #12]
 80095b0:	89a3      	ldrh	r3, [r4, #12]
 80095b2:	431d      	orrs	r5, r3
 80095b4:	81a5      	strh	r5, [r4, #12]
 80095b6:	e7cf      	b.n	8009558 <__smakebuf_r+0x18>

080095b8 <_fstat_r>:
 80095b8:	b538      	push	{r3, r4, r5, lr}
 80095ba:	4d07      	ldr	r5, [pc, #28]	@ (80095d8 <_fstat_r+0x20>)
 80095bc:	2300      	movs	r3, #0
 80095be:	4604      	mov	r4, r0
 80095c0:	4608      	mov	r0, r1
 80095c2:	4611      	mov	r1, r2
 80095c4:	602b      	str	r3, [r5, #0]
 80095c6:	f7f9 fcc9 	bl	8002f5c <_fstat>
 80095ca:	1c43      	adds	r3, r0, #1
 80095cc:	d102      	bne.n	80095d4 <_fstat_r+0x1c>
 80095ce:	682b      	ldr	r3, [r5, #0]
 80095d0:	b103      	cbz	r3, 80095d4 <_fstat_r+0x1c>
 80095d2:	6023      	str	r3, [r4, #0]
 80095d4:	bd38      	pop	{r3, r4, r5, pc}
 80095d6:	bf00      	nop
 80095d8:	2000051c 	.word	0x2000051c

080095dc <_isatty_r>:
 80095dc:	b538      	push	{r3, r4, r5, lr}
 80095de:	4d06      	ldr	r5, [pc, #24]	@ (80095f8 <_isatty_r+0x1c>)
 80095e0:	2300      	movs	r3, #0
 80095e2:	4604      	mov	r4, r0
 80095e4:	4608      	mov	r0, r1
 80095e6:	602b      	str	r3, [r5, #0]
 80095e8:	f7f9 fcc8 	bl	8002f7c <_isatty>
 80095ec:	1c43      	adds	r3, r0, #1
 80095ee:	d102      	bne.n	80095f6 <_isatty_r+0x1a>
 80095f0:	682b      	ldr	r3, [r5, #0]
 80095f2:	b103      	cbz	r3, 80095f6 <_isatty_r+0x1a>
 80095f4:	6023      	str	r3, [r4, #0]
 80095f6:	bd38      	pop	{r3, r4, r5, pc}
 80095f8:	2000051c 	.word	0x2000051c

080095fc <_init>:
 80095fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fe:	bf00      	nop
 8009600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009602:	bc08      	pop	{r3}
 8009604:	469e      	mov	lr, r3
 8009606:	4770      	bx	lr

08009608 <_fini>:
 8009608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800960a:	bf00      	nop
 800960c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800960e:	bc08      	pop	{r3}
 8009610:	469e      	mov	lr, r3
 8009612:	4770      	bx	lr
