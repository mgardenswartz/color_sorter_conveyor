
test-18.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087f0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08008990  08008990  00009990  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008de0  08008de0  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008de0  08008de0  00009de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008de8  08008de8  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008de8  08008de8  00009de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008dec  08008dec  00009dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008df0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200001d4  08008fc4  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  08008fc4  0000a4e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010931  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c18  00000000  00000000  0001ab35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  0001d750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000af3  00000000  00000000  0001e578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e36  00000000  00000000  0001f06b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010af3  00000000  00000000  00038ea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000912e3  00000000  00000000  00049994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dac77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cb4  00000000  00000000  000dacbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  000df970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008978 	.word	0x08008978

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08008978 	.word	0x08008978

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <_ZN12MotorControlC1EP15TB6612FNG_MotorP13PololuEncodermfff>:
 * @date Jun 2, 2024
 */

#include "MotorControl.h"

MotorControl::MotorControl(
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b088      	sub	sp, #32
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	61f8      	str	r0, [r7, #28]
 8000eb0:	61b9      	str	r1, [r7, #24]
 8000eb2:	617a      	str	r2, [r7, #20]
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	ed87 0a03 	vstr	s0, [r7, #12]
 8000eba:	edc7 0a02 	vstr	s1, [r7, #8]
 8000ebe:	ed87 1a01 	vstr	s2, [r7, #4]
		: motor(motor),
		  encoder(encoder),
		  control_frequency_Hz(control_frequency_Hz),
		  K_P(K_P),
		  K_I(K_I),
		  K_D(K_D)
 8000ec2:	4a15      	ldr	r2, [pc, #84]	@ (8000f18 <_ZN12MotorControlC1EP15TB6612FNG_MotorP13PololuEncodermfff+0x70>)
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	601a      	str	r2, [r3, #0]
		: motor(motor),
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	605a      	str	r2, [r3, #4]
		  encoder(encoder),
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	609a      	str	r2, [r3, #8]
		  control_frequency_Hz(control_frequency_Hz),
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	60da      	str	r2, [r3, #12]
		  K_P(K_P),
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	68fa      	ldr	r2, [r7, #12]
 8000ede:	611a      	str	r2, [r3, #16]
		  K_I(K_I),
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	615a      	str	r2, [r3, #20]
		  K_D(K_D)
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	619a      	str	r2, [r3, #24]
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f04f 0200 	mov.w	r2, #0
 8000ef2:	61da      	str	r2, [r3, #28]
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	f04f 0200 	mov.w	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	2200      	movs	r2, #0
 8000f00:	849a      	strh	r2, [r3, #36]	@ 0x24
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	2200      	movs	r2, #0
 8000f06:	859a      	strh	r2, [r3, #44]	@ 0x2c
{
	reinitialize();
 8000f08:	69f8      	ldr	r0, [r7, #28]
 8000f0a:	f000 f878 	bl	8000ffe <_ZN12MotorControl12reinitializeEv>
}
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	4618      	mov	r0, r3
 8000f12:	3720      	adds	r7, #32
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	08008a10 	.word	0x08008a10

08000f1c <_ZN12MotorControlD1Ev>:

MotorControl::~MotorControl()
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	4a06      	ldr	r2, [pc, #24]	@ (8000f40 <_ZN12MotorControlD1Ev+0x24>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	601a      	str	r2, [r3, #0]
{
	motor->stop();
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 fcab 	bl	800188a <_ZN15TB6612FNG_Motor4stopEv>
}
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	08008a10 	.word	0x08008a10

08000f44 <_ZN12MotorControlD0Ev>:
MotorControl::~MotorControl()
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
}
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ffe5 	bl	8000f1c <_ZN12MotorControlD1Ev>
 8000f52:	2130      	movs	r1, #48	@ 0x30
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f004 fe6b 	bl	8005c30 <_ZdlPvj>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <_ZN12MotorControl13debug_messageEP20__UART_HandleTypeDef>:


void MotorControl::debug_message(UART_HandleTypeDef* uart_handle)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b0a0      	sub	sp, #128	@ 0x80
 8000f68:	af04      	add	r7, sp, #16
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
	#define VALUE_WIDTH 5
	#define MESSAGE_LENGTH 100
	char my_message[MESSAGE_LENGTH] = "";
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	f107 030c 	add.w	r3, r7, #12
 8000f76:	2260      	movs	r2, #96	@ 0x60
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f005 fced 	bl	800695a <memset>
    int string_length = snprintf(my_message, MESSAGE_LENGTH, "Controller effort: %*i/%*i.\r\n",
                             VALUE_WIDTH, effort,
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
    int string_length = snprintf(my_message, MESSAGE_LENGTH, "Controller effort: %*i/%*i.\r\n",
 8000f86:	461a      	mov	r2, r3
							 VALUE_WIDTH, saturation_limit);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
    int string_length = snprintf(my_message, MESSAGE_LENGTH, "Controller effort: %*i/%*i.\r\n",
 8000f8e:	f107 0008 	add.w	r0, r7, #8
 8000f92:	9302      	str	r3, [sp, #8]
 8000f94:	2305      	movs	r3, #5
 8000f96:	9301      	str	r3, [sp, #4]
 8000f98:	9200      	str	r2, [sp, #0]
 8000f9a:	2305      	movs	r3, #5
 8000f9c:	4a0b      	ldr	r2, [pc, #44]	@ (8000fcc <_ZN12MotorControl13debug_messageEP20__UART_HandleTypeDef+0x68>)
 8000f9e:	2164      	movs	r1, #100	@ 0x64
 8000fa0:	f005 fc44 	bl	800682c <sniprintf>
 8000fa4:	66f8      	str	r0, [r7, #108]	@ 0x6c
    HAL_UART_Transmit(uart_handle, (uint8_t*)my_message, string_length, HAL_MAX_DELAY);
 8000fa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	f107 0108 	add.w	r1, r7, #8
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb2:	6838      	ldr	r0, [r7, #0]
 8000fb4:	f004 fa80 	bl	80054b8 <HAL_UART_Transmit>
    encoder->debug_message(uart_handle);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	6839      	ldr	r1, [r7, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 f934 	bl	800122c <_ZN13PololuEncoder13debug_messageEP20__UART_HandleTypeDef>
}
 8000fc4:	bf00      	nop
 8000fc6:	3770      	adds	r7, #112	@ 0x70
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	08008990 	.word	0x08008990

08000fd0 <_ZN12MotorControl3runEf>:

void MotorControl::run(float setpoint)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	ed87 0a00 	vstr	s0, [r7]
	// Grab the latest data from the encoder.
	encoder->update();
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 f88b 	bl	80010fc <_ZN13PololuEncoder6updateEv>
	encoder->get_speed(control_frequency_Hz);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4610      	mov	r0, r2
 8000ff2:	f000 f8dd 	bl	80011b0 <_ZN13PololuEncoder9get_speedEm>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <_ZN12MotorControl12reinitializeEv>:

	return effort;
}

void MotorControl::reinitialize()
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
	// Stop motor
	motor->set_duty(0);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	2264      	movs	r2, #100	@ 0x64
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f000 fbbc 	bl	800178c <_ZN15TB6612FNG_Motor8set_dutyEss>

	// Reset important stuff
	last_error = 0;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	61da      	str	r2, [r3, #28]
    error = 0;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	621a      	str	r2, [r3, #32]
    effort = 0;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	859a      	strh	r2, [r3, #44]	@ 0x2c
    running_error = 0; // Most important
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	849a      	strh	r2, [r3, #36]	@ 0x24

    // Grab the new saturation limit.
    saturation_limit = motor->timer_handle->Instance->ARR; // Assuming no prescalar is used.
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800103a:	b21a      	sxth	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	85da      	strh	r2, [r3, #46]	@ 0x2e
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb>:
 * @date Jun 2, 2024
 */

#include "PololuEncoder.h"

PololuEncoder::PololuEncoder(
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	4611      	mov	r1, r2
 8001054:	ed87 0a00 	vstr	s0, [r7]
 8001058:	461a      	mov	r2, r3
 800105a:	460b      	mov	r3, r1
 800105c:	80fb      	strh	r3, [r7, #6]
 800105e:	4613      	mov	r3, r2
 8001060:	717b      	strb	r3, [r7, #5]
		)
		: timer_handle(timer_handle),
		  CPR(CPR),
		  gear_ratio(gear_ratio),
		  timer_bit_size(timer_bit_size),
		  interrupt_mode(interrupt_mode)
 8001062:	4a25      	ldr	r2, [pc, #148]	@ (80010f8 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0xb0>)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	601a      	str	r2, [r3, #0]
		: timer_handle(timer_handle),
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	605a      	str	r2, [r3, #4]
		  CPR(CPR),
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	88fa      	ldrh	r2, [r7, #6]
 8001072:	811a      	strh	r2, [r3, #8]
		  gear_ratio(gear_ratio),
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	60da      	str	r2, [r3, #12]
		  timer_bit_size(timer_bit_size),
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	797a      	ldrb	r2, [r7, #5]
 800107e:	741a      	strb	r2, [r3, #16]
		  interrupt_mode(interrupt_mode)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	7e3a      	ldrb	r2, [r7, #24]
 8001084:	745a      	strb	r2, [r3, #17]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2200      	movs	r2, #0
 800108a:	825a      	strh	r2, [r3, #18]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2200      	movs	r2, #0
 8001090:	829a      	strh	r2, [r3, #20]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2200      	movs	r2, #0
 8001096:	82da      	strh	r2, [r3, #22]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2200      	movs	r2, #0
 800109c:	619a      	str	r2, [r3, #24]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f04f 0200 	mov.w	r2, #0
 80010a4:	61da      	str	r2, [r3, #28]
{
	// Start encoder
	if (interrupt_mode)
 80010a6:	7e3b      	ldrb	r3, [r7, #24]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d004      	beq.n	80010b6 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0x6e>
	{
		HAL_TIM_Encoder_Start_IT(timer_handle, TIM_CHANNEL_ALL);
 80010ac:	213c      	movs	r1, #60	@ 0x3c
 80010ae:	68b8      	ldr	r0, [r7, #8]
 80010b0:	f003 f85f 	bl	8004172 <HAL_TIM_Encoder_Start_IT>
 80010b4:	e003      	b.n	80010be <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0x76>
	}
	else
	{
		HAL_TIM_Encoder_Start(timer_handle, TIM_CHANNEL_ALL);
 80010b6:	213c      	movs	r1, #60	@ 0x3c
 80010b8:	68b8      	ldr	r0, [r7, #8]
 80010ba:	f002 ff35 	bl	8003f28 <HAL_TIM_Encoder_Start>
	}

	// Number of bits for the select timer
	if (timer_bit_size == 32)
 80010be:	797b      	ldrb	r3, [r7, #5]
 80010c0:	2b20      	cmp	r3, #32
 80010c2:	d104      	bne.n	80010ce <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0x86>
	{
		max_count = 0xffffffff;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f04f 32ff 	mov.w	r2, #4294967295
 80010ca:	621a      	str	r2, [r3, #32]
 80010cc:	e003      	b.n	80010d6 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0x8e>
	}
	else
	{
		max_count = 0xffff;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010d4:	621a      	str	r2, [r3, #32]
	}

	// Set pertinent values for later.
	half_max_count = max_count/2;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	6a1b      	ldr	r3, [r3, #32]
 80010da:	085b      	lsrs	r3, r3, #1
 80010dc:	461a      	mov	r2, r3
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	625a      	str	r2, [r3, #36]	@ 0x24
	neg_half_max_count = -half_max_count;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e6:	425a      	negs	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	08008a20 	.word	0x08008a20

080010fc <_ZN13PololuEncoder6updateEv>:

void PololuEncoder::update()
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	// Read encoder
	if (not interrupt_mode)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	7c5b      	ldrb	r3, [r3, #17]
 8001108:	f083 0301 	eor.w	r3, r3, #1
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b00      	cmp	r3, #0
 8001110:	d006      	beq.n	8001120 <_ZN13PololuEncoder6updateEv+0x24>
	{
		count = __HAL_TIM_GET_COUNTER(timer_handle);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800111a:	b29a      	uxth	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	82da      	strh	r2, [r3, #22]
	}
	delta = (int32_t) (count-last_count);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	8ada      	ldrh	r2, [r3, #22]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	8a9b      	ldrh	r3, [r3, #20]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	b29b      	uxth	r3, r3
 800112c:	b21a      	sxth	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	825a      	strh	r2, [r3, #18]
	last_count = count;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	8ada      	ldrh	r2, [r3, #22]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	829a      	strh	r2, [r3, #20]

	// Fix delta from timer overflow
	if (delta > half_max_count)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001140:	461a      	mov	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001146:	429a      	cmp	r2, r3
 8001148:	dd0e      	ble.n	8001168 <_ZN13PololuEncoder6updateEv+0x6c>
	{
		// We've overflowed in the negative direction.
		delta -= max_count + 1;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001150:	b29a      	uxth	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a1b      	ldr	r3, [r3, #32]
 8001156:	b29b      	uxth	r3, r3
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	b29b      	uxth	r3, r3
 800115c:	3b01      	subs	r3, #1
 800115e:	b29b      	uxth	r3, r3
 8001160:	b21a      	sxth	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	825a      	strh	r2, [r3, #18]
 8001166:	e015      	b.n	8001194 <_ZN13PololuEncoder6updateEv+0x98>
	}
	else if (delta < neg_half_max_count)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800116e:	461a      	mov	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001174:	429a      	cmp	r2, r3
 8001176:	da0d      	bge.n	8001194 <_ZN13PololuEncoder6updateEv+0x98>
	{
	    // We've overflowed in the positive direciton.
		delta += max_count + 1;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800117e:	b29a      	uxth	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6a1b      	ldr	r3, [r3, #32]
 8001184:	b29b      	uxth	r3, r3
 8001186:	4413      	add	r3, r2
 8001188:	b29b      	uxth	r3, r3
 800118a:	3301      	adds	r3, #1
 800118c:	b29b      	uxth	r3, r3
 800118e:	b21a      	sxth	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	825a      	strh	r2, [r3, #18]
	}

	// Finish up
	position += delta;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800119e:	441a      	add	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	619a      	str	r2, [r3, #24]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <_ZN13PololuEncoder9get_speedEm>:
{
	return delta;
}

float PololuEncoder::get_speed(uint32_t control_frequency_Hz)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
	float numerator = delta*(float)control_frequency_Hz*60;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80011c0:	ee07 3a90 	vmov	s15, r3
 80011c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	ee07 3a90 	vmov	s15, r3
 80011ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d6:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001228 <_ZN13PololuEncoder9get_speedEm+0x78>
 80011da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011de:	edc7 7a03 	vstr	s15, [r7, #12]
	float denominator = (float)CPR*gear_ratio;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80011e8:	ee07 3a90 	vmov	s15, r3
 80011ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80011f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011fa:	edc7 7a02 	vstr	s15, [r7, #8]
    speed = numerator/denominator; //RPM
 80011fe:	edd7 6a03 	vldr	s13, [r7, #12]
 8001202:	ed97 7a02 	vldr	s14, [r7, #8]
 8001206:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	edc3 7a07 	vstr	s15, [r3, #28]
    return speed;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	69db      	ldr	r3, [r3, #28]
 8001214:	ee07 3a90 	vmov	s15, r3
}
 8001218:	eeb0 0a67 	vmov.f32	s0, s15
 800121c:	3714      	adds	r7, #20
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	42700000 	.word	0x42700000

0800122c <_ZN13PololuEncoder13debug_messageEP20__UART_HandleTypeDef>:

void PololuEncoder::debug_message(UART_HandleTypeDef* uart_handle)
{
 800122c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122e:	b0a5      	sub	sp, #148	@ 0x94
 8001230:	af08      	add	r7, sp, #32
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
	#define VALUE_WIDTH 5
	#define MESSAGE_LENGTH 100
	char my_message[MESSAGE_LENGTH] = "";
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
 800123a:	f107 030c 	add.w	r3, r7, #12
 800123e:	2260      	movs	r2, #96	@ 0x60
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f005 fb89 	bl	800695a <memset>
    int string_length = snprintf(my_message, MESSAGE_LENGTH, "Encoder cnt: %*i, pos: %*li, delta: %*i, speed: %*.3f RPM.\r\n",
                             VALUE_WIDTH, count,
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	8adb      	ldrh	r3, [r3, #22]
    int string_length = snprintf(my_message, MESSAGE_LENGTH, "Encoder cnt: %*i, pos: %*li, delta: %*i, speed: %*.3f RPM.\r\n",
 800124c:	461d      	mov	r5, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	699c      	ldr	r4, [r3, #24]
                             VALUE_WIDTH, position,
                             VALUE_WIDTH, delta,
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
    int string_length = snprintf(my_message, MESSAGE_LENGTH, "Encoder cnt: %*i, pos: %*li, delta: %*i, speed: %*.3f RPM.\r\n",
 8001258:	461e      	mov	r6, r3
							 VALUE_WIDTH+3, speed);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69db      	ldr	r3, [r3, #28]
    int string_length = snprintf(my_message, MESSAGE_LENGTH, "Encoder cnt: %*i, pos: %*li, delta: %*i, speed: %*.3f RPM.\r\n",
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff f97a 	bl	8000558 <__aeabi_f2d>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	f107 0008 	add.w	r0, r7, #8
 800126c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001270:	2308      	movs	r3, #8
 8001272:	9305      	str	r3, [sp, #20]
 8001274:	9604      	str	r6, [sp, #16]
 8001276:	2305      	movs	r3, #5
 8001278:	9303      	str	r3, [sp, #12]
 800127a:	9402      	str	r4, [sp, #8]
 800127c:	2305      	movs	r3, #5
 800127e:	9301      	str	r3, [sp, #4]
 8001280:	9500      	str	r5, [sp, #0]
 8001282:	2305      	movs	r3, #5
 8001284:	4a08      	ldr	r2, [pc, #32]	@ (80012a8 <_ZN13PololuEncoder13debug_messageEP20__UART_HandleTypeDef+0x7c>)
 8001286:	2164      	movs	r1, #100	@ 0x64
 8001288:	f005 fad0 	bl	800682c <sniprintf>
 800128c:	66f8      	str	r0, [r7, #108]	@ 0x6c
    HAL_UART_Transmit(uart_handle, (uint8_t*)my_message, string_length, HAL_MAX_DELAY);
 800128e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001290:	b29a      	uxth	r2, r3
 8001292:	f107 0108 	add.w	r1, r7, #8
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
 800129a:	6838      	ldr	r0, [r7, #0]
 800129c:	f004 f90c 	bl	80054b8 <HAL_UART_Transmit>
}
 80012a0:	bf00      	nop
 80012a2:	3774      	adds	r7, #116	@ 0x74
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012a8:	080089b0 	.word	0x080089b0

080012ac <_ZN13PololuEncoderD1Ev>:

PololuEncoder::~PololuEncoder()
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	4a0c      	ldr	r2, [pc, #48]	@ (80012e8 <_ZN13PololuEncoderD1Ev+0x3c>)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	601a      	str	r2, [r3, #0]
{
	// Stop encoder
	if (interrupt_mode)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	7c5b      	ldrb	r3, [r3, #17]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d006      	beq.n	80012d0 <_ZN13PololuEncoderD1Ev+0x24>
	{
		HAL_TIM_Encoder_Stop_IT(timer_handle, TIM_CHANNEL_ALL);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	213c      	movs	r1, #60	@ 0x3c
 80012c8:	4618      	mov	r0, r3
 80012ca:	f003 f800 	bl	80042ce <HAL_TIM_Encoder_Stop_IT>
 80012ce:	e005      	b.n	80012dc <_ZN13PololuEncoderD1Ev+0x30>
	}
	else
	{
		HAL_TIM_Encoder_Stop(timer_handle, TIM_CHANNEL_ALL);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	213c      	movs	r1, #60	@ 0x3c
 80012d6:	4618      	mov	r0, r3
 80012d8:	f002 feb4 	bl	8004044 <HAL_TIM_Encoder_Stop>
	}
}
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	08008a20 	.word	0x08008a20

080012ec <_ZN13PololuEncoderD0Ev>:
PololuEncoder::~PololuEncoder()
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
}
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ffd9 	bl	80012ac <_ZN13PololuEncoderD1Ev>
 80012fa:	212c      	movs	r1, #44	@ 0x2c
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f004 fc97 	bl	8005c30 <_ZdlPvj>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb>:
 * @param neutral_us_width Width of the neutral signal in microseconds.
 * @param full_forward_us_width Width of the full forward signal in microseconds.
 * @param rescale_forward_magnitude Maximum value for rescaling the forward signal. Overridden if fed into RemoteControlControl.
 * @param rescale_reverse_magnitude Minimum value for rescaling the reverse signal. Overridden if fed into RemoteControlControl.
 */
RCChannel::RCChannel(
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	4613      	mov	r3, r2
 800131a:	80fb      	strh	r3, [r7, #6]
	full_reverse_us_width(full_reverse_us_width),
	neutral_us_width(neutral_us_width),
	full_forward_us_width(full_forward_us_width),
	rescale_forward_magnitude(rescale_forward_magnitude),
	rescale_reverse_magnitude(rescale_reverse_magnitude),
	saturate(saturate)
 800131c:	4a3c      	ldr	r2, [pc, #240]	@ (8001410 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0x104>)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2200      	movs	r2, #0
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2200      	movs	r2, #0
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2200      	movs	r2, #0
 800133e:	615a      	str	r2, [r3, #20]
	pin_group(pin_group),
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	619a      	str	r2, [r3, #24]
	pin(pin),
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	88fa      	ldrh	r2, [r7, #6]
 800134a:	839a      	strh	r2, [r3, #28]
	timer_handle(timer_handle),
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	621a      	str	r2, [r3, #32]
	timer_channel(timer_channel),
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6a3a      	ldr	r2, [r7, #32]
 8001356:	625a      	str	r2, [r3, #36]	@ 0x24
	RC_signal_period_us(RC_signal_period_us),
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800135c:	629a      	str	r2, [r3, #40]	@ 0x28
	CPU_clock_speed_MHz(CPU_clock_speed_MHz),
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001362:	62da      	str	r2, [r3, #44]	@ 0x2c
	full_reverse_us_width(full_reverse_us_width),
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001368:	631a      	str	r2, [r3, #48]	@ 0x30
	neutral_us_width(neutral_us_width),
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800136e:	635a      	str	r2, [r3, #52]	@ 0x34
	full_forward_us_width(full_forward_us_width),
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001374:	639a      	str	r2, [r3, #56]	@ 0x38
	rescale_forward_magnitude(rescale_forward_magnitude),
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800137a:	63da      	str	r2, [r3, #60]	@ 0x3c
	rescale_reverse_magnitude(rescale_reverse_magnitude),
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001380:	641a      	str	r2, [r3, #64]	@ 0x40
	saturate(saturate)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001388:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
{
	// Critical. Starts the first interrupt.
	HAL_TIM_IC_Start_IT(timer_handle, timer_channel);
 8001394:	6a39      	ldr	r1, [r7, #32]
 8001396:	6838      	ldr	r0, [r7, #0]
 8001398:	f002 fb58 	bl	8003a4c <HAL_TIM_IC_Start_IT>

	// Set minuend depending on whether it's a 16-bit or 32-bit timer.
	// This is specific to the STM32F411CUE6!!
	if (((timer_handle->Instance) == TIM2) or ((timer_handle->Instance) == TIM5))
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013a4:	d004      	beq.n	80013b0 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0xa4>
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a1a      	ldr	r2, [pc, #104]	@ (8001414 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0x108>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d104      	bne.n	80013ba <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0xae>
	{
		minuend = 0xffffffff;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f04f 32ff 	mov.w	r2, #4294967295
 80013b6:	649a      	str	r2, [r3, #72]	@ 0x48
 80013b8:	e003      	b.n	80013c2 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0xb6>
	}
	else
	{
		minuend = 0xffff;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013c0:	649a      	str	r2, [r3, #72]	@ 0x48
	}

	// For later scaling
	uint32_t prescalar = timer_handle->Instance->PSC + 1;
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c8:	3301      	adds	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
	float refClock = CPU_clock_speed_MHz/prescalar;
 80013cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d4:	ee07 3a90 	vmov	s15, r3
 80013d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013dc:	edc7 7a04 	vstr	s15, [r7, #16]
	mFactor = 1/refClock;
 80013e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80013e4:	ed97 7a04 	vldr	s14, [r7, #16]
 80013e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

	// Needed later
	forward_range = full_forward_us_width - neutral_us_width;
 80013f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80013f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013f6:	1ad2      	subs	r2, r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	659a      	str	r2, [r3, #88]	@ 0x58
	reverse_range = neutral_us_width - full_reverse_us_width;
 80013fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001400:	1ad2      	subs	r2, r2, r3
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	08008a30 	.word	0x08008a30
 8001414:	40000c00 	.word	0x40000c00

08001418 <_ZN9RCChannel8callbackEv>:
 * 
 * @note This function assumes that the timer handle and channel have been properly initialized.
 * Please set the associated timer channel to input capture mode, direct. 
 * Leave the auto-reload value as large as possible.
 */
void RCChannel::callback(){
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	// Was it a rising edge or a falling edge?
	GPIO_PinState pinState = HAL_GPIO_ReadPin(pin_group, pin);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	699a      	ldr	r2, [r3, #24]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	8b9b      	ldrh	r3, [r3, #28]
 8001428:	4619      	mov	r1, r3
 800142a:	4610      	mov	r0, r2
 800142c:	f001 fc3c 	bl	8002ca8 <HAL_GPIO_ReadPin>
 8001430:	4603      	mov	r3, r0
 8001432:	73fb      	strb	r3, [r7, #15]

	if(pinState == GPIO_PIN_SET) // Rising edge
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d10c      	bne.n	8001454 <_ZN9RCChannel8callbackEv+0x3c>
		{
			// Read
			first_value = HAL_TIM_ReadCapturedValue(timer_handle, timer_channel);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a1a      	ldr	r2, [r3, #32]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001442:	4619      	mov	r1, r3
 8001444:	4610      	mov	r0, r2
 8001446:	f003 fb0d 	bl	8004a64 <HAL_TIM_ReadCapturedValue>
 800144a:	4603      	mov	r3, r0
 800144c:	461a      	mov	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	605a      	str	r2, [r3, #4]
		}

 	// Finally
 	first_capture = true;
 	}
}
 8001452:	e07a      	b.n	800154a <_ZN9RCChannel8callbackEv+0x132>
 		second_value = HAL_TIM_ReadCapturedValue(timer_handle, timer_channel);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a1a      	ldr	r2, [r3, #32]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800145c:	4619      	mov	r1, r3
 800145e:	4610      	mov	r0, r2
 8001460:	f003 fb00 	bl	8004a64 <HAL_TIM_ReadCapturedValue>
 8001464:	4603      	mov	r3, r0
 8001466:	461a      	mov	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	609a      	str	r2, [r3, #8]
 		if(first_value > second_value)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	429a      	cmp	r2, r3
 8001476:	dd0c      	ble.n	8001492 <_ZN9RCChannel8callbackEv+0x7a>
 			difference = minuend - first_value + second_value + 1;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	6852      	ldr	r2, [r2, #4]
 8001480:	1a9b      	subs	r3, r3, r2
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	6892      	ldr	r2, [r2, #8]
 8001486:	4413      	add	r3, r2
 8001488:	3301      	adds	r3, #1
 800148a:	461a      	mov	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	60da      	str	r2, [r3, #12]
 8001490:	e006      	b.n	80014a0 <_ZN9RCChannel8callbackEv+0x88>
 			difference = second_value - first_value;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	1ad2      	subs	r2, r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	60da      	str	r2, [r3, #12]
 		us_width = difference;//*mFactor;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	68da      	ldr	r2, [r3, #12]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	611a      	str	r2, [r3, #16]
		int32_t centered_value = us_width - neutral_us_width;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691a      	ldr	r2, [r3, #16]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	60bb      	str	r3, [r7, #8]
 		if(centered_value >= 0)
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	db23      	blt.n	8001502 <_ZN9RCChannel8callbackEv+0xea>
 			value = centered_value*rescale_forward_magnitude/forward_range;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	fb03 f202 	mul.w	r2, r3, r2
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c8:	fb92 f2f3 	sdiv	r2, r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	615a      	str	r2, [r3, #20]
			if(value>rescale_forward_magnitude && saturate)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	695a      	ldr	r2, [r3, #20]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014d8:	429a      	cmp	r2, r3
 80014da:	dd0d      	ble.n	80014f8 <_ZN9RCChannel8callbackEv+0xe0>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d008      	beq.n	80014f8 <_ZN9RCChannel8callbackEv+0xe0>
				value = rescale_forward_magnitude;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	615a      	str	r2, [r3, #20]
	 			saturate_flag = true;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2201      	movs	r2, #1
 80014f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80014f6:	e024      	b.n	8001542 <_ZN9RCChannel8callbackEv+0x12a>
	 			saturate_flag = false;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001500:	e01f      	b.n	8001542 <_ZN9RCChannel8callbackEv+0x12a>
			value =  centered_value*rescale_reverse_magnitude/reverse_range;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	fb03 f202 	mul.w	r2, r3, r2
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001510:	fb92 f2f3 	sdiv	r2, r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	615a      	str	r2, [r3, #20]
	 		if(value<-rescale_reverse_magnitude)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	695a      	ldr	r2, [r3, #20]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001520:	425b      	negs	r3, r3
 8001522:	429a      	cmp	r2, r3
 8001524:	da09      	bge.n	800153a <_ZN9RCChannel8callbackEv+0x122>
	 			value = -rescale_reverse_magnitude;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	425a      	negs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	615a      	str	r2, [r3, #20]
	 			saturate_flag = true;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2201      	movs	r2, #1
 8001534:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001538:	e003      	b.n	8001542 <_ZN9RCChannel8callbackEv+0x12a>
	 			saturate_flag = false;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 	first_capture = true;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2201      	movs	r2, #1
 8001546:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <_ZN9RCChannelD1Ev>:
/**
 * @brief Destructor for the RCChannel class.
 * 
 * This destructor stops the interrupts for the RCChannel object.
 */
RCChannel::~RCChannel() {
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	4a07      	ldr	r2, [pc, #28]	@ (800157c <_ZN9RCChannelD1Ev+0x28>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	601a      	str	r2, [r3, #0]
	// Stop interrupts
	HAL_TIM_IC_Stop_IT(timer_handle, timer_channel);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a1a      	ldr	r2, [r3, #32]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156a:	4619      	mov	r1, r3
 800156c:	4610      	mov	r0, r2
 800156e:	f002 fb87 	bl	8003c80 <HAL_TIM_IC_Stop_IT>
}
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	08008a30 	.word	0x08008a30

08001580 <_ZN9RCChannelD0Ev>:
RCChannel::~RCChannel() {
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
}
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ffe3 	bl	8001554 <_ZN9RCChannelD1Ev>
 800158e:	215c      	movs	r1, #92	@ 0x5c
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f004 fb4d 	bl	8005c30 <_ZdlPvj>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <_ZN20RemoteControlControlC1EP9RCChannelP15TB6612FNG_Motor>:
/**
 * @brief Constructs a RemoteControlControl object with the given remote control channel and motor driver.
 * @param rc_channel Pointer to the RCChannel object.
 * @param motor Pointer to a TB6612FNG_Motor object.
 */
RemoteControlControl::RemoteControlControl(RCChannel* rc_channel, TB6612FNG_Motor* motor)
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
	: rc_channel(rc_channel), motor(motor)
 80015ac:	4a10      	ldr	r2, [pc, #64]	@ (80015f0 <_ZN20RemoteControlControlC1EP9RCChannelP15TB6612FNG_Motor+0x50>)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	68ba      	ldr	r2, [r7, #8]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2264      	movs	r2, #100	@ 0x64
 80015c2:	819a      	strh	r2, [r3, #12]
{
	// Reassign the magnitudes for rescaling to prevent rounding error.
	new_maximum_value = motor->auto_reload_value; // Maybe pTimer->Instance.PSC
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	819a      	strh	r2, [r3, #12]
	rc_channel->rescale_forward_magnitude = new_maximum_value;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	899b      	ldrh	r3, [r3, #12]
 80015d0:	461a      	mov	r2, r3
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	63da      	str	r2, [r3, #60]	@ 0x3c
	rc_channel->rescale_reverse_magnitude = new_maximum_value;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	899b      	ldrh	r3, [r3, #12]
 80015da:	461a      	mov	r2, r3
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4618      	mov	r0, r3
 80015e4:	3714      	adds	r7, #20
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	08008a40 	.word	0x08008a40

080015f4 <_ZN20RemoteControlControl12update_motorEv>:
/**
 * @brief Updates a TB6612FNG_Motor object based on the remote control channel value.
 * Run this function in your HAL_TIM_IC_CaptureCallback() function to update the motor as often as your RC sends new values.
 */
void RemoteControlControl::update_motor()
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	// Read from the remote control channel
	int32_t value = rc_channel->value;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	60fb      	str	r3, [r7, #12]

	// Update the motor
	motor->set_duty(value, new_maximum_value);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6898      	ldr	r0, [r3, #8]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	b219      	sxth	r1, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	899b      	ldrh	r3, [r3, #12]
 8001610:	b21b      	sxth	r3, r3
 8001612:	461a      	mov	r2, r3
 8001614:	f000 f8ba 	bl	800178c <_ZN15TB6612FNG_Motor8set_dutyEss>
}
 8001618:	bf00      	nop
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <_ZN20RemoteControlControlD1Ev>:

/**
 * @brief Destructs the RemoteControlControl object and releases any dynamically allocated resources.
 */
RemoteControlControl::~RemoteControlControl()
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	4a13      	ldr	r2, [pc, #76]	@ (8001678 <_ZN20RemoteControlControlD1Ev+0x58>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	601a      	str	r2, [r3, #0]
{
	// Deallocate memory for rc_channel if it was dynamically allocated
	if (rc_channel != nullptr)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00b      	beq.n	800164e <_ZN20RemoteControlControlD1Ev+0x2e>
	{
		delete rc_channel;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d004      	beq.n	8001648 <_ZN20RemoteControlControlD1Ev+0x28>
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	3204      	adds	r2, #4
 8001642:	6812      	ldr	r2, [r2, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	4790      	blx	r2
		rc_channel = nullptr; // Optional: Set to nullptr to avoid dangling pointers
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	605a      	str	r2, [r3, #4]
	}

	// Deallocate memory for motor if it was dynamically allocated
	if (motor != nullptr)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d00b      	beq.n	800166e <_ZN20RemoteControlControlD1Ev+0x4e>
	{
		delete motor;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d004      	beq.n	8001668 <_ZN20RemoteControlControlD1Ev+0x48>
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	3204      	adds	r2, #4
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	4790      	blx	r2
		motor = nullptr; // Optional: Set to nullptr to avoid dangling pointers
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
	}
}
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	08008a40 	.word	0x08008a40

0800167c <_ZN20RemoteControlControlD0Ev>:
RemoteControlControl::~RemoteControlControl()
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
}
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ffcb 	bl	8001620 <_ZN20RemoteControlControlD1Ev>
 800168a:	2110      	movs	r1, #16
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f004 facf 	bl	8005c30 <_ZdlPvj>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm>:
 * @param timer_channel The channel number to be used with the timer (like TIM_CHANNEL_1).
 * @param CPU_clock_speed_MHz The CPU clock speed in MHz (like 96).
 * @param PWM_frequency_Hz The PWM frequency in Hz (20,000 to 100,000 allowed).
 */

TB6612FNG_Motor::TB6612FNG_Motor(
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	4613      	mov	r3, r2
 80016aa:	80fb      	strh	r3, [r7, #6]

	: IN1_pin_group(IN1_pin_group), IN1_pin(IN1_pin),
	  IN2_pin_group(IN2_pin_group), IN2_pin(IN2_pin),
	  timer_handle(timer_handle), timer_channel(timer_channel),
	  CPU_clock_speed_MHz(CPU_clock_speed_MHz),
	  PWM_frequency_Hz(PWM_frequency_Hz)
 80016ac:	4a23      	ldr	r2, [pc, #140]	@ (800173c <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa0>)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	601a      	str	r2, [r3, #0]
	: IN1_pin_group(IN1_pin_group), IN1_pin(IN1_pin),
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	88fa      	ldrh	r2, [r7, #6]
 80016bc:	811a      	strh	r2, [r3, #8]
	  IN2_pin_group(IN2_pin_group), IN2_pin(IN2_pin),
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	60da      	str	r2, [r3, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	8b3a      	ldrh	r2, [r7, #24]
 80016c8:	821a      	strh	r2, [r3, #16]
	  timer_handle(timer_handle), timer_channel(timer_channel),
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	69fa      	ldr	r2, [r7, #28]
 80016ce:	615a      	str	r2, [r3, #20]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6a3a      	ldr	r2, [r7, #32]
 80016d4:	619a      	str	r2, [r3, #24]
	  CPU_clock_speed_MHz(CPU_clock_speed_MHz),
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016da:	61da      	str	r2, [r3, #28]
	  PWM_frequency_Hz(PWM_frequency_Hz)
 80016dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016de:	b29a      	uxth	r2, r3
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	841a      	strh	r2, [r3, #32]
{
	// Make sure the motor is off to start
	stop();
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	f000 f8d0 	bl	800188a <_ZN15TB6612FNG_Motor4stopEv>

	// Make sure the PWM frequency is within bounds
	if(PWM_frequency_Hz < 20000)
 80016ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ec:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d803      	bhi.n	80016fc <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0x60>
	{
		// Too low. Human can hear this.
		PWM_frequency_Hz = 20000;
 80016f4:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80016f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016fa:	e005      	b.n	8001708 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0x6c>
	}
	else if(PWM_frequency_Hz > 100000)
 80016fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016fe:	4a10      	ldr	r2, [pc, #64]	@ (8001740 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa4>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d901      	bls.n	8001708 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0x6c>
	{
		// Very high. May interfere with other tasks.
		PWM_frequency_Hz = 100000;
 8001704:	4b0e      	ldr	r3, [pc, #56]	@ (8001740 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa4>)
 8001706:	62bb      	str	r3, [r7, #40]	@ 0x28
	}

	// Set the auto-reload value based on the CPU clock speed and the desired PWM frequency
	auto_reload_value =( CPU_clock_speed_MHz * 1000000 / PWM_frequency_Hz ) - 1;
 8001708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170a:	4a0e      	ldr	r2, [pc, #56]	@ (8001744 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa8>)
 800170c:	fb03 f202 	mul.w	r2, r3, r2
 8001710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001712:	fbb2 f3f3 	udiv	r3, r2, r3
 8001716:	b29b      	uxth	r3, r3
 8001718:	3b01      	subs	r3, #1
 800171a:	b29a      	uxth	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	845a      	strh	r2, [r3, #34]	@ 0x22
	timer_handle->Init.AutoReloadPreload = auto_reload_value;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8001724:	461a      	mov	r2, r3
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	619a      	str	r2, [r3, #24]

	// Start the PWM generation
	start();
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	f000 f89d 	bl	800186a <_ZN15TB6612FNG_Motor5startEv>
}
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4618      	mov	r0, r3
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	08008a50 	.word	0x08008a50
 8001740:	000186a0 	.word	0x000186a0
 8001744:	000f4240 	.word	0x000f4240

08001748 <_ZN15TB6612FNG_MotorD1Ev>:

/**
 * @brief Destructor for the TB6612FNG_Motor class.
 */
TB6612FNG_Motor::~TB6612FNG_Motor()
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	4a05      	ldr	r2, [pc, #20]	@ (8001768 <_ZN15TB6612FNG_MotorD1Ev+0x20>)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	601a      	str	r2, [r3, #0]
{
	stop();
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f897 	bl	800188a <_ZN15TB6612FNG_Motor4stopEv>
}
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	08008a50 	.word	0x08008a50

0800176c <_ZN15TB6612FNG_MotorD0Ev>:
TB6612FNG_Motor::~TB6612FNG_Motor()
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
}
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff ffe7 	bl	8001748 <_ZN15TB6612FNG_MotorD1Ev>
 800177a:	2124      	movs	r1, #36	@ 0x24
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f004 fa57 	bl	8005c30 <_ZdlPvj>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4618      	mov	r0, r3
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <_ZN15TB6612FNG_Motor8set_dutyEss>:
/**
 * @brief Sets the duty cycle of the motor.
 * @param speed The duty cycle value, ranging from -100 to 100 by default.
 */
void TB6612FNG_Motor::set_duty(int16_t duty, int16_t maximum_value)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	807b      	strh	r3, [r7, #2]
 8001798:	4613      	mov	r3, r2
 800179a:	803b      	strh	r3, [r7, #0]
	// Raise the appropriate pins
	if(duty >= 0)
 800179c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	db10      	blt.n	80017c6 <_ZN15TB6612FNG_Motor8set_dutyEss+0x3a>
	{
		HAL_GPIO_WritePin(IN1_pin_group, IN1_pin, GPIO_PIN_SET);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6858      	ldr	r0, [r3, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	891b      	ldrh	r3, [r3, #8]
 80017ac:	2201      	movs	r2, #1
 80017ae:	4619      	mov	r1, r3
 80017b0:	f001 fa92 	bl	8002cd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_pin_group, IN2_pin, GPIO_PIN_RESET);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68d8      	ldr	r0, [r3, #12]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	8a1b      	ldrh	r3, [r3, #16]
 80017bc:	2200      	movs	r2, #0
 80017be:	4619      	mov	r1, r3
 80017c0:	f001 fa8a 	bl	8002cd8 <HAL_GPIO_WritePin>
 80017c4:	e00f      	b.n	80017e6 <_ZN15TB6612FNG_Motor8set_dutyEss+0x5a>
	}
	else
	{
		HAL_GPIO_WritePin(IN1_pin_group, IN1_pin, GPIO_PIN_RESET);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6858      	ldr	r0, [r3, #4]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	891b      	ldrh	r3, [r3, #8]
 80017ce:	2200      	movs	r2, #0
 80017d0:	4619      	mov	r1, r3
 80017d2:	f001 fa81 	bl	8002cd8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_pin_group, IN2_pin, GPIO_PIN_SET);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68d8      	ldr	r0, [r3, #12]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	8a1b      	ldrh	r3, [r3, #16]
 80017de:	2201      	movs	r2, #1
 80017e0:	4619      	mov	r1, r3
 80017e2:	f001 fa79 	bl	8002cd8 <HAL_GPIO_WritePin>
	}

	uint16_t duty_magnitude;
	if(duty<0)
 80017e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	da03      	bge.n	80017f6 <_ZN15TB6612FNG_Motor8set_dutyEss+0x6a>
	{
		duty_magnitude = duty*-1;
 80017ee:	887b      	ldrh	r3, [r7, #2]
 80017f0:	425b      	negs	r3, r3
 80017f2:	81fb      	strh	r3, [r7, #14]
 80017f4:	e001      	b.n	80017fa <_ZN15TB6612FNG_Motor8set_dutyEss+0x6e>
	}
	else
	{
		duty_magnitude = duty;
 80017f6:	887b      	ldrh	r3, [r7, #2]
 80017f8:	81fb      	strh	r3, [r7, #14]
	}

	// Check if duty cycle is within bounds
	if(duty_magnitude > maximum_value)
 80017fa:	89fa      	ldrh	r2, [r7, #14]
 80017fc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001800:	429a      	cmp	r2, r3
 8001802:	dd01      	ble.n	8001808 <_ZN15TB6612FNG_Motor8set_dutyEss+0x7c>
	{
		duty = maximum_value;
 8001804:	883b      	ldrh	r3, [r7, #0]
 8001806:	807b      	strh	r3, [r7, #2]
	}


	// Set the compare value
	uint16_t compare_value = duty_magnitude * auto_reload_value / maximum_value;
 8001808:	89fb      	ldrh	r3, [r7, #14]
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 800180e:	fb03 f202 	mul.w	r2, r3, r2
 8001812:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001816:	fb92 f3f3 	sdiv	r3, r2, r3
 800181a:	81bb      	strh	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d105      	bne.n	8001830 <_ZN15TB6612FNG_Motor8set_dutyEss+0xa4>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	89ba      	ldrh	r2, [r7, #12]
 800182c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800182e:	e018      	b.n	8001862 <_ZN15TB6612FNG_Motor8set_dutyEss+0xd6>
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	2b04      	cmp	r3, #4
 8001836:	d105      	bne.n	8001844 <_ZN15TB6612FNG_Motor8set_dutyEss+0xb8>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	695b      	ldr	r3, [r3, #20]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	89ba      	ldrh	r2, [r7, #12]
 8001840:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001842:	e00e      	b.n	8001862 <_ZN15TB6612FNG_Motor8set_dutyEss+0xd6>
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	2b08      	cmp	r3, #8
 800184a:	d105      	bne.n	8001858 <_ZN15TB6612FNG_Motor8set_dutyEss+0xcc>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	89ba      	ldrh	r2, [r7, #12]
 8001854:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001856:	e004      	b.n	8001862 <_ZN15TB6612FNG_Motor8set_dutyEss+0xd6>
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	89ba      	ldrh	r2, [r7, #12]
 8001860:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <_ZN15TB6612FNG_Motor5startEv>:

/**
 * @brief starts the motor by starting PWM generation.
 */
void TB6612FNG_Motor::start()
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(timer_handle, timer_channel);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	695a      	ldr	r2, [r3, #20]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	4619      	mov	r1, r3
 800187c:	4610      	mov	r0, r2
 800187e:	f001 ff77 	bl	8003770 <HAL_TIM_PWM_Start>
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <_ZN15TB6612FNG_Motor4stopEv>:

/**
 * @brief stops the motor by stopping PWM generation.
 */
void TB6612FNG_Motor::stop()
{	
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(IN1_pin_group, IN1_pin, GPIO_PIN_RESET);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6858      	ldr	r0, [r3, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	891b      	ldrh	r3, [r3, #8]
 800189a:	2200      	movs	r2, #0
 800189c:	4619      	mov	r1, r3
 800189e:	f001 fa1b 	bl	8002cd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_pin_group, IN2_pin, GPIO_PIN_RESET);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68d8      	ldr	r0, [r3, #12]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	8a1b      	ldrh	r3, [r3, #16]
 80018aa:	2200      	movs	r2, #0
 80018ac:	4619      	mov	r1, r3
 80018ae:	f001 fa13 	bl	8002cd8 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(timer_handle, timer_channel);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	695a      	ldr	r2, [r3, #20]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	4619      	mov	r1, r3
 80018bc:	4610      	mov	r0, r2
 80018be:	f002 f807 	bl	80038d0 <HAL_TIM_PWM_Stop>
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <HAL_GPIO_EXTI_Callback>:
RemoteControlControl* Throttle;
RemoteControlControl* Steering;
PololuEncoder* My_Encoder;
MotorControl* My_Controller;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	80fb      	strh	r3, [r7, #6]
   // Your interrupt handling code here
	if(GPIO_PIN == GPIO_PIN_13)
 80018d6:	88fb      	ldrh	r3, [r7, #6]
 80018d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018dc:	d10f      	bne.n	80018fe <HAL_GPIO_EXTI_Callback+0x32>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80018de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018e2:	4809      	ldr	r0, [pc, #36]	@ (8001908 <HAL_GPIO_EXTI_Callback+0x3c>)
 80018e4:	f001 fa11 	bl	8002d0a <HAL_GPIO_TogglePin>
		sprintf(my_message, "Interrupt triggered.\r\n");
 80018e8:	4908      	ldr	r1, [pc, #32]	@ (800190c <HAL_GPIO_EXTI_Callback+0x40>)
 80018ea:	4809      	ldr	r0, [pc, #36]	@ (8001910 <HAL_GPIO_EXTI_Callback+0x44>)
 80018ec:	f004 ffd2 	bl	8006894 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)my_message, MESSAGE_LENGTH, HAL_MAX_DELAY);
 80018f0:	f04f 33ff 	mov.w	r3, #4294967295
 80018f4:	2264      	movs	r2, #100	@ 0x64
 80018f6:	4906      	ldr	r1, [pc, #24]	@ (8001910 <HAL_GPIO_EXTI_Callback+0x44>)
 80018f8:	4806      	ldr	r0, [pc, #24]	@ (8001914 <HAL_GPIO_EXTI_Callback+0x48>)
 80018fa:	f003 fddd 	bl	80054b8 <HAL_UART_Transmit>
	}
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40020400 	.word	0x40020400
 800190c:	080089f0 	.word	0x080089f0
 8001910:	20000310 	.word	0x20000310
 8001914:	200002c8 	.word	0x200002c8

08001918 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
//	sprintf(my_message, "Timer input capture callback.\r\n");
//	HAL_UART_Transmit(&huart2, (uint8_t*)my_message, MESSAGE_LENGTH, HAL_MAX_DELAY);
	if (initialized) // Timers must be initalized before this code can run successfully.
 8001920:	4b15      	ldr	r3, [pc, #84]	@ (8001978 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d022      	beq.n	800196e <HAL_TIM_IC_CaptureCallback+0x56>
		{
			if((htim->Instance = TIM1))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a14      	ldr	r2, [pc, #80]	@ (800197c <HAL_TIM_IC_CaptureCallback+0x64>)
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	bf14      	ite	ne
 8001936:	2301      	movne	r3, #1
 8001938:	2300      	moveq	r3, #0
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d016      	beq.n	800196e <HAL_TIM_IC_CaptureCallback+0x56>
			{
				if ( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 )
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	7f1b      	ldrb	r3, [r3, #28]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d104      	bne.n	8001952 <HAL_TIM_IC_CaptureCallback+0x3a>
				{
					// Handle channel
					SteeringChannel->callback();
 8001948:	4b0d      	ldr	r3, [pc, #52]	@ (8001980 <HAL_TIM_IC_CaptureCallback+0x68>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fd63 	bl	8001418 <_ZN9RCChannel8callbackEv>
//					SteeringChannel->value = -500;
//					SteeringChannel->us_width = 6969;
					//Steering->update_motor();
				}

				if ( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	7f1b      	ldrb	r3, [r3, #28]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d109      	bne.n	800196e <HAL_TIM_IC_CaptureCallback+0x56>
				{
					// Handle channel
					ThrottleChannel->callback();
 800195a:	4b0a      	ldr	r3, [pc, #40]	@ (8001984 <HAL_TIM_IC_CaptureCallback+0x6c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fd5a 	bl	8001418 <_ZN9RCChannel8callbackEv>
					Throttle->update_motor();
 8001964:	4b08      	ldr	r3, [pc, #32]	@ (8001988 <HAL_TIM_IC_CaptureCallback+0x70>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fe43 	bl	80015f4 <_ZN20RemoteControlControl12update_motorEv>
				}
			}
		}
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000374 	.word	0x20000374
 800197c:	40010000 	.word	0x40010000
 8001980:	20000380 	.word	0x20000380
 8001984:	2000037c 	.word	0x2000037c
 8001988:	20000384 	.word	0x20000384

0800198c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a07      	ldr	r2, [pc, #28]	@ (80019b8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d106      	bne.n	80019ac <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		My_Encoder->count = __HAL_TIM_GET_COUNTER(htim);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80019a4:	4b05      	ldr	r3, [pc, #20]	@ (80019bc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	b292      	uxth	r2, r2
 80019aa:	82da      	strh	r2, [r3, #22]
	}
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	40000c00 	.word	0x40000c00
 80019bc:	20000388 	.word	0x20000388

080019c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019c0:	b590      	push	{r4, r7, lr}
 80019c2:	b08d      	sub	sp, #52	@ 0x34
 80019c4:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019c6:	f000 fe43 	bl	8002650 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ca:	f000 f8d9 	bl	8001b80 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019ce:	f000 faff 	bl	8001fd0 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 80019d2:	f000 facf 	bl	8001f74 <_ZL19MX_USART2_UART_Initv>
  MX_TIM2_Init();
 80019d6:	f000 f9e1 	bl	8001d9c <_ZL12MX_TIM2_Initv>
  MX_TIM5_Init();
 80019da:	f000 fa6d 	bl	8001eb8 <_ZL12MX_TIM5_Initv>
  MX_TIM1_Init();
 80019de:	f000 f941 	bl	8001c64 <_ZL12MX_TIM1_Initv>
  My_Motor = new TB6612FNG_Motor(
		  GPIOB, GPIO_PIN_14,
		  GPIOB, GPIO_PIN_15,
		  &htim2, TIM_CHANNEL_1,
		  CPU_CLOCK_MHZ,
		  MOTOR_PWM_HZ);
 80019e2:	2024      	movs	r0, #36	@ 0x24
 80019e4:	f004 f926 	bl	8005c34 <_Znwj>
 80019e8:	4603      	mov	r3, r0
 80019ea:	461c      	mov	r4, r3
 80019ec:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80019f0:	9304      	str	r3, [sp, #16]
 80019f2:	2364      	movs	r3, #100	@ 0x64
 80019f4:	9303      	str	r3, [sp, #12]
 80019f6:	2300      	movs	r3, #0
 80019f8:	9302      	str	r3, [sp, #8]
 80019fa:	4b51      	ldr	r3, [pc, #324]	@ (8001b40 <main+0x180>)
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a02:	9300      	str	r3, [sp, #0]
 8001a04:	4b4f      	ldr	r3, [pc, #316]	@ (8001b44 <main+0x184>)
 8001a06:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a0a:	494e      	ldr	r1, [pc, #312]	@ (8001b44 <main+0x184>)
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	f7ff fe45 	bl	800169c <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm>
  My_Motor = new TB6612FNG_Motor(
 8001a12:	4b4d      	ldr	r3, [pc, #308]	@ (8001b48 <main+0x188>)
 8001a14:	601c      	str	r4, [r3, #0]
  		  1520,      // Calibrated neutral
  		  2035,      // Calibrated full left
  		  100,       // New max positive
		  100,       // New max negative (magnitude)
		  true     // Saturate if signal is over full? True by default. False good for debugging.
		  );
 8001a16:	205c      	movs	r0, #92	@ 0x5c
 8001a18:	f004 f90c 	bl	8005c34 <_Znwj>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	461c      	mov	r4, r3
 8001a20:	2301      	movs	r3, #1
 8001a22:	9308      	str	r3, [sp, #32]
 8001a24:	2364      	movs	r3, #100	@ 0x64
 8001a26:	9307      	str	r3, [sp, #28]
 8001a28:	2364      	movs	r3, #100	@ 0x64
 8001a2a:	9306      	str	r3, [sp, #24]
 8001a2c:	f240 73f3 	movw	r3, #2035	@ 0x7f3
 8001a30:	9305      	str	r3, [sp, #20]
 8001a32:	f44f 63be 	mov.w	r3, #1520	@ 0x5f0
 8001a36:	9304      	str	r3, [sp, #16]
 8001a38:	f240 33ea 	movw	r3, #1002	@ 0x3ea
 8001a3c:	9303      	str	r3, [sp, #12]
 8001a3e:	2364      	movs	r3, #100	@ 0x64
 8001a40:	9302      	str	r3, [sp, #8]
 8001a42:	f244 435c 	movw	r3, #17500	@ 0x445c
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	2300      	movs	r3, #0
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	4b3f      	ldr	r3, [pc, #252]	@ (8001b4c <main+0x18c>)
 8001a4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a52:	493f      	ldr	r1, [pc, #252]	@ (8001b50 <main+0x190>)
 8001a54:	4620      	mov	r0, r4
 8001a56:	f7ff fc59 	bl	800130c <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb>
  SteeringChannel = new RCChannel
 8001a5a:	4b3e      	ldr	r3, [pc, #248]	@ (8001b54 <main+0x194>)
 8001a5c:	601c      	str	r4, [r3, #0]
		  		  1533,  // Calibrated neutral
		  		  2017,  // Calibrated full speed
		  		  100,   // New max positive
				  100,    // New max negative (magnitude)
				  true  // Saturate if signal is over full? True by default. False good for debugging.
		  	  	  );
 8001a5e:	205c      	movs	r0, #92	@ 0x5c
 8001a60:	f004 f8e8 	bl	8005c34 <_Znwj>
 8001a64:	4603      	mov	r3, r0
 8001a66:	461c      	mov	r4, r3
 8001a68:	2301      	movs	r3, #1
 8001a6a:	9308      	str	r3, [sp, #32]
 8001a6c:	2364      	movs	r3, #100	@ 0x64
 8001a6e:	9307      	str	r3, [sp, #28]
 8001a70:	2364      	movs	r3, #100	@ 0x64
 8001a72:	9306      	str	r3, [sp, #24]
 8001a74:	f240 73e1 	movw	r3, #2017	@ 0x7e1
 8001a78:	9305      	str	r3, [sp, #20]
 8001a7a:	f240 53fd 	movw	r3, #1533	@ 0x5fd
 8001a7e:	9304      	str	r3, [sp, #16]
 8001a80:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8001a84:	9303      	str	r3, [sp, #12]
 8001a86:	2364      	movs	r3, #100	@ 0x64
 8001a88:	9302      	str	r3, [sp, #8]
 8001a8a:	f244 435c 	movw	r3, #17500	@ 0x445c
 8001a8e:	9301      	str	r3, [sp, #4]
 8001a90:	2304      	movs	r3, #4
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	4b2d      	ldr	r3, [pc, #180]	@ (8001b4c <main+0x18c>)
 8001a96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a9a:	492d      	ldr	r1, [pc, #180]	@ (8001b50 <main+0x190>)
 8001a9c:	4620      	mov	r0, r4
 8001a9e:	f7ff fc35 	bl	800130c <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb>
  ThrottleChannel = new RCChannel
 8001aa2:	4b2d      	ldr	r3, [pc, #180]	@ (8001b58 <main+0x198>)
 8001aa4:	601c      	str	r4, [r3, #0]

  Throttle = new RemoteControlControl
		  (
		  ThrottleChannel,
		  My_Motor
		  );
 8001aa6:	2010      	movs	r0, #16
 8001aa8:	f004 f8c4 	bl	8005c34 <_Znwj>
 8001aac:	4603      	mov	r3, r0
 8001aae:	461c      	mov	r4, r3
 8001ab0:	4b29      	ldr	r3, [pc, #164]	@ (8001b58 <main+0x198>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a24      	ldr	r2, [pc, #144]	@ (8001b48 <main+0x188>)
 8001ab6:	6812      	ldr	r2, [r2, #0]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4620      	mov	r0, r4
 8001abc:	f7ff fd70 	bl	80015a0 <_ZN20RemoteControlControlC1EP9RCChannelP15TB6612FNG_Motor>
  Throttle = new RemoteControlControl
 8001ac0:	4b26      	ldr	r3, [pc, #152]	@ (8001b5c <main+0x19c>)
 8001ac2:	601c      	str	r4, [r3, #0]
		  &htim5,
		  20,
		  488.3f,
		  16,
		  false // true doesn't work yet!
		  );
 8001ac4:	202c      	movs	r0, #44	@ 0x2c
 8001ac6:	f004 f8b5 	bl	8005c34 <_Znwj>
 8001aca:	4603      	mov	r3, r0
 8001acc:	461c      	mov	r4, r3
 8001ace:	2300      	movs	r3, #0
 8001ad0:	9300      	str	r3, [sp, #0]
 8001ad2:	2310      	movs	r3, #16
 8001ad4:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8001b60 <main+0x1a0>
 8001ad8:	2214      	movs	r2, #20
 8001ada:	4922      	ldr	r1, [pc, #136]	@ (8001b64 <main+0x1a4>)
 8001adc:	4620      	mov	r0, r4
 8001ade:	f7ff fab3 	bl	8001048 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb>
  My_Encoder = new PololuEncoder
 8001ae2:	4b21      	ldr	r3, [pc, #132]	@ (8001b68 <main+0x1a8>)
 8001ae4:	601c      	str	r4, [r3, #0]
		  My_Encoder,
		  CONTROL_FREQUENCY_HZ,
		  0.5f,
		  0.0f,
		  0.0f
		  );
 8001ae6:	2030      	movs	r0, #48	@ 0x30
 8001ae8:	f004 f8a4 	bl	8005c34 <_Znwj>
 8001aec:	4603      	mov	r3, r0
 8001aee:	461c      	mov	r4, r3
 8001af0:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <main+0x188>)
 8001af2:	6819      	ldr	r1, [r3, #0]
 8001af4:	4b1c      	ldr	r3, [pc, #112]	@ (8001b68 <main+0x1a8>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	ed9f 1a1c 	vldr	s2, [pc, #112]	@ 8001b6c <main+0x1ac>
 8001afc:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 8001b6c <main+0x1ac>
 8001b00:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8001b04:	2308      	movs	r3, #8
 8001b06:	4620      	mov	r0, r4
 8001b08:	f7ff f9ce 	bl	8000ea8 <_ZN12MotorControlC1EP15TB6612FNG_MotorP13PololuEncodermfff>
  My_Controller = new MotorControl
 8001b0c:	4b18      	ldr	r3, [pc, #96]	@ (8001b70 <main+0x1b0>)
 8001b0e:	601c      	str	r4, [r3, #0]

  initialized = true;
 8001b10:	4b18      	ldr	r3, [pc, #96]	@ (8001b74 <main+0x1b4>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	701a      	strb	r2, [r3, #0]
//							  	 VALUE_WIDTH, (long signed int)SteeringChannel->value,
//								 VALUE_WIDTH, (long signed int)SteeringChannel->us_width,
//	                             VALUE_WIDTH, (long signed int)ThrottleChannel->value,
//								 VALUE_WIDTH, (long signed int)ThrottleChannel->us_width);
//	  HAL_UART_Transmit(&huart2, (uint8_t*)my_message, string_length, HAL_MAX_DELAY);
	  float setpoint = 15; // RPM
 8001b16:	4b18      	ldr	r3, [pc, #96]	@ (8001b78 <main+0x1b8>)
 8001b18:	607b      	str	r3, [r7, #4]
	  My_Controller->run(setpoint);
 8001b1a:	4b15      	ldr	r3, [pc, #84]	@ (8001b70 <main+0x1b0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff fa54 	bl	8000fd0 <_ZN12MotorControl3runEf>
	  My_Controller->debug_message(&huart2);
 8001b28:	4b11      	ldr	r3, [pc, #68]	@ (8001b70 <main+0x1b0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4913      	ldr	r1, [pc, #76]	@ (8001b7c <main+0x1bc>)
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fa18 	bl	8000f64 <_ZN12MotorControl13debug_messageEP20__UART_HandleTypeDef>
	  HAL_Delay(1000/CONTROL_FREQUENCY_HZ);
 8001b34:	207d      	movs	r0, #125	@ 0x7d
 8001b36:	f000 fdfd 	bl	8002734 <HAL_Delay>
  }
 8001b3a:	bf00      	nop
 8001b3c:	e7eb      	b.n	8001b16 <main+0x156>
 8001b3e:	bf00      	nop
 8001b40:	20000238 	.word	0x20000238
 8001b44:	40020400 	.word	0x40020400
 8001b48:	20000378 	.word	0x20000378
 8001b4c:	200001f0 	.word	0x200001f0
 8001b50:	40020000 	.word	0x40020000
 8001b54:	20000380 	.word	0x20000380
 8001b58:	2000037c 	.word	0x2000037c
 8001b5c:	20000384 	.word	0x20000384
 8001b60:	43f42666 	.word	0x43f42666
 8001b64:	20000280 	.word	0x20000280
 8001b68:	20000388 	.word	0x20000388
 8001b6c:	00000000 	.word	0x00000000
 8001b70:	2000038c 	.word	0x2000038c
 8001b74:	20000374 	.word	0x20000374
 8001b78:	41700000 	.word	0x41700000
 8001b7c:	200002c8 	.word	0x200002c8

08001b80 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b094      	sub	sp, #80	@ 0x50
 8001b84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b86:	f107 0320 	add.w	r3, r7, #32
 8001b8a:	2230      	movs	r2, #48	@ 0x30
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f004 fee3 	bl	800695a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b94:	f107 030c 	add.w	r3, r7, #12
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	4b2c      	ldr	r3, [pc, #176]	@ (8001c5c <_Z18SystemClock_Configv+0xdc>)
 8001baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bac:	4a2b      	ldr	r2, [pc, #172]	@ (8001c5c <_Z18SystemClock_Configv+0xdc>)
 8001bae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bb4:	4b29      	ldr	r3, [pc, #164]	@ (8001c5c <_Z18SystemClock_Configv+0xdc>)
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	607b      	str	r3, [r7, #4]
 8001bc4:	4b26      	ldr	r3, [pc, #152]	@ (8001c60 <_Z18SystemClock_Configv+0xe0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a25      	ldr	r2, [pc, #148]	@ (8001c60 <_Z18SystemClock_Configv+0xe0>)
 8001bca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	4b23      	ldr	r3, [pc, #140]	@ (8001c60 <_Z18SystemClock_Configv+0xe0>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001be0:	2301      	movs	r3, #1
 8001be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001be4:	2310      	movs	r3, #16
 8001be6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001be8:	2302      	movs	r3, #2
 8001bea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bec:	2300      	movs	r3, #0
 8001bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bf0:	2308      	movs	r3, #8
 8001bf2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001bf4:	2364      	movs	r3, #100	@ 0x64
 8001bf6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001bfc:	2304      	movs	r3, #4
 8001bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c00:	f107 0320 	add.w	r3, r7, #32
 8001c04:	4618      	mov	r0, r3
 8001c06:	f001 f8b3 	bl	8002d70 <HAL_RCC_OscConfig>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	bf14      	ite	ne
 8001c10:	2301      	movne	r3, #1
 8001c12:	2300      	moveq	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8001c1a:	f000 fa33 	bl	8002084 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c1e:	230f      	movs	r3, #15
 8001c20:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c22:	2302      	movs	r3, #2
 8001c24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c2e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c34:	f107 030c 	add.w	r3, r7, #12
 8001c38:	2103      	movs	r1, #3
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f001 fb10 	bl	8003260 <HAL_RCC_ClockConfig>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	bf14      	ite	ne
 8001c46:	2301      	movne	r3, #1
 8001c48:	2300      	moveq	r3, #0
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8001c50:	f000 fa18 	bl	8002084 <Error_Handler>
  }
}
 8001c54:	bf00      	nop
 8001c56:	3750      	adds	r7, #80	@ 0x50
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40007000 	.word	0x40007000

08001c64 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	@ 0x28
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c6a:	f107 0318 	add.w	r3, r7, #24
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c78:	f107 0310 	add.w	r3, r7, #16
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c82:	463b      	mov	r3, r7
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c8e:	4b41      	ldr	r3, [pc, #260]	@ (8001d94 <_ZL12MX_TIM1_Initv+0x130>)
 8001c90:	4a41      	ldr	r2, [pc, #260]	@ (8001d98 <_ZL12MX_TIM1_Initv+0x134>)
 8001c92:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 8001c94:	4b3f      	ldr	r3, [pc, #252]	@ (8001d94 <_ZL12MX_TIM1_Initv+0x130>)
 8001c96:	2263      	movs	r2, #99	@ 0x63
 8001c98:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d94 <_ZL12MX_TIM1_Initv+0x130>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ca0:	4b3c      	ldr	r3, [pc, #240]	@ (8001d94 <_ZL12MX_TIM1_Initv+0x130>)
 8001ca2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ca6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca8:	4b3a      	ldr	r3, [pc, #232]	@ (8001d94 <_ZL12MX_TIM1_Initv+0x130>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001cae:	4b39      	ldr	r3, [pc, #228]	@ (8001d94 <_ZL12MX_TIM1_Initv+0x130>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb4:	4b37      	ldr	r3, [pc, #220]	@ (8001d94 <_ZL12MX_TIM1_Initv+0x130>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cba:	4836      	ldr	r0, [pc, #216]	@ (8001d94 <_ZL12MX_TIM1_Initv+0x130>)
 8001cbc:	f001 fcb0 	bl	8003620 <HAL_TIM_Base_Init>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	bf14      	ite	ne
 8001cc6:	2301      	movne	r3, #1
 8001cc8:	2300      	moveq	r3, #0
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <_ZL12MX_TIM1_Initv+0x70>
  {
    Error_Handler();
 8001cd0:	f000 f9d8 	bl	8002084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cd8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001cda:	f107 0318 	add.w	r3, r7, #24
 8001cde:	4619      	mov	r1, r3
 8001ce0:	482c      	ldr	r0, [pc, #176]	@ (8001d94 <_ZL12MX_TIM1_Initv+0x130>)
 8001ce2:	f002 fdf7 	bl	80048d4 <HAL_TIM_ConfigClockSource>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	bf14      	ite	ne
 8001cec:	2301      	movne	r3, #1
 8001cee:	2300      	moveq	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <_ZL12MX_TIM1_Initv+0x96>
  {
    Error_Handler();
 8001cf6:	f000 f9c5 	bl	8002084 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001cfa:	4826      	ldr	r0, [pc, #152]	@ (8001d94 <_ZL12MX_TIM1_Initv+0x130>)
 8001cfc:	f001 fe4c 	bl	8003998 <HAL_TIM_IC_Init>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	bf14      	ite	ne
 8001d06:	2301      	movne	r3, #1
 8001d08:	2300      	moveq	r3, #0
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <_ZL12MX_TIM1_Initv+0xb0>
  {
    Error_Handler();
 8001d10:	f000 f9b8 	bl	8002084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d14:	2300      	movs	r3, #0
 8001d16:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d1c:	f107 0310 	add.w	r3, r7, #16
 8001d20:	4619      	mov	r1, r3
 8001d22:	481c      	ldr	r0, [pc, #112]	@ (8001d94 <_ZL12MX_TIM1_Initv+0x130>)
 8001d24:	f003 faf6 	bl	8005314 <HAL_TIMEx_MasterConfigSynchronization>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	bf14      	ite	ne
 8001d2e:	2301      	movne	r3, #1
 8001d30:	2300      	moveq	r3, #0
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <_ZL12MX_TIM1_Initv+0xd8>
  {
    Error_Handler();
 8001d38:	f000 f9a4 	bl	8002084 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001d3c:	230a      	movs	r3, #10
 8001d3e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d40:	2301      	movs	r3, #1
 8001d42:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d4c:	463b      	mov	r3, r7
 8001d4e:	2200      	movs	r2, #0
 8001d50:	4619      	mov	r1, r3
 8001d52:	4810      	ldr	r0, [pc, #64]	@ (8001d94 <_ZL12MX_TIM1_Initv+0x130>)
 8001d54:	f002 fc60 	bl	8004618 <HAL_TIM_IC_ConfigChannel>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	bf14      	ite	ne
 8001d5e:	2301      	movne	r3, #1
 8001d60:	2300      	moveq	r3, #0
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <_ZL12MX_TIM1_Initv+0x108>
  {
    Error_Handler();
 8001d68:	f000 f98c 	bl	8002084 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001d6c:	463b      	mov	r3, r7
 8001d6e:	2204      	movs	r2, #4
 8001d70:	4619      	mov	r1, r3
 8001d72:	4808      	ldr	r0, [pc, #32]	@ (8001d94 <_ZL12MX_TIM1_Initv+0x130>)
 8001d74:	f002 fc50 	bl	8004618 <HAL_TIM_IC_ConfigChannel>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	bf14      	ite	ne
 8001d7e:	2301      	movne	r3, #1
 8001d80:	2300      	moveq	r3, #0
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <_ZL12MX_TIM1_Initv+0x128>
  {
    Error_Handler();
 8001d88:	f000 f97c 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d8c:	bf00      	nop
 8001d8e:	3728      	adds	r7, #40	@ 0x28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	200001f0 	.word	0x200001f0
 8001d98:	40010000 	.word	0x40010000

08001d9c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08e      	sub	sp, #56	@ 0x38
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001da2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]
 8001dac:	609a      	str	r2, [r3, #8]
 8001dae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db0:	f107 0320 	add.w	r3, r7, #32
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dba:	1d3b      	adds	r3, r7, #4
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
 8001dc8:	615a      	str	r2, [r3, #20]
 8001dca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dcc:	4b39      	ldr	r3, [pc, #228]	@ (8001eb4 <_ZL12MX_TIM2_Initv+0x118>)
 8001dce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001dd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001dd4:	4b37      	ldr	r3, [pc, #220]	@ (8001eb4 <_ZL12MX_TIM2_Initv+0x118>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dda:	4b36      	ldr	r3, [pc, #216]	@ (8001eb4 <_ZL12MX_TIM2_Initv+0x118>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 8001de0:	4b34      	ldr	r3, [pc, #208]	@ (8001eb4 <_ZL12MX_TIM2_Initv+0x118>)
 8001de2:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001de6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de8:	4b32      	ldr	r3, [pc, #200]	@ (8001eb4 <_ZL12MX_TIM2_Initv+0x118>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dee:	4b31      	ldr	r3, [pc, #196]	@ (8001eb4 <_ZL12MX_TIM2_Initv+0x118>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001df4:	482f      	ldr	r0, [pc, #188]	@ (8001eb4 <_ZL12MX_TIM2_Initv+0x118>)
 8001df6:	f001 fc13 	bl	8003620 <HAL_TIM_Base_Init>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	bf14      	ite	ne
 8001e00:	2301      	movne	r3, #1
 8001e02:	2300      	moveq	r3, #0
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <_ZL12MX_TIM2_Initv+0x72>
  {
    Error_Handler();
 8001e0a:	f000 f93b 	bl	8002084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e12:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e14:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4826      	ldr	r0, [pc, #152]	@ (8001eb4 <_ZL12MX_TIM2_Initv+0x118>)
 8001e1c:	f002 fd5a 	bl	80048d4 <HAL_TIM_ConfigClockSource>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	bf14      	ite	ne
 8001e26:	2301      	movne	r3, #1
 8001e28:	2300      	moveq	r3, #0
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <_ZL12MX_TIM2_Initv+0x98>
  {
    Error_Handler();
 8001e30:	f000 f928 	bl	8002084 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e34:	481f      	ldr	r0, [pc, #124]	@ (8001eb4 <_ZL12MX_TIM2_Initv+0x118>)
 8001e36:	f001 fc42 	bl	80036be <HAL_TIM_PWM_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	bf14      	ite	ne
 8001e40:	2301      	movne	r3, #1
 8001e42:	2300      	moveq	r3, #0
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <_ZL12MX_TIM2_Initv+0xb2>
  {
    Error_Handler();
 8001e4a:	f000 f91b 	bl	8002084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e56:	f107 0320 	add.w	r3, r7, #32
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4815      	ldr	r0, [pc, #84]	@ (8001eb4 <_ZL12MX_TIM2_Initv+0x118>)
 8001e5e:	f003 fa59 	bl	8005314 <HAL_TIMEx_MasterConfigSynchronization>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	bf14      	ite	ne
 8001e68:	2301      	movne	r3, #1
 8001e6a:	2300      	moveq	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <_ZL12MX_TIM2_Initv+0xda>
  {
    Error_Handler();
 8001e72:	f000 f907 	bl	8002084 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e76:	2360      	movs	r3, #96	@ 0x60
 8001e78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e82:	2300      	movs	r3, #0
 8001e84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e86:	1d3b      	adds	r3, r7, #4
 8001e88:	2200      	movs	r2, #0
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4809      	ldr	r0, [pc, #36]	@ (8001eb4 <_ZL12MX_TIM2_Initv+0x118>)
 8001e8e:	f002 fc5f 	bl	8004750 <HAL_TIM_PWM_ConfigChannel>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	bf14      	ite	ne
 8001e98:	2301      	movne	r3, #1
 8001e9a:	2300      	moveq	r3, #0
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <_ZL12MX_TIM2_Initv+0x10a>
  {
    Error_Handler();
 8001ea2:	f000 f8ef 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ea6:	4803      	ldr	r0, [pc, #12]	@ (8001eb4 <_ZL12MX_TIM2_Initv+0x118>)
 8001ea8:	f000 f9e6 	bl	8002278 <HAL_TIM_MspPostInit>

}
 8001eac:	bf00      	nop
 8001eae:	3738      	adds	r7, #56	@ 0x38
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20000238 	.word	0x20000238

08001eb8 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08c      	sub	sp, #48	@ 0x30
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ebe:	f107 030c 	add.w	r3, r7, #12
 8001ec2:	2224      	movs	r2, #36	@ 0x24
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f004 fd47 	bl	800695a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ed4:	4b25      	ldr	r3, [pc, #148]	@ (8001f6c <_ZL12MX_TIM5_Initv+0xb4>)
 8001ed6:	4a26      	ldr	r2, [pc, #152]	@ (8001f70 <_ZL12MX_TIM5_Initv+0xb8>)
 8001ed8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001eda:	4b24      	ldr	r3, [pc, #144]	@ (8001f6c <_ZL12MX_TIM5_Initv+0xb4>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee0:	4b22      	ldr	r3, [pc, #136]	@ (8001f6c <_ZL12MX_TIM5_Initv+0xb4>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001ee6:	4b21      	ldr	r3, [pc, #132]	@ (8001f6c <_ZL12MX_TIM5_Initv+0xb4>)
 8001ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8001eec:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eee:	4b1f      	ldr	r3, [pc, #124]	@ (8001f6c <_ZL12MX_TIM5_Initv+0xb4>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f6c <_ZL12MX_TIM5_Initv+0xb4>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001efa:	2303      	movs	r3, #3
 8001efc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001efe:	2300      	movs	r3, #0
 8001f00:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f02:	2301      	movs	r3, #1
 8001f04:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f12:	2301      	movs	r3, #1
 8001f14:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f16:	2300      	movs	r3, #0
 8001f18:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001f1e:	f107 030c 	add.w	r3, r7, #12
 8001f22:	4619      	mov	r1, r3
 8001f24:	4811      	ldr	r0, [pc, #68]	@ (8001f6c <_ZL12MX_TIM5_Initv+0xb4>)
 8001f26:	f001 ff59 	bl	8003ddc <HAL_TIM_Encoder_Init>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	bf14      	ite	ne
 8001f30:	2301      	movne	r3, #1
 8001f32:	2300      	moveq	r3, #0
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <_ZL12MX_TIM5_Initv+0x86>
  {
    Error_Handler();
 8001f3a:	f000 f8a3 	bl	8002084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f46:	1d3b      	adds	r3, r7, #4
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4808      	ldr	r0, [pc, #32]	@ (8001f6c <_ZL12MX_TIM5_Initv+0xb4>)
 8001f4c:	f003 f9e2 	bl	8005314 <HAL_TIMEx_MasterConfigSynchronization>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	bf14      	ite	ne
 8001f56:	2301      	movne	r3, #1
 8001f58:	2300      	moveq	r3, #0
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <_ZL12MX_TIM5_Initv+0xac>
  {
    Error_Handler();
 8001f60:	f000 f890 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001f64:	bf00      	nop
 8001f66:	3730      	adds	r7, #48	@ 0x30
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20000280 	.word	0x20000280
 8001f70:	40000c00 	.word	0x40000c00

08001f74 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f78:	4b13      	ldr	r3, [pc, #76]	@ (8001fc8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001f7a:	4a14      	ldr	r2, [pc, #80]	@ (8001fcc <_ZL19MX_USART2_UART_Initv+0x58>)
 8001f7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f7e:	4b12      	ldr	r3, [pc, #72]	@ (8001fc8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001f80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f86:	4b10      	ldr	r3, [pc, #64]	@ (8001fc8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f92:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f98:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001f9a:	220c      	movs	r2, #12
 8001f9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa4:	4b08      	ldr	r3, [pc, #32]	@ (8001fc8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001faa:	4807      	ldr	r0, [pc, #28]	@ (8001fc8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001fac:	f003 fa34 	bl	8005418 <HAL_UART_Init>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	bf14      	ite	ne
 8001fb6:	2301      	movne	r3, #1
 8001fb8:	2300      	moveq	r3, #0
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001fc0:	f000 f860 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fc4:	bf00      	nop
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	200002c8 	.word	0x200002c8
 8001fcc:	40004400 	.word	0x40004400

08001fd0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd6:	f107 030c 	add.w	r3, r7, #12
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
 8001fde:	605a      	str	r2, [r3, #4]
 8001fe0:	609a      	str	r2, [r3, #8]
 8001fe2:	60da      	str	r2, [r3, #12]
 8001fe4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	4b24      	ldr	r3, [pc, #144]	@ (800207c <_ZL12MX_GPIO_Initv+0xac>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	4a23      	ldr	r2, [pc, #140]	@ (800207c <_ZL12MX_GPIO_Initv+0xac>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff6:	4b21      	ldr	r3, [pc, #132]	@ (800207c <_ZL12MX_GPIO_Initv+0xac>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	607b      	str	r3, [r7, #4]
 8002006:	4b1d      	ldr	r3, [pc, #116]	@ (800207c <_ZL12MX_GPIO_Initv+0xac>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	4a1c      	ldr	r2, [pc, #112]	@ (800207c <_ZL12MX_GPIO_Initv+0xac>)
 800200c:	f043 0302 	orr.w	r3, r3, #2
 8002010:	6313      	str	r3, [r2, #48]	@ 0x30
 8002012:	4b1a      	ldr	r3, [pc, #104]	@ (800207c <_ZL12MX_GPIO_Initv+0xac>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	607b      	str	r3, [r7, #4]
 800201c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800201e:	2200      	movs	r2, #0
 8002020:	f44f 4150 	mov.w	r1, #53248	@ 0xd000
 8002024:	4816      	ldr	r0, [pc, #88]	@ (8002080 <_ZL12MX_GPIO_Initv+0xb0>)
 8002026:	f000 fe57 	bl	8002cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 800202a:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800202e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002030:	2301      	movs	r3, #1
 8002032:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002038:	2300      	movs	r3, #0
 800203a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203c:	f107 030c 	add.w	r3, r7, #12
 8002040:	4619      	mov	r1, r3
 8002042:	480f      	ldr	r0, [pc, #60]	@ (8002080 <_ZL12MX_GPIO_Initv+0xb0>)
 8002044:	f000 fcac 	bl	80029a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002048:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800204c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800204e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002052:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002058:	f107 030c 	add.w	r3, r7, #12
 800205c:	4619      	mov	r1, r3
 800205e:	4808      	ldr	r0, [pc, #32]	@ (8002080 <_ZL12MX_GPIO_Initv+0xb0>)
 8002060:	f000 fc9e 	bl	80029a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002064:	2200      	movs	r2, #0
 8002066:	2100      	movs	r1, #0
 8002068:	2028      	movs	r0, #40	@ 0x28
 800206a:	f000 fc62 	bl	8002932 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800206e:	2028      	movs	r0, #40	@ 0x28
 8002070:	f000 fc7b 	bl	800296a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002074:	bf00      	nop
 8002076:	3720      	adds	r7, #32
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40023800 	.word	0x40023800
 8002080:	40020400 	.word	0x40020400

08002084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002088:	b672      	cpsid	i
}
 800208a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800208c:	bf00      	nop
 800208e:	e7fd      	b.n	800208c <Error_Handler+0x8>

08002090 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	4b10      	ldr	r3, [pc, #64]	@ (80020dc <HAL_MspInit+0x4c>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209e:	4a0f      	ldr	r2, [pc, #60]	@ (80020dc <HAL_MspInit+0x4c>)
 80020a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80020a6:	4b0d      	ldr	r3, [pc, #52]	@ (80020dc <HAL_MspInit+0x4c>)
 80020a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020ae:	607b      	str	r3, [r7, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	603b      	str	r3, [r7, #0]
 80020b6:	4b09      	ldr	r3, [pc, #36]	@ (80020dc <HAL_MspInit+0x4c>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ba:	4a08      	ldr	r2, [pc, #32]	@ (80020dc <HAL_MspInit+0x4c>)
 80020bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020c2:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <HAL_MspInit+0x4c>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ca:	603b      	str	r3, [r7, #0]
 80020cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40023800 	.word	0x40023800

080020e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	@ 0x28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a33      	ldr	r2, [pc, #204]	@ (80021cc <HAL_TIM_Base_MspInit+0xec>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d14d      	bne.n	800219e <HAL_TIM_Base_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	4b32      	ldr	r3, [pc, #200]	@ (80021d0 <HAL_TIM_Base_MspInit+0xf0>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210a:	4a31      	ldr	r2, [pc, #196]	@ (80021d0 <HAL_TIM_Base_MspInit+0xf0>)
 800210c:	f043 0301 	orr.w	r3, r3, #1
 8002110:	6453      	str	r3, [r2, #68]	@ 0x44
 8002112:	4b2f      	ldr	r3, [pc, #188]	@ (80021d0 <HAL_TIM_Base_MspInit+0xf0>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	4b2b      	ldr	r3, [pc, #172]	@ (80021d0 <HAL_TIM_Base_MspInit+0xf0>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	4a2a      	ldr	r2, [pc, #168]	@ (80021d0 <HAL_TIM_Base_MspInit+0xf0>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6313      	str	r3, [r2, #48]	@ 0x30
 800212e:	4b28      	ldr	r3, [pc, #160]	@ (80021d0 <HAL_TIM_Base_MspInit+0xf0>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800213a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800213e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002140:	2302      	movs	r3, #2
 8002142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002148:	2300      	movs	r3, #0
 800214a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800214c:	2301      	movs	r3, #1
 800214e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	4619      	mov	r1, r3
 8002156:	481f      	ldr	r0, [pc, #124]	@ (80021d4 <HAL_TIM_Base_MspInit+0xf4>)
 8002158:	f000 fc22 	bl	80029a0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800215c:	2200      	movs	r2, #0
 800215e:	2100      	movs	r1, #0
 8002160:	2018      	movs	r0, #24
 8002162:	f000 fbe6 	bl	8002932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002166:	2018      	movs	r0, #24
 8002168:	f000 fbff 	bl	800296a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800216c:	2200      	movs	r2, #0
 800216e:	2100      	movs	r1, #0
 8002170:	2019      	movs	r0, #25
 8002172:	f000 fbde 	bl	8002932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002176:	2019      	movs	r0, #25
 8002178:	f000 fbf7 	bl	800296a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800217c:	2200      	movs	r2, #0
 800217e:	2100      	movs	r1, #0
 8002180:	201a      	movs	r0, #26
 8002182:	f000 fbd6 	bl	8002932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002186:	201a      	movs	r0, #26
 8002188:	f000 fbef 	bl	800296a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800218c:	2200      	movs	r2, #0
 800218e:	2100      	movs	r1, #0
 8002190:	201b      	movs	r0, #27
 8002192:	f000 fbce 	bl	8002932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002196:	201b      	movs	r0, #27
 8002198:	f000 fbe7 	bl	800296a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800219c:	e012      	b.n	80021c4 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM2)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021a6:	d10d      	bne.n	80021c4 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021a8:	2300      	movs	r3, #0
 80021aa:	60bb      	str	r3, [r7, #8]
 80021ac:	4b08      	ldr	r3, [pc, #32]	@ (80021d0 <HAL_TIM_Base_MspInit+0xf0>)
 80021ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b0:	4a07      	ldr	r2, [pc, #28]	@ (80021d0 <HAL_TIM_Base_MspInit+0xf0>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80021b8:	4b05      	ldr	r3, [pc, #20]	@ (80021d0 <HAL_TIM_Base_MspInit+0xf0>)
 80021ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	68bb      	ldr	r3, [r7, #8]
}
 80021c4:	bf00      	nop
 80021c6:	3728      	adds	r7, #40	@ 0x28
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40010000 	.word	0x40010000
 80021d0:	40023800 	.word	0x40023800
 80021d4:	40020000 	.word	0x40020000

080021d8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08a      	sub	sp, #40	@ 0x28
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e0:	f107 0314 	add.w	r3, r7, #20
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
 80021ee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a1d      	ldr	r2, [pc, #116]	@ (800226c <HAL_TIM_Encoder_MspInit+0x94>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d133      	bne.n	8002262 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	613b      	str	r3, [r7, #16]
 80021fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x98>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002202:	4a1b      	ldr	r2, [pc, #108]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x98>)
 8002204:	f043 0308 	orr.w	r3, r3, #8
 8002208:	6413      	str	r3, [r2, #64]	@ 0x40
 800220a:	4b19      	ldr	r3, [pc, #100]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x98>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	4b15      	ldr	r3, [pc, #84]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x98>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221e:	4a14      	ldr	r2, [pc, #80]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x98>)
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	6313      	str	r3, [r2, #48]	@ 0x30
 8002226:	4b12      	ldr	r3, [pc, #72]	@ (8002270 <HAL_TIM_Encoder_MspInit+0x98>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002232:	2303      	movs	r3, #3
 8002234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002236:	2302      	movs	r3, #2
 8002238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800223e:	2300      	movs	r3, #0
 8002240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002242:	2302      	movs	r3, #2
 8002244:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002246:	f107 0314 	add.w	r3, r7, #20
 800224a:	4619      	mov	r1, r3
 800224c:	4809      	ldr	r0, [pc, #36]	@ (8002274 <HAL_TIM_Encoder_MspInit+0x9c>)
 800224e:	f000 fba7 	bl	80029a0 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002252:	2200      	movs	r2, #0
 8002254:	2100      	movs	r1, #0
 8002256:	2032      	movs	r0, #50	@ 0x32
 8002258:	f000 fb6b 	bl	8002932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800225c:	2032      	movs	r0, #50	@ 0x32
 800225e:	f000 fb84 	bl	800296a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002262:	bf00      	nop
 8002264:	3728      	adds	r7, #40	@ 0x28
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40000c00 	.word	0x40000c00
 8002270:	40023800 	.word	0x40023800
 8002274:	40020000 	.word	0x40020000

08002278 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002280:	f107 030c 	add.w	r3, r7, #12
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002298:	d11e      	bne.n	80022d8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	4b10      	ldr	r3, [pc, #64]	@ (80022e0 <HAL_TIM_MspPostInit+0x68>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a2:	4a0f      	ldr	r2, [pc, #60]	@ (80022e0 <HAL_TIM_MspPostInit+0x68>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022aa:	4b0d      	ldr	r3, [pc, #52]	@ (80022e0 <HAL_TIM_MspPostInit+0x68>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80022b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022bc:	2302      	movs	r3, #2
 80022be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c4:	2300      	movs	r3, #0
 80022c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022c8:	2301      	movs	r3, #1
 80022ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022cc:	f107 030c 	add.w	r3, r7, #12
 80022d0:	4619      	mov	r1, r3
 80022d2:	4804      	ldr	r0, [pc, #16]	@ (80022e4 <HAL_TIM_MspPostInit+0x6c>)
 80022d4:	f000 fb64 	bl	80029a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80022d8:	bf00      	nop
 80022da:	3720      	adds	r7, #32
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40023800 	.word	0x40023800
 80022e4:	40020000 	.word	0x40020000

080022e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08a      	sub	sp, #40	@ 0x28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a19      	ldr	r2, [pc, #100]	@ (800236c <HAL_UART_MspInit+0x84>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d12b      	bne.n	8002362 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	4b18      	ldr	r3, [pc, #96]	@ (8002370 <HAL_UART_MspInit+0x88>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002312:	4a17      	ldr	r2, [pc, #92]	@ (8002370 <HAL_UART_MspInit+0x88>)
 8002314:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002318:	6413      	str	r3, [r2, #64]	@ 0x40
 800231a:	4b15      	ldr	r3, [pc, #84]	@ (8002370 <HAL_UART_MspInit+0x88>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002322:	613b      	str	r3, [r7, #16]
 8002324:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	4b11      	ldr	r3, [pc, #68]	@ (8002370 <HAL_UART_MspInit+0x88>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232e:	4a10      	ldr	r2, [pc, #64]	@ (8002370 <HAL_UART_MspInit+0x88>)
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	6313      	str	r3, [r2, #48]	@ 0x30
 8002336:	4b0e      	ldr	r3, [pc, #56]	@ (8002370 <HAL_UART_MspInit+0x88>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002342:	230c      	movs	r3, #12
 8002344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002346:	2302      	movs	r3, #2
 8002348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234a:	2300      	movs	r3, #0
 800234c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234e:	2303      	movs	r3, #3
 8002350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002352:	2307      	movs	r3, #7
 8002354:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002356:	f107 0314 	add.w	r3, r7, #20
 800235a:	4619      	mov	r1, r3
 800235c:	4805      	ldr	r0, [pc, #20]	@ (8002374 <HAL_UART_MspInit+0x8c>)
 800235e:	f000 fb1f 	bl	80029a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002362:	bf00      	nop
 8002364:	3728      	adds	r7, #40	@ 0x28
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40004400 	.word	0x40004400
 8002370:	40023800 	.word	0x40023800
 8002374:	40020000 	.word	0x40020000

08002378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800237c:	bf00      	nop
 800237e:	e7fd      	b.n	800237c <NMI_Handler+0x4>

08002380 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002384:	bf00      	nop
 8002386:	e7fd      	b.n	8002384 <HardFault_Handler+0x4>

08002388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800238c:	bf00      	nop
 800238e:	e7fd      	b.n	800238c <MemManage_Handler+0x4>

08002390 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002394:	bf00      	nop
 8002396:	e7fd      	b.n	8002394 <BusFault_Handler+0x4>

08002398 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800239c:	bf00      	nop
 800239e:	e7fd      	b.n	800239c <UsageFault_Handler+0x4>

080023a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023a4:	bf00      	nop
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ae:	b480      	push	{r7}
 80023b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023b2:	bf00      	nop
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023ce:	f000 f991 	bl	80026f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023dc:	4802      	ldr	r0, [pc, #8]	@ (80023e8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80023de:	f002 f82b 	bl	8004438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	200001f0 	.word	0x200001f0

080023ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023f0:	4802      	ldr	r0, [pc, #8]	@ (80023fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80023f2:	f002 f821 	bl	8004438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	200001f0 	.word	0x200001f0

08002400 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002404:	4802      	ldr	r0, [pc, #8]	@ (8002410 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8002406:	f002 f817 	bl	8004438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	200001f0 	.word	0x200001f0

08002414 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002418:	4802      	ldr	r0, [pc, #8]	@ (8002424 <TIM1_CC_IRQHandler+0x10>)
 800241a:	f002 f80d 	bl	8004438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	200001f0 	.word	0x200001f0

08002428 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800242c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002430:	f000 fc86 	bl	8002d40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}

08002438 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800243c:	4802      	ldr	r0, [pc, #8]	@ (8002448 <TIM5_IRQHandler+0x10>)
 800243e:	f001 fffb 	bl	8004438 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000280 	.word	0x20000280

0800244c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  return 1;
 8002450:	2301      	movs	r3, #1
}
 8002452:	4618      	mov	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr

0800245c <_kill>:

int _kill(int pid, int sig)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002466:	f004 fb1f 	bl	8006aa8 <__errno>
 800246a:	4603      	mov	r3, r0
 800246c:	2216      	movs	r2, #22
 800246e:	601a      	str	r2, [r3, #0]
  return -1;
 8002470:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002474:	4618      	mov	r0, r3
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <_exit>:

void _exit (int status)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002484:	f04f 31ff 	mov.w	r1, #4294967295
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff ffe7 	bl	800245c <_kill>
  while (1) {}    /* Make sure we hang here */
 800248e:	bf00      	nop
 8002490:	e7fd      	b.n	800248e <_exit+0x12>

08002492 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b086      	sub	sp, #24
 8002496:	af00      	add	r7, sp, #0
 8002498:	60f8      	str	r0, [r7, #12]
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
 80024a2:	e00a      	b.n	80024ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024a4:	f3af 8000 	nop.w
 80024a8:	4601      	mov	r1, r0
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	1c5a      	adds	r2, r3, #1
 80024ae:	60ba      	str	r2, [r7, #8]
 80024b0:	b2ca      	uxtb	r2, r1
 80024b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	3301      	adds	r3, #1
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	429a      	cmp	r2, r3
 80024c0:	dbf0      	blt.n	80024a4 <_read+0x12>
  }

  return len;
 80024c2:	687b      	ldr	r3, [r7, #4]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	e009      	b.n	80024f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	60ba      	str	r2, [r7, #8]
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	3301      	adds	r3, #1
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	dbf1      	blt.n	80024de <_write+0x12>
  }
  return len;
 80024fa:	687b      	ldr	r3, [r7, #4]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <_close>:

int _close(int file)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800250c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002510:	4618      	mov	r0, r3
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800252c:	605a      	str	r2, [r3, #4]
  return 0;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <_isatty>:

int _isatty(int file)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002544:	2301      	movs	r3, #1
}
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002552:	b480      	push	{r7}
 8002554:	b085      	sub	sp, #20
 8002556:	af00      	add	r7, sp, #0
 8002558:	60f8      	str	r0, [r7, #12]
 800255a:	60b9      	str	r1, [r7, #8]
 800255c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800255e:	2300      	movs	r3, #0
}
 8002560:	4618      	mov	r0, r3
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b086      	sub	sp, #24
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002574:	4a14      	ldr	r2, [pc, #80]	@ (80025c8 <_sbrk+0x5c>)
 8002576:	4b15      	ldr	r3, [pc, #84]	@ (80025cc <_sbrk+0x60>)
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002580:	4b13      	ldr	r3, [pc, #76]	@ (80025d0 <_sbrk+0x64>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d102      	bne.n	800258e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002588:	4b11      	ldr	r3, [pc, #68]	@ (80025d0 <_sbrk+0x64>)
 800258a:	4a12      	ldr	r2, [pc, #72]	@ (80025d4 <_sbrk+0x68>)
 800258c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800258e:	4b10      	ldr	r3, [pc, #64]	@ (80025d0 <_sbrk+0x64>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4413      	add	r3, r2
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	429a      	cmp	r2, r3
 800259a:	d207      	bcs.n	80025ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800259c:	f004 fa84 	bl	8006aa8 <__errno>
 80025a0:	4603      	mov	r3, r0
 80025a2:	220c      	movs	r2, #12
 80025a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025a6:	f04f 33ff 	mov.w	r3, #4294967295
 80025aa:	e009      	b.n	80025c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025ac:	4b08      	ldr	r3, [pc, #32]	@ (80025d0 <_sbrk+0x64>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025b2:	4b07      	ldr	r3, [pc, #28]	@ (80025d0 <_sbrk+0x64>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4413      	add	r3, r2
 80025ba:	4a05      	ldr	r2, [pc, #20]	@ (80025d0 <_sbrk+0x64>)
 80025bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025be:	68fb      	ldr	r3, [r7, #12]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20020000 	.word	0x20020000
 80025cc:	00000400 	.word	0x00000400
 80025d0:	20000390 	.word	0x20000390
 80025d4:	200004e8 	.word	0x200004e8

080025d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025dc:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <SystemInit+0x20>)
 80025de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e2:	4a05      	ldr	r2, [pc, #20]	@ (80025f8 <SystemInit+0x20>)
 80025e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80025fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002634 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002600:	f7ff ffea 	bl	80025d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002604:	480c      	ldr	r0, [pc, #48]	@ (8002638 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002606:	490d      	ldr	r1, [pc, #52]	@ (800263c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002608:	4a0d      	ldr	r2, [pc, #52]	@ (8002640 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800260a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800260c:	e002      	b.n	8002614 <LoopCopyDataInit>

0800260e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800260e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002612:	3304      	adds	r3, #4

08002614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002618:	d3f9      	bcc.n	800260e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800261a:	4a0a      	ldr	r2, [pc, #40]	@ (8002644 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800261c:	4c0a      	ldr	r4, [pc, #40]	@ (8002648 <LoopFillZerobss+0x22>)
  movs r3, #0
 800261e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002620:	e001      	b.n	8002626 <LoopFillZerobss>

08002622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002624:	3204      	adds	r2, #4

08002626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002628:	d3fb      	bcc.n	8002622 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800262a:	f004 fa43 	bl	8006ab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800262e:	f7ff f9c7 	bl	80019c0 <main>
  bx  lr    
 8002632:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002634:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800263c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002640:	08008df0 	.word	0x08008df0
  ldr r2, =_sbss
 8002644:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002648:	200004e8 	.word	0x200004e8

0800264c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800264c:	e7fe      	b.n	800264c <ADC_IRQHandler>
	...

08002650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002654:	4b0e      	ldr	r3, [pc, #56]	@ (8002690 <HAL_Init+0x40>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a0d      	ldr	r2, [pc, #52]	@ (8002690 <HAL_Init+0x40>)
 800265a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800265e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002660:	4b0b      	ldr	r3, [pc, #44]	@ (8002690 <HAL_Init+0x40>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0a      	ldr	r2, [pc, #40]	@ (8002690 <HAL_Init+0x40>)
 8002666:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800266a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800266c:	4b08      	ldr	r3, [pc, #32]	@ (8002690 <HAL_Init+0x40>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a07      	ldr	r2, [pc, #28]	@ (8002690 <HAL_Init+0x40>)
 8002672:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002676:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002678:	2003      	movs	r0, #3
 800267a:	f000 f94f 	bl	800291c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800267e:	200f      	movs	r0, #15
 8002680:	f000 f808 	bl	8002694 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002684:	f7ff fd04 	bl	8002090 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40023c00 	.word	0x40023c00

08002694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800269c:	4b12      	ldr	r3, [pc, #72]	@ (80026e8 <HAL_InitTick+0x54>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b12      	ldr	r3, [pc, #72]	@ (80026ec <HAL_InitTick+0x58>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	4619      	mov	r1, r3
 80026a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 f967 	bl	8002986 <HAL_SYSTICK_Config>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e00e      	b.n	80026e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b0f      	cmp	r3, #15
 80026c6:	d80a      	bhi.n	80026de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026c8:	2200      	movs	r2, #0
 80026ca:	6879      	ldr	r1, [r7, #4]
 80026cc:	f04f 30ff 	mov.w	r0, #4294967295
 80026d0:	f000 f92f 	bl	8002932 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026d4:	4a06      	ldr	r2, [pc, #24]	@ (80026f0 <HAL_InitTick+0x5c>)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	e000      	b.n	80026e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20000000 	.word	0x20000000
 80026ec:	20000008 	.word	0x20000008
 80026f0:	20000004 	.word	0x20000004

080026f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026f8:	4b06      	ldr	r3, [pc, #24]	@ (8002714 <HAL_IncTick+0x20>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	461a      	mov	r2, r3
 80026fe:	4b06      	ldr	r3, [pc, #24]	@ (8002718 <HAL_IncTick+0x24>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4413      	add	r3, r2
 8002704:	4a04      	ldr	r2, [pc, #16]	@ (8002718 <HAL_IncTick+0x24>)
 8002706:	6013      	str	r3, [r2, #0]
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	20000008 	.word	0x20000008
 8002718:	20000394 	.word	0x20000394

0800271c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  return uwTick;
 8002720:	4b03      	ldr	r3, [pc, #12]	@ (8002730 <HAL_GetTick+0x14>)
 8002722:	681b      	ldr	r3, [r3, #0]
}
 8002724:	4618      	mov	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	20000394 	.word	0x20000394

08002734 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800273c:	f7ff ffee 	bl	800271c <HAL_GetTick>
 8002740:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800274c:	d005      	beq.n	800275a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800274e:	4b0a      	ldr	r3, [pc, #40]	@ (8002778 <HAL_Delay+0x44>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4413      	add	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800275a:	bf00      	nop
 800275c:	f7ff ffde 	bl	800271c <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	429a      	cmp	r2, r3
 800276a:	d8f7      	bhi.n	800275c <HAL_Delay+0x28>
  {
  }
}
 800276c:	bf00      	nop
 800276e:	bf00      	nop
 8002770:	3710      	adds	r7, #16
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20000008 	.word	0x20000008

0800277c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800278c:	4b0c      	ldr	r3, [pc, #48]	@ (80027c0 <__NVIC_SetPriorityGrouping+0x44>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002798:	4013      	ands	r3, r2
 800279a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027a4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ae:	4a04      	ldr	r2, [pc, #16]	@ (80027c0 <__NVIC_SetPriorityGrouping+0x44>)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	60d3      	str	r3, [r2, #12]
}
 80027b4:	bf00      	nop
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027c8:	4b04      	ldr	r3, [pc, #16]	@ (80027dc <__NVIC_GetPriorityGrouping+0x18>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	0a1b      	lsrs	r3, r3, #8
 80027ce:	f003 0307 	and.w	r3, r3, #7
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	db0b      	blt.n	800280a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	f003 021f 	and.w	r2, r3, #31
 80027f8:	4907      	ldr	r1, [pc, #28]	@ (8002818 <__NVIC_EnableIRQ+0x38>)
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	2001      	movs	r0, #1
 8002802:	fa00 f202 	lsl.w	r2, r0, r2
 8002806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	e000e100 	.word	0xe000e100

0800281c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	6039      	str	r1, [r7, #0]
 8002826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282c:	2b00      	cmp	r3, #0
 800282e:	db0a      	blt.n	8002846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	b2da      	uxtb	r2, r3
 8002834:	490c      	ldr	r1, [pc, #48]	@ (8002868 <__NVIC_SetPriority+0x4c>)
 8002836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283a:	0112      	lsls	r2, r2, #4
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	440b      	add	r3, r1
 8002840:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002844:	e00a      	b.n	800285c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	b2da      	uxtb	r2, r3
 800284a:	4908      	ldr	r1, [pc, #32]	@ (800286c <__NVIC_SetPriority+0x50>)
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	3b04      	subs	r3, #4
 8002854:	0112      	lsls	r2, r2, #4
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	440b      	add	r3, r1
 800285a:	761a      	strb	r2, [r3, #24]
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	e000e100 	.word	0xe000e100
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002870:	b480      	push	{r7}
 8002872:	b089      	sub	sp, #36	@ 0x24
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f1c3 0307 	rsb	r3, r3, #7
 800288a:	2b04      	cmp	r3, #4
 800288c:	bf28      	it	cs
 800288e:	2304      	movcs	r3, #4
 8002890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	3304      	adds	r3, #4
 8002896:	2b06      	cmp	r3, #6
 8002898:	d902      	bls.n	80028a0 <NVIC_EncodePriority+0x30>
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	3b03      	subs	r3, #3
 800289e:	e000      	b.n	80028a2 <NVIC_EncodePriority+0x32>
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a4:	f04f 32ff 	mov.w	r2, #4294967295
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43da      	mvns	r2, r3
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	401a      	ands	r2, r3
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028b8:	f04f 31ff 	mov.w	r1, #4294967295
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	fa01 f303 	lsl.w	r3, r1, r3
 80028c2:	43d9      	mvns	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c8:	4313      	orrs	r3, r2
         );
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3724      	adds	r7, #36	@ 0x24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
	...

080028d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028e8:	d301      	bcc.n	80028ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ea:	2301      	movs	r3, #1
 80028ec:	e00f      	b.n	800290e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002918 <SysTick_Config+0x40>)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028f6:	210f      	movs	r1, #15
 80028f8:	f04f 30ff 	mov.w	r0, #4294967295
 80028fc:	f7ff ff8e 	bl	800281c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002900:	4b05      	ldr	r3, [pc, #20]	@ (8002918 <SysTick_Config+0x40>)
 8002902:	2200      	movs	r2, #0
 8002904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002906:	4b04      	ldr	r3, [pc, #16]	@ (8002918 <SysTick_Config+0x40>)
 8002908:	2207      	movs	r2, #7
 800290a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	e000e010 	.word	0xe000e010

0800291c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7ff ff29 	bl	800277c <__NVIC_SetPriorityGrouping>
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002932:	b580      	push	{r7, lr}
 8002934:	b086      	sub	sp, #24
 8002936:	af00      	add	r7, sp, #0
 8002938:	4603      	mov	r3, r0
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
 800293e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002944:	f7ff ff3e 	bl	80027c4 <__NVIC_GetPriorityGrouping>
 8002948:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	6978      	ldr	r0, [r7, #20]
 8002950:	f7ff ff8e 	bl	8002870 <NVIC_EncodePriority>
 8002954:	4602      	mov	r2, r0
 8002956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800295a:	4611      	mov	r1, r2
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff ff5d 	bl	800281c <__NVIC_SetPriority>
}
 8002962:	bf00      	nop
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	4603      	mov	r3, r0
 8002972:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff ff31 	bl	80027e0 <__NVIC_EnableIRQ>
}
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7ff ffa2 	bl	80028d8 <SysTick_Config>
 8002994:	4603      	mov	r3, r0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b089      	sub	sp, #36	@ 0x24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
 80029ba:	e159      	b.n	8002c70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029bc:	2201      	movs	r2, #1
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	f040 8148 	bne.w	8002c6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d005      	beq.n	80029f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d130      	bne.n	8002a54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	2203      	movs	r2, #3
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	43db      	mvns	r3, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4013      	ands	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a28:	2201      	movs	r2, #1
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4013      	ands	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	091b      	lsrs	r3, r3, #4
 8002a3e:	f003 0201 	and.w	r2, r3, #1
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	d017      	beq.n	8002a90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	2203      	movs	r2, #3
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 0303 	and.w	r3, r3, #3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d123      	bne.n	8002ae4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	08da      	lsrs	r2, r3, #3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3208      	adds	r2, #8
 8002aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	220f      	movs	r2, #15
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	691a      	ldr	r2, [r3, #16]
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	08da      	lsrs	r2, r3, #3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3208      	adds	r2, #8
 8002ade:	69b9      	ldr	r1, [r7, #24]
 8002ae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	2203      	movs	r2, #3
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43db      	mvns	r3, r3
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4013      	ands	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 0203 	and.w	r2, r3, #3
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 80a2 	beq.w	8002c6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	4b57      	ldr	r3, [pc, #348]	@ (8002c88 <HAL_GPIO_Init+0x2e8>)
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2e:	4a56      	ldr	r2, [pc, #344]	@ (8002c88 <HAL_GPIO_Init+0x2e8>)
 8002b30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b34:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b36:	4b54      	ldr	r3, [pc, #336]	@ (8002c88 <HAL_GPIO_Init+0x2e8>)
 8002b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b42:	4a52      	ldr	r2, [pc, #328]	@ (8002c8c <HAL_GPIO_Init+0x2ec>)
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	089b      	lsrs	r3, r3, #2
 8002b48:	3302      	adds	r3, #2
 8002b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	220f      	movs	r2, #15
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4013      	ands	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a49      	ldr	r2, [pc, #292]	@ (8002c90 <HAL_GPIO_Init+0x2f0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d019      	beq.n	8002ba2 <HAL_GPIO_Init+0x202>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a48      	ldr	r2, [pc, #288]	@ (8002c94 <HAL_GPIO_Init+0x2f4>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d013      	beq.n	8002b9e <HAL_GPIO_Init+0x1fe>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a47      	ldr	r2, [pc, #284]	@ (8002c98 <HAL_GPIO_Init+0x2f8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d00d      	beq.n	8002b9a <HAL_GPIO_Init+0x1fa>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a46      	ldr	r2, [pc, #280]	@ (8002c9c <HAL_GPIO_Init+0x2fc>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d007      	beq.n	8002b96 <HAL_GPIO_Init+0x1f6>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a45      	ldr	r2, [pc, #276]	@ (8002ca0 <HAL_GPIO_Init+0x300>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d101      	bne.n	8002b92 <HAL_GPIO_Init+0x1f2>
 8002b8e:	2304      	movs	r3, #4
 8002b90:	e008      	b.n	8002ba4 <HAL_GPIO_Init+0x204>
 8002b92:	2307      	movs	r3, #7
 8002b94:	e006      	b.n	8002ba4 <HAL_GPIO_Init+0x204>
 8002b96:	2303      	movs	r3, #3
 8002b98:	e004      	b.n	8002ba4 <HAL_GPIO_Init+0x204>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e002      	b.n	8002ba4 <HAL_GPIO_Init+0x204>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <HAL_GPIO_Init+0x204>
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	69fa      	ldr	r2, [r7, #28]
 8002ba6:	f002 0203 	and.w	r2, r2, #3
 8002baa:	0092      	lsls	r2, r2, #2
 8002bac:	4093      	lsls	r3, r2
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bb4:	4935      	ldr	r1, [pc, #212]	@ (8002c8c <HAL_GPIO_Init+0x2ec>)
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	089b      	lsrs	r3, r3, #2
 8002bba:	3302      	adds	r3, #2
 8002bbc:	69ba      	ldr	r2, [r7, #24]
 8002bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bc2:	4b38      	ldr	r3, [pc, #224]	@ (8002ca4 <HAL_GPIO_Init+0x304>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002be6:	4a2f      	ldr	r2, [pc, #188]	@ (8002ca4 <HAL_GPIO_Init+0x304>)
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bec:	4b2d      	ldr	r3, [pc, #180]	@ (8002ca4 <HAL_GPIO_Init+0x304>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c10:	4a24      	ldr	r2, [pc, #144]	@ (8002ca4 <HAL_GPIO_Init+0x304>)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c16:	4b23      	ldr	r3, [pc, #140]	@ (8002ca4 <HAL_GPIO_Init+0x304>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4013      	ands	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c3a:	4a1a      	ldr	r2, [pc, #104]	@ (8002ca4 <HAL_GPIO_Init+0x304>)
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c40:	4b18      	ldr	r3, [pc, #96]	@ (8002ca4 <HAL_GPIO_Init+0x304>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c64:	4a0f      	ldr	r2, [pc, #60]	@ (8002ca4 <HAL_GPIO_Init+0x304>)
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	61fb      	str	r3, [r7, #28]
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	2b0f      	cmp	r3, #15
 8002c74:	f67f aea2 	bls.w	80029bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c78:	bf00      	nop
 8002c7a:	bf00      	nop
 8002c7c:	3724      	adds	r7, #36	@ 0x24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	40013800 	.word	0x40013800
 8002c90:	40020000 	.word	0x40020000
 8002c94:	40020400 	.word	0x40020400
 8002c98:	40020800 	.word	0x40020800
 8002c9c:	40020c00 	.word	0x40020c00
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	40013c00 	.word	0x40013c00

08002ca8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	887b      	ldrh	r3, [r7, #2]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d002      	beq.n	8002cc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
 8002cc4:	e001      	b.n	8002cca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	807b      	strh	r3, [r7, #2]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ce8:	787b      	ldrb	r3, [r7, #1]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cee:	887a      	ldrh	r2, [r7, #2]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cf4:	e003      	b.n	8002cfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cf6:	887b      	ldrh	r3, [r7, #2]
 8002cf8:	041a      	lsls	r2, r3, #16
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	619a      	str	r2, [r3, #24]
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b085      	sub	sp, #20
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
 8002d12:	460b      	mov	r3, r1
 8002d14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d1c:	887a      	ldrh	r2, [r7, #2]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	4013      	ands	r3, r2
 8002d22:	041a      	lsls	r2, r3, #16
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	43d9      	mvns	r1, r3
 8002d28:	887b      	ldrh	r3, [r7, #2]
 8002d2a:	400b      	ands	r3, r1
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	619a      	str	r2, [r3, #24]
}
 8002d32:	bf00      	nop
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
	...

08002d40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d4a:	4b08      	ldr	r3, [pc, #32]	@ (8002d6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d4c:	695a      	ldr	r2, [r3, #20]
 8002d4e:	88fb      	ldrh	r3, [r7, #6]
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d006      	beq.n	8002d64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d56:	4a05      	ldr	r2, [pc, #20]	@ (8002d6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d58:	88fb      	ldrh	r3, [r7, #6]
 8002d5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d5c:	88fb      	ldrh	r3, [r7, #6]
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe fdb4 	bl	80018cc <HAL_GPIO_EXTI_Callback>
  }
}
 8002d64:	bf00      	nop
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40013c00 	.word	0x40013c00

08002d70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e267      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d075      	beq.n	8002e7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d8e:	4b88      	ldr	r3, [pc, #544]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 030c 	and.w	r3, r3, #12
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d00c      	beq.n	8002db4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d9a:	4b85      	ldr	r3, [pc, #532]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d112      	bne.n	8002dcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002da6:	4b82      	ldr	r3, [pc, #520]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002db2:	d10b      	bne.n	8002dcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db4:	4b7e      	ldr	r3, [pc, #504]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d05b      	beq.n	8002e78 <HAL_RCC_OscConfig+0x108>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d157      	bne.n	8002e78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e242      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dd4:	d106      	bne.n	8002de4 <HAL_RCC_OscConfig+0x74>
 8002dd6:	4b76      	ldr	r3, [pc, #472]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a75      	ldr	r2, [pc, #468]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	e01d      	b.n	8002e20 <HAL_RCC_OscConfig+0xb0>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dec:	d10c      	bne.n	8002e08 <HAL_RCC_OscConfig+0x98>
 8002dee:	4b70      	ldr	r3, [pc, #448]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a6f      	ldr	r2, [pc, #444]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002df4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	4b6d      	ldr	r3, [pc, #436]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a6c      	ldr	r2, [pc, #432]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	e00b      	b.n	8002e20 <HAL_RCC_OscConfig+0xb0>
 8002e08:	4b69      	ldr	r3, [pc, #420]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a68      	ldr	r2, [pc, #416]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	4b66      	ldr	r3, [pc, #408]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a65      	ldr	r2, [pc, #404]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d013      	beq.n	8002e50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7ff fc78 	bl	800271c <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e30:	f7ff fc74 	bl	800271c <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b64      	cmp	r3, #100	@ 0x64
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e207      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e42:	4b5b      	ldr	r3, [pc, #364]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCC_OscConfig+0xc0>
 8002e4e:	e014      	b.n	8002e7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e50:	f7ff fc64 	bl	800271c <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e58:	f7ff fc60 	bl	800271c <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b64      	cmp	r3, #100	@ 0x64
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e1f3      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6a:	4b51      	ldr	r3, [pc, #324]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0xe8>
 8002e76:	e000      	b.n	8002e7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d063      	beq.n	8002f4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e86:	4b4a      	ldr	r3, [pc, #296]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00b      	beq.n	8002eaa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e92:	4b47      	ldr	r3, [pc, #284]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d11c      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e9e:	4b44      	ldr	r3, [pc, #272]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d116      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eaa:	4b41      	ldr	r3, [pc, #260]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d005      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x152>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d001      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e1c7      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec2:	4b3b      	ldr	r3, [pc, #236]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	4937      	ldr	r1, [pc, #220]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ed6:	e03a      	b.n	8002f4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d020      	beq.n	8002f22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ee0:	4b34      	ldr	r3, [pc, #208]	@ (8002fb4 <HAL_RCC_OscConfig+0x244>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee6:	f7ff fc19 	bl	800271c <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eee:	f7ff fc15 	bl	800271c <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e1a8      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f00:	4b2b      	ldr	r3, [pc, #172]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0c:	4b28      	ldr	r3, [pc, #160]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	4925      	ldr	r1, [pc, #148]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	600b      	str	r3, [r1, #0]
 8002f20:	e015      	b.n	8002f4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f22:	4b24      	ldr	r3, [pc, #144]	@ (8002fb4 <HAL_RCC_OscConfig+0x244>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7ff fbf8 	bl	800271c <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f30:	f7ff fbf4 	bl	800271c <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e187      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f42:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d036      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d016      	beq.n	8002f90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f62:	4b15      	ldr	r3, [pc, #84]	@ (8002fb8 <HAL_RCC_OscConfig+0x248>)
 8002f64:	2201      	movs	r2, #1
 8002f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f68:	f7ff fbd8 	bl	800271c <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f70:	f7ff fbd4 	bl	800271c <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e167      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f82:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002f84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0f0      	beq.n	8002f70 <HAL_RCC_OscConfig+0x200>
 8002f8e:	e01b      	b.n	8002fc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f90:	4b09      	ldr	r3, [pc, #36]	@ (8002fb8 <HAL_RCC_OscConfig+0x248>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f96:	f7ff fbc1 	bl	800271c <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f9c:	e00e      	b.n	8002fbc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f9e:	f7ff fbbd 	bl	800271c <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d907      	bls.n	8002fbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e150      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	42470000 	.word	0x42470000
 8002fb8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fbc:	4b88      	ldr	r3, [pc, #544]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 8002fbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1ea      	bne.n	8002f9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 8097 	beq.w	8003104 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fda:	4b81      	ldr	r3, [pc, #516]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10f      	bne.n	8003006 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	4b7d      	ldr	r3, [pc, #500]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fee:	4a7c      	ldr	r2, [pc, #496]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 8002ff0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ff4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ff6:	4b7a      	ldr	r3, [pc, #488]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003002:	2301      	movs	r3, #1
 8003004:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003006:	4b77      	ldr	r3, [pc, #476]	@ (80031e4 <HAL_RCC_OscConfig+0x474>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800300e:	2b00      	cmp	r3, #0
 8003010:	d118      	bne.n	8003044 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003012:	4b74      	ldr	r3, [pc, #464]	@ (80031e4 <HAL_RCC_OscConfig+0x474>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a73      	ldr	r2, [pc, #460]	@ (80031e4 <HAL_RCC_OscConfig+0x474>)
 8003018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800301c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800301e:	f7ff fb7d 	bl	800271c <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003026:	f7ff fb79 	bl	800271c <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e10c      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003038:	4b6a      	ldr	r3, [pc, #424]	@ (80031e4 <HAL_RCC_OscConfig+0x474>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0f0      	beq.n	8003026 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d106      	bne.n	800305a <HAL_RCC_OscConfig+0x2ea>
 800304c:	4b64      	ldr	r3, [pc, #400]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 800304e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003050:	4a63      	ldr	r2, [pc, #396]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	6713      	str	r3, [r2, #112]	@ 0x70
 8003058:	e01c      	b.n	8003094 <HAL_RCC_OscConfig+0x324>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b05      	cmp	r3, #5
 8003060:	d10c      	bne.n	800307c <HAL_RCC_OscConfig+0x30c>
 8003062:	4b5f      	ldr	r3, [pc, #380]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003066:	4a5e      	ldr	r2, [pc, #376]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003068:	f043 0304 	orr.w	r3, r3, #4
 800306c:	6713      	str	r3, [r2, #112]	@ 0x70
 800306e:	4b5c      	ldr	r3, [pc, #368]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003072:	4a5b      	ldr	r2, [pc, #364]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	6713      	str	r3, [r2, #112]	@ 0x70
 800307a:	e00b      	b.n	8003094 <HAL_RCC_OscConfig+0x324>
 800307c:	4b58      	ldr	r3, [pc, #352]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 800307e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003080:	4a57      	ldr	r2, [pc, #348]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003082:	f023 0301 	bic.w	r3, r3, #1
 8003086:	6713      	str	r3, [r2, #112]	@ 0x70
 8003088:	4b55      	ldr	r3, [pc, #340]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 800308a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800308c:	4a54      	ldr	r2, [pc, #336]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 800308e:	f023 0304 	bic.w	r3, r3, #4
 8003092:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d015      	beq.n	80030c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309c:	f7ff fb3e 	bl	800271c <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a2:	e00a      	b.n	80030ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030a4:	f7ff fb3a 	bl	800271c <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e0cb      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ba:	4b49      	ldr	r3, [pc, #292]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 80030bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0ee      	beq.n	80030a4 <HAL_RCC_OscConfig+0x334>
 80030c6:	e014      	b.n	80030f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c8:	f7ff fb28 	bl	800271c <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ce:	e00a      	b.n	80030e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030d0:	f7ff fb24 	bl	800271c <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030de:	4293      	cmp	r3, r2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e0b5      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e6:	4b3e      	ldr	r3, [pc, #248]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 80030e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1ee      	bne.n	80030d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030f2:	7dfb      	ldrb	r3, [r7, #23]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d105      	bne.n	8003104 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f8:	4b39      	ldr	r3, [pc, #228]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 80030fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fc:	4a38      	ldr	r2, [pc, #224]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 80030fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003102:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 80a1 	beq.w	8003250 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800310e:	4b34      	ldr	r3, [pc, #208]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 030c 	and.w	r3, r3, #12
 8003116:	2b08      	cmp	r3, #8
 8003118:	d05c      	beq.n	80031d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	2b02      	cmp	r3, #2
 8003120:	d141      	bne.n	80031a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003122:	4b31      	ldr	r3, [pc, #196]	@ (80031e8 <HAL_RCC_OscConfig+0x478>)
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003128:	f7ff faf8 	bl	800271c <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003130:	f7ff faf4 	bl	800271c <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e087      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003142:	4b27      	ldr	r3, [pc, #156]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f0      	bne.n	8003130 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69da      	ldr	r2, [r3, #28]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315c:	019b      	lsls	r3, r3, #6
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003164:	085b      	lsrs	r3, r3, #1
 8003166:	3b01      	subs	r3, #1
 8003168:	041b      	lsls	r3, r3, #16
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003170:	061b      	lsls	r3, r3, #24
 8003172:	491b      	ldr	r1, [pc, #108]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003174:	4313      	orrs	r3, r2
 8003176:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003178:	4b1b      	ldr	r3, [pc, #108]	@ (80031e8 <HAL_RCC_OscConfig+0x478>)
 800317a:	2201      	movs	r2, #1
 800317c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317e:	f7ff facd 	bl	800271c <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003186:	f7ff fac9 	bl	800271c <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e05c      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003198:	4b11      	ldr	r3, [pc, #68]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x416>
 80031a4:	e054      	b.n	8003250 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a6:	4b10      	ldr	r3, [pc, #64]	@ (80031e8 <HAL_RCC_OscConfig+0x478>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ac:	f7ff fab6 	bl	800271c <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031b4:	f7ff fab2 	bl	800271c <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e045      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c6:	4b06      	ldr	r3, [pc, #24]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x444>
 80031d2:	e03d      	b.n	8003250 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d107      	bne.n	80031ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e038      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
 80031e0:	40023800 	.word	0x40023800
 80031e4:	40007000 	.word	0x40007000
 80031e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031ec:	4b1b      	ldr	r3, [pc, #108]	@ (800325c <HAL_RCC_OscConfig+0x4ec>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d028      	beq.n	800324c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003204:	429a      	cmp	r2, r3
 8003206:	d121      	bne.n	800324c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003212:	429a      	cmp	r2, r3
 8003214:	d11a      	bne.n	800324c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800321c:	4013      	ands	r3, r2
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003222:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003224:	4293      	cmp	r3, r2
 8003226:	d111      	bne.n	800324c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003232:	085b      	lsrs	r3, r3, #1
 8003234:	3b01      	subs	r3, #1
 8003236:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003238:	429a      	cmp	r2, r3
 800323a:	d107      	bne.n	800324c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003246:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003248:	429a      	cmp	r2, r3
 800324a:	d001      	beq.n	8003250 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40023800 	.word	0x40023800

08003260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e0cc      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003274:	4b68      	ldr	r3, [pc, #416]	@ (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d90c      	bls.n	800329c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003282:	4b65      	ldr	r3, [pc, #404]	@ (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800328a:	4b63      	ldr	r3, [pc, #396]	@ (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	429a      	cmp	r2, r3
 8003296:	d001      	beq.n	800329c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e0b8      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d020      	beq.n	80032ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d005      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032b4:	4b59      	ldr	r3, [pc, #356]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	4a58      	ldr	r2, [pc, #352]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0308 	and.w	r3, r3, #8
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d005      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032cc:	4b53      	ldr	r3, [pc, #332]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	4a52      	ldr	r2, [pc, #328]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d8:	4b50      	ldr	r3, [pc, #320]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	494d      	ldr	r1, [pc, #308]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d044      	beq.n	8003380 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d107      	bne.n	800330e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fe:	4b47      	ldr	r3, [pc, #284]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d119      	bne.n	800333e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e07f      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b02      	cmp	r3, #2
 8003314:	d003      	beq.n	800331e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800331a:	2b03      	cmp	r3, #3
 800331c:	d107      	bne.n	800332e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800331e:	4b3f      	ldr	r3, [pc, #252]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d109      	bne.n	800333e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e06f      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332e:	4b3b      	ldr	r3, [pc, #236]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e067      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800333e:	4b37      	ldr	r3, [pc, #220]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f023 0203 	bic.w	r2, r3, #3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	4934      	ldr	r1, [pc, #208]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 800334c:	4313      	orrs	r3, r2
 800334e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003350:	f7ff f9e4 	bl	800271c <HAL_GetTick>
 8003354:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003356:	e00a      	b.n	800336e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003358:	f7ff f9e0 	bl	800271c <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003366:	4293      	cmp	r3, r2
 8003368:	d901      	bls.n	800336e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e04f      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336e:	4b2b      	ldr	r3, [pc, #172]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 020c 	and.w	r2, r3, #12
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	429a      	cmp	r2, r3
 800337e:	d1eb      	bne.n	8003358 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003380:	4b25      	ldr	r3, [pc, #148]	@ (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d20c      	bcs.n	80033a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338e:	4b22      	ldr	r3, [pc, #136]	@ (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003396:	4b20      	ldr	r3, [pc, #128]	@ (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e032      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033b4:	4b19      	ldr	r3, [pc, #100]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	4916      	ldr	r1, [pc, #88]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d009      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033d2:	4b12      	ldr	r3, [pc, #72]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	490e      	ldr	r1, [pc, #56]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033e6:	f000 f821 	bl	800342c <HAL_RCC_GetSysClockFreq>
 80033ea:	4602      	mov	r2, r0
 80033ec:	4b0b      	ldr	r3, [pc, #44]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	091b      	lsrs	r3, r3, #4
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	490a      	ldr	r1, [pc, #40]	@ (8003420 <HAL_RCC_ClockConfig+0x1c0>)
 80033f8:	5ccb      	ldrb	r3, [r1, r3]
 80033fa:	fa22 f303 	lsr.w	r3, r2, r3
 80033fe:	4a09      	ldr	r2, [pc, #36]	@ (8003424 <HAL_RCC_ClockConfig+0x1c4>)
 8003400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003402:	4b09      	ldr	r3, [pc, #36]	@ (8003428 <HAL_RCC_ClockConfig+0x1c8>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff f944 	bl	8002694 <HAL_InitTick>

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40023c00 	.word	0x40023c00
 800341c:	40023800 	.word	0x40023800
 8003420:	08008a58 	.word	0x08008a58
 8003424:	20000000 	.word	0x20000000
 8003428:	20000004 	.word	0x20000004

0800342c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800342c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003430:	b090      	sub	sp, #64	@ 0x40
 8003432:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	637b      	str	r3, [r7, #52]	@ 0x34
 8003438:	2300      	movs	r3, #0
 800343a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800343c:	2300      	movs	r3, #0
 800343e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003444:	4b59      	ldr	r3, [pc, #356]	@ (80035ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 030c 	and.w	r3, r3, #12
 800344c:	2b08      	cmp	r3, #8
 800344e:	d00d      	beq.n	800346c <HAL_RCC_GetSysClockFreq+0x40>
 8003450:	2b08      	cmp	r3, #8
 8003452:	f200 80a1 	bhi.w	8003598 <HAL_RCC_GetSysClockFreq+0x16c>
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <HAL_RCC_GetSysClockFreq+0x34>
 800345a:	2b04      	cmp	r3, #4
 800345c:	d003      	beq.n	8003466 <HAL_RCC_GetSysClockFreq+0x3a>
 800345e:	e09b      	b.n	8003598 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003460:	4b53      	ldr	r3, [pc, #332]	@ (80035b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003462:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003464:	e09b      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003466:	4b53      	ldr	r3, [pc, #332]	@ (80035b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003468:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800346a:	e098      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800346c:	4b4f      	ldr	r3, [pc, #316]	@ (80035ac <HAL_RCC_GetSysClockFreq+0x180>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003474:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003476:	4b4d      	ldr	r3, [pc, #308]	@ (80035ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d028      	beq.n	80034d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003482:	4b4a      	ldr	r3, [pc, #296]	@ (80035ac <HAL_RCC_GetSysClockFreq+0x180>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	099b      	lsrs	r3, r3, #6
 8003488:	2200      	movs	r2, #0
 800348a:	623b      	str	r3, [r7, #32]
 800348c:	627a      	str	r2, [r7, #36]	@ 0x24
 800348e:	6a3b      	ldr	r3, [r7, #32]
 8003490:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003494:	2100      	movs	r1, #0
 8003496:	4b47      	ldr	r3, [pc, #284]	@ (80035b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003498:	fb03 f201 	mul.w	r2, r3, r1
 800349c:	2300      	movs	r3, #0
 800349e:	fb00 f303 	mul.w	r3, r0, r3
 80034a2:	4413      	add	r3, r2
 80034a4:	4a43      	ldr	r2, [pc, #268]	@ (80035b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80034a6:	fba0 1202 	umull	r1, r2, r0, r2
 80034aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034ac:	460a      	mov	r2, r1
 80034ae:	62ba      	str	r2, [r7, #40]	@ 0x28
 80034b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034b2:	4413      	add	r3, r2
 80034b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b8:	2200      	movs	r2, #0
 80034ba:	61bb      	str	r3, [r7, #24]
 80034bc:	61fa      	str	r2, [r7, #28]
 80034be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80034c6:	f7fd fb77 	bl	8000bb8 <__aeabi_uldivmod>
 80034ca:	4602      	mov	r2, r0
 80034cc:	460b      	mov	r3, r1
 80034ce:	4613      	mov	r3, r2
 80034d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034d2:	e053      	b.n	800357c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034d4:	4b35      	ldr	r3, [pc, #212]	@ (80035ac <HAL_RCC_GetSysClockFreq+0x180>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	099b      	lsrs	r3, r3, #6
 80034da:	2200      	movs	r2, #0
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	617a      	str	r2, [r7, #20]
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80034e6:	f04f 0b00 	mov.w	fp, #0
 80034ea:	4652      	mov	r2, sl
 80034ec:	465b      	mov	r3, fp
 80034ee:	f04f 0000 	mov.w	r0, #0
 80034f2:	f04f 0100 	mov.w	r1, #0
 80034f6:	0159      	lsls	r1, r3, #5
 80034f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034fc:	0150      	lsls	r0, r2, #5
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	ebb2 080a 	subs.w	r8, r2, sl
 8003506:	eb63 090b 	sbc.w	r9, r3, fp
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003516:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800351a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800351e:	ebb2 0408 	subs.w	r4, r2, r8
 8003522:	eb63 0509 	sbc.w	r5, r3, r9
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	f04f 0300 	mov.w	r3, #0
 800352e:	00eb      	lsls	r3, r5, #3
 8003530:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003534:	00e2      	lsls	r2, r4, #3
 8003536:	4614      	mov	r4, r2
 8003538:	461d      	mov	r5, r3
 800353a:	eb14 030a 	adds.w	r3, r4, sl
 800353e:	603b      	str	r3, [r7, #0]
 8003540:	eb45 030b 	adc.w	r3, r5, fp
 8003544:	607b      	str	r3, [r7, #4]
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003552:	4629      	mov	r1, r5
 8003554:	028b      	lsls	r3, r1, #10
 8003556:	4621      	mov	r1, r4
 8003558:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800355c:	4621      	mov	r1, r4
 800355e:	028a      	lsls	r2, r1, #10
 8003560:	4610      	mov	r0, r2
 8003562:	4619      	mov	r1, r3
 8003564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003566:	2200      	movs	r2, #0
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	60fa      	str	r2, [r7, #12]
 800356c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003570:	f7fd fb22 	bl	8000bb8 <__aeabi_uldivmod>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4613      	mov	r3, r2
 800357a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800357c:	4b0b      	ldr	r3, [pc, #44]	@ (80035ac <HAL_RCC_GetSysClockFreq+0x180>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	0c1b      	lsrs	r3, r3, #16
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	3301      	adds	r3, #1
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800358c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800358e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003590:	fbb2 f3f3 	udiv	r3, r2, r3
 8003594:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003596:	e002      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003598:	4b05      	ldr	r3, [pc, #20]	@ (80035b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800359a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800359c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800359e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3740      	adds	r7, #64	@ 0x40
 80035a4:	46bd      	mov	sp, r7
 80035a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035aa:	bf00      	nop
 80035ac:	40023800 	.word	0x40023800
 80035b0:	00f42400 	.word	0x00f42400
 80035b4:	017d7840 	.word	0x017d7840

080035b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035bc:	4b03      	ldr	r3, [pc, #12]	@ (80035cc <HAL_RCC_GetHCLKFreq+0x14>)
 80035be:	681b      	ldr	r3, [r3, #0]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	20000000 	.word	0x20000000

080035d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035d4:	f7ff fff0 	bl	80035b8 <HAL_RCC_GetHCLKFreq>
 80035d8:	4602      	mov	r2, r0
 80035da:	4b05      	ldr	r3, [pc, #20]	@ (80035f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	0a9b      	lsrs	r3, r3, #10
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	4903      	ldr	r1, [pc, #12]	@ (80035f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035e6:	5ccb      	ldrb	r3, [r1, r3]
 80035e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40023800 	.word	0x40023800
 80035f4:	08008a68 	.word	0x08008a68

080035f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035fc:	f7ff ffdc 	bl	80035b8 <HAL_RCC_GetHCLKFreq>
 8003600:	4602      	mov	r2, r0
 8003602:	4b05      	ldr	r3, [pc, #20]	@ (8003618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	0b5b      	lsrs	r3, r3, #13
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	4903      	ldr	r1, [pc, #12]	@ (800361c <HAL_RCC_GetPCLK2Freq+0x24>)
 800360e:	5ccb      	ldrb	r3, [r1, r3]
 8003610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003614:	4618      	mov	r0, r3
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40023800 	.word	0x40023800
 800361c:	08008a68 	.word	0x08008a68

08003620 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e041      	b.n	80036b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d106      	bne.n	800364c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7fe fd4a 	bl	80020e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3304      	adds	r3, #4
 800365c:	4619      	mov	r1, r3
 800365e:	4610      	mov	r0, r2
 8003660:	f001 fa62 	bl	8004b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b082      	sub	sp, #8
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e041      	b.n	8003754 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d106      	bne.n	80036ea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f839 	bl	800375c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2202      	movs	r2, #2
 80036ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3304      	adds	r3, #4
 80036fa:	4619      	mov	r1, r3
 80036fc:	4610      	mov	r0, r2
 80036fe:	f001 fa13 	bl	8004b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d109      	bne.n	8003794 <HAL_TIM_PWM_Start+0x24>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b01      	cmp	r3, #1
 800378a:	bf14      	ite	ne
 800378c:	2301      	movne	r3, #1
 800378e:	2300      	moveq	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	e022      	b.n	80037da <HAL_TIM_PWM_Start+0x6a>
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	2b04      	cmp	r3, #4
 8003798:	d109      	bne.n	80037ae <HAL_TIM_PWM_Start+0x3e>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	bf14      	ite	ne
 80037a6:	2301      	movne	r3, #1
 80037a8:	2300      	moveq	r3, #0
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	e015      	b.n	80037da <HAL_TIM_PWM_Start+0x6a>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d109      	bne.n	80037c8 <HAL_TIM_PWM_Start+0x58>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	2b01      	cmp	r3, #1
 80037be:	bf14      	ite	ne
 80037c0:	2301      	movne	r3, #1
 80037c2:	2300      	moveq	r3, #0
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	e008      	b.n	80037da <HAL_TIM_PWM_Start+0x6a>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	bf14      	ite	ne
 80037d4:	2301      	movne	r3, #1
 80037d6:	2300      	moveq	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e068      	b.n	80038b4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d104      	bne.n	80037f2 <HAL_TIM_PWM_Start+0x82>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2202      	movs	r2, #2
 80037ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037f0:	e013      	b.n	800381a <HAL_TIM_PWM_Start+0xaa>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d104      	bne.n	8003802 <HAL_TIM_PWM_Start+0x92>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003800:	e00b      	b.n	800381a <HAL_TIM_PWM_Start+0xaa>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b08      	cmp	r3, #8
 8003806:	d104      	bne.n	8003812 <HAL_TIM_PWM_Start+0xa2>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003810:	e003      	b.n	800381a <HAL_TIM_PWM_Start+0xaa>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2202      	movs	r2, #2
 8003816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2201      	movs	r2, #1
 8003820:	6839      	ldr	r1, [r7, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f001 fd50 	bl	80052c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a23      	ldr	r2, [pc, #140]	@ (80038bc <HAL_TIM_PWM_Start+0x14c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d107      	bne.n	8003842 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003840:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a1d      	ldr	r2, [pc, #116]	@ (80038bc <HAL_TIM_PWM_Start+0x14c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d018      	beq.n	800387e <HAL_TIM_PWM_Start+0x10e>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003854:	d013      	beq.n	800387e <HAL_TIM_PWM_Start+0x10e>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a19      	ldr	r2, [pc, #100]	@ (80038c0 <HAL_TIM_PWM_Start+0x150>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d00e      	beq.n	800387e <HAL_TIM_PWM_Start+0x10e>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a17      	ldr	r2, [pc, #92]	@ (80038c4 <HAL_TIM_PWM_Start+0x154>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d009      	beq.n	800387e <HAL_TIM_PWM_Start+0x10e>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a16      	ldr	r2, [pc, #88]	@ (80038c8 <HAL_TIM_PWM_Start+0x158>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d004      	beq.n	800387e <HAL_TIM_PWM_Start+0x10e>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a14      	ldr	r2, [pc, #80]	@ (80038cc <HAL_TIM_PWM_Start+0x15c>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d111      	bne.n	80038a2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2b06      	cmp	r3, #6
 800388e:	d010      	beq.n	80038b2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 0201 	orr.w	r2, r2, #1
 800389e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a0:	e007      	b.n	80038b2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f042 0201 	orr.w	r2, r2, #1
 80038b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40010000 	.word	0x40010000
 80038c0:	40000400 	.word	0x40000400
 80038c4:	40000800 	.word	0x40000800
 80038c8:	40000c00 	.word	0x40000c00
 80038cc:	40014000 	.word	0x40014000

080038d0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2200      	movs	r2, #0
 80038e0:	6839      	ldr	r1, [r7, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f001 fcf0 	bl	80052c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a29      	ldr	r2, [pc, #164]	@ (8003994 <HAL_TIM_PWM_Stop+0xc4>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d117      	bne.n	8003922 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	6a1a      	ldr	r2, [r3, #32]
 80038f8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80038fc:	4013      	ands	r3, r2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10f      	bne.n	8003922 <HAL_TIM_PWM_Stop+0x52>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6a1a      	ldr	r2, [r3, #32]
 8003908:	f240 4344 	movw	r3, #1092	@ 0x444
 800390c:	4013      	ands	r3, r2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d107      	bne.n	8003922 <HAL_TIM_PWM_Stop+0x52>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003920:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6a1a      	ldr	r2, [r3, #32]
 8003928:	f241 1311 	movw	r3, #4369	@ 0x1111
 800392c:	4013      	ands	r3, r2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10f      	bne.n	8003952 <HAL_TIM_PWM_Stop+0x82>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6a1a      	ldr	r2, [r3, #32]
 8003938:	f240 4344 	movw	r3, #1092	@ 0x444
 800393c:	4013      	ands	r3, r2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d107      	bne.n	8003952 <HAL_TIM_PWM_Stop+0x82>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0201 	bic.w	r2, r2, #1
 8003950:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d104      	bne.n	8003962 <HAL_TIM_PWM_Stop+0x92>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003960:	e013      	b.n	800398a <HAL_TIM_PWM_Stop+0xba>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b04      	cmp	r3, #4
 8003966:	d104      	bne.n	8003972 <HAL_TIM_PWM_Stop+0xa2>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003970:	e00b      	b.n	800398a <HAL_TIM_PWM_Stop+0xba>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b08      	cmp	r3, #8
 8003976:	d104      	bne.n	8003982 <HAL_TIM_PWM_Stop+0xb2>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003980:	e003      	b.n	800398a <HAL_TIM_PWM_Stop+0xba>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3708      	adds	r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40010000 	.word	0x40010000

08003998 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e041      	b.n	8003a2e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d106      	bne.n	80039c4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f839 	bl	8003a36 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3304      	adds	r3, #4
 80039d4:	4619      	mov	r1, r3
 80039d6:	4610      	mov	r0, r2
 80039d8:	f001 f8a6 	bl	8004b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
	...

08003a4c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a56:	2300      	movs	r3, #0
 8003a58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d104      	bne.n	8003a6a <HAL_TIM_IC_Start_IT+0x1e>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	e013      	b.n	8003a92 <HAL_TIM_IC_Start_IT+0x46>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	2b04      	cmp	r3, #4
 8003a6e:	d104      	bne.n	8003a7a <HAL_TIM_IC_Start_IT+0x2e>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	e00b      	b.n	8003a92 <HAL_TIM_IC_Start_IT+0x46>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	d104      	bne.n	8003a8a <HAL_TIM_IC_Start_IT+0x3e>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	e003      	b.n	8003a92 <HAL_TIM_IC_Start_IT+0x46>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d104      	bne.n	8003aa4 <HAL_TIM_IC_Start_IT+0x58>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	e013      	b.n	8003acc <HAL_TIM_IC_Start_IT+0x80>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d104      	bne.n	8003ab4 <HAL_TIM_IC_Start_IT+0x68>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	e00b      	b.n	8003acc <HAL_TIM_IC_Start_IT+0x80>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	2b08      	cmp	r3, #8
 8003ab8:	d104      	bne.n	8003ac4 <HAL_TIM_IC_Start_IT+0x78>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	e003      	b.n	8003acc <HAL_TIM_IC_Start_IT+0x80>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ace:	7bbb      	ldrb	r3, [r7, #14]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d102      	bne.n	8003ada <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ad4:	7b7b      	ldrb	r3, [r7, #13]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d001      	beq.n	8003ade <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e0c2      	b.n	8003c64 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d104      	bne.n	8003aee <HAL_TIM_IC_Start_IT+0xa2>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003aec:	e013      	b.n	8003b16 <HAL_TIM_IC_Start_IT+0xca>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d104      	bne.n	8003afe <HAL_TIM_IC_Start_IT+0xb2>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2202      	movs	r2, #2
 8003af8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003afc:	e00b      	b.n	8003b16 <HAL_TIM_IC_Start_IT+0xca>
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d104      	bne.n	8003b0e <HAL_TIM_IC_Start_IT+0xc2>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b0c:	e003      	b.n	8003b16 <HAL_TIM_IC_Start_IT+0xca>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2202      	movs	r2, #2
 8003b12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d104      	bne.n	8003b26 <HAL_TIM_IC_Start_IT+0xda>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2202      	movs	r2, #2
 8003b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b24:	e013      	b.n	8003b4e <HAL_TIM_IC_Start_IT+0x102>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b04      	cmp	r3, #4
 8003b2a:	d104      	bne.n	8003b36 <HAL_TIM_IC_Start_IT+0xea>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b34:	e00b      	b.n	8003b4e <HAL_TIM_IC_Start_IT+0x102>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2b08      	cmp	r3, #8
 8003b3a:	d104      	bne.n	8003b46 <HAL_TIM_IC_Start_IT+0xfa>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b44:	e003      	b.n	8003b4e <HAL_TIM_IC_Start_IT+0x102>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2202      	movs	r2, #2
 8003b4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	2b0c      	cmp	r3, #12
 8003b52:	d841      	bhi.n	8003bd8 <HAL_TIM_IC_Start_IT+0x18c>
 8003b54:	a201      	add	r2, pc, #4	@ (adr r2, 8003b5c <HAL_TIM_IC_Start_IT+0x110>)
 8003b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5a:	bf00      	nop
 8003b5c:	08003b91 	.word	0x08003b91
 8003b60:	08003bd9 	.word	0x08003bd9
 8003b64:	08003bd9 	.word	0x08003bd9
 8003b68:	08003bd9 	.word	0x08003bd9
 8003b6c:	08003ba3 	.word	0x08003ba3
 8003b70:	08003bd9 	.word	0x08003bd9
 8003b74:	08003bd9 	.word	0x08003bd9
 8003b78:	08003bd9 	.word	0x08003bd9
 8003b7c:	08003bb5 	.word	0x08003bb5
 8003b80:	08003bd9 	.word	0x08003bd9
 8003b84:	08003bd9 	.word	0x08003bd9
 8003b88:	08003bd9 	.word	0x08003bd9
 8003b8c:	08003bc7 	.word	0x08003bc7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 0202 	orr.w	r2, r2, #2
 8003b9e:	60da      	str	r2, [r3, #12]
      break;
 8003ba0:	e01d      	b.n	8003bde <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68da      	ldr	r2, [r3, #12]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f042 0204 	orr.w	r2, r2, #4
 8003bb0:	60da      	str	r2, [r3, #12]
      break;
 8003bb2:	e014      	b.n	8003bde <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 0208 	orr.w	r2, r2, #8
 8003bc2:	60da      	str	r2, [r3, #12]
      break;
 8003bc4:	e00b      	b.n	8003bde <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68da      	ldr	r2, [r3, #12]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f042 0210 	orr.w	r2, r2, #16
 8003bd4:	60da      	str	r2, [r3, #12]
      break;
 8003bd6:	e002      	b.n	8003bde <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	73fb      	strb	r3, [r7, #15]
      break;
 8003bdc:	bf00      	nop
  }

  if (status == HAL_OK)
 8003bde:	7bfb      	ldrb	r3, [r7, #15]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d13e      	bne.n	8003c62 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2201      	movs	r2, #1
 8003bea:	6839      	ldr	r1, [r7, #0]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f001 fb6b 	bl	80052c8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a1d      	ldr	r2, [pc, #116]	@ (8003c6c <HAL_TIM_IC_Start_IT+0x220>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d018      	beq.n	8003c2e <HAL_TIM_IC_Start_IT+0x1e2>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c04:	d013      	beq.n	8003c2e <HAL_TIM_IC_Start_IT+0x1e2>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a19      	ldr	r2, [pc, #100]	@ (8003c70 <HAL_TIM_IC_Start_IT+0x224>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d00e      	beq.n	8003c2e <HAL_TIM_IC_Start_IT+0x1e2>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a17      	ldr	r2, [pc, #92]	@ (8003c74 <HAL_TIM_IC_Start_IT+0x228>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d009      	beq.n	8003c2e <HAL_TIM_IC_Start_IT+0x1e2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a16      	ldr	r2, [pc, #88]	@ (8003c78 <HAL_TIM_IC_Start_IT+0x22c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d004      	beq.n	8003c2e <HAL_TIM_IC_Start_IT+0x1e2>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a14      	ldr	r2, [pc, #80]	@ (8003c7c <HAL_TIM_IC_Start_IT+0x230>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d111      	bne.n	8003c52 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f003 0307 	and.w	r3, r3, #7
 8003c38:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2b06      	cmp	r3, #6
 8003c3e:	d010      	beq.n	8003c62 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 0201 	orr.w	r2, r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c50:	e007      	b.n	8003c62 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f042 0201 	orr.w	r2, r2, #1
 8003c60:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40010000 	.word	0x40010000
 8003c70:	40000400 	.word	0x40000400
 8003c74:	40000800 	.word	0x40000800
 8003c78:	40000c00 	.word	0x40000c00
 8003c7c:	40014000 	.word	0x40014000

08003c80 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b0c      	cmp	r3, #12
 8003c92:	d841      	bhi.n	8003d18 <HAL_TIM_IC_Stop_IT+0x98>
 8003c94:	a201      	add	r2, pc, #4	@ (adr r2, 8003c9c <HAL_TIM_IC_Stop_IT+0x1c>)
 8003c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9a:	bf00      	nop
 8003c9c:	08003cd1 	.word	0x08003cd1
 8003ca0:	08003d19 	.word	0x08003d19
 8003ca4:	08003d19 	.word	0x08003d19
 8003ca8:	08003d19 	.word	0x08003d19
 8003cac:	08003ce3 	.word	0x08003ce3
 8003cb0:	08003d19 	.word	0x08003d19
 8003cb4:	08003d19 	.word	0x08003d19
 8003cb8:	08003d19 	.word	0x08003d19
 8003cbc:	08003cf5 	.word	0x08003cf5
 8003cc0:	08003d19 	.word	0x08003d19
 8003cc4:	08003d19 	.word	0x08003d19
 8003cc8:	08003d19 	.word	0x08003d19
 8003ccc:	08003d07 	.word	0x08003d07
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f022 0202 	bic.w	r2, r2, #2
 8003cde:	60da      	str	r2, [r3, #12]
      break;
 8003ce0:	e01d      	b.n	8003d1e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68da      	ldr	r2, [r3, #12]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0204 	bic.w	r2, r2, #4
 8003cf0:	60da      	str	r2, [r3, #12]
      break;
 8003cf2:	e014      	b.n	8003d1e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0208 	bic.w	r2, r2, #8
 8003d02:	60da      	str	r2, [r3, #12]
      break;
 8003d04:	e00b      	b.n	8003d1e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68da      	ldr	r2, [r3, #12]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0210 	bic.w	r2, r2, #16
 8003d14:	60da      	str	r2, [r3, #12]
      break;
 8003d16:	e002      	b.n	8003d1e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d1c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003d1e:	7bfb      	ldrb	r3, [r7, #15]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d156      	bne.n	8003dd2 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	6839      	ldr	r1, [r7, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f001 facb 	bl	80052c8 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6a1a      	ldr	r2, [r3, #32]
 8003d38:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10f      	bne.n	8003d62 <HAL_TIM_IC_Stop_IT+0xe2>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6a1a      	ldr	r2, [r3, #32]
 8003d48:	f240 4344 	movw	r3, #1092	@ 0x444
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d107      	bne.n	8003d62 <HAL_TIM_IC_Stop_IT+0xe2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0201 	bic.w	r2, r2, #1
 8003d60:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d104      	bne.n	8003d72 <HAL_TIM_IC_Stop_IT+0xf2>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d70:	e013      	b.n	8003d9a <HAL_TIM_IC_Stop_IT+0x11a>
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	2b04      	cmp	r3, #4
 8003d76:	d104      	bne.n	8003d82 <HAL_TIM_IC_Stop_IT+0x102>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d80:	e00b      	b.n	8003d9a <HAL_TIM_IC_Stop_IT+0x11a>
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b08      	cmp	r3, #8
 8003d86:	d104      	bne.n	8003d92 <HAL_TIM_IC_Stop_IT+0x112>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d90:	e003      	b.n	8003d9a <HAL_TIM_IC_Stop_IT+0x11a>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2201      	movs	r2, #1
 8003d96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d104      	bne.n	8003daa <HAL_TIM_IC_Stop_IT+0x12a>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003da8:	e013      	b.n	8003dd2 <HAL_TIM_IC_Stop_IT+0x152>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b04      	cmp	r3, #4
 8003dae:	d104      	bne.n	8003dba <HAL_TIM_IC_Stop_IT+0x13a>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003db8:	e00b      	b.n	8003dd2 <HAL_TIM_IC_Stop_IT+0x152>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d104      	bne.n	8003dca <HAL_TIM_IC_Stop_IT+0x14a>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dc8:	e003      	b.n	8003dd2 <HAL_TIM_IC_Stop_IT+0x152>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 8003dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e097      	b.n	8003f20 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d106      	bne.n	8003e0a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7fe f9e7 	bl	80021d8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6812      	ldr	r2, [r2, #0]
 8003e1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e20:	f023 0307 	bic.w	r3, r3, #7
 8003e24:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4610      	mov	r0, r2
 8003e32:	f000 fe79 	bl	8004b28 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e5e:	f023 0303 	bic.w	r3, r3, #3
 8003e62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	021b      	lsls	r3, r3, #8
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003e7c:	f023 030c 	bic.w	r3, r3, #12
 8003e80:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e88:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	021b      	lsls	r3, r3, #8
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	011a      	lsls	r2, r3, #4
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	031b      	lsls	r3, r3, #12
 8003eac:	4313      	orrs	r3, r2
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003eba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003ec2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	011b      	lsls	r3, r3, #4
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3718      	adds	r7, #24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f38:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003f40:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f48:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003f50:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d110      	bne.n	8003f7a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f58:	7bfb      	ldrb	r3, [r7, #15]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d102      	bne.n	8003f64 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f5e:	7b7b      	ldrb	r3, [r7, #13]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d001      	beq.n	8003f68 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e069      	b.n	800403c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f78:	e031      	b.n	8003fde <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d110      	bne.n	8003fa2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f80:	7bbb      	ldrb	r3, [r7, #14]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d102      	bne.n	8003f8c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f86:	7b3b      	ldrb	r3, [r7, #12]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d001      	beq.n	8003f90 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e055      	b.n	800403c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fa0:	e01d      	b.n	8003fde <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d108      	bne.n	8003fba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fa8:	7bbb      	ldrb	r3, [r7, #14]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d105      	bne.n	8003fba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fae:	7b7b      	ldrb	r3, [r7, #13]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d102      	bne.n	8003fba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fb4:	7b3b      	ldrb	r3, [r7, #12]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d001      	beq.n	8003fbe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e03e      	b.n	800403c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2202      	movs	r2, #2
 8003fca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2202      	movs	r2, #2
 8003fda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d003      	beq.n	8003fec <HAL_TIM_Encoder_Start+0xc4>
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d008      	beq.n	8003ffc <HAL_TIM_Encoder_Start+0xd4>
 8003fea:	e00f      	b.n	800400c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f001 f967 	bl	80052c8 <TIM_CCxChannelCmd>
      break;
 8003ffa:	e016      	b.n	800402a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2201      	movs	r2, #1
 8004002:	2104      	movs	r1, #4
 8004004:	4618      	mov	r0, r3
 8004006:	f001 f95f 	bl	80052c8 <TIM_CCxChannelCmd>
      break;
 800400a:	e00e      	b.n	800402a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2201      	movs	r2, #1
 8004012:	2100      	movs	r1, #0
 8004014:	4618      	mov	r0, r3
 8004016:	f001 f957 	bl	80052c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2201      	movs	r2, #1
 8004020:	2104      	movs	r1, #4
 8004022:	4618      	mov	r0, r3
 8004024:	f001 f950 	bl	80052c8 <TIM_CCxChannelCmd>
      break;
 8004028:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f042 0201 	orr.w	r2, r2, #1
 8004038:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d003      	beq.n	800405c <HAL_TIM_Encoder_Stop+0x18>
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	2b04      	cmp	r3, #4
 8004058:	d008      	beq.n	800406c <HAL_TIM_Encoder_Stop+0x28>
 800405a:	e00f      	b.n	800407c <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2200      	movs	r2, #0
 8004062:	2100      	movs	r1, #0
 8004064:	4618      	mov	r0, r3
 8004066:	f001 f92f 	bl	80052c8 <TIM_CCxChannelCmd>
      break;
 800406a:	e016      	b.n	800409a <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2200      	movs	r2, #0
 8004072:	2104      	movs	r1, #4
 8004074:	4618      	mov	r0, r3
 8004076:	f001 f927 	bl	80052c8 <TIM_CCxChannelCmd>
      break;
 800407a:	e00e      	b.n	800409a <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2200      	movs	r2, #0
 8004082:	2100      	movs	r1, #0
 8004084:	4618      	mov	r0, r3
 8004086:	f001 f91f 	bl	80052c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2200      	movs	r2, #0
 8004090:	2104      	movs	r1, #4
 8004092:	4618      	mov	r0, r3
 8004094:	f001 f918 	bl	80052c8 <TIM_CCxChannelCmd>
      break;
 8004098:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6a1a      	ldr	r2, [r3, #32]
 80040a0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80040a4:	4013      	ands	r3, r2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10f      	bne.n	80040ca <HAL_TIM_Encoder_Stop+0x86>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6a1a      	ldr	r2, [r3, #32]
 80040b0:	f240 4344 	movw	r3, #1092	@ 0x444
 80040b4:	4013      	ands	r3, r2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d107      	bne.n	80040ca <HAL_TIM_Encoder_Stop+0x86>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 0201 	bic.w	r2, r2, #1
 80040c8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d002      	beq.n	80040d6 <HAL_TIM_Encoder_Stop+0x92>
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d138      	bne.n	8004148 <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d104      	bne.n	80040e6 <HAL_TIM_Encoder_Stop+0xa2>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040e4:	e013      	b.n	800410e <HAL_TIM_Encoder_Stop+0xca>
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d104      	bne.n	80040f6 <HAL_TIM_Encoder_Stop+0xb2>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040f4:	e00b      	b.n	800410e <HAL_TIM_Encoder_Stop+0xca>
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d104      	bne.n	8004106 <HAL_TIM_Encoder_Stop+0xc2>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004104:	e003      	b.n	800410e <HAL_TIM_Encoder_Stop+0xca>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d104      	bne.n	800411e <HAL_TIM_Encoder_Stop+0xda>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800411c:	e024      	b.n	8004168 <HAL_TIM_Encoder_Stop+0x124>
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2b04      	cmp	r3, #4
 8004122:	d104      	bne.n	800412e <HAL_TIM_Encoder_Stop+0xea>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800412c:	e01c      	b.n	8004168 <HAL_TIM_Encoder_Stop+0x124>
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	2b08      	cmp	r3, #8
 8004132:	d104      	bne.n	800413e <HAL_TIM_Encoder_Stop+0xfa>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800413c:	e014      	b.n	8004168 <HAL_TIM_Encoder_Stop+0x124>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004146:	e00f      	b.n	8004168 <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b084      	sub	sp, #16
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
 800417a:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004182:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800418a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004192:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800419a:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d110      	bne.n	80041c4 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041a2:	7bfb      	ldrb	r3, [r7, #15]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d102      	bne.n	80041ae <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80041a8:	7b7b      	ldrb	r3, [r7, #13]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d001      	beq.n	80041b2 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e089      	b.n	80042c6 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2202      	movs	r2, #2
 80041b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2202      	movs	r2, #2
 80041be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80041c2:	e031      	b.n	8004228 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	d110      	bne.n	80041ec <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80041ca:	7bbb      	ldrb	r3, [r7, #14]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d102      	bne.n	80041d6 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80041d0:	7b3b      	ldrb	r3, [r7, #12]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d001      	beq.n	80041da <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e075      	b.n	80042c6 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2202      	movs	r2, #2
 80041de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2202      	movs	r2, #2
 80041e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80041ea:	e01d      	b.n	8004228 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041ec:	7bfb      	ldrb	r3, [r7, #15]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d108      	bne.n	8004204 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80041f2:	7bbb      	ldrb	r3, [r7, #14]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d105      	bne.n	8004204 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80041f8:	7b7b      	ldrb	r3, [r7, #13]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d102      	bne.n	8004204 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80041fe:	7b3b      	ldrb	r3, [r7, #12]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d001      	beq.n	8004208 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e05e      	b.n	80042c6 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2202      	movs	r2, #2
 800421c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2202      	movs	r2, #2
 8004224:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <HAL_TIM_Encoder_Start_IT+0xc4>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b04      	cmp	r3, #4
 8004232:	d010      	beq.n	8004256 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004234:	e01f      	b.n	8004276 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2201      	movs	r2, #1
 800423c:	2100      	movs	r1, #0
 800423e:	4618      	mov	r0, r3
 8004240:	f001 f842 	bl	80052c8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0202 	orr.w	r2, r2, #2
 8004252:	60da      	str	r2, [r3, #12]
      break;
 8004254:	e02e      	b.n	80042b4 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2201      	movs	r2, #1
 800425c:	2104      	movs	r1, #4
 800425e:	4618      	mov	r0, r3
 8004260:	f001 f832 	bl	80052c8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0204 	orr.w	r2, r2, #4
 8004272:	60da      	str	r2, [r3, #12]
      break;
 8004274:	e01e      	b.n	80042b4 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2201      	movs	r2, #1
 800427c:	2100      	movs	r1, #0
 800427e:	4618      	mov	r0, r3
 8004280:	f001 f822 	bl	80052c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2201      	movs	r2, #1
 800428a:	2104      	movs	r1, #4
 800428c:	4618      	mov	r0, r3
 800428e:	f001 f81b 	bl	80052c8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68da      	ldr	r2, [r3, #12]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f042 0202 	orr.w	r2, r2, #2
 80042a0:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68da      	ldr	r2, [r3, #12]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f042 0204 	orr.w	r2, r2, #4
 80042b0:	60da      	str	r2, [r3, #12]
      break;
 80042b2:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 0201 	orr.w	r2, r2, #1
 80042c2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b082      	sub	sp, #8
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
 80042d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10f      	bne.n	80042fe <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2200      	movs	r2, #0
 80042e4:	2100      	movs	r1, #0
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 ffee 	bl	80052c8 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 0202 	bic.w	r2, r2, #2
 80042fa:	60da      	str	r2, [r3, #12]
 80042fc:	e030      	b.n	8004360 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2b04      	cmp	r3, #4
 8004302:	d10f      	bne.n	8004324 <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2200      	movs	r2, #0
 800430a:	2104      	movs	r1, #4
 800430c:	4618      	mov	r0, r3
 800430e:	f000 ffdb 	bl	80052c8 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68da      	ldr	r2, [r3, #12]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0204 	bic.w	r2, r2, #4
 8004320:	60da      	str	r2, [r3, #12]
 8004322:	e01d      	b.n	8004360 <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2200      	movs	r2, #0
 800432a:	2100      	movs	r1, #0
 800432c:	4618      	mov	r0, r3
 800432e:	f000 ffcb 	bl	80052c8 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2200      	movs	r2, #0
 8004338:	2104      	movs	r1, #4
 800433a:	4618      	mov	r0, r3
 800433c:	f000 ffc4 	bl	80052c8 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0202 	bic.w	r2, r2, #2
 800434e:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0204 	bic.w	r2, r2, #4
 800435e:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6a1a      	ldr	r2, [r3, #32]
 8004366:	f241 1311 	movw	r3, #4369	@ 0x1111
 800436a:	4013      	ands	r3, r2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10f      	bne.n	8004390 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6a1a      	ldr	r2, [r3, #32]
 8004376:	f240 4344 	movw	r3, #1092	@ 0x444
 800437a:	4013      	ands	r3, r2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d107      	bne.n	8004390 <HAL_TIM_Encoder_Stop_IT+0xc2>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0201 	bic.w	r2, r2, #1
 800438e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d002      	beq.n	800439c <HAL_TIM_Encoder_Stop_IT+0xce>
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2b04      	cmp	r3, #4
 800439a:	d138      	bne.n	800440e <HAL_TIM_Encoder_Stop_IT+0x140>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d104      	bne.n	80043ac <HAL_TIM_Encoder_Stop_IT+0xde>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2201      	movs	r2, #1
 80043a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043aa:	e013      	b.n	80043d4 <HAL_TIM_Encoder_Stop_IT+0x106>
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d104      	bne.n	80043bc <HAL_TIM_Encoder_Stop_IT+0xee>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043ba:	e00b      	b.n	80043d4 <HAL_TIM_Encoder_Stop_IT+0x106>
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	2b08      	cmp	r3, #8
 80043c0:	d104      	bne.n	80043cc <HAL_TIM_Encoder_Stop_IT+0xfe>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043ca:	e003      	b.n	80043d4 <HAL_TIM_Encoder_Stop_IT+0x106>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d104      	bne.n	80043e4 <HAL_TIM_Encoder_Stop_IT+0x116>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043e2:	e024      	b.n	800442e <HAL_TIM_Encoder_Stop_IT+0x160>
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d104      	bne.n	80043f4 <HAL_TIM_Encoder_Stop_IT+0x126>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043f2:	e01c      	b.n	800442e <HAL_TIM_Encoder_Stop_IT+0x160>
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	2b08      	cmp	r3, #8
 80043f8:	d104      	bne.n	8004404 <HAL_TIM_Encoder_Stop_IT+0x136>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004402:	e014      	b.n	800442e <HAL_TIM_Encoder_Stop_IT+0x160>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800440c:	e00f      	b.n	800442e <HAL_TIM_Encoder_Stop_IT+0x160>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3708      	adds	r7, #8
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d020      	beq.n	800449c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d01b      	beq.n	800449c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0202 	mvn.w	r2, #2
 800446c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7fd fa48 	bl	8001918 <HAL_TIM_IC_CaptureCallback>
 8004488:	e005      	b.n	8004496 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fb2e 	bl	8004aec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f000 fb35 	bl	8004b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f003 0304 	and.w	r3, r3, #4
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d020      	beq.n	80044e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d01b      	beq.n	80044e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f06f 0204 	mvn.w	r2, #4
 80044b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2202      	movs	r2, #2
 80044be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d003      	beq.n	80044d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7fd fa22 	bl	8001918 <HAL_TIM_IC_CaptureCallback>
 80044d4:	e005      	b.n	80044e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 fb08 	bl	8004aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 fb0f 	bl	8004b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	f003 0308 	and.w	r3, r3, #8
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d020      	beq.n	8004534 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f003 0308 	and.w	r3, r3, #8
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d01b      	beq.n	8004534 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f06f 0208 	mvn.w	r2, #8
 8004504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2204      	movs	r2, #4
 800450a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	f003 0303 	and.w	r3, r3, #3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d003      	beq.n	8004522 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fd f9fc 	bl	8001918 <HAL_TIM_IC_CaptureCallback>
 8004520:	e005      	b.n	800452e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 fae2 	bl	8004aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 fae9 	bl	8004b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f003 0310 	and.w	r3, r3, #16
 800453a:	2b00      	cmp	r3, #0
 800453c:	d020      	beq.n	8004580 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f003 0310 	and.w	r3, r3, #16
 8004544:	2b00      	cmp	r3, #0
 8004546:	d01b      	beq.n	8004580 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f06f 0210 	mvn.w	r2, #16
 8004550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2208      	movs	r2, #8
 8004556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004562:	2b00      	cmp	r3, #0
 8004564:	d003      	beq.n	800456e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7fd f9d6 	bl	8001918 <HAL_TIM_IC_CaptureCallback>
 800456c:	e005      	b.n	800457a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fabc 	bl	8004aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 fac3 	bl	8004b00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00c      	beq.n	80045a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	d007      	beq.n	80045a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f06f 0201 	mvn.w	r2, #1
 800459c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7fd f9f4 	bl	800198c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00c      	beq.n	80045c8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d007      	beq.n	80045c8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80045c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 ff1e 	bl	8005404 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00c      	beq.n	80045ec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d007      	beq.n	80045ec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80045e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 fa94 	bl	8004b14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f003 0320 	and.w	r3, r3, #32
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00c      	beq.n	8004610 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f003 0320 	and.w	r3, r3, #32
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d007      	beq.n	8004610 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f06f 0220 	mvn.w	r2, #32
 8004608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fef0 	bl	80053f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004610:	bf00      	nop
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004624:	2300      	movs	r3, #0
 8004626:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800462e:	2b01      	cmp	r3, #1
 8004630:	d101      	bne.n	8004636 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004632:	2302      	movs	r3, #2
 8004634:	e088      	b.n	8004748 <HAL_TIM_IC_ConfigChannel+0x130>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d11b      	bne.n	800467c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004654:	f000 fc80 	bl	8004f58 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	699a      	ldr	r2, [r3, #24]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 020c 	bic.w	r2, r2, #12
 8004666:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6999      	ldr	r1, [r3, #24]
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	689a      	ldr	r2, [r3, #8]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	619a      	str	r2, [r3, #24]
 800467a:	e060      	b.n	800473e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b04      	cmp	r3, #4
 8004680:	d11c      	bne.n	80046bc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004692:	f000 fcf8 	bl	8005086 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	699a      	ldr	r2, [r3, #24]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80046a4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6999      	ldr	r1, [r3, #24]
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	021a      	lsls	r2, r3, #8
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	619a      	str	r2, [r3, #24]
 80046ba:	e040      	b.n	800473e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b08      	cmp	r3, #8
 80046c0:	d11b      	bne.n	80046fa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80046d2:	f000 fd45 	bl	8005160 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	69da      	ldr	r2, [r3, #28]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 020c 	bic.w	r2, r2, #12
 80046e4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	69d9      	ldr	r1, [r3, #28]
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	61da      	str	r2, [r3, #28]
 80046f8:	e021      	b.n	800473e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b0c      	cmp	r3, #12
 80046fe:	d11c      	bne.n	800473a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004710:	f000 fd62 	bl	80051d8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	69da      	ldr	r2, [r3, #28]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004722:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	69d9      	ldr	r1, [r3, #28]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	021a      	lsls	r2, r3, #8
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	61da      	str	r2, [r3, #28]
 8004738:	e001      	b.n	800473e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004746:	7dfb      	ldrb	r3, [r7, #23]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800475c:	2300      	movs	r3, #0
 800475e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004766:	2b01      	cmp	r3, #1
 8004768:	d101      	bne.n	800476e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800476a:	2302      	movs	r3, #2
 800476c:	e0ae      	b.n	80048cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b0c      	cmp	r3, #12
 800477a:	f200 809f 	bhi.w	80048bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800477e:	a201      	add	r2, pc, #4	@ (adr r2, 8004784 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004784:	080047b9 	.word	0x080047b9
 8004788:	080048bd 	.word	0x080048bd
 800478c:	080048bd 	.word	0x080048bd
 8004790:	080048bd 	.word	0x080048bd
 8004794:	080047f9 	.word	0x080047f9
 8004798:	080048bd 	.word	0x080048bd
 800479c:	080048bd 	.word	0x080048bd
 80047a0:	080048bd 	.word	0x080048bd
 80047a4:	0800483b 	.word	0x0800483b
 80047a8:	080048bd 	.word	0x080048bd
 80047ac:	080048bd 	.word	0x080048bd
 80047b0:	080048bd 	.word	0x080048bd
 80047b4:	0800487b 	.word	0x0800487b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68b9      	ldr	r1, [r7, #8]
 80047be:	4618      	mov	r0, r3
 80047c0:	f000 fa3e 	bl	8004c40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	699a      	ldr	r2, [r3, #24]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0208 	orr.w	r2, r2, #8
 80047d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	699a      	ldr	r2, [r3, #24]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 0204 	bic.w	r2, r2, #4
 80047e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6999      	ldr	r1, [r3, #24]
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	691a      	ldr	r2, [r3, #16]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	619a      	str	r2, [r3, #24]
      break;
 80047f6:	e064      	b.n	80048c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68b9      	ldr	r1, [r7, #8]
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 fa84 	bl	8004d0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	699a      	ldr	r2, [r3, #24]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	699a      	ldr	r2, [r3, #24]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6999      	ldr	r1, [r3, #24]
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	021a      	lsls	r2, r3, #8
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	430a      	orrs	r2, r1
 8004836:	619a      	str	r2, [r3, #24]
      break;
 8004838:	e043      	b.n	80048c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68b9      	ldr	r1, [r7, #8]
 8004840:	4618      	mov	r0, r3
 8004842:	f000 facf 	bl	8004de4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	69da      	ldr	r2, [r3, #28]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f042 0208 	orr.w	r2, r2, #8
 8004854:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	69da      	ldr	r2, [r3, #28]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0204 	bic.w	r2, r2, #4
 8004864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	69d9      	ldr	r1, [r3, #28]
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	691a      	ldr	r2, [r3, #16]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	61da      	str	r2, [r3, #28]
      break;
 8004878:	e023      	b.n	80048c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68b9      	ldr	r1, [r7, #8]
 8004880:	4618      	mov	r0, r3
 8004882:	f000 fb19 	bl	8004eb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	69da      	ldr	r2, [r3, #28]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004894:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	69da      	ldr	r2, [r3, #28]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	69d9      	ldr	r1, [r3, #28]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	021a      	lsls	r2, r3, #8
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	61da      	str	r2, [r3, #28]
      break;
 80048ba:	e002      	b.n	80048c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	75fb      	strb	r3, [r7, #23]
      break;
 80048c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3718      	adds	r7, #24
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048de:	2300      	movs	r3, #0
 80048e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d101      	bne.n	80048f0 <HAL_TIM_ConfigClockSource+0x1c>
 80048ec:	2302      	movs	r3, #2
 80048ee:	e0b4      	b.n	8004a5a <HAL_TIM_ConfigClockSource+0x186>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800490e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004916:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004928:	d03e      	beq.n	80049a8 <HAL_TIM_ConfigClockSource+0xd4>
 800492a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800492e:	f200 8087 	bhi.w	8004a40 <HAL_TIM_ConfigClockSource+0x16c>
 8004932:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004936:	f000 8086 	beq.w	8004a46 <HAL_TIM_ConfigClockSource+0x172>
 800493a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800493e:	d87f      	bhi.n	8004a40 <HAL_TIM_ConfigClockSource+0x16c>
 8004940:	2b70      	cmp	r3, #112	@ 0x70
 8004942:	d01a      	beq.n	800497a <HAL_TIM_ConfigClockSource+0xa6>
 8004944:	2b70      	cmp	r3, #112	@ 0x70
 8004946:	d87b      	bhi.n	8004a40 <HAL_TIM_ConfigClockSource+0x16c>
 8004948:	2b60      	cmp	r3, #96	@ 0x60
 800494a:	d050      	beq.n	80049ee <HAL_TIM_ConfigClockSource+0x11a>
 800494c:	2b60      	cmp	r3, #96	@ 0x60
 800494e:	d877      	bhi.n	8004a40 <HAL_TIM_ConfigClockSource+0x16c>
 8004950:	2b50      	cmp	r3, #80	@ 0x50
 8004952:	d03c      	beq.n	80049ce <HAL_TIM_ConfigClockSource+0xfa>
 8004954:	2b50      	cmp	r3, #80	@ 0x50
 8004956:	d873      	bhi.n	8004a40 <HAL_TIM_ConfigClockSource+0x16c>
 8004958:	2b40      	cmp	r3, #64	@ 0x40
 800495a:	d058      	beq.n	8004a0e <HAL_TIM_ConfigClockSource+0x13a>
 800495c:	2b40      	cmp	r3, #64	@ 0x40
 800495e:	d86f      	bhi.n	8004a40 <HAL_TIM_ConfigClockSource+0x16c>
 8004960:	2b30      	cmp	r3, #48	@ 0x30
 8004962:	d064      	beq.n	8004a2e <HAL_TIM_ConfigClockSource+0x15a>
 8004964:	2b30      	cmp	r3, #48	@ 0x30
 8004966:	d86b      	bhi.n	8004a40 <HAL_TIM_ConfigClockSource+0x16c>
 8004968:	2b20      	cmp	r3, #32
 800496a:	d060      	beq.n	8004a2e <HAL_TIM_ConfigClockSource+0x15a>
 800496c:	2b20      	cmp	r3, #32
 800496e:	d867      	bhi.n	8004a40 <HAL_TIM_ConfigClockSource+0x16c>
 8004970:	2b00      	cmp	r3, #0
 8004972:	d05c      	beq.n	8004a2e <HAL_TIM_ConfigClockSource+0x15a>
 8004974:	2b10      	cmp	r3, #16
 8004976:	d05a      	beq.n	8004a2e <HAL_TIM_ConfigClockSource+0x15a>
 8004978:	e062      	b.n	8004a40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800498a:	f000 fc7d 	bl	8005288 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800499c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	609a      	str	r2, [r3, #8]
      break;
 80049a6:	e04f      	b.n	8004a48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049b8:	f000 fc66 	bl	8005288 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689a      	ldr	r2, [r3, #8]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049ca:	609a      	str	r2, [r3, #8]
      break;
 80049cc:	e03c      	b.n	8004a48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049da:	461a      	mov	r2, r3
 80049dc:	f000 fb24 	bl	8005028 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2150      	movs	r1, #80	@ 0x50
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 fc33 	bl	8005252 <TIM_ITRx_SetConfig>
      break;
 80049ec:	e02c      	b.n	8004a48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049fa:	461a      	mov	r2, r3
 80049fc:	f000 fb80 	bl	8005100 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2160      	movs	r1, #96	@ 0x60
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fc23 	bl	8005252 <TIM_ITRx_SetConfig>
      break;
 8004a0c:	e01c      	b.n	8004a48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	f000 fb04 	bl	8005028 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2140      	movs	r1, #64	@ 0x40
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fc13 	bl	8005252 <TIM_ITRx_SetConfig>
      break;
 8004a2c:	e00c      	b.n	8004a48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4619      	mov	r1, r3
 8004a38:	4610      	mov	r0, r2
 8004a3a:	f000 fc0a 	bl	8005252 <TIM_ITRx_SetConfig>
      break;
 8004a3e:	e003      	b.n	8004a48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	73fb      	strb	r3, [r7, #15]
      break;
 8004a44:	e000      	b.n	8004a48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
	...

08004a64 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b0c      	cmp	r3, #12
 8004a76:	d831      	bhi.n	8004adc <HAL_TIM_ReadCapturedValue+0x78>
 8004a78:	a201      	add	r2, pc, #4	@ (adr r2, 8004a80 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7e:	bf00      	nop
 8004a80:	08004ab5 	.word	0x08004ab5
 8004a84:	08004add 	.word	0x08004add
 8004a88:	08004add 	.word	0x08004add
 8004a8c:	08004add 	.word	0x08004add
 8004a90:	08004abf 	.word	0x08004abf
 8004a94:	08004add 	.word	0x08004add
 8004a98:	08004add 	.word	0x08004add
 8004a9c:	08004add 	.word	0x08004add
 8004aa0:	08004ac9 	.word	0x08004ac9
 8004aa4:	08004add 	.word	0x08004add
 8004aa8:	08004add 	.word	0x08004add
 8004aac:	08004add 	.word	0x08004add
 8004ab0:	08004ad3 	.word	0x08004ad3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aba:	60fb      	str	r3, [r7, #12]

      break;
 8004abc:	e00f      	b.n	8004ade <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac4:	60fb      	str	r3, [r7, #12]

      break;
 8004ac6:	e00a      	b.n	8004ade <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ace:	60fb      	str	r3, [r7, #12]

      break;
 8004ad0:	e005      	b.n	8004ade <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad8:	60fb      	str	r3, [r7, #12]

      break;
 8004ada:	e000      	b.n	8004ade <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004adc:	bf00      	nop
  }

  return tmpreg;
 8004ade:	68fb      	ldr	r3, [r7, #12]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3714      	adds	r7, #20
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a3a      	ldr	r2, [pc, #232]	@ (8004c24 <TIM_Base_SetConfig+0xfc>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d00f      	beq.n	8004b60 <TIM_Base_SetConfig+0x38>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b46:	d00b      	beq.n	8004b60 <TIM_Base_SetConfig+0x38>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a37      	ldr	r2, [pc, #220]	@ (8004c28 <TIM_Base_SetConfig+0x100>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d007      	beq.n	8004b60 <TIM_Base_SetConfig+0x38>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a36      	ldr	r2, [pc, #216]	@ (8004c2c <TIM_Base_SetConfig+0x104>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d003      	beq.n	8004b60 <TIM_Base_SetConfig+0x38>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a35      	ldr	r2, [pc, #212]	@ (8004c30 <TIM_Base_SetConfig+0x108>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d108      	bne.n	8004b72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a2b      	ldr	r2, [pc, #172]	@ (8004c24 <TIM_Base_SetConfig+0xfc>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d01b      	beq.n	8004bb2 <TIM_Base_SetConfig+0x8a>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b80:	d017      	beq.n	8004bb2 <TIM_Base_SetConfig+0x8a>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a28      	ldr	r2, [pc, #160]	@ (8004c28 <TIM_Base_SetConfig+0x100>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d013      	beq.n	8004bb2 <TIM_Base_SetConfig+0x8a>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a27      	ldr	r2, [pc, #156]	@ (8004c2c <TIM_Base_SetConfig+0x104>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d00f      	beq.n	8004bb2 <TIM_Base_SetConfig+0x8a>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a26      	ldr	r2, [pc, #152]	@ (8004c30 <TIM_Base_SetConfig+0x108>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d00b      	beq.n	8004bb2 <TIM_Base_SetConfig+0x8a>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a25      	ldr	r2, [pc, #148]	@ (8004c34 <TIM_Base_SetConfig+0x10c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d007      	beq.n	8004bb2 <TIM_Base_SetConfig+0x8a>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a24      	ldr	r2, [pc, #144]	@ (8004c38 <TIM_Base_SetConfig+0x110>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d003      	beq.n	8004bb2 <TIM_Base_SetConfig+0x8a>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a23      	ldr	r2, [pc, #140]	@ (8004c3c <TIM_Base_SetConfig+0x114>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d108      	bne.n	8004bc4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a0e      	ldr	r2, [pc, #56]	@ (8004c24 <TIM_Base_SetConfig+0xfc>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d103      	bne.n	8004bf8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	691a      	ldr	r2, [r3, #16]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d105      	bne.n	8004c16 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	f023 0201 	bic.w	r2, r3, #1
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	611a      	str	r2, [r3, #16]
  }
}
 8004c16:	bf00      	nop
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	40010000 	.word	0x40010000
 8004c28:	40000400 	.word	0x40000400
 8004c2c:	40000800 	.word	0x40000800
 8004c30:	40000c00 	.word	0x40000c00
 8004c34:	40014000 	.word	0x40014000
 8004c38:	40014400 	.word	0x40014400
 8004c3c:	40014800 	.word	0x40014800

08004c40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	f023 0201 	bic.w	r2, r3, #1
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f023 0303 	bic.w	r3, r3, #3
 8004c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f023 0302 	bic.w	r3, r3, #2
 8004c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a1c      	ldr	r2, [pc, #112]	@ (8004d08 <TIM_OC1_SetConfig+0xc8>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d10c      	bne.n	8004cb6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f023 0308 	bic.w	r3, r3, #8
 8004ca2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f023 0304 	bic.w	r3, r3, #4
 8004cb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a13      	ldr	r2, [pc, #76]	@ (8004d08 <TIM_OC1_SetConfig+0xc8>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d111      	bne.n	8004ce2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	693a      	ldr	r2, [r7, #16]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	621a      	str	r2, [r3, #32]
}
 8004cfc:	bf00      	nop
 8004cfe:	371c      	adds	r7, #28
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	40010000 	.word	0x40010000

08004d0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	f023 0210 	bic.w	r2, r3, #16
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	021b      	lsls	r3, r3, #8
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f023 0320 	bic.w	r3, r3, #32
 8004d56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	011b      	lsls	r3, r3, #4
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a1e      	ldr	r2, [pc, #120]	@ (8004de0 <TIM_OC2_SetConfig+0xd4>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d10d      	bne.n	8004d88 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	011b      	lsls	r3, r3, #4
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a15      	ldr	r2, [pc, #84]	@ (8004de0 <TIM_OC2_SetConfig+0xd4>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d113      	bne.n	8004db8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004d96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	621a      	str	r2, [r3, #32]
}
 8004dd2:	bf00      	nop
 8004dd4:	371c      	adds	r7, #28
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	40010000 	.word	0x40010000

08004de4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b087      	sub	sp, #28
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f023 0303 	bic.w	r3, r3, #3
 8004e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	021b      	lsls	r3, r3, #8
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8004eb4 <TIM_OC3_SetConfig+0xd0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d10d      	bne.n	8004e5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	021b      	lsls	r3, r3, #8
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a14      	ldr	r2, [pc, #80]	@ (8004eb4 <TIM_OC3_SetConfig+0xd0>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d113      	bne.n	8004e8e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004e74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	011b      	lsls	r3, r3, #4
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	011b      	lsls	r3, r3, #4
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	621a      	str	r2, [r3, #32]
}
 8004ea8:	bf00      	nop
 8004eaa:	371c      	adds	r7, #28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	40010000 	.word	0x40010000

08004eb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	021b      	lsls	r3, r3, #8
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	031b      	lsls	r3, r3, #12
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a10      	ldr	r2, [pc, #64]	@ (8004f54 <TIM_OC4_SetConfig+0x9c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d109      	bne.n	8004f2c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	019b      	lsls	r3, r3, #6
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	621a      	str	r2, [r3, #32]
}
 8004f46:	bf00      	nop
 8004f48:	371c      	adds	r7, #28
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	40010000 	.word	0x40010000

08004f58 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
 8004f64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	f023 0201 	bic.w	r2, r3, #1
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	4a24      	ldr	r2, [pc, #144]	@ (8005014 <TIM_TI1_SetConfig+0xbc>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d013      	beq.n	8004fae <TIM_TI1_SetConfig+0x56>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f8c:	d00f      	beq.n	8004fae <TIM_TI1_SetConfig+0x56>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	4a21      	ldr	r2, [pc, #132]	@ (8005018 <TIM_TI1_SetConfig+0xc0>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d00b      	beq.n	8004fae <TIM_TI1_SetConfig+0x56>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	4a20      	ldr	r2, [pc, #128]	@ (800501c <TIM_TI1_SetConfig+0xc4>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d007      	beq.n	8004fae <TIM_TI1_SetConfig+0x56>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	4a1f      	ldr	r2, [pc, #124]	@ (8005020 <TIM_TI1_SetConfig+0xc8>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d003      	beq.n	8004fae <TIM_TI1_SetConfig+0x56>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	4a1e      	ldr	r2, [pc, #120]	@ (8005024 <TIM_TI1_SetConfig+0xcc>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d101      	bne.n	8004fb2 <TIM_TI1_SetConfig+0x5a>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e000      	b.n	8004fb4 <TIM_TI1_SetConfig+0x5c>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d008      	beq.n	8004fca <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f023 0303 	bic.w	r3, r3, #3
 8004fbe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]
 8004fc8:	e003      	b.n	8004fd2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f043 0301 	orr.w	r3, r3, #1
 8004fd0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	697a      	ldr	r2, [r7, #20]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	f023 030a 	bic.w	r3, r3, #10
 8004fec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	f003 030a 	and.w	r3, r3, #10
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	621a      	str	r2, [r3, #32]
}
 8005006:	bf00      	nop
 8005008:	371c      	adds	r7, #28
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	40010000 	.word	0x40010000
 8005018:	40000400 	.word	0x40000400
 800501c:	40000800 	.word	0x40000800
 8005020:	40000c00 	.word	0x40000c00
 8005024:	40014000 	.word	0x40014000

08005028 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005028:	b480      	push	{r7}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	f023 0201 	bic.w	r2, r3, #1
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005052:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	011b      	lsls	r3, r3, #4
 8005058:	693a      	ldr	r2, [r7, #16]
 800505a:	4313      	orrs	r3, r2
 800505c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f023 030a 	bic.w	r3, r3, #10
 8005064:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	4313      	orrs	r3, r2
 800506c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	621a      	str	r2, [r3, #32]
}
 800507a:	bf00      	nop
 800507c:	371c      	adds	r7, #28
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005086:	b480      	push	{r7}
 8005088:	b087      	sub	sp, #28
 800508a:	af00      	add	r7, sp, #0
 800508c:	60f8      	str	r0, [r7, #12]
 800508e:	60b9      	str	r1, [r7, #8]
 8005090:	607a      	str	r2, [r7, #4]
 8005092:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	f023 0210 	bic.w	r2, r3, #16
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	021b      	lsls	r3, r3, #8
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80050c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	031b      	lsls	r3, r3, #12
 80050ca:	b29b      	uxth	r3, r3
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80050d8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	011b      	lsls	r3, r3, #4
 80050de:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	621a      	str	r2, [r3, #32]
}
 80050f4:	bf00      	nop
 80050f6:	371c      	adds	r7, #28
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	f023 0210 	bic.w	r2, r3, #16
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800512a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	031b      	lsls	r3, r3, #12
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	4313      	orrs	r3, r2
 8005134:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800513c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	011b      	lsls	r3, r3, #4
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	4313      	orrs	r3, r2
 8005146:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	621a      	str	r2, [r3, #32]
}
 8005154:	bf00      	nop
 8005156:	371c      	adds	r7, #28
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005160:	b480      	push	{r7}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
 800516c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6a1b      	ldr	r3, [r3, #32]
 8005178:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	69db      	ldr	r3, [r3, #28]
 8005184:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f023 0303 	bic.w	r3, r3, #3
 800518c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4313      	orrs	r3, r2
 8005194:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800519c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	011b      	lsls	r3, r3, #4
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80051b0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	021b      	lsls	r3, r3, #8
 80051b6:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	4313      	orrs	r3, r2
 80051be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	621a      	str	r2, [r3, #32]
}
 80051cc:	bf00      	nop
 80051ce:	371c      	adds	r7, #28
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
 80051e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	69db      	ldr	r3, [r3, #28]
 80051fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005204:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	021b      	lsls	r3, r3, #8
 800520a:	693a      	ldr	r2, [r7, #16]
 800520c:	4313      	orrs	r3, r2
 800520e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005216:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	031b      	lsls	r3, r3, #12
 800521c:	b29b      	uxth	r3, r3
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	4313      	orrs	r3, r2
 8005222:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800522a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	031b      	lsls	r3, r3, #12
 8005230:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	4313      	orrs	r3, r2
 8005238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	621a      	str	r2, [r3, #32]
}
 8005246:	bf00      	nop
 8005248:	371c      	adds	r7, #28
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005252:	b480      	push	{r7}
 8005254:	b085      	sub	sp, #20
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005268:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	4313      	orrs	r3, r2
 8005270:	f043 0307 	orr.w	r3, r3, #7
 8005274:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	609a      	str	r2, [r3, #8]
}
 800527c:	bf00      	nop
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	021a      	lsls	r2, r3, #8
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	431a      	orrs	r2, r3
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	609a      	str	r2, [r3, #8]
}
 80052bc:	bf00      	nop
 80052be:	371c      	adds	r7, #28
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	f003 031f 	and.w	r3, r3, #31
 80052da:	2201      	movs	r2, #1
 80052dc:	fa02 f303 	lsl.w	r3, r2, r3
 80052e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6a1a      	ldr	r2, [r3, #32]
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	43db      	mvns	r3, r3
 80052ea:	401a      	ands	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6a1a      	ldr	r2, [r3, #32]
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	f003 031f 	and.w	r3, r3, #31
 80052fa:	6879      	ldr	r1, [r7, #4]
 80052fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005300:	431a      	orrs	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	621a      	str	r2, [r3, #32]
}
 8005306:	bf00      	nop
 8005308:	371c      	adds	r7, #28
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
	...

08005314 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005324:	2b01      	cmp	r3, #1
 8005326:	d101      	bne.n	800532c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005328:	2302      	movs	r3, #2
 800532a:	e050      	b.n	80053ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005352:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	4313      	orrs	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a1c      	ldr	r2, [pc, #112]	@ (80053dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d018      	beq.n	80053a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005378:	d013      	beq.n	80053a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a18      	ldr	r2, [pc, #96]	@ (80053e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d00e      	beq.n	80053a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a16      	ldr	r2, [pc, #88]	@ (80053e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d009      	beq.n	80053a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a15      	ldr	r2, [pc, #84]	@ (80053e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d004      	beq.n	80053a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a13      	ldr	r2, [pc, #76]	@ (80053ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d10c      	bne.n	80053bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	40010000 	.word	0x40010000
 80053e0:	40000400 	.word	0x40000400
 80053e4:	40000800 	.word	0x40000800
 80053e8:	40000c00 	.word	0x40000c00
 80053ec:	40014000 	.word	0x40014000

080053f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e042      	b.n	80054b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d106      	bne.n	8005444 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7fc ff52 	bl	80022e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2224      	movs	r2, #36	@ 0x24
 8005448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68da      	ldr	r2, [r3, #12]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800545a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f973 	bl	8005748 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	691a      	ldr	r2, [r3, #16]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005470:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	695a      	ldr	r2, [r3, #20]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005480:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68da      	ldr	r2, [r3, #12]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005490:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2220      	movs	r2, #32
 800549c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b08a      	sub	sp, #40	@ 0x28
 80054bc:	af02      	add	r7, sp, #8
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	603b      	str	r3, [r7, #0]
 80054c4:	4613      	mov	r3, r2
 80054c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054c8:	2300      	movs	r3, #0
 80054ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b20      	cmp	r3, #32
 80054d6:	d175      	bne.n	80055c4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <HAL_UART_Transmit+0x2c>
 80054de:	88fb      	ldrh	r3, [r7, #6]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d101      	bne.n	80054e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e06e      	b.n	80055c6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2221      	movs	r2, #33	@ 0x21
 80054f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054f6:	f7fd f911 	bl	800271c <HAL_GetTick>
 80054fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	88fa      	ldrh	r2, [r7, #6]
 8005500:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	88fa      	ldrh	r2, [r7, #6]
 8005506:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005510:	d108      	bne.n	8005524 <HAL_UART_Transmit+0x6c>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d104      	bne.n	8005524 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800551a:	2300      	movs	r3, #0
 800551c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	61bb      	str	r3, [r7, #24]
 8005522:	e003      	b.n	800552c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005528:	2300      	movs	r3, #0
 800552a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800552c:	e02e      	b.n	800558c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	9300      	str	r3, [sp, #0]
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	2200      	movs	r2, #0
 8005536:	2180      	movs	r1, #128	@ 0x80
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f000 f848 	bl	80055ce <UART_WaitOnFlagUntilTimeout>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d005      	beq.n	8005550 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2220      	movs	r2, #32
 8005548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800554c:	2303      	movs	r3, #3
 800554e:	e03a      	b.n	80055c6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10b      	bne.n	800556e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	881b      	ldrh	r3, [r3, #0]
 800555a:	461a      	mov	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005564:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	3302      	adds	r3, #2
 800556a:	61bb      	str	r3, [r7, #24]
 800556c:	e007      	b.n	800557e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	781a      	ldrb	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	3301      	adds	r3, #1
 800557c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005582:	b29b      	uxth	r3, r3
 8005584:	3b01      	subs	r3, #1
 8005586:	b29a      	uxth	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005590:	b29b      	uxth	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1cb      	bne.n	800552e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2200      	movs	r2, #0
 800559e:	2140      	movs	r1, #64	@ 0x40
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f000 f814 	bl	80055ce <UART_WaitOnFlagUntilTimeout>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d005      	beq.n	80055b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2220      	movs	r2, #32
 80055b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e006      	b.n	80055c6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2220      	movs	r2, #32
 80055bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80055c0:	2300      	movs	r3, #0
 80055c2:	e000      	b.n	80055c6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80055c4:	2302      	movs	r3, #2
  }
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3720      	adds	r7, #32
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b086      	sub	sp, #24
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	60f8      	str	r0, [r7, #12]
 80055d6:	60b9      	str	r1, [r7, #8]
 80055d8:	603b      	str	r3, [r7, #0]
 80055da:	4613      	mov	r3, r2
 80055dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055de:	e03b      	b.n	8005658 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e6:	d037      	beq.n	8005658 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055e8:	f7fd f898 	bl	800271c <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	6a3a      	ldr	r2, [r7, #32]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d302      	bcc.n	80055fe <UART_WaitOnFlagUntilTimeout+0x30>
 80055f8:	6a3b      	ldr	r3, [r7, #32]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e03a      	b.n	8005678 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f003 0304 	and.w	r3, r3, #4
 800560c:	2b00      	cmp	r3, #0
 800560e:	d023      	beq.n	8005658 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	2b80      	cmp	r3, #128	@ 0x80
 8005614:	d020      	beq.n	8005658 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	2b40      	cmp	r3, #64	@ 0x40
 800561a:	d01d      	beq.n	8005658 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0308 	and.w	r3, r3, #8
 8005626:	2b08      	cmp	r3, #8
 8005628:	d116      	bne.n	8005658 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800562a:	2300      	movs	r3, #0
 800562c:	617b      	str	r3, [r7, #20]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	617b      	str	r3, [r7, #20]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	617b      	str	r3, [r7, #20]
 800563e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f000 f81d 	bl	8005680 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2208      	movs	r2, #8
 800564a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e00f      	b.n	8005678 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	4013      	ands	r3, r2
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	429a      	cmp	r2, r3
 8005666:	bf0c      	ite	eq
 8005668:	2301      	moveq	r3, #1
 800566a:	2300      	movne	r3, #0
 800566c:	b2db      	uxtb	r3, r3
 800566e:	461a      	mov	r2, r3
 8005670:	79fb      	ldrb	r3, [r7, #7]
 8005672:	429a      	cmp	r2, r3
 8005674:	d0b4      	beq.n	80055e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3718      	adds	r7, #24
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005680:	b480      	push	{r7}
 8005682:	b095      	sub	sp, #84	@ 0x54
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	330c      	adds	r3, #12
 800568e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005692:	e853 3f00 	ldrex	r3, [r3]
 8005696:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800569a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800569e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	330c      	adds	r3, #12
 80056a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056a8:	643a      	str	r2, [r7, #64]	@ 0x40
 80056aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056b0:	e841 2300 	strex	r3, r2, [r1]
 80056b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1e5      	bne.n	8005688 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	3314      	adds	r3, #20
 80056c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c4:	6a3b      	ldr	r3, [r7, #32]
 80056c6:	e853 3f00 	ldrex	r3, [r3]
 80056ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	f023 0301 	bic.w	r3, r3, #1
 80056d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	3314      	adds	r3, #20
 80056da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056e4:	e841 2300 	strex	r3, r2, [r1]
 80056e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1e5      	bne.n	80056bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d119      	bne.n	800572c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	330c      	adds	r3, #12
 80056fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	e853 3f00 	ldrex	r3, [r3]
 8005706:	60bb      	str	r3, [r7, #8]
   return(result);
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f023 0310 	bic.w	r3, r3, #16
 800570e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	330c      	adds	r3, #12
 8005716:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005718:	61ba      	str	r2, [r7, #24]
 800571a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571c:	6979      	ldr	r1, [r7, #20]
 800571e:	69ba      	ldr	r2, [r7, #24]
 8005720:	e841 2300 	strex	r3, r2, [r1]
 8005724:	613b      	str	r3, [r7, #16]
   return(result);
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1e5      	bne.n	80056f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2220      	movs	r2, #32
 8005730:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800573a:	bf00      	nop
 800573c:	3754      	adds	r7, #84	@ 0x54
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
	...

08005748 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800574c:	b0c0      	sub	sp, #256	@ 0x100
 800574e:	af00      	add	r7, sp, #0
 8005750:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005764:	68d9      	ldr	r1, [r3, #12]
 8005766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	ea40 0301 	orr.w	r3, r0, r1
 8005770:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005776:	689a      	ldr	r2, [r3, #8]
 8005778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	431a      	orrs	r2, r3
 8005780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	431a      	orrs	r2, r3
 8005788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800578c:	69db      	ldr	r3, [r3, #28]
 800578e:	4313      	orrs	r3, r2
 8005790:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80057a0:	f021 010c 	bic.w	r1, r1, #12
 80057a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80057ae:	430b      	orrs	r3, r1
 80057b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80057be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c2:	6999      	ldr	r1, [r3, #24]
 80057c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	ea40 0301 	orr.w	r3, r0, r1
 80057ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	4b8f      	ldr	r3, [pc, #572]	@ (8005a14 <UART_SetConfig+0x2cc>)
 80057d8:	429a      	cmp	r2, r3
 80057da:	d005      	beq.n	80057e8 <UART_SetConfig+0xa0>
 80057dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	4b8d      	ldr	r3, [pc, #564]	@ (8005a18 <UART_SetConfig+0x2d0>)
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d104      	bne.n	80057f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057e8:	f7fd ff06 	bl	80035f8 <HAL_RCC_GetPCLK2Freq>
 80057ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80057f0:	e003      	b.n	80057fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80057f2:	f7fd feed 	bl	80035d0 <HAL_RCC_GetPCLK1Freq>
 80057f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057fe:	69db      	ldr	r3, [r3, #28]
 8005800:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005804:	f040 810c 	bne.w	8005a20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005808:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800580c:	2200      	movs	r2, #0
 800580e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005812:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005816:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800581a:	4622      	mov	r2, r4
 800581c:	462b      	mov	r3, r5
 800581e:	1891      	adds	r1, r2, r2
 8005820:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005822:	415b      	adcs	r3, r3
 8005824:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005826:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800582a:	4621      	mov	r1, r4
 800582c:	eb12 0801 	adds.w	r8, r2, r1
 8005830:	4629      	mov	r1, r5
 8005832:	eb43 0901 	adc.w	r9, r3, r1
 8005836:	f04f 0200 	mov.w	r2, #0
 800583a:	f04f 0300 	mov.w	r3, #0
 800583e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005842:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005846:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800584a:	4690      	mov	r8, r2
 800584c:	4699      	mov	r9, r3
 800584e:	4623      	mov	r3, r4
 8005850:	eb18 0303 	adds.w	r3, r8, r3
 8005854:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005858:	462b      	mov	r3, r5
 800585a:	eb49 0303 	adc.w	r3, r9, r3
 800585e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800586e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005872:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005876:	460b      	mov	r3, r1
 8005878:	18db      	adds	r3, r3, r3
 800587a:	653b      	str	r3, [r7, #80]	@ 0x50
 800587c:	4613      	mov	r3, r2
 800587e:	eb42 0303 	adc.w	r3, r2, r3
 8005882:	657b      	str	r3, [r7, #84]	@ 0x54
 8005884:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005888:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800588c:	f7fb f994 	bl	8000bb8 <__aeabi_uldivmod>
 8005890:	4602      	mov	r2, r0
 8005892:	460b      	mov	r3, r1
 8005894:	4b61      	ldr	r3, [pc, #388]	@ (8005a1c <UART_SetConfig+0x2d4>)
 8005896:	fba3 2302 	umull	r2, r3, r3, r2
 800589a:	095b      	lsrs	r3, r3, #5
 800589c:	011c      	lsls	r4, r3, #4
 800589e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058a2:	2200      	movs	r2, #0
 80058a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80058a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80058ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80058b0:	4642      	mov	r2, r8
 80058b2:	464b      	mov	r3, r9
 80058b4:	1891      	adds	r1, r2, r2
 80058b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80058b8:	415b      	adcs	r3, r3
 80058ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80058c0:	4641      	mov	r1, r8
 80058c2:	eb12 0a01 	adds.w	sl, r2, r1
 80058c6:	4649      	mov	r1, r9
 80058c8:	eb43 0b01 	adc.w	fp, r3, r1
 80058cc:	f04f 0200 	mov.w	r2, #0
 80058d0:	f04f 0300 	mov.w	r3, #0
 80058d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80058d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80058dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058e0:	4692      	mov	sl, r2
 80058e2:	469b      	mov	fp, r3
 80058e4:	4643      	mov	r3, r8
 80058e6:	eb1a 0303 	adds.w	r3, sl, r3
 80058ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058ee:	464b      	mov	r3, r9
 80058f0:	eb4b 0303 	adc.w	r3, fp, r3
 80058f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80058f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005904:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005908:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800590c:	460b      	mov	r3, r1
 800590e:	18db      	adds	r3, r3, r3
 8005910:	643b      	str	r3, [r7, #64]	@ 0x40
 8005912:	4613      	mov	r3, r2
 8005914:	eb42 0303 	adc.w	r3, r2, r3
 8005918:	647b      	str	r3, [r7, #68]	@ 0x44
 800591a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800591e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005922:	f7fb f949 	bl	8000bb8 <__aeabi_uldivmod>
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	4611      	mov	r1, r2
 800592c:	4b3b      	ldr	r3, [pc, #236]	@ (8005a1c <UART_SetConfig+0x2d4>)
 800592e:	fba3 2301 	umull	r2, r3, r3, r1
 8005932:	095b      	lsrs	r3, r3, #5
 8005934:	2264      	movs	r2, #100	@ 0x64
 8005936:	fb02 f303 	mul.w	r3, r2, r3
 800593a:	1acb      	subs	r3, r1, r3
 800593c:	00db      	lsls	r3, r3, #3
 800593e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005942:	4b36      	ldr	r3, [pc, #216]	@ (8005a1c <UART_SetConfig+0x2d4>)
 8005944:	fba3 2302 	umull	r2, r3, r3, r2
 8005948:	095b      	lsrs	r3, r3, #5
 800594a:	005b      	lsls	r3, r3, #1
 800594c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005950:	441c      	add	r4, r3
 8005952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005956:	2200      	movs	r2, #0
 8005958:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800595c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005960:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005964:	4642      	mov	r2, r8
 8005966:	464b      	mov	r3, r9
 8005968:	1891      	adds	r1, r2, r2
 800596a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800596c:	415b      	adcs	r3, r3
 800596e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005970:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005974:	4641      	mov	r1, r8
 8005976:	1851      	adds	r1, r2, r1
 8005978:	6339      	str	r1, [r7, #48]	@ 0x30
 800597a:	4649      	mov	r1, r9
 800597c:	414b      	adcs	r3, r1
 800597e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005980:	f04f 0200 	mov.w	r2, #0
 8005984:	f04f 0300 	mov.w	r3, #0
 8005988:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800598c:	4659      	mov	r1, fp
 800598e:	00cb      	lsls	r3, r1, #3
 8005990:	4651      	mov	r1, sl
 8005992:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005996:	4651      	mov	r1, sl
 8005998:	00ca      	lsls	r2, r1, #3
 800599a:	4610      	mov	r0, r2
 800599c:	4619      	mov	r1, r3
 800599e:	4603      	mov	r3, r0
 80059a0:	4642      	mov	r2, r8
 80059a2:	189b      	adds	r3, r3, r2
 80059a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059a8:	464b      	mov	r3, r9
 80059aa:	460a      	mov	r2, r1
 80059ac:	eb42 0303 	adc.w	r3, r2, r3
 80059b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80059b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80059c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80059c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80059c8:	460b      	mov	r3, r1
 80059ca:	18db      	adds	r3, r3, r3
 80059cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059ce:	4613      	mov	r3, r2
 80059d0:	eb42 0303 	adc.w	r3, r2, r3
 80059d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80059da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80059de:	f7fb f8eb 	bl	8000bb8 <__aeabi_uldivmod>
 80059e2:	4602      	mov	r2, r0
 80059e4:	460b      	mov	r3, r1
 80059e6:	4b0d      	ldr	r3, [pc, #52]	@ (8005a1c <UART_SetConfig+0x2d4>)
 80059e8:	fba3 1302 	umull	r1, r3, r3, r2
 80059ec:	095b      	lsrs	r3, r3, #5
 80059ee:	2164      	movs	r1, #100	@ 0x64
 80059f0:	fb01 f303 	mul.w	r3, r1, r3
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	3332      	adds	r3, #50	@ 0x32
 80059fa:	4a08      	ldr	r2, [pc, #32]	@ (8005a1c <UART_SetConfig+0x2d4>)
 80059fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005a00:	095b      	lsrs	r3, r3, #5
 8005a02:	f003 0207 	and.w	r2, r3, #7
 8005a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4422      	add	r2, r4
 8005a0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a10:	e106      	b.n	8005c20 <UART_SetConfig+0x4d8>
 8005a12:	bf00      	nop
 8005a14:	40011000 	.word	0x40011000
 8005a18:	40011400 	.word	0x40011400
 8005a1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a24:	2200      	movs	r2, #0
 8005a26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005a2a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005a2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005a32:	4642      	mov	r2, r8
 8005a34:	464b      	mov	r3, r9
 8005a36:	1891      	adds	r1, r2, r2
 8005a38:	6239      	str	r1, [r7, #32]
 8005a3a:	415b      	adcs	r3, r3
 8005a3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a42:	4641      	mov	r1, r8
 8005a44:	1854      	adds	r4, r2, r1
 8005a46:	4649      	mov	r1, r9
 8005a48:	eb43 0501 	adc.w	r5, r3, r1
 8005a4c:	f04f 0200 	mov.w	r2, #0
 8005a50:	f04f 0300 	mov.w	r3, #0
 8005a54:	00eb      	lsls	r3, r5, #3
 8005a56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a5a:	00e2      	lsls	r2, r4, #3
 8005a5c:	4614      	mov	r4, r2
 8005a5e:	461d      	mov	r5, r3
 8005a60:	4643      	mov	r3, r8
 8005a62:	18e3      	adds	r3, r4, r3
 8005a64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005a68:	464b      	mov	r3, r9
 8005a6a:	eb45 0303 	adc.w	r3, r5, r3
 8005a6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005a7e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005a82:	f04f 0200 	mov.w	r2, #0
 8005a86:	f04f 0300 	mov.w	r3, #0
 8005a8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005a8e:	4629      	mov	r1, r5
 8005a90:	008b      	lsls	r3, r1, #2
 8005a92:	4621      	mov	r1, r4
 8005a94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a98:	4621      	mov	r1, r4
 8005a9a:	008a      	lsls	r2, r1, #2
 8005a9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005aa0:	f7fb f88a 	bl	8000bb8 <__aeabi_uldivmod>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	4b60      	ldr	r3, [pc, #384]	@ (8005c2c <UART_SetConfig+0x4e4>)
 8005aaa:	fba3 2302 	umull	r2, r3, r3, r2
 8005aae:	095b      	lsrs	r3, r3, #5
 8005ab0:	011c      	lsls	r4, r3, #4
 8005ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005abc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005ac0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005ac4:	4642      	mov	r2, r8
 8005ac6:	464b      	mov	r3, r9
 8005ac8:	1891      	adds	r1, r2, r2
 8005aca:	61b9      	str	r1, [r7, #24]
 8005acc:	415b      	adcs	r3, r3
 8005ace:	61fb      	str	r3, [r7, #28]
 8005ad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ad4:	4641      	mov	r1, r8
 8005ad6:	1851      	adds	r1, r2, r1
 8005ad8:	6139      	str	r1, [r7, #16]
 8005ada:	4649      	mov	r1, r9
 8005adc:	414b      	adcs	r3, r1
 8005ade:	617b      	str	r3, [r7, #20]
 8005ae0:	f04f 0200 	mov.w	r2, #0
 8005ae4:	f04f 0300 	mov.w	r3, #0
 8005ae8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005aec:	4659      	mov	r1, fp
 8005aee:	00cb      	lsls	r3, r1, #3
 8005af0:	4651      	mov	r1, sl
 8005af2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005af6:	4651      	mov	r1, sl
 8005af8:	00ca      	lsls	r2, r1, #3
 8005afa:	4610      	mov	r0, r2
 8005afc:	4619      	mov	r1, r3
 8005afe:	4603      	mov	r3, r0
 8005b00:	4642      	mov	r2, r8
 8005b02:	189b      	adds	r3, r3, r2
 8005b04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005b08:	464b      	mov	r3, r9
 8005b0a:	460a      	mov	r2, r1
 8005b0c:	eb42 0303 	adc.w	r3, r2, r3
 8005b10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005b1e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005b20:	f04f 0200 	mov.w	r2, #0
 8005b24:	f04f 0300 	mov.w	r3, #0
 8005b28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005b2c:	4649      	mov	r1, r9
 8005b2e:	008b      	lsls	r3, r1, #2
 8005b30:	4641      	mov	r1, r8
 8005b32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b36:	4641      	mov	r1, r8
 8005b38:	008a      	lsls	r2, r1, #2
 8005b3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005b3e:	f7fb f83b 	bl	8000bb8 <__aeabi_uldivmod>
 8005b42:	4602      	mov	r2, r0
 8005b44:	460b      	mov	r3, r1
 8005b46:	4611      	mov	r1, r2
 8005b48:	4b38      	ldr	r3, [pc, #224]	@ (8005c2c <UART_SetConfig+0x4e4>)
 8005b4a:	fba3 2301 	umull	r2, r3, r3, r1
 8005b4e:	095b      	lsrs	r3, r3, #5
 8005b50:	2264      	movs	r2, #100	@ 0x64
 8005b52:	fb02 f303 	mul.w	r3, r2, r3
 8005b56:	1acb      	subs	r3, r1, r3
 8005b58:	011b      	lsls	r3, r3, #4
 8005b5a:	3332      	adds	r3, #50	@ 0x32
 8005b5c:	4a33      	ldr	r2, [pc, #204]	@ (8005c2c <UART_SetConfig+0x4e4>)
 8005b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b62:	095b      	lsrs	r3, r3, #5
 8005b64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005b68:	441c      	add	r4, r3
 8005b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b6e:	2200      	movs	r2, #0
 8005b70:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b72:	677a      	str	r2, [r7, #116]	@ 0x74
 8005b74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005b78:	4642      	mov	r2, r8
 8005b7a:	464b      	mov	r3, r9
 8005b7c:	1891      	adds	r1, r2, r2
 8005b7e:	60b9      	str	r1, [r7, #8]
 8005b80:	415b      	adcs	r3, r3
 8005b82:	60fb      	str	r3, [r7, #12]
 8005b84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b88:	4641      	mov	r1, r8
 8005b8a:	1851      	adds	r1, r2, r1
 8005b8c:	6039      	str	r1, [r7, #0]
 8005b8e:	4649      	mov	r1, r9
 8005b90:	414b      	adcs	r3, r1
 8005b92:	607b      	str	r3, [r7, #4]
 8005b94:	f04f 0200 	mov.w	r2, #0
 8005b98:	f04f 0300 	mov.w	r3, #0
 8005b9c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ba0:	4659      	mov	r1, fp
 8005ba2:	00cb      	lsls	r3, r1, #3
 8005ba4:	4651      	mov	r1, sl
 8005ba6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005baa:	4651      	mov	r1, sl
 8005bac:	00ca      	lsls	r2, r1, #3
 8005bae:	4610      	mov	r0, r2
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	4642      	mov	r2, r8
 8005bb6:	189b      	adds	r3, r3, r2
 8005bb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005bba:	464b      	mov	r3, r9
 8005bbc:	460a      	mov	r2, r1
 8005bbe:	eb42 0303 	adc.w	r3, r2, r3
 8005bc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	663b      	str	r3, [r7, #96]	@ 0x60
 8005bce:	667a      	str	r2, [r7, #100]	@ 0x64
 8005bd0:	f04f 0200 	mov.w	r2, #0
 8005bd4:	f04f 0300 	mov.w	r3, #0
 8005bd8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005bdc:	4649      	mov	r1, r9
 8005bde:	008b      	lsls	r3, r1, #2
 8005be0:	4641      	mov	r1, r8
 8005be2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005be6:	4641      	mov	r1, r8
 8005be8:	008a      	lsls	r2, r1, #2
 8005bea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005bee:	f7fa ffe3 	bl	8000bb8 <__aeabi_uldivmod>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8005c2c <UART_SetConfig+0x4e4>)
 8005bf8:	fba3 1302 	umull	r1, r3, r3, r2
 8005bfc:	095b      	lsrs	r3, r3, #5
 8005bfe:	2164      	movs	r1, #100	@ 0x64
 8005c00:	fb01 f303 	mul.w	r3, r1, r3
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	011b      	lsls	r3, r3, #4
 8005c08:	3332      	adds	r3, #50	@ 0x32
 8005c0a:	4a08      	ldr	r2, [pc, #32]	@ (8005c2c <UART_SetConfig+0x4e4>)
 8005c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c10:	095b      	lsrs	r3, r3, #5
 8005c12:	f003 020f 	and.w	r2, r3, #15
 8005c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4422      	add	r2, r4
 8005c1e:	609a      	str	r2, [r3, #8]
}
 8005c20:	bf00      	nop
 8005c22:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005c26:	46bd      	mov	sp, r7
 8005c28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c2c:	51eb851f 	.word	0x51eb851f

08005c30 <_ZdlPvj>:
 8005c30:	f000 b811 	b.w	8005c56 <_ZdlPv>

08005c34 <_Znwj>:
 8005c34:	2801      	cmp	r0, #1
 8005c36:	bf38      	it	cc
 8005c38:	2001      	movcc	r0, #1
 8005c3a:	b510      	push	{r4, lr}
 8005c3c:	4604      	mov	r4, r0
 8005c3e:	4620      	mov	r0, r4
 8005c40:	f000 f81c 	bl	8005c7c <malloc>
 8005c44:	b100      	cbz	r0, 8005c48 <_Znwj+0x14>
 8005c46:	bd10      	pop	{r4, pc}
 8005c48:	f000 f808 	bl	8005c5c <_ZSt15get_new_handlerv>
 8005c4c:	b908      	cbnz	r0, 8005c52 <_Znwj+0x1e>
 8005c4e:	f000 f80d 	bl	8005c6c <abort>
 8005c52:	4780      	blx	r0
 8005c54:	e7f3      	b.n	8005c3e <_Znwj+0xa>

08005c56 <_ZdlPv>:
 8005c56:	f000 b819 	b.w	8005c8c <free>
	...

08005c5c <_ZSt15get_new_handlerv>:
 8005c5c:	4b02      	ldr	r3, [pc, #8]	@ (8005c68 <_ZSt15get_new_handlerv+0xc>)
 8005c5e:	6818      	ldr	r0, [r3, #0]
 8005c60:	f3bf 8f5b 	dmb	ish
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	20000398 	.word	0x20000398

08005c6c <abort>:
 8005c6c:	b508      	push	{r3, lr}
 8005c6e:	2006      	movs	r0, #6
 8005c70:	f000 fea4 	bl	80069bc <raise>
 8005c74:	2001      	movs	r0, #1
 8005c76:	f7fc fc01 	bl	800247c <_exit>
	...

08005c7c <malloc>:
 8005c7c:	4b02      	ldr	r3, [pc, #8]	@ (8005c88 <malloc+0xc>)
 8005c7e:	4601      	mov	r1, r0
 8005c80:	6818      	ldr	r0, [r3, #0]
 8005c82:	f000 b82d 	b.w	8005ce0 <_malloc_r>
 8005c86:	bf00      	nop
 8005c88:	20000018 	.word	0x20000018

08005c8c <free>:
 8005c8c:	4b02      	ldr	r3, [pc, #8]	@ (8005c98 <free+0xc>)
 8005c8e:	4601      	mov	r1, r0
 8005c90:	6818      	ldr	r0, [r3, #0]
 8005c92:	f001 bd85 	b.w	80077a0 <_free_r>
 8005c96:	bf00      	nop
 8005c98:	20000018 	.word	0x20000018

08005c9c <sbrk_aligned>:
 8005c9c:	b570      	push	{r4, r5, r6, lr}
 8005c9e:	4e0f      	ldr	r6, [pc, #60]	@ (8005cdc <sbrk_aligned+0x40>)
 8005ca0:	460c      	mov	r4, r1
 8005ca2:	6831      	ldr	r1, [r6, #0]
 8005ca4:	4605      	mov	r5, r0
 8005ca6:	b911      	cbnz	r1, 8005cae <sbrk_aligned+0x12>
 8005ca8:	f000 fedc 	bl	8006a64 <_sbrk_r>
 8005cac:	6030      	str	r0, [r6, #0]
 8005cae:	4621      	mov	r1, r4
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	f000 fed7 	bl	8006a64 <_sbrk_r>
 8005cb6:	1c43      	adds	r3, r0, #1
 8005cb8:	d103      	bne.n	8005cc2 <sbrk_aligned+0x26>
 8005cba:	f04f 34ff 	mov.w	r4, #4294967295
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	bd70      	pop	{r4, r5, r6, pc}
 8005cc2:	1cc4      	adds	r4, r0, #3
 8005cc4:	f024 0403 	bic.w	r4, r4, #3
 8005cc8:	42a0      	cmp	r0, r4
 8005cca:	d0f8      	beq.n	8005cbe <sbrk_aligned+0x22>
 8005ccc:	1a21      	subs	r1, r4, r0
 8005cce:	4628      	mov	r0, r5
 8005cd0:	f000 fec8 	bl	8006a64 <_sbrk_r>
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	d1f2      	bne.n	8005cbe <sbrk_aligned+0x22>
 8005cd8:	e7ef      	b.n	8005cba <sbrk_aligned+0x1e>
 8005cda:	bf00      	nop
 8005cdc:	2000039c 	.word	0x2000039c

08005ce0 <_malloc_r>:
 8005ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ce4:	1ccd      	adds	r5, r1, #3
 8005ce6:	f025 0503 	bic.w	r5, r5, #3
 8005cea:	3508      	adds	r5, #8
 8005cec:	2d0c      	cmp	r5, #12
 8005cee:	bf38      	it	cc
 8005cf0:	250c      	movcc	r5, #12
 8005cf2:	2d00      	cmp	r5, #0
 8005cf4:	4606      	mov	r6, r0
 8005cf6:	db01      	blt.n	8005cfc <_malloc_r+0x1c>
 8005cf8:	42a9      	cmp	r1, r5
 8005cfa:	d904      	bls.n	8005d06 <_malloc_r+0x26>
 8005cfc:	230c      	movs	r3, #12
 8005cfe:	6033      	str	r3, [r6, #0]
 8005d00:	2000      	movs	r0, #0
 8005d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ddc <_malloc_r+0xfc>
 8005d0a:	f000 f869 	bl	8005de0 <__malloc_lock>
 8005d0e:	f8d8 3000 	ldr.w	r3, [r8]
 8005d12:	461c      	mov	r4, r3
 8005d14:	bb44      	cbnz	r4, 8005d68 <_malloc_r+0x88>
 8005d16:	4629      	mov	r1, r5
 8005d18:	4630      	mov	r0, r6
 8005d1a:	f7ff ffbf 	bl	8005c9c <sbrk_aligned>
 8005d1e:	1c43      	adds	r3, r0, #1
 8005d20:	4604      	mov	r4, r0
 8005d22:	d158      	bne.n	8005dd6 <_malloc_r+0xf6>
 8005d24:	f8d8 4000 	ldr.w	r4, [r8]
 8005d28:	4627      	mov	r7, r4
 8005d2a:	2f00      	cmp	r7, #0
 8005d2c:	d143      	bne.n	8005db6 <_malloc_r+0xd6>
 8005d2e:	2c00      	cmp	r4, #0
 8005d30:	d04b      	beq.n	8005dca <_malloc_r+0xea>
 8005d32:	6823      	ldr	r3, [r4, #0]
 8005d34:	4639      	mov	r1, r7
 8005d36:	4630      	mov	r0, r6
 8005d38:	eb04 0903 	add.w	r9, r4, r3
 8005d3c:	f000 fe92 	bl	8006a64 <_sbrk_r>
 8005d40:	4581      	cmp	r9, r0
 8005d42:	d142      	bne.n	8005dca <_malloc_r+0xea>
 8005d44:	6821      	ldr	r1, [r4, #0]
 8005d46:	1a6d      	subs	r5, r5, r1
 8005d48:	4629      	mov	r1, r5
 8005d4a:	4630      	mov	r0, r6
 8005d4c:	f7ff ffa6 	bl	8005c9c <sbrk_aligned>
 8005d50:	3001      	adds	r0, #1
 8005d52:	d03a      	beq.n	8005dca <_malloc_r+0xea>
 8005d54:	6823      	ldr	r3, [r4, #0]
 8005d56:	442b      	add	r3, r5
 8005d58:	6023      	str	r3, [r4, #0]
 8005d5a:	f8d8 3000 	ldr.w	r3, [r8]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	bb62      	cbnz	r2, 8005dbc <_malloc_r+0xdc>
 8005d62:	f8c8 7000 	str.w	r7, [r8]
 8005d66:	e00f      	b.n	8005d88 <_malloc_r+0xa8>
 8005d68:	6822      	ldr	r2, [r4, #0]
 8005d6a:	1b52      	subs	r2, r2, r5
 8005d6c:	d420      	bmi.n	8005db0 <_malloc_r+0xd0>
 8005d6e:	2a0b      	cmp	r2, #11
 8005d70:	d917      	bls.n	8005da2 <_malloc_r+0xc2>
 8005d72:	1961      	adds	r1, r4, r5
 8005d74:	42a3      	cmp	r3, r4
 8005d76:	6025      	str	r5, [r4, #0]
 8005d78:	bf18      	it	ne
 8005d7a:	6059      	strne	r1, [r3, #4]
 8005d7c:	6863      	ldr	r3, [r4, #4]
 8005d7e:	bf08      	it	eq
 8005d80:	f8c8 1000 	streq.w	r1, [r8]
 8005d84:	5162      	str	r2, [r4, r5]
 8005d86:	604b      	str	r3, [r1, #4]
 8005d88:	4630      	mov	r0, r6
 8005d8a:	f000 f82f 	bl	8005dec <__malloc_unlock>
 8005d8e:	f104 000b 	add.w	r0, r4, #11
 8005d92:	1d23      	adds	r3, r4, #4
 8005d94:	f020 0007 	bic.w	r0, r0, #7
 8005d98:	1ac2      	subs	r2, r0, r3
 8005d9a:	bf1c      	itt	ne
 8005d9c:	1a1b      	subne	r3, r3, r0
 8005d9e:	50a3      	strne	r3, [r4, r2]
 8005da0:	e7af      	b.n	8005d02 <_malloc_r+0x22>
 8005da2:	6862      	ldr	r2, [r4, #4]
 8005da4:	42a3      	cmp	r3, r4
 8005da6:	bf0c      	ite	eq
 8005da8:	f8c8 2000 	streq.w	r2, [r8]
 8005dac:	605a      	strne	r2, [r3, #4]
 8005dae:	e7eb      	b.n	8005d88 <_malloc_r+0xa8>
 8005db0:	4623      	mov	r3, r4
 8005db2:	6864      	ldr	r4, [r4, #4]
 8005db4:	e7ae      	b.n	8005d14 <_malloc_r+0x34>
 8005db6:	463c      	mov	r4, r7
 8005db8:	687f      	ldr	r7, [r7, #4]
 8005dba:	e7b6      	b.n	8005d2a <_malloc_r+0x4a>
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	42a3      	cmp	r3, r4
 8005dc2:	d1fb      	bne.n	8005dbc <_malloc_r+0xdc>
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	6053      	str	r3, [r2, #4]
 8005dc8:	e7de      	b.n	8005d88 <_malloc_r+0xa8>
 8005dca:	230c      	movs	r3, #12
 8005dcc:	6033      	str	r3, [r6, #0]
 8005dce:	4630      	mov	r0, r6
 8005dd0:	f000 f80c 	bl	8005dec <__malloc_unlock>
 8005dd4:	e794      	b.n	8005d00 <_malloc_r+0x20>
 8005dd6:	6005      	str	r5, [r0, #0]
 8005dd8:	e7d6      	b.n	8005d88 <_malloc_r+0xa8>
 8005dda:	bf00      	nop
 8005ddc:	200003a0 	.word	0x200003a0

08005de0 <__malloc_lock>:
 8005de0:	4801      	ldr	r0, [pc, #4]	@ (8005de8 <__malloc_lock+0x8>)
 8005de2:	f000 be8c 	b.w	8006afe <__retarget_lock_acquire_recursive>
 8005de6:	bf00      	nop
 8005de8:	200004e4 	.word	0x200004e4

08005dec <__malloc_unlock>:
 8005dec:	4801      	ldr	r0, [pc, #4]	@ (8005df4 <__malloc_unlock+0x8>)
 8005dee:	f000 be87 	b.w	8006b00 <__retarget_lock_release_recursive>
 8005df2:	bf00      	nop
 8005df4:	200004e4 	.word	0x200004e4

08005df8 <__cvt>:
 8005df8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dfc:	ec57 6b10 	vmov	r6, r7, d0
 8005e00:	2f00      	cmp	r7, #0
 8005e02:	460c      	mov	r4, r1
 8005e04:	4619      	mov	r1, r3
 8005e06:	463b      	mov	r3, r7
 8005e08:	bfbb      	ittet	lt
 8005e0a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005e0e:	461f      	movlt	r7, r3
 8005e10:	2300      	movge	r3, #0
 8005e12:	232d      	movlt	r3, #45	@ 0x2d
 8005e14:	700b      	strb	r3, [r1, #0]
 8005e16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e18:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005e1c:	4691      	mov	r9, r2
 8005e1e:	f023 0820 	bic.w	r8, r3, #32
 8005e22:	bfbc      	itt	lt
 8005e24:	4632      	movlt	r2, r6
 8005e26:	4616      	movlt	r6, r2
 8005e28:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005e2c:	d005      	beq.n	8005e3a <__cvt+0x42>
 8005e2e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005e32:	d100      	bne.n	8005e36 <__cvt+0x3e>
 8005e34:	3401      	adds	r4, #1
 8005e36:	2102      	movs	r1, #2
 8005e38:	e000      	b.n	8005e3c <__cvt+0x44>
 8005e3a:	2103      	movs	r1, #3
 8005e3c:	ab03      	add	r3, sp, #12
 8005e3e:	9301      	str	r3, [sp, #4]
 8005e40:	ab02      	add	r3, sp, #8
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	ec47 6b10 	vmov	d0, r6, r7
 8005e48:	4653      	mov	r3, sl
 8005e4a:	4622      	mov	r2, r4
 8005e4c:	f000 fee4 	bl	8006c18 <_dtoa_r>
 8005e50:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005e54:	4605      	mov	r5, r0
 8005e56:	d119      	bne.n	8005e8c <__cvt+0x94>
 8005e58:	f019 0f01 	tst.w	r9, #1
 8005e5c:	d00e      	beq.n	8005e7c <__cvt+0x84>
 8005e5e:	eb00 0904 	add.w	r9, r0, r4
 8005e62:	2200      	movs	r2, #0
 8005e64:	2300      	movs	r3, #0
 8005e66:	4630      	mov	r0, r6
 8005e68:	4639      	mov	r1, r7
 8005e6a:	f7fa fe35 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e6e:	b108      	cbz	r0, 8005e74 <__cvt+0x7c>
 8005e70:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e74:	2230      	movs	r2, #48	@ 0x30
 8005e76:	9b03      	ldr	r3, [sp, #12]
 8005e78:	454b      	cmp	r3, r9
 8005e7a:	d31e      	bcc.n	8005eba <__cvt+0xc2>
 8005e7c:	9b03      	ldr	r3, [sp, #12]
 8005e7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005e80:	1b5b      	subs	r3, r3, r5
 8005e82:	4628      	mov	r0, r5
 8005e84:	6013      	str	r3, [r2, #0]
 8005e86:	b004      	add	sp, #16
 8005e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005e90:	eb00 0904 	add.w	r9, r0, r4
 8005e94:	d1e5      	bne.n	8005e62 <__cvt+0x6a>
 8005e96:	7803      	ldrb	r3, [r0, #0]
 8005e98:	2b30      	cmp	r3, #48	@ 0x30
 8005e9a:	d10a      	bne.n	8005eb2 <__cvt+0xba>
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	4630      	mov	r0, r6
 8005ea2:	4639      	mov	r1, r7
 8005ea4:	f7fa fe18 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ea8:	b918      	cbnz	r0, 8005eb2 <__cvt+0xba>
 8005eaa:	f1c4 0401 	rsb	r4, r4, #1
 8005eae:	f8ca 4000 	str.w	r4, [sl]
 8005eb2:	f8da 3000 	ldr.w	r3, [sl]
 8005eb6:	4499      	add	r9, r3
 8005eb8:	e7d3      	b.n	8005e62 <__cvt+0x6a>
 8005eba:	1c59      	adds	r1, r3, #1
 8005ebc:	9103      	str	r1, [sp, #12]
 8005ebe:	701a      	strb	r2, [r3, #0]
 8005ec0:	e7d9      	b.n	8005e76 <__cvt+0x7e>

08005ec2 <__exponent>:
 8005ec2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ec4:	2900      	cmp	r1, #0
 8005ec6:	bfba      	itte	lt
 8005ec8:	4249      	neglt	r1, r1
 8005eca:	232d      	movlt	r3, #45	@ 0x2d
 8005ecc:	232b      	movge	r3, #43	@ 0x2b
 8005ece:	2909      	cmp	r1, #9
 8005ed0:	7002      	strb	r2, [r0, #0]
 8005ed2:	7043      	strb	r3, [r0, #1]
 8005ed4:	dd29      	ble.n	8005f2a <__exponent+0x68>
 8005ed6:	f10d 0307 	add.w	r3, sp, #7
 8005eda:	461d      	mov	r5, r3
 8005edc:	270a      	movs	r7, #10
 8005ede:	461a      	mov	r2, r3
 8005ee0:	fbb1 f6f7 	udiv	r6, r1, r7
 8005ee4:	fb07 1416 	mls	r4, r7, r6, r1
 8005ee8:	3430      	adds	r4, #48	@ 0x30
 8005eea:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005eee:	460c      	mov	r4, r1
 8005ef0:	2c63      	cmp	r4, #99	@ 0x63
 8005ef2:	f103 33ff 	add.w	r3, r3, #4294967295
 8005ef6:	4631      	mov	r1, r6
 8005ef8:	dcf1      	bgt.n	8005ede <__exponent+0x1c>
 8005efa:	3130      	adds	r1, #48	@ 0x30
 8005efc:	1e94      	subs	r4, r2, #2
 8005efe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005f02:	1c41      	adds	r1, r0, #1
 8005f04:	4623      	mov	r3, r4
 8005f06:	42ab      	cmp	r3, r5
 8005f08:	d30a      	bcc.n	8005f20 <__exponent+0x5e>
 8005f0a:	f10d 0309 	add.w	r3, sp, #9
 8005f0e:	1a9b      	subs	r3, r3, r2
 8005f10:	42ac      	cmp	r4, r5
 8005f12:	bf88      	it	hi
 8005f14:	2300      	movhi	r3, #0
 8005f16:	3302      	adds	r3, #2
 8005f18:	4403      	add	r3, r0
 8005f1a:	1a18      	subs	r0, r3, r0
 8005f1c:	b003      	add	sp, #12
 8005f1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f20:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005f24:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005f28:	e7ed      	b.n	8005f06 <__exponent+0x44>
 8005f2a:	2330      	movs	r3, #48	@ 0x30
 8005f2c:	3130      	adds	r1, #48	@ 0x30
 8005f2e:	7083      	strb	r3, [r0, #2]
 8005f30:	70c1      	strb	r1, [r0, #3]
 8005f32:	1d03      	adds	r3, r0, #4
 8005f34:	e7f1      	b.n	8005f1a <__exponent+0x58>
	...

08005f38 <_printf_float>:
 8005f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f3c:	b08d      	sub	sp, #52	@ 0x34
 8005f3e:	460c      	mov	r4, r1
 8005f40:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005f44:	4616      	mov	r6, r2
 8005f46:	461f      	mov	r7, r3
 8005f48:	4605      	mov	r5, r0
 8005f4a:	f000 fd3f 	bl	80069cc <_localeconv_r>
 8005f4e:	6803      	ldr	r3, [r0, #0]
 8005f50:	9304      	str	r3, [sp, #16]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fa f994 	bl	8000280 <strlen>
 8005f58:	2300      	movs	r3, #0
 8005f5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f5c:	f8d8 3000 	ldr.w	r3, [r8]
 8005f60:	9005      	str	r0, [sp, #20]
 8005f62:	3307      	adds	r3, #7
 8005f64:	f023 0307 	bic.w	r3, r3, #7
 8005f68:	f103 0208 	add.w	r2, r3, #8
 8005f6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005f70:	f8d4 b000 	ldr.w	fp, [r4]
 8005f74:	f8c8 2000 	str.w	r2, [r8]
 8005f78:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f7c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005f80:	9307      	str	r3, [sp, #28]
 8005f82:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f86:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005f8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f8e:	4b9c      	ldr	r3, [pc, #624]	@ (8006200 <_printf_float+0x2c8>)
 8005f90:	f04f 32ff 	mov.w	r2, #4294967295
 8005f94:	f7fa fdd2 	bl	8000b3c <__aeabi_dcmpun>
 8005f98:	bb70      	cbnz	r0, 8005ff8 <_printf_float+0xc0>
 8005f9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f9e:	4b98      	ldr	r3, [pc, #608]	@ (8006200 <_printf_float+0x2c8>)
 8005fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fa4:	f7fa fdac 	bl	8000b00 <__aeabi_dcmple>
 8005fa8:	bb30      	cbnz	r0, 8005ff8 <_printf_float+0xc0>
 8005faa:	2200      	movs	r2, #0
 8005fac:	2300      	movs	r3, #0
 8005fae:	4640      	mov	r0, r8
 8005fb0:	4649      	mov	r1, r9
 8005fb2:	f7fa fd9b 	bl	8000aec <__aeabi_dcmplt>
 8005fb6:	b110      	cbz	r0, 8005fbe <_printf_float+0x86>
 8005fb8:	232d      	movs	r3, #45	@ 0x2d
 8005fba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fbe:	4a91      	ldr	r2, [pc, #580]	@ (8006204 <_printf_float+0x2cc>)
 8005fc0:	4b91      	ldr	r3, [pc, #580]	@ (8006208 <_printf_float+0x2d0>)
 8005fc2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005fc6:	bf94      	ite	ls
 8005fc8:	4690      	movls	r8, r2
 8005fca:	4698      	movhi	r8, r3
 8005fcc:	2303      	movs	r3, #3
 8005fce:	6123      	str	r3, [r4, #16]
 8005fd0:	f02b 0304 	bic.w	r3, fp, #4
 8005fd4:	6023      	str	r3, [r4, #0]
 8005fd6:	f04f 0900 	mov.w	r9, #0
 8005fda:	9700      	str	r7, [sp, #0]
 8005fdc:	4633      	mov	r3, r6
 8005fde:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005fe0:	4621      	mov	r1, r4
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	f000 f9d2 	bl	800638c <_printf_common>
 8005fe8:	3001      	adds	r0, #1
 8005fea:	f040 808d 	bne.w	8006108 <_printf_float+0x1d0>
 8005fee:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff2:	b00d      	add	sp, #52	@ 0x34
 8005ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ff8:	4642      	mov	r2, r8
 8005ffa:	464b      	mov	r3, r9
 8005ffc:	4640      	mov	r0, r8
 8005ffe:	4649      	mov	r1, r9
 8006000:	f7fa fd9c 	bl	8000b3c <__aeabi_dcmpun>
 8006004:	b140      	cbz	r0, 8006018 <_printf_float+0xe0>
 8006006:	464b      	mov	r3, r9
 8006008:	2b00      	cmp	r3, #0
 800600a:	bfbc      	itt	lt
 800600c:	232d      	movlt	r3, #45	@ 0x2d
 800600e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006012:	4a7e      	ldr	r2, [pc, #504]	@ (800620c <_printf_float+0x2d4>)
 8006014:	4b7e      	ldr	r3, [pc, #504]	@ (8006210 <_printf_float+0x2d8>)
 8006016:	e7d4      	b.n	8005fc2 <_printf_float+0x8a>
 8006018:	6863      	ldr	r3, [r4, #4]
 800601a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800601e:	9206      	str	r2, [sp, #24]
 8006020:	1c5a      	adds	r2, r3, #1
 8006022:	d13b      	bne.n	800609c <_printf_float+0x164>
 8006024:	2306      	movs	r3, #6
 8006026:	6063      	str	r3, [r4, #4]
 8006028:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800602c:	2300      	movs	r3, #0
 800602e:	6022      	str	r2, [r4, #0]
 8006030:	9303      	str	r3, [sp, #12]
 8006032:	ab0a      	add	r3, sp, #40	@ 0x28
 8006034:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006038:	ab09      	add	r3, sp, #36	@ 0x24
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	6861      	ldr	r1, [r4, #4]
 800603e:	ec49 8b10 	vmov	d0, r8, r9
 8006042:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006046:	4628      	mov	r0, r5
 8006048:	f7ff fed6 	bl	8005df8 <__cvt>
 800604c:	9b06      	ldr	r3, [sp, #24]
 800604e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006050:	2b47      	cmp	r3, #71	@ 0x47
 8006052:	4680      	mov	r8, r0
 8006054:	d129      	bne.n	80060aa <_printf_float+0x172>
 8006056:	1cc8      	adds	r0, r1, #3
 8006058:	db02      	blt.n	8006060 <_printf_float+0x128>
 800605a:	6863      	ldr	r3, [r4, #4]
 800605c:	4299      	cmp	r1, r3
 800605e:	dd41      	ble.n	80060e4 <_printf_float+0x1ac>
 8006060:	f1aa 0a02 	sub.w	sl, sl, #2
 8006064:	fa5f fa8a 	uxtb.w	sl, sl
 8006068:	3901      	subs	r1, #1
 800606a:	4652      	mov	r2, sl
 800606c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006070:	9109      	str	r1, [sp, #36]	@ 0x24
 8006072:	f7ff ff26 	bl	8005ec2 <__exponent>
 8006076:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006078:	1813      	adds	r3, r2, r0
 800607a:	2a01      	cmp	r2, #1
 800607c:	4681      	mov	r9, r0
 800607e:	6123      	str	r3, [r4, #16]
 8006080:	dc02      	bgt.n	8006088 <_printf_float+0x150>
 8006082:	6822      	ldr	r2, [r4, #0]
 8006084:	07d2      	lsls	r2, r2, #31
 8006086:	d501      	bpl.n	800608c <_printf_float+0x154>
 8006088:	3301      	adds	r3, #1
 800608a:	6123      	str	r3, [r4, #16]
 800608c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006090:	2b00      	cmp	r3, #0
 8006092:	d0a2      	beq.n	8005fda <_printf_float+0xa2>
 8006094:	232d      	movs	r3, #45	@ 0x2d
 8006096:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800609a:	e79e      	b.n	8005fda <_printf_float+0xa2>
 800609c:	9a06      	ldr	r2, [sp, #24]
 800609e:	2a47      	cmp	r2, #71	@ 0x47
 80060a0:	d1c2      	bne.n	8006028 <_printf_float+0xf0>
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1c0      	bne.n	8006028 <_printf_float+0xf0>
 80060a6:	2301      	movs	r3, #1
 80060a8:	e7bd      	b.n	8006026 <_printf_float+0xee>
 80060aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80060ae:	d9db      	bls.n	8006068 <_printf_float+0x130>
 80060b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80060b4:	d118      	bne.n	80060e8 <_printf_float+0x1b0>
 80060b6:	2900      	cmp	r1, #0
 80060b8:	6863      	ldr	r3, [r4, #4]
 80060ba:	dd0b      	ble.n	80060d4 <_printf_float+0x19c>
 80060bc:	6121      	str	r1, [r4, #16]
 80060be:	b913      	cbnz	r3, 80060c6 <_printf_float+0x18e>
 80060c0:	6822      	ldr	r2, [r4, #0]
 80060c2:	07d0      	lsls	r0, r2, #31
 80060c4:	d502      	bpl.n	80060cc <_printf_float+0x194>
 80060c6:	3301      	adds	r3, #1
 80060c8:	440b      	add	r3, r1
 80060ca:	6123      	str	r3, [r4, #16]
 80060cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80060ce:	f04f 0900 	mov.w	r9, #0
 80060d2:	e7db      	b.n	800608c <_printf_float+0x154>
 80060d4:	b913      	cbnz	r3, 80060dc <_printf_float+0x1a4>
 80060d6:	6822      	ldr	r2, [r4, #0]
 80060d8:	07d2      	lsls	r2, r2, #31
 80060da:	d501      	bpl.n	80060e0 <_printf_float+0x1a8>
 80060dc:	3302      	adds	r3, #2
 80060de:	e7f4      	b.n	80060ca <_printf_float+0x192>
 80060e0:	2301      	movs	r3, #1
 80060e2:	e7f2      	b.n	80060ca <_printf_float+0x192>
 80060e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80060e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060ea:	4299      	cmp	r1, r3
 80060ec:	db05      	blt.n	80060fa <_printf_float+0x1c2>
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	6121      	str	r1, [r4, #16]
 80060f2:	07d8      	lsls	r0, r3, #31
 80060f4:	d5ea      	bpl.n	80060cc <_printf_float+0x194>
 80060f6:	1c4b      	adds	r3, r1, #1
 80060f8:	e7e7      	b.n	80060ca <_printf_float+0x192>
 80060fa:	2900      	cmp	r1, #0
 80060fc:	bfd4      	ite	le
 80060fe:	f1c1 0202 	rsble	r2, r1, #2
 8006102:	2201      	movgt	r2, #1
 8006104:	4413      	add	r3, r2
 8006106:	e7e0      	b.n	80060ca <_printf_float+0x192>
 8006108:	6823      	ldr	r3, [r4, #0]
 800610a:	055a      	lsls	r2, r3, #21
 800610c:	d407      	bmi.n	800611e <_printf_float+0x1e6>
 800610e:	6923      	ldr	r3, [r4, #16]
 8006110:	4642      	mov	r2, r8
 8006112:	4631      	mov	r1, r6
 8006114:	4628      	mov	r0, r5
 8006116:	47b8      	blx	r7
 8006118:	3001      	adds	r0, #1
 800611a:	d12b      	bne.n	8006174 <_printf_float+0x23c>
 800611c:	e767      	b.n	8005fee <_printf_float+0xb6>
 800611e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006122:	f240 80dd 	bls.w	80062e0 <_printf_float+0x3a8>
 8006126:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800612a:	2200      	movs	r2, #0
 800612c:	2300      	movs	r3, #0
 800612e:	f7fa fcd3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006132:	2800      	cmp	r0, #0
 8006134:	d033      	beq.n	800619e <_printf_float+0x266>
 8006136:	4a37      	ldr	r2, [pc, #220]	@ (8006214 <_printf_float+0x2dc>)
 8006138:	2301      	movs	r3, #1
 800613a:	4631      	mov	r1, r6
 800613c:	4628      	mov	r0, r5
 800613e:	47b8      	blx	r7
 8006140:	3001      	adds	r0, #1
 8006142:	f43f af54 	beq.w	8005fee <_printf_float+0xb6>
 8006146:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800614a:	4543      	cmp	r3, r8
 800614c:	db02      	blt.n	8006154 <_printf_float+0x21c>
 800614e:	6823      	ldr	r3, [r4, #0]
 8006150:	07d8      	lsls	r0, r3, #31
 8006152:	d50f      	bpl.n	8006174 <_printf_float+0x23c>
 8006154:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006158:	4631      	mov	r1, r6
 800615a:	4628      	mov	r0, r5
 800615c:	47b8      	blx	r7
 800615e:	3001      	adds	r0, #1
 8006160:	f43f af45 	beq.w	8005fee <_printf_float+0xb6>
 8006164:	f04f 0900 	mov.w	r9, #0
 8006168:	f108 38ff 	add.w	r8, r8, #4294967295
 800616c:	f104 0a1a 	add.w	sl, r4, #26
 8006170:	45c8      	cmp	r8, r9
 8006172:	dc09      	bgt.n	8006188 <_printf_float+0x250>
 8006174:	6823      	ldr	r3, [r4, #0]
 8006176:	079b      	lsls	r3, r3, #30
 8006178:	f100 8103 	bmi.w	8006382 <_printf_float+0x44a>
 800617c:	68e0      	ldr	r0, [r4, #12]
 800617e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006180:	4298      	cmp	r0, r3
 8006182:	bfb8      	it	lt
 8006184:	4618      	movlt	r0, r3
 8006186:	e734      	b.n	8005ff2 <_printf_float+0xba>
 8006188:	2301      	movs	r3, #1
 800618a:	4652      	mov	r2, sl
 800618c:	4631      	mov	r1, r6
 800618e:	4628      	mov	r0, r5
 8006190:	47b8      	blx	r7
 8006192:	3001      	adds	r0, #1
 8006194:	f43f af2b 	beq.w	8005fee <_printf_float+0xb6>
 8006198:	f109 0901 	add.w	r9, r9, #1
 800619c:	e7e8      	b.n	8006170 <_printf_float+0x238>
 800619e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	dc39      	bgt.n	8006218 <_printf_float+0x2e0>
 80061a4:	4a1b      	ldr	r2, [pc, #108]	@ (8006214 <_printf_float+0x2dc>)
 80061a6:	2301      	movs	r3, #1
 80061a8:	4631      	mov	r1, r6
 80061aa:	4628      	mov	r0, r5
 80061ac:	47b8      	blx	r7
 80061ae:	3001      	adds	r0, #1
 80061b0:	f43f af1d 	beq.w	8005fee <_printf_float+0xb6>
 80061b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80061b8:	ea59 0303 	orrs.w	r3, r9, r3
 80061bc:	d102      	bne.n	80061c4 <_printf_float+0x28c>
 80061be:	6823      	ldr	r3, [r4, #0]
 80061c0:	07d9      	lsls	r1, r3, #31
 80061c2:	d5d7      	bpl.n	8006174 <_printf_float+0x23c>
 80061c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061c8:	4631      	mov	r1, r6
 80061ca:	4628      	mov	r0, r5
 80061cc:	47b8      	blx	r7
 80061ce:	3001      	adds	r0, #1
 80061d0:	f43f af0d 	beq.w	8005fee <_printf_float+0xb6>
 80061d4:	f04f 0a00 	mov.w	sl, #0
 80061d8:	f104 0b1a 	add.w	fp, r4, #26
 80061dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061de:	425b      	negs	r3, r3
 80061e0:	4553      	cmp	r3, sl
 80061e2:	dc01      	bgt.n	80061e8 <_printf_float+0x2b0>
 80061e4:	464b      	mov	r3, r9
 80061e6:	e793      	b.n	8006110 <_printf_float+0x1d8>
 80061e8:	2301      	movs	r3, #1
 80061ea:	465a      	mov	r2, fp
 80061ec:	4631      	mov	r1, r6
 80061ee:	4628      	mov	r0, r5
 80061f0:	47b8      	blx	r7
 80061f2:	3001      	adds	r0, #1
 80061f4:	f43f aefb 	beq.w	8005fee <_printf_float+0xb6>
 80061f8:	f10a 0a01 	add.w	sl, sl, #1
 80061fc:	e7ee      	b.n	80061dc <_printf_float+0x2a4>
 80061fe:	bf00      	nop
 8006200:	7fefffff 	.word	0x7fefffff
 8006204:	08008a70 	.word	0x08008a70
 8006208:	08008a74 	.word	0x08008a74
 800620c:	08008a78 	.word	0x08008a78
 8006210:	08008a7c 	.word	0x08008a7c
 8006214:	08008a80 	.word	0x08008a80
 8006218:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800621a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800621e:	4553      	cmp	r3, sl
 8006220:	bfa8      	it	ge
 8006222:	4653      	movge	r3, sl
 8006224:	2b00      	cmp	r3, #0
 8006226:	4699      	mov	r9, r3
 8006228:	dc36      	bgt.n	8006298 <_printf_float+0x360>
 800622a:	f04f 0b00 	mov.w	fp, #0
 800622e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006232:	f104 021a 	add.w	r2, r4, #26
 8006236:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006238:	9306      	str	r3, [sp, #24]
 800623a:	eba3 0309 	sub.w	r3, r3, r9
 800623e:	455b      	cmp	r3, fp
 8006240:	dc31      	bgt.n	80062a6 <_printf_float+0x36e>
 8006242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006244:	459a      	cmp	sl, r3
 8006246:	dc3a      	bgt.n	80062be <_printf_float+0x386>
 8006248:	6823      	ldr	r3, [r4, #0]
 800624a:	07da      	lsls	r2, r3, #31
 800624c:	d437      	bmi.n	80062be <_printf_float+0x386>
 800624e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006250:	ebaa 0903 	sub.w	r9, sl, r3
 8006254:	9b06      	ldr	r3, [sp, #24]
 8006256:	ebaa 0303 	sub.w	r3, sl, r3
 800625a:	4599      	cmp	r9, r3
 800625c:	bfa8      	it	ge
 800625e:	4699      	movge	r9, r3
 8006260:	f1b9 0f00 	cmp.w	r9, #0
 8006264:	dc33      	bgt.n	80062ce <_printf_float+0x396>
 8006266:	f04f 0800 	mov.w	r8, #0
 800626a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800626e:	f104 0b1a 	add.w	fp, r4, #26
 8006272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006274:	ebaa 0303 	sub.w	r3, sl, r3
 8006278:	eba3 0309 	sub.w	r3, r3, r9
 800627c:	4543      	cmp	r3, r8
 800627e:	f77f af79 	ble.w	8006174 <_printf_float+0x23c>
 8006282:	2301      	movs	r3, #1
 8006284:	465a      	mov	r2, fp
 8006286:	4631      	mov	r1, r6
 8006288:	4628      	mov	r0, r5
 800628a:	47b8      	blx	r7
 800628c:	3001      	adds	r0, #1
 800628e:	f43f aeae 	beq.w	8005fee <_printf_float+0xb6>
 8006292:	f108 0801 	add.w	r8, r8, #1
 8006296:	e7ec      	b.n	8006272 <_printf_float+0x33a>
 8006298:	4642      	mov	r2, r8
 800629a:	4631      	mov	r1, r6
 800629c:	4628      	mov	r0, r5
 800629e:	47b8      	blx	r7
 80062a0:	3001      	adds	r0, #1
 80062a2:	d1c2      	bne.n	800622a <_printf_float+0x2f2>
 80062a4:	e6a3      	b.n	8005fee <_printf_float+0xb6>
 80062a6:	2301      	movs	r3, #1
 80062a8:	4631      	mov	r1, r6
 80062aa:	4628      	mov	r0, r5
 80062ac:	9206      	str	r2, [sp, #24]
 80062ae:	47b8      	blx	r7
 80062b0:	3001      	adds	r0, #1
 80062b2:	f43f ae9c 	beq.w	8005fee <_printf_float+0xb6>
 80062b6:	9a06      	ldr	r2, [sp, #24]
 80062b8:	f10b 0b01 	add.w	fp, fp, #1
 80062bc:	e7bb      	b.n	8006236 <_printf_float+0x2fe>
 80062be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062c2:	4631      	mov	r1, r6
 80062c4:	4628      	mov	r0, r5
 80062c6:	47b8      	blx	r7
 80062c8:	3001      	adds	r0, #1
 80062ca:	d1c0      	bne.n	800624e <_printf_float+0x316>
 80062cc:	e68f      	b.n	8005fee <_printf_float+0xb6>
 80062ce:	9a06      	ldr	r2, [sp, #24]
 80062d0:	464b      	mov	r3, r9
 80062d2:	4442      	add	r2, r8
 80062d4:	4631      	mov	r1, r6
 80062d6:	4628      	mov	r0, r5
 80062d8:	47b8      	blx	r7
 80062da:	3001      	adds	r0, #1
 80062dc:	d1c3      	bne.n	8006266 <_printf_float+0x32e>
 80062de:	e686      	b.n	8005fee <_printf_float+0xb6>
 80062e0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80062e4:	f1ba 0f01 	cmp.w	sl, #1
 80062e8:	dc01      	bgt.n	80062ee <_printf_float+0x3b6>
 80062ea:	07db      	lsls	r3, r3, #31
 80062ec:	d536      	bpl.n	800635c <_printf_float+0x424>
 80062ee:	2301      	movs	r3, #1
 80062f0:	4642      	mov	r2, r8
 80062f2:	4631      	mov	r1, r6
 80062f4:	4628      	mov	r0, r5
 80062f6:	47b8      	blx	r7
 80062f8:	3001      	adds	r0, #1
 80062fa:	f43f ae78 	beq.w	8005fee <_printf_float+0xb6>
 80062fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006302:	4631      	mov	r1, r6
 8006304:	4628      	mov	r0, r5
 8006306:	47b8      	blx	r7
 8006308:	3001      	adds	r0, #1
 800630a:	f43f ae70 	beq.w	8005fee <_printf_float+0xb6>
 800630e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006312:	2200      	movs	r2, #0
 8006314:	2300      	movs	r3, #0
 8006316:	f10a 3aff 	add.w	sl, sl, #4294967295
 800631a:	f7fa fbdd 	bl	8000ad8 <__aeabi_dcmpeq>
 800631e:	b9c0      	cbnz	r0, 8006352 <_printf_float+0x41a>
 8006320:	4653      	mov	r3, sl
 8006322:	f108 0201 	add.w	r2, r8, #1
 8006326:	4631      	mov	r1, r6
 8006328:	4628      	mov	r0, r5
 800632a:	47b8      	blx	r7
 800632c:	3001      	adds	r0, #1
 800632e:	d10c      	bne.n	800634a <_printf_float+0x412>
 8006330:	e65d      	b.n	8005fee <_printf_float+0xb6>
 8006332:	2301      	movs	r3, #1
 8006334:	465a      	mov	r2, fp
 8006336:	4631      	mov	r1, r6
 8006338:	4628      	mov	r0, r5
 800633a:	47b8      	blx	r7
 800633c:	3001      	adds	r0, #1
 800633e:	f43f ae56 	beq.w	8005fee <_printf_float+0xb6>
 8006342:	f108 0801 	add.w	r8, r8, #1
 8006346:	45d0      	cmp	r8, sl
 8006348:	dbf3      	blt.n	8006332 <_printf_float+0x3fa>
 800634a:	464b      	mov	r3, r9
 800634c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006350:	e6df      	b.n	8006112 <_printf_float+0x1da>
 8006352:	f04f 0800 	mov.w	r8, #0
 8006356:	f104 0b1a 	add.w	fp, r4, #26
 800635a:	e7f4      	b.n	8006346 <_printf_float+0x40e>
 800635c:	2301      	movs	r3, #1
 800635e:	4642      	mov	r2, r8
 8006360:	e7e1      	b.n	8006326 <_printf_float+0x3ee>
 8006362:	2301      	movs	r3, #1
 8006364:	464a      	mov	r2, r9
 8006366:	4631      	mov	r1, r6
 8006368:	4628      	mov	r0, r5
 800636a:	47b8      	blx	r7
 800636c:	3001      	adds	r0, #1
 800636e:	f43f ae3e 	beq.w	8005fee <_printf_float+0xb6>
 8006372:	f108 0801 	add.w	r8, r8, #1
 8006376:	68e3      	ldr	r3, [r4, #12]
 8006378:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800637a:	1a5b      	subs	r3, r3, r1
 800637c:	4543      	cmp	r3, r8
 800637e:	dcf0      	bgt.n	8006362 <_printf_float+0x42a>
 8006380:	e6fc      	b.n	800617c <_printf_float+0x244>
 8006382:	f04f 0800 	mov.w	r8, #0
 8006386:	f104 0919 	add.w	r9, r4, #25
 800638a:	e7f4      	b.n	8006376 <_printf_float+0x43e>

0800638c <_printf_common>:
 800638c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006390:	4616      	mov	r6, r2
 8006392:	4698      	mov	r8, r3
 8006394:	688a      	ldr	r2, [r1, #8]
 8006396:	690b      	ldr	r3, [r1, #16]
 8006398:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800639c:	4293      	cmp	r3, r2
 800639e:	bfb8      	it	lt
 80063a0:	4613      	movlt	r3, r2
 80063a2:	6033      	str	r3, [r6, #0]
 80063a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80063a8:	4607      	mov	r7, r0
 80063aa:	460c      	mov	r4, r1
 80063ac:	b10a      	cbz	r2, 80063b2 <_printf_common+0x26>
 80063ae:	3301      	adds	r3, #1
 80063b0:	6033      	str	r3, [r6, #0]
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	0699      	lsls	r1, r3, #26
 80063b6:	bf42      	ittt	mi
 80063b8:	6833      	ldrmi	r3, [r6, #0]
 80063ba:	3302      	addmi	r3, #2
 80063bc:	6033      	strmi	r3, [r6, #0]
 80063be:	6825      	ldr	r5, [r4, #0]
 80063c0:	f015 0506 	ands.w	r5, r5, #6
 80063c4:	d106      	bne.n	80063d4 <_printf_common+0x48>
 80063c6:	f104 0a19 	add.w	sl, r4, #25
 80063ca:	68e3      	ldr	r3, [r4, #12]
 80063cc:	6832      	ldr	r2, [r6, #0]
 80063ce:	1a9b      	subs	r3, r3, r2
 80063d0:	42ab      	cmp	r3, r5
 80063d2:	dc26      	bgt.n	8006422 <_printf_common+0x96>
 80063d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80063d8:	6822      	ldr	r2, [r4, #0]
 80063da:	3b00      	subs	r3, #0
 80063dc:	bf18      	it	ne
 80063de:	2301      	movne	r3, #1
 80063e0:	0692      	lsls	r2, r2, #26
 80063e2:	d42b      	bmi.n	800643c <_printf_common+0xb0>
 80063e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80063e8:	4641      	mov	r1, r8
 80063ea:	4638      	mov	r0, r7
 80063ec:	47c8      	blx	r9
 80063ee:	3001      	adds	r0, #1
 80063f0:	d01e      	beq.n	8006430 <_printf_common+0xa4>
 80063f2:	6823      	ldr	r3, [r4, #0]
 80063f4:	6922      	ldr	r2, [r4, #16]
 80063f6:	f003 0306 	and.w	r3, r3, #6
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	bf02      	ittt	eq
 80063fe:	68e5      	ldreq	r5, [r4, #12]
 8006400:	6833      	ldreq	r3, [r6, #0]
 8006402:	1aed      	subeq	r5, r5, r3
 8006404:	68a3      	ldr	r3, [r4, #8]
 8006406:	bf0c      	ite	eq
 8006408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800640c:	2500      	movne	r5, #0
 800640e:	4293      	cmp	r3, r2
 8006410:	bfc4      	itt	gt
 8006412:	1a9b      	subgt	r3, r3, r2
 8006414:	18ed      	addgt	r5, r5, r3
 8006416:	2600      	movs	r6, #0
 8006418:	341a      	adds	r4, #26
 800641a:	42b5      	cmp	r5, r6
 800641c:	d11a      	bne.n	8006454 <_printf_common+0xc8>
 800641e:	2000      	movs	r0, #0
 8006420:	e008      	b.n	8006434 <_printf_common+0xa8>
 8006422:	2301      	movs	r3, #1
 8006424:	4652      	mov	r2, sl
 8006426:	4641      	mov	r1, r8
 8006428:	4638      	mov	r0, r7
 800642a:	47c8      	blx	r9
 800642c:	3001      	adds	r0, #1
 800642e:	d103      	bne.n	8006438 <_printf_common+0xac>
 8006430:	f04f 30ff 	mov.w	r0, #4294967295
 8006434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006438:	3501      	adds	r5, #1
 800643a:	e7c6      	b.n	80063ca <_printf_common+0x3e>
 800643c:	18e1      	adds	r1, r4, r3
 800643e:	1c5a      	adds	r2, r3, #1
 8006440:	2030      	movs	r0, #48	@ 0x30
 8006442:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006446:	4422      	add	r2, r4
 8006448:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800644c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006450:	3302      	adds	r3, #2
 8006452:	e7c7      	b.n	80063e4 <_printf_common+0x58>
 8006454:	2301      	movs	r3, #1
 8006456:	4622      	mov	r2, r4
 8006458:	4641      	mov	r1, r8
 800645a:	4638      	mov	r0, r7
 800645c:	47c8      	blx	r9
 800645e:	3001      	adds	r0, #1
 8006460:	d0e6      	beq.n	8006430 <_printf_common+0xa4>
 8006462:	3601      	adds	r6, #1
 8006464:	e7d9      	b.n	800641a <_printf_common+0x8e>
	...

08006468 <_printf_i>:
 8006468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800646c:	7e0f      	ldrb	r7, [r1, #24]
 800646e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006470:	2f78      	cmp	r7, #120	@ 0x78
 8006472:	4691      	mov	r9, r2
 8006474:	4680      	mov	r8, r0
 8006476:	460c      	mov	r4, r1
 8006478:	469a      	mov	sl, r3
 800647a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800647e:	d807      	bhi.n	8006490 <_printf_i+0x28>
 8006480:	2f62      	cmp	r7, #98	@ 0x62
 8006482:	d80a      	bhi.n	800649a <_printf_i+0x32>
 8006484:	2f00      	cmp	r7, #0
 8006486:	f000 80d2 	beq.w	800662e <_printf_i+0x1c6>
 800648a:	2f58      	cmp	r7, #88	@ 0x58
 800648c:	f000 80b9 	beq.w	8006602 <_printf_i+0x19a>
 8006490:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006494:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006498:	e03a      	b.n	8006510 <_printf_i+0xa8>
 800649a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800649e:	2b15      	cmp	r3, #21
 80064a0:	d8f6      	bhi.n	8006490 <_printf_i+0x28>
 80064a2:	a101      	add	r1, pc, #4	@ (adr r1, 80064a8 <_printf_i+0x40>)
 80064a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064a8:	08006501 	.word	0x08006501
 80064ac:	08006515 	.word	0x08006515
 80064b0:	08006491 	.word	0x08006491
 80064b4:	08006491 	.word	0x08006491
 80064b8:	08006491 	.word	0x08006491
 80064bc:	08006491 	.word	0x08006491
 80064c0:	08006515 	.word	0x08006515
 80064c4:	08006491 	.word	0x08006491
 80064c8:	08006491 	.word	0x08006491
 80064cc:	08006491 	.word	0x08006491
 80064d0:	08006491 	.word	0x08006491
 80064d4:	08006615 	.word	0x08006615
 80064d8:	0800653f 	.word	0x0800653f
 80064dc:	080065cf 	.word	0x080065cf
 80064e0:	08006491 	.word	0x08006491
 80064e4:	08006491 	.word	0x08006491
 80064e8:	08006637 	.word	0x08006637
 80064ec:	08006491 	.word	0x08006491
 80064f0:	0800653f 	.word	0x0800653f
 80064f4:	08006491 	.word	0x08006491
 80064f8:	08006491 	.word	0x08006491
 80064fc:	080065d7 	.word	0x080065d7
 8006500:	6833      	ldr	r3, [r6, #0]
 8006502:	1d1a      	adds	r2, r3, #4
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6032      	str	r2, [r6, #0]
 8006508:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800650c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006510:	2301      	movs	r3, #1
 8006512:	e09d      	b.n	8006650 <_printf_i+0x1e8>
 8006514:	6833      	ldr	r3, [r6, #0]
 8006516:	6820      	ldr	r0, [r4, #0]
 8006518:	1d19      	adds	r1, r3, #4
 800651a:	6031      	str	r1, [r6, #0]
 800651c:	0606      	lsls	r6, r0, #24
 800651e:	d501      	bpl.n	8006524 <_printf_i+0xbc>
 8006520:	681d      	ldr	r5, [r3, #0]
 8006522:	e003      	b.n	800652c <_printf_i+0xc4>
 8006524:	0645      	lsls	r5, r0, #25
 8006526:	d5fb      	bpl.n	8006520 <_printf_i+0xb8>
 8006528:	f9b3 5000 	ldrsh.w	r5, [r3]
 800652c:	2d00      	cmp	r5, #0
 800652e:	da03      	bge.n	8006538 <_printf_i+0xd0>
 8006530:	232d      	movs	r3, #45	@ 0x2d
 8006532:	426d      	negs	r5, r5
 8006534:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006538:	4859      	ldr	r0, [pc, #356]	@ (80066a0 <_printf_i+0x238>)
 800653a:	230a      	movs	r3, #10
 800653c:	e011      	b.n	8006562 <_printf_i+0xfa>
 800653e:	6821      	ldr	r1, [r4, #0]
 8006540:	6833      	ldr	r3, [r6, #0]
 8006542:	0608      	lsls	r0, r1, #24
 8006544:	f853 5b04 	ldr.w	r5, [r3], #4
 8006548:	d402      	bmi.n	8006550 <_printf_i+0xe8>
 800654a:	0649      	lsls	r1, r1, #25
 800654c:	bf48      	it	mi
 800654e:	b2ad      	uxthmi	r5, r5
 8006550:	2f6f      	cmp	r7, #111	@ 0x6f
 8006552:	4853      	ldr	r0, [pc, #332]	@ (80066a0 <_printf_i+0x238>)
 8006554:	6033      	str	r3, [r6, #0]
 8006556:	bf14      	ite	ne
 8006558:	230a      	movne	r3, #10
 800655a:	2308      	moveq	r3, #8
 800655c:	2100      	movs	r1, #0
 800655e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006562:	6866      	ldr	r6, [r4, #4]
 8006564:	60a6      	str	r6, [r4, #8]
 8006566:	2e00      	cmp	r6, #0
 8006568:	bfa2      	ittt	ge
 800656a:	6821      	ldrge	r1, [r4, #0]
 800656c:	f021 0104 	bicge.w	r1, r1, #4
 8006570:	6021      	strge	r1, [r4, #0]
 8006572:	b90d      	cbnz	r5, 8006578 <_printf_i+0x110>
 8006574:	2e00      	cmp	r6, #0
 8006576:	d04b      	beq.n	8006610 <_printf_i+0x1a8>
 8006578:	4616      	mov	r6, r2
 800657a:	fbb5 f1f3 	udiv	r1, r5, r3
 800657e:	fb03 5711 	mls	r7, r3, r1, r5
 8006582:	5dc7      	ldrb	r7, [r0, r7]
 8006584:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006588:	462f      	mov	r7, r5
 800658a:	42bb      	cmp	r3, r7
 800658c:	460d      	mov	r5, r1
 800658e:	d9f4      	bls.n	800657a <_printf_i+0x112>
 8006590:	2b08      	cmp	r3, #8
 8006592:	d10b      	bne.n	80065ac <_printf_i+0x144>
 8006594:	6823      	ldr	r3, [r4, #0]
 8006596:	07df      	lsls	r7, r3, #31
 8006598:	d508      	bpl.n	80065ac <_printf_i+0x144>
 800659a:	6923      	ldr	r3, [r4, #16]
 800659c:	6861      	ldr	r1, [r4, #4]
 800659e:	4299      	cmp	r1, r3
 80065a0:	bfde      	ittt	le
 80065a2:	2330      	movle	r3, #48	@ 0x30
 80065a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80065ac:	1b92      	subs	r2, r2, r6
 80065ae:	6122      	str	r2, [r4, #16]
 80065b0:	f8cd a000 	str.w	sl, [sp]
 80065b4:	464b      	mov	r3, r9
 80065b6:	aa03      	add	r2, sp, #12
 80065b8:	4621      	mov	r1, r4
 80065ba:	4640      	mov	r0, r8
 80065bc:	f7ff fee6 	bl	800638c <_printf_common>
 80065c0:	3001      	adds	r0, #1
 80065c2:	d14a      	bne.n	800665a <_printf_i+0x1f2>
 80065c4:	f04f 30ff 	mov.w	r0, #4294967295
 80065c8:	b004      	add	sp, #16
 80065ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ce:	6823      	ldr	r3, [r4, #0]
 80065d0:	f043 0320 	orr.w	r3, r3, #32
 80065d4:	6023      	str	r3, [r4, #0]
 80065d6:	4833      	ldr	r0, [pc, #204]	@ (80066a4 <_printf_i+0x23c>)
 80065d8:	2778      	movs	r7, #120	@ 0x78
 80065da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	6831      	ldr	r1, [r6, #0]
 80065e2:	061f      	lsls	r7, r3, #24
 80065e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80065e8:	d402      	bmi.n	80065f0 <_printf_i+0x188>
 80065ea:	065f      	lsls	r7, r3, #25
 80065ec:	bf48      	it	mi
 80065ee:	b2ad      	uxthmi	r5, r5
 80065f0:	6031      	str	r1, [r6, #0]
 80065f2:	07d9      	lsls	r1, r3, #31
 80065f4:	bf44      	itt	mi
 80065f6:	f043 0320 	orrmi.w	r3, r3, #32
 80065fa:	6023      	strmi	r3, [r4, #0]
 80065fc:	b11d      	cbz	r5, 8006606 <_printf_i+0x19e>
 80065fe:	2310      	movs	r3, #16
 8006600:	e7ac      	b.n	800655c <_printf_i+0xf4>
 8006602:	4827      	ldr	r0, [pc, #156]	@ (80066a0 <_printf_i+0x238>)
 8006604:	e7e9      	b.n	80065da <_printf_i+0x172>
 8006606:	6823      	ldr	r3, [r4, #0]
 8006608:	f023 0320 	bic.w	r3, r3, #32
 800660c:	6023      	str	r3, [r4, #0]
 800660e:	e7f6      	b.n	80065fe <_printf_i+0x196>
 8006610:	4616      	mov	r6, r2
 8006612:	e7bd      	b.n	8006590 <_printf_i+0x128>
 8006614:	6833      	ldr	r3, [r6, #0]
 8006616:	6825      	ldr	r5, [r4, #0]
 8006618:	6961      	ldr	r1, [r4, #20]
 800661a:	1d18      	adds	r0, r3, #4
 800661c:	6030      	str	r0, [r6, #0]
 800661e:	062e      	lsls	r6, r5, #24
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	d501      	bpl.n	8006628 <_printf_i+0x1c0>
 8006624:	6019      	str	r1, [r3, #0]
 8006626:	e002      	b.n	800662e <_printf_i+0x1c6>
 8006628:	0668      	lsls	r0, r5, #25
 800662a:	d5fb      	bpl.n	8006624 <_printf_i+0x1bc>
 800662c:	8019      	strh	r1, [r3, #0]
 800662e:	2300      	movs	r3, #0
 8006630:	6123      	str	r3, [r4, #16]
 8006632:	4616      	mov	r6, r2
 8006634:	e7bc      	b.n	80065b0 <_printf_i+0x148>
 8006636:	6833      	ldr	r3, [r6, #0]
 8006638:	1d1a      	adds	r2, r3, #4
 800663a:	6032      	str	r2, [r6, #0]
 800663c:	681e      	ldr	r6, [r3, #0]
 800663e:	6862      	ldr	r2, [r4, #4]
 8006640:	2100      	movs	r1, #0
 8006642:	4630      	mov	r0, r6
 8006644:	f7f9 fdcc 	bl	80001e0 <memchr>
 8006648:	b108      	cbz	r0, 800664e <_printf_i+0x1e6>
 800664a:	1b80      	subs	r0, r0, r6
 800664c:	6060      	str	r0, [r4, #4]
 800664e:	6863      	ldr	r3, [r4, #4]
 8006650:	6123      	str	r3, [r4, #16]
 8006652:	2300      	movs	r3, #0
 8006654:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006658:	e7aa      	b.n	80065b0 <_printf_i+0x148>
 800665a:	6923      	ldr	r3, [r4, #16]
 800665c:	4632      	mov	r2, r6
 800665e:	4649      	mov	r1, r9
 8006660:	4640      	mov	r0, r8
 8006662:	47d0      	blx	sl
 8006664:	3001      	adds	r0, #1
 8006666:	d0ad      	beq.n	80065c4 <_printf_i+0x15c>
 8006668:	6823      	ldr	r3, [r4, #0]
 800666a:	079b      	lsls	r3, r3, #30
 800666c:	d413      	bmi.n	8006696 <_printf_i+0x22e>
 800666e:	68e0      	ldr	r0, [r4, #12]
 8006670:	9b03      	ldr	r3, [sp, #12]
 8006672:	4298      	cmp	r0, r3
 8006674:	bfb8      	it	lt
 8006676:	4618      	movlt	r0, r3
 8006678:	e7a6      	b.n	80065c8 <_printf_i+0x160>
 800667a:	2301      	movs	r3, #1
 800667c:	4632      	mov	r2, r6
 800667e:	4649      	mov	r1, r9
 8006680:	4640      	mov	r0, r8
 8006682:	47d0      	blx	sl
 8006684:	3001      	adds	r0, #1
 8006686:	d09d      	beq.n	80065c4 <_printf_i+0x15c>
 8006688:	3501      	adds	r5, #1
 800668a:	68e3      	ldr	r3, [r4, #12]
 800668c:	9903      	ldr	r1, [sp, #12]
 800668e:	1a5b      	subs	r3, r3, r1
 8006690:	42ab      	cmp	r3, r5
 8006692:	dcf2      	bgt.n	800667a <_printf_i+0x212>
 8006694:	e7eb      	b.n	800666e <_printf_i+0x206>
 8006696:	2500      	movs	r5, #0
 8006698:	f104 0619 	add.w	r6, r4, #25
 800669c:	e7f5      	b.n	800668a <_printf_i+0x222>
 800669e:	bf00      	nop
 80066a0:	08008a82 	.word	0x08008a82
 80066a4:	08008a93 	.word	0x08008a93

080066a8 <std>:
 80066a8:	2300      	movs	r3, #0
 80066aa:	b510      	push	{r4, lr}
 80066ac:	4604      	mov	r4, r0
 80066ae:	e9c0 3300 	strd	r3, r3, [r0]
 80066b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066b6:	6083      	str	r3, [r0, #8]
 80066b8:	8181      	strh	r1, [r0, #12]
 80066ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80066bc:	81c2      	strh	r2, [r0, #14]
 80066be:	6183      	str	r3, [r0, #24]
 80066c0:	4619      	mov	r1, r3
 80066c2:	2208      	movs	r2, #8
 80066c4:	305c      	adds	r0, #92	@ 0x5c
 80066c6:	f000 f948 	bl	800695a <memset>
 80066ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006700 <std+0x58>)
 80066cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80066ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006704 <std+0x5c>)
 80066d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80066d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006708 <std+0x60>)
 80066d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80066d6:	4b0d      	ldr	r3, [pc, #52]	@ (800670c <std+0x64>)
 80066d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80066da:	4b0d      	ldr	r3, [pc, #52]	@ (8006710 <std+0x68>)
 80066dc:	6224      	str	r4, [r4, #32]
 80066de:	429c      	cmp	r4, r3
 80066e0:	d006      	beq.n	80066f0 <std+0x48>
 80066e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80066e6:	4294      	cmp	r4, r2
 80066e8:	d002      	beq.n	80066f0 <std+0x48>
 80066ea:	33d0      	adds	r3, #208	@ 0xd0
 80066ec:	429c      	cmp	r4, r3
 80066ee:	d105      	bne.n	80066fc <std+0x54>
 80066f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80066f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066f8:	f000 ba00 	b.w	8006afc <__retarget_lock_init_recursive>
 80066fc:	bd10      	pop	{r4, pc}
 80066fe:	bf00      	nop
 8006700:	080068d5 	.word	0x080068d5
 8006704:	080068f7 	.word	0x080068f7
 8006708:	0800692f 	.word	0x0800692f
 800670c:	08006953 	.word	0x08006953
 8006710:	200003a4 	.word	0x200003a4

08006714 <stdio_exit_handler>:
 8006714:	4a02      	ldr	r2, [pc, #8]	@ (8006720 <stdio_exit_handler+0xc>)
 8006716:	4903      	ldr	r1, [pc, #12]	@ (8006724 <stdio_exit_handler+0x10>)
 8006718:	4803      	ldr	r0, [pc, #12]	@ (8006728 <stdio_exit_handler+0x14>)
 800671a:	f000 b869 	b.w	80067f0 <_fwalk_sglue>
 800671e:	bf00      	nop
 8006720:	2000000c 	.word	0x2000000c
 8006724:	080082f1 	.word	0x080082f1
 8006728:	2000001c 	.word	0x2000001c

0800672c <cleanup_stdio>:
 800672c:	6841      	ldr	r1, [r0, #4]
 800672e:	4b0c      	ldr	r3, [pc, #48]	@ (8006760 <cleanup_stdio+0x34>)
 8006730:	4299      	cmp	r1, r3
 8006732:	b510      	push	{r4, lr}
 8006734:	4604      	mov	r4, r0
 8006736:	d001      	beq.n	800673c <cleanup_stdio+0x10>
 8006738:	f001 fdda 	bl	80082f0 <_fflush_r>
 800673c:	68a1      	ldr	r1, [r4, #8]
 800673e:	4b09      	ldr	r3, [pc, #36]	@ (8006764 <cleanup_stdio+0x38>)
 8006740:	4299      	cmp	r1, r3
 8006742:	d002      	beq.n	800674a <cleanup_stdio+0x1e>
 8006744:	4620      	mov	r0, r4
 8006746:	f001 fdd3 	bl	80082f0 <_fflush_r>
 800674a:	68e1      	ldr	r1, [r4, #12]
 800674c:	4b06      	ldr	r3, [pc, #24]	@ (8006768 <cleanup_stdio+0x3c>)
 800674e:	4299      	cmp	r1, r3
 8006750:	d004      	beq.n	800675c <cleanup_stdio+0x30>
 8006752:	4620      	mov	r0, r4
 8006754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006758:	f001 bdca 	b.w	80082f0 <_fflush_r>
 800675c:	bd10      	pop	{r4, pc}
 800675e:	bf00      	nop
 8006760:	200003a4 	.word	0x200003a4
 8006764:	2000040c 	.word	0x2000040c
 8006768:	20000474 	.word	0x20000474

0800676c <global_stdio_init.part.0>:
 800676c:	b510      	push	{r4, lr}
 800676e:	4b0b      	ldr	r3, [pc, #44]	@ (800679c <global_stdio_init.part.0+0x30>)
 8006770:	4c0b      	ldr	r4, [pc, #44]	@ (80067a0 <global_stdio_init.part.0+0x34>)
 8006772:	4a0c      	ldr	r2, [pc, #48]	@ (80067a4 <global_stdio_init.part.0+0x38>)
 8006774:	601a      	str	r2, [r3, #0]
 8006776:	4620      	mov	r0, r4
 8006778:	2200      	movs	r2, #0
 800677a:	2104      	movs	r1, #4
 800677c:	f7ff ff94 	bl	80066a8 <std>
 8006780:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006784:	2201      	movs	r2, #1
 8006786:	2109      	movs	r1, #9
 8006788:	f7ff ff8e 	bl	80066a8 <std>
 800678c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006790:	2202      	movs	r2, #2
 8006792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006796:	2112      	movs	r1, #18
 8006798:	f7ff bf86 	b.w	80066a8 <std>
 800679c:	200004dc 	.word	0x200004dc
 80067a0:	200003a4 	.word	0x200003a4
 80067a4:	08006715 	.word	0x08006715

080067a8 <__sfp_lock_acquire>:
 80067a8:	4801      	ldr	r0, [pc, #4]	@ (80067b0 <__sfp_lock_acquire+0x8>)
 80067aa:	f000 b9a8 	b.w	8006afe <__retarget_lock_acquire_recursive>
 80067ae:	bf00      	nop
 80067b0:	200004e5 	.word	0x200004e5

080067b4 <__sfp_lock_release>:
 80067b4:	4801      	ldr	r0, [pc, #4]	@ (80067bc <__sfp_lock_release+0x8>)
 80067b6:	f000 b9a3 	b.w	8006b00 <__retarget_lock_release_recursive>
 80067ba:	bf00      	nop
 80067bc:	200004e5 	.word	0x200004e5

080067c0 <__sinit>:
 80067c0:	b510      	push	{r4, lr}
 80067c2:	4604      	mov	r4, r0
 80067c4:	f7ff fff0 	bl	80067a8 <__sfp_lock_acquire>
 80067c8:	6a23      	ldr	r3, [r4, #32]
 80067ca:	b11b      	cbz	r3, 80067d4 <__sinit+0x14>
 80067cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067d0:	f7ff bff0 	b.w	80067b4 <__sfp_lock_release>
 80067d4:	4b04      	ldr	r3, [pc, #16]	@ (80067e8 <__sinit+0x28>)
 80067d6:	6223      	str	r3, [r4, #32]
 80067d8:	4b04      	ldr	r3, [pc, #16]	@ (80067ec <__sinit+0x2c>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1f5      	bne.n	80067cc <__sinit+0xc>
 80067e0:	f7ff ffc4 	bl	800676c <global_stdio_init.part.0>
 80067e4:	e7f2      	b.n	80067cc <__sinit+0xc>
 80067e6:	bf00      	nop
 80067e8:	0800672d 	.word	0x0800672d
 80067ec:	200004dc 	.word	0x200004dc

080067f0 <_fwalk_sglue>:
 80067f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067f4:	4607      	mov	r7, r0
 80067f6:	4688      	mov	r8, r1
 80067f8:	4614      	mov	r4, r2
 80067fa:	2600      	movs	r6, #0
 80067fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006800:	f1b9 0901 	subs.w	r9, r9, #1
 8006804:	d505      	bpl.n	8006812 <_fwalk_sglue+0x22>
 8006806:	6824      	ldr	r4, [r4, #0]
 8006808:	2c00      	cmp	r4, #0
 800680a:	d1f7      	bne.n	80067fc <_fwalk_sglue+0xc>
 800680c:	4630      	mov	r0, r6
 800680e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006812:	89ab      	ldrh	r3, [r5, #12]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d907      	bls.n	8006828 <_fwalk_sglue+0x38>
 8006818:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800681c:	3301      	adds	r3, #1
 800681e:	d003      	beq.n	8006828 <_fwalk_sglue+0x38>
 8006820:	4629      	mov	r1, r5
 8006822:	4638      	mov	r0, r7
 8006824:	47c0      	blx	r8
 8006826:	4306      	orrs	r6, r0
 8006828:	3568      	adds	r5, #104	@ 0x68
 800682a:	e7e9      	b.n	8006800 <_fwalk_sglue+0x10>

0800682c <sniprintf>:
 800682c:	b40c      	push	{r2, r3}
 800682e:	b530      	push	{r4, r5, lr}
 8006830:	4b17      	ldr	r3, [pc, #92]	@ (8006890 <sniprintf+0x64>)
 8006832:	1e0c      	subs	r4, r1, #0
 8006834:	681d      	ldr	r5, [r3, #0]
 8006836:	b09d      	sub	sp, #116	@ 0x74
 8006838:	da08      	bge.n	800684c <sniprintf+0x20>
 800683a:	238b      	movs	r3, #139	@ 0x8b
 800683c:	602b      	str	r3, [r5, #0]
 800683e:	f04f 30ff 	mov.w	r0, #4294967295
 8006842:	b01d      	add	sp, #116	@ 0x74
 8006844:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006848:	b002      	add	sp, #8
 800684a:	4770      	bx	lr
 800684c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006850:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006854:	bf14      	ite	ne
 8006856:	f104 33ff 	addne.w	r3, r4, #4294967295
 800685a:	4623      	moveq	r3, r4
 800685c:	9304      	str	r3, [sp, #16]
 800685e:	9307      	str	r3, [sp, #28]
 8006860:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006864:	9002      	str	r0, [sp, #8]
 8006866:	9006      	str	r0, [sp, #24]
 8006868:	f8ad 3016 	strh.w	r3, [sp, #22]
 800686c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800686e:	ab21      	add	r3, sp, #132	@ 0x84
 8006870:	a902      	add	r1, sp, #8
 8006872:	4628      	mov	r0, r5
 8006874:	9301      	str	r3, [sp, #4]
 8006876:	f001 fbbb 	bl	8007ff0 <_svfiprintf_r>
 800687a:	1c43      	adds	r3, r0, #1
 800687c:	bfbc      	itt	lt
 800687e:	238b      	movlt	r3, #139	@ 0x8b
 8006880:	602b      	strlt	r3, [r5, #0]
 8006882:	2c00      	cmp	r4, #0
 8006884:	d0dd      	beq.n	8006842 <sniprintf+0x16>
 8006886:	9b02      	ldr	r3, [sp, #8]
 8006888:	2200      	movs	r2, #0
 800688a:	701a      	strb	r2, [r3, #0]
 800688c:	e7d9      	b.n	8006842 <sniprintf+0x16>
 800688e:	bf00      	nop
 8006890:	20000018 	.word	0x20000018

08006894 <siprintf>:
 8006894:	b40e      	push	{r1, r2, r3}
 8006896:	b500      	push	{lr}
 8006898:	b09c      	sub	sp, #112	@ 0x70
 800689a:	ab1d      	add	r3, sp, #116	@ 0x74
 800689c:	9002      	str	r0, [sp, #8]
 800689e:	9006      	str	r0, [sp, #24]
 80068a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80068a4:	4809      	ldr	r0, [pc, #36]	@ (80068cc <siprintf+0x38>)
 80068a6:	9107      	str	r1, [sp, #28]
 80068a8:	9104      	str	r1, [sp, #16]
 80068aa:	4909      	ldr	r1, [pc, #36]	@ (80068d0 <siprintf+0x3c>)
 80068ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80068b0:	9105      	str	r1, [sp, #20]
 80068b2:	6800      	ldr	r0, [r0, #0]
 80068b4:	9301      	str	r3, [sp, #4]
 80068b6:	a902      	add	r1, sp, #8
 80068b8:	f001 fb9a 	bl	8007ff0 <_svfiprintf_r>
 80068bc:	9b02      	ldr	r3, [sp, #8]
 80068be:	2200      	movs	r2, #0
 80068c0:	701a      	strb	r2, [r3, #0]
 80068c2:	b01c      	add	sp, #112	@ 0x70
 80068c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80068c8:	b003      	add	sp, #12
 80068ca:	4770      	bx	lr
 80068cc:	20000018 	.word	0x20000018
 80068d0:	ffff0208 	.word	0xffff0208

080068d4 <__sread>:
 80068d4:	b510      	push	{r4, lr}
 80068d6:	460c      	mov	r4, r1
 80068d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068dc:	f000 f89c 	bl	8006a18 <_read_r>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	bfab      	itete	ge
 80068e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80068e6:	89a3      	ldrhlt	r3, [r4, #12]
 80068e8:	181b      	addge	r3, r3, r0
 80068ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80068ee:	bfac      	ite	ge
 80068f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80068f2:	81a3      	strhlt	r3, [r4, #12]
 80068f4:	bd10      	pop	{r4, pc}

080068f6 <__swrite>:
 80068f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068fa:	461f      	mov	r7, r3
 80068fc:	898b      	ldrh	r3, [r1, #12]
 80068fe:	05db      	lsls	r3, r3, #23
 8006900:	4605      	mov	r5, r0
 8006902:	460c      	mov	r4, r1
 8006904:	4616      	mov	r6, r2
 8006906:	d505      	bpl.n	8006914 <__swrite+0x1e>
 8006908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800690c:	2302      	movs	r3, #2
 800690e:	2200      	movs	r2, #0
 8006910:	f000 f870 	bl	80069f4 <_lseek_r>
 8006914:	89a3      	ldrh	r3, [r4, #12]
 8006916:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800691a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800691e:	81a3      	strh	r3, [r4, #12]
 8006920:	4632      	mov	r2, r6
 8006922:	463b      	mov	r3, r7
 8006924:	4628      	mov	r0, r5
 8006926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800692a:	f000 b8ab 	b.w	8006a84 <_write_r>

0800692e <__sseek>:
 800692e:	b510      	push	{r4, lr}
 8006930:	460c      	mov	r4, r1
 8006932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006936:	f000 f85d 	bl	80069f4 <_lseek_r>
 800693a:	1c43      	adds	r3, r0, #1
 800693c:	89a3      	ldrh	r3, [r4, #12]
 800693e:	bf15      	itete	ne
 8006940:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006942:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006946:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800694a:	81a3      	strheq	r3, [r4, #12]
 800694c:	bf18      	it	ne
 800694e:	81a3      	strhne	r3, [r4, #12]
 8006950:	bd10      	pop	{r4, pc}

08006952 <__sclose>:
 8006952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006956:	f000 b83d 	b.w	80069d4 <_close_r>

0800695a <memset>:
 800695a:	4402      	add	r2, r0
 800695c:	4603      	mov	r3, r0
 800695e:	4293      	cmp	r3, r2
 8006960:	d100      	bne.n	8006964 <memset+0xa>
 8006962:	4770      	bx	lr
 8006964:	f803 1b01 	strb.w	r1, [r3], #1
 8006968:	e7f9      	b.n	800695e <memset+0x4>

0800696a <_raise_r>:
 800696a:	291f      	cmp	r1, #31
 800696c:	b538      	push	{r3, r4, r5, lr}
 800696e:	4605      	mov	r5, r0
 8006970:	460c      	mov	r4, r1
 8006972:	d904      	bls.n	800697e <_raise_r+0x14>
 8006974:	2316      	movs	r3, #22
 8006976:	6003      	str	r3, [r0, #0]
 8006978:	f04f 30ff 	mov.w	r0, #4294967295
 800697c:	bd38      	pop	{r3, r4, r5, pc}
 800697e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006980:	b112      	cbz	r2, 8006988 <_raise_r+0x1e>
 8006982:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006986:	b94b      	cbnz	r3, 800699c <_raise_r+0x32>
 8006988:	4628      	mov	r0, r5
 800698a:	f000 f869 	bl	8006a60 <_getpid_r>
 800698e:	4622      	mov	r2, r4
 8006990:	4601      	mov	r1, r0
 8006992:	4628      	mov	r0, r5
 8006994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006998:	f000 b850 	b.w	8006a3c <_kill_r>
 800699c:	2b01      	cmp	r3, #1
 800699e:	d00a      	beq.n	80069b6 <_raise_r+0x4c>
 80069a0:	1c59      	adds	r1, r3, #1
 80069a2:	d103      	bne.n	80069ac <_raise_r+0x42>
 80069a4:	2316      	movs	r3, #22
 80069a6:	6003      	str	r3, [r0, #0]
 80069a8:	2001      	movs	r0, #1
 80069aa:	e7e7      	b.n	800697c <_raise_r+0x12>
 80069ac:	2100      	movs	r1, #0
 80069ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80069b2:	4620      	mov	r0, r4
 80069b4:	4798      	blx	r3
 80069b6:	2000      	movs	r0, #0
 80069b8:	e7e0      	b.n	800697c <_raise_r+0x12>
	...

080069bc <raise>:
 80069bc:	4b02      	ldr	r3, [pc, #8]	@ (80069c8 <raise+0xc>)
 80069be:	4601      	mov	r1, r0
 80069c0:	6818      	ldr	r0, [r3, #0]
 80069c2:	f7ff bfd2 	b.w	800696a <_raise_r>
 80069c6:	bf00      	nop
 80069c8:	20000018 	.word	0x20000018

080069cc <_localeconv_r>:
 80069cc:	4800      	ldr	r0, [pc, #0]	@ (80069d0 <_localeconv_r+0x4>)
 80069ce:	4770      	bx	lr
 80069d0:	20000158 	.word	0x20000158

080069d4 <_close_r>:
 80069d4:	b538      	push	{r3, r4, r5, lr}
 80069d6:	4d06      	ldr	r5, [pc, #24]	@ (80069f0 <_close_r+0x1c>)
 80069d8:	2300      	movs	r3, #0
 80069da:	4604      	mov	r4, r0
 80069dc:	4608      	mov	r0, r1
 80069de:	602b      	str	r3, [r5, #0]
 80069e0:	f7fb fd90 	bl	8002504 <_close>
 80069e4:	1c43      	adds	r3, r0, #1
 80069e6:	d102      	bne.n	80069ee <_close_r+0x1a>
 80069e8:	682b      	ldr	r3, [r5, #0]
 80069ea:	b103      	cbz	r3, 80069ee <_close_r+0x1a>
 80069ec:	6023      	str	r3, [r4, #0]
 80069ee:	bd38      	pop	{r3, r4, r5, pc}
 80069f0:	200004e0 	.word	0x200004e0

080069f4 <_lseek_r>:
 80069f4:	b538      	push	{r3, r4, r5, lr}
 80069f6:	4d07      	ldr	r5, [pc, #28]	@ (8006a14 <_lseek_r+0x20>)
 80069f8:	4604      	mov	r4, r0
 80069fa:	4608      	mov	r0, r1
 80069fc:	4611      	mov	r1, r2
 80069fe:	2200      	movs	r2, #0
 8006a00:	602a      	str	r2, [r5, #0]
 8006a02:	461a      	mov	r2, r3
 8006a04:	f7fb fda5 	bl	8002552 <_lseek>
 8006a08:	1c43      	adds	r3, r0, #1
 8006a0a:	d102      	bne.n	8006a12 <_lseek_r+0x1e>
 8006a0c:	682b      	ldr	r3, [r5, #0]
 8006a0e:	b103      	cbz	r3, 8006a12 <_lseek_r+0x1e>
 8006a10:	6023      	str	r3, [r4, #0]
 8006a12:	bd38      	pop	{r3, r4, r5, pc}
 8006a14:	200004e0 	.word	0x200004e0

08006a18 <_read_r>:
 8006a18:	b538      	push	{r3, r4, r5, lr}
 8006a1a:	4d07      	ldr	r5, [pc, #28]	@ (8006a38 <_read_r+0x20>)
 8006a1c:	4604      	mov	r4, r0
 8006a1e:	4608      	mov	r0, r1
 8006a20:	4611      	mov	r1, r2
 8006a22:	2200      	movs	r2, #0
 8006a24:	602a      	str	r2, [r5, #0]
 8006a26:	461a      	mov	r2, r3
 8006a28:	f7fb fd33 	bl	8002492 <_read>
 8006a2c:	1c43      	adds	r3, r0, #1
 8006a2e:	d102      	bne.n	8006a36 <_read_r+0x1e>
 8006a30:	682b      	ldr	r3, [r5, #0]
 8006a32:	b103      	cbz	r3, 8006a36 <_read_r+0x1e>
 8006a34:	6023      	str	r3, [r4, #0]
 8006a36:	bd38      	pop	{r3, r4, r5, pc}
 8006a38:	200004e0 	.word	0x200004e0

08006a3c <_kill_r>:
 8006a3c:	b538      	push	{r3, r4, r5, lr}
 8006a3e:	4d07      	ldr	r5, [pc, #28]	@ (8006a5c <_kill_r+0x20>)
 8006a40:	2300      	movs	r3, #0
 8006a42:	4604      	mov	r4, r0
 8006a44:	4608      	mov	r0, r1
 8006a46:	4611      	mov	r1, r2
 8006a48:	602b      	str	r3, [r5, #0]
 8006a4a:	f7fb fd07 	bl	800245c <_kill>
 8006a4e:	1c43      	adds	r3, r0, #1
 8006a50:	d102      	bne.n	8006a58 <_kill_r+0x1c>
 8006a52:	682b      	ldr	r3, [r5, #0]
 8006a54:	b103      	cbz	r3, 8006a58 <_kill_r+0x1c>
 8006a56:	6023      	str	r3, [r4, #0]
 8006a58:	bd38      	pop	{r3, r4, r5, pc}
 8006a5a:	bf00      	nop
 8006a5c:	200004e0 	.word	0x200004e0

08006a60 <_getpid_r>:
 8006a60:	f7fb bcf4 	b.w	800244c <_getpid>

08006a64 <_sbrk_r>:
 8006a64:	b538      	push	{r3, r4, r5, lr}
 8006a66:	4d06      	ldr	r5, [pc, #24]	@ (8006a80 <_sbrk_r+0x1c>)
 8006a68:	2300      	movs	r3, #0
 8006a6a:	4604      	mov	r4, r0
 8006a6c:	4608      	mov	r0, r1
 8006a6e:	602b      	str	r3, [r5, #0]
 8006a70:	f7fb fd7c 	bl	800256c <_sbrk>
 8006a74:	1c43      	adds	r3, r0, #1
 8006a76:	d102      	bne.n	8006a7e <_sbrk_r+0x1a>
 8006a78:	682b      	ldr	r3, [r5, #0]
 8006a7a:	b103      	cbz	r3, 8006a7e <_sbrk_r+0x1a>
 8006a7c:	6023      	str	r3, [r4, #0]
 8006a7e:	bd38      	pop	{r3, r4, r5, pc}
 8006a80:	200004e0 	.word	0x200004e0

08006a84 <_write_r>:
 8006a84:	b538      	push	{r3, r4, r5, lr}
 8006a86:	4d07      	ldr	r5, [pc, #28]	@ (8006aa4 <_write_r+0x20>)
 8006a88:	4604      	mov	r4, r0
 8006a8a:	4608      	mov	r0, r1
 8006a8c:	4611      	mov	r1, r2
 8006a8e:	2200      	movs	r2, #0
 8006a90:	602a      	str	r2, [r5, #0]
 8006a92:	461a      	mov	r2, r3
 8006a94:	f7fb fd1a 	bl	80024cc <_write>
 8006a98:	1c43      	adds	r3, r0, #1
 8006a9a:	d102      	bne.n	8006aa2 <_write_r+0x1e>
 8006a9c:	682b      	ldr	r3, [r5, #0]
 8006a9e:	b103      	cbz	r3, 8006aa2 <_write_r+0x1e>
 8006aa0:	6023      	str	r3, [r4, #0]
 8006aa2:	bd38      	pop	{r3, r4, r5, pc}
 8006aa4:	200004e0 	.word	0x200004e0

08006aa8 <__errno>:
 8006aa8:	4b01      	ldr	r3, [pc, #4]	@ (8006ab0 <__errno+0x8>)
 8006aaa:	6818      	ldr	r0, [r3, #0]
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	20000018 	.word	0x20000018

08006ab4 <__libc_init_array>:
 8006ab4:	b570      	push	{r4, r5, r6, lr}
 8006ab6:	4d0d      	ldr	r5, [pc, #52]	@ (8006aec <__libc_init_array+0x38>)
 8006ab8:	4c0d      	ldr	r4, [pc, #52]	@ (8006af0 <__libc_init_array+0x3c>)
 8006aba:	1b64      	subs	r4, r4, r5
 8006abc:	10a4      	asrs	r4, r4, #2
 8006abe:	2600      	movs	r6, #0
 8006ac0:	42a6      	cmp	r6, r4
 8006ac2:	d109      	bne.n	8006ad8 <__libc_init_array+0x24>
 8006ac4:	4d0b      	ldr	r5, [pc, #44]	@ (8006af4 <__libc_init_array+0x40>)
 8006ac6:	4c0c      	ldr	r4, [pc, #48]	@ (8006af8 <__libc_init_array+0x44>)
 8006ac8:	f001 ff56 	bl	8008978 <_init>
 8006acc:	1b64      	subs	r4, r4, r5
 8006ace:	10a4      	asrs	r4, r4, #2
 8006ad0:	2600      	movs	r6, #0
 8006ad2:	42a6      	cmp	r6, r4
 8006ad4:	d105      	bne.n	8006ae2 <__libc_init_array+0x2e>
 8006ad6:	bd70      	pop	{r4, r5, r6, pc}
 8006ad8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006adc:	4798      	blx	r3
 8006ade:	3601      	adds	r6, #1
 8006ae0:	e7ee      	b.n	8006ac0 <__libc_init_array+0xc>
 8006ae2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ae6:	4798      	blx	r3
 8006ae8:	3601      	adds	r6, #1
 8006aea:	e7f2      	b.n	8006ad2 <__libc_init_array+0x1e>
 8006aec:	08008de8 	.word	0x08008de8
 8006af0:	08008de8 	.word	0x08008de8
 8006af4:	08008de8 	.word	0x08008de8
 8006af8:	08008dec 	.word	0x08008dec

08006afc <__retarget_lock_init_recursive>:
 8006afc:	4770      	bx	lr

08006afe <__retarget_lock_acquire_recursive>:
 8006afe:	4770      	bx	lr

08006b00 <__retarget_lock_release_recursive>:
 8006b00:	4770      	bx	lr

08006b02 <quorem>:
 8006b02:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b06:	6903      	ldr	r3, [r0, #16]
 8006b08:	690c      	ldr	r4, [r1, #16]
 8006b0a:	42a3      	cmp	r3, r4
 8006b0c:	4607      	mov	r7, r0
 8006b0e:	db7e      	blt.n	8006c0e <quorem+0x10c>
 8006b10:	3c01      	subs	r4, #1
 8006b12:	f101 0814 	add.w	r8, r1, #20
 8006b16:	00a3      	lsls	r3, r4, #2
 8006b18:	f100 0514 	add.w	r5, r0, #20
 8006b1c:	9300      	str	r3, [sp, #0]
 8006b1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b22:	9301      	str	r3, [sp, #4]
 8006b24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006b28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006b34:	fbb2 f6f3 	udiv	r6, r2, r3
 8006b38:	d32e      	bcc.n	8006b98 <quorem+0x96>
 8006b3a:	f04f 0a00 	mov.w	sl, #0
 8006b3e:	46c4      	mov	ip, r8
 8006b40:	46ae      	mov	lr, r5
 8006b42:	46d3      	mov	fp, sl
 8006b44:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006b48:	b298      	uxth	r0, r3
 8006b4a:	fb06 a000 	mla	r0, r6, r0, sl
 8006b4e:	0c02      	lsrs	r2, r0, #16
 8006b50:	0c1b      	lsrs	r3, r3, #16
 8006b52:	fb06 2303 	mla	r3, r6, r3, r2
 8006b56:	f8de 2000 	ldr.w	r2, [lr]
 8006b5a:	b280      	uxth	r0, r0
 8006b5c:	b292      	uxth	r2, r2
 8006b5e:	1a12      	subs	r2, r2, r0
 8006b60:	445a      	add	r2, fp
 8006b62:	f8de 0000 	ldr.w	r0, [lr]
 8006b66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006b70:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006b74:	b292      	uxth	r2, r2
 8006b76:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006b7a:	45e1      	cmp	r9, ip
 8006b7c:	f84e 2b04 	str.w	r2, [lr], #4
 8006b80:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006b84:	d2de      	bcs.n	8006b44 <quorem+0x42>
 8006b86:	9b00      	ldr	r3, [sp, #0]
 8006b88:	58eb      	ldr	r3, [r5, r3]
 8006b8a:	b92b      	cbnz	r3, 8006b98 <quorem+0x96>
 8006b8c:	9b01      	ldr	r3, [sp, #4]
 8006b8e:	3b04      	subs	r3, #4
 8006b90:	429d      	cmp	r5, r3
 8006b92:	461a      	mov	r2, r3
 8006b94:	d32f      	bcc.n	8006bf6 <quorem+0xf4>
 8006b96:	613c      	str	r4, [r7, #16]
 8006b98:	4638      	mov	r0, r7
 8006b9a:	f001 f8c5 	bl	8007d28 <__mcmp>
 8006b9e:	2800      	cmp	r0, #0
 8006ba0:	db25      	blt.n	8006bee <quorem+0xec>
 8006ba2:	4629      	mov	r1, r5
 8006ba4:	2000      	movs	r0, #0
 8006ba6:	f858 2b04 	ldr.w	r2, [r8], #4
 8006baa:	f8d1 c000 	ldr.w	ip, [r1]
 8006bae:	fa1f fe82 	uxth.w	lr, r2
 8006bb2:	fa1f f38c 	uxth.w	r3, ip
 8006bb6:	eba3 030e 	sub.w	r3, r3, lr
 8006bba:	4403      	add	r3, r0
 8006bbc:	0c12      	lsrs	r2, r2, #16
 8006bbe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006bc2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bcc:	45c1      	cmp	r9, r8
 8006bce:	f841 3b04 	str.w	r3, [r1], #4
 8006bd2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006bd6:	d2e6      	bcs.n	8006ba6 <quorem+0xa4>
 8006bd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006bdc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006be0:	b922      	cbnz	r2, 8006bec <quorem+0xea>
 8006be2:	3b04      	subs	r3, #4
 8006be4:	429d      	cmp	r5, r3
 8006be6:	461a      	mov	r2, r3
 8006be8:	d30b      	bcc.n	8006c02 <quorem+0x100>
 8006bea:	613c      	str	r4, [r7, #16]
 8006bec:	3601      	adds	r6, #1
 8006bee:	4630      	mov	r0, r6
 8006bf0:	b003      	add	sp, #12
 8006bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bf6:	6812      	ldr	r2, [r2, #0]
 8006bf8:	3b04      	subs	r3, #4
 8006bfa:	2a00      	cmp	r2, #0
 8006bfc:	d1cb      	bne.n	8006b96 <quorem+0x94>
 8006bfe:	3c01      	subs	r4, #1
 8006c00:	e7c6      	b.n	8006b90 <quorem+0x8e>
 8006c02:	6812      	ldr	r2, [r2, #0]
 8006c04:	3b04      	subs	r3, #4
 8006c06:	2a00      	cmp	r2, #0
 8006c08:	d1ef      	bne.n	8006bea <quorem+0xe8>
 8006c0a:	3c01      	subs	r4, #1
 8006c0c:	e7ea      	b.n	8006be4 <quorem+0xe2>
 8006c0e:	2000      	movs	r0, #0
 8006c10:	e7ee      	b.n	8006bf0 <quorem+0xee>
 8006c12:	0000      	movs	r0, r0
 8006c14:	0000      	movs	r0, r0
	...

08006c18 <_dtoa_r>:
 8006c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c1c:	69c7      	ldr	r7, [r0, #28]
 8006c1e:	b099      	sub	sp, #100	@ 0x64
 8006c20:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006c24:	ec55 4b10 	vmov	r4, r5, d0
 8006c28:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006c2a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006c2c:	4683      	mov	fp, r0
 8006c2e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006c30:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006c32:	b97f      	cbnz	r7, 8006c54 <_dtoa_r+0x3c>
 8006c34:	2010      	movs	r0, #16
 8006c36:	f7ff f821 	bl	8005c7c <malloc>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006c40:	b920      	cbnz	r0, 8006c4c <_dtoa_r+0x34>
 8006c42:	4ba7      	ldr	r3, [pc, #668]	@ (8006ee0 <_dtoa_r+0x2c8>)
 8006c44:	21ef      	movs	r1, #239	@ 0xef
 8006c46:	48a7      	ldr	r0, [pc, #668]	@ (8006ee4 <_dtoa_r+0x2cc>)
 8006c48:	f001 fba2 	bl	8008390 <__assert_func>
 8006c4c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006c50:	6007      	str	r7, [r0, #0]
 8006c52:	60c7      	str	r7, [r0, #12]
 8006c54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006c58:	6819      	ldr	r1, [r3, #0]
 8006c5a:	b159      	cbz	r1, 8006c74 <_dtoa_r+0x5c>
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	604a      	str	r2, [r1, #4]
 8006c60:	2301      	movs	r3, #1
 8006c62:	4093      	lsls	r3, r2
 8006c64:	608b      	str	r3, [r1, #8]
 8006c66:	4658      	mov	r0, fp
 8006c68:	f000 fe24 	bl	80078b4 <_Bfree>
 8006c6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006c70:	2200      	movs	r2, #0
 8006c72:	601a      	str	r2, [r3, #0]
 8006c74:	1e2b      	subs	r3, r5, #0
 8006c76:	bfb9      	ittee	lt
 8006c78:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006c7c:	9303      	strlt	r3, [sp, #12]
 8006c7e:	2300      	movge	r3, #0
 8006c80:	6033      	strge	r3, [r6, #0]
 8006c82:	9f03      	ldr	r7, [sp, #12]
 8006c84:	4b98      	ldr	r3, [pc, #608]	@ (8006ee8 <_dtoa_r+0x2d0>)
 8006c86:	bfbc      	itt	lt
 8006c88:	2201      	movlt	r2, #1
 8006c8a:	6032      	strlt	r2, [r6, #0]
 8006c8c:	43bb      	bics	r3, r7
 8006c8e:	d112      	bne.n	8006cb6 <_dtoa_r+0x9e>
 8006c90:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006c92:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006c96:	6013      	str	r3, [r2, #0]
 8006c98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006c9c:	4323      	orrs	r3, r4
 8006c9e:	f000 854d 	beq.w	800773c <_dtoa_r+0xb24>
 8006ca2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006ca4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006efc <_dtoa_r+0x2e4>
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f000 854f 	beq.w	800774c <_dtoa_r+0xb34>
 8006cae:	f10a 0303 	add.w	r3, sl, #3
 8006cb2:	f000 bd49 	b.w	8007748 <_dtoa_r+0xb30>
 8006cb6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	ec51 0b17 	vmov	r0, r1, d7
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006cc6:	f7f9 ff07 	bl	8000ad8 <__aeabi_dcmpeq>
 8006cca:	4680      	mov	r8, r0
 8006ccc:	b158      	cbz	r0, 8006ce6 <_dtoa_r+0xce>
 8006cce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	6013      	str	r3, [r2, #0]
 8006cd4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006cd6:	b113      	cbz	r3, 8006cde <_dtoa_r+0xc6>
 8006cd8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006cda:	4b84      	ldr	r3, [pc, #528]	@ (8006eec <_dtoa_r+0x2d4>)
 8006cdc:	6013      	str	r3, [r2, #0]
 8006cde:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006f00 <_dtoa_r+0x2e8>
 8006ce2:	f000 bd33 	b.w	800774c <_dtoa_r+0xb34>
 8006ce6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006cea:	aa16      	add	r2, sp, #88	@ 0x58
 8006cec:	a917      	add	r1, sp, #92	@ 0x5c
 8006cee:	4658      	mov	r0, fp
 8006cf0:	f001 f8ca 	bl	8007e88 <__d2b>
 8006cf4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006cf8:	4681      	mov	r9, r0
 8006cfa:	2e00      	cmp	r6, #0
 8006cfc:	d077      	beq.n	8006dee <_dtoa_r+0x1d6>
 8006cfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d00:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006d04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d0c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006d10:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006d14:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006d18:	4619      	mov	r1, r3
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	4b74      	ldr	r3, [pc, #464]	@ (8006ef0 <_dtoa_r+0x2d8>)
 8006d1e:	f7f9 fabb 	bl	8000298 <__aeabi_dsub>
 8006d22:	a369      	add	r3, pc, #420	@ (adr r3, 8006ec8 <_dtoa_r+0x2b0>)
 8006d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d28:	f7f9 fc6e 	bl	8000608 <__aeabi_dmul>
 8006d2c:	a368      	add	r3, pc, #416	@ (adr r3, 8006ed0 <_dtoa_r+0x2b8>)
 8006d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d32:	f7f9 fab3 	bl	800029c <__adddf3>
 8006d36:	4604      	mov	r4, r0
 8006d38:	4630      	mov	r0, r6
 8006d3a:	460d      	mov	r5, r1
 8006d3c:	f7f9 fbfa 	bl	8000534 <__aeabi_i2d>
 8006d40:	a365      	add	r3, pc, #404	@ (adr r3, 8006ed8 <_dtoa_r+0x2c0>)
 8006d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d46:	f7f9 fc5f 	bl	8000608 <__aeabi_dmul>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	4620      	mov	r0, r4
 8006d50:	4629      	mov	r1, r5
 8006d52:	f7f9 faa3 	bl	800029c <__adddf3>
 8006d56:	4604      	mov	r4, r0
 8006d58:	460d      	mov	r5, r1
 8006d5a:	f7f9 ff05 	bl	8000b68 <__aeabi_d2iz>
 8006d5e:	2200      	movs	r2, #0
 8006d60:	4607      	mov	r7, r0
 8006d62:	2300      	movs	r3, #0
 8006d64:	4620      	mov	r0, r4
 8006d66:	4629      	mov	r1, r5
 8006d68:	f7f9 fec0 	bl	8000aec <__aeabi_dcmplt>
 8006d6c:	b140      	cbz	r0, 8006d80 <_dtoa_r+0x168>
 8006d6e:	4638      	mov	r0, r7
 8006d70:	f7f9 fbe0 	bl	8000534 <__aeabi_i2d>
 8006d74:	4622      	mov	r2, r4
 8006d76:	462b      	mov	r3, r5
 8006d78:	f7f9 feae 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d7c:	b900      	cbnz	r0, 8006d80 <_dtoa_r+0x168>
 8006d7e:	3f01      	subs	r7, #1
 8006d80:	2f16      	cmp	r7, #22
 8006d82:	d851      	bhi.n	8006e28 <_dtoa_r+0x210>
 8006d84:	4b5b      	ldr	r3, [pc, #364]	@ (8006ef4 <_dtoa_r+0x2dc>)
 8006d86:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d92:	f7f9 feab 	bl	8000aec <__aeabi_dcmplt>
 8006d96:	2800      	cmp	r0, #0
 8006d98:	d048      	beq.n	8006e2c <_dtoa_r+0x214>
 8006d9a:	3f01      	subs	r7, #1
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006da0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006da2:	1b9b      	subs	r3, r3, r6
 8006da4:	1e5a      	subs	r2, r3, #1
 8006da6:	bf44      	itt	mi
 8006da8:	f1c3 0801 	rsbmi	r8, r3, #1
 8006dac:	2300      	movmi	r3, #0
 8006dae:	9208      	str	r2, [sp, #32]
 8006db0:	bf54      	ite	pl
 8006db2:	f04f 0800 	movpl.w	r8, #0
 8006db6:	9308      	strmi	r3, [sp, #32]
 8006db8:	2f00      	cmp	r7, #0
 8006dba:	db39      	blt.n	8006e30 <_dtoa_r+0x218>
 8006dbc:	9b08      	ldr	r3, [sp, #32]
 8006dbe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006dc0:	443b      	add	r3, r7
 8006dc2:	9308      	str	r3, [sp, #32]
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006dc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dca:	2b09      	cmp	r3, #9
 8006dcc:	d864      	bhi.n	8006e98 <_dtoa_r+0x280>
 8006dce:	2b05      	cmp	r3, #5
 8006dd0:	bfc4      	itt	gt
 8006dd2:	3b04      	subgt	r3, #4
 8006dd4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006dd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dd8:	f1a3 0302 	sub.w	r3, r3, #2
 8006ddc:	bfcc      	ite	gt
 8006dde:	2400      	movgt	r4, #0
 8006de0:	2401      	movle	r4, #1
 8006de2:	2b03      	cmp	r3, #3
 8006de4:	d863      	bhi.n	8006eae <_dtoa_r+0x296>
 8006de6:	e8df f003 	tbb	[pc, r3]
 8006dea:	372a      	.short	0x372a
 8006dec:	5535      	.short	0x5535
 8006dee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006df2:	441e      	add	r6, r3
 8006df4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006df8:	2b20      	cmp	r3, #32
 8006dfa:	bfc1      	itttt	gt
 8006dfc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006e00:	409f      	lslgt	r7, r3
 8006e02:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006e06:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006e0a:	bfd6      	itet	le
 8006e0c:	f1c3 0320 	rsble	r3, r3, #32
 8006e10:	ea47 0003 	orrgt.w	r0, r7, r3
 8006e14:	fa04 f003 	lslle.w	r0, r4, r3
 8006e18:	f7f9 fb7c 	bl	8000514 <__aeabi_ui2d>
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006e22:	3e01      	subs	r6, #1
 8006e24:	9214      	str	r2, [sp, #80]	@ 0x50
 8006e26:	e777      	b.n	8006d18 <_dtoa_r+0x100>
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e7b8      	b.n	8006d9e <_dtoa_r+0x186>
 8006e2c:	9012      	str	r0, [sp, #72]	@ 0x48
 8006e2e:	e7b7      	b.n	8006da0 <_dtoa_r+0x188>
 8006e30:	427b      	negs	r3, r7
 8006e32:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e34:	2300      	movs	r3, #0
 8006e36:	eba8 0807 	sub.w	r8, r8, r7
 8006e3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006e3c:	e7c4      	b.n	8006dc8 <_dtoa_r+0x1b0>
 8006e3e:	2300      	movs	r3, #0
 8006e40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	dc35      	bgt.n	8006eb4 <_dtoa_r+0x29c>
 8006e48:	2301      	movs	r3, #1
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	9307      	str	r3, [sp, #28]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e52:	e00b      	b.n	8006e6c <_dtoa_r+0x254>
 8006e54:	2301      	movs	r3, #1
 8006e56:	e7f3      	b.n	8006e40 <_dtoa_r+0x228>
 8006e58:	2300      	movs	r3, #0
 8006e5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e5e:	18fb      	adds	r3, r7, r3
 8006e60:	9300      	str	r3, [sp, #0]
 8006e62:	3301      	adds	r3, #1
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	9307      	str	r3, [sp, #28]
 8006e68:	bfb8      	it	lt
 8006e6a:	2301      	movlt	r3, #1
 8006e6c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006e70:	2100      	movs	r1, #0
 8006e72:	2204      	movs	r2, #4
 8006e74:	f102 0514 	add.w	r5, r2, #20
 8006e78:	429d      	cmp	r5, r3
 8006e7a:	d91f      	bls.n	8006ebc <_dtoa_r+0x2a4>
 8006e7c:	6041      	str	r1, [r0, #4]
 8006e7e:	4658      	mov	r0, fp
 8006e80:	f000 fcd8 	bl	8007834 <_Balloc>
 8006e84:	4682      	mov	sl, r0
 8006e86:	2800      	cmp	r0, #0
 8006e88:	d13c      	bne.n	8006f04 <_dtoa_r+0x2ec>
 8006e8a:	4b1b      	ldr	r3, [pc, #108]	@ (8006ef8 <_dtoa_r+0x2e0>)
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006e92:	e6d8      	b.n	8006c46 <_dtoa_r+0x2e>
 8006e94:	2301      	movs	r3, #1
 8006e96:	e7e0      	b.n	8006e5a <_dtoa_r+0x242>
 8006e98:	2401      	movs	r4, #1
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e9e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	9307      	str	r3, [sp, #28]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	2312      	movs	r3, #18
 8006eac:	e7d0      	b.n	8006e50 <_dtoa_r+0x238>
 8006eae:	2301      	movs	r3, #1
 8006eb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006eb2:	e7f5      	b.n	8006ea0 <_dtoa_r+0x288>
 8006eb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006eb6:	9300      	str	r3, [sp, #0]
 8006eb8:	9307      	str	r3, [sp, #28]
 8006eba:	e7d7      	b.n	8006e6c <_dtoa_r+0x254>
 8006ebc:	3101      	adds	r1, #1
 8006ebe:	0052      	lsls	r2, r2, #1
 8006ec0:	e7d8      	b.n	8006e74 <_dtoa_r+0x25c>
 8006ec2:	bf00      	nop
 8006ec4:	f3af 8000 	nop.w
 8006ec8:	636f4361 	.word	0x636f4361
 8006ecc:	3fd287a7 	.word	0x3fd287a7
 8006ed0:	8b60c8b3 	.word	0x8b60c8b3
 8006ed4:	3fc68a28 	.word	0x3fc68a28
 8006ed8:	509f79fb 	.word	0x509f79fb
 8006edc:	3fd34413 	.word	0x3fd34413
 8006ee0:	08008ab1 	.word	0x08008ab1
 8006ee4:	08008ac8 	.word	0x08008ac8
 8006ee8:	7ff00000 	.word	0x7ff00000
 8006eec:	08008a81 	.word	0x08008a81
 8006ef0:	3ff80000 	.word	0x3ff80000
 8006ef4:	08008bc0 	.word	0x08008bc0
 8006ef8:	08008b20 	.word	0x08008b20
 8006efc:	08008aad 	.word	0x08008aad
 8006f00:	08008a80 	.word	0x08008a80
 8006f04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006f08:	6018      	str	r0, [r3, #0]
 8006f0a:	9b07      	ldr	r3, [sp, #28]
 8006f0c:	2b0e      	cmp	r3, #14
 8006f0e:	f200 80a4 	bhi.w	800705a <_dtoa_r+0x442>
 8006f12:	2c00      	cmp	r4, #0
 8006f14:	f000 80a1 	beq.w	800705a <_dtoa_r+0x442>
 8006f18:	2f00      	cmp	r7, #0
 8006f1a:	dd33      	ble.n	8006f84 <_dtoa_r+0x36c>
 8006f1c:	4bad      	ldr	r3, [pc, #692]	@ (80071d4 <_dtoa_r+0x5bc>)
 8006f1e:	f007 020f 	and.w	r2, r7, #15
 8006f22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f26:	ed93 7b00 	vldr	d7, [r3]
 8006f2a:	05f8      	lsls	r0, r7, #23
 8006f2c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006f30:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006f34:	d516      	bpl.n	8006f64 <_dtoa_r+0x34c>
 8006f36:	4ba8      	ldr	r3, [pc, #672]	@ (80071d8 <_dtoa_r+0x5c0>)
 8006f38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f40:	f7f9 fc8c 	bl	800085c <__aeabi_ddiv>
 8006f44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f48:	f004 040f 	and.w	r4, r4, #15
 8006f4c:	2603      	movs	r6, #3
 8006f4e:	4da2      	ldr	r5, [pc, #648]	@ (80071d8 <_dtoa_r+0x5c0>)
 8006f50:	b954      	cbnz	r4, 8006f68 <_dtoa_r+0x350>
 8006f52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f5a:	f7f9 fc7f 	bl	800085c <__aeabi_ddiv>
 8006f5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f62:	e028      	b.n	8006fb6 <_dtoa_r+0x39e>
 8006f64:	2602      	movs	r6, #2
 8006f66:	e7f2      	b.n	8006f4e <_dtoa_r+0x336>
 8006f68:	07e1      	lsls	r1, r4, #31
 8006f6a:	d508      	bpl.n	8006f7e <_dtoa_r+0x366>
 8006f6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f74:	f7f9 fb48 	bl	8000608 <__aeabi_dmul>
 8006f78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f7c:	3601      	adds	r6, #1
 8006f7e:	1064      	asrs	r4, r4, #1
 8006f80:	3508      	adds	r5, #8
 8006f82:	e7e5      	b.n	8006f50 <_dtoa_r+0x338>
 8006f84:	f000 80d2 	beq.w	800712c <_dtoa_r+0x514>
 8006f88:	427c      	negs	r4, r7
 8006f8a:	4b92      	ldr	r3, [pc, #584]	@ (80071d4 <_dtoa_r+0x5bc>)
 8006f8c:	4d92      	ldr	r5, [pc, #584]	@ (80071d8 <_dtoa_r+0x5c0>)
 8006f8e:	f004 020f 	and.w	r2, r4, #15
 8006f92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f9e:	f7f9 fb33 	bl	8000608 <__aeabi_dmul>
 8006fa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fa6:	1124      	asrs	r4, r4, #4
 8006fa8:	2300      	movs	r3, #0
 8006faa:	2602      	movs	r6, #2
 8006fac:	2c00      	cmp	r4, #0
 8006fae:	f040 80b2 	bne.w	8007116 <_dtoa_r+0x4fe>
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1d3      	bne.n	8006f5e <_dtoa_r+0x346>
 8006fb6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006fb8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f000 80b7 	beq.w	8007130 <_dtoa_r+0x518>
 8006fc2:	4b86      	ldr	r3, [pc, #536]	@ (80071dc <_dtoa_r+0x5c4>)
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	4629      	mov	r1, r5
 8006fca:	f7f9 fd8f 	bl	8000aec <__aeabi_dcmplt>
 8006fce:	2800      	cmp	r0, #0
 8006fd0:	f000 80ae 	beq.w	8007130 <_dtoa_r+0x518>
 8006fd4:	9b07      	ldr	r3, [sp, #28]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	f000 80aa 	beq.w	8007130 <_dtoa_r+0x518>
 8006fdc:	9b00      	ldr	r3, [sp, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	dd37      	ble.n	8007052 <_dtoa_r+0x43a>
 8006fe2:	1e7b      	subs	r3, r7, #1
 8006fe4:	9304      	str	r3, [sp, #16]
 8006fe6:	4620      	mov	r0, r4
 8006fe8:	4b7d      	ldr	r3, [pc, #500]	@ (80071e0 <_dtoa_r+0x5c8>)
 8006fea:	2200      	movs	r2, #0
 8006fec:	4629      	mov	r1, r5
 8006fee:	f7f9 fb0b 	bl	8000608 <__aeabi_dmul>
 8006ff2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ff6:	9c00      	ldr	r4, [sp, #0]
 8006ff8:	3601      	adds	r6, #1
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	f7f9 fa9a 	bl	8000534 <__aeabi_i2d>
 8007000:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007004:	f7f9 fb00 	bl	8000608 <__aeabi_dmul>
 8007008:	4b76      	ldr	r3, [pc, #472]	@ (80071e4 <_dtoa_r+0x5cc>)
 800700a:	2200      	movs	r2, #0
 800700c:	f7f9 f946 	bl	800029c <__adddf3>
 8007010:	4605      	mov	r5, r0
 8007012:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007016:	2c00      	cmp	r4, #0
 8007018:	f040 808d 	bne.w	8007136 <_dtoa_r+0x51e>
 800701c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007020:	4b71      	ldr	r3, [pc, #452]	@ (80071e8 <_dtoa_r+0x5d0>)
 8007022:	2200      	movs	r2, #0
 8007024:	f7f9 f938 	bl	8000298 <__aeabi_dsub>
 8007028:	4602      	mov	r2, r0
 800702a:	460b      	mov	r3, r1
 800702c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007030:	462a      	mov	r2, r5
 8007032:	4633      	mov	r3, r6
 8007034:	f7f9 fd78 	bl	8000b28 <__aeabi_dcmpgt>
 8007038:	2800      	cmp	r0, #0
 800703a:	f040 828b 	bne.w	8007554 <_dtoa_r+0x93c>
 800703e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007042:	462a      	mov	r2, r5
 8007044:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007048:	f7f9 fd50 	bl	8000aec <__aeabi_dcmplt>
 800704c:	2800      	cmp	r0, #0
 800704e:	f040 8128 	bne.w	80072a2 <_dtoa_r+0x68a>
 8007052:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007056:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800705a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800705c:	2b00      	cmp	r3, #0
 800705e:	f2c0 815a 	blt.w	8007316 <_dtoa_r+0x6fe>
 8007062:	2f0e      	cmp	r7, #14
 8007064:	f300 8157 	bgt.w	8007316 <_dtoa_r+0x6fe>
 8007068:	4b5a      	ldr	r3, [pc, #360]	@ (80071d4 <_dtoa_r+0x5bc>)
 800706a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800706e:	ed93 7b00 	vldr	d7, [r3]
 8007072:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007074:	2b00      	cmp	r3, #0
 8007076:	ed8d 7b00 	vstr	d7, [sp]
 800707a:	da03      	bge.n	8007084 <_dtoa_r+0x46c>
 800707c:	9b07      	ldr	r3, [sp, #28]
 800707e:	2b00      	cmp	r3, #0
 8007080:	f340 8101 	ble.w	8007286 <_dtoa_r+0x66e>
 8007084:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007088:	4656      	mov	r6, sl
 800708a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800708e:	4620      	mov	r0, r4
 8007090:	4629      	mov	r1, r5
 8007092:	f7f9 fbe3 	bl	800085c <__aeabi_ddiv>
 8007096:	f7f9 fd67 	bl	8000b68 <__aeabi_d2iz>
 800709a:	4680      	mov	r8, r0
 800709c:	f7f9 fa4a 	bl	8000534 <__aeabi_i2d>
 80070a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070a4:	f7f9 fab0 	bl	8000608 <__aeabi_dmul>
 80070a8:	4602      	mov	r2, r0
 80070aa:	460b      	mov	r3, r1
 80070ac:	4620      	mov	r0, r4
 80070ae:	4629      	mov	r1, r5
 80070b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80070b4:	f7f9 f8f0 	bl	8000298 <__aeabi_dsub>
 80070b8:	f806 4b01 	strb.w	r4, [r6], #1
 80070bc:	9d07      	ldr	r5, [sp, #28]
 80070be:	eba6 040a 	sub.w	r4, r6, sl
 80070c2:	42a5      	cmp	r5, r4
 80070c4:	4602      	mov	r2, r0
 80070c6:	460b      	mov	r3, r1
 80070c8:	f040 8117 	bne.w	80072fa <_dtoa_r+0x6e2>
 80070cc:	f7f9 f8e6 	bl	800029c <__adddf3>
 80070d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070d4:	4604      	mov	r4, r0
 80070d6:	460d      	mov	r5, r1
 80070d8:	f7f9 fd26 	bl	8000b28 <__aeabi_dcmpgt>
 80070dc:	2800      	cmp	r0, #0
 80070de:	f040 80f9 	bne.w	80072d4 <_dtoa_r+0x6bc>
 80070e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070e6:	4620      	mov	r0, r4
 80070e8:	4629      	mov	r1, r5
 80070ea:	f7f9 fcf5 	bl	8000ad8 <__aeabi_dcmpeq>
 80070ee:	b118      	cbz	r0, 80070f8 <_dtoa_r+0x4e0>
 80070f0:	f018 0f01 	tst.w	r8, #1
 80070f4:	f040 80ee 	bne.w	80072d4 <_dtoa_r+0x6bc>
 80070f8:	4649      	mov	r1, r9
 80070fa:	4658      	mov	r0, fp
 80070fc:	f000 fbda 	bl	80078b4 <_Bfree>
 8007100:	2300      	movs	r3, #0
 8007102:	7033      	strb	r3, [r6, #0]
 8007104:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007106:	3701      	adds	r7, #1
 8007108:	601f      	str	r7, [r3, #0]
 800710a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800710c:	2b00      	cmp	r3, #0
 800710e:	f000 831d 	beq.w	800774c <_dtoa_r+0xb34>
 8007112:	601e      	str	r6, [r3, #0]
 8007114:	e31a      	b.n	800774c <_dtoa_r+0xb34>
 8007116:	07e2      	lsls	r2, r4, #31
 8007118:	d505      	bpl.n	8007126 <_dtoa_r+0x50e>
 800711a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800711e:	f7f9 fa73 	bl	8000608 <__aeabi_dmul>
 8007122:	3601      	adds	r6, #1
 8007124:	2301      	movs	r3, #1
 8007126:	1064      	asrs	r4, r4, #1
 8007128:	3508      	adds	r5, #8
 800712a:	e73f      	b.n	8006fac <_dtoa_r+0x394>
 800712c:	2602      	movs	r6, #2
 800712e:	e742      	b.n	8006fb6 <_dtoa_r+0x39e>
 8007130:	9c07      	ldr	r4, [sp, #28]
 8007132:	9704      	str	r7, [sp, #16]
 8007134:	e761      	b.n	8006ffa <_dtoa_r+0x3e2>
 8007136:	4b27      	ldr	r3, [pc, #156]	@ (80071d4 <_dtoa_r+0x5bc>)
 8007138:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800713a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800713e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007142:	4454      	add	r4, sl
 8007144:	2900      	cmp	r1, #0
 8007146:	d053      	beq.n	80071f0 <_dtoa_r+0x5d8>
 8007148:	4928      	ldr	r1, [pc, #160]	@ (80071ec <_dtoa_r+0x5d4>)
 800714a:	2000      	movs	r0, #0
 800714c:	f7f9 fb86 	bl	800085c <__aeabi_ddiv>
 8007150:	4633      	mov	r3, r6
 8007152:	462a      	mov	r2, r5
 8007154:	f7f9 f8a0 	bl	8000298 <__aeabi_dsub>
 8007158:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800715c:	4656      	mov	r6, sl
 800715e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007162:	f7f9 fd01 	bl	8000b68 <__aeabi_d2iz>
 8007166:	4605      	mov	r5, r0
 8007168:	f7f9 f9e4 	bl	8000534 <__aeabi_i2d>
 800716c:	4602      	mov	r2, r0
 800716e:	460b      	mov	r3, r1
 8007170:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007174:	f7f9 f890 	bl	8000298 <__aeabi_dsub>
 8007178:	3530      	adds	r5, #48	@ 0x30
 800717a:	4602      	mov	r2, r0
 800717c:	460b      	mov	r3, r1
 800717e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007182:	f806 5b01 	strb.w	r5, [r6], #1
 8007186:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800718a:	f7f9 fcaf 	bl	8000aec <__aeabi_dcmplt>
 800718e:	2800      	cmp	r0, #0
 8007190:	d171      	bne.n	8007276 <_dtoa_r+0x65e>
 8007192:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007196:	4911      	ldr	r1, [pc, #68]	@ (80071dc <_dtoa_r+0x5c4>)
 8007198:	2000      	movs	r0, #0
 800719a:	f7f9 f87d 	bl	8000298 <__aeabi_dsub>
 800719e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80071a2:	f7f9 fca3 	bl	8000aec <__aeabi_dcmplt>
 80071a6:	2800      	cmp	r0, #0
 80071a8:	f040 8095 	bne.w	80072d6 <_dtoa_r+0x6be>
 80071ac:	42a6      	cmp	r6, r4
 80071ae:	f43f af50 	beq.w	8007052 <_dtoa_r+0x43a>
 80071b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80071b6:	4b0a      	ldr	r3, [pc, #40]	@ (80071e0 <_dtoa_r+0x5c8>)
 80071b8:	2200      	movs	r2, #0
 80071ba:	f7f9 fa25 	bl	8000608 <__aeabi_dmul>
 80071be:	4b08      	ldr	r3, [pc, #32]	@ (80071e0 <_dtoa_r+0x5c8>)
 80071c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80071c4:	2200      	movs	r2, #0
 80071c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071ca:	f7f9 fa1d 	bl	8000608 <__aeabi_dmul>
 80071ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071d2:	e7c4      	b.n	800715e <_dtoa_r+0x546>
 80071d4:	08008bc0 	.word	0x08008bc0
 80071d8:	08008b98 	.word	0x08008b98
 80071dc:	3ff00000 	.word	0x3ff00000
 80071e0:	40240000 	.word	0x40240000
 80071e4:	401c0000 	.word	0x401c0000
 80071e8:	40140000 	.word	0x40140000
 80071ec:	3fe00000 	.word	0x3fe00000
 80071f0:	4631      	mov	r1, r6
 80071f2:	4628      	mov	r0, r5
 80071f4:	f7f9 fa08 	bl	8000608 <__aeabi_dmul>
 80071f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80071fc:	9415      	str	r4, [sp, #84]	@ 0x54
 80071fe:	4656      	mov	r6, sl
 8007200:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007204:	f7f9 fcb0 	bl	8000b68 <__aeabi_d2iz>
 8007208:	4605      	mov	r5, r0
 800720a:	f7f9 f993 	bl	8000534 <__aeabi_i2d>
 800720e:	4602      	mov	r2, r0
 8007210:	460b      	mov	r3, r1
 8007212:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007216:	f7f9 f83f 	bl	8000298 <__aeabi_dsub>
 800721a:	3530      	adds	r5, #48	@ 0x30
 800721c:	f806 5b01 	strb.w	r5, [r6], #1
 8007220:	4602      	mov	r2, r0
 8007222:	460b      	mov	r3, r1
 8007224:	42a6      	cmp	r6, r4
 8007226:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800722a:	f04f 0200 	mov.w	r2, #0
 800722e:	d124      	bne.n	800727a <_dtoa_r+0x662>
 8007230:	4bac      	ldr	r3, [pc, #688]	@ (80074e4 <_dtoa_r+0x8cc>)
 8007232:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007236:	f7f9 f831 	bl	800029c <__adddf3>
 800723a:	4602      	mov	r2, r0
 800723c:	460b      	mov	r3, r1
 800723e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007242:	f7f9 fc71 	bl	8000b28 <__aeabi_dcmpgt>
 8007246:	2800      	cmp	r0, #0
 8007248:	d145      	bne.n	80072d6 <_dtoa_r+0x6be>
 800724a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800724e:	49a5      	ldr	r1, [pc, #660]	@ (80074e4 <_dtoa_r+0x8cc>)
 8007250:	2000      	movs	r0, #0
 8007252:	f7f9 f821 	bl	8000298 <__aeabi_dsub>
 8007256:	4602      	mov	r2, r0
 8007258:	460b      	mov	r3, r1
 800725a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800725e:	f7f9 fc45 	bl	8000aec <__aeabi_dcmplt>
 8007262:	2800      	cmp	r0, #0
 8007264:	f43f aef5 	beq.w	8007052 <_dtoa_r+0x43a>
 8007268:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800726a:	1e73      	subs	r3, r6, #1
 800726c:	9315      	str	r3, [sp, #84]	@ 0x54
 800726e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007272:	2b30      	cmp	r3, #48	@ 0x30
 8007274:	d0f8      	beq.n	8007268 <_dtoa_r+0x650>
 8007276:	9f04      	ldr	r7, [sp, #16]
 8007278:	e73e      	b.n	80070f8 <_dtoa_r+0x4e0>
 800727a:	4b9b      	ldr	r3, [pc, #620]	@ (80074e8 <_dtoa_r+0x8d0>)
 800727c:	f7f9 f9c4 	bl	8000608 <__aeabi_dmul>
 8007280:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007284:	e7bc      	b.n	8007200 <_dtoa_r+0x5e8>
 8007286:	d10c      	bne.n	80072a2 <_dtoa_r+0x68a>
 8007288:	4b98      	ldr	r3, [pc, #608]	@ (80074ec <_dtoa_r+0x8d4>)
 800728a:	2200      	movs	r2, #0
 800728c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007290:	f7f9 f9ba 	bl	8000608 <__aeabi_dmul>
 8007294:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007298:	f7f9 fc3c 	bl	8000b14 <__aeabi_dcmpge>
 800729c:	2800      	cmp	r0, #0
 800729e:	f000 8157 	beq.w	8007550 <_dtoa_r+0x938>
 80072a2:	2400      	movs	r4, #0
 80072a4:	4625      	mov	r5, r4
 80072a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072a8:	43db      	mvns	r3, r3
 80072aa:	9304      	str	r3, [sp, #16]
 80072ac:	4656      	mov	r6, sl
 80072ae:	2700      	movs	r7, #0
 80072b0:	4621      	mov	r1, r4
 80072b2:	4658      	mov	r0, fp
 80072b4:	f000 fafe 	bl	80078b4 <_Bfree>
 80072b8:	2d00      	cmp	r5, #0
 80072ba:	d0dc      	beq.n	8007276 <_dtoa_r+0x65e>
 80072bc:	b12f      	cbz	r7, 80072ca <_dtoa_r+0x6b2>
 80072be:	42af      	cmp	r7, r5
 80072c0:	d003      	beq.n	80072ca <_dtoa_r+0x6b2>
 80072c2:	4639      	mov	r1, r7
 80072c4:	4658      	mov	r0, fp
 80072c6:	f000 faf5 	bl	80078b4 <_Bfree>
 80072ca:	4629      	mov	r1, r5
 80072cc:	4658      	mov	r0, fp
 80072ce:	f000 faf1 	bl	80078b4 <_Bfree>
 80072d2:	e7d0      	b.n	8007276 <_dtoa_r+0x65e>
 80072d4:	9704      	str	r7, [sp, #16]
 80072d6:	4633      	mov	r3, r6
 80072d8:	461e      	mov	r6, r3
 80072da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072de:	2a39      	cmp	r2, #57	@ 0x39
 80072e0:	d107      	bne.n	80072f2 <_dtoa_r+0x6da>
 80072e2:	459a      	cmp	sl, r3
 80072e4:	d1f8      	bne.n	80072d8 <_dtoa_r+0x6c0>
 80072e6:	9a04      	ldr	r2, [sp, #16]
 80072e8:	3201      	adds	r2, #1
 80072ea:	9204      	str	r2, [sp, #16]
 80072ec:	2230      	movs	r2, #48	@ 0x30
 80072ee:	f88a 2000 	strb.w	r2, [sl]
 80072f2:	781a      	ldrb	r2, [r3, #0]
 80072f4:	3201      	adds	r2, #1
 80072f6:	701a      	strb	r2, [r3, #0]
 80072f8:	e7bd      	b.n	8007276 <_dtoa_r+0x65e>
 80072fa:	4b7b      	ldr	r3, [pc, #492]	@ (80074e8 <_dtoa_r+0x8d0>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	f7f9 f983 	bl	8000608 <__aeabi_dmul>
 8007302:	2200      	movs	r2, #0
 8007304:	2300      	movs	r3, #0
 8007306:	4604      	mov	r4, r0
 8007308:	460d      	mov	r5, r1
 800730a:	f7f9 fbe5 	bl	8000ad8 <__aeabi_dcmpeq>
 800730e:	2800      	cmp	r0, #0
 8007310:	f43f aebb 	beq.w	800708a <_dtoa_r+0x472>
 8007314:	e6f0      	b.n	80070f8 <_dtoa_r+0x4e0>
 8007316:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007318:	2a00      	cmp	r2, #0
 800731a:	f000 80db 	beq.w	80074d4 <_dtoa_r+0x8bc>
 800731e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007320:	2a01      	cmp	r2, #1
 8007322:	f300 80bf 	bgt.w	80074a4 <_dtoa_r+0x88c>
 8007326:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007328:	2a00      	cmp	r2, #0
 800732a:	f000 80b7 	beq.w	800749c <_dtoa_r+0x884>
 800732e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007332:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007334:	4646      	mov	r6, r8
 8007336:	9a08      	ldr	r2, [sp, #32]
 8007338:	2101      	movs	r1, #1
 800733a:	441a      	add	r2, r3
 800733c:	4658      	mov	r0, fp
 800733e:	4498      	add	r8, r3
 8007340:	9208      	str	r2, [sp, #32]
 8007342:	f000 fb6b 	bl	8007a1c <__i2b>
 8007346:	4605      	mov	r5, r0
 8007348:	b15e      	cbz	r6, 8007362 <_dtoa_r+0x74a>
 800734a:	9b08      	ldr	r3, [sp, #32]
 800734c:	2b00      	cmp	r3, #0
 800734e:	dd08      	ble.n	8007362 <_dtoa_r+0x74a>
 8007350:	42b3      	cmp	r3, r6
 8007352:	9a08      	ldr	r2, [sp, #32]
 8007354:	bfa8      	it	ge
 8007356:	4633      	movge	r3, r6
 8007358:	eba8 0803 	sub.w	r8, r8, r3
 800735c:	1af6      	subs	r6, r6, r3
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	9308      	str	r3, [sp, #32]
 8007362:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007364:	b1f3      	cbz	r3, 80073a4 <_dtoa_r+0x78c>
 8007366:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007368:	2b00      	cmp	r3, #0
 800736a:	f000 80b7 	beq.w	80074dc <_dtoa_r+0x8c4>
 800736e:	b18c      	cbz	r4, 8007394 <_dtoa_r+0x77c>
 8007370:	4629      	mov	r1, r5
 8007372:	4622      	mov	r2, r4
 8007374:	4658      	mov	r0, fp
 8007376:	f000 fc11 	bl	8007b9c <__pow5mult>
 800737a:	464a      	mov	r2, r9
 800737c:	4601      	mov	r1, r0
 800737e:	4605      	mov	r5, r0
 8007380:	4658      	mov	r0, fp
 8007382:	f000 fb61 	bl	8007a48 <__multiply>
 8007386:	4649      	mov	r1, r9
 8007388:	9004      	str	r0, [sp, #16]
 800738a:	4658      	mov	r0, fp
 800738c:	f000 fa92 	bl	80078b4 <_Bfree>
 8007390:	9b04      	ldr	r3, [sp, #16]
 8007392:	4699      	mov	r9, r3
 8007394:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007396:	1b1a      	subs	r2, r3, r4
 8007398:	d004      	beq.n	80073a4 <_dtoa_r+0x78c>
 800739a:	4649      	mov	r1, r9
 800739c:	4658      	mov	r0, fp
 800739e:	f000 fbfd 	bl	8007b9c <__pow5mult>
 80073a2:	4681      	mov	r9, r0
 80073a4:	2101      	movs	r1, #1
 80073a6:	4658      	mov	r0, fp
 80073a8:	f000 fb38 	bl	8007a1c <__i2b>
 80073ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073ae:	4604      	mov	r4, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f000 81cf 	beq.w	8007754 <_dtoa_r+0xb3c>
 80073b6:	461a      	mov	r2, r3
 80073b8:	4601      	mov	r1, r0
 80073ba:	4658      	mov	r0, fp
 80073bc:	f000 fbee 	bl	8007b9c <__pow5mult>
 80073c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	4604      	mov	r4, r0
 80073c6:	f300 8095 	bgt.w	80074f4 <_dtoa_r+0x8dc>
 80073ca:	9b02      	ldr	r3, [sp, #8]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f040 8087 	bne.w	80074e0 <_dtoa_r+0x8c8>
 80073d2:	9b03      	ldr	r3, [sp, #12]
 80073d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f040 8089 	bne.w	80074f0 <_dtoa_r+0x8d8>
 80073de:	9b03      	ldr	r3, [sp, #12]
 80073e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80073e4:	0d1b      	lsrs	r3, r3, #20
 80073e6:	051b      	lsls	r3, r3, #20
 80073e8:	b12b      	cbz	r3, 80073f6 <_dtoa_r+0x7de>
 80073ea:	9b08      	ldr	r3, [sp, #32]
 80073ec:	3301      	adds	r3, #1
 80073ee:	9308      	str	r3, [sp, #32]
 80073f0:	f108 0801 	add.w	r8, r8, #1
 80073f4:	2301      	movs	r3, #1
 80073f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80073f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f000 81b0 	beq.w	8007760 <_dtoa_r+0xb48>
 8007400:	6923      	ldr	r3, [r4, #16]
 8007402:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007406:	6918      	ldr	r0, [r3, #16]
 8007408:	f000 fabc 	bl	8007984 <__hi0bits>
 800740c:	f1c0 0020 	rsb	r0, r0, #32
 8007410:	9b08      	ldr	r3, [sp, #32]
 8007412:	4418      	add	r0, r3
 8007414:	f010 001f 	ands.w	r0, r0, #31
 8007418:	d077      	beq.n	800750a <_dtoa_r+0x8f2>
 800741a:	f1c0 0320 	rsb	r3, r0, #32
 800741e:	2b04      	cmp	r3, #4
 8007420:	dd6b      	ble.n	80074fa <_dtoa_r+0x8e2>
 8007422:	9b08      	ldr	r3, [sp, #32]
 8007424:	f1c0 001c 	rsb	r0, r0, #28
 8007428:	4403      	add	r3, r0
 800742a:	4480      	add	r8, r0
 800742c:	4406      	add	r6, r0
 800742e:	9308      	str	r3, [sp, #32]
 8007430:	f1b8 0f00 	cmp.w	r8, #0
 8007434:	dd05      	ble.n	8007442 <_dtoa_r+0x82a>
 8007436:	4649      	mov	r1, r9
 8007438:	4642      	mov	r2, r8
 800743a:	4658      	mov	r0, fp
 800743c:	f000 fc08 	bl	8007c50 <__lshift>
 8007440:	4681      	mov	r9, r0
 8007442:	9b08      	ldr	r3, [sp, #32]
 8007444:	2b00      	cmp	r3, #0
 8007446:	dd05      	ble.n	8007454 <_dtoa_r+0x83c>
 8007448:	4621      	mov	r1, r4
 800744a:	461a      	mov	r2, r3
 800744c:	4658      	mov	r0, fp
 800744e:	f000 fbff 	bl	8007c50 <__lshift>
 8007452:	4604      	mov	r4, r0
 8007454:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007456:	2b00      	cmp	r3, #0
 8007458:	d059      	beq.n	800750e <_dtoa_r+0x8f6>
 800745a:	4621      	mov	r1, r4
 800745c:	4648      	mov	r0, r9
 800745e:	f000 fc63 	bl	8007d28 <__mcmp>
 8007462:	2800      	cmp	r0, #0
 8007464:	da53      	bge.n	800750e <_dtoa_r+0x8f6>
 8007466:	1e7b      	subs	r3, r7, #1
 8007468:	9304      	str	r3, [sp, #16]
 800746a:	4649      	mov	r1, r9
 800746c:	2300      	movs	r3, #0
 800746e:	220a      	movs	r2, #10
 8007470:	4658      	mov	r0, fp
 8007472:	f000 fa41 	bl	80078f8 <__multadd>
 8007476:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007478:	4681      	mov	r9, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	f000 8172 	beq.w	8007764 <_dtoa_r+0xb4c>
 8007480:	2300      	movs	r3, #0
 8007482:	4629      	mov	r1, r5
 8007484:	220a      	movs	r2, #10
 8007486:	4658      	mov	r0, fp
 8007488:	f000 fa36 	bl	80078f8 <__multadd>
 800748c:	9b00      	ldr	r3, [sp, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	4605      	mov	r5, r0
 8007492:	dc67      	bgt.n	8007564 <_dtoa_r+0x94c>
 8007494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007496:	2b02      	cmp	r3, #2
 8007498:	dc41      	bgt.n	800751e <_dtoa_r+0x906>
 800749a:	e063      	b.n	8007564 <_dtoa_r+0x94c>
 800749c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800749e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80074a2:	e746      	b.n	8007332 <_dtoa_r+0x71a>
 80074a4:	9b07      	ldr	r3, [sp, #28]
 80074a6:	1e5c      	subs	r4, r3, #1
 80074a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074aa:	42a3      	cmp	r3, r4
 80074ac:	bfbf      	itttt	lt
 80074ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80074b0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80074b2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80074b4:	1ae3      	sublt	r3, r4, r3
 80074b6:	bfb4      	ite	lt
 80074b8:	18d2      	addlt	r2, r2, r3
 80074ba:	1b1c      	subge	r4, r3, r4
 80074bc:	9b07      	ldr	r3, [sp, #28]
 80074be:	bfbc      	itt	lt
 80074c0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80074c2:	2400      	movlt	r4, #0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	bfb5      	itete	lt
 80074c8:	eba8 0603 	sublt.w	r6, r8, r3
 80074cc:	9b07      	ldrge	r3, [sp, #28]
 80074ce:	2300      	movlt	r3, #0
 80074d0:	4646      	movge	r6, r8
 80074d2:	e730      	b.n	8007336 <_dtoa_r+0x71e>
 80074d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80074d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80074d8:	4646      	mov	r6, r8
 80074da:	e735      	b.n	8007348 <_dtoa_r+0x730>
 80074dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80074de:	e75c      	b.n	800739a <_dtoa_r+0x782>
 80074e0:	2300      	movs	r3, #0
 80074e2:	e788      	b.n	80073f6 <_dtoa_r+0x7de>
 80074e4:	3fe00000 	.word	0x3fe00000
 80074e8:	40240000 	.word	0x40240000
 80074ec:	40140000 	.word	0x40140000
 80074f0:	9b02      	ldr	r3, [sp, #8]
 80074f2:	e780      	b.n	80073f6 <_dtoa_r+0x7de>
 80074f4:	2300      	movs	r3, #0
 80074f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80074f8:	e782      	b.n	8007400 <_dtoa_r+0x7e8>
 80074fa:	d099      	beq.n	8007430 <_dtoa_r+0x818>
 80074fc:	9a08      	ldr	r2, [sp, #32]
 80074fe:	331c      	adds	r3, #28
 8007500:	441a      	add	r2, r3
 8007502:	4498      	add	r8, r3
 8007504:	441e      	add	r6, r3
 8007506:	9208      	str	r2, [sp, #32]
 8007508:	e792      	b.n	8007430 <_dtoa_r+0x818>
 800750a:	4603      	mov	r3, r0
 800750c:	e7f6      	b.n	80074fc <_dtoa_r+0x8e4>
 800750e:	9b07      	ldr	r3, [sp, #28]
 8007510:	9704      	str	r7, [sp, #16]
 8007512:	2b00      	cmp	r3, #0
 8007514:	dc20      	bgt.n	8007558 <_dtoa_r+0x940>
 8007516:	9300      	str	r3, [sp, #0]
 8007518:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800751a:	2b02      	cmp	r3, #2
 800751c:	dd1e      	ble.n	800755c <_dtoa_r+0x944>
 800751e:	9b00      	ldr	r3, [sp, #0]
 8007520:	2b00      	cmp	r3, #0
 8007522:	f47f aec0 	bne.w	80072a6 <_dtoa_r+0x68e>
 8007526:	4621      	mov	r1, r4
 8007528:	2205      	movs	r2, #5
 800752a:	4658      	mov	r0, fp
 800752c:	f000 f9e4 	bl	80078f8 <__multadd>
 8007530:	4601      	mov	r1, r0
 8007532:	4604      	mov	r4, r0
 8007534:	4648      	mov	r0, r9
 8007536:	f000 fbf7 	bl	8007d28 <__mcmp>
 800753a:	2800      	cmp	r0, #0
 800753c:	f77f aeb3 	ble.w	80072a6 <_dtoa_r+0x68e>
 8007540:	4656      	mov	r6, sl
 8007542:	2331      	movs	r3, #49	@ 0x31
 8007544:	f806 3b01 	strb.w	r3, [r6], #1
 8007548:	9b04      	ldr	r3, [sp, #16]
 800754a:	3301      	adds	r3, #1
 800754c:	9304      	str	r3, [sp, #16]
 800754e:	e6ae      	b.n	80072ae <_dtoa_r+0x696>
 8007550:	9c07      	ldr	r4, [sp, #28]
 8007552:	9704      	str	r7, [sp, #16]
 8007554:	4625      	mov	r5, r4
 8007556:	e7f3      	b.n	8007540 <_dtoa_r+0x928>
 8007558:	9b07      	ldr	r3, [sp, #28]
 800755a:	9300      	str	r3, [sp, #0]
 800755c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800755e:	2b00      	cmp	r3, #0
 8007560:	f000 8104 	beq.w	800776c <_dtoa_r+0xb54>
 8007564:	2e00      	cmp	r6, #0
 8007566:	dd05      	ble.n	8007574 <_dtoa_r+0x95c>
 8007568:	4629      	mov	r1, r5
 800756a:	4632      	mov	r2, r6
 800756c:	4658      	mov	r0, fp
 800756e:	f000 fb6f 	bl	8007c50 <__lshift>
 8007572:	4605      	mov	r5, r0
 8007574:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007576:	2b00      	cmp	r3, #0
 8007578:	d05a      	beq.n	8007630 <_dtoa_r+0xa18>
 800757a:	6869      	ldr	r1, [r5, #4]
 800757c:	4658      	mov	r0, fp
 800757e:	f000 f959 	bl	8007834 <_Balloc>
 8007582:	4606      	mov	r6, r0
 8007584:	b928      	cbnz	r0, 8007592 <_dtoa_r+0x97a>
 8007586:	4b84      	ldr	r3, [pc, #528]	@ (8007798 <_dtoa_r+0xb80>)
 8007588:	4602      	mov	r2, r0
 800758a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800758e:	f7ff bb5a 	b.w	8006c46 <_dtoa_r+0x2e>
 8007592:	692a      	ldr	r2, [r5, #16]
 8007594:	3202      	adds	r2, #2
 8007596:	0092      	lsls	r2, r2, #2
 8007598:	f105 010c 	add.w	r1, r5, #12
 800759c:	300c      	adds	r0, #12
 800759e:	f000 fee9 	bl	8008374 <memcpy>
 80075a2:	2201      	movs	r2, #1
 80075a4:	4631      	mov	r1, r6
 80075a6:	4658      	mov	r0, fp
 80075a8:	f000 fb52 	bl	8007c50 <__lshift>
 80075ac:	f10a 0301 	add.w	r3, sl, #1
 80075b0:	9307      	str	r3, [sp, #28]
 80075b2:	9b00      	ldr	r3, [sp, #0]
 80075b4:	4453      	add	r3, sl
 80075b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075b8:	9b02      	ldr	r3, [sp, #8]
 80075ba:	f003 0301 	and.w	r3, r3, #1
 80075be:	462f      	mov	r7, r5
 80075c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80075c2:	4605      	mov	r5, r0
 80075c4:	9b07      	ldr	r3, [sp, #28]
 80075c6:	4621      	mov	r1, r4
 80075c8:	3b01      	subs	r3, #1
 80075ca:	4648      	mov	r0, r9
 80075cc:	9300      	str	r3, [sp, #0]
 80075ce:	f7ff fa98 	bl	8006b02 <quorem>
 80075d2:	4639      	mov	r1, r7
 80075d4:	9002      	str	r0, [sp, #8]
 80075d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80075da:	4648      	mov	r0, r9
 80075dc:	f000 fba4 	bl	8007d28 <__mcmp>
 80075e0:	462a      	mov	r2, r5
 80075e2:	9008      	str	r0, [sp, #32]
 80075e4:	4621      	mov	r1, r4
 80075e6:	4658      	mov	r0, fp
 80075e8:	f000 fbba 	bl	8007d60 <__mdiff>
 80075ec:	68c2      	ldr	r2, [r0, #12]
 80075ee:	4606      	mov	r6, r0
 80075f0:	bb02      	cbnz	r2, 8007634 <_dtoa_r+0xa1c>
 80075f2:	4601      	mov	r1, r0
 80075f4:	4648      	mov	r0, r9
 80075f6:	f000 fb97 	bl	8007d28 <__mcmp>
 80075fa:	4602      	mov	r2, r0
 80075fc:	4631      	mov	r1, r6
 80075fe:	4658      	mov	r0, fp
 8007600:	920e      	str	r2, [sp, #56]	@ 0x38
 8007602:	f000 f957 	bl	80078b4 <_Bfree>
 8007606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007608:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800760a:	9e07      	ldr	r6, [sp, #28]
 800760c:	ea43 0102 	orr.w	r1, r3, r2
 8007610:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007612:	4319      	orrs	r1, r3
 8007614:	d110      	bne.n	8007638 <_dtoa_r+0xa20>
 8007616:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800761a:	d029      	beq.n	8007670 <_dtoa_r+0xa58>
 800761c:	9b08      	ldr	r3, [sp, #32]
 800761e:	2b00      	cmp	r3, #0
 8007620:	dd02      	ble.n	8007628 <_dtoa_r+0xa10>
 8007622:	9b02      	ldr	r3, [sp, #8]
 8007624:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007628:	9b00      	ldr	r3, [sp, #0]
 800762a:	f883 8000 	strb.w	r8, [r3]
 800762e:	e63f      	b.n	80072b0 <_dtoa_r+0x698>
 8007630:	4628      	mov	r0, r5
 8007632:	e7bb      	b.n	80075ac <_dtoa_r+0x994>
 8007634:	2201      	movs	r2, #1
 8007636:	e7e1      	b.n	80075fc <_dtoa_r+0x9e4>
 8007638:	9b08      	ldr	r3, [sp, #32]
 800763a:	2b00      	cmp	r3, #0
 800763c:	db04      	blt.n	8007648 <_dtoa_r+0xa30>
 800763e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007640:	430b      	orrs	r3, r1
 8007642:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007644:	430b      	orrs	r3, r1
 8007646:	d120      	bne.n	800768a <_dtoa_r+0xa72>
 8007648:	2a00      	cmp	r2, #0
 800764a:	dded      	ble.n	8007628 <_dtoa_r+0xa10>
 800764c:	4649      	mov	r1, r9
 800764e:	2201      	movs	r2, #1
 8007650:	4658      	mov	r0, fp
 8007652:	f000 fafd 	bl	8007c50 <__lshift>
 8007656:	4621      	mov	r1, r4
 8007658:	4681      	mov	r9, r0
 800765a:	f000 fb65 	bl	8007d28 <__mcmp>
 800765e:	2800      	cmp	r0, #0
 8007660:	dc03      	bgt.n	800766a <_dtoa_r+0xa52>
 8007662:	d1e1      	bne.n	8007628 <_dtoa_r+0xa10>
 8007664:	f018 0f01 	tst.w	r8, #1
 8007668:	d0de      	beq.n	8007628 <_dtoa_r+0xa10>
 800766a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800766e:	d1d8      	bne.n	8007622 <_dtoa_r+0xa0a>
 8007670:	9a00      	ldr	r2, [sp, #0]
 8007672:	2339      	movs	r3, #57	@ 0x39
 8007674:	7013      	strb	r3, [r2, #0]
 8007676:	4633      	mov	r3, r6
 8007678:	461e      	mov	r6, r3
 800767a:	3b01      	subs	r3, #1
 800767c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007680:	2a39      	cmp	r2, #57	@ 0x39
 8007682:	d052      	beq.n	800772a <_dtoa_r+0xb12>
 8007684:	3201      	adds	r2, #1
 8007686:	701a      	strb	r2, [r3, #0]
 8007688:	e612      	b.n	80072b0 <_dtoa_r+0x698>
 800768a:	2a00      	cmp	r2, #0
 800768c:	dd07      	ble.n	800769e <_dtoa_r+0xa86>
 800768e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007692:	d0ed      	beq.n	8007670 <_dtoa_r+0xa58>
 8007694:	9a00      	ldr	r2, [sp, #0]
 8007696:	f108 0301 	add.w	r3, r8, #1
 800769a:	7013      	strb	r3, [r2, #0]
 800769c:	e608      	b.n	80072b0 <_dtoa_r+0x698>
 800769e:	9b07      	ldr	r3, [sp, #28]
 80076a0:	9a07      	ldr	r2, [sp, #28]
 80076a2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80076a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d028      	beq.n	80076fe <_dtoa_r+0xae6>
 80076ac:	4649      	mov	r1, r9
 80076ae:	2300      	movs	r3, #0
 80076b0:	220a      	movs	r2, #10
 80076b2:	4658      	mov	r0, fp
 80076b4:	f000 f920 	bl	80078f8 <__multadd>
 80076b8:	42af      	cmp	r7, r5
 80076ba:	4681      	mov	r9, r0
 80076bc:	f04f 0300 	mov.w	r3, #0
 80076c0:	f04f 020a 	mov.w	r2, #10
 80076c4:	4639      	mov	r1, r7
 80076c6:	4658      	mov	r0, fp
 80076c8:	d107      	bne.n	80076da <_dtoa_r+0xac2>
 80076ca:	f000 f915 	bl	80078f8 <__multadd>
 80076ce:	4607      	mov	r7, r0
 80076d0:	4605      	mov	r5, r0
 80076d2:	9b07      	ldr	r3, [sp, #28]
 80076d4:	3301      	adds	r3, #1
 80076d6:	9307      	str	r3, [sp, #28]
 80076d8:	e774      	b.n	80075c4 <_dtoa_r+0x9ac>
 80076da:	f000 f90d 	bl	80078f8 <__multadd>
 80076de:	4629      	mov	r1, r5
 80076e0:	4607      	mov	r7, r0
 80076e2:	2300      	movs	r3, #0
 80076e4:	220a      	movs	r2, #10
 80076e6:	4658      	mov	r0, fp
 80076e8:	f000 f906 	bl	80078f8 <__multadd>
 80076ec:	4605      	mov	r5, r0
 80076ee:	e7f0      	b.n	80076d2 <_dtoa_r+0xaba>
 80076f0:	9b00      	ldr	r3, [sp, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	bfcc      	ite	gt
 80076f6:	461e      	movgt	r6, r3
 80076f8:	2601      	movle	r6, #1
 80076fa:	4456      	add	r6, sl
 80076fc:	2700      	movs	r7, #0
 80076fe:	4649      	mov	r1, r9
 8007700:	2201      	movs	r2, #1
 8007702:	4658      	mov	r0, fp
 8007704:	f000 faa4 	bl	8007c50 <__lshift>
 8007708:	4621      	mov	r1, r4
 800770a:	4681      	mov	r9, r0
 800770c:	f000 fb0c 	bl	8007d28 <__mcmp>
 8007710:	2800      	cmp	r0, #0
 8007712:	dcb0      	bgt.n	8007676 <_dtoa_r+0xa5e>
 8007714:	d102      	bne.n	800771c <_dtoa_r+0xb04>
 8007716:	f018 0f01 	tst.w	r8, #1
 800771a:	d1ac      	bne.n	8007676 <_dtoa_r+0xa5e>
 800771c:	4633      	mov	r3, r6
 800771e:	461e      	mov	r6, r3
 8007720:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007724:	2a30      	cmp	r2, #48	@ 0x30
 8007726:	d0fa      	beq.n	800771e <_dtoa_r+0xb06>
 8007728:	e5c2      	b.n	80072b0 <_dtoa_r+0x698>
 800772a:	459a      	cmp	sl, r3
 800772c:	d1a4      	bne.n	8007678 <_dtoa_r+0xa60>
 800772e:	9b04      	ldr	r3, [sp, #16]
 8007730:	3301      	adds	r3, #1
 8007732:	9304      	str	r3, [sp, #16]
 8007734:	2331      	movs	r3, #49	@ 0x31
 8007736:	f88a 3000 	strb.w	r3, [sl]
 800773a:	e5b9      	b.n	80072b0 <_dtoa_r+0x698>
 800773c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800773e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800779c <_dtoa_r+0xb84>
 8007742:	b11b      	cbz	r3, 800774c <_dtoa_r+0xb34>
 8007744:	f10a 0308 	add.w	r3, sl, #8
 8007748:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800774a:	6013      	str	r3, [r2, #0]
 800774c:	4650      	mov	r0, sl
 800774e:	b019      	add	sp, #100	@ 0x64
 8007750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007754:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007756:	2b01      	cmp	r3, #1
 8007758:	f77f ae37 	ble.w	80073ca <_dtoa_r+0x7b2>
 800775c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800775e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007760:	2001      	movs	r0, #1
 8007762:	e655      	b.n	8007410 <_dtoa_r+0x7f8>
 8007764:	9b00      	ldr	r3, [sp, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	f77f aed6 	ble.w	8007518 <_dtoa_r+0x900>
 800776c:	4656      	mov	r6, sl
 800776e:	4621      	mov	r1, r4
 8007770:	4648      	mov	r0, r9
 8007772:	f7ff f9c6 	bl	8006b02 <quorem>
 8007776:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800777a:	f806 8b01 	strb.w	r8, [r6], #1
 800777e:	9b00      	ldr	r3, [sp, #0]
 8007780:	eba6 020a 	sub.w	r2, r6, sl
 8007784:	4293      	cmp	r3, r2
 8007786:	ddb3      	ble.n	80076f0 <_dtoa_r+0xad8>
 8007788:	4649      	mov	r1, r9
 800778a:	2300      	movs	r3, #0
 800778c:	220a      	movs	r2, #10
 800778e:	4658      	mov	r0, fp
 8007790:	f000 f8b2 	bl	80078f8 <__multadd>
 8007794:	4681      	mov	r9, r0
 8007796:	e7ea      	b.n	800776e <_dtoa_r+0xb56>
 8007798:	08008b20 	.word	0x08008b20
 800779c:	08008aa4 	.word	0x08008aa4

080077a0 <_free_r>:
 80077a0:	b538      	push	{r3, r4, r5, lr}
 80077a2:	4605      	mov	r5, r0
 80077a4:	2900      	cmp	r1, #0
 80077a6:	d041      	beq.n	800782c <_free_r+0x8c>
 80077a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077ac:	1f0c      	subs	r4, r1, #4
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	bfb8      	it	lt
 80077b2:	18e4      	addlt	r4, r4, r3
 80077b4:	f7fe fb14 	bl	8005de0 <__malloc_lock>
 80077b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007830 <_free_r+0x90>)
 80077ba:	6813      	ldr	r3, [r2, #0]
 80077bc:	b933      	cbnz	r3, 80077cc <_free_r+0x2c>
 80077be:	6063      	str	r3, [r4, #4]
 80077c0:	6014      	str	r4, [r2, #0]
 80077c2:	4628      	mov	r0, r5
 80077c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077c8:	f7fe bb10 	b.w	8005dec <__malloc_unlock>
 80077cc:	42a3      	cmp	r3, r4
 80077ce:	d908      	bls.n	80077e2 <_free_r+0x42>
 80077d0:	6820      	ldr	r0, [r4, #0]
 80077d2:	1821      	adds	r1, r4, r0
 80077d4:	428b      	cmp	r3, r1
 80077d6:	bf01      	itttt	eq
 80077d8:	6819      	ldreq	r1, [r3, #0]
 80077da:	685b      	ldreq	r3, [r3, #4]
 80077dc:	1809      	addeq	r1, r1, r0
 80077de:	6021      	streq	r1, [r4, #0]
 80077e0:	e7ed      	b.n	80077be <_free_r+0x1e>
 80077e2:	461a      	mov	r2, r3
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	b10b      	cbz	r3, 80077ec <_free_r+0x4c>
 80077e8:	42a3      	cmp	r3, r4
 80077ea:	d9fa      	bls.n	80077e2 <_free_r+0x42>
 80077ec:	6811      	ldr	r1, [r2, #0]
 80077ee:	1850      	adds	r0, r2, r1
 80077f0:	42a0      	cmp	r0, r4
 80077f2:	d10b      	bne.n	800780c <_free_r+0x6c>
 80077f4:	6820      	ldr	r0, [r4, #0]
 80077f6:	4401      	add	r1, r0
 80077f8:	1850      	adds	r0, r2, r1
 80077fa:	4283      	cmp	r3, r0
 80077fc:	6011      	str	r1, [r2, #0]
 80077fe:	d1e0      	bne.n	80077c2 <_free_r+0x22>
 8007800:	6818      	ldr	r0, [r3, #0]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	6053      	str	r3, [r2, #4]
 8007806:	4408      	add	r0, r1
 8007808:	6010      	str	r0, [r2, #0]
 800780a:	e7da      	b.n	80077c2 <_free_r+0x22>
 800780c:	d902      	bls.n	8007814 <_free_r+0x74>
 800780e:	230c      	movs	r3, #12
 8007810:	602b      	str	r3, [r5, #0]
 8007812:	e7d6      	b.n	80077c2 <_free_r+0x22>
 8007814:	6820      	ldr	r0, [r4, #0]
 8007816:	1821      	adds	r1, r4, r0
 8007818:	428b      	cmp	r3, r1
 800781a:	bf04      	itt	eq
 800781c:	6819      	ldreq	r1, [r3, #0]
 800781e:	685b      	ldreq	r3, [r3, #4]
 8007820:	6063      	str	r3, [r4, #4]
 8007822:	bf04      	itt	eq
 8007824:	1809      	addeq	r1, r1, r0
 8007826:	6021      	streq	r1, [r4, #0]
 8007828:	6054      	str	r4, [r2, #4]
 800782a:	e7ca      	b.n	80077c2 <_free_r+0x22>
 800782c:	bd38      	pop	{r3, r4, r5, pc}
 800782e:	bf00      	nop
 8007830:	200003a0 	.word	0x200003a0

08007834 <_Balloc>:
 8007834:	b570      	push	{r4, r5, r6, lr}
 8007836:	69c6      	ldr	r6, [r0, #28]
 8007838:	4604      	mov	r4, r0
 800783a:	460d      	mov	r5, r1
 800783c:	b976      	cbnz	r6, 800785c <_Balloc+0x28>
 800783e:	2010      	movs	r0, #16
 8007840:	f7fe fa1c 	bl	8005c7c <malloc>
 8007844:	4602      	mov	r2, r0
 8007846:	61e0      	str	r0, [r4, #28]
 8007848:	b920      	cbnz	r0, 8007854 <_Balloc+0x20>
 800784a:	4b18      	ldr	r3, [pc, #96]	@ (80078ac <_Balloc+0x78>)
 800784c:	4818      	ldr	r0, [pc, #96]	@ (80078b0 <_Balloc+0x7c>)
 800784e:	216b      	movs	r1, #107	@ 0x6b
 8007850:	f000 fd9e 	bl	8008390 <__assert_func>
 8007854:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007858:	6006      	str	r6, [r0, #0]
 800785a:	60c6      	str	r6, [r0, #12]
 800785c:	69e6      	ldr	r6, [r4, #28]
 800785e:	68f3      	ldr	r3, [r6, #12]
 8007860:	b183      	cbz	r3, 8007884 <_Balloc+0x50>
 8007862:	69e3      	ldr	r3, [r4, #28]
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800786a:	b9b8      	cbnz	r0, 800789c <_Balloc+0x68>
 800786c:	2101      	movs	r1, #1
 800786e:	fa01 f605 	lsl.w	r6, r1, r5
 8007872:	1d72      	adds	r2, r6, #5
 8007874:	0092      	lsls	r2, r2, #2
 8007876:	4620      	mov	r0, r4
 8007878:	f000 fda8 	bl	80083cc <_calloc_r>
 800787c:	b160      	cbz	r0, 8007898 <_Balloc+0x64>
 800787e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007882:	e00e      	b.n	80078a2 <_Balloc+0x6e>
 8007884:	2221      	movs	r2, #33	@ 0x21
 8007886:	2104      	movs	r1, #4
 8007888:	4620      	mov	r0, r4
 800788a:	f000 fd9f 	bl	80083cc <_calloc_r>
 800788e:	69e3      	ldr	r3, [r4, #28]
 8007890:	60f0      	str	r0, [r6, #12]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1e4      	bne.n	8007862 <_Balloc+0x2e>
 8007898:	2000      	movs	r0, #0
 800789a:	bd70      	pop	{r4, r5, r6, pc}
 800789c:	6802      	ldr	r2, [r0, #0]
 800789e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80078a2:	2300      	movs	r3, #0
 80078a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80078a8:	e7f7      	b.n	800789a <_Balloc+0x66>
 80078aa:	bf00      	nop
 80078ac:	08008ab1 	.word	0x08008ab1
 80078b0:	08008b31 	.word	0x08008b31

080078b4 <_Bfree>:
 80078b4:	b570      	push	{r4, r5, r6, lr}
 80078b6:	69c6      	ldr	r6, [r0, #28]
 80078b8:	4605      	mov	r5, r0
 80078ba:	460c      	mov	r4, r1
 80078bc:	b976      	cbnz	r6, 80078dc <_Bfree+0x28>
 80078be:	2010      	movs	r0, #16
 80078c0:	f7fe f9dc 	bl	8005c7c <malloc>
 80078c4:	4602      	mov	r2, r0
 80078c6:	61e8      	str	r0, [r5, #28]
 80078c8:	b920      	cbnz	r0, 80078d4 <_Bfree+0x20>
 80078ca:	4b09      	ldr	r3, [pc, #36]	@ (80078f0 <_Bfree+0x3c>)
 80078cc:	4809      	ldr	r0, [pc, #36]	@ (80078f4 <_Bfree+0x40>)
 80078ce:	218f      	movs	r1, #143	@ 0x8f
 80078d0:	f000 fd5e 	bl	8008390 <__assert_func>
 80078d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078d8:	6006      	str	r6, [r0, #0]
 80078da:	60c6      	str	r6, [r0, #12]
 80078dc:	b13c      	cbz	r4, 80078ee <_Bfree+0x3a>
 80078de:	69eb      	ldr	r3, [r5, #28]
 80078e0:	6862      	ldr	r2, [r4, #4]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80078e8:	6021      	str	r1, [r4, #0]
 80078ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80078ee:	bd70      	pop	{r4, r5, r6, pc}
 80078f0:	08008ab1 	.word	0x08008ab1
 80078f4:	08008b31 	.word	0x08008b31

080078f8 <__multadd>:
 80078f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078fc:	690d      	ldr	r5, [r1, #16]
 80078fe:	4607      	mov	r7, r0
 8007900:	460c      	mov	r4, r1
 8007902:	461e      	mov	r6, r3
 8007904:	f101 0c14 	add.w	ip, r1, #20
 8007908:	2000      	movs	r0, #0
 800790a:	f8dc 3000 	ldr.w	r3, [ip]
 800790e:	b299      	uxth	r1, r3
 8007910:	fb02 6101 	mla	r1, r2, r1, r6
 8007914:	0c1e      	lsrs	r6, r3, #16
 8007916:	0c0b      	lsrs	r3, r1, #16
 8007918:	fb02 3306 	mla	r3, r2, r6, r3
 800791c:	b289      	uxth	r1, r1
 800791e:	3001      	adds	r0, #1
 8007920:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007924:	4285      	cmp	r5, r0
 8007926:	f84c 1b04 	str.w	r1, [ip], #4
 800792a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800792e:	dcec      	bgt.n	800790a <__multadd+0x12>
 8007930:	b30e      	cbz	r6, 8007976 <__multadd+0x7e>
 8007932:	68a3      	ldr	r3, [r4, #8]
 8007934:	42ab      	cmp	r3, r5
 8007936:	dc19      	bgt.n	800796c <__multadd+0x74>
 8007938:	6861      	ldr	r1, [r4, #4]
 800793a:	4638      	mov	r0, r7
 800793c:	3101      	adds	r1, #1
 800793e:	f7ff ff79 	bl	8007834 <_Balloc>
 8007942:	4680      	mov	r8, r0
 8007944:	b928      	cbnz	r0, 8007952 <__multadd+0x5a>
 8007946:	4602      	mov	r2, r0
 8007948:	4b0c      	ldr	r3, [pc, #48]	@ (800797c <__multadd+0x84>)
 800794a:	480d      	ldr	r0, [pc, #52]	@ (8007980 <__multadd+0x88>)
 800794c:	21ba      	movs	r1, #186	@ 0xba
 800794e:	f000 fd1f 	bl	8008390 <__assert_func>
 8007952:	6922      	ldr	r2, [r4, #16]
 8007954:	3202      	adds	r2, #2
 8007956:	f104 010c 	add.w	r1, r4, #12
 800795a:	0092      	lsls	r2, r2, #2
 800795c:	300c      	adds	r0, #12
 800795e:	f000 fd09 	bl	8008374 <memcpy>
 8007962:	4621      	mov	r1, r4
 8007964:	4638      	mov	r0, r7
 8007966:	f7ff ffa5 	bl	80078b4 <_Bfree>
 800796a:	4644      	mov	r4, r8
 800796c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007970:	3501      	adds	r5, #1
 8007972:	615e      	str	r6, [r3, #20]
 8007974:	6125      	str	r5, [r4, #16]
 8007976:	4620      	mov	r0, r4
 8007978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800797c:	08008b20 	.word	0x08008b20
 8007980:	08008b31 	.word	0x08008b31

08007984 <__hi0bits>:
 8007984:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007988:	4603      	mov	r3, r0
 800798a:	bf36      	itet	cc
 800798c:	0403      	lslcc	r3, r0, #16
 800798e:	2000      	movcs	r0, #0
 8007990:	2010      	movcc	r0, #16
 8007992:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007996:	bf3c      	itt	cc
 8007998:	021b      	lslcc	r3, r3, #8
 800799a:	3008      	addcc	r0, #8
 800799c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079a0:	bf3c      	itt	cc
 80079a2:	011b      	lslcc	r3, r3, #4
 80079a4:	3004      	addcc	r0, #4
 80079a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80079aa:	bf3c      	itt	cc
 80079ac:	009b      	lslcc	r3, r3, #2
 80079ae:	3002      	addcc	r0, #2
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	db05      	blt.n	80079c0 <__hi0bits+0x3c>
 80079b4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80079b8:	f100 0001 	add.w	r0, r0, #1
 80079bc:	bf08      	it	eq
 80079be:	2020      	moveq	r0, #32
 80079c0:	4770      	bx	lr

080079c2 <__lo0bits>:
 80079c2:	6803      	ldr	r3, [r0, #0]
 80079c4:	4602      	mov	r2, r0
 80079c6:	f013 0007 	ands.w	r0, r3, #7
 80079ca:	d00b      	beq.n	80079e4 <__lo0bits+0x22>
 80079cc:	07d9      	lsls	r1, r3, #31
 80079ce:	d421      	bmi.n	8007a14 <__lo0bits+0x52>
 80079d0:	0798      	lsls	r0, r3, #30
 80079d2:	bf49      	itett	mi
 80079d4:	085b      	lsrmi	r3, r3, #1
 80079d6:	089b      	lsrpl	r3, r3, #2
 80079d8:	2001      	movmi	r0, #1
 80079da:	6013      	strmi	r3, [r2, #0]
 80079dc:	bf5c      	itt	pl
 80079de:	6013      	strpl	r3, [r2, #0]
 80079e0:	2002      	movpl	r0, #2
 80079e2:	4770      	bx	lr
 80079e4:	b299      	uxth	r1, r3
 80079e6:	b909      	cbnz	r1, 80079ec <__lo0bits+0x2a>
 80079e8:	0c1b      	lsrs	r3, r3, #16
 80079ea:	2010      	movs	r0, #16
 80079ec:	b2d9      	uxtb	r1, r3
 80079ee:	b909      	cbnz	r1, 80079f4 <__lo0bits+0x32>
 80079f0:	3008      	adds	r0, #8
 80079f2:	0a1b      	lsrs	r3, r3, #8
 80079f4:	0719      	lsls	r1, r3, #28
 80079f6:	bf04      	itt	eq
 80079f8:	091b      	lsreq	r3, r3, #4
 80079fa:	3004      	addeq	r0, #4
 80079fc:	0799      	lsls	r1, r3, #30
 80079fe:	bf04      	itt	eq
 8007a00:	089b      	lsreq	r3, r3, #2
 8007a02:	3002      	addeq	r0, #2
 8007a04:	07d9      	lsls	r1, r3, #31
 8007a06:	d403      	bmi.n	8007a10 <__lo0bits+0x4e>
 8007a08:	085b      	lsrs	r3, r3, #1
 8007a0a:	f100 0001 	add.w	r0, r0, #1
 8007a0e:	d003      	beq.n	8007a18 <__lo0bits+0x56>
 8007a10:	6013      	str	r3, [r2, #0]
 8007a12:	4770      	bx	lr
 8007a14:	2000      	movs	r0, #0
 8007a16:	4770      	bx	lr
 8007a18:	2020      	movs	r0, #32
 8007a1a:	4770      	bx	lr

08007a1c <__i2b>:
 8007a1c:	b510      	push	{r4, lr}
 8007a1e:	460c      	mov	r4, r1
 8007a20:	2101      	movs	r1, #1
 8007a22:	f7ff ff07 	bl	8007834 <_Balloc>
 8007a26:	4602      	mov	r2, r0
 8007a28:	b928      	cbnz	r0, 8007a36 <__i2b+0x1a>
 8007a2a:	4b05      	ldr	r3, [pc, #20]	@ (8007a40 <__i2b+0x24>)
 8007a2c:	4805      	ldr	r0, [pc, #20]	@ (8007a44 <__i2b+0x28>)
 8007a2e:	f240 1145 	movw	r1, #325	@ 0x145
 8007a32:	f000 fcad 	bl	8008390 <__assert_func>
 8007a36:	2301      	movs	r3, #1
 8007a38:	6144      	str	r4, [r0, #20]
 8007a3a:	6103      	str	r3, [r0, #16]
 8007a3c:	bd10      	pop	{r4, pc}
 8007a3e:	bf00      	nop
 8007a40:	08008b20 	.word	0x08008b20
 8007a44:	08008b31 	.word	0x08008b31

08007a48 <__multiply>:
 8007a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a4c:	4614      	mov	r4, r2
 8007a4e:	690a      	ldr	r2, [r1, #16]
 8007a50:	6923      	ldr	r3, [r4, #16]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	bfa8      	it	ge
 8007a56:	4623      	movge	r3, r4
 8007a58:	460f      	mov	r7, r1
 8007a5a:	bfa4      	itt	ge
 8007a5c:	460c      	movge	r4, r1
 8007a5e:	461f      	movge	r7, r3
 8007a60:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007a64:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007a68:	68a3      	ldr	r3, [r4, #8]
 8007a6a:	6861      	ldr	r1, [r4, #4]
 8007a6c:	eb0a 0609 	add.w	r6, sl, r9
 8007a70:	42b3      	cmp	r3, r6
 8007a72:	b085      	sub	sp, #20
 8007a74:	bfb8      	it	lt
 8007a76:	3101      	addlt	r1, #1
 8007a78:	f7ff fedc 	bl	8007834 <_Balloc>
 8007a7c:	b930      	cbnz	r0, 8007a8c <__multiply+0x44>
 8007a7e:	4602      	mov	r2, r0
 8007a80:	4b44      	ldr	r3, [pc, #272]	@ (8007b94 <__multiply+0x14c>)
 8007a82:	4845      	ldr	r0, [pc, #276]	@ (8007b98 <__multiply+0x150>)
 8007a84:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007a88:	f000 fc82 	bl	8008390 <__assert_func>
 8007a8c:	f100 0514 	add.w	r5, r0, #20
 8007a90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a94:	462b      	mov	r3, r5
 8007a96:	2200      	movs	r2, #0
 8007a98:	4543      	cmp	r3, r8
 8007a9a:	d321      	bcc.n	8007ae0 <__multiply+0x98>
 8007a9c:	f107 0114 	add.w	r1, r7, #20
 8007aa0:	f104 0214 	add.w	r2, r4, #20
 8007aa4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007aa8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007aac:	9302      	str	r3, [sp, #8]
 8007aae:	1b13      	subs	r3, r2, r4
 8007ab0:	3b15      	subs	r3, #21
 8007ab2:	f023 0303 	bic.w	r3, r3, #3
 8007ab6:	3304      	adds	r3, #4
 8007ab8:	f104 0715 	add.w	r7, r4, #21
 8007abc:	42ba      	cmp	r2, r7
 8007abe:	bf38      	it	cc
 8007ac0:	2304      	movcc	r3, #4
 8007ac2:	9301      	str	r3, [sp, #4]
 8007ac4:	9b02      	ldr	r3, [sp, #8]
 8007ac6:	9103      	str	r1, [sp, #12]
 8007ac8:	428b      	cmp	r3, r1
 8007aca:	d80c      	bhi.n	8007ae6 <__multiply+0x9e>
 8007acc:	2e00      	cmp	r6, #0
 8007ace:	dd03      	ble.n	8007ad8 <__multiply+0x90>
 8007ad0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d05b      	beq.n	8007b90 <__multiply+0x148>
 8007ad8:	6106      	str	r6, [r0, #16]
 8007ada:	b005      	add	sp, #20
 8007adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae0:	f843 2b04 	str.w	r2, [r3], #4
 8007ae4:	e7d8      	b.n	8007a98 <__multiply+0x50>
 8007ae6:	f8b1 a000 	ldrh.w	sl, [r1]
 8007aea:	f1ba 0f00 	cmp.w	sl, #0
 8007aee:	d024      	beq.n	8007b3a <__multiply+0xf2>
 8007af0:	f104 0e14 	add.w	lr, r4, #20
 8007af4:	46a9      	mov	r9, r5
 8007af6:	f04f 0c00 	mov.w	ip, #0
 8007afa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007afe:	f8d9 3000 	ldr.w	r3, [r9]
 8007b02:	fa1f fb87 	uxth.w	fp, r7
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	fb0a 330b 	mla	r3, sl, fp, r3
 8007b0c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007b10:	f8d9 7000 	ldr.w	r7, [r9]
 8007b14:	4463      	add	r3, ip
 8007b16:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007b1a:	fb0a c70b 	mla	r7, sl, fp, ip
 8007b1e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007b28:	4572      	cmp	r2, lr
 8007b2a:	f849 3b04 	str.w	r3, [r9], #4
 8007b2e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007b32:	d8e2      	bhi.n	8007afa <__multiply+0xb2>
 8007b34:	9b01      	ldr	r3, [sp, #4]
 8007b36:	f845 c003 	str.w	ip, [r5, r3]
 8007b3a:	9b03      	ldr	r3, [sp, #12]
 8007b3c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007b40:	3104      	adds	r1, #4
 8007b42:	f1b9 0f00 	cmp.w	r9, #0
 8007b46:	d021      	beq.n	8007b8c <__multiply+0x144>
 8007b48:	682b      	ldr	r3, [r5, #0]
 8007b4a:	f104 0c14 	add.w	ip, r4, #20
 8007b4e:	46ae      	mov	lr, r5
 8007b50:	f04f 0a00 	mov.w	sl, #0
 8007b54:	f8bc b000 	ldrh.w	fp, [ip]
 8007b58:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007b5c:	fb09 770b 	mla	r7, r9, fp, r7
 8007b60:	4457      	add	r7, sl
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007b68:	f84e 3b04 	str.w	r3, [lr], #4
 8007b6c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007b70:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b74:	f8be 3000 	ldrh.w	r3, [lr]
 8007b78:	fb09 330a 	mla	r3, r9, sl, r3
 8007b7c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007b80:	4562      	cmp	r2, ip
 8007b82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b86:	d8e5      	bhi.n	8007b54 <__multiply+0x10c>
 8007b88:	9f01      	ldr	r7, [sp, #4]
 8007b8a:	51eb      	str	r3, [r5, r7]
 8007b8c:	3504      	adds	r5, #4
 8007b8e:	e799      	b.n	8007ac4 <__multiply+0x7c>
 8007b90:	3e01      	subs	r6, #1
 8007b92:	e79b      	b.n	8007acc <__multiply+0x84>
 8007b94:	08008b20 	.word	0x08008b20
 8007b98:	08008b31 	.word	0x08008b31

08007b9c <__pow5mult>:
 8007b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ba0:	4615      	mov	r5, r2
 8007ba2:	f012 0203 	ands.w	r2, r2, #3
 8007ba6:	4607      	mov	r7, r0
 8007ba8:	460e      	mov	r6, r1
 8007baa:	d007      	beq.n	8007bbc <__pow5mult+0x20>
 8007bac:	4c25      	ldr	r4, [pc, #148]	@ (8007c44 <__pow5mult+0xa8>)
 8007bae:	3a01      	subs	r2, #1
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007bb6:	f7ff fe9f 	bl	80078f8 <__multadd>
 8007bba:	4606      	mov	r6, r0
 8007bbc:	10ad      	asrs	r5, r5, #2
 8007bbe:	d03d      	beq.n	8007c3c <__pow5mult+0xa0>
 8007bc0:	69fc      	ldr	r4, [r7, #28]
 8007bc2:	b97c      	cbnz	r4, 8007be4 <__pow5mult+0x48>
 8007bc4:	2010      	movs	r0, #16
 8007bc6:	f7fe f859 	bl	8005c7c <malloc>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	61f8      	str	r0, [r7, #28]
 8007bce:	b928      	cbnz	r0, 8007bdc <__pow5mult+0x40>
 8007bd0:	4b1d      	ldr	r3, [pc, #116]	@ (8007c48 <__pow5mult+0xac>)
 8007bd2:	481e      	ldr	r0, [pc, #120]	@ (8007c4c <__pow5mult+0xb0>)
 8007bd4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007bd8:	f000 fbda 	bl	8008390 <__assert_func>
 8007bdc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007be0:	6004      	str	r4, [r0, #0]
 8007be2:	60c4      	str	r4, [r0, #12]
 8007be4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007be8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007bec:	b94c      	cbnz	r4, 8007c02 <__pow5mult+0x66>
 8007bee:	f240 2171 	movw	r1, #625	@ 0x271
 8007bf2:	4638      	mov	r0, r7
 8007bf4:	f7ff ff12 	bl	8007a1c <__i2b>
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	f8c8 0008 	str.w	r0, [r8, #8]
 8007bfe:	4604      	mov	r4, r0
 8007c00:	6003      	str	r3, [r0, #0]
 8007c02:	f04f 0900 	mov.w	r9, #0
 8007c06:	07eb      	lsls	r3, r5, #31
 8007c08:	d50a      	bpl.n	8007c20 <__pow5mult+0x84>
 8007c0a:	4631      	mov	r1, r6
 8007c0c:	4622      	mov	r2, r4
 8007c0e:	4638      	mov	r0, r7
 8007c10:	f7ff ff1a 	bl	8007a48 <__multiply>
 8007c14:	4631      	mov	r1, r6
 8007c16:	4680      	mov	r8, r0
 8007c18:	4638      	mov	r0, r7
 8007c1a:	f7ff fe4b 	bl	80078b4 <_Bfree>
 8007c1e:	4646      	mov	r6, r8
 8007c20:	106d      	asrs	r5, r5, #1
 8007c22:	d00b      	beq.n	8007c3c <__pow5mult+0xa0>
 8007c24:	6820      	ldr	r0, [r4, #0]
 8007c26:	b938      	cbnz	r0, 8007c38 <__pow5mult+0x9c>
 8007c28:	4622      	mov	r2, r4
 8007c2a:	4621      	mov	r1, r4
 8007c2c:	4638      	mov	r0, r7
 8007c2e:	f7ff ff0b 	bl	8007a48 <__multiply>
 8007c32:	6020      	str	r0, [r4, #0]
 8007c34:	f8c0 9000 	str.w	r9, [r0]
 8007c38:	4604      	mov	r4, r0
 8007c3a:	e7e4      	b.n	8007c06 <__pow5mult+0x6a>
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c42:	bf00      	nop
 8007c44:	08008b8c 	.word	0x08008b8c
 8007c48:	08008ab1 	.word	0x08008ab1
 8007c4c:	08008b31 	.word	0x08008b31

08007c50 <__lshift>:
 8007c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c54:	460c      	mov	r4, r1
 8007c56:	6849      	ldr	r1, [r1, #4]
 8007c58:	6923      	ldr	r3, [r4, #16]
 8007c5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c5e:	68a3      	ldr	r3, [r4, #8]
 8007c60:	4607      	mov	r7, r0
 8007c62:	4691      	mov	r9, r2
 8007c64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c68:	f108 0601 	add.w	r6, r8, #1
 8007c6c:	42b3      	cmp	r3, r6
 8007c6e:	db0b      	blt.n	8007c88 <__lshift+0x38>
 8007c70:	4638      	mov	r0, r7
 8007c72:	f7ff fddf 	bl	8007834 <_Balloc>
 8007c76:	4605      	mov	r5, r0
 8007c78:	b948      	cbnz	r0, 8007c8e <__lshift+0x3e>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	4b28      	ldr	r3, [pc, #160]	@ (8007d20 <__lshift+0xd0>)
 8007c7e:	4829      	ldr	r0, [pc, #164]	@ (8007d24 <__lshift+0xd4>)
 8007c80:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007c84:	f000 fb84 	bl	8008390 <__assert_func>
 8007c88:	3101      	adds	r1, #1
 8007c8a:	005b      	lsls	r3, r3, #1
 8007c8c:	e7ee      	b.n	8007c6c <__lshift+0x1c>
 8007c8e:	2300      	movs	r3, #0
 8007c90:	f100 0114 	add.w	r1, r0, #20
 8007c94:	f100 0210 	add.w	r2, r0, #16
 8007c98:	4618      	mov	r0, r3
 8007c9a:	4553      	cmp	r3, sl
 8007c9c:	db33      	blt.n	8007d06 <__lshift+0xb6>
 8007c9e:	6920      	ldr	r0, [r4, #16]
 8007ca0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ca4:	f104 0314 	add.w	r3, r4, #20
 8007ca8:	f019 091f 	ands.w	r9, r9, #31
 8007cac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007cb0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007cb4:	d02b      	beq.n	8007d0e <__lshift+0xbe>
 8007cb6:	f1c9 0e20 	rsb	lr, r9, #32
 8007cba:	468a      	mov	sl, r1
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	6818      	ldr	r0, [r3, #0]
 8007cc0:	fa00 f009 	lsl.w	r0, r0, r9
 8007cc4:	4310      	orrs	r0, r2
 8007cc6:	f84a 0b04 	str.w	r0, [sl], #4
 8007cca:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cce:	459c      	cmp	ip, r3
 8007cd0:	fa22 f20e 	lsr.w	r2, r2, lr
 8007cd4:	d8f3      	bhi.n	8007cbe <__lshift+0x6e>
 8007cd6:	ebac 0304 	sub.w	r3, ip, r4
 8007cda:	3b15      	subs	r3, #21
 8007cdc:	f023 0303 	bic.w	r3, r3, #3
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	f104 0015 	add.w	r0, r4, #21
 8007ce6:	4584      	cmp	ip, r0
 8007ce8:	bf38      	it	cc
 8007cea:	2304      	movcc	r3, #4
 8007cec:	50ca      	str	r2, [r1, r3]
 8007cee:	b10a      	cbz	r2, 8007cf4 <__lshift+0xa4>
 8007cf0:	f108 0602 	add.w	r6, r8, #2
 8007cf4:	3e01      	subs	r6, #1
 8007cf6:	4638      	mov	r0, r7
 8007cf8:	612e      	str	r6, [r5, #16]
 8007cfa:	4621      	mov	r1, r4
 8007cfc:	f7ff fdda 	bl	80078b4 <_Bfree>
 8007d00:	4628      	mov	r0, r5
 8007d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d06:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	e7c5      	b.n	8007c9a <__lshift+0x4a>
 8007d0e:	3904      	subs	r1, #4
 8007d10:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d14:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d18:	459c      	cmp	ip, r3
 8007d1a:	d8f9      	bhi.n	8007d10 <__lshift+0xc0>
 8007d1c:	e7ea      	b.n	8007cf4 <__lshift+0xa4>
 8007d1e:	bf00      	nop
 8007d20:	08008b20 	.word	0x08008b20
 8007d24:	08008b31 	.word	0x08008b31

08007d28 <__mcmp>:
 8007d28:	690a      	ldr	r2, [r1, #16]
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	6900      	ldr	r0, [r0, #16]
 8007d2e:	1a80      	subs	r0, r0, r2
 8007d30:	b530      	push	{r4, r5, lr}
 8007d32:	d10e      	bne.n	8007d52 <__mcmp+0x2a>
 8007d34:	3314      	adds	r3, #20
 8007d36:	3114      	adds	r1, #20
 8007d38:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007d3c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007d40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007d44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007d48:	4295      	cmp	r5, r2
 8007d4a:	d003      	beq.n	8007d54 <__mcmp+0x2c>
 8007d4c:	d205      	bcs.n	8007d5a <__mcmp+0x32>
 8007d4e:	f04f 30ff 	mov.w	r0, #4294967295
 8007d52:	bd30      	pop	{r4, r5, pc}
 8007d54:	42a3      	cmp	r3, r4
 8007d56:	d3f3      	bcc.n	8007d40 <__mcmp+0x18>
 8007d58:	e7fb      	b.n	8007d52 <__mcmp+0x2a>
 8007d5a:	2001      	movs	r0, #1
 8007d5c:	e7f9      	b.n	8007d52 <__mcmp+0x2a>
	...

08007d60 <__mdiff>:
 8007d60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d64:	4689      	mov	r9, r1
 8007d66:	4606      	mov	r6, r0
 8007d68:	4611      	mov	r1, r2
 8007d6a:	4648      	mov	r0, r9
 8007d6c:	4614      	mov	r4, r2
 8007d6e:	f7ff ffdb 	bl	8007d28 <__mcmp>
 8007d72:	1e05      	subs	r5, r0, #0
 8007d74:	d112      	bne.n	8007d9c <__mdiff+0x3c>
 8007d76:	4629      	mov	r1, r5
 8007d78:	4630      	mov	r0, r6
 8007d7a:	f7ff fd5b 	bl	8007834 <_Balloc>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	b928      	cbnz	r0, 8007d8e <__mdiff+0x2e>
 8007d82:	4b3f      	ldr	r3, [pc, #252]	@ (8007e80 <__mdiff+0x120>)
 8007d84:	f240 2137 	movw	r1, #567	@ 0x237
 8007d88:	483e      	ldr	r0, [pc, #248]	@ (8007e84 <__mdiff+0x124>)
 8007d8a:	f000 fb01 	bl	8008390 <__assert_func>
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d94:	4610      	mov	r0, r2
 8007d96:	b003      	add	sp, #12
 8007d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d9c:	bfbc      	itt	lt
 8007d9e:	464b      	movlt	r3, r9
 8007da0:	46a1      	movlt	r9, r4
 8007da2:	4630      	mov	r0, r6
 8007da4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007da8:	bfba      	itte	lt
 8007daa:	461c      	movlt	r4, r3
 8007dac:	2501      	movlt	r5, #1
 8007dae:	2500      	movge	r5, #0
 8007db0:	f7ff fd40 	bl	8007834 <_Balloc>
 8007db4:	4602      	mov	r2, r0
 8007db6:	b918      	cbnz	r0, 8007dc0 <__mdiff+0x60>
 8007db8:	4b31      	ldr	r3, [pc, #196]	@ (8007e80 <__mdiff+0x120>)
 8007dba:	f240 2145 	movw	r1, #581	@ 0x245
 8007dbe:	e7e3      	b.n	8007d88 <__mdiff+0x28>
 8007dc0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007dc4:	6926      	ldr	r6, [r4, #16]
 8007dc6:	60c5      	str	r5, [r0, #12]
 8007dc8:	f109 0310 	add.w	r3, r9, #16
 8007dcc:	f109 0514 	add.w	r5, r9, #20
 8007dd0:	f104 0e14 	add.w	lr, r4, #20
 8007dd4:	f100 0b14 	add.w	fp, r0, #20
 8007dd8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007ddc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007de0:	9301      	str	r3, [sp, #4]
 8007de2:	46d9      	mov	r9, fp
 8007de4:	f04f 0c00 	mov.w	ip, #0
 8007de8:	9b01      	ldr	r3, [sp, #4]
 8007dea:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007dee:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007df2:	9301      	str	r3, [sp, #4]
 8007df4:	fa1f f38a 	uxth.w	r3, sl
 8007df8:	4619      	mov	r1, r3
 8007dfa:	b283      	uxth	r3, r0
 8007dfc:	1acb      	subs	r3, r1, r3
 8007dfe:	0c00      	lsrs	r0, r0, #16
 8007e00:	4463      	add	r3, ip
 8007e02:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007e06:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007e10:	4576      	cmp	r6, lr
 8007e12:	f849 3b04 	str.w	r3, [r9], #4
 8007e16:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e1a:	d8e5      	bhi.n	8007de8 <__mdiff+0x88>
 8007e1c:	1b33      	subs	r3, r6, r4
 8007e1e:	3b15      	subs	r3, #21
 8007e20:	f023 0303 	bic.w	r3, r3, #3
 8007e24:	3415      	adds	r4, #21
 8007e26:	3304      	adds	r3, #4
 8007e28:	42a6      	cmp	r6, r4
 8007e2a:	bf38      	it	cc
 8007e2c:	2304      	movcc	r3, #4
 8007e2e:	441d      	add	r5, r3
 8007e30:	445b      	add	r3, fp
 8007e32:	461e      	mov	r6, r3
 8007e34:	462c      	mov	r4, r5
 8007e36:	4544      	cmp	r4, r8
 8007e38:	d30e      	bcc.n	8007e58 <__mdiff+0xf8>
 8007e3a:	f108 0103 	add.w	r1, r8, #3
 8007e3e:	1b49      	subs	r1, r1, r5
 8007e40:	f021 0103 	bic.w	r1, r1, #3
 8007e44:	3d03      	subs	r5, #3
 8007e46:	45a8      	cmp	r8, r5
 8007e48:	bf38      	it	cc
 8007e4a:	2100      	movcc	r1, #0
 8007e4c:	440b      	add	r3, r1
 8007e4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e52:	b191      	cbz	r1, 8007e7a <__mdiff+0x11a>
 8007e54:	6117      	str	r7, [r2, #16]
 8007e56:	e79d      	b.n	8007d94 <__mdiff+0x34>
 8007e58:	f854 1b04 	ldr.w	r1, [r4], #4
 8007e5c:	46e6      	mov	lr, ip
 8007e5e:	0c08      	lsrs	r0, r1, #16
 8007e60:	fa1c fc81 	uxtah	ip, ip, r1
 8007e64:	4471      	add	r1, lr
 8007e66:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007e6a:	b289      	uxth	r1, r1
 8007e6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007e70:	f846 1b04 	str.w	r1, [r6], #4
 8007e74:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e78:	e7dd      	b.n	8007e36 <__mdiff+0xd6>
 8007e7a:	3f01      	subs	r7, #1
 8007e7c:	e7e7      	b.n	8007e4e <__mdiff+0xee>
 8007e7e:	bf00      	nop
 8007e80:	08008b20 	.word	0x08008b20
 8007e84:	08008b31 	.word	0x08008b31

08007e88 <__d2b>:
 8007e88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007e8c:	460f      	mov	r7, r1
 8007e8e:	2101      	movs	r1, #1
 8007e90:	ec59 8b10 	vmov	r8, r9, d0
 8007e94:	4616      	mov	r6, r2
 8007e96:	f7ff fccd 	bl	8007834 <_Balloc>
 8007e9a:	4604      	mov	r4, r0
 8007e9c:	b930      	cbnz	r0, 8007eac <__d2b+0x24>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	4b23      	ldr	r3, [pc, #140]	@ (8007f30 <__d2b+0xa8>)
 8007ea2:	4824      	ldr	r0, [pc, #144]	@ (8007f34 <__d2b+0xac>)
 8007ea4:	f240 310f 	movw	r1, #783	@ 0x30f
 8007ea8:	f000 fa72 	bl	8008390 <__assert_func>
 8007eac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007eb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007eb4:	b10d      	cbz	r5, 8007eba <__d2b+0x32>
 8007eb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007eba:	9301      	str	r3, [sp, #4]
 8007ebc:	f1b8 0300 	subs.w	r3, r8, #0
 8007ec0:	d023      	beq.n	8007f0a <__d2b+0x82>
 8007ec2:	4668      	mov	r0, sp
 8007ec4:	9300      	str	r3, [sp, #0]
 8007ec6:	f7ff fd7c 	bl	80079c2 <__lo0bits>
 8007eca:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007ece:	b1d0      	cbz	r0, 8007f06 <__d2b+0x7e>
 8007ed0:	f1c0 0320 	rsb	r3, r0, #32
 8007ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed8:	430b      	orrs	r3, r1
 8007eda:	40c2      	lsrs	r2, r0
 8007edc:	6163      	str	r3, [r4, #20]
 8007ede:	9201      	str	r2, [sp, #4]
 8007ee0:	9b01      	ldr	r3, [sp, #4]
 8007ee2:	61a3      	str	r3, [r4, #24]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	bf0c      	ite	eq
 8007ee8:	2201      	moveq	r2, #1
 8007eea:	2202      	movne	r2, #2
 8007eec:	6122      	str	r2, [r4, #16]
 8007eee:	b1a5      	cbz	r5, 8007f1a <__d2b+0x92>
 8007ef0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007ef4:	4405      	add	r5, r0
 8007ef6:	603d      	str	r5, [r7, #0]
 8007ef8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007efc:	6030      	str	r0, [r6, #0]
 8007efe:	4620      	mov	r0, r4
 8007f00:	b003      	add	sp, #12
 8007f02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f06:	6161      	str	r1, [r4, #20]
 8007f08:	e7ea      	b.n	8007ee0 <__d2b+0x58>
 8007f0a:	a801      	add	r0, sp, #4
 8007f0c:	f7ff fd59 	bl	80079c2 <__lo0bits>
 8007f10:	9b01      	ldr	r3, [sp, #4]
 8007f12:	6163      	str	r3, [r4, #20]
 8007f14:	3020      	adds	r0, #32
 8007f16:	2201      	movs	r2, #1
 8007f18:	e7e8      	b.n	8007eec <__d2b+0x64>
 8007f1a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007f1e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007f22:	6038      	str	r0, [r7, #0]
 8007f24:	6918      	ldr	r0, [r3, #16]
 8007f26:	f7ff fd2d 	bl	8007984 <__hi0bits>
 8007f2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007f2e:	e7e5      	b.n	8007efc <__d2b+0x74>
 8007f30:	08008b20 	.word	0x08008b20
 8007f34:	08008b31 	.word	0x08008b31

08007f38 <__ssputs_r>:
 8007f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f3c:	688e      	ldr	r6, [r1, #8]
 8007f3e:	461f      	mov	r7, r3
 8007f40:	42be      	cmp	r6, r7
 8007f42:	680b      	ldr	r3, [r1, #0]
 8007f44:	4682      	mov	sl, r0
 8007f46:	460c      	mov	r4, r1
 8007f48:	4690      	mov	r8, r2
 8007f4a:	d82d      	bhi.n	8007fa8 <__ssputs_r+0x70>
 8007f4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f50:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007f54:	d026      	beq.n	8007fa4 <__ssputs_r+0x6c>
 8007f56:	6965      	ldr	r5, [r4, #20]
 8007f58:	6909      	ldr	r1, [r1, #16]
 8007f5a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f5e:	eba3 0901 	sub.w	r9, r3, r1
 8007f62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f66:	1c7b      	adds	r3, r7, #1
 8007f68:	444b      	add	r3, r9
 8007f6a:	106d      	asrs	r5, r5, #1
 8007f6c:	429d      	cmp	r5, r3
 8007f6e:	bf38      	it	cc
 8007f70:	461d      	movcc	r5, r3
 8007f72:	0553      	lsls	r3, r2, #21
 8007f74:	d527      	bpl.n	8007fc6 <__ssputs_r+0x8e>
 8007f76:	4629      	mov	r1, r5
 8007f78:	f7fd feb2 	bl	8005ce0 <_malloc_r>
 8007f7c:	4606      	mov	r6, r0
 8007f7e:	b360      	cbz	r0, 8007fda <__ssputs_r+0xa2>
 8007f80:	6921      	ldr	r1, [r4, #16]
 8007f82:	464a      	mov	r2, r9
 8007f84:	f000 f9f6 	bl	8008374 <memcpy>
 8007f88:	89a3      	ldrh	r3, [r4, #12]
 8007f8a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f92:	81a3      	strh	r3, [r4, #12]
 8007f94:	6126      	str	r6, [r4, #16]
 8007f96:	6165      	str	r5, [r4, #20]
 8007f98:	444e      	add	r6, r9
 8007f9a:	eba5 0509 	sub.w	r5, r5, r9
 8007f9e:	6026      	str	r6, [r4, #0]
 8007fa0:	60a5      	str	r5, [r4, #8]
 8007fa2:	463e      	mov	r6, r7
 8007fa4:	42be      	cmp	r6, r7
 8007fa6:	d900      	bls.n	8007faa <__ssputs_r+0x72>
 8007fa8:	463e      	mov	r6, r7
 8007faa:	6820      	ldr	r0, [r4, #0]
 8007fac:	4632      	mov	r2, r6
 8007fae:	4641      	mov	r1, r8
 8007fb0:	f000 f9c6 	bl	8008340 <memmove>
 8007fb4:	68a3      	ldr	r3, [r4, #8]
 8007fb6:	1b9b      	subs	r3, r3, r6
 8007fb8:	60a3      	str	r3, [r4, #8]
 8007fba:	6823      	ldr	r3, [r4, #0]
 8007fbc:	4433      	add	r3, r6
 8007fbe:	6023      	str	r3, [r4, #0]
 8007fc0:	2000      	movs	r0, #0
 8007fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fc6:	462a      	mov	r2, r5
 8007fc8:	f000 fa26 	bl	8008418 <_realloc_r>
 8007fcc:	4606      	mov	r6, r0
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	d1e0      	bne.n	8007f94 <__ssputs_r+0x5c>
 8007fd2:	6921      	ldr	r1, [r4, #16]
 8007fd4:	4650      	mov	r0, sl
 8007fd6:	f7ff fbe3 	bl	80077a0 <_free_r>
 8007fda:	230c      	movs	r3, #12
 8007fdc:	f8ca 3000 	str.w	r3, [sl]
 8007fe0:	89a3      	ldrh	r3, [r4, #12]
 8007fe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fe6:	81a3      	strh	r3, [r4, #12]
 8007fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fec:	e7e9      	b.n	8007fc2 <__ssputs_r+0x8a>
	...

08007ff0 <_svfiprintf_r>:
 8007ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff4:	4698      	mov	r8, r3
 8007ff6:	898b      	ldrh	r3, [r1, #12]
 8007ff8:	061b      	lsls	r3, r3, #24
 8007ffa:	b09d      	sub	sp, #116	@ 0x74
 8007ffc:	4607      	mov	r7, r0
 8007ffe:	460d      	mov	r5, r1
 8008000:	4614      	mov	r4, r2
 8008002:	d510      	bpl.n	8008026 <_svfiprintf_r+0x36>
 8008004:	690b      	ldr	r3, [r1, #16]
 8008006:	b973      	cbnz	r3, 8008026 <_svfiprintf_r+0x36>
 8008008:	2140      	movs	r1, #64	@ 0x40
 800800a:	f7fd fe69 	bl	8005ce0 <_malloc_r>
 800800e:	6028      	str	r0, [r5, #0]
 8008010:	6128      	str	r0, [r5, #16]
 8008012:	b930      	cbnz	r0, 8008022 <_svfiprintf_r+0x32>
 8008014:	230c      	movs	r3, #12
 8008016:	603b      	str	r3, [r7, #0]
 8008018:	f04f 30ff 	mov.w	r0, #4294967295
 800801c:	b01d      	add	sp, #116	@ 0x74
 800801e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008022:	2340      	movs	r3, #64	@ 0x40
 8008024:	616b      	str	r3, [r5, #20]
 8008026:	2300      	movs	r3, #0
 8008028:	9309      	str	r3, [sp, #36]	@ 0x24
 800802a:	2320      	movs	r3, #32
 800802c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008030:	f8cd 800c 	str.w	r8, [sp, #12]
 8008034:	2330      	movs	r3, #48	@ 0x30
 8008036:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80081d4 <_svfiprintf_r+0x1e4>
 800803a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800803e:	f04f 0901 	mov.w	r9, #1
 8008042:	4623      	mov	r3, r4
 8008044:	469a      	mov	sl, r3
 8008046:	f813 2b01 	ldrb.w	r2, [r3], #1
 800804a:	b10a      	cbz	r2, 8008050 <_svfiprintf_r+0x60>
 800804c:	2a25      	cmp	r2, #37	@ 0x25
 800804e:	d1f9      	bne.n	8008044 <_svfiprintf_r+0x54>
 8008050:	ebba 0b04 	subs.w	fp, sl, r4
 8008054:	d00b      	beq.n	800806e <_svfiprintf_r+0x7e>
 8008056:	465b      	mov	r3, fp
 8008058:	4622      	mov	r2, r4
 800805a:	4629      	mov	r1, r5
 800805c:	4638      	mov	r0, r7
 800805e:	f7ff ff6b 	bl	8007f38 <__ssputs_r>
 8008062:	3001      	adds	r0, #1
 8008064:	f000 80a7 	beq.w	80081b6 <_svfiprintf_r+0x1c6>
 8008068:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800806a:	445a      	add	r2, fp
 800806c:	9209      	str	r2, [sp, #36]	@ 0x24
 800806e:	f89a 3000 	ldrb.w	r3, [sl]
 8008072:	2b00      	cmp	r3, #0
 8008074:	f000 809f 	beq.w	80081b6 <_svfiprintf_r+0x1c6>
 8008078:	2300      	movs	r3, #0
 800807a:	f04f 32ff 	mov.w	r2, #4294967295
 800807e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008082:	f10a 0a01 	add.w	sl, sl, #1
 8008086:	9304      	str	r3, [sp, #16]
 8008088:	9307      	str	r3, [sp, #28]
 800808a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800808e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008090:	4654      	mov	r4, sl
 8008092:	2205      	movs	r2, #5
 8008094:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008098:	484e      	ldr	r0, [pc, #312]	@ (80081d4 <_svfiprintf_r+0x1e4>)
 800809a:	f7f8 f8a1 	bl	80001e0 <memchr>
 800809e:	9a04      	ldr	r2, [sp, #16]
 80080a0:	b9d8      	cbnz	r0, 80080da <_svfiprintf_r+0xea>
 80080a2:	06d0      	lsls	r0, r2, #27
 80080a4:	bf44      	itt	mi
 80080a6:	2320      	movmi	r3, #32
 80080a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080ac:	0711      	lsls	r1, r2, #28
 80080ae:	bf44      	itt	mi
 80080b0:	232b      	movmi	r3, #43	@ 0x2b
 80080b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080b6:	f89a 3000 	ldrb.w	r3, [sl]
 80080ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80080bc:	d015      	beq.n	80080ea <_svfiprintf_r+0xfa>
 80080be:	9a07      	ldr	r2, [sp, #28]
 80080c0:	4654      	mov	r4, sl
 80080c2:	2000      	movs	r0, #0
 80080c4:	f04f 0c0a 	mov.w	ip, #10
 80080c8:	4621      	mov	r1, r4
 80080ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080ce:	3b30      	subs	r3, #48	@ 0x30
 80080d0:	2b09      	cmp	r3, #9
 80080d2:	d94b      	bls.n	800816c <_svfiprintf_r+0x17c>
 80080d4:	b1b0      	cbz	r0, 8008104 <_svfiprintf_r+0x114>
 80080d6:	9207      	str	r2, [sp, #28]
 80080d8:	e014      	b.n	8008104 <_svfiprintf_r+0x114>
 80080da:	eba0 0308 	sub.w	r3, r0, r8
 80080de:	fa09 f303 	lsl.w	r3, r9, r3
 80080e2:	4313      	orrs	r3, r2
 80080e4:	9304      	str	r3, [sp, #16]
 80080e6:	46a2      	mov	sl, r4
 80080e8:	e7d2      	b.n	8008090 <_svfiprintf_r+0xa0>
 80080ea:	9b03      	ldr	r3, [sp, #12]
 80080ec:	1d19      	adds	r1, r3, #4
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	9103      	str	r1, [sp, #12]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	bfbb      	ittet	lt
 80080f6:	425b      	neglt	r3, r3
 80080f8:	f042 0202 	orrlt.w	r2, r2, #2
 80080fc:	9307      	strge	r3, [sp, #28]
 80080fe:	9307      	strlt	r3, [sp, #28]
 8008100:	bfb8      	it	lt
 8008102:	9204      	strlt	r2, [sp, #16]
 8008104:	7823      	ldrb	r3, [r4, #0]
 8008106:	2b2e      	cmp	r3, #46	@ 0x2e
 8008108:	d10a      	bne.n	8008120 <_svfiprintf_r+0x130>
 800810a:	7863      	ldrb	r3, [r4, #1]
 800810c:	2b2a      	cmp	r3, #42	@ 0x2a
 800810e:	d132      	bne.n	8008176 <_svfiprintf_r+0x186>
 8008110:	9b03      	ldr	r3, [sp, #12]
 8008112:	1d1a      	adds	r2, r3, #4
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	9203      	str	r2, [sp, #12]
 8008118:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800811c:	3402      	adds	r4, #2
 800811e:	9305      	str	r3, [sp, #20]
 8008120:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80081e4 <_svfiprintf_r+0x1f4>
 8008124:	7821      	ldrb	r1, [r4, #0]
 8008126:	2203      	movs	r2, #3
 8008128:	4650      	mov	r0, sl
 800812a:	f7f8 f859 	bl	80001e0 <memchr>
 800812e:	b138      	cbz	r0, 8008140 <_svfiprintf_r+0x150>
 8008130:	9b04      	ldr	r3, [sp, #16]
 8008132:	eba0 000a 	sub.w	r0, r0, sl
 8008136:	2240      	movs	r2, #64	@ 0x40
 8008138:	4082      	lsls	r2, r0
 800813a:	4313      	orrs	r3, r2
 800813c:	3401      	adds	r4, #1
 800813e:	9304      	str	r3, [sp, #16]
 8008140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008144:	4824      	ldr	r0, [pc, #144]	@ (80081d8 <_svfiprintf_r+0x1e8>)
 8008146:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800814a:	2206      	movs	r2, #6
 800814c:	f7f8 f848 	bl	80001e0 <memchr>
 8008150:	2800      	cmp	r0, #0
 8008152:	d036      	beq.n	80081c2 <_svfiprintf_r+0x1d2>
 8008154:	4b21      	ldr	r3, [pc, #132]	@ (80081dc <_svfiprintf_r+0x1ec>)
 8008156:	bb1b      	cbnz	r3, 80081a0 <_svfiprintf_r+0x1b0>
 8008158:	9b03      	ldr	r3, [sp, #12]
 800815a:	3307      	adds	r3, #7
 800815c:	f023 0307 	bic.w	r3, r3, #7
 8008160:	3308      	adds	r3, #8
 8008162:	9303      	str	r3, [sp, #12]
 8008164:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008166:	4433      	add	r3, r6
 8008168:	9309      	str	r3, [sp, #36]	@ 0x24
 800816a:	e76a      	b.n	8008042 <_svfiprintf_r+0x52>
 800816c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008170:	460c      	mov	r4, r1
 8008172:	2001      	movs	r0, #1
 8008174:	e7a8      	b.n	80080c8 <_svfiprintf_r+0xd8>
 8008176:	2300      	movs	r3, #0
 8008178:	3401      	adds	r4, #1
 800817a:	9305      	str	r3, [sp, #20]
 800817c:	4619      	mov	r1, r3
 800817e:	f04f 0c0a 	mov.w	ip, #10
 8008182:	4620      	mov	r0, r4
 8008184:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008188:	3a30      	subs	r2, #48	@ 0x30
 800818a:	2a09      	cmp	r2, #9
 800818c:	d903      	bls.n	8008196 <_svfiprintf_r+0x1a6>
 800818e:	2b00      	cmp	r3, #0
 8008190:	d0c6      	beq.n	8008120 <_svfiprintf_r+0x130>
 8008192:	9105      	str	r1, [sp, #20]
 8008194:	e7c4      	b.n	8008120 <_svfiprintf_r+0x130>
 8008196:	fb0c 2101 	mla	r1, ip, r1, r2
 800819a:	4604      	mov	r4, r0
 800819c:	2301      	movs	r3, #1
 800819e:	e7f0      	b.n	8008182 <_svfiprintf_r+0x192>
 80081a0:	ab03      	add	r3, sp, #12
 80081a2:	9300      	str	r3, [sp, #0]
 80081a4:	462a      	mov	r2, r5
 80081a6:	4b0e      	ldr	r3, [pc, #56]	@ (80081e0 <_svfiprintf_r+0x1f0>)
 80081a8:	a904      	add	r1, sp, #16
 80081aa:	4638      	mov	r0, r7
 80081ac:	f7fd fec4 	bl	8005f38 <_printf_float>
 80081b0:	1c42      	adds	r2, r0, #1
 80081b2:	4606      	mov	r6, r0
 80081b4:	d1d6      	bne.n	8008164 <_svfiprintf_r+0x174>
 80081b6:	89ab      	ldrh	r3, [r5, #12]
 80081b8:	065b      	lsls	r3, r3, #25
 80081ba:	f53f af2d 	bmi.w	8008018 <_svfiprintf_r+0x28>
 80081be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081c0:	e72c      	b.n	800801c <_svfiprintf_r+0x2c>
 80081c2:	ab03      	add	r3, sp, #12
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	462a      	mov	r2, r5
 80081c8:	4b05      	ldr	r3, [pc, #20]	@ (80081e0 <_svfiprintf_r+0x1f0>)
 80081ca:	a904      	add	r1, sp, #16
 80081cc:	4638      	mov	r0, r7
 80081ce:	f7fe f94b 	bl	8006468 <_printf_i>
 80081d2:	e7ed      	b.n	80081b0 <_svfiprintf_r+0x1c0>
 80081d4:	08008c88 	.word	0x08008c88
 80081d8:	08008c92 	.word	0x08008c92
 80081dc:	08005f39 	.word	0x08005f39
 80081e0:	08007f39 	.word	0x08007f39
 80081e4:	08008c8e 	.word	0x08008c8e

080081e8 <__sflush_r>:
 80081e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80081ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081f0:	0716      	lsls	r6, r2, #28
 80081f2:	4605      	mov	r5, r0
 80081f4:	460c      	mov	r4, r1
 80081f6:	d454      	bmi.n	80082a2 <__sflush_r+0xba>
 80081f8:	684b      	ldr	r3, [r1, #4]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	dc02      	bgt.n	8008204 <__sflush_r+0x1c>
 80081fe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008200:	2b00      	cmp	r3, #0
 8008202:	dd48      	ble.n	8008296 <__sflush_r+0xae>
 8008204:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008206:	2e00      	cmp	r6, #0
 8008208:	d045      	beq.n	8008296 <__sflush_r+0xae>
 800820a:	2300      	movs	r3, #0
 800820c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008210:	682f      	ldr	r7, [r5, #0]
 8008212:	6a21      	ldr	r1, [r4, #32]
 8008214:	602b      	str	r3, [r5, #0]
 8008216:	d030      	beq.n	800827a <__sflush_r+0x92>
 8008218:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800821a:	89a3      	ldrh	r3, [r4, #12]
 800821c:	0759      	lsls	r1, r3, #29
 800821e:	d505      	bpl.n	800822c <__sflush_r+0x44>
 8008220:	6863      	ldr	r3, [r4, #4]
 8008222:	1ad2      	subs	r2, r2, r3
 8008224:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008226:	b10b      	cbz	r3, 800822c <__sflush_r+0x44>
 8008228:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800822a:	1ad2      	subs	r2, r2, r3
 800822c:	2300      	movs	r3, #0
 800822e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008230:	6a21      	ldr	r1, [r4, #32]
 8008232:	4628      	mov	r0, r5
 8008234:	47b0      	blx	r6
 8008236:	1c43      	adds	r3, r0, #1
 8008238:	89a3      	ldrh	r3, [r4, #12]
 800823a:	d106      	bne.n	800824a <__sflush_r+0x62>
 800823c:	6829      	ldr	r1, [r5, #0]
 800823e:	291d      	cmp	r1, #29
 8008240:	d82b      	bhi.n	800829a <__sflush_r+0xb2>
 8008242:	4a2a      	ldr	r2, [pc, #168]	@ (80082ec <__sflush_r+0x104>)
 8008244:	410a      	asrs	r2, r1
 8008246:	07d6      	lsls	r6, r2, #31
 8008248:	d427      	bmi.n	800829a <__sflush_r+0xb2>
 800824a:	2200      	movs	r2, #0
 800824c:	6062      	str	r2, [r4, #4]
 800824e:	04d9      	lsls	r1, r3, #19
 8008250:	6922      	ldr	r2, [r4, #16]
 8008252:	6022      	str	r2, [r4, #0]
 8008254:	d504      	bpl.n	8008260 <__sflush_r+0x78>
 8008256:	1c42      	adds	r2, r0, #1
 8008258:	d101      	bne.n	800825e <__sflush_r+0x76>
 800825a:	682b      	ldr	r3, [r5, #0]
 800825c:	b903      	cbnz	r3, 8008260 <__sflush_r+0x78>
 800825e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008260:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008262:	602f      	str	r7, [r5, #0]
 8008264:	b1b9      	cbz	r1, 8008296 <__sflush_r+0xae>
 8008266:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800826a:	4299      	cmp	r1, r3
 800826c:	d002      	beq.n	8008274 <__sflush_r+0x8c>
 800826e:	4628      	mov	r0, r5
 8008270:	f7ff fa96 	bl	80077a0 <_free_r>
 8008274:	2300      	movs	r3, #0
 8008276:	6363      	str	r3, [r4, #52]	@ 0x34
 8008278:	e00d      	b.n	8008296 <__sflush_r+0xae>
 800827a:	2301      	movs	r3, #1
 800827c:	4628      	mov	r0, r5
 800827e:	47b0      	blx	r6
 8008280:	4602      	mov	r2, r0
 8008282:	1c50      	adds	r0, r2, #1
 8008284:	d1c9      	bne.n	800821a <__sflush_r+0x32>
 8008286:	682b      	ldr	r3, [r5, #0]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d0c6      	beq.n	800821a <__sflush_r+0x32>
 800828c:	2b1d      	cmp	r3, #29
 800828e:	d001      	beq.n	8008294 <__sflush_r+0xac>
 8008290:	2b16      	cmp	r3, #22
 8008292:	d11e      	bne.n	80082d2 <__sflush_r+0xea>
 8008294:	602f      	str	r7, [r5, #0]
 8008296:	2000      	movs	r0, #0
 8008298:	e022      	b.n	80082e0 <__sflush_r+0xf8>
 800829a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800829e:	b21b      	sxth	r3, r3
 80082a0:	e01b      	b.n	80082da <__sflush_r+0xf2>
 80082a2:	690f      	ldr	r7, [r1, #16]
 80082a4:	2f00      	cmp	r7, #0
 80082a6:	d0f6      	beq.n	8008296 <__sflush_r+0xae>
 80082a8:	0793      	lsls	r3, r2, #30
 80082aa:	680e      	ldr	r6, [r1, #0]
 80082ac:	bf08      	it	eq
 80082ae:	694b      	ldreq	r3, [r1, #20]
 80082b0:	600f      	str	r7, [r1, #0]
 80082b2:	bf18      	it	ne
 80082b4:	2300      	movne	r3, #0
 80082b6:	eba6 0807 	sub.w	r8, r6, r7
 80082ba:	608b      	str	r3, [r1, #8]
 80082bc:	f1b8 0f00 	cmp.w	r8, #0
 80082c0:	dde9      	ble.n	8008296 <__sflush_r+0xae>
 80082c2:	6a21      	ldr	r1, [r4, #32]
 80082c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80082c6:	4643      	mov	r3, r8
 80082c8:	463a      	mov	r2, r7
 80082ca:	4628      	mov	r0, r5
 80082cc:	47b0      	blx	r6
 80082ce:	2800      	cmp	r0, #0
 80082d0:	dc08      	bgt.n	80082e4 <__sflush_r+0xfc>
 80082d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082da:	81a3      	strh	r3, [r4, #12]
 80082dc:	f04f 30ff 	mov.w	r0, #4294967295
 80082e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082e4:	4407      	add	r7, r0
 80082e6:	eba8 0800 	sub.w	r8, r8, r0
 80082ea:	e7e7      	b.n	80082bc <__sflush_r+0xd4>
 80082ec:	dfbffffe 	.word	0xdfbffffe

080082f0 <_fflush_r>:
 80082f0:	b538      	push	{r3, r4, r5, lr}
 80082f2:	690b      	ldr	r3, [r1, #16]
 80082f4:	4605      	mov	r5, r0
 80082f6:	460c      	mov	r4, r1
 80082f8:	b913      	cbnz	r3, 8008300 <_fflush_r+0x10>
 80082fa:	2500      	movs	r5, #0
 80082fc:	4628      	mov	r0, r5
 80082fe:	bd38      	pop	{r3, r4, r5, pc}
 8008300:	b118      	cbz	r0, 800830a <_fflush_r+0x1a>
 8008302:	6a03      	ldr	r3, [r0, #32]
 8008304:	b90b      	cbnz	r3, 800830a <_fflush_r+0x1a>
 8008306:	f7fe fa5b 	bl	80067c0 <__sinit>
 800830a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d0f3      	beq.n	80082fa <_fflush_r+0xa>
 8008312:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008314:	07d0      	lsls	r0, r2, #31
 8008316:	d404      	bmi.n	8008322 <_fflush_r+0x32>
 8008318:	0599      	lsls	r1, r3, #22
 800831a:	d402      	bmi.n	8008322 <_fflush_r+0x32>
 800831c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800831e:	f7fe fbee 	bl	8006afe <__retarget_lock_acquire_recursive>
 8008322:	4628      	mov	r0, r5
 8008324:	4621      	mov	r1, r4
 8008326:	f7ff ff5f 	bl	80081e8 <__sflush_r>
 800832a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800832c:	07da      	lsls	r2, r3, #31
 800832e:	4605      	mov	r5, r0
 8008330:	d4e4      	bmi.n	80082fc <_fflush_r+0xc>
 8008332:	89a3      	ldrh	r3, [r4, #12]
 8008334:	059b      	lsls	r3, r3, #22
 8008336:	d4e1      	bmi.n	80082fc <_fflush_r+0xc>
 8008338:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800833a:	f7fe fbe1 	bl	8006b00 <__retarget_lock_release_recursive>
 800833e:	e7dd      	b.n	80082fc <_fflush_r+0xc>

08008340 <memmove>:
 8008340:	4288      	cmp	r0, r1
 8008342:	b510      	push	{r4, lr}
 8008344:	eb01 0402 	add.w	r4, r1, r2
 8008348:	d902      	bls.n	8008350 <memmove+0x10>
 800834a:	4284      	cmp	r4, r0
 800834c:	4623      	mov	r3, r4
 800834e:	d807      	bhi.n	8008360 <memmove+0x20>
 8008350:	1e43      	subs	r3, r0, #1
 8008352:	42a1      	cmp	r1, r4
 8008354:	d008      	beq.n	8008368 <memmove+0x28>
 8008356:	f811 2b01 	ldrb.w	r2, [r1], #1
 800835a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800835e:	e7f8      	b.n	8008352 <memmove+0x12>
 8008360:	4402      	add	r2, r0
 8008362:	4601      	mov	r1, r0
 8008364:	428a      	cmp	r2, r1
 8008366:	d100      	bne.n	800836a <memmove+0x2a>
 8008368:	bd10      	pop	{r4, pc}
 800836a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800836e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008372:	e7f7      	b.n	8008364 <memmove+0x24>

08008374 <memcpy>:
 8008374:	440a      	add	r2, r1
 8008376:	4291      	cmp	r1, r2
 8008378:	f100 33ff 	add.w	r3, r0, #4294967295
 800837c:	d100      	bne.n	8008380 <memcpy+0xc>
 800837e:	4770      	bx	lr
 8008380:	b510      	push	{r4, lr}
 8008382:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008386:	f803 4f01 	strb.w	r4, [r3, #1]!
 800838a:	4291      	cmp	r1, r2
 800838c:	d1f9      	bne.n	8008382 <memcpy+0xe>
 800838e:	bd10      	pop	{r4, pc}

08008390 <__assert_func>:
 8008390:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008392:	4614      	mov	r4, r2
 8008394:	461a      	mov	r2, r3
 8008396:	4b09      	ldr	r3, [pc, #36]	@ (80083bc <__assert_func+0x2c>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4605      	mov	r5, r0
 800839c:	68d8      	ldr	r0, [r3, #12]
 800839e:	b954      	cbnz	r4, 80083b6 <__assert_func+0x26>
 80083a0:	4b07      	ldr	r3, [pc, #28]	@ (80083c0 <__assert_func+0x30>)
 80083a2:	461c      	mov	r4, r3
 80083a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80083a8:	9100      	str	r1, [sp, #0]
 80083aa:	462b      	mov	r3, r5
 80083ac:	4905      	ldr	r1, [pc, #20]	@ (80083c4 <__assert_func+0x34>)
 80083ae:	f000 f86f 	bl	8008490 <fiprintf>
 80083b2:	f7fd fc5b 	bl	8005c6c <abort>
 80083b6:	4b04      	ldr	r3, [pc, #16]	@ (80083c8 <__assert_func+0x38>)
 80083b8:	e7f4      	b.n	80083a4 <__assert_func+0x14>
 80083ba:	bf00      	nop
 80083bc:	20000018 	.word	0x20000018
 80083c0:	08008cde 	.word	0x08008cde
 80083c4:	08008cb0 	.word	0x08008cb0
 80083c8:	08008ca3 	.word	0x08008ca3

080083cc <_calloc_r>:
 80083cc:	b570      	push	{r4, r5, r6, lr}
 80083ce:	fba1 5402 	umull	r5, r4, r1, r2
 80083d2:	b93c      	cbnz	r4, 80083e4 <_calloc_r+0x18>
 80083d4:	4629      	mov	r1, r5
 80083d6:	f7fd fc83 	bl	8005ce0 <_malloc_r>
 80083da:	4606      	mov	r6, r0
 80083dc:	b928      	cbnz	r0, 80083ea <_calloc_r+0x1e>
 80083de:	2600      	movs	r6, #0
 80083e0:	4630      	mov	r0, r6
 80083e2:	bd70      	pop	{r4, r5, r6, pc}
 80083e4:	220c      	movs	r2, #12
 80083e6:	6002      	str	r2, [r0, #0]
 80083e8:	e7f9      	b.n	80083de <_calloc_r+0x12>
 80083ea:	462a      	mov	r2, r5
 80083ec:	4621      	mov	r1, r4
 80083ee:	f7fe fab4 	bl	800695a <memset>
 80083f2:	e7f5      	b.n	80083e0 <_calloc_r+0x14>

080083f4 <__ascii_mbtowc>:
 80083f4:	b082      	sub	sp, #8
 80083f6:	b901      	cbnz	r1, 80083fa <__ascii_mbtowc+0x6>
 80083f8:	a901      	add	r1, sp, #4
 80083fa:	b142      	cbz	r2, 800840e <__ascii_mbtowc+0x1a>
 80083fc:	b14b      	cbz	r3, 8008412 <__ascii_mbtowc+0x1e>
 80083fe:	7813      	ldrb	r3, [r2, #0]
 8008400:	600b      	str	r3, [r1, #0]
 8008402:	7812      	ldrb	r2, [r2, #0]
 8008404:	1e10      	subs	r0, r2, #0
 8008406:	bf18      	it	ne
 8008408:	2001      	movne	r0, #1
 800840a:	b002      	add	sp, #8
 800840c:	4770      	bx	lr
 800840e:	4610      	mov	r0, r2
 8008410:	e7fb      	b.n	800840a <__ascii_mbtowc+0x16>
 8008412:	f06f 0001 	mvn.w	r0, #1
 8008416:	e7f8      	b.n	800840a <__ascii_mbtowc+0x16>

08008418 <_realloc_r>:
 8008418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800841c:	4680      	mov	r8, r0
 800841e:	4615      	mov	r5, r2
 8008420:	460c      	mov	r4, r1
 8008422:	b921      	cbnz	r1, 800842e <_realloc_r+0x16>
 8008424:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008428:	4611      	mov	r1, r2
 800842a:	f7fd bc59 	b.w	8005ce0 <_malloc_r>
 800842e:	b92a      	cbnz	r2, 800843c <_realloc_r+0x24>
 8008430:	f7ff f9b6 	bl	80077a0 <_free_r>
 8008434:	2400      	movs	r4, #0
 8008436:	4620      	mov	r0, r4
 8008438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800843c:	f000 f83a 	bl	80084b4 <_malloc_usable_size_r>
 8008440:	4285      	cmp	r5, r0
 8008442:	4606      	mov	r6, r0
 8008444:	d802      	bhi.n	800844c <_realloc_r+0x34>
 8008446:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800844a:	d8f4      	bhi.n	8008436 <_realloc_r+0x1e>
 800844c:	4629      	mov	r1, r5
 800844e:	4640      	mov	r0, r8
 8008450:	f7fd fc46 	bl	8005ce0 <_malloc_r>
 8008454:	4607      	mov	r7, r0
 8008456:	2800      	cmp	r0, #0
 8008458:	d0ec      	beq.n	8008434 <_realloc_r+0x1c>
 800845a:	42b5      	cmp	r5, r6
 800845c:	462a      	mov	r2, r5
 800845e:	4621      	mov	r1, r4
 8008460:	bf28      	it	cs
 8008462:	4632      	movcs	r2, r6
 8008464:	f7ff ff86 	bl	8008374 <memcpy>
 8008468:	4621      	mov	r1, r4
 800846a:	4640      	mov	r0, r8
 800846c:	f7ff f998 	bl	80077a0 <_free_r>
 8008470:	463c      	mov	r4, r7
 8008472:	e7e0      	b.n	8008436 <_realloc_r+0x1e>

08008474 <__ascii_wctomb>:
 8008474:	4603      	mov	r3, r0
 8008476:	4608      	mov	r0, r1
 8008478:	b141      	cbz	r1, 800848c <__ascii_wctomb+0x18>
 800847a:	2aff      	cmp	r2, #255	@ 0xff
 800847c:	d904      	bls.n	8008488 <__ascii_wctomb+0x14>
 800847e:	228a      	movs	r2, #138	@ 0x8a
 8008480:	601a      	str	r2, [r3, #0]
 8008482:	f04f 30ff 	mov.w	r0, #4294967295
 8008486:	4770      	bx	lr
 8008488:	700a      	strb	r2, [r1, #0]
 800848a:	2001      	movs	r0, #1
 800848c:	4770      	bx	lr
	...

08008490 <fiprintf>:
 8008490:	b40e      	push	{r1, r2, r3}
 8008492:	b503      	push	{r0, r1, lr}
 8008494:	4601      	mov	r1, r0
 8008496:	ab03      	add	r3, sp, #12
 8008498:	4805      	ldr	r0, [pc, #20]	@ (80084b0 <fiprintf+0x20>)
 800849a:	f853 2b04 	ldr.w	r2, [r3], #4
 800849e:	6800      	ldr	r0, [r0, #0]
 80084a0:	9301      	str	r3, [sp, #4]
 80084a2:	f000 f839 	bl	8008518 <_vfiprintf_r>
 80084a6:	b002      	add	sp, #8
 80084a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80084ac:	b003      	add	sp, #12
 80084ae:	4770      	bx	lr
 80084b0:	20000018 	.word	0x20000018

080084b4 <_malloc_usable_size_r>:
 80084b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084b8:	1f18      	subs	r0, r3, #4
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	bfbc      	itt	lt
 80084be:	580b      	ldrlt	r3, [r1, r0]
 80084c0:	18c0      	addlt	r0, r0, r3
 80084c2:	4770      	bx	lr

080084c4 <__sfputc_r>:
 80084c4:	6893      	ldr	r3, [r2, #8]
 80084c6:	3b01      	subs	r3, #1
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	b410      	push	{r4}
 80084cc:	6093      	str	r3, [r2, #8]
 80084ce:	da08      	bge.n	80084e2 <__sfputc_r+0x1e>
 80084d0:	6994      	ldr	r4, [r2, #24]
 80084d2:	42a3      	cmp	r3, r4
 80084d4:	db01      	blt.n	80084da <__sfputc_r+0x16>
 80084d6:	290a      	cmp	r1, #10
 80084d8:	d103      	bne.n	80084e2 <__sfputc_r+0x1e>
 80084da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084de:	f000 b933 	b.w	8008748 <__swbuf_r>
 80084e2:	6813      	ldr	r3, [r2, #0]
 80084e4:	1c58      	adds	r0, r3, #1
 80084e6:	6010      	str	r0, [r2, #0]
 80084e8:	7019      	strb	r1, [r3, #0]
 80084ea:	4608      	mov	r0, r1
 80084ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084f0:	4770      	bx	lr

080084f2 <__sfputs_r>:
 80084f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f4:	4606      	mov	r6, r0
 80084f6:	460f      	mov	r7, r1
 80084f8:	4614      	mov	r4, r2
 80084fa:	18d5      	adds	r5, r2, r3
 80084fc:	42ac      	cmp	r4, r5
 80084fe:	d101      	bne.n	8008504 <__sfputs_r+0x12>
 8008500:	2000      	movs	r0, #0
 8008502:	e007      	b.n	8008514 <__sfputs_r+0x22>
 8008504:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008508:	463a      	mov	r2, r7
 800850a:	4630      	mov	r0, r6
 800850c:	f7ff ffda 	bl	80084c4 <__sfputc_r>
 8008510:	1c43      	adds	r3, r0, #1
 8008512:	d1f3      	bne.n	80084fc <__sfputs_r+0xa>
 8008514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008518 <_vfiprintf_r>:
 8008518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800851c:	460d      	mov	r5, r1
 800851e:	b09d      	sub	sp, #116	@ 0x74
 8008520:	4614      	mov	r4, r2
 8008522:	4698      	mov	r8, r3
 8008524:	4606      	mov	r6, r0
 8008526:	b118      	cbz	r0, 8008530 <_vfiprintf_r+0x18>
 8008528:	6a03      	ldr	r3, [r0, #32]
 800852a:	b90b      	cbnz	r3, 8008530 <_vfiprintf_r+0x18>
 800852c:	f7fe f948 	bl	80067c0 <__sinit>
 8008530:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008532:	07d9      	lsls	r1, r3, #31
 8008534:	d405      	bmi.n	8008542 <_vfiprintf_r+0x2a>
 8008536:	89ab      	ldrh	r3, [r5, #12]
 8008538:	059a      	lsls	r2, r3, #22
 800853a:	d402      	bmi.n	8008542 <_vfiprintf_r+0x2a>
 800853c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800853e:	f7fe fade 	bl	8006afe <__retarget_lock_acquire_recursive>
 8008542:	89ab      	ldrh	r3, [r5, #12]
 8008544:	071b      	lsls	r3, r3, #28
 8008546:	d501      	bpl.n	800854c <_vfiprintf_r+0x34>
 8008548:	692b      	ldr	r3, [r5, #16]
 800854a:	b99b      	cbnz	r3, 8008574 <_vfiprintf_r+0x5c>
 800854c:	4629      	mov	r1, r5
 800854e:	4630      	mov	r0, r6
 8008550:	f000 f938 	bl	80087c4 <__swsetup_r>
 8008554:	b170      	cbz	r0, 8008574 <_vfiprintf_r+0x5c>
 8008556:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008558:	07dc      	lsls	r4, r3, #31
 800855a:	d504      	bpl.n	8008566 <_vfiprintf_r+0x4e>
 800855c:	f04f 30ff 	mov.w	r0, #4294967295
 8008560:	b01d      	add	sp, #116	@ 0x74
 8008562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008566:	89ab      	ldrh	r3, [r5, #12]
 8008568:	0598      	lsls	r0, r3, #22
 800856a:	d4f7      	bmi.n	800855c <_vfiprintf_r+0x44>
 800856c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800856e:	f7fe fac7 	bl	8006b00 <__retarget_lock_release_recursive>
 8008572:	e7f3      	b.n	800855c <_vfiprintf_r+0x44>
 8008574:	2300      	movs	r3, #0
 8008576:	9309      	str	r3, [sp, #36]	@ 0x24
 8008578:	2320      	movs	r3, #32
 800857a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800857e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008582:	2330      	movs	r3, #48	@ 0x30
 8008584:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008734 <_vfiprintf_r+0x21c>
 8008588:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800858c:	f04f 0901 	mov.w	r9, #1
 8008590:	4623      	mov	r3, r4
 8008592:	469a      	mov	sl, r3
 8008594:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008598:	b10a      	cbz	r2, 800859e <_vfiprintf_r+0x86>
 800859a:	2a25      	cmp	r2, #37	@ 0x25
 800859c:	d1f9      	bne.n	8008592 <_vfiprintf_r+0x7a>
 800859e:	ebba 0b04 	subs.w	fp, sl, r4
 80085a2:	d00b      	beq.n	80085bc <_vfiprintf_r+0xa4>
 80085a4:	465b      	mov	r3, fp
 80085a6:	4622      	mov	r2, r4
 80085a8:	4629      	mov	r1, r5
 80085aa:	4630      	mov	r0, r6
 80085ac:	f7ff ffa1 	bl	80084f2 <__sfputs_r>
 80085b0:	3001      	adds	r0, #1
 80085b2:	f000 80a7 	beq.w	8008704 <_vfiprintf_r+0x1ec>
 80085b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085b8:	445a      	add	r2, fp
 80085ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80085bc:	f89a 3000 	ldrb.w	r3, [sl]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f000 809f 	beq.w	8008704 <_vfiprintf_r+0x1ec>
 80085c6:	2300      	movs	r3, #0
 80085c8:	f04f 32ff 	mov.w	r2, #4294967295
 80085cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085d0:	f10a 0a01 	add.w	sl, sl, #1
 80085d4:	9304      	str	r3, [sp, #16]
 80085d6:	9307      	str	r3, [sp, #28]
 80085d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80085de:	4654      	mov	r4, sl
 80085e0:	2205      	movs	r2, #5
 80085e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085e6:	4853      	ldr	r0, [pc, #332]	@ (8008734 <_vfiprintf_r+0x21c>)
 80085e8:	f7f7 fdfa 	bl	80001e0 <memchr>
 80085ec:	9a04      	ldr	r2, [sp, #16]
 80085ee:	b9d8      	cbnz	r0, 8008628 <_vfiprintf_r+0x110>
 80085f0:	06d1      	lsls	r1, r2, #27
 80085f2:	bf44      	itt	mi
 80085f4:	2320      	movmi	r3, #32
 80085f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085fa:	0713      	lsls	r3, r2, #28
 80085fc:	bf44      	itt	mi
 80085fe:	232b      	movmi	r3, #43	@ 0x2b
 8008600:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008604:	f89a 3000 	ldrb.w	r3, [sl]
 8008608:	2b2a      	cmp	r3, #42	@ 0x2a
 800860a:	d015      	beq.n	8008638 <_vfiprintf_r+0x120>
 800860c:	9a07      	ldr	r2, [sp, #28]
 800860e:	4654      	mov	r4, sl
 8008610:	2000      	movs	r0, #0
 8008612:	f04f 0c0a 	mov.w	ip, #10
 8008616:	4621      	mov	r1, r4
 8008618:	f811 3b01 	ldrb.w	r3, [r1], #1
 800861c:	3b30      	subs	r3, #48	@ 0x30
 800861e:	2b09      	cmp	r3, #9
 8008620:	d94b      	bls.n	80086ba <_vfiprintf_r+0x1a2>
 8008622:	b1b0      	cbz	r0, 8008652 <_vfiprintf_r+0x13a>
 8008624:	9207      	str	r2, [sp, #28]
 8008626:	e014      	b.n	8008652 <_vfiprintf_r+0x13a>
 8008628:	eba0 0308 	sub.w	r3, r0, r8
 800862c:	fa09 f303 	lsl.w	r3, r9, r3
 8008630:	4313      	orrs	r3, r2
 8008632:	9304      	str	r3, [sp, #16]
 8008634:	46a2      	mov	sl, r4
 8008636:	e7d2      	b.n	80085de <_vfiprintf_r+0xc6>
 8008638:	9b03      	ldr	r3, [sp, #12]
 800863a:	1d19      	adds	r1, r3, #4
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	9103      	str	r1, [sp, #12]
 8008640:	2b00      	cmp	r3, #0
 8008642:	bfbb      	ittet	lt
 8008644:	425b      	neglt	r3, r3
 8008646:	f042 0202 	orrlt.w	r2, r2, #2
 800864a:	9307      	strge	r3, [sp, #28]
 800864c:	9307      	strlt	r3, [sp, #28]
 800864e:	bfb8      	it	lt
 8008650:	9204      	strlt	r2, [sp, #16]
 8008652:	7823      	ldrb	r3, [r4, #0]
 8008654:	2b2e      	cmp	r3, #46	@ 0x2e
 8008656:	d10a      	bne.n	800866e <_vfiprintf_r+0x156>
 8008658:	7863      	ldrb	r3, [r4, #1]
 800865a:	2b2a      	cmp	r3, #42	@ 0x2a
 800865c:	d132      	bne.n	80086c4 <_vfiprintf_r+0x1ac>
 800865e:	9b03      	ldr	r3, [sp, #12]
 8008660:	1d1a      	adds	r2, r3, #4
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	9203      	str	r2, [sp, #12]
 8008666:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800866a:	3402      	adds	r4, #2
 800866c:	9305      	str	r3, [sp, #20]
 800866e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008744 <_vfiprintf_r+0x22c>
 8008672:	7821      	ldrb	r1, [r4, #0]
 8008674:	2203      	movs	r2, #3
 8008676:	4650      	mov	r0, sl
 8008678:	f7f7 fdb2 	bl	80001e0 <memchr>
 800867c:	b138      	cbz	r0, 800868e <_vfiprintf_r+0x176>
 800867e:	9b04      	ldr	r3, [sp, #16]
 8008680:	eba0 000a 	sub.w	r0, r0, sl
 8008684:	2240      	movs	r2, #64	@ 0x40
 8008686:	4082      	lsls	r2, r0
 8008688:	4313      	orrs	r3, r2
 800868a:	3401      	adds	r4, #1
 800868c:	9304      	str	r3, [sp, #16]
 800868e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008692:	4829      	ldr	r0, [pc, #164]	@ (8008738 <_vfiprintf_r+0x220>)
 8008694:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008698:	2206      	movs	r2, #6
 800869a:	f7f7 fda1 	bl	80001e0 <memchr>
 800869e:	2800      	cmp	r0, #0
 80086a0:	d03f      	beq.n	8008722 <_vfiprintf_r+0x20a>
 80086a2:	4b26      	ldr	r3, [pc, #152]	@ (800873c <_vfiprintf_r+0x224>)
 80086a4:	bb1b      	cbnz	r3, 80086ee <_vfiprintf_r+0x1d6>
 80086a6:	9b03      	ldr	r3, [sp, #12]
 80086a8:	3307      	adds	r3, #7
 80086aa:	f023 0307 	bic.w	r3, r3, #7
 80086ae:	3308      	adds	r3, #8
 80086b0:	9303      	str	r3, [sp, #12]
 80086b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086b4:	443b      	add	r3, r7
 80086b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80086b8:	e76a      	b.n	8008590 <_vfiprintf_r+0x78>
 80086ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80086be:	460c      	mov	r4, r1
 80086c0:	2001      	movs	r0, #1
 80086c2:	e7a8      	b.n	8008616 <_vfiprintf_r+0xfe>
 80086c4:	2300      	movs	r3, #0
 80086c6:	3401      	adds	r4, #1
 80086c8:	9305      	str	r3, [sp, #20]
 80086ca:	4619      	mov	r1, r3
 80086cc:	f04f 0c0a 	mov.w	ip, #10
 80086d0:	4620      	mov	r0, r4
 80086d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086d6:	3a30      	subs	r2, #48	@ 0x30
 80086d8:	2a09      	cmp	r2, #9
 80086da:	d903      	bls.n	80086e4 <_vfiprintf_r+0x1cc>
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d0c6      	beq.n	800866e <_vfiprintf_r+0x156>
 80086e0:	9105      	str	r1, [sp, #20]
 80086e2:	e7c4      	b.n	800866e <_vfiprintf_r+0x156>
 80086e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80086e8:	4604      	mov	r4, r0
 80086ea:	2301      	movs	r3, #1
 80086ec:	e7f0      	b.n	80086d0 <_vfiprintf_r+0x1b8>
 80086ee:	ab03      	add	r3, sp, #12
 80086f0:	9300      	str	r3, [sp, #0]
 80086f2:	462a      	mov	r2, r5
 80086f4:	4b12      	ldr	r3, [pc, #72]	@ (8008740 <_vfiprintf_r+0x228>)
 80086f6:	a904      	add	r1, sp, #16
 80086f8:	4630      	mov	r0, r6
 80086fa:	f7fd fc1d 	bl	8005f38 <_printf_float>
 80086fe:	4607      	mov	r7, r0
 8008700:	1c78      	adds	r0, r7, #1
 8008702:	d1d6      	bne.n	80086b2 <_vfiprintf_r+0x19a>
 8008704:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008706:	07d9      	lsls	r1, r3, #31
 8008708:	d405      	bmi.n	8008716 <_vfiprintf_r+0x1fe>
 800870a:	89ab      	ldrh	r3, [r5, #12]
 800870c:	059a      	lsls	r2, r3, #22
 800870e:	d402      	bmi.n	8008716 <_vfiprintf_r+0x1fe>
 8008710:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008712:	f7fe f9f5 	bl	8006b00 <__retarget_lock_release_recursive>
 8008716:	89ab      	ldrh	r3, [r5, #12]
 8008718:	065b      	lsls	r3, r3, #25
 800871a:	f53f af1f 	bmi.w	800855c <_vfiprintf_r+0x44>
 800871e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008720:	e71e      	b.n	8008560 <_vfiprintf_r+0x48>
 8008722:	ab03      	add	r3, sp, #12
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	462a      	mov	r2, r5
 8008728:	4b05      	ldr	r3, [pc, #20]	@ (8008740 <_vfiprintf_r+0x228>)
 800872a:	a904      	add	r1, sp, #16
 800872c:	4630      	mov	r0, r6
 800872e:	f7fd fe9b 	bl	8006468 <_printf_i>
 8008732:	e7e4      	b.n	80086fe <_vfiprintf_r+0x1e6>
 8008734:	08008c88 	.word	0x08008c88
 8008738:	08008c92 	.word	0x08008c92
 800873c:	08005f39 	.word	0x08005f39
 8008740:	080084f3 	.word	0x080084f3
 8008744:	08008c8e 	.word	0x08008c8e

08008748 <__swbuf_r>:
 8008748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800874a:	460e      	mov	r6, r1
 800874c:	4614      	mov	r4, r2
 800874e:	4605      	mov	r5, r0
 8008750:	b118      	cbz	r0, 800875a <__swbuf_r+0x12>
 8008752:	6a03      	ldr	r3, [r0, #32]
 8008754:	b90b      	cbnz	r3, 800875a <__swbuf_r+0x12>
 8008756:	f7fe f833 	bl	80067c0 <__sinit>
 800875a:	69a3      	ldr	r3, [r4, #24]
 800875c:	60a3      	str	r3, [r4, #8]
 800875e:	89a3      	ldrh	r3, [r4, #12]
 8008760:	071a      	lsls	r2, r3, #28
 8008762:	d501      	bpl.n	8008768 <__swbuf_r+0x20>
 8008764:	6923      	ldr	r3, [r4, #16]
 8008766:	b943      	cbnz	r3, 800877a <__swbuf_r+0x32>
 8008768:	4621      	mov	r1, r4
 800876a:	4628      	mov	r0, r5
 800876c:	f000 f82a 	bl	80087c4 <__swsetup_r>
 8008770:	b118      	cbz	r0, 800877a <__swbuf_r+0x32>
 8008772:	f04f 37ff 	mov.w	r7, #4294967295
 8008776:	4638      	mov	r0, r7
 8008778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800877a:	6823      	ldr	r3, [r4, #0]
 800877c:	6922      	ldr	r2, [r4, #16]
 800877e:	1a98      	subs	r0, r3, r2
 8008780:	6963      	ldr	r3, [r4, #20]
 8008782:	b2f6      	uxtb	r6, r6
 8008784:	4283      	cmp	r3, r0
 8008786:	4637      	mov	r7, r6
 8008788:	dc05      	bgt.n	8008796 <__swbuf_r+0x4e>
 800878a:	4621      	mov	r1, r4
 800878c:	4628      	mov	r0, r5
 800878e:	f7ff fdaf 	bl	80082f0 <_fflush_r>
 8008792:	2800      	cmp	r0, #0
 8008794:	d1ed      	bne.n	8008772 <__swbuf_r+0x2a>
 8008796:	68a3      	ldr	r3, [r4, #8]
 8008798:	3b01      	subs	r3, #1
 800879a:	60a3      	str	r3, [r4, #8]
 800879c:	6823      	ldr	r3, [r4, #0]
 800879e:	1c5a      	adds	r2, r3, #1
 80087a0:	6022      	str	r2, [r4, #0]
 80087a2:	701e      	strb	r6, [r3, #0]
 80087a4:	6962      	ldr	r2, [r4, #20]
 80087a6:	1c43      	adds	r3, r0, #1
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d004      	beq.n	80087b6 <__swbuf_r+0x6e>
 80087ac:	89a3      	ldrh	r3, [r4, #12]
 80087ae:	07db      	lsls	r3, r3, #31
 80087b0:	d5e1      	bpl.n	8008776 <__swbuf_r+0x2e>
 80087b2:	2e0a      	cmp	r6, #10
 80087b4:	d1df      	bne.n	8008776 <__swbuf_r+0x2e>
 80087b6:	4621      	mov	r1, r4
 80087b8:	4628      	mov	r0, r5
 80087ba:	f7ff fd99 	bl	80082f0 <_fflush_r>
 80087be:	2800      	cmp	r0, #0
 80087c0:	d0d9      	beq.n	8008776 <__swbuf_r+0x2e>
 80087c2:	e7d6      	b.n	8008772 <__swbuf_r+0x2a>

080087c4 <__swsetup_r>:
 80087c4:	b538      	push	{r3, r4, r5, lr}
 80087c6:	4b29      	ldr	r3, [pc, #164]	@ (800886c <__swsetup_r+0xa8>)
 80087c8:	4605      	mov	r5, r0
 80087ca:	6818      	ldr	r0, [r3, #0]
 80087cc:	460c      	mov	r4, r1
 80087ce:	b118      	cbz	r0, 80087d8 <__swsetup_r+0x14>
 80087d0:	6a03      	ldr	r3, [r0, #32]
 80087d2:	b90b      	cbnz	r3, 80087d8 <__swsetup_r+0x14>
 80087d4:	f7fd fff4 	bl	80067c0 <__sinit>
 80087d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087dc:	0719      	lsls	r1, r3, #28
 80087de:	d422      	bmi.n	8008826 <__swsetup_r+0x62>
 80087e0:	06da      	lsls	r2, r3, #27
 80087e2:	d407      	bmi.n	80087f4 <__swsetup_r+0x30>
 80087e4:	2209      	movs	r2, #9
 80087e6:	602a      	str	r2, [r5, #0]
 80087e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087ec:	81a3      	strh	r3, [r4, #12]
 80087ee:	f04f 30ff 	mov.w	r0, #4294967295
 80087f2:	e033      	b.n	800885c <__swsetup_r+0x98>
 80087f4:	0758      	lsls	r0, r3, #29
 80087f6:	d512      	bpl.n	800881e <__swsetup_r+0x5a>
 80087f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80087fa:	b141      	cbz	r1, 800880e <__swsetup_r+0x4a>
 80087fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008800:	4299      	cmp	r1, r3
 8008802:	d002      	beq.n	800880a <__swsetup_r+0x46>
 8008804:	4628      	mov	r0, r5
 8008806:	f7fe ffcb 	bl	80077a0 <_free_r>
 800880a:	2300      	movs	r3, #0
 800880c:	6363      	str	r3, [r4, #52]	@ 0x34
 800880e:	89a3      	ldrh	r3, [r4, #12]
 8008810:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008814:	81a3      	strh	r3, [r4, #12]
 8008816:	2300      	movs	r3, #0
 8008818:	6063      	str	r3, [r4, #4]
 800881a:	6923      	ldr	r3, [r4, #16]
 800881c:	6023      	str	r3, [r4, #0]
 800881e:	89a3      	ldrh	r3, [r4, #12]
 8008820:	f043 0308 	orr.w	r3, r3, #8
 8008824:	81a3      	strh	r3, [r4, #12]
 8008826:	6923      	ldr	r3, [r4, #16]
 8008828:	b94b      	cbnz	r3, 800883e <__swsetup_r+0x7a>
 800882a:	89a3      	ldrh	r3, [r4, #12]
 800882c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008830:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008834:	d003      	beq.n	800883e <__swsetup_r+0x7a>
 8008836:	4621      	mov	r1, r4
 8008838:	4628      	mov	r0, r5
 800883a:	f000 f83f 	bl	80088bc <__smakebuf_r>
 800883e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008842:	f013 0201 	ands.w	r2, r3, #1
 8008846:	d00a      	beq.n	800885e <__swsetup_r+0x9a>
 8008848:	2200      	movs	r2, #0
 800884a:	60a2      	str	r2, [r4, #8]
 800884c:	6962      	ldr	r2, [r4, #20]
 800884e:	4252      	negs	r2, r2
 8008850:	61a2      	str	r2, [r4, #24]
 8008852:	6922      	ldr	r2, [r4, #16]
 8008854:	b942      	cbnz	r2, 8008868 <__swsetup_r+0xa4>
 8008856:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800885a:	d1c5      	bne.n	80087e8 <__swsetup_r+0x24>
 800885c:	bd38      	pop	{r3, r4, r5, pc}
 800885e:	0799      	lsls	r1, r3, #30
 8008860:	bf58      	it	pl
 8008862:	6962      	ldrpl	r2, [r4, #20]
 8008864:	60a2      	str	r2, [r4, #8]
 8008866:	e7f4      	b.n	8008852 <__swsetup_r+0x8e>
 8008868:	2000      	movs	r0, #0
 800886a:	e7f7      	b.n	800885c <__swsetup_r+0x98>
 800886c:	20000018 	.word	0x20000018

08008870 <__swhatbuf_r>:
 8008870:	b570      	push	{r4, r5, r6, lr}
 8008872:	460c      	mov	r4, r1
 8008874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008878:	2900      	cmp	r1, #0
 800887a:	b096      	sub	sp, #88	@ 0x58
 800887c:	4615      	mov	r5, r2
 800887e:	461e      	mov	r6, r3
 8008880:	da0d      	bge.n	800889e <__swhatbuf_r+0x2e>
 8008882:	89a3      	ldrh	r3, [r4, #12]
 8008884:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008888:	f04f 0100 	mov.w	r1, #0
 800888c:	bf14      	ite	ne
 800888e:	2340      	movne	r3, #64	@ 0x40
 8008890:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008894:	2000      	movs	r0, #0
 8008896:	6031      	str	r1, [r6, #0]
 8008898:	602b      	str	r3, [r5, #0]
 800889a:	b016      	add	sp, #88	@ 0x58
 800889c:	bd70      	pop	{r4, r5, r6, pc}
 800889e:	466a      	mov	r2, sp
 80088a0:	f000 f848 	bl	8008934 <_fstat_r>
 80088a4:	2800      	cmp	r0, #0
 80088a6:	dbec      	blt.n	8008882 <__swhatbuf_r+0x12>
 80088a8:	9901      	ldr	r1, [sp, #4]
 80088aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80088ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80088b2:	4259      	negs	r1, r3
 80088b4:	4159      	adcs	r1, r3
 80088b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80088ba:	e7eb      	b.n	8008894 <__swhatbuf_r+0x24>

080088bc <__smakebuf_r>:
 80088bc:	898b      	ldrh	r3, [r1, #12]
 80088be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088c0:	079d      	lsls	r5, r3, #30
 80088c2:	4606      	mov	r6, r0
 80088c4:	460c      	mov	r4, r1
 80088c6:	d507      	bpl.n	80088d8 <__smakebuf_r+0x1c>
 80088c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80088cc:	6023      	str	r3, [r4, #0]
 80088ce:	6123      	str	r3, [r4, #16]
 80088d0:	2301      	movs	r3, #1
 80088d2:	6163      	str	r3, [r4, #20]
 80088d4:	b003      	add	sp, #12
 80088d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088d8:	ab01      	add	r3, sp, #4
 80088da:	466a      	mov	r2, sp
 80088dc:	f7ff ffc8 	bl	8008870 <__swhatbuf_r>
 80088e0:	9f00      	ldr	r7, [sp, #0]
 80088e2:	4605      	mov	r5, r0
 80088e4:	4639      	mov	r1, r7
 80088e6:	4630      	mov	r0, r6
 80088e8:	f7fd f9fa 	bl	8005ce0 <_malloc_r>
 80088ec:	b948      	cbnz	r0, 8008902 <__smakebuf_r+0x46>
 80088ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088f2:	059a      	lsls	r2, r3, #22
 80088f4:	d4ee      	bmi.n	80088d4 <__smakebuf_r+0x18>
 80088f6:	f023 0303 	bic.w	r3, r3, #3
 80088fa:	f043 0302 	orr.w	r3, r3, #2
 80088fe:	81a3      	strh	r3, [r4, #12]
 8008900:	e7e2      	b.n	80088c8 <__smakebuf_r+0xc>
 8008902:	89a3      	ldrh	r3, [r4, #12]
 8008904:	6020      	str	r0, [r4, #0]
 8008906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800890a:	81a3      	strh	r3, [r4, #12]
 800890c:	9b01      	ldr	r3, [sp, #4]
 800890e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008912:	b15b      	cbz	r3, 800892c <__smakebuf_r+0x70>
 8008914:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008918:	4630      	mov	r0, r6
 800891a:	f000 f81d 	bl	8008958 <_isatty_r>
 800891e:	b128      	cbz	r0, 800892c <__smakebuf_r+0x70>
 8008920:	89a3      	ldrh	r3, [r4, #12]
 8008922:	f023 0303 	bic.w	r3, r3, #3
 8008926:	f043 0301 	orr.w	r3, r3, #1
 800892a:	81a3      	strh	r3, [r4, #12]
 800892c:	89a3      	ldrh	r3, [r4, #12]
 800892e:	431d      	orrs	r5, r3
 8008930:	81a5      	strh	r5, [r4, #12]
 8008932:	e7cf      	b.n	80088d4 <__smakebuf_r+0x18>

08008934 <_fstat_r>:
 8008934:	b538      	push	{r3, r4, r5, lr}
 8008936:	4d07      	ldr	r5, [pc, #28]	@ (8008954 <_fstat_r+0x20>)
 8008938:	2300      	movs	r3, #0
 800893a:	4604      	mov	r4, r0
 800893c:	4608      	mov	r0, r1
 800893e:	4611      	mov	r1, r2
 8008940:	602b      	str	r3, [r5, #0]
 8008942:	f7f9 fdeb 	bl	800251c <_fstat>
 8008946:	1c43      	adds	r3, r0, #1
 8008948:	d102      	bne.n	8008950 <_fstat_r+0x1c>
 800894a:	682b      	ldr	r3, [r5, #0]
 800894c:	b103      	cbz	r3, 8008950 <_fstat_r+0x1c>
 800894e:	6023      	str	r3, [r4, #0]
 8008950:	bd38      	pop	{r3, r4, r5, pc}
 8008952:	bf00      	nop
 8008954:	200004e0 	.word	0x200004e0

08008958 <_isatty_r>:
 8008958:	b538      	push	{r3, r4, r5, lr}
 800895a:	4d06      	ldr	r5, [pc, #24]	@ (8008974 <_isatty_r+0x1c>)
 800895c:	2300      	movs	r3, #0
 800895e:	4604      	mov	r4, r0
 8008960:	4608      	mov	r0, r1
 8008962:	602b      	str	r3, [r5, #0]
 8008964:	f7f9 fdea 	bl	800253c <_isatty>
 8008968:	1c43      	adds	r3, r0, #1
 800896a:	d102      	bne.n	8008972 <_isatty_r+0x1a>
 800896c:	682b      	ldr	r3, [r5, #0]
 800896e:	b103      	cbz	r3, 8008972 <_isatty_r+0x1a>
 8008970:	6023      	str	r3, [r4, #0]
 8008972:	bd38      	pop	{r3, r4, r5, pc}
 8008974:	200004e0 	.word	0x200004e0

08008978 <_init>:
 8008978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800897a:	bf00      	nop
 800897c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800897e:	bc08      	pop	{r3}
 8008980:	469e      	mov	lr, r3
 8008982:	4770      	bx	lr

08008984 <_fini>:
 8008984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008986:	bf00      	nop
 8008988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800898a:	bc08      	pop	{r3}
 800898c:	469e      	mov	lr, r3
 800898e:	4770      	bx	lr
