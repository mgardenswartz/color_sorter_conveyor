
final-code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010b24  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  08010cc8  08010cc8  00011cc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080111e8  080111e8  00013494  2**0
                  CONTENTS
  4 .ARM          00000008  080111e8  080111e8  000121e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080111f0  080111f0  00013494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080111f0  080111f0  000121f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080111f4  080111f4  000121f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000494  20000000  080111f8  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005ac  20000494  0801168c  00013494  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a40  0801168c  00013a40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013494  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021dc3  00000000  00000000  000134c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004793  00000000  00000000  00035287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001968  00000000  00000000  00039a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013bb  00000000  00000000  0003b388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d996  00000000  00000000  0003c743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eb90  00000000  00000000  0005a0d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f4dc  00000000  00000000  00078c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118145  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e0c  00000000  00000000  00118188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  0011ff94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000494 	.word	0x20000494
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010cac 	.word	0x08010cac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000498 	.word	0x20000498
 80001dc:	08010cac 	.word	0x08010cac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <_ZN12ColoredBlockC1EP12ConveyorBelt>:
/**
 * @brief Constructor for the ColoredBlock class.
 * @param conveyor A pointer to the ConveyorBelt object used to track the position of the block.
 * @details Initializes a ColoredBlock object and sets its home position using the current position of the conveyor belt.
 */
ColoredBlock::ColoredBlock(
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
        ConveyorBelt* conveyor)
    : conveyor(conveyor)
 8000f52:	4a0b      	ldr	r2, [pc, #44]	@ (8000f80 <_ZN12ColoredBlockC1EP12ConveyorBelt+0x38>)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f04f 0200 	mov.w	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f04f 0200 	mov.w	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
{
    // Set home on instantiation
    set_home();
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f000 f808 	bl	8000f84 <_ZN12ColoredBlock8set_homeEv>
}
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	08010de8 	.word	0x08010de8

08000f84 <_ZN12ColoredBlock8set_homeEv>:
/**
 * @brief Sets the home position of the block.
 * @details This function captures the current position of the conveyor belt and sets it as the home position for the block.
 */
void ColoredBlock::set_home()
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
    home = conveyor->get_position();
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 f875 	bl	8001080 <_ZN12ConveyorBelt12get_positionEv>
 8000f96:	eef0 7a40 	vmov.f32	s15, s0
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <_ZN12ColoredBlock15update_positionEv>:
 * @brief Updates the current position of the block.
 * @return The updated position of the block relative to its home position.
 * @details This function calculates the block's position by subtracting the home position from the current conveyor belt position.
 */
float ColoredBlock::update_position()
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
    position = conveyor->get_position() - home;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 f863 	bl	8001080 <_ZN12ConveyorBelt12get_positionEv>
 8000fba:	eeb0 7a40 	vmov.f32	s14, s0
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	edd3 7a03 	vldr	s15, [r3, #12]
 8000fc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	edc3 7a02 	vstr	s15, [r3, #8]
    return position;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	ee07 3a90 	vmov	s15, r3
}
 8000fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <_ZN12ColoredBlock12update_colorEb>:
 * @brief Updates the color status of the block.
 * @param new_color The new color status of the block.
 * @details This function updates the block's color attribute based on the provided parameter.
 */
void ColoredBlock::update_color(bool new_color)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	70fb      	strb	r3, [r7, #3]
    color = new_color;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	78fa      	ldrb	r2, [r7, #3]
 8000ff0:	741a      	strb	r2, [r3, #16]
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
	...

08001000 <_ZN12ColoredBlockD1Ev>:

/**
 * @brief Destructor for the ColoredBlock class.
 * @details This destructor cleans up any resources used by the ColoredBlock object.
 */
ColoredBlock::~ColoredBlock()
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	4a04      	ldr	r2, [pc, #16]	@ (800101c <_ZN12ColoredBlockD1Ev+0x1c>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	601a      	str	r2, [r3, #0]
{
	// No action needed.
}
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4618      	mov	r0, r3
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	08010de8 	.word	0x08010de8

08001020 <_ZN12ColoredBlockD0Ev>:
ColoredBlock::~ColoredBlock()
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
}
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f7ff ffe9 	bl	8001000 <_ZN12ColoredBlockD1Ev>
 800102e:	2114      	movs	r1, #20
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f00c ffc4 	bl	800dfbe <_ZdlPvj>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <_ZN12ConveyorBeltC1EP13PololuEncoderf>:
 * @brief Constructor for the ConveyorBelt class.
 * @param encoder A pointer to the PololuEncoder object used to track the position.
 * @param roller_diameter_mm The diameter of the conveyor belt roller in millimeters.
 * @details Initializes a ConveyorBelt object with the given encoder and roller diameter.
 */
ConveyorBelt::ConveyorBelt(PololuEncoder* encoder, float roller_diameter_mm)
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	ed87 0a01 	vstr	s0, [r7, #4]
    : encoder(encoder), roller_diameter_mm(roller_diameter_mm)
 800104e:	4a0b      	ldr	r2, [pc, #44]	@ (800107c <_ZN12ConveyorBeltC1EP13PololuEncoderf+0x3c>)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	edd7 7a01 	vldr	s15, [r7, #4]
 800105e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001062:	edc7 7a00 	vstr	s15, [r7]
 8001066:	783b      	ldrb	r3, [r7, #0]
 8001068:	b2da      	uxtb	r2, r3
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	721a      	strb	r2, [r3, #8]
{
}
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4618      	mov	r0, r3
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	08010df8 	.word	0x08010df8

08001080 <_ZN12ConveyorBelt12get_positionEv>:
 * @brief Gets the current position of the conveyor belt.
 * @return The current linear position of the conveyor belt in millimeters.
 * @details This function reads the encoder's position in ticks, converts it to revolutions, and then to a linear position.
 */
float ConveyorBelt::get_position()
{
 8001080:	b5b0      	push	{r4, r5, r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
    // Get the latest encoder position in ticks
    // encoder->update();
    int32_t encoder_count = encoder->get_position();
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	4618      	mov	r0, r3
 800108e:	f000 fa85 	bl	800159c <_ZN13PololuEncoder12get_positionEv>
 8001092:	60f8      	str	r0, [r7, #12]

    // Convert that to a number of revolutions, then a linear position
    float revolutions = encoder_count / (encoder->gear_ratio * (float)encoder->CPR);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	ee07 3a90 	vmov	s15, r3
 800109a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	ed93 7a03 	vldr	s14, [r3, #12]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80010ae:	ee07 3a90 	vmov	s15, r3
 80010b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010be:	edc7 7a02 	vstr	s15, [r7, #8]
    linear_position = revolutions * 3.14159 * 2 * roller_diameter_mm / 2;
 80010c2:	68b8      	ldr	r0, [r7, #8]
 80010c4:	f7ff fa48 	bl	8000558 <__aeabi_f2d>
 80010c8:	a31b      	add	r3, pc, #108	@ (adr r3, 8001138 <_ZN12ConveyorBelt12get_positionEv+0xb8>)
 80010ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ce:	f7ff fa9b 	bl	8000608 <__aeabi_dmul>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	4610      	mov	r0, r2
 80010d8:	4619      	mov	r1, r3
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	f7ff f8dd 	bl	800029c <__adddf3>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4614      	mov	r4, r2
 80010e8:	461d      	mov	r5, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	7a1b      	ldrb	r3, [r3, #8]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fa20 	bl	8000534 <__aeabi_i2d>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	4620      	mov	r0, r4
 80010fa:	4629      	mov	r1, r5
 80010fc:	f7ff fa84 	bl	8000608 <__aeabi_dmul>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4610      	mov	r0, r2
 8001106:	4619      	mov	r1, r3
 8001108:	f04f 0200 	mov.w	r2, #0
 800110c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001110:	f7ff fba4 	bl	800085c <__aeabi_ddiv>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4610      	mov	r0, r2
 800111a:	4619      	mov	r1, r3
 800111c:	f7ff fd4c 	bl	8000bb8 <__aeabi_d2f>
 8001120:	4602      	mov	r2, r0
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	60da      	str	r2, [r3, #12]
    return linear_position;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	ee07 3a90 	vmov	s15, r3
}
 800112e:	eeb0 0a67 	vmov.f32	s0, s15
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bdb0      	pop	{r4, r5, r7, pc}
 8001138:	f01b866e 	.word	0xf01b866e
 800113c:	400921f9 	.word	0x400921f9

08001140 <_ZN12ConveyorBeltD1Ev>:

/**
 * @brief Destructor for the ConveyorBelt class.
 * @details Cleans up any resources used by the ConveyorBelt object. Currently, no action is needed.
 */
ConveyorBelt::~ConveyorBelt()
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	4a04      	ldr	r2, [pc, #16]	@ (800115c <_ZN12ConveyorBeltD1Ev+0x1c>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	601a      	str	r2, [r3, #0]
{
    // No action needed.
}
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	08010df8 	.word	0x08010df8

08001160 <_ZN12ConveyorBeltD0Ev>:
ConveyorBelt::~ConveyorBelt()
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
}
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ffe9 	bl	8001140 <_ZN12ConveyorBeltD1Ev>
 800116e:	2110      	movs	r1, #16
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f00c ff24 	bl	800dfbe <_ZdlPvj>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <_ZN12MotorControlC1EP15TB6612FNG_MotorP13PololuEncodermfff>:
 * @param K_P The proportional gain for the PID controller.
 * @param K_I The integral gain for the PID controller.
 * @param K_D The derivative gain for the PID controller.
 * @details Initializes a MotorControl object with the given motor, encoder, control frequency, and PID gains. Calls the reinitialize() method to reset internal states.
 */
MotorControl::MotorControl(
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0
 8001186:	61f8      	str	r0, [r7, #28]
 8001188:	61b9      	str	r1, [r7, #24]
 800118a:	617a      	str	r2, [r7, #20]
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001192:	edc7 0a02 	vstr	s1, [r7, #8]
 8001196:	ed87 1a01 	vstr	s2, [r7, #4]
    : motor(motor),
      encoder(encoder),
      control_frequency_Hz(control_frequency_Hz),
      K_P(K_P),
      K_I(K_I),
      K_D(K_D)
 800119a:	4a16      	ldr	r2, [pc, #88]	@ (80011f4 <_ZN12MotorControlC1EP15TB6612FNG_MotorP13PololuEncodermfff+0x74>)
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	601a      	str	r2, [r3, #0]
    : motor(motor),
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	605a      	str	r2, [r3, #4]
      encoder(encoder),
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	609a      	str	r2, [r3, #8]
      control_frequency_Hz(control_frequency_Hz),
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	60da      	str	r2, [r3, #12]
      K_P(K_P),
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	611a      	str	r2, [r3, #16]
      K_I(K_I),
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	615a      	str	r2, [r3, #20]
      K_D(K_D)
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	619a      	str	r2, [r3, #24]
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f04f 0200 	mov.w	r2, #0
 80011ca:	61da      	str	r2, [r3, #28]
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	621a      	str	r2, [r3, #32]
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f04f 0200 	mov.w	r2, #0
 80011da:	625a      	str	r2, [r3, #36]	@ 0x24
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	2200      	movs	r2, #0
 80011e0:	859a      	strh	r2, [r3, #44]	@ 0x2c
{
    reinitialize();
 80011e2:	69f8      	ldr	r0, [r7, #28]
 80011e4:	f000 f8ff 	bl	80013e6 <_ZN12MotorControl12reinitializeEv>
}
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	4618      	mov	r0, r3
 80011ec:	3720      	adds	r7, #32
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	08010e08 	.word	0x08010e08

080011f8 <_ZN12MotorControlD1Ev>:

/**
 * @brief Destructor for the MotorControl class.
 * @details Stops the motor when the MotorControl object is destroyed.
 */
MotorControl::~MotorControl()
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	4a06      	ldr	r2, [pc, #24]	@ (800121c <_ZN12MotorControlD1Ev+0x24>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	601a      	str	r2, [r3, #0]
{
    motor->stop();
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	4618      	mov	r0, r3
 800120c:	f001 fd3f 	bl	8002c8e <_ZN15TB6612FNG_Motor4stopEv>
}
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4618      	mov	r0, r3
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	08010e08 	.word	0x08010e08

08001220 <_ZN12MotorControlD0Ev>:
MotorControl::~MotorControl()
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
}
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f7ff ffe5 	bl	80011f8 <_ZN12MotorControlD1Ev>
 800122e:	2134      	movs	r1, #52	@ 0x34
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f00c fec4 	bl	800dfbe <_ZdlPvj>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <_ZN12MotorControl3runEf>:
 * @brief Runs the motor control algorithm with a given setpoint.
 * @param setpoint The desired motor speed in RPM.
 * @details This function updates the encoder, calculates the control effort, and sets the motor duty cycle accordingly.
 */
void MotorControl::run(float setpoint)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	ed87 0a00 	vstr	s0, [r7]
    // Store to the class
    SP = setpoint;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	631a      	str	r2, [r3, #48]	@ 0x30

    // Grab the latest data from the encoder.
    encoder->update();
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f946 	bl	80014e8 <_ZN13PololuEncoder6updateEv>
    float process_value = encoder->get_speed(control_frequency_Hz);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689a      	ldr	r2, [r3, #8]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	4619      	mov	r1, r3
 8001266:	4610      	mov	r0, r2
 8001268:	f000 f9a4 	bl	80015b4 <_ZN13PololuEncoder9get_speedEm>
 800126c:	ed87 0a03 	vstr	s0, [r7, #12]

    // Get the effort and send to motor
    get_effort_sat(setpoint, process_value);
 8001270:	edd7 0a03 	vldr	s1, [r7, #12]
 8001274:	ed97 0a00 	vldr	s0, [r7]
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f000 f80f 	bl	800129c <_ZN12MotorControl14get_effort_satEff>
    motor->set_duty(effort, saturation_limit);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6858      	ldr	r0, [r3, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f9b3 102c 	ldrsh.w	r1, [r3, #44]	@ 0x2c
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 800128e:	461a      	mov	r2, r3
 8001290:	f001 fc7e 	bl	8002b90 <_ZN15TB6612FNG_Motor8set_dutyEss>
}
 8001294:	bf00      	nop
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <_ZN12MotorControl14get_effort_satEff>:
 */
int16_t MotorControl::get_effort_sat(
                    float setpoint,
                    float process_value
                    )
{
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	@ 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80012a8:	edc7 0a01 	vstr	s1, [r7, #4]
    // Calculating error for P control
    error = setpoint - process_value; // RPM, a float
 80012ac:	ed97 7a02 	vldr	s14, [r7, #8]
 80012b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80012b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	edc3 7a08 	vstr	s15, [r3, #32]

    // Calculating running error for I control
    running_error += error / control_frequency_Hz; // RPM*s, float arithmetic cast to an int
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	ed93 6a08 	vldr	s12, [r3, #32]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	ee07 3a90 	vmov	s15, r3
 80012d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80012d6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80012da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

    // Calculating error slope for D control
    error_slope = (error - last_error) * ((float)control_frequency_Hz); // RPM/s, a float
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	ed93 7a08 	vldr	s14, [r3, #32]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	edd3 7a07 	vldr	s15, [r3, #28]
 80012f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	ee07 3a90 	vmov	s15, r3
 80012fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    last_error = error;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6a1a      	ldr	r2, [r3, #32]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	61da      	str	r2, [r3, #28]

    // Controller effort
    float P_effort = K_P * error;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	ed93 7a04 	vldr	s14, [r3, #16]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	edd3 7a08 	vldr	s15, [r3, #32]
 800131e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001322:	edc7 7a07 	vstr	s15, [r7, #28]
    float I_effort = K_I * running_error;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	ed93 7a05 	vldr	s14, [r3, #20]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001336:	edc7 7a06 	vstr	s15, [r7, #24]
    float D_effort = K_D * error_slope;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800134a:	edc7 7a05 	vstr	s15, [r7, #20]
    float effort_unsat = P_effort + I_effort + D_effort;
 800134e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001352:	edd7 7a06 	vldr	s15, [r7, #24]
 8001356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135a:	ed97 7a05 	vldr	s14, [r7, #20]
 800135e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001362:	edc7 7a04 	vstr	s15, [r7, #16]

    // Saturation
    if (effort_unsat > (float)saturation_limit)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 800136c:	ee07 3a90 	vmov	s15, r3
 8001370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001374:	ed97 7a04 	vldr	s14, [r7, #16]
 8001378:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800137c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001380:	dd05      	ble.n	800138e <_ZN12MotorControl14get_effort_satEff+0xf2>
    {
        effort = saturation_limit;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	@ 0x2e
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	859a      	strh	r2, [r3, #44]	@ 0x2c
 800138c:	e022      	b.n	80013d4 <_ZN12MotorControl14get_effort_satEff+0x138>
    }
    else if (effort_unsat < -1 * (float)saturation_limit)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 8001394:	ee07 3a90 	vmov	s15, r3
 8001398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800139c:	eef1 7a67 	vneg.f32	s15, s15
 80013a0:	ed97 7a04 	vldr	s14, [r7, #16]
 80013a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ac:	d509      	bpl.n	80013c2 <_ZN12MotorControl14get_effort_satEff+0x126>
    {
        effort = -saturation_limit;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	425b      	negs	r3, r3
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	b21a      	sxth	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	859a      	strh	r2, [r3, #44]	@ 0x2c
 80013c0:	e008      	b.n	80013d4 <_ZN12MotorControl14get_effort_satEff+0x138>
    }
    else
    {
        effort = (int16_t)effort_unsat;
 80013c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80013c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ca:	ee17 3a90 	vmov	r3, s15
 80013ce:	b21a      	sxth	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	859a      	strh	r2, [r3, #44]	@ 0x2c
    }

    return effort;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3724      	adds	r7, #36	@ 0x24
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <_ZN12MotorControl12reinitializeEv>:
/**
 * @brief Reinitializes the motor control state.
 * @details This function stops the motor, resets the PID error terms, and updates the saturation limit.
 */
void MotorControl::reinitialize()
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
    // Stop motor
    motor->set_duty(0);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2264      	movs	r2, #100	@ 0x64
 80013f4:	2100      	movs	r1, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f001 fbca 	bl	8002b90 <_ZN15TB6612FNG_Motor8set_dutyEss>

    // Reset important stuff
    last_error = 0;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	61da      	str	r2, [r3, #28]
    error = 0;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	621a      	str	r2, [r3, #32]
    effort = 0;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	859a      	strh	r2, [r3, #44]	@ 0x2c
    running_error = 0; // Most important
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	625a      	str	r2, [r3, #36]	@ 0x24

    // Grab the new saturation limit.
    saturation_limit = motor->timer_handle->Instance->ARR; // Assuming no prescalar is used.
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	695b      	ldr	r3, [r3, #20]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001424:	b21a      	sxth	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	85da      	strh	r2, [r3, #46]	@ 0x2e
}
 800142a:	bf00      	nop
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb>:
 * @param gear_ratio The gear ratio of the encoder setup.
 * @param timer_bit_size The bit size of the timer (e.g., 16 or 32 bits).
 * @param interrupt_mode Boolean indicating whether to use interrupt mode.
 * @details Initializes a PololuEncoder object and starts the encoder using either interrupt or non-interrupt mode. Also sets up the timer count limits based on the bit size.
 */
PololuEncoder::PololuEncoder(
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	4611      	mov	r1, r2
 8001440:	ed87 0a00 	vstr	s0, [r7]
 8001444:	461a      	mov	r2, r3
 8001446:	460b      	mov	r3, r1
 8001448:	80fb      	strh	r3, [r7, #6]
 800144a:	4613      	mov	r3, r2
 800144c:	717b      	strb	r3, [r7, #5]
    )
    : timer_handle(timer_handle),
      CPR(CPR),
      gear_ratio(gear_ratio),
      timer_bit_size(timer_bit_size),
      interrupt_mode(interrupt_mode)
 800144e:	4a25      	ldr	r2, [pc, #148]	@ (80014e4 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0xb0>)
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	601a      	str	r2, [r3, #0]
    : timer_handle(timer_handle),
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	605a      	str	r2, [r3, #4]
      CPR(CPR),
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	88fa      	ldrh	r2, [r7, #6]
 800145e:	811a      	strh	r2, [r3, #8]
      gear_ratio(gear_ratio),
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	60da      	str	r2, [r3, #12]
      timer_bit_size(timer_bit_size),
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	797a      	ldrb	r2, [r7, #5]
 800146a:	741a      	strb	r2, [r3, #16]
      interrupt_mode(interrupt_mode)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	7e3a      	ldrb	r2, [r7, #24]
 8001470:	745a      	strb	r2, [r3, #17]
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2200      	movs	r2, #0
 8001476:	825a      	strh	r2, [r3, #18]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2200      	movs	r2, #0
 800147c:	829a      	strh	r2, [r3, #20]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2200      	movs	r2, #0
 8001482:	82da      	strh	r2, [r3, #22]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	61da      	str	r2, [r3, #28]
{
    // Start encoder
    if (interrupt_mode)
 8001492:	7e3b      	ldrb	r3, [r7, #24]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d004      	beq.n	80014a2 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0x6e>
    {
        HAL_TIM_Encoder_Start_IT(timer_handle, TIM_CHANNEL_ALL);
 8001498:	213c      	movs	r1, #60	@ 0x3c
 800149a:	68b8      	ldr	r0, [r7, #8]
 800149c:	f006 f83f 	bl	800751e <HAL_TIM_Encoder_Start_IT>
 80014a0:	e003      	b.n	80014aa <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0x76>
    }
    else
    {
        HAL_TIM_Encoder_Start(timer_handle, TIM_CHANNEL_ALL);
 80014a2:	213c      	movs	r1, #60	@ 0x3c
 80014a4:	68b8      	ldr	r0, [r7, #8]
 80014a6:	f005 ff15 	bl	80072d4 <HAL_TIM_Encoder_Start>
    }

    // Number of bits for the select timer
    if (timer_bit_size == 32)
 80014aa:	797b      	ldrb	r3, [r7, #5]
 80014ac:	2b20      	cmp	r3, #32
 80014ae:	d104      	bne.n	80014ba <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0x86>
    {
        max_count = 0xffffffff;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f04f 32ff 	mov.w	r2, #4294967295
 80014b6:	621a      	str	r2, [r3, #32]
 80014b8:	e003      	b.n	80014c2 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb+0x8e>
    }
    else
    {
        max_count = 0xffff;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014c0:	621a      	str	r2, [r3, #32]
    }

    // Set pertinent values for later.
    half_max_count = max_count / 2;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	085b      	lsrs	r3, r3, #1
 80014c8:	461a      	mov	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	625a      	str	r2, [r3, #36]	@ 0x24
    neg_half_max_count = -half_max_count;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d2:	425a      	negs	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	08010e18 	.word	0x08010e18

080014e8 <_ZN13PololuEncoder6updateEv>:
/**
 * @brief Updates the encoder count and processes overflow corrections.
 * @details This function reads the current encoder count, calculates the delta since the last update, and adjusts for timer overflow. It then updates the position based on the delta.
 */
void PololuEncoder::update()
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
    // Read encoder
    if (!interrupt_mode)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	7c5b      	ldrb	r3, [r3, #17]
 80014f4:	f083 0301 	eor.w	r3, r3, #1
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d006      	beq.n	800150c <_ZN13PololuEncoder6updateEv+0x24>
    {
        count = __HAL_TIM_GET_COUNTER(timer_handle);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001506:	b29a      	uxth	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	82da      	strh	r2, [r3, #22]
    }
    delta = (int32_t) (count - last_count);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	8ada      	ldrh	r2, [r3, #22]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	8a9b      	ldrh	r3, [r3, #20]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	b29b      	uxth	r3, r3
 8001518:	b21a      	sxth	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	825a      	strh	r2, [r3, #18]
    last_count = count;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	8ada      	ldrh	r2, [r3, #22]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	829a      	strh	r2, [r3, #20]

    // Fix delta from timer overflow
    if (delta > half_max_count)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800152c:	461a      	mov	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001532:	429a      	cmp	r2, r3
 8001534:	dd0e      	ble.n	8001554 <_ZN13PololuEncoder6updateEv+0x6c>
    {
        // We've overflowed in the negative direction.
        delta -= max_count + 1;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800153c:	b29a      	uxth	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a1b      	ldr	r3, [r3, #32]
 8001542:	b29b      	uxth	r3, r3
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	b29b      	uxth	r3, r3
 8001548:	3b01      	subs	r3, #1
 800154a:	b29b      	uxth	r3, r3
 800154c:	b21a      	sxth	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	825a      	strh	r2, [r3, #18]
 8001552:	e015      	b.n	8001580 <_ZN13PololuEncoder6updateEv+0x98>
    }
    else if (delta < neg_half_max_count)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800155a:	461a      	mov	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001560:	429a      	cmp	r2, r3
 8001562:	da0d      	bge.n	8001580 <_ZN13PololuEncoder6updateEv+0x98>
    {
        // We've overflowed in the positive direction.
        delta += max_count + 1;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800156a:	b29a      	uxth	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a1b      	ldr	r3, [r3, #32]
 8001570:	b29b      	uxth	r3, r3
 8001572:	4413      	add	r3, r2
 8001574:	b29b      	uxth	r3, r3
 8001576:	3301      	adds	r3, #1
 8001578:	b29b      	uxth	r3, r3
 800157a:	b21a      	sxth	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	825a      	strh	r2, [r3, #18]
    }

    // Finish up
    position += delta;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800158a:	441a      	add	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	619a      	str	r2, [r3, #24]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <_ZN13PololuEncoder12get_positionEv>:
 * @brief Gets the current position of the encoder.
 * @return The current position as an integer count.
 * @details This function returns the current position count of the encoder.
 */
int32_t PololuEncoder::get_position()
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
    return position;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	699b      	ldr	r3, [r3, #24]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <_ZN13PololuEncoder9get_speedEm>:
 * @param control_frequency_Hz The control frequency in Hertz.
 * @return The speed in RPM.
 * @details This function calculates the speed of the encoder in RPM based on the delta count and control frequency.
 */
float PololuEncoder::get_speed(uint32_t control_frequency_Hz)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
    float numerator = delta * (float)control_frequency_Hz * 60;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80015c4:	ee07 3a90 	vmov	s15, r3
 80015c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	ee07 3a90 	vmov	s15, r3
 80015d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015da:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800162c <_ZN13PololuEncoder9get_speedEm+0x78>
 80015de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015e2:	edc7 7a03 	vstr	s15, [r7, #12]
    float denominator = (float)CPR * gear_ratio;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80015ec:	ee07 3a90 	vmov	s15, r3
 80015f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80015fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015fe:	edc7 7a02 	vstr	s15, [r7, #8]
    speed = numerator / denominator; // RPM
 8001602:	edd7 6a03 	vldr	s13, [r7, #12]
 8001606:	ed97 7a02 	vldr	s14, [r7, #8]
 800160a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	edc3 7a07 	vstr	s15, [r3, #28]
    return speed;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	69db      	ldr	r3, [r3, #28]
 8001618:	ee07 3a90 	vmov	s15, r3
}
 800161c:	eeb0 0a67 	vmov.f32	s0, s15
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	42700000 	.word	0x42700000

08001630 <_ZN13PololuEncoderD1Ev>:

/**
 * @brief Destructor for the PololuEncoder class.
 * @details Stops the encoder when the PololuEncoder object is destroyed.
 */
PololuEncoder::~PololuEncoder()
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	4a0c      	ldr	r2, [pc, #48]	@ (800166c <_ZN13PololuEncoderD1Ev+0x3c>)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	601a      	str	r2, [r3, #0]
{
    // Stop encoder
    if (interrupt_mode)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	7c5b      	ldrb	r3, [r3, #17]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d006      	beq.n	8001654 <_ZN13PololuEncoderD1Ev+0x24>
    {
        HAL_TIM_Encoder_Stop_IT(timer_handle, TIM_CHANNEL_ALL);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	213c      	movs	r1, #60	@ 0x3c
 800164c:	4618      	mov	r0, r3
 800164e:	f006 f814 	bl	800767a <HAL_TIM_Encoder_Stop_IT>
 8001652:	e005      	b.n	8001660 <_ZN13PololuEncoderD1Ev+0x30>
    }
    else
    {
        HAL_TIM_Encoder_Stop(timer_handle, TIM_CHANNEL_ALL);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	213c      	movs	r1, #60	@ 0x3c
 800165a:	4618      	mov	r0, r3
 800165c:	f005 fec8 	bl	80073f0 <HAL_TIM_Encoder_Stop>
    }
}
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	08010e18 	.word	0x08010e18

08001670 <_ZN13PololuEncoderD0Ev>:
PololuEncoder::~PololuEncoder()
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
}
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff ffd9 	bl	8001630 <_ZN13PololuEncoderD1Ev>
 800167e:	212c      	movs	r1, #44	@ 0x2c
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f00c fc9c 	bl	800dfbe <_ZdlPvj>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4618      	mov	r0, r3
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <_ZN11PololuServoC1EP17TIM_HandleTypeDefmtmbtttt>:
 * @param full_left_pulse_width_us The pulse width corresponding to the full left position in microseconds.
 * @param neutral_pulse_width_us The pulse width corresponding to the neutral position in microseconds.
 * @param full_right_pulse_width_us The pulse width corresponding to the full right position in microseconds.
 * @details Initializes a PololuServo object and sets the PWM period and prescaler. The servo is homed to the neutral position.
 */
PololuServo::PololuServo(TIM_HandleTypeDef* timer_handle,
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	807b      	strh	r3, [r7, #2]
      CPU_clock_speed_MHz(CPU_clock_speed_MHz),
      closed_loop_mode(closed_loop_mode),
      maximum_angle_magnitude(maximum_angle_magnitude),
      full_left_pulse_width_us(full_left_pulse_width_us),
      neutral_pulse_width_us(neutral_pulse_width_us),
      full_right_pulse_width_us(full_right_pulse_width_us)
 800169e:	4a20      	ldr	r2, [pc, #128]	@ (8001720 <_ZN11PololuServoC1EP17TIM_HandleTypeDefmtmbtttt+0x90>)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	601a      	str	r2, [r3, #0]
    : timer_handle(timer_handle),
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	605a      	str	r2, [r3, #4]
      timer_channel(timer_channel),
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	609a      	str	r2, [r3, #8]
      PWM_period_us(PWM_period_us),
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	887a      	ldrh	r2, [r7, #2]
 80016b4:	819a      	strh	r2, [r3, #12]
      CPU_clock_speed_MHz(CPU_clock_speed_MHz),
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	611a      	str	r2, [r3, #16]
      closed_loop_mode(closed_loop_mode),
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	7f3a      	ldrb	r2, [r7, #28]
 80016c0:	751a      	strb	r2, [r3, #20]
      maximum_angle_magnitude(maximum_angle_magnitude),
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	8c3a      	ldrh	r2, [r7, #32]
 80016c6:	82da      	strh	r2, [r3, #22]
      full_left_pulse_width_us(full_left_pulse_width_us),
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80016cc:	831a      	strh	r2, [r3, #24]
      neutral_pulse_width_us(neutral_pulse_width_us),
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80016d2:	835a      	strh	r2, [r3, #26]
      full_right_pulse_width_us(full_right_pulse_width_us)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80016d8:	839a      	strh	r2, [r3, #28]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80016e0:	83da      	strh	r2, [r3, #30]
{
    // Set correct PWM period.
    timer_handle->Instance->ARR = autoreload_value;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8bda      	ldrh	r2, [r3, #30]
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    timer_handle->Instance->PSC = (CPU_clock_speed_MHz * PWM_period_us) / autoreload_value;
 80016ec:	887b      	ldrh	r3, [r7, #2]
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	fb03 f202 	mul.w	r2, r3, r2
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8bdb      	ldrh	r3, [r3, #30]
 80016f8:	4619      	mov	r1, r3
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	fbb2 f2f1 	udiv	r2, r2, r1
 8001702:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_TIM_PWM_Start(timer_handle, timer_channel);
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	68b8      	ldr	r0, [r7, #8]
 8001708:	f005 fa08 	bl	8006b1c <HAL_TIM_PWM_Start>

    // Home servo
    set_position(0);
 800170c:	2100      	movs	r1, #0
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f000 f808 	bl	8001724 <_ZN11PololuServo12set_positionEs>
}
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4618      	mov	r0, r3
 8001718:	3710      	adds	r7, #16
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	08010e28 	.word	0x08010e28

08001724 <_ZN11PololuServo12set_positionEs>:
 * @brief Sets the position of the servo.
 * @param position_deg The desired position in degrees.
 * @details This function sets the servo to the specified position in degrees. It converts the degree value to the corresponding PWM pulse width and updates the compare value of the timer.
 */
void PololuServo::set_position(int16_t position_deg)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	807b      	strh	r3, [r7, #2]
    // Saturate requested position
    if (position_deg > maximum_angle_magnitude){
 8001730:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	8ad2      	ldrh	r2, [r2, #22]
 8001738:	4293      	cmp	r3, r2
 800173a:	dd03      	ble.n	8001744 <_ZN11PololuServo12set_positionEs+0x20>
        position_deg = maximum_angle_magnitude;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	8adb      	ldrh	r3, [r3, #22]
 8001740:	807b      	strh	r3, [r7, #2]
 8001742:	e00b      	b.n	800175c <_ZN11PololuServo12set_positionEs+0x38>
    }
    else if (position_deg < -maximum_angle_magnitude)
 8001744:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	8adb      	ldrh	r3, [r3, #22]
 800174c:	425b      	negs	r3, r3
 800174e:	429a      	cmp	r2, r3
 8001750:	da04      	bge.n	800175c <_ZN11PololuServo12set_positionEs+0x38>
    {
        position_deg = -maximum_angle_magnitude;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	8adb      	ldrh	r3, [r3, #22]
 8001756:	425b      	negs	r3, r3
 8001758:	b29b      	uxth	r3, r3
 800175a:	807b      	strh	r3, [r7, #2]
    }

    // Convert the position requested from degrees to a pulse width in microseconds.
    float slope;
    if (position_deg >= 0)
 800175c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001760:	2b00      	cmp	r3, #0
 8001762:	db18      	blt.n	8001796 <_ZN11PololuServo12set_positionEs+0x72>
    {
        slope = ((float)full_right_pulse_width_us - (float)neutral_pulse_width_us) / (float)maximum_angle_magnitude;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	8b9b      	ldrh	r3, [r3, #28]
 8001768:	ee07 3a90 	vmov	s15, r3
 800176c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	8b5b      	ldrh	r3, [r3, #26]
 8001774:	ee07 3a90 	vmov	s15, r3
 8001778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800177c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	8adb      	ldrh	r3, [r3, #22]
 8001784:	ee07 3a90 	vmov	s15, r3
 8001788:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800178c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001790:	edc7 7a03 	vstr	s15, [r7, #12]
 8001794:	e017      	b.n	80017c6 <_ZN11PololuServo12set_positionEs+0xa2>
    }
    else
    {
        slope = ((float)neutral_pulse_width_us - (float)full_left_pulse_width_us) / (float)maximum_angle_magnitude;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	8b5b      	ldrh	r3, [r3, #26]
 800179a:	ee07 3a90 	vmov	s15, r3
 800179e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	8b1b      	ldrh	r3, [r3, #24]
 80017a6:	ee07 3a90 	vmov	s15, r3
 80017aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ae:	ee77 6a67 	vsub.f32	s13, s14, s15
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	8adb      	ldrh	r3, [r3, #22]
 80017b6:	ee07 3a90 	vmov	s15, r3
 80017ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80017be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017c2:	edc7 7a03 	vstr	s15, [r7, #12]
    }

    // Calculate compare value from pulse width
    uint16_t pulse_width = slope * position_deg + neutral_pulse_width_us;
 80017c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80017ca:	ee07 3a90 	vmov	s15, r3
 80017ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80017d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	8b5b      	ldrh	r3, [r3, #26]
 80017de:	ee07 3a90 	vmov	s15, r3
 80017e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017ee:	ee17 3a90 	vmov	r3, s15
 80017f2:	817b      	strh	r3, [r7, #10]
    uint16_t compare_value = pulse_width * autoreload_value / PWM_period_us;
 80017f4:	897b      	ldrh	r3, [r7, #10]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	8bd2      	ldrh	r2, [r2, #30]
 80017fa:	fb02 f303 	mul.w	r3, r2, r3
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	8992      	ldrh	r2, [r2, #12]
 8001802:	fb93 f3f2 	sdiv	r3, r3, r2
 8001806:	813b      	strh	r3, [r7, #8]
    __HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d105      	bne.n	800181c <_ZN11PololuServo12set_positionEs+0xf8>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	893a      	ldrh	r2, [r7, #8]
 8001818:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800181a:	e018      	b.n	800184e <_ZN11PololuServo12set_positionEs+0x12a>
    __HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b04      	cmp	r3, #4
 8001822:	d105      	bne.n	8001830 <_ZN11PololuServo12set_positionEs+0x10c>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	893a      	ldrh	r2, [r7, #8]
 800182c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800182e:	e00e      	b.n	800184e <_ZN11PololuServo12set_positionEs+0x12a>
    __HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b08      	cmp	r3, #8
 8001836:	d105      	bne.n	8001844 <_ZN11PololuServo12set_positionEs+0x120>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	893a      	ldrh	r2, [r7, #8]
 8001840:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001842:	e004      	b.n	800184e <_ZN11PololuServo12set_positionEs+0x12a>
    __HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	893a      	ldrh	r2, [r7, #8]
 800184c:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800184e:	bf00      	nop
 8001850:	3714      	adds	r7, #20
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <_ZN11PololuServoD1Ev>:

/**
 * @brief Destructor for the PololuServo class.
 * @details Stops the PWM output and performs any necessary cleanup when the PololuServo object is destroyed.
 */
PololuServo::~PololuServo()
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	4a04      	ldr	r2, [pc, #16]	@ (8001878 <_ZN11PololuServoD1Ev+0x1c>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	601a      	str	r2, [r3, #0]
{
    // TODO Auto-generated destructor stub
}
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	08010e28 	.word	0x08010e28

0800187c <_ZN11PololuServoD0Ev>:
PololuServo::~PololuServo()
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
}
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7ff ffe9 	bl	800185c <_ZN11PololuServoD1Ev>
 800188a:	2120      	movs	r1, #32
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f00c fb96 	bl	800dfbe <_ZdlPvj>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb>:
 * @param full_forward_us_width Width of the full forward signal in microseconds.
 * @param rescale_forward_magnitude Maximum value for rescaling the forward signal. Overridden if fed into RemoteControlControl.
 * @param rescale_reverse_magnitude Minimum value for rescaling the reverse signal. Overridden if fed into RemoteControlControl.
 * @param saturate If RC value is over the rescale magnitude, should it saturate?
 */
RCChannel::RCChannel(
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	603b      	str	r3, [r7, #0]
 80018a8:	4613      	mov	r3, r2
 80018aa:	80fb      	strh	r3, [r7, #6]
	full_reverse_us_width(full_reverse_us_width),
	neutral_us_width(neutral_us_width),
	full_forward_us_width(full_forward_us_width),
	rescale_forward_magnitude(rescale_forward_magnitude),
	rescale_reverse_magnitude(rescale_reverse_magnitude),
	saturate(saturate)
 80018ac:	4a3c      	ldr	r2, [pc, #240]	@ (80019a0 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0x104>)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2200      	movs	r2, #0
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2200      	movs	r2, #0
 80018c2:	60da      	str	r2, [r3, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2200      	movs	r2, #0
 80018c8:	611a      	str	r2, [r3, #16]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2200      	movs	r2, #0
 80018ce:	615a      	str	r2, [r3, #20]
	pin_group(pin_group),
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	619a      	str	r2, [r3, #24]
	pin(pin),
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	88fa      	ldrh	r2, [r7, #6]
 80018da:	839a      	strh	r2, [r3, #28]
	timer_handle(timer_handle),
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	621a      	str	r2, [r3, #32]
	timer_channel(timer_channel),
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6a3a      	ldr	r2, [r7, #32]
 80018e6:	625a      	str	r2, [r3, #36]	@ 0x24
	RC_signal_period_us(RC_signal_period_us),
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018ec:	629a      	str	r2, [r3, #40]	@ 0x28
	CPU_clock_speed_MHz(CPU_clock_speed_MHz),
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	full_reverse_us_width(full_reverse_us_width),
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018f8:	631a      	str	r2, [r3, #48]	@ 0x30
	neutral_us_width(neutral_us_width),
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80018fe:	635a      	str	r2, [r3, #52]	@ 0x34
	full_forward_us_width(full_forward_us_width),
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001904:	639a      	str	r2, [r3, #56]	@ 0x38
	rescale_forward_magnitude(rescale_forward_magnitude),
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800190a:	63da      	str	r2, [r3, #60]	@ 0x3c
	rescale_reverse_magnitude(rescale_reverse_magnitude),
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001910:	641a      	str	r2, [r3, #64]	@ 0x40
	saturate(saturate)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8001918:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
{
	// Starts the first interrupt.
	HAL_TIM_IC_Start_IT(timer_handle, timer_channel);
 8001924:	6a39      	ldr	r1, [r7, #32]
 8001926:	6838      	ldr	r0, [r7, #0]
 8001928:	f005 fa66 	bl	8006df8 <HAL_TIM_IC_Start_IT>

	// Set minuend depending on whether it's a 16-bit or 32-bit timer.
	// This is specific to the STM32F411CUE6!!
	if (((timer_handle->Instance) == TIM2) or ((timer_handle->Instance) == TIM5))
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001934:	d004      	beq.n	8001940 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0xa4>
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a1a      	ldr	r2, [pc, #104]	@ (80019a4 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0x108>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d104      	bne.n	800194a <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0xae>
	{
		minuend = 0xffffffff;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f04f 32ff 	mov.w	r2, #4294967295
 8001946:	649a      	str	r2, [r3, #72]	@ 0x48
 8001948:	e003      	b.n	8001952 <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb+0xb6>
	}
	else
	{
		minuend = 0xffff;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001950:	649a      	str	r2, [r3, #72]	@ 0x48
	}

	// Scale timer to microseconds. Source: https://www.youtube.com/watch?v=rh4pdNWKLJY&t=186s
	uint32_t prescalar = timer_handle->Instance->PSC + 1;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001958:	3301      	adds	r3, #1
 800195a:	617b      	str	r3, [r7, #20]
	float refClock = CPU_clock_speed_MHz/prescalar;
 800195c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	fbb2 f3f3 	udiv	r3, r2, r3
 8001964:	ee07 3a90 	vmov	s15, r3
 8001968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800196c:	edc7 7a04 	vstr	s15, [r7, #16]
	mFactor = 1/refClock;
 8001970:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001974:	ed97 7a04 	vldr	s14, [r7, #16]
 8001978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c

	// Values needed for later
	forward_range = full_forward_us_width - neutral_us_width;
 8001982:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001986:	1ad2      	subs	r2, r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	659a      	str	r2, [r3, #88]	@ 0x58
	reverse_range = neutral_us_width - full_reverse_us_width;
 800198c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800198e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001990:	1ad2      	subs	r2, r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	08010e38 	.word	0x08010e38
 80019a4:	40000c00 	.word	0x40000c00

080019a8 <_ZN9RCChannel8callbackEv>:
 * 
 * @note This function assumes that the timer handle and channel have been properly initialized.
 * Please set the associated timer channel to input capture mode, direct. 
 * Leave the auto-reload value as large as possible.
 */
void RCChannel::callback(){
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	// Was it a rising edge or a falling edge?
	GPIO_PinState pinState = HAL_GPIO_ReadPin(pin_group, pin);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	699a      	ldr	r2, [r3, #24]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	8b9b      	ldrh	r3, [r3, #28]
 80019b8:	4619      	mov	r1, r3
 80019ba:	4610      	mov	r0, r2
 80019bc:	f003 f844 	bl	8004a48 <HAL_GPIO_ReadPin>
 80019c0:	4603      	mov	r3, r0
 80019c2:	73fb      	strb	r3, [r7, #15]

	if(pinState == GPIO_PIN_SET) // Rising edge
 80019c4:	7bfb      	ldrb	r3, [r7, #15]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d10c      	bne.n	80019e4 <_ZN9RCChannel8callbackEv+0x3c>
		{
			// Read
			first_value = HAL_TIM_ReadCapturedValue(timer_handle, timer_channel);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a1a      	ldr	r2, [r3, #32]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d2:	4619      	mov	r1, r3
 80019d4:	4610      	mov	r0, r2
 80019d6:	f006 fa1b 	bl	8007e10 <HAL_TIM_ReadCapturedValue>
 80019da:	4603      	mov	r3, r0
 80019dc:	461a      	mov	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	605a      	str	r2, [r3, #4]
		}

 	// Finally
 	first_capture = true;
 	}
}
 80019e2:	e07a      	b.n	8001ada <_ZN9RCChannel8callbackEv+0x132>
 		second_value = HAL_TIM_ReadCapturedValue(timer_handle, timer_channel);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a1a      	ldr	r2, [r3, #32]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ec:	4619      	mov	r1, r3
 80019ee:	4610      	mov	r0, r2
 80019f0:	f006 fa0e 	bl	8007e10 <HAL_TIM_ReadCapturedValue>
 80019f4:	4603      	mov	r3, r0
 80019f6:	461a      	mov	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 		if(first_value > second_value)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	dd0c      	ble.n	8001a22 <_ZN9RCChannel8callbackEv+0x7a>
 			difference = minuend - first_value + second_value + 1;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6852      	ldr	r2, [r2, #4]
 8001a10:	1a9b      	subs	r3, r3, r2
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6892      	ldr	r2, [r2, #8]
 8001a16:	4413      	add	r3, r2
 8001a18:	3301      	adds	r3, #1
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	60da      	str	r2, [r3, #12]
 8001a20:	e006      	b.n	8001a30 <_ZN9RCChannel8callbackEv+0x88>
 			difference = second_value - first_value;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	1ad2      	subs	r2, r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	60da      	str	r2, [r3, #12]
 		us_width = difference;//*mFactor;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68da      	ldr	r2, [r3, #12]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	611a      	str	r2, [r3, #16]
		int32_t centered_value = us_width - neutral_us_width;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	691a      	ldr	r2, [r3, #16]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	60bb      	str	r3, [r7, #8]
 		if(centered_value >= 0)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	db23      	blt.n	8001a92 <_ZN9RCChannel8callbackEv+0xea>
 			value = centered_value*rescale_forward_magnitude/forward_range;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a4e:	68ba      	ldr	r2, [r7, #8]
 8001a50:	fb03 f202 	mul.w	r2, r3, r2
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a58:	fb92 f2f3 	sdiv	r2, r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	615a      	str	r2, [r3, #20]
			if(value>rescale_forward_magnitude && saturate)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	695a      	ldr	r2, [r3, #20]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	dd0d      	ble.n	8001a88 <_ZN9RCChannel8callbackEv+0xe0>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d008      	beq.n	8001a88 <_ZN9RCChannel8callbackEv+0xe0>
				value = rescale_forward_magnitude;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	615a      	str	r2, [r3, #20]
	 			saturate_flag = true;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2201      	movs	r2, #1
 8001a82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001a86:	e024      	b.n	8001ad2 <_ZN9RCChannel8callbackEv+0x12a>
	 			saturate_flag = false;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001a90:	e01f      	b.n	8001ad2 <_ZN9RCChannel8callbackEv+0x12a>
			value =  centered_value*rescale_reverse_magnitude/reverse_range;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	fb03 f202 	mul.w	r2, r3, r2
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aa0:	fb92 f2f3 	sdiv	r2, r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	615a      	str	r2, [r3, #20]
	 		if(value<-rescale_reverse_magnitude)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	695a      	ldr	r2, [r3, #20]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab0:	425b      	negs	r3, r3
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	da09      	bge.n	8001aca <_ZN9RCChannel8callbackEv+0x122>
	 			value = -rescale_reverse_magnitude;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aba:	425a      	negs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	615a      	str	r2, [r3, #20]
	 			saturate_flag = true;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001ac8:	e003      	b.n	8001ad2 <_ZN9RCChannel8callbackEv+0x12a>
	 			saturate_flag = false;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 	first_capture = true;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
}
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <_ZN9RCChannelD1Ev>:
/**
 * @brief Destructor for the RCChannel class.
 * 
 * This destructor stops the interrupts for the RCChannel object.
 */
RCChannel::~RCChannel() {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	4a07      	ldr	r2, [pc, #28]	@ (8001b0c <_ZN9RCChannelD1Ev+0x28>)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	601a      	str	r2, [r3, #0]
	// Stop interrupts
	HAL_TIM_IC_Stop_IT(timer_handle, timer_channel);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a1a      	ldr	r2, [r3, #32]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afa:	4619      	mov	r1, r3
 8001afc:	4610      	mov	r0, r2
 8001afe:	f005 fa95 	bl	800702c <HAL_TIM_IC_Stop_IT>
}
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	08010e38 	.word	0x08010e38

08001b10 <_ZN9RCChannelD0Ev>:
RCChannel::~RCChannel() {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
}
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff ffe3 	bl	8001ae4 <_ZN9RCChannelD1Ev>
 8001b1e:	215c      	movs	r1, #92	@ 0x5c
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f00c fa4c 	bl	800dfbe <_ZdlPvj>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <_ZN20RemoteControlControlC1EP9RCChannelP12MotorControlt>:
 * @param rc_channel Pointer to the RCChannel object.
 * @param motor_controller Pointer to a MotorControl object.
 * @param maximum_speed The maximum speed to scale the RC channel value to.
 * @details Initializes the RemoteControlControl object with pointers to an RC channel and a motor controller, as well as a maximum speed for scaling.
 */
RemoteControlControl::RemoteControlControl(
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
 8001b3c:	807b      	strh	r3, [r7, #2]
    RCChannel* rc_channel,
    MotorControl* motor_controller,
    uint16_t maximum_speed)
    : rc_channel(rc_channel),
      motor_controller(motor_controller),
      maximum_speed(maximum_speed)
 8001b3e:	4a09      	ldr	r2, [pc, #36]	@ (8001b64 <_ZN20RemoteControlControlC1EP9RCChannelP12MotorControlt+0x34>)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	601a      	str	r2, [r3, #0]
    : rc_channel(rc_channel),
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	605a      	str	r2, [r3, #4]
      motor_controller(motor_controller),
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
      maximum_speed(maximum_speed)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	887a      	ldrh	r2, [r7, #2]
 8001b54:	819a      	strh	r2, [r3, #12]
{
    // Initialization code here, if needed.
}
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	08010e48 	.word	0x08010e48

08001b68 <_ZN20RemoteControlControlD1Ev>:

/**
 * @brief Destructs the RemoteControlControl object and releases any dynamically allocated resources.
 * @details This destructor ensures that any dynamically allocated memory for the RC channel and motor controller is properly released to prevent memory leaks.
 */
RemoteControlControl::~RemoteControlControl()
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	4a13      	ldr	r2, [pc, #76]	@ (8001bc0 <_ZN20RemoteControlControlD1Ev+0x58>)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	601a      	str	r2, [r3, #0]
{
    // Deallocate memory for rc_channel if it was dynamically allocated
    if (rc_channel != nullptr)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00b      	beq.n	8001b96 <_ZN20RemoteControlControlD1Ev+0x2e>
    {
        delete rc_channel;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d004      	beq.n	8001b90 <_ZN20RemoteControlControlD1Ev+0x28>
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	3204      	adds	r2, #4
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	4790      	blx	r2
        rc_channel = nullptr; // Optional: Set to nullptr to avoid dangling pointers
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	605a      	str	r2, [r3, #4]
    }

    // Deallocate memory for motor_controller if it was dynamically allocated
    if (motor_controller != nullptr)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00b      	beq.n	8001bb6 <_ZN20RemoteControlControlD1Ev+0x4e>
    {
        delete motor_controller;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d004      	beq.n	8001bb0 <_ZN20RemoteControlControlD1Ev+0x48>
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	3204      	adds	r2, #4
 8001baa:	6812      	ldr	r2, [r2, #0]
 8001bac:	4618      	mov	r0, r3
 8001bae:	4790      	blx	r2
        motor_controller = nullptr; // Optional: Set to nullptr to avoid dangling pointers
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	609a      	str	r2, [r3, #8]
    }
}
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	08010e48 	.word	0x08010e48

08001bc4 <_ZN20RemoteControlControlD0Ev>:
RemoteControlControl::~RemoteControlControl()
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
}
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff ffcb 	bl	8001b68 <_ZN20RemoteControlControlD1Ev>
 8001bd2:	2114      	movs	r1, #20
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f00c f9f2 	bl	800dfbe <_ZdlPvj>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <_ZN17SparkFun_APDS9960C1EP17I2C_HandleTypeDef>:
 #include "SparkFunAPDS9960.h"

/**
 * @brief Constructor - Instantiates SparkFun_APDS9960 object
 */
SparkFun_APDS9960::SparkFun_APDS9960(I2C_HandleTypeDef* I2C_handle)
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
: I2C_handle(I2C_handle)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
{
    gesture_ud_delta_ = 0;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    gesture_lr_delta_ = 0;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    gesture_ud_count_ = 0;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    gesture_lr_count_ = 0;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    gesture_near_count_ = 0;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    gesture_far_count_ = 0;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

    gesture_state_ = 0;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    gesture_motion_ = DIR_NONE;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
}
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <_ZN17SparkFun_APDS99604initEv>:
 * @brief Configures I2C communications and initializes registers to defaults
 *
 * @return True if initialized successfully. False otherwise.
 */
bool SparkFun_APDS9960::init()
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

    /* Initialize I2C */
    // Wire.begin();

    /* Read ID register and check against known values for APDS-9960 */
    if( !wireReadDataByte(APDS9960_ID, id) ) {
 8001c4c:	f107 030f 	add.w	r3, r7, #15
 8001c50:	461a      	mov	r2, r3
 8001c52:	2192      	movs	r1, #146	@ 0x92
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 feee 	bl	8002a36 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	f083 0301 	eor.w	r3, r3, #1
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <_ZN17SparkFun_APDS99604initEv+0x26>
        return false;
 8001c66:	2300      	movs	r3, #0
 8001c68:	e182      	b.n	8001f70 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !(id == APDS9960_ID_1 || id == APDS9960_ID_2) ) {
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	2bab      	cmp	r3, #171	@ 0xab
 8001c6e:	d004      	beq.n	8001c7a <_ZN17SparkFun_APDS99604initEv+0x36>
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	2b9c      	cmp	r3, #156	@ 0x9c
 8001c74:	d001      	beq.n	8001c7a <_ZN17SparkFun_APDS99604initEv+0x36>
        return false;
 8001c76:	2300      	movs	r3, #0
 8001c78:	e17a      	b.n	8001f70 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }

    /* Set ENABLE register to 0 (disable all features) */
    if( !setMode(ALL, OFF) ) {
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2107      	movs	r1, #7
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f992 	bl	8001fa8 <_ZN17SparkFun_APDS99607setModeEhh>
 8001c84:	4603      	mov	r3, r0
 8001c86:	f083 0301 	eor.w	r3, r3, #1
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <_ZN17SparkFun_APDS99604initEv+0x50>
        return false;
 8001c90:	2300      	movs	r3, #0
 8001c92:	e16d      	b.n	8001f70 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }

    /* Set default values for ambient light and proximity registers */
    if( !wireWriteDataByte(APDS9960_ATIME, DEFAULT_ATIME) ) {
 8001c94:	22db      	movs	r2, #219	@ 0xdb
 8001c96:	2181      	movs	r1, #129	@ 0x81
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 fea8 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	f083 0301 	eor.w	r3, r3, #1
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <_ZN17SparkFun_APDS99604initEv+0x6a>
        return false;
 8001caa:	2300      	movs	r3, #0
 8001cac:	e160      	b.n	8001f70 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !wireWriteDataByte(APDS9960_WTIME, DEFAULT_WTIME) ) {
 8001cae:	22f6      	movs	r2, #246	@ 0xf6
 8001cb0:	2183      	movs	r1, #131	@ 0x83
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 fe9b 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f083 0301 	eor.w	r3, r3, #1
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <_ZN17SparkFun_APDS99604initEv+0x84>
        return false;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	e153      	b.n	8001f70 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !wireWriteDataByte(APDS9960_PPULSE, DEFAULT_PROX_PPULSE) ) {
 8001cc8:	2287      	movs	r2, #135	@ 0x87
 8001cca:	218e      	movs	r1, #142	@ 0x8e
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 fe8e 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	f083 0301 	eor.w	r3, r3, #1
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <_ZN17SparkFun_APDS99604initEv+0x9e>
        return false;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	e146      	b.n	8001f70 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !wireWriteDataByte(APDS9960_POFFSET_UR, DEFAULT_POFFSET_UR) ) {
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	219d      	movs	r1, #157	@ 0x9d
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 fe81 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8001cec:	4603      	mov	r3, r0
 8001cee:	f083 0301 	eor.w	r3, r3, #1
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <_ZN17SparkFun_APDS99604initEv+0xb8>
        return false;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	e139      	b.n	8001f70 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !wireWriteDataByte(APDS9960_POFFSET_DL, DEFAULT_POFFSET_DL) ) {
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	219e      	movs	r1, #158	@ 0x9e
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 fe74 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8001d06:	4603      	mov	r3, r0
 8001d08:	f083 0301 	eor.w	r3, r3, #1
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <_ZN17SparkFun_APDS99604initEv+0xd2>
        return false;
 8001d12:	2300      	movs	r3, #0
 8001d14:	e12c      	b.n	8001f70 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !wireWriteDataByte(APDS9960_CONFIG1, DEFAULT_CONFIG1) ) {
 8001d16:	2260      	movs	r2, #96	@ 0x60
 8001d18:	218d      	movs	r1, #141	@ 0x8d
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 fe67 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8001d20:	4603      	mov	r3, r0
 8001d22:	f083 0301 	eor.w	r3, r3, #1
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <_ZN17SparkFun_APDS99604initEv+0xec>
        return false;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	e11f      	b.n	8001f70 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !setLEDDrive(DEFAULT_LDRIVE) ) {
 8001d30:	2100      	movs	r1, #0
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 fb81 	bl	800243a <_ZN17SparkFun_APDS996011setLEDDriveEh>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	f083 0301 	eor.w	r3, r3, #1
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <_ZN17SparkFun_APDS99604initEv+0x104>
        return false;
 8001d44:	2300      	movs	r3, #0
 8001d46:	e113      	b.n	8001f70 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !setProximityGain(DEFAULT_PGAIN) ) {
 8001d48:	2102      	movs	r1, #2
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 fbae 	bl	80024ac <_ZN17SparkFun_APDS996016setProximityGainEh>
 8001d50:	4603      	mov	r3, r0
 8001d52:	f083 0301 	eor.w	r3, r3, #1
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <_ZN17SparkFun_APDS99604initEv+0x11c>
        return false;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	e107      	b.n	8001f70 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !setAmbientLightGain(DEFAULT_AGAIN) ) {
 8001d60:	2101      	movs	r1, #1
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 fbdb 	bl	800251e <_ZN17SparkFun_APDS996019setAmbientLightGainEh>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	f083 0301 	eor.w	r3, r3, #1
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <_ZN17SparkFun_APDS99604initEv+0x134>
        return false;
 8001d74:	2300      	movs	r3, #0
 8001d76:	e0fb      	b.n	8001f70 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !setProxIntLowThresh(DEFAULT_PILT) ) {
 8001d78:	2100      	movs	r1, #0
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 fb2b 	bl	80023d6 <_ZN17SparkFun_APDS996019setProxIntLowThreshEh>
 8001d80:	4603      	mov	r3, r0
 8001d82:	f083 0301 	eor.w	r3, r3, #1
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <_ZN17SparkFun_APDS99604initEv+0x14c>
        return false;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	e0ef      	b.n	8001f70 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !setProxIntHighThresh(DEFAULT_PIHT) ) {
 8001d90:	2132      	movs	r1, #50	@ 0x32
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 fb38 	bl	8002408 <_ZN17SparkFun_APDS996020setProxIntHighThreshEh>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	f083 0301 	eor.w	r3, r3, #1
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <_ZN17SparkFun_APDS99604initEv+0x164>
        return false;
 8001da4:	2300      	movs	r3, #0
 8001da6:	e0e3      	b.n	8001f70 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !setLightIntLowThreshold(DEFAULT_AILT) ) {
 8001da8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 fcc6 	bl	800273e <_ZN17SparkFun_APDS996023setLightIntLowThresholdEt>
 8001db2:	4603      	mov	r3, r0
 8001db4:	f083 0301 	eor.w	r3, r3, #1
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <_ZN17SparkFun_APDS99604initEv+0x17e>
        return false;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	e0d6      	b.n	8001f70 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !setLightIntHighThreshold(DEFAULT_AIHT) ) {
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 fce7 	bl	8002798 <_ZN17SparkFun_APDS996024setLightIntHighThresholdEt>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	f083 0301 	eor.w	r3, r3, #1
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <_ZN17SparkFun_APDS99604initEv+0x196>
        return false;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	e0ca      	b.n	8001f70 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !wireWriteDataByte(APDS9960_PERS, DEFAULT_PERS) ) {
 8001dda:	2211      	movs	r2, #17
 8001ddc:	218c      	movs	r1, #140	@ 0x8c
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 fe05 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8001de4:	4603      	mov	r3, r0
 8001de6:	f083 0301 	eor.w	r3, r3, #1
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <_ZN17SparkFun_APDS99604initEv+0x1b0>
        return false;
 8001df0:	2300      	movs	r3, #0
 8001df2:	e0bd      	b.n	8001f70 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !wireWriteDataByte(APDS9960_CONFIG2, DEFAULT_CONFIG2) ) {
 8001df4:	2201      	movs	r2, #1
 8001df6:	2190      	movs	r1, #144	@ 0x90
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 fdf8 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	f083 0301 	eor.w	r3, r3, #1
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <_ZN17SparkFun_APDS99604initEv+0x1ca>
        return false;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	e0b0      	b.n	8001f70 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !wireWriteDataByte(APDS9960_CONFIG3, DEFAULT_CONFIG3) ) {
 8001e0e:	2200      	movs	r2, #0
 8001e10:	219f      	movs	r1, #159	@ 0x9f
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 fdeb 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	f083 0301 	eor.w	r3, r3, #1
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <_ZN17SparkFun_APDS99604initEv+0x1e4>
        return false;
 8001e24:	2300      	movs	r3, #0
 8001e26:	e0a3      	b.n	8001f70 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }

    /* Set default values for gesture sense registers */
    if( !setGestureEnterThresh(DEFAULT_GPENTH) ) {
 8001e28:	2128      	movs	r1, #40	@ 0x28
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 fbad 	bl	800258a <_ZN17SparkFun_APDS996021setGestureEnterThreshEh>
 8001e30:	4603      	mov	r3, r0
 8001e32:	f083 0301 	eor.w	r3, r3, #1
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <_ZN17SparkFun_APDS99604initEv+0x1fc>
        return false;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	e097      	b.n	8001f70 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !setGestureExitThresh(DEFAULT_GEXTH) ) {
 8001e40:	211e      	movs	r1, #30
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 fbba 	bl	80025bc <_ZN17SparkFun_APDS996020setGestureExitThreshEh>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	f083 0301 	eor.w	r3, r3, #1
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <_ZN17SparkFun_APDS99604initEv+0x214>
        return false;
 8001e54:	2300      	movs	r3, #0
 8001e56:	e08b      	b.n	8001f70 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !wireWriteDataByte(APDS9960_GCONF1, DEFAULT_GCONF1) ) {
 8001e58:	2240      	movs	r2, #64	@ 0x40
 8001e5a:	21a2      	movs	r1, #162	@ 0xa2
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 fdc6 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8001e62:	4603      	mov	r3, r0
 8001e64:	f083 0301 	eor.w	r3, r3, #1
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <_ZN17SparkFun_APDS99604initEv+0x22e>
        return false;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	e07e      	b.n	8001f70 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !setGestureGain(DEFAULT_GGAIN) ) {
 8001e72:	2102      	movs	r1, #2
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 fbba 	bl	80025ee <_ZN17SparkFun_APDS996014setGestureGainEh>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	f083 0301 	eor.w	r3, r3, #1
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <_ZN17SparkFun_APDS99604initEv+0x246>
        return false;
 8001e86:	2300      	movs	r3, #0
 8001e88:	e072      	b.n	8001f70 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !setGestureLEDDrive(DEFAULT_GLDRIVE) ) {
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 fbe7 	bl	8002660 <_ZN17SparkFun_APDS996018setGestureLEDDriveEh>
 8001e92:	4603      	mov	r3, r0
 8001e94:	f083 0301 	eor.w	r3, r3, #1
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <_ZN17SparkFun_APDS99604initEv+0x25e>
        return false;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	e066      	b.n	8001f70 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !setGestureWaitTime(DEFAULT_GWTIME) ) {
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 fc14 	bl	80026d2 <_ZN17SparkFun_APDS996018setGestureWaitTimeEh>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	f083 0301 	eor.w	r3, r3, #1
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <_ZN17SparkFun_APDS99604initEv+0x276>
        return false;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e05a      	b.n	8001f70 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !wireWriteDataByte(APDS9960_GOFFSET_U, DEFAULT_GOFFSET) ) {
 8001eba:	2200      	movs	r2, #0
 8001ebc:	21a4      	movs	r1, #164	@ 0xa4
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 fd95 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f083 0301 	eor.w	r3, r3, #1
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <_ZN17SparkFun_APDS99604initEv+0x290>
        return false;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	e04d      	b.n	8001f70 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !wireWriteDataByte(APDS9960_GOFFSET_D, DEFAULT_GOFFSET) ) {
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	21a5      	movs	r1, #165	@ 0xa5
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 fd88 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	f083 0301 	eor.w	r3, r3, #1
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <_ZN17SparkFun_APDS99604initEv+0x2aa>
        return false;
 8001eea:	2300      	movs	r3, #0
 8001eec:	e040      	b.n	8001f70 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !wireWriteDataByte(APDS9960_GOFFSET_L, DEFAULT_GOFFSET) ) {
 8001eee:	2200      	movs	r2, #0
 8001ef0:	21a7      	movs	r1, #167	@ 0xa7
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 fd7b 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	f083 0301 	eor.w	r3, r3, #1
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <_ZN17SparkFun_APDS99604initEv+0x2c4>
        return false;
 8001f04:	2300      	movs	r3, #0
 8001f06:	e033      	b.n	8001f70 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !wireWriteDataByte(APDS9960_GOFFSET_R, DEFAULT_GOFFSET) ) {
 8001f08:	2200      	movs	r2, #0
 8001f0a:	21a9      	movs	r1, #169	@ 0xa9
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 fd6e 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8001f12:	4603      	mov	r3, r0
 8001f14:	f083 0301 	eor.w	r3, r3, #1
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <_ZN17SparkFun_APDS99604initEv+0x2de>
        return false;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e026      	b.n	8001f70 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !wireWriteDataByte(APDS9960_GPULSE, DEFAULT_GPULSE) ) {
 8001f22:	22c9      	movs	r2, #201	@ 0xc9
 8001f24:	21a6      	movs	r1, #166	@ 0xa6
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 fd61 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	f083 0301 	eor.w	r3, r3, #1
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <_ZN17SparkFun_APDS99604initEv+0x2f8>
        return false;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	e019      	b.n	8001f70 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !wireWriteDataByte(APDS9960_GCONF3, DEFAULT_GCONF3) ) {
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	21aa      	movs	r1, #170	@ 0xaa
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 fd54 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8001f46:	4603      	mov	r3, r0
 8001f48:	f083 0301 	eor.w	r3, r3, #1
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <_ZN17SparkFun_APDS99604initEv+0x312>
        return false;
 8001f52:	2300      	movs	r3, #0
 8001f54:	e00c      	b.n	8001f70 <_ZN17SparkFun_APDS99604initEv+0x32c>
    }
    if( !setGestureIntEnable(DEFAULT_GIEN) ) {
 8001f56:	2100      	movs	r1, #0
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f000 fcbc 	bl	80028d6 <_ZN17SparkFun_APDS996019setGestureIntEnableEh>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	f083 0301 	eor.w	r3, r3, #1
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <_ZN17SparkFun_APDS99604initEv+0x32a>
        return false;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e000      	b.n	8001f70 <_ZN17SparkFun_APDS99604initEv+0x32c>
        Serial.print(": 0x");
        Serial.println(val, HEX);
    }
#endif

    return true;
 8001f6e:	2301      	movs	r3, #1
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <_ZN17SparkFun_APDS99607getModeEv>:
 * @brief Reads and returns the contents of the ENABLE register
 *
 * @return Contents of the ENABLE register. 0xFF if error.
 */
uint8_t SparkFun_APDS9960::getMode()
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
    uint8_t enable_value;

    /* Read current ENABLE register */
    if( !wireReadDataByte(APDS9960_ENABLE, enable_value) ) {
 8001f80:	f107 030f 	add.w	r3, r7, #15
 8001f84:	461a      	mov	r2, r3
 8001f86:	2180      	movs	r1, #128	@ 0x80
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 fd54 	bl	8002a36 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	f083 0301 	eor.w	r3, r3, #1
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <_ZN17SparkFun_APDS99607getModeEv+0x26>
        return ERROR;
 8001f9a:	23ff      	movs	r3, #255	@ 0xff
 8001f9c:	e000      	b.n	8001fa0 <_ZN17SparkFun_APDS99607getModeEv+0x28>
    }

    return enable_value;
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <_ZN17SparkFun_APDS99607setModeEhh>:
 * @param[in] mode which feature to enable
 * @param[in] enable ON (1) or OFF (0)
 * @return True if operation success. False otherwise.
 */
bool SparkFun_APDS9960::setMode(uint8_t mode, uint8_t enable)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	70fb      	strb	r3, [r7, #3]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	70bb      	strb	r3, [r7, #2]
    uint8_t reg_val;

    /* Read current ENABLE register */
    reg_val = getMode();
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff ffdd 	bl	8001f78 <_ZN17SparkFun_APDS99607getModeEv>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	73fb      	strb	r3, [r7, #15]
    if( reg_val == ERROR ) {
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
 8001fc4:	2bff      	cmp	r3, #255	@ 0xff
 8001fc6:	d101      	bne.n	8001fcc <_ZN17SparkFun_APDS99607setModeEhh+0x24>
        return false;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	e03b      	b.n	8002044 <_ZN17SparkFun_APDS99607setModeEhh+0x9c>
    }

    /* Change bit(s) in ENABLE register */
    enable = enable & 0x01;
 8001fcc:	78bb      	ldrb	r3, [r7, #2]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	70bb      	strb	r3, [r7, #2]
    if( mode >= 0 && mode <= 6 ) {
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d81a      	bhi.n	8002010 <_ZN17SparkFun_APDS99607setModeEhh+0x68>
        if (enable) {
 8001fda:	78bb      	ldrb	r3, [r7, #2]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d00a      	beq.n	8001ff6 <_ZN17SparkFun_APDS99607setModeEhh+0x4e>
            reg_val |= (1 << mode);
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	b25a      	sxtb	r2, r3
 8001fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	b25b      	sxtb	r3, r3
 8001ff2:	73fb      	strb	r3, [r7, #15]
 8001ff4:	e017      	b.n	8002026 <_ZN17SparkFun_APDS99607setModeEhh+0x7e>
        } else {
            reg_val &= ~(1 << mode);
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	b25b      	sxtb	r3, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	b25a      	sxtb	r2, r3
 8002004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002008:	4013      	ands	r3, r2
 800200a:	b25b      	sxtb	r3, r3
 800200c:	73fb      	strb	r3, [r7, #15]
 800200e:	e00a      	b.n	8002026 <_ZN17SparkFun_APDS99607setModeEhh+0x7e>
        }
    } else if( mode == ALL ) {
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	2b07      	cmp	r3, #7
 8002014:	d107      	bne.n	8002026 <_ZN17SparkFun_APDS99607setModeEhh+0x7e>
        if (enable) {
 8002016:	78bb      	ldrb	r3, [r7, #2]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <_ZN17SparkFun_APDS99607setModeEhh+0x7a>
            reg_val = 0x7F;
 800201c:	237f      	movs	r3, #127	@ 0x7f
 800201e:	73fb      	strb	r3, [r7, #15]
 8002020:	e001      	b.n	8002026 <_ZN17SparkFun_APDS99607setModeEhh+0x7e>
        } else {
            reg_val = 0x00;
 8002022:	2300      	movs	r3, #0
 8002024:	73fb      	strb	r3, [r7, #15]
        }
    }

    /* Write value back to ENABLE register */
    if( !wireWriteDataByte(APDS9960_ENABLE, reg_val) ) {
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	461a      	mov	r2, r3
 800202a:	2180      	movs	r1, #128	@ 0x80
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f000 fcde 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8002032:	4603      	mov	r3, r0
 8002034:	f083 0301 	eor.w	r3, r3, #1
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <_ZN17SparkFun_APDS99607setModeEhh+0x9a>
        return false;
 800203e:	2300      	movs	r3, #0
 8002040:	e000      	b.n	8002044 <_ZN17SparkFun_APDS99607setModeEhh+0x9c>
    }

    return true;
 8002042:	2301      	movs	r3, #1
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <_ZN17SparkFun_APDS996017enableLightSensorEb>:
 *
 * @param[in] interrupts true to enable hardware interrupt on high or low light
 * @return True if sensor enabled correctly. False on error.
 */
bool SparkFun_APDS9960::enableLightSensor(bool interrupts)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	70fb      	strb	r3, [r7, #3]

    /* Set default gain, interrupts, enable power, and enable sensor */
    if( !setAmbientLightGain(DEFAULT_AGAIN) ) {
 8002058:	2101      	movs	r1, #1
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 fa5f 	bl	800251e <_ZN17SparkFun_APDS996019setAmbientLightGainEh>
 8002060:	4603      	mov	r3, r0
 8002062:	f083 0301 	eor.w	r3, r3, #1
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <_ZN17SparkFun_APDS996017enableLightSensorEb+0x24>
        return false;
 800206c:	2300      	movs	r3, #0
 800206e:	e033      	b.n	80020d8 <_ZN17SparkFun_APDS996017enableLightSensorEb+0x8c>
    }
    if( interrupts ) {
 8002070:	78fb      	ldrb	r3, [r7, #3]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00b      	beq.n	800208e <_ZN17SparkFun_APDS996017enableLightSensorEb+0x42>
        if( !setAmbientLightIntEnable(1) ) {
 8002076:	2101      	movs	r1, #1
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 fbba 	bl	80027f2 <_ZN17SparkFun_APDS996024setAmbientLightIntEnableEh>
 800207e:	4603      	mov	r3, r0
 8002080:	f083 0301 	eor.w	r3, r3, #1
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00d      	beq.n	80020a6 <_ZN17SparkFun_APDS996017enableLightSensorEb+0x5a>
            return false;
 800208a:	2300      	movs	r3, #0
 800208c:	e024      	b.n	80020d8 <_ZN17SparkFun_APDS996017enableLightSensorEb+0x8c>
        }
    } else {
        if( !setAmbientLightIntEnable(0) ) {
 800208e:	2100      	movs	r1, #0
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 fbae 	bl	80027f2 <_ZN17SparkFun_APDS996024setAmbientLightIntEnableEh>
 8002096:	4603      	mov	r3, r0
 8002098:	f083 0301 	eor.w	r3, r3, #1
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <_ZN17SparkFun_APDS996017enableLightSensorEb+0x5a>
            return false;
 80020a2:	2300      	movs	r3, #0
 80020a4:	e018      	b.n	80020d8 <_ZN17SparkFun_APDS996017enableLightSensorEb+0x8c>
        }
    }
    if( !enablePower() ){
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f86d 	bl	8002186 <_ZN17SparkFun_APDS996011enablePowerEv>
 80020ac:	4603      	mov	r3, r0
 80020ae:	f083 0301 	eor.w	r3, r3, #1
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <_ZN17SparkFun_APDS996017enableLightSensorEb+0x70>
        return false;
 80020b8:	2300      	movs	r3, #0
 80020ba:	e00d      	b.n	80020d8 <_ZN17SparkFun_APDS996017enableLightSensorEb+0x8c>
    }
    if( !setMode(AMBIENT_LIGHT, 1) ) {
 80020bc:	2201      	movs	r2, #1
 80020be:	2101      	movs	r1, #1
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff ff71 	bl	8001fa8 <_ZN17SparkFun_APDS99607setModeEhh>
 80020c6:	4603      	mov	r3, r0
 80020c8:	f083 0301 	eor.w	r3, r3, #1
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <_ZN17SparkFun_APDS996017enableLightSensorEb+0x8a>
        return false;
 80020d2:	2300      	movs	r3, #0
 80020d4:	e000      	b.n	80020d8 <_ZN17SparkFun_APDS996017enableLightSensorEb+0x8c>
    }

    return true;
 80020d6:	2301      	movs	r3, #1

}
 80020d8:	4618      	mov	r0, r3
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <_ZN17SparkFun_APDS996022disableProximitySensorEv>:
 * @brief Ends the proximity sensor on the APDS-9960
 *
 * @return True if sensor disabled correctly. False on error.
 */
bool SparkFun_APDS9960::disableProximitySensor()
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
	if( !setProximityIntEnable(0) ) {
 80020e8:	2100      	movs	r1, #0
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 fbba 	bl	8002864 <_ZN17SparkFun_APDS996021setProximityIntEnableEh>
 80020f0:	4603      	mov	r3, r0
 80020f2:	f083 0301 	eor.w	r3, r3, #1
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <_ZN17SparkFun_APDS996022disableProximitySensorEv+0x20>
		return false;
 80020fc:	2300      	movs	r3, #0
 80020fe:	e00d      	b.n	800211c <_ZN17SparkFun_APDS996022disableProximitySensorEv+0x3c>
	}
	if( !setMode(PROXIMITY, 0) ) {
 8002100:	2200      	movs	r2, #0
 8002102:	2102      	movs	r1, #2
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff ff4f 	bl	8001fa8 <_ZN17SparkFun_APDS99607setModeEhh>
 800210a:	4603      	mov	r3, r0
 800210c:	f083 0301 	eor.w	r3, r3, #1
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <_ZN17SparkFun_APDS996022disableProximitySensorEv+0x3a>
		return false;
 8002116:	2300      	movs	r3, #0
 8002118:	e000      	b.n	800211c <_ZN17SparkFun_APDS996022disableProximitySensorEv+0x3c>
	}

	return true;
 800211a:	2301      	movs	r3, #1
}
 800211c:	4618      	mov	r0, r3
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <_ZN17SparkFun_APDS996020disableGestureSensorEv>:
 * @brief Ends the gesture recognition engine on the APDS-9960
 *
 * @return True if engine disabled correctly. False on error.
 */
bool SparkFun_APDS9960::disableGestureSensor()
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
    resetGestureParameters();
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 f920 	bl	8002372 <_ZN17SparkFun_APDS996022resetGestureParametersEv>
    if( !setGestureIntEnable(0) ) {
 8002132:	2100      	movs	r1, #0
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 fbce 	bl	80028d6 <_ZN17SparkFun_APDS996019setGestureIntEnableEh>
 800213a:	4603      	mov	r3, r0
 800213c:	f083 0301 	eor.w	r3, r3, #1
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <_ZN17SparkFun_APDS996020disableGestureSensorEv+0x26>
        return false;
 8002146:	2300      	movs	r3, #0
 8002148:	e019      	b.n	800217e <_ZN17SparkFun_APDS996020disableGestureSensorEv+0x5a>
    }
    if( !setGestureMode(0) ) {
 800214a:	2100      	movs	r1, #0
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 fbfb 	bl	8002948 <_ZN17SparkFun_APDS996014setGestureModeEh>
 8002152:	4603      	mov	r3, r0
 8002154:	f083 0301 	eor.w	r3, r3, #1
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <_ZN17SparkFun_APDS996020disableGestureSensorEv+0x3e>
        return false;
 800215e:	2300      	movs	r3, #0
 8002160:	e00d      	b.n	800217e <_ZN17SparkFun_APDS996020disableGestureSensorEv+0x5a>
    }
    if( !setMode(GESTURE, 0) ) {
 8002162:	2200      	movs	r2, #0
 8002164:	2106      	movs	r1, #6
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff ff1e 	bl	8001fa8 <_ZN17SparkFun_APDS99607setModeEhh>
 800216c:	4603      	mov	r3, r0
 800216e:	f083 0301 	eor.w	r3, r3, #1
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <_ZN17SparkFun_APDS996020disableGestureSensorEv+0x58>
        return false;
 8002178:	2300      	movs	r3, #0
 800217a:	e000      	b.n	800217e <_ZN17SparkFun_APDS996020disableGestureSensorEv+0x5a>
    }

    return true;
 800217c:	2301      	movs	r3, #1
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <_ZN17SparkFun_APDS996011enablePowerEv>:
 * Turn the APDS-9960 on
 *
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::enablePower()
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
    if( !setMode(POWER, 1) ) {
 800218e:	2201      	movs	r2, #1
 8002190:	2100      	movs	r1, #0
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff ff08 	bl	8001fa8 <_ZN17SparkFun_APDS99607setModeEhh>
 8002198:	4603      	mov	r3, r0
 800219a:	f083 0301 	eor.w	r3, r3, #1
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <_ZN17SparkFun_APDS996011enablePowerEv+0x22>
        return false;
 80021a4:	2300      	movs	r3, #0
 80021a6:	e000      	b.n	80021aa <_ZN17SparkFun_APDS996011enablePowerEv+0x24>
    }

    return true;
 80021a8:	2301      	movs	r3, #1
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <_ZN17SparkFun_APDS996016readAmbientLightERt>:
 *
 * @param[out] val value of the light sensor.
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::readAmbientLight(uint16_t &val)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b084      	sub	sp, #16
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	6039      	str	r1, [r7, #0]
    uint8_t val_byte;
    val = 0;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	2200      	movs	r2, #0
 80021c0:	801a      	strh	r2, [r3, #0]

    /* Read value from clear channel, low byte register */
    if( !wireReadDataByte(APDS9960_CDATAL, val_byte) ) {
 80021c2:	f107 030f 	add.w	r3, r7, #15
 80021c6:	461a      	mov	r2, r3
 80021c8:	2194      	movs	r1, #148	@ 0x94
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 fc33 	bl	8002a36 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 80021d0:	4603      	mov	r3, r0
 80021d2:	f083 0301 	eor.w	r3, r3, #1
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <_ZN17SparkFun_APDS996016readAmbientLightERt+0x2e>
        return false;
 80021dc:	2300      	movs	r3, #0
 80021de:	e01c      	b.n	800221a <_ZN17SparkFun_APDS996016readAmbientLightERt+0x68>
    }
    val = val_byte;
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
 80021e2:	461a      	mov	r2, r3
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	801a      	strh	r2, [r3, #0]

    /* Read value from clear channel, high byte register */
    if( !wireReadDataByte(APDS9960_CDATAH, val_byte) ) {
 80021e8:	f107 030f 	add.w	r3, r7, #15
 80021ec:	461a      	mov	r2, r3
 80021ee:	2195      	movs	r1, #149	@ 0x95
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 fc20 	bl	8002a36 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 80021f6:	4603      	mov	r3, r0
 80021f8:	f083 0301 	eor.w	r3, r3, #1
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <_ZN17SparkFun_APDS996016readAmbientLightERt+0x54>
        return false;
 8002202:	2300      	movs	r3, #0
 8002204:	e009      	b.n	800221a <_ZN17SparkFun_APDS996016readAmbientLightERt+0x68>
    }
    val = val + ((uint16_t)val_byte << 8);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	881a      	ldrh	r2, [r3, #0]
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	b29b      	uxth	r3, r3
 8002210:	4413      	add	r3, r2
 8002212:	b29a      	uxth	r2, r3
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	801a      	strh	r2, [r3, #0]

    return true;
 8002218:	2301      	movs	r3, #1
}
 800221a:	4618      	mov	r0, r3
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <_ZN17SparkFun_APDS996012readRedLightERt>:
 *
 * @param[out] val value of the light sensor.
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::readRedLight(uint16_t &val)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b084      	sub	sp, #16
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
 800222a:	6039      	str	r1, [r7, #0]
    uint8_t val_byte;
    val = 0;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	2200      	movs	r2, #0
 8002230:	801a      	strh	r2, [r3, #0]

    /* Read value from clear channel, low byte register */
    if( !wireReadDataByte(APDS9960_RDATAL, val_byte) ) {
 8002232:	f107 030f 	add.w	r3, r7, #15
 8002236:	461a      	mov	r2, r3
 8002238:	2196      	movs	r1, #150	@ 0x96
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 fbfb 	bl	8002a36 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 8002240:	4603      	mov	r3, r0
 8002242:	f083 0301 	eor.w	r3, r3, #1
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <_ZN17SparkFun_APDS996012readRedLightERt+0x2e>
        return false;
 800224c:	2300      	movs	r3, #0
 800224e:	e01c      	b.n	800228a <_ZN17SparkFun_APDS996012readRedLightERt+0x68>
    }
    val = val_byte;
 8002250:	7bfb      	ldrb	r3, [r7, #15]
 8002252:	461a      	mov	r2, r3
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	801a      	strh	r2, [r3, #0]

    /* Read value from clear channel, high byte register */
    if( !wireReadDataByte(APDS9960_RDATAH, val_byte) ) {
 8002258:	f107 030f 	add.w	r3, r7, #15
 800225c:	461a      	mov	r2, r3
 800225e:	2197      	movs	r1, #151	@ 0x97
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 fbe8 	bl	8002a36 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 8002266:	4603      	mov	r3, r0
 8002268:	f083 0301 	eor.w	r3, r3, #1
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <_ZN17SparkFun_APDS996012readRedLightERt+0x54>
        return false;
 8002272:	2300      	movs	r3, #0
 8002274:	e009      	b.n	800228a <_ZN17SparkFun_APDS996012readRedLightERt+0x68>
    }
    val = val + ((uint16_t)val_byte << 8);
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	881a      	ldrh	r2, [r3, #0]
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	021b      	lsls	r3, r3, #8
 800227e:	b29b      	uxth	r3, r3
 8002280:	4413      	add	r3, r2
 8002282:	b29a      	uxth	r2, r3
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	801a      	strh	r2, [r3, #0]

    return true;
 8002288:	2301      	movs	r3, #1
}
 800228a:	4618      	mov	r0, r3
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <_ZN17SparkFun_APDS996014readGreenLightERt>:
 *
 * @param[out] val value of the light sensor.
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::readGreenLight(uint16_t &val)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b084      	sub	sp, #16
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
 800229a:	6039      	str	r1, [r7, #0]
    uint8_t val_byte;
    val = 0;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	2200      	movs	r2, #0
 80022a0:	801a      	strh	r2, [r3, #0]

    /* Read value from clear channel, low byte register */
    if( !wireReadDataByte(APDS9960_GDATAL, val_byte) ) {
 80022a2:	f107 030f 	add.w	r3, r7, #15
 80022a6:	461a      	mov	r2, r3
 80022a8:	2198      	movs	r1, #152	@ 0x98
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fbc3 	bl	8002a36 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 80022b0:	4603      	mov	r3, r0
 80022b2:	f083 0301 	eor.w	r3, r3, #1
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <_ZN17SparkFun_APDS996014readGreenLightERt+0x2e>
        return false;
 80022bc:	2300      	movs	r3, #0
 80022be:	e01c      	b.n	80022fa <_ZN17SparkFun_APDS996014readGreenLightERt+0x68>
    }
    val = val_byte;
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
 80022c2:	461a      	mov	r2, r3
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	801a      	strh	r2, [r3, #0]

    /* Read value from clear channel, high byte register */
    if( !wireReadDataByte(APDS9960_GDATAH, val_byte) ) {
 80022c8:	f107 030f 	add.w	r3, r7, #15
 80022cc:	461a      	mov	r2, r3
 80022ce:	2199      	movs	r1, #153	@ 0x99
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 fbb0 	bl	8002a36 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 80022d6:	4603      	mov	r3, r0
 80022d8:	f083 0301 	eor.w	r3, r3, #1
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <_ZN17SparkFun_APDS996014readGreenLightERt+0x54>
        return false;
 80022e2:	2300      	movs	r3, #0
 80022e4:	e009      	b.n	80022fa <_ZN17SparkFun_APDS996014readGreenLightERt+0x68>
    }
    val = val + ((uint16_t)val_byte << 8);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	881a      	ldrh	r2, [r3, #0]
 80022ea:	7bfb      	ldrb	r3, [r7, #15]
 80022ec:	021b      	lsls	r3, r3, #8
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	4413      	add	r3, r2
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	801a      	strh	r2, [r3, #0]

    return true;
 80022f8:	2301      	movs	r3, #1
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <_ZN17SparkFun_APDS996013readBlueLightERt>:
 *
 * @param[out] val value of the light sensor.
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::readBlueLight(uint16_t &val)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b084      	sub	sp, #16
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	6039      	str	r1, [r7, #0]
    uint8_t val_byte;
    val = 0;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	2200      	movs	r2, #0
 8002310:	801a      	strh	r2, [r3, #0]

    /* Read value from clear channel, low byte register */
    if( !wireReadDataByte(APDS9960_BDATAL, val_byte) ) {
 8002312:	f107 030f 	add.w	r3, r7, #15
 8002316:	461a      	mov	r2, r3
 8002318:	219a      	movs	r1, #154	@ 0x9a
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 fb8b 	bl	8002a36 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 8002320:	4603      	mov	r3, r0
 8002322:	f083 0301 	eor.w	r3, r3, #1
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <_ZN17SparkFun_APDS996013readBlueLightERt+0x2e>
        return false;
 800232c:	2300      	movs	r3, #0
 800232e:	e01c      	b.n	800236a <_ZN17SparkFun_APDS996013readBlueLightERt+0x68>
    }
    val = val_byte;
 8002330:	7bfb      	ldrb	r3, [r7, #15]
 8002332:	461a      	mov	r2, r3
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	801a      	strh	r2, [r3, #0]

    /* Read value from clear channel, high byte register */
    if( !wireReadDataByte(APDS9960_BDATAH, val_byte) ) {
 8002338:	f107 030f 	add.w	r3, r7, #15
 800233c:	461a      	mov	r2, r3
 800233e:	219b      	movs	r1, #155	@ 0x9b
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 fb78 	bl	8002a36 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 8002346:	4603      	mov	r3, r0
 8002348:	f083 0301 	eor.w	r3, r3, #1
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <_ZN17SparkFun_APDS996013readBlueLightERt+0x54>
        return false;
 8002352:	2300      	movs	r3, #0
 8002354:	e009      	b.n	800236a <_ZN17SparkFun_APDS996013readBlueLightERt+0x68>
    }
    val = val + ((uint16_t)val_byte << 8);
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	881a      	ldrh	r2, [r3, #0]
 800235a:	7bfb      	ldrb	r3, [r7, #15]
 800235c:	021b      	lsls	r3, r3, #8
 800235e:	b29b      	uxth	r3, r3
 8002360:	4413      	add	r3, r2
 8002362:	b29a      	uxth	r2, r3
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	801a      	strh	r2, [r3, #0]

    return true;
 8002368:	2301      	movs	r3, #1
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <_ZN17SparkFun_APDS996022resetGestureParametersEv>:

/**
 * @brief Resets all the parameters in the gesture data member
 */
void SparkFun_APDS9960::resetGestureParameters()
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
    gesture_data_.index = 0;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    gesture_data_.total_gestures = 0;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

    gesture_ud_delta_ = 0;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    gesture_lr_delta_ = 0;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    gesture_ud_count_ = 0;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    gesture_lr_count_ = 0;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    gesture_near_count_ = 0;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    gesture_far_count_ = 0;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

    gesture_state_ = 0;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    gesture_motion_ = DIR_NONE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr

080023d6 <_ZN17SparkFun_APDS996019setProxIntLowThreshEh>:
 *
 * @param[in] threshold the lower proximity threshold
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setProxIntLowThresh(uint8_t threshold)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
 80023de:	460b      	mov	r3, r1
 80023e0:	70fb      	strb	r3, [r7, #3]
    if( !wireWriteDataByte(APDS9960_PILT, threshold) ) {
 80023e2:	78fb      	ldrb	r3, [r7, #3]
 80023e4:	461a      	mov	r2, r3
 80023e6:	2189      	movs	r1, #137	@ 0x89
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 fb00 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80023ee:	4603      	mov	r3, r0
 80023f0:	f083 0301 	eor.w	r3, r3, #1
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <_ZN17SparkFun_APDS996019setProxIntLowThreshEh+0x28>
        return false;
 80023fa:	2300      	movs	r3, #0
 80023fc:	e000      	b.n	8002400 <_ZN17SparkFun_APDS996019setProxIntLowThreshEh+0x2a>
    }

    return true;
 80023fe:	2301      	movs	r3, #1
}
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <_ZN17SparkFun_APDS996020setProxIntHighThreshEh>:
 *
 * @param[in] threshold the high proximity threshold
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setProxIntHighThresh(uint8_t threshold)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	70fb      	strb	r3, [r7, #3]
    if( !wireWriteDataByte(APDS9960_PIHT, threshold) ) {
 8002414:	78fb      	ldrb	r3, [r7, #3]
 8002416:	461a      	mov	r2, r3
 8002418:	218b      	movs	r1, #139	@ 0x8b
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 fae7 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8002420:	4603      	mov	r3, r0
 8002422:	f083 0301 	eor.w	r3, r3, #1
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <_ZN17SparkFun_APDS996020setProxIntHighThreshEh+0x28>
        return false;
 800242c:	2300      	movs	r3, #0
 800242e:	e000      	b.n	8002432 <_ZN17SparkFun_APDS996020setProxIntHighThreshEh+0x2a>
    }

    return true;
 8002430:	2301      	movs	r3, #1
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <_ZN17SparkFun_APDS996011setLEDDriveEh>:
 *
 * @param[in] drive the value (0-3) for the LED drive strength
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setLEDDrive(uint8_t drive)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b084      	sub	sp, #16
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	460b      	mov	r3, r1
 8002444:	70fb      	strb	r3, [r7, #3]
    uint8_t val;

    /* Read value from CONTROL register */
    if( !wireReadDataByte(APDS9960_CONTROL, val) ) {
 8002446:	f107 030f 	add.w	r3, r7, #15
 800244a:	461a      	mov	r2, r3
 800244c:	218f      	movs	r1, #143	@ 0x8f
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 faf1 	bl	8002a36 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 8002454:	4603      	mov	r3, r0
 8002456:	f083 0301 	eor.w	r3, r3, #1
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <_ZN17SparkFun_APDS996011setLEDDriveEh+0x2a>
        return false;
 8002460:	2300      	movs	r3, #0
 8002462:	e01f      	b.n	80024a4 <_ZN17SparkFun_APDS996011setLEDDriveEh+0x6a>
    }

    /* Set bits in register to given value */
    drive &= 0b00000011;
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	70fb      	strb	r3, [r7, #3]
    drive = drive << 6;
 800246c:	78fb      	ldrb	r3, [r7, #3]
 800246e:	019b      	lsls	r3, r3, #6
 8002470:	70fb      	strb	r3, [r7, #3]
    val &= 0b00111111;
 8002472:	7bfb      	ldrb	r3, [r7, #15]
 8002474:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002478:	b2db      	uxtb	r3, r3
 800247a:	73fb      	strb	r3, [r7, #15]
    val |= drive;
 800247c:	7bfa      	ldrb	r2, [r7, #15]
 800247e:	78fb      	ldrb	r3, [r7, #3]
 8002480:	4313      	orrs	r3, r2
 8002482:	b2db      	uxtb	r3, r3
 8002484:	73fb      	strb	r3, [r7, #15]

    /* Write register value back into CONTROL register */
    if( !wireWriteDataByte(APDS9960_CONTROL, val) ) {
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	461a      	mov	r2, r3
 800248a:	218f      	movs	r1, #143	@ 0x8f
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 faae 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8002492:	4603      	mov	r3, r0
 8002494:	f083 0301 	eor.w	r3, r3, #1
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <_ZN17SparkFun_APDS996011setLEDDriveEh+0x68>
        return false;
 800249e:	2300      	movs	r3, #0
 80024a0:	e000      	b.n	80024a4 <_ZN17SparkFun_APDS996011setLEDDriveEh+0x6a>
    }

    return true;
 80024a2:	2301      	movs	r3, #1
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <_ZN17SparkFun_APDS996016setProximityGainEh>:
 *
 * @param[in] drive the value (0-3) for the gain
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setProximityGain(uint8_t drive)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	70fb      	strb	r3, [r7, #3]
    uint8_t val;

    /* Read value from CONTROL register */
    if( !wireReadDataByte(APDS9960_CONTROL, val) ) {
 80024b8:	f107 030f 	add.w	r3, r7, #15
 80024bc:	461a      	mov	r2, r3
 80024be:	218f      	movs	r1, #143	@ 0x8f
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f000 fab8 	bl	8002a36 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 80024c6:	4603      	mov	r3, r0
 80024c8:	f083 0301 	eor.w	r3, r3, #1
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <_ZN17SparkFun_APDS996016setProximityGainEh+0x2a>
        return false;
 80024d2:	2300      	movs	r3, #0
 80024d4:	e01f      	b.n	8002516 <_ZN17SparkFun_APDS996016setProximityGainEh+0x6a>
    }

    /* Set bits in register to given value */
    drive &= 0b00000011;
 80024d6:	78fb      	ldrb	r3, [r7, #3]
 80024d8:	f003 0303 	and.w	r3, r3, #3
 80024dc:	70fb      	strb	r3, [r7, #3]
    drive = drive << 2;
 80024de:	78fb      	ldrb	r3, [r7, #3]
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	70fb      	strb	r3, [r7, #3]
    val &= 0b11110011;
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	f023 030c 	bic.w	r3, r3, #12
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	73fb      	strb	r3, [r7, #15]
    val |= drive;
 80024ee:	7bfa      	ldrb	r2, [r7, #15]
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	73fb      	strb	r3, [r7, #15]

    /* Write register value back into CONTROL register */
    if( !wireWriteDataByte(APDS9960_CONTROL, val) ) {
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	461a      	mov	r2, r3
 80024fc:	218f      	movs	r1, #143	@ 0x8f
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 fa75 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8002504:	4603      	mov	r3, r0
 8002506:	f083 0301 	eor.w	r3, r3, #1
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <_ZN17SparkFun_APDS996016setProximityGainEh+0x68>
        return false;
 8002510:	2300      	movs	r3, #0
 8002512:	e000      	b.n	8002516 <_ZN17SparkFun_APDS996016setProximityGainEh+0x6a>
    }

    return true;
 8002514:	2301      	movs	r3, #1
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <_ZN17SparkFun_APDS996019setAmbientLightGainEh>:
 *
 * @param[in] drive the value (0-3) for the gain
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setAmbientLightGain(uint8_t drive)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b084      	sub	sp, #16
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	460b      	mov	r3, r1
 8002528:	70fb      	strb	r3, [r7, #3]
    uint8_t val;

    /* Read value from CONTROL register */
    if( !wireReadDataByte(APDS9960_CONTROL, val) ) {
 800252a:	f107 030f 	add.w	r3, r7, #15
 800252e:	461a      	mov	r2, r3
 8002530:	218f      	movs	r1, #143	@ 0x8f
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 fa7f 	bl	8002a36 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 8002538:	4603      	mov	r3, r0
 800253a:	f083 0301 	eor.w	r3, r3, #1
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <_ZN17SparkFun_APDS996019setAmbientLightGainEh+0x2a>
        return false;
 8002544:	2300      	movs	r3, #0
 8002546:	e01c      	b.n	8002582 <_ZN17SparkFun_APDS996019setAmbientLightGainEh+0x64>
    }

    /* Set bits in register to given value */
    drive &= 0b00000011;
 8002548:	78fb      	ldrb	r3, [r7, #3]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	70fb      	strb	r3, [r7, #3]
    val &= 0b11111100;
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	f023 0303 	bic.w	r3, r3, #3
 8002556:	b2db      	uxtb	r3, r3
 8002558:	73fb      	strb	r3, [r7, #15]
    val |= drive;
 800255a:	7bfa      	ldrb	r2, [r7, #15]
 800255c:	78fb      	ldrb	r3, [r7, #3]
 800255e:	4313      	orrs	r3, r2
 8002560:	b2db      	uxtb	r3, r3
 8002562:	73fb      	strb	r3, [r7, #15]

    /* Write register value back into CONTROL register */
    if( !wireWriteDataByte(APDS9960_CONTROL, val) ) {
 8002564:	7bfb      	ldrb	r3, [r7, #15]
 8002566:	461a      	mov	r2, r3
 8002568:	218f      	movs	r1, #143	@ 0x8f
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 fa3f 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8002570:	4603      	mov	r3, r0
 8002572:	f083 0301 	eor.w	r3, r3, #1
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <_ZN17SparkFun_APDS996019setAmbientLightGainEh+0x62>
        return false;
 800257c:	2300      	movs	r3, #0
 800257e:	e000      	b.n	8002582 <_ZN17SparkFun_APDS996019setAmbientLightGainEh+0x64>
    }

    return true;
 8002580:	2301      	movs	r3, #1
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <_ZN17SparkFun_APDS996021setGestureEnterThreshEh>:
 *
 * @param[in] threshold proximity value needed to start gesture mode
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setGestureEnterThresh(uint8_t threshold)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	460b      	mov	r3, r1
 8002594:	70fb      	strb	r3, [r7, #3]
    if( !wireWriteDataByte(APDS9960_GPENTH, threshold) ) {
 8002596:	78fb      	ldrb	r3, [r7, #3]
 8002598:	461a      	mov	r2, r3
 800259a:	21a0      	movs	r1, #160	@ 0xa0
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 fa26 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80025a2:	4603      	mov	r3, r0
 80025a4:	f083 0301 	eor.w	r3, r3, #1
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <_ZN17SparkFun_APDS996021setGestureEnterThreshEh+0x28>
        return false;
 80025ae:	2300      	movs	r3, #0
 80025b0:	e000      	b.n	80025b4 <_ZN17SparkFun_APDS996021setGestureEnterThreshEh+0x2a>
    }

    return true;
 80025b2:	2301      	movs	r3, #1
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <_ZN17SparkFun_APDS996020setGestureExitThreshEh>:
 *
 * @param[in] threshold proximity value needed to end gesture mode
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setGestureExitThresh(uint8_t threshold)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	70fb      	strb	r3, [r7, #3]
    if( !wireWriteDataByte(APDS9960_GEXTH, threshold) ) {
 80025c8:	78fb      	ldrb	r3, [r7, #3]
 80025ca:	461a      	mov	r2, r3
 80025cc:	21a1      	movs	r1, #161	@ 0xa1
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 fa0d 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f083 0301 	eor.w	r3, r3, #1
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <_ZN17SparkFun_APDS996020setGestureExitThreshEh+0x28>
        return false;
 80025e0:	2300      	movs	r3, #0
 80025e2:	e000      	b.n	80025e6 <_ZN17SparkFun_APDS996020setGestureExitThreshEh+0x2a>
    }

    return true;
 80025e4:	2301      	movs	r3, #1
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <_ZN17SparkFun_APDS996014setGestureGainEh>:
 *
 * @param[in] gain the value for the photodiode gain
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setGestureGain(uint8_t gain)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b084      	sub	sp, #16
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	460b      	mov	r3, r1
 80025f8:	70fb      	strb	r3, [r7, #3]
    uint8_t val;

    /* Read value from GCONF2 register */
    if( !wireReadDataByte(APDS9960_GCONF2, val) ) {
 80025fa:	f107 030f 	add.w	r3, r7, #15
 80025fe:	461a      	mov	r2, r3
 8002600:	21a3      	movs	r1, #163	@ 0xa3
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 fa17 	bl	8002a36 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 8002608:	4603      	mov	r3, r0
 800260a:	f083 0301 	eor.w	r3, r3, #1
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <_ZN17SparkFun_APDS996014setGestureGainEh+0x2a>
        return false;
 8002614:	2300      	movs	r3, #0
 8002616:	e01f      	b.n	8002658 <_ZN17SparkFun_APDS996014setGestureGainEh+0x6a>
    }

    /* Set bits in register to given value */
    gain &= 0b00000011;
 8002618:	78fb      	ldrb	r3, [r7, #3]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	70fb      	strb	r3, [r7, #3]
    gain = gain << 5;
 8002620:	78fb      	ldrb	r3, [r7, #3]
 8002622:	015b      	lsls	r3, r3, #5
 8002624:	70fb      	strb	r3, [r7, #3]
    val &= 0b10011111;
 8002626:	7bfb      	ldrb	r3, [r7, #15]
 8002628:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800262c:	b2db      	uxtb	r3, r3
 800262e:	73fb      	strb	r3, [r7, #15]
    val |= gain;
 8002630:	7bfa      	ldrb	r2, [r7, #15]
 8002632:	78fb      	ldrb	r3, [r7, #3]
 8002634:	4313      	orrs	r3, r2
 8002636:	b2db      	uxtb	r3, r3
 8002638:	73fb      	strb	r3, [r7, #15]

    /* Write register value back into GCONF2 register */
    if( !wireWriteDataByte(APDS9960_GCONF2, val) ) {
 800263a:	7bfb      	ldrb	r3, [r7, #15]
 800263c:	461a      	mov	r2, r3
 800263e:	21a3      	movs	r1, #163	@ 0xa3
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f9d4 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8002646:	4603      	mov	r3, r0
 8002648:	f083 0301 	eor.w	r3, r3, #1
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <_ZN17SparkFun_APDS996014setGestureGainEh+0x68>
        return false;
 8002652:	2300      	movs	r3, #0
 8002654:	e000      	b.n	8002658 <_ZN17SparkFun_APDS996014setGestureGainEh+0x6a>
    }

    return true;
 8002656:	2301      	movs	r3, #1
}
 8002658:	4618      	mov	r0, r3
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <_ZN17SparkFun_APDS996018setGestureLEDDriveEh>:
 *
 * @param[in] drive the value for the LED drive current
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setGestureLEDDrive(uint8_t drive)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	70fb      	strb	r3, [r7, #3]
    uint8_t val;

    /* Read value from GCONF2 register */
    if( !wireReadDataByte(APDS9960_GCONF2, val) ) {
 800266c:	f107 030f 	add.w	r3, r7, #15
 8002670:	461a      	mov	r2, r3
 8002672:	21a3      	movs	r1, #163	@ 0xa3
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f9de 	bl	8002a36 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 800267a:	4603      	mov	r3, r0
 800267c:	f083 0301 	eor.w	r3, r3, #1
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <_ZN17SparkFun_APDS996018setGestureLEDDriveEh+0x2a>
        return false;
 8002686:	2300      	movs	r3, #0
 8002688:	e01f      	b.n	80026ca <_ZN17SparkFun_APDS996018setGestureLEDDriveEh+0x6a>
    }

    /* Set bits in register to given value */
    drive &= 0b00000011;
 800268a:	78fb      	ldrb	r3, [r7, #3]
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	70fb      	strb	r3, [r7, #3]
    drive = drive << 3;
 8002692:	78fb      	ldrb	r3, [r7, #3]
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	70fb      	strb	r3, [r7, #3]
    val &= 0b11100111;
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	f023 0318 	bic.w	r3, r3, #24
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	73fb      	strb	r3, [r7, #15]
    val |= drive;
 80026a2:	7bfa      	ldrb	r2, [r7, #15]
 80026a4:	78fb      	ldrb	r3, [r7, #3]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	73fb      	strb	r3, [r7, #15]

    /* Write register value back into GCONF2 register */
    if( !wireWriteDataByte(APDS9960_GCONF2, val) ) {
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	461a      	mov	r2, r3
 80026b0:	21a3      	movs	r1, #163	@ 0xa3
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f99b 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80026b8:	4603      	mov	r3, r0
 80026ba:	f083 0301 	eor.w	r3, r3, #1
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <_ZN17SparkFun_APDS996018setGestureLEDDriveEh+0x68>
        return false;
 80026c4:	2300      	movs	r3, #0
 80026c6:	e000      	b.n	80026ca <_ZN17SparkFun_APDS996018setGestureLEDDriveEh+0x6a>
    }

    return true;
 80026c8:	2301      	movs	r3, #1
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <_ZN17SparkFun_APDS996018setGestureWaitTimeEh>:
 *
 * @param[in] the value for the wait time
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setGestureWaitTime(uint8_t time)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b084      	sub	sp, #16
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
 80026da:	460b      	mov	r3, r1
 80026dc:	70fb      	strb	r3, [r7, #3]
    uint8_t val;

    /* Read value from GCONF2 register */
    if( !wireReadDataByte(APDS9960_GCONF2, val) ) {
 80026de:	f107 030f 	add.w	r3, r7, #15
 80026e2:	461a      	mov	r2, r3
 80026e4:	21a3      	movs	r1, #163	@ 0xa3
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f9a5 	bl	8002a36 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 80026ec:	4603      	mov	r3, r0
 80026ee:	f083 0301 	eor.w	r3, r3, #1
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <_ZN17SparkFun_APDS996018setGestureWaitTimeEh+0x2a>
        return false;
 80026f8:	2300      	movs	r3, #0
 80026fa:	e01c      	b.n	8002736 <_ZN17SparkFun_APDS996018setGestureWaitTimeEh+0x64>
    }

    /* Set bits in register to given value */
    time &= 0b00000111;
 80026fc:	78fb      	ldrb	r3, [r7, #3]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	70fb      	strb	r3, [r7, #3]
    val &= 0b11111000;
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	f023 0307 	bic.w	r3, r3, #7
 800270a:	b2db      	uxtb	r3, r3
 800270c:	73fb      	strb	r3, [r7, #15]
    val |= time;
 800270e:	7bfa      	ldrb	r2, [r7, #15]
 8002710:	78fb      	ldrb	r3, [r7, #3]
 8002712:	4313      	orrs	r3, r2
 8002714:	b2db      	uxtb	r3, r3
 8002716:	73fb      	strb	r3, [r7, #15]

    /* Write register value back into GCONF2 register */
    if( !wireWriteDataByte(APDS9960_GCONF2, val) ) {
 8002718:	7bfb      	ldrb	r3, [r7, #15]
 800271a:	461a      	mov	r2, r3
 800271c:	21a3      	movs	r1, #163	@ 0xa3
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f965 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8002724:	4603      	mov	r3, r0
 8002726:	f083 0301 	eor.w	r3, r3, #1
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <_ZN17SparkFun_APDS996018setGestureWaitTimeEh+0x62>
        return false;
 8002730:	2300      	movs	r3, #0
 8002732:	e000      	b.n	8002736 <_ZN17SparkFun_APDS996018setGestureWaitTimeEh+0x64>
    }

    return true;
 8002734:	2301      	movs	r3, #1
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <_ZN17SparkFun_APDS996023setLightIntLowThresholdEt>:
 *
 * @param[in] threshold low threshold value for interrupt to trigger
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setLightIntLowThreshold(uint16_t threshold)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b084      	sub	sp, #16
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
 8002746:	460b      	mov	r3, r1
 8002748:	807b      	strh	r3, [r7, #2]
    uint8_t val_low;
    uint8_t val_high;

    /* Break 16-bit threshold into 2 8-bit values */
    val_low = threshold & 0x00FF;
 800274a:	887b      	ldrh	r3, [r7, #2]
 800274c:	73fb      	strb	r3, [r7, #15]
    val_high = (threshold & 0xFF00) >> 8;
 800274e:	887b      	ldrh	r3, [r7, #2]
 8002750:	0a1b      	lsrs	r3, r3, #8
 8002752:	b29b      	uxth	r3, r3
 8002754:	73bb      	strb	r3, [r7, #14]

    /* Write low byte */
    if( !wireWriteDataByte(APDS9960_AILTL, val_low) ) {
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	461a      	mov	r2, r3
 800275a:	2184      	movs	r1, #132	@ 0x84
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 f946 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 8002762:	4603      	mov	r3, r0
 8002764:	f083 0301 	eor.w	r3, r3, #1
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <_ZN17SparkFun_APDS996023setLightIntLowThresholdEt+0x34>
        return false;
 800276e:	2300      	movs	r3, #0
 8002770:	e00e      	b.n	8002790 <_ZN17SparkFun_APDS996023setLightIntLowThresholdEt+0x52>
    }

    /* Write high byte */
    if( !wireWriteDataByte(APDS9960_AILTH, val_high) ) {
 8002772:	7bbb      	ldrb	r3, [r7, #14]
 8002774:	461a      	mov	r2, r3
 8002776:	2185      	movs	r1, #133	@ 0x85
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f938 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 800277e:	4603      	mov	r3, r0
 8002780:	f083 0301 	eor.w	r3, r3, #1
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <_ZN17SparkFun_APDS996023setLightIntLowThresholdEt+0x50>
        return false;
 800278a:	2300      	movs	r3, #0
 800278c:	e000      	b.n	8002790 <_ZN17SparkFun_APDS996023setLightIntLowThresholdEt+0x52>
    }

    return true;
 800278e:	2301      	movs	r3, #1
}
 8002790:	4618      	mov	r0, r3
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <_ZN17SparkFun_APDS996024setLightIntHighThresholdEt>:
 *
 * @param[in] threshold high threshold value for interrupt to trigger
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setLightIntHighThreshold(uint16_t threshold)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	460b      	mov	r3, r1
 80027a2:	807b      	strh	r3, [r7, #2]
    uint8_t val_low;
    uint8_t val_high;

    /* Break 16-bit threshold into 2 8-bit values */
    val_low = threshold & 0x00FF;
 80027a4:	887b      	ldrh	r3, [r7, #2]
 80027a6:	73fb      	strb	r3, [r7, #15]
    val_high = (threshold & 0xFF00) >> 8;
 80027a8:	887b      	ldrh	r3, [r7, #2]
 80027aa:	0a1b      	lsrs	r3, r3, #8
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	73bb      	strb	r3, [r7, #14]

    /* Write low byte */
    if( !wireWriteDataByte(APDS9960_AIHTL, val_low) ) {
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
 80027b2:	461a      	mov	r2, r3
 80027b4:	2186      	movs	r1, #134	@ 0x86
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f919 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80027bc:	4603      	mov	r3, r0
 80027be:	f083 0301 	eor.w	r3, r3, #1
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <_ZN17SparkFun_APDS996024setLightIntHighThresholdEt+0x34>
        return false;
 80027c8:	2300      	movs	r3, #0
 80027ca:	e00e      	b.n	80027ea <_ZN17SparkFun_APDS996024setLightIntHighThresholdEt+0x52>
    }

    /* Write high byte */
    if( !wireWriteDataByte(APDS9960_AIHTH, val_high) ) {
 80027cc:	7bbb      	ldrb	r3, [r7, #14]
 80027ce:	461a      	mov	r2, r3
 80027d0:	2187      	movs	r1, #135	@ 0x87
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f90b 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80027d8:	4603      	mov	r3, r0
 80027da:	f083 0301 	eor.w	r3, r3, #1
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <_ZN17SparkFun_APDS996024setLightIntHighThresholdEt+0x50>
        return false;
 80027e4:	2300      	movs	r3, #0
 80027e6:	e000      	b.n	80027ea <_ZN17SparkFun_APDS996024setLightIntHighThresholdEt+0x52>
    }

    return true;
 80027e8:	2301      	movs	r3, #1
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <_ZN17SparkFun_APDS996024setAmbientLightIntEnableEh>:
 *
 * @param[in] enable 1 to enable interrupts, 0 to turn them off
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setAmbientLightIntEnable(uint8_t enable)
{
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b084      	sub	sp, #16
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	460b      	mov	r3, r1
 80027fc:	70fb      	strb	r3, [r7, #3]
    uint8_t val;

    /* Read value from ENABLE register */
    if( !wireReadDataByte(APDS9960_ENABLE, val) ) {
 80027fe:	f107 030f 	add.w	r3, r7, #15
 8002802:	461a      	mov	r2, r3
 8002804:	2180      	movs	r1, #128	@ 0x80
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f915 	bl	8002a36 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 800280c:	4603      	mov	r3, r0
 800280e:	f083 0301 	eor.w	r3, r3, #1
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <_ZN17SparkFun_APDS996024setAmbientLightIntEnableEh+0x2a>
        return false;
 8002818:	2300      	movs	r3, #0
 800281a:	e01f      	b.n	800285c <_ZN17SparkFun_APDS996024setAmbientLightIntEnableEh+0x6a>
    }

    /* Set bits in register to given value */
    enable &= 0b00000001;
 800281c:	78fb      	ldrb	r3, [r7, #3]
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	70fb      	strb	r3, [r7, #3]
    enable = enable << 4;
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	70fb      	strb	r3, [r7, #3]
    val &= 0b11101111;
 800282a:	7bfb      	ldrb	r3, [r7, #15]
 800282c:	f023 0310 	bic.w	r3, r3, #16
 8002830:	b2db      	uxtb	r3, r3
 8002832:	73fb      	strb	r3, [r7, #15]
    val |= enable;
 8002834:	7bfa      	ldrb	r2, [r7, #15]
 8002836:	78fb      	ldrb	r3, [r7, #3]
 8002838:	4313      	orrs	r3, r2
 800283a:	b2db      	uxtb	r3, r3
 800283c:	73fb      	strb	r3, [r7, #15]

    /* Write register value back into ENABLE register */
    if( !wireWriteDataByte(APDS9960_ENABLE, val) ) {
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	461a      	mov	r2, r3
 8002842:	2180      	movs	r1, #128	@ 0x80
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f8d2 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 800284a:	4603      	mov	r3, r0
 800284c:	f083 0301 	eor.w	r3, r3, #1
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <_ZN17SparkFun_APDS996024setAmbientLightIntEnableEh+0x68>
        return false;
 8002856:	2300      	movs	r3, #0
 8002858:	e000      	b.n	800285c <_ZN17SparkFun_APDS996024setAmbientLightIntEnableEh+0x6a>
    }

    return true;
 800285a:	2301      	movs	r3, #1
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <_ZN17SparkFun_APDS996021setProximityIntEnableEh>:
 *
 * @param[in] enable 1 to enable interrupts, 0 to turn them off
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setProximityIntEnable(uint8_t enable)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	460b      	mov	r3, r1
 800286e:	70fb      	strb	r3, [r7, #3]
    uint8_t val;

    /* Read value from ENABLE register */
    if( !wireReadDataByte(APDS9960_ENABLE, val) ) {
 8002870:	f107 030f 	add.w	r3, r7, #15
 8002874:	461a      	mov	r2, r3
 8002876:	2180      	movs	r1, #128	@ 0x80
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 f8dc 	bl	8002a36 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 800287e:	4603      	mov	r3, r0
 8002880:	f083 0301 	eor.w	r3, r3, #1
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <_ZN17SparkFun_APDS996021setProximityIntEnableEh+0x2a>
        return false;
 800288a:	2300      	movs	r3, #0
 800288c:	e01f      	b.n	80028ce <_ZN17SparkFun_APDS996021setProximityIntEnableEh+0x6a>
    }

    /* Set bits in register to given value */
    enable &= 0b00000001;
 800288e:	78fb      	ldrb	r3, [r7, #3]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	70fb      	strb	r3, [r7, #3]
    enable = enable << 5;
 8002896:	78fb      	ldrb	r3, [r7, #3]
 8002898:	015b      	lsls	r3, r3, #5
 800289a:	70fb      	strb	r3, [r7, #3]
    val &= 0b11011111;
 800289c:	7bfb      	ldrb	r3, [r7, #15]
 800289e:	f023 0320 	bic.w	r3, r3, #32
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	73fb      	strb	r3, [r7, #15]
    val |= enable;
 80028a6:	7bfa      	ldrb	r2, [r7, #15]
 80028a8:	78fb      	ldrb	r3, [r7, #3]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	73fb      	strb	r3, [r7, #15]

    /* Write register value back into ENABLE register */
    if( !wireWriteDataByte(APDS9960_ENABLE, val) ) {
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
 80028b2:	461a      	mov	r2, r3
 80028b4:	2180      	movs	r1, #128	@ 0x80
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f899 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 80028bc:	4603      	mov	r3, r0
 80028be:	f083 0301 	eor.w	r3, r3, #1
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <_ZN17SparkFun_APDS996021setProximityIntEnableEh+0x68>
        return false;
 80028c8:	2300      	movs	r3, #0
 80028ca:	e000      	b.n	80028ce <_ZN17SparkFun_APDS996021setProximityIntEnableEh+0x6a>
    }

    return true;
 80028cc:	2301      	movs	r3, #1
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <_ZN17SparkFun_APDS996019setGestureIntEnableEh>:
 *
 * @param[in] enable 1 to enable interrupts, 0 to turn them off
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setGestureIntEnable(uint8_t enable)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b084      	sub	sp, #16
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	460b      	mov	r3, r1
 80028e0:	70fb      	strb	r3, [r7, #3]
    uint8_t val;

    /* Read value from GCONF4 register */
    if( !wireReadDataByte(APDS9960_GCONF4, val) ) {
 80028e2:	f107 030f 	add.w	r3, r7, #15
 80028e6:	461a      	mov	r2, r3
 80028e8:	21ab      	movs	r1, #171	@ 0xab
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f8a3 	bl	8002a36 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 80028f0:	4603      	mov	r3, r0
 80028f2:	f083 0301 	eor.w	r3, r3, #1
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <_ZN17SparkFun_APDS996019setGestureIntEnableEh+0x2a>
        return false;
 80028fc:	2300      	movs	r3, #0
 80028fe:	e01f      	b.n	8002940 <_ZN17SparkFun_APDS996019setGestureIntEnableEh+0x6a>
    }

    /* Set bits in register to given value */
    enable &= 0b00000001;
 8002900:	78fb      	ldrb	r3, [r7, #3]
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	70fb      	strb	r3, [r7, #3]
    enable = enable << 1;
 8002908:	78fb      	ldrb	r3, [r7, #3]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	70fb      	strb	r3, [r7, #3]
    val &= 0b11111101;
 800290e:	7bfb      	ldrb	r3, [r7, #15]
 8002910:	f023 0302 	bic.w	r3, r3, #2
 8002914:	b2db      	uxtb	r3, r3
 8002916:	73fb      	strb	r3, [r7, #15]
    val |= enable;
 8002918:	7bfa      	ldrb	r2, [r7, #15]
 800291a:	78fb      	ldrb	r3, [r7, #3]
 800291c:	4313      	orrs	r3, r2
 800291e:	b2db      	uxtb	r3, r3
 8002920:	73fb      	strb	r3, [r7, #15]

    /* Write register value back into GCONF4 register */
    if( !wireWriteDataByte(APDS9960_GCONF4, val) ) {
 8002922:	7bfb      	ldrb	r3, [r7, #15]
 8002924:	461a      	mov	r2, r3
 8002926:	21ab      	movs	r1, #171	@ 0xab
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f860 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 800292e:	4603      	mov	r3, r0
 8002930:	f083 0301 	eor.w	r3, r3, #1
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <_ZN17SparkFun_APDS996019setGestureIntEnableEh+0x68>
        return false;
 800293a:	2300      	movs	r3, #0
 800293c:	e000      	b.n	8002940 <_ZN17SparkFun_APDS996019setGestureIntEnableEh+0x6a>
    }

    return true;
 800293e:	2301      	movs	r3, #1
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <_ZN17SparkFun_APDS996014setGestureModeEh>:
 *
 * @param[in] mode 1 to enter gesture state machine, 0 to exit.
 * @return True if operation successful. False otherwise.
 */
bool SparkFun_APDS9960::setGestureMode(uint8_t mode)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	70fb      	strb	r3, [r7, #3]
    uint8_t val;

    /* Read value from GCONF4 register */
    if( !wireReadDataByte(APDS9960_GCONF4, val) ) {
 8002954:	f107 030f 	add.w	r3, r7, #15
 8002958:	461a      	mov	r2, r3
 800295a:	21ab      	movs	r1, #171	@ 0xab
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f86a 	bl	8002a36 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>
 8002962:	4603      	mov	r3, r0
 8002964:	f083 0301 	eor.w	r3, r3, #1
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <_ZN17SparkFun_APDS996014setGestureModeEh+0x2a>
        return false;
 800296e:	2300      	movs	r3, #0
 8002970:	e01c      	b.n	80029ac <_ZN17SparkFun_APDS996014setGestureModeEh+0x64>
    }

    /* Set bits in register to given value */
    mode &= 0b00000001;
 8002972:	78fb      	ldrb	r3, [r7, #3]
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	70fb      	strb	r3, [r7, #3]
    val &= 0b11111110;
 800297a:	7bfb      	ldrb	r3, [r7, #15]
 800297c:	f023 0301 	bic.w	r3, r3, #1
 8002980:	b2db      	uxtb	r3, r3
 8002982:	73fb      	strb	r3, [r7, #15]
    val |= mode;
 8002984:	7bfa      	ldrb	r2, [r7, #15]
 8002986:	78fb      	ldrb	r3, [r7, #3]
 8002988:	4313      	orrs	r3, r2
 800298a:	b2db      	uxtb	r3, r3
 800298c:	73fb      	strb	r3, [r7, #15]

    /* Write register value back into GCONF4 register */
    if( !wireWriteDataByte(APDS9960_GCONF4, val) ) {
 800298e:	7bfb      	ldrb	r3, [r7, #15]
 8002990:	461a      	mov	r2, r3
 8002992:	21ab      	movs	r1, #171	@ 0xab
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f82a 	bl	80029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>
 800299a:	4603      	mov	r3, r0
 800299c:	f083 0301 	eor.w	r3, r3, #1
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <_ZN17SparkFun_APDS996014setGestureModeEh+0x62>
        return false;
 80029a6:	2300      	movs	r3, #0
 80029a8:	e000      	b.n	80029ac <_ZN17SparkFun_APDS996014setGestureModeEh+0x64>
    }

    return true;
 80029aa:	2301      	movs	r3, #1
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <_ZN17SparkFun_APDS996013wireWriteByteEh>:
 *
 * @param[in] val the 1-byte value to write to the I2C device
 * @return True if successful write operation. False otherwise.
 */
bool SparkFun_APDS9960::wireWriteByte(uint8_t val)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af02      	add	r7, sp, #8
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef status;
    status = HAL_I2C_Master_Transmit(I2C_handle, APDS9960_I2C_ADDR << 1, &val, 1, HAL_MAX_DELAY);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 80029c6:	1cfa      	adds	r2, r7, #3
 80029c8:	f04f 33ff 	mov.w	r3, #4294967295
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	2301      	movs	r3, #1
 80029d0:	2172      	movs	r1, #114	@ 0x72
 80029d2:	f002 f9d3 	bl	8004d7c <HAL_I2C_Master_Transmit>
 80029d6:	4603      	mov	r3, r0
 80029d8:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 80029da:	7bfb      	ldrb	r3, [r7, #15]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d001      	beq.n	80029e4 <_ZN17SparkFun_APDS996013wireWriteByteEh+0x30>
        return false;
 80029e0:	2300      	movs	r3, #0
 80029e2:	e000      	b.n	80029e6 <_ZN17SparkFun_APDS996013wireWriteByteEh+0x32>
    }

    return true;
 80029e4:	2301      	movs	r3, #1
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <_ZN17SparkFun_APDS996017wireWriteDataByteEhh>:
 * @param[in] reg the register in the I2C device to write to
 * @param[in] val the 1-byte value to write to the I2C device
 * @return True if successful write operation. False otherwise.
 */
bool SparkFun_APDS9960::wireWriteDataByte(uint8_t reg, uint8_t val)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b086      	sub	sp, #24
 80029f2:	af02      	add	r7, sp, #8
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	460b      	mov	r3, r1
 80029f8:	70fb      	strb	r3, [r7, #3]
 80029fa:	4613      	mov	r3, r2
 80029fc:	70bb      	strb	r3, [r7, #2]
    uint8_t data[2] = {reg, val};
 80029fe:	78fb      	ldrb	r3, [r7, #3]
 8002a00:	733b      	strb	r3, [r7, #12]
 8002a02:	78bb      	ldrb	r3, [r7, #2]
 8002a04:	737b      	strb	r3, [r7, #13]
    HAL_StatusTypeDef status;
    status = HAL_I2C_Master_Transmit(I2C_handle, APDS9960_I2C_ADDR << 1, data, 2, HAL_MAX_DELAY);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8002a0c:	f107 020c 	add.w	r2, r7, #12
 8002a10:	f04f 33ff 	mov.w	r3, #4294967295
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	2302      	movs	r3, #2
 8002a18:	2172      	movs	r1, #114	@ 0x72
 8002a1a:	f002 f9af 	bl	8004d7c <HAL_I2C_Master_Transmit>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <_ZN17SparkFun_APDS996017wireWriteDataByteEhh+0x3e>
        return false;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	e000      	b.n	8002a2e <_ZN17SparkFun_APDS996017wireWriteDataByteEhh+0x40>
    }

    return true;
 8002a2c:	2301      	movs	r3, #1
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh>:
 * @param[in] reg the register to read from
 * @param[out] the value returned from the register
 * @return True if successful read operation. False otherwise.
 */
bool SparkFun_APDS9960::wireReadDataByte(uint8_t reg, uint8_t &val)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b08a      	sub	sp, #40	@ 0x28
 8002a3a:	af04      	add	r7, sp, #16
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	460b      	mov	r3, r1
 8002a40:	607a      	str	r2, [r7, #4]
 8002a42:	72fb      	strb	r3, [r7, #11]
    uint8_t receivedData;

    /* Indicate which register we want to read from */
    if (!wireWriteByte(reg)) {
 8002a44:	7afb      	ldrb	r3, [r7, #11]
 8002a46:	4619      	mov	r1, r3
 8002a48:	68f8      	ldr	r0, [r7, #12]
 8002a4a:	f7ff ffb3 	bl	80029b4 <_ZN17SparkFun_APDS996013wireWriteByteEh>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f083 0301 	eor.w	r3, r3, #1
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <_ZN17SparkFun_APDS996016wireReadDataByteEhRh+0x28>
        return false;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	e01b      	b.n	8002a96 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh+0x60>
    }

    /* Read from register */
    HAL_StatusTypeDef status = HAL_I2C_Mem_Read(I2C_handle, APDS9960_I2C_ADDR << 1, reg, I2C_MEMADD_SIZE_8BIT, &receivedData, 1, HAL_MAX_DELAY);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
 8002a64:	7afb      	ldrb	r3, [r7, #11]
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	f04f 33ff 	mov.w	r3, #4294967295
 8002a6c:	9302      	str	r3, [sp, #8]
 8002a6e:	2301      	movs	r3, #1
 8002a70:	9301      	str	r3, [sp, #4]
 8002a72:	f107 0316 	add.w	r3, r7, #22
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	2301      	movs	r3, #1
 8002a7a:	2172      	movs	r1, #114	@ 0x72
 8002a7c:	f002 fcae 	bl	80053dc <HAL_I2C_Mem_Read>
 8002a80:	4603      	mov	r3, r0
 8002a82:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) {
 8002a84:	7dfb      	ldrb	r3, [r7, #23]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <_ZN17SparkFun_APDS996016wireReadDataByteEhRh+0x58>
        return false;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	e003      	b.n	8002a96 <_ZN17SparkFun_APDS996016wireReadDataByteEhRh+0x60>
    }

    val = receivedData;
 8002a8e:	7dba      	ldrb	r2, [r7, #22]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	701a      	strb	r2, [r3, #0]

    return true;
 8002a94:	2301      	movs	r3, #1
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm>:
 * @param timer_channel The channel number to be used with the timer (like TIM_CHANNEL_1).
 * @param CPU_clock_speed_MHz The CPU clock speed in MHz (like 96).
 * @param PWM_frequency_Hz The PWM frequency in Hz (20,000 to 100,000 allowed).
 */

TB6612FNG_Motor::TB6612FNG_Motor(
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	603b      	str	r3, [r7, #0]
 8002aac:	4613      	mov	r3, r2
 8002aae:	80fb      	strh	r3, [r7, #6]

	: IN1_pin_group(IN1_pin_group), IN1_pin(IN1_pin),
	  IN2_pin_group(IN2_pin_group), IN2_pin(IN2_pin),
	  timer_handle(timer_handle), timer_channel(timer_channel),
	  CPU_clock_speed_MHz(CPU_clock_speed_MHz),
	  PWM_frequency_Hz(PWM_frequency_Hz)
 8002ab0:	4a23      	ldr	r2, [pc, #140]	@ (8002b40 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa0>)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	601a      	str	r2, [r3, #0]
	: IN1_pin_group(IN1_pin_group), IN1_pin(IN1_pin),
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	605a      	str	r2, [r3, #4]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	88fa      	ldrh	r2, [r7, #6]
 8002ac0:	811a      	strh	r2, [r3, #8]
	  IN2_pin_group(IN2_pin_group), IN2_pin(IN2_pin),
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	60da      	str	r2, [r3, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8b3a      	ldrh	r2, [r7, #24]
 8002acc:	821a      	strh	r2, [r3, #16]
	  timer_handle(timer_handle), timer_channel(timer_channel),
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	69fa      	ldr	r2, [r7, #28]
 8002ad2:	615a      	str	r2, [r3, #20]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a3a      	ldr	r2, [r7, #32]
 8002ad8:	619a      	str	r2, [r3, #24]
	  CPU_clock_speed_MHz(CPU_clock_speed_MHz),
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ade:	61da      	str	r2, [r3, #28]
	  PWM_frequency_Hz(PWM_frequency_Hz)
 8002ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	841a      	strh	r2, [r3, #32]
{
	// Make sure the motor is off to start
	stop();
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 f8d0 	bl	8002c8e <_ZN15TB6612FNG_Motor4stopEv>

	// Make sure the PWM frequency is within bounds
	if(PWM_frequency_Hz < 20000)
 8002aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d803      	bhi.n	8002b00 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0x60>
	{
		// Too low. Human can hear this.
		PWM_frequency_Hz = 20000;
 8002af8:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8002afc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002afe:	e005      	b.n	8002b0c <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0x6c>
	}
	else if(PWM_frequency_Hz > 100000)
 8002b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b02:	4a10      	ldr	r2, [pc, #64]	@ (8002b44 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa4>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d901      	bls.n	8002b0c <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0x6c>
	{
		// Very high. May interfere with other tasks.
		PWM_frequency_Hz = 100000;
 8002b08:	4b0e      	ldr	r3, [pc, #56]	@ (8002b44 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa4>)
 8002b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
	}

	// Set the auto-reload value based on the CPU clock speed and the desired PWM frequency
	auto_reload_value =( CPU_clock_speed_MHz * 1000000 / PWM_frequency_Hz ) - 1;
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0e:	4a0e      	ldr	r2, [pc, #56]	@ (8002b48 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm+0xa8>)
 8002b10:	fb03 f202 	mul.w	r2, r3, r2
 8002b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	845a      	strh	r2, [r3, #34]	@ 0x22
	timer_handle->Instance->ARR = auto_reload_value;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	62da      	str	r2, [r3, #44]	@ 0x2c

	// Start the PWM generation
	start();
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f89d 	bl	8002c6e <_ZN15TB6612FNG_Motor5startEv>
}
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	08010e58 	.word	0x08010e58
 8002b44:	000186a0 	.word	0x000186a0
 8002b48:	000f4240 	.word	0x000f4240

08002b4c <_ZN15TB6612FNG_MotorD1Ev>:

/**
 * @brief Destructor for the TB6612FNG_Motor class.
 */
TB6612FNG_Motor::~TB6612FNG_Motor()
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	4a05      	ldr	r2, [pc, #20]	@ (8002b6c <_ZN15TB6612FNG_MotorD1Ev+0x20>)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	601a      	str	r2, [r3, #0]
{
	stop();
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f897 	bl	8002c8e <_ZN15TB6612FNG_Motor4stopEv>
}
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	08010e58 	.word	0x08010e58

08002b70 <_ZN15TB6612FNG_MotorD0Ev>:
TB6612FNG_Motor::~TB6612FNG_Motor()
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
}
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff ffe7 	bl	8002b4c <_ZN15TB6612FNG_MotorD1Ev>
 8002b7e:	2124      	movs	r1, #36	@ 0x24
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f00b fa1c 	bl	800dfbe <_ZdlPvj>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <_ZN15TB6612FNG_Motor8set_dutyEss>:
/**
 * @brief Sets the duty cycle of the motor.
 * @param speed The duty cycle value, ranging from -100 to 100 by default.
 */
void TB6612FNG_Motor::set_duty(int16_t duty, int16_t maximum_value)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	807b      	strh	r3, [r7, #2]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	803b      	strh	r3, [r7, #0]
	// Raise the appropriate pins
	if(duty >= 0)
 8002ba0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	db10      	blt.n	8002bca <_ZN15TB6612FNG_Motor8set_dutyEss+0x3a>
	{
		HAL_GPIO_WritePin(IN1_pin_group, IN1_pin, GPIO_PIN_SET);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6858      	ldr	r0, [r3, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	891b      	ldrh	r3, [r3, #8]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f001 ff60 	bl	8004a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_pin_group, IN2_pin, GPIO_PIN_RESET);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68d8      	ldr	r0, [r3, #12]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	8a1b      	ldrh	r3, [r3, #16]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	f001 ff58 	bl	8004a78 <HAL_GPIO_WritePin>
 8002bc8:	e00f      	b.n	8002bea <_ZN15TB6612FNG_Motor8set_dutyEss+0x5a>
	}
	else
	{
		HAL_GPIO_WritePin(IN1_pin_group, IN1_pin, GPIO_PIN_RESET);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6858      	ldr	r0, [r3, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	891b      	ldrh	r3, [r3, #8]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f001 ff4f 	bl	8004a78 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_pin_group, IN2_pin, GPIO_PIN_SET);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	68d8      	ldr	r0, [r3, #12]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	8a1b      	ldrh	r3, [r3, #16]
 8002be2:	2201      	movs	r2, #1
 8002be4:	4619      	mov	r1, r3
 8002be6:	f001 ff47 	bl	8004a78 <HAL_GPIO_WritePin>
	}

	uint16_t duty_magnitude;
	if(duty<0)
 8002bea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	da03      	bge.n	8002bfa <_ZN15TB6612FNG_Motor8set_dutyEss+0x6a>
	{
		duty_magnitude = duty*-1;
 8002bf2:	887b      	ldrh	r3, [r7, #2]
 8002bf4:	425b      	negs	r3, r3
 8002bf6:	81fb      	strh	r3, [r7, #14]
 8002bf8:	e001      	b.n	8002bfe <_ZN15TB6612FNG_Motor8set_dutyEss+0x6e>
	}
	else
	{
		duty_magnitude = duty;
 8002bfa:	887b      	ldrh	r3, [r7, #2]
 8002bfc:	81fb      	strh	r3, [r7, #14]
	}

	// Check if duty cycle is within bounds
	if(duty_magnitude > maximum_value)
 8002bfe:	89fa      	ldrh	r2, [r7, #14]
 8002c00:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	dd01      	ble.n	8002c0c <_ZN15TB6612FNG_Motor8set_dutyEss+0x7c>
	{
		duty = maximum_value;
 8002c08:	883b      	ldrh	r3, [r7, #0]
 8002c0a:	807b      	strh	r3, [r7, #2]
	}


	// Set the compare value
	uint16_t compare_value = duty_magnitude * auto_reload_value / maximum_value;
 8002c0c:	89fb      	ldrh	r3, [r7, #14]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8002c12:	fb03 f202 	mul.w	r2, r3, r2
 8002c16:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002c1a:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c1e:	81bb      	strh	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d105      	bne.n	8002c34 <_ZN15TB6612FNG_Motor8set_dutyEss+0xa4>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	89ba      	ldrh	r2, [r7, #12]
 8002c30:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002c32:	e018      	b.n	8002c66 <_ZN15TB6612FNG_Motor8set_dutyEss+0xd6>
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d105      	bne.n	8002c48 <_ZN15TB6612FNG_Motor8set_dutyEss+0xb8>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	695b      	ldr	r3, [r3, #20]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	89ba      	ldrh	r2, [r7, #12]
 8002c44:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002c46:	e00e      	b.n	8002c66 <_ZN15TB6612FNG_Motor8set_dutyEss+0xd6>
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d105      	bne.n	8002c5c <_ZN15TB6612FNG_Motor8set_dutyEss+0xcc>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	89ba      	ldrh	r2, [r7, #12]
 8002c58:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002c5a:	e004      	b.n	8002c66 <_ZN15TB6612FNG_Motor8set_dutyEss+0xd6>
	__HAL_TIM_SET_COMPARE(timer_handle, timer_channel, compare_value);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	89ba      	ldrh	r2, [r7, #12]
 8002c64:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002c66:	bf00      	nop
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <_ZN15TB6612FNG_Motor5startEv>:

/**
 * @brief starts the motor by starting PWM generation.
 */
void TB6612FNG_Motor::start()
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b082      	sub	sp, #8
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(timer_handle, timer_channel);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695a      	ldr	r2, [r3, #20]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4610      	mov	r0, r2
 8002c82:	f003 ff4b 	bl	8006b1c <HAL_TIM_PWM_Start>
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <_ZN15TB6612FNG_Motor4stopEv>:

/**
 * @brief stops the motor by stopping PWM generation.
 */
void TB6612FNG_Motor::stop()
{	
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(IN1_pin_group, IN1_pin, GPIO_PIN_RESET);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6858      	ldr	r0, [r3, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	891b      	ldrh	r3, [r3, #8]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	f001 fee9 	bl	8004a78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_pin_group, IN2_pin, GPIO_PIN_RESET);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68d8      	ldr	r0, [r3, #12]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	8a1b      	ldrh	r3, [r3, #16]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	f001 fee1 	bl	8004a78 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Stop(timer_handle, timer_channel);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695a      	ldr	r2, [r3, #20]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	f003 ffdb 	bl	8006c7c <HAL_TIM_PWM_Stop>
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
	...

08002cd0 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
	if (initialized)
 8002cd8:	4b12      	ldr	r3, [pc, #72]	@ (8002d24 <HAL_TIM_IC_CaptureCallback+0x54>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d01d      	beq.n	8002d1c <HAL_TIM_IC_CaptureCallback+0x4c>
	{
		// The followning must be changed if the pin where the RC receiver is plugged in changes.
		if((htim->Instance = TIM1))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a11      	ldr	r2, [pc, #68]	@ (8002d28 <HAL_TIM_IC_CaptureCallback+0x58>)
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	bf14      	ite	ne
 8002cee:	2301      	movne	r3, #1
 8002cf0:	2300      	moveq	r3, #0
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d011      	beq.n	8002d1c <HAL_TIM_IC_CaptureCallback+0x4c>
		{
			if ( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 )
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	7f1b      	ldrb	r3, [r3, #28]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d104      	bne.n	8002d0a <HAL_TIM_IC_CaptureCallback+0x3a>
			{
				SteeringChannel->callback();
 8002d00:	4b0a      	ldr	r3, [pc, #40]	@ (8002d2c <HAL_TIM_IC_CaptureCallback+0x5c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7fe fe4f 	bl	80019a8 <_ZN9RCChannel8callbackEv>
			}

			if ( htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	7f1b      	ldrb	r3, [r3, #28]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d104      	bne.n	8002d1c <HAL_TIM_IC_CaptureCallback+0x4c>
			{
				ThrottleChannel->callback();
 8002d12:	4b07      	ldr	r3, [pc, #28]	@ (8002d30 <HAL_TIM_IC_CaptureCallback+0x60>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fe fe46 	bl	80019a8 <_ZN9RCChannel8callbackEv>
			}
		}
	}
}
 8002d1c:	bf00      	nop
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	200006d0 	.word	0x200006d0
 8002d28:	40010000 	.word	0x40010000
 8002d2c:	200006dc 	.word	0x200006dc
 8002d30:	200006d8 	.word	0x200006d8
 8002d34:	00000000 	.word	0x00000000

08002d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d3c:	b0a7      	sub	sp, #156	@ 0x9c
 8002d3e:	af0a      	add	r7, sp, #40	@ 0x28
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002d40:	f001 fb56 	bl	80043f0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002d44:	f000 fc26 	bl	8003594 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002d48:	f000 ff20 	bl	8003b8c <_ZL12MX_GPIO_Initv>
	MX_USART2_UART_Init();
 8002d4c:	f000 fef0 	bl	8003b30 <_ZL19MX_USART2_UART_Initv>
	MX_TIM2_Init();
 8002d50:	f000 fd62 	bl	8003818 <_ZL12MX_TIM2_Initv>
	MX_TIM5_Init();
 8002d54:	f000 fe8e 	bl	8003a74 <_ZL12MX_TIM5_Initv>
	MX_TIM1_Init();
 8002d58:	f000 fcc2 	bl	80036e0 <_ZL12MX_TIM1_Initv>
	MX_TIM3_Init();
 8002d5c:	f000 fdea 	bl	8003934 <_ZL12MX_TIM3_Initv>
	MX_I2C1_Init();
 8002d60:	f000 fc8a 	bl	8003678 <_ZL12MX_I2C1_Initv>
		  GPIOB, GPIO_PIN_14,
		  GPIOB, GPIO_PIN_15,
		  &htim2, TIM_CHANNEL_1,
		  CPU_CLOCK_SPEED_MHZ,
		  MOTOR_PWM_HZ
		  );
 8002d64:	2024      	movs	r0, #36	@ 0x24
 8002d66:	f00b f92c 	bl	800dfc2 <_Znwj>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	461c      	mov	r4, r3
 8002d6e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8002d72:	9304      	str	r3, [sp, #16]
 8002d74:	2364      	movs	r3, #100	@ 0x64
 8002d76:	9303      	str	r3, [sp, #12]
 8002d78:	2300      	movs	r3, #0
 8002d7a:	9302      	str	r3, [sp, #8]
 8002d7c:	4bae      	ldr	r3, [pc, #696]	@ (8003038 <main+0x300>)
 8002d7e:	9301      	str	r3, [sp, #4]
 8002d80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	4bad      	ldr	r3, [pc, #692]	@ (800303c <main+0x304>)
 8002d88:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002d8c:	49ab      	ldr	r1, [pc, #684]	@ (800303c <main+0x304>)
 8002d8e:	4620      	mov	r0, r4
 8002d90:	f7ff fe86 	bl	8002aa0 <_ZN15TB6612FNG_MotorC1EP12GPIO_TypeDeftS1_tP17TIM_HandleTypeDefmmm>
	My_Motor = new TB6612FNG_Motor
 8002d94:	4baa      	ldr	r3, [pc, #680]	@ (8003040 <main+0x308>)
 8002d96:	601c      	str	r4, [r3, #0]
				  1533,  // Calibrated neutral
				  2017,  // Calibrated full speed
				  10000,   // New max positive
				  10000,    // New max negative (magnitude)
				  true  // Saturate if signal is over full? True by default. False good for debugging.
				  );
 8002d98:	205c      	movs	r0, #92	@ 0x5c
 8002d9a:	f00b f912 	bl	800dfc2 <_Znwj>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	461c      	mov	r4, r3
 8002da2:	2301      	movs	r3, #1
 8002da4:	9308      	str	r3, [sp, #32]
 8002da6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002daa:	9307      	str	r3, [sp, #28]
 8002dac:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002db0:	9306      	str	r3, [sp, #24]
 8002db2:	f240 73e1 	movw	r3, #2017	@ 0x7e1
 8002db6:	9305      	str	r3, [sp, #20]
 8002db8:	f240 53fd 	movw	r3, #1533	@ 0x5fd
 8002dbc:	9304      	str	r3, [sp, #16]
 8002dbe:	f44f 6384 	mov.w	r3, #1056	@ 0x420
 8002dc2:	9303      	str	r3, [sp, #12]
 8002dc4:	2364      	movs	r3, #100	@ 0x64
 8002dc6:	9302      	str	r3, [sp, #8]
 8002dc8:	f244 435c 	movw	r3, #17500	@ 0x445c
 8002dcc:	9301      	str	r3, [sp, #4]
 8002dce:	2304      	movs	r3, #4
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	4b9c      	ldr	r3, [pc, #624]	@ (8003044 <main+0x30c>)
 8002dd4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dd8:	499b      	ldr	r1, [pc, #620]	@ (8003048 <main+0x310>)
 8002dda:	4620      	mov	r0, r4
 8002ddc:	f7fe fd5e 	bl	800189c <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb>
	ThrottleChannel = new RCChannel
 8002de0:	4b9a      	ldr	r3, [pc, #616]	@ (800304c <main+0x314>)
 8002de2:	601c      	str	r4, [r3, #0]
	Throttle = new RemoteControlControl
		  (
		  ThrottleChannel,
		  My_Controller,
		  30
		  );
 8002de4:	2014      	movs	r0, #20
 8002de6:	f00b f8ec 	bl	800dfc2 <_Znwj>
 8002dea:	4603      	mov	r3, r0
 8002dec:	461c      	mov	r4, r3
 8002dee:	4b97      	ldr	r3, [pc, #604]	@ (800304c <main+0x314>)
 8002df0:	6819      	ldr	r1, [r3, #0]
 8002df2:	4b97      	ldr	r3, [pc, #604]	@ (8003050 <main+0x318>)
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	231e      	movs	r3, #30
 8002df8:	4620      	mov	r0, r4
 8002dfa:	f7fe fe99 	bl	8001b30 <_ZN20RemoteControlControlC1EP9RCChannelP12MotorControlt>
	Throttle = new RemoteControlControl
 8002dfe:	4b95      	ldr	r3, [pc, #596]	@ (8003054 <main+0x31c>)
 8002e00:	601c      	str	r4, [r3, #0]
		  1520,      // Calibrated neutral
		  2035,      // Calibrated full left
		  10000,       // New max positive
		  10000,       // New max negative (magnitude)
		  true     // Saturate if signal is over full? True by default. False good for debugging.
		  );
 8002e02:	205c      	movs	r0, #92	@ 0x5c
 8002e04:	f00b f8dd 	bl	800dfc2 <_Znwj>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	461c      	mov	r4, r3
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	9308      	str	r3, [sp, #32]
 8002e10:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002e14:	9307      	str	r3, [sp, #28]
 8002e16:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002e1a:	9306      	str	r3, [sp, #24]
 8002e1c:	f240 73f3 	movw	r3, #2035	@ 0x7f3
 8002e20:	9305      	str	r3, [sp, #20]
 8002e22:	f44f 63be 	mov.w	r3, #1520	@ 0x5f0
 8002e26:	9304      	str	r3, [sp, #16]
 8002e28:	f240 33ea 	movw	r3, #1002	@ 0x3ea
 8002e2c:	9303      	str	r3, [sp, #12]
 8002e2e:	2364      	movs	r3, #100	@ 0x64
 8002e30:	9302      	str	r3, [sp, #8]
 8002e32:	f244 435c 	movw	r3, #17500	@ 0x445c
 8002e36:	9301      	str	r3, [sp, #4]
 8002e38:	2300      	movs	r3, #0
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	4b81      	ldr	r3, [pc, #516]	@ (8003044 <main+0x30c>)
 8002e3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e42:	4981      	ldr	r1, [pc, #516]	@ (8003048 <main+0x310>)
 8002e44:	4620      	mov	r0, r4
 8002e46:	f7fe fd29 	bl	800189c <_ZN9RCChannelC1EP12GPIO_TypeDeftP17TIM_HandleTypeDefmlmlllllb>
	SteeringChannel = new RCChannel
 8002e4a:	4b83      	ldr	r3, [pc, #524]	@ (8003058 <main+0x320>)
 8002e4c:	601c      	str	r4, [r3, #0]
		  &htim5,
		  20,
		  488.3f,
		  16,
		  false // True doesn't work yet!
		  );
 8002e4e:	202c      	movs	r0, #44	@ 0x2c
 8002e50:	f00b f8b7 	bl	800dfc2 <_Znwj>
 8002e54:	4603      	mov	r3, r0
 8002e56:	461c      	mov	r4, r3
 8002e58:	2300      	movs	r3, #0
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	2310      	movs	r3, #16
 8002e5e:	ed9f 0a7f 	vldr	s0, [pc, #508]	@ 800305c <main+0x324>
 8002e62:	2214      	movs	r2, #20
 8002e64:	497e      	ldr	r1, [pc, #504]	@ (8003060 <main+0x328>)
 8002e66:	4620      	mov	r0, r4
 8002e68:	f7fe fae4 	bl	8001434 <_ZN13PololuEncoderC1EP17TIM_HandleTypeDefsfhb>
	My_Encoder = new PololuEncoder
 8002e6c:	4b7d      	ldr	r3, [pc, #500]	@ (8003064 <main+0x32c>)
 8002e6e:	601c      	str	r4, [r3, #0]
		  My_Encoder,
		  CONTROL_FREQUENCY_HZ,
		  100.0f,
		  650.0f,
		  0.0f
		  );
 8002e70:	2034      	movs	r0, #52	@ 0x34
 8002e72:	f00b f8a6 	bl	800dfc2 <_Znwj>
 8002e76:	4603      	mov	r3, r0
 8002e78:	461c      	mov	r4, r3
 8002e7a:	4b71      	ldr	r3, [pc, #452]	@ (8003040 <main+0x308>)
 8002e7c:	6819      	ldr	r1, [r3, #0]
 8002e7e:	4b79      	ldr	r3, [pc, #484]	@ (8003064 <main+0x32c>)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	ed9f 1a79 	vldr	s2, [pc, #484]	@ 8003068 <main+0x330>
 8002e86:	eddf 0a79 	vldr	s1, [pc, #484]	@ 800306c <main+0x334>
 8002e8a:	ed9f 0a79 	vldr	s0, [pc, #484]	@ 8003070 <main+0x338>
 8002e8e:	2308      	movs	r3, #8
 8002e90:	4620      	mov	r0, r4
 8002e92:	f7fe f975 	bl	8001180 <_ZN12MotorControlC1EP15TB6612FNG_MotorP13PololuEncodermfff>
	My_Controller = new MotorControl
 8002e96:	4b6e      	ldr	r3, [pc, #440]	@ (8003050 <main+0x318>)
 8002e98:	601c      	str	r4, [r3, #0]
		  false,  // Closed loop mode not implemented yet
		  60,
		  1000,
		  1500,
		  2000
		  );
 8002e9a:	2020      	movs	r0, #32
 8002e9c:	f00b f891 	bl	800dfc2 <_Znwj>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	461c      	mov	r4, r3
 8002ea4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002ea8:	9305      	str	r3, [sp, #20]
 8002eaa:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8002eae:	9304      	str	r3, [sp, #16]
 8002eb0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002eb4:	9303      	str	r3, [sp, #12]
 8002eb6:	233c      	movs	r3, #60	@ 0x3c
 8002eb8:	9302      	str	r3, [sp, #8]
 8002eba:	2300      	movs	r3, #0
 8002ebc:	9301      	str	r3, [sp, #4]
 8002ebe:	2364      	movs	r3, #100	@ 0x64
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	f244 435c 	movw	r3, #17500	@ 0x445c
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	496a      	ldr	r1, [pc, #424]	@ (8003074 <main+0x33c>)
 8002eca:	4620      	mov	r0, r4
 8002ecc:	f7fe fbe0 	bl	8001690 <_ZN11PololuServoC1EP17TIM_HandleTypeDefmtmbtttt>
	My_Servo = new PololuServo
 8002ed0:	4b69      	ldr	r3, [pc, #420]	@ (8003078 <main+0x340>)
 8002ed2:	601c      	str	r4, [r3, #0]

	My_Conveyor = new ConveyorBelt
			(
			My_Encoder,
			38.1f // mm
			);
 8002ed4:	2010      	movs	r0, #16
 8002ed6:	f00b f874 	bl	800dfc2 <_Znwj>
 8002eda:	4603      	mov	r3, r0
 8002edc:	461c      	mov	r4, r3
 8002ede:	4b61      	ldr	r3, [pc, #388]	@ (8003064 <main+0x32c>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	ed9f 0a66 	vldr	s0, [pc, #408]	@ 800307c <main+0x344>
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4620      	mov	r0, r4
 8002eea:	f7fe f8a9 	bl	8001040 <_ZN12ConveyorBeltC1EP13PololuEncoderf>
	My_Conveyor = new ConveyorBelt
 8002eee:	4b64      	ldr	r3, [pc, #400]	@ (8003080 <main+0x348>)
 8002ef0:	601c      	str	r4, [r3, #0]

	// Color Sensor
	My_Color_Sensor = new SparkFun_APDS9960
			(
			&hi2c1
			);
 8002ef2:	20a8      	movs	r0, #168	@ 0xa8
 8002ef4:	f00b f865 	bl	800dfc2 <_Znwj>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	461c      	mov	r4, r3
 8002efc:	4961      	ldr	r1, [pc, #388]	@ (8003084 <main+0x34c>)
 8002efe:	4620      	mov	r0, r4
 8002f00:	f7fe fe70 	bl	8001be4 <_ZN17SparkFun_APDS9960C1EP17I2C_HandleTypeDef>
	My_Color_Sensor = new SparkFun_APDS9960
 8002f04:	4b60      	ldr	r3, [pc, #384]	@ (8003088 <main+0x350>)
 8002f06:	601c      	str	r4, [r3, #0]
	My_Color_Sensor->init();
 8002f08:	4b5f      	ldr	r3, [pc, #380]	@ (8003088 <main+0x350>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fe fe99 	bl	8001c44 <_ZN17SparkFun_APDS99604initEv>
	My_Color_Sensor->disableProximitySensor();
 8002f12:	4b5d      	ldr	r3, [pc, #372]	@ (8003088 <main+0x350>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff f8e2 	bl	80020e0 <_ZN17SparkFun_APDS996022disableProximitySensorEv>
	My_Color_Sensor->disableGestureSensor();
 8002f1c:	4b5a      	ldr	r3, [pc, #360]	@ (8003088 <main+0x350>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff f8ff 	bl	8002124 <_ZN17SparkFun_APDS996020disableGestureSensorEv>
	My_Color_Sensor->enableLightSensor();
 8002f26:	4b58      	ldr	r3, [pc, #352]	@ (8003088 <main+0x350>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff f88d 	bl	800204c <_ZN17SparkFun_APDS996017enableLightSensorEb>
	uint16_t ambient_light, red_light, green_light, blue_light;

	// ToF_Sensor in C (Not C++)
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8002f32:	2201      	movs	r2, #1
 8002f34:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002f38:	4840      	ldr	r0, [pc, #256]	@ (800303c <main+0x304>)
 8002f3a:	f001 fd9d 	bl	8004a78 <HAL_GPIO_WritePin>
	VL53L0X_Init();
 8002f3e:	f000 fe7f 	bl	8003c40 <_ZL12VL53L0X_Initv>

	// FSM Overview
	uint8_t task = 0;
 8002f42:	2300      	movs	r3, #0
 8002f44:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	int number_of_states = 5;
 8002f48:	2305      	movs	r3, #5
 8002f4a:	663b      	str	r3, [r7, #96]	@ 0x60

	// Don't touch.
	number_of_states += 1;
 8002f4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f4e:	3301      	adds	r3, #1
 8002f50:	663b      	str	r3, [r7, #96]	@ 0x60
	uint32_t last_tick_state[number_of_states] = {0};
 8002f52:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002f54:	1e4b      	subs	r3, r1, #1
 8002f56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f58:	460a      	mov	r2, r1
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	4690      	mov	r8, r2
 8002f5e:	4699      	mov	r9, r3
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8002f6c:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002f70:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8002f74:	460a      	mov	r2, r1
 8002f76:	2300      	movs	r3, #0
 8002f78:	613a      	str	r2, [r7, #16]
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002f88:	4648      	mov	r0, r9
 8002f8a:	0143      	lsls	r3, r0, #5
 8002f8c:	4640      	mov	r0, r8
 8002f8e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f92:	4640      	mov	r0, r8
 8002f94:	0142      	lsls	r2, r0, #5
 8002f96:	460b      	mov	r3, r1
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	3307      	adds	r3, #7
 8002f9c:	08db      	lsrs	r3, r3, #3
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	ebad 0d03 	sub.w	sp, sp, r3
 8002fa4:	ab0a      	add	r3, sp, #40	@ 0x28
 8002fa6:	3303      	adds	r3, #3
 8002fa8:	089b      	lsrs	r3, r3, #2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002fae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fb0:	3901      	subs	r1, #1
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	1d1a      	adds	r2, r3, #4
 8002fb8:	1e4b      	subs	r3, r1, #1
 8002fba:	e003      	b.n	8002fc4 <main+0x28c>
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	6011      	str	r1, [r2, #0]
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	3204      	adds	r2, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	daf9      	bge.n	8002fbc <main+0x284>
	uint16_t task_frequencies[number_of_states] = {0};
 8002fc8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002fca:	1e4b      	subs	r3, r1, #1
 8002fcc:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fce:	460a      	mov	r2, r1
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60ba      	str	r2, [r7, #8]
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	f04f 0300 	mov.w	r3, #0
 8002fde:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8002fe2:	4648      	mov	r0, r9
 8002fe4:	0103      	lsls	r3, r0, #4
 8002fe6:	4640      	mov	r0, r8
 8002fe8:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8002fec:	4640      	mov	r0, r8
 8002fee:	0102      	lsls	r2, r0, #4
 8002ff0:	460a      	mov	r2, r1
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	603a      	str	r2, [r7, #0]
 8002ff6:	607b      	str	r3, [r7, #4]
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	f04f 0300 	mov.w	r3, #0
 8003000:	e9d7 8900 	ldrd	r8, r9, [r7]
 8003004:	4648      	mov	r0, r9
 8003006:	0103      	lsls	r3, r0, #4
 8003008:	4640      	mov	r0, r8
 800300a:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800300e:	4640      	mov	r0, r8
 8003010:	0102      	lsls	r2, r0, #4
 8003012:	460b      	mov	r3, r1
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	3307      	adds	r3, #7
 8003018:	08db      	lsrs	r3, r3, #3
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	ebad 0d03 	sub.w	sp, sp, r3
 8003020:	ab0a      	add	r3, sp, #40	@ 0x28
 8003022:	3301      	adds	r3, #1
 8003024:	085b      	lsrs	r3, r3, #1
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	653b      	str	r3, [r7, #80]	@ 0x50
 800302a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800302c:	3901      	subs	r1, #1
 800302e:	2200      	movs	r2, #0
 8003030:	801a      	strh	r2, [r3, #0]
 8003032:	1c9a      	adds	r2, r3, #2
 8003034:	1e4b      	subs	r3, r1, #1
 8003036:	e02d      	b.n	8003094 <main+0x35c>
 8003038:	2000054c 	.word	0x2000054c
 800303c:	40020400 	.word	0x40020400
 8003040:	200006d4 	.word	0x200006d4
 8003044:	20000504 	.word	0x20000504
 8003048:	40020000 	.word	0x40020000
 800304c:	200006d8 	.word	0x200006d8
 8003050:	200006e8 	.word	0x200006e8
 8003054:	200006e0 	.word	0x200006e0
 8003058:	200006dc 	.word	0x200006dc
 800305c:	43f42666 	.word	0x43f42666
 8003060:	200005dc 	.word	0x200005dc
 8003064:	200006e4 	.word	0x200006e4
 8003068:	00000000 	.word	0x00000000
 800306c:	44228000 	.word	0x44228000
 8003070:	42c80000 	.word	0x42c80000
 8003074:	20000594 	.word	0x20000594
 8003078:	200006ec 	.word	0x200006ec
 800307c:	42186666 	.word	0x42186666
 8003080:	200006f0 	.word	0x200006f0
 8003084:	200004b0 	.word	0x200004b0
 8003088:	200006f4 	.word	0x200006f4
 800308c:	2100      	movs	r1, #0
 800308e:	8011      	strh	r1, [r2, #0]
 8003090:	3b01      	subs	r3, #1
 8003092:	3202      	adds	r2, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	daf9      	bge.n	800308c <main+0x354>
	uint16_t range_reading = -1;
 8003098:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800309c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	bool ready_for_new_block = true;
 80030a0:	2301      	movs	r3, #1
 80030a2:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

	// Change the task frequencies here.
	task_frequencies[1] = CONTROL_FREQUENCY_HZ; // Hz
 80030a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030a8:	2208      	movs	r2, #8
 80030aa:	805a      	strh	r2, [r3, #2]
	task_frequencies[2] = 2; // Hz
 80030ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030ae:	2202      	movs	r2, #2
 80030b0:	809a      	strh	r2, [r3, #4]
	task_frequencies[3] = 10; // Hz
 80030b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030b4:	220a      	movs	r2, #10
 80030b6:	80da      	strh	r2, [r3, #6]
	task_frequencies[4] = 2; // Hz
 80030b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030ba:	2202      	movs	r2, #2
 80030bc:	811a      	strh	r2, [r3, #8]

	// Don't touch. Loop to calculate periods based on frequencies
	uint16_t task_periods[number_of_states] = {0};
 80030be:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80030c0:	1e4b      	subs	r3, r1, #1
 80030c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030c4:	460a      	mov	r2, r1
 80030c6:	2300      	movs	r3, #0
 80030c8:	4615      	mov	r5, r2
 80030ca:	461e      	mov	r6, r3
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f04f 0300 	mov.w	r3, #0
 80030d4:	0133      	lsls	r3, r6, #4
 80030d6:	ea43 7315 	orr.w	r3, r3, r5, lsr #28
 80030da:	012a      	lsls	r2, r5, #4
 80030dc:	460a      	mov	r2, r1
 80030de:	2300      	movs	r3, #0
 80030e0:	4692      	mov	sl, r2
 80030e2:	469b      	mov	fp, r3
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	ea4f 130b 	mov.w	r3, fp, lsl #4
 80030f0:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 80030f4:	ea4f 120a 	mov.w	r2, sl, lsl #4
 80030f8:	460b      	mov	r3, r1
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	3307      	adds	r3, #7
 80030fe:	08db      	lsrs	r3, r3, #3
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	ebad 0d03 	sub.w	sp, sp, r3
 8003106:	ab0a      	add	r3, sp, #40	@ 0x28
 8003108:	3301      	adds	r3, #1
 800310a:	085b      	lsrs	r3, r3, #1
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003110:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003112:	3901      	subs	r1, #1
 8003114:	2200      	movs	r2, #0
 8003116:	801a      	strh	r2, [r3, #0]
 8003118:	1c9a      	adds	r2, r3, #2
 800311a:	1e4b      	subs	r3, r1, #1
 800311c:	e003      	b.n	8003126 <main+0x3ee>
 800311e:	2100      	movs	r1, #0
 8003120:	8011      	strh	r1, [r2, #0]
 8003122:	3b01      	subs	r3, #1
 8003124:	3202      	adds	r2, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	daf9      	bge.n	800311e <main+0x3e6>
	for (int index = 0; index < number_of_states; index++)
 800312a:	2300      	movs	r3, #0
 800312c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800312e:	e01c      	b.n	800316a <main+0x432>
	{
		if (task_frequencies[index] != 0)
 8003130:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003132:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003134:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00e      	beq.n	800315a <main+0x422>
		{
		  task_periods[index] = 1000 / task_frequencies[index];
 800313c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800313e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003140:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8003144:	461a      	mov	r2, r3
 8003146:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800314a:	fb93 f3f2 	sdiv	r3, r3, r2
 800314e:	b299      	uxth	r1, r3
 8003150:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003152:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003154:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8003158:	e004      	b.n	8003164 <main+0x42c>
		}
		else
		{
		  task_periods[index] = 0; // Avoid division by zero
 800315a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800315c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800315e:	2100      	movs	r1, #0
 8003160:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int index = 0; index < number_of_states; index++)
 8003164:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003166:	3301      	adds	r3, #1
 8003168:	66bb      	str	r3, [r7, #104]	@ 0x68
 800316a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800316c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800316e:	429a      	cmp	r2, r3
 8003170:	dbde      	blt.n	8003130 <main+0x3f8>
		}
	}

	// Other preferences
	uint16_t block_range_mm = 50; //Threshold
 8003172:	2332      	movs	r3, #50	@ 0x32
 8003174:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	float distance_from_ToF_to_color_sensor = 42.0f;
 8003178:	4baf      	ldr	r3, [pc, #700]	@ (8003438 <main+0x700>)
 800317a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int8_t conveyor_speed = -15;
 800317c:	23f1      	movs	r3, #241	@ 0xf1
 800317e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	while (1)
	{
	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
	  uint32_t current_tick = HAL_GetTick();
 8003182:	f001 f99b 	bl	80044bc <HAL_GetTick>
 8003186:	6378      	str	r0, [r7, #52]	@ 0x34

	  switch(task)
 8003188:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800318c:	2b05      	cmp	r3, #5
 800318e:	f200 81ee 	bhi.w	800356e <main+0x836>
 8003192:	a201      	add	r2, pc, #4	@ (adr r2, 8003198 <main+0x460>)
 8003194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003198:	080031b1 	.word	0x080031b1
 800319c:	080031e1 	.word	0x080031e1
 80031a0:	0800326b 	.word	0x0800326b
 80031a4:	0800356f 	.word	0x0800356f
 80031a8:	08003317 	.word	0x08003317
 80031ac:	0800352f 	.word	0x0800352f
	  {
		  case 0:
			  // Init
			  My_Servo->set_position(0);
 80031b0:	4ba2      	ldr	r3, [pc, #648]	@ (800343c <main+0x704>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2100      	movs	r1, #0
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fe fab4 	bl	8001724 <_ZN11PololuServo12set_positionEs>
			  My_Controller->run(0);
 80031bc:	4ba0      	ldr	r3, [pc, #640]	@ (8003440 <main+0x708>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	ed9f 0aa0 	vldr	s0, [pc, #640]	@ 8003444 <main+0x70c>
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fe f83b 	bl	8001240 <_ZN12MotorControl3runEf>
			  HAL_Delay(500);
 80031ca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80031ce:	f001 f981 	bl	80044d4 <HAL_Delay>
			  initialized = true;
 80031d2:	4b9d      	ldr	r3, [pc, #628]	@ (8003448 <main+0x710>)
 80031d4:	2201      	movs	r2, #1
 80031d6:	701a      	strb	r2, [r3, #0]

			  // State change
			  task = 1;
 80031d8:	2301      	movs	r3, #1
 80031da:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			  break;
 80031de:	e1ca      	b.n	8003576 <main+0x83e>

		  case 1: // RC and Motor Controller
			  int next_task;

			  if (current_tick - last_tick_state[1] >= task_periods[1])
 80031e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031ea:	8852      	ldrh	r2, [r2, #2]
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d338      	bcc.n	8003262 <main+0x52a>
			  {
				  last_tick_state[1] = current_tick;
 80031f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031f4:	605a      	str	r2, [r3, #4]

				  if (-ThrottleChannel->value >= 0.6*ThrottleChannel->rescale_forward_magnitude)
 80031f6:	4b95      	ldr	r3, [pc, #596]	@ (800344c <main+0x714>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	425b      	negs	r3, r3
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fd f998 	bl	8000534 <__aeabi_i2d>
 8003204:	4604      	mov	r4, r0
 8003206:	460d      	mov	r5, r1
 8003208:	4b90      	ldr	r3, [pc, #576]	@ (800344c <main+0x714>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800320e:	4618      	mov	r0, r3
 8003210:	f7fd f990 	bl	8000534 <__aeabi_i2d>
 8003214:	a386      	add	r3, pc, #536	@ (adr r3, 8003430 <main+0x6f8>)
 8003216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321a:	f7fd f9f5 	bl	8000608 <__aeabi_dmul>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4620      	mov	r0, r4
 8003224:	4629      	mov	r1, r5
 8003226:	f7fd fc75 	bl	8000b14 <__aeabi_dcmpge>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00f      	beq.n	8003250 <main+0x518>
				  {
					 My_Controller->run(conveyor_speed);
 8003230:	4b83      	ldr	r3, [pc, #524]	@ (8003440 <main+0x708>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f997 203b 	ldrsb.w	r2, [r7, #59]	@ 0x3b
 8003238:	ee07 2a90 	vmov	s15, r2
 800323c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003240:	eeb0 0a67 	vmov.f32	s0, s15
 8003244:	4618      	mov	r0, r3
 8003246:	f7fd fffb 	bl	8001240 <_ZN12MotorControl3runEf>
					 next_task = 2;
 800324a:	2302      	movs	r3, #2
 800324c:	667b      	str	r3, [r7, #100]	@ 0x64
 800324e:	e008      	b.n	8003262 <main+0x52a>
				  }
				  else
				  {
					My_Controller->run(0);
 8003250:	4b7b      	ldr	r3, [pc, #492]	@ (8003440 <main+0x708>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	ed9f 0a7b 	vldr	s0, [pc, #492]	@ 8003444 <main+0x70c>
 8003258:	4618      	mov	r0, r3
 800325a:	f7fd fff1 	bl	8001240 <_ZN12MotorControl3runEf>
					next_task = 1;
 800325e:	2301      	movs	r3, #1
 8003260:	667b      	str	r3, [r7, #100]	@ 0x64
				  }
			  }

			  // State change
			  task = next_task;
 8003262:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003264:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			  break;
 8003268:	e185      	b.n	8003576 <main+0x83e>


		  case 2: // ToF Sensor
			  if (current_tick - last_tick_state[2] >= task_periods[2])
 800326a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003274:	8892      	ldrh	r2, [r2, #4]
 8003276:	4293      	cmp	r3, r2
 8003278:	d349      	bcc.n	800330e <main+0x5d6>
			  {
				  last_tick_state[2] = current_tick;
 800327a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800327c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800327e:	609a      	str	r2, [r3, #8]

				  // Read ToF Sensor
				  VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 8003280:	4b73      	ldr	r3, [pc, #460]	@ (8003450 <main+0x718>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4973      	ldr	r1, [pc, #460]	@ (8003454 <main+0x71c>)
 8003286:	4618      	mov	r0, r3
 8003288:	f007 f962 	bl	800a550 <VL53L0X_PerformSingleRangingMeasurement>

				if(ready_for_new_block)
 800328c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003290:	2b00      	cmp	r3, #0
 8003292:	d03c      	beq.n	800330e <main+0x5d6>
				{

					if(RangingData.RangeMilliMeter <= block_range_mm)
 8003294:	4b6f      	ldr	r3, [pc, #444]	@ (8003454 <main+0x71c>)
 8003296:	891b      	ldrh	r3, [r3, #8]
 8003298:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800329c:	429a      	cmp	r2, r3
 800329e:	d336      	bcc.n	800330e <main+0x5d6>
					{
						// Debug message
						int string_length = sprintf(my_message, "A block was found\r\n");
 80032a0:	496d      	ldr	r1, [pc, #436]	@ (8003458 <main+0x720>)
 80032a2:	486e      	ldr	r0, [pc, #440]	@ (800345c <main+0x724>)
 80032a4:	f00b fc88 	bl	800ebb8 <siprintf>
 80032a8:	6238      	str	r0, [r7, #32]
						HAL_UART_Transmit(&huart2, (uint8_t *)my_message, string_length, HAL_MAX_DELAY);
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	f04f 33ff 	mov.w	r3, #4294967295
 80032b2:	496a      	ldr	r1, [pc, #424]	@ (800345c <main+0x724>)
 80032b4:	486a      	ldr	r0, [pc, #424]	@ (8003460 <main+0x728>)
 80032b6:	f005 fadf 	bl	8008878 <HAL_UART_Transmit>

						// Store the current encoder posiiton for later.
						My_Block->set_home();
 80032ba:	4b6a      	ldr	r3, [pc, #424]	@ (8003464 <main+0x72c>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fd fe60 	bl	8000f84 <_ZN12ColoredBlock8set_homeEv>
						string_length = sprintf(my_message, "Block position: %.3f mm.\r\n", My_Block->home);
 80032c4:	4b67      	ldr	r3, [pc, #412]	@ (8003464 <main+0x72c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fd f944 	bl	8000558 <__aeabi_f2d>
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	4964      	ldr	r1, [pc, #400]	@ (8003468 <main+0x730>)
 80032d6:	4861      	ldr	r0, [pc, #388]	@ (800345c <main+0x724>)
 80032d8:	f00b fc6e 	bl	800ebb8 <siprintf>
 80032dc:	6238      	str	r0, [r7, #32]
						HAL_UART_Transmit(&huart2, (uint8_t *)my_message, string_length, HAL_MAX_DELAY);
 80032de:	6a3b      	ldr	r3, [r7, #32]
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	f04f 33ff 	mov.w	r3, #4294967295
 80032e6:	495d      	ldr	r1, [pc, #372]	@ (800345c <main+0x724>)
 80032e8:	485d      	ldr	r0, [pc, #372]	@ (8003460 <main+0x728>)
 80032ea:	f005 fac5 	bl	8008878 <HAL_UART_Transmit>

						// Stop checking for blocks.
						ready_for_new_block = false;
 80032ee:	2300      	movs	r3, #0
 80032f0:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

						// Create a new block instance
						My_Block = new ColoredBlock(My_Conveyor);
 80032f4:	2014      	movs	r0, #20
 80032f6:	f00a fe64 	bl	800dfc2 <_Znwj>
 80032fa:	4603      	mov	r3, r0
 80032fc:	461c      	mov	r4, r3
 80032fe:	4b5b      	ldr	r3, [pc, #364]	@ (800346c <main+0x734>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4619      	mov	r1, r3
 8003304:	4620      	mov	r0, r4
 8003306:	f7fd fe1f 	bl	8000f48 <_ZN12ColoredBlockC1EP12ConveyorBelt>
 800330a:	4b56      	ldr	r3, [pc, #344]	@ (8003464 <main+0x72c>)
 800330c:	601c      	str	r4, [r3, #0]
					}
				}
			  }

			  // State Changes
			  task = 4;
 800330e:	2304      	movs	r3, #4
 8003310:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			  break;
 8003314:	e12f      	b.n	8003576 <main+0x83e>

		  case 4: // Color Sensor
			  if (current_tick - last_tick_state[4] >= task_periods[4])
 8003316:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003320:	8912      	ldrh	r2, [r2, #8]
 8003322:	4293      	cmp	r3, r2
 8003324:	f0c0 80ff 	bcc.w	8003526 <main+0x7ee>
			  {
				  last_tick_state[4] = current_tick;
 8003328:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800332a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800332c:	611a      	str	r2, [r3, #16]

				  if (not ready_for_new_block)
 800332e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8003332:	f083 0301 	eor.w	r3, r3, #1
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 80f4 	beq.w	8003526 <main+0x7ee>
				  {
					  // Debug message
					  My_Block->update_position();
 800333e:	4b49      	ldr	r3, [pc, #292]	@ (8003464 <main+0x72c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f7fd fe30 	bl	8000fa8 <_ZN12ColoredBlock15update_positionEv>
					  int string_length = sprintf(my_message, "Block position: %.2f mm.\r\n", fabs(My_Block->update_position()));
 8003348:	4b46      	ldr	r3, [pc, #280]	@ (8003464 <main+0x72c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f7fd fe2b 	bl	8000fa8 <_ZN12ColoredBlock15update_positionEv>
 8003352:	eef0 7a40 	vmov.f32	s15, s0
 8003356:	eef0 7ae7 	vabs.f32	s15, s15
 800335a:	ee17 0a90 	vmov	r0, s15
 800335e:	f7fd f8fb 	bl	8000558 <__aeabi_f2d>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	4942      	ldr	r1, [pc, #264]	@ (8003470 <main+0x738>)
 8003368:	483c      	ldr	r0, [pc, #240]	@ (800345c <main+0x724>)
 800336a:	f00b fc25 	bl	800ebb8 <siprintf>
 800336e:	6338      	str	r0, [r7, #48]	@ 0x30
					  HAL_UART_Transmit(&huart2, (uint8_t *)my_message, string_length, HAL_MAX_DELAY);
 8003370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003372:	b29a      	uxth	r2, r3
 8003374:	f04f 33ff 	mov.w	r3, #4294967295
 8003378:	4938      	ldr	r1, [pc, #224]	@ (800345c <main+0x724>)
 800337a:	4839      	ldr	r0, [pc, #228]	@ (8003460 <main+0x728>)
 800337c:	f005 fa7c 	bl	8008878 <HAL_UART_Transmit>

					  if (fabs(My_Block->update_position()) >= distance_from_ToF_to_color_sensor)
 8003380:	4b38      	ldr	r3, [pc, #224]	@ (8003464 <main+0x72c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f7fd fe0f 	bl	8000fa8 <_ZN12ColoredBlock15update_positionEv>
 800338a:	eef0 7a40 	vmov.f32	s15, s0
 800338e:	eef0 7ae7 	vabs.f32	s15, s15
 8003392:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003396:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800339a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800339e:	bf94      	ite	ls
 80033a0:	2301      	movls	r3, #1
 80033a2:	2300      	movhi	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 80bd 	beq.w	8003526 <main+0x7ee>
					  {
						   // Debug message
							string_length = sprintf(my_message, "Block has reached color sensor \r\n");
 80033ac:	4931      	ldr	r1, [pc, #196]	@ (8003474 <main+0x73c>)
 80033ae:	482b      	ldr	r0, [pc, #172]	@ (800345c <main+0x724>)
 80033b0:	f00b fc02 	bl	800ebb8 <siprintf>
 80033b4:	6338      	str	r0, [r7, #48]	@ 0x30
							HAL_UART_Transmit(&huart2, (uint8_t *)my_message, string_length, HAL_MAX_DELAY);
 80033b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	f04f 33ff 	mov.w	r3, #4294967295
 80033be:	4927      	ldr	r1, [pc, #156]	@ (800345c <main+0x724>)
 80033c0:	4827      	ldr	r0, [pc, #156]	@ (8003460 <main+0x728>)
 80033c2:	f005 fa59 	bl	8008878 <HAL_UART_Transmit>

						  // Update position of block
						  My_Block->update_position();
 80033c6:	4b27      	ldr	r3, [pc, #156]	@ (8003464 <main+0x72c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fd fdec 	bl	8000fa8 <_ZN12ColoredBlock15update_positionEv>
	//						   My_Color_Sensor->readAmbientLight(ambient_light);
	//						   My_Color_Sensor->readRedLight(red_light);
	//						   My_Color_Sensor->readGreenLight(green_light);
	//						   My_Color_Sensor->readBlueLight(blue_light);

							bool success = My_Color_Sensor->readAmbientLight(ambient_light) &&
 80033d0:	4b29      	ldr	r3, [pc, #164]	@ (8003478 <main+0x740>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f107 021e 	add.w	r2, r7, #30
 80033d8:	4611      	mov	r1, r2
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fe fee9 	bl	80021b2 <_ZN17SparkFun_APDS996016readAmbientLightERt>
 80033e0:	4603      	mov	r3, r0
										   My_Color_Sensor->readRedLight(red_light) &&
										   My_Color_Sensor->readGreenLight(green_light) &&
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d04a      	beq.n	800347c <main+0x744>
										   My_Color_Sensor->readRedLight(red_light) &&
 80033e6:	4b24      	ldr	r3, [pc, #144]	@ (8003478 <main+0x740>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f107 021c 	add.w	r2, r7, #28
 80033ee:	4611      	mov	r1, r2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7fe ff16 	bl	8002222 <_ZN17SparkFun_APDS996012readRedLightERt>
 80033f6:	4603      	mov	r3, r0
							bool success = My_Color_Sensor->readAmbientLight(ambient_light) &&
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d03f      	beq.n	800347c <main+0x744>
										   My_Color_Sensor->readGreenLight(green_light) &&
 80033fc:	4b1e      	ldr	r3, [pc, #120]	@ (8003478 <main+0x740>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f107 021a 	add.w	r2, r7, #26
 8003404:	4611      	mov	r1, r2
 8003406:	4618      	mov	r0, r3
 8003408:	f7fe ff43 	bl	8002292 <_ZN17SparkFun_APDS996014readGreenLightERt>
 800340c:	4603      	mov	r3, r0
										   My_Color_Sensor->readRedLight(red_light) &&
 800340e:	2b00      	cmp	r3, #0
 8003410:	d034      	beq.n	800347c <main+0x744>
										   My_Color_Sensor->readBlueLight(blue_light);
 8003412:	4b19      	ldr	r3, [pc, #100]	@ (8003478 <main+0x740>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f107 0218 	add.w	r2, r7, #24
 800341a:	4611      	mov	r1, r2
 800341c:	4618      	mov	r0, r3
 800341e:	f7fe ff70 	bl	8002302 <_ZN17SparkFun_APDS996013readBlueLightERt>
 8003422:	4603      	mov	r3, r0
										   My_Color_Sensor->readGreenLight(green_light) &&
 8003424:	2b00      	cmp	r3, #0
 8003426:	d029      	beq.n	800347c <main+0x744>
 8003428:	2301      	movs	r3, #1
 800342a:	e028      	b.n	800347e <main+0x746>
 800342c:	f3af 8000 	nop.w
 8003430:	33333333 	.word	0x33333333
 8003434:	3fe33333 	.word	0x3fe33333
 8003438:	42280000 	.word	0x42280000
 800343c:	200006ec 	.word	0x200006ec
 8003440:	200006e8 	.word	0x200006e8
 8003444:	00000000 	.word	0x00000000
 8003448:	200006d0 	.word	0x200006d0
 800344c:	200006d8 	.word	0x200006d8
 8003450:	20000000 	.word	0x20000000
 8003454:	200006fc 	.word	0x200006fc
 8003458:	08010cc8 	.word	0x08010cc8
 800345c:	2000066c 	.word	0x2000066c
 8003460:	20000624 	.word	0x20000624
 8003464:	200006f8 	.word	0x200006f8
 8003468:	08010cdc 	.word	0x08010cdc
 800346c:	200006f0 	.word	0x200006f0
 8003470:	08010cf8 	.word	0x08010cf8
 8003474:	08010d14 	.word	0x08010d14
 8003478:	200006f4 	.word	0x200006f4
 800347c:	2300      	movs	r3, #0
										   My_Color_Sensor->readBlueLight(blue_light);
 800347e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


							if (success) {
 8003482:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003486:	2b00      	cmp	r3, #0
 8003488:	d017      	beq.n	80034ba <main+0x782>
								int string_length = sprintf(my_message, "Ambient: %u, Red: %u, Green: %u, Blue: %u\r\n", ambient_light, red_light, green_light, blue_light);
 800348a:	8bfb      	ldrh	r3, [r7, #30]
 800348c:	4619      	mov	r1, r3
 800348e:	8bbb      	ldrh	r3, [r7, #28]
 8003490:	4618      	mov	r0, r3
 8003492:	8b7b      	ldrh	r3, [r7, #26]
 8003494:	8b3a      	ldrh	r2, [r7, #24]
 8003496:	9201      	str	r2, [sp, #4]
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	4603      	mov	r3, r0
 800349c:	460a      	mov	r2, r1
 800349e:	4936      	ldr	r1, [pc, #216]	@ (8003578 <main+0x840>)
 80034a0:	4836      	ldr	r0, [pc, #216]	@ (800357c <main+0x844>)
 80034a2:	f00b fb89 	bl	800ebb8 <siprintf>
 80034a6:	6278      	str	r0, [r7, #36]	@ 0x24
								HAL_UART_Transmit(&huart2, (uint8_t *)my_message, string_length, HAL_MAX_DELAY);
 80034a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	f04f 33ff 	mov.w	r3, #4294967295
 80034b0:	4932      	ldr	r1, [pc, #200]	@ (800357c <main+0x844>)
 80034b2:	4833      	ldr	r0, [pc, #204]	@ (8003580 <main+0x848>)
 80034b4:	f005 f9e0 	bl	8008878 <HAL_UART_Transmit>
 80034b8:	e00c      	b.n	80034d4 <main+0x79c>
							} else {
								int string_length = sprintf(my_message, "Error reading light values!\r\n");
 80034ba:	4932      	ldr	r1, [pc, #200]	@ (8003584 <main+0x84c>)
 80034bc:	482f      	ldr	r0, [pc, #188]	@ (800357c <main+0x844>)
 80034be:	f00b fb7b 	bl	800ebb8 <siprintf>
 80034c2:	62b8      	str	r0, [r7, #40]	@ 0x28
								HAL_UART_Transmit(&huart2, (uint8_t *)my_message, string_length, HAL_MAX_DELAY);
 80034c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	f04f 33ff 	mov.w	r3, #4294967295
 80034cc:	492b      	ldr	r1, [pc, #172]	@ (800357c <main+0x844>)
 80034ce:	482c      	ldr	r0, [pc, #176]	@ (8003580 <main+0x848>)
 80034d0:	f005 f9d2 	bl	8008878 <HAL_UART_Transmit>
							}

						  // Update the color of the block
						  My_Block->update_color(red_light >= 100);
 80034d4:	4b2c      	ldr	r3, [pc, #176]	@ (8003588 <main+0x850>)
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	8bbb      	ldrh	r3, [r7, #28]
 80034da:	2b63      	cmp	r3, #99	@ 0x63
 80034dc:	bf8c      	ite	hi
 80034de:	2301      	movhi	r3, #1
 80034e0:	2300      	movls	r3, #0
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	4619      	mov	r1, r3
 80034e6:	4610      	mov	r0, r2
 80034e8:	f7fd fd7a 	bl	8000fe0 <_ZN12ColoredBlock12update_colorEb>

						  // Read for new block
						  ready_for_new_block = true;
 80034ec:	2301      	movs	r3, #1
 80034ee:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e

						  // Servo Position
						  if (red_light >= 100)
 80034f2:	8bbb      	ldrh	r3, [r7, #28]
 80034f4:	2b63      	cmp	r3, #99	@ 0x63
 80034f6:	d907      	bls.n	8003508 <main+0x7d0>
						  {
							  My_Servo->set_position(-35);
 80034f8:	4b24      	ldr	r3, [pc, #144]	@ (800358c <main+0x854>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f06f 0122 	mvn.w	r1, #34	@ 0x22
 8003500:	4618      	mov	r0, r3
 8003502:	f7fe f90f 	bl	8001724 <_ZN11PololuServo12set_positionEs>
 8003506:	e005      	b.n	8003514 <main+0x7dc>
						  }
						  else
						  {
							  My_Servo->set_position(40);
 8003508:	4b20      	ldr	r3, [pc, #128]	@ (800358c <main+0x854>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2128      	movs	r1, #40	@ 0x28
 800350e:	4618      	mov	r0, r3
 8003510:	f7fe f908 	bl	8001724 <_ZN11PololuServo12set_positionEs>
						  }

						  // Delete object
						  delete My_Block;
 8003514:	4b1c      	ldr	r3, [pc, #112]	@ (8003588 <main+0x850>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d004      	beq.n	8003526 <main+0x7ee>
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	3204      	adds	r2, #4
 8003520:	6812      	ldr	r2, [r2, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	4790      	blx	r2
					  }
				  }
			  }

			 // State changes
			 task = 5;
 8003526:	2305      	movs	r3, #5
 8003528:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			 break;
 800352c:	e023      	b.n	8003576 <main+0x83e>

		  case 5: // Debug messages
			  if (current_tick - last_tick_state[5] >= task_periods[5])
 800352e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003538:	8952      	ldrh	r2, [r2, #10]
 800353a:	4293      	cmp	r3, r2
 800353c:	d313      	bcc.n	8003566 <main+0x82e>
			  {
				  last_tick_state[5] = current_tick;
 800353e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003540:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003542:	615a      	str	r2, [r3, #20]
					//	  			  int string_length = sprintf(my_message, "Channel value: %i/%i.\r\n",ThrottleChannel->value,ThrottleChannel->rescale_forward_magnitude);
					//	  			  HAL_UART_Transmit(&huart2, (uint8_t *)my_message, string_length, HAL_MAX_DELAY);


				  // Is a block within range?
				  if (range_reading < block_range_mm)
 8003544:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8003548:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800354c:	429a      	cmp	r2, r3
 800354e:	d20a      	bcs.n	8003566 <main+0x82e>
				  {
					  sprintf(my_message, "A block is within range\r\n");
 8003550:	490f      	ldr	r1, [pc, #60]	@ (8003590 <main+0x858>)
 8003552:	480a      	ldr	r0, [pc, #40]	@ (800357c <main+0x844>)
 8003554:	f00b fb30 	bl	800ebb8 <siprintf>
					  HAL_UART_Transmit(&huart2, (uint8_t*)my_message, MESSAGE_LENGTH, HAL_MAX_DELAY);
 8003558:	f04f 33ff 	mov.w	r3, #4294967295
 800355c:	2264      	movs	r2, #100	@ 0x64
 800355e:	4907      	ldr	r1, [pc, #28]	@ (800357c <main+0x844>)
 8003560:	4807      	ldr	r0, [pc, #28]	@ (8003580 <main+0x848>)
 8003562:	f005 f989 	bl	8008878 <HAL_UART_Transmit>
				  }
			  }

			  // State change
			  task = 1;
 8003566:	2301      	movs	r3, #1
 8003568:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			  break;
 800356c:	e003      	b.n	8003576 <main+0x83e>

		  default:
			  task = 0;
 800356e:	2300      	movs	r3, #0
 8003570:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			  break;
 8003574:	bf00      	nop
	  }
	}
 8003576:	e604      	b.n	8003182 <main+0x44a>
 8003578:	08010d38 	.word	0x08010d38
 800357c:	2000066c 	.word	0x2000066c
 8003580:	20000624 	.word	0x20000624
 8003584:	08010d64 	.word	0x08010d64
 8003588:	200006f8 	.word	0x200006f8
 800358c:	200006ec 	.word	0x200006ec
 8003590:	08010d84 	.word	0x08010d84

08003594 <_Z18SystemClock_Configv>:
	/**
	* @brief System Clock Configuration
	* @retval None
	*/
	void SystemClock_Config(void)
	{
 8003594:	b580      	push	{r7, lr}
 8003596:	b094      	sub	sp, #80	@ 0x50
 8003598:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800359a:	f107 0320 	add.w	r3, r7, #32
 800359e:	2230      	movs	r2, #48	@ 0x30
 80035a0:	2100      	movs	r1, #0
 80035a2:	4618      	mov	r0, r3
 80035a4:	f00b fb6b 	bl	800ec7e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035a8:	f107 030c 	add.w	r3, r7, #12
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	605a      	str	r2, [r3, #4]
 80035b2:	609a      	str	r2, [r3, #8]
 80035b4:	60da      	str	r2, [r3, #12]
 80035b6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 80035b8:	2300      	movs	r3, #0
 80035ba:	60bb      	str	r3, [r7, #8]
 80035bc:	4b2c      	ldr	r3, [pc, #176]	@ (8003670 <_Z18SystemClock_Configv+0xdc>)
 80035be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c0:	4a2b      	ldr	r2, [pc, #172]	@ (8003670 <_Z18SystemClock_Configv+0xdc>)
 80035c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80035c8:	4b29      	ldr	r3, [pc, #164]	@ (8003670 <_Z18SystemClock_Configv+0xdc>)
 80035ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035d4:	2300      	movs	r3, #0
 80035d6:	607b      	str	r3, [r7, #4]
 80035d8:	4b26      	ldr	r3, [pc, #152]	@ (8003674 <_Z18SystemClock_Configv+0xe0>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a25      	ldr	r2, [pc, #148]	@ (8003674 <_Z18SystemClock_Configv+0xe0>)
 80035de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80035e2:	6013      	str	r3, [r2, #0]
 80035e4:	4b23      	ldr	r3, [pc, #140]	@ (8003674 <_Z18SystemClock_Configv+0xe0>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80035ec:	607b      	str	r3, [r7, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80035f0:	2302      	movs	r3, #2
 80035f2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80035f4:	2301      	movs	r3, #1
 80035f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80035f8:	2310      	movs	r3, #16
 80035fa:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035fc:	2302      	movs	r3, #2
 80035fe:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003600:	2300      	movs	r3, #0
 8003602:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8003604:	2308      	movs	r3, #8
 8003606:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8003608:	2364      	movs	r3, #100	@ 0x64
 800360a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800360c:	2302      	movs	r3, #2
 800360e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8003610:	2304      	movs	r3, #4
 8003612:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003614:	f107 0320 	add.w	r3, r7, #32
 8003618:	4618      	mov	r0, r3
 800361a:	f002 fd7f 	bl	800611c <HAL_RCC_OscConfig>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	bf14      	ite	ne
 8003624:	2301      	movne	r3, #1
 8003626:	2300      	moveq	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <_Z18SystemClock_Configv+0x9e>
	{
	Error_Handler();
 800362e:	f000 fb73 	bl	8003d18 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003632:	230f      	movs	r3, #15
 8003634:	60fb      	str	r3, [r7, #12]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003636:	2302      	movs	r3, #2
 8003638:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800363a:	2300      	movs	r3, #0
 800363c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800363e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003642:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003644:	2300      	movs	r3, #0
 8003646:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8003648:	f107 030c 	add.w	r3, r7, #12
 800364c:	2103      	movs	r1, #3
 800364e:	4618      	mov	r0, r3
 8003650:	f002 ffdc 	bl	800660c <HAL_RCC_ClockConfig>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	bf14      	ite	ne
 800365a:	2301      	movne	r3, #1
 800365c:	2300      	moveq	r3, #0
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	d001      	beq.n	8003668 <_Z18SystemClock_Configv+0xd4>
	{
	Error_Handler();
 8003664:	f000 fb58 	bl	8003d18 <Error_Handler>
	}
	}
 8003668:	bf00      	nop
 800366a:	3750      	adds	r7, #80	@ 0x50
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40023800 	.word	0x40023800
 8003674:	40007000 	.word	0x40007000

08003678 <_ZL12MX_I2C1_Initv>:
	* @brief I2C1 Initialization Function
	* @param None
	* @retval None
	*/
	static void MX_I2C1_Init(void)
	{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800367c:	4b15      	ldr	r3, [pc, #84]	@ (80036d4 <_ZL12MX_I2C1_Initv+0x5c>)
 800367e:	4a16      	ldr	r2, [pc, #88]	@ (80036d8 <_ZL12MX_I2C1_Initv+0x60>)
 8003680:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8003682:	4b14      	ldr	r3, [pc, #80]	@ (80036d4 <_ZL12MX_I2C1_Initv+0x5c>)
 8003684:	4a15      	ldr	r2, [pc, #84]	@ (80036dc <_ZL12MX_I2C1_Initv+0x64>)
 8003686:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003688:	4b12      	ldr	r3, [pc, #72]	@ (80036d4 <_ZL12MX_I2C1_Initv+0x5c>)
 800368a:	2200      	movs	r2, #0
 800368c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800368e:	4b11      	ldr	r3, [pc, #68]	@ (80036d4 <_ZL12MX_I2C1_Initv+0x5c>)
 8003690:	2200      	movs	r2, #0
 8003692:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003694:	4b0f      	ldr	r3, [pc, #60]	@ (80036d4 <_ZL12MX_I2C1_Initv+0x5c>)
 8003696:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800369a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800369c:	4b0d      	ldr	r3, [pc, #52]	@ (80036d4 <_ZL12MX_I2C1_Initv+0x5c>)
 800369e:	2200      	movs	r2, #0
 80036a0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80036a2:	4b0c      	ldr	r3, [pc, #48]	@ (80036d4 <_ZL12MX_I2C1_Initv+0x5c>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80036a8:	4b0a      	ldr	r3, [pc, #40]	@ (80036d4 <_ZL12MX_I2C1_Initv+0x5c>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036ae:	4b09      	ldr	r3, [pc, #36]	@ (80036d4 <_ZL12MX_I2C1_Initv+0x5c>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80036b4:	4807      	ldr	r0, [pc, #28]	@ (80036d4 <_ZL12MX_I2C1_Initv+0x5c>)
 80036b6:	f001 fa1d 	bl	8004af4 <HAL_I2C_Init>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	bf14      	ite	ne
 80036c0:	2301      	movne	r3, #1
 80036c2:	2300      	moveq	r3, #0
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <_ZL12MX_I2C1_Initv+0x56>
	{
	Error_Handler();
 80036ca:	f000 fb25 	bl	8003d18 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

	}
 80036ce:	bf00      	nop
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	200004b0 	.word	0x200004b0
 80036d8:	40005400 	.word	0x40005400
 80036dc:	000186a0 	.word	0x000186a0

080036e0 <_ZL12MX_TIM1_Initv>:
	* @brief TIM1 Initialization Function
	* @param None
	* @retval None
	*/
	static void MX_TIM1_Init(void)
	{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08a      	sub	sp, #40	@ 0x28
 80036e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036e6:	f107 0318 	add.w	r3, r7, #24
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	605a      	str	r2, [r3, #4]
 80036f0:	609a      	str	r2, [r3, #8]
 80036f2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036f4:	f107 0310 	add.w	r3, r7, #16
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 80036fe:	463b      	mov	r3, r7
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]
 8003704:	605a      	str	r2, [r3, #4]
 8003706:	609a      	str	r2, [r3, #8]
 8003708:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800370a:	4b41      	ldr	r3, [pc, #260]	@ (8003810 <_ZL12MX_TIM1_Initv+0x130>)
 800370c:	4a41      	ldr	r2, [pc, #260]	@ (8003814 <_ZL12MX_TIM1_Initv+0x134>)
 800370e:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 100-1;
 8003710:	4b3f      	ldr	r3, [pc, #252]	@ (8003810 <_ZL12MX_TIM1_Initv+0x130>)
 8003712:	2263      	movs	r2, #99	@ 0x63
 8003714:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003716:	4b3e      	ldr	r3, [pc, #248]	@ (8003810 <_ZL12MX_TIM1_Initv+0x130>)
 8003718:	2200      	movs	r2, #0
 800371a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 800371c:	4b3c      	ldr	r3, [pc, #240]	@ (8003810 <_ZL12MX_TIM1_Initv+0x130>)
 800371e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003722:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003724:	4b3a      	ldr	r3, [pc, #232]	@ (8003810 <_ZL12MX_TIM1_Initv+0x130>)
 8003726:	2200      	movs	r2, #0
 8003728:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800372a:	4b39      	ldr	r3, [pc, #228]	@ (8003810 <_ZL12MX_TIM1_Initv+0x130>)
 800372c:	2200      	movs	r2, #0
 800372e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003730:	4b37      	ldr	r3, [pc, #220]	@ (8003810 <_ZL12MX_TIM1_Initv+0x130>)
 8003732:	2200      	movs	r2, #0
 8003734:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003736:	4836      	ldr	r0, [pc, #216]	@ (8003810 <_ZL12MX_TIM1_Initv+0x130>)
 8003738:	f003 f948 	bl	80069cc <HAL_TIM_Base_Init>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	bf14      	ite	ne
 8003742:	2301      	movne	r3, #1
 8003744:	2300      	moveq	r3, #0
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <_ZL12MX_TIM1_Initv+0x70>
	{
	Error_Handler();
 800374c:	f000 fae4 	bl	8003d18 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003750:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003754:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003756:	f107 0318 	add.w	r3, r7, #24
 800375a:	4619      	mov	r1, r3
 800375c:	482c      	ldr	r0, [pc, #176]	@ (8003810 <_ZL12MX_TIM1_Initv+0x130>)
 800375e:	f004 fa8f 	bl	8007c80 <HAL_TIM_ConfigClockSource>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	bf14      	ite	ne
 8003768:	2301      	movne	r3, #1
 800376a:	2300      	moveq	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <_ZL12MX_TIM1_Initv+0x96>
	{
	Error_Handler();
 8003772:	f000 fad1 	bl	8003d18 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8003776:	4826      	ldr	r0, [pc, #152]	@ (8003810 <_ZL12MX_TIM1_Initv+0x130>)
 8003778:	f003 fae4 	bl	8006d44 <HAL_TIM_IC_Init>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	bf14      	ite	ne
 8003782:	2301      	movne	r3, #1
 8003784:	2300      	moveq	r3, #0
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d001      	beq.n	8003790 <_ZL12MX_TIM1_Initv+0xb0>
	{
	Error_Handler();
 800378c:	f000 fac4 	bl	8003d18 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003790:	2300      	movs	r3, #0
 8003792:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003794:	2300      	movs	r3, #0
 8003796:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003798:	f107 0310 	add.w	r3, r7, #16
 800379c:	4619      	mov	r1, r3
 800379e:	481c      	ldr	r0, [pc, #112]	@ (8003810 <_ZL12MX_TIM1_Initv+0x130>)
 80037a0:	f004 ff98 	bl	80086d4 <HAL_TIMEx_MasterConfigSynchronization>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	bf14      	ite	ne
 80037aa:	2301      	movne	r3, #1
 80037ac:	2300      	moveq	r3, #0
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <_ZL12MX_TIM1_Initv+0xd8>
	{
	Error_Handler();
 80037b4:	f000 fab0 	bl	8003d18 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80037b8:	230a      	movs	r3, #10
 80037ba:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80037bc:	2301      	movs	r3, #1
 80037be:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80037c0:	2300      	movs	r3, #0
 80037c2:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 80037c4:	2300      	movs	r3, #0
 80037c6:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80037c8:	463b      	mov	r3, r7
 80037ca:	2200      	movs	r2, #0
 80037cc:	4619      	mov	r1, r3
 80037ce:	4810      	ldr	r0, [pc, #64]	@ (8003810 <_ZL12MX_TIM1_Initv+0x130>)
 80037d0:	f004 f8f8 	bl	80079c4 <HAL_TIM_IC_ConfigChannel>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	bf14      	ite	ne
 80037da:	2301      	movne	r3, #1
 80037dc:	2300      	moveq	r3, #0
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <_ZL12MX_TIM1_Initv+0x108>
	{
	Error_Handler();
 80037e4:	f000 fa98 	bl	8003d18 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80037e8:	463b      	mov	r3, r7
 80037ea:	2204      	movs	r2, #4
 80037ec:	4619      	mov	r1, r3
 80037ee:	4808      	ldr	r0, [pc, #32]	@ (8003810 <_ZL12MX_TIM1_Initv+0x130>)
 80037f0:	f004 f8e8 	bl	80079c4 <HAL_TIM_IC_ConfigChannel>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	bf14      	ite	ne
 80037fa:	2301      	movne	r3, #1
 80037fc:	2300      	moveq	r3, #0
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <_ZL12MX_TIM1_Initv+0x128>
	{
	Error_Handler();
 8003804:	f000 fa88 	bl	8003d18 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

	}
 8003808:	bf00      	nop
 800380a:	3728      	adds	r7, #40	@ 0x28
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	20000504 	.word	0x20000504
 8003814:	40010000 	.word	0x40010000

08003818 <_ZL12MX_TIM2_Initv>:
	* @brief TIM2 Initialization Function
	* @param None
	* @retval None
	*/
	static void MX_TIM2_Init(void)
	{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08e      	sub	sp, #56	@ 0x38
 800381c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800381e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	605a      	str	r2, [r3, #4]
 8003828:	609a      	str	r2, [r3, #8]
 800382a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800382c:	f107 0320 	add.w	r3, r7, #32
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8003836:	1d3b      	adds	r3, r7, #4
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	605a      	str	r2, [r3, #4]
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	60da      	str	r2, [r3, #12]
 8003842:	611a      	str	r2, [r3, #16]
 8003844:	615a      	str	r2, [r3, #20]
 8003846:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003848:	4b39      	ldr	r3, [pc, #228]	@ (8003930 <_ZL12MX_TIM2_Initv+0x118>)
 800384a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800384e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8003850:	4b37      	ldr	r3, [pc, #220]	@ (8003930 <_ZL12MX_TIM2_Initv+0x118>)
 8003852:	2200      	movs	r2, #0
 8003854:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003856:	4b36      	ldr	r3, [pc, #216]	@ (8003930 <_ZL12MX_TIM2_Initv+0x118>)
 8003858:	2200      	movs	r2, #0
 800385a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 5000-1;
 800385c:	4b34      	ldr	r3, [pc, #208]	@ (8003930 <_ZL12MX_TIM2_Initv+0x118>)
 800385e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003862:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003864:	4b32      	ldr	r3, [pc, #200]	@ (8003930 <_ZL12MX_TIM2_Initv+0x118>)
 8003866:	2200      	movs	r2, #0
 8003868:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800386a:	4b31      	ldr	r3, [pc, #196]	@ (8003930 <_ZL12MX_TIM2_Initv+0x118>)
 800386c:	2200      	movs	r2, #0
 800386e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003870:	482f      	ldr	r0, [pc, #188]	@ (8003930 <_ZL12MX_TIM2_Initv+0x118>)
 8003872:	f003 f8ab 	bl	80069cc <HAL_TIM_Base_Init>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	bf14      	ite	ne
 800387c:	2301      	movne	r3, #1
 800387e:	2300      	moveq	r3, #0
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <_ZL12MX_TIM2_Initv+0x72>
	{
	Error_Handler();
 8003886:	f000 fa47 	bl	8003d18 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800388a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800388e:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003890:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003894:	4619      	mov	r1, r3
 8003896:	4826      	ldr	r0, [pc, #152]	@ (8003930 <_ZL12MX_TIM2_Initv+0x118>)
 8003898:	f004 f9f2 	bl	8007c80 <HAL_TIM_ConfigClockSource>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	bf14      	ite	ne
 80038a2:	2301      	movne	r3, #1
 80038a4:	2300      	moveq	r3, #0
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <_ZL12MX_TIM2_Initv+0x98>
	{
	Error_Handler();
 80038ac:	f000 fa34 	bl	8003d18 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80038b0:	481f      	ldr	r0, [pc, #124]	@ (8003930 <_ZL12MX_TIM2_Initv+0x118>)
 80038b2:	f003 f8da 	bl	8006a6a <HAL_TIM_PWM_Init>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	bf14      	ite	ne
 80038bc:	2301      	movne	r3, #1
 80038be:	2300      	moveq	r3, #0
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <_ZL12MX_TIM2_Initv+0xb2>
	{
	Error_Handler();
 80038c6:	f000 fa27 	bl	8003d18 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038ca:	2300      	movs	r3, #0
 80038cc:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038ce:	2300      	movs	r3, #0
 80038d0:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038d2:	f107 0320 	add.w	r3, r7, #32
 80038d6:	4619      	mov	r1, r3
 80038d8:	4815      	ldr	r0, [pc, #84]	@ (8003930 <_ZL12MX_TIM2_Initv+0x118>)
 80038da:	f004 fefb 	bl	80086d4 <HAL_TIMEx_MasterConfigSynchronization>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	bf14      	ite	ne
 80038e4:	2301      	movne	r3, #1
 80038e6:	2300      	moveq	r3, #0
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <_ZL12MX_TIM2_Initv+0xda>
	{
	Error_Handler();
 80038ee:	f000 fa13 	bl	8003d18 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038f2:	2360      	movs	r3, #96	@ 0x60
 80038f4:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80038f6:	2300      	movs	r3, #0
 80038f8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038fa:	2300      	movs	r3, #0
 80038fc:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038fe:	2300      	movs	r3, #0
 8003900:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003902:	1d3b      	adds	r3, r7, #4
 8003904:	2200      	movs	r2, #0
 8003906:	4619      	mov	r1, r3
 8003908:	4809      	ldr	r0, [pc, #36]	@ (8003930 <_ZL12MX_TIM2_Initv+0x118>)
 800390a:	f004 f8f7 	bl	8007afc <HAL_TIM_PWM_ConfigChannel>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	bf14      	ite	ne
 8003914:	2301      	movne	r3, #1
 8003916:	2300      	moveq	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <_ZL12MX_TIM2_Initv+0x10a>
	{
	Error_Handler();
 800391e:	f000 f9fb 	bl	8003d18 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8003922:	4803      	ldr	r0, [pc, #12]	@ (8003930 <_ZL12MX_TIM2_Initv+0x118>)
 8003924:	f000 fb50 	bl	8003fc8 <HAL_TIM_MspPostInit>

	}
 8003928:	bf00      	nop
 800392a:	3738      	adds	r7, #56	@ 0x38
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	2000054c 	.word	0x2000054c

08003934 <_ZL12MX_TIM3_Initv>:
	* @brief TIM3 Initialization Function
	* @param None
	* @retval None
	*/
	static void MX_TIM3_Init(void)
	{
 8003934:	b580      	push	{r7, lr}
 8003936:	b08e      	sub	sp, #56	@ 0x38
 8003938:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800393a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	605a      	str	r2, [r3, #4]
 8003944:	609a      	str	r2, [r3, #8]
 8003946:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003948:	f107 0320 	add.w	r3, r7, #32
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8003952:	1d3b      	adds	r3, r7, #4
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	605a      	str	r2, [r3, #4]
 800395a:	609a      	str	r2, [r3, #8]
 800395c:	60da      	str	r2, [r3, #12]
 800395e:	611a      	str	r2, [r3, #16]
 8003960:	615a      	str	r2, [r3, #20]
 8003962:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8003964:	4b41      	ldr	r3, [pc, #260]	@ (8003a6c <_ZL12MX_TIM3_Initv+0x138>)
 8003966:	4a42      	ldr	r2, [pc, #264]	@ (8003a70 <_ZL12MX_TIM3_Initv+0x13c>)
 8003968:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800396a:	4b40      	ldr	r3, [pc, #256]	@ (8003a6c <_ZL12MX_TIM3_Initv+0x138>)
 800396c:	2200      	movs	r2, #0
 800396e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003970:	4b3e      	ldr	r3, [pc, #248]	@ (8003a6c <_ZL12MX_TIM3_Initv+0x138>)
 8003972:	2200      	movs	r2, #0
 8003974:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 5000-1;
 8003976:	4b3d      	ldr	r3, [pc, #244]	@ (8003a6c <_ZL12MX_TIM3_Initv+0x138>)
 8003978:	f241 3287 	movw	r2, #4999	@ 0x1387
 800397c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800397e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a6c <_ZL12MX_TIM3_Initv+0x138>)
 8003980:	2200      	movs	r2, #0
 8003982:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003984:	4b39      	ldr	r3, [pc, #228]	@ (8003a6c <_ZL12MX_TIM3_Initv+0x138>)
 8003986:	2200      	movs	r2, #0
 8003988:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800398a:	4838      	ldr	r0, [pc, #224]	@ (8003a6c <_ZL12MX_TIM3_Initv+0x138>)
 800398c:	f003 f81e 	bl	80069cc <HAL_TIM_Base_Init>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	bf14      	ite	ne
 8003996:	2301      	movne	r3, #1
 8003998:	2300      	moveq	r3, #0
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <_ZL12MX_TIM3_Initv+0x70>
	{
	Error_Handler();
 80039a0:	f000 f9ba 	bl	8003d18 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039a8:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80039aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80039ae:	4619      	mov	r1, r3
 80039b0:	482e      	ldr	r0, [pc, #184]	@ (8003a6c <_ZL12MX_TIM3_Initv+0x138>)
 80039b2:	f004 f965 	bl	8007c80 <HAL_TIM_ConfigClockSource>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bf14      	ite	ne
 80039bc:	2301      	movne	r3, #1
 80039be:	2300      	moveq	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <_ZL12MX_TIM3_Initv+0x96>
	{
	Error_Handler();
 80039c6:	f000 f9a7 	bl	8003d18 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80039ca:	4828      	ldr	r0, [pc, #160]	@ (8003a6c <_ZL12MX_TIM3_Initv+0x138>)
 80039cc:	f003 f84d 	bl	8006a6a <HAL_TIM_PWM_Init>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	bf14      	ite	ne
 80039d6:	2301      	movne	r3, #1
 80039d8:	2300      	moveq	r3, #0
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <_ZL12MX_TIM3_Initv+0xb0>
	{
	Error_Handler();
 80039e0:	f000 f99a 	bl	8003d18 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039e4:	2300      	movs	r3, #0
 80039e6:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039e8:	2300      	movs	r3, #0
 80039ea:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80039ec:	f107 0320 	add.w	r3, r7, #32
 80039f0:	4619      	mov	r1, r3
 80039f2:	481e      	ldr	r0, [pc, #120]	@ (8003a6c <_ZL12MX_TIM3_Initv+0x138>)
 80039f4:	f004 fe6e 	bl	80086d4 <HAL_TIMEx_MasterConfigSynchronization>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	bf14      	ite	ne
 80039fe:	2301      	movne	r3, #1
 8003a00:	2300      	moveq	r3, #0
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <_ZL12MX_TIM3_Initv+0xd8>
	{
	Error_Handler();
 8003a08:	f000 f986 	bl	8003d18 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a0c:	2360      	movs	r3, #96	@ 0x60
 8003a0e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a14:	2300      	movs	r3, #0
 8003a16:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a1c:	1d3b      	adds	r3, r7, #4
 8003a1e:	2200      	movs	r2, #0
 8003a20:	4619      	mov	r1, r3
 8003a22:	4812      	ldr	r0, [pc, #72]	@ (8003a6c <_ZL12MX_TIM3_Initv+0x138>)
 8003a24:	f004 f86a 	bl	8007afc <HAL_TIM_PWM_ConfigChannel>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	bf14      	ite	ne
 8003a2e:	2301      	movne	r3, #1
 8003a30:	2300      	moveq	r3, #0
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <_ZL12MX_TIM3_Initv+0x108>
	{
	Error_Handler();
 8003a38:	f000 f96e 	bl	8003d18 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a3c:	1d3b      	adds	r3, r7, #4
 8003a3e:	2204      	movs	r2, #4
 8003a40:	4619      	mov	r1, r3
 8003a42:	480a      	ldr	r0, [pc, #40]	@ (8003a6c <_ZL12MX_TIM3_Initv+0x138>)
 8003a44:	f004 f85a 	bl	8007afc <HAL_TIM_PWM_ConfigChannel>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	bf14      	ite	ne
 8003a4e:	2301      	movne	r3, #1
 8003a50:	2300      	moveq	r3, #0
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <_ZL12MX_TIM3_Initv+0x128>
	{
	Error_Handler();
 8003a58:	f000 f95e 	bl	8003d18 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8003a5c:	4803      	ldr	r0, [pc, #12]	@ (8003a6c <_ZL12MX_TIM3_Initv+0x138>)
 8003a5e:	f000 fab3 	bl	8003fc8 <HAL_TIM_MspPostInit>

	}
 8003a62:	bf00      	nop
 8003a64:	3738      	adds	r7, #56	@ 0x38
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20000594 	.word	0x20000594
 8003a70:	40000400 	.word	0x40000400

08003a74 <_ZL12MX_TIM5_Initv>:
	* @brief TIM5 Initialization Function
	* @param None
	* @retval None
	*/
	static void MX_TIM5_Init(void)
	{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b08c      	sub	sp, #48	@ 0x30
 8003a78:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8003a7a:	f107 030c 	add.w	r3, r7, #12
 8003a7e:	2224      	movs	r2, #36	@ 0x24
 8003a80:	2100      	movs	r1, #0
 8003a82:	4618      	mov	r0, r3
 8003a84:	f00b f8fb 	bl	800ec7e <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a88:	1d3b      	adds	r3, r7, #4
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8003a90:	4b25      	ldr	r3, [pc, #148]	@ (8003b28 <_ZL12MX_TIM5_Initv+0xb4>)
 8003a92:	4a26      	ldr	r2, [pc, #152]	@ (8003b2c <_ZL12MX_TIM5_Initv+0xb8>)
 8003a94:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8003a96:	4b24      	ldr	r3, [pc, #144]	@ (8003b28 <_ZL12MX_TIM5_Initv+0xb4>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a9c:	4b22      	ldr	r3, [pc, #136]	@ (8003b28 <_ZL12MX_TIM5_Initv+0xb4>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 4294967295;
 8003aa2:	4b21      	ldr	r3, [pc, #132]	@ (8003b28 <_ZL12MX_TIM5_Initv+0xb4>)
 8003aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8003aa8:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8003b28 <_ZL12MX_TIM5_Initv+0xb4>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8003b28 <_ZL12MX_TIM5_Initv+0xb4>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003aba:	2300      	movs	r3, #0
 8003abc:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003aca:	2300      	movs	r3, #0
 8003acc:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003ada:	f107 030c 	add.w	r3, r7, #12
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4811      	ldr	r0, [pc, #68]	@ (8003b28 <_ZL12MX_TIM5_Initv+0xb4>)
 8003ae2:	f003 fb51 	bl	8007188 <HAL_TIM_Encoder_Init>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	bf14      	ite	ne
 8003aec:	2301      	movne	r3, #1
 8003aee:	2300      	moveq	r3, #0
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <_ZL12MX_TIM5_Initv+0x86>
	{
	Error_Handler();
 8003af6:	f000 f90f 	bl	8003d18 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003afa:	2300      	movs	r3, #0
 8003afc:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003afe:	2300      	movs	r3, #0
 8003b00:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003b02:	1d3b      	adds	r3, r7, #4
 8003b04:	4619      	mov	r1, r3
 8003b06:	4808      	ldr	r0, [pc, #32]	@ (8003b28 <_ZL12MX_TIM5_Initv+0xb4>)
 8003b08:	f004 fde4 	bl	80086d4 <HAL_TIMEx_MasterConfigSynchronization>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	bf14      	ite	ne
 8003b12:	2301      	movne	r3, #1
 8003b14:	2300      	moveq	r3, #0
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <_ZL12MX_TIM5_Initv+0xac>
	{
	Error_Handler();
 8003b1c:	f000 f8fc 	bl	8003d18 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

	}
 8003b20:	bf00      	nop
 8003b22:	3730      	adds	r7, #48	@ 0x30
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	200005dc 	.word	0x200005dc
 8003b2c:	40000c00 	.word	0x40000c00

08003b30 <_ZL19MX_USART2_UART_Initv>:
	* @brief USART2 Initialization Function
	* @param None
	* @retval None
	*/
	static void MX_USART2_UART_Init(void)
	{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8003b34:	4b13      	ldr	r3, [pc, #76]	@ (8003b84 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003b36:	4a14      	ldr	r2, [pc, #80]	@ (8003b88 <_ZL19MX_USART2_UART_Initv+0x58>)
 8003b38:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8003b3a:	4b12      	ldr	r3, [pc, #72]	@ (8003b84 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003b3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003b40:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b42:	4b10      	ldr	r3, [pc, #64]	@ (8003b84 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003b48:	4b0e      	ldr	r3, [pc, #56]	@ (8003b84 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8003b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b84 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003b54:	4b0b      	ldr	r3, [pc, #44]	@ (8003b84 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003b56:	220c      	movs	r2, #12
 8003b58:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b84 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b60:	4b08      	ldr	r3, [pc, #32]	@ (8003b84 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b66:	4807      	ldr	r0, [pc, #28]	@ (8003b84 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003b68:	f004 fe36 	bl	80087d8 <HAL_UART_Init>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	bf14      	ite	ne
 8003b72:	2301      	movne	r3, #1
 8003b74:	2300      	moveq	r3, #0
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <_ZL19MX_USART2_UART_Initv+0x50>
	{
	Error_Handler();
 8003b7c:	f000 f8cc 	bl	8003d18 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

	}
 8003b80:	bf00      	nop
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	20000624 	.word	0x20000624
 8003b88:	40004400 	.word	0x40004400

08003b8c <_ZL12MX_GPIO_Initv>:
	* @brief GPIO Initialization Function
	* @param None
	* @retval None
	*/
	static void MX_GPIO_Init(void)
	{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b088      	sub	sp, #32
 8003b90:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b92:	f107 030c 	add.w	r3, r7, #12
 8003b96:	2200      	movs	r2, #0
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	605a      	str	r2, [r3, #4]
 8003b9c:	609a      	str	r2, [r3, #8]
 8003b9e:	60da      	str	r2, [r3, #12]
 8003ba0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	4b24      	ldr	r3, [pc, #144]	@ (8003c38 <_ZL12MX_GPIO_Initv+0xac>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003baa:	4a23      	ldr	r2, [pc, #140]	@ (8003c38 <_ZL12MX_GPIO_Initv+0xac>)
 8003bac:	f043 0301 	orr.w	r3, r3, #1
 8003bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bb2:	4b21      	ldr	r3, [pc, #132]	@ (8003c38 <_ZL12MX_GPIO_Initv+0xac>)
 8003bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	60bb      	str	r3, [r7, #8]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	607b      	str	r3, [r7, #4]
 8003bc2:	4b1d      	ldr	r3, [pc, #116]	@ (8003c38 <_ZL12MX_GPIO_Initv+0xac>)
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc6:	4a1c      	ldr	r2, [pc, #112]	@ (8003c38 <_ZL12MX_GPIO_Initv+0xac>)
 8003bc8:	f043 0302 	orr.w	r3, r3, #2
 8003bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bce:	4b1a      	ldr	r3, [pc, #104]	@ (8003c38 <_ZL12MX_GPIO_Initv+0xac>)
 8003bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	607b      	str	r3, [r7, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f44f 4154 	mov.w	r1, #54272	@ 0xd400
 8003be0:	4816      	ldr	r0, [pc, #88]	@ (8003c3c <_ZL12MX_GPIO_Initv+0xb0>)
 8003be2:	f000 ff49 	bl	8004a78 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PB10 PB12 PB14 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8003be6:	f44f 4354 	mov.w	r3, #54272	@ 0xd400
 8003bea:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bec:	2301      	movs	r3, #1
 8003bee:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bf8:	f107 030c 	add.w	r3, r7, #12
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	480f      	ldr	r0, [pc, #60]	@ (8003c3c <_ZL12MX_GPIO_Initv+0xb0>)
 8003c00:	f000 fd9e 	bl	8004740 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003c04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c08:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c0a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003c0e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c10:	2300      	movs	r3, #0
 8003c12:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c14:	f107 030c 	add.w	r3, r7, #12
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4808      	ldr	r0, [pc, #32]	@ (8003c3c <_ZL12MX_GPIO_Initv+0xb0>)
 8003c1c:	f000 fd90 	bl	8004740 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003c20:	2200      	movs	r2, #0
 8003c22:	2100      	movs	r1, #0
 8003c24:	2028      	movs	r0, #40	@ 0x28
 8003c26:	f000 fd54 	bl	80046d2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003c2a:	2028      	movs	r0, #40	@ 0x28
 8003c2c:	f000 fd6d 	bl	800470a <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8003c30:	bf00      	nop
 8003c32:	3720      	adds	r7, #32
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	40020400 	.word	0x40020400

08003c40 <_ZL12VL53L0X_Initv>:
    HAL_UART_Transmit(&huart2, (uint8_t*) my_message, strlen(my_message), HAL_MAX_DELAY);
    HAL_Delay(1000); // Unnecessary
}

// VL53L0X time-of-flight sensor initialization
static void VL53L0X_Init(void) {
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
	uint32_t refSpadCount;
	uint8_t isApertureSpads;
	uint8_t VhvSettings;
	uint8_t PhaseCal;

	Dev->I2cHandle = &hi2c1;
 8003c46:	4b32      	ldr	r3, [pc, #200]	@ (8003d10 <_ZL12VL53L0X_Initv+0xd0>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a32      	ldr	r2, [pc, #200]	@ (8003d14 <_ZL12VL53L0X_Initv+0xd4>)
 8003c4c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
	Dev->I2cDevAddr = 0x29 << 1;
 8003c50:	4b2f      	ldr	r3, [pc, #188]	@ (8003d10 <_ZL12VL53L0X_Initv+0xd0>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2252      	movs	r2, #82	@ 0x52
 8003c56:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160

	VL53L0X_WaitDeviceBooted(Dev);
 8003c5a:	4b2d      	ldr	r3, [pc, #180]	@ (8003d10 <_ZL12VL53L0X_Initv+0xd0>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f005 fcbe 	bl	80095e0 <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit(Dev);
 8003c64:	4b2a      	ldr	r3, [pc, #168]	@ (8003d10 <_ZL12VL53L0X_Initv+0xd0>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f005 f9d5 	bl	8009018 <VL53L0X_DataInit>
	VL53L0X_StaticInit(Dev);
 8003c6e:	4b28      	ldr	r3, [pc, #160]	@ (8003d10 <_ZL12VL53L0X_Initv+0xd0>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f005 fb34 	bl	80092e0 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8003c78:	4b25      	ldr	r3, [pc, #148]	@ (8003d10 <_ZL12VL53L0X_Initv+0xd0>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	1c7a      	adds	r2, r7, #1
 8003c7e:	1cb9      	adds	r1, r7, #2
 8003c80:	4618      	mov	r0, r3
 8003c82:	f006 f9cb 	bl	800a01c <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8003c86:	4b22      	ldr	r3, [pc, #136]	@ (8003d10 <_ZL12VL53L0X_Initv+0xd0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	1cfa      	adds	r2, r7, #3
 8003c8c:	1d39      	adds	r1, r7, #4
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f006 fe46 	bl	800a920 <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8003c94:	4b1e      	ldr	r3, [pc, #120]	@ (8003d10 <_ZL12VL53L0X_Initv+0xd0>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	2100      	movs	r1, #0
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f005 fd3e 	bl	800971c <VL53L0X_SetDeviceMode>

	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8003ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d10 <_ZL12VL53L0X_Initv+0xd0>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f005 ffb1 	bl	8009c10 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8003cae:	4b18      	ldr	r3, [pc, #96]	@ (8003d10 <_ZL12VL53L0X_Initv+0xd0>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f005 ffaa 	bl	8009c10 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t) (0.1*65536));
 8003cbc:	4b14      	ldr	r3, [pc, #80]	@ (8003d10 <_ZL12VL53L0X_Initv+0xd0>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f641 1299 	movw	r2, #6553	@ 0x1999
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f006 f852 	bl	8009d70 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t) (60*65536));
 8003ccc:	4b10      	ldr	r3, [pc, #64]	@ (8003d10 <_ZL12VL53L0X_Initv+0xd0>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f006 f84a 	bl	8009d70 <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 8003cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8003d10 <_ZL12VL53L0X_Initv+0xd0>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f248 01e8 	movw	r1, #33000	@ 0x80e8
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f005 fd77 	bl	80097d8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8003cea:	4b09      	ldr	r3, [pc, #36]	@ (8003d10 <_ZL12VL53L0X_Initv+0xd0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2212      	movs	r2, #18
 8003cf0:	2100      	movs	r1, #0
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f005 fd96 	bl	8009824 <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8003cf8:	4b05      	ldr	r3, [pc, #20]	@ (8003d10 <_ZL12VL53L0X_Initv+0xd0>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	220e      	movs	r2, #14
 8003cfe:	2101      	movs	r1, #1
 8003d00:	4618      	mov	r0, r3
 8003d02:	f005 fd8f 	bl	8009824 <VL53L0X_SetVcselPulsePeriod>
}
 8003d06:	bf00      	nop
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20000000 	.word	0x20000000
 8003d14:	200004b0 	.word	0x200004b0

08003d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d1c:	b672      	cpsid	i
}
 8003d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d20:	bf00      	nop
 8003d22:	e7fd      	b.n	8003d20 <Error_Handler+0x8>

08003d24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	607b      	str	r3, [r7, #4]
 8003d2e:	4b10      	ldr	r3, [pc, #64]	@ (8003d70 <HAL_MspInit+0x4c>)
 8003d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d32:	4a0f      	ldr	r2, [pc, #60]	@ (8003d70 <HAL_MspInit+0x4c>)
 8003d34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d38:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d70 <HAL_MspInit+0x4c>)
 8003d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d42:	607b      	str	r3, [r7, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	603b      	str	r3, [r7, #0]
 8003d4a:	4b09      	ldr	r3, [pc, #36]	@ (8003d70 <HAL_MspInit+0x4c>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4e:	4a08      	ldr	r2, [pc, #32]	@ (8003d70 <HAL_MspInit+0x4c>)
 8003d50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d54:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d56:	4b06      	ldr	r3, [pc, #24]	@ (8003d70 <HAL_MspInit+0x4c>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d5e:	603b      	str	r3, [r7, #0]
 8003d60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	40023800 	.word	0x40023800

08003d74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08a      	sub	sp, #40	@ 0x28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d7c:	f107 0314 	add.w	r3, r7, #20
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	605a      	str	r2, [r3, #4]
 8003d86:	609a      	str	r2, [r3, #8]
 8003d88:	60da      	str	r2, [r3, #12]
 8003d8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a19      	ldr	r2, [pc, #100]	@ (8003df8 <HAL_I2C_MspInit+0x84>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d12c      	bne.n	8003df0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d96:	2300      	movs	r3, #0
 8003d98:	613b      	str	r3, [r7, #16]
 8003d9a:	4b18      	ldr	r3, [pc, #96]	@ (8003dfc <HAL_I2C_MspInit+0x88>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9e:	4a17      	ldr	r2, [pc, #92]	@ (8003dfc <HAL_I2C_MspInit+0x88>)
 8003da0:	f043 0302 	orr.w	r3, r3, #2
 8003da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003da6:	4b15      	ldr	r3, [pc, #84]	@ (8003dfc <HAL_I2C_MspInit+0x88>)
 8003da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	613b      	str	r3, [r7, #16]
 8003db0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003db2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003db8:	2312      	movs	r3, #18
 8003dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003dc4:	2304      	movs	r3, #4
 8003dc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dc8:	f107 0314 	add.w	r3, r7, #20
 8003dcc:	4619      	mov	r1, r3
 8003dce:	480c      	ldr	r0, [pc, #48]	@ (8003e00 <HAL_I2C_MspInit+0x8c>)
 8003dd0:	f000 fcb6 	bl	8004740 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	4b08      	ldr	r3, [pc, #32]	@ (8003dfc <HAL_I2C_MspInit+0x88>)
 8003dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ddc:	4a07      	ldr	r2, [pc, #28]	@ (8003dfc <HAL_I2C_MspInit+0x88>)
 8003dde:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003de2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003de4:	4b05      	ldr	r3, [pc, #20]	@ (8003dfc <HAL_I2C_MspInit+0x88>)
 8003de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003df0:	bf00      	nop
 8003df2:	3728      	adds	r7, #40	@ 0x28
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40005400 	.word	0x40005400
 8003dfc:	40023800 	.word	0x40023800
 8003e00:	40020400 	.word	0x40020400

08003e04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08c      	sub	sp, #48	@ 0x30
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e0c:	f107 031c 	add.w	r3, r7, #28
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	605a      	str	r2, [r3, #4]
 8003e16:	609a      	str	r2, [r3, #8]
 8003e18:	60da      	str	r2, [r3, #12]
 8003e1a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a3d      	ldr	r2, [pc, #244]	@ (8003f18 <HAL_TIM_Base_MspInit+0x114>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d14d      	bne.n	8003ec2 <HAL_TIM_Base_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e26:	2300      	movs	r3, #0
 8003e28:	61bb      	str	r3, [r7, #24]
 8003e2a:	4b3c      	ldr	r3, [pc, #240]	@ (8003f1c <HAL_TIM_Base_MspInit+0x118>)
 8003e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2e:	4a3b      	ldr	r2, [pc, #236]	@ (8003f1c <HAL_TIM_Base_MspInit+0x118>)
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e36:	4b39      	ldr	r3, [pc, #228]	@ (8003f1c <HAL_TIM_Base_MspInit+0x118>)
 8003e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	61bb      	str	r3, [r7, #24]
 8003e40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e42:	2300      	movs	r3, #0
 8003e44:	617b      	str	r3, [r7, #20]
 8003e46:	4b35      	ldr	r3, [pc, #212]	@ (8003f1c <HAL_TIM_Base_MspInit+0x118>)
 8003e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4a:	4a34      	ldr	r2, [pc, #208]	@ (8003f1c <HAL_TIM_Base_MspInit+0x118>)
 8003e4c:	f043 0301 	orr.w	r3, r3, #1
 8003e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e52:	4b32      	ldr	r3, [pc, #200]	@ (8003f1c <HAL_TIM_Base_MspInit+0x118>)
 8003e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	617b      	str	r3, [r7, #20]
 8003e5c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003e5e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e64:	2302      	movs	r3, #2
 8003e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003e70:	2301      	movs	r3, #1
 8003e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e74:	f107 031c 	add.w	r3, r7, #28
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4829      	ldr	r0, [pc, #164]	@ (8003f20 <HAL_TIM_Base_MspInit+0x11c>)
 8003e7c:	f000 fc60 	bl	8004740 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003e80:	2200      	movs	r2, #0
 8003e82:	2100      	movs	r1, #0
 8003e84:	2018      	movs	r0, #24
 8003e86:	f000 fc24 	bl	80046d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003e8a:	2018      	movs	r0, #24
 8003e8c:	f000 fc3d 	bl	800470a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003e90:	2200      	movs	r2, #0
 8003e92:	2100      	movs	r1, #0
 8003e94:	2019      	movs	r0, #25
 8003e96:	f000 fc1c 	bl	80046d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003e9a:	2019      	movs	r0, #25
 8003e9c:	f000 fc35 	bl	800470a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	201a      	movs	r0, #26
 8003ea6:	f000 fc14 	bl	80046d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8003eaa:	201a      	movs	r0, #26
 8003eac:	f000 fc2d 	bl	800470a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	2100      	movs	r1, #0
 8003eb4:	201b      	movs	r0, #27
 8003eb6:	f000 fc0c 	bl	80046d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003eba:	201b      	movs	r0, #27
 8003ebc:	f000 fc25 	bl	800470a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003ec0:	e026      	b.n	8003f10 <HAL_TIM_Base_MspInit+0x10c>
  else if(htim_base->Instance==TIM2)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eca:	d10e      	bne.n	8003eea <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ecc:	2300      	movs	r3, #0
 8003ece:	613b      	str	r3, [r7, #16]
 8003ed0:	4b12      	ldr	r3, [pc, #72]	@ (8003f1c <HAL_TIM_Base_MspInit+0x118>)
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed4:	4a11      	ldr	r2, [pc, #68]	@ (8003f1c <HAL_TIM_Base_MspInit+0x118>)
 8003ed6:	f043 0301 	orr.w	r3, r3, #1
 8003eda:	6413      	str	r3, [r2, #64]	@ 0x40
 8003edc:	4b0f      	ldr	r3, [pc, #60]	@ (8003f1c <HAL_TIM_Base_MspInit+0x118>)
 8003ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	613b      	str	r3, [r7, #16]
 8003ee6:	693b      	ldr	r3, [r7, #16]
}
 8003ee8:	e012      	b.n	8003f10 <HAL_TIM_Base_MspInit+0x10c>
  else if(htim_base->Instance==TIM3)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a0d      	ldr	r2, [pc, #52]	@ (8003f24 <HAL_TIM_Base_MspInit+0x120>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d10d      	bne.n	8003f10 <HAL_TIM_Base_MspInit+0x10c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	4b08      	ldr	r3, [pc, #32]	@ (8003f1c <HAL_TIM_Base_MspInit+0x118>)
 8003efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efc:	4a07      	ldr	r2, [pc, #28]	@ (8003f1c <HAL_TIM_Base_MspInit+0x118>)
 8003efe:	f043 0302 	orr.w	r3, r3, #2
 8003f02:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f04:	4b05      	ldr	r3, [pc, #20]	@ (8003f1c <HAL_TIM_Base_MspInit+0x118>)
 8003f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
}
 8003f10:	bf00      	nop
 8003f12:	3730      	adds	r7, #48	@ 0x30
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	40010000 	.word	0x40010000
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	40020000 	.word	0x40020000
 8003f24:	40000400 	.word	0x40000400

08003f28 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b08a      	sub	sp, #40	@ 0x28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f30:	f107 0314 	add.w	r3, r7, #20
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	605a      	str	r2, [r3, #4]
 8003f3a:	609a      	str	r2, [r3, #8]
 8003f3c:	60da      	str	r2, [r3, #12]
 8003f3e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a1d      	ldr	r2, [pc, #116]	@ (8003fbc <HAL_TIM_Encoder_MspInit+0x94>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d133      	bne.n	8003fb2 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	613b      	str	r3, [r7, #16]
 8003f4e:	4b1c      	ldr	r3, [pc, #112]	@ (8003fc0 <HAL_TIM_Encoder_MspInit+0x98>)
 8003f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f52:	4a1b      	ldr	r2, [pc, #108]	@ (8003fc0 <HAL_TIM_Encoder_MspInit+0x98>)
 8003f54:	f043 0308 	orr.w	r3, r3, #8
 8003f58:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f5a:	4b19      	ldr	r3, [pc, #100]	@ (8003fc0 <HAL_TIM_Encoder_MspInit+0x98>)
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	613b      	str	r3, [r7, #16]
 8003f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f66:	2300      	movs	r3, #0
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	4b15      	ldr	r3, [pc, #84]	@ (8003fc0 <HAL_TIM_Encoder_MspInit+0x98>)
 8003f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6e:	4a14      	ldr	r2, [pc, #80]	@ (8003fc0 <HAL_TIM_Encoder_MspInit+0x98>)
 8003f70:	f043 0301 	orr.w	r3, r3, #1
 8003f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f76:	4b12      	ldr	r3, [pc, #72]	@ (8003fc0 <HAL_TIM_Encoder_MspInit+0x98>)
 8003f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	60fb      	str	r3, [r7, #12]
 8003f80:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003f82:	2303      	movs	r3, #3
 8003f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f86:	2302      	movs	r3, #2
 8003f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003f92:	2302      	movs	r3, #2
 8003f94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f96:	f107 0314 	add.w	r3, r7, #20
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4809      	ldr	r0, [pc, #36]	@ (8003fc4 <HAL_TIM_Encoder_MspInit+0x9c>)
 8003f9e:	f000 fbcf 	bl	8004740 <HAL_GPIO_Init>

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	2100      	movs	r1, #0
 8003fa6:	2032      	movs	r0, #50	@ 0x32
 8003fa8:	f000 fb93 	bl	80046d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003fac:	2032      	movs	r0, #50	@ 0x32
 8003fae:	f000 fbac 	bl	800470a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003fb2:	bf00      	nop
 8003fb4:	3728      	adds	r7, #40	@ 0x28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	40000c00 	.word	0x40000c00
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	40020000 	.word	0x40020000

08003fc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b08a      	sub	sp, #40	@ 0x28
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fd0:	f107 0314 	add.w	r3, r7, #20
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	605a      	str	r2, [r3, #4]
 8003fda:	609a      	str	r2, [r3, #8]
 8003fdc:	60da      	str	r2, [r3, #12]
 8003fde:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fe8:	d11f      	bne.n	800402a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fea:	2300      	movs	r3, #0
 8003fec:	613b      	str	r3, [r7, #16]
 8003fee:	4b22      	ldr	r3, [pc, #136]	@ (8004078 <HAL_TIM_MspPostInit+0xb0>)
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff2:	4a21      	ldr	r2, [pc, #132]	@ (8004078 <HAL_TIM_MspPostInit+0xb0>)
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ffa:	4b1f      	ldr	r3, [pc, #124]	@ (8004078 <HAL_TIM_MspPostInit+0xb0>)
 8003ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	613b      	str	r3, [r7, #16]
 8004004:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004006:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800400a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800400c:	2302      	movs	r3, #2
 800400e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004010:	2300      	movs	r3, #0
 8004012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004014:	2300      	movs	r3, #0
 8004016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004018:	2301      	movs	r3, #1
 800401a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800401c:	f107 0314 	add.w	r3, r7, #20
 8004020:	4619      	mov	r1, r3
 8004022:	4816      	ldr	r0, [pc, #88]	@ (800407c <HAL_TIM_MspPostInit+0xb4>)
 8004024:	f000 fb8c 	bl	8004740 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004028:	e022      	b.n	8004070 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a14      	ldr	r2, [pc, #80]	@ (8004080 <HAL_TIM_MspPostInit+0xb8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d11d      	bne.n	8004070 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004034:	2300      	movs	r3, #0
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	4b0f      	ldr	r3, [pc, #60]	@ (8004078 <HAL_TIM_MspPostInit+0xb0>)
 800403a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403c:	4a0e      	ldr	r2, [pc, #56]	@ (8004078 <HAL_TIM_MspPostInit+0xb0>)
 800403e:	f043 0302 	orr.w	r3, r3, #2
 8004042:	6313      	str	r3, [r2, #48]	@ 0x30
 8004044:	4b0c      	ldr	r3, [pc, #48]	@ (8004078 <HAL_TIM_MspPostInit+0xb0>)
 8004046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004050:	2330      	movs	r3, #48	@ 0x30
 8004052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004054:	2302      	movs	r3, #2
 8004056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004058:	2300      	movs	r3, #0
 800405a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800405c:	2300      	movs	r3, #0
 800405e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004060:	2302      	movs	r3, #2
 8004062:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004064:	f107 0314 	add.w	r3, r7, #20
 8004068:	4619      	mov	r1, r3
 800406a:	4806      	ldr	r0, [pc, #24]	@ (8004084 <HAL_TIM_MspPostInit+0xbc>)
 800406c:	f000 fb68 	bl	8004740 <HAL_GPIO_Init>
}
 8004070:	bf00      	nop
 8004072:	3728      	adds	r7, #40	@ 0x28
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40023800 	.word	0x40023800
 800407c:	40020000 	.word	0x40020000
 8004080:	40000400 	.word	0x40000400
 8004084:	40020400 	.word	0x40020400

08004088 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b08a      	sub	sp, #40	@ 0x28
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004090:	f107 0314 	add.w	r3, r7, #20
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	605a      	str	r2, [r3, #4]
 800409a:	609a      	str	r2, [r3, #8]
 800409c:	60da      	str	r2, [r3, #12]
 800409e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a19      	ldr	r2, [pc, #100]	@ (800410c <HAL_UART_MspInit+0x84>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d12b      	bne.n	8004102 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80040aa:	2300      	movs	r3, #0
 80040ac:	613b      	str	r3, [r7, #16]
 80040ae:	4b18      	ldr	r3, [pc, #96]	@ (8004110 <HAL_UART_MspInit+0x88>)
 80040b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b2:	4a17      	ldr	r2, [pc, #92]	@ (8004110 <HAL_UART_MspInit+0x88>)
 80040b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80040ba:	4b15      	ldr	r3, [pc, #84]	@ (8004110 <HAL_UART_MspInit+0x88>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c2:	613b      	str	r3, [r7, #16]
 80040c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040c6:	2300      	movs	r3, #0
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	4b11      	ldr	r3, [pc, #68]	@ (8004110 <HAL_UART_MspInit+0x88>)
 80040cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ce:	4a10      	ldr	r2, [pc, #64]	@ (8004110 <HAL_UART_MspInit+0x88>)
 80040d0:	f043 0301 	orr.w	r3, r3, #1
 80040d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80040d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004110 <HAL_UART_MspInit+0x88>)
 80040d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	60fb      	str	r3, [r7, #12]
 80040e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80040e2:	230c      	movs	r3, #12
 80040e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e6:	2302      	movs	r3, #2
 80040e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ea:	2300      	movs	r3, #0
 80040ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ee:	2303      	movs	r3, #3
 80040f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80040f2:	2307      	movs	r3, #7
 80040f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040f6:	f107 0314 	add.w	r3, r7, #20
 80040fa:	4619      	mov	r1, r3
 80040fc:	4805      	ldr	r0, [pc, #20]	@ (8004114 <HAL_UART_MspInit+0x8c>)
 80040fe:	f000 fb1f 	bl	8004740 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004102:	bf00      	nop
 8004104:	3728      	adds	r7, #40	@ 0x28
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	40004400 	.word	0x40004400
 8004110:	40023800 	.word	0x40023800
 8004114:	40020000 	.word	0x40020000

08004118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800411c:	bf00      	nop
 800411e:	e7fd      	b.n	800411c <NMI_Handler+0x4>

08004120 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004124:	bf00      	nop
 8004126:	e7fd      	b.n	8004124 <HardFault_Handler+0x4>

08004128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004128:	b480      	push	{r7}
 800412a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800412c:	bf00      	nop
 800412e:	e7fd      	b.n	800412c <MemManage_Handler+0x4>

08004130 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004134:	bf00      	nop
 8004136:	e7fd      	b.n	8004134 <BusFault_Handler+0x4>

08004138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800413c:	bf00      	nop
 800413e:	e7fd      	b.n	800413c <UsageFault_Handler+0x4>

08004140 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004144:	bf00      	nop
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800414e:	b480      	push	{r7}
 8004150:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004152:	bf00      	nop
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004160:	bf00      	nop
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800416e:	f000 f991 	bl	8004494 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004172:	bf00      	nop
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800417c:	4802      	ldr	r0, [pc, #8]	@ (8004188 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800417e:	f003 fb31 	bl	80077e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004182:	bf00      	nop
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	20000504 	.word	0x20000504

0800418c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004190:	4802      	ldr	r0, [pc, #8]	@ (800419c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004192:	f003 fb27 	bl	80077e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004196:	bf00      	nop
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	20000504 	.word	0x20000504

080041a0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80041a4:	4802      	ldr	r0, [pc, #8]	@ (80041b0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80041a6:	f003 fb1d 	bl	80077e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80041aa:	bf00      	nop
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20000504 	.word	0x20000504

080041b4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80041b8:	4802      	ldr	r0, [pc, #8]	@ (80041c4 <TIM1_CC_IRQHandler+0x10>)
 80041ba:	f003 fb13 	bl	80077e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80041be:	bf00      	nop
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20000504 	.word	0x20000504

080041c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80041cc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80041d0:	f000 fc6c 	bl	8004aac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80041d4:	bf00      	nop
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80041dc:	4802      	ldr	r0, [pc, #8]	@ (80041e8 <TIM5_IRQHandler+0x10>)
 80041de:	f003 fb01 	bl	80077e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80041e2:	bf00      	nop
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	200005dc 	.word	0x200005dc

080041ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  return 1;
 80041f0:	2301      	movs	r3, #1
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <_kill>:

int _kill(int pid, int sig)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004206:	f00a fde1 	bl	800edcc <__errno>
 800420a:	4603      	mov	r3, r0
 800420c:	2216      	movs	r2, #22
 800420e:	601a      	str	r2, [r3, #0]
  return -1;
 8004210:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004214:	4618      	mov	r0, r3
 8004216:	3708      	adds	r7, #8
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <_exit>:

void _exit (int status)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004224:	f04f 31ff 	mov.w	r1, #4294967295
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f7ff ffe7 	bl	80041fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800422e:	bf00      	nop
 8004230:	e7fd      	b.n	800422e <_exit+0x12>

08004232 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b086      	sub	sp, #24
 8004236:	af00      	add	r7, sp, #0
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800423e:	2300      	movs	r3, #0
 8004240:	617b      	str	r3, [r7, #20]
 8004242:	e00a      	b.n	800425a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004244:	f3af 8000 	nop.w
 8004248:	4601      	mov	r1, r0
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	60ba      	str	r2, [r7, #8]
 8004250:	b2ca      	uxtb	r2, r1
 8004252:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	3301      	adds	r3, #1
 8004258:	617b      	str	r3, [r7, #20]
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	429a      	cmp	r2, r3
 8004260:	dbf0      	blt.n	8004244 <_read+0x12>
  }

  return len;
 8004262:	687b      	ldr	r3, [r7, #4]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004278:	2300      	movs	r3, #0
 800427a:	617b      	str	r3, [r7, #20]
 800427c:	e009      	b.n	8004292 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	60ba      	str	r2, [r7, #8]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	4618      	mov	r0, r3
 8004288:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	3301      	adds	r3, #1
 8004290:	617b      	str	r3, [r7, #20]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	429a      	cmp	r2, r3
 8004298:	dbf1      	blt.n	800427e <_write+0x12>
  }
  return len;
 800429a:	687b      	ldr	r3, [r7, #4]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3718      	adds	r7, #24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <_close>:

int _close(int file)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80042ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80042b0:	4618      	mov	r0, r3
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80042cc:	605a      	str	r2, [r3, #4]
  return 0;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr

080042dc <_isatty>:

int _isatty(int file)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80042e4:	2301      	movs	r3, #1
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b085      	sub	sp, #20
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3714      	adds	r7, #20
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004314:	4a14      	ldr	r2, [pc, #80]	@ (8004368 <_sbrk+0x5c>)
 8004316:	4b15      	ldr	r3, [pc, #84]	@ (800436c <_sbrk+0x60>)
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004320:	4b13      	ldr	r3, [pc, #76]	@ (8004370 <_sbrk+0x64>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d102      	bne.n	800432e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004328:	4b11      	ldr	r3, [pc, #68]	@ (8004370 <_sbrk+0x64>)
 800432a:	4a12      	ldr	r2, [pc, #72]	@ (8004374 <_sbrk+0x68>)
 800432c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800432e:	4b10      	ldr	r3, [pc, #64]	@ (8004370 <_sbrk+0x64>)
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4413      	add	r3, r2
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	429a      	cmp	r2, r3
 800433a:	d207      	bcs.n	800434c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800433c:	f00a fd46 	bl	800edcc <__errno>
 8004340:	4603      	mov	r3, r0
 8004342:	220c      	movs	r2, #12
 8004344:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004346:	f04f 33ff 	mov.w	r3, #4294967295
 800434a:	e009      	b.n	8004360 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800434c:	4b08      	ldr	r3, [pc, #32]	@ (8004370 <_sbrk+0x64>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004352:	4b07      	ldr	r3, [pc, #28]	@ (8004370 <_sbrk+0x64>)
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4413      	add	r3, r2
 800435a:	4a05      	ldr	r2, [pc, #20]	@ (8004370 <_sbrk+0x64>)
 800435c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800435e:	68fb      	ldr	r3, [r7, #12]
}
 8004360:	4618      	mov	r0, r3
 8004362:	3718      	adds	r7, #24
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	20020000 	.word	0x20020000
 800436c:	00000400 	.word	0x00000400
 8004370:	200008a8 	.word	0x200008a8
 8004374:	20000a40 	.word	0x20000a40

08004378 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800437c:	4b06      	ldr	r3, [pc, #24]	@ (8004398 <SystemInit+0x20>)
 800437e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004382:	4a05      	ldr	r2, [pc, #20]	@ (8004398 <SystemInit+0x20>)
 8004384:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004388:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800438c:	bf00      	nop
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	e000ed00 	.word	0xe000ed00

0800439c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800439c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80043d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80043a0:	f7ff ffea 	bl	8004378 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80043a4:	480c      	ldr	r0, [pc, #48]	@ (80043d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80043a6:	490d      	ldr	r1, [pc, #52]	@ (80043dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80043a8:	4a0d      	ldr	r2, [pc, #52]	@ (80043e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80043aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043ac:	e002      	b.n	80043b4 <LoopCopyDataInit>

080043ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043b2:	3304      	adds	r3, #4

080043b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043b8:	d3f9      	bcc.n	80043ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043ba:	4a0a      	ldr	r2, [pc, #40]	@ (80043e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80043bc:	4c0a      	ldr	r4, [pc, #40]	@ (80043e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80043be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043c0:	e001      	b.n	80043c6 <LoopFillZerobss>

080043c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043c4:	3204      	adds	r2, #4

080043c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043c8:	d3fb      	bcc.n	80043c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80043ca:	f00a fd05 	bl	800edd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043ce:	f7fe fcb3 	bl	8002d38 <main>
  bx  lr    
 80043d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80043d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80043d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043dc:	20000494 	.word	0x20000494
  ldr r2, =_sidata
 80043e0:	080111f8 	.word	0x080111f8
  ldr r2, =_sbss
 80043e4:	20000494 	.word	0x20000494
  ldr r4, =_ebss
 80043e8:	20000a40 	.word	0x20000a40

080043ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043ec:	e7fe      	b.n	80043ec <ADC_IRQHandler>
	...

080043f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004430 <HAL_Init+0x40>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004430 <HAL_Init+0x40>)
 80043fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004400:	4b0b      	ldr	r3, [pc, #44]	@ (8004430 <HAL_Init+0x40>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a0a      	ldr	r2, [pc, #40]	@ (8004430 <HAL_Init+0x40>)
 8004406:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800440a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800440c:	4b08      	ldr	r3, [pc, #32]	@ (8004430 <HAL_Init+0x40>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a07      	ldr	r2, [pc, #28]	@ (8004430 <HAL_Init+0x40>)
 8004412:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004416:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004418:	2003      	movs	r0, #3
 800441a:	f000 f94f 	bl	80046bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800441e:	200f      	movs	r0, #15
 8004420:	f000 f808 	bl	8004434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004424:	f7ff fc7e 	bl	8003d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	40023c00 	.word	0x40023c00

08004434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800443c:	4b12      	ldr	r3, [pc, #72]	@ (8004488 <HAL_InitTick+0x54>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	4b12      	ldr	r3, [pc, #72]	@ (800448c <HAL_InitTick+0x58>)
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	4619      	mov	r1, r3
 8004446:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800444a:	fbb3 f3f1 	udiv	r3, r3, r1
 800444e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004452:	4618      	mov	r0, r3
 8004454:	f000 f967 	bl	8004726 <HAL_SYSTICK_Config>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e00e      	b.n	8004480 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b0f      	cmp	r3, #15
 8004466:	d80a      	bhi.n	800447e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004468:	2200      	movs	r2, #0
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	f04f 30ff 	mov.w	r0, #4294967295
 8004470:	f000 f92f 	bl	80046d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004474:	4a06      	ldr	r2, [pc, #24]	@ (8004490 <HAL_InitTick+0x5c>)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	e000      	b.n	8004480 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
}
 8004480:	4618      	mov	r0, r3
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	20000004 	.word	0x20000004
 800448c:	2000000c 	.word	0x2000000c
 8004490:	20000008 	.word	0x20000008

08004494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004498:	4b06      	ldr	r3, [pc, #24]	@ (80044b4 <HAL_IncTick+0x20>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	461a      	mov	r2, r3
 800449e:	4b06      	ldr	r3, [pc, #24]	@ (80044b8 <HAL_IncTick+0x24>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4413      	add	r3, r2
 80044a4:	4a04      	ldr	r2, [pc, #16]	@ (80044b8 <HAL_IncTick+0x24>)
 80044a6:	6013      	str	r3, [r2, #0]
}
 80044a8:	bf00      	nop
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	2000000c 	.word	0x2000000c
 80044b8:	200008ac 	.word	0x200008ac

080044bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044bc:	b480      	push	{r7}
 80044be:	af00      	add	r7, sp, #0
  return uwTick;
 80044c0:	4b03      	ldr	r3, [pc, #12]	@ (80044d0 <HAL_GetTick+0x14>)
 80044c2:	681b      	ldr	r3, [r3, #0]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop
 80044d0:	200008ac 	.word	0x200008ac

080044d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044dc:	f7ff ffee 	bl	80044bc <HAL_GetTick>
 80044e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ec:	d005      	beq.n	80044fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004518 <HAL_Delay+0x44>)
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	461a      	mov	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4413      	add	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80044fa:	bf00      	nop
 80044fc:	f7ff ffde 	bl	80044bc <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	429a      	cmp	r2, r3
 800450a:	d8f7      	bhi.n	80044fc <HAL_Delay+0x28>
  {
  }
}
 800450c:	bf00      	nop
 800450e:	bf00      	nop
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	2000000c 	.word	0x2000000c

0800451c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f003 0307 	and.w	r3, r3, #7
 800452a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800452c:	4b0c      	ldr	r3, [pc, #48]	@ (8004560 <__NVIC_SetPriorityGrouping+0x44>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004538:	4013      	ands	r3, r2
 800453a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004544:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004548:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800454c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800454e:	4a04      	ldr	r2, [pc, #16]	@ (8004560 <__NVIC_SetPriorityGrouping+0x44>)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	60d3      	str	r3, [r2, #12]
}
 8004554:	bf00      	nop
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	e000ed00 	.word	0xe000ed00

08004564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004568:	4b04      	ldr	r3, [pc, #16]	@ (800457c <__NVIC_GetPriorityGrouping+0x18>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	0a1b      	lsrs	r3, r3, #8
 800456e:	f003 0307 	and.w	r3, r3, #7
}
 8004572:	4618      	mov	r0, r3
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	e000ed00 	.word	0xe000ed00

08004580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	4603      	mov	r3, r0
 8004588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800458a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800458e:	2b00      	cmp	r3, #0
 8004590:	db0b      	blt.n	80045aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004592:	79fb      	ldrb	r3, [r7, #7]
 8004594:	f003 021f 	and.w	r2, r3, #31
 8004598:	4907      	ldr	r1, [pc, #28]	@ (80045b8 <__NVIC_EnableIRQ+0x38>)
 800459a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800459e:	095b      	lsrs	r3, r3, #5
 80045a0:	2001      	movs	r0, #1
 80045a2:	fa00 f202 	lsl.w	r2, r0, r2
 80045a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	e000e100 	.word	0xe000e100

080045bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	4603      	mov	r3, r0
 80045c4:	6039      	str	r1, [r7, #0]
 80045c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	db0a      	blt.n	80045e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	490c      	ldr	r1, [pc, #48]	@ (8004608 <__NVIC_SetPriority+0x4c>)
 80045d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045da:	0112      	lsls	r2, r2, #4
 80045dc:	b2d2      	uxtb	r2, r2
 80045de:	440b      	add	r3, r1
 80045e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045e4:	e00a      	b.n	80045fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	4908      	ldr	r1, [pc, #32]	@ (800460c <__NVIC_SetPriority+0x50>)
 80045ec:	79fb      	ldrb	r3, [r7, #7]
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	3b04      	subs	r3, #4
 80045f4:	0112      	lsls	r2, r2, #4
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	440b      	add	r3, r1
 80045fa:	761a      	strb	r2, [r3, #24]
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	e000e100 	.word	0xe000e100
 800460c:	e000ed00 	.word	0xe000ed00

08004610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004610:	b480      	push	{r7}
 8004612:	b089      	sub	sp, #36	@ 0x24
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	f1c3 0307 	rsb	r3, r3, #7
 800462a:	2b04      	cmp	r3, #4
 800462c:	bf28      	it	cs
 800462e:	2304      	movcs	r3, #4
 8004630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	3304      	adds	r3, #4
 8004636:	2b06      	cmp	r3, #6
 8004638:	d902      	bls.n	8004640 <NVIC_EncodePriority+0x30>
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	3b03      	subs	r3, #3
 800463e:	e000      	b.n	8004642 <NVIC_EncodePriority+0x32>
 8004640:	2300      	movs	r3, #0
 8004642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004644:	f04f 32ff 	mov.w	r2, #4294967295
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	fa02 f303 	lsl.w	r3, r2, r3
 800464e:	43da      	mvns	r2, r3
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	401a      	ands	r2, r3
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004658:	f04f 31ff 	mov.w	r1, #4294967295
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	fa01 f303 	lsl.w	r3, r1, r3
 8004662:	43d9      	mvns	r1, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004668:	4313      	orrs	r3, r2
         );
}
 800466a:	4618      	mov	r0, r3
 800466c:	3724      	adds	r7, #36	@ 0x24
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
	...

08004678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	3b01      	subs	r3, #1
 8004684:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004688:	d301      	bcc.n	800468e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800468a:	2301      	movs	r3, #1
 800468c:	e00f      	b.n	80046ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800468e:	4a0a      	ldr	r2, [pc, #40]	@ (80046b8 <SysTick_Config+0x40>)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	3b01      	subs	r3, #1
 8004694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004696:	210f      	movs	r1, #15
 8004698:	f04f 30ff 	mov.w	r0, #4294967295
 800469c:	f7ff ff8e 	bl	80045bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046a0:	4b05      	ldr	r3, [pc, #20]	@ (80046b8 <SysTick_Config+0x40>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046a6:	4b04      	ldr	r3, [pc, #16]	@ (80046b8 <SysTick_Config+0x40>)
 80046a8:	2207      	movs	r2, #7
 80046aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	e000e010 	.word	0xe000e010

080046bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7ff ff29 	bl	800451c <__NVIC_SetPriorityGrouping>
}
 80046ca:	bf00      	nop
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b086      	sub	sp, #24
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	4603      	mov	r3, r0
 80046da:	60b9      	str	r1, [r7, #8]
 80046dc:	607a      	str	r2, [r7, #4]
 80046de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046e4:	f7ff ff3e 	bl	8004564 <__NVIC_GetPriorityGrouping>
 80046e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	68b9      	ldr	r1, [r7, #8]
 80046ee:	6978      	ldr	r0, [r7, #20]
 80046f0:	f7ff ff8e 	bl	8004610 <NVIC_EncodePriority>
 80046f4:	4602      	mov	r2, r0
 80046f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046fa:	4611      	mov	r1, r2
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff ff5d 	bl	80045bc <__NVIC_SetPriority>
}
 8004702:	bf00      	nop
 8004704:	3718      	adds	r7, #24
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b082      	sub	sp, #8
 800470e:	af00      	add	r7, sp, #0
 8004710:	4603      	mov	r3, r0
 8004712:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004718:	4618      	mov	r0, r3
 800471a:	f7ff ff31 	bl	8004580 <__NVIC_EnableIRQ>
}
 800471e:	bf00      	nop
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b082      	sub	sp, #8
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f7ff ffa2 	bl	8004678 <SysTick_Config>
 8004734:	4603      	mov	r3, r0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3708      	adds	r7, #8
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
	...

08004740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004740:	b480      	push	{r7}
 8004742:	b089      	sub	sp, #36	@ 0x24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800474a:	2300      	movs	r3, #0
 800474c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800474e:	2300      	movs	r3, #0
 8004750:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004752:	2300      	movs	r3, #0
 8004754:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004756:	2300      	movs	r3, #0
 8004758:	61fb      	str	r3, [r7, #28]
 800475a:	e159      	b.n	8004a10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800475c:	2201      	movs	r2, #1
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	fa02 f303 	lsl.w	r3, r2, r3
 8004764:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	4013      	ands	r3, r2
 800476e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	429a      	cmp	r2, r3
 8004776:	f040 8148 	bne.w	8004a0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	2b01      	cmp	r3, #1
 8004784:	d005      	beq.n	8004792 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800478e:	2b02      	cmp	r3, #2
 8004790:	d130      	bne.n	80047f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	005b      	lsls	r3, r3, #1
 800479c:	2203      	movs	r2, #3
 800479e:	fa02 f303 	lsl.w	r3, r2, r3
 80047a2:	43db      	mvns	r3, r3
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	4013      	ands	r3, r2
 80047a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68da      	ldr	r2, [r3, #12]
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	005b      	lsls	r3, r3, #1
 80047b2:	fa02 f303 	lsl.w	r3, r2, r3
 80047b6:	69ba      	ldr	r2, [r7, #24]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047c8:	2201      	movs	r2, #1
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	43db      	mvns	r3, r3
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	4013      	ands	r3, r2
 80047d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	091b      	lsrs	r3, r3, #4
 80047de:	f003 0201 	and.w	r2, r3, #1
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	2b03      	cmp	r3, #3
 80047fe:	d017      	beq.n	8004830 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	2203      	movs	r2, #3
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	43db      	mvns	r3, r3
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	4013      	ands	r3, r2
 8004816:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	689a      	ldr	r2, [r3, #8]
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4313      	orrs	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f003 0303 	and.w	r3, r3, #3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d123      	bne.n	8004884 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	08da      	lsrs	r2, r3, #3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3208      	adds	r2, #8
 8004844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004848:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	220f      	movs	r2, #15
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	43db      	mvns	r3, r3
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	4013      	ands	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	691a      	ldr	r2, [r3, #16]
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	fa02 f303 	lsl.w	r3, r2, r3
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	4313      	orrs	r3, r2
 8004874:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	08da      	lsrs	r2, r3, #3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	3208      	adds	r2, #8
 800487e:	69b9      	ldr	r1, [r7, #24]
 8004880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	2203      	movs	r2, #3
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	43db      	mvns	r3, r3
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	4013      	ands	r3, r2
 800489a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f003 0203 	and.w	r2, r3, #3
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 80a2 	beq.w	8004a0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048c6:	2300      	movs	r3, #0
 80048c8:	60fb      	str	r3, [r7, #12]
 80048ca:	4b57      	ldr	r3, [pc, #348]	@ (8004a28 <HAL_GPIO_Init+0x2e8>)
 80048cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ce:	4a56      	ldr	r2, [pc, #344]	@ (8004a28 <HAL_GPIO_Init+0x2e8>)
 80048d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80048d6:	4b54      	ldr	r3, [pc, #336]	@ (8004a28 <HAL_GPIO_Init+0x2e8>)
 80048d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048e2:	4a52      	ldr	r2, [pc, #328]	@ (8004a2c <HAL_GPIO_Init+0x2ec>)
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	089b      	lsrs	r3, r3, #2
 80048e8:	3302      	adds	r3, #2
 80048ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	220f      	movs	r2, #15
 80048fa:	fa02 f303 	lsl.w	r3, r2, r3
 80048fe:	43db      	mvns	r3, r3
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	4013      	ands	r3, r2
 8004904:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a49      	ldr	r2, [pc, #292]	@ (8004a30 <HAL_GPIO_Init+0x2f0>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d019      	beq.n	8004942 <HAL_GPIO_Init+0x202>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a48      	ldr	r2, [pc, #288]	@ (8004a34 <HAL_GPIO_Init+0x2f4>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d013      	beq.n	800493e <HAL_GPIO_Init+0x1fe>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a47      	ldr	r2, [pc, #284]	@ (8004a38 <HAL_GPIO_Init+0x2f8>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d00d      	beq.n	800493a <HAL_GPIO_Init+0x1fa>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a46      	ldr	r2, [pc, #280]	@ (8004a3c <HAL_GPIO_Init+0x2fc>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d007      	beq.n	8004936 <HAL_GPIO_Init+0x1f6>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a45      	ldr	r2, [pc, #276]	@ (8004a40 <HAL_GPIO_Init+0x300>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d101      	bne.n	8004932 <HAL_GPIO_Init+0x1f2>
 800492e:	2304      	movs	r3, #4
 8004930:	e008      	b.n	8004944 <HAL_GPIO_Init+0x204>
 8004932:	2307      	movs	r3, #7
 8004934:	e006      	b.n	8004944 <HAL_GPIO_Init+0x204>
 8004936:	2303      	movs	r3, #3
 8004938:	e004      	b.n	8004944 <HAL_GPIO_Init+0x204>
 800493a:	2302      	movs	r3, #2
 800493c:	e002      	b.n	8004944 <HAL_GPIO_Init+0x204>
 800493e:	2301      	movs	r3, #1
 8004940:	e000      	b.n	8004944 <HAL_GPIO_Init+0x204>
 8004942:	2300      	movs	r3, #0
 8004944:	69fa      	ldr	r2, [r7, #28]
 8004946:	f002 0203 	and.w	r2, r2, #3
 800494a:	0092      	lsls	r2, r2, #2
 800494c:	4093      	lsls	r3, r2
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	4313      	orrs	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004954:	4935      	ldr	r1, [pc, #212]	@ (8004a2c <HAL_GPIO_Init+0x2ec>)
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	089b      	lsrs	r3, r3, #2
 800495a:	3302      	adds	r3, #2
 800495c:	69ba      	ldr	r2, [r7, #24]
 800495e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004962:	4b38      	ldr	r3, [pc, #224]	@ (8004a44 <HAL_GPIO_Init+0x304>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	43db      	mvns	r3, r3
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	4013      	ands	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004986:	4a2f      	ldr	r2, [pc, #188]	@ (8004a44 <HAL_GPIO_Init+0x304>)
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800498c:	4b2d      	ldr	r3, [pc, #180]	@ (8004a44 <HAL_GPIO_Init+0x304>)
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	43db      	mvns	r3, r3
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	4013      	ands	r3, r2
 800499a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d003      	beq.n	80049b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049b0:	4a24      	ldr	r2, [pc, #144]	@ (8004a44 <HAL_GPIO_Init+0x304>)
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80049b6:	4b23      	ldr	r3, [pc, #140]	@ (8004a44 <HAL_GPIO_Init+0x304>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	43db      	mvns	r3, r3
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	4013      	ands	r3, r2
 80049c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049da:	4a1a      	ldr	r2, [pc, #104]	@ (8004a44 <HAL_GPIO_Init+0x304>)
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049e0:	4b18      	ldr	r3, [pc, #96]	@ (8004a44 <HAL_GPIO_Init+0x304>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	43db      	mvns	r3, r3
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	4013      	ands	r3, r2
 80049ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a04:	4a0f      	ldr	r2, [pc, #60]	@ (8004a44 <HAL_GPIO_Init+0x304>)
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	61fb      	str	r3, [r7, #28]
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	2b0f      	cmp	r3, #15
 8004a14:	f67f aea2 	bls.w	800475c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a18:	bf00      	nop
 8004a1a:	bf00      	nop
 8004a1c:	3724      	adds	r7, #36	@ 0x24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	40013800 	.word	0x40013800
 8004a30:	40020000 	.word	0x40020000
 8004a34:	40020400 	.word	0x40020400
 8004a38:	40020800 	.word	0x40020800
 8004a3c:	40020c00 	.word	0x40020c00
 8004a40:	40021000 	.word	0x40021000
 8004a44:	40013c00 	.word	0x40013c00

08004a48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	460b      	mov	r3, r1
 8004a52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	691a      	ldr	r2, [r3, #16]
 8004a58:	887b      	ldrh	r3, [r7, #2]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d002      	beq.n	8004a66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a60:	2301      	movs	r3, #1
 8004a62:	73fb      	strb	r3, [r7, #15]
 8004a64:	e001      	b.n	8004a6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a66:	2300      	movs	r3, #0
 8004a68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3714      	adds	r7, #20
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	460b      	mov	r3, r1
 8004a82:	807b      	strh	r3, [r7, #2]
 8004a84:	4613      	mov	r3, r2
 8004a86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a88:	787b      	ldrb	r3, [r7, #1]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a8e:	887a      	ldrh	r2, [r7, #2]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a94:	e003      	b.n	8004a9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a96:	887b      	ldrh	r3, [r7, #2]
 8004a98:	041a      	lsls	r2, r3, #16
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	619a      	str	r2, [r3, #24]
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
	...

08004aac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004ab6:	4b08      	ldr	r3, [pc, #32]	@ (8004ad8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ab8:	695a      	ldr	r2, [r3, #20]
 8004aba:	88fb      	ldrh	r3, [r7, #6]
 8004abc:	4013      	ands	r3, r2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d006      	beq.n	8004ad0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ac2:	4a05      	ldr	r2, [pc, #20]	@ (8004ad8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ac4:	88fb      	ldrh	r3, [r7, #6]
 8004ac6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ac8:	88fb      	ldrh	r3, [r7, #6]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 f806 	bl	8004adc <HAL_GPIO_EXTI_Callback>
  }
}
 8004ad0:	bf00      	nop
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	40013c00 	.word	0x40013c00

08004adc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr
	...

08004af4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d101      	bne.n	8004b06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e12b      	b.n	8004d5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d106      	bne.n	8004b20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7ff f92a 	bl	8003d74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2224      	movs	r2, #36	@ 0x24
 8004b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f022 0201 	bic.w	r2, r2, #1
 8004b36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b58:	f001 ff10 	bl	800697c <HAL_RCC_GetPCLK1Freq>
 8004b5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	4a81      	ldr	r2, [pc, #516]	@ (8004d68 <HAL_I2C_Init+0x274>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d807      	bhi.n	8004b78 <HAL_I2C_Init+0x84>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4a80      	ldr	r2, [pc, #512]	@ (8004d6c <HAL_I2C_Init+0x278>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	bf94      	ite	ls
 8004b70:	2301      	movls	r3, #1
 8004b72:	2300      	movhi	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	e006      	b.n	8004b86 <HAL_I2C_Init+0x92>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4a7d      	ldr	r2, [pc, #500]	@ (8004d70 <HAL_I2C_Init+0x27c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	bf94      	ite	ls
 8004b80:	2301      	movls	r3, #1
 8004b82:	2300      	movhi	r3, #0
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e0e7      	b.n	8004d5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	4a78      	ldr	r2, [pc, #480]	@ (8004d74 <HAL_I2C_Init+0x280>)
 8004b92:	fba2 2303 	umull	r2, r3, r2, r3
 8004b96:	0c9b      	lsrs	r3, r3, #18
 8004b98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68ba      	ldr	r2, [r7, #8]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	4a6a      	ldr	r2, [pc, #424]	@ (8004d68 <HAL_I2C_Init+0x274>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d802      	bhi.n	8004bc8 <HAL_I2C_Init+0xd4>
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	e009      	b.n	8004bdc <HAL_I2C_Init+0xe8>
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004bce:	fb02 f303 	mul.w	r3, r2, r3
 8004bd2:	4a69      	ldr	r2, [pc, #420]	@ (8004d78 <HAL_I2C_Init+0x284>)
 8004bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd8:	099b      	lsrs	r3, r3, #6
 8004bda:	3301      	adds	r3, #1
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6812      	ldr	r2, [r2, #0]
 8004be0:	430b      	orrs	r3, r1
 8004be2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004bee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	495c      	ldr	r1, [pc, #368]	@ (8004d68 <HAL_I2C_Init+0x274>)
 8004bf8:	428b      	cmp	r3, r1
 8004bfa:	d819      	bhi.n	8004c30 <HAL_I2C_Init+0x13c>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	1e59      	subs	r1, r3, #1
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	005b      	lsls	r3, r3, #1
 8004c06:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c0a:	1c59      	adds	r1, r3, #1
 8004c0c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004c10:	400b      	ands	r3, r1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00a      	beq.n	8004c2c <HAL_I2C_Init+0x138>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	1e59      	subs	r1, r3, #1
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	005b      	lsls	r3, r3, #1
 8004c20:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c24:	3301      	adds	r3, #1
 8004c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c2a:	e051      	b.n	8004cd0 <HAL_I2C_Init+0x1dc>
 8004c2c:	2304      	movs	r3, #4
 8004c2e:	e04f      	b.n	8004cd0 <HAL_I2C_Init+0x1dc>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d111      	bne.n	8004c5c <HAL_I2C_Init+0x168>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	1e58      	subs	r0, r3, #1
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6859      	ldr	r1, [r3, #4]
 8004c40:	460b      	mov	r3, r1
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	440b      	add	r3, r1
 8004c46:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	bf0c      	ite	eq
 8004c54:	2301      	moveq	r3, #1
 8004c56:	2300      	movne	r3, #0
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	e012      	b.n	8004c82 <HAL_I2C_Init+0x18e>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	1e58      	subs	r0, r3, #1
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6859      	ldr	r1, [r3, #4]
 8004c64:	460b      	mov	r3, r1
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	440b      	add	r3, r1
 8004c6a:	0099      	lsls	r1, r3, #2
 8004c6c:	440b      	add	r3, r1
 8004c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c72:	3301      	adds	r3, #1
 8004c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	bf0c      	ite	eq
 8004c7c:	2301      	moveq	r3, #1
 8004c7e:	2300      	movne	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <HAL_I2C_Init+0x196>
 8004c86:	2301      	movs	r3, #1
 8004c88:	e022      	b.n	8004cd0 <HAL_I2C_Init+0x1dc>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10e      	bne.n	8004cb0 <HAL_I2C_Init+0x1bc>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	1e58      	subs	r0, r3, #1
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6859      	ldr	r1, [r3, #4]
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	440b      	add	r3, r1
 8004ca0:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004caa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cae:	e00f      	b.n	8004cd0 <HAL_I2C_Init+0x1dc>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	1e58      	subs	r0, r3, #1
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6859      	ldr	r1, [r3, #4]
 8004cb8:	460b      	mov	r3, r1
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	440b      	add	r3, r1
 8004cbe:	0099      	lsls	r1, r3, #2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ccc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cd0:	6879      	ldr	r1, [r7, #4]
 8004cd2:	6809      	ldr	r1, [r1, #0]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69da      	ldr	r2, [r3, #28]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004cfe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6911      	ldr	r1, [r2, #16]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	68d2      	ldr	r2, [r2, #12]
 8004d0a:	4311      	orrs	r1, r2
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	6812      	ldr	r2, [r2, #0]
 8004d10:	430b      	orrs	r3, r1
 8004d12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	695a      	ldr	r2, [r3, #20]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	431a      	orrs	r2, r3
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0201 	orr.w	r2, r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	000186a0 	.word	0x000186a0
 8004d6c:	001e847f 	.word	0x001e847f
 8004d70:	003d08ff 	.word	0x003d08ff
 8004d74:	431bde83 	.word	0x431bde83
 8004d78:	10624dd3 	.word	0x10624dd3

08004d7c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b088      	sub	sp, #32
 8004d80:	af02      	add	r7, sp, #8
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	607a      	str	r2, [r7, #4]
 8004d86:	461a      	mov	r2, r3
 8004d88:	460b      	mov	r3, r1
 8004d8a:	817b      	strh	r3, [r7, #10]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d90:	f7ff fb94 	bl	80044bc <HAL_GetTick>
 8004d94:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b20      	cmp	r3, #32
 8004da0:	f040 80e0 	bne.w	8004f64 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	2319      	movs	r3, #25
 8004daa:	2201      	movs	r2, #1
 8004dac:	4970      	ldr	r1, [pc, #448]	@ (8004f70 <HAL_I2C_Master_Transmit+0x1f4>)
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f000 ff7e 	bl	8005cb0 <I2C_WaitOnFlagUntilTimeout>
 8004db4:	4603      	mov	r3, r0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d001      	beq.n	8004dbe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004dba:	2302      	movs	r3, #2
 8004dbc:	e0d3      	b.n	8004f66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d101      	bne.n	8004dcc <HAL_I2C_Master_Transmit+0x50>
 8004dc8:	2302      	movs	r3, #2
 8004dca:	e0cc      	b.n	8004f66 <HAL_I2C_Master_Transmit+0x1ea>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d007      	beq.n	8004df2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f042 0201 	orr.w	r2, r2, #1
 8004df0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2221      	movs	r2, #33	@ 0x21
 8004e06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2210      	movs	r2, #16
 8004e0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	893a      	ldrh	r2, [r7, #8]
 8004e22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	4a50      	ldr	r2, [pc, #320]	@ (8004f74 <HAL_I2C_Master_Transmit+0x1f8>)
 8004e32:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e34:	8979      	ldrh	r1, [r7, #10]
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	6a3a      	ldr	r2, [r7, #32]
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 fd00 	bl	8005840 <I2C_MasterRequestWrite>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e08d      	b.n	8004f66 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	613b      	str	r3, [r7, #16]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	613b      	str	r3, [r7, #16]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	613b      	str	r3, [r7, #16]
 8004e5e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004e60:	e066      	b.n	8004f30 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	6a39      	ldr	r1, [r7, #32]
 8004e66:	68f8      	ldr	r0, [r7, #12]
 8004e68:	f001 f83c 	bl	8005ee4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00d      	beq.n	8004e8e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	d107      	bne.n	8004e8a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e06b      	b.n	8004f66 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e92:	781a      	ldrb	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9e:	1c5a      	adds	r2, r3, #1
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b04      	cmp	r3, #4
 8004eca:	d11b      	bne.n	8004f04 <HAL_I2C_Master_Transmit+0x188>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d017      	beq.n	8004f04 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed8:	781a      	ldrb	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee4:	1c5a      	adds	r2, r3, #1
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004efc:	3b01      	subs	r3, #1
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	6a39      	ldr	r1, [r7, #32]
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f001 f833 	bl	8005f74 <I2C_WaitOnBTFFlagUntilTimeout>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00d      	beq.n	8004f30 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	d107      	bne.n	8004f2c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f2a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e01a      	b.n	8004f66 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d194      	bne.n	8004e62 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004f60:	2300      	movs	r3, #0
 8004f62:	e000      	b.n	8004f66 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004f64:	2302      	movs	r3, #2
  }
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	00100002 	.word	0x00100002
 8004f74:	ffff0000 	.word	0xffff0000

08004f78 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b08c      	sub	sp, #48	@ 0x30
 8004f7c:	af02      	add	r7, sp, #8
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	607a      	str	r2, [r7, #4]
 8004f82:	461a      	mov	r2, r3
 8004f84:	460b      	mov	r3, r1
 8004f86:	817b      	strh	r3, [r7, #10]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f8c:	f7ff fa96 	bl	80044bc <HAL_GetTick>
 8004f90:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b20      	cmp	r3, #32
 8004f9c:	f040 8217 	bne.w	80053ce <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	2319      	movs	r3, #25
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	497c      	ldr	r1, [pc, #496]	@ (800519c <HAL_I2C_Master_Receive+0x224>)
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 fe80 	bl	8005cb0 <I2C_WaitOnFlagUntilTimeout>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	e20a      	b.n	80053d0 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d101      	bne.n	8004fc8 <HAL_I2C_Master_Receive+0x50>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	e203      	b.n	80053d0 <HAL_I2C_Master_Receive+0x458>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d007      	beq.n	8004fee <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f042 0201 	orr.w	r2, r2, #1
 8004fec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ffc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2222      	movs	r2, #34	@ 0x22
 8005002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2210      	movs	r2, #16
 800500a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2200      	movs	r2, #0
 8005012:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	893a      	ldrh	r2, [r7, #8]
 800501e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005024:	b29a      	uxth	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	4a5c      	ldr	r2, [pc, #368]	@ (80051a0 <HAL_I2C_Master_Receive+0x228>)
 800502e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005030:	8979      	ldrh	r1, [r7, #10]
 8005032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005034:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 fc84 	bl	8005944 <I2C_MasterRequestRead>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e1c4      	b.n	80053d0 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800504a:	2b00      	cmp	r3, #0
 800504c:	d113      	bne.n	8005076 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800504e:	2300      	movs	r3, #0
 8005050:	623b      	str	r3, [r7, #32]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	623b      	str	r3, [r7, #32]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	623b      	str	r3, [r7, #32]
 8005062:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	e198      	b.n	80053a8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800507a:	2b01      	cmp	r3, #1
 800507c:	d11b      	bne.n	80050b6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800508c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800508e:	2300      	movs	r3, #0
 8005090:	61fb      	str	r3, [r7, #28]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	61fb      	str	r3, [r7, #28]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	699b      	ldr	r3, [r3, #24]
 80050a0:	61fb      	str	r3, [r7, #28]
 80050a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	e178      	b.n	80053a8 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d11b      	bne.n	80050f6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050de:	2300      	movs	r3, #0
 80050e0:	61bb      	str	r3, [r7, #24]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	61bb      	str	r3, [r7, #24]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	61bb      	str	r3, [r7, #24]
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	e158      	b.n	80053a8 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005104:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005106:	2300      	movs	r3, #0
 8005108:	617b      	str	r3, [r7, #20]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	617b      	str	r3, [r7, #20]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	617b      	str	r3, [r7, #20]
 800511a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800511c:	e144      	b.n	80053a8 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005122:	2b03      	cmp	r3, #3
 8005124:	f200 80f1 	bhi.w	800530a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800512c:	2b01      	cmp	r3, #1
 800512e:	d123      	bne.n	8005178 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005130:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005132:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f000 ff65 	bl	8006004 <I2C_WaitOnRXNEFlagUntilTimeout>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e145      	b.n	80053d0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	691a      	ldr	r2, [r3, #16]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514e:	b2d2      	uxtb	r2, r2
 8005150:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005160:	3b01      	subs	r3, #1
 8005162:	b29a      	uxth	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800516c:	b29b      	uxth	r3, r3
 800516e:	3b01      	subs	r3, #1
 8005170:	b29a      	uxth	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005176:	e117      	b.n	80053a8 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800517c:	2b02      	cmp	r3, #2
 800517e:	d14e      	bne.n	800521e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005186:	2200      	movs	r2, #0
 8005188:	4906      	ldr	r1, [pc, #24]	@ (80051a4 <HAL_I2C_Master_Receive+0x22c>)
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f000 fd90 	bl	8005cb0 <I2C_WaitOnFlagUntilTimeout>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d008      	beq.n	80051a8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e11a      	b.n	80053d0 <HAL_I2C_Master_Receive+0x458>
 800519a:	bf00      	nop
 800519c:	00100002 	.word	0x00100002
 80051a0:	ffff0000 	.word	0xffff0000
 80051a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	691a      	ldr	r2, [r3, #16]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c2:	b2d2      	uxtb	r2, r2
 80051c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051d4:	3b01      	subs	r3, #1
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	3b01      	subs	r3, #1
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	691a      	ldr	r2, [r3, #16]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f4:	b2d2      	uxtb	r2, r2
 80051f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fc:	1c5a      	adds	r2, r3, #1
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005206:	3b01      	subs	r3, #1
 8005208:	b29a      	uxth	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005212:	b29b      	uxth	r3, r3
 8005214:	3b01      	subs	r3, #1
 8005216:	b29a      	uxth	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800521c:	e0c4      	b.n	80053a8 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800521e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005220:	9300      	str	r3, [sp, #0]
 8005222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005224:	2200      	movs	r2, #0
 8005226:	496c      	ldr	r1, [pc, #432]	@ (80053d8 <HAL_I2C_Master_Receive+0x460>)
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f000 fd41 	bl	8005cb0 <I2C_WaitOnFlagUntilTimeout>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d001      	beq.n	8005238 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e0cb      	b.n	80053d0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005246:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	691a      	ldr	r2, [r3, #16]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005252:	b2d2      	uxtb	r2, r2
 8005254:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525a:	1c5a      	adds	r2, r3, #1
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005264:	3b01      	subs	r3, #1
 8005266:	b29a      	uxth	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005270:	b29b      	uxth	r3, r3
 8005272:	3b01      	subs	r3, #1
 8005274:	b29a      	uxth	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800527a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527c:	9300      	str	r3, [sp, #0]
 800527e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005280:	2200      	movs	r2, #0
 8005282:	4955      	ldr	r1, [pc, #340]	@ (80053d8 <HAL_I2C_Master_Receive+0x460>)
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f000 fd13 	bl	8005cb0 <I2C_WaitOnFlagUntilTimeout>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e09d      	b.n	80053d0 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	691a      	ldr	r2, [r3, #16]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b6:	1c5a      	adds	r2, r3, #1
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052c0:	3b01      	subs	r3, #1
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	3b01      	subs	r3, #1
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	691a      	ldr	r2, [r3, #16]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e0:	b2d2      	uxtb	r2, r2
 80052e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e8:	1c5a      	adds	r2, r3, #1
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052f2:	3b01      	subs	r3, #1
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052fe:	b29b      	uxth	r3, r3
 8005300:	3b01      	subs	r3, #1
 8005302:	b29a      	uxth	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005308:	e04e      	b.n	80053a8 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800530a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800530c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f000 fe78 	bl	8006004 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d001      	beq.n	800531e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e058      	b.n	80053d0 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005328:	b2d2      	uxtb	r2, r2
 800532a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800533a:	3b01      	subs	r3, #1
 800533c:	b29a      	uxth	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005346:	b29b      	uxth	r3, r3
 8005348:	3b01      	subs	r3, #1
 800534a:	b29a      	uxth	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	f003 0304 	and.w	r3, r3, #4
 800535a:	2b04      	cmp	r3, #4
 800535c:	d124      	bne.n	80053a8 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005362:	2b03      	cmp	r3, #3
 8005364:	d107      	bne.n	8005376 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005374:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	691a      	ldr	r2, [r3, #16]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005388:	1c5a      	adds	r2, r3, #1
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005392:	3b01      	subs	r3, #1
 8005394:	b29a      	uxth	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800539e:	b29b      	uxth	r3, r3
 80053a0:	3b01      	subs	r3, #1
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f47f aeb6 	bne.w	800511e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2220      	movs	r2, #32
 80053b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80053ca:	2300      	movs	r3, #0
 80053cc:	e000      	b.n	80053d0 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80053ce:	2302      	movs	r3, #2
  }
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3728      	adds	r7, #40	@ 0x28
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	00010004 	.word	0x00010004

080053dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b08c      	sub	sp, #48	@ 0x30
 80053e0:	af02      	add	r7, sp, #8
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	4608      	mov	r0, r1
 80053e6:	4611      	mov	r1, r2
 80053e8:	461a      	mov	r2, r3
 80053ea:	4603      	mov	r3, r0
 80053ec:	817b      	strh	r3, [r7, #10]
 80053ee:	460b      	mov	r3, r1
 80053f0:	813b      	strh	r3, [r7, #8]
 80053f2:	4613      	mov	r3, r2
 80053f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053f6:	f7ff f861 	bl	80044bc <HAL_GetTick>
 80053fa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b20      	cmp	r3, #32
 8005406:	f040 8214 	bne.w	8005832 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800540a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	2319      	movs	r3, #25
 8005410:	2201      	movs	r2, #1
 8005412:	497b      	ldr	r1, [pc, #492]	@ (8005600 <HAL_I2C_Mem_Read+0x224>)
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 fc4b 	bl	8005cb0 <I2C_WaitOnFlagUntilTimeout>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d001      	beq.n	8005424 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005420:	2302      	movs	r3, #2
 8005422:	e207      	b.n	8005834 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800542a:	2b01      	cmp	r3, #1
 800542c:	d101      	bne.n	8005432 <HAL_I2C_Mem_Read+0x56>
 800542e:	2302      	movs	r3, #2
 8005430:	e200      	b.n	8005834 <HAL_I2C_Mem_Read+0x458>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0301 	and.w	r3, r3, #1
 8005444:	2b01      	cmp	r3, #1
 8005446:	d007      	beq.n	8005458 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f042 0201 	orr.w	r2, r2, #1
 8005456:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005466:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2222      	movs	r2, #34	@ 0x22
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2240      	movs	r2, #64	@ 0x40
 8005474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005482:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005488:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800548e:	b29a      	uxth	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4a5b      	ldr	r2, [pc, #364]	@ (8005604 <HAL_I2C_Mem_Read+0x228>)
 8005498:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800549a:	88f8      	ldrh	r0, [r7, #6]
 800549c:	893a      	ldrh	r2, [r7, #8]
 800549e:	8979      	ldrh	r1, [r7, #10]
 80054a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a2:	9301      	str	r3, [sp, #4]
 80054a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	4603      	mov	r3, r0
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f000 fb18 	bl	8005ae0 <I2C_RequestMemoryRead>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e1bc      	b.n	8005834 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d113      	bne.n	80054ea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054c2:	2300      	movs	r3, #0
 80054c4:	623b      	str	r3, [r7, #32]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	623b      	str	r3, [r7, #32]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	623b      	str	r3, [r7, #32]
 80054d6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054e6:	601a      	str	r2, [r3, #0]
 80054e8:	e190      	b.n	800580c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d11b      	bne.n	800552a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005500:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005502:	2300      	movs	r3, #0
 8005504:	61fb      	str	r3, [r7, #28]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	61fb      	str	r3, [r7, #28]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	61fb      	str	r3, [r7, #28]
 8005516:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	e170      	b.n	800580c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800552e:	2b02      	cmp	r3, #2
 8005530:	d11b      	bne.n	800556a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005540:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005550:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005552:	2300      	movs	r3, #0
 8005554:	61bb      	str	r3, [r7, #24]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	61bb      	str	r3, [r7, #24]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	61bb      	str	r3, [r7, #24]
 8005566:	69bb      	ldr	r3, [r7, #24]
 8005568:	e150      	b.n	800580c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800556a:	2300      	movs	r3, #0
 800556c:	617b      	str	r3, [r7, #20]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	617b      	str	r3, [r7, #20]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	617b      	str	r3, [r7, #20]
 800557e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005580:	e144      	b.n	800580c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005586:	2b03      	cmp	r3, #3
 8005588:	f200 80f1 	bhi.w	800576e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005590:	2b01      	cmp	r3, #1
 8005592:	d123      	bne.n	80055dc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005594:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005596:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 fd33 	bl	8006004 <I2C_WaitOnRXNEFlagUntilTimeout>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d001      	beq.n	80055a8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e145      	b.n	8005834 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	691a      	ldr	r2, [r3, #16]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ba:	1c5a      	adds	r2, r3, #1
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055c4:	3b01      	subs	r3, #1
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	3b01      	subs	r3, #1
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80055da:	e117      	b.n	800580c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d14e      	bne.n	8005682 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ea:	2200      	movs	r2, #0
 80055ec:	4906      	ldr	r1, [pc, #24]	@ (8005608 <HAL_I2C_Mem_Read+0x22c>)
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f000 fb5e 	bl	8005cb0 <I2C_WaitOnFlagUntilTimeout>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d008      	beq.n	800560c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e11a      	b.n	8005834 <HAL_I2C_Mem_Read+0x458>
 80055fe:	bf00      	nop
 8005600:	00100002 	.word	0x00100002
 8005604:	ffff0000 	.word	0xffff0000
 8005608:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800561a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691a      	ldr	r2, [r3, #16]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562e:	1c5a      	adds	r2, r3, #1
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005638:	3b01      	subs	r3, #1
 800563a:	b29a      	uxth	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005644:	b29b      	uxth	r3, r3
 8005646:	3b01      	subs	r3, #1
 8005648:	b29a      	uxth	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	691a      	ldr	r2, [r3, #16]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005658:	b2d2      	uxtb	r2, r2
 800565a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005660:	1c5a      	adds	r2, r3, #1
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800566a:	3b01      	subs	r3, #1
 800566c:	b29a      	uxth	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005676:	b29b      	uxth	r3, r3
 8005678:	3b01      	subs	r3, #1
 800567a:	b29a      	uxth	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005680:	e0c4      	b.n	800580c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005684:	9300      	str	r3, [sp, #0]
 8005686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005688:	2200      	movs	r2, #0
 800568a:	496c      	ldr	r1, [pc, #432]	@ (800583c <HAL_I2C_Mem_Read+0x460>)
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 fb0f 	bl	8005cb0 <I2C_WaitOnFlagUntilTimeout>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d001      	beq.n	800569c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e0cb      	b.n	8005834 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	691a      	ldr	r2, [r3, #16]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b6:	b2d2      	uxtb	r2, r2
 80056b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056be:	1c5a      	adds	r2, r3, #1
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056c8:	3b01      	subs	r3, #1
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	3b01      	subs	r3, #1
 80056d8:	b29a      	uxth	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80056de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e4:	2200      	movs	r2, #0
 80056e6:	4955      	ldr	r1, [pc, #340]	@ (800583c <HAL_I2C_Mem_Read+0x460>)
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f000 fae1 	bl	8005cb0 <I2C_WaitOnFlagUntilTimeout>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e09d      	b.n	8005834 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005706:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	691a      	ldr	r2, [r3, #16]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005712:	b2d2      	uxtb	r2, r2
 8005714:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005724:	3b01      	subs	r3, #1
 8005726:	b29a      	uxth	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005730:	b29b      	uxth	r3, r3
 8005732:	3b01      	subs	r3, #1
 8005734:	b29a      	uxth	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	691a      	ldr	r2, [r3, #16]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005744:	b2d2      	uxtb	r2, r2
 8005746:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574c:	1c5a      	adds	r2, r3, #1
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005756:	3b01      	subs	r3, #1
 8005758:	b29a      	uxth	r2, r3
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005762:	b29b      	uxth	r3, r3
 8005764:	3b01      	subs	r3, #1
 8005766:	b29a      	uxth	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800576c:	e04e      	b.n	800580c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800576e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005770:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 fc46 	bl	8006004 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e058      	b.n	8005834 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	691a      	ldr	r2, [r3, #16]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578c:	b2d2      	uxtb	r2, r2
 800578e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005794:	1c5a      	adds	r2, r3, #1
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800579e:	3b01      	subs	r3, #1
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	3b01      	subs	r3, #1
 80057ae:	b29a      	uxth	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	f003 0304 	and.w	r3, r3, #4
 80057be:	2b04      	cmp	r3, #4
 80057c0:	d124      	bne.n	800580c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057c6:	2b03      	cmp	r3, #3
 80057c8:	d107      	bne.n	80057da <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057d8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	691a      	ldr	r2, [r3, #16]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e4:	b2d2      	uxtb	r2, r2
 80057e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ec:	1c5a      	adds	r2, r3, #1
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057f6:	3b01      	subs	r3, #1
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005802:	b29b      	uxth	r3, r3
 8005804:	3b01      	subs	r3, #1
 8005806:	b29a      	uxth	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005810:	2b00      	cmp	r3, #0
 8005812:	f47f aeb6 	bne.w	8005582 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2220      	movs	r2, #32
 800581a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800582e:	2300      	movs	r3, #0
 8005830:	e000      	b.n	8005834 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005832:	2302      	movs	r3, #2
  }
}
 8005834:	4618      	mov	r0, r3
 8005836:	3728      	adds	r7, #40	@ 0x28
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	00010004 	.word	0x00010004

08005840 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b088      	sub	sp, #32
 8005844:	af02      	add	r7, sp, #8
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	607a      	str	r2, [r7, #4]
 800584a:	603b      	str	r3, [r7, #0]
 800584c:	460b      	mov	r3, r1
 800584e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005854:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2b08      	cmp	r3, #8
 800585a:	d006      	beq.n	800586a <I2C_MasterRequestWrite+0x2a>
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d003      	beq.n	800586a <I2C_MasterRequestWrite+0x2a>
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005868:	d108      	bne.n	800587c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005878:	601a      	str	r2, [r3, #0]
 800587a:	e00b      	b.n	8005894 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005880:	2b12      	cmp	r3, #18
 8005882:	d107      	bne.n	8005894 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005892:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	9300      	str	r3, [sp, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f000 fa05 	bl	8005cb0 <I2C_WaitOnFlagUntilTimeout>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00d      	beq.n	80058c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058ba:	d103      	bne.n	80058c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058c2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	e035      	b.n	8005934 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058d0:	d108      	bne.n	80058e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80058d2:	897b      	ldrh	r3, [r7, #10]
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	461a      	mov	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80058e0:	611a      	str	r2, [r3, #16]
 80058e2:	e01b      	b.n	800591c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80058e4:	897b      	ldrh	r3, [r7, #10]
 80058e6:	11db      	asrs	r3, r3, #7
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	f003 0306 	and.w	r3, r3, #6
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	f063 030f 	orn	r3, r3, #15
 80058f4:	b2da      	uxtb	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	490e      	ldr	r1, [pc, #56]	@ (800593c <I2C_MasterRequestWrite+0xfc>)
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f000 fa4e 	bl	8005da4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e010      	b.n	8005934 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005912:	897b      	ldrh	r3, [r7, #10]
 8005914:	b2da      	uxtb	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	4907      	ldr	r1, [pc, #28]	@ (8005940 <I2C_MasterRequestWrite+0x100>)
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f000 fa3e 	bl	8005da4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005928:	4603      	mov	r3, r0
 800592a:	2b00      	cmp	r3, #0
 800592c:	d001      	beq.n	8005932 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e000      	b.n	8005934 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3718      	adds	r7, #24
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	00010008 	.word	0x00010008
 8005940:	00010002 	.word	0x00010002

08005944 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b088      	sub	sp, #32
 8005948:	af02      	add	r7, sp, #8
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	607a      	str	r2, [r7, #4]
 800594e:	603b      	str	r3, [r7, #0]
 8005950:	460b      	mov	r3, r1
 8005952:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005958:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005968:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	2b08      	cmp	r3, #8
 800596e:	d006      	beq.n	800597e <I2C_MasterRequestRead+0x3a>
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	2b01      	cmp	r3, #1
 8005974:	d003      	beq.n	800597e <I2C_MasterRequestRead+0x3a>
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800597c:	d108      	bne.n	8005990 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800598c:	601a      	str	r2, [r3, #0]
 800598e:	e00b      	b.n	80059a8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005994:	2b11      	cmp	r3, #17
 8005996:	d107      	bne.n	80059a8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 f97b 	bl	8005cb0 <I2C_WaitOnFlagUntilTimeout>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d00d      	beq.n	80059dc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059ce:	d103      	bne.n	80059d8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e079      	b.n	8005ad0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059e4:	d108      	bne.n	80059f8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80059e6:	897b      	ldrh	r3, [r7, #10]
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	f043 0301 	orr.w	r3, r3, #1
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	611a      	str	r2, [r3, #16]
 80059f6:	e05f      	b.n	8005ab8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80059f8:	897b      	ldrh	r3, [r7, #10]
 80059fa:	11db      	asrs	r3, r3, #7
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	f003 0306 	and.w	r3, r3, #6
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	f063 030f 	orn	r3, r3, #15
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	4930      	ldr	r1, [pc, #192]	@ (8005ad8 <I2C_MasterRequestRead+0x194>)
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f000 f9c4 	bl	8005da4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e054      	b.n	8005ad0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005a26:	897b      	ldrh	r3, [r7, #10]
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	4929      	ldr	r1, [pc, #164]	@ (8005adc <I2C_MasterRequestRead+0x198>)
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f000 f9b4 	bl	8005da4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e044      	b.n	8005ad0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a46:	2300      	movs	r3, #0
 8005a48:	613b      	str	r3, [r7, #16]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	613b      	str	r3, [r7, #16]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	613b      	str	r3, [r7, #16]
 8005a5a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a6a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f000 f919 	bl	8005cb0 <I2C_WaitOnFlagUntilTimeout>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00d      	beq.n	8005aa0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a92:	d103      	bne.n	8005a9c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a9a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e017      	b.n	8005ad0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005aa0:	897b      	ldrh	r3, [r7, #10]
 8005aa2:	11db      	asrs	r3, r3, #7
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	f003 0306 	and.w	r3, r3, #6
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	f063 030e 	orn	r3, r3, #14
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	4907      	ldr	r1, [pc, #28]	@ (8005adc <I2C_MasterRequestRead+0x198>)
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f000 f970 	bl	8005da4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e000      	b.n	8005ad0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3718      	adds	r7, #24
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	00010008 	.word	0x00010008
 8005adc:	00010002 	.word	0x00010002

08005ae0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b088      	sub	sp, #32
 8005ae4:	af02      	add	r7, sp, #8
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	4608      	mov	r0, r1
 8005aea:	4611      	mov	r1, r2
 8005aec:	461a      	mov	r2, r3
 8005aee:	4603      	mov	r3, r0
 8005af0:	817b      	strh	r3, [r7, #10]
 8005af2:	460b      	mov	r3, r1
 8005af4:	813b      	strh	r3, [r7, #8]
 8005af6:	4613      	mov	r3, r2
 8005af8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005b08:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b18:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f000 f8c2 	bl	8005cb0 <I2C_WaitOnFlagUntilTimeout>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d00d      	beq.n	8005b4e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b3c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b40:	d103      	bne.n	8005b4a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b48:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005b4a:	2303      	movs	r3, #3
 8005b4c:	e0aa      	b.n	8005ca4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b4e:	897b      	ldrh	r3, [r7, #10]
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	461a      	mov	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005b5c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b60:	6a3a      	ldr	r2, [r7, #32]
 8005b62:	4952      	ldr	r1, [pc, #328]	@ (8005cac <I2C_RequestMemoryRead+0x1cc>)
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 f91d 	bl	8005da4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d001      	beq.n	8005b74 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e097      	b.n	8005ca4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b74:	2300      	movs	r3, #0
 8005b76:	617b      	str	r3, [r7, #20]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	617b      	str	r3, [r7, #20]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	699b      	ldr	r3, [r3, #24]
 8005b86:	617b      	str	r3, [r7, #20]
 8005b88:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b8c:	6a39      	ldr	r1, [r7, #32]
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f000 f9a8 	bl	8005ee4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00d      	beq.n	8005bb6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	d107      	bne.n	8005bb2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bb0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e076      	b.n	8005ca4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005bb6:	88fb      	ldrh	r3, [r7, #6]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d105      	bne.n	8005bc8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005bbc:	893b      	ldrh	r3, [r7, #8]
 8005bbe:	b2da      	uxtb	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	611a      	str	r2, [r3, #16]
 8005bc6:	e021      	b.n	8005c0c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005bc8:	893b      	ldrh	r3, [r7, #8]
 8005bca:	0a1b      	lsrs	r3, r3, #8
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	b2da      	uxtb	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bd8:	6a39      	ldr	r1, [r7, #32]
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f000 f982 	bl	8005ee4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005be0:	4603      	mov	r3, r0
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00d      	beq.n	8005c02 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	d107      	bne.n	8005bfe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bfc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e050      	b.n	8005ca4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c02:	893b      	ldrh	r3, [r7, #8]
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c0e:	6a39      	ldr	r1, [r7, #32]
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 f967 	bl	8005ee4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00d      	beq.n	8005c38 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c20:	2b04      	cmp	r3, #4
 8005c22:	d107      	bne.n	8005c34 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c32:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e035      	b.n	8005ca4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c46:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f000 f82b 	bl	8005cb0 <I2C_WaitOnFlagUntilTimeout>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00d      	beq.n	8005c7c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c6e:	d103      	bne.n	8005c78 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c76:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e013      	b.n	8005ca4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005c7c:	897b      	ldrh	r3, [r7, #10]
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	f043 0301 	orr.w	r3, r3, #1
 8005c84:	b2da      	uxtb	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8e:	6a3a      	ldr	r2, [r7, #32]
 8005c90:	4906      	ldr	r1, [pc, #24]	@ (8005cac <I2C_RequestMemoryRead+0x1cc>)
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f000 f886 	bl	8005da4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e000      	b.n	8005ca4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005ca2:	2300      	movs	r3, #0
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3718      	adds	r7, #24
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	00010002 	.word	0x00010002

08005cb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	603b      	str	r3, [r7, #0]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005cc0:	e048      	b.n	8005d54 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc8:	d044      	beq.n	8005d54 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cca:	f7fe fbf7 	bl	80044bc <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d302      	bcc.n	8005ce0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d139      	bne.n	8005d54 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	0c1b      	lsrs	r3, r3, #16
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d10d      	bne.n	8005d06 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	43da      	mvns	r2, r3
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	bf0c      	ite	eq
 8005cfc:	2301      	moveq	r3, #1
 8005cfe:	2300      	movne	r3, #0
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	461a      	mov	r2, r3
 8005d04:	e00c      	b.n	8005d20 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	43da      	mvns	r2, r3
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	4013      	ands	r3, r2
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	bf0c      	ite	eq
 8005d18:	2301      	moveq	r3, #1
 8005d1a:	2300      	movne	r3, #0
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	461a      	mov	r2, r3
 8005d20:	79fb      	ldrb	r3, [r7, #7]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d116      	bne.n	8005d54 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d40:	f043 0220 	orr.w	r2, r3, #32
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e023      	b.n	8005d9c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	0c1b      	lsrs	r3, r3, #16
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d10d      	bne.n	8005d7a <I2C_WaitOnFlagUntilTimeout+0xca>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	43da      	mvns	r2, r3
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	4013      	ands	r3, r2
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	bf0c      	ite	eq
 8005d70:	2301      	moveq	r3, #1
 8005d72:	2300      	movne	r3, #0
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	461a      	mov	r2, r3
 8005d78:	e00c      	b.n	8005d94 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	43da      	mvns	r2, r3
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	4013      	ands	r3, r2
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	bf0c      	ite	eq
 8005d8c:	2301      	moveq	r3, #1
 8005d8e:	2300      	movne	r3, #0
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	461a      	mov	r2, r3
 8005d94:	79fb      	ldrb	r3, [r7, #7]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d093      	beq.n	8005cc2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3710      	adds	r7, #16
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
 8005db0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005db2:	e071      	b.n	8005e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dc2:	d123      	bne.n	8005e0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dd2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005ddc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2220      	movs	r2, #32
 8005de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df8:	f043 0204 	orr.w	r2, r3, #4
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e067      	b.n	8005edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e12:	d041      	beq.n	8005e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e14:	f7fe fb52 	bl	80044bc <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d302      	bcc.n	8005e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d136      	bne.n	8005e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	0c1b      	lsrs	r3, r3, #16
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d10c      	bne.n	8005e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	43da      	mvns	r2, r3
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	4013      	ands	r3, r2
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	bf14      	ite	ne
 8005e46:	2301      	movne	r3, #1
 8005e48:	2300      	moveq	r3, #0
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	e00b      	b.n	8005e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	43da      	mvns	r2, r3
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	4013      	ands	r3, r2
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	bf14      	ite	ne
 8005e60:	2301      	movne	r3, #1
 8005e62:	2300      	moveq	r3, #0
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d016      	beq.n	8005e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2220      	movs	r2, #32
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e84:	f043 0220 	orr.w	r2, r3, #32
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e021      	b.n	8005edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	0c1b      	lsrs	r3, r3, #16
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d10c      	bne.n	8005ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	43da      	mvns	r2, r3
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	4013      	ands	r3, r2
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	bf14      	ite	ne
 8005eb4:	2301      	movne	r3, #1
 8005eb6:	2300      	moveq	r3, #0
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	e00b      	b.n	8005ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	43da      	mvns	r2, r3
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	bf14      	ite	ne
 8005ece:	2301      	movne	r3, #1
 8005ed0:	2300      	moveq	r3, #0
 8005ed2:	b2db      	uxtb	r3, r3
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f47f af6d 	bne.w	8005db4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005eda:	2300      	movs	r3, #0
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ef0:	e034      	b.n	8005f5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 f8e3 	bl	80060be <I2C_IsAcknowledgeFailed>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d001      	beq.n	8005f02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e034      	b.n	8005f6c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f08:	d028      	beq.n	8005f5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f0a:	f7fe fad7 	bl	80044bc <HAL_GetTick>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d302      	bcc.n	8005f20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d11d      	bne.n	8005f5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	695b      	ldr	r3, [r3, #20]
 8005f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f2a:	2b80      	cmp	r3, #128	@ 0x80
 8005f2c:	d016      	beq.n	8005f5c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2220      	movs	r2, #32
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f48:	f043 0220 	orr.w	r2, r3, #32
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e007      	b.n	8005f6c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f66:	2b80      	cmp	r3, #128	@ 0x80
 8005f68:	d1c3      	bne.n	8005ef2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005f80:	e034      	b.n	8005fec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f000 f89b 	bl	80060be <I2C_IsAcknowledgeFailed>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e034      	b.n	8005ffc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f98:	d028      	beq.n	8005fec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f9a:	f7fe fa8f 	bl	80044bc <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d302      	bcc.n	8005fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d11d      	bne.n	8005fec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	f003 0304 	and.w	r3, r3, #4
 8005fba:	2b04      	cmp	r3, #4
 8005fbc:	d016      	beq.n	8005fec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd8:	f043 0220 	orr.w	r2, r3, #32
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e007      	b.n	8005ffc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	f003 0304 	and.w	r3, r3, #4
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	d1c3      	bne.n	8005f82 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006010:	e049      	b.n	80060a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	f003 0310 	and.w	r3, r3, #16
 800601c:	2b10      	cmp	r3, #16
 800601e:	d119      	bne.n	8006054 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f06f 0210 	mvn.w	r2, #16
 8006028:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2220      	movs	r2, #32
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e030      	b.n	80060b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006054:	f7fe fa32 	bl	80044bc <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	429a      	cmp	r2, r3
 8006062:	d302      	bcc.n	800606a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d11d      	bne.n	80060a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006074:	2b40      	cmp	r3, #64	@ 0x40
 8006076:	d016      	beq.n	80060a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2220      	movs	r2, #32
 8006082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006092:	f043 0220 	orr.w	r2, r3, #32
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e007      	b.n	80060b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060b0:	2b40      	cmp	r3, #64	@ 0x40
 80060b2:	d1ae      	bne.n	8006012 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80060be:	b480      	push	{r7}
 80060c0:	b083      	sub	sp, #12
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	695b      	ldr	r3, [r3, #20]
 80060cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060d4:	d11b      	bne.n	800610e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80060de:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2220      	movs	r2, #32
 80060ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060fa:	f043 0204 	orr.w	r2, r3, #4
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e000      	b.n	8006110 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b086      	sub	sp, #24
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e267      	b.n	80065fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b00      	cmp	r3, #0
 8006138:	d075      	beq.n	8006226 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800613a:	4b88      	ldr	r3, [pc, #544]	@ (800635c <HAL_RCC_OscConfig+0x240>)
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f003 030c 	and.w	r3, r3, #12
 8006142:	2b04      	cmp	r3, #4
 8006144:	d00c      	beq.n	8006160 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006146:	4b85      	ldr	r3, [pc, #532]	@ (800635c <HAL_RCC_OscConfig+0x240>)
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800614e:	2b08      	cmp	r3, #8
 8006150:	d112      	bne.n	8006178 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006152:	4b82      	ldr	r3, [pc, #520]	@ (800635c <HAL_RCC_OscConfig+0x240>)
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800615a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800615e:	d10b      	bne.n	8006178 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006160:	4b7e      	ldr	r3, [pc, #504]	@ (800635c <HAL_RCC_OscConfig+0x240>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d05b      	beq.n	8006224 <HAL_RCC_OscConfig+0x108>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d157      	bne.n	8006224 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e242      	b.n	80065fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006180:	d106      	bne.n	8006190 <HAL_RCC_OscConfig+0x74>
 8006182:	4b76      	ldr	r3, [pc, #472]	@ (800635c <HAL_RCC_OscConfig+0x240>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a75      	ldr	r2, [pc, #468]	@ (800635c <HAL_RCC_OscConfig+0x240>)
 8006188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800618c:	6013      	str	r3, [r2, #0]
 800618e:	e01d      	b.n	80061cc <HAL_RCC_OscConfig+0xb0>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006198:	d10c      	bne.n	80061b4 <HAL_RCC_OscConfig+0x98>
 800619a:	4b70      	ldr	r3, [pc, #448]	@ (800635c <HAL_RCC_OscConfig+0x240>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a6f      	ldr	r2, [pc, #444]	@ (800635c <HAL_RCC_OscConfig+0x240>)
 80061a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80061a4:	6013      	str	r3, [r2, #0]
 80061a6:	4b6d      	ldr	r3, [pc, #436]	@ (800635c <HAL_RCC_OscConfig+0x240>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a6c      	ldr	r2, [pc, #432]	@ (800635c <HAL_RCC_OscConfig+0x240>)
 80061ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061b0:	6013      	str	r3, [r2, #0]
 80061b2:	e00b      	b.n	80061cc <HAL_RCC_OscConfig+0xb0>
 80061b4:	4b69      	ldr	r3, [pc, #420]	@ (800635c <HAL_RCC_OscConfig+0x240>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a68      	ldr	r2, [pc, #416]	@ (800635c <HAL_RCC_OscConfig+0x240>)
 80061ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061be:	6013      	str	r3, [r2, #0]
 80061c0:	4b66      	ldr	r3, [pc, #408]	@ (800635c <HAL_RCC_OscConfig+0x240>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a65      	ldr	r2, [pc, #404]	@ (800635c <HAL_RCC_OscConfig+0x240>)
 80061c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d013      	beq.n	80061fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061d4:	f7fe f972 	bl	80044bc <HAL_GetTick>
 80061d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061da:	e008      	b.n	80061ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80061dc:	f7fe f96e 	bl	80044bc <HAL_GetTick>
 80061e0:	4602      	mov	r2, r0
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	2b64      	cmp	r3, #100	@ 0x64
 80061e8:	d901      	bls.n	80061ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e207      	b.n	80065fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061ee:	4b5b      	ldr	r3, [pc, #364]	@ (800635c <HAL_RCC_OscConfig+0x240>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d0f0      	beq.n	80061dc <HAL_RCC_OscConfig+0xc0>
 80061fa:	e014      	b.n	8006226 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061fc:	f7fe f95e 	bl	80044bc <HAL_GetTick>
 8006200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006202:	e008      	b.n	8006216 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006204:	f7fe f95a 	bl	80044bc <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	2b64      	cmp	r3, #100	@ 0x64
 8006210:	d901      	bls.n	8006216 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	e1f3      	b.n	80065fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006216:	4b51      	ldr	r3, [pc, #324]	@ (800635c <HAL_RCC_OscConfig+0x240>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1f0      	bne.n	8006204 <HAL_RCC_OscConfig+0xe8>
 8006222:	e000      	b.n	8006226 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0302 	and.w	r3, r3, #2
 800622e:	2b00      	cmp	r3, #0
 8006230:	d063      	beq.n	80062fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006232:	4b4a      	ldr	r3, [pc, #296]	@ (800635c <HAL_RCC_OscConfig+0x240>)
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f003 030c 	and.w	r3, r3, #12
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00b      	beq.n	8006256 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800623e:	4b47      	ldr	r3, [pc, #284]	@ (800635c <HAL_RCC_OscConfig+0x240>)
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006246:	2b08      	cmp	r3, #8
 8006248:	d11c      	bne.n	8006284 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800624a:	4b44      	ldr	r3, [pc, #272]	@ (800635c <HAL_RCC_OscConfig+0x240>)
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d116      	bne.n	8006284 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006256:	4b41      	ldr	r3, [pc, #260]	@ (800635c <HAL_RCC_OscConfig+0x240>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b00      	cmp	r3, #0
 8006260:	d005      	beq.n	800626e <HAL_RCC_OscConfig+0x152>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d001      	beq.n	800626e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e1c7      	b.n	80065fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800626e:	4b3b      	ldr	r3, [pc, #236]	@ (800635c <HAL_RCC_OscConfig+0x240>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	00db      	lsls	r3, r3, #3
 800627c:	4937      	ldr	r1, [pc, #220]	@ (800635c <HAL_RCC_OscConfig+0x240>)
 800627e:	4313      	orrs	r3, r2
 8006280:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006282:	e03a      	b.n	80062fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d020      	beq.n	80062ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800628c:	4b34      	ldr	r3, [pc, #208]	@ (8006360 <HAL_RCC_OscConfig+0x244>)
 800628e:	2201      	movs	r2, #1
 8006290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006292:	f7fe f913 	bl	80044bc <HAL_GetTick>
 8006296:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006298:	e008      	b.n	80062ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800629a:	f7fe f90f 	bl	80044bc <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d901      	bls.n	80062ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e1a8      	b.n	80065fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062ac:	4b2b      	ldr	r3, [pc, #172]	@ (800635c <HAL_RCC_OscConfig+0x240>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0302 	and.w	r3, r3, #2
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d0f0      	beq.n	800629a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062b8:	4b28      	ldr	r3, [pc, #160]	@ (800635c <HAL_RCC_OscConfig+0x240>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	00db      	lsls	r3, r3, #3
 80062c6:	4925      	ldr	r1, [pc, #148]	@ (800635c <HAL_RCC_OscConfig+0x240>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	600b      	str	r3, [r1, #0]
 80062cc:	e015      	b.n	80062fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80062ce:	4b24      	ldr	r3, [pc, #144]	@ (8006360 <HAL_RCC_OscConfig+0x244>)
 80062d0:	2200      	movs	r2, #0
 80062d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062d4:	f7fe f8f2 	bl	80044bc <HAL_GetTick>
 80062d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062da:	e008      	b.n	80062ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062dc:	f7fe f8ee 	bl	80044bc <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e187      	b.n	80065fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062ee:	4b1b      	ldr	r3, [pc, #108]	@ (800635c <HAL_RCC_OscConfig+0x240>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1f0      	bne.n	80062dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0308 	and.w	r3, r3, #8
 8006302:	2b00      	cmp	r3, #0
 8006304:	d036      	beq.n	8006374 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	695b      	ldr	r3, [r3, #20]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d016      	beq.n	800633c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800630e:	4b15      	ldr	r3, [pc, #84]	@ (8006364 <HAL_RCC_OscConfig+0x248>)
 8006310:	2201      	movs	r2, #1
 8006312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006314:	f7fe f8d2 	bl	80044bc <HAL_GetTick>
 8006318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800631a:	e008      	b.n	800632e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800631c:	f7fe f8ce 	bl	80044bc <HAL_GetTick>
 8006320:	4602      	mov	r2, r0
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	1ad3      	subs	r3, r2, r3
 8006326:	2b02      	cmp	r3, #2
 8006328:	d901      	bls.n	800632e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e167      	b.n	80065fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800632e:	4b0b      	ldr	r3, [pc, #44]	@ (800635c <HAL_RCC_OscConfig+0x240>)
 8006330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006332:	f003 0302 	and.w	r3, r3, #2
 8006336:	2b00      	cmp	r3, #0
 8006338:	d0f0      	beq.n	800631c <HAL_RCC_OscConfig+0x200>
 800633a:	e01b      	b.n	8006374 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800633c:	4b09      	ldr	r3, [pc, #36]	@ (8006364 <HAL_RCC_OscConfig+0x248>)
 800633e:	2200      	movs	r2, #0
 8006340:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006342:	f7fe f8bb 	bl	80044bc <HAL_GetTick>
 8006346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006348:	e00e      	b.n	8006368 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800634a:	f7fe f8b7 	bl	80044bc <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	2b02      	cmp	r3, #2
 8006356:	d907      	bls.n	8006368 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e150      	b.n	80065fe <HAL_RCC_OscConfig+0x4e2>
 800635c:	40023800 	.word	0x40023800
 8006360:	42470000 	.word	0x42470000
 8006364:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006368:	4b88      	ldr	r3, [pc, #544]	@ (800658c <HAL_RCC_OscConfig+0x470>)
 800636a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800636c:	f003 0302 	and.w	r3, r3, #2
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1ea      	bne.n	800634a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0304 	and.w	r3, r3, #4
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 8097 	beq.w	80064b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006382:	2300      	movs	r3, #0
 8006384:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006386:	4b81      	ldr	r3, [pc, #516]	@ (800658c <HAL_RCC_OscConfig+0x470>)
 8006388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800638a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10f      	bne.n	80063b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006392:	2300      	movs	r3, #0
 8006394:	60bb      	str	r3, [r7, #8]
 8006396:	4b7d      	ldr	r3, [pc, #500]	@ (800658c <HAL_RCC_OscConfig+0x470>)
 8006398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800639a:	4a7c      	ldr	r2, [pc, #496]	@ (800658c <HAL_RCC_OscConfig+0x470>)
 800639c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80063a2:	4b7a      	ldr	r3, [pc, #488]	@ (800658c <HAL_RCC_OscConfig+0x470>)
 80063a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063aa:	60bb      	str	r3, [r7, #8]
 80063ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063ae:	2301      	movs	r3, #1
 80063b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063b2:	4b77      	ldr	r3, [pc, #476]	@ (8006590 <HAL_RCC_OscConfig+0x474>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d118      	bne.n	80063f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063be:	4b74      	ldr	r3, [pc, #464]	@ (8006590 <HAL_RCC_OscConfig+0x474>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a73      	ldr	r2, [pc, #460]	@ (8006590 <HAL_RCC_OscConfig+0x474>)
 80063c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80063ca:	f7fe f877 	bl	80044bc <HAL_GetTick>
 80063ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063d0:	e008      	b.n	80063e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063d2:	f7fe f873 	bl	80044bc <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d901      	bls.n	80063e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e10c      	b.n	80065fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063e4:	4b6a      	ldr	r3, [pc, #424]	@ (8006590 <HAL_RCC_OscConfig+0x474>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d0f0      	beq.n	80063d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d106      	bne.n	8006406 <HAL_RCC_OscConfig+0x2ea>
 80063f8:	4b64      	ldr	r3, [pc, #400]	@ (800658c <HAL_RCC_OscConfig+0x470>)
 80063fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063fc:	4a63      	ldr	r2, [pc, #396]	@ (800658c <HAL_RCC_OscConfig+0x470>)
 80063fe:	f043 0301 	orr.w	r3, r3, #1
 8006402:	6713      	str	r3, [r2, #112]	@ 0x70
 8006404:	e01c      	b.n	8006440 <HAL_RCC_OscConfig+0x324>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	2b05      	cmp	r3, #5
 800640c:	d10c      	bne.n	8006428 <HAL_RCC_OscConfig+0x30c>
 800640e:	4b5f      	ldr	r3, [pc, #380]	@ (800658c <HAL_RCC_OscConfig+0x470>)
 8006410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006412:	4a5e      	ldr	r2, [pc, #376]	@ (800658c <HAL_RCC_OscConfig+0x470>)
 8006414:	f043 0304 	orr.w	r3, r3, #4
 8006418:	6713      	str	r3, [r2, #112]	@ 0x70
 800641a:	4b5c      	ldr	r3, [pc, #368]	@ (800658c <HAL_RCC_OscConfig+0x470>)
 800641c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800641e:	4a5b      	ldr	r2, [pc, #364]	@ (800658c <HAL_RCC_OscConfig+0x470>)
 8006420:	f043 0301 	orr.w	r3, r3, #1
 8006424:	6713      	str	r3, [r2, #112]	@ 0x70
 8006426:	e00b      	b.n	8006440 <HAL_RCC_OscConfig+0x324>
 8006428:	4b58      	ldr	r3, [pc, #352]	@ (800658c <HAL_RCC_OscConfig+0x470>)
 800642a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800642c:	4a57      	ldr	r2, [pc, #348]	@ (800658c <HAL_RCC_OscConfig+0x470>)
 800642e:	f023 0301 	bic.w	r3, r3, #1
 8006432:	6713      	str	r3, [r2, #112]	@ 0x70
 8006434:	4b55      	ldr	r3, [pc, #340]	@ (800658c <HAL_RCC_OscConfig+0x470>)
 8006436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006438:	4a54      	ldr	r2, [pc, #336]	@ (800658c <HAL_RCC_OscConfig+0x470>)
 800643a:	f023 0304 	bic.w	r3, r3, #4
 800643e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d015      	beq.n	8006474 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006448:	f7fe f838 	bl	80044bc <HAL_GetTick>
 800644c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800644e:	e00a      	b.n	8006466 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006450:	f7fe f834 	bl	80044bc <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800645e:	4293      	cmp	r3, r2
 8006460:	d901      	bls.n	8006466 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e0cb      	b.n	80065fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006466:	4b49      	ldr	r3, [pc, #292]	@ (800658c <HAL_RCC_OscConfig+0x470>)
 8006468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d0ee      	beq.n	8006450 <HAL_RCC_OscConfig+0x334>
 8006472:	e014      	b.n	800649e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006474:	f7fe f822 	bl	80044bc <HAL_GetTick>
 8006478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800647a:	e00a      	b.n	8006492 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800647c:	f7fe f81e 	bl	80044bc <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	f241 3288 	movw	r2, #5000	@ 0x1388
 800648a:	4293      	cmp	r3, r2
 800648c:	d901      	bls.n	8006492 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e0b5      	b.n	80065fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006492:	4b3e      	ldr	r3, [pc, #248]	@ (800658c <HAL_RCC_OscConfig+0x470>)
 8006494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1ee      	bne.n	800647c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800649e:	7dfb      	ldrb	r3, [r7, #23]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d105      	bne.n	80064b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064a4:	4b39      	ldr	r3, [pc, #228]	@ (800658c <HAL_RCC_OscConfig+0x470>)
 80064a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a8:	4a38      	ldr	r2, [pc, #224]	@ (800658c <HAL_RCC_OscConfig+0x470>)
 80064aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80064ae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 80a1 	beq.w	80065fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80064ba:	4b34      	ldr	r3, [pc, #208]	@ (800658c <HAL_RCC_OscConfig+0x470>)
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f003 030c 	and.w	r3, r3, #12
 80064c2:	2b08      	cmp	r3, #8
 80064c4:	d05c      	beq.n	8006580 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d141      	bne.n	8006552 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064ce:	4b31      	ldr	r3, [pc, #196]	@ (8006594 <HAL_RCC_OscConfig+0x478>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064d4:	f7fd fff2 	bl	80044bc <HAL_GetTick>
 80064d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064da:	e008      	b.n	80064ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064dc:	f7fd ffee 	bl	80044bc <HAL_GetTick>
 80064e0:	4602      	mov	r2, r0
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	1ad3      	subs	r3, r2, r3
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d901      	bls.n	80064ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80064ea:	2303      	movs	r3, #3
 80064ec:	e087      	b.n	80065fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064ee:	4b27      	ldr	r3, [pc, #156]	@ (800658c <HAL_RCC_OscConfig+0x470>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1f0      	bne.n	80064dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	69da      	ldr	r2, [r3, #28]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	431a      	orrs	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006508:	019b      	lsls	r3, r3, #6
 800650a:	431a      	orrs	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006510:	085b      	lsrs	r3, r3, #1
 8006512:	3b01      	subs	r3, #1
 8006514:	041b      	lsls	r3, r3, #16
 8006516:	431a      	orrs	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800651c:	061b      	lsls	r3, r3, #24
 800651e:	491b      	ldr	r1, [pc, #108]	@ (800658c <HAL_RCC_OscConfig+0x470>)
 8006520:	4313      	orrs	r3, r2
 8006522:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006524:	4b1b      	ldr	r3, [pc, #108]	@ (8006594 <HAL_RCC_OscConfig+0x478>)
 8006526:	2201      	movs	r2, #1
 8006528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800652a:	f7fd ffc7 	bl	80044bc <HAL_GetTick>
 800652e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006530:	e008      	b.n	8006544 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006532:	f7fd ffc3 	bl	80044bc <HAL_GetTick>
 8006536:	4602      	mov	r2, r0
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	2b02      	cmp	r3, #2
 800653e:	d901      	bls.n	8006544 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	e05c      	b.n	80065fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006544:	4b11      	ldr	r3, [pc, #68]	@ (800658c <HAL_RCC_OscConfig+0x470>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800654c:	2b00      	cmp	r3, #0
 800654e:	d0f0      	beq.n	8006532 <HAL_RCC_OscConfig+0x416>
 8006550:	e054      	b.n	80065fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006552:	4b10      	ldr	r3, [pc, #64]	@ (8006594 <HAL_RCC_OscConfig+0x478>)
 8006554:	2200      	movs	r2, #0
 8006556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006558:	f7fd ffb0 	bl	80044bc <HAL_GetTick>
 800655c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800655e:	e008      	b.n	8006572 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006560:	f7fd ffac 	bl	80044bc <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	2b02      	cmp	r3, #2
 800656c:	d901      	bls.n	8006572 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e045      	b.n	80065fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006572:	4b06      	ldr	r3, [pc, #24]	@ (800658c <HAL_RCC_OscConfig+0x470>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1f0      	bne.n	8006560 <HAL_RCC_OscConfig+0x444>
 800657e:	e03d      	b.n	80065fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d107      	bne.n	8006598 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e038      	b.n	80065fe <HAL_RCC_OscConfig+0x4e2>
 800658c:	40023800 	.word	0x40023800
 8006590:	40007000 	.word	0x40007000
 8006594:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006598:	4b1b      	ldr	r3, [pc, #108]	@ (8006608 <HAL_RCC_OscConfig+0x4ec>)
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d028      	beq.n	80065f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d121      	bne.n	80065f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065be:	429a      	cmp	r2, r3
 80065c0:	d11a      	bne.n	80065f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80065c8:	4013      	ands	r3, r2
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80065ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d111      	bne.n	80065f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065de:	085b      	lsrs	r3, r3, #1
 80065e0:	3b01      	subs	r3, #1
 80065e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d107      	bne.n	80065f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d001      	beq.n	80065fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e000      	b.n	80065fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3718      	adds	r7, #24
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	40023800 	.word	0x40023800

0800660c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d101      	bne.n	8006620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e0cc      	b.n	80067ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006620:	4b68      	ldr	r3, [pc, #416]	@ (80067c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0307 	and.w	r3, r3, #7
 8006628:	683a      	ldr	r2, [r7, #0]
 800662a:	429a      	cmp	r2, r3
 800662c:	d90c      	bls.n	8006648 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800662e:	4b65      	ldr	r3, [pc, #404]	@ (80067c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	b2d2      	uxtb	r2, r2
 8006634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006636:	4b63      	ldr	r3, [pc, #396]	@ (80067c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0307 	and.w	r3, r3, #7
 800663e:	683a      	ldr	r2, [r7, #0]
 8006640:	429a      	cmp	r2, r3
 8006642:	d001      	beq.n	8006648 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	e0b8      	b.n	80067ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0302 	and.w	r3, r3, #2
 8006650:	2b00      	cmp	r3, #0
 8006652:	d020      	beq.n	8006696 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0304 	and.w	r3, r3, #4
 800665c:	2b00      	cmp	r3, #0
 800665e:	d005      	beq.n	800666c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006660:	4b59      	ldr	r3, [pc, #356]	@ (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	4a58      	ldr	r2, [pc, #352]	@ (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006666:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800666a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0308 	and.w	r3, r3, #8
 8006674:	2b00      	cmp	r3, #0
 8006676:	d005      	beq.n	8006684 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006678:	4b53      	ldr	r3, [pc, #332]	@ (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	4a52      	ldr	r2, [pc, #328]	@ (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 800667e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006682:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006684:	4b50      	ldr	r3, [pc, #320]	@ (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	494d      	ldr	r1, [pc, #308]	@ (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006692:	4313      	orrs	r3, r2
 8006694:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d044      	beq.n	800672c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d107      	bne.n	80066ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066aa:	4b47      	ldr	r3, [pc, #284]	@ (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d119      	bne.n	80066ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e07f      	b.n	80067ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	2b02      	cmp	r3, #2
 80066c0:	d003      	beq.n	80066ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066c6:	2b03      	cmp	r3, #3
 80066c8:	d107      	bne.n	80066da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066ca:	4b3f      	ldr	r3, [pc, #252]	@ (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d109      	bne.n	80066ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	e06f      	b.n	80067ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066da:	4b3b      	ldr	r3, [pc, #236]	@ (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0302 	and.w	r3, r3, #2
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e067      	b.n	80067ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066ea:	4b37      	ldr	r3, [pc, #220]	@ (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f023 0203 	bic.w	r2, r3, #3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	4934      	ldr	r1, [pc, #208]	@ (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 80066f8:	4313      	orrs	r3, r2
 80066fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066fc:	f7fd fede 	bl	80044bc <HAL_GetTick>
 8006700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006702:	e00a      	b.n	800671a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006704:	f7fd feda 	bl	80044bc <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006712:	4293      	cmp	r3, r2
 8006714:	d901      	bls.n	800671a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e04f      	b.n	80067ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800671a:	4b2b      	ldr	r3, [pc, #172]	@ (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f003 020c 	and.w	r2, r3, #12
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	429a      	cmp	r2, r3
 800672a:	d1eb      	bne.n	8006704 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800672c:	4b25      	ldr	r3, [pc, #148]	@ (80067c4 <HAL_RCC_ClockConfig+0x1b8>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0307 	and.w	r3, r3, #7
 8006734:	683a      	ldr	r2, [r7, #0]
 8006736:	429a      	cmp	r2, r3
 8006738:	d20c      	bcs.n	8006754 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800673a:	4b22      	ldr	r3, [pc, #136]	@ (80067c4 <HAL_RCC_ClockConfig+0x1b8>)
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	b2d2      	uxtb	r2, r2
 8006740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006742:	4b20      	ldr	r3, [pc, #128]	@ (80067c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0307 	and.w	r3, r3, #7
 800674a:	683a      	ldr	r2, [r7, #0]
 800674c:	429a      	cmp	r2, r3
 800674e:	d001      	beq.n	8006754 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e032      	b.n	80067ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0304 	and.w	r3, r3, #4
 800675c:	2b00      	cmp	r3, #0
 800675e:	d008      	beq.n	8006772 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006760:	4b19      	ldr	r3, [pc, #100]	@ (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	4916      	ldr	r1, [pc, #88]	@ (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 800676e:	4313      	orrs	r3, r2
 8006770:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0308 	and.w	r3, r3, #8
 800677a:	2b00      	cmp	r3, #0
 800677c:	d009      	beq.n	8006792 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800677e:	4b12      	ldr	r3, [pc, #72]	@ (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	00db      	lsls	r3, r3, #3
 800678c:	490e      	ldr	r1, [pc, #56]	@ (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 800678e:	4313      	orrs	r3, r2
 8006790:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006792:	f000 f821 	bl	80067d8 <HAL_RCC_GetSysClockFreq>
 8006796:	4602      	mov	r2, r0
 8006798:	4b0b      	ldr	r3, [pc, #44]	@ (80067c8 <HAL_RCC_ClockConfig+0x1bc>)
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	091b      	lsrs	r3, r3, #4
 800679e:	f003 030f 	and.w	r3, r3, #15
 80067a2:	490a      	ldr	r1, [pc, #40]	@ (80067cc <HAL_RCC_ClockConfig+0x1c0>)
 80067a4:	5ccb      	ldrb	r3, [r1, r3]
 80067a6:	fa22 f303 	lsr.w	r3, r2, r3
 80067aa:	4a09      	ldr	r2, [pc, #36]	@ (80067d0 <HAL_RCC_ClockConfig+0x1c4>)
 80067ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80067ae:	4b09      	ldr	r3, [pc, #36]	@ (80067d4 <HAL_RCC_ClockConfig+0x1c8>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7fd fe3e 	bl	8004434 <HAL_InitTick>

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	40023c00 	.word	0x40023c00
 80067c8:	40023800 	.word	0x40023800
 80067cc:	08010e60 	.word	0x08010e60
 80067d0:	20000004 	.word	0x20000004
 80067d4:	20000008 	.word	0x20000008

080067d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067dc:	b090      	sub	sp, #64	@ 0x40
 80067de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80067e0:	2300      	movs	r3, #0
 80067e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80067e4:	2300      	movs	r3, #0
 80067e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067e8:	2300      	movs	r3, #0
 80067ea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80067ec:	2300      	movs	r3, #0
 80067ee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067f0:	4b59      	ldr	r3, [pc, #356]	@ (8006958 <HAL_RCC_GetSysClockFreq+0x180>)
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f003 030c 	and.w	r3, r3, #12
 80067f8:	2b08      	cmp	r3, #8
 80067fa:	d00d      	beq.n	8006818 <HAL_RCC_GetSysClockFreq+0x40>
 80067fc:	2b08      	cmp	r3, #8
 80067fe:	f200 80a1 	bhi.w	8006944 <HAL_RCC_GetSysClockFreq+0x16c>
 8006802:	2b00      	cmp	r3, #0
 8006804:	d002      	beq.n	800680c <HAL_RCC_GetSysClockFreq+0x34>
 8006806:	2b04      	cmp	r3, #4
 8006808:	d003      	beq.n	8006812 <HAL_RCC_GetSysClockFreq+0x3a>
 800680a:	e09b      	b.n	8006944 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800680c:	4b53      	ldr	r3, [pc, #332]	@ (800695c <HAL_RCC_GetSysClockFreq+0x184>)
 800680e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8006810:	e09b      	b.n	800694a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006812:	4b53      	ldr	r3, [pc, #332]	@ (8006960 <HAL_RCC_GetSysClockFreq+0x188>)
 8006814:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006816:	e098      	b.n	800694a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006818:	4b4f      	ldr	r3, [pc, #316]	@ (8006958 <HAL_RCC_GetSysClockFreq+0x180>)
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006820:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006822:	4b4d      	ldr	r3, [pc, #308]	@ (8006958 <HAL_RCC_GetSysClockFreq+0x180>)
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d028      	beq.n	8006880 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800682e:	4b4a      	ldr	r3, [pc, #296]	@ (8006958 <HAL_RCC_GetSysClockFreq+0x180>)
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	099b      	lsrs	r3, r3, #6
 8006834:	2200      	movs	r2, #0
 8006836:	623b      	str	r3, [r7, #32]
 8006838:	627a      	str	r2, [r7, #36]	@ 0x24
 800683a:	6a3b      	ldr	r3, [r7, #32]
 800683c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006840:	2100      	movs	r1, #0
 8006842:	4b47      	ldr	r3, [pc, #284]	@ (8006960 <HAL_RCC_GetSysClockFreq+0x188>)
 8006844:	fb03 f201 	mul.w	r2, r3, r1
 8006848:	2300      	movs	r3, #0
 800684a:	fb00 f303 	mul.w	r3, r0, r3
 800684e:	4413      	add	r3, r2
 8006850:	4a43      	ldr	r2, [pc, #268]	@ (8006960 <HAL_RCC_GetSysClockFreq+0x188>)
 8006852:	fba0 1202 	umull	r1, r2, r0, r2
 8006856:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006858:	460a      	mov	r2, r1
 800685a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800685c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800685e:	4413      	add	r3, r2
 8006860:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006864:	2200      	movs	r2, #0
 8006866:	61bb      	str	r3, [r7, #24]
 8006868:	61fa      	str	r2, [r7, #28]
 800686a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800686e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006872:	f7fa f9f1 	bl	8000c58 <__aeabi_uldivmod>
 8006876:	4602      	mov	r2, r0
 8006878:	460b      	mov	r3, r1
 800687a:	4613      	mov	r3, r2
 800687c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800687e:	e053      	b.n	8006928 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006880:	4b35      	ldr	r3, [pc, #212]	@ (8006958 <HAL_RCC_GetSysClockFreq+0x180>)
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	099b      	lsrs	r3, r3, #6
 8006886:	2200      	movs	r2, #0
 8006888:	613b      	str	r3, [r7, #16]
 800688a:	617a      	str	r2, [r7, #20]
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006892:	f04f 0b00 	mov.w	fp, #0
 8006896:	4652      	mov	r2, sl
 8006898:	465b      	mov	r3, fp
 800689a:	f04f 0000 	mov.w	r0, #0
 800689e:	f04f 0100 	mov.w	r1, #0
 80068a2:	0159      	lsls	r1, r3, #5
 80068a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068a8:	0150      	lsls	r0, r2, #5
 80068aa:	4602      	mov	r2, r0
 80068ac:	460b      	mov	r3, r1
 80068ae:	ebb2 080a 	subs.w	r8, r2, sl
 80068b2:	eb63 090b 	sbc.w	r9, r3, fp
 80068b6:	f04f 0200 	mov.w	r2, #0
 80068ba:	f04f 0300 	mov.w	r3, #0
 80068be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80068c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80068c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80068ca:	ebb2 0408 	subs.w	r4, r2, r8
 80068ce:	eb63 0509 	sbc.w	r5, r3, r9
 80068d2:	f04f 0200 	mov.w	r2, #0
 80068d6:	f04f 0300 	mov.w	r3, #0
 80068da:	00eb      	lsls	r3, r5, #3
 80068dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068e0:	00e2      	lsls	r2, r4, #3
 80068e2:	4614      	mov	r4, r2
 80068e4:	461d      	mov	r5, r3
 80068e6:	eb14 030a 	adds.w	r3, r4, sl
 80068ea:	603b      	str	r3, [r7, #0]
 80068ec:	eb45 030b 	adc.w	r3, r5, fp
 80068f0:	607b      	str	r3, [r7, #4]
 80068f2:	f04f 0200 	mov.w	r2, #0
 80068f6:	f04f 0300 	mov.w	r3, #0
 80068fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80068fe:	4629      	mov	r1, r5
 8006900:	028b      	lsls	r3, r1, #10
 8006902:	4621      	mov	r1, r4
 8006904:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006908:	4621      	mov	r1, r4
 800690a:	028a      	lsls	r2, r1, #10
 800690c:	4610      	mov	r0, r2
 800690e:	4619      	mov	r1, r3
 8006910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006912:	2200      	movs	r2, #0
 8006914:	60bb      	str	r3, [r7, #8]
 8006916:	60fa      	str	r2, [r7, #12]
 8006918:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800691c:	f7fa f99c 	bl	8000c58 <__aeabi_uldivmod>
 8006920:	4602      	mov	r2, r0
 8006922:	460b      	mov	r3, r1
 8006924:	4613      	mov	r3, r2
 8006926:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006928:	4b0b      	ldr	r3, [pc, #44]	@ (8006958 <HAL_RCC_GetSysClockFreq+0x180>)
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	0c1b      	lsrs	r3, r3, #16
 800692e:	f003 0303 	and.w	r3, r3, #3
 8006932:	3301      	adds	r3, #1
 8006934:	005b      	lsls	r3, r3, #1
 8006936:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8006938:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800693a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800693c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006940:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006942:	e002      	b.n	800694a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006944:	4b05      	ldr	r3, [pc, #20]	@ (800695c <HAL_RCC_GetSysClockFreq+0x184>)
 8006946:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006948:	bf00      	nop
    }
  }
  return sysclockfreq;
 800694a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800694c:	4618      	mov	r0, r3
 800694e:	3740      	adds	r7, #64	@ 0x40
 8006950:	46bd      	mov	sp, r7
 8006952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006956:	bf00      	nop
 8006958:	40023800 	.word	0x40023800
 800695c:	00f42400 	.word	0x00f42400
 8006960:	017d7840 	.word	0x017d7840

08006964 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006964:	b480      	push	{r7}
 8006966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006968:	4b03      	ldr	r3, [pc, #12]	@ (8006978 <HAL_RCC_GetHCLKFreq+0x14>)
 800696a:	681b      	ldr	r3, [r3, #0]
}
 800696c:	4618      	mov	r0, r3
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	20000004 	.word	0x20000004

0800697c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006980:	f7ff fff0 	bl	8006964 <HAL_RCC_GetHCLKFreq>
 8006984:	4602      	mov	r2, r0
 8006986:	4b05      	ldr	r3, [pc, #20]	@ (800699c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	0a9b      	lsrs	r3, r3, #10
 800698c:	f003 0307 	and.w	r3, r3, #7
 8006990:	4903      	ldr	r1, [pc, #12]	@ (80069a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006992:	5ccb      	ldrb	r3, [r1, r3]
 8006994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006998:	4618      	mov	r0, r3
 800699a:	bd80      	pop	{r7, pc}
 800699c:	40023800 	.word	0x40023800
 80069a0:	08010e70 	.word	0x08010e70

080069a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80069a8:	f7ff ffdc 	bl	8006964 <HAL_RCC_GetHCLKFreq>
 80069ac:	4602      	mov	r2, r0
 80069ae:	4b05      	ldr	r3, [pc, #20]	@ (80069c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	0b5b      	lsrs	r3, r3, #13
 80069b4:	f003 0307 	and.w	r3, r3, #7
 80069b8:	4903      	ldr	r1, [pc, #12]	@ (80069c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069ba:	5ccb      	ldrb	r3, [r1, r3]
 80069bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	40023800 	.word	0x40023800
 80069c8:	08010e70 	.word	0x08010e70

080069cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b082      	sub	sp, #8
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	e041      	b.n	8006a62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d106      	bne.n	80069f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f7fd fa06 	bl	8003e04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2202      	movs	r2, #2
 80069fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	3304      	adds	r3, #4
 8006a08:	4619      	mov	r1, r3
 8006a0a:	4610      	mov	r0, r2
 8006a0c:	f001 fa6c 	bl	8007ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3708      	adds	r7, #8
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b082      	sub	sp, #8
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d101      	bne.n	8006a7c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e041      	b.n	8006b00 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d106      	bne.n	8006a96 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f839 	bl	8006b08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2202      	movs	r2, #2
 8006a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	3304      	adds	r3, #4
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	4610      	mov	r0, r2
 8006aaa:	f001 fa1d 	bl	8007ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3708      	adds	r7, #8
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b10:	bf00      	nop
 8006b12:	370c      	adds	r7, #12
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d109      	bne.n	8006b40 <HAL_TIM_PWM_Start+0x24>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	bf14      	ite	ne
 8006b38:	2301      	movne	r3, #1
 8006b3a:	2300      	moveq	r3, #0
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	e022      	b.n	8006b86 <HAL_TIM_PWM_Start+0x6a>
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	2b04      	cmp	r3, #4
 8006b44:	d109      	bne.n	8006b5a <HAL_TIM_PWM_Start+0x3e>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	bf14      	ite	ne
 8006b52:	2301      	movne	r3, #1
 8006b54:	2300      	moveq	r3, #0
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	e015      	b.n	8006b86 <HAL_TIM_PWM_Start+0x6a>
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	2b08      	cmp	r3, #8
 8006b5e:	d109      	bne.n	8006b74 <HAL_TIM_PWM_Start+0x58>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	bf14      	ite	ne
 8006b6c:	2301      	movne	r3, #1
 8006b6e:	2300      	moveq	r3, #0
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	e008      	b.n	8006b86 <HAL_TIM_PWM_Start+0x6a>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	bf14      	ite	ne
 8006b80:	2301      	movne	r3, #1
 8006b82:	2300      	moveq	r3, #0
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d001      	beq.n	8006b8e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e068      	b.n	8006c60 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d104      	bne.n	8006b9e <HAL_TIM_PWM_Start+0x82>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2202      	movs	r2, #2
 8006b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b9c:	e013      	b.n	8006bc6 <HAL_TIM_PWM_Start+0xaa>
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	2b04      	cmp	r3, #4
 8006ba2:	d104      	bne.n	8006bae <HAL_TIM_PWM_Start+0x92>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2202      	movs	r2, #2
 8006ba8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bac:	e00b      	b.n	8006bc6 <HAL_TIM_PWM_Start+0xaa>
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	2b08      	cmp	r3, #8
 8006bb2:	d104      	bne.n	8006bbe <HAL_TIM_PWM_Start+0xa2>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006bbc:	e003      	b.n	8006bc6 <HAL_TIM_PWM_Start+0xaa>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	6839      	ldr	r1, [r7, #0]
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f001 fd5a 	bl	8008688 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a23      	ldr	r2, [pc, #140]	@ (8006c68 <HAL_TIM_PWM_Start+0x14c>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d107      	bne.n	8006bee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006bec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a1d      	ldr	r2, [pc, #116]	@ (8006c68 <HAL_TIM_PWM_Start+0x14c>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d018      	beq.n	8006c2a <HAL_TIM_PWM_Start+0x10e>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c00:	d013      	beq.n	8006c2a <HAL_TIM_PWM_Start+0x10e>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a19      	ldr	r2, [pc, #100]	@ (8006c6c <HAL_TIM_PWM_Start+0x150>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d00e      	beq.n	8006c2a <HAL_TIM_PWM_Start+0x10e>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a17      	ldr	r2, [pc, #92]	@ (8006c70 <HAL_TIM_PWM_Start+0x154>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d009      	beq.n	8006c2a <HAL_TIM_PWM_Start+0x10e>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a16      	ldr	r2, [pc, #88]	@ (8006c74 <HAL_TIM_PWM_Start+0x158>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d004      	beq.n	8006c2a <HAL_TIM_PWM_Start+0x10e>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a14      	ldr	r2, [pc, #80]	@ (8006c78 <HAL_TIM_PWM_Start+0x15c>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d111      	bne.n	8006c4e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f003 0307 	and.w	r3, r3, #7
 8006c34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2b06      	cmp	r3, #6
 8006c3a:	d010      	beq.n	8006c5e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f042 0201 	orr.w	r2, r2, #1
 8006c4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c4c:	e007      	b.n	8006c5e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f042 0201 	orr.w	r2, r2, #1
 8006c5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	40010000 	.word	0x40010000
 8006c6c:	40000400 	.word	0x40000400
 8006c70:	40000800 	.word	0x40000800
 8006c74:	40000c00 	.word	0x40000c00
 8006c78:	40014000 	.word	0x40014000

08006c7c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	6839      	ldr	r1, [r7, #0]
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f001 fcfa 	bl	8008688 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a29      	ldr	r2, [pc, #164]	@ (8006d40 <HAL_TIM_PWM_Stop+0xc4>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d117      	bne.n	8006cce <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	6a1a      	ldr	r2, [r3, #32]
 8006ca4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006ca8:	4013      	ands	r3, r2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10f      	bne.n	8006cce <HAL_TIM_PWM_Stop+0x52>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	6a1a      	ldr	r2, [r3, #32]
 8006cb4:	f240 4344 	movw	r3, #1092	@ 0x444
 8006cb8:	4013      	ands	r3, r2
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d107      	bne.n	8006cce <HAL_TIM_PWM_Stop+0x52>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006ccc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6a1a      	ldr	r2, [r3, #32]
 8006cd4:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006cd8:	4013      	ands	r3, r2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10f      	bne.n	8006cfe <HAL_TIM_PWM_Stop+0x82>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	6a1a      	ldr	r2, [r3, #32]
 8006ce4:	f240 4344 	movw	r3, #1092	@ 0x444
 8006ce8:	4013      	ands	r3, r2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d107      	bne.n	8006cfe <HAL_TIM_PWM_Stop+0x82>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f022 0201 	bic.w	r2, r2, #1
 8006cfc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d104      	bne.n	8006d0e <HAL_TIM_PWM_Stop+0x92>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2201      	movs	r2, #1
 8006d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d0c:	e013      	b.n	8006d36 <HAL_TIM_PWM_Stop+0xba>
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	2b04      	cmp	r3, #4
 8006d12:	d104      	bne.n	8006d1e <HAL_TIM_PWM_Stop+0xa2>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d1c:	e00b      	b.n	8006d36 <HAL_TIM_PWM_Stop+0xba>
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	2b08      	cmp	r3, #8
 8006d22:	d104      	bne.n	8006d2e <HAL_TIM_PWM_Stop+0xb2>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d2c:	e003      	b.n	8006d36 <HAL_TIM_PWM_Stop+0xba>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	40010000 	.word	0x40010000

08006d44 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d101      	bne.n	8006d56 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e041      	b.n	8006dda <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d106      	bne.n	8006d70 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 f839 	bl	8006de2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2202      	movs	r2, #2
 8006d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	3304      	adds	r3, #4
 8006d80:	4619      	mov	r1, r3
 8006d82:	4610      	mov	r0, r2
 8006d84:	f001 f8b0 	bl	8007ee8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3708      	adds	r7, #8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006de2:	b480      	push	{r7}
 8006de4:	b083      	sub	sp, #12
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006dea:	bf00      	nop
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
	...

08006df8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e02:	2300      	movs	r3, #0
 8006e04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d104      	bne.n	8006e16 <HAL_TIM_IC_Start_IT+0x1e>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	e013      	b.n	8006e3e <HAL_TIM_IC_Start_IT+0x46>
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2b04      	cmp	r3, #4
 8006e1a:	d104      	bne.n	8006e26 <HAL_TIM_IC_Start_IT+0x2e>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	e00b      	b.n	8006e3e <HAL_TIM_IC_Start_IT+0x46>
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	2b08      	cmp	r3, #8
 8006e2a:	d104      	bne.n	8006e36 <HAL_TIM_IC_Start_IT+0x3e>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	e003      	b.n	8006e3e <HAL_TIM_IC_Start_IT+0x46>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d104      	bne.n	8006e50 <HAL_TIM_IC_Start_IT+0x58>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	e013      	b.n	8006e78 <HAL_TIM_IC_Start_IT+0x80>
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	2b04      	cmp	r3, #4
 8006e54:	d104      	bne.n	8006e60 <HAL_TIM_IC_Start_IT+0x68>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	e00b      	b.n	8006e78 <HAL_TIM_IC_Start_IT+0x80>
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	2b08      	cmp	r3, #8
 8006e64:	d104      	bne.n	8006e70 <HAL_TIM_IC_Start_IT+0x78>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	e003      	b.n	8006e78 <HAL_TIM_IC_Start_IT+0x80>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006e7a:	7bbb      	ldrb	r3, [r7, #14]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d102      	bne.n	8006e86 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006e80:	7b7b      	ldrb	r3, [r7, #13]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d001      	beq.n	8006e8a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e0c2      	b.n	8007010 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d104      	bne.n	8006e9a <HAL_TIM_IC_Start_IT+0xa2>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2202      	movs	r2, #2
 8006e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e98:	e013      	b.n	8006ec2 <HAL_TIM_IC_Start_IT+0xca>
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	2b04      	cmp	r3, #4
 8006e9e:	d104      	bne.n	8006eaa <HAL_TIM_IC_Start_IT+0xb2>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ea8:	e00b      	b.n	8006ec2 <HAL_TIM_IC_Start_IT+0xca>
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b08      	cmp	r3, #8
 8006eae:	d104      	bne.n	8006eba <HAL_TIM_IC_Start_IT+0xc2>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006eb8:	e003      	b.n	8006ec2 <HAL_TIM_IC_Start_IT+0xca>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d104      	bne.n	8006ed2 <HAL_TIM_IC_Start_IT+0xda>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2202      	movs	r2, #2
 8006ecc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ed0:	e013      	b.n	8006efa <HAL_TIM_IC_Start_IT+0x102>
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	2b04      	cmp	r3, #4
 8006ed6:	d104      	bne.n	8006ee2 <HAL_TIM_IC_Start_IT+0xea>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2202      	movs	r2, #2
 8006edc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ee0:	e00b      	b.n	8006efa <HAL_TIM_IC_Start_IT+0x102>
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	2b08      	cmp	r3, #8
 8006ee6:	d104      	bne.n	8006ef2 <HAL_TIM_IC_Start_IT+0xfa>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2202      	movs	r2, #2
 8006eec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ef0:	e003      	b.n	8006efa <HAL_TIM_IC_Start_IT+0x102>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2202      	movs	r2, #2
 8006ef6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	2b0c      	cmp	r3, #12
 8006efe:	d841      	bhi.n	8006f84 <HAL_TIM_IC_Start_IT+0x18c>
 8006f00:	a201      	add	r2, pc, #4	@ (adr r2, 8006f08 <HAL_TIM_IC_Start_IT+0x110>)
 8006f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f06:	bf00      	nop
 8006f08:	08006f3d 	.word	0x08006f3d
 8006f0c:	08006f85 	.word	0x08006f85
 8006f10:	08006f85 	.word	0x08006f85
 8006f14:	08006f85 	.word	0x08006f85
 8006f18:	08006f4f 	.word	0x08006f4f
 8006f1c:	08006f85 	.word	0x08006f85
 8006f20:	08006f85 	.word	0x08006f85
 8006f24:	08006f85 	.word	0x08006f85
 8006f28:	08006f61 	.word	0x08006f61
 8006f2c:	08006f85 	.word	0x08006f85
 8006f30:	08006f85 	.word	0x08006f85
 8006f34:	08006f85 	.word	0x08006f85
 8006f38:	08006f73 	.word	0x08006f73
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68da      	ldr	r2, [r3, #12]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f042 0202 	orr.w	r2, r2, #2
 8006f4a:	60da      	str	r2, [r3, #12]
      break;
 8006f4c:	e01d      	b.n	8006f8a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68da      	ldr	r2, [r3, #12]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f042 0204 	orr.w	r2, r2, #4
 8006f5c:	60da      	str	r2, [r3, #12]
      break;
 8006f5e:	e014      	b.n	8006f8a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68da      	ldr	r2, [r3, #12]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f042 0208 	orr.w	r2, r2, #8
 8006f6e:	60da      	str	r2, [r3, #12]
      break;
 8006f70:	e00b      	b.n	8006f8a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68da      	ldr	r2, [r3, #12]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f042 0210 	orr.w	r2, r2, #16
 8006f80:	60da      	str	r2, [r3, #12]
      break;
 8006f82:	e002      	b.n	8006f8a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	73fb      	strb	r3, [r7, #15]
      break;
 8006f88:	bf00      	nop
  }

  if (status == HAL_OK)
 8006f8a:	7bfb      	ldrb	r3, [r7, #15]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d13e      	bne.n	800700e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2201      	movs	r2, #1
 8006f96:	6839      	ldr	r1, [r7, #0]
 8006f98:	4618      	mov	r0, r3
 8006f9a:	f001 fb75 	bl	8008688 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a1d      	ldr	r2, [pc, #116]	@ (8007018 <HAL_TIM_IC_Start_IT+0x220>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d018      	beq.n	8006fda <HAL_TIM_IC_Start_IT+0x1e2>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fb0:	d013      	beq.n	8006fda <HAL_TIM_IC_Start_IT+0x1e2>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a19      	ldr	r2, [pc, #100]	@ (800701c <HAL_TIM_IC_Start_IT+0x224>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d00e      	beq.n	8006fda <HAL_TIM_IC_Start_IT+0x1e2>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a17      	ldr	r2, [pc, #92]	@ (8007020 <HAL_TIM_IC_Start_IT+0x228>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d009      	beq.n	8006fda <HAL_TIM_IC_Start_IT+0x1e2>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a16      	ldr	r2, [pc, #88]	@ (8007024 <HAL_TIM_IC_Start_IT+0x22c>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d004      	beq.n	8006fda <HAL_TIM_IC_Start_IT+0x1e2>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a14      	ldr	r2, [pc, #80]	@ (8007028 <HAL_TIM_IC_Start_IT+0x230>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d111      	bne.n	8006ffe <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f003 0307 	and.w	r3, r3, #7
 8006fe4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	2b06      	cmp	r3, #6
 8006fea:	d010      	beq.n	800700e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f042 0201 	orr.w	r2, r2, #1
 8006ffa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ffc:	e007      	b.n	800700e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f042 0201 	orr.w	r2, r2, #1
 800700c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800700e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007010:	4618      	mov	r0, r3
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	40010000 	.word	0x40010000
 800701c:	40000400 	.word	0x40000400
 8007020:	40000800 	.word	0x40000800
 8007024:	40000c00 	.word	0x40000c00
 8007028:	40014000 	.word	0x40014000

0800702c <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007036:	2300      	movs	r3, #0
 8007038:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2b0c      	cmp	r3, #12
 800703e:	d841      	bhi.n	80070c4 <HAL_TIM_IC_Stop_IT+0x98>
 8007040:	a201      	add	r2, pc, #4	@ (adr r2, 8007048 <HAL_TIM_IC_Stop_IT+0x1c>)
 8007042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007046:	bf00      	nop
 8007048:	0800707d 	.word	0x0800707d
 800704c:	080070c5 	.word	0x080070c5
 8007050:	080070c5 	.word	0x080070c5
 8007054:	080070c5 	.word	0x080070c5
 8007058:	0800708f 	.word	0x0800708f
 800705c:	080070c5 	.word	0x080070c5
 8007060:	080070c5 	.word	0x080070c5
 8007064:	080070c5 	.word	0x080070c5
 8007068:	080070a1 	.word	0x080070a1
 800706c:	080070c5 	.word	0x080070c5
 8007070:	080070c5 	.word	0x080070c5
 8007074:	080070c5 	.word	0x080070c5
 8007078:	080070b3 	.word	0x080070b3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68da      	ldr	r2, [r3, #12]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f022 0202 	bic.w	r2, r2, #2
 800708a:	60da      	str	r2, [r3, #12]
      break;
 800708c:	e01d      	b.n	80070ca <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68da      	ldr	r2, [r3, #12]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f022 0204 	bic.w	r2, r2, #4
 800709c:	60da      	str	r2, [r3, #12]
      break;
 800709e:	e014      	b.n	80070ca <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68da      	ldr	r2, [r3, #12]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f022 0208 	bic.w	r2, r2, #8
 80070ae:	60da      	str	r2, [r3, #12]
      break;
 80070b0:	e00b      	b.n	80070ca <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	68da      	ldr	r2, [r3, #12]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f022 0210 	bic.w	r2, r2, #16
 80070c0:	60da      	str	r2, [r3, #12]
      break;
 80070c2:	e002      	b.n	80070ca <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	73fb      	strb	r3, [r7, #15]
      break;
 80070c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80070ca:	7bfb      	ldrb	r3, [r7, #15]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d156      	bne.n	800717e <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2200      	movs	r2, #0
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	4618      	mov	r0, r3
 80070da:	f001 fad5 	bl	8008688 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	6a1a      	ldr	r2, [r3, #32]
 80070e4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80070e8:	4013      	ands	r3, r2
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10f      	bne.n	800710e <HAL_TIM_IC_Stop_IT+0xe2>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	6a1a      	ldr	r2, [r3, #32]
 80070f4:	f240 4344 	movw	r3, #1092	@ 0x444
 80070f8:	4013      	ands	r3, r2
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d107      	bne.n	800710e <HAL_TIM_IC_Stop_IT+0xe2>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 0201 	bic.w	r2, r2, #1
 800710c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d104      	bne.n	800711e <HAL_TIM_IC_Stop_IT+0xf2>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800711c:	e013      	b.n	8007146 <HAL_TIM_IC_Stop_IT+0x11a>
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	2b04      	cmp	r3, #4
 8007122:	d104      	bne.n	800712e <HAL_TIM_IC_Stop_IT+0x102>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800712c:	e00b      	b.n	8007146 <HAL_TIM_IC_Stop_IT+0x11a>
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	2b08      	cmp	r3, #8
 8007132:	d104      	bne.n	800713e <HAL_TIM_IC_Stop_IT+0x112>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800713c:	e003      	b.n	8007146 <HAL_TIM_IC_Stop_IT+0x11a>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d104      	bne.n	8007156 <HAL_TIM_IC_Stop_IT+0x12a>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007154:	e013      	b.n	800717e <HAL_TIM_IC_Stop_IT+0x152>
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	2b04      	cmp	r3, #4
 800715a:	d104      	bne.n	8007166 <HAL_TIM_IC_Stop_IT+0x13a>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007164:	e00b      	b.n	800717e <HAL_TIM_IC_Stop_IT+0x152>
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b08      	cmp	r3, #8
 800716a:	d104      	bne.n	8007176 <HAL_TIM_IC_Stop_IT+0x14a>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007174:	e003      	b.n	800717e <HAL_TIM_IC_Stop_IT+0x152>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2201      	movs	r2, #1
 800717a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
  }

  /* Return function status */
  return status;
 800717e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d101      	bne.n	800719c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e097      	b.n	80072cc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d106      	bne.n	80071b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f7fc feb9 	bl	8003f28 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2202      	movs	r2, #2
 80071ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	6812      	ldr	r2, [r2, #0]
 80071c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071cc:	f023 0307 	bic.w	r3, r3, #7
 80071d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	3304      	adds	r3, #4
 80071da:	4619      	mov	r1, r3
 80071dc:	4610      	mov	r0, r2
 80071de:	f000 fe83 	bl	8007ee8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	6a1b      	ldr	r3, [r3, #32]
 80071f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	697a      	ldr	r2, [r7, #20]
 8007200:	4313      	orrs	r3, r2
 8007202:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800720a:	f023 0303 	bic.w	r3, r3, #3
 800720e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	689a      	ldr	r2, [r3, #8]
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	021b      	lsls	r3, r3, #8
 800721a:	4313      	orrs	r3, r2
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	4313      	orrs	r3, r2
 8007220:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007228:	f023 030c 	bic.w	r3, r3, #12
 800722c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007234:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007238:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	68da      	ldr	r2, [r3, #12]
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	69db      	ldr	r3, [r3, #28]
 8007242:	021b      	lsls	r3, r3, #8
 8007244:	4313      	orrs	r3, r2
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	4313      	orrs	r3, r2
 800724a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	011a      	lsls	r2, r3, #4
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	6a1b      	ldr	r3, [r3, #32]
 8007256:	031b      	lsls	r3, r3, #12
 8007258:	4313      	orrs	r3, r2
 800725a:	693a      	ldr	r2, [r7, #16]
 800725c:	4313      	orrs	r3, r2
 800725e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007266:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800726e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	685a      	ldr	r2, [r3, #4]
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	695b      	ldr	r3, [r3, #20]
 8007278:	011b      	lsls	r3, r3, #4
 800727a:	4313      	orrs	r3, r2
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	4313      	orrs	r3, r2
 8007280:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	697a      	ldr	r2, [r7, #20]
 8007288:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3718      	adds	r7, #24
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80072e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80072ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80072f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80072fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d110      	bne.n	8007326 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007304:	7bfb      	ldrb	r3, [r7, #15]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d102      	bne.n	8007310 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800730a:	7b7b      	ldrb	r3, [r7, #13]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d001      	beq.n	8007314 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e069      	b.n	80073e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2202      	movs	r2, #2
 8007318:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2202      	movs	r2, #2
 8007320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007324:	e031      	b.n	800738a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	2b04      	cmp	r3, #4
 800732a:	d110      	bne.n	800734e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800732c:	7bbb      	ldrb	r3, [r7, #14]
 800732e:	2b01      	cmp	r3, #1
 8007330:	d102      	bne.n	8007338 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007332:	7b3b      	ldrb	r3, [r7, #12]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d001      	beq.n	800733c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e055      	b.n	80073e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2202      	movs	r2, #2
 8007340:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2202      	movs	r2, #2
 8007348:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800734c:	e01d      	b.n	800738a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800734e:	7bfb      	ldrb	r3, [r7, #15]
 8007350:	2b01      	cmp	r3, #1
 8007352:	d108      	bne.n	8007366 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007354:	7bbb      	ldrb	r3, [r7, #14]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d105      	bne.n	8007366 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800735a:	7b7b      	ldrb	r3, [r7, #13]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d102      	bne.n	8007366 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007360:	7b3b      	ldrb	r3, [r7, #12]
 8007362:	2b01      	cmp	r3, #1
 8007364:	d001      	beq.n	800736a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e03e      	b.n	80073e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2202      	movs	r2, #2
 800736e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2202      	movs	r2, #2
 8007376:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2202      	movs	r2, #2
 800737e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2202      	movs	r2, #2
 8007386:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d003      	beq.n	8007398 <HAL_TIM_Encoder_Start+0xc4>
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	2b04      	cmp	r3, #4
 8007394:	d008      	beq.n	80073a8 <HAL_TIM_Encoder_Start+0xd4>
 8007396:	e00f      	b.n	80073b8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2201      	movs	r2, #1
 800739e:	2100      	movs	r1, #0
 80073a0:	4618      	mov	r0, r3
 80073a2:	f001 f971 	bl	8008688 <TIM_CCxChannelCmd>
      break;
 80073a6:	e016      	b.n	80073d6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2201      	movs	r2, #1
 80073ae:	2104      	movs	r1, #4
 80073b0:	4618      	mov	r0, r3
 80073b2:	f001 f969 	bl	8008688 <TIM_CCxChannelCmd>
      break;
 80073b6:	e00e      	b.n	80073d6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2201      	movs	r2, #1
 80073be:	2100      	movs	r1, #0
 80073c0:	4618      	mov	r0, r3
 80073c2:	f001 f961 	bl	8008688 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	2201      	movs	r2, #1
 80073cc:	2104      	movs	r1, #4
 80073ce:	4618      	mov	r0, r3
 80073d0:	f001 f95a 	bl	8008688 <TIM_CCxChannelCmd>
      break;
 80073d4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f042 0201 	orr.w	r2, r2, #1
 80073e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3710      	adds	r7, #16
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d003      	beq.n	8007408 <HAL_TIM_Encoder_Stop+0x18>
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	2b04      	cmp	r3, #4
 8007404:	d008      	beq.n	8007418 <HAL_TIM_Encoder_Stop+0x28>
 8007406:	e00f      	b.n	8007428 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2200      	movs	r2, #0
 800740e:	2100      	movs	r1, #0
 8007410:	4618      	mov	r0, r3
 8007412:	f001 f939 	bl	8008688 <TIM_CCxChannelCmd>
      break;
 8007416:	e016      	b.n	8007446 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2200      	movs	r2, #0
 800741e:	2104      	movs	r1, #4
 8007420:	4618      	mov	r0, r3
 8007422:	f001 f931 	bl	8008688 <TIM_CCxChannelCmd>
      break;
 8007426:	e00e      	b.n	8007446 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	2200      	movs	r2, #0
 800742e:	2100      	movs	r1, #0
 8007430:	4618      	mov	r0, r3
 8007432:	f001 f929 	bl	8008688 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2200      	movs	r2, #0
 800743c:	2104      	movs	r1, #4
 800743e:	4618      	mov	r0, r3
 8007440:	f001 f922 	bl	8008688 <TIM_CCxChannelCmd>
      break;
 8007444:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	6a1a      	ldr	r2, [r3, #32]
 800744c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007450:	4013      	ands	r3, r2
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10f      	bne.n	8007476 <HAL_TIM_Encoder_Stop+0x86>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6a1a      	ldr	r2, [r3, #32]
 800745c:	f240 4344 	movw	r3, #1092	@ 0x444
 8007460:	4013      	ands	r3, r2
 8007462:	2b00      	cmp	r3, #0
 8007464:	d107      	bne.n	8007476 <HAL_TIM_Encoder_Stop+0x86>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f022 0201 	bic.w	r2, r2, #1
 8007474:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d002      	beq.n	8007482 <HAL_TIM_Encoder_Stop+0x92>
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	2b04      	cmp	r3, #4
 8007480:	d138      	bne.n	80074f4 <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d104      	bne.n	8007492 <HAL_TIM_Encoder_Stop+0xa2>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007490:	e013      	b.n	80074ba <HAL_TIM_Encoder_Stop+0xca>
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	2b04      	cmp	r3, #4
 8007496:	d104      	bne.n	80074a2 <HAL_TIM_Encoder_Stop+0xb2>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074a0:	e00b      	b.n	80074ba <HAL_TIM_Encoder_Stop+0xca>
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	2b08      	cmp	r3, #8
 80074a6:	d104      	bne.n	80074b2 <HAL_TIM_Encoder_Stop+0xc2>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2201      	movs	r2, #1
 80074ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074b0:	e003      	b.n	80074ba <HAL_TIM_Encoder_Stop+0xca>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d104      	bne.n	80074ca <HAL_TIM_Encoder_Stop+0xda>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074c8:	e024      	b.n	8007514 <HAL_TIM_Encoder_Stop+0x124>
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	2b04      	cmp	r3, #4
 80074ce:	d104      	bne.n	80074da <HAL_TIM_Encoder_Stop+0xea>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80074d8:	e01c      	b.n	8007514 <HAL_TIM_Encoder_Stop+0x124>
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	2b08      	cmp	r3, #8
 80074de:	d104      	bne.n	80074ea <HAL_TIM_Encoder_Stop+0xfa>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074e8:	e014      	b.n	8007514 <HAL_TIM_Encoder_Stop+0x124>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074f2:	e00f      	b.n	8007514 <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3708      	adds	r7, #8
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b084      	sub	sp, #16
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
 8007526:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800752e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007536:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800753e:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007546:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d110      	bne.n	8007570 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800754e:	7bfb      	ldrb	r3, [r7, #15]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d102      	bne.n	800755a <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007554:	7b7b      	ldrb	r3, [r7, #13]
 8007556:	2b01      	cmp	r3, #1
 8007558:	d001      	beq.n	800755e <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e089      	b.n	8007672 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2202      	movs	r2, #2
 8007562:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2202      	movs	r2, #2
 800756a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800756e:	e031      	b.n	80075d4 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	2b04      	cmp	r3, #4
 8007574:	d110      	bne.n	8007598 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007576:	7bbb      	ldrb	r3, [r7, #14]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d102      	bne.n	8007582 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800757c:	7b3b      	ldrb	r3, [r7, #12]
 800757e:	2b01      	cmp	r3, #1
 8007580:	d001      	beq.n	8007586 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e075      	b.n	8007672 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2202      	movs	r2, #2
 800758a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2202      	movs	r2, #2
 8007592:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007596:	e01d      	b.n	80075d4 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007598:	7bfb      	ldrb	r3, [r7, #15]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d108      	bne.n	80075b0 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800759e:	7bbb      	ldrb	r3, [r7, #14]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d105      	bne.n	80075b0 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80075a4:	7b7b      	ldrb	r3, [r7, #13]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d102      	bne.n	80075b0 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80075aa:	7b3b      	ldrb	r3, [r7, #12]
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d001      	beq.n	80075b4 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	e05e      	b.n	8007672 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2202      	movs	r2, #2
 80075b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2202      	movs	r2, #2
 80075c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2202      	movs	r2, #2
 80075c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2202      	movs	r2, #2
 80075d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <HAL_TIM_Encoder_Start_IT+0xc4>
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	2b04      	cmp	r3, #4
 80075de:	d010      	beq.n	8007602 <HAL_TIM_Encoder_Start_IT+0xe4>
 80075e0:	e01f      	b.n	8007622 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2201      	movs	r2, #1
 80075e8:	2100      	movs	r1, #0
 80075ea:	4618      	mov	r0, r3
 80075ec:	f001 f84c 	bl	8008688 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	68da      	ldr	r2, [r3, #12]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f042 0202 	orr.w	r2, r2, #2
 80075fe:	60da      	str	r2, [r3, #12]
      break;
 8007600:	e02e      	b.n	8007660 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	2201      	movs	r2, #1
 8007608:	2104      	movs	r1, #4
 800760a:	4618      	mov	r0, r3
 800760c:	f001 f83c 	bl	8008688 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	68da      	ldr	r2, [r3, #12]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f042 0204 	orr.w	r2, r2, #4
 800761e:	60da      	str	r2, [r3, #12]
      break;
 8007620:	e01e      	b.n	8007660 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2201      	movs	r2, #1
 8007628:	2100      	movs	r1, #0
 800762a:	4618      	mov	r0, r3
 800762c:	f001 f82c 	bl	8008688 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2201      	movs	r2, #1
 8007636:	2104      	movs	r1, #4
 8007638:	4618      	mov	r0, r3
 800763a:	f001 f825 	bl	8008688 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68da      	ldr	r2, [r3, #12]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f042 0202 	orr.w	r2, r2, #2
 800764c:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68da      	ldr	r2, [r3, #12]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f042 0204 	orr.w	r2, r2, #4
 800765c:	60da      	str	r2, [r3, #12]
      break;
 800765e:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f042 0201 	orr.w	r2, r2, #1
 800766e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <HAL_TIM_Encoder_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b082      	sub	sp, #8
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
 8007682:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  if (Channel == TIM_CHANNEL_1)
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10f      	bne.n	80076aa <HAL_TIM_Encoder_Stop_IT+0x30>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2200      	movs	r2, #0
 8007690:	2100      	movs	r1, #0
 8007692:	4618      	mov	r0, r3
 8007694:	f000 fff8 	bl	8008688 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68da      	ldr	r2, [r3, #12]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f022 0202 	bic.w	r2, r2, #2
 80076a6:	60da      	str	r2, [r3, #12]
 80076a8:	e030      	b.n	800770c <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else if (Channel == TIM_CHANNEL_2)
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	2b04      	cmp	r3, #4
 80076ae:	d10f      	bne.n	80076d0 <HAL_TIM_Encoder_Stop_IT+0x56>
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2200      	movs	r2, #0
 80076b6:	2104      	movs	r1, #4
 80076b8:	4618      	mov	r0, r3
 80076ba:	f000 ffe5 	bl	8008688 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68da      	ldr	r2, [r3, #12]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f022 0204 	bic.w	r2, r2, #4
 80076cc:	60da      	str	r2, [r3, #12]
 80076ce:	e01d      	b.n	800770c <HAL_TIM_Encoder_Stop_IT+0x92>
  }
  else
  {
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2200      	movs	r2, #0
 80076d6:	2100      	movs	r1, #0
 80076d8:	4618      	mov	r0, r3
 80076da:	f000 ffd5 	bl	8008688 <TIM_CCxChannelCmd>
    TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2200      	movs	r2, #0
 80076e4:	2104      	movs	r1, #4
 80076e6:	4618      	mov	r0, r3
 80076e8:	f000 ffce 	bl	8008688 <TIM_CCxChannelCmd>

    /* Disable the capture compare Interrupts 1 and 2 */
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68da      	ldr	r2, [r3, #12]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f022 0202 	bic.w	r2, r2, #2
 80076fa:	60da      	str	r2, [r3, #12]
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	68da      	ldr	r2, [r3, #12]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f022 0204 	bic.w	r2, r2, #4
 800770a:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6a1a      	ldr	r2, [r3, #32]
 8007712:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007716:	4013      	ands	r3, r2
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10f      	bne.n	800773c <HAL_TIM_Encoder_Stop_IT+0xc2>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6a1a      	ldr	r2, [r3, #32]
 8007722:	f240 4344 	movw	r3, #1092	@ 0x444
 8007726:	4013      	ands	r3, r2
 8007728:	2b00      	cmp	r3, #0
 800772a:	d107      	bne.n	800773c <HAL_TIM_Encoder_Stop_IT+0xc2>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f022 0201 	bic.w	r2, r2, #1
 800773a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d002      	beq.n	8007748 <HAL_TIM_Encoder_Stop_IT+0xce>
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	2b04      	cmp	r3, #4
 8007746:	d138      	bne.n	80077ba <HAL_TIM_Encoder_Stop_IT+0x140>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d104      	bne.n	8007758 <HAL_TIM_Encoder_Stop_IT+0xde>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007756:	e013      	b.n	8007780 <HAL_TIM_Encoder_Stop_IT+0x106>
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	2b04      	cmp	r3, #4
 800775c:	d104      	bne.n	8007768 <HAL_TIM_Encoder_Stop_IT+0xee>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2201      	movs	r2, #1
 8007762:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007766:	e00b      	b.n	8007780 <HAL_TIM_Encoder_Stop_IT+0x106>
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	2b08      	cmp	r3, #8
 800776c:	d104      	bne.n	8007778 <HAL_TIM_Encoder_Stop_IT+0xfe>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2201      	movs	r2, #1
 8007772:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007776:	e003      	b.n	8007780 <HAL_TIM_Encoder_Stop_IT+0x106>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d104      	bne.n	8007790 <HAL_TIM_Encoder_Stop_IT+0x116>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800778e:	e024      	b.n	80077da <HAL_TIM_Encoder_Stop_IT+0x160>
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	2b04      	cmp	r3, #4
 8007794:	d104      	bne.n	80077a0 <HAL_TIM_Encoder_Stop_IT+0x126>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800779e:	e01c      	b.n	80077da <HAL_TIM_Encoder_Stop_IT+0x160>
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	2b08      	cmp	r3, #8
 80077a4:	d104      	bne.n	80077b0 <HAL_TIM_Encoder_Stop_IT+0x136>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077ae:	e014      	b.n	80077da <HAL_TIM_Encoder_Stop_IT+0x160>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80077b8:	e00f      	b.n	80077da <HAL_TIM_Encoder_Stop_IT+0x160>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2201      	movs	r2, #1
 80077be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2201      	movs	r2, #1
 80077ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2201      	movs	r2, #1
 80077d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return HAL_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3708      	adds	r7, #8
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	f003 0302 	and.w	r3, r3, #2
 8007802:	2b00      	cmp	r3, #0
 8007804:	d020      	beq.n	8007848 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f003 0302 	and.w	r3, r3, #2
 800780c:	2b00      	cmp	r3, #0
 800780e:	d01b      	beq.n	8007848 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f06f 0202 	mvn.w	r2, #2
 8007818:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2201      	movs	r2, #1
 800781e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	699b      	ldr	r3, [r3, #24]
 8007826:	f003 0303 	and.w	r3, r3, #3
 800782a:	2b00      	cmp	r3, #0
 800782c:	d003      	beq.n	8007836 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f7fb fa4e 	bl	8002cd0 <HAL_TIM_IC_CaptureCallback>
 8007834:	e005      	b.n	8007842 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 fb38 	bl	8007eac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fb3f 	bl	8007ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	f003 0304 	and.w	r3, r3, #4
 800784e:	2b00      	cmp	r3, #0
 8007850:	d020      	beq.n	8007894 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f003 0304 	and.w	r3, r3, #4
 8007858:	2b00      	cmp	r3, #0
 800785a:	d01b      	beq.n	8007894 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f06f 0204 	mvn.w	r2, #4
 8007864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2202      	movs	r2, #2
 800786a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007876:	2b00      	cmp	r3, #0
 8007878:	d003      	beq.n	8007882 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7fb fa28 	bl	8002cd0 <HAL_TIM_IC_CaptureCallback>
 8007880:	e005      	b.n	800788e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fb12 	bl	8007eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fb19 	bl	8007ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	f003 0308 	and.w	r3, r3, #8
 800789a:	2b00      	cmp	r3, #0
 800789c:	d020      	beq.n	80078e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f003 0308 	and.w	r3, r3, #8
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d01b      	beq.n	80078e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f06f 0208 	mvn.w	r2, #8
 80078b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2204      	movs	r2, #4
 80078b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	69db      	ldr	r3, [r3, #28]
 80078be:	f003 0303 	and.w	r3, r3, #3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d003      	beq.n	80078ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f7fb fa02 	bl	8002cd0 <HAL_TIM_IC_CaptureCallback>
 80078cc:	e005      	b.n	80078da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 faec 	bl	8007eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 faf3 	bl	8007ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	f003 0310 	and.w	r3, r3, #16
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d020      	beq.n	800792c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f003 0310 	and.w	r3, r3, #16
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d01b      	beq.n	800792c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f06f 0210 	mvn.w	r2, #16
 80078fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2208      	movs	r2, #8
 8007902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	69db      	ldr	r3, [r3, #28]
 800790a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800790e:	2b00      	cmp	r3, #0
 8007910:	d003      	beq.n	800791a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f7fb f9dc 	bl	8002cd0 <HAL_TIM_IC_CaptureCallback>
 8007918:	e005      	b.n	8007926 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 fac6 	bl	8007eac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 facd 	bl	8007ec0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	f003 0301 	and.w	r3, r3, #1
 8007932:	2b00      	cmp	r3, #0
 8007934:	d00c      	beq.n	8007950 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f003 0301 	and.w	r3, r3, #1
 800793c:	2b00      	cmp	r3, #0
 800793e:	d007      	beq.n	8007950 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f06f 0201 	mvn.w	r2, #1
 8007948:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 faa4 	bl	8007e98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007956:	2b00      	cmp	r3, #0
 8007958:	d00c      	beq.n	8007974 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007960:	2b00      	cmp	r3, #0
 8007962:	d007      	beq.n	8007974 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800796c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 ff28 	bl	80087c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00c      	beq.n	8007998 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007984:	2b00      	cmp	r3, #0
 8007986:	d007      	beq.n	8007998 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fa9e 	bl	8007ed4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	f003 0320 	and.w	r3, r3, #32
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00c      	beq.n	80079bc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f003 0320 	and.w	r3, r3, #32
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d007      	beq.n	80079bc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f06f 0220 	mvn.w	r2, #32
 80079b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 fefa 	bl	80087b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079bc:	bf00      	nop
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b086      	sub	sp, #24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079d0:	2300      	movs	r3, #0
 80079d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d101      	bne.n	80079e2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80079de:	2302      	movs	r3, #2
 80079e0:	e088      	b.n	8007af4 <HAL_TIM_IC_ConfigChannel+0x130>
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2201      	movs	r2, #1
 80079e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d11b      	bne.n	8007a28 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007a00:	f000 fc8a 	bl	8008318 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	699a      	ldr	r2, [r3, #24]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f022 020c 	bic.w	r2, r2, #12
 8007a12:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	6999      	ldr	r1, [r3, #24]
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	689a      	ldr	r2, [r3, #8]
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	430a      	orrs	r2, r1
 8007a24:	619a      	str	r2, [r3, #24]
 8007a26:	e060      	b.n	8007aea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2b04      	cmp	r3, #4
 8007a2c:	d11c      	bne.n	8007a68 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007a3e:	f000 fd02 	bl	8008446 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	699a      	ldr	r2, [r3, #24]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007a50:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	6999      	ldr	r1, [r3, #24]
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	021a      	lsls	r2, r3, #8
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	430a      	orrs	r2, r1
 8007a64:	619a      	str	r2, [r3, #24]
 8007a66:	e040      	b.n	8007aea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2b08      	cmp	r3, #8
 8007a6c:	d11b      	bne.n	8007aa6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007a7e:	f000 fd4f 	bl	8008520 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	69da      	ldr	r2, [r3, #28]
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f022 020c 	bic.w	r2, r2, #12
 8007a90:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	69d9      	ldr	r1, [r3, #28]
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	689a      	ldr	r2, [r3, #8]
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	430a      	orrs	r2, r1
 8007aa2:	61da      	str	r2, [r3, #28]
 8007aa4:	e021      	b.n	8007aea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2b0c      	cmp	r3, #12
 8007aaa:	d11c      	bne.n	8007ae6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007abc:	f000 fd6c 	bl	8008598 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	69da      	ldr	r2, [r3, #28]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007ace:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	69d9      	ldr	r1, [r3, #28]
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	021a      	lsls	r2, r3, #8
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	430a      	orrs	r2, r1
 8007ae2:	61da      	str	r2, [r3, #28]
 8007ae4:	e001      	b.n	8007aea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007af2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3718      	adds	r7, #24
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d101      	bne.n	8007b1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007b16:	2302      	movs	r3, #2
 8007b18:	e0ae      	b.n	8007c78 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2b0c      	cmp	r3, #12
 8007b26:	f200 809f 	bhi.w	8007c68 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b30:	08007b65 	.word	0x08007b65
 8007b34:	08007c69 	.word	0x08007c69
 8007b38:	08007c69 	.word	0x08007c69
 8007b3c:	08007c69 	.word	0x08007c69
 8007b40:	08007ba5 	.word	0x08007ba5
 8007b44:	08007c69 	.word	0x08007c69
 8007b48:	08007c69 	.word	0x08007c69
 8007b4c:	08007c69 	.word	0x08007c69
 8007b50:	08007be7 	.word	0x08007be7
 8007b54:	08007c69 	.word	0x08007c69
 8007b58:	08007c69 	.word	0x08007c69
 8007b5c:	08007c69 	.word	0x08007c69
 8007b60:	08007c27 	.word	0x08007c27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68b9      	ldr	r1, [r7, #8]
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f000 fa48 	bl	8008000 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	699a      	ldr	r2, [r3, #24]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f042 0208 	orr.w	r2, r2, #8
 8007b7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	699a      	ldr	r2, [r3, #24]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f022 0204 	bic.w	r2, r2, #4
 8007b8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	6999      	ldr	r1, [r3, #24]
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	691a      	ldr	r2, [r3, #16]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	430a      	orrs	r2, r1
 8007ba0:	619a      	str	r2, [r3, #24]
      break;
 8007ba2:	e064      	b.n	8007c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68b9      	ldr	r1, [r7, #8]
 8007baa:	4618      	mov	r0, r3
 8007bac:	f000 fa8e 	bl	80080cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	699a      	ldr	r2, [r3, #24]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007bbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	699a      	ldr	r2, [r3, #24]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007bce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6999      	ldr	r1, [r3, #24]
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	691b      	ldr	r3, [r3, #16]
 8007bda:	021a      	lsls	r2, r3, #8
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	430a      	orrs	r2, r1
 8007be2:	619a      	str	r2, [r3, #24]
      break;
 8007be4:	e043      	b.n	8007c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	68b9      	ldr	r1, [r7, #8]
 8007bec:	4618      	mov	r0, r3
 8007bee:	f000 fad9 	bl	80081a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	69da      	ldr	r2, [r3, #28]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f042 0208 	orr.w	r2, r2, #8
 8007c00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	69da      	ldr	r2, [r3, #28]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f022 0204 	bic.w	r2, r2, #4
 8007c10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	69d9      	ldr	r1, [r3, #28]
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	691a      	ldr	r2, [r3, #16]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	430a      	orrs	r2, r1
 8007c22:	61da      	str	r2, [r3, #28]
      break;
 8007c24:	e023      	b.n	8007c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68b9      	ldr	r1, [r7, #8]
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f000 fb23 	bl	8008278 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	69da      	ldr	r2, [r3, #28]
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	69da      	ldr	r2, [r3, #28]
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	69d9      	ldr	r1, [r3, #28]
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	021a      	lsls	r2, r3, #8
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	430a      	orrs	r2, r1
 8007c64:	61da      	str	r2, [r3, #28]
      break;
 8007c66:	e002      	b.n	8007c6e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	75fb      	strb	r3, [r7, #23]
      break;
 8007c6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3718      	adds	r7, #24
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d101      	bne.n	8007c9c <HAL_TIM_ConfigClockSource+0x1c>
 8007c98:	2302      	movs	r3, #2
 8007c9a:	e0b4      	b.n	8007e06 <HAL_TIM_ConfigClockSource+0x186>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2202      	movs	r2, #2
 8007ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007cba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007cc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cd4:	d03e      	beq.n	8007d54 <HAL_TIM_ConfigClockSource+0xd4>
 8007cd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007cda:	f200 8087 	bhi.w	8007dec <HAL_TIM_ConfigClockSource+0x16c>
 8007cde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ce2:	f000 8086 	beq.w	8007df2 <HAL_TIM_ConfigClockSource+0x172>
 8007ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cea:	d87f      	bhi.n	8007dec <HAL_TIM_ConfigClockSource+0x16c>
 8007cec:	2b70      	cmp	r3, #112	@ 0x70
 8007cee:	d01a      	beq.n	8007d26 <HAL_TIM_ConfigClockSource+0xa6>
 8007cf0:	2b70      	cmp	r3, #112	@ 0x70
 8007cf2:	d87b      	bhi.n	8007dec <HAL_TIM_ConfigClockSource+0x16c>
 8007cf4:	2b60      	cmp	r3, #96	@ 0x60
 8007cf6:	d050      	beq.n	8007d9a <HAL_TIM_ConfigClockSource+0x11a>
 8007cf8:	2b60      	cmp	r3, #96	@ 0x60
 8007cfa:	d877      	bhi.n	8007dec <HAL_TIM_ConfigClockSource+0x16c>
 8007cfc:	2b50      	cmp	r3, #80	@ 0x50
 8007cfe:	d03c      	beq.n	8007d7a <HAL_TIM_ConfigClockSource+0xfa>
 8007d00:	2b50      	cmp	r3, #80	@ 0x50
 8007d02:	d873      	bhi.n	8007dec <HAL_TIM_ConfigClockSource+0x16c>
 8007d04:	2b40      	cmp	r3, #64	@ 0x40
 8007d06:	d058      	beq.n	8007dba <HAL_TIM_ConfigClockSource+0x13a>
 8007d08:	2b40      	cmp	r3, #64	@ 0x40
 8007d0a:	d86f      	bhi.n	8007dec <HAL_TIM_ConfigClockSource+0x16c>
 8007d0c:	2b30      	cmp	r3, #48	@ 0x30
 8007d0e:	d064      	beq.n	8007dda <HAL_TIM_ConfigClockSource+0x15a>
 8007d10:	2b30      	cmp	r3, #48	@ 0x30
 8007d12:	d86b      	bhi.n	8007dec <HAL_TIM_ConfigClockSource+0x16c>
 8007d14:	2b20      	cmp	r3, #32
 8007d16:	d060      	beq.n	8007dda <HAL_TIM_ConfigClockSource+0x15a>
 8007d18:	2b20      	cmp	r3, #32
 8007d1a:	d867      	bhi.n	8007dec <HAL_TIM_ConfigClockSource+0x16c>
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d05c      	beq.n	8007dda <HAL_TIM_ConfigClockSource+0x15a>
 8007d20:	2b10      	cmp	r3, #16
 8007d22:	d05a      	beq.n	8007dda <HAL_TIM_ConfigClockSource+0x15a>
 8007d24:	e062      	b.n	8007dec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007d36:	f000 fc87 	bl	8008648 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007d48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68ba      	ldr	r2, [r7, #8]
 8007d50:	609a      	str	r2, [r3, #8]
      break;
 8007d52:	e04f      	b.n	8007df4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007d58:	683b      	ldr	r3, [r7, #0]
 8007d5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007d64:	f000 fc70 	bl	8008648 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	689a      	ldr	r2, [r3, #8]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007d76:	609a      	str	r2, [r3, #8]
      break;
 8007d78:	e03c      	b.n	8007df4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d86:	461a      	mov	r2, r3
 8007d88:	f000 fb2e 	bl	80083e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2150      	movs	r1, #80	@ 0x50
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 fc3d 	bl	8008612 <TIM_ITRx_SetConfig>
      break;
 8007d98:	e02c      	b.n	8007df4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007da6:	461a      	mov	r2, r3
 8007da8:	f000 fb8a 	bl	80084c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2160      	movs	r1, #96	@ 0x60
 8007db2:	4618      	mov	r0, r3
 8007db4:	f000 fc2d 	bl	8008612 <TIM_ITRx_SetConfig>
      break;
 8007db8:	e01c      	b.n	8007df4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	f000 fb0e 	bl	80083e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2140      	movs	r1, #64	@ 0x40
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 fc1d 	bl	8008612 <TIM_ITRx_SetConfig>
      break;
 8007dd8:	e00c      	b.n	8007df4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4619      	mov	r1, r3
 8007de4:	4610      	mov	r0, r2
 8007de6:	f000 fc14 	bl	8008612 <TIM_ITRx_SetConfig>
      break;
 8007dea:	e003      	b.n	8007df4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	73fb      	strb	r3, [r7, #15]
      break;
 8007df0:	e000      	b.n	8007df4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007df2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
	...

08007e10 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b085      	sub	sp, #20
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	2b0c      	cmp	r3, #12
 8007e22:	d831      	bhi.n	8007e88 <HAL_TIM_ReadCapturedValue+0x78>
 8007e24:	a201      	add	r2, pc, #4	@ (adr r2, 8007e2c <HAL_TIM_ReadCapturedValue+0x1c>)
 8007e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e2a:	bf00      	nop
 8007e2c:	08007e61 	.word	0x08007e61
 8007e30:	08007e89 	.word	0x08007e89
 8007e34:	08007e89 	.word	0x08007e89
 8007e38:	08007e89 	.word	0x08007e89
 8007e3c:	08007e6b 	.word	0x08007e6b
 8007e40:	08007e89 	.word	0x08007e89
 8007e44:	08007e89 	.word	0x08007e89
 8007e48:	08007e89 	.word	0x08007e89
 8007e4c:	08007e75 	.word	0x08007e75
 8007e50:	08007e89 	.word	0x08007e89
 8007e54:	08007e89 	.word	0x08007e89
 8007e58:	08007e89 	.word	0x08007e89
 8007e5c:	08007e7f 	.word	0x08007e7f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e66:	60fb      	str	r3, [r7, #12]

      break;
 8007e68:	e00f      	b.n	8007e8a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e70:	60fb      	str	r3, [r7, #12]

      break;
 8007e72:	e00a      	b.n	8007e8a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e7a:	60fb      	str	r3, [r7, #12]

      break;
 8007e7c:	e005      	b.n	8007e8a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e84:	60fb      	str	r3, [r7, #12]

      break;
 8007e86:	e000      	b.n	8007e8a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007e88:	bf00      	nop
  }

  return tmpreg;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3714      	adds	r7, #20
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007ea0:	bf00      	nop
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ec8:	bf00      	nop
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007edc:	bf00      	nop
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a3a      	ldr	r2, [pc, #232]	@ (8007fe4 <TIM_Base_SetConfig+0xfc>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d00f      	beq.n	8007f20 <TIM_Base_SetConfig+0x38>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f06:	d00b      	beq.n	8007f20 <TIM_Base_SetConfig+0x38>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a37      	ldr	r2, [pc, #220]	@ (8007fe8 <TIM_Base_SetConfig+0x100>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d007      	beq.n	8007f20 <TIM_Base_SetConfig+0x38>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a36      	ldr	r2, [pc, #216]	@ (8007fec <TIM_Base_SetConfig+0x104>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d003      	beq.n	8007f20 <TIM_Base_SetConfig+0x38>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a35      	ldr	r2, [pc, #212]	@ (8007ff0 <TIM_Base_SetConfig+0x108>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d108      	bne.n	8007f32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4a2b      	ldr	r2, [pc, #172]	@ (8007fe4 <TIM_Base_SetConfig+0xfc>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d01b      	beq.n	8007f72 <TIM_Base_SetConfig+0x8a>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f40:	d017      	beq.n	8007f72 <TIM_Base_SetConfig+0x8a>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a28      	ldr	r2, [pc, #160]	@ (8007fe8 <TIM_Base_SetConfig+0x100>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d013      	beq.n	8007f72 <TIM_Base_SetConfig+0x8a>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a27      	ldr	r2, [pc, #156]	@ (8007fec <TIM_Base_SetConfig+0x104>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d00f      	beq.n	8007f72 <TIM_Base_SetConfig+0x8a>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a26      	ldr	r2, [pc, #152]	@ (8007ff0 <TIM_Base_SetConfig+0x108>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d00b      	beq.n	8007f72 <TIM_Base_SetConfig+0x8a>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a25      	ldr	r2, [pc, #148]	@ (8007ff4 <TIM_Base_SetConfig+0x10c>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d007      	beq.n	8007f72 <TIM_Base_SetConfig+0x8a>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a24      	ldr	r2, [pc, #144]	@ (8007ff8 <TIM_Base_SetConfig+0x110>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d003      	beq.n	8007f72 <TIM_Base_SetConfig+0x8a>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a23      	ldr	r2, [pc, #140]	@ (8007ffc <TIM_Base_SetConfig+0x114>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d108      	bne.n	8007f84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	68fa      	ldr	r2, [r7, #12]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	689a      	ldr	r2, [r3, #8]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a0e      	ldr	r2, [pc, #56]	@ (8007fe4 <TIM_Base_SetConfig+0xfc>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d103      	bne.n	8007fb8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	691a      	ldr	r2, [r3, #16]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	f003 0301 	and.w	r3, r3, #1
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d105      	bne.n	8007fd6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	f023 0201 	bic.w	r2, r3, #1
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	611a      	str	r2, [r3, #16]
  }
}
 8007fd6:	bf00      	nop
 8007fd8:	3714      	adds	r7, #20
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr
 8007fe2:	bf00      	nop
 8007fe4:	40010000 	.word	0x40010000
 8007fe8:	40000400 	.word	0x40000400
 8007fec:	40000800 	.word	0x40000800
 8007ff0:	40000c00 	.word	0x40000c00
 8007ff4:	40014000 	.word	0x40014000
 8007ff8:	40014400 	.word	0x40014400
 8007ffc:	40014800 	.word	0x40014800

08008000 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008000:	b480      	push	{r7}
 8008002:	b087      	sub	sp, #28
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a1b      	ldr	r3, [r3, #32]
 800800e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6a1b      	ldr	r3, [r3, #32]
 8008014:	f023 0201 	bic.w	r2, r3, #1
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	699b      	ldr	r3, [r3, #24]
 8008026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800802e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f023 0303 	bic.w	r3, r3, #3
 8008036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	4313      	orrs	r3, r2
 8008040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	f023 0302 	bic.w	r3, r3, #2
 8008048:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	689b      	ldr	r3, [r3, #8]
 800804e:	697a      	ldr	r2, [r7, #20]
 8008050:	4313      	orrs	r3, r2
 8008052:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a1c      	ldr	r2, [pc, #112]	@ (80080c8 <TIM_OC1_SetConfig+0xc8>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d10c      	bne.n	8008076 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	f023 0308 	bic.w	r3, r3, #8
 8008062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	697a      	ldr	r2, [r7, #20]
 800806a:	4313      	orrs	r3, r2
 800806c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	f023 0304 	bic.w	r3, r3, #4
 8008074:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	4a13      	ldr	r2, [pc, #76]	@ (80080c8 <TIM_OC1_SetConfig+0xc8>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d111      	bne.n	80080a2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008084:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800808c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	695b      	ldr	r3, [r3, #20]
 8008092:	693a      	ldr	r2, [r7, #16]
 8008094:	4313      	orrs	r3, r2
 8008096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	699b      	ldr	r3, [r3, #24]
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	4313      	orrs	r3, r2
 80080a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	693a      	ldr	r2, [r7, #16]
 80080a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	68fa      	ldr	r2, [r7, #12]
 80080ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	685a      	ldr	r2, [r3, #4]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	697a      	ldr	r2, [r7, #20]
 80080ba:	621a      	str	r2, [r3, #32]
}
 80080bc:	bf00      	nop
 80080be:	371c      	adds	r7, #28
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr
 80080c8:	40010000 	.word	0x40010000

080080cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b087      	sub	sp, #28
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a1b      	ldr	r3, [r3, #32]
 80080da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a1b      	ldr	r3, [r3, #32]
 80080e0:	f023 0210 	bic.w	r2, r3, #16
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	699b      	ldr	r3, [r3, #24]
 80080f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	021b      	lsls	r3, r3, #8
 800810a:	68fa      	ldr	r2, [r7, #12]
 800810c:	4313      	orrs	r3, r2
 800810e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	f023 0320 	bic.w	r3, r3, #32
 8008116:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	011b      	lsls	r3, r3, #4
 800811e:	697a      	ldr	r2, [r7, #20]
 8008120:	4313      	orrs	r3, r2
 8008122:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a1e      	ldr	r2, [pc, #120]	@ (80081a0 <TIM_OC2_SetConfig+0xd4>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d10d      	bne.n	8008148 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008132:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	011b      	lsls	r3, r3, #4
 800813a:	697a      	ldr	r2, [r7, #20]
 800813c:	4313      	orrs	r3, r2
 800813e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008146:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4a15      	ldr	r2, [pc, #84]	@ (80081a0 <TIM_OC2_SetConfig+0xd4>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d113      	bne.n	8008178 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008156:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800815e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	695b      	ldr	r3, [r3, #20]
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	693a      	ldr	r2, [r7, #16]
 8008168:	4313      	orrs	r3, r2
 800816a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	699b      	ldr	r3, [r3, #24]
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	693a      	ldr	r2, [r7, #16]
 8008174:	4313      	orrs	r3, r2
 8008176:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	693a      	ldr	r2, [r7, #16]
 800817c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	685a      	ldr	r2, [r3, #4]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	697a      	ldr	r2, [r7, #20]
 8008190:	621a      	str	r2, [r3, #32]
}
 8008192:	bf00      	nop
 8008194:	371c      	adds	r7, #28
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop
 80081a0:	40010000 	.word	0x40010000

080081a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b087      	sub	sp, #28
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a1b      	ldr	r3, [r3, #32]
 80081b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a1b      	ldr	r3, [r3, #32]
 80081b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	69db      	ldr	r3, [r3, #28]
 80081ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f023 0303 	bic.w	r3, r3, #3
 80081da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80081ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	021b      	lsls	r3, r3, #8
 80081f4:	697a      	ldr	r2, [r7, #20]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a1d      	ldr	r2, [pc, #116]	@ (8008274 <TIM_OC3_SetConfig+0xd0>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d10d      	bne.n	800821e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008202:	697b      	ldr	r3, [r7, #20]
 8008204:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008208:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	021b      	lsls	r3, r3, #8
 8008210:	697a      	ldr	r2, [r7, #20]
 8008212:	4313      	orrs	r3, r2
 8008214:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800821c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	4a14      	ldr	r2, [pc, #80]	@ (8008274 <TIM_OC3_SetConfig+0xd0>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d113      	bne.n	800824e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800822c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008234:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	695b      	ldr	r3, [r3, #20]
 800823a:	011b      	lsls	r3, r3, #4
 800823c:	693a      	ldr	r2, [r7, #16]
 800823e:	4313      	orrs	r3, r2
 8008240:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	699b      	ldr	r3, [r3, #24]
 8008246:	011b      	lsls	r3, r3, #4
 8008248:	693a      	ldr	r2, [r7, #16]
 800824a:	4313      	orrs	r3, r2
 800824c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	693a      	ldr	r2, [r7, #16]
 8008252:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	685a      	ldr	r2, [r3, #4]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	697a      	ldr	r2, [r7, #20]
 8008266:	621a      	str	r2, [r3, #32]
}
 8008268:	bf00      	nop
 800826a:	371c      	adds	r7, #28
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr
 8008274:	40010000 	.word	0x40010000

08008278 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008278:	b480      	push	{r7}
 800827a:	b087      	sub	sp, #28
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a1b      	ldr	r3, [r3, #32]
 8008286:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6a1b      	ldr	r3, [r3, #32]
 800828c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	69db      	ldr	r3, [r3, #28]
 800829e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	021b      	lsls	r3, r3, #8
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80082c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	031b      	lsls	r3, r3, #12
 80082ca:	693a      	ldr	r2, [r7, #16]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4a10      	ldr	r2, [pc, #64]	@ (8008314 <TIM_OC4_SetConfig+0x9c>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d109      	bne.n	80082ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80082de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	695b      	ldr	r3, [r3, #20]
 80082e4:	019b      	lsls	r3, r3, #6
 80082e6:	697a      	ldr	r2, [r7, #20]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	697a      	ldr	r2, [r7, #20]
 80082f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	68fa      	ldr	r2, [r7, #12]
 80082f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	685a      	ldr	r2, [r3, #4]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	693a      	ldr	r2, [r7, #16]
 8008304:	621a      	str	r2, [r3, #32]
}
 8008306:	bf00      	nop
 8008308:	371c      	adds	r7, #28
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	40010000 	.word	0x40010000

08008318 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008318:	b480      	push	{r7}
 800831a:	b087      	sub	sp, #28
 800831c:	af00      	add	r7, sp, #0
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	607a      	str	r2, [r7, #4]
 8008324:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6a1b      	ldr	r3, [r3, #32]
 800832a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6a1b      	ldr	r3, [r3, #32]
 8008330:	f023 0201 	bic.w	r2, r3, #1
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	4a24      	ldr	r2, [pc, #144]	@ (80083d4 <TIM_TI1_SetConfig+0xbc>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d013      	beq.n	800836e <TIM_TI1_SetConfig+0x56>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800834c:	d00f      	beq.n	800836e <TIM_TI1_SetConfig+0x56>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	4a21      	ldr	r2, [pc, #132]	@ (80083d8 <TIM_TI1_SetConfig+0xc0>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d00b      	beq.n	800836e <TIM_TI1_SetConfig+0x56>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	4a20      	ldr	r2, [pc, #128]	@ (80083dc <TIM_TI1_SetConfig+0xc4>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d007      	beq.n	800836e <TIM_TI1_SetConfig+0x56>
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	4a1f      	ldr	r2, [pc, #124]	@ (80083e0 <TIM_TI1_SetConfig+0xc8>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d003      	beq.n	800836e <TIM_TI1_SetConfig+0x56>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	4a1e      	ldr	r2, [pc, #120]	@ (80083e4 <TIM_TI1_SetConfig+0xcc>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d101      	bne.n	8008372 <TIM_TI1_SetConfig+0x5a>
 800836e:	2301      	movs	r3, #1
 8008370:	e000      	b.n	8008374 <TIM_TI1_SetConfig+0x5c>
 8008372:	2300      	movs	r3, #0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d008      	beq.n	800838a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	f023 0303 	bic.w	r3, r3, #3
 800837e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008380:	697a      	ldr	r2, [r7, #20]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4313      	orrs	r3, r2
 8008386:	617b      	str	r3, [r7, #20]
 8008388:	e003      	b.n	8008392 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	f043 0301 	orr.w	r3, r3, #1
 8008390:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008398:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	011b      	lsls	r3, r3, #4
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	697a      	ldr	r2, [r7, #20]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	f023 030a 	bic.w	r3, r3, #10
 80083ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	f003 030a 	and.w	r3, r3, #10
 80083b4:	693a      	ldr	r2, [r7, #16]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	697a      	ldr	r2, [r7, #20]
 80083be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	693a      	ldr	r2, [r7, #16]
 80083c4:	621a      	str	r2, [r3, #32]
}
 80083c6:	bf00      	nop
 80083c8:	371c      	adds	r7, #28
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
 80083d2:	bf00      	nop
 80083d4:	40010000 	.word	0x40010000
 80083d8:	40000400 	.word	0x40000400
 80083dc:	40000800 	.word	0x40000800
 80083e0:	40000c00 	.word	0x40000c00
 80083e4:	40014000 	.word	0x40014000

080083e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b087      	sub	sp, #28
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6a1b      	ldr	r3, [r3, #32]
 80083f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6a1b      	ldr	r3, [r3, #32]
 80083fe:	f023 0201 	bic.w	r2, r3, #1
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	699b      	ldr	r3, [r3, #24]
 800840a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	011b      	lsls	r3, r3, #4
 8008418:	693a      	ldr	r2, [r7, #16]
 800841a:	4313      	orrs	r3, r2
 800841c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	f023 030a 	bic.w	r3, r3, #10
 8008424:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008426:	697a      	ldr	r2, [r7, #20]
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	4313      	orrs	r3, r2
 800842c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	693a      	ldr	r2, [r7, #16]
 8008432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	697a      	ldr	r2, [r7, #20]
 8008438:	621a      	str	r2, [r3, #32]
}
 800843a:	bf00      	nop
 800843c:	371c      	adds	r7, #28
 800843e:	46bd      	mov	sp, r7
 8008440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008444:	4770      	bx	lr

08008446 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008446:	b480      	push	{r7}
 8008448:	b087      	sub	sp, #28
 800844a:	af00      	add	r7, sp, #0
 800844c:	60f8      	str	r0, [r7, #12]
 800844e:	60b9      	str	r1, [r7, #8]
 8008450:	607a      	str	r2, [r7, #4]
 8008452:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	6a1b      	ldr	r3, [r3, #32]
 8008458:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6a1b      	ldr	r3, [r3, #32]
 800845e:	f023 0210 	bic.w	r2, r3, #16
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	699b      	ldr	r3, [r3, #24]
 800846a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	021b      	lsls	r3, r3, #8
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	4313      	orrs	r3, r2
 800847c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008484:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	031b      	lsls	r3, r3, #12
 800848a:	b29b      	uxth	r3, r3
 800848c:	693a      	ldr	r2, [r7, #16]
 800848e:	4313      	orrs	r3, r2
 8008490:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008498:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	011b      	lsls	r3, r3, #4
 800849e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80084a2:	697a      	ldr	r2, [r7, #20]
 80084a4:	4313      	orrs	r3, r2
 80084a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	693a      	ldr	r2, [r7, #16]
 80084ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	697a      	ldr	r2, [r7, #20]
 80084b2:	621a      	str	r2, [r3, #32]
}
 80084b4:	bf00      	nop
 80084b6:	371c      	adds	r7, #28
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b087      	sub	sp, #28
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6a1b      	ldr	r3, [r3, #32]
 80084d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	6a1b      	ldr	r3, [r3, #32]
 80084d6:	f023 0210 	bic.w	r2, r3, #16
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	699b      	ldr	r3, [r3, #24]
 80084e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80084ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	031b      	lsls	r3, r3, #12
 80084f0:	693a      	ldr	r2, [r7, #16]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80084fc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	011b      	lsls	r3, r3, #4
 8008502:	697a      	ldr	r2, [r7, #20]
 8008504:	4313      	orrs	r3, r2
 8008506:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	693a      	ldr	r2, [r7, #16]
 800850c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	697a      	ldr	r2, [r7, #20]
 8008512:	621a      	str	r2, [r3, #32]
}
 8008514:	bf00      	nop
 8008516:	371c      	adds	r7, #28
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008520:	b480      	push	{r7}
 8008522:	b087      	sub	sp, #28
 8008524:	af00      	add	r7, sp, #0
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	607a      	str	r2, [r7, #4]
 800852c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6a1b      	ldr	r3, [r3, #32]
 8008532:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6a1b      	ldr	r3, [r3, #32]
 8008538:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	69db      	ldr	r3, [r3, #28]
 8008544:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	f023 0303 	bic.w	r3, r3, #3
 800854c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800854e:	693a      	ldr	r2, [r7, #16]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4313      	orrs	r3, r2
 8008554:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800855c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	011b      	lsls	r3, r3, #4
 8008562:	b2db      	uxtb	r3, r3
 8008564:	693a      	ldr	r2, [r7, #16]
 8008566:	4313      	orrs	r3, r2
 8008568:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8008570:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	021b      	lsls	r3, r3, #8
 8008576:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800857a:	697a      	ldr	r2, [r7, #20]
 800857c:	4313      	orrs	r3, r2
 800857e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	693a      	ldr	r2, [r7, #16]
 8008584:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	697a      	ldr	r2, [r7, #20]
 800858a:	621a      	str	r2, [r3, #32]
}
 800858c:	bf00      	nop
 800858e:	371c      	adds	r7, #28
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008598:	b480      	push	{r7}
 800859a:	b087      	sub	sp, #28
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	607a      	str	r2, [r7, #4]
 80085a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	6a1b      	ldr	r3, [r3, #32]
 80085aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6a1b      	ldr	r3, [r3, #32]
 80085b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	69db      	ldr	r3, [r3, #28]
 80085bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	021b      	lsls	r3, r3, #8
 80085ca:	693a      	ldr	r2, [r7, #16]
 80085cc:	4313      	orrs	r3, r2
 80085ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80085d6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	031b      	lsls	r3, r3, #12
 80085dc:	b29b      	uxth	r3, r3
 80085de:	693a      	ldr	r2, [r7, #16]
 80085e0:	4313      	orrs	r3, r2
 80085e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80085ea:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	031b      	lsls	r3, r3, #12
 80085f0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80085f4:	697a      	ldr	r2, [r7, #20]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	693a      	ldr	r2, [r7, #16]
 80085fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	697a      	ldr	r2, [r7, #20]
 8008604:	621a      	str	r2, [r3, #32]
}
 8008606:	bf00      	nop
 8008608:	371c      	adds	r7, #28
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr

08008612 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008612:	b480      	push	{r7}
 8008614:	b085      	sub	sp, #20
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
 800861a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	689b      	ldr	r3, [r3, #8]
 8008620:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008628:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800862a:	683a      	ldr	r2, [r7, #0]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	4313      	orrs	r3, r2
 8008630:	f043 0307 	orr.w	r3, r3, #7
 8008634:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	609a      	str	r2, [r3, #8]
}
 800863c:	bf00      	nop
 800863e:	3714      	adds	r7, #20
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr

08008648 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008648:	b480      	push	{r7}
 800864a:	b087      	sub	sp, #28
 800864c:	af00      	add	r7, sp, #0
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
 8008654:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008662:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	021a      	lsls	r2, r3, #8
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	431a      	orrs	r2, r3
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	4313      	orrs	r3, r2
 8008670:	697a      	ldr	r2, [r7, #20]
 8008672:	4313      	orrs	r3, r2
 8008674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	697a      	ldr	r2, [r7, #20]
 800867a:	609a      	str	r2, [r3, #8]
}
 800867c:	bf00      	nop
 800867e:	371c      	adds	r7, #28
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008688:	b480      	push	{r7}
 800868a:	b087      	sub	sp, #28
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	f003 031f 	and.w	r3, r3, #31
 800869a:	2201      	movs	r2, #1
 800869c:	fa02 f303 	lsl.w	r3, r2, r3
 80086a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6a1a      	ldr	r2, [r3, #32]
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	43db      	mvns	r3, r3
 80086aa:	401a      	ands	r2, r3
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6a1a      	ldr	r2, [r3, #32]
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	f003 031f 	and.w	r3, r3, #31
 80086ba:	6879      	ldr	r1, [r7, #4]
 80086bc:	fa01 f303 	lsl.w	r3, r1, r3
 80086c0:	431a      	orrs	r2, r3
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	621a      	str	r2, [r3, #32]
}
 80086c6:	bf00      	nop
 80086c8:	371c      	adds	r7, #28
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr
	...

080086d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d101      	bne.n	80086ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086e8:	2302      	movs	r3, #2
 80086ea:	e050      	b.n	800878e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2202      	movs	r2, #2
 80086f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008712:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	4313      	orrs	r3, r2
 800871c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	68fa      	ldr	r2, [r7, #12]
 8008724:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a1c      	ldr	r2, [pc, #112]	@ (800879c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d018      	beq.n	8008762 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008738:	d013      	beq.n	8008762 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a18      	ldr	r2, [pc, #96]	@ (80087a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d00e      	beq.n	8008762 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a16      	ldr	r2, [pc, #88]	@ (80087a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d009      	beq.n	8008762 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a15      	ldr	r2, [pc, #84]	@ (80087a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d004      	beq.n	8008762 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a13      	ldr	r2, [pc, #76]	@ (80087ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d10c      	bne.n	800877c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008768:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	4313      	orrs	r3, r2
 8008772:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	68ba      	ldr	r2, [r7, #8]
 800877a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3714      	adds	r7, #20
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	40010000 	.word	0x40010000
 80087a0:	40000400 	.word	0x40000400
 80087a4:	40000800 	.word	0x40000800
 80087a8:	40000c00 	.word	0x40000c00
 80087ac:	40014000 	.word	0x40014000

080087b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087b8:	bf00      	nop
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087cc:	bf00      	nop
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d101      	bne.n	80087ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	e042      	b.n	8008870 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d106      	bne.n	8008804 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f7fb fc42 	bl	8004088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2224      	movs	r2, #36	@ 0x24
 8008808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	68da      	ldr	r2, [r3, #12]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800881a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 f973 	bl	8008b08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	691a      	ldr	r2, [r3, #16]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008830:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	695a      	ldr	r2, [r3, #20]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008840:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	68da      	ldr	r2, [r3, #12]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008850:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2220      	movs	r2, #32
 800885c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2220      	movs	r2, #32
 8008864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3708      	adds	r7, #8
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b08a      	sub	sp, #40	@ 0x28
 800887c:	af02      	add	r7, sp, #8
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	603b      	str	r3, [r7, #0]
 8008884:	4613      	mov	r3, r2
 8008886:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008888:	2300      	movs	r3, #0
 800888a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008892:	b2db      	uxtb	r3, r3
 8008894:	2b20      	cmp	r3, #32
 8008896:	d175      	bne.n	8008984 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d002      	beq.n	80088a4 <HAL_UART_Transmit+0x2c>
 800889e:	88fb      	ldrh	r3, [r7, #6]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d101      	bne.n	80088a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	e06e      	b.n	8008986 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2221      	movs	r2, #33	@ 0x21
 80088b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80088b6:	f7fb fe01 	bl	80044bc <HAL_GetTick>
 80088ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	88fa      	ldrh	r2, [r7, #6]
 80088c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	88fa      	ldrh	r2, [r7, #6]
 80088c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088d0:	d108      	bne.n	80088e4 <HAL_UART_Transmit+0x6c>
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d104      	bne.n	80088e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80088da:	2300      	movs	r3, #0
 80088dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	61bb      	str	r3, [r7, #24]
 80088e2:	e003      	b.n	80088ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088e8:	2300      	movs	r3, #0
 80088ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80088ec:	e02e      	b.n	800894c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	9300      	str	r3, [sp, #0]
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	2200      	movs	r2, #0
 80088f6:	2180      	movs	r1, #128	@ 0x80
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f000 f848 	bl	800898e <UART_WaitOnFlagUntilTimeout>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d005      	beq.n	8008910 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2220      	movs	r2, #32
 8008908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800890c:	2303      	movs	r3, #3
 800890e:	e03a      	b.n	8008986 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d10b      	bne.n	800892e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	881b      	ldrh	r3, [r3, #0]
 800891a:	461a      	mov	r2, r3
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008924:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008926:	69bb      	ldr	r3, [r7, #24]
 8008928:	3302      	adds	r3, #2
 800892a:	61bb      	str	r3, [r7, #24]
 800892c:	e007      	b.n	800893e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	781a      	ldrb	r2, [r3, #0]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	3301      	adds	r3, #1
 800893c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008942:	b29b      	uxth	r3, r3
 8008944:	3b01      	subs	r3, #1
 8008946:	b29a      	uxth	r2, r3
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008950:	b29b      	uxth	r3, r3
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1cb      	bne.n	80088ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	9300      	str	r3, [sp, #0]
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	2200      	movs	r2, #0
 800895e:	2140      	movs	r1, #64	@ 0x40
 8008960:	68f8      	ldr	r0, [r7, #12]
 8008962:	f000 f814 	bl	800898e <UART_WaitOnFlagUntilTimeout>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d005      	beq.n	8008978 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2220      	movs	r2, #32
 8008970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008974:	2303      	movs	r3, #3
 8008976:	e006      	b.n	8008986 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2220      	movs	r2, #32
 800897c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008980:	2300      	movs	r3, #0
 8008982:	e000      	b.n	8008986 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008984:	2302      	movs	r3, #2
  }
}
 8008986:	4618      	mov	r0, r3
 8008988:	3720      	adds	r7, #32
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b086      	sub	sp, #24
 8008992:	af00      	add	r7, sp, #0
 8008994:	60f8      	str	r0, [r7, #12]
 8008996:	60b9      	str	r1, [r7, #8]
 8008998:	603b      	str	r3, [r7, #0]
 800899a:	4613      	mov	r3, r2
 800899c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800899e:	e03b      	b.n	8008a18 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089a0:	6a3b      	ldr	r3, [r7, #32]
 80089a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a6:	d037      	beq.n	8008a18 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089a8:	f7fb fd88 	bl	80044bc <HAL_GetTick>
 80089ac:	4602      	mov	r2, r0
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	6a3a      	ldr	r2, [r7, #32]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d302      	bcc.n	80089be <UART_WaitOnFlagUntilTimeout+0x30>
 80089b8:	6a3b      	ldr	r3, [r7, #32]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d101      	bne.n	80089c2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80089be:	2303      	movs	r3, #3
 80089c0:	e03a      	b.n	8008a38 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	f003 0304 	and.w	r3, r3, #4
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d023      	beq.n	8008a18 <UART_WaitOnFlagUntilTimeout+0x8a>
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	2b80      	cmp	r3, #128	@ 0x80
 80089d4:	d020      	beq.n	8008a18 <UART_WaitOnFlagUntilTimeout+0x8a>
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	2b40      	cmp	r3, #64	@ 0x40
 80089da:	d01d      	beq.n	8008a18 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 0308 	and.w	r3, r3, #8
 80089e6:	2b08      	cmp	r3, #8
 80089e8:	d116      	bne.n	8008a18 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80089ea:	2300      	movs	r3, #0
 80089ec:	617b      	str	r3, [r7, #20]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	617b      	str	r3, [r7, #20]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	617b      	str	r3, [r7, #20]
 80089fe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	f000 f81d 	bl	8008a40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2208      	movs	r2, #8
 8008a0a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	e00f      	b.n	8008a38 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	4013      	ands	r3, r2
 8008a22:	68ba      	ldr	r2, [r7, #8]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	bf0c      	ite	eq
 8008a28:	2301      	moveq	r3, #1
 8008a2a:	2300      	movne	r3, #0
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	461a      	mov	r2, r3
 8008a30:	79fb      	ldrb	r3, [r7, #7]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d0b4      	beq.n	80089a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3718      	adds	r7, #24
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b095      	sub	sp, #84	@ 0x54
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	330c      	adds	r3, #12
 8008a4e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a52:	e853 3f00 	ldrex	r3, [r3]
 8008a56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	330c      	adds	r3, #12
 8008a66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008a68:	643a      	str	r2, [r7, #64]	@ 0x40
 8008a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a70:	e841 2300 	strex	r3, r2, [r1]
 8008a74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d1e5      	bne.n	8008a48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	3314      	adds	r3, #20
 8008a82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a84:	6a3b      	ldr	r3, [r7, #32]
 8008a86:	e853 3f00 	ldrex	r3, [r3]
 8008a8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	f023 0301 	bic.w	r3, r3, #1
 8008a92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	3314      	adds	r3, #20
 8008a9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008aa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008aa4:	e841 2300 	strex	r3, r2, [r1]
 8008aa8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d1e5      	bne.n	8008a7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d119      	bne.n	8008aec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	330c      	adds	r3, #12
 8008abe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	e853 3f00 	ldrex	r3, [r3]
 8008ac6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	f023 0310 	bic.w	r3, r3, #16
 8008ace:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	330c      	adds	r3, #12
 8008ad6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ad8:	61ba      	str	r2, [r7, #24]
 8008ada:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008adc:	6979      	ldr	r1, [r7, #20]
 8008ade:	69ba      	ldr	r2, [r7, #24]
 8008ae0:	e841 2300 	strex	r3, r2, [r1]
 8008ae4:	613b      	str	r3, [r7, #16]
   return(result);
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d1e5      	bne.n	8008ab8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2220      	movs	r2, #32
 8008af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008afa:	bf00      	nop
 8008afc:	3754      	adds	r7, #84	@ 0x54
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr
	...

08008b08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008b0c:	b0c0      	sub	sp, #256	@ 0x100
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	691b      	ldr	r3, [r3, #16]
 8008b1c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b24:	68d9      	ldr	r1, [r3, #12]
 8008b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	ea40 0301 	orr.w	r3, r0, r1
 8008b30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b36:	689a      	ldr	r2, [r3, #8]
 8008b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b3c:	691b      	ldr	r3, [r3, #16]
 8008b3e:	431a      	orrs	r2, r3
 8008b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b44:	695b      	ldr	r3, [r3, #20]
 8008b46:	431a      	orrs	r2, r3
 8008b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b4c:	69db      	ldr	r3, [r3, #28]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008b60:	f021 010c 	bic.w	r1, r1, #12
 8008b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b68:	681a      	ldr	r2, [r3, #0]
 8008b6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008b6e:	430b      	orrs	r3, r1
 8008b70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	695b      	ldr	r3, [r3, #20]
 8008b7a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b82:	6999      	ldr	r1, [r3, #24]
 8008b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	ea40 0301 	orr.w	r3, r0, r1
 8008b8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	4b8f      	ldr	r3, [pc, #572]	@ (8008dd4 <UART_SetConfig+0x2cc>)
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d005      	beq.n	8008ba8 <UART_SetConfig+0xa0>
 8008b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	4b8d      	ldr	r3, [pc, #564]	@ (8008dd8 <UART_SetConfig+0x2d0>)
 8008ba4:	429a      	cmp	r2, r3
 8008ba6:	d104      	bne.n	8008bb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ba8:	f7fd fefc 	bl	80069a4 <HAL_RCC_GetPCLK2Freq>
 8008bac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008bb0:	e003      	b.n	8008bba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008bb2:	f7fd fee3 	bl	800697c <HAL_RCC_GetPCLK1Freq>
 8008bb6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008bbe:	69db      	ldr	r3, [r3, #28]
 8008bc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008bc4:	f040 810c 	bne.w	8008de0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008bd2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008bd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008bda:	4622      	mov	r2, r4
 8008bdc:	462b      	mov	r3, r5
 8008bde:	1891      	adds	r1, r2, r2
 8008be0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008be2:	415b      	adcs	r3, r3
 8008be4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008be6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008bea:	4621      	mov	r1, r4
 8008bec:	eb12 0801 	adds.w	r8, r2, r1
 8008bf0:	4629      	mov	r1, r5
 8008bf2:	eb43 0901 	adc.w	r9, r3, r1
 8008bf6:	f04f 0200 	mov.w	r2, #0
 8008bfa:	f04f 0300 	mov.w	r3, #0
 8008bfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008c02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008c06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008c0a:	4690      	mov	r8, r2
 8008c0c:	4699      	mov	r9, r3
 8008c0e:	4623      	mov	r3, r4
 8008c10:	eb18 0303 	adds.w	r3, r8, r3
 8008c14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008c18:	462b      	mov	r3, r5
 8008c1a:	eb49 0303 	adc.w	r3, r9, r3
 8008c1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008c2e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008c32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008c36:	460b      	mov	r3, r1
 8008c38:	18db      	adds	r3, r3, r3
 8008c3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c3c:	4613      	mov	r3, r2
 8008c3e:	eb42 0303 	adc.w	r3, r2, r3
 8008c42:	657b      	str	r3, [r7, #84]	@ 0x54
 8008c44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008c48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008c4c:	f7f8 f804 	bl	8000c58 <__aeabi_uldivmod>
 8008c50:	4602      	mov	r2, r0
 8008c52:	460b      	mov	r3, r1
 8008c54:	4b61      	ldr	r3, [pc, #388]	@ (8008ddc <UART_SetConfig+0x2d4>)
 8008c56:	fba3 2302 	umull	r2, r3, r3, r2
 8008c5a:	095b      	lsrs	r3, r3, #5
 8008c5c:	011c      	lsls	r4, r3, #4
 8008c5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c62:	2200      	movs	r2, #0
 8008c64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c68:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008c6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008c70:	4642      	mov	r2, r8
 8008c72:	464b      	mov	r3, r9
 8008c74:	1891      	adds	r1, r2, r2
 8008c76:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008c78:	415b      	adcs	r3, r3
 8008c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008c80:	4641      	mov	r1, r8
 8008c82:	eb12 0a01 	adds.w	sl, r2, r1
 8008c86:	4649      	mov	r1, r9
 8008c88:	eb43 0b01 	adc.w	fp, r3, r1
 8008c8c:	f04f 0200 	mov.w	r2, #0
 8008c90:	f04f 0300 	mov.w	r3, #0
 8008c94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008c98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008c9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008ca0:	4692      	mov	sl, r2
 8008ca2:	469b      	mov	fp, r3
 8008ca4:	4643      	mov	r3, r8
 8008ca6:	eb1a 0303 	adds.w	r3, sl, r3
 8008caa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008cae:	464b      	mov	r3, r9
 8008cb0:	eb4b 0303 	adc.w	r3, fp, r3
 8008cb4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008cc4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008cc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008ccc:	460b      	mov	r3, r1
 8008cce:	18db      	adds	r3, r3, r3
 8008cd0:	643b      	str	r3, [r7, #64]	@ 0x40
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	eb42 0303 	adc.w	r3, r2, r3
 8008cd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008cde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008ce2:	f7f7 ffb9 	bl	8000c58 <__aeabi_uldivmod>
 8008ce6:	4602      	mov	r2, r0
 8008ce8:	460b      	mov	r3, r1
 8008cea:	4611      	mov	r1, r2
 8008cec:	4b3b      	ldr	r3, [pc, #236]	@ (8008ddc <UART_SetConfig+0x2d4>)
 8008cee:	fba3 2301 	umull	r2, r3, r3, r1
 8008cf2:	095b      	lsrs	r3, r3, #5
 8008cf4:	2264      	movs	r2, #100	@ 0x64
 8008cf6:	fb02 f303 	mul.w	r3, r2, r3
 8008cfa:	1acb      	subs	r3, r1, r3
 8008cfc:	00db      	lsls	r3, r3, #3
 8008cfe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008d02:	4b36      	ldr	r3, [pc, #216]	@ (8008ddc <UART_SetConfig+0x2d4>)
 8008d04:	fba3 2302 	umull	r2, r3, r3, r2
 8008d08:	095b      	lsrs	r3, r3, #5
 8008d0a:	005b      	lsls	r3, r3, #1
 8008d0c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008d10:	441c      	add	r4, r3
 8008d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d16:	2200      	movs	r2, #0
 8008d18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008d1c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008d20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008d24:	4642      	mov	r2, r8
 8008d26:	464b      	mov	r3, r9
 8008d28:	1891      	adds	r1, r2, r2
 8008d2a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008d2c:	415b      	adcs	r3, r3
 8008d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008d30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008d34:	4641      	mov	r1, r8
 8008d36:	1851      	adds	r1, r2, r1
 8008d38:	6339      	str	r1, [r7, #48]	@ 0x30
 8008d3a:	4649      	mov	r1, r9
 8008d3c:	414b      	adcs	r3, r1
 8008d3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d40:	f04f 0200 	mov.w	r2, #0
 8008d44:	f04f 0300 	mov.w	r3, #0
 8008d48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008d4c:	4659      	mov	r1, fp
 8008d4e:	00cb      	lsls	r3, r1, #3
 8008d50:	4651      	mov	r1, sl
 8008d52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d56:	4651      	mov	r1, sl
 8008d58:	00ca      	lsls	r2, r1, #3
 8008d5a:	4610      	mov	r0, r2
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	4603      	mov	r3, r0
 8008d60:	4642      	mov	r2, r8
 8008d62:	189b      	adds	r3, r3, r2
 8008d64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008d68:	464b      	mov	r3, r9
 8008d6a:	460a      	mov	r2, r1
 8008d6c:	eb42 0303 	adc.w	r3, r2, r3
 8008d70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008d80:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008d84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008d88:	460b      	mov	r3, r1
 8008d8a:	18db      	adds	r3, r3, r3
 8008d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008d8e:	4613      	mov	r3, r2
 8008d90:	eb42 0303 	adc.w	r3, r2, r3
 8008d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008d9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008d9e:	f7f7 ff5b 	bl	8000c58 <__aeabi_uldivmod>
 8008da2:	4602      	mov	r2, r0
 8008da4:	460b      	mov	r3, r1
 8008da6:	4b0d      	ldr	r3, [pc, #52]	@ (8008ddc <UART_SetConfig+0x2d4>)
 8008da8:	fba3 1302 	umull	r1, r3, r3, r2
 8008dac:	095b      	lsrs	r3, r3, #5
 8008dae:	2164      	movs	r1, #100	@ 0x64
 8008db0:	fb01 f303 	mul.w	r3, r1, r3
 8008db4:	1ad3      	subs	r3, r2, r3
 8008db6:	00db      	lsls	r3, r3, #3
 8008db8:	3332      	adds	r3, #50	@ 0x32
 8008dba:	4a08      	ldr	r2, [pc, #32]	@ (8008ddc <UART_SetConfig+0x2d4>)
 8008dbc:	fba2 2303 	umull	r2, r3, r2, r3
 8008dc0:	095b      	lsrs	r3, r3, #5
 8008dc2:	f003 0207 	and.w	r2, r3, #7
 8008dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4422      	add	r2, r4
 8008dce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008dd0:	e106      	b.n	8008fe0 <UART_SetConfig+0x4d8>
 8008dd2:	bf00      	nop
 8008dd4:	40011000 	.word	0x40011000
 8008dd8:	40011400 	.word	0x40011400
 8008ddc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008de4:	2200      	movs	r2, #0
 8008de6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008dea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008dee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008df2:	4642      	mov	r2, r8
 8008df4:	464b      	mov	r3, r9
 8008df6:	1891      	adds	r1, r2, r2
 8008df8:	6239      	str	r1, [r7, #32]
 8008dfa:	415b      	adcs	r3, r3
 8008dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8008dfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008e02:	4641      	mov	r1, r8
 8008e04:	1854      	adds	r4, r2, r1
 8008e06:	4649      	mov	r1, r9
 8008e08:	eb43 0501 	adc.w	r5, r3, r1
 8008e0c:	f04f 0200 	mov.w	r2, #0
 8008e10:	f04f 0300 	mov.w	r3, #0
 8008e14:	00eb      	lsls	r3, r5, #3
 8008e16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e1a:	00e2      	lsls	r2, r4, #3
 8008e1c:	4614      	mov	r4, r2
 8008e1e:	461d      	mov	r5, r3
 8008e20:	4643      	mov	r3, r8
 8008e22:	18e3      	adds	r3, r4, r3
 8008e24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008e28:	464b      	mov	r3, r9
 8008e2a:	eb45 0303 	adc.w	r3, r5, r3
 8008e2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008e3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008e42:	f04f 0200 	mov.w	r2, #0
 8008e46:	f04f 0300 	mov.w	r3, #0
 8008e4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008e4e:	4629      	mov	r1, r5
 8008e50:	008b      	lsls	r3, r1, #2
 8008e52:	4621      	mov	r1, r4
 8008e54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e58:	4621      	mov	r1, r4
 8008e5a:	008a      	lsls	r2, r1, #2
 8008e5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008e60:	f7f7 fefa 	bl	8000c58 <__aeabi_uldivmod>
 8008e64:	4602      	mov	r2, r0
 8008e66:	460b      	mov	r3, r1
 8008e68:	4b60      	ldr	r3, [pc, #384]	@ (8008fec <UART_SetConfig+0x4e4>)
 8008e6a:	fba3 2302 	umull	r2, r3, r3, r2
 8008e6e:	095b      	lsrs	r3, r3, #5
 8008e70:	011c      	lsls	r4, r3, #4
 8008e72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e76:	2200      	movs	r2, #0
 8008e78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008e7c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008e80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008e84:	4642      	mov	r2, r8
 8008e86:	464b      	mov	r3, r9
 8008e88:	1891      	adds	r1, r2, r2
 8008e8a:	61b9      	str	r1, [r7, #24]
 8008e8c:	415b      	adcs	r3, r3
 8008e8e:	61fb      	str	r3, [r7, #28]
 8008e90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e94:	4641      	mov	r1, r8
 8008e96:	1851      	adds	r1, r2, r1
 8008e98:	6139      	str	r1, [r7, #16]
 8008e9a:	4649      	mov	r1, r9
 8008e9c:	414b      	adcs	r3, r1
 8008e9e:	617b      	str	r3, [r7, #20]
 8008ea0:	f04f 0200 	mov.w	r2, #0
 8008ea4:	f04f 0300 	mov.w	r3, #0
 8008ea8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008eac:	4659      	mov	r1, fp
 8008eae:	00cb      	lsls	r3, r1, #3
 8008eb0:	4651      	mov	r1, sl
 8008eb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008eb6:	4651      	mov	r1, sl
 8008eb8:	00ca      	lsls	r2, r1, #3
 8008eba:	4610      	mov	r0, r2
 8008ebc:	4619      	mov	r1, r3
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	4642      	mov	r2, r8
 8008ec2:	189b      	adds	r3, r3, r2
 8008ec4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008ec8:	464b      	mov	r3, r9
 8008eca:	460a      	mov	r2, r1
 8008ecc:	eb42 0303 	adc.w	r3, r2, r3
 8008ed0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	2200      	movs	r2, #0
 8008edc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008ede:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008ee0:	f04f 0200 	mov.w	r2, #0
 8008ee4:	f04f 0300 	mov.w	r3, #0
 8008ee8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008eec:	4649      	mov	r1, r9
 8008eee:	008b      	lsls	r3, r1, #2
 8008ef0:	4641      	mov	r1, r8
 8008ef2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008ef6:	4641      	mov	r1, r8
 8008ef8:	008a      	lsls	r2, r1, #2
 8008efa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008efe:	f7f7 feab 	bl	8000c58 <__aeabi_uldivmod>
 8008f02:	4602      	mov	r2, r0
 8008f04:	460b      	mov	r3, r1
 8008f06:	4611      	mov	r1, r2
 8008f08:	4b38      	ldr	r3, [pc, #224]	@ (8008fec <UART_SetConfig+0x4e4>)
 8008f0a:	fba3 2301 	umull	r2, r3, r3, r1
 8008f0e:	095b      	lsrs	r3, r3, #5
 8008f10:	2264      	movs	r2, #100	@ 0x64
 8008f12:	fb02 f303 	mul.w	r3, r2, r3
 8008f16:	1acb      	subs	r3, r1, r3
 8008f18:	011b      	lsls	r3, r3, #4
 8008f1a:	3332      	adds	r3, #50	@ 0x32
 8008f1c:	4a33      	ldr	r2, [pc, #204]	@ (8008fec <UART_SetConfig+0x4e4>)
 8008f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f22:	095b      	lsrs	r3, r3, #5
 8008f24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008f28:	441c      	add	r4, r3
 8008f2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f2e:	2200      	movs	r2, #0
 8008f30:	673b      	str	r3, [r7, #112]	@ 0x70
 8008f32:	677a      	str	r2, [r7, #116]	@ 0x74
 8008f34:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008f38:	4642      	mov	r2, r8
 8008f3a:	464b      	mov	r3, r9
 8008f3c:	1891      	adds	r1, r2, r2
 8008f3e:	60b9      	str	r1, [r7, #8]
 8008f40:	415b      	adcs	r3, r3
 8008f42:	60fb      	str	r3, [r7, #12]
 8008f44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008f48:	4641      	mov	r1, r8
 8008f4a:	1851      	adds	r1, r2, r1
 8008f4c:	6039      	str	r1, [r7, #0]
 8008f4e:	4649      	mov	r1, r9
 8008f50:	414b      	adcs	r3, r1
 8008f52:	607b      	str	r3, [r7, #4]
 8008f54:	f04f 0200 	mov.w	r2, #0
 8008f58:	f04f 0300 	mov.w	r3, #0
 8008f5c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008f60:	4659      	mov	r1, fp
 8008f62:	00cb      	lsls	r3, r1, #3
 8008f64:	4651      	mov	r1, sl
 8008f66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f6a:	4651      	mov	r1, sl
 8008f6c:	00ca      	lsls	r2, r1, #3
 8008f6e:	4610      	mov	r0, r2
 8008f70:	4619      	mov	r1, r3
 8008f72:	4603      	mov	r3, r0
 8008f74:	4642      	mov	r2, r8
 8008f76:	189b      	adds	r3, r3, r2
 8008f78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008f7a:	464b      	mov	r3, r9
 8008f7c:	460a      	mov	r2, r1
 8008f7e:	eb42 0303 	adc.w	r3, r2, r3
 8008f82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f8e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008f90:	f04f 0200 	mov.w	r2, #0
 8008f94:	f04f 0300 	mov.w	r3, #0
 8008f98:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008f9c:	4649      	mov	r1, r9
 8008f9e:	008b      	lsls	r3, r1, #2
 8008fa0:	4641      	mov	r1, r8
 8008fa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008fa6:	4641      	mov	r1, r8
 8008fa8:	008a      	lsls	r2, r1, #2
 8008faa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008fae:	f7f7 fe53 	bl	8000c58 <__aeabi_uldivmod>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8008fec <UART_SetConfig+0x4e4>)
 8008fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8008fbc:	095b      	lsrs	r3, r3, #5
 8008fbe:	2164      	movs	r1, #100	@ 0x64
 8008fc0:	fb01 f303 	mul.w	r3, r1, r3
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	011b      	lsls	r3, r3, #4
 8008fc8:	3332      	adds	r3, #50	@ 0x32
 8008fca:	4a08      	ldr	r2, [pc, #32]	@ (8008fec <UART_SetConfig+0x4e4>)
 8008fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8008fd0:	095b      	lsrs	r3, r3, #5
 8008fd2:	f003 020f 	and.w	r2, r3, #15
 8008fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4422      	add	r2, r4
 8008fde:	609a      	str	r2, [r3, #8]
}
 8008fe0:	bf00      	nop
 8008fe2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008fec:	51eb851f 	.word	0x51eb851f

08008ff0 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8008ffe:	6839      	ldr	r1, [r7, #0]
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f001 fca2 	bl	800a94a <VL53L0X_get_offset_calibration_data_micro_meter>
 8009006:	4603      	mov	r3, r0
 8009008:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800900a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800900e:	4618      	mov	r0, r3
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
	...

08009018 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8009018:	b5b0      	push	{r4, r5, r7, lr}
 800901a:	b096      	sub	sp, #88	@ 0x58
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009020:	2300      	movs	r3, #0
 8009022:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8009026:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800902a:	2b00      	cmp	r3, #0
 800902c:	d107      	bne.n	800903e <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800902e:	2200      	movs	r2, #0
 8009030:	2188      	movs	r1, #136	@ 0x88
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f004 fe96 	bl	800dd64 <VL53L0X_WrByte>
 8009038:	4603      	mov	r3, r0
 800903a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800904c:	f8a3 2152 	strh.w	r2, [r3, #338]	@ 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009056:	f8a3 2154 	strh.w	r2, [r3, #340]	@ 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4a9e      	ldr	r2, [pc, #632]	@ (80092d8 <VL53L0X_DataInit+0x2c0>)
 800905e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4a9d      	ldr	r2, [pc, #628]	@ (80092dc <VL53L0X_DataInit+0x2c4>)
 8009066:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8009070:	f107 0310 	add.w	r3, r7, #16
 8009074:	4619      	mov	r1, r3
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 fac0 	bl	80095fc <VL53L0X_GetDeviceParameters>
 800907c:	4603      	mov	r3, r0
 800907e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8009082:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8009086:	2b00      	cmp	r3, #0
 8009088:	d112      	bne.n	80090b0 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800908a:	2300      	movs	r3, #0
 800908c:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800908e:	2300      	movs	r3, #0
 8009090:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f103 0410 	add.w	r4, r3, #16
 8009098:	f107 0510 	add.w	r5, r7, #16
 800909c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800909e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80090a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80090a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80090a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80090a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80090a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80090ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2264      	movs	r2, #100	@ 0x64
 80090b4:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f44f 7261 	mov.w	r2, #900	@ 0x384
 80090be:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80090c8:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80090d2:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2201      	movs	r2, #1
 80090da:	f883 2150 	strb.w	r2, [r3, #336]	@ 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80090de:	2201      	movs	r2, #1
 80090e0:	2180      	movs	r1, #128	@ 0x80
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f004 fe3e 	bl	800dd64 <VL53L0X_WrByte>
 80090e8:	4603      	mov	r3, r0
 80090ea:	461a      	mov	r2, r3
 80090ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80090f0:	4313      	orrs	r3, r2
 80090f2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80090f6:	2201      	movs	r2, #1
 80090f8:	21ff      	movs	r1, #255	@ 0xff
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f004 fe32 	bl	800dd64 <VL53L0X_WrByte>
 8009100:	4603      	mov	r3, r0
 8009102:	461a      	mov	r2, r3
 8009104:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009108:	4313      	orrs	r3, r2
 800910a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800910e:	2200      	movs	r2, #0
 8009110:	2100      	movs	r1, #0
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f004 fe26 	bl	800dd64 <VL53L0X_WrByte>
 8009118:	4603      	mov	r3, r0
 800911a:	461a      	mov	r2, r3
 800911c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009120:	4313      	orrs	r3, r2
 8009122:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8009126:	f107 030f 	add.w	r3, r7, #15
 800912a:	461a      	mov	r2, r3
 800912c:	2191      	movs	r1, #145	@ 0x91
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f004 fe9a 	bl	800de68 <VL53L0X_RdByte>
 8009134:	4603      	mov	r3, r0
 8009136:	461a      	mov	r2, r3
 8009138:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800913c:	4313      	orrs	r3, r2
 800913e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8009142:	7bfa      	ldrb	r2, [r7, #15]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f883 213a 	strb.w	r2, [r3, #314]	@ 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800914a:	2201      	movs	r2, #1
 800914c:	2100      	movs	r1, #0
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f004 fe08 	bl	800dd64 <VL53L0X_WrByte>
 8009154:	4603      	mov	r3, r0
 8009156:	461a      	mov	r2, r3
 8009158:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800915c:	4313      	orrs	r3, r2
 800915e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009162:	2200      	movs	r2, #0
 8009164:	21ff      	movs	r1, #255	@ 0xff
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f004 fdfc 	bl	800dd64 <VL53L0X_WrByte>
 800916c:	4603      	mov	r3, r0
 800916e:	461a      	mov	r2, r3
 8009170:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009174:	4313      	orrs	r3, r2
 8009176:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800917a:	2200      	movs	r2, #0
 800917c:	2180      	movs	r1, #128	@ 0x80
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f004 fdf0 	bl	800dd64 <VL53L0X_WrByte>
 8009184:	4603      	mov	r3, r0
 8009186:	461a      	mov	r2, r3
 8009188:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800918c:	4313      	orrs	r3, r2
 800918e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009192:	2300      	movs	r3, #0
 8009194:	653b      	str	r3, [r7, #80]	@ 0x50
 8009196:	e014      	b.n	80091c2 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8009198:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800919c:	2b00      	cmp	r3, #0
 800919e:	d114      	bne.n	80091ca <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 80091a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	2201      	movs	r2, #1
 80091a6:	4619      	mov	r1, r3
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 fd31 	bl	8009c10 <VL53L0X_SetLimitCheckEnable>
 80091ae:	4603      	mov	r3, r0
 80091b0:	461a      	mov	r2, r3
 80091b2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80091b6:	4313      	orrs	r3, r2
 80091b8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80091bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091be:	3301      	adds	r3, #1
 80091c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80091c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091c4:	2b05      	cmp	r3, #5
 80091c6:	dde7      	ble.n	8009198 <VL53L0X_DataInit+0x180>
 80091c8:	e000      	b.n	80091cc <VL53L0X_DataInit+0x1b4>
		else
			break;
 80091ca:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 80091cc:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d107      	bne.n	80091e4 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80091d4:	2200      	movs	r2, #0
 80091d6:	2102      	movs	r1, #2
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f000 fd19 	bl	8009c10 <VL53L0X_SetLimitCheckEnable>
 80091de:	4603      	mov	r3, r0
 80091e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80091e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d107      	bne.n	80091fc <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80091ec:	2200      	movs	r2, #0
 80091ee:	2103      	movs	r1, #3
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 fd0d 	bl	8009c10 <VL53L0X_SetLimitCheckEnable>
 80091f6:	4603      	mov	r3, r0
 80091f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80091fc:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8009200:	2b00      	cmp	r3, #0
 8009202:	d107      	bne.n	8009214 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8009204:	2200      	movs	r2, #0
 8009206:	2104      	movs	r1, #4
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 fd01 	bl	8009c10 <VL53L0X_SetLimitCheckEnable>
 800920e:	4603      	mov	r3, r0
 8009210:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8009214:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8009218:	2b00      	cmp	r3, #0
 800921a:	d107      	bne.n	800922c <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800921c:	2200      	movs	r2, #0
 800921e:	2105      	movs	r1, #5
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 fcf5 	bl	8009c10 <VL53L0X_SetLimitCheckEnable>
 8009226:	4603      	mov	r3, r0
 8009228:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800922c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8009230:	2b00      	cmp	r3, #0
 8009232:	d108      	bne.n	8009246 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8009234:	f44f 1290 	mov.w	r2, #1179648	@ 0x120000
 8009238:	2100      	movs	r1, #0
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 fd98 	bl	8009d70 <VL53L0X_SetLimitCheckValue>
 8009240:	4603      	mov	r3, r0
 8009242:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009246:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800924a:	2b00      	cmp	r3, #0
 800924c:	d108      	bne.n	8009260 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800924e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009252:	2101      	movs	r1, #1
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 fd8b 	bl	8009d70 <VL53L0X_SetLimitCheckValue>
 800925a:	4603      	mov	r3, r0
 800925c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009260:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8009264:	2b00      	cmp	r3, #0
 8009266:	d108      	bne.n	800927a <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8009268:	f44f 120c 	mov.w	r2, #2293760	@ 0x230000
 800926c:	2102      	movs	r1, #2
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 fd7e 	bl	8009d70 <VL53L0X_SetLimitCheckValue>
 8009274:	4603      	mov	r3, r0
 8009276:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800927a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800927e:	2b00      	cmp	r3, #0
 8009280:	d107      	bne.n	8009292 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8009282:	2200      	movs	r2, #0
 8009284:	2103      	movs	r1, #3
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 fd72 	bl	8009d70 <VL53L0X_SetLimitCheckValue>
 800928c:	4603      	mov	r3, r0
 800928e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009292:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 8009296:	2b00      	cmp	r3, #0
 8009298:	d10f      	bne.n	80092ba <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	22ff      	movs	r2, #255	@ 0xff
 800929e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80092a2:	22ff      	movs	r2, #255	@ 0xff
 80092a4:	2101      	movs	r1, #1
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f004 fd5c 	bl	800dd64 <VL53L0X_WrByte>
 80092ac:	4603      	mov	r3, r0
 80092ae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2201      	movs	r2, #1
 80092b6:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 80092ba:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d103      	bne.n	80092ca <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 80092ca:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3758      	adds	r7, #88	@ 0x58
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bdb0      	pop	{r4, r5, r7, pc}
 80092d6:	bf00      	nop
 80092d8:	00016b85 	.word	0x00016b85
 80092dc:	000970a4 	.word	0x000970a4

080092e0 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 80092e0:	b5b0      	push	{r4, r5, r7, lr}
 80092e2:	b09e      	sub	sp, #120	@ 0x78
 80092e4:	af02      	add	r7, sp, #8
 80092e6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80092e8:	2300      	movs	r3, #0
 80092ea:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80092ee:	f107 031c 	add.w	r3, r7, #28
 80092f2:	2240      	movs	r2, #64	@ 0x40
 80092f4:	2100      	movs	r1, #0
 80092f6:	4618      	mov	r0, r3
 80092f8:	f005 fcc1 	bl	800ec7e <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80092fc:	2300      	movs	r3, #0
 80092fe:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8009300:	2300      	movs	r3, #0
 8009302:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8009304:	2300      	movs	r3, #0
 8009306:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	uint32_t count = 0;
 800930a:	2300      	movs	r3, #0
 800930c:	663b      	str	r3, [r7, #96]	@ 0x60
	uint8_t isApertureSpads = 0;
 800930e:	2300      	movs	r3, #0
 8009310:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8009312:	2300      	movs	r3, #0
 8009314:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8009316:	2300      	movs	r3, #0
 8009318:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800931c:	2101      	movs	r1, #1
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f002 fa69 	bl	800b7f6 <VL53L0X_get_info_from_device>
 8009324:	4603      	mov	r3, r0
 8009326:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f893 3113 	ldrb.w	r3, [r3, #275]	@ 0x113
 8009330:	663b      	str	r3, [r7, #96]	@ 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 8009338:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 800933c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009340:	2b01      	cmp	r3, #1
 8009342:	d80d      	bhi.n	8009360 <VL53L0X_StaticInit+0x80>
 8009344:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009348:	2b01      	cmp	r3, #1
 800934a:	d102      	bne.n	8009352 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 800934c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800934e:	2b20      	cmp	r3, #32
 8009350:	d806      	bhi.n	8009360 <VL53L0X_StaticInit+0x80>
 8009352:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8009356:	2b00      	cmp	r3, #0
 8009358:	d10e      	bne.n	8009378 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800935a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800935c:	2b0c      	cmp	r3, #12
 800935e:	d90b      	bls.n	8009378 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8009360:	f107 0218 	add.w	r2, r7, #24
 8009364:	f107 0314 	add.w	r3, r7, #20
 8009368:	4619      	mov	r1, r3
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f001 fce8 	bl	800ad40 <VL53L0X_perform_ref_spad_management>
 8009370:	4603      	mov	r3, r0
 8009372:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8009376:	e009      	b.n	800938c <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8009378:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800937c:	461a      	mov	r2, r3
 800937e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f001 fee9 	bl	800b158 <VL53L0X_set_reference_spads>
 8009386:	4603      	mov	r3, r0
 8009388:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800938c:	4b93      	ldr	r3, [pc, #588]	@ (80095dc <VL53L0X_StaticInit+0x2fc>)
 800938e:	66bb      	str	r3, [r7, #104]	@ 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8009390:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8009394:	2b00      	cmp	r3, #0
 8009396:	d10f      	bne.n	80093b8 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f893 3150 	ldrb.w	r3, [r3, #336]	@ 0x150
 800939e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 80093a2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d104      	bne.n	80093b4 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80093b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80093b2:	e001      	b.n	80093b8 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 80093b4:	4b89      	ldr	r3, [pc, #548]	@ (80095dc <VL53L0X_StaticInit+0x2fc>)
 80093b6:	66bb      	str	r3, [r7, #104]	@ 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 80093b8:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d106      	bne.n	80093ce <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 80093c0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f003 fdb8 	bl	800cf38 <VL53L0X_load_tuning_settings>
 80093c8:	4603      	mov	r3, r0
 80093ca:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 80093ce:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d10a      	bne.n	80093ec <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 80093d6:	2300      	movs	r3, #0
 80093d8:	9300      	str	r3, [sp, #0]
 80093da:	2304      	movs	r3, #4
 80093dc:	2200      	movs	r2, #0
 80093de:	2100      	movs	r1, #0
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f001 f8e5 	bl	800a5b0 <VL53L0X_SetGpioConfig>
 80093e6:	4603      	mov	r3, r0
 80093e8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80093ec:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d121      	bne.n	8009438 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80093f4:	2201      	movs	r2, #1
 80093f6:	21ff      	movs	r1, #255	@ 0xff
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f004 fcb3 	bl	800dd64 <VL53L0X_WrByte>
 80093fe:	4603      	mov	r3, r0
 8009400:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8009404:	f107 031a 	add.w	r3, r7, #26
 8009408:	461a      	mov	r2, r3
 800940a:	2184      	movs	r1, #132	@ 0x84
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f004 fd55 	bl	800debc <VL53L0X_RdWord>
 8009412:	4603      	mov	r3, r0
 8009414:	461a      	mov	r2, r3
 8009416:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800941a:	4313      	orrs	r3, r2
 800941c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009420:	2200      	movs	r2, #0
 8009422:	21ff      	movs	r1, #255	@ 0xff
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f004 fc9d 	bl	800dd64 <VL53L0X_WrByte>
 800942a:	4603      	mov	r3, r0
 800942c:	461a      	mov	r2, r3
 800942e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009432:	4313      	orrs	r3, r2
 8009434:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009438:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800943c:	2b00      	cmp	r3, #0
 800943e:	d104      	bne.n	800944a <VL53L0X_StaticInit+0x16a>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8009440:	8b7b      	ldrh	r3, [r7, #26]
 8009442:	011a      	lsls	r2, r3, #4
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800944a:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800944e:	2b00      	cmp	r3, #0
 8009450:	d108      	bne.n	8009464 <VL53L0X_StaticInit+0x184>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8009452:	f107 031c 	add.w	r3, r7, #28
 8009456:	4619      	mov	r1, r3
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 f8cf 	bl	80095fc <VL53L0X_GetDeviceParameters>
 800945e:	4603      	mov	r3, r0
 8009460:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8009464:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8009468:	2b00      	cmp	r3, #0
 800946a:	d110      	bne.n	800948e <VL53L0X_StaticInit+0x1ae>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800946c:	f107 0319 	add.w	r3, r7, #25
 8009470:	4619      	mov	r1, r3
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 f991 	bl	800979a <VL53L0X_GetFractionEnable>
 8009478:	4603      	mov	r3, r0
 800947a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 800947e:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8009482:	2b00      	cmp	r3, #0
 8009484:	d103      	bne.n	800948e <VL53L0X_StaticInit+0x1ae>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8009486:	7e7a      	ldrb	r2, [r7, #25]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 800948e:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8009492:	2b00      	cmp	r3, #0
 8009494:	d10e      	bne.n	80094b4 <VL53L0X_StaticInit+0x1d4>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f103 0410 	add.w	r4, r3, #16
 800949c:	f107 051c 	add.w	r5, r7, #28
 80094a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80094a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80094a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80094a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80094a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80094aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80094ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80094b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 80094b4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d111      	bne.n	80094e0 <VL53L0X_StaticInit+0x200>
		Status = VL53L0X_RdByte(Dev,
 80094bc:	f107 0319 	add.w	r3, r7, #25
 80094c0:	461a      	mov	r2, r3
 80094c2:	2101      	movs	r1, #1
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f004 fccf 	bl	800de68 <VL53L0X_RdByte>
 80094ca:	4603      	mov	r3, r0
 80094cc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80094d0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d103      	bne.n	80094e0 <VL53L0X_StaticInit+0x200>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80094d8:	7e7a      	ldrb	r2, [r7, #25]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80094e0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d107      	bne.n	80094f8 <VL53L0X_StaticInit+0x218>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80094e8:	2200      	movs	r2, #0
 80094ea:	2100      	movs	r1, #0
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 f9c9 	bl	8009884 <VL53L0X_SetSequenceStepEnable>
 80094f2:	4603      	mov	r3, r0
 80094f4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80094f8:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d107      	bne.n	8009510 <VL53L0X_StaticInit+0x230>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8009500:	2200      	movs	r2, #0
 8009502:	2102      	movs	r1, #2
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 f9bd 	bl	8009884 <VL53L0X_SetSequenceStepEnable>
 800950a:	4603      	mov	r3, r0
 800950c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8009510:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8009514:	2b00      	cmp	r3, #0
 8009516:	d103      	bne.n	8009520 <VL53L0X_StaticInit+0x240>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2203      	movs	r2, #3
 800951c:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8009520:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8009524:	2b00      	cmp	r3, #0
 8009526:	d109      	bne.n	800953c <VL53L0X_StaticInit+0x25c>
		Status = VL53L0X_GetVcselPulsePeriod(
 8009528:	f107 0313 	add.w	r3, r7, #19
 800952c:	461a      	mov	r2, r3
 800952e:	2100      	movs	r1, #0
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f000 f98f 	bl	8009854 <VL53L0X_GetVcselPulsePeriod>
 8009536:	4603      	mov	r3, r0
 8009538:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800953c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8009540:	2b00      	cmp	r3, #0
 8009542:	d103      	bne.n	800954c <VL53L0X_StaticInit+0x26c>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009544:	7cfa      	ldrb	r2, [r7, #19]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800954c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8009550:	2b00      	cmp	r3, #0
 8009552:	d109      	bne.n	8009568 <VL53L0X_StaticInit+0x288>
		Status = VL53L0X_GetVcselPulsePeriod(
 8009554:	f107 0313 	add.w	r3, r7, #19
 8009558:	461a      	mov	r2, r3
 800955a:	2101      	movs	r1, #1
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f000 f979 	bl	8009854 <VL53L0X_GetVcselPulsePeriod>
 8009562:	4603      	mov	r3, r0
 8009564:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009568:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800956c:	2b00      	cmp	r3, #0
 800956e:	d103      	bne.n	8009578 <VL53L0X_StaticInit+0x298>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009570:	7cfa      	ldrb	r2, [r7, #19]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8009578:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 800957c:	2b00      	cmp	r3, #0
 800957e:	d109      	bne.n	8009594 <VL53L0X_StaticInit+0x2b4>
		Status = get_sequence_step_timeout(
 8009580:	f107 030c 	add.w	r3, r7, #12
 8009584:	461a      	mov	r2, r3
 8009586:	2103      	movs	r1, #3
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	f002 feb3 	bl	800c2f4 <get_sequence_step_timeout>
 800958e:	4603      	mov	r3, r0
 8009590:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009594:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8009598:	2b00      	cmp	r3, #0
 800959a:	d103      	bne.n	80095a4 <VL53L0X_StaticInit+0x2c4>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80095a4:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d109      	bne.n	80095c0 <VL53L0X_StaticInit+0x2e0>
		Status = get_sequence_step_timeout(
 80095ac:	f107 030c 	add.w	r3, r7, #12
 80095b0:	461a      	mov	r2, r3
 80095b2:	2104      	movs	r1, #4
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f002 fe9d 	bl	800c2f4 <get_sequence_step_timeout>
 80095ba:	4603      	mov	r3, r0
 80095bc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80095c0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d103      	bne.n	80095d0 <VL53L0X_StaticInit+0x2f0>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80095c8:	68fa      	ldr	r2, [r7, #12]
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80095d0:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3770      	adds	r7, #112	@ 0x70
 80095d8:	46bd      	mov	sp, r7
 80095da:	bdb0      	pop	{r4, r5, r7, pc}
 80095dc:	20000010 	.word	0x20000010

080095e0 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b085      	sub	sp, #20
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 80095e8:	239d      	movs	r3, #157	@ 0x9d
 80095ea:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 80095ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3714      	adds	r7, #20
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009606:	2300      	movs	r3, #0
 8009608:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	4619      	mov	r1, r3
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 f8b0 	bl	8009774 <VL53L0X_GetDeviceMode>
 8009614:	4603      	mov	r3, r0
 8009616:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009618:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d107      	bne.n	8009630 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	3308      	adds	r3, #8
 8009624:	4619      	mov	r1, r3
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 fa76 	bl	8009b18 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800962c:	4603      	mov	r3, r0
 800962e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8009630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d102      	bne.n	800963e <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	2200      	movs	r2, #0
 800963c:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800963e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d107      	bne.n	8009656 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	3310      	adds	r3, #16
 800964a:	4619      	mov	r1, r3
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 faac 	bl	8009baa <VL53L0X_GetXTalkCompensationRateMegaCps>
 8009652:	4603      	mov	r3, r0
 8009654:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8009656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d107      	bne.n	800966e <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800965e:	683b      	ldr	r3, [r7, #0]
 8009660:	3314      	adds	r3, #20
 8009662:	4619      	mov	r1, r3
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f7ff fcc3 	bl	8008ff0 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800966a:	4603      	mov	r3, r0
 800966c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800966e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d134      	bne.n	80096e0 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009676:	2300      	movs	r3, #0
 8009678:	60bb      	str	r3, [r7, #8]
 800967a:	e02a      	b.n	80096d2 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800967c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d12a      	bne.n	80096da <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	b299      	uxth	r1, r3
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	3308      	adds	r3, #8
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	683a      	ldr	r2, [r7, #0]
 8009690:	4413      	add	r3, r2
 8009692:	3304      	adds	r3, #4
 8009694:	461a      	mov	r2, r3
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 fbcc 	bl	8009e34 <VL53L0X_GetLimitCheckValue>
 800969c:	4603      	mov	r3, r0
 800969e:	461a      	mov	r2, r3
 80096a0:	7bfb      	ldrb	r3, [r7, #15]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80096a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d117      	bne.n	80096de <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	b299      	uxth	r1, r3
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	3318      	adds	r3, #24
 80096b6:	683a      	ldr	r2, [r7, #0]
 80096b8:	4413      	add	r3, r2
 80096ba:	461a      	mov	r2, r3
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 fb33 	bl	8009d28 <VL53L0X_GetLimitCheckEnable>
 80096c2:	4603      	mov	r3, r0
 80096c4:	461a      	mov	r2, r3
 80096c6:	7bfb      	ldrb	r3, [r7, #15]
 80096c8:	4313      	orrs	r3, r2
 80096ca:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	3301      	adds	r3, #1
 80096d0:	60bb      	str	r3, [r7, #8]
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	2b05      	cmp	r3, #5
 80096d6:	ddd1      	ble.n	800967c <VL53L0X_GetDeviceParameters+0x80>
 80096d8:	e002      	b.n	80096e0 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80096da:	bf00      	nop
 80096dc:	e000      	b.n	80096e0 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80096de:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80096e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d107      	bne.n	80096f8 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	333c      	adds	r3, #60	@ 0x3c
 80096ec:	4619      	mov	r1, r3
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 fc2e 	bl	8009f50 <VL53L0X_GetWrapAroundCheckEnable>
 80096f4:	4603      	mov	r3, r0
 80096f6:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80096f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d107      	bne.n	8009710 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	3304      	adds	r3, #4
 8009704:	4619      	mov	r1, r3
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 f879 	bl	80097fe <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800970c:	4603      	mov	r3, r0
 800970e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009710:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009714:	4618      	mov	r0, r3
 8009716:	3710      	adds	r7, #16
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800971c:	b480      	push	{r7}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	460b      	mov	r3, r1
 8009726:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009728:	2300      	movs	r3, #0
 800972a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800972c:	78fb      	ldrb	r3, [r7, #3]
 800972e:	2b15      	cmp	r3, #21
 8009730:	bf8c      	ite	hi
 8009732:	2201      	movhi	r2, #1
 8009734:	2200      	movls	r2, #0
 8009736:	b2d2      	uxtb	r2, r2
 8009738:	2a00      	cmp	r2, #0
 800973a:	d10f      	bne.n	800975c <VL53L0X_SetDeviceMode+0x40>
 800973c:	4a0c      	ldr	r2, [pc, #48]	@ (8009770 <VL53L0X_SetDeviceMode+0x54>)
 800973e:	fa22 f303 	lsr.w	r3, r2, r3
 8009742:	f003 0301 	and.w	r3, r3, #1
 8009746:	2b00      	cmp	r3, #0
 8009748:	bf14      	ite	ne
 800974a:	2301      	movne	r3, #1
 800974c:	2300      	moveq	r3, #0
 800974e:	b2db      	uxtb	r3, r3
 8009750:	2b00      	cmp	r3, #0
 8009752:	d003      	beq.n	800975c <VL53L0X_SetDeviceMode+0x40>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	78fa      	ldrb	r2, [r7, #3]
 8009758:	741a      	strb	r2, [r3, #16]
		break;
 800975a:	e001      	b.n	8009760 <VL53L0X_SetDeviceMode+0x44>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800975c:	23f8      	movs	r3, #248	@ 0xf8
 800975e:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009760:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009764:	4618      	mov	r0, r3
 8009766:	3714      	adds	r7, #20
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr
 8009770:	0030000b 	.word	0x0030000b

08009774 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8009774:	b480      	push	{r7}
 8009776:	b085      	sub	sp, #20
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800977e:	2300      	movs	r3, #0
 8009780:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	7c1a      	ldrb	r2, [r3, #16]
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800978a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800978e:	4618      	mov	r0, r3
 8009790:	3714      	adds	r7, #20
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr

0800979a <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b084      	sub	sp, #16
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
 80097a2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80097a4:	2300      	movs	r3, #0
 80097a6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80097a8:	683a      	ldr	r2, [r7, #0]
 80097aa:	2109      	movs	r1, #9
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f004 fb5b 	bl	800de68 <VL53L0X_RdByte>
 80097b2:	4603      	mov	r3, r0
 80097b4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80097b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d106      	bne.n	80097cc <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	f003 0301 	and.w	r3, r3, #1
 80097c6:	b2da      	uxtb	r2, r3
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80097cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3710      	adds	r7, #16
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80097e2:	2300      	movs	r3, #0
 80097e4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80097e6:	6839      	ldr	r1, [r7, #0]
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f003 fa13 	bl	800cc14 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80097ee:	4603      	mov	r3, r0
 80097f0:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80097f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3710      	adds	r7, #16
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80097fe:	b580      	push	{r7, lr}
 8009800:	b084      	sub	sp, #16
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
 8009806:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009808:	2300      	movs	r3, #0
 800980a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800980c:	6839      	ldr	r1, [r7, #0]
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f003 fae0 	bl	800cdd4 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8009814:	4603      	mov	r3, r0
 8009816:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8009818:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800981c:	4618      	mov	r0, r3
 800981e:	3710      	adds	r7, #16
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}

08009824 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	460b      	mov	r3, r1
 800982e:	70fb      	strb	r3, [r7, #3]
 8009830:	4613      	mov	r3, r2
 8009832:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009834:	2300      	movs	r3, #0
 8009836:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8009838:	78ba      	ldrb	r2, [r7, #2]
 800983a:	78fb      	ldrb	r3, [r7, #3]
 800983c:	4619      	mov	r1, r3
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f002 ff2a 	bl	800c698 <VL53L0X_set_vcsel_pulse_period>
 8009844:	4603      	mov	r3, r0
 8009846:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8009848:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800984c:	4618      	mov	r0, r3
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b086      	sub	sp, #24
 8009858:	af00      	add	r7, sp, #0
 800985a:	60f8      	str	r0, [r7, #12]
 800985c:	460b      	mov	r3, r1
 800985e:	607a      	str	r2, [r7, #4]
 8009860:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009862:	2300      	movs	r3, #0
 8009864:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8009866:	7afb      	ldrb	r3, [r7, #11]
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	4619      	mov	r1, r3
 800986c:	68f8      	ldr	r0, [r7, #12]
 800986e:	f003 f99a 	bl	800cba6 <VL53L0X_get_vcsel_pulse_period>
 8009872:	4603      	mov	r3, r0
 8009874:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8009876:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800987a:	4618      	mov	r0, r3
 800987c:	3718      	adds	r7, #24
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
	...

08009884 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b086      	sub	sp, #24
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	460b      	mov	r3, r1
 800988e:	70fb      	strb	r3, [r7, #3]
 8009890:	4613      	mov	r3, r2
 8009892:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009894:	2300      	movs	r3, #0
 8009896:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009898:	2300      	movs	r3, #0
 800989a:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800989c:	2300      	movs	r3, #0
 800989e:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80098a0:	f107 030f 	add.w	r3, r7, #15
 80098a4:	461a      	mov	r2, r3
 80098a6:	2101      	movs	r1, #1
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f004 fadd 	bl	800de68 <VL53L0X_RdByte>
 80098ae:	4603      	mov	r3, r0
 80098b0:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80098b2:	7bfb      	ldrb	r3, [r7, #15]
 80098b4:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80098b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d159      	bne.n	8009972 <VL53L0X_SetSequenceStepEnable+0xee>
		if (SequenceStepEnabled == 1) {
 80098be:	78bb      	ldrb	r3, [r7, #2]
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d12b      	bne.n	800991c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80098c4:	78fb      	ldrb	r3, [r7, #3]
 80098c6:	2b04      	cmp	r3, #4
 80098c8:	d825      	bhi.n	8009916 <VL53L0X_SetSequenceStepEnable+0x92>
 80098ca:	a201      	add	r2, pc, #4	@ (adr r2, 80098d0 <VL53L0X_SetSequenceStepEnable+0x4c>)
 80098cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d0:	080098e5 	.word	0x080098e5
 80098d4:	080098ef 	.word	0x080098ef
 80098d8:	080098f9 	.word	0x080098f9
 80098dc:	08009903 	.word	0x08009903
 80098e0:	0800990d 	.word	0x0800990d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80098e4:	7dbb      	ldrb	r3, [r7, #22]
 80098e6:	f043 0310 	orr.w	r3, r3, #16
 80098ea:	75bb      	strb	r3, [r7, #22]
				break;
 80098ec:	e041      	b.n	8009972 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 80098ee:	7dbb      	ldrb	r3, [r7, #22]
 80098f0:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 80098f4:	75bb      	strb	r3, [r7, #22]
				break;
 80098f6:	e03c      	b.n	8009972 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 80098f8:	7dbb      	ldrb	r3, [r7, #22]
 80098fa:	f043 0304 	orr.w	r3, r3, #4
 80098fe:	75bb      	strb	r3, [r7, #22]
				break;
 8009900:	e037      	b.n	8009972 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8009902:	7dbb      	ldrb	r3, [r7, #22]
 8009904:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009908:	75bb      	strb	r3, [r7, #22]
				break;
 800990a:	e032      	b.n	8009972 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800990c:	7dbb      	ldrb	r3, [r7, #22]
 800990e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009912:	75bb      	strb	r3, [r7, #22]
				break;
 8009914:	e02d      	b.n	8009972 <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009916:	23fc      	movs	r3, #252	@ 0xfc
 8009918:	75fb      	strb	r3, [r7, #23]
 800991a:	e02a      	b.n	8009972 <VL53L0X_SetSequenceStepEnable+0xee>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800991c:	78fb      	ldrb	r3, [r7, #3]
 800991e:	2b04      	cmp	r3, #4
 8009920:	d825      	bhi.n	800996e <VL53L0X_SetSequenceStepEnable+0xea>
 8009922:	a201      	add	r2, pc, #4	@ (adr r2, 8009928 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8009924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009928:	0800993d 	.word	0x0800993d
 800992c:	08009947 	.word	0x08009947
 8009930:	08009951 	.word	0x08009951
 8009934:	0800995b 	.word	0x0800995b
 8009938:	08009965 	.word	0x08009965
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800993c:	7dbb      	ldrb	r3, [r7, #22]
 800993e:	f023 0310 	bic.w	r3, r3, #16
 8009942:	75bb      	strb	r3, [r7, #22]
				break;
 8009944:	e015      	b.n	8009972 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8009946:	7dbb      	ldrb	r3, [r7, #22]
 8009948:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 800994c:	75bb      	strb	r3, [r7, #22]
				break;
 800994e:	e010      	b.n	8009972 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8009950:	7dbb      	ldrb	r3, [r7, #22]
 8009952:	f023 0304 	bic.w	r3, r3, #4
 8009956:	75bb      	strb	r3, [r7, #22]
				break;
 8009958:	e00b      	b.n	8009972 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800995a:	7dbb      	ldrb	r3, [r7, #22]
 800995c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009960:	75bb      	strb	r3, [r7, #22]
				break;
 8009962:	e006      	b.n	8009972 <VL53L0X_SetSequenceStepEnable+0xee>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8009964:	7dbb      	ldrb	r3, [r7, #22]
 8009966:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800996a:	75bb      	strb	r3, [r7, #22]
				break;
 800996c:	e001      	b.n	8009972 <VL53L0X_SetSequenceStepEnable+0xee>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800996e:	23fc      	movs	r3, #252	@ 0xfc
 8009970:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	if (SequenceConfigNew != SequenceConfig) {
 8009972:	7bfb      	ldrb	r3, [r7, #15]
 8009974:	7dba      	ldrb	r2, [r7, #22]
 8009976:	429a      	cmp	r2, r3
 8009978:	d01e      	beq.n	80099b8 <VL53L0X_SetSequenceStepEnable+0x134>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800997a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d107      	bne.n	8009992 <VL53L0X_SetSequenceStepEnable+0x10e>
			Status = VL53L0X_WrByte(Dev,
 8009982:	7dbb      	ldrb	r3, [r7, #22]
 8009984:	461a      	mov	r2, r3
 8009986:	2101      	movs	r1, #1
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f004 f9eb 	bl	800dd64 <VL53L0X_WrByte>
 800998e:	4603      	mov	r3, r0
 8009990:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8009992:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d103      	bne.n	80099a2 <VL53L0X_SetSequenceStepEnable+0x11e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	7dba      	ldrb	r2, [r7, #22]
 800999e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80099a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d106      	bne.n	80099b8 <VL53L0X_SetSequenceStepEnable+0x134>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	695b      	ldr	r3, [r3, #20]
 80099ae:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80099b0:	6939      	ldr	r1, [r7, #16]
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f7ff ff10 	bl	80097d8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80099b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3718      	adds	r7, #24
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b087      	sub	sp, #28
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	607b      	str	r3, [r7, #4]
 80099ce:	460b      	mov	r3, r1
 80099d0:	72fb      	strb	r3, [r7, #11]
 80099d2:	4613      	mov	r3, r2
 80099d4:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80099d6:	2300      	movs	r3, #0
 80099d8:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2200      	movs	r2, #0
 80099de:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80099e0:	7afb      	ldrb	r3, [r7, #11]
 80099e2:	2b04      	cmp	r3, #4
 80099e4:	d836      	bhi.n	8009a54 <sequence_step_enabled+0x90>
 80099e6:	a201      	add	r2, pc, #4	@ (adr r2, 80099ec <sequence_step_enabled+0x28>)
 80099e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ec:	08009a01 	.word	0x08009a01
 80099f0:	08009a13 	.word	0x08009a13
 80099f4:	08009a25 	.word	0x08009a25
 80099f8:	08009a37 	.word	0x08009a37
 80099fc:	08009a49 	.word	0x08009a49
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8009a00:	7abb      	ldrb	r3, [r7, #10]
 8009a02:	111b      	asrs	r3, r3, #4
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	f003 0301 	and.w	r3, r3, #1
 8009a0a:	b2da      	uxtb	r2, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	701a      	strb	r2, [r3, #0]
		break;
 8009a10:	e022      	b.n	8009a58 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8009a12:	7abb      	ldrb	r3, [r7, #10]
 8009a14:	10db      	asrs	r3, r3, #3
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	f003 0301 	and.w	r3, r3, #1
 8009a1c:	b2da      	uxtb	r2, r3
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	701a      	strb	r2, [r3, #0]
		break;
 8009a22:	e019      	b.n	8009a58 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8009a24:	7abb      	ldrb	r3, [r7, #10]
 8009a26:	109b      	asrs	r3, r3, #2
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	f003 0301 	and.w	r3, r3, #1
 8009a2e:	b2da      	uxtb	r2, r3
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	701a      	strb	r2, [r3, #0]
		break;
 8009a34:	e010      	b.n	8009a58 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8009a36:	7abb      	ldrb	r3, [r7, #10]
 8009a38:	119b      	asrs	r3, r3, #6
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	f003 0301 	and.w	r3, r3, #1
 8009a40:	b2da      	uxtb	r2, r3
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	701a      	strb	r2, [r3, #0]
		break;
 8009a46:	e007      	b.n	8009a58 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8009a48:	7abb      	ldrb	r3, [r7, #10]
 8009a4a:	09db      	lsrs	r3, r3, #7
 8009a4c:	b2da      	uxtb	r2, r3
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	701a      	strb	r2, [r3, #0]
		break;
 8009a52:	e001      	b.n	8009a58 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009a54:	23fc      	movs	r3, #252	@ 0xfc
 8009a56:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009a58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	371c      	adds	r7, #28
 8009a60:	46bd      	mov	sp, r7
 8009a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a66:	4770      	bx	lr

08009a68 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a72:	2300      	movs	r3, #0
 8009a74:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8009a76:	2300      	movs	r3, #0
 8009a78:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009a7a:	f107 030e 	add.w	r3, r7, #14
 8009a7e:	461a      	mov	r2, r3
 8009a80:	2101      	movs	r1, #1
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f004 f9f0 	bl	800de68 <VL53L0X_RdByte>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8009a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d107      	bne.n	8009aa4 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8009a94:	7bba      	ldrb	r2, [r7, #14]
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	2100      	movs	r1, #0
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f7ff ff92 	bl	80099c4 <sequence_step_enabled>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009aa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d108      	bne.n	8009abe <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8009aac:	7bba      	ldrb	r2, [r7, #14]
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	3302      	adds	r3, #2
 8009ab2:	2101      	movs	r1, #1
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f7ff ff85 	bl	80099c4 <sequence_step_enabled>
 8009aba:	4603      	mov	r3, r0
 8009abc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d108      	bne.n	8009ad8 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8009ac6:	7bba      	ldrb	r2, [r7, #14]
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	3301      	adds	r3, #1
 8009acc:	2102      	movs	r1, #2
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f7ff ff78 	bl	80099c4 <sequence_step_enabled>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d108      	bne.n	8009af2 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8009ae0:	7bba      	ldrb	r2, [r7, #14]
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	3303      	adds	r3, #3
 8009ae6:	2103      	movs	r1, #3
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f7ff ff6b 	bl	80099c4 <sequence_step_enabled>
 8009aee:	4603      	mov	r3, r0
 8009af0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d108      	bne.n	8009b0c <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8009afa:	7bba      	ldrb	r2, [r7, #14]
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	3304      	adds	r3, #4
 8009b00:	2104      	movs	r1, #4
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f7ff ff5e 	bl	80099c4 <sequence_step_enabled>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009b0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3710      	adds	r7, #16
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b22:	2300      	movs	r3, #0
 8009b24:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8009b26:	f107 030c 	add.w	r3, r7, #12
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	21f8      	movs	r1, #248	@ 0xf8
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f004 f9c4 	bl	800debc <VL53L0X_RdWord>
 8009b34:	4603      	mov	r3, r0
 8009b36:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8009b38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d108      	bne.n	8009b52 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8009b40:	f107 0308 	add.w	r3, r7, #8
 8009b44:	461a      	mov	r2, r3
 8009b46:	2104      	movs	r1, #4
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f004 f9ed 	bl	800df28 <VL53L0X_RdDWord>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009b52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d10c      	bne.n	8009b74 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8009b5a:	89bb      	ldrh	r3, [r7, #12]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d005      	beq.n	8009b6c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	89ba      	ldrh	r2, [r7, #12]
 8009b64:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	681a      	ldr	r2, [r3, #0]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009b74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b085      	sub	sp, #20
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	7f1b      	ldrb	r3, [r3, #28]
 8009b92:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	7bba      	ldrb	r2, [r7, #14]
 8009b98:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8009b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3714      	adds	r7, #20
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr

08009baa <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b086      	sub	sp, #24
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
 8009bb2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8009bb8:	f107 030e 	add.w	r3, r7, #14
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	2120      	movs	r1, #32
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f004 f97b 	bl	800debc <VL53L0X_RdWord>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8009bca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d118      	bne.n	8009c04 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8009bd2:	89fb      	ldrh	r3, [r7, #14]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d109      	bne.n	8009bec <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6a1b      	ldr	r3, [r3, #32]
 8009bdc:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	693a      	ldr	r2, [r7, #16]
 8009be2:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	771a      	strb	r2, [r3, #28]
 8009bea:	e00b      	b.n	8009c04 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8009bec:	89fb      	ldrh	r3, [r7, #14]
 8009bee:	00db      	lsls	r3, r3, #3
 8009bf0:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	693a      	ldr	r2, [r7, #16]
 8009bf6:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	693a      	ldr	r2, [r7, #16]
 8009bfc:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2201      	movs	r2, #1
 8009c02:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009c04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3718      	adds	r7, #24
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b086      	sub	sp, #24
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	460b      	mov	r3, r1
 8009c1a:	807b      	strh	r3, [r7, #2]
 8009c1c:	4613      	mov	r3, r2
 8009c1e:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009c20:	2300      	movs	r3, #0
 8009c22:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8009c24:	2300      	movs	r3, #0
 8009c26:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8009c30:	887b      	ldrh	r3, [r7, #2]
 8009c32:	2b05      	cmp	r3, #5
 8009c34:	d902      	bls.n	8009c3c <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009c36:	23fc      	movs	r3, #252	@ 0xfc
 8009c38:	75fb      	strb	r3, [r7, #23]
 8009c3a:	e05b      	b.n	8009cf4 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8009c3c:	787b      	ldrb	r3, [r7, #1]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d106      	bne.n	8009c50 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8009c42:	2300      	movs	r3, #0
 8009c44:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8009c46:	2300      	movs	r3, #0
 8009c48:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	73bb      	strb	r3, [r7, #14]
 8009c4e:	e00a      	b.n	8009c66 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009c50:	887b      	ldrh	r3, [r7, #2]
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	330c      	adds	r3, #12
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	4413      	add	r3, r2
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8009c62:	2301      	movs	r3, #1
 8009c64:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8009c66:	887b      	ldrh	r3, [r7, #2]
 8009c68:	2b05      	cmp	r3, #5
 8009c6a:	d841      	bhi.n	8009cf0 <VL53L0X_SetLimitCheckEnable+0xe0>
 8009c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8009c74 <VL53L0X_SetLimitCheckEnable+0x64>)
 8009c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c72:	bf00      	nop
 8009c74:	08009c8d 	.word	0x08009c8d
 8009c78:	08009c97 	.word	0x08009c97
 8009c7c:	08009cad 	.word	0x08009cad
 8009c80:	08009cb7 	.word	0x08009cb7
 8009c84:	08009cc1 	.word	0x08009cc1
 8009c88:	08009cd9 	.word	0x08009cd9

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	7bfa      	ldrb	r2, [r7, #15]
 8009c90:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8009c94:	e02e      	b.n	8009cf4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	2144      	movs	r1, #68	@ 0x44
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f004 f883 	bl	800ddac <VL53L0X_WrWord>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	75fb      	strb	r3, [r7, #23]

			break;
 8009caa:	e023      	b.n	8009cf4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	7bfa      	ldrb	r2, [r7, #15]
 8009cb0:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8009cb4:	e01e      	b.n	8009cf4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	7bfa      	ldrb	r2, [r7, #15]
 8009cba:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8009cbe:	e019      	b.n	8009cf4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8009cc0:	7bbb      	ldrb	r3, [r7, #14]
 8009cc2:	005b      	lsls	r3, r3, #1
 8009cc4:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8009cc6:	7b7b      	ldrb	r3, [r7, #13]
 8009cc8:	22fe      	movs	r2, #254	@ 0xfe
 8009cca:	2160      	movs	r1, #96	@ 0x60
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f004 f897 	bl	800de00 <VL53L0X_UpdateByte>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8009cd6:	e00d      	b.n	8009cf4 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8009cd8:	7bbb      	ldrb	r3, [r7, #14]
 8009cda:	011b      	lsls	r3, r3, #4
 8009cdc:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8009cde:	7b7b      	ldrb	r3, [r7, #13]
 8009ce0:	22ef      	movs	r2, #239	@ 0xef
 8009ce2:	2160      	movs	r1, #96	@ 0x60
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f004 f88b 	bl	800de00 <VL53L0X_UpdateByte>
 8009cea:	4603      	mov	r3, r0
 8009cec:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8009cee:	e001      	b.n	8009cf4 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009cf0:	23fc      	movs	r3, #252	@ 0xfc
 8009cf2:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009cf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d10f      	bne.n	8009d1c <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8009cfc:	787b      	ldrb	r3, [r7, #1]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d106      	bne.n	8009d10 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009d02:	887b      	ldrh	r3, [r7, #2]
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	4413      	add	r3, r2
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8009d0e:	e005      	b.n	8009d1c <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009d10:	887b      	ldrh	r3, [r7, #2]
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	4413      	add	r3, r2
 8009d16:	2201      	movs	r2, #1
 8009d18:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009d1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3718      	adds	r7, #24
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b087      	sub	sp, #28
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	460b      	mov	r3, r1
 8009d32:	607a      	str	r2, [r7, #4]
 8009d34:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d36:	2300      	movs	r3, #0
 8009d38:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8009d3a:	897b      	ldrh	r3, [r7, #10]
 8009d3c:	2b05      	cmp	r3, #5
 8009d3e:	d905      	bls.n	8009d4c <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009d40:	23fc      	movs	r3, #252	@ 0xfc
 8009d42:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2200      	movs	r2, #0
 8009d48:	701a      	strb	r2, [r3, #0]
 8009d4a:	e008      	b.n	8009d5e <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009d4c:	897b      	ldrh	r3, [r7, #10]
 8009d4e:	68fa      	ldr	r2, [r7, #12]
 8009d50:	4413      	add	r3, r2
 8009d52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d56:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	7dba      	ldrb	r2, [r7, #22]
 8009d5c:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009d5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	371c      	adds	r7, #28
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr
	...

08009d70 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b086      	sub	sp, #24
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	460b      	mov	r3, r1
 8009d7a:	607a      	str	r2, [r7, #4]
 8009d7c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8009d82:	897b      	ldrh	r3, [r7, #10]
 8009d84:	68fa      	ldr	r2, [r7, #12]
 8009d86:	4413      	add	r3, r2
 8009d88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009d8c:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8009d8e:	7dbb      	ldrb	r3, [r7, #22]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d107      	bne.n	8009da4 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009d94:	897b      	ldrh	r3, [r7, #10]
 8009d96:	68fa      	ldr	r2, [r7, #12]
 8009d98:	330c      	adds	r3, #12
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	4413      	add	r3, r2
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	605a      	str	r2, [r3, #4]
 8009da2:	e040      	b.n	8009e26 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8009da4:	897b      	ldrh	r3, [r7, #10]
 8009da6:	2b05      	cmp	r3, #5
 8009da8:	d830      	bhi.n	8009e0c <VL53L0X_SetLimitCheckValue+0x9c>
 8009daa:	a201      	add	r2, pc, #4	@ (adr r2, 8009db0 <VL53L0X_SetLimitCheckValue+0x40>)
 8009dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db0:	08009dc9 	.word	0x08009dc9
 8009db4:	08009dd1 	.word	0x08009dd1
 8009db8:	08009de7 	.word	0x08009de7
 8009dbc:	08009def 	.word	0x08009def
 8009dc0:	08009df7 	.word	0x08009df7
 8009dc4:	08009df7 	.word	0x08009df7

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	687a      	ldr	r2, [r7, #4]
 8009dcc:	635a      	str	r2, [r3, #52]	@ 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8009dce:	e01f      	b.n	8009e10 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	2144      	movs	r1, #68	@ 0x44
 8009dda:	68f8      	ldr	r0, [r7, #12]
 8009ddc:	f003 ffe6 	bl	800ddac <VL53L0X_WrWord>
 8009de0:	4603      	mov	r3, r0
 8009de2:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8009de4:	e014      	b.n	8009e10 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	63da      	str	r2, [r3, #60]	@ 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8009dec:	e010      	b.n	8009e10 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	641a      	str	r2, [r3, #64]	@ 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8009df4:	e00c      	b.n	8009e10 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	461a      	mov	r2, r3
 8009dfe:	2164      	movs	r1, #100	@ 0x64
 8009e00:	68f8      	ldr	r0, [r7, #12]
 8009e02:	f003 ffd3 	bl	800ddac <VL53L0X_WrWord>
 8009e06:	4603      	mov	r3, r0
 8009e08:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8009e0a:	e001      	b.n	8009e10 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009e0c:	23fc      	movs	r3, #252	@ 0xfc
 8009e0e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009e10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d106      	bne.n	8009e26 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009e18:	897b      	ldrh	r3, [r7, #10]
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	330c      	adds	r3, #12
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	4413      	add	r3, r2
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009e26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3718      	adds	r7, #24
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop

08009e34 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b088      	sub	sp, #32
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	607a      	str	r2, [r7, #4]
 8009e40:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e42:	2300      	movs	r3, #0
 8009e44:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8009e46:	2300      	movs	r3, #0
 8009e48:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8009e4a:	897b      	ldrh	r3, [r7, #10]
 8009e4c:	2b05      	cmp	r3, #5
 8009e4e:	d847      	bhi.n	8009ee0 <VL53L0X_GetLimitCheckValue+0xac>
 8009e50:	a201      	add	r2, pc, #4	@ (adr r2, 8009e58 <VL53L0X_GetLimitCheckValue+0x24>)
 8009e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e56:	bf00      	nop
 8009e58:	08009e71 	.word	0x08009e71
 8009e5c:	08009e7d 	.word	0x08009e7d
 8009e60:	08009ea3 	.word	0x08009ea3
 8009e64:	08009eaf 	.word	0x08009eaf
 8009e68:	08009ebb 	.word	0x08009ebb
 8009e6c:	08009ebb 	.word	0x08009ebb

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e74:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8009e76:	2300      	movs	r3, #0
 8009e78:	77bb      	strb	r3, [r7, #30]
		break;
 8009e7a:	e033      	b.n	8009ee4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8009e7c:	f107 0316 	add.w	r3, r7, #22
 8009e80:	461a      	mov	r2, r3
 8009e82:	2144      	movs	r1, #68	@ 0x44
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f004 f819 	bl	800debc <VL53L0X_RdWord>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8009e8e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d102      	bne.n	8009e9c <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8009e96:	8afb      	ldrh	r3, [r7, #22]
 8009e98:	025b      	lsls	r3, r3, #9
 8009e9a:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	77bb      	strb	r3, [r7, #30]
		break;
 8009ea0:	e020      	b.n	8009ee4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ea6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	77bb      	strb	r3, [r7, #30]
		break;
 8009eac:	e01a      	b.n	8009ee4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eb2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	77bb      	strb	r3, [r7, #30]
		break;
 8009eb8:	e014      	b.n	8009ee4 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8009eba:	f107 0316 	add.w	r3, r7, #22
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	2164      	movs	r1, #100	@ 0x64
 8009ec2:	68f8      	ldr	r0, [r7, #12]
 8009ec4:	f003 fffa 	bl	800debc <VL53L0X_RdWord>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8009ecc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d102      	bne.n	8009eda <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8009ed4:	8afb      	ldrh	r3, [r7, #22]
 8009ed6:	025b      	lsls	r3, r3, #9
 8009ed8:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8009eda:	2300      	movs	r3, #0
 8009edc:	77bb      	strb	r3, [r7, #30]
		break;
 8009ede:	e001      	b.n	8009ee4 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009ee0:	23fc      	movs	r3, #252	@ 0xfc
 8009ee2:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009ee4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d12a      	bne.n	8009f42 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8009eec:	7fbb      	ldrb	r3, [r7, #30]
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d124      	bne.n	8009f3c <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d110      	bne.n	8009f1a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8009ef8:	897b      	ldrh	r3, [r7, #10]
 8009efa:	68fa      	ldr	r2, [r7, #12]
 8009efc:	330c      	adds	r3, #12
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	4413      	add	r3, r2
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	69ba      	ldr	r2, [r7, #24]
 8009f0a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8009f0c:	897b      	ldrh	r3, [r7, #10]
 8009f0e:	68fa      	ldr	r2, [r7, #12]
 8009f10:	4413      	add	r3, r2
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8009f18:	e013      	b.n	8009f42 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	69ba      	ldr	r2, [r7, #24]
 8009f1e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8009f20:	897b      	ldrh	r3, [r7, #10]
 8009f22:	68fa      	ldr	r2, [r7, #12]
 8009f24:	330c      	adds	r3, #12
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	4413      	add	r3, r2
 8009f2a:	69ba      	ldr	r2, [r7, #24]
 8009f2c:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8009f2e:	897b      	ldrh	r3, [r7, #10]
 8009f30:	68fa      	ldr	r2, [r7, #12]
 8009f32:	4413      	add	r3, r2
 8009f34:	2201      	movs	r2, #1
 8009f36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
 8009f3a:	e002      	b.n	8009f42 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	69ba      	ldr	r2, [r7, #24]
 8009f40:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009f42:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3720      	adds	r7, #32
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop

08009f50 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8009f5e:	f107 030e 	add.w	r3, r7, #14
 8009f62:	461a      	mov	r2, r3
 8009f64:	2101      	movs	r1, #1
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f003 ff7e 	bl	800de68 <VL53L0X_RdByte>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8009f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d10e      	bne.n	8009f96 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8009f78:	7bba      	ldrb	r2, [r7, #14]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
		if (data & (0x01 << 7))
 8009f80:	7bbb      	ldrb	r3, [r7, #14]
 8009f82:	b25b      	sxtb	r3, r3
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	da03      	bge.n	8009f90 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	2201      	movs	r2, #1
 8009f8c:	701a      	strb	r2, [r3, #0]
 8009f8e:	e002      	b.n	8009f96 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	2200      	movs	r2, #0
 8009f94:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d104      	bne.n	8009fa8 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	781a      	ldrb	r2, [r3, #0]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3710      	adds	r7, #16
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8009fc0:	f107 030e 	add.w	r3, r7, #14
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f7ff fbd4 	bl	8009774 <VL53L0X_GetDeviceMode>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8009fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d107      	bne.n	8009fe8 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8009fd8:	7bbb      	ldrb	r3, [r7, #14]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d104      	bne.n	8009fe8 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f000 f898 	bl	800a114 <VL53L0X_StartMeasurement>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8009fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d104      	bne.n	8009ffa <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f001 fb33 	bl	800b65c <VL53L0X_measurement_poll_for_completion>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8009ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d106      	bne.n	800a010 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800a002:	7bbb      	ldrb	r3, [r7, #14]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d103      	bne.n	800a010 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2203      	movs	r2, #3
 800a00c:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800a010:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a014:	4618      	mov	r0, r3
 800a016:	3710      	adds	r7, #16
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b086      	sub	sp, #24
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a028:	2300      	movs	r3, #0
 800a02a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800a02c:	2301      	movs	r3, #1
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	68b9      	ldr	r1, [r7, #8]
 800a032:	68f8      	ldr	r0, [r7, #12]
 800a034:	f001 fad5 	bl	800b5e2 <VL53L0X_perform_ref_calibration>
 800a038:	4603      	mov	r3, r0
 800a03a:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800a03c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a040:	4618      	mov	r0, r3
 800a042:	3718      	adds	r7, #24
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b086      	sub	sp, #24
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	460b      	mov	r3, r1
 800a052:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a054:	2300      	movs	r3, #0
 800a056:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 800a05e:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800a060:	7dbb      	ldrb	r3, [r7, #22]
 800a062:	2b01      	cmp	r3, #1
 800a064:	d005      	beq.n	800a072 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800a066:	7dbb      	ldrb	r3, [r7, #22]
 800a068:	2b02      	cmp	r3, #2
 800a06a:	d002      	beq.n	800a072 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800a06c:	7dbb      	ldrb	r3, [r7, #22]
 800a06e:	2b03      	cmp	r3, #3
 800a070:	d147      	bne.n	800a102 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800a072:	f107 030c 	add.w	r3, r7, #12
 800a076:	f107 0210 	add.w	r2, r7, #16
 800a07a:	2101      	movs	r1, #1
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 fbb9 	bl	800a7f4 <VL53L0X_GetInterruptThresholds>
 800a082:	4603      	mov	r3, r0
 800a084:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 800a08c:	d803      	bhi.n	800a096 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800a08e:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800a090:	f5b3 0f7f 	cmp.w	r3, #16711680	@ 0xff0000
 800a094:	d935      	bls.n	800a102 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800a096:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d131      	bne.n	800a102 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800a09e:	78fb      	ldrb	r3, [r7, #3]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d006      	beq.n	800a0b2 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800a0a4:	491a      	ldr	r1, [pc, #104]	@ (800a110 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f002 ff46 	bl	800cf38 <VL53L0X_load_tuning_settings>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	75fb      	strb	r3, [r7, #23]
 800a0b0:	e027      	b.n	800a102 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800a0b2:	2204      	movs	r2, #4
 800a0b4:	21ff      	movs	r1, #255	@ 0xff
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f003 fe54 	bl	800dd64 <VL53L0X_WrByte>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	461a      	mov	r2, r3
 800a0c0:	7dfb      	ldrb	r3, [r7, #23]
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	2170      	movs	r1, #112	@ 0x70
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f003 fe4a 	bl	800dd64 <VL53L0X_WrByte>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	7dfb      	ldrb	r3, [r7, #23]
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a0da:	2200      	movs	r2, #0
 800a0dc:	21ff      	movs	r1, #255	@ 0xff
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f003 fe40 	bl	800dd64 <VL53L0X_WrByte>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	2180      	movs	r1, #128	@ 0x80
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f003 fe36 	bl	800dd64 <VL53L0X_WrByte>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	7dfb      	ldrb	r3, [r7, #23]
 800a0fe:	4313      	orrs	r3, r2
 800a100:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800a102:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800a106:	4618      	mov	r0, r3
 800a108:	3718      	adds	r7, #24
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop
 800a110:	20000104 	.word	0x20000104

0800a114 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b086      	sub	sp, #24
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a11c:	2300      	movs	r3, #0
 800a11e:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800a120:	2301      	movs	r3, #1
 800a122:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800a124:	f107 030e 	add.w	r3, r7, #14
 800a128:	4619      	mov	r1, r3
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f7ff fb22 	bl	8009774 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a130:	2201      	movs	r2, #1
 800a132:	2180      	movs	r1, #128	@ 0x80
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f003 fe15 	bl	800dd64 <VL53L0X_WrByte>
 800a13a:	4603      	mov	r3, r0
 800a13c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a13e:	2201      	movs	r2, #1
 800a140:	21ff      	movs	r1, #255	@ 0xff
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f003 fe0e 	bl	800dd64 <VL53L0X_WrByte>
 800a148:	4603      	mov	r3, r0
 800a14a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a14c:	2200      	movs	r2, #0
 800a14e:	2100      	movs	r1, #0
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f003 fe07 	bl	800dd64 <VL53L0X_WrByte>
 800a156:	4603      	mov	r3, r0
 800a158:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f893 313a 	ldrb.w	r3, [r3, #314]	@ 0x13a
 800a160:	461a      	mov	r2, r3
 800a162:	2191      	movs	r1, #145	@ 0x91
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f003 fdfd 	bl	800dd64 <VL53L0X_WrByte>
 800a16a:	4603      	mov	r3, r0
 800a16c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800a16e:	2201      	movs	r2, #1
 800a170:	2100      	movs	r1, #0
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f003 fdf6 	bl	800dd64 <VL53L0X_WrByte>
 800a178:	4603      	mov	r3, r0
 800a17a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800a17c:	2200      	movs	r2, #0
 800a17e:	21ff      	movs	r1, #255	@ 0xff
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f003 fdef 	bl	800dd64 <VL53L0X_WrByte>
 800a186:	4603      	mov	r3, r0
 800a188:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800a18a:	2200      	movs	r2, #0
 800a18c:	2180      	movs	r1, #128	@ 0x80
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f003 fde8 	bl	800dd64 <VL53L0X_WrByte>
 800a194:	4603      	mov	r3, r0
 800a196:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800a198:	7bbb      	ldrb	r3, [r7, #14]
 800a19a:	2b03      	cmp	r3, #3
 800a19c:	d054      	beq.n	800a248 <VL53L0X_StartMeasurement+0x134>
 800a19e:	2b03      	cmp	r3, #3
 800a1a0:	dc6c      	bgt.n	800a27c <VL53L0X_StartMeasurement+0x168>
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d002      	beq.n	800a1ac <VL53L0X_StartMeasurement+0x98>
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	d034      	beq.n	800a214 <VL53L0X_StartMeasurement+0x100>
 800a1aa:	e067      	b.n	800a27c <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	2100      	movs	r1, #0
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f003 fdd7 	bl	800dd64 <VL53L0X_WrByte>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800a1ba:	7bfb      	ldrb	r3, [r7, #15]
 800a1bc:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800a1be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d15d      	bne.n	800a282 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d008      	beq.n	800a1e2 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800a1d0:	f107 030d 	add.w	r3, r7, #13
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f003 fe45 	bl	800de68 <VL53L0X_RdByte>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800a1e8:	7b7a      	ldrb	r2, [r7, #13]
 800a1ea:	7bfb      	ldrb	r3, [r7, #15]
 800a1ec:	4013      	ands	r3, r2
 800a1ee:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800a1f0:	7bfa      	ldrb	r2, [r7, #15]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d107      	bne.n	800a206 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800a1f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d103      	bne.n	800a206 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800a204:	d3e1      	bcc.n	800a1ca <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800a20c:	d339      	bcc.n	800a282 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800a20e:	23f9      	movs	r3, #249	@ 0xf9
 800a210:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800a212:	e036      	b.n	800a282 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800a214:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d105      	bne.n	800a228 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800a21c:	2101      	movs	r1, #1
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f7ff ff12 	bl	800a048 <VL53L0X_CheckAndLoadInterruptSettings>
 800a224:	4603      	mov	r3, r0
 800a226:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800a228:	2202      	movs	r2, #2
 800a22a:	2100      	movs	r1, #0
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f003 fd99 	bl	800dd64 <VL53L0X_WrByte>
 800a232:	4603      	mov	r3, r0
 800a234:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800a236:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d123      	bne.n	800a286 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2204      	movs	r2, #4
 800a242:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 800a246:	e01e      	b.n	800a286 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800a248:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d105      	bne.n	800a25c <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800a250:	2101      	movs	r1, #1
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f7ff fef8 	bl	800a048 <VL53L0X_CheckAndLoadInterruptSettings>
 800a258:	4603      	mov	r3, r0
 800a25a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800a25c:	2204      	movs	r2, #4
 800a25e:	2100      	movs	r1, #0
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f003 fd7f 	bl	800dd64 <VL53L0X_WrByte>
 800a266:	4603      	mov	r3, r0
 800a268:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800a26a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d10b      	bne.n	800a28a <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2204      	movs	r2, #4
 800a276:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
		}
		break;
 800a27a:	e006      	b.n	800a28a <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800a27c:	23f8      	movs	r3, #248	@ 0xf8
 800a27e:	75fb      	strb	r3, [r7, #23]
 800a280:	e004      	b.n	800a28c <VL53L0X_StartMeasurement+0x178>
		break;
 800a282:	bf00      	nop
 800a284:	e002      	b.n	800a28c <VL53L0X_StartMeasurement+0x178>
		break;
 800a286:	bf00      	nop
 800a288:	e000      	b.n	800a28c <VL53L0X_StartMeasurement+0x178>
		break;
 800a28a:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800a28c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a290:	4618      	mov	r0, r3
 800a292:	3718      	adds	r7, #24
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f893 30da 	ldrb.w	r3, [r3, #218]	@ 0xda
 800a2ac:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800a2ae:	7bbb      	ldrb	r3, [r7, #14]
 800a2b0:	2b04      	cmp	r3, #4
 800a2b2:	d112      	bne.n	800a2da <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800a2b4:	f107 0308 	add.w	r3, r7, #8
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 fb0e 	bl	800a8dc <VL53L0X_GetInterruptMaskStatus>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	2b04      	cmp	r3, #4
 800a2c8:	d103      	bne.n	800a2d2 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	701a      	strb	r2, [r3, #0]
 800a2d0:	e01c      	b.n	800a30c <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	701a      	strb	r2, [r3, #0]
 800a2d8:	e018      	b.n	800a30c <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800a2da:	f107 030d 	add.w	r3, r7, #13
 800a2de:	461a      	mov	r2, r3
 800a2e0:	2114      	movs	r1, #20
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f003 fdc0 	bl	800de68 <VL53L0X_RdByte>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800a2ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d10b      	bne.n	800a30c <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800a2f4:	7b7b      	ldrb	r3, [r7, #13]
 800a2f6:	f003 0301 	and.w	r3, r3, #1
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d003      	beq.n	800a306 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	2201      	movs	r2, #1
 800a302:	701a      	strb	r2, [r3, #0]
 800a304:	e002      	b.n	800a30c <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	2200      	movs	r2, #0
 800a30a:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a30c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a310:	4618      	mov	r0, r3
 800a312:	3710      	adds	r7, #16
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800a318:	b5b0      	push	{r4, r5, r7, lr}
 800a31a:	b096      	sub	sp, #88	@ 0x58
 800a31c:	af02      	add	r7, sp, #8
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a322:	2300      	movs	r3, #0
 800a324:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800a328:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800a32c:	230c      	movs	r3, #12
 800a32e:	2114      	movs	r1, #20
 800a330:	6878      	ldr	r0, [r7, #4]
 800a332:	f003 fceb 	bl	800dd0c <VL53L0X_ReadMulti>
 800a336:	4603      	mov	r3, r0
 800a338:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800a33c:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800a340:	2b00      	cmp	r3, #0
 800a342:	f040 80c8 	bne.w	800a4d6 <VL53L0X_GetRangingMeasurementData+0x1be>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	2200      	movs	r2, #0
 800a34a:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	2200      	movs	r2, #0
 800a350:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800a352:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800a356:	021b      	lsls	r3, r3, #8
 800a358:	b29b      	uxth	r3, r3
 800a35a:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800a35e:	4413      	add	r3, r2
 800a360:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	2200      	movs	r2, #0
 800a368:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800a36a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a36e:	021b      	lsls	r3, r3, #8
 800a370:	b29b      	uxth	r3, r3
 800a372:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800a376:	4413      	add	r3, r2
 800a378:	b29b      	uxth	r3, r3
 800a37a:	025b      	lsls	r3, r3, #9
 800a37c:	647b      	str	r3, [r7, #68]	@ 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a382:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800a384:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800a388:	021b      	lsls	r3, r3, #8
 800a38a:	b29b      	uxth	r3, r3
 800a38c:	f897 2031 	ldrb.w	r2, [r7, #49]	@ 0x31
 800a390:	4413      	add	r3, r2
 800a392:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800a396:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800a39a:	025a      	lsls	r2, r3, #9
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800a3a0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a3a4:	021b      	lsls	r3, r3, #8
 800a3a6:	b29b      	uxth	r3, r3
 800a3a8:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800a3ac:	4413      	add	r3, r2
 800a3ae:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800a3b8:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800a3ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a3be:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8b3 3152 	ldrh.w	r3, [r3, #338]	@ 0x152
 800a3c8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 800a3d0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800a3d4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a3d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a3da:	d046      	beq.n	800a46a <VL53L0X_GetRangingMeasurementData+0x152>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800a3dc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a3de:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800a3e2:	fb02 f303 	mul.w	r3, r2, r3
 800a3e6:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800a3ea:	4a58      	ldr	r2, [pc, #352]	@ (800a54c <VL53L0X_GetRangingMeasurementData+0x234>)
 800a3ec:	fb82 1203 	smull	r1, r2, r2, r3
 800a3f0:	1192      	asrs	r2, r2, #6
 800a3f2:	17db      	asrs	r3, r3, #31
 800a3f4:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800a3f6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6a1b      	ldr	r3, [r3, #32]
 800a3fe:	873b      	strh	r3, [r7, #56]	@ 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	7f1b      	ldrb	r3, [r3, #28]
 800a404:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800a408:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d02c      	beq.n	800a46a <VL53L0X_GetRangingMeasurementData+0x152>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800a410:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a412:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800a416:	fb02 f303 	mul.w	r3, r2, r3
 800a41a:	121a      	asrs	r2, r3, #8
					<= 0) {
 800a41c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
				if ((SignalRate
 800a41e:	429a      	cmp	r2, r3
 800a420:	d10d      	bne.n	800a43e <VL53L0X_GetRangingMeasurementData+0x126>
					if (RangeFractionalEnable)
 800a422:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800a426:	2b00      	cmp	r3, #0
 800a428:	d004      	beq.n	800a434 <VL53L0X_GetRangingMeasurementData+0x11c>
						XtalkRangeMilliMeter = 8888;
 800a42a:	f242 23b8 	movw	r3, #8888	@ 0x22b8
 800a42e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800a432:	e016      	b.n	800a462 <VL53L0X_GetRangingMeasurementData+0x14a>
					else
						XtalkRangeMilliMeter = 8888
 800a434:	f648 23e0 	movw	r3, #35552	@ 0x8ae0
 800a438:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800a43c:	e011      	b.n	800a462 <VL53L0X_GetRangingMeasurementData+0x14a>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800a43e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800a442:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a444:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800a448:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800a44a:	f8b7 1040 	ldrh.w	r1, [r7, #64]	@ 0x40
 800a44e:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800a452:	121b      	asrs	r3, r3, #8
 800a454:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800a456:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a458:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800a45a:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800a45e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800a462:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800a466:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800a46a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d00d      	beq.n	800a48e <VL53L0X_GetRangingMeasurementData+0x176>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800a472:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800a476:	089b      	lsrs	r3, r3, #2
 800a478:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800a47e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800a482:	b2db      	uxtb	r3, r3
 800a484:	019b      	lsls	r3, r3, #6
 800a486:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	75da      	strb	r2, [r3, #23]
 800a48c:	e006      	b.n	800a49c <VL53L0X_GetRangingMeasurementData+0x184>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800a494:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	2200      	movs	r2, #0
 800a49a:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800a49c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800a4a0:	f897 103f 	ldrb.w	r1, [r7, #63]	@ 0x3f
 800a4a4:	f107 0336 	add.w	r3, r7, #54	@ 0x36
 800a4a8:	9301      	str	r3, [sp, #4]
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	9300      	str	r3, [sp, #0]
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f003 f9de 	bl	800d874 <VL53L0X_get_pal_range_status>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a4c0:	4313      	orrs	r3, r2
 800a4c2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800a4c6:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d103      	bne.n	800a4d6 <VL53L0X_GetRangingMeasurementData+0x1be>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800a4ce:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a4d6:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d12f      	bne.n	800a53e <VL53L0X_GetRangingMeasurementData+0x226>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f107 040c 	add.w	r4, r7, #12
 800a4e4:	f103 0550 	add.w	r5, r3, #80	@ 0x50
 800a4e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a4ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a4f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800a4f4:	683b      	ldr	r3, [r7, #0]
 800a4f6:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800a4f8:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800a4fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800a506:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800a50c:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800a512:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800a518:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800a51e:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800a524:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f103 0450 	add.w	r4, r3, #80	@ 0x50
 800a52e:	f107 050c 	add.w	r5, r7, #12
 800a532:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a534:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a536:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a53a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a53e:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
}
 800a542:	4618      	mov	r0, r3
 800a544:	3750      	adds	r7, #80	@ 0x50
 800a546:	46bd      	mov	sp, r7
 800a548:	bdb0      	pop	{r4, r5, r7, pc}
 800a54a:	bf00      	nop
 800a54c:	10624dd3 	.word	0x10624dd3

0800a550 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a55a:	2300      	movs	r3, #0
 800a55c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800a55e:	2100      	movs	r1, #0
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f7ff f8db 	bl	800971c <VL53L0X_SetDeviceMode>
 800a566:	4603      	mov	r3, r0
 800a568:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a56a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d104      	bne.n	800a57c <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f7ff fd1e 	bl	8009fb4 <VL53L0X_PerformSingleMeasurement>
 800a578:	4603      	mov	r3, r0
 800a57a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800a57c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d105      	bne.n	800a590 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800a584:	6839      	ldr	r1, [r7, #0]
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f7ff fec6 	bl	800a318 <VL53L0X_GetRangingMeasurementData>
 800a58c:	4603      	mov	r3, r0
 800a58e:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800a590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d105      	bne.n	800a5a4 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800a598:	2100      	movs	r1, #0
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 f95e 	bl	800a85c <VL53L0X_ClearInterruptMask>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800a5a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3710      	adds	r7, #16
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}

0800a5b0 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
 800a5b8:	4608      	mov	r0, r1
 800a5ba:	4611      	mov	r1, r2
 800a5bc:	461a      	mov	r2, r3
 800a5be:	4603      	mov	r3, r0
 800a5c0:	70fb      	strb	r3, [r7, #3]
 800a5c2:	460b      	mov	r3, r1
 800a5c4:	70bb      	strb	r3, [r7, #2]
 800a5c6:	4613      	mov	r3, r2
 800a5c8:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800a5ce:	78fb      	ldrb	r3, [r7, #3]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d002      	beq.n	800a5da <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800a5d4:	23f6      	movs	r3, #246	@ 0xf6
 800a5d6:	73fb      	strb	r3, [r7, #15]
 800a5d8:	e105      	b.n	800a7e6 <VL53L0X_SetGpioConfig+0x236>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800a5da:	78bb      	ldrb	r3, [r7, #2]
 800a5dc:	2b14      	cmp	r3, #20
 800a5de:	d110      	bne.n	800a602 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800a5e0:	7e3b      	ldrb	r3, [r7, #24]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d102      	bne.n	800a5ec <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800a5e6:	2310      	movs	r3, #16
 800a5e8:	73bb      	strb	r3, [r7, #14]
 800a5ea:	e001      	b.n	800a5f0 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800a5f0:	7bbb      	ldrb	r3, [r7, #14]
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	2184      	movs	r1, #132	@ 0x84
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f003 fbb4 	bl	800dd64 <VL53L0X_WrByte>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	73fb      	strb	r3, [r7, #15]
 800a600:	e0f1      	b.n	800a7e6 <VL53L0X_SetGpioConfig+0x236>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800a602:	78bb      	ldrb	r3, [r7, #2]
 800a604:	2b15      	cmp	r3, #21
 800a606:	f040 8097 	bne.w	800a738 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a60a:	2201      	movs	r2, #1
 800a60c:	21ff      	movs	r1, #255	@ 0xff
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f003 fba8 	bl	800dd64 <VL53L0X_WrByte>
 800a614:	4603      	mov	r3, r0
 800a616:	461a      	mov	r2, r3
 800a618:	7bfb      	ldrb	r3, [r7, #15]
 800a61a:	4313      	orrs	r3, r2
 800a61c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a61e:	2200      	movs	r2, #0
 800a620:	2100      	movs	r1, #0
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f003 fb9e 	bl	800dd64 <VL53L0X_WrByte>
 800a628:	4603      	mov	r3, r0
 800a62a:	461a      	mov	r2, r3
 800a62c:	7bfb      	ldrb	r3, [r7, #15]
 800a62e:	4313      	orrs	r3, r2
 800a630:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a632:	2200      	movs	r2, #0
 800a634:	21ff      	movs	r1, #255	@ 0xff
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f003 fb94 	bl	800dd64 <VL53L0X_WrByte>
 800a63c:	4603      	mov	r3, r0
 800a63e:	461a      	mov	r2, r3
 800a640:	7bfb      	ldrb	r3, [r7, #15]
 800a642:	4313      	orrs	r3, r2
 800a644:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a646:	2201      	movs	r2, #1
 800a648:	2180      	movs	r1, #128	@ 0x80
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	f003 fb8a 	bl	800dd64 <VL53L0X_WrByte>
 800a650:	4603      	mov	r3, r0
 800a652:	461a      	mov	r2, r3
 800a654:	7bfb      	ldrb	r3, [r7, #15]
 800a656:	4313      	orrs	r3, r2
 800a658:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800a65a:	2202      	movs	r2, #2
 800a65c:	2185      	movs	r1, #133	@ 0x85
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f003 fb80 	bl	800dd64 <VL53L0X_WrByte>
 800a664:	4603      	mov	r3, r0
 800a666:	461a      	mov	r2, r3
 800a668:	7bfb      	ldrb	r3, [r7, #15]
 800a66a:	4313      	orrs	r3, r2
 800a66c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800a66e:	2204      	movs	r2, #4
 800a670:	21ff      	movs	r1, #255	@ 0xff
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f003 fb76 	bl	800dd64 <VL53L0X_WrByte>
 800a678:	4603      	mov	r3, r0
 800a67a:	461a      	mov	r2, r3
 800a67c:	7bfb      	ldrb	r3, [r7, #15]
 800a67e:	4313      	orrs	r3, r2
 800a680:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800a682:	2200      	movs	r2, #0
 800a684:	21cd      	movs	r1, #205	@ 0xcd
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f003 fb6c 	bl	800dd64 <VL53L0X_WrByte>
 800a68c:	4603      	mov	r3, r0
 800a68e:	461a      	mov	r2, r3
 800a690:	7bfb      	ldrb	r3, [r7, #15]
 800a692:	4313      	orrs	r3, r2
 800a694:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800a696:	2211      	movs	r2, #17
 800a698:	21cc      	movs	r1, #204	@ 0xcc
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f003 fb62 	bl	800dd64 <VL53L0X_WrByte>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	7bfb      	ldrb	r3, [r7, #15]
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800a6aa:	2207      	movs	r2, #7
 800a6ac:	21ff      	movs	r1, #255	@ 0xff
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f003 fb58 	bl	800dd64 <VL53L0X_WrByte>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800a6be:	2200      	movs	r2, #0
 800a6c0:	21be      	movs	r1, #190	@ 0xbe
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f003 fb4e 	bl	800dd64 <VL53L0X_WrByte>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	7bfb      	ldrb	r3, [r7, #15]
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800a6d2:	2206      	movs	r2, #6
 800a6d4:	21ff      	movs	r1, #255	@ 0xff
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f003 fb44 	bl	800dd64 <VL53L0X_WrByte>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	461a      	mov	r2, r3
 800a6e0:	7bfb      	ldrb	r3, [r7, #15]
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800a6e6:	2209      	movs	r2, #9
 800a6e8:	21cc      	movs	r1, #204	@ 0xcc
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f003 fb3a 	bl	800dd64 <VL53L0X_WrByte>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	7bfb      	ldrb	r3, [r7, #15]
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	21ff      	movs	r1, #255	@ 0xff
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f003 fb30 	bl	800dd64 <VL53L0X_WrByte>
 800a704:	4603      	mov	r3, r0
 800a706:	461a      	mov	r2, r3
 800a708:	7bfb      	ldrb	r3, [r7, #15]
 800a70a:	4313      	orrs	r3, r2
 800a70c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a70e:	2201      	movs	r2, #1
 800a710:	21ff      	movs	r1, #255	@ 0xff
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f003 fb26 	bl	800dd64 <VL53L0X_WrByte>
 800a718:	4603      	mov	r3, r0
 800a71a:	461a      	mov	r2, r3
 800a71c:	7bfb      	ldrb	r3, [r7, #15]
 800a71e:	4313      	orrs	r3, r2
 800a720:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a722:	2200      	movs	r2, #0
 800a724:	2100      	movs	r1, #0
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f003 fb1c 	bl	800dd64 <VL53L0X_WrByte>
 800a72c:	4603      	mov	r3, r0
 800a72e:	461a      	mov	r2, r3
 800a730:	7bfb      	ldrb	r3, [r7, #15]
 800a732:	4313      	orrs	r3, r2
 800a734:	73fb      	strb	r3, [r7, #15]
 800a736:	e056      	b.n	800a7e6 <VL53L0X_SetGpioConfig+0x236>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800a738:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d120      	bne.n	800a782 <VL53L0X_SetGpioConfig+0x1d2>
			switch (Functionality) {
 800a740:	787b      	ldrb	r3, [r7, #1]
 800a742:	2b04      	cmp	r3, #4
 800a744:	d81b      	bhi.n	800a77e <VL53L0X_SetGpioConfig+0x1ce>
 800a746:	a201      	add	r2, pc, #4	@ (adr r2, 800a74c <VL53L0X_SetGpioConfig+0x19c>)
 800a748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a74c:	0800a761 	.word	0x0800a761
 800a750:	0800a767 	.word	0x0800a767
 800a754:	0800a76d 	.word	0x0800a76d
 800a758:	0800a773 	.word	0x0800a773
 800a75c:	0800a779 	.word	0x0800a779
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800a760:	2300      	movs	r3, #0
 800a762:	73bb      	strb	r3, [r7, #14]
				break;
 800a764:	e00d      	b.n	800a782 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800a766:	2301      	movs	r3, #1
 800a768:	73bb      	strb	r3, [r7, #14]
				break;
 800a76a:	e00a      	b.n	800a782 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800a76c:	2302      	movs	r3, #2
 800a76e:	73bb      	strb	r3, [r7, #14]
				break;
 800a770:	e007      	b.n	800a782 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800a772:	2303      	movs	r3, #3
 800a774:	73bb      	strb	r3, [r7, #14]
				break;
 800a776:	e004      	b.n	800a782 <VL53L0X_SetGpioConfig+0x1d2>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800a778:	2304      	movs	r3, #4
 800a77a:	73bb      	strb	r3, [r7, #14]
				break;
 800a77c:	e001      	b.n	800a782 <VL53L0X_SetGpioConfig+0x1d2>
			default:
				Status =
 800a77e:	23f5      	movs	r3, #245	@ 0xf5
 800a780:	73fb      	strb	r3, [r7, #15]
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}

		if (Status == VL53L0X_ERROR_NONE)
 800a782:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d107      	bne.n	800a79a <VL53L0X_SetGpioConfig+0x1ea>
			Status = VL53L0X_WrByte(Dev,
 800a78a:	7bbb      	ldrb	r3, [r7, #14]
 800a78c:	461a      	mov	r2, r3
 800a78e:	210a      	movs	r1, #10
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	f003 fae7 	bl	800dd64 <VL53L0X_WrByte>
 800a796:	4603      	mov	r3, r0
 800a798:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800a79a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d10f      	bne.n	800a7c2 <VL53L0X_SetGpioConfig+0x212>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800a7a2:	7e3b      	ldrb	r3, [r7, #24]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d102      	bne.n	800a7ae <VL53L0X_SetGpioConfig+0x1fe>
				data = 0;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	73bb      	strb	r3, [r7, #14]
 800a7ac:	e001      	b.n	800a7b2 <VL53L0X_SetGpioConfig+0x202>
			else
				data = (uint8_t)(1 << 4);
 800a7ae:	2310      	movs	r3, #16
 800a7b0:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800a7b2:	7bbb      	ldrb	r3, [r7, #14]
 800a7b4:	22ef      	movs	r2, #239	@ 0xef
 800a7b6:	2184      	movs	r1, #132	@ 0x84
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f003 fb21 	bl	800de00 <VL53L0X_UpdateByte>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800a7c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d103      	bne.n	800a7d2 <VL53L0X_SetGpioConfig+0x222>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	787a      	ldrb	r2, [r7, #1]
 800a7ce:	f883 20da 	strb.w	r2, [r3, #218]	@ 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800a7d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d105      	bne.n	800a7e6 <VL53L0X_SetGpioConfig+0x236>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800a7da:	2100      	movs	r1, #0
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f000 f83d 	bl	800a85c <VL53L0X_ClearInterruptMask>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a7e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3710      	adds	r7, #16
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop

0800a7f4 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b086      	sub	sp, #24
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	60f8      	str	r0, [r7, #12]
 800a7fc:	607a      	str	r2, [r7, #4]
 800a7fe:	603b      	str	r3, [r7, #0]
 800a800:	460b      	mov	r3, r1
 800a802:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a804:	2300      	movs	r3, #0
 800a806:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800a808:	f107 0314 	add.w	r3, r7, #20
 800a80c:	461a      	mov	r2, r3
 800a80e:	210e      	movs	r1, #14
 800a810:	68f8      	ldr	r0, [r7, #12]
 800a812:	f003 fb53 	bl	800debc <VL53L0X_RdWord>
 800a816:	4603      	mov	r3, r0
 800a818:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800a81a:	8abb      	ldrh	r3, [r7, #20]
 800a81c:	045a      	lsls	r2, r3, #17
 800a81e:	4b0e      	ldr	r3, [pc, #56]	@ (800a858 <VL53L0X_GetInterruptThresholds+0x64>)
 800a820:	4013      	ands	r3, r2
 800a822:	687a      	ldr	r2, [r7, #4]
 800a824:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800a826:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d10e      	bne.n	800a84c <VL53L0X_GetInterruptThresholds+0x58>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800a82e:	f107 0314 	add.w	r3, r7, #20
 800a832:	461a      	mov	r2, r3
 800a834:	210c      	movs	r1, #12
 800a836:	68f8      	ldr	r0, [r7, #12]
 800a838:	f003 fb40 	bl	800debc <VL53L0X_RdWord>
 800a83c:	4603      	mov	r3, r0
 800a83e:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800a840:	8abb      	ldrh	r3, [r7, #20]
 800a842:	045a      	lsls	r2, r3, #17
 800a844:	4b04      	ldr	r3, [pc, #16]	@ (800a858 <VL53L0X_GetInterruptThresholds+0x64>)
 800a846:	4013      	ands	r3, r2
		*pThresholdHigh =
 800a848:	683a      	ldr	r2, [r7, #0]
 800a84a:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a84c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a850:	4618      	mov	r0, r3
 800a852:	3718      	adds	r7, #24
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	1ffe0000 	.word	0x1ffe0000

0800a85c <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a866:	2300      	movs	r3, #0
 800a868:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800a86a:	2300      	movs	r3, #0
 800a86c:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800a86e:	2201      	movs	r2, #1
 800a870:	210b      	movs	r1, #11
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f003 fa76 	bl	800dd64 <VL53L0X_WrByte>
 800a878:	4603      	mov	r3, r0
 800a87a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800a87c:	2200      	movs	r2, #0
 800a87e:	210b      	movs	r1, #11
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f003 fa6f 	bl	800dd64 <VL53L0X_WrByte>
 800a886:	4603      	mov	r3, r0
 800a888:	461a      	mov	r2, r3
 800a88a:	7bfb      	ldrb	r3, [r7, #15]
 800a88c:	4313      	orrs	r3, r2
 800a88e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800a890:	f107 030d 	add.w	r3, r7, #13
 800a894:	461a      	mov	r2, r3
 800a896:	2113      	movs	r1, #19
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f003 fae5 	bl	800de68 <VL53L0X_RdByte>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	7bfb      	ldrb	r3, [r7, #15]
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800a8a8:	7bbb      	ldrb	r3, [r7, #14]
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800a8ae:	7b7b      	ldrb	r3, [r7, #13]
 800a8b0:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d006      	beq.n	800a8c6 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800a8b8:	7bbb      	ldrb	r3, [r7, #14]
 800a8ba:	2b02      	cmp	r3, #2
 800a8bc:	d803      	bhi.n	800a8c6 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800a8be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d0d3      	beq.n	800a86e <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800a8c6:	7bbb      	ldrb	r3, [r7, #14]
 800a8c8:	2b02      	cmp	r3, #2
 800a8ca:	d901      	bls.n	800a8d0 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800a8cc:	23f4      	movs	r3, #244	@ 0xf4
 800a8ce:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800a8d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3710      	adds	r7, #16
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800a8ea:	f107 030e 	add.w	r3, r7, #14
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	2113      	movs	r1, #19
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f003 fab8 	bl	800de68 <VL53L0X_RdByte>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800a8fc:	7bbb      	ldrb	r3, [r7, #14]
 800a8fe:	f003 0207 	and.w	r2, r3, #7
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800a906:	7bbb      	ldrb	r3, [r7, #14]
 800a908:	f003 0318 	and.w	r3, r3, #24
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d001      	beq.n	800a914 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800a910:	23fa      	movs	r3, #250	@ 0xfa
 800a912:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800a914:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3710      	adds	r7, #16
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b086      	sub	sp, #24
 800a924:	af00      	add	r7, sp, #0
 800a926:	60f8      	str	r0, [r7, #12]
 800a928:	60b9      	str	r1, [r7, #8]
 800a92a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a92c:	2300      	movs	r3, #0
 800a92e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	68b9      	ldr	r1, [r7, #8]
 800a934:	68f8      	ldr	r0, [r7, #12]
 800a936:	f000 fa03 	bl	800ad40 <VL53L0X_perform_ref_spad_management>
 800a93a:	4603      	mov	r3, r0
 800a93c:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800a93e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a942:	4618      	mov	r0, r3
 800a944:	3718      	adds	r7, #24
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}

0800a94a <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800a94a:	b580      	push	{r7, lr}
 800a94c:	b084      	sub	sp, #16
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
 800a952:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a954:	2300      	movs	r3, #0
 800a956:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800a958:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800a95c:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800a95e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a962:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800a964:	f107 0308 	add.w	r3, r7, #8
 800a968:	461a      	mov	r2, r3
 800a96a:	2128      	movs	r1, #40	@ 0x28
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f003 faa5 	bl	800debc <VL53L0X_RdWord>
 800a972:	4603      	mov	r3, r0
 800a974:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800a976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d11e      	bne.n	800a9bc <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800a97e:	893b      	ldrh	r3, [r7, #8]
 800a980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a984:	b29b      	uxth	r3, r3
 800a986:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800a988:	893b      	ldrh	r3, [r7, #8]
 800a98a:	461a      	mov	r2, r3
 800a98c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a990:	429a      	cmp	r2, r3
 800a992:	dd0b      	ble.n	800a9ac <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800a994:	893a      	ldrh	r2, [r7, #8]
 800a996:	897b      	ldrh	r3, [r7, #10]
 800a998:	1ad3      	subs	r3, r2, r3
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	b21b      	sxth	r3, r3
 800a99e:	461a      	mov	r2, r3
					* 250;
 800a9a0:	23fa      	movs	r3, #250	@ 0xfa
 800a9a2:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	601a      	str	r2, [r3, #0]
 800a9aa:	e007      	b.n	800a9bc <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800a9ac:	893b      	ldrh	r3, [r7, #8]
 800a9ae:	b21b      	sxth	r3, r3
 800a9b0:	461a      	mov	r2, r3
 800a9b2:	23fa      	movs	r3, #250	@ 0xfa
 800a9b4:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800a9bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3710      	adds	r7, #16
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b08b      	sub	sp, #44	@ 0x2c
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
 800a9d4:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800a9d6:	2308      	movs	r3, #8
 800a9d8:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a9e4:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	69bb      	ldr	r3, [r7, #24]
 800a9ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9ee:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	69ba      	ldr	r2, [r7, #24]
 800a9f4:	fbb3 f2f2 	udiv	r2, r3, r2
 800a9f8:	69b9      	ldr	r1, [r7, #24]
 800a9fa:	fb01 f202 	mul.w	r2, r1, r2
 800a9fe:	1a9b      	subs	r3, r3, r2
 800aa00:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800aa02:	697b      	ldr	r3, [r7, #20]
 800aa04:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa06:	e030      	b.n	800aa6a <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800aa0c:	68fa      	ldr	r2, [r7, #12]
 800aa0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa10:	4413      	add	r3, r2
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800aa16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d11e      	bne.n	800aa5c <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800aa1e:	7ffa      	ldrb	r2, [r7, #31]
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	fa42 f303 	asr.w	r3, r2, r3
 800aa26:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800aa2c:	e016      	b.n	800aa5c <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800aa2e:	7ffb      	ldrb	r3, [r7, #31]
 800aa30:	f003 0301 	and.w	r3, r3, #1
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d00b      	beq.n	800aa50 <get_next_good_spad+0x88>
				success = 1;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800aa3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa3e:	69ba      	ldr	r2, [r7, #24]
 800aa40:	fb03 f202 	mul.w	r2, r3, r2
 800aa44:	6a3b      	ldr	r3, [r7, #32]
 800aa46:	4413      	add	r3, r2
 800aa48:	461a      	mov	r2, r3
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	601a      	str	r2, [r3, #0]
				break;
 800aa4e:	e009      	b.n	800aa64 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800aa50:	7ffb      	ldrb	r3, [r7, #31]
 800aa52:	085b      	lsrs	r3, r3, #1
 800aa54:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800aa56:	6a3b      	ldr	r3, [r7, #32]
 800aa58:	3301      	adds	r3, #1
 800aa5a:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800aa5c:	6a3a      	ldr	r2, [r7, #32]
 800aa5e:	69bb      	ldr	r3, [r7, #24]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d3e4      	bcc.n	800aa2e <get_next_good_spad+0x66>
				coarseIndex++) {
 800aa64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa66:	3301      	adds	r3, #1
 800aa68:	627b      	str	r3, [r7, #36]	@ 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800aa6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d202      	bcs.n	800aa78 <get_next_good_spad+0xb0>
 800aa72:	7fbb      	ldrb	r3, [r7, #30]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d0c7      	beq.n	800aa08 <get_next_good_spad+0x40>
		}
	}
}
 800aa78:	bf00      	nop
 800aa7a:	372c      	adds	r7, #44	@ 0x2c
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa82:	4770      	bx	lr

0800aa84 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b085      	sub	sp, #20
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	099b      	lsrs	r3, r3, #6
 800aa94:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800aa96:	4a07      	ldr	r2, [pc, #28]	@ (800aab4 <is_aperture+0x30>)
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d101      	bne.n	800aaa6 <is_aperture+0x22>
		isAperture = 0;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800aaa6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3714      	adds	r7, #20
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr
 800aab4:	200002bc 	.word	0x200002bc

0800aab8 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b089      	sub	sp, #36	@ 0x24
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	60f8      	str	r0, [r7, #12]
 800aac0:	60b9      	str	r1, [r7, #8]
 800aac2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800aac4:	2300      	movs	r3, #0
 800aac6:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800aac8:	2308      	movs	r3, #8
 800aaca:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	69bb      	ldr	r3, [r7, #24]
 800aad0:	fbb2 f3f3 	udiv	r3, r2, r3
 800aad4:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	69ba      	ldr	r2, [r7, #24]
 800aada:	fbb3 f2f2 	udiv	r2, r3, r2
 800aade:	69b9      	ldr	r1, [r7, #24]
 800aae0:	fb01 f202 	mul.w	r2, r1, r2
 800aae4:	1a9b      	subs	r3, r3, r2
 800aae6:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800aae8:	697a      	ldr	r2, [r7, #20]
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d302      	bcc.n	800aaf6 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800aaf0:	23ce      	movs	r3, #206	@ 0xce
 800aaf2:	77fb      	strb	r3, [r7, #31]
 800aaf4:	e010      	b.n	800ab18 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800aaf6:	68fa      	ldr	r2, [r7, #12]
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	4413      	add	r3, r2
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	b25a      	sxtb	r2, r3
 800ab00:	2101      	movs	r1, #1
 800ab02:	693b      	ldr	r3, [r7, #16]
 800ab04:	fa01 f303 	lsl.w	r3, r1, r3
 800ab08:	b25b      	sxtb	r3, r3
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	b259      	sxtb	r1, r3
 800ab0e:	68fa      	ldr	r2, [r7, #12]
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	4413      	add	r3, r2
 800ab14:	b2ca      	uxtb	r2, r1
 800ab16:	701a      	strb	r2, [r3, #0]

	return status;
 800ab18:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3724      	adds	r7, #36	@ 0x24
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr

0800ab28 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800ab32:	2306      	movs	r3, #6
 800ab34:	683a      	ldr	r2, [r7, #0]
 800ab36:	21b0      	movs	r1, #176	@ 0xb0
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f003 f8b7 	bl	800dcac <VL53L0X_WriteMulti>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800ab42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab46:	4618      	mov	r0, r3
 800ab48:	3710      	adds	r7, #16
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}

0800ab4e <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800ab4e:	b580      	push	{r7, lr}
 800ab50:	b084      	sub	sp, #16
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
 800ab56:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800ab58:	2306      	movs	r3, #6
 800ab5a:	683a      	ldr	r2, [r7, #0]
 800ab5c:	21b0      	movs	r1, #176	@ 0xb0
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f003 f8d4 	bl	800dd0c <VL53L0X_ReadMulti>
 800ab64:	4603      	mov	r3, r0
 800ab66:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800ab68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3710      	adds	r7, #16
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b08c      	sub	sp, #48	@ 0x30
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	60f8      	str	r0, [r7, #12]
 800ab7c:	607a      	str	r2, [r7, #4]
 800ab7e:	603b      	str	r3, [r7, #0]
 800ab80:	460b      	mov	r3, r1
 800ab82:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ab84:	2300      	movs	r3, #0
 800ab86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800ab8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab8c:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800ab8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab90:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800ab92:	2300      	movs	r3, #0
 800ab94:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ab96:	e02b      	b.n	800abf0 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800ab98:	f107 031c 	add.w	r3, r7, #28
 800ab9c:	6a3a      	ldr	r2, [r7, #32]
 800ab9e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f7ff ff11 	bl	800a9c8 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800aba6:	69fb      	ldr	r3, [r7, #28]
 800aba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abac:	d103      	bne.n	800abb6 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800abae:	23ce      	movs	r3, #206	@ 0xce
 800abb0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 800abb4:	e020      	b.n	800abf8 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800abb6:	69fb      	ldr	r3, [r7, #28]
 800abb8:	461a      	mov	r2, r3
 800abba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abbc:	4413      	add	r3, r2
 800abbe:	4618      	mov	r0, r3
 800abc0:	f7ff ff60 	bl	800aa84 <is_aperture>
 800abc4:	4603      	mov	r3, r0
 800abc6:	461a      	mov	r2, r3
 800abc8:	7afb      	ldrb	r3, [r7, #11]
 800abca:	4293      	cmp	r3, r2
 800abcc:	d003      	beq.n	800abd6 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800abce:	23ce      	movs	r3, #206	@ 0xce
 800abd0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			break;
 800abd4:	e010      	b.n	800abf8 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800abd6:	69fb      	ldr	r3, [r7, #28]
 800abd8:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800abda:	6a3a      	ldr	r2, [r7, #32]
 800abdc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800abde:	6838      	ldr	r0, [r7, #0]
 800abe0:	f7ff ff6a 	bl	800aab8 <enable_spad_bit>
		currentSpad++;
 800abe4:	6a3b      	ldr	r3, [r7, #32]
 800abe6:	3301      	adds	r3, #1
 800abe8:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800abea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abec:	3301      	adds	r3, #1
 800abee:	62bb      	str	r3, [r7, #40]	@ 0x28
 800abf0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800abf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d3cf      	bcc.n	800ab98 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800abf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800abfa:	6a3a      	ldr	r2, [r7, #32]
 800abfc:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800abfe:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d106      	bne.n	800ac14 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800ac06:	6839      	ldr	r1, [r7, #0]
 800ac08:	68f8      	ldr	r0, [r7, #12]
 800ac0a:	f7ff ff8d 	bl	800ab28 <set_ref_spad_map>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800ac14:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d121      	bne.n	800ac60 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800ac1c:	f107 0314 	add.w	r3, r7, #20
 800ac20:	4619      	mov	r1, r3
 800ac22:	68f8      	ldr	r0, [r7, #12]
 800ac24:	f7ff ff93 	bl	800ab4e <get_ref_spad_map>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

		i = 0;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800ac32:	e011      	b.n	800ac58 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800ac34:	683a      	ldr	r2, [r7, #0]
 800ac36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac38:	4413      	add	r3, r2
 800ac3a:	781a      	ldrb	r2, [r3, #0]
 800ac3c:	f107 0114 	add.w	r1, r7, #20
 800ac40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac42:	440b      	add	r3, r1
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d003      	beq.n	800ac52 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800ac4a:	23ce      	movs	r3, #206	@ 0xce
 800ac4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				break;
 800ac50:	e006      	b.n	800ac60 <enable_ref_spads+0xec>
			}
			i++;
 800ac52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac54:	3301      	adds	r3, #1
 800ac56:	627b      	str	r3, [r7, #36]	@ 0x24
		while (i < size) {
 800ac58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d3e9      	bcc.n	800ac34 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800ac60:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	3730      	adds	r7, #48	@ 0x30
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b08a      	sub	sp, #40	@ 0x28
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ac76:	2300      	movs	r3, #0
 800ac78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800ac88:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800ac8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d107      	bne.n	800aca4 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800ac94:	22c0      	movs	r2, #192	@ 0xc0
 800ac96:	2101      	movs	r1, #1
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f003 f863 	bl	800dd64 <VL53L0X_WrByte>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800aca4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d108      	bne.n	800acbe <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800acac:	f107 0308 	add.w	r3, r7, #8
 800acb0:	4619      	mov	r1, r3
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f7ff fc4c 	bl	800a550 <VL53L0X_PerformSingleRangingMeasurement>
 800acb8:	4603      	mov	r3, r0
 800acba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800acbe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d107      	bne.n	800acd6 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800acc6:	2201      	movs	r2, #1
 800acc8:	21ff      	movs	r1, #255	@ 0xff
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f003 f84a 	bl	800dd64 <VL53L0X_WrByte>
 800acd0:	4603      	mov	r3, r0
 800acd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE)
 800acd6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d107      	bne.n	800acee <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800acde:	683a      	ldr	r2, [r7, #0]
 800ace0:	21b6      	movs	r1, #182	@ 0xb6
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f003 f8ea 	bl	800debc <VL53L0X_RdWord>
 800ace8:	4603      	mov	r3, r0
 800acea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800acee:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d107      	bne.n	800ad06 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800acf6:	2200      	movs	r2, #0
 800acf8:	21ff      	movs	r1, #255	@ 0xff
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f003 f832 	bl	800dd64 <VL53L0X_WrByte>
 800ad00:	4603      	mov	r3, r0
 800ad02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800ad06:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d112      	bne.n	800ad34 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800ad0e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ad12:	461a      	mov	r2, r3
 800ad14:	2101      	movs	r1, #1
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f003 f824 	bl	800dd64 <VL53L0X_WrByte>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800ad22:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d104      	bne.n	800ad34 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800ad30:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
	}

	return status;
 800ad34:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3728      	adds	r7, #40	@ 0x28
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800ad40:	b590      	push	{r4, r7, lr}
 800ad42:	b09d      	sub	sp, #116	@ 0x74
 800ad44:	af06      	add	r7, sp, #24
 800ad46:	60f8      	str	r0, [r7, #12]
 800ad48:	60b9      	str	r1, [r7, #8]
 800ad4a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad4c:	2300      	movs	r3, #0
 800ad4e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800ad52:	23b4      	movs	r3, #180	@ 0xb4
 800ad54:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	uint32_t minimumSpadCount = 3;
 800ad58:	2303      	movs	r3, #3
 800ad5a:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t maxSpadCount = 44;
 800ad5c:	232c      	movs	r3, #44	@ 0x2c
 800ad5e:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t currentSpadIndex = 0;
 800ad60:	2300      	movs	r3, #0
 800ad62:	653b      	str	r3, [r7, #80]	@ 0x50
	uint32_t lastSpadIndex = 0;
 800ad64:	2300      	movs	r3, #0
 800ad66:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800ad6c:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 800ad70:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800ad72:	2300      	movs	r3, #0
 800ad74:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t index = 0;
 800ad76:	2300      	movs	r3, #0
 800ad78:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint32_t spadArraySize = 6;
 800ad7a:	2306      	movs	r3, #6
 800ad7c:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t signalRateDiff = 0;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t lastSignalRateDiff = 0;
 800ad82:	2300      	movs	r3, #0
 800ad84:	647b      	str	r3, [r7, #68]	@ 0x44
	uint8_t complete = 0;
 800ad86:	2300      	movs	r3, #0
 800ad88:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	uint8_t VhvSettings = 0;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800ad90:	2300      	movs	r3, #0
 800ad92:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800ad94:	2300      	movs	r3, #0
 800ad96:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800ad98:	2300      	movs	r3, #0
 800ad9a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f8b3 313c 	ldrh.w	r3, [r3, #316]	@ 0x13c
 800ada4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800ada6:	2300      	movs	r3, #0
 800ada8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800adaa:	e009      	b.n	800adc0 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800adac:	68fa      	ldr	r2, [r7, #12]
 800adae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adb0:	4413      	add	r3, r2
 800adb2:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800adb6:	2200      	movs	r2, #0
 800adb8:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800adba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adbc:	3301      	adds	r3, #1
 800adbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 800adc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800adc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d3f1      	bcc.n	800adac <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800adc8:	2201      	movs	r2, #1
 800adca:	21ff      	movs	r1, #255	@ 0xff
 800adcc:	68f8      	ldr	r0, [r7, #12]
 800adce:	f002 ffc9 	bl	800dd64 <VL53L0X_WrByte>
 800add2:	4603      	mov	r3, r0
 800add4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800add8:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800addc:	2b00      	cmp	r3, #0
 800adde:	d107      	bne.n	800adf0 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800ade0:	2200      	movs	r2, #0
 800ade2:	214f      	movs	r1, #79	@ 0x4f
 800ade4:	68f8      	ldr	r0, [r7, #12]
 800ade6:	f002 ffbd 	bl	800dd64 <VL53L0X_WrByte>
 800adea:	4603      	mov	r3, r0
 800adec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800adf0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d107      	bne.n	800ae08 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800adf8:	222c      	movs	r2, #44	@ 0x2c
 800adfa:	214e      	movs	r1, #78	@ 0x4e
 800adfc:	68f8      	ldr	r0, [r7, #12]
 800adfe:	f002 ffb1 	bl	800dd64 <VL53L0X_WrByte>
 800ae02:	4603      	mov	r3, r0
 800ae04:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800ae08:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d107      	bne.n	800ae20 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ae10:	2200      	movs	r2, #0
 800ae12:	21ff      	movs	r1, #255	@ 0xff
 800ae14:	68f8      	ldr	r0, [r7, #12]
 800ae16:	f002 ffa5 	bl	800dd64 <VL53L0X_WrByte>
 800ae1a:	4603      	mov	r3, r0
 800ae1c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800ae20:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d109      	bne.n	800ae3c <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800ae28:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	21b6      	movs	r1, #182	@ 0xb6
 800ae30:	68f8      	ldr	r0, [r7, #12]
 800ae32:	f002 ff97 	bl	800dd64 <VL53L0X_WrByte>
 800ae36:	4603      	mov	r3, r0
 800ae38:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800ae3c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d107      	bne.n	800ae54 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800ae44:	2200      	movs	r2, #0
 800ae46:	2180      	movs	r1, #128	@ 0x80
 800ae48:	68f8      	ldr	r0, [r7, #12]
 800ae4a:	f002 ff8b 	bl	800dd64 <VL53L0X_WrByte>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800ae54:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d10a      	bne.n	800ae72 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800ae5c:	f107 0210 	add.w	r2, r7, #16
 800ae60:	f107 0111 	add.w	r1, r7, #17
 800ae64:	2300      	movs	r3, #0
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	f000 fbbb 	bl	800b5e2 <VL53L0X_perform_ref_calibration>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800ae72:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d121      	bne.n	800aebe <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	653b      	str	r3, [r7, #80]	@ 0x50
		lastSpadIndex = currentSpadIndex;
 800ae7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae80:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800ae82:	2300      	movs	r3, #0
 800ae84:	64fb      	str	r3, [r7, #76]	@ 0x4c
		Status = enable_ref_spads(Dev,
 800ae86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae88:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f503 7492 	add.w	r4, r3, #292	@ 0x124
		Status = enable_ref_spads(Dev,
 800ae96:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800ae9a:	f107 0218 	add.w	r2, r7, #24
 800ae9e:	9204      	str	r2, [sp, #16]
 800aea0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aea2:	9203      	str	r2, [sp, #12]
 800aea4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800aea6:	9202      	str	r2, [sp, #8]
 800aea8:	9301      	str	r3, [sp, #4]
 800aeaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeac:	9300      	str	r3, [sp, #0]
 800aeae:	4623      	mov	r3, r4
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	68f8      	ldr	r0, [r7, #12]
 800aeb4:	f7ff fe5e 	bl	800ab74 <enable_ref_spads>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800aebe:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d174      	bne.n	800afb0 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	653b      	str	r3, [r7, #80]	@ 0x50

		Status = perform_ref_signal_measurement(Dev,
 800aeca:	f107 0312 	add.w	r3, r7, #18
 800aece:	4619      	mov	r1, r3
 800aed0:	68f8      	ldr	r0, [r7, #12]
 800aed2:	f7ff fecb 	bl	800ac6c <perform_ref_signal_measurement>
 800aed6:	4603      	mov	r3, r0
 800aed8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800aedc:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d161      	bne.n	800afa8 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800aee4:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800aee6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d25d      	bcs.n	800afa8 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800aeec:	2300      	movs	r3, #0
 800aeee:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aef0:	e009      	b.n	800af06 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800aef2:	68fa      	ldr	r2, [r7, #12]
 800aef4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aef6:	4413      	add	r3, r2
 800aef8:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800aefc:	2200      	movs	r2, #0
 800aefe:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800af00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af02:	3301      	adds	r3, #1
 800af04:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d3f1      	bcc.n	800aef2 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800af0e:	e002      	b.n	800af16 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800af10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af12:	3301      	adds	r3, #1
 800af14:	653b      	str	r3, [r7, #80]	@ 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800af16:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800af1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800af1c:	4413      	add	r3, r2
 800af1e:	4618      	mov	r0, r3
 800af20:	f7ff fdb0 	bl	800aa84 <is_aperture>
 800af24:	4603      	mov	r3, r0
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800af26:	2b00      	cmp	r3, #0
 800af28:	d103      	bne.n	800af32 <VL53L0X_perform_ref_spad_management+0x1f2>
 800af2a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800af2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af2e:	429a      	cmp	r2, r3
 800af30:	d3ee      	bcc.n	800af10 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800af32:	2301      	movs	r3, #1
 800af34:	64fb      	str	r3, [r7, #76]	@ 0x4c

			Status = enable_ref_spads(Dev,
 800af36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af38:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f503 7492 	add.w	r4, r3, #292	@ 0x124
			Status = enable_ref_spads(Dev,
 800af46:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800af4a:	f107 0218 	add.w	r2, r7, #24
 800af4e:	9204      	str	r2, [sp, #16]
 800af50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800af52:	9203      	str	r2, [sp, #12]
 800af54:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800af56:	9202      	str	r2, [sp, #8]
 800af58:	9301      	str	r3, [sp, #4]
 800af5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af5c:	9300      	str	r3, [sp, #0]
 800af5e:	4623      	mov	r3, r4
 800af60:	4602      	mov	r2, r0
 800af62:	68f8      	ldr	r0, [r7, #12]
 800af64:	f7ff fe06 	bl	800ab74 <enable_ref_spads>
 800af68:	4603      	mov	r3, r0
 800af6a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800af6e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800af72:	2b00      	cmp	r3, #0
 800af74:	d11b      	bne.n	800afae <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800af76:	69bb      	ldr	r3, [r7, #24]
 800af78:	653b      	str	r3, [r7, #80]	@ 0x50
				Status = perform_ref_signal_measurement(Dev,
 800af7a:	f107 0312 	add.w	r3, r7, #18
 800af7e:	4619      	mov	r1, r3
 800af80:	68f8      	ldr	r0, [r7, #12]
 800af82:	f7ff fe73 	bl	800ac6c <perform_ref_signal_measurement>
 800af86:	4603      	mov	r3, r0
 800af88:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800af8c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800af90:	2b00      	cmp	r3, #0
 800af92:	d10c      	bne.n	800afae <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800af94:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800af96:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800af98:	429a      	cmp	r2, r3
 800af9a:	d208      	bcs.n	800afae <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800af9c:	2301      	movs	r3, #1
 800af9e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
					refSpadCount_int = minimumSpadCount;
 800afa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800afa6:	e002      	b.n	800afae <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800afa8:	2300      	movs	r3, #0
 800afaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800afac:	e000      	b.n	800afb0 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800afae:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800afb0:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	f040 80af 	bne.w	800b118 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800afba:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800afbc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800afbe:	429a      	cmp	r2, r3
 800afc0:	f240 80aa 	bls.w	800b118 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800afc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800afc6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		refSpadCount_int	= minimumSpadCount;
 800afca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afcc:	63fb      	str	r3, [r7, #60]	@ 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	f503 7192 	add.w	r1, r3, #292	@ 0x124
 800afd4:	f107 031c 	add.w	r3, r7, #28
 800afd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800afda:	4618      	mov	r0, r3
 800afdc:	f003 ff2b 	bl	800ee36 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800afe0:	8a7b      	ldrh	r3, [r7, #18]
 800afe2:	461a      	mov	r2, r3
 800afe4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800afe6:	1ad3      	subs	r3, r2, r3
 800afe8:	2b00      	cmp	r3, #0
 800afea:	bfb8      	it	lt
 800afec:	425b      	neglt	r3, r3
 800afee:	647b      	str	r3, [r7, #68]	@ 0x44
			targetRefRate);
		complete = 0;
 800aff0:	2300      	movs	r3, #0
 800aff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

		while (!complete) {
 800aff6:	e086      	b.n	800b106 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
			get_next_good_spad(
 800affe:	f107 0314 	add.w	r3, r7, #20
 800b002:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b004:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b006:	f7ff fcdf 	bl	800a9c8 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b010:	d103      	bne.n	800b01a <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800b012:	23ce      	movs	r3, #206	@ 0xce
 800b014:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
				break;
 800b018:	e07e      	b.n	800b118 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800b01a:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 800b01e:	697a      	ldr	r2, [r7, #20]
 800b020:	4413      	add	r3, r2
 800b022:	4618      	mov	r0, r3
 800b024:	f7ff fd2e 	bl	800aa84 <is_aperture>
 800b028:	4603      	mov	r3, r0
 800b02a:	461a      	mov	r2, r3
 800b02c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b02e:	4293      	cmp	r3, r2
 800b030:	d003      	beq.n	800b03a <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800b032:	2301      	movs	r3, #1
 800b034:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
				break;
 800b038:	e06e      	b.n	800b118 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800b03a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b03c:	3301      	adds	r3, #1
 800b03e:	63fb      	str	r3, [r7, #60]	@ 0x3c

			currentSpadIndex = nextGoodSpad;
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	653b      	str	r3, [r7, #80]	@ 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f503 7392 	add.w	r3, r3, #292	@ 0x124
			Status = enable_spad_bit(
 800b04a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b04c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b04e:	4618      	mov	r0, r3
 800b050:	f7ff fd32 	bl	800aab8 <enable_spad_bit>
 800b054:	4603      	mov	r3, r0
 800b056:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800b05a:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d10c      	bne.n	800b07c <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800b062:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b064:	3301      	adds	r3, #1
 800b066:	653b      	str	r3, [r7, #80]	@ 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f503 7392 	add.w	r3, r3, #292	@ 0x124
				Status = set_ref_spad_map(Dev,
 800b06e:	4619      	mov	r1, r3
 800b070:	68f8      	ldr	r0, [r7, #12]
 800b072:	f7ff fd59 	bl	800ab28 <set_ref_spad_map>
 800b076:	4603      	mov	r3, r0
 800b078:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800b07c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800b080:	2b00      	cmp	r3, #0
 800b082:	d146      	bne.n	800b112 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800b084:	f107 0312 	add.w	r3, r7, #18
 800b088:	4619      	mov	r1, r3
 800b08a:	68f8      	ldr	r0, [r7, #12]
 800b08c:	f7ff fdee 	bl	800ac6c <perform_ref_signal_measurement>
 800b090:	4603      	mov	r3, r0
 800b092:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800b096:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d13b      	bne.n	800b116 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800b09e:	8a7b      	ldrh	r3, [r7, #18]
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b0a4:	1ad3      	subs	r3, r2, r3
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	bfb8      	it	lt
 800b0aa:	425b      	neglt	r3, r3
 800b0ac:	627b      	str	r3, [r7, #36]	@ 0x24

			if (peakSignalRateRef > targetRefRate) {
 800b0ae:	8a7b      	ldrh	r3, [r7, #18]
 800b0b0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b0b2:	429a      	cmp	r2, r3
 800b0b4:	d21c      	bcs.n	800b0f0 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800b0b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d914      	bls.n	800b0e8 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800b0be:	f107 031c 	add.w	r3, r7, #28
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	68f8      	ldr	r0, [r7, #12]
 800b0c6:	f7ff fd2f 	bl	800ab28 <set_ref_spad_map>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	f503 7392 	add.w	r3, r3, #292	@ 0x124
					memcpy(
 800b0d6:	f107 011c 	add.w	r1, r7, #28
 800b0da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f003 feaa 	bl	800ee36 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800b0e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0e4:	3b01      	subs	r3, #1
 800b0e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
				}
				complete = 1;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ee:	e00a      	b.n	800b106 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800b0f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0f2:	647b      	str	r3, [r7, #68]	@ 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f503 7192 	add.w	r1, r3, #292	@ 0x124
				memcpy(lastSpadArray,
 800b0fa:	f107 031c 	add.w	r3, r7, #28
 800b0fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b100:	4618      	mov	r0, r3
 800b102:	f003 fe98 	bl	800ee36 <memcpy>
		while (!complete) {
 800b106:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	f43f af74 	beq.w	800aff8 <VL53L0X_perform_ref_spad_management+0x2b8>
 800b110:	e002      	b.n	800b118 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800b112:	bf00      	nop
 800b114:	e000      	b.n	800b118 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800b116:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b118:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d115      	bne.n	800b14c <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b124:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800b12c:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2201      	movs	r2, #1
 800b132:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	b2da      	uxtb	r2, r3
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	781a      	ldrb	r2, [r3, #0]
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800b14c:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
}
 800b150:	4618      	mov	r0, r3
 800b152:	375c      	adds	r7, #92	@ 0x5c
 800b154:	46bd      	mov	sp, r7
 800b156:	bd90      	pop	{r4, r7, pc}

0800b158 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800b158:	b590      	push	{r4, r7, lr}
 800b15a:	b093      	sub	sp, #76	@ 0x4c
 800b15c:	af06      	add	r7, sp, #24
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	4613      	mov	r3, r2
 800b164:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b166:	2300      	movs	r3, #0
 800b168:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint32_t currentSpadIndex = 0;
 800b16c:	2300      	movs	r3, #0
 800b16e:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t startSelect = 0xB4;
 800b170:	23b4      	movs	r3, #180	@ 0xb4
 800b172:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t spadArraySize = 6;
 800b176:	2306      	movs	r3, #6
 800b178:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800b17a:	232c      	movs	r3, #44	@ 0x2c
 800b17c:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b17e:	2201      	movs	r2, #1
 800b180:	21ff      	movs	r1, #255	@ 0xff
 800b182:	68f8      	ldr	r0, [r7, #12]
 800b184:	f002 fdee 	bl	800dd64 <VL53L0X_WrByte>
 800b188:	4603      	mov	r3, r0
 800b18a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800b18e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800b192:	2b00      	cmp	r3, #0
 800b194:	d107      	bne.n	800b1a6 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800b196:	2200      	movs	r2, #0
 800b198:	214f      	movs	r1, #79	@ 0x4f
 800b19a:	68f8      	ldr	r0, [r7, #12]
 800b19c:	f002 fde2 	bl	800dd64 <VL53L0X_WrByte>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800b1a6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d107      	bne.n	800b1be <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800b1ae:	222c      	movs	r2, #44	@ 0x2c
 800b1b0:	214e      	movs	r1, #78	@ 0x4e
 800b1b2:	68f8      	ldr	r0, [r7, #12]
 800b1b4:	f002 fdd6 	bl	800dd64 <VL53L0X_WrByte>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800b1be:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d107      	bne.n	800b1d6 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	21ff      	movs	r1, #255	@ 0xff
 800b1ca:	68f8      	ldr	r0, [r7, #12]
 800b1cc:	f002 fdca 	bl	800dd64 <VL53L0X_WrByte>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800b1d6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d109      	bne.n	800b1f2 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800b1de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	21b6      	movs	r1, #182	@ 0xb6
 800b1e6:	68f8      	ldr	r0, [r7, #12]
 800b1e8:	f002 fdbc 	bl	800dd64 <VL53L0X_WrByte>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1f6:	e009      	b.n	800b20c <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800b1f8:	68fa      	ldr	r2, [r7, #12]
 800b1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1fc:	4413      	add	r3, r2
 800b1fe:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800b202:	2200      	movs	r2, #0
 800b204:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800b206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b208:	3301      	adds	r3, #1
 800b20a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b20c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b20e:	69fb      	ldr	r3, [r7, #28]
 800b210:	429a      	cmp	r2, r3
 800b212:	d3f1      	bcc.n	800b1f8 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800b214:	79fb      	ldrb	r3, [r7, #7]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d011      	beq.n	800b23e <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800b21a:	e002      	b.n	800b222 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800b21c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b21e:	3301      	adds	r3, #1
 800b220:	62bb      	str	r3, [r7, #40]	@ 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800b222:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800b226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b228:	4413      	add	r3, r2
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7ff fc2a 	bl	800aa84 <is_aperture>
 800b230:	4603      	mov	r3, r0
 800b232:	2b00      	cmp	r3, #0
 800b234:	d103      	bne.n	800b23e <VL53L0X_set_reference_spads+0xe6>
 800b236:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b238:	69bb      	ldr	r3, [r7, #24]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d3ee      	bcc.n	800b21c <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f503 7095 	add.w	r0, r3, #298	@ 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f503 7492 	add.w	r4, r3, #292	@ 0x124
	Status = enable_ref_spads(Dev,
 800b24a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b24e:	79f9      	ldrb	r1, [r7, #7]
 800b250:	f107 0214 	add.w	r2, r7, #20
 800b254:	9204      	str	r2, [sp, #16]
 800b256:	68ba      	ldr	r2, [r7, #8]
 800b258:	9203      	str	r2, [sp, #12]
 800b25a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b25c:	9202      	str	r2, [sp, #8]
 800b25e:	9301      	str	r3, [sp, #4]
 800b260:	69fb      	ldr	r3, [r7, #28]
 800b262:	9300      	str	r3, [sp, #0]
 800b264:	4623      	mov	r3, r4
 800b266:	4602      	mov	r2, r0
 800b268:	68f8      	ldr	r0, [r7, #12]
 800b26a:	f7ff fc83 	bl	800ab74 <enable_ref_spads>
 800b26e:	4603      	mov	r3, r0
 800b270:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800b274:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d10c      	bne.n	800b296 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2201      	movs	r2, #1
 800b280:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	b2da      	uxtb	r2, r3
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	79fa      	ldrb	r2, [r7, #7]
 800b292:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800b296:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3734      	adds	r7, #52	@ 0x34
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd90      	pop	{r4, r7, pc}

0800b2a2 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800b2a2:	b580      	push	{r7, lr}
 800b2a4:	b084      	sub	sp, #16
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	6078      	str	r0, [r7, #4]
 800b2aa:	460b      	mov	r3, r1
 800b2ac:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b2b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d10a      	bne.n	800b2d0 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800b2ba:	78fb      	ldrb	r3, [r7, #3]
 800b2bc:	f043 0301 	orr.w	r3, r3, #1
 800b2c0:	b2db      	uxtb	r3, r3
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	2100      	movs	r1, #0
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f002 fd4c 	bl	800dd64 <VL53L0X_WrByte>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800b2d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d104      	bne.n	800b2e2 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f000 f9bf 	bl	800b65c <VL53L0X_measurement_poll_for_completion>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b2e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d105      	bne.n	800b2f6 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800b2ea:	2100      	movs	r1, #0
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f7ff fab5 	bl	800a85c <VL53L0X_ClearInterruptMask>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b2f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d106      	bne.n	800b30c <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800b2fe:	2200      	movs	r2, #0
 800b300:	2100      	movs	r1, #0
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f002 fd2e 	bl	800dd64 <VL53L0X_WrByte>
 800b308:	4603      	mov	r3, r0
 800b30a:	73fb      	strb	r3, [r7, #15]

	return Status;
 800b30c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b310:	4618      	mov	r0, r3
 800b312:	3710      	adds	r7, #16
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}

0800b318 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	4608      	mov	r0, r1
 800b322:	4611      	mov	r1, r2
 800b324:	461a      	mov	r2, r3
 800b326:	4603      	mov	r3, r0
 800b328:	70fb      	strb	r3, [r7, #3]
 800b32a:	460b      	mov	r3, r1
 800b32c:	70bb      	strb	r3, [r7, #2]
 800b32e:	4613      	mov	r3, r2
 800b330:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b332:	2300      	movs	r3, #0
 800b334:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800b336:	2300      	movs	r3, #0
 800b338:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b33a:	2201      	movs	r2, #1
 800b33c:	21ff      	movs	r1, #255	@ 0xff
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f002 fd10 	bl	800dd64 <VL53L0X_WrByte>
 800b344:	4603      	mov	r3, r0
 800b346:	461a      	mov	r2, r3
 800b348:	7bfb      	ldrb	r3, [r7, #15]
 800b34a:	4313      	orrs	r3, r2
 800b34c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b34e:	2200      	movs	r2, #0
 800b350:	2100      	movs	r1, #0
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f002 fd06 	bl	800dd64 <VL53L0X_WrByte>
 800b358:	4603      	mov	r3, r0
 800b35a:	461a      	mov	r2, r3
 800b35c:	7bfb      	ldrb	r3, [r7, #15]
 800b35e:	4313      	orrs	r3, r2
 800b360:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b362:	2200      	movs	r2, #0
 800b364:	21ff      	movs	r1, #255	@ 0xff
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f002 fcfc 	bl	800dd64 <VL53L0X_WrByte>
 800b36c:	4603      	mov	r3, r0
 800b36e:	461a      	mov	r2, r3
 800b370:	7bfb      	ldrb	r3, [r7, #15]
 800b372:	4313      	orrs	r3, r2
 800b374:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800b376:	78fb      	ldrb	r3, [r7, #3]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d01e      	beq.n	800b3ba <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800b37c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d009      	beq.n	800b398 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800b384:	69ba      	ldr	r2, [r7, #24]
 800b386:	21cb      	movs	r1, #203	@ 0xcb
 800b388:	6878      	ldr	r0, [r7, #4]
 800b38a:	f002 fd6d 	bl	800de68 <VL53L0X_RdByte>
 800b38e:	4603      	mov	r3, r0
 800b390:	461a      	mov	r2, r3
 800b392:	7bfb      	ldrb	r3, [r7, #15]
 800b394:	4313      	orrs	r3, r2
 800b396:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800b398:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d02a      	beq.n	800b3f6 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800b3a0:	f107 030e 	add.w	r3, r7, #14
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	21ee      	movs	r1, #238	@ 0xee
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f002 fd5d 	bl	800de68 <VL53L0X_RdByte>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	7bfb      	ldrb	r3, [r7, #15]
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	73fb      	strb	r3, [r7, #15]
 800b3b8:	e01d      	b.n	800b3f6 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800b3ba:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d00a      	beq.n	800b3d8 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800b3c2:	78bb      	ldrb	r3, [r7, #2]
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	21cb      	movs	r1, #203	@ 0xcb
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f002 fccb 	bl	800dd64 <VL53L0X_WrByte>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	461a      	mov	r2, r3
 800b3d2:	7bfb      	ldrb	r3, [r7, #15]
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800b3d8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d00a      	beq.n	800b3f6 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800b3e0:	787b      	ldrb	r3, [r7, #1]
 800b3e2:	2280      	movs	r2, #128	@ 0x80
 800b3e4:	21ee      	movs	r1, #238	@ 0xee
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f002 fd0a 	bl	800de00 <VL53L0X_UpdateByte>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	7bfb      	ldrb	r3, [r7, #15]
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	21ff      	movs	r1, #255	@ 0xff
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f002 fcb2 	bl	800dd64 <VL53L0X_WrByte>
 800b400:	4603      	mov	r3, r0
 800b402:	461a      	mov	r2, r3
 800b404:	7bfb      	ldrb	r3, [r7, #15]
 800b406:	4313      	orrs	r3, r2
 800b408:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800b40a:	2201      	movs	r2, #1
 800b40c:	2100      	movs	r1, #0
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f002 fca8 	bl	800dd64 <VL53L0X_WrByte>
 800b414:	4603      	mov	r3, r0
 800b416:	461a      	mov	r2, r3
 800b418:	7bfb      	ldrb	r3, [r7, #15]
 800b41a:	4313      	orrs	r3, r2
 800b41c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b41e:	2200      	movs	r2, #0
 800b420:	21ff      	movs	r1, #255	@ 0xff
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f002 fc9e 	bl	800dd64 <VL53L0X_WrByte>
 800b428:	4603      	mov	r3, r0
 800b42a:	461a      	mov	r2, r3
 800b42c:	7bfb      	ldrb	r3, [r7, #15]
 800b42e:	4313      	orrs	r3, r2
 800b430:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800b432:	7bbb      	ldrb	r3, [r7, #14]
 800b434:	f023 0310 	bic.w	r3, r3, #16
 800b438:	b2da      	uxtb	r2, r3
 800b43a:	69fb      	ldr	r3, [r7, #28]
 800b43c:	701a      	strb	r2, [r3, #0]

	return Status;
 800b43e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b442:	4618      	mov	r0, r3
 800b444:	3710      	adds	r7, #16
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}

0800b44a <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800b44a:	b580      	push	{r7, lr}
 800b44c:	b08a      	sub	sp, #40	@ 0x28
 800b44e:	af04      	add	r7, sp, #16
 800b450:	60f8      	str	r0, [r7, #12]
 800b452:	60b9      	str	r1, [r7, #8]
 800b454:	4611      	mov	r1, r2
 800b456:	461a      	mov	r2, r3
 800b458:	460b      	mov	r3, r1
 800b45a:	71fb      	strb	r3, [r7, #7]
 800b45c:	4613      	mov	r3, r2
 800b45e:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b460:	2300      	movs	r3, #0
 800b462:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b464:	2300      	movs	r3, #0
 800b466:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800b468:	2300      	movs	r3, #0
 800b46a:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800b46c:	2300      	movs	r3, #0
 800b46e:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800b470:	2300      	movs	r3, #0
 800b472:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800b474:	79bb      	ldrb	r3, [r7, #6]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d003      	beq.n	800b482 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800b480:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800b482:	2201      	movs	r2, #1
 800b484:	2101      	movs	r1, #1
 800b486:	68f8      	ldr	r0, [r7, #12]
 800b488:	f002 fc6c 	bl	800dd64 <VL53L0X_WrByte>
 800b48c:	4603      	mov	r3, r0
 800b48e:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800b490:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d105      	bne.n	800b4a4 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800b498:	2140      	movs	r1, #64	@ 0x40
 800b49a:	68f8      	ldr	r0, [r7, #12]
 800b49c:	f7ff ff01 	bl	800b2a2 <VL53L0X_perform_single_ref_calibration>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800b4a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d115      	bne.n	800b4d8 <VL53L0X_perform_vhv_calibration+0x8e>
 800b4ac:	79fb      	ldrb	r3, [r7, #7]
 800b4ae:	2b01      	cmp	r3, #1
 800b4b0:	d112      	bne.n	800b4d8 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800b4b2:	7d39      	ldrb	r1, [r7, #20]
 800b4b4:	7d7a      	ldrb	r2, [r7, #21]
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	9303      	str	r3, [sp, #12]
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	9302      	str	r3, [sp, #8]
 800b4be:	f107 0313 	add.w	r3, r7, #19
 800b4c2:	9301      	str	r3, [sp, #4]
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	9300      	str	r3, [sp, #0]
 800b4c8:	460b      	mov	r3, r1
 800b4ca:	2101      	movs	r1, #1
 800b4cc:	68f8      	ldr	r0, [r7, #12]
 800b4ce:	f7ff ff23 	bl	800b318 <VL53L0X_ref_calibration_io>
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	75fb      	strb	r3, [r7, #23]
 800b4d6:	e002      	b.n	800b4de <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800b4de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d112      	bne.n	800b50c <VL53L0X_perform_vhv_calibration+0xc2>
 800b4e6:	79bb      	ldrb	r3, [r7, #6]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d00f      	beq.n	800b50c <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b4ec:	7dbb      	ldrb	r3, [r7, #22]
 800b4ee:	461a      	mov	r2, r3
 800b4f0:	2101      	movs	r1, #1
 800b4f2:	68f8      	ldr	r0, [r7, #12]
 800b4f4:	f002 fc36 	bl	800dd64 <VL53L0X_WrByte>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b4fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d103      	bne.n	800b50c <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	7dba      	ldrb	r2, [r7, #22]
 800b508:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 800b50c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b510:	4618      	mov	r0, r3
 800b512:	3718      	adds	r7, #24
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b08a      	sub	sp, #40	@ 0x28
 800b51c:	af04      	add	r7, sp, #16
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	4611      	mov	r1, r2
 800b524:	461a      	mov	r2, r3
 800b526:	460b      	mov	r3, r1
 800b528:	71fb      	strb	r3, [r7, #7]
 800b52a:	4613      	mov	r3, r2
 800b52c:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b52e:	2300      	movs	r3, #0
 800b530:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b532:	2300      	movs	r3, #0
 800b534:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800b536:	2300      	movs	r3, #0
 800b538:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800b53a:	2300      	movs	r3, #0
 800b53c:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800b53e:	79bb      	ldrb	r3, [r7, #6]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d003      	beq.n	800b54c <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800b54a:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800b54c:	2202      	movs	r2, #2
 800b54e:	2101      	movs	r1, #1
 800b550:	68f8      	ldr	r0, [r7, #12]
 800b552:	f002 fc07 	bl	800dd64 <VL53L0X_WrByte>
 800b556:	4603      	mov	r3, r0
 800b558:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800b55a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d105      	bne.n	800b56e <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800b562:	2100      	movs	r1, #0
 800b564:	68f8      	ldr	r0, [r7, #12]
 800b566:	f7ff fe9c 	bl	800b2a2 <VL53L0X_perform_single_ref_calibration>
 800b56a:	4603      	mov	r3, r0
 800b56c:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800b56e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d115      	bne.n	800b5a2 <VL53L0X_perform_phase_calibration+0x8a>
 800b576:	79fb      	ldrb	r3, [r7, #7]
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d112      	bne.n	800b5a2 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800b57c:	7d39      	ldrb	r1, [r7, #20]
 800b57e:	7d7a      	ldrb	r2, [r7, #21]
 800b580:	2301      	movs	r3, #1
 800b582:	9303      	str	r3, [sp, #12]
 800b584:	2300      	movs	r3, #0
 800b586:	9302      	str	r3, [sp, #8]
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	9301      	str	r3, [sp, #4]
 800b58c:	f107 0313 	add.w	r3, r7, #19
 800b590:	9300      	str	r3, [sp, #0]
 800b592:	460b      	mov	r3, r1
 800b594:	2101      	movs	r1, #1
 800b596:	68f8      	ldr	r0, [r7, #12]
 800b598:	f7ff febe 	bl	800b318 <VL53L0X_ref_calibration_io>
 800b59c:	4603      	mov	r3, r0
 800b59e:	75fb      	strb	r3, [r7, #23]
 800b5a0:	e002      	b.n	800b5a8 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800b5a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d112      	bne.n	800b5d6 <VL53L0X_perform_phase_calibration+0xbe>
 800b5b0:	79bb      	ldrb	r3, [r7, #6]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d00f      	beq.n	800b5d6 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b5b6:	7dbb      	ldrb	r3, [r7, #22]
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	2101      	movs	r1, #1
 800b5bc:	68f8      	ldr	r0, [r7, #12]
 800b5be:	f002 fbd1 	bl	800dd64 <VL53L0X_WrByte>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b5c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d103      	bne.n	800b5d6 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	7dba      	ldrb	r2, [r7, #22]
 800b5d2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 800b5d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3718      	adds	r7, #24
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}

0800b5e2 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800b5e2:	b580      	push	{r7, lr}
 800b5e4:	b086      	sub	sp, #24
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	60f8      	str	r0, [r7, #12]
 800b5ea:	60b9      	str	r1, [r7, #8]
 800b5ec:	607a      	str	r2, [r7, #4]
 800b5ee:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800b5fe:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800b600:	78fa      	ldrb	r2, [r7, #3]
 800b602:	2300      	movs	r3, #0
 800b604:	68b9      	ldr	r1, [r7, #8]
 800b606:	68f8      	ldr	r0, [r7, #12]
 800b608:	f7ff ff1f 	bl	800b44a <VL53L0X_perform_vhv_calibration>
 800b60c:	4603      	mov	r3, r0
 800b60e:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800b610:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d107      	bne.n	800b628 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800b618:	78fa      	ldrb	r2, [r7, #3]
 800b61a:	2300      	movs	r3, #0
 800b61c:	6879      	ldr	r1, [r7, #4]
 800b61e:	68f8      	ldr	r0, [r7, #12]
 800b620:	f7ff ff7a 	bl	800b518 <VL53L0X_perform_phase_calibration>
 800b624:	4603      	mov	r3, r0
 800b626:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800b628:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d10f      	bne.n	800b650 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b630:	7dbb      	ldrb	r3, [r7, #22]
 800b632:	461a      	mov	r2, r3
 800b634:	2101      	movs	r1, #1
 800b636:	68f8      	ldr	r0, [r7, #12]
 800b638:	f002 fb94 	bl	800dd64 <VL53L0X_WrByte>
 800b63c:	4603      	mov	r3, r0
 800b63e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b640:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d103      	bne.n	800b650 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	7dba      	ldrb	r2, [r7, #22]
 800b64c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130

	}

	return Status;
 800b650:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b654:	4618      	mov	r0, r3
 800b656:	3718      	adds	r7, #24
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}

0800b65c <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b086      	sub	sp, #24
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b664:	2300      	movs	r3, #0
 800b666:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800b668:	2300      	movs	r3, #0
 800b66a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800b66c:	2300      	movs	r3, #0
 800b66e:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800b670:	f107 030f 	add.w	r3, r7, #15
 800b674:	4619      	mov	r1, r3
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f7fe fe0e 	bl	800a298 <VL53L0X_GetMeasurementDataReady>
 800b67c:	4603      	mov	r3, r0
 800b67e:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800b680:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d110      	bne.n	800b6aa <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800b688:	7bfb      	ldrb	r3, [r7, #15]
 800b68a:	2b01      	cmp	r3, #1
 800b68c:	d00f      	beq.n	800b6ae <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	3301      	adds	r3, #1
 800b692:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800b69a:	d302      	bcc.n	800b6a2 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800b69c:	23f9      	movs	r3, #249	@ 0xf9
 800b69e:	75fb      	strb	r3, [r7, #23]
			break;
 800b6a0:	e006      	b.n	800b6b0 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f002 fc7c 	bl	800dfa0 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800b6a8:	e7e2      	b.n	800b670 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800b6aa:	bf00      	nop
 800b6ac:	e000      	b.n	800b6b0 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800b6ae:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800b6b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3718      	adds	r7, #24
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b085      	sub	sp, #20
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800b6ca:	79fb      	ldrb	r3, [r7, #7]
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	b2db      	uxtb	r3, r3
 800b6d0:	005b      	lsls	r3, r3, #1
 800b6d2:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800b6d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3714      	adds	r7, #20
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr

0800b6e2 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800b6e2:	b480      	push	{r7}
 800b6e4:	b085      	sub	sp, #20
 800b6e6:	af00      	add	r7, sp, #0
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800b6f0:	79fb      	ldrb	r3, [r7, #7]
 800b6f2:	085b      	lsrs	r3, r3, #1
 800b6f4:	b2db      	uxtb	r3, r3
 800b6f6:	3b01      	subs	r3, #1
 800b6f8:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800b6fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3714      	adds	r7, #20
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr

0800b708 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800b708:	b480      	push	{r7}
 800b70a:	b085      	sub	sp, #20
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800b710:	2300      	movs	r3, #0
 800b712:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800b714:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b718:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800b71a:	e002      	b.n	800b722 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	089b      	lsrs	r3, r3, #2
 800b720:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800b722:	68ba      	ldr	r2, [r7, #8]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	429a      	cmp	r2, r3
 800b728:	d8f8      	bhi.n	800b71c <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800b72a:	e017      	b.n	800b75c <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800b72c:	68fa      	ldr	r2, [r7, #12]
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	4413      	add	r3, r2
 800b732:	687a      	ldr	r2, [r7, #4]
 800b734:	429a      	cmp	r2, r3
 800b736:	d30b      	bcc.n	800b750 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800b738:	68fa      	ldr	r2, [r7, #12]
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	4413      	add	r3, r2
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	1ad3      	subs	r3, r2, r3
 800b742:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	085b      	lsrs	r3, r3, #1
 800b748:	68ba      	ldr	r2, [r7, #8]
 800b74a:	4413      	add	r3, r2
 800b74c:	60fb      	str	r3, [r7, #12]
 800b74e:	e002      	b.n	800b756 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	085b      	lsrs	r3, r3, #1
 800b754:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	089b      	lsrs	r3, r3, #2
 800b75a:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d1e4      	bne.n	800b72c <VL53L0X_isqrt+0x24>
	}

	return res;
 800b762:	68fb      	ldr	r3, [r7, #12]
}
 800b764:	4618      	mov	r0, r3
 800b766:	3714      	adds	r7, #20
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr

0800b770 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b086      	sub	sp, #24
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b778:	2300      	movs	r3, #0
 800b77a:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800b77c:	2200      	movs	r2, #0
 800b77e:	2183      	movs	r1, #131	@ 0x83
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f002 faef 	bl	800dd64 <VL53L0X_WrByte>
 800b786:	4603      	mov	r3, r0
 800b788:	461a      	mov	r2, r3
 800b78a:	7dfb      	ldrb	r3, [r7, #23]
 800b78c:	4313      	orrs	r3, r2
 800b78e:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800b790:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d11e      	bne.n	800b7d6 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800b798:	2300      	movs	r3, #0
 800b79a:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800b79c:	f107 030f 	add.w	r3, r7, #15
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	2183      	movs	r1, #131	@ 0x83
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f002 fb5f 	bl	800de68 <VL53L0X_RdByte>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800b7ae:	7bfb      	ldrb	r3, [r7, #15]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d10a      	bne.n	800b7ca <VL53L0X_device_read_strobe+0x5a>
 800b7b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d106      	bne.n	800b7ca <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	3301      	adds	r3, #1
 800b7c0:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800b7c8:	d3e8      	bcc.n	800b79c <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800b7d0:	d301      	bcc.n	800b7d6 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800b7d2:	23f9      	movs	r3, #249	@ 0xf9
 800b7d4:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	2183      	movs	r1, #131	@ 0x83
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f002 fac2 	bl	800dd64 <VL53L0X_WrByte>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	7dfb      	ldrb	r3, [r7, #23]
 800b7e6:	4313      	orrs	r3, r2
 800b7e8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800b7ea:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3718      	adds	r7, #24
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}

0800b7f6 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800b7f6:	b580      	push	{r7, lr}
 800b7f8:	b098      	sub	sp, #96	@ 0x60
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	6078      	str	r0, [r7, #4]
 800b7fe:	460b      	mov	r3, r1
 800b800:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b802:	2300      	movs	r3, #0
 800b804:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800b808:	2300      	movs	r3, #0
 800b80a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	uint8_t ReferenceSpadType = 0;
 800b80e:	2300      	movs	r3, #0
 800b810:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
	uint32_t PartUIDUpper = 0;
 800b814:	2300      	movs	r3, #0
 800b816:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PartUIDLower = 0;
 800b818:	2300      	movs	r3, #0
 800b81a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800b81c:	2300      	movs	r3, #0
 800b81e:	64bb      	str	r3, [r7, #72]	@ 0x48
	int16_t OffsetMicroMeters = 0;
 800b820:	2300      	movs	r3, #0
 800b822:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800b826:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800b82a:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800b82c:	2300      	movs	r3, #0
 800b82e:	657b      	str	r3, [r7, #84]	@ 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800b830:	2300      	movs	r3, #0
 800b832:	653b      	str	r3, [r7, #80]	@ 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800b834:	2300      	movs	r3, #0
 800b836:	643b      	str	r3, [r7, #64]	@ 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b83e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800b842:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b846:	2b07      	cmp	r3, #7
 800b848:	f000 8408 	beq.w	800c05c <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b84c:	2201      	movs	r2, #1
 800b84e:	2180      	movs	r1, #128	@ 0x80
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f002 fa87 	bl	800dd64 <VL53L0X_WrByte>
 800b856:	4603      	mov	r3, r0
 800b858:	461a      	mov	r2, r3
 800b85a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b85e:	4313      	orrs	r3, r2
 800b860:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b864:	2201      	movs	r2, #1
 800b866:	21ff      	movs	r1, #255	@ 0xff
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f002 fa7b 	bl	800dd64 <VL53L0X_WrByte>
 800b86e:	4603      	mov	r3, r0
 800b870:	461a      	mov	r2, r3
 800b872:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b876:	4313      	orrs	r3, r2
 800b878:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b87c:	2200      	movs	r2, #0
 800b87e:	2100      	movs	r1, #0
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f002 fa6f 	bl	800dd64 <VL53L0X_WrByte>
 800b886:	4603      	mov	r3, r0
 800b888:	461a      	mov	r2, r3
 800b88a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b88e:	4313      	orrs	r3, r2
 800b890:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800b894:	2206      	movs	r2, #6
 800b896:	21ff      	movs	r1, #255	@ 0xff
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f002 fa63 	bl	800dd64 <VL53L0X_WrByte>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800b8ac:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	2183      	movs	r1, #131	@ 0x83
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f002 fad7 	bl	800de68 <VL53L0X_RdByte>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	461a      	mov	r2, r3
 800b8be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800b8c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b8cc:	f043 0304 	orr.w	r3, r3, #4
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	2183      	movs	r1, #131	@ 0x83
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f002 fa44 	bl	800dd64 <VL53L0X_WrByte>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	461a      	mov	r2, r3
 800b8e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800b8ea:	2207      	movs	r2, #7
 800b8ec:	21ff      	movs	r1, #255	@ 0xff
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f002 fa38 	bl	800dd64 <VL53L0X_WrByte>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b8fc:	4313      	orrs	r3, r2
 800b8fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800b902:	2201      	movs	r2, #1
 800b904:	2181      	movs	r1, #129	@ 0x81
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f002 fa2c 	bl	800dd64 <VL53L0X_WrByte>
 800b90c:	4603      	mov	r3, r0
 800b90e:	461a      	mov	r2, r3
 800b910:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b914:	4313      	orrs	r3, r2
 800b916:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f002 fb40 	bl	800dfa0 <VL53L0X_PollingDelay>
 800b920:	4603      	mov	r3, r0
 800b922:	461a      	mov	r2, r3
 800b924:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b928:	4313      	orrs	r3, r2
 800b92a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b92e:	2201      	movs	r2, #1
 800b930:	2180      	movs	r1, #128	@ 0x80
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f002 fa16 	bl	800dd64 <VL53L0X_WrByte>
 800b938:	4603      	mov	r3, r0
 800b93a:	461a      	mov	r2, r3
 800b93c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b940:	4313      	orrs	r3, r2
 800b942:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		if (((option & 1) == 1) &&
 800b946:	78fb      	ldrb	r3, [r7, #3]
 800b948:	f003 0301 	and.w	r3, r3, #1
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	f000 8098 	beq.w	800ba82 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800b952:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b956:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	f040 8091 	bne.w	800ba82 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800b960:	226b      	movs	r2, #107	@ 0x6b
 800b962:	2194      	movs	r1, #148	@ 0x94
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f002 f9fd 	bl	800dd64 <VL53L0X_WrByte>
 800b96a:	4603      	mov	r3, r0
 800b96c:	461a      	mov	r2, r3
 800b96e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b972:	4313      	orrs	r3, r2
 800b974:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f7ff fef9 	bl	800b770 <VL53L0X_device_read_strobe>
 800b97e:	4603      	mov	r3, r0
 800b980:	461a      	mov	r2, r3
 800b982:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b986:	4313      	orrs	r3, r2
 800b988:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b98c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800b990:	461a      	mov	r2, r3
 800b992:	2190      	movs	r1, #144	@ 0x90
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f002 fac7 	bl	800df28 <VL53L0X_RdDWord>
 800b99a:	4603      	mov	r3, r0
 800b99c:	461a      	mov	r2, r3
 800b99e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800b9a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9aa:	0a1b      	lsrs	r3, r3, #8
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9b2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800b9b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9b8:	0bdb      	lsrs	r3, r3, #15
 800b9ba:	b2db      	uxtb	r3, r3
 800b9bc:	f003 0301 	and.w	r3, r3, #1
 800b9c0:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800b9c4:	2224      	movs	r2, #36	@ 0x24
 800b9c6:	2194      	movs	r1, #148	@ 0x94
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f002 f9cb 	bl	800dd64 <VL53L0X_WrByte>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	461a      	mov	r2, r3
 800b9d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b9d6:	4313      	orrs	r3, r2
 800b9d8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f7ff fec7 	bl	800b770 <VL53L0X_device_read_strobe>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b9ea:	4313      	orrs	r3, r2
 800b9ec:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b9f0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	2190      	movs	r1, #144	@ 0x90
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f002 fa95 	bl	800df28 <VL53L0X_RdDWord>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	461a      	mov	r2, r3
 800ba02:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ba06:	4313      	orrs	r3, r2
 800ba08:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800ba0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba0e:	0e1b      	lsrs	r3, r3, #24
 800ba10:	b2db      	uxtb	r3, r3
 800ba12:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800ba14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba16:	0c1b      	lsrs	r3, r3, #16
 800ba18:	b2db      	uxtb	r3, r3
 800ba1a:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800ba1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba1e:	0a1b      	lsrs	r3, r3, #8
 800ba20:	b2db      	uxtb	r3, r3
 800ba22:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800ba24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba26:	b2db      	uxtb	r3, r3
 800ba28:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800ba2a:	2225      	movs	r2, #37	@ 0x25
 800ba2c:	2194      	movs	r1, #148	@ 0x94
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f002 f998 	bl	800dd64 <VL53L0X_WrByte>
 800ba34:	4603      	mov	r3, r0
 800ba36:	461a      	mov	r2, r3
 800ba38:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f7ff fe94 	bl	800b770 <VL53L0X_device_read_strobe>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ba50:	4313      	orrs	r3, r2
 800ba52:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ba56:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	2190      	movs	r1, #144	@ 0x90
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f002 fa62 	bl	800df28 <VL53L0X_RdDWord>
 800ba64:	4603      	mov	r3, r0
 800ba66:	461a      	mov	r2, r3
 800ba68:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ba6c:	4313      	orrs	r3, r2
 800ba6e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800ba72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba74:	0e1b      	lsrs	r3, r3, #24
 800ba76:	b2db      	uxtb	r3, r3
 800ba78:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800ba7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba7c:	0c1b      	lsrs	r3, r3, #16
 800ba7e:	b2db      	uxtb	r3, r3
 800ba80:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800ba82:	78fb      	ldrb	r3, [r7, #3]
 800ba84:	f003 0302 	and.w	r3, r3, #2
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	f000 8189 	beq.w	800bda0 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800ba8e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800ba92:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	f040 8182 	bne.w	800bda0 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800ba9c:	2202      	movs	r2, #2
 800ba9e:	2194      	movs	r1, #148	@ 0x94
 800baa0:	6878      	ldr	r0, [r7, #4]
 800baa2:	f002 f95f 	bl	800dd64 <VL53L0X_WrByte>
 800baa6:	4603      	mov	r3, r0
 800baa8:	461a      	mov	r2, r3
 800baaa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800baae:	4313      	orrs	r3, r2
 800bab0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f7ff fe5b 	bl	800b770 <VL53L0X_device_read_strobe>
 800baba:	4603      	mov	r3, r0
 800babc:	461a      	mov	r2, r3
 800babe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bac2:	4313      	orrs	r3, r2
 800bac4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800bac8:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 800bacc:	461a      	mov	r2, r3
 800bace:	2190      	movs	r1, #144	@ 0x90
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f002 f9c9 	bl	800de68 <VL53L0X_RdByte>
 800bad6:	4603      	mov	r3, r0
 800bad8:	461a      	mov	r2, r3
 800bada:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bade:	4313      	orrs	r3, r2
 800bae0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800bae4:	227b      	movs	r2, #123	@ 0x7b
 800bae6:	2194      	movs	r1, #148	@ 0x94
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f002 f93b 	bl	800dd64 <VL53L0X_WrByte>
 800baee:	4603      	mov	r3, r0
 800baf0:	461a      	mov	r2, r3
 800baf2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800baf6:	4313      	orrs	r3, r2
 800baf8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f7ff fe37 	bl	800b770 <VL53L0X_device_read_strobe>
 800bb02:	4603      	mov	r3, r0
 800bb04:	461a      	mov	r2, r3
 800bb06:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800bb10:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 800bb14:	461a      	mov	r2, r3
 800bb16:	2190      	movs	r1, #144	@ 0x90
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f002 f9a5 	bl	800de68 <VL53L0X_RdByte>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	461a      	mov	r2, r3
 800bb22:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bb26:	4313      	orrs	r3, r2
 800bb28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800bb2c:	2277      	movs	r2, #119	@ 0x77
 800bb2e:	2194      	movs	r1, #148	@ 0x94
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f002 f917 	bl	800dd64 <VL53L0X_WrByte>
 800bb36:	4603      	mov	r3, r0
 800bb38:	461a      	mov	r2, r3
 800bb3a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f7ff fe13 	bl	800b770 <VL53L0X_device_read_strobe>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bb52:	4313      	orrs	r3, r2
 800bb54:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bb58:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	2190      	movs	r1, #144	@ 0x90
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f002 f9e1 	bl	800df28 <VL53L0X_RdDWord>
 800bb66:	4603      	mov	r3, r0
 800bb68:	461a      	mov	r2, r3
 800bb6a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bb6e:	4313      	orrs	r3, r2
 800bb70:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800bb74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb76:	0e5b      	lsrs	r3, r3, #25
 800bb78:	b2db      	uxtb	r3, r3
 800bb7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800bb82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb84:	0c9b      	lsrs	r3, r3, #18
 800bb86:	b2db      	uxtb	r3, r3
 800bb88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb8c:	b2db      	uxtb	r3, r3
 800bb8e:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800bb90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb92:	0adb      	lsrs	r3, r3, #11
 800bb94:	b2db      	uxtb	r3, r3
 800bb96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb9a:	b2db      	uxtb	r3, r3
 800bb9c:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800bb9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bba0:	091b      	lsrs	r3, r3, #4
 800bba2:	b2db      	uxtb	r3, r3
 800bba4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bba8:	b2db      	uxtb	r3, r3
 800bbaa:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800bbac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	00db      	lsls	r3, r3, #3
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	f003 0378 	and.w	r3, r3, #120	@ 0x78
 800bbb8:	b2db      	uxtb	r3, r3
 800bbba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800bbbe:	2278      	movs	r2, #120	@ 0x78
 800bbc0:	2194      	movs	r1, #148	@ 0x94
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f002 f8ce 	bl	800dd64 <VL53L0X_WrByte>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	461a      	mov	r2, r3
 800bbcc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f7ff fdca 	bl	800b770 <VL53L0X_device_read_strobe>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	461a      	mov	r2, r3
 800bbe0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bbe4:	4313      	orrs	r3, r2
 800bbe6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bbea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800bbee:	461a      	mov	r2, r3
 800bbf0:	2190      	movs	r1, #144	@ 0x90
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f002 f998 	bl	800df28 <VL53L0X_RdDWord>
 800bbf8:	4603      	mov	r3, r0
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bc00:	4313      	orrs	r3, r2
 800bc02:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800bc06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc08:	0f5b      	lsrs	r3, r3, #29
 800bc0a:	b2db      	uxtb	r3, r3
 800bc0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc10:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800bc12:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bc16:	4413      	add	r3, r2
 800bc18:	b2db      	uxtb	r3, r3
 800bc1a:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800bc1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc1e:	0d9b      	lsrs	r3, r3, #22
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800bc2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc2c:	0bdb      	lsrs	r3, r3, #15
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc34:	b2db      	uxtb	r3, r3
 800bc36:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800bc38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc3a:	0a1b      	lsrs	r3, r3, #8
 800bc3c:	b2db      	uxtb	r3, r3
 800bc3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc42:	b2db      	uxtb	r3, r3
 800bc44:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800bc46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc48:	085b      	lsrs	r3, r3, #1
 800bc4a:	b2db      	uxtb	r3, r3
 800bc4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc50:	b2db      	uxtb	r3, r3
 800bc52:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800bc54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc56:	b2db      	uxtb	r3, r3
 800bc58:	019b      	lsls	r3, r3, #6
 800bc5a:	b2db      	uxtb	r3, r3
 800bc5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc60:	b2db      	uxtb	r3, r3
 800bc62:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800bc66:	2279      	movs	r2, #121	@ 0x79
 800bc68:	2194      	movs	r1, #148	@ 0x94
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f002 f87a 	bl	800dd64 <VL53L0X_WrByte>
 800bc70:	4603      	mov	r3, r0
 800bc72:	461a      	mov	r2, r3
 800bc74:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bc78:	4313      	orrs	r3, r2
 800bc7a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f7ff fd76 	bl	800b770 <VL53L0X_device_read_strobe>
 800bc84:	4603      	mov	r3, r0
 800bc86:	461a      	mov	r2, r3
 800bc88:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bc8c:	4313      	orrs	r3, r2
 800bc8e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bc92:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800bc96:	461a      	mov	r2, r3
 800bc98:	2190      	movs	r1, #144	@ 0x90
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f002 f944 	bl	800df28 <VL53L0X_RdDWord>
 800bca0:	4603      	mov	r3, r0
 800bca2:	461a      	mov	r2, r3
 800bca4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800bcae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcb0:	0e9b      	lsrs	r3, r3, #26
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bcb8:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800bcba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bcbe:	4413      	add	r3, r2
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800bcc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcc6:	0cdb      	lsrs	r3, r3, #19
 800bcc8:	b2db      	uxtb	r3, r3
 800bcca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bcce:	b2db      	uxtb	r3, r3
 800bcd0:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800bcd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcd4:	0b1b      	lsrs	r3, r3, #12
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bcdc:	b2db      	uxtb	r3, r3
 800bcde:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800bce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bce2:	095b      	lsrs	r3, r3, #5
 800bce4:	b2db      	uxtb	r3, r3
 800bce6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bcea:	b2db      	uxtb	r3, r3
 800bcec:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800bcee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcf0:	b2db      	uxtb	r3, r3
 800bcf2:	009b      	lsls	r3, r3, #2
 800bcf4:	b2db      	uxtb	r3, r3
 800bcf6:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 800bcfa:	b2db      	uxtb	r3, r3
 800bcfc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800bd00:	227a      	movs	r2, #122	@ 0x7a
 800bd02:	2194      	movs	r1, #148	@ 0x94
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f002 f82d 	bl	800dd64 <VL53L0X_WrByte>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	461a      	mov	r2, r3
 800bd0e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bd12:	4313      	orrs	r3, r2
 800bd14:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f7ff fd29 	bl	800b770 <VL53L0X_device_read_strobe>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	461a      	mov	r2, r3
 800bd22:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bd26:	4313      	orrs	r3, r2
 800bd28:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bd2c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800bd30:	461a      	mov	r2, r3
 800bd32:	2190      	movs	r1, #144	@ 0x90
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f002 f8f7 	bl	800df28 <VL53L0X_RdDWord>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bd42:	4313      	orrs	r3, r2
 800bd44:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800bd48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd4a:	0f9b      	lsrs	r3, r3, #30
 800bd4c:	b2db      	uxtb	r3, r3
 800bd4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd52:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800bd54:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bd58:	4413      	add	r3, r2
 800bd5a:	b2db      	uxtb	r3, r3
 800bd5c:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800bd5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd60:	0ddb      	lsrs	r3, r3, #23
 800bd62:	b2db      	uxtb	r3, r3
 800bd64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd68:	b2db      	uxtb	r3, r3
 800bd6a:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800bd6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd6e:	0c1b      	lsrs	r3, r3, #16
 800bd70:	b2db      	uxtb	r3, r3
 800bd72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd76:	b2db      	uxtb	r3, r3
 800bd78:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800bd7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd7c:	0a5b      	lsrs	r3, r3, #9
 800bd7e:	b2db      	uxtb	r3, r3
 800bd80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd84:	b2db      	uxtb	r3, r3
 800bd86:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800bd8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd8c:	089b      	lsrs	r3, r3, #2
 800bd8e:	b2db      	uxtb	r3, r3
 800bd90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd94:	b2db      	uxtb	r3, r3
 800bd96:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			ProductId[18] = '\0';
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

		}

		if (((option & 4) == 4) &&
 800bda0:	78fb      	ldrb	r3, [r7, #3]
 800bda2:	f003 0304 	and.w	r3, r3, #4
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	f000 80f1 	beq.w	800bf8e <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800bdac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800bdb0:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	f040 80ea 	bne.w	800bf8e <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800bdba:	227b      	movs	r2, #123	@ 0x7b
 800bdbc:	2194      	movs	r1, #148	@ 0x94
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f001 ffd0 	bl	800dd64 <VL53L0X_WrByte>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f7ff fccc 	bl	800b770 <VL53L0X_device_read_strobe>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	461a      	mov	r2, r3
 800bddc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bde0:	4313      	orrs	r3, r2
 800bde2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800bde6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800bdea:	461a      	mov	r2, r3
 800bdec:	2190      	movs	r1, #144	@ 0x90
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f002 f89a 	bl	800df28 <VL53L0X_RdDWord>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bdfc:	4313      	orrs	r3, r2
 800bdfe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800be02:	227c      	movs	r2, #124	@ 0x7c
 800be04:	2194      	movs	r1, #148	@ 0x94
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f001 ffac 	bl	800dd64 <VL53L0X_WrByte>
 800be0c:	4603      	mov	r3, r0
 800be0e:	461a      	mov	r2, r3
 800be10:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800be14:	4313      	orrs	r3, r2
 800be16:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f7ff fca8 	bl	800b770 <VL53L0X_device_read_strobe>
 800be20:	4603      	mov	r3, r0
 800be22:	461a      	mov	r2, r3
 800be24:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800be28:	4313      	orrs	r3, r2
 800be2a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800be2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800be32:	461a      	mov	r2, r3
 800be34:	2190      	movs	r1, #144	@ 0x90
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f002 f876 	bl	800df28 <VL53L0X_RdDWord>
 800be3c:	4603      	mov	r3, r0
 800be3e:	461a      	mov	r2, r3
 800be40:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800be44:	4313      	orrs	r3, r2
 800be46:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800be4a:	2273      	movs	r2, #115	@ 0x73
 800be4c:	2194      	movs	r1, #148	@ 0x94
 800be4e:	6878      	ldr	r0, [r7, #4]
 800be50:	f001 ff88 	bl	800dd64 <VL53L0X_WrByte>
 800be54:	4603      	mov	r3, r0
 800be56:	461a      	mov	r2, r3
 800be58:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800be5c:	4313      	orrs	r3, r2
 800be5e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f7ff fc84 	bl	800b770 <VL53L0X_device_read_strobe>
 800be68:	4603      	mov	r3, r0
 800be6a:	461a      	mov	r2, r3
 800be6c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800be70:	4313      	orrs	r3, r2
 800be72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800be76:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800be7a:	461a      	mov	r2, r3
 800be7c:	2190      	movs	r1, #144	@ 0x90
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f002 f852 	bl	800df28 <VL53L0X_RdDWord>
 800be84:	4603      	mov	r3, r0
 800be86:	461a      	mov	r2, r3
 800be88:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800be8c:	4313      	orrs	r3, r2
 800be8e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800be92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be94:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800be96:	b29b      	uxth	r3, r3
 800be98:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800be9a:	2274      	movs	r2, #116	@ 0x74
 800be9c:	2194      	movs	r1, #148	@ 0x94
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f001 ff60 	bl	800dd64 <VL53L0X_WrByte>
 800bea4:	4603      	mov	r3, r0
 800bea6:	461a      	mov	r2, r3
 800bea8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800beac:	4313      	orrs	r3, r2
 800beae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f7ff fc5c 	bl	800b770 <VL53L0X_device_read_strobe>
 800beb8:	4603      	mov	r3, r0
 800beba:	461a      	mov	r2, r3
 800bebc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bec0:	4313      	orrs	r3, r2
 800bec2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bec6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800beca:	461a      	mov	r2, r3
 800becc:	2190      	movs	r1, #144	@ 0x90
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f002 f82a 	bl	800df28 <VL53L0X_RdDWord>
 800bed4:	4603      	mov	r3, r0
 800bed6:	461a      	mov	r2, r3
 800bed8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bedc:	4313      	orrs	r3, r2
 800bede:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800bee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bee4:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800bee6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bee8:	4313      	orrs	r3, r2
 800beea:	653b      	str	r3, [r7, #80]	@ 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800beec:	2275      	movs	r2, #117	@ 0x75
 800beee:	2194      	movs	r1, #148	@ 0x94
 800bef0:	6878      	ldr	r0, [r7, #4]
 800bef2:	f001 ff37 	bl	800dd64 <VL53L0X_WrByte>
 800bef6:	4603      	mov	r3, r0
 800bef8:	461a      	mov	r2, r3
 800befa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800befe:	4313      	orrs	r3, r2
 800bf00:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f7ff fc33 	bl	800b770 <VL53L0X_device_read_strobe>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	461a      	mov	r2, r3
 800bf0e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bf12:	4313      	orrs	r3, r2
 800bf14:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bf18:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800bf1c:	461a      	mov	r2, r3
 800bf1e:	2190      	movs	r1, #144	@ 0x90
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f002 f801 	bl	800df28 <VL53L0X_RdDWord>
 800bf26:	4603      	mov	r3, r0
 800bf28:	461a      	mov	r2, r3
 800bf2a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800bf34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf36:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800bf38:	b29b      	uxth	r3, r3
 800bf3a:	657b      	str	r3, [r7, #84]	@ 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800bf3c:	2276      	movs	r2, #118	@ 0x76
 800bf3e:	2194      	movs	r1, #148	@ 0x94
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f001 ff0f 	bl	800dd64 <VL53L0X_WrByte>
 800bf46:	4603      	mov	r3, r0
 800bf48:	461a      	mov	r2, r3
 800bf4a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f7ff fc0b 	bl	800b770 <VL53L0X_device_read_strobe>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	461a      	mov	r2, r3
 800bf5e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bf62:	4313      	orrs	r3, r2
 800bf64:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bf68:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800bf6c:	461a      	mov	r2, r3
 800bf6e:	2190      	movs	r1, #144	@ 0x90
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f001 ffd9 	bl	800df28 <VL53L0X_RdDWord>
 800bf76:	4603      	mov	r3, r0
 800bf78:	461a      	mov	r2, r3
 800bf7a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bf7e:	4313      	orrs	r3, r2
 800bf80:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800bf84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf86:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800bf88:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	657b      	str	r3, [r7, #84]	@ 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800bf8e:	2200      	movs	r2, #0
 800bf90:	2181      	movs	r1, #129	@ 0x81
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f001 fee6 	bl	800dd64 <VL53L0X_WrByte>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	461a      	mov	r2, r3
 800bf9c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bfa0:	4313      	orrs	r3, r2
 800bfa2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800bfa6:	2206      	movs	r2, #6
 800bfa8:	21ff      	movs	r1, #255	@ 0xff
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f001 feda 	bl	800dd64 <VL53L0X_WrByte>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	461a      	mov	r2, r3
 800bfb4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bfb8:	4313      	orrs	r3, r2
 800bfba:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800bfbe:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	2183      	movs	r1, #131	@ 0x83
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f001 ff4e 	bl	800de68 <VL53L0X_RdByte>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	461a      	mov	r2, r3
 800bfd0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bfd4:	4313      	orrs	r3, r2
 800bfd6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800bfda:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bfde:	f023 0304 	bic.w	r3, r3, #4
 800bfe2:	b2db      	uxtb	r3, r3
 800bfe4:	461a      	mov	r2, r3
 800bfe6:	2183      	movs	r1, #131	@ 0x83
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f001 febb 	bl	800dd64 <VL53L0X_WrByte>
 800bfee:	4603      	mov	r3, r0
 800bff0:	461a      	mov	r2, r3
 800bff2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bff6:	4313      	orrs	r3, r2
 800bff8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bffc:	2201      	movs	r2, #1
 800bffe:	21ff      	movs	r1, #255	@ 0xff
 800c000:	6878      	ldr	r0, [r7, #4]
 800c002:	f001 feaf 	bl	800dd64 <VL53L0X_WrByte>
 800c006:	4603      	mov	r3, r0
 800c008:	461a      	mov	r2, r3
 800c00a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c00e:	4313      	orrs	r3, r2
 800c010:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800c014:	2201      	movs	r2, #1
 800c016:	2100      	movs	r1, #0
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f001 fea3 	bl	800dd64 <VL53L0X_WrByte>
 800c01e:	4603      	mov	r3, r0
 800c020:	461a      	mov	r2, r3
 800c022:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c026:	4313      	orrs	r3, r2
 800c028:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c02c:	2200      	movs	r2, #0
 800c02e:	21ff      	movs	r1, #255	@ 0xff
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f001 fe97 	bl	800dd64 <VL53L0X_WrByte>
 800c036:	4603      	mov	r3, r0
 800c038:	461a      	mov	r2, r3
 800c03a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c03e:	4313      	orrs	r3, r2
 800c040:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800c044:	2200      	movs	r2, #0
 800c046:	2180      	movs	r1, #128	@ 0x80
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f001 fe8b 	bl	800dd64 <VL53L0X_WrByte>
 800c04e:	4603      	mov	r3, r0
 800c050:	461a      	mov	r2, r3
 800c052:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c056:	4313      	orrs	r3, r2
 800c058:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800c05c:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
 800c060:	2b00      	cmp	r3, #0
 800c062:	f040 808f 	bne.w	800c184 <VL53L0X_get_info_from_device+0x98e>
 800c066:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c06a:	2b07      	cmp	r3, #7
 800c06c:	f000 808a 	beq.w	800c184 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800c070:	78fb      	ldrb	r3, [r7, #3]
 800c072:	f003 0301 	and.w	r3, r3, #1
 800c076:	2b00      	cmp	r3, #0
 800c078:	d024      	beq.n	800c0c4 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800c07a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c07e:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800c082:	2b00      	cmp	r3, #0
 800c084:	d11e      	bne.n	800c0c4 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f897 205e 	ldrb.w	r2, [r7, #94]	@ 0x5e
 800c08c:	f883 2113 	strb.w	r2, [r3, #275]	@ 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 800c096:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800c09a:	2300      	movs	r3, #0
 800c09c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c09e:	e00e      	b.n	800c0be <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800c0a0:	f107 0208 	add.w	r2, r7, #8
 800c0a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0a6:	4413      	add	r3, r2
 800c0a8:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800c0aa:	687a      	ldr	r2, [r7, #4]
 800c0ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0ae:	4413      	add	r3, r2
 800c0b0:	f503 7395 	add.w	r3, r3, #298	@ 0x12a
 800c0b4:	460a      	mov	r2, r1
 800c0b6:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800c0b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0ba:	3301      	adds	r3, #1
 800c0bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0c0:	2b05      	cmp	r3, #5
 800c0c2:	dded      	ble.n	800c0a0 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800c0c4:	78fb      	ldrb	r3, [r7, #3]
 800c0c6:	f003 0302 	and.w	r3, r3, #2
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d018      	beq.n	800c100 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800c0ce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c0d2:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d112      	bne.n	800c100 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c0da:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f883 20f1 	strb.w	r2, [r3, #241]	@ 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c0e4:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f883 20f2 	strb.w	r2, [r3, #242]	@ 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	33f3      	adds	r3, #243	@ 0xf3
 800c0f2:	63bb      	str	r3, [r7, #56]	@ 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800c0f4:	f107 0310 	add.w	r3, r7, #16
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c0fc:	f002 fe93 	bl	800ee26 <strcpy>

		}

		if (((option & 4) == 4) &&
 800c100:	78fb      	ldrb	r3, [r7, #3]
 800c102:	f003 0304 	and.w	r3, r3, #4
 800c106:	2b00      	cmp	r3, #0
 800c108:	d030      	beq.n	800c16c <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800c10a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c10e:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800c112:	2b00      	cmp	r3, #0
 800c114:	d12a      	bne.n	800c16c <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c116:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c11e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800c126:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c128:	025b      	lsls	r3, r3, #9
 800c12a:	643b      	str	r3, [r7, #64]	@ 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c130:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800c134:	2300      	movs	r3, #0
 800c136:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800c13a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d011      	beq.n	800c164 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800c140:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c142:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c144:	1ad3      	subs	r3, r2, r3
 800c146:	64bb      	str	r3, [r7, #72]	@ 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800c148:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c14a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c14e:	fb02 f303 	mul.w	r3, r2, r3
 800c152:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800c154:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
					OffsetMicroMeters *= -1;
 800c158:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800c15c:	425b      	negs	r3, r3
 800c15e:	b29b      	uxth	r3, r3
 800c160:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
			}

			PALDevDataSet(Dev,
 800c164:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	@ 0x5a
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800c16c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800c170:	78fb      	ldrb	r3, [r7, #3]
 800c172:	4313      	orrs	r3, r2
 800c174:	b2db      	uxtb	r3, r3
 800c176:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800c17a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c184:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
}
 800c188:	4618      	mov	r0, r3
 800c18a:	3760      	adds	r7, #96	@ 0x60
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800c190:	b480      	push	{r7}
 800c192:	b087      	sub	sp, #28
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	460b      	mov	r3, r1
 800c19a:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800c19c:	f240 6277 	movw	r2, #1655	@ 0x677
 800c1a0:	f04f 0300 	mov.w	r3, #0
 800c1a4:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800c1a8:	f44f 6310 	mov.w	r3, #2304	@ 0x900
 800c1ac:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800c1ae:	78fb      	ldrb	r3, [r7, #3]
 800c1b0:	68fa      	ldr	r2, [r7, #12]
 800c1b2:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800c1b6:	693a      	ldr	r2, [r7, #16]
 800c1b8:	fb02 f303 	mul.w	r3, r2, r3
 800c1bc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800c1be:	68bb      	ldr	r3, [r7, #8]
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	371c      	adds	r7, #28
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ca:	4770      	bx	lr

0800c1cc <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b087      	sub	sp, #28
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800c1d8:	2300      	movs	r3, #0
 800c1da:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d015      	beq.n	800c212 <VL53L0X_encode_timeout+0x46>
		ls_byte = timeout_macro_clks - 1;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	3b01      	subs	r3, #1
 800c1ea:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c1ec:	e005      	b.n	800c1fa <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	085b      	lsrs	r3, r3, #1
 800c1f2:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800c1f4:	89fb      	ldrh	r3, [r7, #14]
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	2bff      	cmp	r3, #255	@ 0xff
 800c1fe:	d8f6      	bhi.n	800c1ee <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800c200:	89fb      	ldrh	r3, [r7, #14]
 800c202:	021b      	lsls	r3, r3, #8
 800c204:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800c206:	693b      	ldr	r3, [r7, #16]
 800c208:	b29b      	uxth	r3, r3
 800c20a:	b2db      	uxtb	r3, r3
 800c20c:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800c20e:	4413      	add	r3, r2
 800c210:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800c212:	8afb      	ldrh	r3, [r7, #22]

}
 800c214:	4618      	mov	r0, r3
 800c216:	371c      	adds	r7, #28
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr

0800c220 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800c220:	b480      	push	{r7}
 800c222:	b085      	sub	sp, #20
 800c224:	af00      	add	r7, sp, #0
 800c226:	4603      	mov	r3, r0
 800c228:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800c22a:	2300      	movs	r3, #0
 800c22c:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c22e:	88fb      	ldrh	r3, [r7, #6]
 800c230:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800c232:	88fa      	ldrh	r2, [r7, #6]
 800c234:	0a12      	lsrs	r2, r2, #8
 800c236:	b292      	uxth	r2, r2
 800c238:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c23a:	3301      	adds	r3, #1
 800c23c:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800c23e:	68fb      	ldr	r3, [r7, #12]
}
 800c240:	4618      	mov	r0, r3
 800c242:	3714      	adds	r7, #20
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr

0800c24c <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b088      	sub	sp, #32
 800c250:	af00      	add	r7, sp, #0
 800c252:	60f8      	str	r0, [r7, #12]
 800c254:	60b9      	str	r1, [r7, #8]
 800c256:	4613      	mov	r3, r2
 800c258:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800c25a:	2300      	movs	r3, #0
 800c25c:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800c25e:	79fb      	ldrb	r3, [r7, #7]
 800c260:	4619      	mov	r1, r3
 800c262:	68f8      	ldr	r0, [r7, #12]
 800c264:	f7ff ff94 	bl	800c190 <VL53L0X_calc_macro_period_ps>
 800c268:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800c26a:	69bb      	ldr	r3, [r7, #24]
 800c26c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800c270:	4a0a      	ldr	r2, [pc, #40]	@ (800c29c <VL53L0X_calc_timeout_mclks+0x50>)
 800c272:	fba2 2303 	umull	r2, r3, r2, r3
 800c276:	099b      	lsrs	r3, r3, #6
 800c278:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c280:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	085b      	lsrs	r3, r3, #1
 800c288:	441a      	add	r2, r3
	timeout_period_mclks =
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c290:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800c292:	69fb      	ldr	r3, [r7, #28]
}
 800c294:	4618      	mov	r0, r3
 800c296:	3720      	adds	r7, #32
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}
 800c29c:	10624dd3 	.word	0x10624dd3

0800c2a0 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b086      	sub	sp, #24
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	460b      	mov	r3, r1
 800c2aa:	807b      	strh	r3, [r7, #2]
 800c2ac:	4613      	mov	r3, r2
 800c2ae:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800c2b4:	787b      	ldrb	r3, [r7, #1]
 800c2b6:	4619      	mov	r1, r3
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f7ff ff69 	bl	800c190 <VL53L0X_calc_macro_period_ps>
 800c2be:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800c2c6:	4a0a      	ldr	r2, [pc, #40]	@ (800c2f0 <VL53L0X_calc_timeout_us+0x50>)
 800c2c8:	fba2 2303 	umull	r2, r3, r2, r3
 800c2cc:	099b      	lsrs	r3, r3, #6
 800c2ce:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800c2d0:	887b      	ldrh	r3, [r7, #2]
 800c2d2:	68fa      	ldr	r2, [r7, #12]
 800c2d4:	fb02 f303 	mul.w	r3, r2, r3
 800c2d8:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
	actual_timeout_period_us =
 800c2dc:	4a04      	ldr	r2, [pc, #16]	@ (800c2f0 <VL53L0X_calc_timeout_us+0x50>)
 800c2de:	fba2 2303 	umull	r2, r3, r2, r3
 800c2e2:	099b      	lsrs	r3, r3, #6
 800c2e4:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800c2e6:	697b      	ldr	r3, [r7, #20]
}
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	3718      	adds	r7, #24
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}
 800c2f0:	10624dd3 	.word	0x10624dd3

0800c2f4 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b08c      	sub	sp, #48	@ 0x30
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	60f8      	str	r0, [r7, #12]
 800c2fc:	460b      	mov	r3, r1
 800c2fe:	607a      	str	r2, [r7, #4]
 800c300:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c302:	2300      	movs	r3, #0
 800c304:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800c308:	2300      	movs	r3, #0
 800c30a:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800c30e:	2300      	movs	r3, #0
 800c310:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800c312:	2300      	movs	r3, #0
 800c314:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800c316:	2300      	movs	r3, #0
 800c318:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800c31a:	7afb      	ldrb	r3, [r7, #11]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d005      	beq.n	800c32c <get_sequence_step_timeout+0x38>
 800c320:	7afb      	ldrb	r3, [r7, #11]
 800c322:	2b01      	cmp	r3, #1
 800c324:	d002      	beq.n	800c32c <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800c326:	7afb      	ldrb	r3, [r7, #11]
 800c328:	2b02      	cmp	r3, #2
 800c32a:	d127      	bne.n	800c37c <get_sequence_step_timeout+0x88>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c32c:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800c330:	461a      	mov	r2, r3
 800c332:	2100      	movs	r1, #0
 800c334:	68f8      	ldr	r0, [r7, #12]
 800c336:	f7fd fa8d 	bl	8009854 <VL53L0X_GetVcselPulsePeriod>
 800c33a:	4603      	mov	r3, r0
 800c33c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800c340:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800c344:	2b00      	cmp	r3, #0
 800c346:	d109      	bne.n	800c35c <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800c348:	f107 0320 	add.w	r3, r7, #32
 800c34c:	461a      	mov	r2, r3
 800c34e:	2146      	movs	r1, #70	@ 0x46
 800c350:	68f8      	ldr	r0, [r7, #12]
 800c352:	f001 fd89 	bl	800de68 <VL53L0X_RdByte>
 800c356:	4603      	mov	r3, r0
 800c358:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800c35c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c360:	4618      	mov	r0, r3
 800c362:	f7ff ff5d 	bl	800c220 <VL53L0X_decode_timeout>
 800c366:	4603      	mov	r3, r0
 800c368:	847b      	strh	r3, [r7, #34]	@ 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c36a:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800c36e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c370:	4619      	mov	r1, r3
 800c372:	68f8      	ldr	r0, [r7, #12]
 800c374:	f7ff ff94 	bl	800c2a0 <VL53L0X_calc_timeout_us>
 800c378:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c37a:	e092      	b.n	800c4a2 <get_sequence_step_timeout+0x1ae>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800c37c:	7afb      	ldrb	r3, [r7, #11]
 800c37e:	2b03      	cmp	r3, #3
 800c380:	d135      	bne.n	800c3ee <get_sequence_step_timeout+0xfa>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c382:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800c386:	461a      	mov	r2, r3
 800c388:	2100      	movs	r1, #0
 800c38a:	68f8      	ldr	r0, [r7, #12]
 800c38c:	f7fd fa62 	bl	8009854 <VL53L0X_GetVcselPulsePeriod>
 800c390:	4603      	mov	r3, r0
 800c392:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800c396:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	f040 8081 	bne.w	800c4a2 <get_sequence_step_timeout+0x1ae>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c3a0:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	2100      	movs	r1, #0
 800c3a8:	68f8      	ldr	r0, [r7, #12]
 800c3aa:	f7fd fa53 	bl	8009854 <VL53L0X_GetVcselPulsePeriod>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800c3b4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d109      	bne.n	800c3d0 <get_sequence_step_timeout+0xdc>
				Status = VL53L0X_RdWord(Dev,
 800c3bc:	f107 031e 	add.w	r3, r7, #30
 800c3c0:	461a      	mov	r2, r3
 800c3c2:	2151      	movs	r1, #81	@ 0x51
 800c3c4:	68f8      	ldr	r0, [r7, #12]
 800c3c6:	f001 fd79 	bl	800debc <VL53L0X_RdWord>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c3d0:	8bfb      	ldrh	r3, [r7, #30]
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f7ff ff24 	bl	800c220 <VL53L0X_decode_timeout>
 800c3d8:	4603      	mov	r3, r0
 800c3da:	84fb      	strh	r3, [r7, #38]	@ 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c3dc:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800c3e0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	68f8      	ldr	r0, [r7, #12]
 800c3e6:	f7ff ff5b 	bl	800c2a0 <VL53L0X_calc_timeout_us>
 800c3ea:	62b8      	str	r0, [r7, #40]	@ 0x28
 800c3ec:	e059      	b.n	800c4a2 <get_sequence_step_timeout+0x1ae>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800c3ee:	7afb      	ldrb	r3, [r7, #11]
 800c3f0:	2b04      	cmp	r3, #4
 800c3f2:	d156      	bne.n	800c4a2 <get_sequence_step_timeout+0x1ae>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800c3f4:	f107 0314 	add.w	r3, r7, #20
 800c3f8:	4619      	mov	r1, r3
 800c3fa:	68f8      	ldr	r0, [r7, #12]
 800c3fc:	f7fd fb34 	bl	8009a68 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800c400:	2300      	movs	r3, #0
 800c402:	84fb      	strh	r3, [r7, #38]	@ 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800c404:	7dfb      	ldrb	r3, [r7, #23]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d01d      	beq.n	800c446 <get_sequence_step_timeout+0x152>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c40a:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800c40e:	461a      	mov	r2, r3
 800c410:	2100      	movs	r1, #0
 800c412:	68f8      	ldr	r0, [r7, #12]
 800c414:	f7fd fa1e 	bl	8009854 <VL53L0X_GetVcselPulsePeriod>
 800c418:	4603      	mov	r3, r0
 800c41a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800c41e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800c422:	2b00      	cmp	r3, #0
 800c424:	d10f      	bne.n	800c446 <get_sequence_step_timeout+0x152>
				Status = VL53L0X_RdWord(Dev,
 800c426:	f107 031e 	add.w	r3, r7, #30
 800c42a:	461a      	mov	r2, r3
 800c42c:	2151      	movs	r1, #81	@ 0x51
 800c42e:	68f8      	ldr	r0, [r7, #12]
 800c430:	f001 fd44 	bl	800debc <VL53L0X_RdWord>
 800c434:	4603      	mov	r3, r0
 800c436:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c43a:	8bfb      	ldrh	r3, [r7, #30]
 800c43c:	4618      	mov	r0, r3
 800c43e:	f7ff feef 	bl	800c220 <VL53L0X_decode_timeout>
 800c442:	4603      	mov	r3, r0
 800c444:	84fb      	strh	r3, [r7, #38]	@ 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800c446:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d109      	bne.n	800c462 <get_sequence_step_timeout+0x16e>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c44e:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 800c452:	461a      	mov	r2, r3
 800c454:	2101      	movs	r1, #1
 800c456:	68f8      	ldr	r0, [r7, #12]
 800c458:	f7fd f9fc 	bl	8009854 <VL53L0X_GetVcselPulsePeriod>
 800c45c:	4603      	mov	r3, r0
 800c45e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800c462:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800c466:	2b00      	cmp	r3, #0
 800c468:	d10f      	bne.n	800c48a <get_sequence_step_timeout+0x196>
			Status = VL53L0X_RdWord(Dev,
 800c46a:	f107 031c 	add.w	r3, r7, #28
 800c46e:	461a      	mov	r2, r3
 800c470:	2171      	movs	r1, #113	@ 0x71
 800c472:	68f8      	ldr	r0, [r7, #12]
 800c474:	f001 fd22 	bl	800debc <VL53L0X_RdWord>
 800c478:	4603      	mov	r3, r0
 800c47a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c47e:	8bbb      	ldrh	r3, [r7, #28]
 800c480:	4618      	mov	r0, r3
 800c482:	f7ff fecd 	bl	800c220 <VL53L0X_decode_timeout>
 800c486:	4603      	mov	r3, r0
 800c488:	84bb      	strh	r3, [r7, #36]	@ 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800c48a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c48c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c48e:	1ad3      	subs	r3, r2, r3
 800c490:	84bb      	strh	r3, [r7, #36]	@ 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c492:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800c496:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c498:	4619      	mov	r1, r3
 800c49a:	68f8      	ldr	r0, [r7, #12]
 800c49c:	f7ff ff00 	bl	800c2a0 <VL53L0X_calc_timeout_us>
 800c4a0:	62b8      	str	r0, [r7, #40]	@ 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c4a6:	601a      	str	r2, [r3, #0]

	return Status;
 800c4a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3730      	adds	r7, #48	@ 0x30
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}

0800c4b4 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b08a      	sub	sp, #40	@ 0x28
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	60f8      	str	r0, [r7, #12]
 800c4bc:	460b      	mov	r3, r1
 800c4be:	607a      	str	r2, [r7, #4]
 800c4c0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800c4c8:	7afb      	ldrb	r3, [r7, #11]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d005      	beq.n	800c4da <set_sequence_step_timeout+0x26>
 800c4ce:	7afb      	ldrb	r3, [r7, #11]
 800c4d0:	2b01      	cmp	r3, #1
 800c4d2:	d002      	beq.n	800c4da <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800c4d4:	7afb      	ldrb	r3, [r7, #11]
 800c4d6:	2b02      	cmp	r3, #2
 800c4d8:	d138      	bne.n	800c54c <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c4da:	f107 031b 	add.w	r3, r7, #27
 800c4de:	461a      	mov	r2, r3
 800c4e0:	2100      	movs	r1, #0
 800c4e2:	68f8      	ldr	r0, [r7, #12]
 800c4e4:	f7fd f9b6 	bl	8009854 <VL53L0X_GetVcselPulsePeriod>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800c4ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d11a      	bne.n	800c52c <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800c4f6:	7efb      	ldrb	r3, [r7, #27]
 800c4f8:	461a      	mov	r2, r3
 800c4fa:	6879      	ldr	r1, [r7, #4]
 800c4fc:	68f8      	ldr	r0, [r7, #12]
 800c4fe:	f7ff fea5 	bl	800c24c <VL53L0X_calc_timeout_mclks>
 800c502:	4603      	mov	r3, r0
 800c504:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800c506:	8bbb      	ldrh	r3, [r7, #28]
 800c508:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c50c:	d903      	bls.n	800c516 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800c50e:	23ff      	movs	r3, #255	@ 0xff
 800c510:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c514:	e004      	b.n	800c520 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800c516:	8bbb      	ldrh	r3, [r7, #28]
 800c518:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800c51a:	3b01      	subs	r3, #1
 800c51c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c520:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c524:	b29a      	uxth	r2, r3
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800c52c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c530:	2b00      	cmp	r3, #0
 800c532:	f040 80ab 	bne.w	800c68c <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800c536:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c53a:	461a      	mov	r2, r3
 800c53c:	2146      	movs	r1, #70	@ 0x46
 800c53e:	68f8      	ldr	r0, [r7, #12]
 800c540:	f001 fc10 	bl	800dd64 <VL53L0X_WrByte>
 800c544:	4603      	mov	r3, r0
 800c546:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800c54a:	e09f      	b.n	800c68c <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800c54c:	7afb      	ldrb	r3, [r7, #11]
 800c54e:	2b03      	cmp	r3, #3
 800c550:	d135      	bne.n	800c5be <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800c552:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c556:	2b00      	cmp	r3, #0
 800c558:	d11b      	bne.n	800c592 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c55a:	f107 031b 	add.w	r3, r7, #27
 800c55e:	461a      	mov	r2, r3
 800c560:	2100      	movs	r1, #0
 800c562:	68f8      	ldr	r0, [r7, #12]
 800c564:	f7fd f976 	bl	8009854 <VL53L0X_GetVcselPulsePeriod>
 800c568:	4603      	mov	r3, r0
 800c56a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800c56e:	7efb      	ldrb	r3, [r7, #27]
 800c570:	461a      	mov	r2, r3
 800c572:	6879      	ldr	r1, [r7, #4]
 800c574:	68f8      	ldr	r0, [r7, #12]
 800c576:	f7ff fe69 	bl	800c24c <VL53L0X_calc_timeout_mclks>
 800c57a:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800c57c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800c57e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c580:	4618      	mov	r0, r3
 800c582:	f7ff fe23 	bl	800c1cc <VL53L0X_encode_timeout>
 800c586:	4603      	mov	r3, r0
 800c588:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c58a:	8b3a      	ldrh	r2, [r7, #24]
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	f8a3 20d8 	strh.w	r2, [r3, #216]	@ 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800c592:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c596:	2b00      	cmp	r3, #0
 800c598:	d108      	bne.n	800c5ac <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800c59a:	8b3b      	ldrh	r3, [r7, #24]
 800c59c:	461a      	mov	r2, r3
 800c59e:	2151      	movs	r1, #81	@ 0x51
 800c5a0:	68f8      	ldr	r0, [r7, #12]
 800c5a2:	f001 fc03 	bl	800ddac <VL53L0X_WrWord>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800c5ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d16b      	bne.n	800c68c <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	687a      	ldr	r2, [r7, #4]
 800c5b8:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800c5bc:	e066      	b.n	800c68c <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800c5be:	7afb      	ldrb	r3, [r7, #11]
 800c5c0:	2b04      	cmp	r3, #4
 800c5c2:	d160      	bne.n	800c686 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800c5c4:	f107 0310 	add.w	r3, r7, #16
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	68f8      	ldr	r0, [r7, #12]
 800c5cc:	f7fd fa4c 	bl	8009a68 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800c5d4:	7cfb      	ldrb	r3, [r7, #19]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d01d      	beq.n	800c616 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c5da:	f107 031b 	add.w	r3, r7, #27
 800c5de:	461a      	mov	r2, r3
 800c5e0:	2100      	movs	r1, #0
 800c5e2:	68f8      	ldr	r0, [r7, #12]
 800c5e4:	f7fd f936 	bl	8009854 <VL53L0X_GetVcselPulsePeriod>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800c5ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d10f      	bne.n	800c616 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800c5f6:	f107 0318 	add.w	r3, r7, #24
 800c5fa:	461a      	mov	r2, r3
 800c5fc:	2151      	movs	r1, #81	@ 0x51
 800c5fe:	68f8      	ldr	r0, [r7, #12]
 800c600:	f001 fc5c 	bl	800debc <VL53L0X_RdWord>
 800c604:	4603      	mov	r3, r0
 800c606:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800c60a:	8b3b      	ldrh	r3, [r7, #24]
 800c60c:	4618      	mov	r0, r3
 800c60e:	f7ff fe07 	bl	800c220 <VL53L0X_decode_timeout>
 800c612:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800c614:	84bb      	strh	r3, [r7, #36]	@ 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800c616:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d109      	bne.n	800c632 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c61e:	f107 031b 	add.w	r3, r7, #27
 800c622:	461a      	mov	r2, r3
 800c624:	2101      	movs	r1, #1
 800c626:	68f8      	ldr	r0, [r7, #12]
 800c628:	f7fd f914 	bl	8009854 <VL53L0X_GetVcselPulsePeriod>
 800c62c:	4603      	mov	r3, r0
 800c62e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800c632:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c636:	2b00      	cmp	r3, #0
 800c638:	d128      	bne.n	800c68c <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800c63a:	7efb      	ldrb	r3, [r7, #27]
 800c63c:	461a      	mov	r2, r3
 800c63e:	6879      	ldr	r1, [r7, #4]
 800c640:	68f8      	ldr	r0, [r7, #12]
 800c642:	f7ff fe03 	bl	800c24c <VL53L0X_calc_timeout_mclks>
 800c646:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800c648:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c64a:	6a3a      	ldr	r2, [r7, #32]
 800c64c:	4413      	add	r3, r2
 800c64e:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800c650:	6a38      	ldr	r0, [r7, #32]
 800c652:	f7ff fdbb 	bl	800c1cc <VL53L0X_encode_timeout>
 800c656:	4603      	mov	r3, r0
 800c658:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800c65a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d108      	bne.n	800c674 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800c662:	8bfb      	ldrh	r3, [r7, #30]
 800c664:	461a      	mov	r2, r3
 800c666:	2171      	movs	r1, #113	@ 0x71
 800c668:	68f8      	ldr	r0, [r7, #12]
 800c66a:	f001 fb9f 	bl	800ddac <VL53L0X_WrWord>
 800c66e:	4603      	mov	r3, r0
 800c670:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800c674:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d107      	bne.n	800c68c <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
 800c684:	e002      	b.n	800c68c <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c686:	23fc      	movs	r3, #252	@ 0xfc
 800c688:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	}
	return Status;
 800c68c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800c690:	4618      	mov	r0, r3
 800c692:	3728      	adds	r7, #40	@ 0x28
 800c694:	46bd      	mov	sp, r7
 800c696:	bd80      	pop	{r7, pc}

0800c698 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b08a      	sub	sp, #40	@ 0x28
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	70fb      	strb	r3, [r7, #3]
 800c6a4:	4613      	mov	r3, r2
 800c6a6:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800c6ae:	230c      	movs	r3, #12
 800c6b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800c6b4:	2312      	movs	r3, #18
 800c6b6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800c6ba:	2308      	movs	r3, #8
 800c6bc:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800c6c0:	230e      	movs	r3, #14
 800c6c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800c6ca:	78bb      	ldrb	r3, [r7, #2]
 800c6cc:	f003 0301 	and.w	r3, r3, #1
 800c6d0:	b2db      	uxtb	r3, r3
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d003      	beq.n	800c6de <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c6d6:	23fc      	movs	r3, #252	@ 0xfc
 800c6d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c6dc:	e020      	b.n	800c720 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800c6de:	78fb      	ldrb	r3, [r7, #3]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d10d      	bne.n	800c700 <VL53L0X_set_vcsel_pulse_period+0x68>
 800c6e4:	78ba      	ldrb	r2, [r7, #2]
 800c6e6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d304      	bcc.n	800c6f8 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800c6ee:	78ba      	ldrb	r2, [r7, #2]
 800c6f0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800c6f4:	429a      	cmp	r2, r3
 800c6f6:	d903      	bls.n	800c700 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c6f8:	23fc      	movs	r3, #252	@ 0xfc
 800c6fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c6fe:	e00f      	b.n	800c720 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800c700:	78fb      	ldrb	r3, [r7, #3]
 800c702:	2b01      	cmp	r3, #1
 800c704:	d10c      	bne.n	800c720 <VL53L0X_set_vcsel_pulse_period+0x88>
 800c706:	78ba      	ldrb	r2, [r7, #2]
 800c708:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c70c:	429a      	cmp	r2, r3
 800c70e:	d304      	bcc.n	800c71a <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800c710:	78ba      	ldrb	r2, [r7, #2]
 800c712:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800c716:	429a      	cmp	r2, r3
 800c718:	d902      	bls.n	800c720 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c71a:	23fc      	movs	r3, #252	@ 0xfc
 800c71c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800c720:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c724:	2b00      	cmp	r3, #0
 800c726:	d002      	beq.n	800c72e <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800c728:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c72c:	e237      	b.n	800cb9e <VL53L0X_set_vcsel_pulse_period+0x506>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800c72e:	78fb      	ldrb	r3, [r7, #3]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d150      	bne.n	800c7d6 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800c734:	78bb      	ldrb	r3, [r7, #2]
 800c736:	2b0c      	cmp	r3, #12
 800c738:	d110      	bne.n	800c75c <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800c73a:	2218      	movs	r2, #24
 800c73c:	2157      	movs	r1, #87	@ 0x57
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f001 fb10 	bl	800dd64 <VL53L0X_WrByte>
 800c744:	4603      	mov	r3, r0
 800c746:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800c74a:	2208      	movs	r2, #8
 800c74c:	2156      	movs	r1, #86	@ 0x56
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f001 fb08 	bl	800dd64 <VL53L0X_WrByte>
 800c754:	4603      	mov	r3, r0
 800c756:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c75a:	e17f      	b.n	800ca5c <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800c75c:	78bb      	ldrb	r3, [r7, #2]
 800c75e:	2b0e      	cmp	r3, #14
 800c760:	d110      	bne.n	800c784 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800c762:	2230      	movs	r2, #48	@ 0x30
 800c764:	2157      	movs	r1, #87	@ 0x57
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f001 fafc 	bl	800dd64 <VL53L0X_WrByte>
 800c76c:	4603      	mov	r3, r0
 800c76e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800c772:	2208      	movs	r2, #8
 800c774:	2156      	movs	r1, #86	@ 0x56
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f001 faf4 	bl	800dd64 <VL53L0X_WrByte>
 800c77c:	4603      	mov	r3, r0
 800c77e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c782:	e16b      	b.n	800ca5c <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800c784:	78bb      	ldrb	r3, [r7, #2]
 800c786:	2b10      	cmp	r3, #16
 800c788:	d110      	bne.n	800c7ac <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800c78a:	2240      	movs	r2, #64	@ 0x40
 800c78c:	2157      	movs	r1, #87	@ 0x57
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f001 fae8 	bl	800dd64 <VL53L0X_WrByte>
 800c794:	4603      	mov	r3, r0
 800c796:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800c79a:	2208      	movs	r2, #8
 800c79c:	2156      	movs	r1, #86	@ 0x56
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f001 fae0 	bl	800dd64 <VL53L0X_WrByte>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c7aa:	e157      	b.n	800ca5c <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800c7ac:	78bb      	ldrb	r3, [r7, #2]
 800c7ae:	2b12      	cmp	r3, #18
 800c7b0:	f040 8154 	bne.w	800ca5c <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800c7b4:	2250      	movs	r2, #80	@ 0x50
 800c7b6:	2157      	movs	r1, #87	@ 0x57
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f001 fad3 	bl	800dd64 <VL53L0X_WrByte>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800c7c4:	2208      	movs	r2, #8
 800c7c6:	2156      	movs	r1, #86	@ 0x56
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f001 facb 	bl	800dd64 <VL53L0X_WrByte>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c7d4:	e142      	b.n	800ca5c <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800c7d6:	78fb      	ldrb	r3, [r7, #3]
 800c7d8:	2b01      	cmp	r3, #1
 800c7da:	f040 813f 	bne.w	800ca5c <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800c7de:	78bb      	ldrb	r3, [r7, #2]
 800c7e0:	2b08      	cmp	r3, #8
 800c7e2:	d14c      	bne.n	800c87e <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800c7e4:	2210      	movs	r2, #16
 800c7e6:	2148      	movs	r1, #72	@ 0x48
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f001 fabb 	bl	800dd64 <VL53L0X_WrByte>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800c7f4:	2208      	movs	r2, #8
 800c7f6:	2147      	movs	r1, #71	@ 0x47
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f001 fab3 	bl	800dd64 <VL53L0X_WrByte>
 800c7fe:	4603      	mov	r3, r0
 800c800:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800c804:	2202      	movs	r2, #2
 800c806:	2132      	movs	r1, #50	@ 0x32
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f001 faab 	bl	800dd64 <VL53L0X_WrByte>
 800c80e:	4603      	mov	r3, r0
 800c810:	461a      	mov	r2, r3
 800c812:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c816:	4313      	orrs	r3, r2
 800c818:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800c81c:	220c      	movs	r2, #12
 800c81e:	2130      	movs	r1, #48	@ 0x30
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f001 fa9f 	bl	800dd64 <VL53L0X_WrByte>
 800c826:	4603      	mov	r3, r0
 800c828:	461a      	mov	r2, r3
 800c82a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c82e:	4313      	orrs	r3, r2
 800c830:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c834:	2201      	movs	r2, #1
 800c836:	21ff      	movs	r1, #255	@ 0xff
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f001 fa93 	bl	800dd64 <VL53L0X_WrByte>
 800c83e:	4603      	mov	r3, r0
 800c840:	461a      	mov	r2, r3
 800c842:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c846:	4313      	orrs	r3, r2
 800c848:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 800c84c:	2230      	movs	r2, #48	@ 0x30
 800c84e:	2130      	movs	r1, #48	@ 0x30
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f001 fa87 	bl	800dd64 <VL53L0X_WrByte>
 800c856:	4603      	mov	r3, r0
 800c858:	461a      	mov	r2, r3
 800c85a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c85e:	4313      	orrs	r3, r2
 800c860:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c864:	2200      	movs	r2, #0
 800c866:	21ff      	movs	r1, #255	@ 0xff
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f001 fa7b 	bl	800dd64 <VL53L0X_WrByte>
 800c86e:	4603      	mov	r3, r0
 800c870:	461a      	mov	r2, r3
 800c872:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c876:	4313      	orrs	r3, r2
 800c878:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c87c:	e0ee      	b.n	800ca5c <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800c87e:	78bb      	ldrb	r3, [r7, #2]
 800c880:	2b0a      	cmp	r3, #10
 800c882:	d14c      	bne.n	800c91e <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800c884:	2228      	movs	r2, #40	@ 0x28
 800c886:	2148      	movs	r1, #72	@ 0x48
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f001 fa6b 	bl	800dd64 <VL53L0X_WrByte>
 800c88e:	4603      	mov	r3, r0
 800c890:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800c894:	2208      	movs	r2, #8
 800c896:	2147      	movs	r1, #71	@ 0x47
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f001 fa63 	bl	800dd64 <VL53L0X_WrByte>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800c8a4:	2203      	movs	r2, #3
 800c8a6:	2132      	movs	r1, #50	@ 0x32
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f001 fa5b 	bl	800dd64 <VL53L0X_WrByte>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	461a      	mov	r2, r3
 800c8b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c8b6:	4313      	orrs	r3, r2
 800c8b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800c8bc:	2209      	movs	r2, #9
 800c8be:	2130      	movs	r1, #48	@ 0x30
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f001 fa4f 	bl	800dd64 <VL53L0X_WrByte>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	461a      	mov	r2, r3
 800c8ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c8ce:	4313      	orrs	r3, r2
 800c8d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	21ff      	movs	r1, #255	@ 0xff
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f001 fa43 	bl	800dd64 <VL53L0X_WrByte>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 800c8ec:	2220      	movs	r2, #32
 800c8ee:	2130      	movs	r1, #48	@ 0x30
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f001 fa37 	bl	800dd64 <VL53L0X_WrByte>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	461a      	mov	r2, r3
 800c8fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c8fe:	4313      	orrs	r3, r2
 800c900:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c904:	2200      	movs	r2, #0
 800c906:	21ff      	movs	r1, #255	@ 0xff
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f001 fa2b 	bl	800dd64 <VL53L0X_WrByte>
 800c90e:	4603      	mov	r3, r0
 800c910:	461a      	mov	r2, r3
 800c912:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c916:	4313      	orrs	r3, r2
 800c918:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c91c:	e09e      	b.n	800ca5c <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800c91e:	78bb      	ldrb	r3, [r7, #2]
 800c920:	2b0c      	cmp	r3, #12
 800c922:	d14c      	bne.n	800c9be <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800c924:	2238      	movs	r2, #56	@ 0x38
 800c926:	2148      	movs	r1, #72	@ 0x48
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f001 fa1b 	bl	800dd64 <VL53L0X_WrByte>
 800c92e:	4603      	mov	r3, r0
 800c930:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800c934:	2208      	movs	r2, #8
 800c936:	2147      	movs	r1, #71	@ 0x47
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f001 fa13 	bl	800dd64 <VL53L0X_WrByte>
 800c93e:	4603      	mov	r3, r0
 800c940:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800c944:	2203      	movs	r2, #3
 800c946:	2132      	movs	r1, #50	@ 0x32
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f001 fa0b 	bl	800dd64 <VL53L0X_WrByte>
 800c94e:	4603      	mov	r3, r0
 800c950:	461a      	mov	r2, r3
 800c952:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c956:	4313      	orrs	r3, r2
 800c958:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800c95c:	2208      	movs	r2, #8
 800c95e:	2130      	movs	r1, #48	@ 0x30
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f001 f9ff 	bl	800dd64 <VL53L0X_WrByte>
 800c966:	4603      	mov	r3, r0
 800c968:	461a      	mov	r2, r3
 800c96a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c96e:	4313      	orrs	r3, r2
 800c970:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c974:	2201      	movs	r2, #1
 800c976:	21ff      	movs	r1, #255	@ 0xff
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f001 f9f3 	bl	800dd64 <VL53L0X_WrByte>
 800c97e:	4603      	mov	r3, r0
 800c980:	461a      	mov	r2, r3
 800c982:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c986:	4313      	orrs	r3, r2
 800c988:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 800c98c:	2220      	movs	r2, #32
 800c98e:	2130      	movs	r1, #48	@ 0x30
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f001 f9e7 	bl	800dd64 <VL53L0X_WrByte>
 800c996:	4603      	mov	r3, r0
 800c998:	461a      	mov	r2, r3
 800c99a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	21ff      	movs	r1, #255	@ 0xff
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f001 f9db 	bl	800dd64 <VL53L0X_WrByte>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	461a      	mov	r2, r3
 800c9b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c9b6:	4313      	orrs	r3, r2
 800c9b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c9bc:	e04e      	b.n	800ca5c <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800c9be:	78bb      	ldrb	r3, [r7, #2]
 800c9c0:	2b0e      	cmp	r3, #14
 800c9c2:	d14b      	bne.n	800ca5c <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800c9c4:	2248      	movs	r2, #72	@ 0x48
 800c9c6:	2148      	movs	r1, #72	@ 0x48
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f001 f9cb 	bl	800dd64 <VL53L0X_WrByte>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800c9d4:	2208      	movs	r2, #8
 800c9d6:	2147      	movs	r1, #71	@ 0x47
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f001 f9c3 	bl	800dd64 <VL53L0X_WrByte>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800c9e4:	2203      	movs	r2, #3
 800c9e6:	2132      	movs	r1, #50	@ 0x32
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f001 f9bb 	bl	800dd64 <VL53L0X_WrByte>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	461a      	mov	r2, r3
 800c9f2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c9f6:	4313      	orrs	r3, r2
 800c9f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800c9fc:	2207      	movs	r2, #7
 800c9fe:	2130      	movs	r1, #48	@ 0x30
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f001 f9af 	bl	800dd64 <VL53L0X_WrByte>
 800ca06:	4603      	mov	r3, r0
 800ca08:	461a      	mov	r2, r3
 800ca0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca0e:	4313      	orrs	r3, r2
 800ca10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800ca14:	2201      	movs	r2, #1
 800ca16:	21ff      	movs	r1, #255	@ 0xff
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	f001 f9a3 	bl	800dd64 <VL53L0X_WrByte>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	461a      	mov	r2, r3
 800ca22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca26:	4313      	orrs	r3, r2
 800ca28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Status |= VL53L0X_WrByte(Dev,
 800ca2c:	2220      	movs	r2, #32
 800ca2e:	2130      	movs	r1, #48	@ 0x30
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f001 f997 	bl	800dd64 <VL53L0X_WrByte>
 800ca36:	4603      	mov	r3, r0
 800ca38:	461a      	mov	r2, r3
 800ca3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca3e:	4313      	orrs	r3, r2
 800ca40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ca44:	2200      	movs	r2, #0
 800ca46:	21ff      	movs	r1, #255	@ 0xff
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f001 f98b 	bl	800dd64 <VL53L0X_WrByte>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	461a      	mov	r2, r3
 800ca52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca56:	4313      	orrs	r3, r2
 800ca58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800ca5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d17e      	bne.n	800cb62 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800ca64:	78bb      	ldrb	r3, [r7, #2]
 800ca66:	4618      	mov	r0, r3
 800ca68:	f7fe fe3b 	bl	800b6e2 <VL53L0X_encode_vcsel_period>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800ca72:	78fb      	ldrb	r3, [r7, #3]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d002      	beq.n	800ca7e <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800ca78:	2b01      	cmp	r3, #1
 800ca7a:	d045      	beq.n	800cb08 <VL53L0X_set_vcsel_pulse_period+0x470>
 800ca7c:	e06e      	b.n	800cb5c <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800ca7e:	f107 0314 	add.w	r3, r7, #20
 800ca82:	461a      	mov	r2, r3
 800ca84:	2103      	movs	r1, #3
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f7ff fc34 	bl	800c2f4 <get_sequence_step_timeout>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800ca92:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d109      	bne.n	800caae <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800ca9a:	f107 0310 	add.w	r3, r7, #16
 800ca9e:	461a      	mov	r2, r3
 800caa0:	2102      	movs	r1, #2
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f7ff fc26 	bl	800c2f4 <get_sequence_step_timeout>
 800caa8:	4603      	mov	r3, r0
 800caaa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800caae:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d109      	bne.n	800caca <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800cab6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800caba:	461a      	mov	r2, r3
 800cabc:	2150      	movs	r1, #80	@ 0x50
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f001 f950 	bl	800dd64 <VL53L0X_WrByte>
 800cac4:	4603      	mov	r3, r0
 800cac6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800caca:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d108      	bne.n	800cae4 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800cad2:	697b      	ldr	r3, [r7, #20]
 800cad4:	461a      	mov	r2, r3
 800cad6:	2103      	movs	r1, #3
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f7ff fceb 	bl	800c4b4 <set_sequence_step_timeout>
 800cade:	4603      	mov	r3, r0
 800cae0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800cae4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d108      	bne.n	800cafe <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	461a      	mov	r2, r3
 800caf0:	2102      	movs	r1, #2
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f7ff fcde 	bl	800c4b4 <set_sequence_step_timeout>
 800caf8:	4603      	mov	r3, r0
 800cafa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	78ba      	ldrb	r2, [r7, #2]
 800cb02:	f883 20e8 	strb.w	r2, [r3, #232]	@ 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800cb06:	e02c      	b.n	800cb62 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800cb08:	f107 0318 	add.w	r3, r7, #24
 800cb0c:	461a      	mov	r2, r3
 800cb0e:	2104      	movs	r1, #4
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f7ff fbef 	bl	800c2f4 <get_sequence_step_timeout>
 800cb16:	4603      	mov	r3, r0
 800cb18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800cb1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d109      	bne.n	800cb38 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800cb24:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800cb28:	461a      	mov	r2, r3
 800cb2a:	2170      	movs	r1, #112	@ 0x70
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f001 f919 	bl	800dd64 <VL53L0X_WrByte>
 800cb32:	4603      	mov	r3, r0
 800cb34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800cb38:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d108      	bne.n	800cb52 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800cb40:	69bb      	ldr	r3, [r7, #24]
 800cb42:	461a      	mov	r2, r3
 800cb44:	2104      	movs	r1, #4
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f7ff fcb4 	bl	800c4b4 <set_sequence_step_timeout>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	78ba      	ldrb	r2, [r7, #2]
 800cb56:	f883 20e0 	strb.w	r2, [r3, #224]	@ 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800cb5a:	e002      	b.n	800cb62 <VL53L0X_set_vcsel_pulse_period+0x4ca>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cb5c:	23fc      	movs	r3, #252	@ 0xfc
 800cb5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}
	}

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800cb62:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d109      	bne.n	800cb7e <VL53L0X_set_vcsel_pulse_period+0x4e6>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	695b      	ldr	r3, [r3, #20]
 800cb6e:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800cb70:	69f9      	ldr	r1, [r7, #28]
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f7fc fe30 	bl	80097d8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800cb78:	4603      	mov	r3, r0
 800cb7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800cb7e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d109      	bne.n	800cb9a <VL53L0X_set_vcsel_pulse_period+0x502>
		Status = VL53L0X_perform_phase_calibration(
 800cb86:	f107 010f 	add.w	r1, r7, #15
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f7fe fcc2 	bl	800b518 <VL53L0X_perform_phase_calibration>
 800cb94:	4603      	mov	r3, r0
 800cb96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800cb9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3728      	adds	r7, #40	@ 0x28
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}

0800cba6 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800cba6:	b580      	push	{r7, lr}
 800cba8:	b086      	sub	sp, #24
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	60f8      	str	r0, [r7, #12]
 800cbae:	460b      	mov	r3, r1
 800cbb0:	607a      	str	r2, [r7, #4]
 800cbb2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800cbb8:	7afb      	ldrb	r3, [r7, #11]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d002      	beq.n	800cbc4 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800cbbe:	2b01      	cmp	r3, #1
 800cbc0:	d00a      	beq.n	800cbd8 <VL53L0X_get_vcsel_pulse_period+0x32>
 800cbc2:	e013      	b.n	800cbec <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800cbc4:	f107 0316 	add.w	r3, r7, #22
 800cbc8:	461a      	mov	r2, r3
 800cbca:	2150      	movs	r1, #80	@ 0x50
 800cbcc:	68f8      	ldr	r0, [r7, #12]
 800cbce:	f001 f94b 	bl	800de68 <VL53L0X_RdByte>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800cbd6:	e00b      	b.n	800cbf0 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800cbd8:	f107 0316 	add.w	r3, r7, #22
 800cbdc:	461a      	mov	r2, r3
 800cbde:	2170      	movs	r1, #112	@ 0x70
 800cbe0:	68f8      	ldr	r0, [r7, #12]
 800cbe2:	f001 f941 	bl	800de68 <VL53L0X_RdByte>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800cbea:	e001      	b.n	800cbf0 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cbec:	23fc      	movs	r3, #252	@ 0xfc
 800cbee:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800cbf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d107      	bne.n	800cc08 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800cbf8:	7dbb      	ldrb	r3, [r7, #22]
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f7fe fd5e 	bl	800b6bc <VL53L0X_decode_vcsel_period>
 800cc00:	4603      	mov	r3, r0
 800cc02:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	701a      	strb	r2, [r3, #0]

	return Status;
 800cc08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	3718      	adds	r7, #24
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}

0800cc14 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b092      	sub	sp, #72	@ 0x48
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
 800cc1c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800cc24:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800cc28:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800cc2a:	f240 7376 	movw	r3, #1910	@ 0x776
 800cc2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800cc30:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800cc34:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800cc36:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800cc3a:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800cc3c:	f240 234e 	movw	r3, #590	@ 0x24e
 800cc40:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800cc42:	f240 23b2 	movw	r3, #690	@ 0x2b2
 800cc46:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800cc48:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800cc4c:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800cc4e:	f240 2326 	movw	r3, #550	@ 0x226
 800cc52:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800cc54:	2300      	movs	r3, #0
 800cc56:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800cc58:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800cc5c:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800cc62:	683a      	ldr	r2, [r7, #0]
 800cc64:	6a3b      	ldr	r3, [r7, #32]
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d205      	bcs.n	800cc76 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cc6a:	23fc      	movs	r3, #252	@ 0xfc
 800cc6c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		return Status;
 800cc70:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800cc74:	e0aa      	b.n	800cdcc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800cc76:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cc78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc7a:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800cc7c:	683a      	ldr	r2, [r7, #0]
 800cc7e:	1ad3      	subs	r3, r2, r3
 800cc80:	643b      	str	r3, [r7, #64]	@ 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800cc82:	f107 0314 	add.w	r3, r7, #20
 800cc86:	4619      	mov	r1, r3
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f7fc feed 	bl	8009a68 <VL53L0X_GetSequenceStepEnables>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800cc94:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d15b      	bne.n	800cd54 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800cc9c:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d105      	bne.n	800ccae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800cca2:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d102      	bne.n	800ccae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800cca8:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d052      	beq.n	800cd54 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800ccae:	f107 0310 	add.w	r3, r7, #16
 800ccb2:	461a      	mov	r2, r3
 800ccb4:	2102      	movs	r1, #2
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f7ff fb1c 	bl	800c2f4 <get_sequence_step_timeout>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800ccc2:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d002      	beq.n	800ccd0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800ccca:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800ccce:	e07d      	b.n	800cdcc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800ccd0:	7d3b      	ldrb	r3, [r7, #20]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d00f      	beq.n	800ccf6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800ccd6:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800ccd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ccda:	4413      	add	r3, r2
 800ccdc:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800ccde:	69fa      	ldr	r2, [r7, #28]
 800cce0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d204      	bcs.n	800ccf0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800cce6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cce8:	69fb      	ldr	r3, [r7, #28]
 800ccea:	1ad3      	subs	r3, r2, r3
 800ccec:	643b      	str	r3, [r7, #64]	@ 0x40
 800ccee:	e002      	b.n	800ccf6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ccf0:	23fc      	movs	r3, #252	@ 0xfc
 800ccf2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800ccf6:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d002      	beq.n	800cd04 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800ccfe:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800cd02:	e063      	b.n	800cdcc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800cd04:	7dbb      	ldrb	r3, [r7, #22]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d011      	beq.n	800cd2e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800cd0a:	693a      	ldr	r2, [r7, #16]
 800cd0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd0e:	4413      	add	r3, r2
 800cd10:	005b      	lsls	r3, r3, #1
 800cd12:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800cd14:	69fa      	ldr	r2, [r7, #28]
 800cd16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd18:	429a      	cmp	r2, r3
 800cd1a:	d204      	bcs.n	800cd26 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800cd1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cd1e:	69fb      	ldr	r3, [r7, #28]
 800cd20:	1ad3      	subs	r3, r2, r3
 800cd22:	643b      	str	r3, [r7, #64]	@ 0x40
 800cd24:	e016      	b.n	800cd54 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cd26:	23fc      	movs	r3, #252	@ 0xfc
 800cd28:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800cd2c:	e012      	b.n	800cd54 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800cd2e:	7d7b      	ldrb	r3, [r7, #21]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d00f      	beq.n	800cd54 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd38:	4413      	add	r3, r2
 800cd3a:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800cd3c:	69fa      	ldr	r2, [r7, #28]
 800cd3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd40:	429a      	cmp	r2, r3
 800cd42:	d204      	bcs.n	800cd4e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800cd44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cd46:	69fb      	ldr	r3, [r7, #28]
 800cd48:	1ad3      	subs	r3, r2, r3
 800cd4a:	643b      	str	r3, [r7, #64]	@ 0x40
 800cd4c:	e002      	b.n	800cd54 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cd4e:	23fc      	movs	r3, #252	@ 0xfc
 800cd50:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800cd54:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d002      	beq.n	800cd62 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800cd5c:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800cd60:	e034      	b.n	800cdcc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800cd62:	7dfb      	ldrb	r3, [r7, #23]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d019      	beq.n	800cd9c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800cd68:	f107 030c 	add.w	r3, r7, #12
 800cd6c:	461a      	mov	r2, r3
 800cd6e:	2103      	movs	r1, #3
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f7ff fabf 	bl	800c2f4 <get_sequence_step_timeout>
 800cd76:	4603      	mov	r3, r0
 800cd78:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd80:	4413      	add	r3, r2
 800cd82:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800cd84:	69fa      	ldr	r2, [r7, #28]
 800cd86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd88:	429a      	cmp	r2, r3
 800cd8a:	d204      	bcs.n	800cd96 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800cd8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cd8e:	69fb      	ldr	r3, [r7, #28]
 800cd90:	1ad3      	subs	r3, r2, r3
 800cd92:	643b      	str	r3, [r7, #64]	@ 0x40
 800cd94:	e002      	b.n	800cd9c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cd96:	23fc      	movs	r3, #252	@ 0xfc
 800cd98:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800cd9c:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d111      	bne.n	800cdc8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800cda4:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d00e      	beq.n	800cdc8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800cdaa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cdac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdae:	1ad3      	subs	r3, r2, r3
 800cdb0:	643b      	str	r3, [r7, #64]	@ 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800cdb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cdb4:	2104      	movs	r1, #4
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f7ff fb7c 	bl	800c4b4 <set_sequence_step_timeout>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	683a      	ldr	r2, [r7, #0]
 800cdc6:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800cdc8:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3748      	adds	r7, #72	@ 0x48
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b090      	sub	sp, #64	@ 0x40
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cdde:	2300      	movs	r3, #0
 800cde0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800cde4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800cde8:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800cdea:	f240 7376 	movw	r3, #1910	@ 0x776
 800cdee:	63bb      	str	r3, [r7, #56]	@ 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800cdf0:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800cdf4:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800cdf6:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800cdfa:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800cdfc:	f240 234e 	movw	r3, #590	@ 0x24e
 800ce00:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800ce02:	f240 23b2 	movw	r3, #690	@ 0x2b2
 800ce06:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800ce08:	f44f 7325 	mov.w	r3, #660	@ 0x294
 800ce0c:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800ce0e:	f240 2326 	movw	r3, #550	@ 0x226
 800ce12:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800ce14:	2300      	movs	r3, #0
 800ce16:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800ce18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ce1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce1c:	441a      	add	r2, r3
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800ce22:	f107 0318 	add.w	r3, r7, #24
 800ce26:	4619      	mov	r1, r3
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f7fc fe1d 	bl	8009a68 <VL53L0X_GetSequenceStepEnables>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800ce34:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d002      	beq.n	800ce42 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800ce3c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800ce40:	e075      	b.n	800cf2e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800ce42:	7e3b      	ldrb	r3, [r7, #24]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d105      	bne.n	800ce54 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800ce48:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d102      	bne.n	800ce54 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800ce4e:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d030      	beq.n	800ceb6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800ce54:	f107 0310 	add.w	r3, r7, #16
 800ce58:	461a      	mov	r2, r3
 800ce5a:	2102      	movs	r1, #2
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f7ff fa49 	bl	800c2f4 <get_sequence_step_timeout>
 800ce62:	4603      	mov	r3, r0
 800ce64:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800ce68:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d122      	bne.n	800ceb6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800ce70:	7e3b      	ldrb	r3, [r7, #24]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d007      	beq.n	800ce86 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800ce7a:	6939      	ldr	r1, [r7, #16]
 800ce7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce7e:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800ce80:	441a      	add	r2, r3
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800ce86:	7ebb      	ldrb	r3, [r7, #26]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d009      	beq.n	800cea0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800ce90:	6939      	ldr	r1, [r7, #16]
 800ce92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce94:	440b      	add	r3, r1
 800ce96:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800ce98:	441a      	add	r2, r3
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	601a      	str	r2, [r3, #0]
 800ce9e:	e00a      	b.n	800ceb6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800cea0:	7e7b      	ldrb	r3, [r7, #25]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d007      	beq.n	800ceb6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800ceaa:	6939      	ldr	r1, [r7, #16]
 800ceac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceae:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800ceb0:	441a      	add	r2, r3
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ceb6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d114      	bne.n	800cee8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800cebe:	7efb      	ldrb	r3, [r7, #27]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d011      	beq.n	800cee8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800cec4:	f107 030c 	add.w	r3, r7, #12
 800cec8:	461a      	mov	r2, r3
 800ceca:	2103      	movs	r1, #3
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f7ff fa11 	bl	800c2f4 <get_sequence_step_timeout>
 800ced2:	4603      	mov	r3, r0
 800ced4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800cedc:	68f9      	ldr	r1, [r7, #12]
 800cede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cee0:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800cee2:	441a      	add	r2, r3
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800cee8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d114      	bne.n	800cf1a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800cef0:	7f3b      	ldrb	r3, [r7, #28]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d011      	beq.n	800cf1a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800cef6:	f107 0314 	add.w	r3, r7, #20
 800cefa:	461a      	mov	r2, r3
 800cefc:	2104      	movs	r1, #4
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f7ff f9f8 	bl	800c2f4 <get_sequence_step_timeout>
 800cf04:	4603      	mov	r3, r0
 800cf06:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800cf0e:	6979      	ldr	r1, [r7, #20]
 800cf10:	6a3b      	ldr	r3, [r7, #32]
 800cf12:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800cf14:	441a      	add	r2, r3
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800cf1a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d103      	bne.n	800cf2a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	681a      	ldr	r2, [r3, #0]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800cf2a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3740      	adds	r7, #64	@ 0x40
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
	...

0800cf38 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b088      	sub	sp, #32
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cf42:	2300      	movs	r3, #0
 800cf44:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800cf46:	2300      	movs	r3, #0
 800cf48:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800cf4a:	e0c6      	b.n	800d0da <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800cf4c:	697b      	ldr	r3, [r7, #20]
 800cf4e:	683a      	ldr	r2, [r7, #0]
 800cf50:	4413      	add	r3, r2
 800cf52:	781b      	ldrb	r3, [r3, #0]
 800cf54:	74fb      	strb	r3, [r7, #19]
		Index++;
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	3301      	adds	r3, #1
 800cf5a:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800cf5c:	7cfb      	ldrb	r3, [r7, #19]
 800cf5e:	2bff      	cmp	r3, #255	@ 0xff
 800cf60:	f040 808d 	bne.w	800d07e <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800cf64:	697b      	ldr	r3, [r7, #20]
 800cf66:	683a      	ldr	r2, [r7, #0]
 800cf68:	4413      	add	r3, r2
 800cf6a:	781b      	ldrb	r3, [r3, #0]
 800cf6c:	747b      	strb	r3, [r7, #17]
			Index++;
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	3301      	adds	r3, #1
 800cf72:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800cf74:	7c7b      	ldrb	r3, [r7, #17]
 800cf76:	2b03      	cmp	r3, #3
 800cf78:	d87e      	bhi.n	800d078 <VL53L0X_load_tuning_settings+0x140>
 800cf7a:	a201      	add	r2, pc, #4	@ (adr r2, 800cf80 <VL53L0X_load_tuning_settings+0x48>)
 800cf7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf80:	0800cf91 	.word	0x0800cf91
 800cf84:	0800cfcb 	.word	0x0800cfcb
 800cf88:	0800d005 	.word	0x0800d005
 800cf8c:	0800d03f 	.word	0x0800d03f
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	683a      	ldr	r2, [r7, #0]
 800cf94:	4413      	add	r3, r2
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	743b      	strb	r3, [r7, #16]
				Index++;
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	3301      	adds	r3, #1
 800cf9e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	683a      	ldr	r2, [r7, #0]
 800cfa4:	4413      	add	r3, r2
 800cfa6:	781b      	ldrb	r3, [r3, #0]
 800cfa8:	73fb      	strb	r3, [r7, #15]
				Index++;
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	3301      	adds	r3, #1
 800cfae:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800cfb0:	7c3b      	ldrb	r3, [r7, #16]
 800cfb2:	b29b      	uxth	r3, r3
 800cfb4:	021b      	lsls	r3, r3, #8
 800cfb6:	b29a      	uxth	r2, r3
 800cfb8:	7bfb      	ldrb	r3, [r7, #15]
 800cfba:	b29b      	uxth	r3, r3
 800cfbc:	4413      	add	r3, r2
 800cfbe:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	89ba      	ldrh	r2, [r7, #12]
 800cfc4:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
				break;
 800cfc8:	e087      	b.n	800d0da <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	683a      	ldr	r2, [r7, #0]
 800cfce:	4413      	add	r3, r2
 800cfd0:	781b      	ldrb	r3, [r3, #0]
 800cfd2:	743b      	strb	r3, [r7, #16]
				Index++;
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	3301      	adds	r3, #1
 800cfd8:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	683a      	ldr	r2, [r7, #0]
 800cfde:	4413      	add	r3, r2
 800cfe0:	781b      	ldrb	r3, [r3, #0]
 800cfe2:	73fb      	strb	r3, [r7, #15]
				Index++;
 800cfe4:	697b      	ldr	r3, [r7, #20]
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800cfea:	7c3b      	ldrb	r3, [r7, #16]
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	021b      	lsls	r3, r3, #8
 800cff0:	b29a      	uxth	r2, r3
 800cff2:	7bfb      	ldrb	r3, [r7, #15]
 800cff4:	b29b      	uxth	r3, r3
 800cff6:	4413      	add	r3, r2
 800cff8:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	89ba      	ldrh	r2, [r7, #12]
 800cffe:	f8a3 2136 	strh.w	r2, [r3, #310]	@ 0x136
					Temp16);
				break;
 800d002:	e06a      	b.n	800d0da <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	683a      	ldr	r2, [r7, #0]
 800d008:	4413      	add	r3, r2
 800d00a:	781b      	ldrb	r3, [r3, #0]
 800d00c:	743b      	strb	r3, [r7, #16]
				Index++;
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	3301      	adds	r3, #1
 800d012:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	683a      	ldr	r2, [r7, #0]
 800d018:	4413      	add	r3, r2
 800d01a:	781b      	ldrb	r3, [r3, #0]
 800d01c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	3301      	adds	r3, #1
 800d022:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d024:	7c3b      	ldrb	r3, [r7, #16]
 800d026:	b29b      	uxth	r3, r3
 800d028:	021b      	lsls	r3, r3, #8
 800d02a:	b29a      	uxth	r2, r3
 800d02c:	7bfb      	ldrb	r3, [r7, #15]
 800d02e:	b29b      	uxth	r3, r3
 800d030:	4413      	add	r3, r2
 800d032:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	89ba      	ldrh	r2, [r7, #12]
 800d038:	f8a3 2138 	strh.w	r2, [r3, #312]	@ 0x138
				break;
 800d03c:	e04d      	b.n	800d0da <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	683a      	ldr	r2, [r7, #0]
 800d042:	4413      	add	r3, r2
 800d044:	781b      	ldrb	r3, [r3, #0]
 800d046:	743b      	strb	r3, [r7, #16]
				Index++;
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	3301      	adds	r3, #1
 800d04c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	683a      	ldr	r2, [r7, #0]
 800d052:	4413      	add	r3, r2
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	73fb      	strb	r3, [r7, #15]
				Index++;
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	3301      	adds	r3, #1
 800d05c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800d05e:	7c3b      	ldrb	r3, [r7, #16]
 800d060:	b29b      	uxth	r3, r3
 800d062:	021b      	lsls	r3, r3, #8
 800d064:	b29a      	uxth	r2, r3
 800d066:	7bfb      	ldrb	r3, [r7, #15]
 800d068:	b29b      	uxth	r3, r3
 800d06a:	4413      	add	r3, r2
 800d06c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	89ba      	ldrh	r2, [r7, #12]
 800d072:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c
				break;
 800d076:	e030      	b.n	800d0da <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d078:	23fc      	movs	r3, #252	@ 0xfc
 800d07a:	77fb      	strb	r3, [r7, #31]
 800d07c:	e02d      	b.n	800d0da <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800d07e:	7cfb      	ldrb	r3, [r7, #19]
 800d080:	2b04      	cmp	r3, #4
 800d082:	d828      	bhi.n	800d0d6 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	683a      	ldr	r2, [r7, #0]
 800d088:	4413      	add	r3, r2
 800d08a:	781b      	ldrb	r3, [r3, #0]
 800d08c:	74bb      	strb	r3, [r7, #18]
			Index++;
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	3301      	adds	r3, #1
 800d092:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800d094:	2300      	movs	r3, #0
 800d096:	61bb      	str	r3, [r7, #24]
 800d098:	e00f      	b.n	800d0ba <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	683a      	ldr	r2, [r7, #0]
 800d09e:	4413      	add	r3, r2
 800d0a0:	7819      	ldrb	r1, [r3, #0]
 800d0a2:	f107 0208 	add.w	r2, r7, #8
 800d0a6:	69bb      	ldr	r3, [r7, #24]
 800d0a8:	4413      	add	r3, r2
 800d0aa:	460a      	mov	r2, r1
 800d0ac:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800d0ae:	697b      	ldr	r3, [r7, #20]
 800d0b0:	3301      	adds	r3, #1
 800d0b2:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800d0b4:	69bb      	ldr	r3, [r7, #24]
 800d0b6:	3301      	adds	r3, #1
 800d0b8:	61bb      	str	r3, [r7, #24]
 800d0ba:	7cfb      	ldrb	r3, [r7, #19]
 800d0bc:	69ba      	ldr	r2, [r7, #24]
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	dbeb      	blt.n	800d09a <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800d0c2:	7cfb      	ldrb	r3, [r7, #19]
 800d0c4:	f107 0208 	add.w	r2, r7, #8
 800d0c8:	7cb9      	ldrb	r1, [r7, #18]
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f000 fdee 	bl	800dcac <VL53L0X_WriteMulti>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	77fb      	strb	r3, [r7, #31]
 800d0d4:	e001      	b.n	800d0da <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800d0d6:	23fc      	movs	r3, #252	@ 0xfc
 800d0d8:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	683a      	ldr	r2, [r7, #0]
 800d0de:	4413      	add	r3, r2
 800d0e0:	781b      	ldrb	r3, [r3, #0]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d004      	beq.n	800d0f0 <VL53L0X_load_tuning_settings+0x1b8>
 800d0e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	f43f af2e 	beq.w	800cf4c <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d0f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3720      	adds	r7, #32
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}

0800d0fc <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b088      	sub	sp, #32
 800d100:	af00      	add	r7, sp, #0
 800d102:	60f8      	str	r0, [r7, #12]
 800d104:	60b9      	str	r1, [r7, #8]
 800d106:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d108:	2300      	movs	r3, #0
 800d10a:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2200      	movs	r2, #0
 800d110:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800d112:	f107 0313 	add.w	r3, r7, #19
 800d116:	4619      	mov	r1, r3
 800d118:	68f8      	ldr	r0, [r7, #12]
 800d11a:	f7fc fd31 	bl	8009b80 <VL53L0X_GetXTalkCompensationEnable>
 800d11e:	4603      	mov	r3, r0
 800d120:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800d122:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d111      	bne.n	800d14e <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800d12a:	7cfb      	ldrb	r3, [r7, #19]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d00e      	beq.n	800d14e <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	6a1b      	ldr	r3, [r3, #32]
 800d134:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	8a9b      	ldrh	r3, [r3, #20]
 800d13a:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800d13c:	69bb      	ldr	r3, [r7, #24]
 800d13e:	fb02 f303 	mul.w	r3, r2, r3
 800d142:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	3380      	adds	r3, #128	@ 0x80
 800d148:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800d14e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d152:	4618      	mov	r0, r3
 800d154:	3720      	adds	r7, #32
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}

0800d15a <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800d15a:	b580      	push	{r7, lr}
 800d15c:	b086      	sub	sp, #24
 800d15e:	af00      	add	r7, sp, #0
 800d160:	60f8      	str	r0, [r7, #12]
 800d162:	60b9      	str	r1, [r7, #8]
 800d164:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d166:	2300      	movs	r3, #0
 800d168:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800d16a:	68bb      	ldr	r3, [r7, #8]
 800d16c:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800d172:	f107 0310 	add.w	r3, r7, #16
 800d176:	461a      	mov	r2, r3
 800d178:	68b9      	ldr	r1, [r7, #8]
 800d17a:	68f8      	ldr	r0, [r7, #12]
 800d17c:	f7ff ffbe 	bl	800d0fc <VL53L0X_get_total_xtalk_rate>
 800d180:	4603      	mov	r3, r0
 800d182:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800d184:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d105      	bne.n	800d198 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	693b      	ldr	r3, [r7, #16]
 800d192:	441a      	add	r2, r3
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	601a      	str	r2, [r3, #0]

	return Status;
 800d198:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	3718      	adds	r7, #24
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}

0800d1a4 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b09a      	sub	sp, #104	@ 0x68
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	60f8      	str	r0, [r7, #12]
 800d1ac:	60b9      	str	r1, [r7, #8]
 800d1ae:	607a      	str	r2, [r7, #4]
 800d1b0:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800d1b2:	2312      	movs	r3, #18
 800d1b4:	657b      	str	r3, [r7, #84]	@ 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800d1b6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d1ba:	653b      	str	r3, [r7, #80]	@ 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800d1bc:	2342      	movs	r3, #66	@ 0x42
 800d1be:	64fb      	str	r3, [r7, #76]	@ 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800d1c0:	2306      	movs	r3, #6
 800d1c2:	64bb      	str	r3, [r7, #72]	@ 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800d1c4:	2307      	movs	r3, #7
 800d1c6:	647b      	str	r3, [r7, #68]	@ 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	f8b3 3154 	ldrh.w	r3, [r3, #340]	@ 0x154
	dmaxCalRange_mm =
 800d1d4:	63fb      	str	r3, [r7, #60]	@ 0x3c

	dmaxCalSignalRateRtn_mcps =
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 800d1dc:	63bb      	str	r3, [r7, #56]	@ 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800d1de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d1e2:	fb02 f303 	mul.w	r3, r2, r3
 800d1e6:	637b      	str	r3, [r7, #52]	@ 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800d1e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1ea:	3380      	adds	r3, #128	@ 0x80
 800d1ec:	0a1b      	lsrs	r3, r3, #8
 800d1ee:	637b      	str	r3, [r7, #52]	@ 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800d1f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d1f4:	fb02 f303 	mul.w	r3, r2, r3
 800d1f8:	637b      	str	r3, [r7, #52]	@ 0x34

	minSignalNeeded_p1 = 0;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	667b      	str	r3, [r7, #100]	@ 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d01a      	beq.n	800d23a <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	029b      	lsls	r3, r3, #10
 800d208:	633b      	str	r3, [r7, #48]	@ 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800d20e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d210:	4413      	add	r3, r2
 800d212:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800d214:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	fbb2 f3f3 	udiv	r3, r2, r3
 800d21c:	667b      	str	r3, [r7, #100]	@ 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800d21e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d220:	4613      	mov	r3, r2
 800d222:	005b      	lsls	r3, r3, #1
 800d224:	4413      	add	r3, r2
 800d226:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800d228:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d22a:	fb03 f303 	mul.w	r3, r3, r3
 800d22e:	667b      	str	r3, [r7, #100]	@ 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800d230:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d232:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800d236:	0c1b      	lsrs	r3, r3, #16
 800d238:	667b      	str	r3, [r7, #100]	@ 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800d23e:	fb02 f303 	mul.w	r3, r2, r3
 800d242:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800d244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d246:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800d24a:	0c1b      	lsrs	r3, r3, #16
 800d24c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800d24e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d250:	fb03 f303 	mul.w	r3, r3, r3
 800d254:	62fb      	str	r3, [r7, #44]	@ 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800d256:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d258:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800d25c:	0c1b      	lsrs	r3, r3, #16
 800d25e:	62bb      	str	r3, [r7, #40]	@ 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800d260:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d262:	085a      	lsrs	r2, r3, #1
 800d264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d266:	441a      	add	r2, r3
 800d268:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d26a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d26e:	62bb      	str	r3, [r7, #40]	@ 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800d270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d272:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d274:	fb02 f303 	mul.w	r3, r2, r3
 800d278:	62bb      	str	r3, [r7, #40]	@ 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800d27a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d27c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d280:	d302      	bcc.n	800d288 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800d282:	4b54      	ldr	r3, [pc, #336]	@ (800d3d4 <VL53L0X_calc_dmax+0x230>)
 800d284:	663b      	str	r3, [r7, #96]	@ 0x60
 800d286:	e015      	b.n	800d2b4 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800d288:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d28a:	085a      	lsrs	r2, r3, #1
 800d28c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d28e:	441a      	add	r2, r3
 800d290:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d292:	fbb2 f3f3 	udiv	r3, r2, r3
 800d296:	677b      	str	r3, [r7, #116]	@ 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800d298:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d29a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d29c:	fb02 f303 	mul.w	r3, r2, r3
 800d2a0:	677b      	str	r3, [r7, #116]	@ 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800d2a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d2a4:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800d2a8:	0c1b      	lsrs	r3, r3, #16
 800d2aa:	663b      	str	r3, [r7, #96]	@ 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800d2ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d2ae:	fb03 f303 	mul.w	r3, r3, r3
 800d2b2:	663b      	str	r3, [r7, #96]	@ 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800d2b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2b6:	039b      	lsls	r3, r3, #14
 800d2b8:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800d2bc:	4a46      	ldr	r2, [pc, #280]	@ (800d3d8 <VL53L0X_calc_dmax+0x234>)
 800d2be:	fba2 2303 	umull	r2, r3, r2, r3
 800d2c2:	099b      	lsrs	r3, r3, #6
 800d2c4:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800d2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2c8:	fb03 f303 	mul.w	r3, r3, r3
 800d2cc:	627b      	str	r3, [r7, #36]	@ 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800d2ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2d0:	fb03 f303 	mul.w	r3, r3, r3
 800d2d4:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800d2d6:	6a3b      	ldr	r3, [r7, #32]
 800d2d8:	3308      	adds	r3, #8
 800d2da:	091b      	lsrs	r3, r3, #4
 800d2dc:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800d2de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d2e0:	6a3b      	ldr	r3, [r7, #32]
 800d2e2:	1ad3      	subs	r3, r2, r3
 800d2e4:	627b      	str	r3, [r7, #36]	@ 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800d2e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d2e8:	4613      	mov	r3, r2
 800d2ea:	005b      	lsls	r3, r3, #1
 800d2ec:	4413      	add	r3, r2
 800d2ee:	011b      	lsls	r3, r3, #4
 800d2f0:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800d2f2:	69fb      	ldr	r3, [r7, #28]
 800d2f4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800d2f8:	0b9b      	lsrs	r3, r3, #14
 800d2fa:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800d2fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d2fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d300:	4413      	add	r3, r2
 800d302:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800d304:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d306:	085b      	lsrs	r3, r3, #1
 800d308:	69ba      	ldr	r2, [r7, #24]
 800d30a:	4413      	add	r3, r2
 800d30c:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800d30e:	69ba      	ldr	r2, [r7, #24]
 800d310:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d312:	fbb2 f3f3 	udiv	r3, r2, r3
 800d316:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800d318:	69bb      	ldr	r3, [r7, #24]
 800d31a:	039b      	lsls	r3, r3, #14
 800d31c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800d31e:	69fb      	ldr	r3, [r7, #28]
 800d320:	085b      	lsrs	r3, r3, #1
 800d322:	69ba      	ldr	r2, [r7, #24]
 800d324:	4413      	add	r3, r2
 800d326:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800d328:	69ba      	ldr	r2, [r7, #24]
 800d32a:	69fb      	ldr	r3, [r7, #28]
 800d32c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d330:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800d332:	69bb      	ldr	r3, [r7, #24]
 800d334:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d336:	fb02 f303 	mul.w	r3, r2, r3
 800d33a:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800d33c:	69bb      	ldr	r3, [r7, #24]
 800d33e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800d342:	4a25      	ldr	r2, [pc, #148]	@ (800d3d8 <VL53L0X_calc_dmax+0x234>)
 800d344:	fba2 2303 	umull	r2, r3, r2, r3
 800d348:	099b      	lsrs	r3, r3, #6
 800d34a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800d34c:	69bb      	ldr	r3, [r7, #24]
 800d34e:	011b      	lsls	r3, r3, #4
 800d350:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800d352:	69bb      	ldr	r3, [r7, #24]
 800d354:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800d358:	4a1f      	ldr	r2, [pc, #124]	@ (800d3d8 <VL53L0X_calc_dmax+0x234>)
 800d35a:	fba2 2303 	umull	r2, r3, r2, r3
 800d35e:	099b      	lsrs	r3, r3, #6
 800d360:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800d362:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d364:	3380      	adds	r3, #128	@ 0x80
 800d366:	0a1b      	lsrs	r3, r3, #8
 800d368:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d008      	beq.n	800d382 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800d370:	697b      	ldr	r3, [r7, #20]
 800d372:	085a      	lsrs	r2, r3, #1
 800d374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d376:	441a      	add	r2, r3
 800d378:	697b      	ldr	r3, [r7, #20]
 800d37a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d37e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d380:	e001      	b.n	800d386 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800d382:	2300      	movs	r3, #0
 800d384:	65bb      	str	r3, [r7, #88]	@ 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800d386:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800d388:	f7fe f9be 	bl	800b708 <VL53L0X_isqrt>
 800d38c:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800d38e:	69bb      	ldr	r3, [r7, #24]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d008      	beq.n	800d3a6 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800d394:	69bb      	ldr	r3, [r7, #24]
 800d396:	085a      	lsrs	r2, r3, #1
 800d398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d39a:	441a      	add	r2, r3
 800d39c:	69bb      	ldr	r3, [r7, #24]
 800d39e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d3a4:	e001      	b.n	800d3aa <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	65fb      	str	r3, [r7, #92]	@ 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800d3aa:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800d3ac:	f7fe f9ac 	bl	800b708 <VL53L0X_isqrt>
 800d3b0:	65f8      	str	r0, [r7, #92]	@ 0x5c

	*pdmax_mm = dmaxDark;
 800d3b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d3b4:	693a      	ldr	r2, [r7, #16]
 800d3b6:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800d3b8:	693a      	ldr	r2, [r7, #16]
 800d3ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d902      	bls.n	800d3c6 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800d3c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d3c2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d3c4:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800d3c6:	f997 3043 	ldrsb.w	r3, [r7, #67]	@ 0x43
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3768      	adds	r7, #104	@ 0x68
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}
 800d3d2:	bf00      	nop
 800d3d4:	fff00000 	.word	0xfff00000
 800d3d8:	10624dd3 	.word	0x10624dd3

0800d3dc <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800d3dc:	b580      	push	{r7, lr}
 800d3de:	b0b4      	sub	sp, #208	@ 0xd0
 800d3e0:	af04      	add	r7, sp, #16
 800d3e2:	60f8      	str	r0, [r7, #12]
 800d3e4:	60b9      	str	r1, [r7, #8]
 800d3e6:	607a      	str	r2, [r7, #4]
 800d3e8:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800d3ea:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800d3ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800d3f2:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800d3f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800d3fa:	f44f 13c8 	mov.w	r3, #1638400	@ 0x190000
 800d3fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800d402:	f241 235c 	movw	r3, #4700	@ 0x125c
 800d406:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800d40a:	4b9e      	ldr	r3, [pc, #632]	@ (800d684 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800d40c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800d410:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800d414:	67fb      	str	r3, [r7, #124]	@ 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800d416:	f04f 4270 	mov.w	r2, #4026531840	@ 0xf0000000
 800d41a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d41e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d422:	67bb      	str	r3, [r7, #120]	@ 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800d424:	4b98      	ldr	r3, [pc, #608]	@ (800d688 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800d426:	677b      	str	r3, [r7, #116]	@ 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800d428:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d42c:	673b      	str	r3, [r7, #112]	@ 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800d42e:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 800d432:	66fb      	str	r3, [r7, #108]	@ 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800d434:	f240 6377 	movw	r3, #1655	@ 0x677
 800d438:	66bb      	str	r3, [r7, #104]	@ 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d43a:	2300      	movs	r3, #0
 800d43c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	6a1b      	ldr	r3, [r3, #32]
 800d444:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800d446:	68bb      	ldr	r3, [r7, #8]
 800d448:	691b      	ldr	r3, [r3, #16]
 800d44a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d44e:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800d452:	0c1b      	lsrs	r3, r3, #16
 800d454:	667b      	str	r3, [r7, #100]	@ 0x64

	correctedSignalRate_mcps =
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	68db      	ldr	r3, [r3, #12]
 800d45a:	663b      	str	r3, [r7, #96]	@ 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800d45c:	f107 0310 	add.w	r3, r7, #16
 800d460:	461a      	mov	r2, r3
 800d462:	68b9      	ldr	r1, [r7, #8]
 800d464:	68f8      	ldr	r0, [r7, #12]
 800d466:	f7ff fe78 	bl	800d15a <VL53L0X_get_total_signal_rate>
 800d46a:	4603      	mov	r3, r0
 800d46c:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800d470:	f107 0314 	add.w	r3, r7, #20
 800d474:	461a      	mov	r2, r3
 800d476:	68b9      	ldr	r1, [r7, #8]
 800d478:	68f8      	ldr	r0, [r7, #12]
 800d47a:	f7ff fe3f 	bl	800d0fc <VL53L0X_get_total_xtalk_rate>
 800d47e:	4603      	mov	r3, r0
 800d480:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d48a:	fb02 f303 	mul.w	r3, r2, r3
 800d48e:	65fb      	str	r3, [r7, #92]	@ 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800d490:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d492:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800d496:	0c1b      	lsrs	r3, r3, #16
 800d498:	65fb      	str	r3, [r7, #92]	@ 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d4a0:	fb02 f303 	mul.w	r3, r2, r3
 800d4a4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800d4a8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800d4ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	d902      	bls.n	800d4b8 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800d4b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d4b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800d4b8:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d168      	bne.n	800d592 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800d4c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	f893 30e0 	ldrb.w	r3, [r3, #224]	@ 0xe0
 800d4d0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800d4d4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800d4d8:	461a      	mov	r2, r3
 800d4da:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 800d4de:	68f8      	ldr	r0, [r7, #12]
 800d4e0:	f7fe feb4 	bl	800c24c <VL53L0X_calc_timeout_mclks>
 800d4e4:	6578      	str	r0, [r7, #84]	@ 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d4ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	f893 30e8 	ldrb.w	r3, [r3, #232]	@ 0xe8
 800d4f6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800d4fa:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 800d4fe:	461a      	mov	r2, r3
 800d500:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 800d504:	68f8      	ldr	r0, [r7, #12]
 800d506:	f7fe fea1 	bl	800c24c <VL53L0X_calc_timeout_mclks>
 800d50a:	64f8      	str	r0, [r7, #76]	@ 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800d50c:	2303      	movs	r3, #3
 800d50e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		if (finalRangeVcselPCLKS == 8)
 800d512:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800d516:	2b08      	cmp	r3, #8
 800d518:	d102      	bne.n	800d520 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800d51a:	2302      	movs	r3, #2
 800d51c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800d520:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d524:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800d526:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800d52a:	fb02 f303 	mul.w	r3, r2, r3
 800d52e:	02db      	lsls	r3, r3, #11
 800d530:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800d534:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d538:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800d53c:	4a53      	ldr	r2, [pc, #332]	@ (800d68c <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d53e:	fba2 2303 	umull	r2, r3, r2, r3
 800d542:	099b      	lsrs	r3, r3, #6
 800d544:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800d548:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d54c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d54e:	fb02 f303 	mul.w	r3, r2, r3
 800d552:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800d556:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d55a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800d55e:	4a4b      	ldr	r2, [pc, #300]	@ (800d68c <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d560:	fba2 2303 	umull	r2, r3, r2, r3
 800d564:	099b      	lsrs	r3, r3, #6
 800d566:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800d56a:	693b      	ldr	r3, [r7, #16]
 800d56c:	3380      	adds	r3, #128	@ 0x80
 800d56e:	0a1b      	lsrs	r3, r3, #8
 800d570:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800d572:	693a      	ldr	r2, [r7, #16]
 800d574:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d578:	fb02 f303 	mul.w	r3, r2, r3
 800d57c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800d580:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800d584:	3380      	adds	r3, #128	@ 0x80
 800d586:	0a1b      	lsrs	r3, r3, #8
 800d588:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800d58c:	693b      	ldr	r3, [r7, #16]
 800d58e:	021b      	lsls	r3, r3, #8
 800d590:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800d592:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800d596:	2b00      	cmp	r3, #0
 800d598:	d002      	beq.n	800d5a0 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800d59a:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 800d59e:	e15e      	b.n	800d85e <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800d5a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d10c      	bne.n	800d5c0 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d5ac:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d5b4:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
		*pDmax_mm = 0;
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	601a      	str	r2, [r3, #0]
 800d5be:	e14c      	b.n	800d85a <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800d5c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d102      	bne.n	800d5ce <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800d5ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d5d2:	64bb      	str	r3, [r7, #72]	@ 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800d5d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d5d6:	041a      	lsls	r2, r3, #16
 800d5d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d5da:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800d5e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d5e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	d902      	bls.n	800d5f2 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800d5ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d5ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800d5f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d5f6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800d5fa:	fb02 f303 	mul.w	r3, r2, r3
 800d5fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800d602:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800d606:	4613      	mov	r3, r2
 800d608:	005b      	lsls	r3, r3, #1
 800d60a:	4413      	add	r3, r2
 800d60c:	009b      	lsls	r3, r3, #2
 800d60e:	4618      	mov	r0, r3
 800d610:	f7fe f87a 	bl	800b708 <VL53L0X_isqrt>
 800d614:	4603      	mov	r3, r0
 800d616:	005b      	lsls	r3, r3, #1
 800d618:	647b      	str	r3, [r7, #68]	@ 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	891b      	ldrh	r3, [r3, #8]
 800d61e:	461a      	mov	r2, r3
 800d620:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d622:	fb02 f303 	mul.w	r3, r2, r3
 800d626:	643b      	str	r3, [r7, #64]	@ 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d628:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d62a:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800d62c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d630:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d632:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800d634:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d638:	4a14      	ldr	r2, [pc, #80]	@ (800d68c <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d63a:	fba2 2303 	umull	r2, r3, r2, r3
 800d63e:	099b      	lsrs	r3, r3, #6
 800d640:	63fb      	str	r3, [r7, #60]	@ 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800d642:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d644:	041b      	lsls	r3, r3, #16
 800d646:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800d64a:	4a10      	ldr	r2, [pc, #64]	@ (800d68c <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d64c:	fba2 2303 	umull	r2, r3, r2, r3
 800d650:	099b      	lsrs	r3, r3, #6
 800d652:	63bb      	str	r3, [r7, #56]	@ 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800d654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d656:	021b      	lsls	r3, r3, #8
 800d658:	63fb      	str	r3, [r7, #60]	@ 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800d65a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d65c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d65e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d662:	2b00      	cmp	r3, #0
 800d664:	bfb8      	it	lt
 800d666:	425b      	neglt	r3, r3
 800d668:	637b      	str	r3, [r7, #52]	@ 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800d66a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d66c:	021b      	lsls	r3, r3, #8
 800d66e:	637b      	str	r3, [r7, #52]	@ 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	7e1b      	ldrb	r3, [r3, #24]
 800d674:	2b00      	cmp	r3, #0
 800d676:	d00b      	beq.n	800d690 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800d678:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800d67c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d680:	e033      	b.n	800d6ea <VL53L0X_calc_sigma_estimate+0x30e>
 800d682:	bf00      	nop
 800d684:	028f87ae 	.word	0x028f87ae
 800d688:	0006999a 	.word	0x0006999a
 800d68c:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800d690:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d692:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d696:	fbb2 f3f3 	udiv	r3, r2, r3
 800d69a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800d69e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6a0:	f5c3 3280 	rsb	r2, r3, #65536	@ 0x10000
 800d6a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d6a8:	fb02 f303 	mul.w	r3, r2, r3
 800d6ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800d6b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d6b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d6b6:	4413      	add	r3, r2
 800d6b8:	0c1b      	lsrs	r3, r3, #16
 800d6ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800d6be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d6c2:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800d6c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800d6ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d6ce:	085b      	lsrs	r3, r3, #1
 800d6d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800d6d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d6d8:	fb03 f303 	mul.w	r3, r3, r3
 800d6dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800d6e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d6e4:	0b9b      	lsrs	r3, r3, #14
 800d6e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800d6ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d6ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d6f0:	fb02 f303 	mul.w	r3, r2, r3
 800d6f4:	633b      	str	r3, [r7, #48]	@ 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800d6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6f8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800d6fc:	0c1b      	lsrs	r3, r3, #16
 800d6fe:	633b      	str	r3, [r7, #48]	@ 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800d700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d702:	fb03 f303 	mul.w	r3, r3, r3
 800d706:	633b      	str	r3, [r7, #48]	@ 0x30

		sqr2 = sigmaEstimateP2;
 800d708:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d70c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800d70e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d710:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 800d714:	0c1b      	lsrs	r3, r3, #16
 800d716:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800d718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d71a:	fb03 f303 	mul.w	r3, r3, r3
 800d71e:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800d720:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d724:	4413      	add	r3, r2
 800d726:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800d728:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d72a:	f7fd ffed 	bl	800b708 <VL53L0X_isqrt>
 800d72e:	6278      	str	r0, [r7, #36]	@ 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800d730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d732:	041b      	lsls	r3, r3, #16
 800d734:	627b      	str	r3, [r7, #36]	@ 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800d736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d738:	3332      	adds	r3, #50	@ 0x32
 800d73a:	4a4b      	ldr	r2, [pc, #300]	@ (800d868 <VL53L0X_calc_sigma_estimate+0x48c>)
 800d73c:	fba2 2303 	umull	r2, r3, r2, r3
 800d740:	095a      	lsrs	r2, r3, #5
 800d742:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d744:	fbb2 f3f3 	udiv	r3, r2, r3
 800d748:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800d74c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d750:	f640 32b5 	movw	r2, #2997	@ 0xbb5
 800d754:	fb02 f303 	mul.w	r3, r2, r3
 800d758:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800d75c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d760:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 800d764:	3308      	adds	r3, #8
 800d766:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		sigmaEstRtn		 /= 10000;
 800d76a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d76e:	4a3f      	ldr	r2, [pc, #252]	@ (800d86c <VL53L0X_calc_sigma_estimate+0x490>)
 800d770:	fba2 2303 	umull	r2, r3, r2, r3
 800d774:	0b5b      	lsrs	r3, r3, #13
 800d776:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800d77a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d77e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d780:	429a      	cmp	r2, r3
 800d782:	d902      	bls.n	800d78a <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800d784:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d786:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800d78a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d78e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d792:	4413      	add	r3, r2
 800d794:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800d798:	4a35      	ldr	r2, [pc, #212]	@ (800d870 <VL53L0X_calc_sigma_estimate+0x494>)
 800d79a:	fba2 2303 	umull	r2, r3, r2, r3
 800d79e:	099b      	lsrs	r3, r3, #6
 800d7a0:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800d7a2:	6a3b      	ldr	r3, [r7, #32]
 800d7a4:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800d7a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d7aa:	441a      	add	r2, r3
 800d7ac:	6a3b      	ldr	r3, [r7, #32]
 800d7ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f7fd ffa8 	bl	800b708 <VL53L0X_isqrt>
 800d7b8:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800d7ba:	69fb      	ldr	r3, [r7, #28]
 800d7bc:	021b      	lsls	r3, r3, #8
 800d7be:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800d7c0:	69fb      	ldr	r3, [r7, #28]
 800d7c2:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800d7c6:	4a2a      	ldr	r2, [pc, #168]	@ (800d870 <VL53L0X_calc_sigma_estimate+0x494>)
 800d7c8:	fba2 2303 	umull	r2, r3, r2, r3
 800d7cc:	099b      	lsrs	r3, r3, #6
 800d7ce:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800d7d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d7d4:	fb03 f303 	mul.w	r3, r3, r3
 800d7d8:	633b      	str	r3, [r7, #48]	@ 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800d7da:	69fb      	ldr	r3, [r7, #28]
 800d7dc:	fb03 f303 	mul.w	r3, r3, r3
 800d7e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800d7e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d7e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7e6:	4413      	add	r3, r2
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f7fd ff8d 	bl	800b708 <VL53L0X_isqrt>
 800d7ee:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800d7f0:	69bb      	ldr	r3, [r7, #24]
 800d7f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d7f6:	fb02 f303 	mul.w	r3, r2, r3
 800d7fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800d7fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d800:	2b00      	cmp	r3, #0
 800d802:	d009      	beq.n	800d818 <VL53L0X_calc_sigma_estimate+0x43c>
 800d804:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d005      	beq.n	800d818 <VL53L0X_calc_sigma_estimate+0x43c>
 800d80c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800d810:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d814:	429a      	cmp	r2, r3
 800d816:	d903      	bls.n	800d820 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800d818:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d81c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800d826:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681a      	ldr	r2, [r3, #0]
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
		Status = VL53L0X_calc_dmax(
 800d832:	6939      	ldr	r1, [r7, #16]
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	9303      	str	r3, [sp, #12]
 800d838:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d83c:	9302      	str	r3, [sp, #8]
 800d83e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d842:	9301      	str	r3, [sp, #4]
 800d844:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d846:	9300      	str	r3, [sp, #0]
 800d848:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d84c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d84e:	68f8      	ldr	r0, [r7, #12]
 800d850:	f7ff fca8 	bl	800d1a4 <VL53L0X_calc_dmax>
 800d854:	4603      	mov	r3, r0
 800d856:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d85a:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
}
 800d85e:	4618      	mov	r0, r3
 800d860:	37c0      	adds	r7, #192	@ 0xc0
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}
 800d866:	bf00      	nop
 800d868:	51eb851f 	.word	0x51eb851f
 800d86c:	d1b71759 	.word	0xd1b71759
 800d870:	10624dd3 	.word	0x10624dd3

0800d874 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b090      	sub	sp, #64	@ 0x40
 800d878:	af00      	add	r7, sp, #0
 800d87a:	60f8      	str	r0, [r7, #12]
 800d87c:	607a      	str	r2, [r7, #4]
 800d87e:	461a      	mov	r2, r3
 800d880:	460b      	mov	r3, r1
 800d882:	72fb      	strb	r3, [r7, #11]
 800d884:	4613      	mov	r3, r2
 800d886:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d888:	2300      	movs	r3, #0
 800d88a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800d88e:	2300      	movs	r3, #0
 800d890:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	uint8_t SignalRefClipflag = 0;
 800d894:	2300      	movs	r3, #0
 800d896:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800d89a:	2300      	movs	r3, #0
 800d89c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800d8b8:	2300      	movs	r3, #0
 800d8ba:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint16_t tmpWord = 0;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800d8c6:	7afb      	ldrb	r3, [r7, #11]
 800d8c8:	10db      	asrs	r3, r3, #3
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	f003 030f 	and.w	r3, r3, #15
 800d8d0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800d8d4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d017      	beq.n	800d90c <VL53L0X_get_pal_range_status+0x98>
 800d8dc:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800d8e0:	2b05      	cmp	r3, #5
 800d8e2:	d013      	beq.n	800d90c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800d8e4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800d8e8:	2b07      	cmp	r3, #7
 800d8ea:	d00f      	beq.n	800d90c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800d8ec:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800d8f0:	2b0c      	cmp	r3, #12
 800d8f2:	d00b      	beq.n	800d90c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800d8f4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800d8f8:	2b0d      	cmp	r3, #13
 800d8fa:	d007      	beq.n	800d90c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800d8fc:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800d900:	2b0e      	cmp	r3, #14
 800d902:	d003      	beq.n	800d90c <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800d904:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800d908:	2b0f      	cmp	r3, #15
 800d90a:	d103      	bne.n	800d914 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800d90c:	2301      	movs	r3, #1
 800d90e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 800d912:	e002      	b.n	800d91a <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800d914:	2300      	movs	r3, #0
 800d916:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800d91a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d109      	bne.n	800d936 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800d922:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800d926:	461a      	mov	r2, r3
 800d928:	2100      	movs	r1, #0
 800d92a:	68f8      	ldr	r0, [r7, #12]
 800d92c:	f7fc f9fc 	bl	8009d28 <VL53L0X_GetLimitCheckEnable>
 800d930:	4603      	mov	r3, r0
 800d932:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800d936:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d02e      	beq.n	800d99c <VL53L0X_get_pal_range_status+0x128>
 800d93e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800d942:	2b00      	cmp	r3, #0
 800d944:	d12a      	bne.n	800d99c <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800d946:	f107 0310 	add.w	r3, r7, #16
 800d94a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800d94e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800d950:	68f8      	ldr	r0, [r7, #12]
 800d952:	f7ff fd43 	bl	800d3dc <VL53L0X_calc_sigma_estimate>
 800d956:	4603      	mov	r3, r0
 800d958:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800d95c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800d960:	2b00      	cmp	r3, #0
 800d962:	d103      	bne.n	800d96c <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	b29a      	uxth	r2, r3
 800d968:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d96a:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800d96c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800d970:	2b00      	cmp	r3, #0
 800d972:	d113      	bne.n	800d99c <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800d974:	f107 0320 	add.w	r3, r7, #32
 800d978:	461a      	mov	r2, r3
 800d97a:	2100      	movs	r1, #0
 800d97c:	68f8      	ldr	r0, [r7, #12]
 800d97e:	f7fc fa59 	bl	8009e34 <VL53L0X_GetLimitCheckValue>
 800d982:	4603      	mov	r3, r0
 800d984:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800d988:	6a3b      	ldr	r3, [r7, #32]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d006      	beq.n	800d99c <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800d98e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d990:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800d992:	429a      	cmp	r2, r3
 800d994:	d902      	bls.n	800d99c <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800d996:	2301      	movs	r3, #1
 800d998:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800d99c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d109      	bne.n	800d9b8 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800d9a4:	f107 0329 	add.w	r3, r7, #41	@ 0x29
 800d9a8:	461a      	mov	r2, r3
 800d9aa:	2102      	movs	r1, #2
 800d9ac:	68f8      	ldr	r0, [r7, #12]
 800d9ae:	f7fc f9bb 	bl	8009d28 <VL53L0X_GetLimitCheckEnable>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800d9b8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d044      	beq.n	800da4a <VL53L0X_get_pal_range_status+0x1d6>
 800d9c0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d140      	bne.n	800da4a <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800d9c8:	f107 031c 	add.w	r3, r7, #28
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	2102      	movs	r1, #2
 800d9d0:	68f8      	ldr	r0, [r7, #12]
 800d9d2:	f7fc fa2f 	bl	8009e34 <VL53L0X_GetLimitCheckValue>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800d9dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d107      	bne.n	800d9f4 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d9e4:	2201      	movs	r2, #1
 800d9e6:	21ff      	movs	r1, #255	@ 0xff
 800d9e8:	68f8      	ldr	r0, [r7, #12]
 800d9ea:	f000 f9bb 	bl	800dd64 <VL53L0X_WrByte>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800d9f4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d109      	bne.n	800da10 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800d9fc:	f107 0316 	add.w	r3, r7, #22
 800da00:	461a      	mov	r2, r3
 800da02:	21b6      	movs	r1, #182	@ 0xb6
 800da04:	68f8      	ldr	r0, [r7, #12]
 800da06:	f000 fa59 	bl	800debc <VL53L0X_RdWord>
 800da0a:	4603      	mov	r3, r0
 800da0c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800da10:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800da14:	2b00      	cmp	r3, #0
 800da16:	d107      	bne.n	800da28 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800da18:	2200      	movs	r2, #0
 800da1a:	21ff      	movs	r1, #255	@ 0xff
 800da1c:	68f8      	ldr	r0, [r7, #12]
 800da1e:	f000 f9a1 	bl	800dd64 <VL53L0X_WrByte>
 800da22:	4603      	mov	r3, r0
 800da24:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800da28:	8afb      	ldrh	r3, [r7, #22]
 800da2a:	025b      	lsls	r3, r3, #9
 800da2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800da32:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148

		if ((SignalRefClipValue > 0) &&
 800da36:	69fb      	ldr	r3, [r7, #28]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d006      	beq.n	800da4a <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800da3c:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800da3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800da40:	429a      	cmp	r2, r3
 800da42:	d902      	bls.n	800da4a <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800da44:	2301      	movs	r3, #1
 800da46:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800da4a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d109      	bne.n	800da66 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800da52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800da56:	461a      	mov	r2, r3
 800da58:	2103      	movs	r1, #3
 800da5a:	68f8      	ldr	r0, [r7, #12]
 800da5c:	f7fc f964 	bl	8009d28 <VL53L0X_GetLimitCheckEnable>
 800da60:	4603      	mov	r3, r0
 800da62:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800da66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d023      	beq.n	800dab6 <VL53L0X_get_pal_range_status+0x242>
 800da6e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800da72:	2b00      	cmp	r3, #0
 800da74:	d11f      	bne.n	800dab6 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800da76:	893b      	ldrh	r3, [r7, #8]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d102      	bne.n	800da82 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800da7c:	2300      	movs	r3, #0
 800da7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800da80:	e005      	b.n	800da8e <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	021a      	lsls	r2, r3, #8
 800da86:	893b      	ldrh	r3, [r7, #8]
 800da88:	fbb2 f3f3 	udiv	r3, r2, r3
 800da8c:	637b      	str	r3, [r7, #52]	@ 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800da8e:	f107 0318 	add.w	r3, r7, #24
 800da92:	461a      	mov	r2, r3
 800da94:	2103      	movs	r1, #3
 800da96:	68f8      	ldr	r0, [r7, #12]
 800da98:	f7fc f9cc 	bl	8009e34 <VL53L0X_GetLimitCheckValue>
 800da9c:	4603      	mov	r3, r0
 800da9e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800daa2:	69bb      	ldr	r3, [r7, #24]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d006      	beq.n	800dab6 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800daa8:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800daaa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800daac:	429a      	cmp	r2, r3
 800daae:	d202      	bcs.n	800dab6 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800dab0:	2301      	movs	r3, #1
 800dab2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800dab6:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d14a      	bne.n	800db54 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800dabe:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800dac2:	2b01      	cmp	r3, #1
 800dac4:	d103      	bne.n	800dace <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800dac6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dac8:	22ff      	movs	r2, #255	@ 0xff
 800daca:	701a      	strb	r2, [r3, #0]
 800dacc:	e042      	b.n	800db54 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800dace:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800dad2:	2b01      	cmp	r3, #1
 800dad4:	d007      	beq.n	800dae6 <VL53L0X_get_pal_range_status+0x272>
 800dad6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800dada:	2b02      	cmp	r3, #2
 800dadc:	d003      	beq.n	800dae6 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800dade:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800dae2:	2b03      	cmp	r3, #3
 800dae4:	d103      	bne.n	800daee <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800dae6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dae8:	2205      	movs	r2, #5
 800daea:	701a      	strb	r2, [r3, #0]
 800daec:	e032      	b.n	800db54 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800daee:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800daf2:	2b06      	cmp	r3, #6
 800daf4:	d003      	beq.n	800dafe <VL53L0X_get_pal_range_status+0x28a>
 800daf6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800dafa:	2b09      	cmp	r3, #9
 800dafc:	d103      	bne.n	800db06 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800dafe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db00:	2204      	movs	r2, #4
 800db02:	701a      	strb	r2, [r3, #0]
 800db04:	e026      	b.n	800db54 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800db06:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800db0a:	2b08      	cmp	r3, #8
 800db0c:	d007      	beq.n	800db1e <VL53L0X_get_pal_range_status+0x2aa>
 800db0e:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800db12:	2b0a      	cmp	r3, #10
 800db14:	d003      	beq.n	800db1e <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800db16:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800db1a:	2b01      	cmp	r3, #1
 800db1c:	d103      	bne.n	800db26 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800db1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db20:	2203      	movs	r2, #3
 800db22:	701a      	strb	r2, [r3, #0]
 800db24:	e016      	b.n	800db54 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800db26:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800db2a:	2b04      	cmp	r3, #4
 800db2c:	d003      	beq.n	800db36 <VL53L0X_get_pal_range_status+0x2c2>
 800db2e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800db32:	2b01      	cmp	r3, #1
 800db34:	d103      	bne.n	800db3e <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800db36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db38:	2202      	movs	r2, #2
 800db3a:	701a      	strb	r2, [r3, #0]
 800db3c:	e00a      	b.n	800db54 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800db3e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800db42:	2b01      	cmp	r3, #1
 800db44:	d103      	bne.n	800db4e <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800db46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db48:	2201      	movs	r2, #1
 800db4a:	701a      	strb	r2, [r3, #0]
 800db4c:	e002      	b.n	800db54 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800db4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db50:	2200      	movs	r2, #0
 800db52:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800db54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800db56:	781b      	ldrb	r3, [r3, #0]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d102      	bne.n	800db62 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800db5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800db5e:	2200      	movs	r2, #0
 800db60:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800db62:	f107 032a 	add.w	r3, r7, #42	@ 0x2a
 800db66:	461a      	mov	r2, r3
 800db68:	2101      	movs	r1, #1
 800db6a:	68f8      	ldr	r0, [r7, #12]
 800db6c:	f7fc f8dc 	bl	8009d28 <VL53L0X_GetLimitCheckEnable>
 800db70:	4603      	mov	r3, r0
 800db72:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800db76:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d14f      	bne.n	800dc1e <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800db7e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800db82:	2b00      	cmp	r3, #0
 800db84:	d003      	beq.n	800db8e <VL53L0X_get_pal_range_status+0x31a>
 800db86:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800db8a:	2b01      	cmp	r3, #1
 800db8c:	d103      	bne.n	800db96 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800db8e:	2301      	movs	r3, #1
 800db90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800db94:	e002      	b.n	800db9c <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800db96:	2300      	movs	r3, #0
 800db98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800dba2:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800dba6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800dbaa:	2b04      	cmp	r3, #4
 800dbac:	d003      	beq.n	800dbb6 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800dbae:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d103      	bne.n	800dbbe <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800dbbc:	e002      	b.n	800dbc4 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800dbca:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800dbce:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d003      	beq.n	800dbde <VL53L0X_get_pal_range_status+0x36a>
 800dbd6:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800dbda:	2b01      	cmp	r3, #1
 800dbdc:	d103      	bne.n	800dbe6 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800dbde:	2301      	movs	r3, #1
 800dbe0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800dbe4:	e002      	b.n	800dbec <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800dbf2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800dbf6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d003      	beq.n	800dc06 <VL53L0X_get_pal_range_status+0x392>
 800dbfe:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800dc02:	2b01      	cmp	r3, #1
 800dc04:	d103      	bne.n	800dc0e <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800dc06:	2301      	movs	r3, #1
 800dc08:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800dc0c:	e002      	b.n	800dc14 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800dc1a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800dc1e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f

}
 800dc22:	4618      	mov	r0, r3
 800dc24:	3740      	adds	r7, #64	@ 0x40
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}

0800dc2a <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800dc2a:	b580      	push	{r7, lr}
 800dc2c:	b088      	sub	sp, #32
 800dc2e:	af02      	add	r7, sp, #8
 800dc30:	60f8      	str	r0, [r7, #12]
 800dc32:	60b9      	str	r1, [r7, #8]
 800dc34:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	330a      	adds	r3, #10
 800dc3a:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 800dc48:	4619      	mov	r1, r3
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	b29a      	uxth	r2, r3
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	9300      	str	r3, [sp, #0]
 800dc52:	4613      	mov	r3, r2
 800dc54:	68ba      	ldr	r2, [r7, #8]
 800dc56:	f7f7 f891 	bl	8004d7c <HAL_I2C_Master_Transmit>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800dc5e:	693b      	ldr	r3, [r7, #16]
}
 800dc60:	4618      	mov	r0, r3
 800dc62:	3718      	adds	r7, #24
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}

0800dc68 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b088      	sub	sp, #32
 800dc6c:	af02      	add	r7, sp, #8
 800dc6e:	60f8      	str	r0, [r7, #12]
 800dc70:	60b9      	str	r1, [r7, #8]
 800dc72:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	330a      	adds	r3, #10
 800dc78:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	f8d3 015c 	ldr.w	r0, [r3, #348]	@ 0x15c
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 800dc86:	f043 0301 	orr.w	r3, r3, #1
 800dc8a:	b2db      	uxtb	r3, r3
 800dc8c:	4619      	mov	r1, r3
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	b29a      	uxth	r2, r3
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	9300      	str	r3, [sp, #0]
 800dc96:	4613      	mov	r3, r2
 800dc98:	68ba      	ldr	r2, [r7, #8]
 800dc9a:	f7f7 f96d 	bl	8004f78 <HAL_I2C_Master_Receive>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800dca2:	693b      	ldr	r3, [r7, #16]
}
 800dca4:	4618      	mov	r0, r3
 800dca6:	3718      	adds	r7, #24
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}

0800dcac <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b086      	sub	sp, #24
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	60f8      	str	r0, [r7, #12]
 800dcb4:	607a      	str	r2, [r7, #4]
 800dcb6:	603b      	str	r3, [r7, #0]
 800dcb8:	460b      	mov	r3, r1
 800dcba:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	2b3f      	cmp	r3, #63	@ 0x3f
 800dcc4:	d902      	bls.n	800dccc <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800dcc6:	f06f 0303 	mvn.w	r3, #3
 800dcca:	e016      	b.n	800dcfa <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800dccc:	4a0d      	ldr	r2, [pc, #52]	@ (800dd04 <VL53L0X_WriteMulti+0x58>)
 800dcce:	7afb      	ldrb	r3, [r7, #11]
 800dcd0:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800dcd2:	683a      	ldr	r2, [r7, #0]
 800dcd4:	6879      	ldr	r1, [r7, #4]
 800dcd6:	480c      	ldr	r0, [pc, #48]	@ (800dd08 <VL53L0X_WriteMulti+0x5c>)
 800dcd8:	f001 f8ad 	bl	800ee36 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	3301      	adds	r3, #1
 800dce0:	461a      	mov	r2, r3
 800dce2:	4908      	ldr	r1, [pc, #32]	@ (800dd04 <VL53L0X_WriteMulti+0x58>)
 800dce4:	68f8      	ldr	r0, [r7, #12]
 800dce6:	f7ff ffa0 	bl	800dc2a <_I2CWrite>
 800dcea:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800dcec:	693b      	ldr	r3, [r7, #16]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d001      	beq.n	800dcf6 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dcf2:	23ec      	movs	r3, #236	@ 0xec
 800dcf4:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800dcf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3718      	adds	r7, #24
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}
 800dd02:	bf00      	nop
 800dd04:	200008b0 	.word	0x200008b0
 800dd08:	200008b1 	.word	0x200008b1

0800dd0c <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b086      	sub	sp, #24
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	60f8      	str	r0, [r7, #12]
 800dd14:	607a      	str	r2, [r7, #4]
 800dd16:	603b      	str	r3, [r7, #0]
 800dd18:	460b      	mov	r3, r1
 800dd1a:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800dd20:	f107 030b 	add.w	r3, r7, #11
 800dd24:	2201      	movs	r2, #1
 800dd26:	4619      	mov	r1, r3
 800dd28:	68f8      	ldr	r0, [r7, #12]
 800dd2a:	f7ff ff7e 	bl	800dc2a <_I2CWrite>
 800dd2e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d002      	beq.n	800dd3c <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dd36:	23ec      	movs	r3, #236	@ 0xec
 800dd38:	75fb      	strb	r3, [r7, #23]
        goto done;
 800dd3a:	e00c      	b.n	800dd56 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800dd3c:	683a      	ldr	r2, [r7, #0]
 800dd3e:	6879      	ldr	r1, [r7, #4]
 800dd40:	68f8      	ldr	r0, [r7, #12]
 800dd42:	f7ff ff91 	bl	800dc68 <_I2CRead>
 800dd46:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800dd48:	693b      	ldr	r3, [r7, #16]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d002      	beq.n	800dd54 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dd4e:	23ec      	movs	r3, #236	@ 0xec
 800dd50:	75fb      	strb	r3, [r7, #23]
 800dd52:	e000      	b.n	800dd56 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800dd54:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800dd56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	3718      	adds	r7, #24
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}
	...

0800dd64 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b084      	sub	sp, #16
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	70fb      	strb	r3, [r7, #3]
 800dd70:	4613      	mov	r3, r2
 800dd72:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dd74:	2300      	movs	r3, #0
 800dd76:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800dd78:	4a0b      	ldr	r2, [pc, #44]	@ (800dda8 <VL53L0X_WrByte+0x44>)
 800dd7a:	78fb      	ldrb	r3, [r7, #3]
 800dd7c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800dd7e:	4a0a      	ldr	r2, [pc, #40]	@ (800dda8 <VL53L0X_WrByte+0x44>)
 800dd80:	78bb      	ldrb	r3, [r7, #2]
 800dd82:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800dd84:	2202      	movs	r2, #2
 800dd86:	4908      	ldr	r1, [pc, #32]	@ (800dda8 <VL53L0X_WrByte+0x44>)
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f7ff ff4e 	bl	800dc2a <_I2CWrite>
 800dd8e:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d001      	beq.n	800dd9a <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dd96:	23ec      	movs	r3, #236	@ 0xec
 800dd98:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800dd9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3710      	adds	r7, #16
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}
 800dda6:	bf00      	nop
 800dda8:	200008b0 	.word	0x200008b0

0800ddac <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b084      	sub	sp, #16
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	460b      	mov	r3, r1
 800ddb6:	70fb      	strb	r3, [r7, #3]
 800ddb8:	4613      	mov	r3, r2
 800ddba:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800ddc0:	4a0e      	ldr	r2, [pc, #56]	@ (800ddfc <VL53L0X_WrWord+0x50>)
 800ddc2:	78fb      	ldrb	r3, [r7, #3]
 800ddc4:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800ddc6:	883b      	ldrh	r3, [r7, #0]
 800ddc8:	0a1b      	lsrs	r3, r3, #8
 800ddca:	b29b      	uxth	r3, r3
 800ddcc:	b2da      	uxtb	r2, r3
 800ddce:	4b0b      	ldr	r3, [pc, #44]	@ (800ddfc <VL53L0X_WrWord+0x50>)
 800ddd0:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800ddd2:	883b      	ldrh	r3, [r7, #0]
 800ddd4:	b2da      	uxtb	r2, r3
 800ddd6:	4b09      	ldr	r3, [pc, #36]	@ (800ddfc <VL53L0X_WrWord+0x50>)
 800ddd8:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800ddda:	2203      	movs	r2, #3
 800dddc:	4907      	ldr	r1, [pc, #28]	@ (800ddfc <VL53L0X_WrWord+0x50>)
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f7ff ff23 	bl	800dc2a <_I2CWrite>
 800dde4:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d001      	beq.n	800ddf0 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ddec:	23ec      	movs	r3, #236	@ 0xec
 800ddee:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ddf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	3710      	adds	r7, #16
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bd80      	pop	{r7, pc}
 800ddfc:	200008b0 	.word	0x200008b0

0800de00 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800de00:	b580      	push	{r7, lr}
 800de02:	b084      	sub	sp, #16
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
 800de08:	4608      	mov	r0, r1
 800de0a:	4611      	mov	r1, r2
 800de0c:	461a      	mov	r2, r3
 800de0e:	4603      	mov	r3, r0
 800de10:	70fb      	strb	r3, [r7, #3]
 800de12:	460b      	mov	r3, r1
 800de14:	70bb      	strb	r3, [r7, #2]
 800de16:	4613      	mov	r3, r2
 800de18:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800de1a:	2300      	movs	r3, #0
 800de1c:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800de1e:	f107 020e 	add.w	r2, r7, #14
 800de22:	78fb      	ldrb	r3, [r7, #3]
 800de24:	4619      	mov	r1, r3
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f000 f81e 	bl	800de68 <VL53L0X_RdByte>
 800de2c:	4603      	mov	r3, r0
 800de2e:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800de30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d110      	bne.n	800de5a <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800de38:	7bba      	ldrb	r2, [r7, #14]
 800de3a:	78bb      	ldrb	r3, [r7, #2]
 800de3c:	4013      	ands	r3, r2
 800de3e:	b2da      	uxtb	r2, r3
 800de40:	787b      	ldrb	r3, [r7, #1]
 800de42:	4313      	orrs	r3, r2
 800de44:	b2db      	uxtb	r3, r3
 800de46:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800de48:	7bba      	ldrb	r2, [r7, #14]
 800de4a:	78fb      	ldrb	r3, [r7, #3]
 800de4c:	4619      	mov	r1, r3
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f7ff ff88 	bl	800dd64 <VL53L0X_WrByte>
 800de54:	4603      	mov	r3, r0
 800de56:	73fb      	strb	r3, [r7, #15]
 800de58:	e000      	b.n	800de5c <VL53L0X_UpdateByte+0x5c>
        goto done;
 800de5a:	bf00      	nop
done:
    return Status;
 800de5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800de60:	4618      	mov	r0, r3
 800de62:	3710      	adds	r7, #16
 800de64:	46bd      	mov	sp, r7
 800de66:	bd80      	pop	{r7, pc}

0800de68 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800de68:	b580      	push	{r7, lr}
 800de6a:	b086      	sub	sp, #24
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	60f8      	str	r0, [r7, #12]
 800de70:	460b      	mov	r3, r1
 800de72:	607a      	str	r2, [r7, #4]
 800de74:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800de76:	2300      	movs	r3, #0
 800de78:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800de7a:	f107 030b 	add.w	r3, r7, #11
 800de7e:	2201      	movs	r2, #1
 800de80:	4619      	mov	r1, r3
 800de82:	68f8      	ldr	r0, [r7, #12]
 800de84:	f7ff fed1 	bl	800dc2a <_I2CWrite>
 800de88:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d002      	beq.n	800de96 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800de90:	23ec      	movs	r3, #236	@ 0xec
 800de92:	75fb      	strb	r3, [r7, #23]
        goto done;
 800de94:	e00c      	b.n	800deb0 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800de96:	2201      	movs	r2, #1
 800de98:	6879      	ldr	r1, [r7, #4]
 800de9a:	68f8      	ldr	r0, [r7, #12]
 800de9c:	f7ff fee4 	bl	800dc68 <_I2CRead>
 800dea0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800dea2:	693b      	ldr	r3, [r7, #16]
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d002      	beq.n	800deae <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dea8:	23ec      	movs	r3, #236	@ 0xec
 800deaa:	75fb      	strb	r3, [r7, #23]
 800deac:	e000      	b.n	800deb0 <VL53L0X_RdByte+0x48>
    }
done:
 800deae:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800deb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800deb4:	4618      	mov	r0, r3
 800deb6:	3718      	adds	r7, #24
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}

0800debc <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800debc:	b580      	push	{r7, lr}
 800debe:	b086      	sub	sp, #24
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	60f8      	str	r0, [r7, #12]
 800dec4:	460b      	mov	r3, r1
 800dec6:	607a      	str	r2, [r7, #4]
 800dec8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800deca:	2300      	movs	r3, #0
 800decc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800dece:	f107 030b 	add.w	r3, r7, #11
 800ded2:	2201      	movs	r2, #1
 800ded4:	4619      	mov	r1, r3
 800ded6:	68f8      	ldr	r0, [r7, #12]
 800ded8:	f7ff fea7 	bl	800dc2a <_I2CWrite>
 800dedc:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800dede:	693b      	ldr	r3, [r7, #16]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d002      	beq.n	800deea <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dee4:	23ec      	movs	r3, #236	@ 0xec
 800dee6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800dee8:	e015      	b.n	800df16 <VL53L0X_RdWord+0x5a>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800deea:	2202      	movs	r2, #2
 800deec:	490d      	ldr	r1, [pc, #52]	@ (800df24 <VL53L0X_RdWord+0x68>)
 800deee:	68f8      	ldr	r0, [r7, #12]
 800def0:	f7ff feba 	bl	800dc68 <_I2CRead>
 800def4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800def6:	693b      	ldr	r3, [r7, #16]
 800def8:	2b00      	cmp	r3, #0
 800defa:	d002      	beq.n	800df02 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800defc:	23ec      	movs	r3, #236	@ 0xec
 800defe:	75fb      	strb	r3, [r7, #23]
        goto done;
 800df00:	e009      	b.n	800df16 <VL53L0X_RdWord+0x5a>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800df02:	4b08      	ldr	r3, [pc, #32]	@ (800df24 <VL53L0X_RdWord+0x68>)
 800df04:	781b      	ldrb	r3, [r3, #0]
 800df06:	021b      	lsls	r3, r3, #8
 800df08:	b29b      	uxth	r3, r3
 800df0a:	4a06      	ldr	r2, [pc, #24]	@ (800df24 <VL53L0X_RdWord+0x68>)
 800df0c:	7852      	ldrb	r2, [r2, #1]
 800df0e:	4413      	add	r3, r2
 800df10:	b29a      	uxth	r2, r3
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800df16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3718      	adds	r7, #24
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}
 800df22:	bf00      	nop
 800df24:	200008b0 	.word	0x200008b0

0800df28 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800df28:	b580      	push	{r7, lr}
 800df2a:	b086      	sub	sp, #24
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	60f8      	str	r0, [r7, #12]
 800df30:	460b      	mov	r3, r1
 800df32:	607a      	str	r2, [r7, #4]
 800df34:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800df36:	2300      	movs	r3, #0
 800df38:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800df3a:	f107 030b 	add.w	r3, r7, #11
 800df3e:	2201      	movs	r2, #1
 800df40:	4619      	mov	r1, r3
 800df42:	68f8      	ldr	r0, [r7, #12]
 800df44:	f7ff fe71 	bl	800dc2a <_I2CWrite>
 800df48:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800df4a:	693b      	ldr	r3, [r7, #16]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d002      	beq.n	800df56 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800df50:	23ec      	movs	r3, #236	@ 0xec
 800df52:	75fb      	strb	r3, [r7, #23]
        goto done;
 800df54:	e01b      	b.n	800df8e <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800df56:	2204      	movs	r2, #4
 800df58:	4910      	ldr	r1, [pc, #64]	@ (800df9c <VL53L0X_RdDWord+0x74>)
 800df5a:	68f8      	ldr	r0, [r7, #12]
 800df5c:	f7ff fe84 	bl	800dc68 <_I2CRead>
 800df60:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d002      	beq.n	800df6e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800df68:	23ec      	movs	r3, #236	@ 0xec
 800df6a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800df6c:	e00f      	b.n	800df8e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800df6e:	4b0b      	ldr	r3, [pc, #44]	@ (800df9c <VL53L0X_RdDWord+0x74>)
 800df70:	781b      	ldrb	r3, [r3, #0]
 800df72:	061a      	lsls	r2, r3, #24
 800df74:	4b09      	ldr	r3, [pc, #36]	@ (800df9c <VL53L0X_RdDWord+0x74>)
 800df76:	785b      	ldrb	r3, [r3, #1]
 800df78:	041b      	lsls	r3, r3, #16
 800df7a:	441a      	add	r2, r3
 800df7c:	4b07      	ldr	r3, [pc, #28]	@ (800df9c <VL53L0X_RdDWord+0x74>)
 800df7e:	789b      	ldrb	r3, [r3, #2]
 800df80:	021b      	lsls	r3, r3, #8
 800df82:	4413      	add	r3, r2
 800df84:	4a05      	ldr	r2, [pc, #20]	@ (800df9c <VL53L0X_RdDWord+0x74>)
 800df86:	78d2      	ldrb	r2, [r2, #3]
 800df88:	441a      	add	r2, r3
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800df8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800df92:	4618      	mov	r0, r3
 800df94:	3718      	adds	r7, #24
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}
 800df9a:	bf00      	nop
 800df9c:	200008b0 	.word	0x200008b0

0800dfa0 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b084      	sub	sp, #16
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800dfa8:	2300      	movs	r3, #0
 800dfaa:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800dfac:	2002      	movs	r0, #2
 800dfae:	f7f6 fa91 	bl	80044d4 <HAL_Delay>
    return status;
 800dfb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	3710      	adds	r7, #16
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}

0800dfbe <_ZdlPvj>:
 800dfbe:	f000 b811 	b.w	800dfe4 <_ZdlPv>

0800dfc2 <_Znwj>:
 800dfc2:	2801      	cmp	r0, #1
 800dfc4:	bf38      	it	cc
 800dfc6:	2001      	movcc	r0, #1
 800dfc8:	b510      	push	{r4, lr}
 800dfca:	4604      	mov	r4, r0
 800dfcc:	4620      	mov	r0, r4
 800dfce:	f000 f81b 	bl	800e008 <malloc>
 800dfd2:	b100      	cbz	r0, 800dfd6 <_Znwj+0x14>
 800dfd4:	bd10      	pop	{r4, pc}
 800dfd6:	f000 f807 	bl	800dfe8 <_ZSt15get_new_handlerv>
 800dfda:	b908      	cbnz	r0, 800dfe0 <_Znwj+0x1e>
 800dfdc:	f000 f80c 	bl	800dff8 <abort>
 800dfe0:	4780      	blx	r0
 800dfe2:	e7f3      	b.n	800dfcc <_Znwj+0xa>

0800dfe4 <_ZdlPv>:
 800dfe4:	f000 b818 	b.w	800e018 <free>

0800dfe8 <_ZSt15get_new_handlerv>:
 800dfe8:	4b02      	ldr	r3, [pc, #8]	@ (800dff4 <_ZSt15get_new_handlerv+0xc>)
 800dfea:	6818      	ldr	r0, [r3, #0]
 800dfec:	f3bf 8f5b 	dmb	ish
 800dff0:	4770      	bx	lr
 800dff2:	bf00      	nop
 800dff4:	200008f0 	.word	0x200008f0

0800dff8 <abort>:
 800dff8:	b508      	push	{r3, lr}
 800dffa:	2006      	movs	r0, #6
 800dffc:	f000 fe70 	bl	800ece0 <raise>
 800e000:	2001      	movs	r0, #1
 800e002:	f7f6 f90b 	bl	800421c <_exit>
	...

0800e008 <malloc>:
 800e008:	4b02      	ldr	r3, [pc, #8]	@ (800e014 <malloc+0xc>)
 800e00a:	4601      	mov	r1, r0
 800e00c:	6818      	ldr	r0, [r3, #0]
 800e00e:	f000 b82d 	b.w	800e06c <_malloc_r>
 800e012:	bf00      	nop
 800e014:	200002d8 	.word	0x200002d8

0800e018 <free>:
 800e018:	4b02      	ldr	r3, [pc, #8]	@ (800e024 <free+0xc>)
 800e01a:	4601      	mov	r1, r0
 800e01c:	6818      	ldr	r0, [r3, #0]
 800e01e:	f001 bd67 	b.w	800faf0 <_free_r>
 800e022:	bf00      	nop
 800e024:	200002d8 	.word	0x200002d8

0800e028 <sbrk_aligned>:
 800e028:	b570      	push	{r4, r5, r6, lr}
 800e02a:	4e0f      	ldr	r6, [pc, #60]	@ (800e068 <sbrk_aligned+0x40>)
 800e02c:	460c      	mov	r4, r1
 800e02e:	6831      	ldr	r1, [r6, #0]
 800e030:	4605      	mov	r5, r0
 800e032:	b911      	cbnz	r1, 800e03a <sbrk_aligned+0x12>
 800e034:	f000 fea8 	bl	800ed88 <_sbrk_r>
 800e038:	6030      	str	r0, [r6, #0]
 800e03a:	4621      	mov	r1, r4
 800e03c:	4628      	mov	r0, r5
 800e03e:	f000 fea3 	bl	800ed88 <_sbrk_r>
 800e042:	1c43      	adds	r3, r0, #1
 800e044:	d103      	bne.n	800e04e <sbrk_aligned+0x26>
 800e046:	f04f 34ff 	mov.w	r4, #4294967295
 800e04a:	4620      	mov	r0, r4
 800e04c:	bd70      	pop	{r4, r5, r6, pc}
 800e04e:	1cc4      	adds	r4, r0, #3
 800e050:	f024 0403 	bic.w	r4, r4, #3
 800e054:	42a0      	cmp	r0, r4
 800e056:	d0f8      	beq.n	800e04a <sbrk_aligned+0x22>
 800e058:	1a21      	subs	r1, r4, r0
 800e05a:	4628      	mov	r0, r5
 800e05c:	f000 fe94 	bl	800ed88 <_sbrk_r>
 800e060:	3001      	adds	r0, #1
 800e062:	d1f2      	bne.n	800e04a <sbrk_aligned+0x22>
 800e064:	e7ef      	b.n	800e046 <sbrk_aligned+0x1e>
 800e066:	bf00      	nop
 800e068:	200008f4 	.word	0x200008f4

0800e06c <_malloc_r>:
 800e06c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e070:	1ccd      	adds	r5, r1, #3
 800e072:	f025 0503 	bic.w	r5, r5, #3
 800e076:	3508      	adds	r5, #8
 800e078:	2d0c      	cmp	r5, #12
 800e07a:	bf38      	it	cc
 800e07c:	250c      	movcc	r5, #12
 800e07e:	2d00      	cmp	r5, #0
 800e080:	4606      	mov	r6, r0
 800e082:	db01      	blt.n	800e088 <_malloc_r+0x1c>
 800e084:	42a9      	cmp	r1, r5
 800e086:	d904      	bls.n	800e092 <_malloc_r+0x26>
 800e088:	230c      	movs	r3, #12
 800e08a:	6033      	str	r3, [r6, #0]
 800e08c:	2000      	movs	r0, #0
 800e08e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e092:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e168 <_malloc_r+0xfc>
 800e096:	f000 f869 	bl	800e16c <__malloc_lock>
 800e09a:	f8d8 3000 	ldr.w	r3, [r8]
 800e09e:	461c      	mov	r4, r3
 800e0a0:	bb44      	cbnz	r4, 800e0f4 <_malloc_r+0x88>
 800e0a2:	4629      	mov	r1, r5
 800e0a4:	4630      	mov	r0, r6
 800e0a6:	f7ff ffbf 	bl	800e028 <sbrk_aligned>
 800e0aa:	1c43      	adds	r3, r0, #1
 800e0ac:	4604      	mov	r4, r0
 800e0ae:	d158      	bne.n	800e162 <_malloc_r+0xf6>
 800e0b0:	f8d8 4000 	ldr.w	r4, [r8]
 800e0b4:	4627      	mov	r7, r4
 800e0b6:	2f00      	cmp	r7, #0
 800e0b8:	d143      	bne.n	800e142 <_malloc_r+0xd6>
 800e0ba:	2c00      	cmp	r4, #0
 800e0bc:	d04b      	beq.n	800e156 <_malloc_r+0xea>
 800e0be:	6823      	ldr	r3, [r4, #0]
 800e0c0:	4639      	mov	r1, r7
 800e0c2:	4630      	mov	r0, r6
 800e0c4:	eb04 0903 	add.w	r9, r4, r3
 800e0c8:	f000 fe5e 	bl	800ed88 <_sbrk_r>
 800e0cc:	4581      	cmp	r9, r0
 800e0ce:	d142      	bne.n	800e156 <_malloc_r+0xea>
 800e0d0:	6821      	ldr	r1, [r4, #0]
 800e0d2:	1a6d      	subs	r5, r5, r1
 800e0d4:	4629      	mov	r1, r5
 800e0d6:	4630      	mov	r0, r6
 800e0d8:	f7ff ffa6 	bl	800e028 <sbrk_aligned>
 800e0dc:	3001      	adds	r0, #1
 800e0de:	d03a      	beq.n	800e156 <_malloc_r+0xea>
 800e0e0:	6823      	ldr	r3, [r4, #0]
 800e0e2:	442b      	add	r3, r5
 800e0e4:	6023      	str	r3, [r4, #0]
 800e0e6:	f8d8 3000 	ldr.w	r3, [r8]
 800e0ea:	685a      	ldr	r2, [r3, #4]
 800e0ec:	bb62      	cbnz	r2, 800e148 <_malloc_r+0xdc>
 800e0ee:	f8c8 7000 	str.w	r7, [r8]
 800e0f2:	e00f      	b.n	800e114 <_malloc_r+0xa8>
 800e0f4:	6822      	ldr	r2, [r4, #0]
 800e0f6:	1b52      	subs	r2, r2, r5
 800e0f8:	d420      	bmi.n	800e13c <_malloc_r+0xd0>
 800e0fa:	2a0b      	cmp	r2, #11
 800e0fc:	d917      	bls.n	800e12e <_malloc_r+0xc2>
 800e0fe:	1961      	adds	r1, r4, r5
 800e100:	42a3      	cmp	r3, r4
 800e102:	6025      	str	r5, [r4, #0]
 800e104:	bf18      	it	ne
 800e106:	6059      	strne	r1, [r3, #4]
 800e108:	6863      	ldr	r3, [r4, #4]
 800e10a:	bf08      	it	eq
 800e10c:	f8c8 1000 	streq.w	r1, [r8]
 800e110:	5162      	str	r2, [r4, r5]
 800e112:	604b      	str	r3, [r1, #4]
 800e114:	4630      	mov	r0, r6
 800e116:	f000 f82f 	bl	800e178 <__malloc_unlock>
 800e11a:	f104 000b 	add.w	r0, r4, #11
 800e11e:	1d23      	adds	r3, r4, #4
 800e120:	f020 0007 	bic.w	r0, r0, #7
 800e124:	1ac2      	subs	r2, r0, r3
 800e126:	bf1c      	itt	ne
 800e128:	1a1b      	subne	r3, r3, r0
 800e12a:	50a3      	strne	r3, [r4, r2]
 800e12c:	e7af      	b.n	800e08e <_malloc_r+0x22>
 800e12e:	6862      	ldr	r2, [r4, #4]
 800e130:	42a3      	cmp	r3, r4
 800e132:	bf0c      	ite	eq
 800e134:	f8c8 2000 	streq.w	r2, [r8]
 800e138:	605a      	strne	r2, [r3, #4]
 800e13a:	e7eb      	b.n	800e114 <_malloc_r+0xa8>
 800e13c:	4623      	mov	r3, r4
 800e13e:	6864      	ldr	r4, [r4, #4]
 800e140:	e7ae      	b.n	800e0a0 <_malloc_r+0x34>
 800e142:	463c      	mov	r4, r7
 800e144:	687f      	ldr	r7, [r7, #4]
 800e146:	e7b6      	b.n	800e0b6 <_malloc_r+0x4a>
 800e148:	461a      	mov	r2, r3
 800e14a:	685b      	ldr	r3, [r3, #4]
 800e14c:	42a3      	cmp	r3, r4
 800e14e:	d1fb      	bne.n	800e148 <_malloc_r+0xdc>
 800e150:	2300      	movs	r3, #0
 800e152:	6053      	str	r3, [r2, #4]
 800e154:	e7de      	b.n	800e114 <_malloc_r+0xa8>
 800e156:	230c      	movs	r3, #12
 800e158:	6033      	str	r3, [r6, #0]
 800e15a:	4630      	mov	r0, r6
 800e15c:	f000 f80c 	bl	800e178 <__malloc_unlock>
 800e160:	e794      	b.n	800e08c <_malloc_r+0x20>
 800e162:	6005      	str	r5, [r0, #0]
 800e164:	e7d6      	b.n	800e114 <_malloc_r+0xa8>
 800e166:	bf00      	nop
 800e168:	200008f8 	.word	0x200008f8

0800e16c <__malloc_lock>:
 800e16c:	4801      	ldr	r0, [pc, #4]	@ (800e174 <__malloc_lock+0x8>)
 800e16e:	f000 be58 	b.w	800ee22 <__retarget_lock_acquire_recursive>
 800e172:	bf00      	nop
 800e174:	20000a3c 	.word	0x20000a3c

0800e178 <__malloc_unlock>:
 800e178:	4801      	ldr	r0, [pc, #4]	@ (800e180 <__malloc_unlock+0x8>)
 800e17a:	f000 be53 	b.w	800ee24 <__retarget_lock_release_recursive>
 800e17e:	bf00      	nop
 800e180:	20000a3c 	.word	0x20000a3c

0800e184 <__cvt>:
 800e184:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e188:	ec57 6b10 	vmov	r6, r7, d0
 800e18c:	2f00      	cmp	r7, #0
 800e18e:	460c      	mov	r4, r1
 800e190:	4619      	mov	r1, r3
 800e192:	463b      	mov	r3, r7
 800e194:	bfbb      	ittet	lt
 800e196:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e19a:	461f      	movlt	r7, r3
 800e19c:	2300      	movge	r3, #0
 800e19e:	232d      	movlt	r3, #45	@ 0x2d
 800e1a0:	700b      	strb	r3, [r1, #0]
 800e1a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e1a4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e1a8:	4691      	mov	r9, r2
 800e1aa:	f023 0820 	bic.w	r8, r3, #32
 800e1ae:	bfbc      	itt	lt
 800e1b0:	4632      	movlt	r2, r6
 800e1b2:	4616      	movlt	r6, r2
 800e1b4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e1b8:	d005      	beq.n	800e1c6 <__cvt+0x42>
 800e1ba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e1be:	d100      	bne.n	800e1c2 <__cvt+0x3e>
 800e1c0:	3401      	adds	r4, #1
 800e1c2:	2102      	movs	r1, #2
 800e1c4:	e000      	b.n	800e1c8 <__cvt+0x44>
 800e1c6:	2103      	movs	r1, #3
 800e1c8:	ab03      	add	r3, sp, #12
 800e1ca:	9301      	str	r3, [sp, #4]
 800e1cc:	ab02      	add	r3, sp, #8
 800e1ce:	9300      	str	r3, [sp, #0]
 800e1d0:	ec47 6b10 	vmov	d0, r6, r7
 800e1d4:	4653      	mov	r3, sl
 800e1d6:	4622      	mov	r2, r4
 800e1d8:	f000 fec6 	bl	800ef68 <_dtoa_r>
 800e1dc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e1e0:	4605      	mov	r5, r0
 800e1e2:	d119      	bne.n	800e218 <__cvt+0x94>
 800e1e4:	f019 0f01 	tst.w	r9, #1
 800e1e8:	d00e      	beq.n	800e208 <__cvt+0x84>
 800e1ea:	eb00 0904 	add.w	r9, r0, r4
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	4630      	mov	r0, r6
 800e1f4:	4639      	mov	r1, r7
 800e1f6:	f7f2 fc6f 	bl	8000ad8 <__aeabi_dcmpeq>
 800e1fa:	b108      	cbz	r0, 800e200 <__cvt+0x7c>
 800e1fc:	f8cd 900c 	str.w	r9, [sp, #12]
 800e200:	2230      	movs	r2, #48	@ 0x30
 800e202:	9b03      	ldr	r3, [sp, #12]
 800e204:	454b      	cmp	r3, r9
 800e206:	d31e      	bcc.n	800e246 <__cvt+0xc2>
 800e208:	9b03      	ldr	r3, [sp, #12]
 800e20a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e20c:	1b5b      	subs	r3, r3, r5
 800e20e:	4628      	mov	r0, r5
 800e210:	6013      	str	r3, [r2, #0]
 800e212:	b004      	add	sp, #16
 800e214:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e218:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e21c:	eb00 0904 	add.w	r9, r0, r4
 800e220:	d1e5      	bne.n	800e1ee <__cvt+0x6a>
 800e222:	7803      	ldrb	r3, [r0, #0]
 800e224:	2b30      	cmp	r3, #48	@ 0x30
 800e226:	d10a      	bne.n	800e23e <__cvt+0xba>
 800e228:	2200      	movs	r2, #0
 800e22a:	2300      	movs	r3, #0
 800e22c:	4630      	mov	r0, r6
 800e22e:	4639      	mov	r1, r7
 800e230:	f7f2 fc52 	bl	8000ad8 <__aeabi_dcmpeq>
 800e234:	b918      	cbnz	r0, 800e23e <__cvt+0xba>
 800e236:	f1c4 0401 	rsb	r4, r4, #1
 800e23a:	f8ca 4000 	str.w	r4, [sl]
 800e23e:	f8da 3000 	ldr.w	r3, [sl]
 800e242:	4499      	add	r9, r3
 800e244:	e7d3      	b.n	800e1ee <__cvt+0x6a>
 800e246:	1c59      	adds	r1, r3, #1
 800e248:	9103      	str	r1, [sp, #12]
 800e24a:	701a      	strb	r2, [r3, #0]
 800e24c:	e7d9      	b.n	800e202 <__cvt+0x7e>

0800e24e <__exponent>:
 800e24e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e250:	2900      	cmp	r1, #0
 800e252:	bfba      	itte	lt
 800e254:	4249      	neglt	r1, r1
 800e256:	232d      	movlt	r3, #45	@ 0x2d
 800e258:	232b      	movge	r3, #43	@ 0x2b
 800e25a:	2909      	cmp	r1, #9
 800e25c:	7002      	strb	r2, [r0, #0]
 800e25e:	7043      	strb	r3, [r0, #1]
 800e260:	dd29      	ble.n	800e2b6 <__exponent+0x68>
 800e262:	f10d 0307 	add.w	r3, sp, #7
 800e266:	461d      	mov	r5, r3
 800e268:	270a      	movs	r7, #10
 800e26a:	461a      	mov	r2, r3
 800e26c:	fbb1 f6f7 	udiv	r6, r1, r7
 800e270:	fb07 1416 	mls	r4, r7, r6, r1
 800e274:	3430      	adds	r4, #48	@ 0x30
 800e276:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e27a:	460c      	mov	r4, r1
 800e27c:	2c63      	cmp	r4, #99	@ 0x63
 800e27e:	f103 33ff 	add.w	r3, r3, #4294967295
 800e282:	4631      	mov	r1, r6
 800e284:	dcf1      	bgt.n	800e26a <__exponent+0x1c>
 800e286:	3130      	adds	r1, #48	@ 0x30
 800e288:	1e94      	subs	r4, r2, #2
 800e28a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e28e:	1c41      	adds	r1, r0, #1
 800e290:	4623      	mov	r3, r4
 800e292:	42ab      	cmp	r3, r5
 800e294:	d30a      	bcc.n	800e2ac <__exponent+0x5e>
 800e296:	f10d 0309 	add.w	r3, sp, #9
 800e29a:	1a9b      	subs	r3, r3, r2
 800e29c:	42ac      	cmp	r4, r5
 800e29e:	bf88      	it	hi
 800e2a0:	2300      	movhi	r3, #0
 800e2a2:	3302      	adds	r3, #2
 800e2a4:	4403      	add	r3, r0
 800e2a6:	1a18      	subs	r0, r3, r0
 800e2a8:	b003      	add	sp, #12
 800e2aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2ac:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e2b0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e2b4:	e7ed      	b.n	800e292 <__exponent+0x44>
 800e2b6:	2330      	movs	r3, #48	@ 0x30
 800e2b8:	3130      	adds	r1, #48	@ 0x30
 800e2ba:	7083      	strb	r3, [r0, #2]
 800e2bc:	70c1      	strb	r1, [r0, #3]
 800e2be:	1d03      	adds	r3, r0, #4
 800e2c0:	e7f1      	b.n	800e2a6 <__exponent+0x58>
	...

0800e2c4 <_printf_float>:
 800e2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c8:	b08d      	sub	sp, #52	@ 0x34
 800e2ca:	460c      	mov	r4, r1
 800e2cc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e2d0:	4616      	mov	r6, r2
 800e2d2:	461f      	mov	r7, r3
 800e2d4:	4605      	mov	r5, r0
 800e2d6:	f000 fd0b 	bl	800ecf0 <_localeconv_r>
 800e2da:	6803      	ldr	r3, [r0, #0]
 800e2dc:	9304      	str	r3, [sp, #16]
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f7f1 ffce 	bl	8000280 <strlen>
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e2e8:	f8d8 3000 	ldr.w	r3, [r8]
 800e2ec:	9005      	str	r0, [sp, #20]
 800e2ee:	3307      	adds	r3, #7
 800e2f0:	f023 0307 	bic.w	r3, r3, #7
 800e2f4:	f103 0208 	add.w	r2, r3, #8
 800e2f8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e2fc:	f8d4 b000 	ldr.w	fp, [r4]
 800e300:	f8c8 2000 	str.w	r2, [r8]
 800e304:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e308:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e30c:	9307      	str	r3, [sp, #28]
 800e30e:	f8cd 8018 	str.w	r8, [sp, #24]
 800e312:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e316:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e31a:	4b9c      	ldr	r3, [pc, #624]	@ (800e58c <_printf_float+0x2c8>)
 800e31c:	f04f 32ff 	mov.w	r2, #4294967295
 800e320:	f7f2 fc0c 	bl	8000b3c <__aeabi_dcmpun>
 800e324:	bb70      	cbnz	r0, 800e384 <_printf_float+0xc0>
 800e326:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e32a:	4b98      	ldr	r3, [pc, #608]	@ (800e58c <_printf_float+0x2c8>)
 800e32c:	f04f 32ff 	mov.w	r2, #4294967295
 800e330:	f7f2 fbe6 	bl	8000b00 <__aeabi_dcmple>
 800e334:	bb30      	cbnz	r0, 800e384 <_printf_float+0xc0>
 800e336:	2200      	movs	r2, #0
 800e338:	2300      	movs	r3, #0
 800e33a:	4640      	mov	r0, r8
 800e33c:	4649      	mov	r1, r9
 800e33e:	f7f2 fbd5 	bl	8000aec <__aeabi_dcmplt>
 800e342:	b110      	cbz	r0, 800e34a <_printf_float+0x86>
 800e344:	232d      	movs	r3, #45	@ 0x2d
 800e346:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e34a:	4a91      	ldr	r2, [pc, #580]	@ (800e590 <_printf_float+0x2cc>)
 800e34c:	4b91      	ldr	r3, [pc, #580]	@ (800e594 <_printf_float+0x2d0>)
 800e34e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e352:	bf94      	ite	ls
 800e354:	4690      	movls	r8, r2
 800e356:	4698      	movhi	r8, r3
 800e358:	2303      	movs	r3, #3
 800e35a:	6123      	str	r3, [r4, #16]
 800e35c:	f02b 0304 	bic.w	r3, fp, #4
 800e360:	6023      	str	r3, [r4, #0]
 800e362:	f04f 0900 	mov.w	r9, #0
 800e366:	9700      	str	r7, [sp, #0]
 800e368:	4633      	mov	r3, r6
 800e36a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e36c:	4621      	mov	r1, r4
 800e36e:	4628      	mov	r0, r5
 800e370:	f000 f9d2 	bl	800e718 <_printf_common>
 800e374:	3001      	adds	r0, #1
 800e376:	f040 808d 	bne.w	800e494 <_printf_float+0x1d0>
 800e37a:	f04f 30ff 	mov.w	r0, #4294967295
 800e37e:	b00d      	add	sp, #52	@ 0x34
 800e380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e384:	4642      	mov	r2, r8
 800e386:	464b      	mov	r3, r9
 800e388:	4640      	mov	r0, r8
 800e38a:	4649      	mov	r1, r9
 800e38c:	f7f2 fbd6 	bl	8000b3c <__aeabi_dcmpun>
 800e390:	b140      	cbz	r0, 800e3a4 <_printf_float+0xe0>
 800e392:	464b      	mov	r3, r9
 800e394:	2b00      	cmp	r3, #0
 800e396:	bfbc      	itt	lt
 800e398:	232d      	movlt	r3, #45	@ 0x2d
 800e39a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e39e:	4a7e      	ldr	r2, [pc, #504]	@ (800e598 <_printf_float+0x2d4>)
 800e3a0:	4b7e      	ldr	r3, [pc, #504]	@ (800e59c <_printf_float+0x2d8>)
 800e3a2:	e7d4      	b.n	800e34e <_printf_float+0x8a>
 800e3a4:	6863      	ldr	r3, [r4, #4]
 800e3a6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e3aa:	9206      	str	r2, [sp, #24]
 800e3ac:	1c5a      	adds	r2, r3, #1
 800e3ae:	d13b      	bne.n	800e428 <_printf_float+0x164>
 800e3b0:	2306      	movs	r3, #6
 800e3b2:	6063      	str	r3, [r4, #4]
 800e3b4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	6022      	str	r2, [r4, #0]
 800e3bc:	9303      	str	r3, [sp, #12]
 800e3be:	ab0a      	add	r3, sp, #40	@ 0x28
 800e3c0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e3c4:	ab09      	add	r3, sp, #36	@ 0x24
 800e3c6:	9300      	str	r3, [sp, #0]
 800e3c8:	6861      	ldr	r1, [r4, #4]
 800e3ca:	ec49 8b10 	vmov	d0, r8, r9
 800e3ce:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e3d2:	4628      	mov	r0, r5
 800e3d4:	f7ff fed6 	bl	800e184 <__cvt>
 800e3d8:	9b06      	ldr	r3, [sp, #24]
 800e3da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e3dc:	2b47      	cmp	r3, #71	@ 0x47
 800e3de:	4680      	mov	r8, r0
 800e3e0:	d129      	bne.n	800e436 <_printf_float+0x172>
 800e3e2:	1cc8      	adds	r0, r1, #3
 800e3e4:	db02      	blt.n	800e3ec <_printf_float+0x128>
 800e3e6:	6863      	ldr	r3, [r4, #4]
 800e3e8:	4299      	cmp	r1, r3
 800e3ea:	dd41      	ble.n	800e470 <_printf_float+0x1ac>
 800e3ec:	f1aa 0a02 	sub.w	sl, sl, #2
 800e3f0:	fa5f fa8a 	uxtb.w	sl, sl
 800e3f4:	3901      	subs	r1, #1
 800e3f6:	4652      	mov	r2, sl
 800e3f8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e3fc:	9109      	str	r1, [sp, #36]	@ 0x24
 800e3fe:	f7ff ff26 	bl	800e24e <__exponent>
 800e402:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e404:	1813      	adds	r3, r2, r0
 800e406:	2a01      	cmp	r2, #1
 800e408:	4681      	mov	r9, r0
 800e40a:	6123      	str	r3, [r4, #16]
 800e40c:	dc02      	bgt.n	800e414 <_printf_float+0x150>
 800e40e:	6822      	ldr	r2, [r4, #0]
 800e410:	07d2      	lsls	r2, r2, #31
 800e412:	d501      	bpl.n	800e418 <_printf_float+0x154>
 800e414:	3301      	adds	r3, #1
 800e416:	6123      	str	r3, [r4, #16]
 800e418:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d0a2      	beq.n	800e366 <_printf_float+0xa2>
 800e420:	232d      	movs	r3, #45	@ 0x2d
 800e422:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e426:	e79e      	b.n	800e366 <_printf_float+0xa2>
 800e428:	9a06      	ldr	r2, [sp, #24]
 800e42a:	2a47      	cmp	r2, #71	@ 0x47
 800e42c:	d1c2      	bne.n	800e3b4 <_printf_float+0xf0>
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d1c0      	bne.n	800e3b4 <_printf_float+0xf0>
 800e432:	2301      	movs	r3, #1
 800e434:	e7bd      	b.n	800e3b2 <_printf_float+0xee>
 800e436:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e43a:	d9db      	bls.n	800e3f4 <_printf_float+0x130>
 800e43c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e440:	d118      	bne.n	800e474 <_printf_float+0x1b0>
 800e442:	2900      	cmp	r1, #0
 800e444:	6863      	ldr	r3, [r4, #4]
 800e446:	dd0b      	ble.n	800e460 <_printf_float+0x19c>
 800e448:	6121      	str	r1, [r4, #16]
 800e44a:	b913      	cbnz	r3, 800e452 <_printf_float+0x18e>
 800e44c:	6822      	ldr	r2, [r4, #0]
 800e44e:	07d0      	lsls	r0, r2, #31
 800e450:	d502      	bpl.n	800e458 <_printf_float+0x194>
 800e452:	3301      	adds	r3, #1
 800e454:	440b      	add	r3, r1
 800e456:	6123      	str	r3, [r4, #16]
 800e458:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e45a:	f04f 0900 	mov.w	r9, #0
 800e45e:	e7db      	b.n	800e418 <_printf_float+0x154>
 800e460:	b913      	cbnz	r3, 800e468 <_printf_float+0x1a4>
 800e462:	6822      	ldr	r2, [r4, #0]
 800e464:	07d2      	lsls	r2, r2, #31
 800e466:	d501      	bpl.n	800e46c <_printf_float+0x1a8>
 800e468:	3302      	adds	r3, #2
 800e46a:	e7f4      	b.n	800e456 <_printf_float+0x192>
 800e46c:	2301      	movs	r3, #1
 800e46e:	e7f2      	b.n	800e456 <_printf_float+0x192>
 800e470:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800e474:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e476:	4299      	cmp	r1, r3
 800e478:	db05      	blt.n	800e486 <_printf_float+0x1c2>
 800e47a:	6823      	ldr	r3, [r4, #0]
 800e47c:	6121      	str	r1, [r4, #16]
 800e47e:	07d8      	lsls	r0, r3, #31
 800e480:	d5ea      	bpl.n	800e458 <_printf_float+0x194>
 800e482:	1c4b      	adds	r3, r1, #1
 800e484:	e7e7      	b.n	800e456 <_printf_float+0x192>
 800e486:	2900      	cmp	r1, #0
 800e488:	bfd4      	ite	le
 800e48a:	f1c1 0202 	rsble	r2, r1, #2
 800e48e:	2201      	movgt	r2, #1
 800e490:	4413      	add	r3, r2
 800e492:	e7e0      	b.n	800e456 <_printf_float+0x192>
 800e494:	6823      	ldr	r3, [r4, #0]
 800e496:	055a      	lsls	r2, r3, #21
 800e498:	d407      	bmi.n	800e4aa <_printf_float+0x1e6>
 800e49a:	6923      	ldr	r3, [r4, #16]
 800e49c:	4642      	mov	r2, r8
 800e49e:	4631      	mov	r1, r6
 800e4a0:	4628      	mov	r0, r5
 800e4a2:	47b8      	blx	r7
 800e4a4:	3001      	adds	r0, #1
 800e4a6:	d12b      	bne.n	800e500 <_printf_float+0x23c>
 800e4a8:	e767      	b.n	800e37a <_printf_float+0xb6>
 800e4aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e4ae:	f240 80dd 	bls.w	800e66c <_printf_float+0x3a8>
 800e4b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	f7f2 fb0d 	bl	8000ad8 <__aeabi_dcmpeq>
 800e4be:	2800      	cmp	r0, #0
 800e4c0:	d033      	beq.n	800e52a <_printf_float+0x266>
 800e4c2:	4a37      	ldr	r2, [pc, #220]	@ (800e5a0 <_printf_float+0x2dc>)
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	4631      	mov	r1, r6
 800e4c8:	4628      	mov	r0, r5
 800e4ca:	47b8      	blx	r7
 800e4cc:	3001      	adds	r0, #1
 800e4ce:	f43f af54 	beq.w	800e37a <_printf_float+0xb6>
 800e4d2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800e4d6:	4543      	cmp	r3, r8
 800e4d8:	db02      	blt.n	800e4e0 <_printf_float+0x21c>
 800e4da:	6823      	ldr	r3, [r4, #0]
 800e4dc:	07d8      	lsls	r0, r3, #31
 800e4de:	d50f      	bpl.n	800e500 <_printf_float+0x23c>
 800e4e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e4e4:	4631      	mov	r1, r6
 800e4e6:	4628      	mov	r0, r5
 800e4e8:	47b8      	blx	r7
 800e4ea:	3001      	adds	r0, #1
 800e4ec:	f43f af45 	beq.w	800e37a <_printf_float+0xb6>
 800e4f0:	f04f 0900 	mov.w	r9, #0
 800e4f4:	f108 38ff 	add.w	r8, r8, #4294967295
 800e4f8:	f104 0a1a 	add.w	sl, r4, #26
 800e4fc:	45c8      	cmp	r8, r9
 800e4fe:	dc09      	bgt.n	800e514 <_printf_float+0x250>
 800e500:	6823      	ldr	r3, [r4, #0]
 800e502:	079b      	lsls	r3, r3, #30
 800e504:	f100 8103 	bmi.w	800e70e <_printf_float+0x44a>
 800e508:	68e0      	ldr	r0, [r4, #12]
 800e50a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e50c:	4298      	cmp	r0, r3
 800e50e:	bfb8      	it	lt
 800e510:	4618      	movlt	r0, r3
 800e512:	e734      	b.n	800e37e <_printf_float+0xba>
 800e514:	2301      	movs	r3, #1
 800e516:	4652      	mov	r2, sl
 800e518:	4631      	mov	r1, r6
 800e51a:	4628      	mov	r0, r5
 800e51c:	47b8      	blx	r7
 800e51e:	3001      	adds	r0, #1
 800e520:	f43f af2b 	beq.w	800e37a <_printf_float+0xb6>
 800e524:	f109 0901 	add.w	r9, r9, #1
 800e528:	e7e8      	b.n	800e4fc <_printf_float+0x238>
 800e52a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	dc39      	bgt.n	800e5a4 <_printf_float+0x2e0>
 800e530:	4a1b      	ldr	r2, [pc, #108]	@ (800e5a0 <_printf_float+0x2dc>)
 800e532:	2301      	movs	r3, #1
 800e534:	4631      	mov	r1, r6
 800e536:	4628      	mov	r0, r5
 800e538:	47b8      	blx	r7
 800e53a:	3001      	adds	r0, #1
 800e53c:	f43f af1d 	beq.w	800e37a <_printf_float+0xb6>
 800e540:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800e544:	ea59 0303 	orrs.w	r3, r9, r3
 800e548:	d102      	bne.n	800e550 <_printf_float+0x28c>
 800e54a:	6823      	ldr	r3, [r4, #0]
 800e54c:	07d9      	lsls	r1, r3, #31
 800e54e:	d5d7      	bpl.n	800e500 <_printf_float+0x23c>
 800e550:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e554:	4631      	mov	r1, r6
 800e556:	4628      	mov	r0, r5
 800e558:	47b8      	blx	r7
 800e55a:	3001      	adds	r0, #1
 800e55c:	f43f af0d 	beq.w	800e37a <_printf_float+0xb6>
 800e560:	f04f 0a00 	mov.w	sl, #0
 800e564:	f104 0b1a 	add.w	fp, r4, #26
 800e568:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e56a:	425b      	negs	r3, r3
 800e56c:	4553      	cmp	r3, sl
 800e56e:	dc01      	bgt.n	800e574 <_printf_float+0x2b0>
 800e570:	464b      	mov	r3, r9
 800e572:	e793      	b.n	800e49c <_printf_float+0x1d8>
 800e574:	2301      	movs	r3, #1
 800e576:	465a      	mov	r2, fp
 800e578:	4631      	mov	r1, r6
 800e57a:	4628      	mov	r0, r5
 800e57c:	47b8      	blx	r7
 800e57e:	3001      	adds	r0, #1
 800e580:	f43f aefb 	beq.w	800e37a <_printf_float+0xb6>
 800e584:	f10a 0a01 	add.w	sl, sl, #1
 800e588:	e7ee      	b.n	800e568 <_printf_float+0x2a4>
 800e58a:	bf00      	nop
 800e58c:	7fefffff 	.word	0x7fefffff
 800e590:	08010e78 	.word	0x08010e78
 800e594:	08010e7c 	.word	0x08010e7c
 800e598:	08010e80 	.word	0x08010e80
 800e59c:	08010e84 	.word	0x08010e84
 800e5a0:	08010e88 	.word	0x08010e88
 800e5a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e5a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e5aa:	4553      	cmp	r3, sl
 800e5ac:	bfa8      	it	ge
 800e5ae:	4653      	movge	r3, sl
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	4699      	mov	r9, r3
 800e5b4:	dc36      	bgt.n	800e624 <_printf_float+0x360>
 800e5b6:	f04f 0b00 	mov.w	fp, #0
 800e5ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e5be:	f104 021a 	add.w	r2, r4, #26
 800e5c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800e5c4:	9306      	str	r3, [sp, #24]
 800e5c6:	eba3 0309 	sub.w	r3, r3, r9
 800e5ca:	455b      	cmp	r3, fp
 800e5cc:	dc31      	bgt.n	800e632 <_printf_float+0x36e>
 800e5ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5d0:	459a      	cmp	sl, r3
 800e5d2:	dc3a      	bgt.n	800e64a <_printf_float+0x386>
 800e5d4:	6823      	ldr	r3, [r4, #0]
 800e5d6:	07da      	lsls	r2, r3, #31
 800e5d8:	d437      	bmi.n	800e64a <_printf_float+0x386>
 800e5da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5dc:	ebaa 0903 	sub.w	r9, sl, r3
 800e5e0:	9b06      	ldr	r3, [sp, #24]
 800e5e2:	ebaa 0303 	sub.w	r3, sl, r3
 800e5e6:	4599      	cmp	r9, r3
 800e5e8:	bfa8      	it	ge
 800e5ea:	4699      	movge	r9, r3
 800e5ec:	f1b9 0f00 	cmp.w	r9, #0
 800e5f0:	dc33      	bgt.n	800e65a <_printf_float+0x396>
 800e5f2:	f04f 0800 	mov.w	r8, #0
 800e5f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e5fa:	f104 0b1a 	add.w	fp, r4, #26
 800e5fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e600:	ebaa 0303 	sub.w	r3, sl, r3
 800e604:	eba3 0309 	sub.w	r3, r3, r9
 800e608:	4543      	cmp	r3, r8
 800e60a:	f77f af79 	ble.w	800e500 <_printf_float+0x23c>
 800e60e:	2301      	movs	r3, #1
 800e610:	465a      	mov	r2, fp
 800e612:	4631      	mov	r1, r6
 800e614:	4628      	mov	r0, r5
 800e616:	47b8      	blx	r7
 800e618:	3001      	adds	r0, #1
 800e61a:	f43f aeae 	beq.w	800e37a <_printf_float+0xb6>
 800e61e:	f108 0801 	add.w	r8, r8, #1
 800e622:	e7ec      	b.n	800e5fe <_printf_float+0x33a>
 800e624:	4642      	mov	r2, r8
 800e626:	4631      	mov	r1, r6
 800e628:	4628      	mov	r0, r5
 800e62a:	47b8      	blx	r7
 800e62c:	3001      	adds	r0, #1
 800e62e:	d1c2      	bne.n	800e5b6 <_printf_float+0x2f2>
 800e630:	e6a3      	b.n	800e37a <_printf_float+0xb6>
 800e632:	2301      	movs	r3, #1
 800e634:	4631      	mov	r1, r6
 800e636:	4628      	mov	r0, r5
 800e638:	9206      	str	r2, [sp, #24]
 800e63a:	47b8      	blx	r7
 800e63c:	3001      	adds	r0, #1
 800e63e:	f43f ae9c 	beq.w	800e37a <_printf_float+0xb6>
 800e642:	9a06      	ldr	r2, [sp, #24]
 800e644:	f10b 0b01 	add.w	fp, fp, #1
 800e648:	e7bb      	b.n	800e5c2 <_printf_float+0x2fe>
 800e64a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e64e:	4631      	mov	r1, r6
 800e650:	4628      	mov	r0, r5
 800e652:	47b8      	blx	r7
 800e654:	3001      	adds	r0, #1
 800e656:	d1c0      	bne.n	800e5da <_printf_float+0x316>
 800e658:	e68f      	b.n	800e37a <_printf_float+0xb6>
 800e65a:	9a06      	ldr	r2, [sp, #24]
 800e65c:	464b      	mov	r3, r9
 800e65e:	4442      	add	r2, r8
 800e660:	4631      	mov	r1, r6
 800e662:	4628      	mov	r0, r5
 800e664:	47b8      	blx	r7
 800e666:	3001      	adds	r0, #1
 800e668:	d1c3      	bne.n	800e5f2 <_printf_float+0x32e>
 800e66a:	e686      	b.n	800e37a <_printf_float+0xb6>
 800e66c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800e670:	f1ba 0f01 	cmp.w	sl, #1
 800e674:	dc01      	bgt.n	800e67a <_printf_float+0x3b6>
 800e676:	07db      	lsls	r3, r3, #31
 800e678:	d536      	bpl.n	800e6e8 <_printf_float+0x424>
 800e67a:	2301      	movs	r3, #1
 800e67c:	4642      	mov	r2, r8
 800e67e:	4631      	mov	r1, r6
 800e680:	4628      	mov	r0, r5
 800e682:	47b8      	blx	r7
 800e684:	3001      	adds	r0, #1
 800e686:	f43f ae78 	beq.w	800e37a <_printf_float+0xb6>
 800e68a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e68e:	4631      	mov	r1, r6
 800e690:	4628      	mov	r0, r5
 800e692:	47b8      	blx	r7
 800e694:	3001      	adds	r0, #1
 800e696:	f43f ae70 	beq.w	800e37a <_printf_float+0xb6>
 800e69a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800e69e:	2200      	movs	r2, #0
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e6a6:	f7f2 fa17 	bl	8000ad8 <__aeabi_dcmpeq>
 800e6aa:	b9c0      	cbnz	r0, 800e6de <_printf_float+0x41a>
 800e6ac:	4653      	mov	r3, sl
 800e6ae:	f108 0201 	add.w	r2, r8, #1
 800e6b2:	4631      	mov	r1, r6
 800e6b4:	4628      	mov	r0, r5
 800e6b6:	47b8      	blx	r7
 800e6b8:	3001      	adds	r0, #1
 800e6ba:	d10c      	bne.n	800e6d6 <_printf_float+0x412>
 800e6bc:	e65d      	b.n	800e37a <_printf_float+0xb6>
 800e6be:	2301      	movs	r3, #1
 800e6c0:	465a      	mov	r2, fp
 800e6c2:	4631      	mov	r1, r6
 800e6c4:	4628      	mov	r0, r5
 800e6c6:	47b8      	blx	r7
 800e6c8:	3001      	adds	r0, #1
 800e6ca:	f43f ae56 	beq.w	800e37a <_printf_float+0xb6>
 800e6ce:	f108 0801 	add.w	r8, r8, #1
 800e6d2:	45d0      	cmp	r8, sl
 800e6d4:	dbf3      	blt.n	800e6be <_printf_float+0x3fa>
 800e6d6:	464b      	mov	r3, r9
 800e6d8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800e6dc:	e6df      	b.n	800e49e <_printf_float+0x1da>
 800e6de:	f04f 0800 	mov.w	r8, #0
 800e6e2:	f104 0b1a 	add.w	fp, r4, #26
 800e6e6:	e7f4      	b.n	800e6d2 <_printf_float+0x40e>
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	4642      	mov	r2, r8
 800e6ec:	e7e1      	b.n	800e6b2 <_printf_float+0x3ee>
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	464a      	mov	r2, r9
 800e6f2:	4631      	mov	r1, r6
 800e6f4:	4628      	mov	r0, r5
 800e6f6:	47b8      	blx	r7
 800e6f8:	3001      	adds	r0, #1
 800e6fa:	f43f ae3e 	beq.w	800e37a <_printf_float+0xb6>
 800e6fe:	f108 0801 	add.w	r8, r8, #1
 800e702:	68e3      	ldr	r3, [r4, #12]
 800e704:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e706:	1a5b      	subs	r3, r3, r1
 800e708:	4543      	cmp	r3, r8
 800e70a:	dcf0      	bgt.n	800e6ee <_printf_float+0x42a>
 800e70c:	e6fc      	b.n	800e508 <_printf_float+0x244>
 800e70e:	f04f 0800 	mov.w	r8, #0
 800e712:	f104 0919 	add.w	r9, r4, #25
 800e716:	e7f4      	b.n	800e702 <_printf_float+0x43e>

0800e718 <_printf_common>:
 800e718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e71c:	4616      	mov	r6, r2
 800e71e:	4698      	mov	r8, r3
 800e720:	688a      	ldr	r2, [r1, #8]
 800e722:	690b      	ldr	r3, [r1, #16]
 800e724:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e728:	4293      	cmp	r3, r2
 800e72a:	bfb8      	it	lt
 800e72c:	4613      	movlt	r3, r2
 800e72e:	6033      	str	r3, [r6, #0]
 800e730:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e734:	4607      	mov	r7, r0
 800e736:	460c      	mov	r4, r1
 800e738:	b10a      	cbz	r2, 800e73e <_printf_common+0x26>
 800e73a:	3301      	adds	r3, #1
 800e73c:	6033      	str	r3, [r6, #0]
 800e73e:	6823      	ldr	r3, [r4, #0]
 800e740:	0699      	lsls	r1, r3, #26
 800e742:	bf42      	ittt	mi
 800e744:	6833      	ldrmi	r3, [r6, #0]
 800e746:	3302      	addmi	r3, #2
 800e748:	6033      	strmi	r3, [r6, #0]
 800e74a:	6825      	ldr	r5, [r4, #0]
 800e74c:	f015 0506 	ands.w	r5, r5, #6
 800e750:	d106      	bne.n	800e760 <_printf_common+0x48>
 800e752:	f104 0a19 	add.w	sl, r4, #25
 800e756:	68e3      	ldr	r3, [r4, #12]
 800e758:	6832      	ldr	r2, [r6, #0]
 800e75a:	1a9b      	subs	r3, r3, r2
 800e75c:	42ab      	cmp	r3, r5
 800e75e:	dc26      	bgt.n	800e7ae <_printf_common+0x96>
 800e760:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e764:	6822      	ldr	r2, [r4, #0]
 800e766:	3b00      	subs	r3, #0
 800e768:	bf18      	it	ne
 800e76a:	2301      	movne	r3, #1
 800e76c:	0692      	lsls	r2, r2, #26
 800e76e:	d42b      	bmi.n	800e7c8 <_printf_common+0xb0>
 800e770:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e774:	4641      	mov	r1, r8
 800e776:	4638      	mov	r0, r7
 800e778:	47c8      	blx	r9
 800e77a:	3001      	adds	r0, #1
 800e77c:	d01e      	beq.n	800e7bc <_printf_common+0xa4>
 800e77e:	6823      	ldr	r3, [r4, #0]
 800e780:	6922      	ldr	r2, [r4, #16]
 800e782:	f003 0306 	and.w	r3, r3, #6
 800e786:	2b04      	cmp	r3, #4
 800e788:	bf02      	ittt	eq
 800e78a:	68e5      	ldreq	r5, [r4, #12]
 800e78c:	6833      	ldreq	r3, [r6, #0]
 800e78e:	1aed      	subeq	r5, r5, r3
 800e790:	68a3      	ldr	r3, [r4, #8]
 800e792:	bf0c      	ite	eq
 800e794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e798:	2500      	movne	r5, #0
 800e79a:	4293      	cmp	r3, r2
 800e79c:	bfc4      	itt	gt
 800e79e:	1a9b      	subgt	r3, r3, r2
 800e7a0:	18ed      	addgt	r5, r5, r3
 800e7a2:	2600      	movs	r6, #0
 800e7a4:	341a      	adds	r4, #26
 800e7a6:	42b5      	cmp	r5, r6
 800e7a8:	d11a      	bne.n	800e7e0 <_printf_common+0xc8>
 800e7aa:	2000      	movs	r0, #0
 800e7ac:	e008      	b.n	800e7c0 <_printf_common+0xa8>
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	4652      	mov	r2, sl
 800e7b2:	4641      	mov	r1, r8
 800e7b4:	4638      	mov	r0, r7
 800e7b6:	47c8      	blx	r9
 800e7b8:	3001      	adds	r0, #1
 800e7ba:	d103      	bne.n	800e7c4 <_printf_common+0xac>
 800e7bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e7c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7c4:	3501      	adds	r5, #1
 800e7c6:	e7c6      	b.n	800e756 <_printf_common+0x3e>
 800e7c8:	18e1      	adds	r1, r4, r3
 800e7ca:	1c5a      	adds	r2, r3, #1
 800e7cc:	2030      	movs	r0, #48	@ 0x30
 800e7ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e7d2:	4422      	add	r2, r4
 800e7d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e7d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e7dc:	3302      	adds	r3, #2
 800e7de:	e7c7      	b.n	800e770 <_printf_common+0x58>
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	4622      	mov	r2, r4
 800e7e4:	4641      	mov	r1, r8
 800e7e6:	4638      	mov	r0, r7
 800e7e8:	47c8      	blx	r9
 800e7ea:	3001      	adds	r0, #1
 800e7ec:	d0e6      	beq.n	800e7bc <_printf_common+0xa4>
 800e7ee:	3601      	adds	r6, #1
 800e7f0:	e7d9      	b.n	800e7a6 <_printf_common+0x8e>
	...

0800e7f4 <_printf_i>:
 800e7f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e7f8:	7e0f      	ldrb	r7, [r1, #24]
 800e7fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e7fc:	2f78      	cmp	r7, #120	@ 0x78
 800e7fe:	4691      	mov	r9, r2
 800e800:	4680      	mov	r8, r0
 800e802:	460c      	mov	r4, r1
 800e804:	469a      	mov	sl, r3
 800e806:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e80a:	d807      	bhi.n	800e81c <_printf_i+0x28>
 800e80c:	2f62      	cmp	r7, #98	@ 0x62
 800e80e:	d80a      	bhi.n	800e826 <_printf_i+0x32>
 800e810:	2f00      	cmp	r7, #0
 800e812:	f000 80d2 	beq.w	800e9ba <_printf_i+0x1c6>
 800e816:	2f58      	cmp	r7, #88	@ 0x58
 800e818:	f000 80b9 	beq.w	800e98e <_printf_i+0x19a>
 800e81c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e820:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e824:	e03a      	b.n	800e89c <_printf_i+0xa8>
 800e826:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e82a:	2b15      	cmp	r3, #21
 800e82c:	d8f6      	bhi.n	800e81c <_printf_i+0x28>
 800e82e:	a101      	add	r1, pc, #4	@ (adr r1, 800e834 <_printf_i+0x40>)
 800e830:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e834:	0800e88d 	.word	0x0800e88d
 800e838:	0800e8a1 	.word	0x0800e8a1
 800e83c:	0800e81d 	.word	0x0800e81d
 800e840:	0800e81d 	.word	0x0800e81d
 800e844:	0800e81d 	.word	0x0800e81d
 800e848:	0800e81d 	.word	0x0800e81d
 800e84c:	0800e8a1 	.word	0x0800e8a1
 800e850:	0800e81d 	.word	0x0800e81d
 800e854:	0800e81d 	.word	0x0800e81d
 800e858:	0800e81d 	.word	0x0800e81d
 800e85c:	0800e81d 	.word	0x0800e81d
 800e860:	0800e9a1 	.word	0x0800e9a1
 800e864:	0800e8cb 	.word	0x0800e8cb
 800e868:	0800e95b 	.word	0x0800e95b
 800e86c:	0800e81d 	.word	0x0800e81d
 800e870:	0800e81d 	.word	0x0800e81d
 800e874:	0800e9c3 	.word	0x0800e9c3
 800e878:	0800e81d 	.word	0x0800e81d
 800e87c:	0800e8cb 	.word	0x0800e8cb
 800e880:	0800e81d 	.word	0x0800e81d
 800e884:	0800e81d 	.word	0x0800e81d
 800e888:	0800e963 	.word	0x0800e963
 800e88c:	6833      	ldr	r3, [r6, #0]
 800e88e:	1d1a      	adds	r2, r3, #4
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	6032      	str	r2, [r6, #0]
 800e894:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e898:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e89c:	2301      	movs	r3, #1
 800e89e:	e09d      	b.n	800e9dc <_printf_i+0x1e8>
 800e8a0:	6833      	ldr	r3, [r6, #0]
 800e8a2:	6820      	ldr	r0, [r4, #0]
 800e8a4:	1d19      	adds	r1, r3, #4
 800e8a6:	6031      	str	r1, [r6, #0]
 800e8a8:	0606      	lsls	r6, r0, #24
 800e8aa:	d501      	bpl.n	800e8b0 <_printf_i+0xbc>
 800e8ac:	681d      	ldr	r5, [r3, #0]
 800e8ae:	e003      	b.n	800e8b8 <_printf_i+0xc4>
 800e8b0:	0645      	lsls	r5, r0, #25
 800e8b2:	d5fb      	bpl.n	800e8ac <_printf_i+0xb8>
 800e8b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e8b8:	2d00      	cmp	r5, #0
 800e8ba:	da03      	bge.n	800e8c4 <_printf_i+0xd0>
 800e8bc:	232d      	movs	r3, #45	@ 0x2d
 800e8be:	426d      	negs	r5, r5
 800e8c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e8c4:	4859      	ldr	r0, [pc, #356]	@ (800ea2c <_printf_i+0x238>)
 800e8c6:	230a      	movs	r3, #10
 800e8c8:	e011      	b.n	800e8ee <_printf_i+0xfa>
 800e8ca:	6821      	ldr	r1, [r4, #0]
 800e8cc:	6833      	ldr	r3, [r6, #0]
 800e8ce:	0608      	lsls	r0, r1, #24
 800e8d0:	f853 5b04 	ldr.w	r5, [r3], #4
 800e8d4:	d402      	bmi.n	800e8dc <_printf_i+0xe8>
 800e8d6:	0649      	lsls	r1, r1, #25
 800e8d8:	bf48      	it	mi
 800e8da:	b2ad      	uxthmi	r5, r5
 800e8dc:	2f6f      	cmp	r7, #111	@ 0x6f
 800e8de:	4853      	ldr	r0, [pc, #332]	@ (800ea2c <_printf_i+0x238>)
 800e8e0:	6033      	str	r3, [r6, #0]
 800e8e2:	bf14      	ite	ne
 800e8e4:	230a      	movne	r3, #10
 800e8e6:	2308      	moveq	r3, #8
 800e8e8:	2100      	movs	r1, #0
 800e8ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e8ee:	6866      	ldr	r6, [r4, #4]
 800e8f0:	60a6      	str	r6, [r4, #8]
 800e8f2:	2e00      	cmp	r6, #0
 800e8f4:	bfa2      	ittt	ge
 800e8f6:	6821      	ldrge	r1, [r4, #0]
 800e8f8:	f021 0104 	bicge.w	r1, r1, #4
 800e8fc:	6021      	strge	r1, [r4, #0]
 800e8fe:	b90d      	cbnz	r5, 800e904 <_printf_i+0x110>
 800e900:	2e00      	cmp	r6, #0
 800e902:	d04b      	beq.n	800e99c <_printf_i+0x1a8>
 800e904:	4616      	mov	r6, r2
 800e906:	fbb5 f1f3 	udiv	r1, r5, r3
 800e90a:	fb03 5711 	mls	r7, r3, r1, r5
 800e90e:	5dc7      	ldrb	r7, [r0, r7]
 800e910:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e914:	462f      	mov	r7, r5
 800e916:	42bb      	cmp	r3, r7
 800e918:	460d      	mov	r5, r1
 800e91a:	d9f4      	bls.n	800e906 <_printf_i+0x112>
 800e91c:	2b08      	cmp	r3, #8
 800e91e:	d10b      	bne.n	800e938 <_printf_i+0x144>
 800e920:	6823      	ldr	r3, [r4, #0]
 800e922:	07df      	lsls	r7, r3, #31
 800e924:	d508      	bpl.n	800e938 <_printf_i+0x144>
 800e926:	6923      	ldr	r3, [r4, #16]
 800e928:	6861      	ldr	r1, [r4, #4]
 800e92a:	4299      	cmp	r1, r3
 800e92c:	bfde      	ittt	le
 800e92e:	2330      	movle	r3, #48	@ 0x30
 800e930:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e934:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e938:	1b92      	subs	r2, r2, r6
 800e93a:	6122      	str	r2, [r4, #16]
 800e93c:	f8cd a000 	str.w	sl, [sp]
 800e940:	464b      	mov	r3, r9
 800e942:	aa03      	add	r2, sp, #12
 800e944:	4621      	mov	r1, r4
 800e946:	4640      	mov	r0, r8
 800e948:	f7ff fee6 	bl	800e718 <_printf_common>
 800e94c:	3001      	adds	r0, #1
 800e94e:	d14a      	bne.n	800e9e6 <_printf_i+0x1f2>
 800e950:	f04f 30ff 	mov.w	r0, #4294967295
 800e954:	b004      	add	sp, #16
 800e956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e95a:	6823      	ldr	r3, [r4, #0]
 800e95c:	f043 0320 	orr.w	r3, r3, #32
 800e960:	6023      	str	r3, [r4, #0]
 800e962:	4833      	ldr	r0, [pc, #204]	@ (800ea30 <_printf_i+0x23c>)
 800e964:	2778      	movs	r7, #120	@ 0x78
 800e966:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e96a:	6823      	ldr	r3, [r4, #0]
 800e96c:	6831      	ldr	r1, [r6, #0]
 800e96e:	061f      	lsls	r7, r3, #24
 800e970:	f851 5b04 	ldr.w	r5, [r1], #4
 800e974:	d402      	bmi.n	800e97c <_printf_i+0x188>
 800e976:	065f      	lsls	r7, r3, #25
 800e978:	bf48      	it	mi
 800e97a:	b2ad      	uxthmi	r5, r5
 800e97c:	6031      	str	r1, [r6, #0]
 800e97e:	07d9      	lsls	r1, r3, #31
 800e980:	bf44      	itt	mi
 800e982:	f043 0320 	orrmi.w	r3, r3, #32
 800e986:	6023      	strmi	r3, [r4, #0]
 800e988:	b11d      	cbz	r5, 800e992 <_printf_i+0x19e>
 800e98a:	2310      	movs	r3, #16
 800e98c:	e7ac      	b.n	800e8e8 <_printf_i+0xf4>
 800e98e:	4827      	ldr	r0, [pc, #156]	@ (800ea2c <_printf_i+0x238>)
 800e990:	e7e9      	b.n	800e966 <_printf_i+0x172>
 800e992:	6823      	ldr	r3, [r4, #0]
 800e994:	f023 0320 	bic.w	r3, r3, #32
 800e998:	6023      	str	r3, [r4, #0]
 800e99a:	e7f6      	b.n	800e98a <_printf_i+0x196>
 800e99c:	4616      	mov	r6, r2
 800e99e:	e7bd      	b.n	800e91c <_printf_i+0x128>
 800e9a0:	6833      	ldr	r3, [r6, #0]
 800e9a2:	6825      	ldr	r5, [r4, #0]
 800e9a4:	6961      	ldr	r1, [r4, #20]
 800e9a6:	1d18      	adds	r0, r3, #4
 800e9a8:	6030      	str	r0, [r6, #0]
 800e9aa:	062e      	lsls	r6, r5, #24
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	d501      	bpl.n	800e9b4 <_printf_i+0x1c0>
 800e9b0:	6019      	str	r1, [r3, #0]
 800e9b2:	e002      	b.n	800e9ba <_printf_i+0x1c6>
 800e9b4:	0668      	lsls	r0, r5, #25
 800e9b6:	d5fb      	bpl.n	800e9b0 <_printf_i+0x1bc>
 800e9b8:	8019      	strh	r1, [r3, #0]
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	6123      	str	r3, [r4, #16]
 800e9be:	4616      	mov	r6, r2
 800e9c0:	e7bc      	b.n	800e93c <_printf_i+0x148>
 800e9c2:	6833      	ldr	r3, [r6, #0]
 800e9c4:	1d1a      	adds	r2, r3, #4
 800e9c6:	6032      	str	r2, [r6, #0]
 800e9c8:	681e      	ldr	r6, [r3, #0]
 800e9ca:	6862      	ldr	r2, [r4, #4]
 800e9cc:	2100      	movs	r1, #0
 800e9ce:	4630      	mov	r0, r6
 800e9d0:	f7f1 fc06 	bl	80001e0 <memchr>
 800e9d4:	b108      	cbz	r0, 800e9da <_printf_i+0x1e6>
 800e9d6:	1b80      	subs	r0, r0, r6
 800e9d8:	6060      	str	r0, [r4, #4]
 800e9da:	6863      	ldr	r3, [r4, #4]
 800e9dc:	6123      	str	r3, [r4, #16]
 800e9de:	2300      	movs	r3, #0
 800e9e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e9e4:	e7aa      	b.n	800e93c <_printf_i+0x148>
 800e9e6:	6923      	ldr	r3, [r4, #16]
 800e9e8:	4632      	mov	r2, r6
 800e9ea:	4649      	mov	r1, r9
 800e9ec:	4640      	mov	r0, r8
 800e9ee:	47d0      	blx	sl
 800e9f0:	3001      	adds	r0, #1
 800e9f2:	d0ad      	beq.n	800e950 <_printf_i+0x15c>
 800e9f4:	6823      	ldr	r3, [r4, #0]
 800e9f6:	079b      	lsls	r3, r3, #30
 800e9f8:	d413      	bmi.n	800ea22 <_printf_i+0x22e>
 800e9fa:	68e0      	ldr	r0, [r4, #12]
 800e9fc:	9b03      	ldr	r3, [sp, #12]
 800e9fe:	4298      	cmp	r0, r3
 800ea00:	bfb8      	it	lt
 800ea02:	4618      	movlt	r0, r3
 800ea04:	e7a6      	b.n	800e954 <_printf_i+0x160>
 800ea06:	2301      	movs	r3, #1
 800ea08:	4632      	mov	r2, r6
 800ea0a:	4649      	mov	r1, r9
 800ea0c:	4640      	mov	r0, r8
 800ea0e:	47d0      	blx	sl
 800ea10:	3001      	adds	r0, #1
 800ea12:	d09d      	beq.n	800e950 <_printf_i+0x15c>
 800ea14:	3501      	adds	r5, #1
 800ea16:	68e3      	ldr	r3, [r4, #12]
 800ea18:	9903      	ldr	r1, [sp, #12]
 800ea1a:	1a5b      	subs	r3, r3, r1
 800ea1c:	42ab      	cmp	r3, r5
 800ea1e:	dcf2      	bgt.n	800ea06 <_printf_i+0x212>
 800ea20:	e7eb      	b.n	800e9fa <_printf_i+0x206>
 800ea22:	2500      	movs	r5, #0
 800ea24:	f104 0619 	add.w	r6, r4, #25
 800ea28:	e7f5      	b.n	800ea16 <_printf_i+0x222>
 800ea2a:	bf00      	nop
 800ea2c:	08010e8a 	.word	0x08010e8a
 800ea30:	08010e9b 	.word	0x08010e9b

0800ea34 <std>:
 800ea34:	2300      	movs	r3, #0
 800ea36:	b510      	push	{r4, lr}
 800ea38:	4604      	mov	r4, r0
 800ea3a:	e9c0 3300 	strd	r3, r3, [r0]
 800ea3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ea42:	6083      	str	r3, [r0, #8]
 800ea44:	8181      	strh	r1, [r0, #12]
 800ea46:	6643      	str	r3, [r0, #100]	@ 0x64
 800ea48:	81c2      	strh	r2, [r0, #14]
 800ea4a:	6183      	str	r3, [r0, #24]
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	2208      	movs	r2, #8
 800ea50:	305c      	adds	r0, #92	@ 0x5c
 800ea52:	f000 f914 	bl	800ec7e <memset>
 800ea56:	4b0d      	ldr	r3, [pc, #52]	@ (800ea8c <std+0x58>)
 800ea58:	6263      	str	r3, [r4, #36]	@ 0x24
 800ea5a:	4b0d      	ldr	r3, [pc, #52]	@ (800ea90 <std+0x5c>)
 800ea5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ea5e:	4b0d      	ldr	r3, [pc, #52]	@ (800ea94 <std+0x60>)
 800ea60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ea62:	4b0d      	ldr	r3, [pc, #52]	@ (800ea98 <std+0x64>)
 800ea64:	6323      	str	r3, [r4, #48]	@ 0x30
 800ea66:	4b0d      	ldr	r3, [pc, #52]	@ (800ea9c <std+0x68>)
 800ea68:	6224      	str	r4, [r4, #32]
 800ea6a:	429c      	cmp	r4, r3
 800ea6c:	d006      	beq.n	800ea7c <std+0x48>
 800ea6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ea72:	4294      	cmp	r4, r2
 800ea74:	d002      	beq.n	800ea7c <std+0x48>
 800ea76:	33d0      	adds	r3, #208	@ 0xd0
 800ea78:	429c      	cmp	r4, r3
 800ea7a:	d105      	bne.n	800ea88 <std+0x54>
 800ea7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ea80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea84:	f000 b9cc 	b.w	800ee20 <__retarget_lock_init_recursive>
 800ea88:	bd10      	pop	{r4, pc}
 800ea8a:	bf00      	nop
 800ea8c:	0800ebf9 	.word	0x0800ebf9
 800ea90:	0800ec1b 	.word	0x0800ec1b
 800ea94:	0800ec53 	.word	0x0800ec53
 800ea98:	0800ec77 	.word	0x0800ec77
 800ea9c:	200008fc 	.word	0x200008fc

0800eaa0 <stdio_exit_handler>:
 800eaa0:	4a02      	ldr	r2, [pc, #8]	@ (800eaac <stdio_exit_handler+0xc>)
 800eaa2:	4903      	ldr	r1, [pc, #12]	@ (800eab0 <stdio_exit_handler+0x10>)
 800eaa4:	4803      	ldr	r0, [pc, #12]	@ (800eab4 <stdio_exit_handler+0x14>)
 800eaa6:	f000 b869 	b.w	800eb7c <_fwalk_sglue>
 800eaaa:	bf00      	nop
 800eaac:	200002cc 	.word	0x200002cc
 800eab0:	08010641 	.word	0x08010641
 800eab4:	200002dc 	.word	0x200002dc

0800eab8 <cleanup_stdio>:
 800eab8:	6841      	ldr	r1, [r0, #4]
 800eaba:	4b0c      	ldr	r3, [pc, #48]	@ (800eaec <cleanup_stdio+0x34>)
 800eabc:	4299      	cmp	r1, r3
 800eabe:	b510      	push	{r4, lr}
 800eac0:	4604      	mov	r4, r0
 800eac2:	d001      	beq.n	800eac8 <cleanup_stdio+0x10>
 800eac4:	f001 fdbc 	bl	8010640 <_fflush_r>
 800eac8:	68a1      	ldr	r1, [r4, #8]
 800eaca:	4b09      	ldr	r3, [pc, #36]	@ (800eaf0 <cleanup_stdio+0x38>)
 800eacc:	4299      	cmp	r1, r3
 800eace:	d002      	beq.n	800ead6 <cleanup_stdio+0x1e>
 800ead0:	4620      	mov	r0, r4
 800ead2:	f001 fdb5 	bl	8010640 <_fflush_r>
 800ead6:	68e1      	ldr	r1, [r4, #12]
 800ead8:	4b06      	ldr	r3, [pc, #24]	@ (800eaf4 <cleanup_stdio+0x3c>)
 800eada:	4299      	cmp	r1, r3
 800eadc:	d004      	beq.n	800eae8 <cleanup_stdio+0x30>
 800eade:	4620      	mov	r0, r4
 800eae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eae4:	f001 bdac 	b.w	8010640 <_fflush_r>
 800eae8:	bd10      	pop	{r4, pc}
 800eaea:	bf00      	nop
 800eaec:	200008fc 	.word	0x200008fc
 800eaf0:	20000964 	.word	0x20000964
 800eaf4:	200009cc 	.word	0x200009cc

0800eaf8 <global_stdio_init.part.0>:
 800eaf8:	b510      	push	{r4, lr}
 800eafa:	4b0b      	ldr	r3, [pc, #44]	@ (800eb28 <global_stdio_init.part.0+0x30>)
 800eafc:	4c0b      	ldr	r4, [pc, #44]	@ (800eb2c <global_stdio_init.part.0+0x34>)
 800eafe:	4a0c      	ldr	r2, [pc, #48]	@ (800eb30 <global_stdio_init.part.0+0x38>)
 800eb00:	601a      	str	r2, [r3, #0]
 800eb02:	4620      	mov	r0, r4
 800eb04:	2200      	movs	r2, #0
 800eb06:	2104      	movs	r1, #4
 800eb08:	f7ff ff94 	bl	800ea34 <std>
 800eb0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800eb10:	2201      	movs	r2, #1
 800eb12:	2109      	movs	r1, #9
 800eb14:	f7ff ff8e 	bl	800ea34 <std>
 800eb18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800eb1c:	2202      	movs	r2, #2
 800eb1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb22:	2112      	movs	r1, #18
 800eb24:	f7ff bf86 	b.w	800ea34 <std>
 800eb28:	20000a34 	.word	0x20000a34
 800eb2c:	200008fc 	.word	0x200008fc
 800eb30:	0800eaa1 	.word	0x0800eaa1

0800eb34 <__sfp_lock_acquire>:
 800eb34:	4801      	ldr	r0, [pc, #4]	@ (800eb3c <__sfp_lock_acquire+0x8>)
 800eb36:	f000 b974 	b.w	800ee22 <__retarget_lock_acquire_recursive>
 800eb3a:	bf00      	nop
 800eb3c:	20000a3d 	.word	0x20000a3d

0800eb40 <__sfp_lock_release>:
 800eb40:	4801      	ldr	r0, [pc, #4]	@ (800eb48 <__sfp_lock_release+0x8>)
 800eb42:	f000 b96f 	b.w	800ee24 <__retarget_lock_release_recursive>
 800eb46:	bf00      	nop
 800eb48:	20000a3d 	.word	0x20000a3d

0800eb4c <__sinit>:
 800eb4c:	b510      	push	{r4, lr}
 800eb4e:	4604      	mov	r4, r0
 800eb50:	f7ff fff0 	bl	800eb34 <__sfp_lock_acquire>
 800eb54:	6a23      	ldr	r3, [r4, #32]
 800eb56:	b11b      	cbz	r3, 800eb60 <__sinit+0x14>
 800eb58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb5c:	f7ff bff0 	b.w	800eb40 <__sfp_lock_release>
 800eb60:	4b04      	ldr	r3, [pc, #16]	@ (800eb74 <__sinit+0x28>)
 800eb62:	6223      	str	r3, [r4, #32]
 800eb64:	4b04      	ldr	r3, [pc, #16]	@ (800eb78 <__sinit+0x2c>)
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d1f5      	bne.n	800eb58 <__sinit+0xc>
 800eb6c:	f7ff ffc4 	bl	800eaf8 <global_stdio_init.part.0>
 800eb70:	e7f2      	b.n	800eb58 <__sinit+0xc>
 800eb72:	bf00      	nop
 800eb74:	0800eab9 	.word	0x0800eab9
 800eb78:	20000a34 	.word	0x20000a34

0800eb7c <_fwalk_sglue>:
 800eb7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb80:	4607      	mov	r7, r0
 800eb82:	4688      	mov	r8, r1
 800eb84:	4614      	mov	r4, r2
 800eb86:	2600      	movs	r6, #0
 800eb88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800eb8c:	f1b9 0901 	subs.w	r9, r9, #1
 800eb90:	d505      	bpl.n	800eb9e <_fwalk_sglue+0x22>
 800eb92:	6824      	ldr	r4, [r4, #0]
 800eb94:	2c00      	cmp	r4, #0
 800eb96:	d1f7      	bne.n	800eb88 <_fwalk_sglue+0xc>
 800eb98:	4630      	mov	r0, r6
 800eb9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb9e:	89ab      	ldrh	r3, [r5, #12]
 800eba0:	2b01      	cmp	r3, #1
 800eba2:	d907      	bls.n	800ebb4 <_fwalk_sglue+0x38>
 800eba4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800eba8:	3301      	adds	r3, #1
 800ebaa:	d003      	beq.n	800ebb4 <_fwalk_sglue+0x38>
 800ebac:	4629      	mov	r1, r5
 800ebae:	4638      	mov	r0, r7
 800ebb0:	47c0      	blx	r8
 800ebb2:	4306      	orrs	r6, r0
 800ebb4:	3568      	adds	r5, #104	@ 0x68
 800ebb6:	e7e9      	b.n	800eb8c <_fwalk_sglue+0x10>

0800ebb8 <siprintf>:
 800ebb8:	b40e      	push	{r1, r2, r3}
 800ebba:	b500      	push	{lr}
 800ebbc:	b09c      	sub	sp, #112	@ 0x70
 800ebbe:	ab1d      	add	r3, sp, #116	@ 0x74
 800ebc0:	9002      	str	r0, [sp, #8]
 800ebc2:	9006      	str	r0, [sp, #24]
 800ebc4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ebc8:	4809      	ldr	r0, [pc, #36]	@ (800ebf0 <siprintf+0x38>)
 800ebca:	9107      	str	r1, [sp, #28]
 800ebcc:	9104      	str	r1, [sp, #16]
 800ebce:	4909      	ldr	r1, [pc, #36]	@ (800ebf4 <siprintf+0x3c>)
 800ebd0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebd4:	9105      	str	r1, [sp, #20]
 800ebd6:	6800      	ldr	r0, [r0, #0]
 800ebd8:	9301      	str	r3, [sp, #4]
 800ebda:	a902      	add	r1, sp, #8
 800ebdc:	f001 fbb0 	bl	8010340 <_svfiprintf_r>
 800ebe0:	9b02      	ldr	r3, [sp, #8]
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	701a      	strb	r2, [r3, #0]
 800ebe6:	b01c      	add	sp, #112	@ 0x70
 800ebe8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ebec:	b003      	add	sp, #12
 800ebee:	4770      	bx	lr
 800ebf0:	200002d8 	.word	0x200002d8
 800ebf4:	ffff0208 	.word	0xffff0208

0800ebf8 <__sread>:
 800ebf8:	b510      	push	{r4, lr}
 800ebfa:	460c      	mov	r4, r1
 800ebfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec00:	f000 f89c 	bl	800ed3c <_read_r>
 800ec04:	2800      	cmp	r0, #0
 800ec06:	bfab      	itete	ge
 800ec08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ec0a:	89a3      	ldrhlt	r3, [r4, #12]
 800ec0c:	181b      	addge	r3, r3, r0
 800ec0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ec12:	bfac      	ite	ge
 800ec14:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ec16:	81a3      	strhlt	r3, [r4, #12]
 800ec18:	bd10      	pop	{r4, pc}

0800ec1a <__swrite>:
 800ec1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec1e:	461f      	mov	r7, r3
 800ec20:	898b      	ldrh	r3, [r1, #12]
 800ec22:	05db      	lsls	r3, r3, #23
 800ec24:	4605      	mov	r5, r0
 800ec26:	460c      	mov	r4, r1
 800ec28:	4616      	mov	r6, r2
 800ec2a:	d505      	bpl.n	800ec38 <__swrite+0x1e>
 800ec2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec30:	2302      	movs	r3, #2
 800ec32:	2200      	movs	r2, #0
 800ec34:	f000 f870 	bl	800ed18 <_lseek_r>
 800ec38:	89a3      	ldrh	r3, [r4, #12]
 800ec3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ec3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ec42:	81a3      	strh	r3, [r4, #12]
 800ec44:	4632      	mov	r2, r6
 800ec46:	463b      	mov	r3, r7
 800ec48:	4628      	mov	r0, r5
 800ec4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec4e:	f000 b8ab 	b.w	800eda8 <_write_r>

0800ec52 <__sseek>:
 800ec52:	b510      	push	{r4, lr}
 800ec54:	460c      	mov	r4, r1
 800ec56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec5a:	f000 f85d 	bl	800ed18 <_lseek_r>
 800ec5e:	1c43      	adds	r3, r0, #1
 800ec60:	89a3      	ldrh	r3, [r4, #12]
 800ec62:	bf15      	itete	ne
 800ec64:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ec66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ec6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ec6e:	81a3      	strheq	r3, [r4, #12]
 800ec70:	bf18      	it	ne
 800ec72:	81a3      	strhne	r3, [r4, #12]
 800ec74:	bd10      	pop	{r4, pc}

0800ec76 <__sclose>:
 800ec76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec7a:	f000 b83d 	b.w	800ecf8 <_close_r>

0800ec7e <memset>:
 800ec7e:	4402      	add	r2, r0
 800ec80:	4603      	mov	r3, r0
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d100      	bne.n	800ec88 <memset+0xa>
 800ec86:	4770      	bx	lr
 800ec88:	f803 1b01 	strb.w	r1, [r3], #1
 800ec8c:	e7f9      	b.n	800ec82 <memset+0x4>

0800ec8e <_raise_r>:
 800ec8e:	291f      	cmp	r1, #31
 800ec90:	b538      	push	{r3, r4, r5, lr}
 800ec92:	4605      	mov	r5, r0
 800ec94:	460c      	mov	r4, r1
 800ec96:	d904      	bls.n	800eca2 <_raise_r+0x14>
 800ec98:	2316      	movs	r3, #22
 800ec9a:	6003      	str	r3, [r0, #0]
 800ec9c:	f04f 30ff 	mov.w	r0, #4294967295
 800eca0:	bd38      	pop	{r3, r4, r5, pc}
 800eca2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800eca4:	b112      	cbz	r2, 800ecac <_raise_r+0x1e>
 800eca6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ecaa:	b94b      	cbnz	r3, 800ecc0 <_raise_r+0x32>
 800ecac:	4628      	mov	r0, r5
 800ecae:	f000 f869 	bl	800ed84 <_getpid_r>
 800ecb2:	4622      	mov	r2, r4
 800ecb4:	4601      	mov	r1, r0
 800ecb6:	4628      	mov	r0, r5
 800ecb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ecbc:	f000 b850 	b.w	800ed60 <_kill_r>
 800ecc0:	2b01      	cmp	r3, #1
 800ecc2:	d00a      	beq.n	800ecda <_raise_r+0x4c>
 800ecc4:	1c59      	adds	r1, r3, #1
 800ecc6:	d103      	bne.n	800ecd0 <_raise_r+0x42>
 800ecc8:	2316      	movs	r3, #22
 800ecca:	6003      	str	r3, [r0, #0]
 800eccc:	2001      	movs	r0, #1
 800ecce:	e7e7      	b.n	800eca0 <_raise_r+0x12>
 800ecd0:	2100      	movs	r1, #0
 800ecd2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ecd6:	4620      	mov	r0, r4
 800ecd8:	4798      	blx	r3
 800ecda:	2000      	movs	r0, #0
 800ecdc:	e7e0      	b.n	800eca0 <_raise_r+0x12>
	...

0800ece0 <raise>:
 800ece0:	4b02      	ldr	r3, [pc, #8]	@ (800ecec <raise+0xc>)
 800ece2:	4601      	mov	r1, r0
 800ece4:	6818      	ldr	r0, [r3, #0]
 800ece6:	f7ff bfd2 	b.w	800ec8e <_raise_r>
 800ecea:	bf00      	nop
 800ecec:	200002d8 	.word	0x200002d8

0800ecf0 <_localeconv_r>:
 800ecf0:	4800      	ldr	r0, [pc, #0]	@ (800ecf4 <_localeconv_r+0x4>)
 800ecf2:	4770      	bx	lr
 800ecf4:	20000418 	.word	0x20000418

0800ecf8 <_close_r>:
 800ecf8:	b538      	push	{r3, r4, r5, lr}
 800ecfa:	4d06      	ldr	r5, [pc, #24]	@ (800ed14 <_close_r+0x1c>)
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	4604      	mov	r4, r0
 800ed00:	4608      	mov	r0, r1
 800ed02:	602b      	str	r3, [r5, #0]
 800ed04:	f7f5 face 	bl	80042a4 <_close>
 800ed08:	1c43      	adds	r3, r0, #1
 800ed0a:	d102      	bne.n	800ed12 <_close_r+0x1a>
 800ed0c:	682b      	ldr	r3, [r5, #0]
 800ed0e:	b103      	cbz	r3, 800ed12 <_close_r+0x1a>
 800ed10:	6023      	str	r3, [r4, #0]
 800ed12:	bd38      	pop	{r3, r4, r5, pc}
 800ed14:	20000a38 	.word	0x20000a38

0800ed18 <_lseek_r>:
 800ed18:	b538      	push	{r3, r4, r5, lr}
 800ed1a:	4d07      	ldr	r5, [pc, #28]	@ (800ed38 <_lseek_r+0x20>)
 800ed1c:	4604      	mov	r4, r0
 800ed1e:	4608      	mov	r0, r1
 800ed20:	4611      	mov	r1, r2
 800ed22:	2200      	movs	r2, #0
 800ed24:	602a      	str	r2, [r5, #0]
 800ed26:	461a      	mov	r2, r3
 800ed28:	f7f5 fae3 	bl	80042f2 <_lseek>
 800ed2c:	1c43      	adds	r3, r0, #1
 800ed2e:	d102      	bne.n	800ed36 <_lseek_r+0x1e>
 800ed30:	682b      	ldr	r3, [r5, #0]
 800ed32:	b103      	cbz	r3, 800ed36 <_lseek_r+0x1e>
 800ed34:	6023      	str	r3, [r4, #0]
 800ed36:	bd38      	pop	{r3, r4, r5, pc}
 800ed38:	20000a38 	.word	0x20000a38

0800ed3c <_read_r>:
 800ed3c:	b538      	push	{r3, r4, r5, lr}
 800ed3e:	4d07      	ldr	r5, [pc, #28]	@ (800ed5c <_read_r+0x20>)
 800ed40:	4604      	mov	r4, r0
 800ed42:	4608      	mov	r0, r1
 800ed44:	4611      	mov	r1, r2
 800ed46:	2200      	movs	r2, #0
 800ed48:	602a      	str	r2, [r5, #0]
 800ed4a:	461a      	mov	r2, r3
 800ed4c:	f7f5 fa71 	bl	8004232 <_read>
 800ed50:	1c43      	adds	r3, r0, #1
 800ed52:	d102      	bne.n	800ed5a <_read_r+0x1e>
 800ed54:	682b      	ldr	r3, [r5, #0]
 800ed56:	b103      	cbz	r3, 800ed5a <_read_r+0x1e>
 800ed58:	6023      	str	r3, [r4, #0]
 800ed5a:	bd38      	pop	{r3, r4, r5, pc}
 800ed5c:	20000a38 	.word	0x20000a38

0800ed60 <_kill_r>:
 800ed60:	b538      	push	{r3, r4, r5, lr}
 800ed62:	4d07      	ldr	r5, [pc, #28]	@ (800ed80 <_kill_r+0x20>)
 800ed64:	2300      	movs	r3, #0
 800ed66:	4604      	mov	r4, r0
 800ed68:	4608      	mov	r0, r1
 800ed6a:	4611      	mov	r1, r2
 800ed6c:	602b      	str	r3, [r5, #0]
 800ed6e:	f7f5 fa45 	bl	80041fc <_kill>
 800ed72:	1c43      	adds	r3, r0, #1
 800ed74:	d102      	bne.n	800ed7c <_kill_r+0x1c>
 800ed76:	682b      	ldr	r3, [r5, #0]
 800ed78:	b103      	cbz	r3, 800ed7c <_kill_r+0x1c>
 800ed7a:	6023      	str	r3, [r4, #0]
 800ed7c:	bd38      	pop	{r3, r4, r5, pc}
 800ed7e:	bf00      	nop
 800ed80:	20000a38 	.word	0x20000a38

0800ed84 <_getpid_r>:
 800ed84:	f7f5 ba32 	b.w	80041ec <_getpid>

0800ed88 <_sbrk_r>:
 800ed88:	b538      	push	{r3, r4, r5, lr}
 800ed8a:	4d06      	ldr	r5, [pc, #24]	@ (800eda4 <_sbrk_r+0x1c>)
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	4604      	mov	r4, r0
 800ed90:	4608      	mov	r0, r1
 800ed92:	602b      	str	r3, [r5, #0]
 800ed94:	f7f5 faba 	bl	800430c <_sbrk>
 800ed98:	1c43      	adds	r3, r0, #1
 800ed9a:	d102      	bne.n	800eda2 <_sbrk_r+0x1a>
 800ed9c:	682b      	ldr	r3, [r5, #0]
 800ed9e:	b103      	cbz	r3, 800eda2 <_sbrk_r+0x1a>
 800eda0:	6023      	str	r3, [r4, #0]
 800eda2:	bd38      	pop	{r3, r4, r5, pc}
 800eda4:	20000a38 	.word	0x20000a38

0800eda8 <_write_r>:
 800eda8:	b538      	push	{r3, r4, r5, lr}
 800edaa:	4d07      	ldr	r5, [pc, #28]	@ (800edc8 <_write_r+0x20>)
 800edac:	4604      	mov	r4, r0
 800edae:	4608      	mov	r0, r1
 800edb0:	4611      	mov	r1, r2
 800edb2:	2200      	movs	r2, #0
 800edb4:	602a      	str	r2, [r5, #0]
 800edb6:	461a      	mov	r2, r3
 800edb8:	f7f5 fa58 	bl	800426c <_write>
 800edbc:	1c43      	adds	r3, r0, #1
 800edbe:	d102      	bne.n	800edc6 <_write_r+0x1e>
 800edc0:	682b      	ldr	r3, [r5, #0]
 800edc2:	b103      	cbz	r3, 800edc6 <_write_r+0x1e>
 800edc4:	6023      	str	r3, [r4, #0]
 800edc6:	bd38      	pop	{r3, r4, r5, pc}
 800edc8:	20000a38 	.word	0x20000a38

0800edcc <__errno>:
 800edcc:	4b01      	ldr	r3, [pc, #4]	@ (800edd4 <__errno+0x8>)
 800edce:	6818      	ldr	r0, [r3, #0]
 800edd0:	4770      	bx	lr
 800edd2:	bf00      	nop
 800edd4:	200002d8 	.word	0x200002d8

0800edd8 <__libc_init_array>:
 800edd8:	b570      	push	{r4, r5, r6, lr}
 800edda:	4d0d      	ldr	r5, [pc, #52]	@ (800ee10 <__libc_init_array+0x38>)
 800eddc:	4c0d      	ldr	r4, [pc, #52]	@ (800ee14 <__libc_init_array+0x3c>)
 800edde:	1b64      	subs	r4, r4, r5
 800ede0:	10a4      	asrs	r4, r4, #2
 800ede2:	2600      	movs	r6, #0
 800ede4:	42a6      	cmp	r6, r4
 800ede6:	d109      	bne.n	800edfc <__libc_init_array+0x24>
 800ede8:	4d0b      	ldr	r5, [pc, #44]	@ (800ee18 <__libc_init_array+0x40>)
 800edea:	4c0c      	ldr	r4, [pc, #48]	@ (800ee1c <__libc_init_array+0x44>)
 800edec:	f001 ff5e 	bl	8010cac <_init>
 800edf0:	1b64      	subs	r4, r4, r5
 800edf2:	10a4      	asrs	r4, r4, #2
 800edf4:	2600      	movs	r6, #0
 800edf6:	42a6      	cmp	r6, r4
 800edf8:	d105      	bne.n	800ee06 <__libc_init_array+0x2e>
 800edfa:	bd70      	pop	{r4, r5, r6, pc}
 800edfc:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee00:	4798      	blx	r3
 800ee02:	3601      	adds	r6, #1
 800ee04:	e7ee      	b.n	800ede4 <__libc_init_array+0xc>
 800ee06:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee0a:	4798      	blx	r3
 800ee0c:	3601      	adds	r6, #1
 800ee0e:	e7f2      	b.n	800edf6 <__libc_init_array+0x1e>
 800ee10:	080111f0 	.word	0x080111f0
 800ee14:	080111f0 	.word	0x080111f0
 800ee18:	080111f0 	.word	0x080111f0
 800ee1c:	080111f4 	.word	0x080111f4

0800ee20 <__retarget_lock_init_recursive>:
 800ee20:	4770      	bx	lr

0800ee22 <__retarget_lock_acquire_recursive>:
 800ee22:	4770      	bx	lr

0800ee24 <__retarget_lock_release_recursive>:
 800ee24:	4770      	bx	lr

0800ee26 <strcpy>:
 800ee26:	4603      	mov	r3, r0
 800ee28:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ee2c:	f803 2b01 	strb.w	r2, [r3], #1
 800ee30:	2a00      	cmp	r2, #0
 800ee32:	d1f9      	bne.n	800ee28 <strcpy+0x2>
 800ee34:	4770      	bx	lr

0800ee36 <memcpy>:
 800ee36:	440a      	add	r2, r1
 800ee38:	4291      	cmp	r1, r2
 800ee3a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee3e:	d100      	bne.n	800ee42 <memcpy+0xc>
 800ee40:	4770      	bx	lr
 800ee42:	b510      	push	{r4, lr}
 800ee44:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee48:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee4c:	4291      	cmp	r1, r2
 800ee4e:	d1f9      	bne.n	800ee44 <memcpy+0xe>
 800ee50:	bd10      	pop	{r4, pc}

0800ee52 <quorem>:
 800ee52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee56:	6903      	ldr	r3, [r0, #16]
 800ee58:	690c      	ldr	r4, [r1, #16]
 800ee5a:	42a3      	cmp	r3, r4
 800ee5c:	4607      	mov	r7, r0
 800ee5e:	db7e      	blt.n	800ef5e <quorem+0x10c>
 800ee60:	3c01      	subs	r4, #1
 800ee62:	f101 0814 	add.w	r8, r1, #20
 800ee66:	00a3      	lsls	r3, r4, #2
 800ee68:	f100 0514 	add.w	r5, r0, #20
 800ee6c:	9300      	str	r3, [sp, #0]
 800ee6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ee72:	9301      	str	r3, [sp, #4]
 800ee74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ee78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ee7c:	3301      	adds	r3, #1
 800ee7e:	429a      	cmp	r2, r3
 800ee80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ee84:	fbb2 f6f3 	udiv	r6, r2, r3
 800ee88:	d32e      	bcc.n	800eee8 <quorem+0x96>
 800ee8a:	f04f 0a00 	mov.w	sl, #0
 800ee8e:	46c4      	mov	ip, r8
 800ee90:	46ae      	mov	lr, r5
 800ee92:	46d3      	mov	fp, sl
 800ee94:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ee98:	b298      	uxth	r0, r3
 800ee9a:	fb06 a000 	mla	r0, r6, r0, sl
 800ee9e:	0c02      	lsrs	r2, r0, #16
 800eea0:	0c1b      	lsrs	r3, r3, #16
 800eea2:	fb06 2303 	mla	r3, r6, r3, r2
 800eea6:	f8de 2000 	ldr.w	r2, [lr]
 800eeaa:	b280      	uxth	r0, r0
 800eeac:	b292      	uxth	r2, r2
 800eeae:	1a12      	subs	r2, r2, r0
 800eeb0:	445a      	add	r2, fp
 800eeb2:	f8de 0000 	ldr.w	r0, [lr]
 800eeb6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800eeba:	b29b      	uxth	r3, r3
 800eebc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800eec0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800eec4:	b292      	uxth	r2, r2
 800eec6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800eeca:	45e1      	cmp	r9, ip
 800eecc:	f84e 2b04 	str.w	r2, [lr], #4
 800eed0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800eed4:	d2de      	bcs.n	800ee94 <quorem+0x42>
 800eed6:	9b00      	ldr	r3, [sp, #0]
 800eed8:	58eb      	ldr	r3, [r5, r3]
 800eeda:	b92b      	cbnz	r3, 800eee8 <quorem+0x96>
 800eedc:	9b01      	ldr	r3, [sp, #4]
 800eede:	3b04      	subs	r3, #4
 800eee0:	429d      	cmp	r5, r3
 800eee2:	461a      	mov	r2, r3
 800eee4:	d32f      	bcc.n	800ef46 <quorem+0xf4>
 800eee6:	613c      	str	r4, [r7, #16]
 800eee8:	4638      	mov	r0, r7
 800eeea:	f001 f8c5 	bl	8010078 <__mcmp>
 800eeee:	2800      	cmp	r0, #0
 800eef0:	db25      	blt.n	800ef3e <quorem+0xec>
 800eef2:	4629      	mov	r1, r5
 800eef4:	2000      	movs	r0, #0
 800eef6:	f858 2b04 	ldr.w	r2, [r8], #4
 800eefa:	f8d1 c000 	ldr.w	ip, [r1]
 800eefe:	fa1f fe82 	uxth.w	lr, r2
 800ef02:	fa1f f38c 	uxth.w	r3, ip
 800ef06:	eba3 030e 	sub.w	r3, r3, lr
 800ef0a:	4403      	add	r3, r0
 800ef0c:	0c12      	lsrs	r2, r2, #16
 800ef0e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ef12:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ef16:	b29b      	uxth	r3, r3
 800ef18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef1c:	45c1      	cmp	r9, r8
 800ef1e:	f841 3b04 	str.w	r3, [r1], #4
 800ef22:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ef26:	d2e6      	bcs.n	800eef6 <quorem+0xa4>
 800ef28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef30:	b922      	cbnz	r2, 800ef3c <quorem+0xea>
 800ef32:	3b04      	subs	r3, #4
 800ef34:	429d      	cmp	r5, r3
 800ef36:	461a      	mov	r2, r3
 800ef38:	d30b      	bcc.n	800ef52 <quorem+0x100>
 800ef3a:	613c      	str	r4, [r7, #16]
 800ef3c:	3601      	adds	r6, #1
 800ef3e:	4630      	mov	r0, r6
 800ef40:	b003      	add	sp, #12
 800ef42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef46:	6812      	ldr	r2, [r2, #0]
 800ef48:	3b04      	subs	r3, #4
 800ef4a:	2a00      	cmp	r2, #0
 800ef4c:	d1cb      	bne.n	800eee6 <quorem+0x94>
 800ef4e:	3c01      	subs	r4, #1
 800ef50:	e7c6      	b.n	800eee0 <quorem+0x8e>
 800ef52:	6812      	ldr	r2, [r2, #0]
 800ef54:	3b04      	subs	r3, #4
 800ef56:	2a00      	cmp	r2, #0
 800ef58:	d1ef      	bne.n	800ef3a <quorem+0xe8>
 800ef5a:	3c01      	subs	r4, #1
 800ef5c:	e7ea      	b.n	800ef34 <quorem+0xe2>
 800ef5e:	2000      	movs	r0, #0
 800ef60:	e7ee      	b.n	800ef40 <quorem+0xee>
 800ef62:	0000      	movs	r0, r0
 800ef64:	0000      	movs	r0, r0
	...

0800ef68 <_dtoa_r>:
 800ef68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef6c:	69c7      	ldr	r7, [r0, #28]
 800ef6e:	b099      	sub	sp, #100	@ 0x64
 800ef70:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ef74:	ec55 4b10 	vmov	r4, r5, d0
 800ef78:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ef7a:	9109      	str	r1, [sp, #36]	@ 0x24
 800ef7c:	4683      	mov	fp, r0
 800ef7e:	920e      	str	r2, [sp, #56]	@ 0x38
 800ef80:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ef82:	b97f      	cbnz	r7, 800efa4 <_dtoa_r+0x3c>
 800ef84:	2010      	movs	r0, #16
 800ef86:	f7ff f83f 	bl	800e008 <malloc>
 800ef8a:	4602      	mov	r2, r0
 800ef8c:	f8cb 001c 	str.w	r0, [fp, #28]
 800ef90:	b920      	cbnz	r0, 800ef9c <_dtoa_r+0x34>
 800ef92:	4ba7      	ldr	r3, [pc, #668]	@ (800f230 <_dtoa_r+0x2c8>)
 800ef94:	21ef      	movs	r1, #239	@ 0xef
 800ef96:	48a7      	ldr	r0, [pc, #668]	@ (800f234 <_dtoa_r+0x2cc>)
 800ef98:	f001 fb94 	bl	80106c4 <__assert_func>
 800ef9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800efa0:	6007      	str	r7, [r0, #0]
 800efa2:	60c7      	str	r7, [r0, #12]
 800efa4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800efa8:	6819      	ldr	r1, [r3, #0]
 800efaa:	b159      	cbz	r1, 800efc4 <_dtoa_r+0x5c>
 800efac:	685a      	ldr	r2, [r3, #4]
 800efae:	604a      	str	r2, [r1, #4]
 800efb0:	2301      	movs	r3, #1
 800efb2:	4093      	lsls	r3, r2
 800efb4:	608b      	str	r3, [r1, #8]
 800efb6:	4658      	mov	r0, fp
 800efb8:	f000 fe24 	bl	800fc04 <_Bfree>
 800efbc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800efc0:	2200      	movs	r2, #0
 800efc2:	601a      	str	r2, [r3, #0]
 800efc4:	1e2b      	subs	r3, r5, #0
 800efc6:	bfb9      	ittee	lt
 800efc8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800efcc:	9303      	strlt	r3, [sp, #12]
 800efce:	2300      	movge	r3, #0
 800efd0:	6033      	strge	r3, [r6, #0]
 800efd2:	9f03      	ldr	r7, [sp, #12]
 800efd4:	4b98      	ldr	r3, [pc, #608]	@ (800f238 <_dtoa_r+0x2d0>)
 800efd6:	bfbc      	itt	lt
 800efd8:	2201      	movlt	r2, #1
 800efda:	6032      	strlt	r2, [r6, #0]
 800efdc:	43bb      	bics	r3, r7
 800efde:	d112      	bne.n	800f006 <_dtoa_r+0x9e>
 800efe0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800efe2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800efe6:	6013      	str	r3, [r2, #0]
 800efe8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800efec:	4323      	orrs	r3, r4
 800efee:	f000 854d 	beq.w	800fa8c <_dtoa_r+0xb24>
 800eff2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800eff4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f24c <_dtoa_r+0x2e4>
 800eff8:	2b00      	cmp	r3, #0
 800effa:	f000 854f 	beq.w	800fa9c <_dtoa_r+0xb34>
 800effe:	f10a 0303 	add.w	r3, sl, #3
 800f002:	f000 bd49 	b.w	800fa98 <_dtoa_r+0xb30>
 800f006:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f00a:	2200      	movs	r2, #0
 800f00c:	ec51 0b17 	vmov	r0, r1, d7
 800f010:	2300      	movs	r3, #0
 800f012:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f016:	f7f1 fd5f 	bl	8000ad8 <__aeabi_dcmpeq>
 800f01a:	4680      	mov	r8, r0
 800f01c:	b158      	cbz	r0, 800f036 <_dtoa_r+0xce>
 800f01e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f020:	2301      	movs	r3, #1
 800f022:	6013      	str	r3, [r2, #0]
 800f024:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f026:	b113      	cbz	r3, 800f02e <_dtoa_r+0xc6>
 800f028:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f02a:	4b84      	ldr	r3, [pc, #528]	@ (800f23c <_dtoa_r+0x2d4>)
 800f02c:	6013      	str	r3, [r2, #0]
 800f02e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f250 <_dtoa_r+0x2e8>
 800f032:	f000 bd33 	b.w	800fa9c <_dtoa_r+0xb34>
 800f036:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f03a:	aa16      	add	r2, sp, #88	@ 0x58
 800f03c:	a917      	add	r1, sp, #92	@ 0x5c
 800f03e:	4658      	mov	r0, fp
 800f040:	f001 f8ca 	bl	80101d8 <__d2b>
 800f044:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f048:	4681      	mov	r9, r0
 800f04a:	2e00      	cmp	r6, #0
 800f04c:	d077      	beq.n	800f13e <_dtoa_r+0x1d6>
 800f04e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f050:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f054:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f058:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f05c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f060:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f064:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f068:	4619      	mov	r1, r3
 800f06a:	2200      	movs	r2, #0
 800f06c:	4b74      	ldr	r3, [pc, #464]	@ (800f240 <_dtoa_r+0x2d8>)
 800f06e:	f7f1 f913 	bl	8000298 <__aeabi_dsub>
 800f072:	a369      	add	r3, pc, #420	@ (adr r3, 800f218 <_dtoa_r+0x2b0>)
 800f074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f078:	f7f1 fac6 	bl	8000608 <__aeabi_dmul>
 800f07c:	a368      	add	r3, pc, #416	@ (adr r3, 800f220 <_dtoa_r+0x2b8>)
 800f07e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f082:	f7f1 f90b 	bl	800029c <__adddf3>
 800f086:	4604      	mov	r4, r0
 800f088:	4630      	mov	r0, r6
 800f08a:	460d      	mov	r5, r1
 800f08c:	f7f1 fa52 	bl	8000534 <__aeabi_i2d>
 800f090:	a365      	add	r3, pc, #404	@ (adr r3, 800f228 <_dtoa_r+0x2c0>)
 800f092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f096:	f7f1 fab7 	bl	8000608 <__aeabi_dmul>
 800f09a:	4602      	mov	r2, r0
 800f09c:	460b      	mov	r3, r1
 800f09e:	4620      	mov	r0, r4
 800f0a0:	4629      	mov	r1, r5
 800f0a2:	f7f1 f8fb 	bl	800029c <__adddf3>
 800f0a6:	4604      	mov	r4, r0
 800f0a8:	460d      	mov	r5, r1
 800f0aa:	f7f1 fd5d 	bl	8000b68 <__aeabi_d2iz>
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	4607      	mov	r7, r0
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	4620      	mov	r0, r4
 800f0b6:	4629      	mov	r1, r5
 800f0b8:	f7f1 fd18 	bl	8000aec <__aeabi_dcmplt>
 800f0bc:	b140      	cbz	r0, 800f0d0 <_dtoa_r+0x168>
 800f0be:	4638      	mov	r0, r7
 800f0c0:	f7f1 fa38 	bl	8000534 <__aeabi_i2d>
 800f0c4:	4622      	mov	r2, r4
 800f0c6:	462b      	mov	r3, r5
 800f0c8:	f7f1 fd06 	bl	8000ad8 <__aeabi_dcmpeq>
 800f0cc:	b900      	cbnz	r0, 800f0d0 <_dtoa_r+0x168>
 800f0ce:	3f01      	subs	r7, #1
 800f0d0:	2f16      	cmp	r7, #22
 800f0d2:	d851      	bhi.n	800f178 <_dtoa_r+0x210>
 800f0d4:	4b5b      	ldr	r3, [pc, #364]	@ (800f244 <_dtoa_r+0x2dc>)
 800f0d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f0e2:	f7f1 fd03 	bl	8000aec <__aeabi_dcmplt>
 800f0e6:	2800      	cmp	r0, #0
 800f0e8:	d048      	beq.n	800f17c <_dtoa_r+0x214>
 800f0ea:	3f01      	subs	r7, #1
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	9312      	str	r3, [sp, #72]	@ 0x48
 800f0f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f0f2:	1b9b      	subs	r3, r3, r6
 800f0f4:	1e5a      	subs	r2, r3, #1
 800f0f6:	bf44      	itt	mi
 800f0f8:	f1c3 0801 	rsbmi	r8, r3, #1
 800f0fc:	2300      	movmi	r3, #0
 800f0fe:	9208      	str	r2, [sp, #32]
 800f100:	bf54      	ite	pl
 800f102:	f04f 0800 	movpl.w	r8, #0
 800f106:	9308      	strmi	r3, [sp, #32]
 800f108:	2f00      	cmp	r7, #0
 800f10a:	db39      	blt.n	800f180 <_dtoa_r+0x218>
 800f10c:	9b08      	ldr	r3, [sp, #32]
 800f10e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f110:	443b      	add	r3, r7
 800f112:	9308      	str	r3, [sp, #32]
 800f114:	2300      	movs	r3, #0
 800f116:	930a      	str	r3, [sp, #40]	@ 0x28
 800f118:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f11a:	2b09      	cmp	r3, #9
 800f11c:	d864      	bhi.n	800f1e8 <_dtoa_r+0x280>
 800f11e:	2b05      	cmp	r3, #5
 800f120:	bfc4      	itt	gt
 800f122:	3b04      	subgt	r3, #4
 800f124:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f128:	f1a3 0302 	sub.w	r3, r3, #2
 800f12c:	bfcc      	ite	gt
 800f12e:	2400      	movgt	r4, #0
 800f130:	2401      	movle	r4, #1
 800f132:	2b03      	cmp	r3, #3
 800f134:	d863      	bhi.n	800f1fe <_dtoa_r+0x296>
 800f136:	e8df f003 	tbb	[pc, r3]
 800f13a:	372a      	.short	0x372a
 800f13c:	5535      	.short	0x5535
 800f13e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f142:	441e      	add	r6, r3
 800f144:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f148:	2b20      	cmp	r3, #32
 800f14a:	bfc1      	itttt	gt
 800f14c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f150:	409f      	lslgt	r7, r3
 800f152:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f156:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f15a:	bfd6      	itet	le
 800f15c:	f1c3 0320 	rsble	r3, r3, #32
 800f160:	ea47 0003 	orrgt.w	r0, r7, r3
 800f164:	fa04 f003 	lslle.w	r0, r4, r3
 800f168:	f7f1 f9d4 	bl	8000514 <__aeabi_ui2d>
 800f16c:	2201      	movs	r2, #1
 800f16e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f172:	3e01      	subs	r6, #1
 800f174:	9214      	str	r2, [sp, #80]	@ 0x50
 800f176:	e777      	b.n	800f068 <_dtoa_r+0x100>
 800f178:	2301      	movs	r3, #1
 800f17a:	e7b8      	b.n	800f0ee <_dtoa_r+0x186>
 800f17c:	9012      	str	r0, [sp, #72]	@ 0x48
 800f17e:	e7b7      	b.n	800f0f0 <_dtoa_r+0x188>
 800f180:	427b      	negs	r3, r7
 800f182:	930a      	str	r3, [sp, #40]	@ 0x28
 800f184:	2300      	movs	r3, #0
 800f186:	eba8 0807 	sub.w	r8, r8, r7
 800f18a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f18c:	e7c4      	b.n	800f118 <_dtoa_r+0x1b0>
 800f18e:	2300      	movs	r3, #0
 800f190:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f192:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f194:	2b00      	cmp	r3, #0
 800f196:	dc35      	bgt.n	800f204 <_dtoa_r+0x29c>
 800f198:	2301      	movs	r3, #1
 800f19a:	9300      	str	r3, [sp, #0]
 800f19c:	9307      	str	r3, [sp, #28]
 800f19e:	461a      	mov	r2, r3
 800f1a0:	920e      	str	r2, [sp, #56]	@ 0x38
 800f1a2:	e00b      	b.n	800f1bc <_dtoa_r+0x254>
 800f1a4:	2301      	movs	r3, #1
 800f1a6:	e7f3      	b.n	800f190 <_dtoa_r+0x228>
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f1ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1ae:	18fb      	adds	r3, r7, r3
 800f1b0:	9300      	str	r3, [sp, #0]
 800f1b2:	3301      	adds	r3, #1
 800f1b4:	2b01      	cmp	r3, #1
 800f1b6:	9307      	str	r3, [sp, #28]
 800f1b8:	bfb8      	it	lt
 800f1ba:	2301      	movlt	r3, #1
 800f1bc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f1c0:	2100      	movs	r1, #0
 800f1c2:	2204      	movs	r2, #4
 800f1c4:	f102 0514 	add.w	r5, r2, #20
 800f1c8:	429d      	cmp	r5, r3
 800f1ca:	d91f      	bls.n	800f20c <_dtoa_r+0x2a4>
 800f1cc:	6041      	str	r1, [r0, #4]
 800f1ce:	4658      	mov	r0, fp
 800f1d0:	f000 fcd8 	bl	800fb84 <_Balloc>
 800f1d4:	4682      	mov	sl, r0
 800f1d6:	2800      	cmp	r0, #0
 800f1d8:	d13c      	bne.n	800f254 <_dtoa_r+0x2ec>
 800f1da:	4b1b      	ldr	r3, [pc, #108]	@ (800f248 <_dtoa_r+0x2e0>)
 800f1dc:	4602      	mov	r2, r0
 800f1de:	f240 11af 	movw	r1, #431	@ 0x1af
 800f1e2:	e6d8      	b.n	800ef96 <_dtoa_r+0x2e>
 800f1e4:	2301      	movs	r3, #1
 800f1e6:	e7e0      	b.n	800f1aa <_dtoa_r+0x242>
 800f1e8:	2401      	movs	r4, #1
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800f1ee:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f1f0:	f04f 33ff 	mov.w	r3, #4294967295
 800f1f4:	9300      	str	r3, [sp, #0]
 800f1f6:	9307      	str	r3, [sp, #28]
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	2312      	movs	r3, #18
 800f1fc:	e7d0      	b.n	800f1a0 <_dtoa_r+0x238>
 800f1fe:	2301      	movs	r3, #1
 800f200:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f202:	e7f5      	b.n	800f1f0 <_dtoa_r+0x288>
 800f204:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f206:	9300      	str	r3, [sp, #0]
 800f208:	9307      	str	r3, [sp, #28]
 800f20a:	e7d7      	b.n	800f1bc <_dtoa_r+0x254>
 800f20c:	3101      	adds	r1, #1
 800f20e:	0052      	lsls	r2, r2, #1
 800f210:	e7d8      	b.n	800f1c4 <_dtoa_r+0x25c>
 800f212:	bf00      	nop
 800f214:	f3af 8000 	nop.w
 800f218:	636f4361 	.word	0x636f4361
 800f21c:	3fd287a7 	.word	0x3fd287a7
 800f220:	8b60c8b3 	.word	0x8b60c8b3
 800f224:	3fc68a28 	.word	0x3fc68a28
 800f228:	509f79fb 	.word	0x509f79fb
 800f22c:	3fd34413 	.word	0x3fd34413
 800f230:	08010eb9 	.word	0x08010eb9
 800f234:	08010ed0 	.word	0x08010ed0
 800f238:	7ff00000 	.word	0x7ff00000
 800f23c:	08010e89 	.word	0x08010e89
 800f240:	3ff80000 	.word	0x3ff80000
 800f244:	08010fc8 	.word	0x08010fc8
 800f248:	08010f28 	.word	0x08010f28
 800f24c:	08010eb5 	.word	0x08010eb5
 800f250:	08010e88 	.word	0x08010e88
 800f254:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f258:	6018      	str	r0, [r3, #0]
 800f25a:	9b07      	ldr	r3, [sp, #28]
 800f25c:	2b0e      	cmp	r3, #14
 800f25e:	f200 80a4 	bhi.w	800f3aa <_dtoa_r+0x442>
 800f262:	2c00      	cmp	r4, #0
 800f264:	f000 80a1 	beq.w	800f3aa <_dtoa_r+0x442>
 800f268:	2f00      	cmp	r7, #0
 800f26a:	dd33      	ble.n	800f2d4 <_dtoa_r+0x36c>
 800f26c:	4bad      	ldr	r3, [pc, #692]	@ (800f524 <_dtoa_r+0x5bc>)
 800f26e:	f007 020f 	and.w	r2, r7, #15
 800f272:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f276:	ed93 7b00 	vldr	d7, [r3]
 800f27a:	05f8      	lsls	r0, r7, #23
 800f27c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f280:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f284:	d516      	bpl.n	800f2b4 <_dtoa_r+0x34c>
 800f286:	4ba8      	ldr	r3, [pc, #672]	@ (800f528 <_dtoa_r+0x5c0>)
 800f288:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f28c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f290:	f7f1 fae4 	bl	800085c <__aeabi_ddiv>
 800f294:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f298:	f004 040f 	and.w	r4, r4, #15
 800f29c:	2603      	movs	r6, #3
 800f29e:	4da2      	ldr	r5, [pc, #648]	@ (800f528 <_dtoa_r+0x5c0>)
 800f2a0:	b954      	cbnz	r4, 800f2b8 <_dtoa_r+0x350>
 800f2a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f2a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f2aa:	f7f1 fad7 	bl	800085c <__aeabi_ddiv>
 800f2ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f2b2:	e028      	b.n	800f306 <_dtoa_r+0x39e>
 800f2b4:	2602      	movs	r6, #2
 800f2b6:	e7f2      	b.n	800f29e <_dtoa_r+0x336>
 800f2b8:	07e1      	lsls	r1, r4, #31
 800f2ba:	d508      	bpl.n	800f2ce <_dtoa_r+0x366>
 800f2bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f2c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f2c4:	f7f1 f9a0 	bl	8000608 <__aeabi_dmul>
 800f2c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f2cc:	3601      	adds	r6, #1
 800f2ce:	1064      	asrs	r4, r4, #1
 800f2d0:	3508      	adds	r5, #8
 800f2d2:	e7e5      	b.n	800f2a0 <_dtoa_r+0x338>
 800f2d4:	f000 80d2 	beq.w	800f47c <_dtoa_r+0x514>
 800f2d8:	427c      	negs	r4, r7
 800f2da:	4b92      	ldr	r3, [pc, #584]	@ (800f524 <_dtoa_r+0x5bc>)
 800f2dc:	4d92      	ldr	r5, [pc, #584]	@ (800f528 <_dtoa_r+0x5c0>)
 800f2de:	f004 020f 	and.w	r2, r4, #15
 800f2e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f2ee:	f7f1 f98b 	bl	8000608 <__aeabi_dmul>
 800f2f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f2f6:	1124      	asrs	r4, r4, #4
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	2602      	movs	r6, #2
 800f2fc:	2c00      	cmp	r4, #0
 800f2fe:	f040 80b2 	bne.w	800f466 <_dtoa_r+0x4fe>
 800f302:	2b00      	cmp	r3, #0
 800f304:	d1d3      	bne.n	800f2ae <_dtoa_r+0x346>
 800f306:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f308:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	f000 80b7 	beq.w	800f480 <_dtoa_r+0x518>
 800f312:	4b86      	ldr	r3, [pc, #536]	@ (800f52c <_dtoa_r+0x5c4>)
 800f314:	2200      	movs	r2, #0
 800f316:	4620      	mov	r0, r4
 800f318:	4629      	mov	r1, r5
 800f31a:	f7f1 fbe7 	bl	8000aec <__aeabi_dcmplt>
 800f31e:	2800      	cmp	r0, #0
 800f320:	f000 80ae 	beq.w	800f480 <_dtoa_r+0x518>
 800f324:	9b07      	ldr	r3, [sp, #28]
 800f326:	2b00      	cmp	r3, #0
 800f328:	f000 80aa 	beq.w	800f480 <_dtoa_r+0x518>
 800f32c:	9b00      	ldr	r3, [sp, #0]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	dd37      	ble.n	800f3a2 <_dtoa_r+0x43a>
 800f332:	1e7b      	subs	r3, r7, #1
 800f334:	9304      	str	r3, [sp, #16]
 800f336:	4620      	mov	r0, r4
 800f338:	4b7d      	ldr	r3, [pc, #500]	@ (800f530 <_dtoa_r+0x5c8>)
 800f33a:	2200      	movs	r2, #0
 800f33c:	4629      	mov	r1, r5
 800f33e:	f7f1 f963 	bl	8000608 <__aeabi_dmul>
 800f342:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f346:	9c00      	ldr	r4, [sp, #0]
 800f348:	3601      	adds	r6, #1
 800f34a:	4630      	mov	r0, r6
 800f34c:	f7f1 f8f2 	bl	8000534 <__aeabi_i2d>
 800f350:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f354:	f7f1 f958 	bl	8000608 <__aeabi_dmul>
 800f358:	4b76      	ldr	r3, [pc, #472]	@ (800f534 <_dtoa_r+0x5cc>)
 800f35a:	2200      	movs	r2, #0
 800f35c:	f7f0 ff9e 	bl	800029c <__adddf3>
 800f360:	4605      	mov	r5, r0
 800f362:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f366:	2c00      	cmp	r4, #0
 800f368:	f040 808d 	bne.w	800f486 <_dtoa_r+0x51e>
 800f36c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f370:	4b71      	ldr	r3, [pc, #452]	@ (800f538 <_dtoa_r+0x5d0>)
 800f372:	2200      	movs	r2, #0
 800f374:	f7f0 ff90 	bl	8000298 <__aeabi_dsub>
 800f378:	4602      	mov	r2, r0
 800f37a:	460b      	mov	r3, r1
 800f37c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f380:	462a      	mov	r2, r5
 800f382:	4633      	mov	r3, r6
 800f384:	f7f1 fbd0 	bl	8000b28 <__aeabi_dcmpgt>
 800f388:	2800      	cmp	r0, #0
 800f38a:	f040 828b 	bne.w	800f8a4 <_dtoa_r+0x93c>
 800f38e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f392:	462a      	mov	r2, r5
 800f394:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f398:	f7f1 fba8 	bl	8000aec <__aeabi_dcmplt>
 800f39c:	2800      	cmp	r0, #0
 800f39e:	f040 8128 	bne.w	800f5f2 <_dtoa_r+0x68a>
 800f3a2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f3a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f3aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	f2c0 815a 	blt.w	800f666 <_dtoa_r+0x6fe>
 800f3b2:	2f0e      	cmp	r7, #14
 800f3b4:	f300 8157 	bgt.w	800f666 <_dtoa_r+0x6fe>
 800f3b8:	4b5a      	ldr	r3, [pc, #360]	@ (800f524 <_dtoa_r+0x5bc>)
 800f3ba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f3be:	ed93 7b00 	vldr	d7, [r3]
 800f3c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	ed8d 7b00 	vstr	d7, [sp]
 800f3ca:	da03      	bge.n	800f3d4 <_dtoa_r+0x46c>
 800f3cc:	9b07      	ldr	r3, [sp, #28]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	f340 8101 	ble.w	800f5d6 <_dtoa_r+0x66e>
 800f3d4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f3d8:	4656      	mov	r6, sl
 800f3da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f3de:	4620      	mov	r0, r4
 800f3e0:	4629      	mov	r1, r5
 800f3e2:	f7f1 fa3b 	bl	800085c <__aeabi_ddiv>
 800f3e6:	f7f1 fbbf 	bl	8000b68 <__aeabi_d2iz>
 800f3ea:	4680      	mov	r8, r0
 800f3ec:	f7f1 f8a2 	bl	8000534 <__aeabi_i2d>
 800f3f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f3f4:	f7f1 f908 	bl	8000608 <__aeabi_dmul>
 800f3f8:	4602      	mov	r2, r0
 800f3fa:	460b      	mov	r3, r1
 800f3fc:	4620      	mov	r0, r4
 800f3fe:	4629      	mov	r1, r5
 800f400:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f404:	f7f0 ff48 	bl	8000298 <__aeabi_dsub>
 800f408:	f806 4b01 	strb.w	r4, [r6], #1
 800f40c:	9d07      	ldr	r5, [sp, #28]
 800f40e:	eba6 040a 	sub.w	r4, r6, sl
 800f412:	42a5      	cmp	r5, r4
 800f414:	4602      	mov	r2, r0
 800f416:	460b      	mov	r3, r1
 800f418:	f040 8117 	bne.w	800f64a <_dtoa_r+0x6e2>
 800f41c:	f7f0 ff3e 	bl	800029c <__adddf3>
 800f420:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f424:	4604      	mov	r4, r0
 800f426:	460d      	mov	r5, r1
 800f428:	f7f1 fb7e 	bl	8000b28 <__aeabi_dcmpgt>
 800f42c:	2800      	cmp	r0, #0
 800f42e:	f040 80f9 	bne.w	800f624 <_dtoa_r+0x6bc>
 800f432:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f436:	4620      	mov	r0, r4
 800f438:	4629      	mov	r1, r5
 800f43a:	f7f1 fb4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800f43e:	b118      	cbz	r0, 800f448 <_dtoa_r+0x4e0>
 800f440:	f018 0f01 	tst.w	r8, #1
 800f444:	f040 80ee 	bne.w	800f624 <_dtoa_r+0x6bc>
 800f448:	4649      	mov	r1, r9
 800f44a:	4658      	mov	r0, fp
 800f44c:	f000 fbda 	bl	800fc04 <_Bfree>
 800f450:	2300      	movs	r3, #0
 800f452:	7033      	strb	r3, [r6, #0]
 800f454:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f456:	3701      	adds	r7, #1
 800f458:	601f      	str	r7, [r3, #0]
 800f45a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	f000 831d 	beq.w	800fa9c <_dtoa_r+0xb34>
 800f462:	601e      	str	r6, [r3, #0]
 800f464:	e31a      	b.n	800fa9c <_dtoa_r+0xb34>
 800f466:	07e2      	lsls	r2, r4, #31
 800f468:	d505      	bpl.n	800f476 <_dtoa_r+0x50e>
 800f46a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f46e:	f7f1 f8cb 	bl	8000608 <__aeabi_dmul>
 800f472:	3601      	adds	r6, #1
 800f474:	2301      	movs	r3, #1
 800f476:	1064      	asrs	r4, r4, #1
 800f478:	3508      	adds	r5, #8
 800f47a:	e73f      	b.n	800f2fc <_dtoa_r+0x394>
 800f47c:	2602      	movs	r6, #2
 800f47e:	e742      	b.n	800f306 <_dtoa_r+0x39e>
 800f480:	9c07      	ldr	r4, [sp, #28]
 800f482:	9704      	str	r7, [sp, #16]
 800f484:	e761      	b.n	800f34a <_dtoa_r+0x3e2>
 800f486:	4b27      	ldr	r3, [pc, #156]	@ (800f524 <_dtoa_r+0x5bc>)
 800f488:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f48a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f48e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f492:	4454      	add	r4, sl
 800f494:	2900      	cmp	r1, #0
 800f496:	d053      	beq.n	800f540 <_dtoa_r+0x5d8>
 800f498:	4928      	ldr	r1, [pc, #160]	@ (800f53c <_dtoa_r+0x5d4>)
 800f49a:	2000      	movs	r0, #0
 800f49c:	f7f1 f9de 	bl	800085c <__aeabi_ddiv>
 800f4a0:	4633      	mov	r3, r6
 800f4a2:	462a      	mov	r2, r5
 800f4a4:	f7f0 fef8 	bl	8000298 <__aeabi_dsub>
 800f4a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f4ac:	4656      	mov	r6, sl
 800f4ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4b2:	f7f1 fb59 	bl	8000b68 <__aeabi_d2iz>
 800f4b6:	4605      	mov	r5, r0
 800f4b8:	f7f1 f83c 	bl	8000534 <__aeabi_i2d>
 800f4bc:	4602      	mov	r2, r0
 800f4be:	460b      	mov	r3, r1
 800f4c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4c4:	f7f0 fee8 	bl	8000298 <__aeabi_dsub>
 800f4c8:	3530      	adds	r5, #48	@ 0x30
 800f4ca:	4602      	mov	r2, r0
 800f4cc:	460b      	mov	r3, r1
 800f4ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f4d2:	f806 5b01 	strb.w	r5, [r6], #1
 800f4d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f4da:	f7f1 fb07 	bl	8000aec <__aeabi_dcmplt>
 800f4de:	2800      	cmp	r0, #0
 800f4e0:	d171      	bne.n	800f5c6 <_dtoa_r+0x65e>
 800f4e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f4e6:	4911      	ldr	r1, [pc, #68]	@ (800f52c <_dtoa_r+0x5c4>)
 800f4e8:	2000      	movs	r0, #0
 800f4ea:	f7f0 fed5 	bl	8000298 <__aeabi_dsub>
 800f4ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f4f2:	f7f1 fafb 	bl	8000aec <__aeabi_dcmplt>
 800f4f6:	2800      	cmp	r0, #0
 800f4f8:	f040 8095 	bne.w	800f626 <_dtoa_r+0x6be>
 800f4fc:	42a6      	cmp	r6, r4
 800f4fe:	f43f af50 	beq.w	800f3a2 <_dtoa_r+0x43a>
 800f502:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f506:	4b0a      	ldr	r3, [pc, #40]	@ (800f530 <_dtoa_r+0x5c8>)
 800f508:	2200      	movs	r2, #0
 800f50a:	f7f1 f87d 	bl	8000608 <__aeabi_dmul>
 800f50e:	4b08      	ldr	r3, [pc, #32]	@ (800f530 <_dtoa_r+0x5c8>)
 800f510:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f514:	2200      	movs	r2, #0
 800f516:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f51a:	f7f1 f875 	bl	8000608 <__aeabi_dmul>
 800f51e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f522:	e7c4      	b.n	800f4ae <_dtoa_r+0x546>
 800f524:	08010fc8 	.word	0x08010fc8
 800f528:	08010fa0 	.word	0x08010fa0
 800f52c:	3ff00000 	.word	0x3ff00000
 800f530:	40240000 	.word	0x40240000
 800f534:	401c0000 	.word	0x401c0000
 800f538:	40140000 	.word	0x40140000
 800f53c:	3fe00000 	.word	0x3fe00000
 800f540:	4631      	mov	r1, r6
 800f542:	4628      	mov	r0, r5
 800f544:	f7f1 f860 	bl	8000608 <__aeabi_dmul>
 800f548:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f54c:	9415      	str	r4, [sp, #84]	@ 0x54
 800f54e:	4656      	mov	r6, sl
 800f550:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f554:	f7f1 fb08 	bl	8000b68 <__aeabi_d2iz>
 800f558:	4605      	mov	r5, r0
 800f55a:	f7f0 ffeb 	bl	8000534 <__aeabi_i2d>
 800f55e:	4602      	mov	r2, r0
 800f560:	460b      	mov	r3, r1
 800f562:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f566:	f7f0 fe97 	bl	8000298 <__aeabi_dsub>
 800f56a:	3530      	adds	r5, #48	@ 0x30
 800f56c:	f806 5b01 	strb.w	r5, [r6], #1
 800f570:	4602      	mov	r2, r0
 800f572:	460b      	mov	r3, r1
 800f574:	42a6      	cmp	r6, r4
 800f576:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f57a:	f04f 0200 	mov.w	r2, #0
 800f57e:	d124      	bne.n	800f5ca <_dtoa_r+0x662>
 800f580:	4bac      	ldr	r3, [pc, #688]	@ (800f834 <_dtoa_r+0x8cc>)
 800f582:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f586:	f7f0 fe89 	bl	800029c <__adddf3>
 800f58a:	4602      	mov	r2, r0
 800f58c:	460b      	mov	r3, r1
 800f58e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f592:	f7f1 fac9 	bl	8000b28 <__aeabi_dcmpgt>
 800f596:	2800      	cmp	r0, #0
 800f598:	d145      	bne.n	800f626 <_dtoa_r+0x6be>
 800f59a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f59e:	49a5      	ldr	r1, [pc, #660]	@ (800f834 <_dtoa_r+0x8cc>)
 800f5a0:	2000      	movs	r0, #0
 800f5a2:	f7f0 fe79 	bl	8000298 <__aeabi_dsub>
 800f5a6:	4602      	mov	r2, r0
 800f5a8:	460b      	mov	r3, r1
 800f5aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5ae:	f7f1 fa9d 	bl	8000aec <__aeabi_dcmplt>
 800f5b2:	2800      	cmp	r0, #0
 800f5b4:	f43f aef5 	beq.w	800f3a2 <_dtoa_r+0x43a>
 800f5b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f5ba:	1e73      	subs	r3, r6, #1
 800f5bc:	9315      	str	r3, [sp, #84]	@ 0x54
 800f5be:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f5c2:	2b30      	cmp	r3, #48	@ 0x30
 800f5c4:	d0f8      	beq.n	800f5b8 <_dtoa_r+0x650>
 800f5c6:	9f04      	ldr	r7, [sp, #16]
 800f5c8:	e73e      	b.n	800f448 <_dtoa_r+0x4e0>
 800f5ca:	4b9b      	ldr	r3, [pc, #620]	@ (800f838 <_dtoa_r+0x8d0>)
 800f5cc:	f7f1 f81c 	bl	8000608 <__aeabi_dmul>
 800f5d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f5d4:	e7bc      	b.n	800f550 <_dtoa_r+0x5e8>
 800f5d6:	d10c      	bne.n	800f5f2 <_dtoa_r+0x68a>
 800f5d8:	4b98      	ldr	r3, [pc, #608]	@ (800f83c <_dtoa_r+0x8d4>)
 800f5da:	2200      	movs	r2, #0
 800f5dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f5e0:	f7f1 f812 	bl	8000608 <__aeabi_dmul>
 800f5e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f5e8:	f7f1 fa94 	bl	8000b14 <__aeabi_dcmpge>
 800f5ec:	2800      	cmp	r0, #0
 800f5ee:	f000 8157 	beq.w	800f8a0 <_dtoa_r+0x938>
 800f5f2:	2400      	movs	r4, #0
 800f5f4:	4625      	mov	r5, r4
 800f5f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f5f8:	43db      	mvns	r3, r3
 800f5fa:	9304      	str	r3, [sp, #16]
 800f5fc:	4656      	mov	r6, sl
 800f5fe:	2700      	movs	r7, #0
 800f600:	4621      	mov	r1, r4
 800f602:	4658      	mov	r0, fp
 800f604:	f000 fafe 	bl	800fc04 <_Bfree>
 800f608:	2d00      	cmp	r5, #0
 800f60a:	d0dc      	beq.n	800f5c6 <_dtoa_r+0x65e>
 800f60c:	b12f      	cbz	r7, 800f61a <_dtoa_r+0x6b2>
 800f60e:	42af      	cmp	r7, r5
 800f610:	d003      	beq.n	800f61a <_dtoa_r+0x6b2>
 800f612:	4639      	mov	r1, r7
 800f614:	4658      	mov	r0, fp
 800f616:	f000 faf5 	bl	800fc04 <_Bfree>
 800f61a:	4629      	mov	r1, r5
 800f61c:	4658      	mov	r0, fp
 800f61e:	f000 faf1 	bl	800fc04 <_Bfree>
 800f622:	e7d0      	b.n	800f5c6 <_dtoa_r+0x65e>
 800f624:	9704      	str	r7, [sp, #16]
 800f626:	4633      	mov	r3, r6
 800f628:	461e      	mov	r6, r3
 800f62a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f62e:	2a39      	cmp	r2, #57	@ 0x39
 800f630:	d107      	bne.n	800f642 <_dtoa_r+0x6da>
 800f632:	459a      	cmp	sl, r3
 800f634:	d1f8      	bne.n	800f628 <_dtoa_r+0x6c0>
 800f636:	9a04      	ldr	r2, [sp, #16]
 800f638:	3201      	adds	r2, #1
 800f63a:	9204      	str	r2, [sp, #16]
 800f63c:	2230      	movs	r2, #48	@ 0x30
 800f63e:	f88a 2000 	strb.w	r2, [sl]
 800f642:	781a      	ldrb	r2, [r3, #0]
 800f644:	3201      	adds	r2, #1
 800f646:	701a      	strb	r2, [r3, #0]
 800f648:	e7bd      	b.n	800f5c6 <_dtoa_r+0x65e>
 800f64a:	4b7b      	ldr	r3, [pc, #492]	@ (800f838 <_dtoa_r+0x8d0>)
 800f64c:	2200      	movs	r2, #0
 800f64e:	f7f0 ffdb 	bl	8000608 <__aeabi_dmul>
 800f652:	2200      	movs	r2, #0
 800f654:	2300      	movs	r3, #0
 800f656:	4604      	mov	r4, r0
 800f658:	460d      	mov	r5, r1
 800f65a:	f7f1 fa3d 	bl	8000ad8 <__aeabi_dcmpeq>
 800f65e:	2800      	cmp	r0, #0
 800f660:	f43f aebb 	beq.w	800f3da <_dtoa_r+0x472>
 800f664:	e6f0      	b.n	800f448 <_dtoa_r+0x4e0>
 800f666:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f668:	2a00      	cmp	r2, #0
 800f66a:	f000 80db 	beq.w	800f824 <_dtoa_r+0x8bc>
 800f66e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f670:	2a01      	cmp	r2, #1
 800f672:	f300 80bf 	bgt.w	800f7f4 <_dtoa_r+0x88c>
 800f676:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f678:	2a00      	cmp	r2, #0
 800f67a:	f000 80b7 	beq.w	800f7ec <_dtoa_r+0x884>
 800f67e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f682:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f684:	4646      	mov	r6, r8
 800f686:	9a08      	ldr	r2, [sp, #32]
 800f688:	2101      	movs	r1, #1
 800f68a:	441a      	add	r2, r3
 800f68c:	4658      	mov	r0, fp
 800f68e:	4498      	add	r8, r3
 800f690:	9208      	str	r2, [sp, #32]
 800f692:	f000 fb6b 	bl	800fd6c <__i2b>
 800f696:	4605      	mov	r5, r0
 800f698:	b15e      	cbz	r6, 800f6b2 <_dtoa_r+0x74a>
 800f69a:	9b08      	ldr	r3, [sp, #32]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	dd08      	ble.n	800f6b2 <_dtoa_r+0x74a>
 800f6a0:	42b3      	cmp	r3, r6
 800f6a2:	9a08      	ldr	r2, [sp, #32]
 800f6a4:	bfa8      	it	ge
 800f6a6:	4633      	movge	r3, r6
 800f6a8:	eba8 0803 	sub.w	r8, r8, r3
 800f6ac:	1af6      	subs	r6, r6, r3
 800f6ae:	1ad3      	subs	r3, r2, r3
 800f6b0:	9308      	str	r3, [sp, #32]
 800f6b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f6b4:	b1f3      	cbz	r3, 800f6f4 <_dtoa_r+0x78c>
 800f6b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	f000 80b7 	beq.w	800f82c <_dtoa_r+0x8c4>
 800f6be:	b18c      	cbz	r4, 800f6e4 <_dtoa_r+0x77c>
 800f6c0:	4629      	mov	r1, r5
 800f6c2:	4622      	mov	r2, r4
 800f6c4:	4658      	mov	r0, fp
 800f6c6:	f000 fc11 	bl	800feec <__pow5mult>
 800f6ca:	464a      	mov	r2, r9
 800f6cc:	4601      	mov	r1, r0
 800f6ce:	4605      	mov	r5, r0
 800f6d0:	4658      	mov	r0, fp
 800f6d2:	f000 fb61 	bl	800fd98 <__multiply>
 800f6d6:	4649      	mov	r1, r9
 800f6d8:	9004      	str	r0, [sp, #16]
 800f6da:	4658      	mov	r0, fp
 800f6dc:	f000 fa92 	bl	800fc04 <_Bfree>
 800f6e0:	9b04      	ldr	r3, [sp, #16]
 800f6e2:	4699      	mov	r9, r3
 800f6e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f6e6:	1b1a      	subs	r2, r3, r4
 800f6e8:	d004      	beq.n	800f6f4 <_dtoa_r+0x78c>
 800f6ea:	4649      	mov	r1, r9
 800f6ec:	4658      	mov	r0, fp
 800f6ee:	f000 fbfd 	bl	800feec <__pow5mult>
 800f6f2:	4681      	mov	r9, r0
 800f6f4:	2101      	movs	r1, #1
 800f6f6:	4658      	mov	r0, fp
 800f6f8:	f000 fb38 	bl	800fd6c <__i2b>
 800f6fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f6fe:	4604      	mov	r4, r0
 800f700:	2b00      	cmp	r3, #0
 800f702:	f000 81cf 	beq.w	800faa4 <_dtoa_r+0xb3c>
 800f706:	461a      	mov	r2, r3
 800f708:	4601      	mov	r1, r0
 800f70a:	4658      	mov	r0, fp
 800f70c:	f000 fbee 	bl	800feec <__pow5mult>
 800f710:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f712:	2b01      	cmp	r3, #1
 800f714:	4604      	mov	r4, r0
 800f716:	f300 8095 	bgt.w	800f844 <_dtoa_r+0x8dc>
 800f71a:	9b02      	ldr	r3, [sp, #8]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	f040 8087 	bne.w	800f830 <_dtoa_r+0x8c8>
 800f722:	9b03      	ldr	r3, [sp, #12]
 800f724:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f728:	2b00      	cmp	r3, #0
 800f72a:	f040 8089 	bne.w	800f840 <_dtoa_r+0x8d8>
 800f72e:	9b03      	ldr	r3, [sp, #12]
 800f730:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f734:	0d1b      	lsrs	r3, r3, #20
 800f736:	051b      	lsls	r3, r3, #20
 800f738:	b12b      	cbz	r3, 800f746 <_dtoa_r+0x7de>
 800f73a:	9b08      	ldr	r3, [sp, #32]
 800f73c:	3301      	adds	r3, #1
 800f73e:	9308      	str	r3, [sp, #32]
 800f740:	f108 0801 	add.w	r8, r8, #1
 800f744:	2301      	movs	r3, #1
 800f746:	930a      	str	r3, [sp, #40]	@ 0x28
 800f748:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	f000 81b0 	beq.w	800fab0 <_dtoa_r+0xb48>
 800f750:	6923      	ldr	r3, [r4, #16]
 800f752:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f756:	6918      	ldr	r0, [r3, #16]
 800f758:	f000 fabc 	bl	800fcd4 <__hi0bits>
 800f75c:	f1c0 0020 	rsb	r0, r0, #32
 800f760:	9b08      	ldr	r3, [sp, #32]
 800f762:	4418      	add	r0, r3
 800f764:	f010 001f 	ands.w	r0, r0, #31
 800f768:	d077      	beq.n	800f85a <_dtoa_r+0x8f2>
 800f76a:	f1c0 0320 	rsb	r3, r0, #32
 800f76e:	2b04      	cmp	r3, #4
 800f770:	dd6b      	ble.n	800f84a <_dtoa_r+0x8e2>
 800f772:	9b08      	ldr	r3, [sp, #32]
 800f774:	f1c0 001c 	rsb	r0, r0, #28
 800f778:	4403      	add	r3, r0
 800f77a:	4480      	add	r8, r0
 800f77c:	4406      	add	r6, r0
 800f77e:	9308      	str	r3, [sp, #32]
 800f780:	f1b8 0f00 	cmp.w	r8, #0
 800f784:	dd05      	ble.n	800f792 <_dtoa_r+0x82a>
 800f786:	4649      	mov	r1, r9
 800f788:	4642      	mov	r2, r8
 800f78a:	4658      	mov	r0, fp
 800f78c:	f000 fc08 	bl	800ffa0 <__lshift>
 800f790:	4681      	mov	r9, r0
 800f792:	9b08      	ldr	r3, [sp, #32]
 800f794:	2b00      	cmp	r3, #0
 800f796:	dd05      	ble.n	800f7a4 <_dtoa_r+0x83c>
 800f798:	4621      	mov	r1, r4
 800f79a:	461a      	mov	r2, r3
 800f79c:	4658      	mov	r0, fp
 800f79e:	f000 fbff 	bl	800ffa0 <__lshift>
 800f7a2:	4604      	mov	r4, r0
 800f7a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d059      	beq.n	800f85e <_dtoa_r+0x8f6>
 800f7aa:	4621      	mov	r1, r4
 800f7ac:	4648      	mov	r0, r9
 800f7ae:	f000 fc63 	bl	8010078 <__mcmp>
 800f7b2:	2800      	cmp	r0, #0
 800f7b4:	da53      	bge.n	800f85e <_dtoa_r+0x8f6>
 800f7b6:	1e7b      	subs	r3, r7, #1
 800f7b8:	9304      	str	r3, [sp, #16]
 800f7ba:	4649      	mov	r1, r9
 800f7bc:	2300      	movs	r3, #0
 800f7be:	220a      	movs	r2, #10
 800f7c0:	4658      	mov	r0, fp
 800f7c2:	f000 fa41 	bl	800fc48 <__multadd>
 800f7c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f7c8:	4681      	mov	r9, r0
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	f000 8172 	beq.w	800fab4 <_dtoa_r+0xb4c>
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	4629      	mov	r1, r5
 800f7d4:	220a      	movs	r2, #10
 800f7d6:	4658      	mov	r0, fp
 800f7d8:	f000 fa36 	bl	800fc48 <__multadd>
 800f7dc:	9b00      	ldr	r3, [sp, #0]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	4605      	mov	r5, r0
 800f7e2:	dc67      	bgt.n	800f8b4 <_dtoa_r+0x94c>
 800f7e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7e6:	2b02      	cmp	r3, #2
 800f7e8:	dc41      	bgt.n	800f86e <_dtoa_r+0x906>
 800f7ea:	e063      	b.n	800f8b4 <_dtoa_r+0x94c>
 800f7ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f7ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f7f2:	e746      	b.n	800f682 <_dtoa_r+0x71a>
 800f7f4:	9b07      	ldr	r3, [sp, #28]
 800f7f6:	1e5c      	subs	r4, r3, #1
 800f7f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f7fa:	42a3      	cmp	r3, r4
 800f7fc:	bfbf      	itttt	lt
 800f7fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f800:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f802:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f804:	1ae3      	sublt	r3, r4, r3
 800f806:	bfb4      	ite	lt
 800f808:	18d2      	addlt	r2, r2, r3
 800f80a:	1b1c      	subge	r4, r3, r4
 800f80c:	9b07      	ldr	r3, [sp, #28]
 800f80e:	bfbc      	itt	lt
 800f810:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f812:	2400      	movlt	r4, #0
 800f814:	2b00      	cmp	r3, #0
 800f816:	bfb5      	itete	lt
 800f818:	eba8 0603 	sublt.w	r6, r8, r3
 800f81c:	9b07      	ldrge	r3, [sp, #28]
 800f81e:	2300      	movlt	r3, #0
 800f820:	4646      	movge	r6, r8
 800f822:	e730      	b.n	800f686 <_dtoa_r+0x71e>
 800f824:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f826:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f828:	4646      	mov	r6, r8
 800f82a:	e735      	b.n	800f698 <_dtoa_r+0x730>
 800f82c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f82e:	e75c      	b.n	800f6ea <_dtoa_r+0x782>
 800f830:	2300      	movs	r3, #0
 800f832:	e788      	b.n	800f746 <_dtoa_r+0x7de>
 800f834:	3fe00000 	.word	0x3fe00000
 800f838:	40240000 	.word	0x40240000
 800f83c:	40140000 	.word	0x40140000
 800f840:	9b02      	ldr	r3, [sp, #8]
 800f842:	e780      	b.n	800f746 <_dtoa_r+0x7de>
 800f844:	2300      	movs	r3, #0
 800f846:	930a      	str	r3, [sp, #40]	@ 0x28
 800f848:	e782      	b.n	800f750 <_dtoa_r+0x7e8>
 800f84a:	d099      	beq.n	800f780 <_dtoa_r+0x818>
 800f84c:	9a08      	ldr	r2, [sp, #32]
 800f84e:	331c      	adds	r3, #28
 800f850:	441a      	add	r2, r3
 800f852:	4498      	add	r8, r3
 800f854:	441e      	add	r6, r3
 800f856:	9208      	str	r2, [sp, #32]
 800f858:	e792      	b.n	800f780 <_dtoa_r+0x818>
 800f85a:	4603      	mov	r3, r0
 800f85c:	e7f6      	b.n	800f84c <_dtoa_r+0x8e4>
 800f85e:	9b07      	ldr	r3, [sp, #28]
 800f860:	9704      	str	r7, [sp, #16]
 800f862:	2b00      	cmp	r3, #0
 800f864:	dc20      	bgt.n	800f8a8 <_dtoa_r+0x940>
 800f866:	9300      	str	r3, [sp, #0]
 800f868:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f86a:	2b02      	cmp	r3, #2
 800f86c:	dd1e      	ble.n	800f8ac <_dtoa_r+0x944>
 800f86e:	9b00      	ldr	r3, [sp, #0]
 800f870:	2b00      	cmp	r3, #0
 800f872:	f47f aec0 	bne.w	800f5f6 <_dtoa_r+0x68e>
 800f876:	4621      	mov	r1, r4
 800f878:	2205      	movs	r2, #5
 800f87a:	4658      	mov	r0, fp
 800f87c:	f000 f9e4 	bl	800fc48 <__multadd>
 800f880:	4601      	mov	r1, r0
 800f882:	4604      	mov	r4, r0
 800f884:	4648      	mov	r0, r9
 800f886:	f000 fbf7 	bl	8010078 <__mcmp>
 800f88a:	2800      	cmp	r0, #0
 800f88c:	f77f aeb3 	ble.w	800f5f6 <_dtoa_r+0x68e>
 800f890:	4656      	mov	r6, sl
 800f892:	2331      	movs	r3, #49	@ 0x31
 800f894:	f806 3b01 	strb.w	r3, [r6], #1
 800f898:	9b04      	ldr	r3, [sp, #16]
 800f89a:	3301      	adds	r3, #1
 800f89c:	9304      	str	r3, [sp, #16]
 800f89e:	e6ae      	b.n	800f5fe <_dtoa_r+0x696>
 800f8a0:	9c07      	ldr	r4, [sp, #28]
 800f8a2:	9704      	str	r7, [sp, #16]
 800f8a4:	4625      	mov	r5, r4
 800f8a6:	e7f3      	b.n	800f890 <_dtoa_r+0x928>
 800f8a8:	9b07      	ldr	r3, [sp, #28]
 800f8aa:	9300      	str	r3, [sp, #0]
 800f8ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	f000 8104 	beq.w	800fabc <_dtoa_r+0xb54>
 800f8b4:	2e00      	cmp	r6, #0
 800f8b6:	dd05      	ble.n	800f8c4 <_dtoa_r+0x95c>
 800f8b8:	4629      	mov	r1, r5
 800f8ba:	4632      	mov	r2, r6
 800f8bc:	4658      	mov	r0, fp
 800f8be:	f000 fb6f 	bl	800ffa0 <__lshift>
 800f8c2:	4605      	mov	r5, r0
 800f8c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d05a      	beq.n	800f980 <_dtoa_r+0xa18>
 800f8ca:	6869      	ldr	r1, [r5, #4]
 800f8cc:	4658      	mov	r0, fp
 800f8ce:	f000 f959 	bl	800fb84 <_Balloc>
 800f8d2:	4606      	mov	r6, r0
 800f8d4:	b928      	cbnz	r0, 800f8e2 <_dtoa_r+0x97a>
 800f8d6:	4b84      	ldr	r3, [pc, #528]	@ (800fae8 <_dtoa_r+0xb80>)
 800f8d8:	4602      	mov	r2, r0
 800f8da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f8de:	f7ff bb5a 	b.w	800ef96 <_dtoa_r+0x2e>
 800f8e2:	692a      	ldr	r2, [r5, #16]
 800f8e4:	3202      	adds	r2, #2
 800f8e6:	0092      	lsls	r2, r2, #2
 800f8e8:	f105 010c 	add.w	r1, r5, #12
 800f8ec:	300c      	adds	r0, #12
 800f8ee:	f7ff faa2 	bl	800ee36 <memcpy>
 800f8f2:	2201      	movs	r2, #1
 800f8f4:	4631      	mov	r1, r6
 800f8f6:	4658      	mov	r0, fp
 800f8f8:	f000 fb52 	bl	800ffa0 <__lshift>
 800f8fc:	f10a 0301 	add.w	r3, sl, #1
 800f900:	9307      	str	r3, [sp, #28]
 800f902:	9b00      	ldr	r3, [sp, #0]
 800f904:	4453      	add	r3, sl
 800f906:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f908:	9b02      	ldr	r3, [sp, #8]
 800f90a:	f003 0301 	and.w	r3, r3, #1
 800f90e:	462f      	mov	r7, r5
 800f910:	930a      	str	r3, [sp, #40]	@ 0x28
 800f912:	4605      	mov	r5, r0
 800f914:	9b07      	ldr	r3, [sp, #28]
 800f916:	4621      	mov	r1, r4
 800f918:	3b01      	subs	r3, #1
 800f91a:	4648      	mov	r0, r9
 800f91c:	9300      	str	r3, [sp, #0]
 800f91e:	f7ff fa98 	bl	800ee52 <quorem>
 800f922:	4639      	mov	r1, r7
 800f924:	9002      	str	r0, [sp, #8]
 800f926:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f92a:	4648      	mov	r0, r9
 800f92c:	f000 fba4 	bl	8010078 <__mcmp>
 800f930:	462a      	mov	r2, r5
 800f932:	9008      	str	r0, [sp, #32]
 800f934:	4621      	mov	r1, r4
 800f936:	4658      	mov	r0, fp
 800f938:	f000 fbba 	bl	80100b0 <__mdiff>
 800f93c:	68c2      	ldr	r2, [r0, #12]
 800f93e:	4606      	mov	r6, r0
 800f940:	bb02      	cbnz	r2, 800f984 <_dtoa_r+0xa1c>
 800f942:	4601      	mov	r1, r0
 800f944:	4648      	mov	r0, r9
 800f946:	f000 fb97 	bl	8010078 <__mcmp>
 800f94a:	4602      	mov	r2, r0
 800f94c:	4631      	mov	r1, r6
 800f94e:	4658      	mov	r0, fp
 800f950:	920e      	str	r2, [sp, #56]	@ 0x38
 800f952:	f000 f957 	bl	800fc04 <_Bfree>
 800f956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f958:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f95a:	9e07      	ldr	r6, [sp, #28]
 800f95c:	ea43 0102 	orr.w	r1, r3, r2
 800f960:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f962:	4319      	orrs	r1, r3
 800f964:	d110      	bne.n	800f988 <_dtoa_r+0xa20>
 800f966:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f96a:	d029      	beq.n	800f9c0 <_dtoa_r+0xa58>
 800f96c:	9b08      	ldr	r3, [sp, #32]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	dd02      	ble.n	800f978 <_dtoa_r+0xa10>
 800f972:	9b02      	ldr	r3, [sp, #8]
 800f974:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f978:	9b00      	ldr	r3, [sp, #0]
 800f97a:	f883 8000 	strb.w	r8, [r3]
 800f97e:	e63f      	b.n	800f600 <_dtoa_r+0x698>
 800f980:	4628      	mov	r0, r5
 800f982:	e7bb      	b.n	800f8fc <_dtoa_r+0x994>
 800f984:	2201      	movs	r2, #1
 800f986:	e7e1      	b.n	800f94c <_dtoa_r+0x9e4>
 800f988:	9b08      	ldr	r3, [sp, #32]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	db04      	blt.n	800f998 <_dtoa_r+0xa30>
 800f98e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f990:	430b      	orrs	r3, r1
 800f992:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f994:	430b      	orrs	r3, r1
 800f996:	d120      	bne.n	800f9da <_dtoa_r+0xa72>
 800f998:	2a00      	cmp	r2, #0
 800f99a:	dded      	ble.n	800f978 <_dtoa_r+0xa10>
 800f99c:	4649      	mov	r1, r9
 800f99e:	2201      	movs	r2, #1
 800f9a0:	4658      	mov	r0, fp
 800f9a2:	f000 fafd 	bl	800ffa0 <__lshift>
 800f9a6:	4621      	mov	r1, r4
 800f9a8:	4681      	mov	r9, r0
 800f9aa:	f000 fb65 	bl	8010078 <__mcmp>
 800f9ae:	2800      	cmp	r0, #0
 800f9b0:	dc03      	bgt.n	800f9ba <_dtoa_r+0xa52>
 800f9b2:	d1e1      	bne.n	800f978 <_dtoa_r+0xa10>
 800f9b4:	f018 0f01 	tst.w	r8, #1
 800f9b8:	d0de      	beq.n	800f978 <_dtoa_r+0xa10>
 800f9ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f9be:	d1d8      	bne.n	800f972 <_dtoa_r+0xa0a>
 800f9c0:	9a00      	ldr	r2, [sp, #0]
 800f9c2:	2339      	movs	r3, #57	@ 0x39
 800f9c4:	7013      	strb	r3, [r2, #0]
 800f9c6:	4633      	mov	r3, r6
 800f9c8:	461e      	mov	r6, r3
 800f9ca:	3b01      	subs	r3, #1
 800f9cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f9d0:	2a39      	cmp	r2, #57	@ 0x39
 800f9d2:	d052      	beq.n	800fa7a <_dtoa_r+0xb12>
 800f9d4:	3201      	adds	r2, #1
 800f9d6:	701a      	strb	r2, [r3, #0]
 800f9d8:	e612      	b.n	800f600 <_dtoa_r+0x698>
 800f9da:	2a00      	cmp	r2, #0
 800f9dc:	dd07      	ble.n	800f9ee <_dtoa_r+0xa86>
 800f9de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f9e2:	d0ed      	beq.n	800f9c0 <_dtoa_r+0xa58>
 800f9e4:	9a00      	ldr	r2, [sp, #0]
 800f9e6:	f108 0301 	add.w	r3, r8, #1
 800f9ea:	7013      	strb	r3, [r2, #0]
 800f9ec:	e608      	b.n	800f600 <_dtoa_r+0x698>
 800f9ee:	9b07      	ldr	r3, [sp, #28]
 800f9f0:	9a07      	ldr	r2, [sp, #28]
 800f9f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f9f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f9f8:	4293      	cmp	r3, r2
 800f9fa:	d028      	beq.n	800fa4e <_dtoa_r+0xae6>
 800f9fc:	4649      	mov	r1, r9
 800f9fe:	2300      	movs	r3, #0
 800fa00:	220a      	movs	r2, #10
 800fa02:	4658      	mov	r0, fp
 800fa04:	f000 f920 	bl	800fc48 <__multadd>
 800fa08:	42af      	cmp	r7, r5
 800fa0a:	4681      	mov	r9, r0
 800fa0c:	f04f 0300 	mov.w	r3, #0
 800fa10:	f04f 020a 	mov.w	r2, #10
 800fa14:	4639      	mov	r1, r7
 800fa16:	4658      	mov	r0, fp
 800fa18:	d107      	bne.n	800fa2a <_dtoa_r+0xac2>
 800fa1a:	f000 f915 	bl	800fc48 <__multadd>
 800fa1e:	4607      	mov	r7, r0
 800fa20:	4605      	mov	r5, r0
 800fa22:	9b07      	ldr	r3, [sp, #28]
 800fa24:	3301      	adds	r3, #1
 800fa26:	9307      	str	r3, [sp, #28]
 800fa28:	e774      	b.n	800f914 <_dtoa_r+0x9ac>
 800fa2a:	f000 f90d 	bl	800fc48 <__multadd>
 800fa2e:	4629      	mov	r1, r5
 800fa30:	4607      	mov	r7, r0
 800fa32:	2300      	movs	r3, #0
 800fa34:	220a      	movs	r2, #10
 800fa36:	4658      	mov	r0, fp
 800fa38:	f000 f906 	bl	800fc48 <__multadd>
 800fa3c:	4605      	mov	r5, r0
 800fa3e:	e7f0      	b.n	800fa22 <_dtoa_r+0xaba>
 800fa40:	9b00      	ldr	r3, [sp, #0]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	bfcc      	ite	gt
 800fa46:	461e      	movgt	r6, r3
 800fa48:	2601      	movle	r6, #1
 800fa4a:	4456      	add	r6, sl
 800fa4c:	2700      	movs	r7, #0
 800fa4e:	4649      	mov	r1, r9
 800fa50:	2201      	movs	r2, #1
 800fa52:	4658      	mov	r0, fp
 800fa54:	f000 faa4 	bl	800ffa0 <__lshift>
 800fa58:	4621      	mov	r1, r4
 800fa5a:	4681      	mov	r9, r0
 800fa5c:	f000 fb0c 	bl	8010078 <__mcmp>
 800fa60:	2800      	cmp	r0, #0
 800fa62:	dcb0      	bgt.n	800f9c6 <_dtoa_r+0xa5e>
 800fa64:	d102      	bne.n	800fa6c <_dtoa_r+0xb04>
 800fa66:	f018 0f01 	tst.w	r8, #1
 800fa6a:	d1ac      	bne.n	800f9c6 <_dtoa_r+0xa5e>
 800fa6c:	4633      	mov	r3, r6
 800fa6e:	461e      	mov	r6, r3
 800fa70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fa74:	2a30      	cmp	r2, #48	@ 0x30
 800fa76:	d0fa      	beq.n	800fa6e <_dtoa_r+0xb06>
 800fa78:	e5c2      	b.n	800f600 <_dtoa_r+0x698>
 800fa7a:	459a      	cmp	sl, r3
 800fa7c:	d1a4      	bne.n	800f9c8 <_dtoa_r+0xa60>
 800fa7e:	9b04      	ldr	r3, [sp, #16]
 800fa80:	3301      	adds	r3, #1
 800fa82:	9304      	str	r3, [sp, #16]
 800fa84:	2331      	movs	r3, #49	@ 0x31
 800fa86:	f88a 3000 	strb.w	r3, [sl]
 800fa8a:	e5b9      	b.n	800f600 <_dtoa_r+0x698>
 800fa8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fa8e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800faec <_dtoa_r+0xb84>
 800fa92:	b11b      	cbz	r3, 800fa9c <_dtoa_r+0xb34>
 800fa94:	f10a 0308 	add.w	r3, sl, #8
 800fa98:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fa9a:	6013      	str	r3, [r2, #0]
 800fa9c:	4650      	mov	r0, sl
 800fa9e:	b019      	add	sp, #100	@ 0x64
 800faa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800faa6:	2b01      	cmp	r3, #1
 800faa8:	f77f ae37 	ble.w	800f71a <_dtoa_r+0x7b2>
 800faac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800faae:	930a      	str	r3, [sp, #40]	@ 0x28
 800fab0:	2001      	movs	r0, #1
 800fab2:	e655      	b.n	800f760 <_dtoa_r+0x7f8>
 800fab4:	9b00      	ldr	r3, [sp, #0]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	f77f aed6 	ble.w	800f868 <_dtoa_r+0x900>
 800fabc:	4656      	mov	r6, sl
 800fabe:	4621      	mov	r1, r4
 800fac0:	4648      	mov	r0, r9
 800fac2:	f7ff f9c6 	bl	800ee52 <quorem>
 800fac6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800faca:	f806 8b01 	strb.w	r8, [r6], #1
 800face:	9b00      	ldr	r3, [sp, #0]
 800fad0:	eba6 020a 	sub.w	r2, r6, sl
 800fad4:	4293      	cmp	r3, r2
 800fad6:	ddb3      	ble.n	800fa40 <_dtoa_r+0xad8>
 800fad8:	4649      	mov	r1, r9
 800fada:	2300      	movs	r3, #0
 800fadc:	220a      	movs	r2, #10
 800fade:	4658      	mov	r0, fp
 800fae0:	f000 f8b2 	bl	800fc48 <__multadd>
 800fae4:	4681      	mov	r9, r0
 800fae6:	e7ea      	b.n	800fabe <_dtoa_r+0xb56>
 800fae8:	08010f28 	.word	0x08010f28
 800faec:	08010eac 	.word	0x08010eac

0800faf0 <_free_r>:
 800faf0:	b538      	push	{r3, r4, r5, lr}
 800faf2:	4605      	mov	r5, r0
 800faf4:	2900      	cmp	r1, #0
 800faf6:	d041      	beq.n	800fb7c <_free_r+0x8c>
 800faf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fafc:	1f0c      	subs	r4, r1, #4
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	bfb8      	it	lt
 800fb02:	18e4      	addlt	r4, r4, r3
 800fb04:	f7fe fb32 	bl	800e16c <__malloc_lock>
 800fb08:	4a1d      	ldr	r2, [pc, #116]	@ (800fb80 <_free_r+0x90>)
 800fb0a:	6813      	ldr	r3, [r2, #0]
 800fb0c:	b933      	cbnz	r3, 800fb1c <_free_r+0x2c>
 800fb0e:	6063      	str	r3, [r4, #4]
 800fb10:	6014      	str	r4, [r2, #0]
 800fb12:	4628      	mov	r0, r5
 800fb14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb18:	f7fe bb2e 	b.w	800e178 <__malloc_unlock>
 800fb1c:	42a3      	cmp	r3, r4
 800fb1e:	d908      	bls.n	800fb32 <_free_r+0x42>
 800fb20:	6820      	ldr	r0, [r4, #0]
 800fb22:	1821      	adds	r1, r4, r0
 800fb24:	428b      	cmp	r3, r1
 800fb26:	bf01      	itttt	eq
 800fb28:	6819      	ldreq	r1, [r3, #0]
 800fb2a:	685b      	ldreq	r3, [r3, #4]
 800fb2c:	1809      	addeq	r1, r1, r0
 800fb2e:	6021      	streq	r1, [r4, #0]
 800fb30:	e7ed      	b.n	800fb0e <_free_r+0x1e>
 800fb32:	461a      	mov	r2, r3
 800fb34:	685b      	ldr	r3, [r3, #4]
 800fb36:	b10b      	cbz	r3, 800fb3c <_free_r+0x4c>
 800fb38:	42a3      	cmp	r3, r4
 800fb3a:	d9fa      	bls.n	800fb32 <_free_r+0x42>
 800fb3c:	6811      	ldr	r1, [r2, #0]
 800fb3e:	1850      	adds	r0, r2, r1
 800fb40:	42a0      	cmp	r0, r4
 800fb42:	d10b      	bne.n	800fb5c <_free_r+0x6c>
 800fb44:	6820      	ldr	r0, [r4, #0]
 800fb46:	4401      	add	r1, r0
 800fb48:	1850      	adds	r0, r2, r1
 800fb4a:	4283      	cmp	r3, r0
 800fb4c:	6011      	str	r1, [r2, #0]
 800fb4e:	d1e0      	bne.n	800fb12 <_free_r+0x22>
 800fb50:	6818      	ldr	r0, [r3, #0]
 800fb52:	685b      	ldr	r3, [r3, #4]
 800fb54:	6053      	str	r3, [r2, #4]
 800fb56:	4408      	add	r0, r1
 800fb58:	6010      	str	r0, [r2, #0]
 800fb5a:	e7da      	b.n	800fb12 <_free_r+0x22>
 800fb5c:	d902      	bls.n	800fb64 <_free_r+0x74>
 800fb5e:	230c      	movs	r3, #12
 800fb60:	602b      	str	r3, [r5, #0]
 800fb62:	e7d6      	b.n	800fb12 <_free_r+0x22>
 800fb64:	6820      	ldr	r0, [r4, #0]
 800fb66:	1821      	adds	r1, r4, r0
 800fb68:	428b      	cmp	r3, r1
 800fb6a:	bf04      	itt	eq
 800fb6c:	6819      	ldreq	r1, [r3, #0]
 800fb6e:	685b      	ldreq	r3, [r3, #4]
 800fb70:	6063      	str	r3, [r4, #4]
 800fb72:	bf04      	itt	eq
 800fb74:	1809      	addeq	r1, r1, r0
 800fb76:	6021      	streq	r1, [r4, #0]
 800fb78:	6054      	str	r4, [r2, #4]
 800fb7a:	e7ca      	b.n	800fb12 <_free_r+0x22>
 800fb7c:	bd38      	pop	{r3, r4, r5, pc}
 800fb7e:	bf00      	nop
 800fb80:	200008f8 	.word	0x200008f8

0800fb84 <_Balloc>:
 800fb84:	b570      	push	{r4, r5, r6, lr}
 800fb86:	69c6      	ldr	r6, [r0, #28]
 800fb88:	4604      	mov	r4, r0
 800fb8a:	460d      	mov	r5, r1
 800fb8c:	b976      	cbnz	r6, 800fbac <_Balloc+0x28>
 800fb8e:	2010      	movs	r0, #16
 800fb90:	f7fe fa3a 	bl	800e008 <malloc>
 800fb94:	4602      	mov	r2, r0
 800fb96:	61e0      	str	r0, [r4, #28]
 800fb98:	b920      	cbnz	r0, 800fba4 <_Balloc+0x20>
 800fb9a:	4b18      	ldr	r3, [pc, #96]	@ (800fbfc <_Balloc+0x78>)
 800fb9c:	4818      	ldr	r0, [pc, #96]	@ (800fc00 <_Balloc+0x7c>)
 800fb9e:	216b      	movs	r1, #107	@ 0x6b
 800fba0:	f000 fd90 	bl	80106c4 <__assert_func>
 800fba4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fba8:	6006      	str	r6, [r0, #0]
 800fbaa:	60c6      	str	r6, [r0, #12]
 800fbac:	69e6      	ldr	r6, [r4, #28]
 800fbae:	68f3      	ldr	r3, [r6, #12]
 800fbb0:	b183      	cbz	r3, 800fbd4 <_Balloc+0x50>
 800fbb2:	69e3      	ldr	r3, [r4, #28]
 800fbb4:	68db      	ldr	r3, [r3, #12]
 800fbb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fbba:	b9b8      	cbnz	r0, 800fbec <_Balloc+0x68>
 800fbbc:	2101      	movs	r1, #1
 800fbbe:	fa01 f605 	lsl.w	r6, r1, r5
 800fbc2:	1d72      	adds	r2, r6, #5
 800fbc4:	0092      	lsls	r2, r2, #2
 800fbc6:	4620      	mov	r0, r4
 800fbc8:	f000 fd9a 	bl	8010700 <_calloc_r>
 800fbcc:	b160      	cbz	r0, 800fbe8 <_Balloc+0x64>
 800fbce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fbd2:	e00e      	b.n	800fbf2 <_Balloc+0x6e>
 800fbd4:	2221      	movs	r2, #33	@ 0x21
 800fbd6:	2104      	movs	r1, #4
 800fbd8:	4620      	mov	r0, r4
 800fbda:	f000 fd91 	bl	8010700 <_calloc_r>
 800fbde:	69e3      	ldr	r3, [r4, #28]
 800fbe0:	60f0      	str	r0, [r6, #12]
 800fbe2:	68db      	ldr	r3, [r3, #12]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d1e4      	bne.n	800fbb2 <_Balloc+0x2e>
 800fbe8:	2000      	movs	r0, #0
 800fbea:	bd70      	pop	{r4, r5, r6, pc}
 800fbec:	6802      	ldr	r2, [r0, #0]
 800fbee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fbf8:	e7f7      	b.n	800fbea <_Balloc+0x66>
 800fbfa:	bf00      	nop
 800fbfc:	08010eb9 	.word	0x08010eb9
 800fc00:	08010f39 	.word	0x08010f39

0800fc04 <_Bfree>:
 800fc04:	b570      	push	{r4, r5, r6, lr}
 800fc06:	69c6      	ldr	r6, [r0, #28]
 800fc08:	4605      	mov	r5, r0
 800fc0a:	460c      	mov	r4, r1
 800fc0c:	b976      	cbnz	r6, 800fc2c <_Bfree+0x28>
 800fc0e:	2010      	movs	r0, #16
 800fc10:	f7fe f9fa 	bl	800e008 <malloc>
 800fc14:	4602      	mov	r2, r0
 800fc16:	61e8      	str	r0, [r5, #28]
 800fc18:	b920      	cbnz	r0, 800fc24 <_Bfree+0x20>
 800fc1a:	4b09      	ldr	r3, [pc, #36]	@ (800fc40 <_Bfree+0x3c>)
 800fc1c:	4809      	ldr	r0, [pc, #36]	@ (800fc44 <_Bfree+0x40>)
 800fc1e:	218f      	movs	r1, #143	@ 0x8f
 800fc20:	f000 fd50 	bl	80106c4 <__assert_func>
 800fc24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fc28:	6006      	str	r6, [r0, #0]
 800fc2a:	60c6      	str	r6, [r0, #12]
 800fc2c:	b13c      	cbz	r4, 800fc3e <_Bfree+0x3a>
 800fc2e:	69eb      	ldr	r3, [r5, #28]
 800fc30:	6862      	ldr	r2, [r4, #4]
 800fc32:	68db      	ldr	r3, [r3, #12]
 800fc34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fc38:	6021      	str	r1, [r4, #0]
 800fc3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fc3e:	bd70      	pop	{r4, r5, r6, pc}
 800fc40:	08010eb9 	.word	0x08010eb9
 800fc44:	08010f39 	.word	0x08010f39

0800fc48 <__multadd>:
 800fc48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc4c:	690d      	ldr	r5, [r1, #16]
 800fc4e:	4607      	mov	r7, r0
 800fc50:	460c      	mov	r4, r1
 800fc52:	461e      	mov	r6, r3
 800fc54:	f101 0c14 	add.w	ip, r1, #20
 800fc58:	2000      	movs	r0, #0
 800fc5a:	f8dc 3000 	ldr.w	r3, [ip]
 800fc5e:	b299      	uxth	r1, r3
 800fc60:	fb02 6101 	mla	r1, r2, r1, r6
 800fc64:	0c1e      	lsrs	r6, r3, #16
 800fc66:	0c0b      	lsrs	r3, r1, #16
 800fc68:	fb02 3306 	mla	r3, r2, r6, r3
 800fc6c:	b289      	uxth	r1, r1
 800fc6e:	3001      	adds	r0, #1
 800fc70:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fc74:	4285      	cmp	r5, r0
 800fc76:	f84c 1b04 	str.w	r1, [ip], #4
 800fc7a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fc7e:	dcec      	bgt.n	800fc5a <__multadd+0x12>
 800fc80:	b30e      	cbz	r6, 800fcc6 <__multadd+0x7e>
 800fc82:	68a3      	ldr	r3, [r4, #8]
 800fc84:	42ab      	cmp	r3, r5
 800fc86:	dc19      	bgt.n	800fcbc <__multadd+0x74>
 800fc88:	6861      	ldr	r1, [r4, #4]
 800fc8a:	4638      	mov	r0, r7
 800fc8c:	3101      	adds	r1, #1
 800fc8e:	f7ff ff79 	bl	800fb84 <_Balloc>
 800fc92:	4680      	mov	r8, r0
 800fc94:	b928      	cbnz	r0, 800fca2 <__multadd+0x5a>
 800fc96:	4602      	mov	r2, r0
 800fc98:	4b0c      	ldr	r3, [pc, #48]	@ (800fccc <__multadd+0x84>)
 800fc9a:	480d      	ldr	r0, [pc, #52]	@ (800fcd0 <__multadd+0x88>)
 800fc9c:	21ba      	movs	r1, #186	@ 0xba
 800fc9e:	f000 fd11 	bl	80106c4 <__assert_func>
 800fca2:	6922      	ldr	r2, [r4, #16]
 800fca4:	3202      	adds	r2, #2
 800fca6:	f104 010c 	add.w	r1, r4, #12
 800fcaa:	0092      	lsls	r2, r2, #2
 800fcac:	300c      	adds	r0, #12
 800fcae:	f7ff f8c2 	bl	800ee36 <memcpy>
 800fcb2:	4621      	mov	r1, r4
 800fcb4:	4638      	mov	r0, r7
 800fcb6:	f7ff ffa5 	bl	800fc04 <_Bfree>
 800fcba:	4644      	mov	r4, r8
 800fcbc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fcc0:	3501      	adds	r5, #1
 800fcc2:	615e      	str	r6, [r3, #20]
 800fcc4:	6125      	str	r5, [r4, #16]
 800fcc6:	4620      	mov	r0, r4
 800fcc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fccc:	08010f28 	.word	0x08010f28
 800fcd0:	08010f39 	.word	0x08010f39

0800fcd4 <__hi0bits>:
 800fcd4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fcd8:	4603      	mov	r3, r0
 800fcda:	bf36      	itet	cc
 800fcdc:	0403      	lslcc	r3, r0, #16
 800fcde:	2000      	movcs	r0, #0
 800fce0:	2010      	movcc	r0, #16
 800fce2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fce6:	bf3c      	itt	cc
 800fce8:	021b      	lslcc	r3, r3, #8
 800fcea:	3008      	addcc	r0, #8
 800fcec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fcf0:	bf3c      	itt	cc
 800fcf2:	011b      	lslcc	r3, r3, #4
 800fcf4:	3004      	addcc	r0, #4
 800fcf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fcfa:	bf3c      	itt	cc
 800fcfc:	009b      	lslcc	r3, r3, #2
 800fcfe:	3002      	addcc	r0, #2
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	db05      	blt.n	800fd10 <__hi0bits+0x3c>
 800fd04:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fd08:	f100 0001 	add.w	r0, r0, #1
 800fd0c:	bf08      	it	eq
 800fd0e:	2020      	moveq	r0, #32
 800fd10:	4770      	bx	lr

0800fd12 <__lo0bits>:
 800fd12:	6803      	ldr	r3, [r0, #0]
 800fd14:	4602      	mov	r2, r0
 800fd16:	f013 0007 	ands.w	r0, r3, #7
 800fd1a:	d00b      	beq.n	800fd34 <__lo0bits+0x22>
 800fd1c:	07d9      	lsls	r1, r3, #31
 800fd1e:	d421      	bmi.n	800fd64 <__lo0bits+0x52>
 800fd20:	0798      	lsls	r0, r3, #30
 800fd22:	bf49      	itett	mi
 800fd24:	085b      	lsrmi	r3, r3, #1
 800fd26:	089b      	lsrpl	r3, r3, #2
 800fd28:	2001      	movmi	r0, #1
 800fd2a:	6013      	strmi	r3, [r2, #0]
 800fd2c:	bf5c      	itt	pl
 800fd2e:	6013      	strpl	r3, [r2, #0]
 800fd30:	2002      	movpl	r0, #2
 800fd32:	4770      	bx	lr
 800fd34:	b299      	uxth	r1, r3
 800fd36:	b909      	cbnz	r1, 800fd3c <__lo0bits+0x2a>
 800fd38:	0c1b      	lsrs	r3, r3, #16
 800fd3a:	2010      	movs	r0, #16
 800fd3c:	b2d9      	uxtb	r1, r3
 800fd3e:	b909      	cbnz	r1, 800fd44 <__lo0bits+0x32>
 800fd40:	3008      	adds	r0, #8
 800fd42:	0a1b      	lsrs	r3, r3, #8
 800fd44:	0719      	lsls	r1, r3, #28
 800fd46:	bf04      	itt	eq
 800fd48:	091b      	lsreq	r3, r3, #4
 800fd4a:	3004      	addeq	r0, #4
 800fd4c:	0799      	lsls	r1, r3, #30
 800fd4e:	bf04      	itt	eq
 800fd50:	089b      	lsreq	r3, r3, #2
 800fd52:	3002      	addeq	r0, #2
 800fd54:	07d9      	lsls	r1, r3, #31
 800fd56:	d403      	bmi.n	800fd60 <__lo0bits+0x4e>
 800fd58:	085b      	lsrs	r3, r3, #1
 800fd5a:	f100 0001 	add.w	r0, r0, #1
 800fd5e:	d003      	beq.n	800fd68 <__lo0bits+0x56>
 800fd60:	6013      	str	r3, [r2, #0]
 800fd62:	4770      	bx	lr
 800fd64:	2000      	movs	r0, #0
 800fd66:	4770      	bx	lr
 800fd68:	2020      	movs	r0, #32
 800fd6a:	4770      	bx	lr

0800fd6c <__i2b>:
 800fd6c:	b510      	push	{r4, lr}
 800fd6e:	460c      	mov	r4, r1
 800fd70:	2101      	movs	r1, #1
 800fd72:	f7ff ff07 	bl	800fb84 <_Balloc>
 800fd76:	4602      	mov	r2, r0
 800fd78:	b928      	cbnz	r0, 800fd86 <__i2b+0x1a>
 800fd7a:	4b05      	ldr	r3, [pc, #20]	@ (800fd90 <__i2b+0x24>)
 800fd7c:	4805      	ldr	r0, [pc, #20]	@ (800fd94 <__i2b+0x28>)
 800fd7e:	f240 1145 	movw	r1, #325	@ 0x145
 800fd82:	f000 fc9f 	bl	80106c4 <__assert_func>
 800fd86:	2301      	movs	r3, #1
 800fd88:	6144      	str	r4, [r0, #20]
 800fd8a:	6103      	str	r3, [r0, #16]
 800fd8c:	bd10      	pop	{r4, pc}
 800fd8e:	bf00      	nop
 800fd90:	08010f28 	.word	0x08010f28
 800fd94:	08010f39 	.word	0x08010f39

0800fd98 <__multiply>:
 800fd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd9c:	4614      	mov	r4, r2
 800fd9e:	690a      	ldr	r2, [r1, #16]
 800fda0:	6923      	ldr	r3, [r4, #16]
 800fda2:	429a      	cmp	r2, r3
 800fda4:	bfa8      	it	ge
 800fda6:	4623      	movge	r3, r4
 800fda8:	460f      	mov	r7, r1
 800fdaa:	bfa4      	itt	ge
 800fdac:	460c      	movge	r4, r1
 800fdae:	461f      	movge	r7, r3
 800fdb0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fdb4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fdb8:	68a3      	ldr	r3, [r4, #8]
 800fdba:	6861      	ldr	r1, [r4, #4]
 800fdbc:	eb0a 0609 	add.w	r6, sl, r9
 800fdc0:	42b3      	cmp	r3, r6
 800fdc2:	b085      	sub	sp, #20
 800fdc4:	bfb8      	it	lt
 800fdc6:	3101      	addlt	r1, #1
 800fdc8:	f7ff fedc 	bl	800fb84 <_Balloc>
 800fdcc:	b930      	cbnz	r0, 800fddc <__multiply+0x44>
 800fdce:	4602      	mov	r2, r0
 800fdd0:	4b44      	ldr	r3, [pc, #272]	@ (800fee4 <__multiply+0x14c>)
 800fdd2:	4845      	ldr	r0, [pc, #276]	@ (800fee8 <__multiply+0x150>)
 800fdd4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fdd8:	f000 fc74 	bl	80106c4 <__assert_func>
 800fddc:	f100 0514 	add.w	r5, r0, #20
 800fde0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fde4:	462b      	mov	r3, r5
 800fde6:	2200      	movs	r2, #0
 800fde8:	4543      	cmp	r3, r8
 800fdea:	d321      	bcc.n	800fe30 <__multiply+0x98>
 800fdec:	f107 0114 	add.w	r1, r7, #20
 800fdf0:	f104 0214 	add.w	r2, r4, #20
 800fdf4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fdf8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fdfc:	9302      	str	r3, [sp, #8]
 800fdfe:	1b13      	subs	r3, r2, r4
 800fe00:	3b15      	subs	r3, #21
 800fe02:	f023 0303 	bic.w	r3, r3, #3
 800fe06:	3304      	adds	r3, #4
 800fe08:	f104 0715 	add.w	r7, r4, #21
 800fe0c:	42ba      	cmp	r2, r7
 800fe0e:	bf38      	it	cc
 800fe10:	2304      	movcc	r3, #4
 800fe12:	9301      	str	r3, [sp, #4]
 800fe14:	9b02      	ldr	r3, [sp, #8]
 800fe16:	9103      	str	r1, [sp, #12]
 800fe18:	428b      	cmp	r3, r1
 800fe1a:	d80c      	bhi.n	800fe36 <__multiply+0x9e>
 800fe1c:	2e00      	cmp	r6, #0
 800fe1e:	dd03      	ble.n	800fe28 <__multiply+0x90>
 800fe20:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d05b      	beq.n	800fee0 <__multiply+0x148>
 800fe28:	6106      	str	r6, [r0, #16]
 800fe2a:	b005      	add	sp, #20
 800fe2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe30:	f843 2b04 	str.w	r2, [r3], #4
 800fe34:	e7d8      	b.n	800fde8 <__multiply+0x50>
 800fe36:	f8b1 a000 	ldrh.w	sl, [r1]
 800fe3a:	f1ba 0f00 	cmp.w	sl, #0
 800fe3e:	d024      	beq.n	800fe8a <__multiply+0xf2>
 800fe40:	f104 0e14 	add.w	lr, r4, #20
 800fe44:	46a9      	mov	r9, r5
 800fe46:	f04f 0c00 	mov.w	ip, #0
 800fe4a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fe4e:	f8d9 3000 	ldr.w	r3, [r9]
 800fe52:	fa1f fb87 	uxth.w	fp, r7
 800fe56:	b29b      	uxth	r3, r3
 800fe58:	fb0a 330b 	mla	r3, sl, fp, r3
 800fe5c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fe60:	f8d9 7000 	ldr.w	r7, [r9]
 800fe64:	4463      	add	r3, ip
 800fe66:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fe6a:	fb0a c70b 	mla	r7, sl, fp, ip
 800fe6e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fe72:	b29b      	uxth	r3, r3
 800fe74:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fe78:	4572      	cmp	r2, lr
 800fe7a:	f849 3b04 	str.w	r3, [r9], #4
 800fe7e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fe82:	d8e2      	bhi.n	800fe4a <__multiply+0xb2>
 800fe84:	9b01      	ldr	r3, [sp, #4]
 800fe86:	f845 c003 	str.w	ip, [r5, r3]
 800fe8a:	9b03      	ldr	r3, [sp, #12]
 800fe8c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fe90:	3104      	adds	r1, #4
 800fe92:	f1b9 0f00 	cmp.w	r9, #0
 800fe96:	d021      	beq.n	800fedc <__multiply+0x144>
 800fe98:	682b      	ldr	r3, [r5, #0]
 800fe9a:	f104 0c14 	add.w	ip, r4, #20
 800fe9e:	46ae      	mov	lr, r5
 800fea0:	f04f 0a00 	mov.w	sl, #0
 800fea4:	f8bc b000 	ldrh.w	fp, [ip]
 800fea8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800feac:	fb09 770b 	mla	r7, r9, fp, r7
 800feb0:	4457      	add	r7, sl
 800feb2:	b29b      	uxth	r3, r3
 800feb4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800feb8:	f84e 3b04 	str.w	r3, [lr], #4
 800febc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fec0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fec4:	f8be 3000 	ldrh.w	r3, [lr]
 800fec8:	fb09 330a 	mla	r3, r9, sl, r3
 800fecc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800fed0:	4562      	cmp	r2, ip
 800fed2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fed6:	d8e5      	bhi.n	800fea4 <__multiply+0x10c>
 800fed8:	9f01      	ldr	r7, [sp, #4]
 800feda:	51eb      	str	r3, [r5, r7]
 800fedc:	3504      	adds	r5, #4
 800fede:	e799      	b.n	800fe14 <__multiply+0x7c>
 800fee0:	3e01      	subs	r6, #1
 800fee2:	e79b      	b.n	800fe1c <__multiply+0x84>
 800fee4:	08010f28 	.word	0x08010f28
 800fee8:	08010f39 	.word	0x08010f39

0800feec <__pow5mult>:
 800feec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fef0:	4615      	mov	r5, r2
 800fef2:	f012 0203 	ands.w	r2, r2, #3
 800fef6:	4607      	mov	r7, r0
 800fef8:	460e      	mov	r6, r1
 800fefa:	d007      	beq.n	800ff0c <__pow5mult+0x20>
 800fefc:	4c25      	ldr	r4, [pc, #148]	@ (800ff94 <__pow5mult+0xa8>)
 800fefe:	3a01      	subs	r2, #1
 800ff00:	2300      	movs	r3, #0
 800ff02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ff06:	f7ff fe9f 	bl	800fc48 <__multadd>
 800ff0a:	4606      	mov	r6, r0
 800ff0c:	10ad      	asrs	r5, r5, #2
 800ff0e:	d03d      	beq.n	800ff8c <__pow5mult+0xa0>
 800ff10:	69fc      	ldr	r4, [r7, #28]
 800ff12:	b97c      	cbnz	r4, 800ff34 <__pow5mult+0x48>
 800ff14:	2010      	movs	r0, #16
 800ff16:	f7fe f877 	bl	800e008 <malloc>
 800ff1a:	4602      	mov	r2, r0
 800ff1c:	61f8      	str	r0, [r7, #28]
 800ff1e:	b928      	cbnz	r0, 800ff2c <__pow5mult+0x40>
 800ff20:	4b1d      	ldr	r3, [pc, #116]	@ (800ff98 <__pow5mult+0xac>)
 800ff22:	481e      	ldr	r0, [pc, #120]	@ (800ff9c <__pow5mult+0xb0>)
 800ff24:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ff28:	f000 fbcc 	bl	80106c4 <__assert_func>
 800ff2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ff30:	6004      	str	r4, [r0, #0]
 800ff32:	60c4      	str	r4, [r0, #12]
 800ff34:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ff38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ff3c:	b94c      	cbnz	r4, 800ff52 <__pow5mult+0x66>
 800ff3e:	f240 2171 	movw	r1, #625	@ 0x271
 800ff42:	4638      	mov	r0, r7
 800ff44:	f7ff ff12 	bl	800fd6c <__i2b>
 800ff48:	2300      	movs	r3, #0
 800ff4a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ff4e:	4604      	mov	r4, r0
 800ff50:	6003      	str	r3, [r0, #0]
 800ff52:	f04f 0900 	mov.w	r9, #0
 800ff56:	07eb      	lsls	r3, r5, #31
 800ff58:	d50a      	bpl.n	800ff70 <__pow5mult+0x84>
 800ff5a:	4631      	mov	r1, r6
 800ff5c:	4622      	mov	r2, r4
 800ff5e:	4638      	mov	r0, r7
 800ff60:	f7ff ff1a 	bl	800fd98 <__multiply>
 800ff64:	4631      	mov	r1, r6
 800ff66:	4680      	mov	r8, r0
 800ff68:	4638      	mov	r0, r7
 800ff6a:	f7ff fe4b 	bl	800fc04 <_Bfree>
 800ff6e:	4646      	mov	r6, r8
 800ff70:	106d      	asrs	r5, r5, #1
 800ff72:	d00b      	beq.n	800ff8c <__pow5mult+0xa0>
 800ff74:	6820      	ldr	r0, [r4, #0]
 800ff76:	b938      	cbnz	r0, 800ff88 <__pow5mult+0x9c>
 800ff78:	4622      	mov	r2, r4
 800ff7a:	4621      	mov	r1, r4
 800ff7c:	4638      	mov	r0, r7
 800ff7e:	f7ff ff0b 	bl	800fd98 <__multiply>
 800ff82:	6020      	str	r0, [r4, #0]
 800ff84:	f8c0 9000 	str.w	r9, [r0]
 800ff88:	4604      	mov	r4, r0
 800ff8a:	e7e4      	b.n	800ff56 <__pow5mult+0x6a>
 800ff8c:	4630      	mov	r0, r6
 800ff8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff92:	bf00      	nop
 800ff94:	08010f94 	.word	0x08010f94
 800ff98:	08010eb9 	.word	0x08010eb9
 800ff9c:	08010f39 	.word	0x08010f39

0800ffa0 <__lshift>:
 800ffa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffa4:	460c      	mov	r4, r1
 800ffa6:	6849      	ldr	r1, [r1, #4]
 800ffa8:	6923      	ldr	r3, [r4, #16]
 800ffaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ffae:	68a3      	ldr	r3, [r4, #8]
 800ffb0:	4607      	mov	r7, r0
 800ffb2:	4691      	mov	r9, r2
 800ffb4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ffb8:	f108 0601 	add.w	r6, r8, #1
 800ffbc:	42b3      	cmp	r3, r6
 800ffbe:	db0b      	blt.n	800ffd8 <__lshift+0x38>
 800ffc0:	4638      	mov	r0, r7
 800ffc2:	f7ff fddf 	bl	800fb84 <_Balloc>
 800ffc6:	4605      	mov	r5, r0
 800ffc8:	b948      	cbnz	r0, 800ffde <__lshift+0x3e>
 800ffca:	4602      	mov	r2, r0
 800ffcc:	4b28      	ldr	r3, [pc, #160]	@ (8010070 <__lshift+0xd0>)
 800ffce:	4829      	ldr	r0, [pc, #164]	@ (8010074 <__lshift+0xd4>)
 800ffd0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ffd4:	f000 fb76 	bl	80106c4 <__assert_func>
 800ffd8:	3101      	adds	r1, #1
 800ffda:	005b      	lsls	r3, r3, #1
 800ffdc:	e7ee      	b.n	800ffbc <__lshift+0x1c>
 800ffde:	2300      	movs	r3, #0
 800ffe0:	f100 0114 	add.w	r1, r0, #20
 800ffe4:	f100 0210 	add.w	r2, r0, #16
 800ffe8:	4618      	mov	r0, r3
 800ffea:	4553      	cmp	r3, sl
 800ffec:	db33      	blt.n	8010056 <__lshift+0xb6>
 800ffee:	6920      	ldr	r0, [r4, #16]
 800fff0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fff4:	f104 0314 	add.w	r3, r4, #20
 800fff8:	f019 091f 	ands.w	r9, r9, #31
 800fffc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010000:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010004:	d02b      	beq.n	801005e <__lshift+0xbe>
 8010006:	f1c9 0e20 	rsb	lr, r9, #32
 801000a:	468a      	mov	sl, r1
 801000c:	2200      	movs	r2, #0
 801000e:	6818      	ldr	r0, [r3, #0]
 8010010:	fa00 f009 	lsl.w	r0, r0, r9
 8010014:	4310      	orrs	r0, r2
 8010016:	f84a 0b04 	str.w	r0, [sl], #4
 801001a:	f853 2b04 	ldr.w	r2, [r3], #4
 801001e:	459c      	cmp	ip, r3
 8010020:	fa22 f20e 	lsr.w	r2, r2, lr
 8010024:	d8f3      	bhi.n	801000e <__lshift+0x6e>
 8010026:	ebac 0304 	sub.w	r3, ip, r4
 801002a:	3b15      	subs	r3, #21
 801002c:	f023 0303 	bic.w	r3, r3, #3
 8010030:	3304      	adds	r3, #4
 8010032:	f104 0015 	add.w	r0, r4, #21
 8010036:	4584      	cmp	ip, r0
 8010038:	bf38      	it	cc
 801003a:	2304      	movcc	r3, #4
 801003c:	50ca      	str	r2, [r1, r3]
 801003e:	b10a      	cbz	r2, 8010044 <__lshift+0xa4>
 8010040:	f108 0602 	add.w	r6, r8, #2
 8010044:	3e01      	subs	r6, #1
 8010046:	4638      	mov	r0, r7
 8010048:	612e      	str	r6, [r5, #16]
 801004a:	4621      	mov	r1, r4
 801004c:	f7ff fdda 	bl	800fc04 <_Bfree>
 8010050:	4628      	mov	r0, r5
 8010052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010056:	f842 0f04 	str.w	r0, [r2, #4]!
 801005a:	3301      	adds	r3, #1
 801005c:	e7c5      	b.n	800ffea <__lshift+0x4a>
 801005e:	3904      	subs	r1, #4
 8010060:	f853 2b04 	ldr.w	r2, [r3], #4
 8010064:	f841 2f04 	str.w	r2, [r1, #4]!
 8010068:	459c      	cmp	ip, r3
 801006a:	d8f9      	bhi.n	8010060 <__lshift+0xc0>
 801006c:	e7ea      	b.n	8010044 <__lshift+0xa4>
 801006e:	bf00      	nop
 8010070:	08010f28 	.word	0x08010f28
 8010074:	08010f39 	.word	0x08010f39

08010078 <__mcmp>:
 8010078:	690a      	ldr	r2, [r1, #16]
 801007a:	4603      	mov	r3, r0
 801007c:	6900      	ldr	r0, [r0, #16]
 801007e:	1a80      	subs	r0, r0, r2
 8010080:	b530      	push	{r4, r5, lr}
 8010082:	d10e      	bne.n	80100a2 <__mcmp+0x2a>
 8010084:	3314      	adds	r3, #20
 8010086:	3114      	adds	r1, #20
 8010088:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801008c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010090:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010094:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010098:	4295      	cmp	r5, r2
 801009a:	d003      	beq.n	80100a4 <__mcmp+0x2c>
 801009c:	d205      	bcs.n	80100aa <__mcmp+0x32>
 801009e:	f04f 30ff 	mov.w	r0, #4294967295
 80100a2:	bd30      	pop	{r4, r5, pc}
 80100a4:	42a3      	cmp	r3, r4
 80100a6:	d3f3      	bcc.n	8010090 <__mcmp+0x18>
 80100a8:	e7fb      	b.n	80100a2 <__mcmp+0x2a>
 80100aa:	2001      	movs	r0, #1
 80100ac:	e7f9      	b.n	80100a2 <__mcmp+0x2a>
	...

080100b0 <__mdiff>:
 80100b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100b4:	4689      	mov	r9, r1
 80100b6:	4606      	mov	r6, r0
 80100b8:	4611      	mov	r1, r2
 80100ba:	4648      	mov	r0, r9
 80100bc:	4614      	mov	r4, r2
 80100be:	f7ff ffdb 	bl	8010078 <__mcmp>
 80100c2:	1e05      	subs	r5, r0, #0
 80100c4:	d112      	bne.n	80100ec <__mdiff+0x3c>
 80100c6:	4629      	mov	r1, r5
 80100c8:	4630      	mov	r0, r6
 80100ca:	f7ff fd5b 	bl	800fb84 <_Balloc>
 80100ce:	4602      	mov	r2, r0
 80100d0:	b928      	cbnz	r0, 80100de <__mdiff+0x2e>
 80100d2:	4b3f      	ldr	r3, [pc, #252]	@ (80101d0 <__mdiff+0x120>)
 80100d4:	f240 2137 	movw	r1, #567	@ 0x237
 80100d8:	483e      	ldr	r0, [pc, #248]	@ (80101d4 <__mdiff+0x124>)
 80100da:	f000 faf3 	bl	80106c4 <__assert_func>
 80100de:	2301      	movs	r3, #1
 80100e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80100e4:	4610      	mov	r0, r2
 80100e6:	b003      	add	sp, #12
 80100e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100ec:	bfbc      	itt	lt
 80100ee:	464b      	movlt	r3, r9
 80100f0:	46a1      	movlt	r9, r4
 80100f2:	4630      	mov	r0, r6
 80100f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80100f8:	bfba      	itte	lt
 80100fa:	461c      	movlt	r4, r3
 80100fc:	2501      	movlt	r5, #1
 80100fe:	2500      	movge	r5, #0
 8010100:	f7ff fd40 	bl	800fb84 <_Balloc>
 8010104:	4602      	mov	r2, r0
 8010106:	b918      	cbnz	r0, 8010110 <__mdiff+0x60>
 8010108:	4b31      	ldr	r3, [pc, #196]	@ (80101d0 <__mdiff+0x120>)
 801010a:	f240 2145 	movw	r1, #581	@ 0x245
 801010e:	e7e3      	b.n	80100d8 <__mdiff+0x28>
 8010110:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010114:	6926      	ldr	r6, [r4, #16]
 8010116:	60c5      	str	r5, [r0, #12]
 8010118:	f109 0310 	add.w	r3, r9, #16
 801011c:	f109 0514 	add.w	r5, r9, #20
 8010120:	f104 0e14 	add.w	lr, r4, #20
 8010124:	f100 0b14 	add.w	fp, r0, #20
 8010128:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801012c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010130:	9301      	str	r3, [sp, #4]
 8010132:	46d9      	mov	r9, fp
 8010134:	f04f 0c00 	mov.w	ip, #0
 8010138:	9b01      	ldr	r3, [sp, #4]
 801013a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801013e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010142:	9301      	str	r3, [sp, #4]
 8010144:	fa1f f38a 	uxth.w	r3, sl
 8010148:	4619      	mov	r1, r3
 801014a:	b283      	uxth	r3, r0
 801014c:	1acb      	subs	r3, r1, r3
 801014e:	0c00      	lsrs	r0, r0, #16
 8010150:	4463      	add	r3, ip
 8010152:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010156:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801015a:	b29b      	uxth	r3, r3
 801015c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010160:	4576      	cmp	r6, lr
 8010162:	f849 3b04 	str.w	r3, [r9], #4
 8010166:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801016a:	d8e5      	bhi.n	8010138 <__mdiff+0x88>
 801016c:	1b33      	subs	r3, r6, r4
 801016e:	3b15      	subs	r3, #21
 8010170:	f023 0303 	bic.w	r3, r3, #3
 8010174:	3415      	adds	r4, #21
 8010176:	3304      	adds	r3, #4
 8010178:	42a6      	cmp	r6, r4
 801017a:	bf38      	it	cc
 801017c:	2304      	movcc	r3, #4
 801017e:	441d      	add	r5, r3
 8010180:	445b      	add	r3, fp
 8010182:	461e      	mov	r6, r3
 8010184:	462c      	mov	r4, r5
 8010186:	4544      	cmp	r4, r8
 8010188:	d30e      	bcc.n	80101a8 <__mdiff+0xf8>
 801018a:	f108 0103 	add.w	r1, r8, #3
 801018e:	1b49      	subs	r1, r1, r5
 8010190:	f021 0103 	bic.w	r1, r1, #3
 8010194:	3d03      	subs	r5, #3
 8010196:	45a8      	cmp	r8, r5
 8010198:	bf38      	it	cc
 801019a:	2100      	movcc	r1, #0
 801019c:	440b      	add	r3, r1
 801019e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80101a2:	b191      	cbz	r1, 80101ca <__mdiff+0x11a>
 80101a4:	6117      	str	r7, [r2, #16]
 80101a6:	e79d      	b.n	80100e4 <__mdiff+0x34>
 80101a8:	f854 1b04 	ldr.w	r1, [r4], #4
 80101ac:	46e6      	mov	lr, ip
 80101ae:	0c08      	lsrs	r0, r1, #16
 80101b0:	fa1c fc81 	uxtah	ip, ip, r1
 80101b4:	4471      	add	r1, lr
 80101b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80101ba:	b289      	uxth	r1, r1
 80101bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80101c0:	f846 1b04 	str.w	r1, [r6], #4
 80101c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80101c8:	e7dd      	b.n	8010186 <__mdiff+0xd6>
 80101ca:	3f01      	subs	r7, #1
 80101cc:	e7e7      	b.n	801019e <__mdiff+0xee>
 80101ce:	bf00      	nop
 80101d0:	08010f28 	.word	0x08010f28
 80101d4:	08010f39 	.word	0x08010f39

080101d8 <__d2b>:
 80101d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80101dc:	460f      	mov	r7, r1
 80101de:	2101      	movs	r1, #1
 80101e0:	ec59 8b10 	vmov	r8, r9, d0
 80101e4:	4616      	mov	r6, r2
 80101e6:	f7ff fccd 	bl	800fb84 <_Balloc>
 80101ea:	4604      	mov	r4, r0
 80101ec:	b930      	cbnz	r0, 80101fc <__d2b+0x24>
 80101ee:	4602      	mov	r2, r0
 80101f0:	4b23      	ldr	r3, [pc, #140]	@ (8010280 <__d2b+0xa8>)
 80101f2:	4824      	ldr	r0, [pc, #144]	@ (8010284 <__d2b+0xac>)
 80101f4:	f240 310f 	movw	r1, #783	@ 0x30f
 80101f8:	f000 fa64 	bl	80106c4 <__assert_func>
 80101fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010200:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010204:	b10d      	cbz	r5, 801020a <__d2b+0x32>
 8010206:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801020a:	9301      	str	r3, [sp, #4]
 801020c:	f1b8 0300 	subs.w	r3, r8, #0
 8010210:	d023      	beq.n	801025a <__d2b+0x82>
 8010212:	4668      	mov	r0, sp
 8010214:	9300      	str	r3, [sp, #0]
 8010216:	f7ff fd7c 	bl	800fd12 <__lo0bits>
 801021a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801021e:	b1d0      	cbz	r0, 8010256 <__d2b+0x7e>
 8010220:	f1c0 0320 	rsb	r3, r0, #32
 8010224:	fa02 f303 	lsl.w	r3, r2, r3
 8010228:	430b      	orrs	r3, r1
 801022a:	40c2      	lsrs	r2, r0
 801022c:	6163      	str	r3, [r4, #20]
 801022e:	9201      	str	r2, [sp, #4]
 8010230:	9b01      	ldr	r3, [sp, #4]
 8010232:	61a3      	str	r3, [r4, #24]
 8010234:	2b00      	cmp	r3, #0
 8010236:	bf0c      	ite	eq
 8010238:	2201      	moveq	r2, #1
 801023a:	2202      	movne	r2, #2
 801023c:	6122      	str	r2, [r4, #16]
 801023e:	b1a5      	cbz	r5, 801026a <__d2b+0x92>
 8010240:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010244:	4405      	add	r5, r0
 8010246:	603d      	str	r5, [r7, #0]
 8010248:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801024c:	6030      	str	r0, [r6, #0]
 801024e:	4620      	mov	r0, r4
 8010250:	b003      	add	sp, #12
 8010252:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010256:	6161      	str	r1, [r4, #20]
 8010258:	e7ea      	b.n	8010230 <__d2b+0x58>
 801025a:	a801      	add	r0, sp, #4
 801025c:	f7ff fd59 	bl	800fd12 <__lo0bits>
 8010260:	9b01      	ldr	r3, [sp, #4]
 8010262:	6163      	str	r3, [r4, #20]
 8010264:	3020      	adds	r0, #32
 8010266:	2201      	movs	r2, #1
 8010268:	e7e8      	b.n	801023c <__d2b+0x64>
 801026a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801026e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010272:	6038      	str	r0, [r7, #0]
 8010274:	6918      	ldr	r0, [r3, #16]
 8010276:	f7ff fd2d 	bl	800fcd4 <__hi0bits>
 801027a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801027e:	e7e5      	b.n	801024c <__d2b+0x74>
 8010280:	08010f28 	.word	0x08010f28
 8010284:	08010f39 	.word	0x08010f39

08010288 <__ssputs_r>:
 8010288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801028c:	688e      	ldr	r6, [r1, #8]
 801028e:	461f      	mov	r7, r3
 8010290:	42be      	cmp	r6, r7
 8010292:	680b      	ldr	r3, [r1, #0]
 8010294:	4682      	mov	sl, r0
 8010296:	460c      	mov	r4, r1
 8010298:	4690      	mov	r8, r2
 801029a:	d82d      	bhi.n	80102f8 <__ssputs_r+0x70>
 801029c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80102a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80102a4:	d026      	beq.n	80102f4 <__ssputs_r+0x6c>
 80102a6:	6965      	ldr	r5, [r4, #20]
 80102a8:	6909      	ldr	r1, [r1, #16]
 80102aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80102ae:	eba3 0901 	sub.w	r9, r3, r1
 80102b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80102b6:	1c7b      	adds	r3, r7, #1
 80102b8:	444b      	add	r3, r9
 80102ba:	106d      	asrs	r5, r5, #1
 80102bc:	429d      	cmp	r5, r3
 80102be:	bf38      	it	cc
 80102c0:	461d      	movcc	r5, r3
 80102c2:	0553      	lsls	r3, r2, #21
 80102c4:	d527      	bpl.n	8010316 <__ssputs_r+0x8e>
 80102c6:	4629      	mov	r1, r5
 80102c8:	f7fd fed0 	bl	800e06c <_malloc_r>
 80102cc:	4606      	mov	r6, r0
 80102ce:	b360      	cbz	r0, 801032a <__ssputs_r+0xa2>
 80102d0:	6921      	ldr	r1, [r4, #16]
 80102d2:	464a      	mov	r2, r9
 80102d4:	f7fe fdaf 	bl	800ee36 <memcpy>
 80102d8:	89a3      	ldrh	r3, [r4, #12]
 80102da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80102de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80102e2:	81a3      	strh	r3, [r4, #12]
 80102e4:	6126      	str	r6, [r4, #16]
 80102e6:	6165      	str	r5, [r4, #20]
 80102e8:	444e      	add	r6, r9
 80102ea:	eba5 0509 	sub.w	r5, r5, r9
 80102ee:	6026      	str	r6, [r4, #0]
 80102f0:	60a5      	str	r5, [r4, #8]
 80102f2:	463e      	mov	r6, r7
 80102f4:	42be      	cmp	r6, r7
 80102f6:	d900      	bls.n	80102fa <__ssputs_r+0x72>
 80102f8:	463e      	mov	r6, r7
 80102fa:	6820      	ldr	r0, [r4, #0]
 80102fc:	4632      	mov	r2, r6
 80102fe:	4641      	mov	r1, r8
 8010300:	f000 f9c6 	bl	8010690 <memmove>
 8010304:	68a3      	ldr	r3, [r4, #8]
 8010306:	1b9b      	subs	r3, r3, r6
 8010308:	60a3      	str	r3, [r4, #8]
 801030a:	6823      	ldr	r3, [r4, #0]
 801030c:	4433      	add	r3, r6
 801030e:	6023      	str	r3, [r4, #0]
 8010310:	2000      	movs	r0, #0
 8010312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010316:	462a      	mov	r2, r5
 8010318:	f000 fa18 	bl	801074c <_realloc_r>
 801031c:	4606      	mov	r6, r0
 801031e:	2800      	cmp	r0, #0
 8010320:	d1e0      	bne.n	80102e4 <__ssputs_r+0x5c>
 8010322:	6921      	ldr	r1, [r4, #16]
 8010324:	4650      	mov	r0, sl
 8010326:	f7ff fbe3 	bl	800faf0 <_free_r>
 801032a:	230c      	movs	r3, #12
 801032c:	f8ca 3000 	str.w	r3, [sl]
 8010330:	89a3      	ldrh	r3, [r4, #12]
 8010332:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010336:	81a3      	strh	r3, [r4, #12]
 8010338:	f04f 30ff 	mov.w	r0, #4294967295
 801033c:	e7e9      	b.n	8010312 <__ssputs_r+0x8a>
	...

08010340 <_svfiprintf_r>:
 8010340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010344:	4698      	mov	r8, r3
 8010346:	898b      	ldrh	r3, [r1, #12]
 8010348:	061b      	lsls	r3, r3, #24
 801034a:	b09d      	sub	sp, #116	@ 0x74
 801034c:	4607      	mov	r7, r0
 801034e:	460d      	mov	r5, r1
 8010350:	4614      	mov	r4, r2
 8010352:	d510      	bpl.n	8010376 <_svfiprintf_r+0x36>
 8010354:	690b      	ldr	r3, [r1, #16]
 8010356:	b973      	cbnz	r3, 8010376 <_svfiprintf_r+0x36>
 8010358:	2140      	movs	r1, #64	@ 0x40
 801035a:	f7fd fe87 	bl	800e06c <_malloc_r>
 801035e:	6028      	str	r0, [r5, #0]
 8010360:	6128      	str	r0, [r5, #16]
 8010362:	b930      	cbnz	r0, 8010372 <_svfiprintf_r+0x32>
 8010364:	230c      	movs	r3, #12
 8010366:	603b      	str	r3, [r7, #0]
 8010368:	f04f 30ff 	mov.w	r0, #4294967295
 801036c:	b01d      	add	sp, #116	@ 0x74
 801036e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010372:	2340      	movs	r3, #64	@ 0x40
 8010374:	616b      	str	r3, [r5, #20]
 8010376:	2300      	movs	r3, #0
 8010378:	9309      	str	r3, [sp, #36]	@ 0x24
 801037a:	2320      	movs	r3, #32
 801037c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010380:	f8cd 800c 	str.w	r8, [sp, #12]
 8010384:	2330      	movs	r3, #48	@ 0x30
 8010386:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010524 <_svfiprintf_r+0x1e4>
 801038a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801038e:	f04f 0901 	mov.w	r9, #1
 8010392:	4623      	mov	r3, r4
 8010394:	469a      	mov	sl, r3
 8010396:	f813 2b01 	ldrb.w	r2, [r3], #1
 801039a:	b10a      	cbz	r2, 80103a0 <_svfiprintf_r+0x60>
 801039c:	2a25      	cmp	r2, #37	@ 0x25
 801039e:	d1f9      	bne.n	8010394 <_svfiprintf_r+0x54>
 80103a0:	ebba 0b04 	subs.w	fp, sl, r4
 80103a4:	d00b      	beq.n	80103be <_svfiprintf_r+0x7e>
 80103a6:	465b      	mov	r3, fp
 80103a8:	4622      	mov	r2, r4
 80103aa:	4629      	mov	r1, r5
 80103ac:	4638      	mov	r0, r7
 80103ae:	f7ff ff6b 	bl	8010288 <__ssputs_r>
 80103b2:	3001      	adds	r0, #1
 80103b4:	f000 80a7 	beq.w	8010506 <_svfiprintf_r+0x1c6>
 80103b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80103ba:	445a      	add	r2, fp
 80103bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80103be:	f89a 3000 	ldrb.w	r3, [sl]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	f000 809f 	beq.w	8010506 <_svfiprintf_r+0x1c6>
 80103c8:	2300      	movs	r3, #0
 80103ca:	f04f 32ff 	mov.w	r2, #4294967295
 80103ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80103d2:	f10a 0a01 	add.w	sl, sl, #1
 80103d6:	9304      	str	r3, [sp, #16]
 80103d8:	9307      	str	r3, [sp, #28]
 80103da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80103de:	931a      	str	r3, [sp, #104]	@ 0x68
 80103e0:	4654      	mov	r4, sl
 80103e2:	2205      	movs	r2, #5
 80103e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103e8:	484e      	ldr	r0, [pc, #312]	@ (8010524 <_svfiprintf_r+0x1e4>)
 80103ea:	f7ef fef9 	bl	80001e0 <memchr>
 80103ee:	9a04      	ldr	r2, [sp, #16]
 80103f0:	b9d8      	cbnz	r0, 801042a <_svfiprintf_r+0xea>
 80103f2:	06d0      	lsls	r0, r2, #27
 80103f4:	bf44      	itt	mi
 80103f6:	2320      	movmi	r3, #32
 80103f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80103fc:	0711      	lsls	r1, r2, #28
 80103fe:	bf44      	itt	mi
 8010400:	232b      	movmi	r3, #43	@ 0x2b
 8010402:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010406:	f89a 3000 	ldrb.w	r3, [sl]
 801040a:	2b2a      	cmp	r3, #42	@ 0x2a
 801040c:	d015      	beq.n	801043a <_svfiprintf_r+0xfa>
 801040e:	9a07      	ldr	r2, [sp, #28]
 8010410:	4654      	mov	r4, sl
 8010412:	2000      	movs	r0, #0
 8010414:	f04f 0c0a 	mov.w	ip, #10
 8010418:	4621      	mov	r1, r4
 801041a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801041e:	3b30      	subs	r3, #48	@ 0x30
 8010420:	2b09      	cmp	r3, #9
 8010422:	d94b      	bls.n	80104bc <_svfiprintf_r+0x17c>
 8010424:	b1b0      	cbz	r0, 8010454 <_svfiprintf_r+0x114>
 8010426:	9207      	str	r2, [sp, #28]
 8010428:	e014      	b.n	8010454 <_svfiprintf_r+0x114>
 801042a:	eba0 0308 	sub.w	r3, r0, r8
 801042e:	fa09 f303 	lsl.w	r3, r9, r3
 8010432:	4313      	orrs	r3, r2
 8010434:	9304      	str	r3, [sp, #16]
 8010436:	46a2      	mov	sl, r4
 8010438:	e7d2      	b.n	80103e0 <_svfiprintf_r+0xa0>
 801043a:	9b03      	ldr	r3, [sp, #12]
 801043c:	1d19      	adds	r1, r3, #4
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	9103      	str	r1, [sp, #12]
 8010442:	2b00      	cmp	r3, #0
 8010444:	bfbb      	ittet	lt
 8010446:	425b      	neglt	r3, r3
 8010448:	f042 0202 	orrlt.w	r2, r2, #2
 801044c:	9307      	strge	r3, [sp, #28]
 801044e:	9307      	strlt	r3, [sp, #28]
 8010450:	bfb8      	it	lt
 8010452:	9204      	strlt	r2, [sp, #16]
 8010454:	7823      	ldrb	r3, [r4, #0]
 8010456:	2b2e      	cmp	r3, #46	@ 0x2e
 8010458:	d10a      	bne.n	8010470 <_svfiprintf_r+0x130>
 801045a:	7863      	ldrb	r3, [r4, #1]
 801045c:	2b2a      	cmp	r3, #42	@ 0x2a
 801045e:	d132      	bne.n	80104c6 <_svfiprintf_r+0x186>
 8010460:	9b03      	ldr	r3, [sp, #12]
 8010462:	1d1a      	adds	r2, r3, #4
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	9203      	str	r2, [sp, #12]
 8010468:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801046c:	3402      	adds	r4, #2
 801046e:	9305      	str	r3, [sp, #20]
 8010470:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010534 <_svfiprintf_r+0x1f4>
 8010474:	7821      	ldrb	r1, [r4, #0]
 8010476:	2203      	movs	r2, #3
 8010478:	4650      	mov	r0, sl
 801047a:	f7ef feb1 	bl	80001e0 <memchr>
 801047e:	b138      	cbz	r0, 8010490 <_svfiprintf_r+0x150>
 8010480:	9b04      	ldr	r3, [sp, #16]
 8010482:	eba0 000a 	sub.w	r0, r0, sl
 8010486:	2240      	movs	r2, #64	@ 0x40
 8010488:	4082      	lsls	r2, r0
 801048a:	4313      	orrs	r3, r2
 801048c:	3401      	adds	r4, #1
 801048e:	9304      	str	r3, [sp, #16]
 8010490:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010494:	4824      	ldr	r0, [pc, #144]	@ (8010528 <_svfiprintf_r+0x1e8>)
 8010496:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801049a:	2206      	movs	r2, #6
 801049c:	f7ef fea0 	bl	80001e0 <memchr>
 80104a0:	2800      	cmp	r0, #0
 80104a2:	d036      	beq.n	8010512 <_svfiprintf_r+0x1d2>
 80104a4:	4b21      	ldr	r3, [pc, #132]	@ (801052c <_svfiprintf_r+0x1ec>)
 80104a6:	bb1b      	cbnz	r3, 80104f0 <_svfiprintf_r+0x1b0>
 80104a8:	9b03      	ldr	r3, [sp, #12]
 80104aa:	3307      	adds	r3, #7
 80104ac:	f023 0307 	bic.w	r3, r3, #7
 80104b0:	3308      	adds	r3, #8
 80104b2:	9303      	str	r3, [sp, #12]
 80104b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104b6:	4433      	add	r3, r6
 80104b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80104ba:	e76a      	b.n	8010392 <_svfiprintf_r+0x52>
 80104bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80104c0:	460c      	mov	r4, r1
 80104c2:	2001      	movs	r0, #1
 80104c4:	e7a8      	b.n	8010418 <_svfiprintf_r+0xd8>
 80104c6:	2300      	movs	r3, #0
 80104c8:	3401      	adds	r4, #1
 80104ca:	9305      	str	r3, [sp, #20]
 80104cc:	4619      	mov	r1, r3
 80104ce:	f04f 0c0a 	mov.w	ip, #10
 80104d2:	4620      	mov	r0, r4
 80104d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80104d8:	3a30      	subs	r2, #48	@ 0x30
 80104da:	2a09      	cmp	r2, #9
 80104dc:	d903      	bls.n	80104e6 <_svfiprintf_r+0x1a6>
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d0c6      	beq.n	8010470 <_svfiprintf_r+0x130>
 80104e2:	9105      	str	r1, [sp, #20]
 80104e4:	e7c4      	b.n	8010470 <_svfiprintf_r+0x130>
 80104e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80104ea:	4604      	mov	r4, r0
 80104ec:	2301      	movs	r3, #1
 80104ee:	e7f0      	b.n	80104d2 <_svfiprintf_r+0x192>
 80104f0:	ab03      	add	r3, sp, #12
 80104f2:	9300      	str	r3, [sp, #0]
 80104f4:	462a      	mov	r2, r5
 80104f6:	4b0e      	ldr	r3, [pc, #56]	@ (8010530 <_svfiprintf_r+0x1f0>)
 80104f8:	a904      	add	r1, sp, #16
 80104fa:	4638      	mov	r0, r7
 80104fc:	f7fd fee2 	bl	800e2c4 <_printf_float>
 8010500:	1c42      	adds	r2, r0, #1
 8010502:	4606      	mov	r6, r0
 8010504:	d1d6      	bne.n	80104b4 <_svfiprintf_r+0x174>
 8010506:	89ab      	ldrh	r3, [r5, #12]
 8010508:	065b      	lsls	r3, r3, #25
 801050a:	f53f af2d 	bmi.w	8010368 <_svfiprintf_r+0x28>
 801050e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010510:	e72c      	b.n	801036c <_svfiprintf_r+0x2c>
 8010512:	ab03      	add	r3, sp, #12
 8010514:	9300      	str	r3, [sp, #0]
 8010516:	462a      	mov	r2, r5
 8010518:	4b05      	ldr	r3, [pc, #20]	@ (8010530 <_svfiprintf_r+0x1f0>)
 801051a:	a904      	add	r1, sp, #16
 801051c:	4638      	mov	r0, r7
 801051e:	f7fe f969 	bl	800e7f4 <_printf_i>
 8010522:	e7ed      	b.n	8010500 <_svfiprintf_r+0x1c0>
 8010524:	08011090 	.word	0x08011090
 8010528:	0801109a 	.word	0x0801109a
 801052c:	0800e2c5 	.word	0x0800e2c5
 8010530:	08010289 	.word	0x08010289
 8010534:	08011096 	.word	0x08011096

08010538 <__sflush_r>:
 8010538:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801053c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010540:	0716      	lsls	r6, r2, #28
 8010542:	4605      	mov	r5, r0
 8010544:	460c      	mov	r4, r1
 8010546:	d454      	bmi.n	80105f2 <__sflush_r+0xba>
 8010548:	684b      	ldr	r3, [r1, #4]
 801054a:	2b00      	cmp	r3, #0
 801054c:	dc02      	bgt.n	8010554 <__sflush_r+0x1c>
 801054e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010550:	2b00      	cmp	r3, #0
 8010552:	dd48      	ble.n	80105e6 <__sflush_r+0xae>
 8010554:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010556:	2e00      	cmp	r6, #0
 8010558:	d045      	beq.n	80105e6 <__sflush_r+0xae>
 801055a:	2300      	movs	r3, #0
 801055c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010560:	682f      	ldr	r7, [r5, #0]
 8010562:	6a21      	ldr	r1, [r4, #32]
 8010564:	602b      	str	r3, [r5, #0]
 8010566:	d030      	beq.n	80105ca <__sflush_r+0x92>
 8010568:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801056a:	89a3      	ldrh	r3, [r4, #12]
 801056c:	0759      	lsls	r1, r3, #29
 801056e:	d505      	bpl.n	801057c <__sflush_r+0x44>
 8010570:	6863      	ldr	r3, [r4, #4]
 8010572:	1ad2      	subs	r2, r2, r3
 8010574:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010576:	b10b      	cbz	r3, 801057c <__sflush_r+0x44>
 8010578:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801057a:	1ad2      	subs	r2, r2, r3
 801057c:	2300      	movs	r3, #0
 801057e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010580:	6a21      	ldr	r1, [r4, #32]
 8010582:	4628      	mov	r0, r5
 8010584:	47b0      	blx	r6
 8010586:	1c43      	adds	r3, r0, #1
 8010588:	89a3      	ldrh	r3, [r4, #12]
 801058a:	d106      	bne.n	801059a <__sflush_r+0x62>
 801058c:	6829      	ldr	r1, [r5, #0]
 801058e:	291d      	cmp	r1, #29
 8010590:	d82b      	bhi.n	80105ea <__sflush_r+0xb2>
 8010592:	4a2a      	ldr	r2, [pc, #168]	@ (801063c <__sflush_r+0x104>)
 8010594:	410a      	asrs	r2, r1
 8010596:	07d6      	lsls	r6, r2, #31
 8010598:	d427      	bmi.n	80105ea <__sflush_r+0xb2>
 801059a:	2200      	movs	r2, #0
 801059c:	6062      	str	r2, [r4, #4]
 801059e:	04d9      	lsls	r1, r3, #19
 80105a0:	6922      	ldr	r2, [r4, #16]
 80105a2:	6022      	str	r2, [r4, #0]
 80105a4:	d504      	bpl.n	80105b0 <__sflush_r+0x78>
 80105a6:	1c42      	adds	r2, r0, #1
 80105a8:	d101      	bne.n	80105ae <__sflush_r+0x76>
 80105aa:	682b      	ldr	r3, [r5, #0]
 80105ac:	b903      	cbnz	r3, 80105b0 <__sflush_r+0x78>
 80105ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80105b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80105b2:	602f      	str	r7, [r5, #0]
 80105b4:	b1b9      	cbz	r1, 80105e6 <__sflush_r+0xae>
 80105b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80105ba:	4299      	cmp	r1, r3
 80105bc:	d002      	beq.n	80105c4 <__sflush_r+0x8c>
 80105be:	4628      	mov	r0, r5
 80105c0:	f7ff fa96 	bl	800faf0 <_free_r>
 80105c4:	2300      	movs	r3, #0
 80105c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80105c8:	e00d      	b.n	80105e6 <__sflush_r+0xae>
 80105ca:	2301      	movs	r3, #1
 80105cc:	4628      	mov	r0, r5
 80105ce:	47b0      	blx	r6
 80105d0:	4602      	mov	r2, r0
 80105d2:	1c50      	adds	r0, r2, #1
 80105d4:	d1c9      	bne.n	801056a <__sflush_r+0x32>
 80105d6:	682b      	ldr	r3, [r5, #0]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d0c6      	beq.n	801056a <__sflush_r+0x32>
 80105dc:	2b1d      	cmp	r3, #29
 80105de:	d001      	beq.n	80105e4 <__sflush_r+0xac>
 80105e0:	2b16      	cmp	r3, #22
 80105e2:	d11e      	bne.n	8010622 <__sflush_r+0xea>
 80105e4:	602f      	str	r7, [r5, #0]
 80105e6:	2000      	movs	r0, #0
 80105e8:	e022      	b.n	8010630 <__sflush_r+0xf8>
 80105ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80105ee:	b21b      	sxth	r3, r3
 80105f0:	e01b      	b.n	801062a <__sflush_r+0xf2>
 80105f2:	690f      	ldr	r7, [r1, #16]
 80105f4:	2f00      	cmp	r7, #0
 80105f6:	d0f6      	beq.n	80105e6 <__sflush_r+0xae>
 80105f8:	0793      	lsls	r3, r2, #30
 80105fa:	680e      	ldr	r6, [r1, #0]
 80105fc:	bf08      	it	eq
 80105fe:	694b      	ldreq	r3, [r1, #20]
 8010600:	600f      	str	r7, [r1, #0]
 8010602:	bf18      	it	ne
 8010604:	2300      	movne	r3, #0
 8010606:	eba6 0807 	sub.w	r8, r6, r7
 801060a:	608b      	str	r3, [r1, #8]
 801060c:	f1b8 0f00 	cmp.w	r8, #0
 8010610:	dde9      	ble.n	80105e6 <__sflush_r+0xae>
 8010612:	6a21      	ldr	r1, [r4, #32]
 8010614:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010616:	4643      	mov	r3, r8
 8010618:	463a      	mov	r2, r7
 801061a:	4628      	mov	r0, r5
 801061c:	47b0      	blx	r6
 801061e:	2800      	cmp	r0, #0
 8010620:	dc08      	bgt.n	8010634 <__sflush_r+0xfc>
 8010622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010626:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801062a:	81a3      	strh	r3, [r4, #12]
 801062c:	f04f 30ff 	mov.w	r0, #4294967295
 8010630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010634:	4407      	add	r7, r0
 8010636:	eba8 0800 	sub.w	r8, r8, r0
 801063a:	e7e7      	b.n	801060c <__sflush_r+0xd4>
 801063c:	dfbffffe 	.word	0xdfbffffe

08010640 <_fflush_r>:
 8010640:	b538      	push	{r3, r4, r5, lr}
 8010642:	690b      	ldr	r3, [r1, #16]
 8010644:	4605      	mov	r5, r0
 8010646:	460c      	mov	r4, r1
 8010648:	b913      	cbnz	r3, 8010650 <_fflush_r+0x10>
 801064a:	2500      	movs	r5, #0
 801064c:	4628      	mov	r0, r5
 801064e:	bd38      	pop	{r3, r4, r5, pc}
 8010650:	b118      	cbz	r0, 801065a <_fflush_r+0x1a>
 8010652:	6a03      	ldr	r3, [r0, #32]
 8010654:	b90b      	cbnz	r3, 801065a <_fflush_r+0x1a>
 8010656:	f7fe fa79 	bl	800eb4c <__sinit>
 801065a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801065e:	2b00      	cmp	r3, #0
 8010660:	d0f3      	beq.n	801064a <_fflush_r+0xa>
 8010662:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010664:	07d0      	lsls	r0, r2, #31
 8010666:	d404      	bmi.n	8010672 <_fflush_r+0x32>
 8010668:	0599      	lsls	r1, r3, #22
 801066a:	d402      	bmi.n	8010672 <_fflush_r+0x32>
 801066c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801066e:	f7fe fbd8 	bl	800ee22 <__retarget_lock_acquire_recursive>
 8010672:	4628      	mov	r0, r5
 8010674:	4621      	mov	r1, r4
 8010676:	f7ff ff5f 	bl	8010538 <__sflush_r>
 801067a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801067c:	07da      	lsls	r2, r3, #31
 801067e:	4605      	mov	r5, r0
 8010680:	d4e4      	bmi.n	801064c <_fflush_r+0xc>
 8010682:	89a3      	ldrh	r3, [r4, #12]
 8010684:	059b      	lsls	r3, r3, #22
 8010686:	d4e1      	bmi.n	801064c <_fflush_r+0xc>
 8010688:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801068a:	f7fe fbcb 	bl	800ee24 <__retarget_lock_release_recursive>
 801068e:	e7dd      	b.n	801064c <_fflush_r+0xc>

08010690 <memmove>:
 8010690:	4288      	cmp	r0, r1
 8010692:	b510      	push	{r4, lr}
 8010694:	eb01 0402 	add.w	r4, r1, r2
 8010698:	d902      	bls.n	80106a0 <memmove+0x10>
 801069a:	4284      	cmp	r4, r0
 801069c:	4623      	mov	r3, r4
 801069e:	d807      	bhi.n	80106b0 <memmove+0x20>
 80106a0:	1e43      	subs	r3, r0, #1
 80106a2:	42a1      	cmp	r1, r4
 80106a4:	d008      	beq.n	80106b8 <memmove+0x28>
 80106a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80106aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80106ae:	e7f8      	b.n	80106a2 <memmove+0x12>
 80106b0:	4402      	add	r2, r0
 80106b2:	4601      	mov	r1, r0
 80106b4:	428a      	cmp	r2, r1
 80106b6:	d100      	bne.n	80106ba <memmove+0x2a>
 80106b8:	bd10      	pop	{r4, pc}
 80106ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80106be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80106c2:	e7f7      	b.n	80106b4 <memmove+0x24>

080106c4 <__assert_func>:
 80106c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80106c6:	4614      	mov	r4, r2
 80106c8:	461a      	mov	r2, r3
 80106ca:	4b09      	ldr	r3, [pc, #36]	@ (80106f0 <__assert_func+0x2c>)
 80106cc:	681b      	ldr	r3, [r3, #0]
 80106ce:	4605      	mov	r5, r0
 80106d0:	68d8      	ldr	r0, [r3, #12]
 80106d2:	b954      	cbnz	r4, 80106ea <__assert_func+0x26>
 80106d4:	4b07      	ldr	r3, [pc, #28]	@ (80106f4 <__assert_func+0x30>)
 80106d6:	461c      	mov	r4, r3
 80106d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80106dc:	9100      	str	r1, [sp, #0]
 80106de:	462b      	mov	r3, r5
 80106e0:	4905      	ldr	r1, [pc, #20]	@ (80106f8 <__assert_func+0x34>)
 80106e2:	f000 f86f 	bl	80107c4 <fiprintf>
 80106e6:	f7fd fc87 	bl	800dff8 <abort>
 80106ea:	4b04      	ldr	r3, [pc, #16]	@ (80106fc <__assert_func+0x38>)
 80106ec:	e7f4      	b.n	80106d8 <__assert_func+0x14>
 80106ee:	bf00      	nop
 80106f0:	200002d8 	.word	0x200002d8
 80106f4:	080110e6 	.word	0x080110e6
 80106f8:	080110b8 	.word	0x080110b8
 80106fc:	080110ab 	.word	0x080110ab

08010700 <_calloc_r>:
 8010700:	b570      	push	{r4, r5, r6, lr}
 8010702:	fba1 5402 	umull	r5, r4, r1, r2
 8010706:	b93c      	cbnz	r4, 8010718 <_calloc_r+0x18>
 8010708:	4629      	mov	r1, r5
 801070a:	f7fd fcaf 	bl	800e06c <_malloc_r>
 801070e:	4606      	mov	r6, r0
 8010710:	b928      	cbnz	r0, 801071e <_calloc_r+0x1e>
 8010712:	2600      	movs	r6, #0
 8010714:	4630      	mov	r0, r6
 8010716:	bd70      	pop	{r4, r5, r6, pc}
 8010718:	220c      	movs	r2, #12
 801071a:	6002      	str	r2, [r0, #0]
 801071c:	e7f9      	b.n	8010712 <_calloc_r+0x12>
 801071e:	462a      	mov	r2, r5
 8010720:	4621      	mov	r1, r4
 8010722:	f7fe faac 	bl	800ec7e <memset>
 8010726:	e7f5      	b.n	8010714 <_calloc_r+0x14>

08010728 <__ascii_mbtowc>:
 8010728:	b082      	sub	sp, #8
 801072a:	b901      	cbnz	r1, 801072e <__ascii_mbtowc+0x6>
 801072c:	a901      	add	r1, sp, #4
 801072e:	b142      	cbz	r2, 8010742 <__ascii_mbtowc+0x1a>
 8010730:	b14b      	cbz	r3, 8010746 <__ascii_mbtowc+0x1e>
 8010732:	7813      	ldrb	r3, [r2, #0]
 8010734:	600b      	str	r3, [r1, #0]
 8010736:	7812      	ldrb	r2, [r2, #0]
 8010738:	1e10      	subs	r0, r2, #0
 801073a:	bf18      	it	ne
 801073c:	2001      	movne	r0, #1
 801073e:	b002      	add	sp, #8
 8010740:	4770      	bx	lr
 8010742:	4610      	mov	r0, r2
 8010744:	e7fb      	b.n	801073e <__ascii_mbtowc+0x16>
 8010746:	f06f 0001 	mvn.w	r0, #1
 801074a:	e7f8      	b.n	801073e <__ascii_mbtowc+0x16>

0801074c <_realloc_r>:
 801074c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010750:	4680      	mov	r8, r0
 8010752:	4615      	mov	r5, r2
 8010754:	460c      	mov	r4, r1
 8010756:	b921      	cbnz	r1, 8010762 <_realloc_r+0x16>
 8010758:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801075c:	4611      	mov	r1, r2
 801075e:	f7fd bc85 	b.w	800e06c <_malloc_r>
 8010762:	b92a      	cbnz	r2, 8010770 <_realloc_r+0x24>
 8010764:	f7ff f9c4 	bl	800faf0 <_free_r>
 8010768:	2400      	movs	r4, #0
 801076a:	4620      	mov	r0, r4
 801076c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010770:	f000 f83a 	bl	80107e8 <_malloc_usable_size_r>
 8010774:	4285      	cmp	r5, r0
 8010776:	4606      	mov	r6, r0
 8010778:	d802      	bhi.n	8010780 <_realloc_r+0x34>
 801077a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801077e:	d8f4      	bhi.n	801076a <_realloc_r+0x1e>
 8010780:	4629      	mov	r1, r5
 8010782:	4640      	mov	r0, r8
 8010784:	f7fd fc72 	bl	800e06c <_malloc_r>
 8010788:	4607      	mov	r7, r0
 801078a:	2800      	cmp	r0, #0
 801078c:	d0ec      	beq.n	8010768 <_realloc_r+0x1c>
 801078e:	42b5      	cmp	r5, r6
 8010790:	462a      	mov	r2, r5
 8010792:	4621      	mov	r1, r4
 8010794:	bf28      	it	cs
 8010796:	4632      	movcs	r2, r6
 8010798:	f7fe fb4d 	bl	800ee36 <memcpy>
 801079c:	4621      	mov	r1, r4
 801079e:	4640      	mov	r0, r8
 80107a0:	f7ff f9a6 	bl	800faf0 <_free_r>
 80107a4:	463c      	mov	r4, r7
 80107a6:	e7e0      	b.n	801076a <_realloc_r+0x1e>

080107a8 <__ascii_wctomb>:
 80107a8:	4603      	mov	r3, r0
 80107aa:	4608      	mov	r0, r1
 80107ac:	b141      	cbz	r1, 80107c0 <__ascii_wctomb+0x18>
 80107ae:	2aff      	cmp	r2, #255	@ 0xff
 80107b0:	d904      	bls.n	80107bc <__ascii_wctomb+0x14>
 80107b2:	228a      	movs	r2, #138	@ 0x8a
 80107b4:	601a      	str	r2, [r3, #0]
 80107b6:	f04f 30ff 	mov.w	r0, #4294967295
 80107ba:	4770      	bx	lr
 80107bc:	700a      	strb	r2, [r1, #0]
 80107be:	2001      	movs	r0, #1
 80107c0:	4770      	bx	lr
	...

080107c4 <fiprintf>:
 80107c4:	b40e      	push	{r1, r2, r3}
 80107c6:	b503      	push	{r0, r1, lr}
 80107c8:	4601      	mov	r1, r0
 80107ca:	ab03      	add	r3, sp, #12
 80107cc:	4805      	ldr	r0, [pc, #20]	@ (80107e4 <fiprintf+0x20>)
 80107ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80107d2:	6800      	ldr	r0, [r0, #0]
 80107d4:	9301      	str	r3, [sp, #4]
 80107d6:	f000 f839 	bl	801084c <_vfiprintf_r>
 80107da:	b002      	add	sp, #8
 80107dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80107e0:	b003      	add	sp, #12
 80107e2:	4770      	bx	lr
 80107e4:	200002d8 	.word	0x200002d8

080107e8 <_malloc_usable_size_r>:
 80107e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80107ec:	1f18      	subs	r0, r3, #4
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	bfbc      	itt	lt
 80107f2:	580b      	ldrlt	r3, [r1, r0]
 80107f4:	18c0      	addlt	r0, r0, r3
 80107f6:	4770      	bx	lr

080107f8 <__sfputc_r>:
 80107f8:	6893      	ldr	r3, [r2, #8]
 80107fa:	3b01      	subs	r3, #1
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	b410      	push	{r4}
 8010800:	6093      	str	r3, [r2, #8]
 8010802:	da08      	bge.n	8010816 <__sfputc_r+0x1e>
 8010804:	6994      	ldr	r4, [r2, #24]
 8010806:	42a3      	cmp	r3, r4
 8010808:	db01      	blt.n	801080e <__sfputc_r+0x16>
 801080a:	290a      	cmp	r1, #10
 801080c:	d103      	bne.n	8010816 <__sfputc_r+0x1e>
 801080e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010812:	f000 b933 	b.w	8010a7c <__swbuf_r>
 8010816:	6813      	ldr	r3, [r2, #0]
 8010818:	1c58      	adds	r0, r3, #1
 801081a:	6010      	str	r0, [r2, #0]
 801081c:	7019      	strb	r1, [r3, #0]
 801081e:	4608      	mov	r0, r1
 8010820:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010824:	4770      	bx	lr

08010826 <__sfputs_r>:
 8010826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010828:	4606      	mov	r6, r0
 801082a:	460f      	mov	r7, r1
 801082c:	4614      	mov	r4, r2
 801082e:	18d5      	adds	r5, r2, r3
 8010830:	42ac      	cmp	r4, r5
 8010832:	d101      	bne.n	8010838 <__sfputs_r+0x12>
 8010834:	2000      	movs	r0, #0
 8010836:	e007      	b.n	8010848 <__sfputs_r+0x22>
 8010838:	f814 1b01 	ldrb.w	r1, [r4], #1
 801083c:	463a      	mov	r2, r7
 801083e:	4630      	mov	r0, r6
 8010840:	f7ff ffda 	bl	80107f8 <__sfputc_r>
 8010844:	1c43      	adds	r3, r0, #1
 8010846:	d1f3      	bne.n	8010830 <__sfputs_r+0xa>
 8010848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801084c <_vfiprintf_r>:
 801084c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010850:	460d      	mov	r5, r1
 8010852:	b09d      	sub	sp, #116	@ 0x74
 8010854:	4614      	mov	r4, r2
 8010856:	4698      	mov	r8, r3
 8010858:	4606      	mov	r6, r0
 801085a:	b118      	cbz	r0, 8010864 <_vfiprintf_r+0x18>
 801085c:	6a03      	ldr	r3, [r0, #32]
 801085e:	b90b      	cbnz	r3, 8010864 <_vfiprintf_r+0x18>
 8010860:	f7fe f974 	bl	800eb4c <__sinit>
 8010864:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010866:	07d9      	lsls	r1, r3, #31
 8010868:	d405      	bmi.n	8010876 <_vfiprintf_r+0x2a>
 801086a:	89ab      	ldrh	r3, [r5, #12]
 801086c:	059a      	lsls	r2, r3, #22
 801086e:	d402      	bmi.n	8010876 <_vfiprintf_r+0x2a>
 8010870:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010872:	f7fe fad6 	bl	800ee22 <__retarget_lock_acquire_recursive>
 8010876:	89ab      	ldrh	r3, [r5, #12]
 8010878:	071b      	lsls	r3, r3, #28
 801087a:	d501      	bpl.n	8010880 <_vfiprintf_r+0x34>
 801087c:	692b      	ldr	r3, [r5, #16]
 801087e:	b99b      	cbnz	r3, 80108a8 <_vfiprintf_r+0x5c>
 8010880:	4629      	mov	r1, r5
 8010882:	4630      	mov	r0, r6
 8010884:	f000 f938 	bl	8010af8 <__swsetup_r>
 8010888:	b170      	cbz	r0, 80108a8 <_vfiprintf_r+0x5c>
 801088a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801088c:	07dc      	lsls	r4, r3, #31
 801088e:	d504      	bpl.n	801089a <_vfiprintf_r+0x4e>
 8010890:	f04f 30ff 	mov.w	r0, #4294967295
 8010894:	b01d      	add	sp, #116	@ 0x74
 8010896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801089a:	89ab      	ldrh	r3, [r5, #12]
 801089c:	0598      	lsls	r0, r3, #22
 801089e:	d4f7      	bmi.n	8010890 <_vfiprintf_r+0x44>
 80108a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80108a2:	f7fe fabf 	bl	800ee24 <__retarget_lock_release_recursive>
 80108a6:	e7f3      	b.n	8010890 <_vfiprintf_r+0x44>
 80108a8:	2300      	movs	r3, #0
 80108aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80108ac:	2320      	movs	r3, #32
 80108ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80108b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80108b6:	2330      	movs	r3, #48	@ 0x30
 80108b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010a68 <_vfiprintf_r+0x21c>
 80108bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80108c0:	f04f 0901 	mov.w	r9, #1
 80108c4:	4623      	mov	r3, r4
 80108c6:	469a      	mov	sl, r3
 80108c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80108cc:	b10a      	cbz	r2, 80108d2 <_vfiprintf_r+0x86>
 80108ce:	2a25      	cmp	r2, #37	@ 0x25
 80108d0:	d1f9      	bne.n	80108c6 <_vfiprintf_r+0x7a>
 80108d2:	ebba 0b04 	subs.w	fp, sl, r4
 80108d6:	d00b      	beq.n	80108f0 <_vfiprintf_r+0xa4>
 80108d8:	465b      	mov	r3, fp
 80108da:	4622      	mov	r2, r4
 80108dc:	4629      	mov	r1, r5
 80108de:	4630      	mov	r0, r6
 80108e0:	f7ff ffa1 	bl	8010826 <__sfputs_r>
 80108e4:	3001      	adds	r0, #1
 80108e6:	f000 80a7 	beq.w	8010a38 <_vfiprintf_r+0x1ec>
 80108ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80108ec:	445a      	add	r2, fp
 80108ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80108f0:	f89a 3000 	ldrb.w	r3, [sl]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	f000 809f 	beq.w	8010a38 <_vfiprintf_r+0x1ec>
 80108fa:	2300      	movs	r3, #0
 80108fc:	f04f 32ff 	mov.w	r2, #4294967295
 8010900:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010904:	f10a 0a01 	add.w	sl, sl, #1
 8010908:	9304      	str	r3, [sp, #16]
 801090a:	9307      	str	r3, [sp, #28]
 801090c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010910:	931a      	str	r3, [sp, #104]	@ 0x68
 8010912:	4654      	mov	r4, sl
 8010914:	2205      	movs	r2, #5
 8010916:	f814 1b01 	ldrb.w	r1, [r4], #1
 801091a:	4853      	ldr	r0, [pc, #332]	@ (8010a68 <_vfiprintf_r+0x21c>)
 801091c:	f7ef fc60 	bl	80001e0 <memchr>
 8010920:	9a04      	ldr	r2, [sp, #16]
 8010922:	b9d8      	cbnz	r0, 801095c <_vfiprintf_r+0x110>
 8010924:	06d1      	lsls	r1, r2, #27
 8010926:	bf44      	itt	mi
 8010928:	2320      	movmi	r3, #32
 801092a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801092e:	0713      	lsls	r3, r2, #28
 8010930:	bf44      	itt	mi
 8010932:	232b      	movmi	r3, #43	@ 0x2b
 8010934:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010938:	f89a 3000 	ldrb.w	r3, [sl]
 801093c:	2b2a      	cmp	r3, #42	@ 0x2a
 801093e:	d015      	beq.n	801096c <_vfiprintf_r+0x120>
 8010940:	9a07      	ldr	r2, [sp, #28]
 8010942:	4654      	mov	r4, sl
 8010944:	2000      	movs	r0, #0
 8010946:	f04f 0c0a 	mov.w	ip, #10
 801094a:	4621      	mov	r1, r4
 801094c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010950:	3b30      	subs	r3, #48	@ 0x30
 8010952:	2b09      	cmp	r3, #9
 8010954:	d94b      	bls.n	80109ee <_vfiprintf_r+0x1a2>
 8010956:	b1b0      	cbz	r0, 8010986 <_vfiprintf_r+0x13a>
 8010958:	9207      	str	r2, [sp, #28]
 801095a:	e014      	b.n	8010986 <_vfiprintf_r+0x13a>
 801095c:	eba0 0308 	sub.w	r3, r0, r8
 8010960:	fa09 f303 	lsl.w	r3, r9, r3
 8010964:	4313      	orrs	r3, r2
 8010966:	9304      	str	r3, [sp, #16]
 8010968:	46a2      	mov	sl, r4
 801096a:	e7d2      	b.n	8010912 <_vfiprintf_r+0xc6>
 801096c:	9b03      	ldr	r3, [sp, #12]
 801096e:	1d19      	adds	r1, r3, #4
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	9103      	str	r1, [sp, #12]
 8010974:	2b00      	cmp	r3, #0
 8010976:	bfbb      	ittet	lt
 8010978:	425b      	neglt	r3, r3
 801097a:	f042 0202 	orrlt.w	r2, r2, #2
 801097e:	9307      	strge	r3, [sp, #28]
 8010980:	9307      	strlt	r3, [sp, #28]
 8010982:	bfb8      	it	lt
 8010984:	9204      	strlt	r2, [sp, #16]
 8010986:	7823      	ldrb	r3, [r4, #0]
 8010988:	2b2e      	cmp	r3, #46	@ 0x2e
 801098a:	d10a      	bne.n	80109a2 <_vfiprintf_r+0x156>
 801098c:	7863      	ldrb	r3, [r4, #1]
 801098e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010990:	d132      	bne.n	80109f8 <_vfiprintf_r+0x1ac>
 8010992:	9b03      	ldr	r3, [sp, #12]
 8010994:	1d1a      	adds	r2, r3, #4
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	9203      	str	r2, [sp, #12]
 801099a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801099e:	3402      	adds	r4, #2
 80109a0:	9305      	str	r3, [sp, #20]
 80109a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010a78 <_vfiprintf_r+0x22c>
 80109a6:	7821      	ldrb	r1, [r4, #0]
 80109a8:	2203      	movs	r2, #3
 80109aa:	4650      	mov	r0, sl
 80109ac:	f7ef fc18 	bl	80001e0 <memchr>
 80109b0:	b138      	cbz	r0, 80109c2 <_vfiprintf_r+0x176>
 80109b2:	9b04      	ldr	r3, [sp, #16]
 80109b4:	eba0 000a 	sub.w	r0, r0, sl
 80109b8:	2240      	movs	r2, #64	@ 0x40
 80109ba:	4082      	lsls	r2, r0
 80109bc:	4313      	orrs	r3, r2
 80109be:	3401      	adds	r4, #1
 80109c0:	9304      	str	r3, [sp, #16]
 80109c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109c6:	4829      	ldr	r0, [pc, #164]	@ (8010a6c <_vfiprintf_r+0x220>)
 80109c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80109cc:	2206      	movs	r2, #6
 80109ce:	f7ef fc07 	bl	80001e0 <memchr>
 80109d2:	2800      	cmp	r0, #0
 80109d4:	d03f      	beq.n	8010a56 <_vfiprintf_r+0x20a>
 80109d6:	4b26      	ldr	r3, [pc, #152]	@ (8010a70 <_vfiprintf_r+0x224>)
 80109d8:	bb1b      	cbnz	r3, 8010a22 <_vfiprintf_r+0x1d6>
 80109da:	9b03      	ldr	r3, [sp, #12]
 80109dc:	3307      	adds	r3, #7
 80109de:	f023 0307 	bic.w	r3, r3, #7
 80109e2:	3308      	adds	r3, #8
 80109e4:	9303      	str	r3, [sp, #12]
 80109e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109e8:	443b      	add	r3, r7
 80109ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80109ec:	e76a      	b.n	80108c4 <_vfiprintf_r+0x78>
 80109ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80109f2:	460c      	mov	r4, r1
 80109f4:	2001      	movs	r0, #1
 80109f6:	e7a8      	b.n	801094a <_vfiprintf_r+0xfe>
 80109f8:	2300      	movs	r3, #0
 80109fa:	3401      	adds	r4, #1
 80109fc:	9305      	str	r3, [sp, #20]
 80109fe:	4619      	mov	r1, r3
 8010a00:	f04f 0c0a 	mov.w	ip, #10
 8010a04:	4620      	mov	r0, r4
 8010a06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010a0a:	3a30      	subs	r2, #48	@ 0x30
 8010a0c:	2a09      	cmp	r2, #9
 8010a0e:	d903      	bls.n	8010a18 <_vfiprintf_r+0x1cc>
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d0c6      	beq.n	80109a2 <_vfiprintf_r+0x156>
 8010a14:	9105      	str	r1, [sp, #20]
 8010a16:	e7c4      	b.n	80109a2 <_vfiprintf_r+0x156>
 8010a18:	fb0c 2101 	mla	r1, ip, r1, r2
 8010a1c:	4604      	mov	r4, r0
 8010a1e:	2301      	movs	r3, #1
 8010a20:	e7f0      	b.n	8010a04 <_vfiprintf_r+0x1b8>
 8010a22:	ab03      	add	r3, sp, #12
 8010a24:	9300      	str	r3, [sp, #0]
 8010a26:	462a      	mov	r2, r5
 8010a28:	4b12      	ldr	r3, [pc, #72]	@ (8010a74 <_vfiprintf_r+0x228>)
 8010a2a:	a904      	add	r1, sp, #16
 8010a2c:	4630      	mov	r0, r6
 8010a2e:	f7fd fc49 	bl	800e2c4 <_printf_float>
 8010a32:	4607      	mov	r7, r0
 8010a34:	1c78      	adds	r0, r7, #1
 8010a36:	d1d6      	bne.n	80109e6 <_vfiprintf_r+0x19a>
 8010a38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010a3a:	07d9      	lsls	r1, r3, #31
 8010a3c:	d405      	bmi.n	8010a4a <_vfiprintf_r+0x1fe>
 8010a3e:	89ab      	ldrh	r3, [r5, #12]
 8010a40:	059a      	lsls	r2, r3, #22
 8010a42:	d402      	bmi.n	8010a4a <_vfiprintf_r+0x1fe>
 8010a44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010a46:	f7fe f9ed 	bl	800ee24 <__retarget_lock_release_recursive>
 8010a4a:	89ab      	ldrh	r3, [r5, #12]
 8010a4c:	065b      	lsls	r3, r3, #25
 8010a4e:	f53f af1f 	bmi.w	8010890 <_vfiprintf_r+0x44>
 8010a52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010a54:	e71e      	b.n	8010894 <_vfiprintf_r+0x48>
 8010a56:	ab03      	add	r3, sp, #12
 8010a58:	9300      	str	r3, [sp, #0]
 8010a5a:	462a      	mov	r2, r5
 8010a5c:	4b05      	ldr	r3, [pc, #20]	@ (8010a74 <_vfiprintf_r+0x228>)
 8010a5e:	a904      	add	r1, sp, #16
 8010a60:	4630      	mov	r0, r6
 8010a62:	f7fd fec7 	bl	800e7f4 <_printf_i>
 8010a66:	e7e4      	b.n	8010a32 <_vfiprintf_r+0x1e6>
 8010a68:	08011090 	.word	0x08011090
 8010a6c:	0801109a 	.word	0x0801109a
 8010a70:	0800e2c5 	.word	0x0800e2c5
 8010a74:	08010827 	.word	0x08010827
 8010a78:	08011096 	.word	0x08011096

08010a7c <__swbuf_r>:
 8010a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a7e:	460e      	mov	r6, r1
 8010a80:	4614      	mov	r4, r2
 8010a82:	4605      	mov	r5, r0
 8010a84:	b118      	cbz	r0, 8010a8e <__swbuf_r+0x12>
 8010a86:	6a03      	ldr	r3, [r0, #32]
 8010a88:	b90b      	cbnz	r3, 8010a8e <__swbuf_r+0x12>
 8010a8a:	f7fe f85f 	bl	800eb4c <__sinit>
 8010a8e:	69a3      	ldr	r3, [r4, #24]
 8010a90:	60a3      	str	r3, [r4, #8]
 8010a92:	89a3      	ldrh	r3, [r4, #12]
 8010a94:	071a      	lsls	r2, r3, #28
 8010a96:	d501      	bpl.n	8010a9c <__swbuf_r+0x20>
 8010a98:	6923      	ldr	r3, [r4, #16]
 8010a9a:	b943      	cbnz	r3, 8010aae <__swbuf_r+0x32>
 8010a9c:	4621      	mov	r1, r4
 8010a9e:	4628      	mov	r0, r5
 8010aa0:	f000 f82a 	bl	8010af8 <__swsetup_r>
 8010aa4:	b118      	cbz	r0, 8010aae <__swbuf_r+0x32>
 8010aa6:	f04f 37ff 	mov.w	r7, #4294967295
 8010aaa:	4638      	mov	r0, r7
 8010aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010aae:	6823      	ldr	r3, [r4, #0]
 8010ab0:	6922      	ldr	r2, [r4, #16]
 8010ab2:	1a98      	subs	r0, r3, r2
 8010ab4:	6963      	ldr	r3, [r4, #20]
 8010ab6:	b2f6      	uxtb	r6, r6
 8010ab8:	4283      	cmp	r3, r0
 8010aba:	4637      	mov	r7, r6
 8010abc:	dc05      	bgt.n	8010aca <__swbuf_r+0x4e>
 8010abe:	4621      	mov	r1, r4
 8010ac0:	4628      	mov	r0, r5
 8010ac2:	f7ff fdbd 	bl	8010640 <_fflush_r>
 8010ac6:	2800      	cmp	r0, #0
 8010ac8:	d1ed      	bne.n	8010aa6 <__swbuf_r+0x2a>
 8010aca:	68a3      	ldr	r3, [r4, #8]
 8010acc:	3b01      	subs	r3, #1
 8010ace:	60a3      	str	r3, [r4, #8]
 8010ad0:	6823      	ldr	r3, [r4, #0]
 8010ad2:	1c5a      	adds	r2, r3, #1
 8010ad4:	6022      	str	r2, [r4, #0]
 8010ad6:	701e      	strb	r6, [r3, #0]
 8010ad8:	6962      	ldr	r2, [r4, #20]
 8010ada:	1c43      	adds	r3, r0, #1
 8010adc:	429a      	cmp	r2, r3
 8010ade:	d004      	beq.n	8010aea <__swbuf_r+0x6e>
 8010ae0:	89a3      	ldrh	r3, [r4, #12]
 8010ae2:	07db      	lsls	r3, r3, #31
 8010ae4:	d5e1      	bpl.n	8010aaa <__swbuf_r+0x2e>
 8010ae6:	2e0a      	cmp	r6, #10
 8010ae8:	d1df      	bne.n	8010aaa <__swbuf_r+0x2e>
 8010aea:	4621      	mov	r1, r4
 8010aec:	4628      	mov	r0, r5
 8010aee:	f7ff fda7 	bl	8010640 <_fflush_r>
 8010af2:	2800      	cmp	r0, #0
 8010af4:	d0d9      	beq.n	8010aaa <__swbuf_r+0x2e>
 8010af6:	e7d6      	b.n	8010aa6 <__swbuf_r+0x2a>

08010af8 <__swsetup_r>:
 8010af8:	b538      	push	{r3, r4, r5, lr}
 8010afa:	4b29      	ldr	r3, [pc, #164]	@ (8010ba0 <__swsetup_r+0xa8>)
 8010afc:	4605      	mov	r5, r0
 8010afe:	6818      	ldr	r0, [r3, #0]
 8010b00:	460c      	mov	r4, r1
 8010b02:	b118      	cbz	r0, 8010b0c <__swsetup_r+0x14>
 8010b04:	6a03      	ldr	r3, [r0, #32]
 8010b06:	b90b      	cbnz	r3, 8010b0c <__swsetup_r+0x14>
 8010b08:	f7fe f820 	bl	800eb4c <__sinit>
 8010b0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b10:	0719      	lsls	r1, r3, #28
 8010b12:	d422      	bmi.n	8010b5a <__swsetup_r+0x62>
 8010b14:	06da      	lsls	r2, r3, #27
 8010b16:	d407      	bmi.n	8010b28 <__swsetup_r+0x30>
 8010b18:	2209      	movs	r2, #9
 8010b1a:	602a      	str	r2, [r5, #0]
 8010b1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b20:	81a3      	strh	r3, [r4, #12]
 8010b22:	f04f 30ff 	mov.w	r0, #4294967295
 8010b26:	e033      	b.n	8010b90 <__swsetup_r+0x98>
 8010b28:	0758      	lsls	r0, r3, #29
 8010b2a:	d512      	bpl.n	8010b52 <__swsetup_r+0x5a>
 8010b2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010b2e:	b141      	cbz	r1, 8010b42 <__swsetup_r+0x4a>
 8010b30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010b34:	4299      	cmp	r1, r3
 8010b36:	d002      	beq.n	8010b3e <__swsetup_r+0x46>
 8010b38:	4628      	mov	r0, r5
 8010b3a:	f7fe ffd9 	bl	800faf0 <_free_r>
 8010b3e:	2300      	movs	r3, #0
 8010b40:	6363      	str	r3, [r4, #52]	@ 0x34
 8010b42:	89a3      	ldrh	r3, [r4, #12]
 8010b44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010b48:	81a3      	strh	r3, [r4, #12]
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	6063      	str	r3, [r4, #4]
 8010b4e:	6923      	ldr	r3, [r4, #16]
 8010b50:	6023      	str	r3, [r4, #0]
 8010b52:	89a3      	ldrh	r3, [r4, #12]
 8010b54:	f043 0308 	orr.w	r3, r3, #8
 8010b58:	81a3      	strh	r3, [r4, #12]
 8010b5a:	6923      	ldr	r3, [r4, #16]
 8010b5c:	b94b      	cbnz	r3, 8010b72 <__swsetup_r+0x7a>
 8010b5e:	89a3      	ldrh	r3, [r4, #12]
 8010b60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010b64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010b68:	d003      	beq.n	8010b72 <__swsetup_r+0x7a>
 8010b6a:	4621      	mov	r1, r4
 8010b6c:	4628      	mov	r0, r5
 8010b6e:	f000 f83f 	bl	8010bf0 <__smakebuf_r>
 8010b72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b76:	f013 0201 	ands.w	r2, r3, #1
 8010b7a:	d00a      	beq.n	8010b92 <__swsetup_r+0x9a>
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	60a2      	str	r2, [r4, #8]
 8010b80:	6962      	ldr	r2, [r4, #20]
 8010b82:	4252      	negs	r2, r2
 8010b84:	61a2      	str	r2, [r4, #24]
 8010b86:	6922      	ldr	r2, [r4, #16]
 8010b88:	b942      	cbnz	r2, 8010b9c <__swsetup_r+0xa4>
 8010b8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010b8e:	d1c5      	bne.n	8010b1c <__swsetup_r+0x24>
 8010b90:	bd38      	pop	{r3, r4, r5, pc}
 8010b92:	0799      	lsls	r1, r3, #30
 8010b94:	bf58      	it	pl
 8010b96:	6962      	ldrpl	r2, [r4, #20]
 8010b98:	60a2      	str	r2, [r4, #8]
 8010b9a:	e7f4      	b.n	8010b86 <__swsetup_r+0x8e>
 8010b9c:	2000      	movs	r0, #0
 8010b9e:	e7f7      	b.n	8010b90 <__swsetup_r+0x98>
 8010ba0:	200002d8 	.word	0x200002d8

08010ba4 <__swhatbuf_r>:
 8010ba4:	b570      	push	{r4, r5, r6, lr}
 8010ba6:	460c      	mov	r4, r1
 8010ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bac:	2900      	cmp	r1, #0
 8010bae:	b096      	sub	sp, #88	@ 0x58
 8010bb0:	4615      	mov	r5, r2
 8010bb2:	461e      	mov	r6, r3
 8010bb4:	da0d      	bge.n	8010bd2 <__swhatbuf_r+0x2e>
 8010bb6:	89a3      	ldrh	r3, [r4, #12]
 8010bb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010bbc:	f04f 0100 	mov.w	r1, #0
 8010bc0:	bf14      	ite	ne
 8010bc2:	2340      	movne	r3, #64	@ 0x40
 8010bc4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010bc8:	2000      	movs	r0, #0
 8010bca:	6031      	str	r1, [r6, #0]
 8010bcc:	602b      	str	r3, [r5, #0]
 8010bce:	b016      	add	sp, #88	@ 0x58
 8010bd0:	bd70      	pop	{r4, r5, r6, pc}
 8010bd2:	466a      	mov	r2, sp
 8010bd4:	f000 f848 	bl	8010c68 <_fstat_r>
 8010bd8:	2800      	cmp	r0, #0
 8010bda:	dbec      	blt.n	8010bb6 <__swhatbuf_r+0x12>
 8010bdc:	9901      	ldr	r1, [sp, #4]
 8010bde:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010be2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010be6:	4259      	negs	r1, r3
 8010be8:	4159      	adcs	r1, r3
 8010bea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010bee:	e7eb      	b.n	8010bc8 <__swhatbuf_r+0x24>

08010bf0 <__smakebuf_r>:
 8010bf0:	898b      	ldrh	r3, [r1, #12]
 8010bf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010bf4:	079d      	lsls	r5, r3, #30
 8010bf6:	4606      	mov	r6, r0
 8010bf8:	460c      	mov	r4, r1
 8010bfa:	d507      	bpl.n	8010c0c <__smakebuf_r+0x1c>
 8010bfc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010c00:	6023      	str	r3, [r4, #0]
 8010c02:	6123      	str	r3, [r4, #16]
 8010c04:	2301      	movs	r3, #1
 8010c06:	6163      	str	r3, [r4, #20]
 8010c08:	b003      	add	sp, #12
 8010c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c0c:	ab01      	add	r3, sp, #4
 8010c0e:	466a      	mov	r2, sp
 8010c10:	f7ff ffc8 	bl	8010ba4 <__swhatbuf_r>
 8010c14:	9f00      	ldr	r7, [sp, #0]
 8010c16:	4605      	mov	r5, r0
 8010c18:	4639      	mov	r1, r7
 8010c1a:	4630      	mov	r0, r6
 8010c1c:	f7fd fa26 	bl	800e06c <_malloc_r>
 8010c20:	b948      	cbnz	r0, 8010c36 <__smakebuf_r+0x46>
 8010c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c26:	059a      	lsls	r2, r3, #22
 8010c28:	d4ee      	bmi.n	8010c08 <__smakebuf_r+0x18>
 8010c2a:	f023 0303 	bic.w	r3, r3, #3
 8010c2e:	f043 0302 	orr.w	r3, r3, #2
 8010c32:	81a3      	strh	r3, [r4, #12]
 8010c34:	e7e2      	b.n	8010bfc <__smakebuf_r+0xc>
 8010c36:	89a3      	ldrh	r3, [r4, #12]
 8010c38:	6020      	str	r0, [r4, #0]
 8010c3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010c3e:	81a3      	strh	r3, [r4, #12]
 8010c40:	9b01      	ldr	r3, [sp, #4]
 8010c42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010c46:	b15b      	cbz	r3, 8010c60 <__smakebuf_r+0x70>
 8010c48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c4c:	4630      	mov	r0, r6
 8010c4e:	f000 f81d 	bl	8010c8c <_isatty_r>
 8010c52:	b128      	cbz	r0, 8010c60 <__smakebuf_r+0x70>
 8010c54:	89a3      	ldrh	r3, [r4, #12]
 8010c56:	f023 0303 	bic.w	r3, r3, #3
 8010c5a:	f043 0301 	orr.w	r3, r3, #1
 8010c5e:	81a3      	strh	r3, [r4, #12]
 8010c60:	89a3      	ldrh	r3, [r4, #12]
 8010c62:	431d      	orrs	r5, r3
 8010c64:	81a5      	strh	r5, [r4, #12]
 8010c66:	e7cf      	b.n	8010c08 <__smakebuf_r+0x18>

08010c68 <_fstat_r>:
 8010c68:	b538      	push	{r3, r4, r5, lr}
 8010c6a:	4d07      	ldr	r5, [pc, #28]	@ (8010c88 <_fstat_r+0x20>)
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	4604      	mov	r4, r0
 8010c70:	4608      	mov	r0, r1
 8010c72:	4611      	mov	r1, r2
 8010c74:	602b      	str	r3, [r5, #0]
 8010c76:	f7f3 fb21 	bl	80042bc <_fstat>
 8010c7a:	1c43      	adds	r3, r0, #1
 8010c7c:	d102      	bne.n	8010c84 <_fstat_r+0x1c>
 8010c7e:	682b      	ldr	r3, [r5, #0]
 8010c80:	b103      	cbz	r3, 8010c84 <_fstat_r+0x1c>
 8010c82:	6023      	str	r3, [r4, #0]
 8010c84:	bd38      	pop	{r3, r4, r5, pc}
 8010c86:	bf00      	nop
 8010c88:	20000a38 	.word	0x20000a38

08010c8c <_isatty_r>:
 8010c8c:	b538      	push	{r3, r4, r5, lr}
 8010c8e:	4d06      	ldr	r5, [pc, #24]	@ (8010ca8 <_isatty_r+0x1c>)
 8010c90:	2300      	movs	r3, #0
 8010c92:	4604      	mov	r4, r0
 8010c94:	4608      	mov	r0, r1
 8010c96:	602b      	str	r3, [r5, #0]
 8010c98:	f7f3 fb20 	bl	80042dc <_isatty>
 8010c9c:	1c43      	adds	r3, r0, #1
 8010c9e:	d102      	bne.n	8010ca6 <_isatty_r+0x1a>
 8010ca0:	682b      	ldr	r3, [r5, #0]
 8010ca2:	b103      	cbz	r3, 8010ca6 <_isatty_r+0x1a>
 8010ca4:	6023      	str	r3, [r4, #0]
 8010ca6:	bd38      	pop	{r3, r4, r5, pc}
 8010ca8:	20000a38 	.word	0x20000a38

08010cac <_init>:
 8010cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cae:	bf00      	nop
 8010cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cb2:	bc08      	pop	{r3}
 8010cb4:	469e      	mov	lr, r3
 8010cb6:	4770      	bx	lr

08010cb8 <_fini>:
 8010cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cba:	bf00      	nop
 8010cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cbe:	bc08      	pop	{r3}
 8010cc0:	469e      	mov	lr, r3
 8010cc2:	4770      	bx	lr
