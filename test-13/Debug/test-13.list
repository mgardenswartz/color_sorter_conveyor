
test-13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e64  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08002ff4  08002ff4  00003ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003078  08003078  00005060  2**0
                  CONTENTS
  4 .ARM          00000008  08003078  08003078  00004078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003080  08003080  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003080  08003080  00004080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003084  08003084  00004084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08003088  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  20000060  080030e8  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  080030e8  00005288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b1e  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000165b  00000000  00000000  0000ebae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  00010210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005ab  00000000  00000000  00010978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025762  00000000  00000000  00010f23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a09d  00000000  00000000  00036685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e72a8  00000000  00000000  00040722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001279ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002268  00000000  00000000  00127a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  00129c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002fdc 	.word	0x08002fdc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08002fdc 	.word	0x08002fdc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <HAL_GPIO_EXTI_Callback>:


char buffer[50] = "";
int string_length = 50;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	80fb      	strh	r3, [r7, #6]
    // Your interrupt handling code here
	if(GPIO_PIN == GPIO_PIN_13){
 800056a:	88fb      	ldrh	r3, [r7, #6]
 800056c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000570:	d111      	bne.n	8000596 <HAL_GPIO_EXTI_Callback+0x36>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 8000572:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000576:	480a      	ldr	r0, [pc, #40]	@ (80005a0 <HAL_GPIO_EXTI_Callback+0x40>)
 8000578:	f000 fd38 	bl	8000fec <HAL_GPIO_TogglePin>
		sprintf(buffer, "Interrupt triggered.\r\n");
 800057c:	4909      	ldr	r1, [pc, #36]	@ (80005a4 <HAL_GPIO_EXTI_Callback+0x44>)
 800057e:	480a      	ldr	r0, [pc, #40]	@ (80005a8 <HAL_GPIO_EXTI_Callback+0x48>)
 8000580:	f002 f88c 	bl	800269c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)buffer, string_length, HAL_MAX_DELAY);
 8000584:	4b09      	ldr	r3, [pc, #36]	@ (80005ac <HAL_GPIO_EXTI_Callback+0x4c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	b29a      	uxth	r2, r3
 800058a:	f04f 33ff 	mov.w	r3, #4294967295
 800058e:	4906      	ldr	r1, [pc, #24]	@ (80005a8 <HAL_GPIO_EXTI_Callback+0x48>)
 8000590:	4807      	ldr	r0, [pc, #28]	@ (80005b0 <HAL_GPIO_EXTI_Callback+0x50>)
 8000592:	f001 fb2b 	bl	8001bec <HAL_UART_Transmit>
	}

}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	48000400 	.word	0x48000400
 80005a4:	08002ff4 	.word	0x08002ff4
 80005a8:	20000104 	.word	0x20000104
 80005ac:	20000000 	.word	0x20000000
 80005b0:	2000007c 	.word	0x2000007c

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b8:	f000 f9cf 	bl	800095a <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f83c 	bl	8000638 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005c0:	f000 f80a 	bl	80005d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005ca:	4802      	ldr	r0, [pc, #8]	@ (80005d4 <main+0x20>)
 80005cc:	f000 fcf6 	bl	8000fbc <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <main+0x1c>
 80005d4:	48000400 	.word	0x48000400

080005d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005dc:	4b14      	ldr	r3, [pc, #80]	@ (8000630 <MX_USART2_UART_Init+0x58>)
 80005de:	4a15      	ldr	r2, [pc, #84]	@ (8000634 <MX_USART2_UART_Init+0x5c>)
 80005e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005e2:	4b13      	ldr	r3, [pc, #76]	@ (8000630 <MX_USART2_UART_Init+0x58>)
 80005e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ea:	4b11      	ldr	r3, [pc, #68]	@ (8000630 <MX_USART2_UART_Init+0x58>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000630 <MX_USART2_UART_Init+0x58>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000630 <MX_USART2_UART_Init+0x58>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <MX_USART2_UART_Init+0x58>)
 80005fe:	220c      	movs	r2, #12
 8000600:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000602:	4b0b      	ldr	r3, [pc, #44]	@ (8000630 <MX_USART2_UART_Init+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000608:	4b09      	ldr	r3, [pc, #36]	@ (8000630 <MX_USART2_UART_Init+0x58>)
 800060a:	2200      	movs	r2, #0
 800060c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800060e:	4b08      	ldr	r3, [pc, #32]	@ (8000630 <MX_USART2_UART_Init+0x58>)
 8000610:	2200      	movs	r2, #0
 8000612:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000614:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <MX_USART2_UART_Init+0x58>)
 8000616:	2200      	movs	r2, #0
 8000618:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800061a:	4805      	ldr	r0, [pc, #20]	@ (8000630 <MX_USART2_UART_Init+0x58>)
 800061c:	f001 fa98 	bl	8001b50 <HAL_UART_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000626:	f000 f869 	bl	80006fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	2000007c 	.word	0x2000007c
 8000634:	40004400 	.word	0x40004400

08000638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	f107 030c 	add.w	r3, r7, #12
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800064e:	4b29      	ldr	r3, [pc, #164]	@ (80006f4 <MX_GPIO_Init+0xbc>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000652:	4a28      	ldr	r2, [pc, #160]	@ (80006f4 <MX_GPIO_Init+0xbc>)
 8000654:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000658:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800065a:	4b26      	ldr	r3, [pc, #152]	@ (80006f4 <MX_GPIO_Init+0xbc>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	4b23      	ldr	r3, [pc, #140]	@ (80006f4 <MX_GPIO_Init+0xbc>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066a:	4a22      	ldr	r2, [pc, #136]	@ (80006f4 <MX_GPIO_Init+0xbc>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000672:	4b20      	ldr	r3, [pc, #128]	@ (80006f4 <MX_GPIO_Init+0xbc>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067e:	4b1d      	ldr	r3, [pc, #116]	@ (80006f4 <MX_GPIO_Init+0xbc>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000682:	4a1c      	ldr	r2, [pc, #112]	@ (80006f4 <MX_GPIO_Init+0xbc>)
 8000684:	f043 0302 	orr.w	r3, r3, #2
 8000688:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800068a:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <MX_GPIO_Init+0xbc>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068e:	f003 0302 	and.w	r3, r3, #2
 8000692:	603b      	str	r3, [r7, #0]
 8000694:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800069c:	4816      	ldr	r0, [pc, #88]	@ (80006f8 <MX_GPIO_Init+0xc0>)
 800069e:	f000 fc8d 	bl	8000fbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80006a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a8:	2301      	movs	r3, #1
 80006aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	4619      	mov	r1, r3
 80006ba:	480f      	ldr	r0, [pc, #60]	@ (80006f8 <MX_GPIO_Init+0xc0>)
 80006bc:	f000 fad4 	bl	8000c68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006c6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80006ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	4619      	mov	r1, r3
 80006d6:	4808      	ldr	r0, [pc, #32]	@ (80006f8 <MX_GPIO_Init+0xc0>)
 80006d8:	f000 fac6 	bl	8000c68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	2100      	movs	r1, #0
 80006e0:	2028      	movs	r0, #40	@ 0x28
 80006e2:	f000 fa8a 	bl	8000bfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006e6:	2028      	movs	r0, #40	@ 0x28
 80006e8:	f000 faa3 	bl	8000c32 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006ec:	bf00      	nop
 80006ee:	3720      	adds	r7, #32
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40021000 	.word	0x40021000
 80006f8:	48000400 	.word	0x48000400

080006fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000700:	b672      	cpsid	i
}
 8000702:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <Error_Handler+0x8>

08000708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070e:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <HAL_MspInit+0x44>)
 8000710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000712:	4a0e      	ldr	r2, [pc, #56]	@ (800074c <HAL_MspInit+0x44>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6613      	str	r3, [r2, #96]	@ 0x60
 800071a:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <HAL_MspInit+0x44>)
 800071c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <HAL_MspInit+0x44>)
 8000728:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800072a:	4a08      	ldr	r2, [pc, #32]	@ (800074c <HAL_MspInit+0x44>)
 800072c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000730:	6593      	str	r3, [r2, #88]	@ 0x58
 8000732:	4b06      	ldr	r3, [pc, #24]	@ (800074c <HAL_MspInit+0x44>)
 8000734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000

08000750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b0ac      	sub	sp, #176	@ 0xb0
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	2288      	movs	r2, #136	@ 0x88
 800076e:	2100      	movs	r1, #0
 8000770:	4618      	mov	r0, r3
 8000772:	f001 ffb3 	bl	80026dc <memset>
  if(huart->Instance==USART2)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a21      	ldr	r2, [pc, #132]	@ (8000800 <HAL_UART_MspInit+0xb0>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d13b      	bne.n	80007f8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000780:	2302      	movs	r3, #2
 8000782:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000784:	2300      	movs	r3, #0
 8000786:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	4618      	mov	r0, r3
 800078e:	f000 fd23 	bl	80011d8 <HAL_RCCEx_PeriphCLKConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000798:	f7ff ffb0 	bl	80006fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800079c:	4b19      	ldr	r3, [pc, #100]	@ (8000804 <HAL_UART_MspInit+0xb4>)
 800079e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007a0:	4a18      	ldr	r2, [pc, #96]	@ (8000804 <HAL_UART_MspInit+0xb4>)
 80007a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80007a8:	4b16      	ldr	r3, [pc, #88]	@ (8000804 <HAL_UART_MspInit+0xb4>)
 80007aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b4:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <HAL_UART_MspInit+0xb4>)
 80007b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b8:	4a12      	ldr	r2, [pc, #72]	@ (8000804 <HAL_UART_MspInit+0xb4>)
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007c0:	4b10      	ldr	r3, [pc, #64]	@ (8000804 <HAL_UART_MspInit+0xb4>)
 80007c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c4:	f003 0301 	and.w	r3, r3, #1
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007cc:	230c      	movs	r3, #12
 80007ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d2:	2302      	movs	r3, #2
 80007d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007de:	2303      	movs	r3, #3
 80007e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007e4:	2307      	movs	r3, #7
 80007e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ea:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007ee:	4619      	mov	r1, r3
 80007f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007f4:	f000 fa38 	bl	8000c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007f8:	bf00      	nop
 80007fa:	37b0      	adds	r7, #176	@ 0xb0
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40004400 	.word	0x40004400
 8000804:	40021000 	.word	0x40021000

08000808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <NMI_Handler+0x4>

08000810 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <HardFault_Handler+0x4>

08000818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <MemManage_Handler+0x4>

08000820 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <BusFault_Handler+0x4>

08000828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <UsageFault_Handler+0x4>

08000830 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800085e:	f000 f8d1 	bl	8000a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}

08000866 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800086a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800086e:	f000 fbd7 	bl	8001020 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <_sbrk>:
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	4a14      	ldr	r2, [pc, #80]	@ (80008d4 <_sbrk+0x5c>)
 8000882:	4b15      	ldr	r3, [pc, #84]	@ (80008d8 <_sbrk+0x60>)
 8000884:	1ad3      	subs	r3, r2, r3
 8000886:	617b      	str	r3, [r7, #20]
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <_sbrk+0x64>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d102      	bne.n	800089a <_sbrk+0x22>
 8000894:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <_sbrk+0x64>)
 8000896:	4a12      	ldr	r2, [pc, #72]	@ (80008e0 <_sbrk+0x68>)
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <_sbrk+0x64>)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4413      	add	r3, r2
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d207      	bcs.n	80008b8 <_sbrk+0x40>
 80008a8:	f001 ff20 	bl	80026ec <__errno>
 80008ac:	4603      	mov	r3, r0
 80008ae:	220c      	movs	r2, #12
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	f04f 33ff 	mov.w	r3, #4294967295
 80008b6:	e009      	b.n	80008cc <_sbrk+0x54>
 80008b8:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <_sbrk+0x64>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	4b07      	ldr	r3, [pc, #28]	@ (80008dc <_sbrk+0x64>)
 80008c0:	681a      	ldr	r2, [r3, #0]
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	4413      	add	r3, r2
 80008c6:	4a05      	ldr	r2, [pc, #20]	@ (80008dc <_sbrk+0x64>)
 80008c8:	6013      	str	r3, [r2, #0]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	4618      	mov	r0, r3
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20018000 	.word	0x20018000
 80008d8:	00000400 	.word	0x00000400
 80008dc:	20000138 	.word	0x20000138
 80008e0:	20000288 	.word	0x20000288

080008e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008e8:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <SystemInit+0x20>)
 80008ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008ee:	4a05      	ldr	r2, [pc, #20]	@ (8000904 <SystemInit+0x20>)
 80008f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <Reset_Handler>:
 8000908:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000940 <LoopForever+0x2>
 800090c:	f7ff ffea 	bl	80008e4 <SystemInit>
 8000910:	480c      	ldr	r0, [pc, #48]	@ (8000944 <LoopForever+0x6>)
 8000912:	490d      	ldr	r1, [pc, #52]	@ (8000948 <LoopForever+0xa>)
 8000914:	4a0d      	ldr	r2, [pc, #52]	@ (800094c <LoopForever+0xe>)
 8000916:	2300      	movs	r3, #0
 8000918:	e002      	b.n	8000920 <LoopCopyDataInit>

0800091a <CopyDataInit>:
 800091a:	58d4      	ldr	r4, [r2, r3]
 800091c:	50c4      	str	r4, [r0, r3]
 800091e:	3304      	adds	r3, #4

08000920 <LoopCopyDataInit>:
 8000920:	18c4      	adds	r4, r0, r3
 8000922:	428c      	cmp	r4, r1
 8000924:	d3f9      	bcc.n	800091a <CopyDataInit>
 8000926:	4a0a      	ldr	r2, [pc, #40]	@ (8000950 <LoopForever+0x12>)
 8000928:	4c0a      	ldr	r4, [pc, #40]	@ (8000954 <LoopForever+0x16>)
 800092a:	2300      	movs	r3, #0
 800092c:	e001      	b.n	8000932 <LoopFillZerobss>

0800092e <FillZerobss>:
 800092e:	6013      	str	r3, [r2, #0]
 8000930:	3204      	adds	r2, #4

08000932 <LoopFillZerobss>:
 8000932:	42a2      	cmp	r2, r4
 8000934:	d3fb      	bcc.n	800092e <FillZerobss>
 8000936:	f001 fedf 	bl	80026f8 <__libc_init_array>
 800093a:	f7ff fe3b 	bl	80005b4 <main>

0800093e <LoopForever>:
 800093e:	e7fe      	b.n	800093e <LoopForever>
 8000940:	20018000 	.word	0x20018000
 8000944:	20000000 	.word	0x20000000
 8000948:	20000060 	.word	0x20000060
 800094c:	08003088 	.word	0x08003088
 8000950:	20000060 	.word	0x20000060
 8000954:	20000288 	.word	0x20000288

08000958 <ADC1_2_IRQHandler>:
 8000958:	e7fe      	b.n	8000958 <ADC1_2_IRQHandler>

0800095a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000960:	2300      	movs	r3, #0
 8000962:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000964:	2003      	movs	r0, #3
 8000966:	f000 f93d 	bl	8000be4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800096a:	200f      	movs	r0, #15
 800096c:	f000 f80e 	bl	800098c <HAL_InitTick>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d002      	beq.n	800097c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000976:	2301      	movs	r3, #1
 8000978:	71fb      	strb	r3, [r7, #7]
 800097a:	e001      	b.n	8000980 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800097c:	f7ff fec4 	bl	8000708 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000980:	79fb      	ldrb	r3, [r7, #7]
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000994:	2300      	movs	r3, #0
 8000996:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000998:	4b17      	ldr	r3, [pc, #92]	@ (80009f8 <HAL_InitTick+0x6c>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d023      	beq.n	80009e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009a0:	4b16      	ldr	r3, [pc, #88]	@ (80009fc <HAL_InitTick+0x70>)
 80009a2:	681a      	ldr	r2, [r3, #0]
 80009a4:	4b14      	ldr	r3, [pc, #80]	@ (80009f8 <HAL_InitTick+0x6c>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	4619      	mov	r1, r3
 80009aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80009b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 f949 	bl	8000c4e <HAL_SYSTICK_Config>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d10f      	bne.n	80009e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b0f      	cmp	r3, #15
 80009c6:	d809      	bhi.n	80009dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c8:	2200      	movs	r2, #0
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	f04f 30ff 	mov.w	r0, #4294967295
 80009d0:	f000 f913 	bl	8000bfa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009d4:	4a0a      	ldr	r2, [pc, #40]	@ (8000a00 <HAL_InitTick+0x74>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6013      	str	r3, [r2, #0]
 80009da:	e007      	b.n	80009ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009dc:	2301      	movs	r3, #1
 80009de:	73fb      	strb	r3, [r7, #15]
 80009e0:	e004      	b.n	80009ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	73fb      	strb	r3, [r7, #15]
 80009e6:	e001      	b.n	80009ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009e8:	2301      	movs	r3, #1
 80009ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	2000000c 	.word	0x2000000c
 80009fc:	20000004 	.word	0x20000004
 8000a00:	20000008 	.word	0x20000008

08000a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <HAL_IncTick+0x20>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <HAL_IncTick+0x24>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	4a04      	ldr	r2, [pc, #16]	@ (8000a28 <HAL_IncTick+0x24>)
 8000a16:	6013      	str	r3, [r2, #0]
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	2000000c 	.word	0x2000000c
 8000a28:	2000013c 	.word	0x2000013c

08000a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a30:	4b03      	ldr	r3, [pc, #12]	@ (8000a40 <HAL_GetTick+0x14>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	2000013c 	.word	0x2000013c

08000a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a54:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <__NVIC_SetPriorityGrouping+0x44>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a60:	4013      	ands	r3, r2
 8000a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a76:	4a04      	ldr	r2, [pc, #16]	@ (8000a88 <__NVIC_SetPriorityGrouping+0x44>)
 8000a78:	68bb      	ldr	r3, [r7, #8]
 8000a7a:	60d3      	str	r3, [r2, #12]
}
 8000a7c:	bf00      	nop
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a90:	4b04      	ldr	r3, [pc, #16]	@ (8000aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	0a1b      	lsrs	r3, r3, #8
 8000a96:	f003 0307 	and.w	r3, r3, #7
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	e000ed00 	.word	0xe000ed00

08000aa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	db0b      	blt.n	8000ad2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	f003 021f 	and.w	r2, r3, #31
 8000ac0:	4907      	ldr	r1, [pc, #28]	@ (8000ae0 <__NVIC_EnableIRQ+0x38>)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	095b      	lsrs	r3, r3, #5
 8000ac8:	2001      	movs	r0, #1
 8000aca:	fa00 f202 	lsl.w	r2, r0, r2
 8000ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000e100 	.word	0xe000e100

08000ae4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	6039      	str	r1, [r7, #0]
 8000aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	db0a      	blt.n	8000b0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	490c      	ldr	r1, [pc, #48]	@ (8000b30 <__NVIC_SetPriority+0x4c>)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	0112      	lsls	r2, r2, #4
 8000b04:	b2d2      	uxtb	r2, r2
 8000b06:	440b      	add	r3, r1
 8000b08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b0c:	e00a      	b.n	8000b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	4908      	ldr	r1, [pc, #32]	@ (8000b34 <__NVIC_SetPriority+0x50>)
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	f003 030f 	and.w	r3, r3, #15
 8000b1a:	3b04      	subs	r3, #4
 8000b1c:	0112      	lsls	r2, r2, #4
 8000b1e:	b2d2      	uxtb	r2, r2
 8000b20:	440b      	add	r3, r1
 8000b22:	761a      	strb	r2, [r3, #24]
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000e100 	.word	0xe000e100
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b089      	sub	sp, #36	@ 0x24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	f1c3 0307 	rsb	r3, r3, #7
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	bf28      	it	cs
 8000b56:	2304      	movcs	r3, #4
 8000b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	2b06      	cmp	r3, #6
 8000b60:	d902      	bls.n	8000b68 <NVIC_EncodePriority+0x30>
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3b03      	subs	r3, #3
 8000b66:	e000      	b.n	8000b6a <NVIC_EncodePriority+0x32>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43da      	mvns	r2, r3
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b80:	f04f 31ff 	mov.w	r1, #4294967295
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8a:	43d9      	mvns	r1, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b90:	4313      	orrs	r3, r2
         );
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3724      	adds	r7, #36	@ 0x24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
	...

08000ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bb0:	d301      	bcc.n	8000bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e00f      	b.n	8000bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000be0 <SysTick_Config+0x40>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bbe:	210f      	movs	r1, #15
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc4:	f7ff ff8e 	bl	8000ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc8:	4b05      	ldr	r3, [pc, #20]	@ (8000be0 <SysTick_Config+0x40>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bce:	4b04      	ldr	r3, [pc, #16]	@ (8000be0 <SysTick_Config+0x40>)
 8000bd0:	2207      	movs	r2, #7
 8000bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	e000e010 	.word	0xe000e010

08000be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ff29 	bl	8000a44 <__NVIC_SetPriorityGrouping>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	4603      	mov	r3, r0
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
 8000c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c0c:	f7ff ff3e 	bl	8000a8c <__NVIC_GetPriorityGrouping>
 8000c10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	68b9      	ldr	r1, [r7, #8]
 8000c16:	6978      	ldr	r0, [r7, #20]
 8000c18:	f7ff ff8e 	bl	8000b38 <NVIC_EncodePriority>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c22:	4611      	mov	r1, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff5d 	bl	8000ae4 <__NVIC_SetPriority>
}
 8000c2a:	bf00      	nop
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff31 	bl	8000aa8 <__NVIC_EnableIRQ>
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	b082      	sub	sp, #8
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f7ff ffa2 	bl	8000ba0 <SysTick_Config>
 8000c5c:	4603      	mov	r3, r0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b087      	sub	sp, #28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c76:	e17f      	b.n	8000f78 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	fa01 f303 	lsl.w	r3, r1, r3
 8000c84:	4013      	ands	r3, r2
 8000c86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	f000 8171 	beq.w	8000f72 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 0303 	and.w	r3, r3, #3
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d005      	beq.n	8000ca8 <HAL_GPIO_Init+0x40>
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f003 0303 	and.w	r3, r3, #3
 8000ca4:	2b02      	cmp	r3, #2
 8000ca6:	d130      	bne.n	8000d0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	68da      	ldr	r2, [r3, #12]
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cde:	2201      	movs	r2, #1
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	4013      	ands	r3, r2
 8000cec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	091b      	lsrs	r3, r3, #4
 8000cf4:	f003 0201 	and.w	r2, r3, #1
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	693a      	ldr	r2, [r7, #16]
 8000d08:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f003 0303 	and.w	r3, r3, #3
 8000d12:	2b03      	cmp	r3, #3
 8000d14:	d118      	bne.n	8000d48 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	08db      	lsrs	r3, r3, #3
 8000d32:	f003 0201 	and.w	r2, r3, #1
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3c:	693a      	ldr	r2, [r7, #16]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f003 0303 	and.w	r3, r3, #3
 8000d50:	2b03      	cmp	r3, #3
 8000d52:	d017      	beq.n	8000d84 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	2203      	movs	r2, #3
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	689a      	ldr	r2, [r3, #8]
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 0303 	and.w	r3, r3, #3
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d123      	bne.n	8000dd8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	08da      	lsrs	r2, r3, #3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3208      	adds	r2, #8
 8000d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	f003 0307 	and.w	r3, r3, #7
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	220f      	movs	r2, #15
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	691a      	ldr	r2, [r3, #16]
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	08da      	lsrs	r2, r3, #3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	3208      	adds	r2, #8
 8000dd2:	6939      	ldr	r1, [r7, #16]
 8000dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	2203      	movs	r2, #3
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	4013      	ands	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0203 	and.w	r2, r3, #3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4313      	orrs	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	f000 80ac 	beq.w	8000f72 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1a:	4b5f      	ldr	r3, [pc, #380]	@ (8000f98 <HAL_GPIO_Init+0x330>)
 8000e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e1e:	4a5e      	ldr	r2, [pc, #376]	@ (8000f98 <HAL_GPIO_Init+0x330>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e26:	4b5c      	ldr	r3, [pc, #368]	@ (8000f98 <HAL_GPIO_Init+0x330>)
 8000e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e32:	4a5a      	ldr	r2, [pc, #360]	@ (8000f9c <HAL_GPIO_Init+0x334>)
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	089b      	lsrs	r3, r3, #2
 8000e38:	3302      	adds	r3, #2
 8000e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	f003 0303 	and.w	r3, r3, #3
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	220f      	movs	r2, #15
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4013      	ands	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000e5c:	d025      	beq.n	8000eaa <HAL_GPIO_Init+0x242>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a4f      	ldr	r2, [pc, #316]	@ (8000fa0 <HAL_GPIO_Init+0x338>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d01f      	beq.n	8000ea6 <HAL_GPIO_Init+0x23e>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a4e      	ldr	r2, [pc, #312]	@ (8000fa4 <HAL_GPIO_Init+0x33c>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d019      	beq.n	8000ea2 <HAL_GPIO_Init+0x23a>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a4d      	ldr	r2, [pc, #308]	@ (8000fa8 <HAL_GPIO_Init+0x340>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d013      	beq.n	8000e9e <HAL_GPIO_Init+0x236>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a4c      	ldr	r2, [pc, #304]	@ (8000fac <HAL_GPIO_Init+0x344>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d00d      	beq.n	8000e9a <HAL_GPIO_Init+0x232>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a4b      	ldr	r2, [pc, #300]	@ (8000fb0 <HAL_GPIO_Init+0x348>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d007      	beq.n	8000e96 <HAL_GPIO_Init+0x22e>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a4a      	ldr	r2, [pc, #296]	@ (8000fb4 <HAL_GPIO_Init+0x34c>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d101      	bne.n	8000e92 <HAL_GPIO_Init+0x22a>
 8000e8e:	2306      	movs	r3, #6
 8000e90:	e00c      	b.n	8000eac <HAL_GPIO_Init+0x244>
 8000e92:	2307      	movs	r3, #7
 8000e94:	e00a      	b.n	8000eac <HAL_GPIO_Init+0x244>
 8000e96:	2305      	movs	r3, #5
 8000e98:	e008      	b.n	8000eac <HAL_GPIO_Init+0x244>
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	e006      	b.n	8000eac <HAL_GPIO_Init+0x244>
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e004      	b.n	8000eac <HAL_GPIO_Init+0x244>
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	e002      	b.n	8000eac <HAL_GPIO_Init+0x244>
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e000      	b.n	8000eac <HAL_GPIO_Init+0x244>
 8000eaa:	2300      	movs	r3, #0
 8000eac:	697a      	ldr	r2, [r7, #20]
 8000eae:	f002 0203 	and.w	r2, r2, #3
 8000eb2:	0092      	lsls	r2, r2, #2
 8000eb4:	4093      	lsls	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ebc:	4937      	ldr	r1, [pc, #220]	@ (8000f9c <HAL_GPIO_Init+0x334>)
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	089b      	lsrs	r3, r3, #2
 8000ec2:	3302      	adds	r3, #2
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000eca:	4b3b      	ldr	r3, [pc, #236]	@ (8000fb8 <HAL_GPIO_Init+0x350>)
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000eee:	4a32      	ldr	r2, [pc, #200]	@ (8000fb8 <HAL_GPIO_Init+0x350>)
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ef4:	4b30      	ldr	r3, [pc, #192]	@ (8000fb8 <HAL_GPIO_Init+0x350>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f18:	4a27      	ldr	r2, [pc, #156]	@ (8000fb8 <HAL_GPIO_Init+0x350>)
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000f1e:	4b26      	ldr	r3, [pc, #152]	@ (8000fb8 <HAL_GPIO_Init+0x350>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f42:	4a1d      	ldr	r2, [pc, #116]	@ (8000fb8 <HAL_GPIO_Init+0x350>)
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000f48:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb8 <HAL_GPIO_Init+0x350>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f6c:	4a12      	ldr	r2, [pc, #72]	@ (8000fb8 <HAL_GPIO_Init+0x350>)
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	3301      	adds	r3, #1
 8000f76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f47f ae78 	bne.w	8000c78 <HAL_GPIO_Init+0x10>
  }
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	371c      	adds	r7, #28
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40010000 	.word	0x40010000
 8000fa0:	48000400 	.word	0x48000400
 8000fa4:	48000800 	.word	0x48000800
 8000fa8:	48000c00 	.word	0x48000c00
 8000fac:	48001000 	.word	0x48001000
 8000fb0:	48001400 	.word	0x48001400
 8000fb4:	48001800 	.word	0x48001800
 8000fb8:	40010400 	.word	0x40010400

08000fbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	807b      	strh	r3, [r7, #2]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fcc:	787b      	ldrb	r3, [r7, #1]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fd2:	887a      	ldrh	r2, [r7, #2]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fd8:	e002      	b.n	8000fe0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fda:	887a      	ldrh	r2, [r7, #2]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	695b      	ldr	r3, [r3, #20]
 8000ffc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ffe:	887a      	ldrh	r2, [r7, #2]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4013      	ands	r3, r2
 8001004:	041a      	lsls	r2, r3, #16
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	43d9      	mvns	r1, r3
 800100a:	887b      	ldrh	r3, [r7, #2]
 800100c:	400b      	ands	r3, r1
 800100e:	431a      	orrs	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	619a      	str	r2, [r3, #24]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800102a:	4b08      	ldr	r3, [pc, #32]	@ (800104c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800102c:	695a      	ldr	r2, [r3, #20]
 800102e:	88fb      	ldrh	r3, [r7, #6]
 8001030:	4013      	ands	r3, r2
 8001032:	2b00      	cmp	r3, #0
 8001034:	d006      	beq.n	8001044 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001036:	4a05      	ldr	r2, [pc, #20]	@ (800104c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001038:	88fb      	ldrh	r3, [r7, #6]
 800103a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800103c:	88fb      	ldrh	r3, [r7, #6]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fa8e 	bl	8000560 <HAL_GPIO_EXTI_Callback>
  }
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40010400 	.word	0x40010400

08001050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001050:	b480      	push	{r7}
 8001052:	b089      	sub	sp, #36	@ 0x24
 8001054:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800105e:	4b3e      	ldr	r3, [pc, #248]	@ (8001158 <HAL_RCC_GetSysClockFreq+0x108>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f003 030c 	and.w	r3, r3, #12
 8001066:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001068:	4b3b      	ldr	r3, [pc, #236]	@ (8001158 <HAL_RCC_GetSysClockFreq+0x108>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	f003 0303 	and.w	r3, r3, #3
 8001070:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d005      	beq.n	8001084 <HAL_RCC_GetSysClockFreq+0x34>
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	2b0c      	cmp	r3, #12
 800107c:	d121      	bne.n	80010c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d11e      	bne.n	80010c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001084:	4b34      	ldr	r3, [pc, #208]	@ (8001158 <HAL_RCC_GetSysClockFreq+0x108>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0308 	and.w	r3, r3, #8
 800108c:	2b00      	cmp	r3, #0
 800108e:	d107      	bne.n	80010a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001090:	4b31      	ldr	r3, [pc, #196]	@ (8001158 <HAL_RCC_GetSysClockFreq+0x108>)
 8001092:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001096:	0a1b      	lsrs	r3, r3, #8
 8001098:	f003 030f 	and.w	r3, r3, #15
 800109c:	61fb      	str	r3, [r7, #28]
 800109e:	e005      	b.n	80010ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80010a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001158 <HAL_RCC_GetSysClockFreq+0x108>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	091b      	lsrs	r3, r3, #4
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80010ac:	4a2b      	ldr	r2, [pc, #172]	@ (800115c <HAL_RCC_GetSysClockFreq+0x10c>)
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d10d      	bne.n	80010d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010c0:	e00a      	b.n	80010d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	2b04      	cmp	r3, #4
 80010c6:	d102      	bne.n	80010ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80010c8:	4b25      	ldr	r3, [pc, #148]	@ (8001160 <HAL_RCC_GetSysClockFreq+0x110>)
 80010ca:	61bb      	str	r3, [r7, #24]
 80010cc:	e004      	b.n	80010d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	2b08      	cmp	r3, #8
 80010d2:	d101      	bne.n	80010d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80010d4:	4b23      	ldr	r3, [pc, #140]	@ (8001164 <HAL_RCC_GetSysClockFreq+0x114>)
 80010d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	2b0c      	cmp	r3, #12
 80010dc:	d134      	bne.n	8001148 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80010de:	4b1e      	ldr	r3, [pc, #120]	@ (8001158 <HAL_RCC_GetSysClockFreq+0x108>)
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d003      	beq.n	80010f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	2b03      	cmp	r3, #3
 80010f2:	d003      	beq.n	80010fc <HAL_RCC_GetSysClockFreq+0xac>
 80010f4:	e005      	b.n	8001102 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80010f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001160 <HAL_RCC_GetSysClockFreq+0x110>)
 80010f8:	617b      	str	r3, [r7, #20]
      break;
 80010fa:	e005      	b.n	8001108 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80010fc:	4b19      	ldr	r3, [pc, #100]	@ (8001164 <HAL_RCC_GetSysClockFreq+0x114>)
 80010fe:	617b      	str	r3, [r7, #20]
      break;
 8001100:	e002      	b.n	8001108 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	617b      	str	r3, [r7, #20]
      break;
 8001106:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001108:	4b13      	ldr	r3, [pc, #76]	@ (8001158 <HAL_RCC_GetSysClockFreq+0x108>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	091b      	lsrs	r3, r3, #4
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	3301      	adds	r3, #1
 8001114:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001116:	4b10      	ldr	r3, [pc, #64]	@ (8001158 <HAL_RCC_GetSysClockFreq+0x108>)
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	0a1b      	lsrs	r3, r3, #8
 800111c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	fb03 f202 	mul.w	r2, r3, r2
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	fbb2 f3f3 	udiv	r3, r2, r3
 800112c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800112e:	4b0a      	ldr	r3, [pc, #40]	@ (8001158 <HAL_RCC_GetSysClockFreq+0x108>)
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	0e5b      	lsrs	r3, r3, #25
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	3301      	adds	r3, #1
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	fbb2 f3f3 	udiv	r3, r2, r3
 8001146:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001148:	69bb      	ldr	r3, [r7, #24]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3724      	adds	r7, #36	@ 0x24
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40021000 	.word	0x40021000
 800115c:	08003014 	.word	0x08003014
 8001160:	00f42400 	.word	0x00f42400
 8001164:	007a1200 	.word	0x007a1200

08001168 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800116c:	4b03      	ldr	r3, [pc, #12]	@ (800117c <HAL_RCC_GetHCLKFreq+0x14>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20000004 	.word	0x20000004

08001180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001184:	f7ff fff0 	bl	8001168 <HAL_RCC_GetHCLKFreq>
 8001188:	4602      	mov	r2, r0
 800118a:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	0a1b      	lsrs	r3, r3, #8
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	4904      	ldr	r1, [pc, #16]	@ (80011a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001196:	5ccb      	ldrb	r3, [r1, r3]
 8001198:	f003 031f 	and.w	r3, r3, #31
 800119c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40021000 	.word	0x40021000
 80011a8:	0800300c 	.word	0x0800300c

080011ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80011b0:	f7ff ffda 	bl	8001168 <HAL_RCC_GetHCLKFreq>
 80011b4:	4602      	mov	r2, r0
 80011b6:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	0adb      	lsrs	r3, r3, #11
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	4904      	ldr	r1, [pc, #16]	@ (80011d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80011c2:	5ccb      	ldrb	r3, [r1, r3]
 80011c4:	f003 031f 	and.w	r3, r3, #31
 80011c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40021000 	.word	0x40021000
 80011d4:	0800300c 	.word	0x0800300c

080011d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80011e0:	2300      	movs	r3, #0
 80011e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80011e4:	2300      	movs	r3, #0
 80011e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d041      	beq.n	8001278 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80011f8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80011fc:	d02a      	beq.n	8001254 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80011fe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001202:	d824      	bhi.n	800124e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001204:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001208:	d008      	beq.n	800121c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800120a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800120e:	d81e      	bhi.n	800124e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001210:	2b00      	cmp	r3, #0
 8001212:	d00a      	beq.n	800122a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001214:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001218:	d010      	beq.n	800123c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800121a:	e018      	b.n	800124e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800121c:	4b86      	ldr	r3, [pc, #536]	@ (8001438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	4a85      	ldr	r2, [pc, #532]	@ (8001438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001222:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001226:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001228:	e015      	b.n	8001256 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3304      	adds	r3, #4
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f000 fabb 	bl	80017ac <RCCEx_PLLSAI1_Config>
 8001236:	4603      	mov	r3, r0
 8001238:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800123a:	e00c      	b.n	8001256 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3320      	adds	r3, #32
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f000 fba6 	bl	8001994 <RCCEx_PLLSAI2_Config>
 8001248:	4603      	mov	r3, r0
 800124a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800124c:	e003      	b.n	8001256 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	74fb      	strb	r3, [r7, #19]
      break;
 8001252:	e000      	b.n	8001256 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001254:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001256:	7cfb      	ldrb	r3, [r7, #19]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d10b      	bne.n	8001274 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800125c:	4b76      	ldr	r3, [pc, #472]	@ (8001438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800125e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001262:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800126a:	4973      	ldr	r1, [pc, #460]	@ (8001438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800126c:	4313      	orrs	r3, r2
 800126e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001272:	e001      	b.n	8001278 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001274:	7cfb      	ldrb	r3, [r7, #19]
 8001276:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d041      	beq.n	8001308 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001288:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800128c:	d02a      	beq.n	80012e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800128e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001292:	d824      	bhi.n	80012de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001294:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001298:	d008      	beq.n	80012ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800129a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800129e:	d81e      	bhi.n	80012de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d00a      	beq.n	80012ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80012a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012a8:	d010      	beq.n	80012cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80012aa:	e018      	b.n	80012de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80012ac:	4b62      	ldr	r3, [pc, #392]	@ (8001438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	4a61      	ldr	r2, [pc, #388]	@ (8001438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80012b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80012b8:	e015      	b.n	80012e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3304      	adds	r3, #4
 80012be:	2100      	movs	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f000 fa73 	bl	80017ac <RCCEx_PLLSAI1_Config>
 80012c6:	4603      	mov	r3, r0
 80012c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80012ca:	e00c      	b.n	80012e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3320      	adds	r3, #32
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 fb5e 	bl	8001994 <RCCEx_PLLSAI2_Config>
 80012d8:	4603      	mov	r3, r0
 80012da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80012dc:	e003      	b.n	80012e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	74fb      	strb	r3, [r7, #19]
      break;
 80012e2:	e000      	b.n	80012e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80012e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80012e6:	7cfb      	ldrb	r3, [r7, #19]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d10b      	bne.n	8001304 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80012ec:	4b52      	ldr	r3, [pc, #328]	@ (8001438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80012ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012f2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80012fa:	494f      	ldr	r1, [pc, #316]	@ (8001438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001302:	e001      	b.n	8001308 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001304:	7cfb      	ldrb	r3, [r7, #19]
 8001306:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001310:	2b00      	cmp	r3, #0
 8001312:	f000 80a0 	beq.w	8001456 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001316:	2300      	movs	r3, #0
 8001318:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800131a:	4b47      	ldr	r3, [pc, #284]	@ (8001438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800131c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800132a:	2300      	movs	r3, #0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d00d      	beq.n	800134c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001330:	4b41      	ldr	r3, [pc, #260]	@ (8001438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001334:	4a40      	ldr	r2, [pc, #256]	@ (8001438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001336:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800133a:	6593      	str	r3, [r2, #88]	@ 0x58
 800133c:	4b3e      	ldr	r3, [pc, #248]	@ (8001438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800133e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001340:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001348:	2301      	movs	r3, #1
 800134a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800134c:	4b3b      	ldr	r3, [pc, #236]	@ (800143c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a3a      	ldr	r2, [pc, #232]	@ (800143c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001352:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001356:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001358:	f7ff fb68 	bl	8000a2c <HAL_GetTick>
 800135c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800135e:	e009      	b.n	8001374 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001360:	f7ff fb64 	bl	8000a2c <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d902      	bls.n	8001374 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	74fb      	strb	r3, [r7, #19]
        break;
 8001372:	e005      	b.n	8001380 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001374:	4b31      	ldr	r3, [pc, #196]	@ (800143c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800137c:	2b00      	cmp	r3, #0
 800137e:	d0ef      	beq.n	8001360 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001380:	7cfb      	ldrb	r3, [r7, #19]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d15c      	bne.n	8001440 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001386:	4b2c      	ldr	r3, [pc, #176]	@ (8001438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001388:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800138c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001390:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d01f      	beq.n	80013d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800139e:	697a      	ldr	r2, [r7, #20]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d019      	beq.n	80013d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80013a4:	4b24      	ldr	r3, [pc, #144]	@ (8001438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80013a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80013ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80013b0:	4b21      	ldr	r3, [pc, #132]	@ (8001438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80013b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013b6:	4a20      	ldr	r2, [pc, #128]	@ (8001438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80013b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80013c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80013c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80013c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80013d0:	4a19      	ldr	r2, [pc, #100]	@ (8001438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d016      	beq.n	8001410 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e2:	f7ff fb23 	bl	8000a2c <HAL_GetTick>
 80013e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013e8:	e00b      	b.n	8001402 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ea:	f7ff fb1f 	bl	8000a2c <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d902      	bls.n	8001402 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	74fb      	strb	r3, [r7, #19]
            break;
 8001400:	e006      	b.n	8001410 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001402:	4b0d      	ldr	r3, [pc, #52]	@ (8001438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d0ec      	beq.n	80013ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001410:	7cfb      	ldrb	r3, [r7, #19]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d10c      	bne.n	8001430 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001416:	4b08      	ldr	r3, [pc, #32]	@ (8001438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001418:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800141c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001426:	4904      	ldr	r1, [pc, #16]	@ (8001438 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001428:	4313      	orrs	r3, r2
 800142a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800142e:	e009      	b.n	8001444 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001430:	7cfb      	ldrb	r3, [r7, #19]
 8001432:	74bb      	strb	r3, [r7, #18]
 8001434:	e006      	b.n	8001444 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001436:	bf00      	nop
 8001438:	40021000 	.word	0x40021000
 800143c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001440:	7cfb      	ldrb	r3, [r7, #19]
 8001442:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001444:	7c7b      	ldrb	r3, [r7, #17]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d105      	bne.n	8001456 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800144a:	4b9e      	ldr	r3, [pc, #632]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800144c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800144e:	4a9d      	ldr	r2, [pc, #628]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001450:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001454:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d00a      	beq.n	8001478 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001462:	4b98      	ldr	r3, [pc, #608]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001468:	f023 0203 	bic.w	r2, r3, #3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001470:	4994      	ldr	r1, [pc, #592]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001472:	4313      	orrs	r3, r2
 8001474:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d00a      	beq.n	800149a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001484:	4b8f      	ldr	r3, [pc, #572]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001486:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800148a:	f023 020c 	bic.w	r2, r3, #12
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001492:	498c      	ldr	r1, [pc, #560]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001494:	4313      	orrs	r3, r2
 8001496:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00a      	beq.n	80014bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80014a6:	4b87      	ldr	r3, [pc, #540]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80014a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b4:	4983      	ldr	r1, [pc, #524]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0308 	and.w	r3, r3, #8
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d00a      	beq.n	80014de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80014c8:	4b7e      	ldr	r3, [pc, #504]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80014ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d6:	497b      	ldr	r1, [pc, #492]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80014d8:	4313      	orrs	r3, r2
 80014da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0310 	and.w	r3, r3, #16
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d00a      	beq.n	8001500 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80014ea:	4b76      	ldr	r3, [pc, #472]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80014ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014f8:	4972      	ldr	r1, [pc, #456]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0320 	and.w	r3, r3, #32
 8001508:	2b00      	cmp	r3, #0
 800150a:	d00a      	beq.n	8001522 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800150c:	4b6d      	ldr	r3, [pc, #436]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800150e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001512:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151a:	496a      	ldr	r1, [pc, #424]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800151c:	4313      	orrs	r3, r2
 800151e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00a      	beq.n	8001544 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800152e:	4b65      	ldr	r3, [pc, #404]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001530:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001534:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800153c:	4961      	ldr	r1, [pc, #388]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800153e:	4313      	orrs	r3, r2
 8001540:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800154c:	2b00      	cmp	r3, #0
 800154e:	d00a      	beq.n	8001566 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001550:	4b5c      	ldr	r3, [pc, #368]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001552:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001556:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800155e:	4959      	ldr	r1, [pc, #356]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001560:	4313      	orrs	r3, r2
 8001562:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00a      	beq.n	8001588 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001572:	4b54      	ldr	r3, [pc, #336]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001578:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001580:	4950      	ldr	r1, [pc, #320]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001582:	4313      	orrs	r3, r2
 8001584:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001590:	2b00      	cmp	r3, #0
 8001592:	d00a      	beq.n	80015aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001594:	4b4b      	ldr	r3, [pc, #300]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800159a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015a2:	4948      	ldr	r1, [pc, #288]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00a      	beq.n	80015cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80015b6:	4b43      	ldr	r3, [pc, #268]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80015b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c4:	493f      	ldr	r1, [pc, #252]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d028      	beq.n	800162a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80015d8:	4b3a      	ldr	r3, [pc, #232]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80015da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80015e6:	4937      	ldr	r1, [pc, #220]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80015e8:	4313      	orrs	r3, r2
 80015ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80015f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80015f6:	d106      	bne.n	8001606 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80015f8:	4b32      	ldr	r3, [pc, #200]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	4a31      	ldr	r2, [pc, #196]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80015fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001602:	60d3      	str	r3, [r2, #12]
 8001604:	e011      	b.n	800162a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800160a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800160e:	d10c      	bne.n	800162a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3304      	adds	r3, #4
 8001614:	2101      	movs	r1, #1
 8001616:	4618      	mov	r0, r3
 8001618:	f000 f8c8 	bl	80017ac <RCCEx_PLLSAI1_Config>
 800161c:	4603      	mov	r3, r0
 800161e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001620:	7cfb      	ldrb	r3, [r7, #19]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8001626:	7cfb      	ldrb	r3, [r7, #19]
 8001628:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d028      	beq.n	8001688 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001636:	4b23      	ldr	r3, [pc, #140]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800163c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001644:	491f      	ldr	r1, [pc, #124]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001646:	4313      	orrs	r3, r2
 8001648:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001650:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001654:	d106      	bne.n	8001664 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001656:	4b1b      	ldr	r3, [pc, #108]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	4a1a      	ldr	r2, [pc, #104]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800165c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001660:	60d3      	str	r3, [r2, #12]
 8001662:	e011      	b.n	8001688 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001668:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800166c:	d10c      	bne.n	8001688 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3304      	adds	r3, #4
 8001672:	2101      	movs	r1, #1
 8001674:	4618      	mov	r0, r3
 8001676:	f000 f899 	bl	80017ac <RCCEx_PLLSAI1_Config>
 800167a:	4603      	mov	r3, r0
 800167c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800167e:	7cfb      	ldrb	r3, [r7, #19]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8001684:	7cfb      	ldrb	r3, [r7, #19]
 8001686:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d02b      	beq.n	80016ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001694:	4b0b      	ldr	r3, [pc, #44]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800169a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016a2:	4908      	ldr	r1, [pc, #32]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80016b2:	d109      	bne.n	80016c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80016b4:	4b03      	ldr	r3, [pc, #12]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	4a02      	ldr	r2, [pc, #8]	@ (80016c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80016ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80016be:	60d3      	str	r3, [r2, #12]
 80016c0:	e014      	b.n	80016ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80016c2:	bf00      	nop
 80016c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80016d0:	d10c      	bne.n	80016ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	3304      	adds	r3, #4
 80016d6:	2101      	movs	r1, #1
 80016d8:	4618      	mov	r0, r3
 80016da:	f000 f867 	bl	80017ac <RCCEx_PLLSAI1_Config>
 80016de:	4603      	mov	r3, r0
 80016e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80016e2:	7cfb      	ldrb	r3, [r7, #19]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80016e8:	7cfb      	ldrb	r3, [r7, #19]
 80016ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d02f      	beq.n	8001758 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80016f8:	4b2b      	ldr	r3, [pc, #172]	@ (80017a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80016fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001706:	4928      	ldr	r1, [pc, #160]	@ (80017a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001708:	4313      	orrs	r3, r2
 800170a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001712:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001716:	d10d      	bne.n	8001734 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3304      	adds	r3, #4
 800171c:	2102      	movs	r1, #2
 800171e:	4618      	mov	r0, r3
 8001720:	f000 f844 	bl	80017ac <RCCEx_PLLSAI1_Config>
 8001724:	4603      	mov	r3, r0
 8001726:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001728:	7cfb      	ldrb	r3, [r7, #19]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d014      	beq.n	8001758 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800172e:	7cfb      	ldrb	r3, [r7, #19]
 8001730:	74bb      	strb	r3, [r7, #18]
 8001732:	e011      	b.n	8001758 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001738:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800173c:	d10c      	bne.n	8001758 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3320      	adds	r3, #32
 8001742:	2102      	movs	r1, #2
 8001744:	4618      	mov	r0, r3
 8001746:	f000 f925 	bl	8001994 <RCCEx_PLLSAI2_Config>
 800174a:	4603      	mov	r3, r0
 800174c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800174e:	7cfb      	ldrb	r3, [r7, #19]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8001754:	7cfb      	ldrb	r3, [r7, #19]
 8001756:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d00a      	beq.n	800177a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001764:	4b10      	ldr	r3, [pc, #64]	@ (80017a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800176a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001772:	490d      	ldr	r1, [pc, #52]	@ (80017a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001774:	4313      	orrs	r3, r2
 8001776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00b      	beq.n	800179e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001786:	4b08      	ldr	r3, [pc, #32]	@ (80017a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800178c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001796:	4904      	ldr	r1, [pc, #16]	@ (80017a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8001798:	4313      	orrs	r3, r2
 800179a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800179e:	7cbb      	ldrb	r3, [r7, #18]
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40021000 	.word	0x40021000

080017ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80017b6:	2300      	movs	r3, #0
 80017b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80017ba:	4b75      	ldr	r3, [pc, #468]	@ (8001990 <RCCEx_PLLSAI1_Config+0x1e4>)
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d018      	beq.n	80017f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80017c6:	4b72      	ldr	r3, [pc, #456]	@ (8001990 <RCCEx_PLLSAI1_Config+0x1e4>)
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	f003 0203 	and.w	r2, r3, #3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d10d      	bne.n	80017f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
       ||
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d009      	beq.n	80017f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80017de:	4b6c      	ldr	r3, [pc, #432]	@ (8001990 <RCCEx_PLLSAI1_Config+0x1e4>)
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	091b      	lsrs	r3, r3, #4
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	1c5a      	adds	r2, r3, #1
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
       ||
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d047      	beq.n	8001882 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	73fb      	strb	r3, [r7, #15]
 80017f6:	e044      	b.n	8001882 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	d018      	beq.n	8001832 <RCCEx_PLLSAI1_Config+0x86>
 8001800:	2b03      	cmp	r3, #3
 8001802:	d825      	bhi.n	8001850 <RCCEx_PLLSAI1_Config+0xa4>
 8001804:	2b01      	cmp	r3, #1
 8001806:	d002      	beq.n	800180e <RCCEx_PLLSAI1_Config+0x62>
 8001808:	2b02      	cmp	r3, #2
 800180a:	d009      	beq.n	8001820 <RCCEx_PLLSAI1_Config+0x74>
 800180c:	e020      	b.n	8001850 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800180e:	4b60      	ldr	r3, [pc, #384]	@ (8001990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d11d      	bne.n	8001856 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800181e:	e01a      	b.n	8001856 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001820:	4b5b      	ldr	r3, [pc, #364]	@ (8001990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001828:	2b00      	cmp	r3, #0
 800182a:	d116      	bne.n	800185a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001830:	e013      	b.n	800185a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001832:	4b57      	ldr	r3, [pc, #348]	@ (8001990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10f      	bne.n	800185e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800183e:	4b54      	ldr	r3, [pc, #336]	@ (8001990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d109      	bne.n	800185e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800184e:	e006      	b.n	800185e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	73fb      	strb	r3, [r7, #15]
      break;
 8001854:	e004      	b.n	8001860 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001856:	bf00      	nop
 8001858:	e002      	b.n	8001860 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800185a:	bf00      	nop
 800185c:	e000      	b.n	8001860 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800185e:	bf00      	nop
    }

    if(status == HAL_OK)
 8001860:	7bfb      	ldrb	r3, [r7, #15]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10d      	bne.n	8001882 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001866:	4b4a      	ldr	r3, [pc, #296]	@ (8001990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6819      	ldr	r1, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	3b01      	subs	r3, #1
 8001878:	011b      	lsls	r3, r3, #4
 800187a:	430b      	orrs	r3, r1
 800187c:	4944      	ldr	r1, [pc, #272]	@ (8001990 <RCCEx_PLLSAI1_Config+0x1e4>)
 800187e:	4313      	orrs	r3, r2
 8001880:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d17d      	bne.n	8001984 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001888:	4b41      	ldr	r3, [pc, #260]	@ (8001990 <RCCEx_PLLSAI1_Config+0x1e4>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a40      	ldr	r2, [pc, #256]	@ (8001990 <RCCEx_PLLSAI1_Config+0x1e4>)
 800188e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8001892:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001894:	f7ff f8ca 	bl	8000a2c <HAL_GetTick>
 8001898:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800189a:	e009      	b.n	80018b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800189c:	f7ff f8c6 	bl	8000a2c <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d902      	bls.n	80018b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	73fb      	strb	r3, [r7, #15]
        break;
 80018ae:	e005      	b.n	80018bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80018b0:	4b37      	ldr	r3, [pc, #220]	@ (8001990 <RCCEx_PLLSAI1_Config+0x1e4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1ef      	bne.n	800189c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d160      	bne.n	8001984 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d111      	bne.n	80018ec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80018c8:	4b31      	ldr	r3, [pc, #196]	@ (8001990 <RCCEx_PLLSAI1_Config+0x1e4>)
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80018d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6892      	ldr	r2, [r2, #8]
 80018d8:	0211      	lsls	r1, r2, #8
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	68d2      	ldr	r2, [r2, #12]
 80018de:	0912      	lsrs	r2, r2, #4
 80018e0:	0452      	lsls	r2, r2, #17
 80018e2:	430a      	orrs	r2, r1
 80018e4:	492a      	ldr	r1, [pc, #168]	@ (8001990 <RCCEx_PLLSAI1_Config+0x1e4>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	610b      	str	r3, [r1, #16]
 80018ea:	e027      	b.n	800193c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d112      	bne.n	8001918 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80018f2:	4b27      	ldr	r3, [pc, #156]	@ (8001990 <RCCEx_PLLSAI1_Config+0x1e4>)
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80018fa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6892      	ldr	r2, [r2, #8]
 8001902:	0211      	lsls	r1, r2, #8
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	6912      	ldr	r2, [r2, #16]
 8001908:	0852      	lsrs	r2, r2, #1
 800190a:	3a01      	subs	r2, #1
 800190c:	0552      	lsls	r2, r2, #21
 800190e:	430a      	orrs	r2, r1
 8001910:	491f      	ldr	r1, [pc, #124]	@ (8001990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001912:	4313      	orrs	r3, r2
 8001914:	610b      	str	r3, [r1, #16]
 8001916:	e011      	b.n	800193c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001918:	4b1d      	ldr	r3, [pc, #116]	@ (8001990 <RCCEx_PLLSAI1_Config+0x1e4>)
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8001920:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6892      	ldr	r2, [r2, #8]
 8001928:	0211      	lsls	r1, r2, #8
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6952      	ldr	r2, [r2, #20]
 800192e:	0852      	lsrs	r2, r2, #1
 8001930:	3a01      	subs	r2, #1
 8001932:	0652      	lsls	r2, r2, #25
 8001934:	430a      	orrs	r2, r1
 8001936:	4916      	ldr	r1, [pc, #88]	@ (8001990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001938:	4313      	orrs	r3, r2
 800193a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800193c:	4b14      	ldr	r3, [pc, #80]	@ (8001990 <RCCEx_PLLSAI1_Config+0x1e4>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a13      	ldr	r2, [pc, #76]	@ (8001990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001942:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001946:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001948:	f7ff f870 	bl	8000a2c <HAL_GetTick>
 800194c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800194e:	e009      	b.n	8001964 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001950:	f7ff f86c 	bl	8000a2c <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d902      	bls.n	8001964 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	73fb      	strb	r3, [r7, #15]
          break;
 8001962:	e005      	b.n	8001970 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001964:	4b0a      	ldr	r3, [pc, #40]	@ (8001990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0ef      	beq.n	8001950 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d106      	bne.n	8001984 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001976:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001978:	691a      	ldr	r2, [r3, #16]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	4904      	ldr	r1, [pc, #16]	@ (8001990 <RCCEx_PLLSAI1_Config+0x1e4>)
 8001980:	4313      	orrs	r3, r2
 8001982:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8001984:	7bfb      	ldrb	r3, [r7, #15]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40021000 	.word	0x40021000

08001994 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800199e:	2300      	movs	r3, #0
 80019a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80019a2:	4b6a      	ldr	r3, [pc, #424]	@ (8001b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d018      	beq.n	80019e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80019ae:	4b67      	ldr	r3, [pc, #412]	@ (8001b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	f003 0203 	and.w	r2, r3, #3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d10d      	bne.n	80019da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
       ||
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d009      	beq.n	80019da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80019c6:	4b61      	ldr	r3, [pc, #388]	@ (8001b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	091b      	lsrs	r3, r3, #4
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	1c5a      	adds	r2, r3, #1
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
       ||
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d047      	beq.n	8001a6a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	73fb      	strb	r3, [r7, #15]
 80019de:	e044      	b.n	8001a6a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b03      	cmp	r3, #3
 80019e6:	d018      	beq.n	8001a1a <RCCEx_PLLSAI2_Config+0x86>
 80019e8:	2b03      	cmp	r3, #3
 80019ea:	d825      	bhi.n	8001a38 <RCCEx_PLLSAI2_Config+0xa4>
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d002      	beq.n	80019f6 <RCCEx_PLLSAI2_Config+0x62>
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d009      	beq.n	8001a08 <RCCEx_PLLSAI2_Config+0x74>
 80019f4:	e020      	b.n	8001a38 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80019f6:	4b55      	ldr	r3, [pc, #340]	@ (8001b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d11d      	bne.n	8001a3e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a06:	e01a      	b.n	8001a3e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001a08:	4b50      	ldr	r3, [pc, #320]	@ (8001b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d116      	bne.n	8001a42 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a18:	e013      	b.n	8001a42 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001a1a:	4b4c      	ldr	r3, [pc, #304]	@ (8001b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d10f      	bne.n	8001a46 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001a26:	4b49      	ldr	r3, [pc, #292]	@ (8001b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d109      	bne.n	8001a46 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001a36:	e006      	b.n	8001a46 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a3c:	e004      	b.n	8001a48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8001a3e:	bf00      	nop
 8001a40:	e002      	b.n	8001a48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8001a42:	bf00      	nop
 8001a44:	e000      	b.n	8001a48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8001a46:	bf00      	nop
    }

    if(status == HAL_OK)
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10d      	bne.n	8001a6a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001a4e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6819      	ldr	r1, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	011b      	lsls	r3, r3, #4
 8001a62:	430b      	orrs	r3, r1
 8001a64:	4939      	ldr	r1, [pc, #228]	@ (8001b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d167      	bne.n	8001b40 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8001a70:	4b36      	ldr	r3, [pc, #216]	@ (8001b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a35      	ldr	r2, [pc, #212]	@ (8001b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8001a76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a7c:	f7fe ffd6 	bl	8000a2c <HAL_GetTick>
 8001a80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001a82:	e009      	b.n	8001a98 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001a84:	f7fe ffd2 	bl	8000a2c <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d902      	bls.n	8001a98 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	73fb      	strb	r3, [r7, #15]
        break;
 8001a96:	e005      	b.n	8001aa4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001a98:	4b2c      	ldr	r3, [pc, #176]	@ (8001b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1ef      	bne.n	8001a84 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d14a      	bne.n	8001b40 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d111      	bne.n	8001ad4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001ab0:	4b26      	ldr	r3, [pc, #152]	@ (8001b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8001ab8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6892      	ldr	r2, [r2, #8]
 8001ac0:	0211      	lsls	r1, r2, #8
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68d2      	ldr	r2, [r2, #12]
 8001ac6:	0912      	lsrs	r2, r2, #4
 8001ac8:	0452      	lsls	r2, r2, #17
 8001aca:	430a      	orrs	r2, r1
 8001acc:	491f      	ldr	r1, [pc, #124]	@ (8001b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	614b      	str	r3, [r1, #20]
 8001ad2:	e011      	b.n	8001af8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8001adc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6892      	ldr	r2, [r2, #8]
 8001ae4:	0211      	lsls	r1, r2, #8
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	6912      	ldr	r2, [r2, #16]
 8001aea:	0852      	lsrs	r2, r2, #1
 8001aec:	3a01      	subs	r2, #1
 8001aee:	0652      	lsls	r2, r2, #25
 8001af0:	430a      	orrs	r2, r1
 8001af2:	4916      	ldr	r1, [pc, #88]	@ (8001b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8001af8:	4b14      	ldr	r3, [pc, #80]	@ (8001b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a13      	ldr	r2, [pc, #76]	@ (8001b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8001afe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b04:	f7fe ff92 	bl	8000a2c <HAL_GetTick>
 8001b08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8001b0a:	e009      	b.n	8001b20 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001b0c:	f7fe ff8e 	bl	8000a2c <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d902      	bls.n	8001b20 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	73fb      	strb	r3, [r7, #15]
          break;
 8001b1e:	e005      	b.n	8001b2c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8001b20:	4b0a      	ldr	r3, [pc, #40]	@ (8001b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0ef      	beq.n	8001b0c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d106      	bne.n	8001b40 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8001b32:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8001b34:	695a      	ldr	r2, [r3, #20]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	4904      	ldr	r1, [pc, #16]	@ (8001b4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40021000 	.word	0x40021000

08001b50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e040      	b.n	8001be4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d106      	bne.n	8001b78 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7fe fdec 	bl	8000750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2224      	movs	r2, #36	@ 0x24
 8001b7c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f022 0201 	bic.w	r2, r2, #1
 8001b8c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d002      	beq.n	8001b9c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 fb6a 	bl	8002270 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 f8af 	bl	8001d00 <UART_SetConfig>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d101      	bne.n	8001bac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e01b      	b.n	8001be4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	685a      	ldr	r2, [r3, #4]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001bba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001bca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0201 	orr.w	r2, r2, #1
 8001bda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 fbe9 	bl	80023b4 <UART_CheckIdleState>
 8001be2:	4603      	mov	r3, r0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	@ 0x28
 8001bf0:	af02      	add	r7, sp, #8
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	603b      	str	r3, [r7, #0]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001c00:	2b20      	cmp	r3, #32
 8001c02:	d177      	bne.n	8001cf4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <HAL_UART_Transmit+0x24>
 8001c0a:	88fb      	ldrh	r3, [r7, #6]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e070      	b.n	8001cf6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2221      	movs	r2, #33	@ 0x21
 8001c20:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c22:	f7fe ff03 	bl	8000a2c <HAL_GetTick>
 8001c26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	88fa      	ldrh	r2, [r7, #6]
 8001c2c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	88fa      	ldrh	r2, [r7, #6]
 8001c34:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c40:	d108      	bne.n	8001c54 <HAL_UART_Transmit+0x68>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d104      	bne.n	8001c54 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	61bb      	str	r3, [r7, #24]
 8001c52:	e003      	b.n	8001c5c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001c5c:	e02f      	b.n	8001cbe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2200      	movs	r2, #0
 8001c66:	2180      	movs	r1, #128	@ 0x80
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f000 fc4b 	bl	8002504 <UART_WaitOnFlagUntilTimeout>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d004      	beq.n	8001c7e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2220      	movs	r2, #32
 8001c78:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e03b      	b.n	8001cf6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10b      	bne.n	8001c9c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	881a      	ldrh	r2, [r3, #0]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c90:	b292      	uxth	r2, r2
 8001c92:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	3302      	adds	r3, #2
 8001c98:	61bb      	str	r3, [r7, #24]
 8001c9a:	e007      	b.n	8001cac <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	781a      	ldrb	r2, [r3, #0]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1c9      	bne.n	8001c5e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2140      	movs	r1, #64	@ 0x40
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f000 fc15 	bl	8002504 <UART_WaitOnFlagUntilTimeout>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d004      	beq.n	8001cea <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e005      	b.n	8001cf6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2220      	movs	r2, #32
 8001cee:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e000      	b.n	8001cf6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8001cf4:	2302      	movs	r3, #2
  }
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3720      	adds	r7, #32
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d04:	b08a      	sub	sp, #40	@ 0x28
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	69db      	ldr	r3, [r3, #28]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	4ba4      	ldr	r3, [pc, #656]	@ (8001fc0 <UART_SetConfig+0x2c0>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	6812      	ldr	r2, [r2, #0]
 8001d36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d38:	430b      	orrs	r3, r1
 8001d3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	68da      	ldr	r2, [r3, #12]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a99      	ldr	r2, [pc, #612]	@ (8001fc4 <UART_SetConfig+0x2c4>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d004      	beq.n	8001d6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a90      	ldr	r2, [pc, #576]	@ (8001fc8 <UART_SetConfig+0x2c8>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d126      	bne.n	8001dd8 <UART_SetConfig+0xd8>
 8001d8a:	4b90      	ldr	r3, [pc, #576]	@ (8001fcc <UART_SetConfig+0x2cc>)
 8001d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	d81b      	bhi.n	8001dd0 <UART_SetConfig+0xd0>
 8001d98:	a201      	add	r2, pc, #4	@ (adr r2, 8001da0 <UART_SetConfig+0xa0>)
 8001d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d9e:	bf00      	nop
 8001da0:	08001db1 	.word	0x08001db1
 8001da4:	08001dc1 	.word	0x08001dc1
 8001da8:	08001db9 	.word	0x08001db9
 8001dac:	08001dc9 	.word	0x08001dc9
 8001db0:	2301      	movs	r3, #1
 8001db2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001db6:	e116      	b.n	8001fe6 <UART_SetConfig+0x2e6>
 8001db8:	2302      	movs	r3, #2
 8001dba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001dbe:	e112      	b.n	8001fe6 <UART_SetConfig+0x2e6>
 8001dc0:	2304      	movs	r3, #4
 8001dc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001dc6:	e10e      	b.n	8001fe6 <UART_SetConfig+0x2e6>
 8001dc8:	2308      	movs	r3, #8
 8001dca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001dce:	e10a      	b.n	8001fe6 <UART_SetConfig+0x2e6>
 8001dd0:	2310      	movs	r3, #16
 8001dd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001dd6:	e106      	b.n	8001fe6 <UART_SetConfig+0x2e6>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a7c      	ldr	r2, [pc, #496]	@ (8001fd0 <UART_SetConfig+0x2d0>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d138      	bne.n	8001e54 <UART_SetConfig+0x154>
 8001de2:	4b7a      	ldr	r3, [pc, #488]	@ (8001fcc <UART_SetConfig+0x2cc>)
 8001de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001de8:	f003 030c 	and.w	r3, r3, #12
 8001dec:	2b0c      	cmp	r3, #12
 8001dee:	d82d      	bhi.n	8001e4c <UART_SetConfig+0x14c>
 8001df0:	a201      	add	r2, pc, #4	@ (adr r2, 8001df8 <UART_SetConfig+0xf8>)
 8001df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df6:	bf00      	nop
 8001df8:	08001e2d 	.word	0x08001e2d
 8001dfc:	08001e4d 	.word	0x08001e4d
 8001e00:	08001e4d 	.word	0x08001e4d
 8001e04:	08001e4d 	.word	0x08001e4d
 8001e08:	08001e3d 	.word	0x08001e3d
 8001e0c:	08001e4d 	.word	0x08001e4d
 8001e10:	08001e4d 	.word	0x08001e4d
 8001e14:	08001e4d 	.word	0x08001e4d
 8001e18:	08001e35 	.word	0x08001e35
 8001e1c:	08001e4d 	.word	0x08001e4d
 8001e20:	08001e4d 	.word	0x08001e4d
 8001e24:	08001e4d 	.word	0x08001e4d
 8001e28:	08001e45 	.word	0x08001e45
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001e32:	e0d8      	b.n	8001fe6 <UART_SetConfig+0x2e6>
 8001e34:	2302      	movs	r3, #2
 8001e36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001e3a:	e0d4      	b.n	8001fe6 <UART_SetConfig+0x2e6>
 8001e3c:	2304      	movs	r3, #4
 8001e3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001e42:	e0d0      	b.n	8001fe6 <UART_SetConfig+0x2e6>
 8001e44:	2308      	movs	r3, #8
 8001e46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001e4a:	e0cc      	b.n	8001fe6 <UART_SetConfig+0x2e6>
 8001e4c:	2310      	movs	r3, #16
 8001e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001e52:	e0c8      	b.n	8001fe6 <UART_SetConfig+0x2e6>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a5e      	ldr	r2, [pc, #376]	@ (8001fd4 <UART_SetConfig+0x2d4>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d125      	bne.n	8001eaa <UART_SetConfig+0x1aa>
 8001e5e:	4b5b      	ldr	r3, [pc, #364]	@ (8001fcc <UART_SetConfig+0x2cc>)
 8001e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e64:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001e68:	2b30      	cmp	r3, #48	@ 0x30
 8001e6a:	d016      	beq.n	8001e9a <UART_SetConfig+0x19a>
 8001e6c:	2b30      	cmp	r3, #48	@ 0x30
 8001e6e:	d818      	bhi.n	8001ea2 <UART_SetConfig+0x1a2>
 8001e70:	2b20      	cmp	r3, #32
 8001e72:	d00a      	beq.n	8001e8a <UART_SetConfig+0x18a>
 8001e74:	2b20      	cmp	r3, #32
 8001e76:	d814      	bhi.n	8001ea2 <UART_SetConfig+0x1a2>
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <UART_SetConfig+0x182>
 8001e7c:	2b10      	cmp	r3, #16
 8001e7e:	d008      	beq.n	8001e92 <UART_SetConfig+0x192>
 8001e80:	e00f      	b.n	8001ea2 <UART_SetConfig+0x1a2>
 8001e82:	2300      	movs	r3, #0
 8001e84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001e88:	e0ad      	b.n	8001fe6 <UART_SetConfig+0x2e6>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001e90:	e0a9      	b.n	8001fe6 <UART_SetConfig+0x2e6>
 8001e92:	2304      	movs	r3, #4
 8001e94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001e98:	e0a5      	b.n	8001fe6 <UART_SetConfig+0x2e6>
 8001e9a:	2308      	movs	r3, #8
 8001e9c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001ea0:	e0a1      	b.n	8001fe6 <UART_SetConfig+0x2e6>
 8001ea2:	2310      	movs	r3, #16
 8001ea4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001ea8:	e09d      	b.n	8001fe6 <UART_SetConfig+0x2e6>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a4a      	ldr	r2, [pc, #296]	@ (8001fd8 <UART_SetConfig+0x2d8>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d125      	bne.n	8001f00 <UART_SetConfig+0x200>
 8001eb4:	4b45      	ldr	r3, [pc, #276]	@ (8001fcc <UART_SetConfig+0x2cc>)
 8001eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eba:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001ebe:	2bc0      	cmp	r3, #192	@ 0xc0
 8001ec0:	d016      	beq.n	8001ef0 <UART_SetConfig+0x1f0>
 8001ec2:	2bc0      	cmp	r3, #192	@ 0xc0
 8001ec4:	d818      	bhi.n	8001ef8 <UART_SetConfig+0x1f8>
 8001ec6:	2b80      	cmp	r3, #128	@ 0x80
 8001ec8:	d00a      	beq.n	8001ee0 <UART_SetConfig+0x1e0>
 8001eca:	2b80      	cmp	r3, #128	@ 0x80
 8001ecc:	d814      	bhi.n	8001ef8 <UART_SetConfig+0x1f8>
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d002      	beq.n	8001ed8 <UART_SetConfig+0x1d8>
 8001ed2:	2b40      	cmp	r3, #64	@ 0x40
 8001ed4:	d008      	beq.n	8001ee8 <UART_SetConfig+0x1e8>
 8001ed6:	e00f      	b.n	8001ef8 <UART_SetConfig+0x1f8>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001ede:	e082      	b.n	8001fe6 <UART_SetConfig+0x2e6>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001ee6:	e07e      	b.n	8001fe6 <UART_SetConfig+0x2e6>
 8001ee8:	2304      	movs	r3, #4
 8001eea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001eee:	e07a      	b.n	8001fe6 <UART_SetConfig+0x2e6>
 8001ef0:	2308      	movs	r3, #8
 8001ef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001ef6:	e076      	b.n	8001fe6 <UART_SetConfig+0x2e6>
 8001ef8:	2310      	movs	r3, #16
 8001efa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001efe:	e072      	b.n	8001fe6 <UART_SetConfig+0x2e6>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a35      	ldr	r2, [pc, #212]	@ (8001fdc <UART_SetConfig+0x2dc>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d12a      	bne.n	8001f60 <UART_SetConfig+0x260>
 8001f0a:	4b30      	ldr	r3, [pc, #192]	@ (8001fcc <UART_SetConfig+0x2cc>)
 8001f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001f18:	d01a      	beq.n	8001f50 <UART_SetConfig+0x250>
 8001f1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001f1e:	d81b      	bhi.n	8001f58 <UART_SetConfig+0x258>
 8001f20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f24:	d00c      	beq.n	8001f40 <UART_SetConfig+0x240>
 8001f26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f2a:	d815      	bhi.n	8001f58 <UART_SetConfig+0x258>
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <UART_SetConfig+0x238>
 8001f30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f34:	d008      	beq.n	8001f48 <UART_SetConfig+0x248>
 8001f36:	e00f      	b.n	8001f58 <UART_SetConfig+0x258>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001f3e:	e052      	b.n	8001fe6 <UART_SetConfig+0x2e6>
 8001f40:	2302      	movs	r3, #2
 8001f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001f46:	e04e      	b.n	8001fe6 <UART_SetConfig+0x2e6>
 8001f48:	2304      	movs	r3, #4
 8001f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001f4e:	e04a      	b.n	8001fe6 <UART_SetConfig+0x2e6>
 8001f50:	2308      	movs	r3, #8
 8001f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001f56:	e046      	b.n	8001fe6 <UART_SetConfig+0x2e6>
 8001f58:	2310      	movs	r3, #16
 8001f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001f5e:	e042      	b.n	8001fe6 <UART_SetConfig+0x2e6>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a17      	ldr	r2, [pc, #92]	@ (8001fc4 <UART_SetConfig+0x2c4>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d13a      	bne.n	8001fe0 <UART_SetConfig+0x2e0>
 8001f6a:	4b18      	ldr	r3, [pc, #96]	@ (8001fcc <UART_SetConfig+0x2cc>)
 8001f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f70:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001f74:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8001f78:	d01a      	beq.n	8001fb0 <UART_SetConfig+0x2b0>
 8001f7a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8001f7e:	d81b      	bhi.n	8001fb8 <UART_SetConfig+0x2b8>
 8001f80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f84:	d00c      	beq.n	8001fa0 <UART_SetConfig+0x2a0>
 8001f86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001f8a:	d815      	bhi.n	8001fb8 <UART_SetConfig+0x2b8>
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <UART_SetConfig+0x298>
 8001f90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f94:	d008      	beq.n	8001fa8 <UART_SetConfig+0x2a8>
 8001f96:	e00f      	b.n	8001fb8 <UART_SetConfig+0x2b8>
 8001f98:	2300      	movs	r3, #0
 8001f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001f9e:	e022      	b.n	8001fe6 <UART_SetConfig+0x2e6>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001fa6:	e01e      	b.n	8001fe6 <UART_SetConfig+0x2e6>
 8001fa8:	2304      	movs	r3, #4
 8001faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001fae:	e01a      	b.n	8001fe6 <UART_SetConfig+0x2e6>
 8001fb0:	2308      	movs	r3, #8
 8001fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001fb6:	e016      	b.n	8001fe6 <UART_SetConfig+0x2e6>
 8001fb8:	2310      	movs	r3, #16
 8001fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001fbe:	e012      	b.n	8001fe6 <UART_SetConfig+0x2e6>
 8001fc0:	efff69f3 	.word	0xefff69f3
 8001fc4:	40008000 	.word	0x40008000
 8001fc8:	40013800 	.word	0x40013800
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40004400 	.word	0x40004400
 8001fd4:	40004800 	.word	0x40004800
 8001fd8:	40004c00 	.word	0x40004c00
 8001fdc:	40005000 	.word	0x40005000
 8001fe0:	2310      	movs	r3, #16
 8001fe2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a9f      	ldr	r2, [pc, #636]	@ (8002268 <UART_SetConfig+0x568>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d17a      	bne.n	80020e6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8001ff0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d824      	bhi.n	8002042 <UART_SetConfig+0x342>
 8001ff8:	a201      	add	r2, pc, #4	@ (adr r2, 8002000 <UART_SetConfig+0x300>)
 8001ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffe:	bf00      	nop
 8002000:	08002025 	.word	0x08002025
 8002004:	08002043 	.word	0x08002043
 8002008:	0800202d 	.word	0x0800202d
 800200c:	08002043 	.word	0x08002043
 8002010:	08002033 	.word	0x08002033
 8002014:	08002043 	.word	0x08002043
 8002018:	08002043 	.word	0x08002043
 800201c:	08002043 	.word	0x08002043
 8002020:	0800203b 	.word	0x0800203b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002024:	f7ff f8ac 	bl	8001180 <HAL_RCC_GetPCLK1Freq>
 8002028:	61f8      	str	r0, [r7, #28]
        break;
 800202a:	e010      	b.n	800204e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800202c:	4b8f      	ldr	r3, [pc, #572]	@ (800226c <UART_SetConfig+0x56c>)
 800202e:	61fb      	str	r3, [r7, #28]
        break;
 8002030:	e00d      	b.n	800204e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002032:	f7ff f80d 	bl	8001050 <HAL_RCC_GetSysClockFreq>
 8002036:	61f8      	str	r0, [r7, #28]
        break;
 8002038:	e009      	b.n	800204e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800203a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800203e:	61fb      	str	r3, [r7, #28]
        break;
 8002040:	e005      	b.n	800204e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800204c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 80fb 	beq.w	800224c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4413      	add	r3, r2
 8002060:	69fa      	ldr	r2, [r7, #28]
 8002062:	429a      	cmp	r2, r3
 8002064:	d305      	bcc.n	8002072 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800206c:	69fa      	ldr	r2, [r7, #28]
 800206e:	429a      	cmp	r2, r3
 8002070:	d903      	bls.n	800207a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002078:	e0e8      	b.n	800224c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	2200      	movs	r2, #0
 800207e:	461c      	mov	r4, r3
 8002080:	4615      	mov	r5, r2
 8002082:	f04f 0200 	mov.w	r2, #0
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	022b      	lsls	r3, r5, #8
 800208c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002090:	0222      	lsls	r2, r4, #8
 8002092:	68f9      	ldr	r1, [r7, #12]
 8002094:	6849      	ldr	r1, [r1, #4]
 8002096:	0849      	lsrs	r1, r1, #1
 8002098:	2000      	movs	r0, #0
 800209a:	4688      	mov	r8, r1
 800209c:	4681      	mov	r9, r0
 800209e:	eb12 0a08 	adds.w	sl, r2, r8
 80020a2:	eb43 0b09 	adc.w	fp, r3, r9
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	603b      	str	r3, [r7, #0]
 80020ae:	607a      	str	r2, [r7, #4]
 80020b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020b4:	4650      	mov	r0, sl
 80020b6:	4659      	mov	r1, fp
 80020b8:	f7fe f8da 	bl	8000270 <__aeabi_uldivmod>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4613      	mov	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80020ca:	d308      	bcc.n	80020de <UART_SetConfig+0x3de>
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020d2:	d204      	bcs.n	80020de <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	60da      	str	r2, [r3, #12]
 80020dc:	e0b6      	b.n	800224c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80020e4:	e0b2      	b.n	800224c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020ee:	d15e      	bne.n	80021ae <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80020f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d828      	bhi.n	800214a <UART_SetConfig+0x44a>
 80020f8:	a201      	add	r2, pc, #4	@ (adr r2, 8002100 <UART_SetConfig+0x400>)
 80020fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020fe:	bf00      	nop
 8002100:	08002125 	.word	0x08002125
 8002104:	0800212d 	.word	0x0800212d
 8002108:	08002135 	.word	0x08002135
 800210c:	0800214b 	.word	0x0800214b
 8002110:	0800213b 	.word	0x0800213b
 8002114:	0800214b 	.word	0x0800214b
 8002118:	0800214b 	.word	0x0800214b
 800211c:	0800214b 	.word	0x0800214b
 8002120:	08002143 	.word	0x08002143
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002124:	f7ff f82c 	bl	8001180 <HAL_RCC_GetPCLK1Freq>
 8002128:	61f8      	str	r0, [r7, #28]
        break;
 800212a:	e014      	b.n	8002156 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800212c:	f7ff f83e 	bl	80011ac <HAL_RCC_GetPCLK2Freq>
 8002130:	61f8      	str	r0, [r7, #28]
        break;
 8002132:	e010      	b.n	8002156 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002134:	4b4d      	ldr	r3, [pc, #308]	@ (800226c <UART_SetConfig+0x56c>)
 8002136:	61fb      	str	r3, [r7, #28]
        break;
 8002138:	e00d      	b.n	8002156 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800213a:	f7fe ff89 	bl	8001050 <HAL_RCC_GetSysClockFreq>
 800213e:	61f8      	str	r0, [r7, #28]
        break;
 8002140:	e009      	b.n	8002156 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002142:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002146:	61fb      	str	r3, [r7, #28]
        break;
 8002148:	e005      	b.n	8002156 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002154:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d077      	beq.n	800224c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	005a      	lsls	r2, r3, #1
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	085b      	lsrs	r3, r3, #1
 8002166:	441a      	add	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002170:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	2b0f      	cmp	r3, #15
 8002176:	d916      	bls.n	80021a6 <UART_SetConfig+0x4a6>
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800217e:	d212      	bcs.n	80021a6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	b29b      	uxth	r3, r3
 8002184:	f023 030f 	bic.w	r3, r3, #15
 8002188:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	085b      	lsrs	r3, r3, #1
 800218e:	b29b      	uxth	r3, r3
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	b29a      	uxth	r2, r3
 8002196:	8afb      	ldrh	r3, [r7, #22]
 8002198:	4313      	orrs	r3, r2
 800219a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	8afa      	ldrh	r2, [r7, #22]
 80021a2:	60da      	str	r2, [r3, #12]
 80021a4:	e052      	b.n	800224c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80021ac:	e04e      	b.n	800224c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80021ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d827      	bhi.n	8002206 <UART_SetConfig+0x506>
 80021b6:	a201      	add	r2, pc, #4	@ (adr r2, 80021bc <UART_SetConfig+0x4bc>)
 80021b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021bc:	080021e1 	.word	0x080021e1
 80021c0:	080021e9 	.word	0x080021e9
 80021c4:	080021f1 	.word	0x080021f1
 80021c8:	08002207 	.word	0x08002207
 80021cc:	080021f7 	.word	0x080021f7
 80021d0:	08002207 	.word	0x08002207
 80021d4:	08002207 	.word	0x08002207
 80021d8:	08002207 	.word	0x08002207
 80021dc:	080021ff 	.word	0x080021ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80021e0:	f7fe ffce 	bl	8001180 <HAL_RCC_GetPCLK1Freq>
 80021e4:	61f8      	str	r0, [r7, #28]
        break;
 80021e6:	e014      	b.n	8002212 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80021e8:	f7fe ffe0 	bl	80011ac <HAL_RCC_GetPCLK2Freq>
 80021ec:	61f8      	str	r0, [r7, #28]
        break;
 80021ee:	e010      	b.n	8002212 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80021f0:	4b1e      	ldr	r3, [pc, #120]	@ (800226c <UART_SetConfig+0x56c>)
 80021f2:	61fb      	str	r3, [r7, #28]
        break;
 80021f4:	e00d      	b.n	8002212 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80021f6:	f7fe ff2b 	bl	8001050 <HAL_RCC_GetSysClockFreq>
 80021fa:	61f8      	str	r0, [r7, #28]
        break;
 80021fc:	e009      	b.n	8002212 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80021fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002202:	61fb      	str	r3, [r7, #28]
        break;
 8002204:	e005      	b.n	8002212 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002210:	bf00      	nop
    }

    if (pclk != 0U)
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d019      	beq.n	800224c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	085a      	lsrs	r2, r3, #1
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	441a      	add	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	fbb2 f3f3 	udiv	r3, r2, r3
 800222a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	2b0f      	cmp	r3, #15
 8002230:	d909      	bls.n	8002246 <UART_SetConfig+0x546>
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002238:	d205      	bcs.n	8002246 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	b29a      	uxth	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	60da      	str	r2, [r3, #12]
 8002244:	e002      	b.n	800224c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002258:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800225c:	4618      	mov	r0, r3
 800225e:	3728      	adds	r7, #40	@ 0x28
 8002260:	46bd      	mov	sp, r7
 8002262:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002266:	bf00      	nop
 8002268:	40008000 	.word	0x40008000
 800226c:	00f42400 	.word	0x00f42400

08002270 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00a      	beq.n	800229a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	430a      	orrs	r2, r1
 8002298:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00a      	beq.n	80022bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	430a      	orrs	r2, r1
 80022ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00a      	beq.n	80022de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d00a      	beq.n	8002300 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002304:	f003 0310 	and.w	r3, r3, #16
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00a      	beq.n	8002322 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002326:	f003 0320 	and.w	r3, r3, #32
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00a      	beq.n	8002344 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800234c:	2b00      	cmp	r3, #0
 800234e:	d01a      	beq.n	8002386 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800236e:	d10a      	bne.n	8002386 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00a      	beq.n	80023a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	605a      	str	r2, [r3, #4]
  }
}
 80023a8:	bf00      	nop
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b098      	sub	sp, #96	@ 0x60
 80023b8:	af02      	add	r7, sp, #8
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80023c4:	f7fe fb32 	bl	8000a2c <HAL_GetTick>
 80023c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0308 	and.w	r3, r3, #8
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	d12e      	bne.n	8002436 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80023d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80023e0:	2200      	movs	r2, #0
 80023e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f88c 	bl	8002504 <UART_WaitOnFlagUntilTimeout>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d021      	beq.n	8002436 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023fa:	e853 3f00 	ldrex	r3, [r3]
 80023fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002402:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002406:	653b      	str	r3, [r7, #80]	@ 0x50
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	461a      	mov	r2, r3
 800240e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002410:	647b      	str	r3, [r7, #68]	@ 0x44
 8002412:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002414:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002416:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002418:	e841 2300 	strex	r3, r2, [r1]
 800241c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800241e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1e6      	bne.n	80023f2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2220      	movs	r2, #32
 8002428:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e062      	b.n	80024fc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b04      	cmp	r3, #4
 8002442:	d149      	bne.n	80024d8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002444:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800244c:	2200      	movs	r2, #0
 800244e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f856 	bl	8002504 <UART_WaitOnFlagUntilTimeout>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d03c      	beq.n	80024d8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002466:	e853 3f00 	ldrex	r3, [r3]
 800246a:	623b      	str	r3, [r7, #32]
   return(result);
 800246c:	6a3b      	ldr	r3, [r7, #32]
 800246e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002472:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	461a      	mov	r2, r3
 800247a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800247c:	633b      	str	r3, [r7, #48]	@ 0x30
 800247e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002480:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002482:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002484:	e841 2300 	strex	r3, r2, [r1]
 8002488:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800248a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1e6      	bne.n	800245e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	3308      	adds	r3, #8
 8002496:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	e853 3f00 	ldrex	r3, [r3]
 800249e:	60fb      	str	r3, [r7, #12]
   return(result);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f023 0301 	bic.w	r3, r3, #1
 80024a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	3308      	adds	r3, #8
 80024ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024b0:	61fa      	str	r2, [r7, #28]
 80024b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024b4:	69b9      	ldr	r1, [r7, #24]
 80024b6:	69fa      	ldr	r2, [r7, #28]
 80024b8:	e841 2300 	strex	r3, r2, [r1]
 80024bc:	617b      	str	r3, [r7, #20]
   return(result);
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1e5      	bne.n	8002490 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2220      	movs	r2, #32
 80024c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e011      	b.n	80024fc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2220      	movs	r2, #32
 80024dc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2220      	movs	r2, #32
 80024e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3758      	adds	r7, #88	@ 0x58
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	603b      	str	r3, [r7, #0]
 8002510:	4613      	mov	r3, r2
 8002512:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002514:	e049      	b.n	80025aa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251c:	d045      	beq.n	80025aa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800251e:	f7fe fa85 	bl	8000a2c <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	429a      	cmp	r2, r3
 800252c:	d302      	bcc.n	8002534 <UART_WaitOnFlagUntilTimeout+0x30>
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e048      	b.n	80025ca <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	2b00      	cmp	r3, #0
 8002544:	d031      	beq.n	80025aa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	69db      	ldr	r3, [r3, #28]
 800254c:	f003 0308 	and.w	r3, r3, #8
 8002550:	2b08      	cmp	r3, #8
 8002552:	d110      	bne.n	8002576 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2208      	movs	r2, #8
 800255a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 f838 	bl	80025d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2208      	movs	r2, #8
 8002566:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e029      	b.n	80025ca <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002580:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002584:	d111      	bne.n	80025aa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800258e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 f81e 	bl	80025d2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2220      	movs	r2, #32
 800259a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e00f      	b.n	80025ca <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	69da      	ldr	r2, [r3, #28]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	4013      	ands	r3, r2
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	bf0c      	ite	eq
 80025ba:	2301      	moveq	r3, #1
 80025bc:	2300      	movne	r3, #0
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	461a      	mov	r2, r3
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d0a6      	beq.n	8002516 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b095      	sub	sp, #84	@ 0x54
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025e2:	e853 3f00 	ldrex	r3, [r3]
 80025e6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80025e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80025ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	461a      	mov	r2, r3
 80025f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80025fa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025fc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80025fe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002600:	e841 2300 	strex	r3, r2, [r1]
 8002604:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1e6      	bne.n	80025da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	3308      	adds	r3, #8
 8002612:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	e853 3f00 	ldrex	r3, [r3]
 800261a:	61fb      	str	r3, [r7, #28]
   return(result);
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f023 0301 	bic.w	r3, r3, #1
 8002622:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	3308      	adds	r3, #8
 800262a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800262c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800262e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002630:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002632:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002634:	e841 2300 	strex	r3, r2, [r1]
 8002638:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800263a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1e5      	bne.n	800260c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002644:	2b01      	cmp	r3, #1
 8002646:	d118      	bne.n	800267a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	e853 3f00 	ldrex	r3, [r3]
 8002654:	60bb      	str	r3, [r7, #8]
   return(result);
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	f023 0310 	bic.w	r3, r3, #16
 800265c:	647b      	str	r3, [r7, #68]	@ 0x44
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	461a      	mov	r2, r3
 8002664:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002666:	61bb      	str	r3, [r7, #24]
 8002668:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800266a:	6979      	ldr	r1, [r7, #20]
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	e841 2300 	strex	r3, r2, [r1]
 8002672:	613b      	str	r3, [r7, #16]
   return(result);
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1e6      	bne.n	8002648 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2220      	movs	r2, #32
 800267e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800268e:	bf00      	nop
 8002690:	3754      	adds	r7, #84	@ 0x54
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
	...

0800269c <siprintf>:
 800269c:	b40e      	push	{r1, r2, r3}
 800269e:	b500      	push	{lr}
 80026a0:	b09c      	sub	sp, #112	@ 0x70
 80026a2:	ab1d      	add	r3, sp, #116	@ 0x74
 80026a4:	9002      	str	r0, [sp, #8]
 80026a6:	9006      	str	r0, [sp, #24]
 80026a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80026ac:	4809      	ldr	r0, [pc, #36]	@ (80026d4 <siprintf+0x38>)
 80026ae:	9107      	str	r1, [sp, #28]
 80026b0:	9104      	str	r1, [sp, #16]
 80026b2:	4909      	ldr	r1, [pc, #36]	@ (80026d8 <siprintf+0x3c>)
 80026b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80026b8:	9105      	str	r1, [sp, #20]
 80026ba:	6800      	ldr	r0, [r0, #0]
 80026bc:	9301      	str	r3, [sp, #4]
 80026be:	a902      	add	r1, sp, #8
 80026c0:	f000 f994 	bl	80029ec <_svfiprintf_r>
 80026c4:	9b02      	ldr	r3, [sp, #8]
 80026c6:	2200      	movs	r2, #0
 80026c8:	701a      	strb	r2, [r3, #0]
 80026ca:	b01c      	add	sp, #112	@ 0x70
 80026cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80026d0:	b003      	add	sp, #12
 80026d2:	4770      	bx	lr
 80026d4:	20000010 	.word	0x20000010
 80026d8:	ffff0208 	.word	0xffff0208

080026dc <memset>:
 80026dc:	4402      	add	r2, r0
 80026de:	4603      	mov	r3, r0
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d100      	bne.n	80026e6 <memset+0xa>
 80026e4:	4770      	bx	lr
 80026e6:	f803 1b01 	strb.w	r1, [r3], #1
 80026ea:	e7f9      	b.n	80026e0 <memset+0x4>

080026ec <__errno>:
 80026ec:	4b01      	ldr	r3, [pc, #4]	@ (80026f4 <__errno+0x8>)
 80026ee:	6818      	ldr	r0, [r3, #0]
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	20000010 	.word	0x20000010

080026f8 <__libc_init_array>:
 80026f8:	b570      	push	{r4, r5, r6, lr}
 80026fa:	4d0d      	ldr	r5, [pc, #52]	@ (8002730 <__libc_init_array+0x38>)
 80026fc:	4c0d      	ldr	r4, [pc, #52]	@ (8002734 <__libc_init_array+0x3c>)
 80026fe:	1b64      	subs	r4, r4, r5
 8002700:	10a4      	asrs	r4, r4, #2
 8002702:	2600      	movs	r6, #0
 8002704:	42a6      	cmp	r6, r4
 8002706:	d109      	bne.n	800271c <__libc_init_array+0x24>
 8002708:	4d0b      	ldr	r5, [pc, #44]	@ (8002738 <__libc_init_array+0x40>)
 800270a:	4c0c      	ldr	r4, [pc, #48]	@ (800273c <__libc_init_array+0x44>)
 800270c:	f000 fc66 	bl	8002fdc <_init>
 8002710:	1b64      	subs	r4, r4, r5
 8002712:	10a4      	asrs	r4, r4, #2
 8002714:	2600      	movs	r6, #0
 8002716:	42a6      	cmp	r6, r4
 8002718:	d105      	bne.n	8002726 <__libc_init_array+0x2e>
 800271a:	bd70      	pop	{r4, r5, r6, pc}
 800271c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002720:	4798      	blx	r3
 8002722:	3601      	adds	r6, #1
 8002724:	e7ee      	b.n	8002704 <__libc_init_array+0xc>
 8002726:	f855 3b04 	ldr.w	r3, [r5], #4
 800272a:	4798      	blx	r3
 800272c:	3601      	adds	r6, #1
 800272e:	e7f2      	b.n	8002716 <__libc_init_array+0x1e>
 8002730:	08003080 	.word	0x08003080
 8002734:	08003080 	.word	0x08003080
 8002738:	08003080 	.word	0x08003080
 800273c:	08003084 	.word	0x08003084

08002740 <__retarget_lock_acquire_recursive>:
 8002740:	4770      	bx	lr

08002742 <__retarget_lock_release_recursive>:
 8002742:	4770      	bx	lr

08002744 <_free_r>:
 8002744:	b538      	push	{r3, r4, r5, lr}
 8002746:	4605      	mov	r5, r0
 8002748:	2900      	cmp	r1, #0
 800274a:	d041      	beq.n	80027d0 <_free_r+0x8c>
 800274c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002750:	1f0c      	subs	r4, r1, #4
 8002752:	2b00      	cmp	r3, #0
 8002754:	bfb8      	it	lt
 8002756:	18e4      	addlt	r4, r4, r3
 8002758:	f000 f8e0 	bl	800291c <__malloc_lock>
 800275c:	4a1d      	ldr	r2, [pc, #116]	@ (80027d4 <_free_r+0x90>)
 800275e:	6813      	ldr	r3, [r2, #0]
 8002760:	b933      	cbnz	r3, 8002770 <_free_r+0x2c>
 8002762:	6063      	str	r3, [r4, #4]
 8002764:	6014      	str	r4, [r2, #0]
 8002766:	4628      	mov	r0, r5
 8002768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800276c:	f000 b8dc 	b.w	8002928 <__malloc_unlock>
 8002770:	42a3      	cmp	r3, r4
 8002772:	d908      	bls.n	8002786 <_free_r+0x42>
 8002774:	6820      	ldr	r0, [r4, #0]
 8002776:	1821      	adds	r1, r4, r0
 8002778:	428b      	cmp	r3, r1
 800277a:	bf01      	itttt	eq
 800277c:	6819      	ldreq	r1, [r3, #0]
 800277e:	685b      	ldreq	r3, [r3, #4]
 8002780:	1809      	addeq	r1, r1, r0
 8002782:	6021      	streq	r1, [r4, #0]
 8002784:	e7ed      	b.n	8002762 <_free_r+0x1e>
 8002786:	461a      	mov	r2, r3
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	b10b      	cbz	r3, 8002790 <_free_r+0x4c>
 800278c:	42a3      	cmp	r3, r4
 800278e:	d9fa      	bls.n	8002786 <_free_r+0x42>
 8002790:	6811      	ldr	r1, [r2, #0]
 8002792:	1850      	adds	r0, r2, r1
 8002794:	42a0      	cmp	r0, r4
 8002796:	d10b      	bne.n	80027b0 <_free_r+0x6c>
 8002798:	6820      	ldr	r0, [r4, #0]
 800279a:	4401      	add	r1, r0
 800279c:	1850      	adds	r0, r2, r1
 800279e:	4283      	cmp	r3, r0
 80027a0:	6011      	str	r1, [r2, #0]
 80027a2:	d1e0      	bne.n	8002766 <_free_r+0x22>
 80027a4:	6818      	ldr	r0, [r3, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	6053      	str	r3, [r2, #4]
 80027aa:	4408      	add	r0, r1
 80027ac:	6010      	str	r0, [r2, #0]
 80027ae:	e7da      	b.n	8002766 <_free_r+0x22>
 80027b0:	d902      	bls.n	80027b8 <_free_r+0x74>
 80027b2:	230c      	movs	r3, #12
 80027b4:	602b      	str	r3, [r5, #0]
 80027b6:	e7d6      	b.n	8002766 <_free_r+0x22>
 80027b8:	6820      	ldr	r0, [r4, #0]
 80027ba:	1821      	adds	r1, r4, r0
 80027bc:	428b      	cmp	r3, r1
 80027be:	bf04      	itt	eq
 80027c0:	6819      	ldreq	r1, [r3, #0]
 80027c2:	685b      	ldreq	r3, [r3, #4]
 80027c4:	6063      	str	r3, [r4, #4]
 80027c6:	bf04      	itt	eq
 80027c8:	1809      	addeq	r1, r1, r0
 80027ca:	6021      	streq	r1, [r4, #0]
 80027cc:	6054      	str	r4, [r2, #4]
 80027ce:	e7ca      	b.n	8002766 <_free_r+0x22>
 80027d0:	bd38      	pop	{r3, r4, r5, pc}
 80027d2:	bf00      	nop
 80027d4:	20000284 	.word	0x20000284

080027d8 <sbrk_aligned>:
 80027d8:	b570      	push	{r4, r5, r6, lr}
 80027da:	4e0f      	ldr	r6, [pc, #60]	@ (8002818 <sbrk_aligned+0x40>)
 80027dc:	460c      	mov	r4, r1
 80027de:	6831      	ldr	r1, [r6, #0]
 80027e0:	4605      	mov	r5, r0
 80027e2:	b911      	cbnz	r1, 80027ea <sbrk_aligned+0x12>
 80027e4:	f000 fba6 	bl	8002f34 <_sbrk_r>
 80027e8:	6030      	str	r0, [r6, #0]
 80027ea:	4621      	mov	r1, r4
 80027ec:	4628      	mov	r0, r5
 80027ee:	f000 fba1 	bl	8002f34 <_sbrk_r>
 80027f2:	1c43      	adds	r3, r0, #1
 80027f4:	d103      	bne.n	80027fe <sbrk_aligned+0x26>
 80027f6:	f04f 34ff 	mov.w	r4, #4294967295
 80027fa:	4620      	mov	r0, r4
 80027fc:	bd70      	pop	{r4, r5, r6, pc}
 80027fe:	1cc4      	adds	r4, r0, #3
 8002800:	f024 0403 	bic.w	r4, r4, #3
 8002804:	42a0      	cmp	r0, r4
 8002806:	d0f8      	beq.n	80027fa <sbrk_aligned+0x22>
 8002808:	1a21      	subs	r1, r4, r0
 800280a:	4628      	mov	r0, r5
 800280c:	f000 fb92 	bl	8002f34 <_sbrk_r>
 8002810:	3001      	adds	r0, #1
 8002812:	d1f2      	bne.n	80027fa <sbrk_aligned+0x22>
 8002814:	e7ef      	b.n	80027f6 <sbrk_aligned+0x1e>
 8002816:	bf00      	nop
 8002818:	20000280 	.word	0x20000280

0800281c <_malloc_r>:
 800281c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002820:	1ccd      	adds	r5, r1, #3
 8002822:	f025 0503 	bic.w	r5, r5, #3
 8002826:	3508      	adds	r5, #8
 8002828:	2d0c      	cmp	r5, #12
 800282a:	bf38      	it	cc
 800282c:	250c      	movcc	r5, #12
 800282e:	2d00      	cmp	r5, #0
 8002830:	4606      	mov	r6, r0
 8002832:	db01      	blt.n	8002838 <_malloc_r+0x1c>
 8002834:	42a9      	cmp	r1, r5
 8002836:	d904      	bls.n	8002842 <_malloc_r+0x26>
 8002838:	230c      	movs	r3, #12
 800283a:	6033      	str	r3, [r6, #0]
 800283c:	2000      	movs	r0, #0
 800283e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002842:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002918 <_malloc_r+0xfc>
 8002846:	f000 f869 	bl	800291c <__malloc_lock>
 800284a:	f8d8 3000 	ldr.w	r3, [r8]
 800284e:	461c      	mov	r4, r3
 8002850:	bb44      	cbnz	r4, 80028a4 <_malloc_r+0x88>
 8002852:	4629      	mov	r1, r5
 8002854:	4630      	mov	r0, r6
 8002856:	f7ff ffbf 	bl	80027d8 <sbrk_aligned>
 800285a:	1c43      	adds	r3, r0, #1
 800285c:	4604      	mov	r4, r0
 800285e:	d158      	bne.n	8002912 <_malloc_r+0xf6>
 8002860:	f8d8 4000 	ldr.w	r4, [r8]
 8002864:	4627      	mov	r7, r4
 8002866:	2f00      	cmp	r7, #0
 8002868:	d143      	bne.n	80028f2 <_malloc_r+0xd6>
 800286a:	2c00      	cmp	r4, #0
 800286c:	d04b      	beq.n	8002906 <_malloc_r+0xea>
 800286e:	6823      	ldr	r3, [r4, #0]
 8002870:	4639      	mov	r1, r7
 8002872:	4630      	mov	r0, r6
 8002874:	eb04 0903 	add.w	r9, r4, r3
 8002878:	f000 fb5c 	bl	8002f34 <_sbrk_r>
 800287c:	4581      	cmp	r9, r0
 800287e:	d142      	bne.n	8002906 <_malloc_r+0xea>
 8002880:	6821      	ldr	r1, [r4, #0]
 8002882:	1a6d      	subs	r5, r5, r1
 8002884:	4629      	mov	r1, r5
 8002886:	4630      	mov	r0, r6
 8002888:	f7ff ffa6 	bl	80027d8 <sbrk_aligned>
 800288c:	3001      	adds	r0, #1
 800288e:	d03a      	beq.n	8002906 <_malloc_r+0xea>
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	442b      	add	r3, r5
 8002894:	6023      	str	r3, [r4, #0]
 8002896:	f8d8 3000 	ldr.w	r3, [r8]
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	bb62      	cbnz	r2, 80028f8 <_malloc_r+0xdc>
 800289e:	f8c8 7000 	str.w	r7, [r8]
 80028a2:	e00f      	b.n	80028c4 <_malloc_r+0xa8>
 80028a4:	6822      	ldr	r2, [r4, #0]
 80028a6:	1b52      	subs	r2, r2, r5
 80028a8:	d420      	bmi.n	80028ec <_malloc_r+0xd0>
 80028aa:	2a0b      	cmp	r2, #11
 80028ac:	d917      	bls.n	80028de <_malloc_r+0xc2>
 80028ae:	1961      	adds	r1, r4, r5
 80028b0:	42a3      	cmp	r3, r4
 80028b2:	6025      	str	r5, [r4, #0]
 80028b4:	bf18      	it	ne
 80028b6:	6059      	strne	r1, [r3, #4]
 80028b8:	6863      	ldr	r3, [r4, #4]
 80028ba:	bf08      	it	eq
 80028bc:	f8c8 1000 	streq.w	r1, [r8]
 80028c0:	5162      	str	r2, [r4, r5]
 80028c2:	604b      	str	r3, [r1, #4]
 80028c4:	4630      	mov	r0, r6
 80028c6:	f000 f82f 	bl	8002928 <__malloc_unlock>
 80028ca:	f104 000b 	add.w	r0, r4, #11
 80028ce:	1d23      	adds	r3, r4, #4
 80028d0:	f020 0007 	bic.w	r0, r0, #7
 80028d4:	1ac2      	subs	r2, r0, r3
 80028d6:	bf1c      	itt	ne
 80028d8:	1a1b      	subne	r3, r3, r0
 80028da:	50a3      	strne	r3, [r4, r2]
 80028dc:	e7af      	b.n	800283e <_malloc_r+0x22>
 80028de:	6862      	ldr	r2, [r4, #4]
 80028e0:	42a3      	cmp	r3, r4
 80028e2:	bf0c      	ite	eq
 80028e4:	f8c8 2000 	streq.w	r2, [r8]
 80028e8:	605a      	strne	r2, [r3, #4]
 80028ea:	e7eb      	b.n	80028c4 <_malloc_r+0xa8>
 80028ec:	4623      	mov	r3, r4
 80028ee:	6864      	ldr	r4, [r4, #4]
 80028f0:	e7ae      	b.n	8002850 <_malloc_r+0x34>
 80028f2:	463c      	mov	r4, r7
 80028f4:	687f      	ldr	r7, [r7, #4]
 80028f6:	e7b6      	b.n	8002866 <_malloc_r+0x4a>
 80028f8:	461a      	mov	r2, r3
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	42a3      	cmp	r3, r4
 80028fe:	d1fb      	bne.n	80028f8 <_malloc_r+0xdc>
 8002900:	2300      	movs	r3, #0
 8002902:	6053      	str	r3, [r2, #4]
 8002904:	e7de      	b.n	80028c4 <_malloc_r+0xa8>
 8002906:	230c      	movs	r3, #12
 8002908:	6033      	str	r3, [r6, #0]
 800290a:	4630      	mov	r0, r6
 800290c:	f000 f80c 	bl	8002928 <__malloc_unlock>
 8002910:	e794      	b.n	800283c <_malloc_r+0x20>
 8002912:	6005      	str	r5, [r0, #0]
 8002914:	e7d6      	b.n	80028c4 <_malloc_r+0xa8>
 8002916:	bf00      	nop
 8002918:	20000284 	.word	0x20000284

0800291c <__malloc_lock>:
 800291c:	4801      	ldr	r0, [pc, #4]	@ (8002924 <__malloc_lock+0x8>)
 800291e:	f7ff bf0f 	b.w	8002740 <__retarget_lock_acquire_recursive>
 8002922:	bf00      	nop
 8002924:	2000027c 	.word	0x2000027c

08002928 <__malloc_unlock>:
 8002928:	4801      	ldr	r0, [pc, #4]	@ (8002930 <__malloc_unlock+0x8>)
 800292a:	f7ff bf0a 	b.w	8002742 <__retarget_lock_release_recursive>
 800292e:	bf00      	nop
 8002930:	2000027c 	.word	0x2000027c

08002934 <__ssputs_r>:
 8002934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002938:	688e      	ldr	r6, [r1, #8]
 800293a:	461f      	mov	r7, r3
 800293c:	42be      	cmp	r6, r7
 800293e:	680b      	ldr	r3, [r1, #0]
 8002940:	4682      	mov	sl, r0
 8002942:	460c      	mov	r4, r1
 8002944:	4690      	mov	r8, r2
 8002946:	d82d      	bhi.n	80029a4 <__ssputs_r+0x70>
 8002948:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800294c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002950:	d026      	beq.n	80029a0 <__ssputs_r+0x6c>
 8002952:	6965      	ldr	r5, [r4, #20]
 8002954:	6909      	ldr	r1, [r1, #16]
 8002956:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800295a:	eba3 0901 	sub.w	r9, r3, r1
 800295e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002962:	1c7b      	adds	r3, r7, #1
 8002964:	444b      	add	r3, r9
 8002966:	106d      	asrs	r5, r5, #1
 8002968:	429d      	cmp	r5, r3
 800296a:	bf38      	it	cc
 800296c:	461d      	movcc	r5, r3
 800296e:	0553      	lsls	r3, r2, #21
 8002970:	d527      	bpl.n	80029c2 <__ssputs_r+0x8e>
 8002972:	4629      	mov	r1, r5
 8002974:	f7ff ff52 	bl	800281c <_malloc_r>
 8002978:	4606      	mov	r6, r0
 800297a:	b360      	cbz	r0, 80029d6 <__ssputs_r+0xa2>
 800297c:	6921      	ldr	r1, [r4, #16]
 800297e:	464a      	mov	r2, r9
 8002980:	f000 fae8 	bl	8002f54 <memcpy>
 8002984:	89a3      	ldrh	r3, [r4, #12]
 8002986:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800298a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800298e:	81a3      	strh	r3, [r4, #12]
 8002990:	6126      	str	r6, [r4, #16]
 8002992:	6165      	str	r5, [r4, #20]
 8002994:	444e      	add	r6, r9
 8002996:	eba5 0509 	sub.w	r5, r5, r9
 800299a:	6026      	str	r6, [r4, #0]
 800299c:	60a5      	str	r5, [r4, #8]
 800299e:	463e      	mov	r6, r7
 80029a0:	42be      	cmp	r6, r7
 80029a2:	d900      	bls.n	80029a6 <__ssputs_r+0x72>
 80029a4:	463e      	mov	r6, r7
 80029a6:	6820      	ldr	r0, [r4, #0]
 80029a8:	4632      	mov	r2, r6
 80029aa:	4641      	mov	r1, r8
 80029ac:	f000 faa8 	bl	8002f00 <memmove>
 80029b0:	68a3      	ldr	r3, [r4, #8]
 80029b2:	1b9b      	subs	r3, r3, r6
 80029b4:	60a3      	str	r3, [r4, #8]
 80029b6:	6823      	ldr	r3, [r4, #0]
 80029b8:	4433      	add	r3, r6
 80029ba:	6023      	str	r3, [r4, #0]
 80029bc:	2000      	movs	r0, #0
 80029be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029c2:	462a      	mov	r2, r5
 80029c4:	f000 fad4 	bl	8002f70 <_realloc_r>
 80029c8:	4606      	mov	r6, r0
 80029ca:	2800      	cmp	r0, #0
 80029cc:	d1e0      	bne.n	8002990 <__ssputs_r+0x5c>
 80029ce:	6921      	ldr	r1, [r4, #16]
 80029d0:	4650      	mov	r0, sl
 80029d2:	f7ff feb7 	bl	8002744 <_free_r>
 80029d6:	230c      	movs	r3, #12
 80029d8:	f8ca 3000 	str.w	r3, [sl]
 80029dc:	89a3      	ldrh	r3, [r4, #12]
 80029de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029e2:	81a3      	strh	r3, [r4, #12]
 80029e4:	f04f 30ff 	mov.w	r0, #4294967295
 80029e8:	e7e9      	b.n	80029be <__ssputs_r+0x8a>
	...

080029ec <_svfiprintf_r>:
 80029ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029f0:	4698      	mov	r8, r3
 80029f2:	898b      	ldrh	r3, [r1, #12]
 80029f4:	061b      	lsls	r3, r3, #24
 80029f6:	b09d      	sub	sp, #116	@ 0x74
 80029f8:	4607      	mov	r7, r0
 80029fa:	460d      	mov	r5, r1
 80029fc:	4614      	mov	r4, r2
 80029fe:	d510      	bpl.n	8002a22 <_svfiprintf_r+0x36>
 8002a00:	690b      	ldr	r3, [r1, #16]
 8002a02:	b973      	cbnz	r3, 8002a22 <_svfiprintf_r+0x36>
 8002a04:	2140      	movs	r1, #64	@ 0x40
 8002a06:	f7ff ff09 	bl	800281c <_malloc_r>
 8002a0a:	6028      	str	r0, [r5, #0]
 8002a0c:	6128      	str	r0, [r5, #16]
 8002a0e:	b930      	cbnz	r0, 8002a1e <_svfiprintf_r+0x32>
 8002a10:	230c      	movs	r3, #12
 8002a12:	603b      	str	r3, [r7, #0]
 8002a14:	f04f 30ff 	mov.w	r0, #4294967295
 8002a18:	b01d      	add	sp, #116	@ 0x74
 8002a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a1e:	2340      	movs	r3, #64	@ 0x40
 8002a20:	616b      	str	r3, [r5, #20]
 8002a22:	2300      	movs	r3, #0
 8002a24:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a26:	2320      	movs	r3, #32
 8002a28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002a2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a30:	2330      	movs	r3, #48	@ 0x30
 8002a32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002bd0 <_svfiprintf_r+0x1e4>
 8002a36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002a3a:	f04f 0901 	mov.w	r9, #1
 8002a3e:	4623      	mov	r3, r4
 8002a40:	469a      	mov	sl, r3
 8002a42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a46:	b10a      	cbz	r2, 8002a4c <_svfiprintf_r+0x60>
 8002a48:	2a25      	cmp	r2, #37	@ 0x25
 8002a4a:	d1f9      	bne.n	8002a40 <_svfiprintf_r+0x54>
 8002a4c:	ebba 0b04 	subs.w	fp, sl, r4
 8002a50:	d00b      	beq.n	8002a6a <_svfiprintf_r+0x7e>
 8002a52:	465b      	mov	r3, fp
 8002a54:	4622      	mov	r2, r4
 8002a56:	4629      	mov	r1, r5
 8002a58:	4638      	mov	r0, r7
 8002a5a:	f7ff ff6b 	bl	8002934 <__ssputs_r>
 8002a5e:	3001      	adds	r0, #1
 8002a60:	f000 80a7 	beq.w	8002bb2 <_svfiprintf_r+0x1c6>
 8002a64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002a66:	445a      	add	r2, fp
 8002a68:	9209      	str	r2, [sp, #36]	@ 0x24
 8002a6a:	f89a 3000 	ldrb.w	r3, [sl]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 809f 	beq.w	8002bb2 <_svfiprintf_r+0x1c6>
 8002a74:	2300      	movs	r3, #0
 8002a76:	f04f 32ff 	mov.w	r2, #4294967295
 8002a7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a7e:	f10a 0a01 	add.w	sl, sl, #1
 8002a82:	9304      	str	r3, [sp, #16]
 8002a84:	9307      	str	r3, [sp, #28]
 8002a86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002a8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8002a8c:	4654      	mov	r4, sl
 8002a8e:	2205      	movs	r2, #5
 8002a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a94:	484e      	ldr	r0, [pc, #312]	@ (8002bd0 <_svfiprintf_r+0x1e4>)
 8002a96:	f7fd fb9b 	bl	80001d0 <memchr>
 8002a9a:	9a04      	ldr	r2, [sp, #16]
 8002a9c:	b9d8      	cbnz	r0, 8002ad6 <_svfiprintf_r+0xea>
 8002a9e:	06d0      	lsls	r0, r2, #27
 8002aa0:	bf44      	itt	mi
 8002aa2:	2320      	movmi	r3, #32
 8002aa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002aa8:	0711      	lsls	r1, r2, #28
 8002aaa:	bf44      	itt	mi
 8002aac:	232b      	movmi	r3, #43	@ 0x2b
 8002aae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8002ab6:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ab8:	d015      	beq.n	8002ae6 <_svfiprintf_r+0xfa>
 8002aba:	9a07      	ldr	r2, [sp, #28]
 8002abc:	4654      	mov	r4, sl
 8002abe:	2000      	movs	r0, #0
 8002ac0:	f04f 0c0a 	mov.w	ip, #10
 8002ac4:	4621      	mov	r1, r4
 8002ac6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002aca:	3b30      	subs	r3, #48	@ 0x30
 8002acc:	2b09      	cmp	r3, #9
 8002ace:	d94b      	bls.n	8002b68 <_svfiprintf_r+0x17c>
 8002ad0:	b1b0      	cbz	r0, 8002b00 <_svfiprintf_r+0x114>
 8002ad2:	9207      	str	r2, [sp, #28]
 8002ad4:	e014      	b.n	8002b00 <_svfiprintf_r+0x114>
 8002ad6:	eba0 0308 	sub.w	r3, r0, r8
 8002ada:	fa09 f303 	lsl.w	r3, r9, r3
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	9304      	str	r3, [sp, #16]
 8002ae2:	46a2      	mov	sl, r4
 8002ae4:	e7d2      	b.n	8002a8c <_svfiprintf_r+0xa0>
 8002ae6:	9b03      	ldr	r3, [sp, #12]
 8002ae8:	1d19      	adds	r1, r3, #4
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	9103      	str	r1, [sp, #12]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	bfbb      	ittet	lt
 8002af2:	425b      	neglt	r3, r3
 8002af4:	f042 0202 	orrlt.w	r2, r2, #2
 8002af8:	9307      	strge	r3, [sp, #28]
 8002afa:	9307      	strlt	r3, [sp, #28]
 8002afc:	bfb8      	it	lt
 8002afe:	9204      	strlt	r2, [sp, #16]
 8002b00:	7823      	ldrb	r3, [r4, #0]
 8002b02:	2b2e      	cmp	r3, #46	@ 0x2e
 8002b04:	d10a      	bne.n	8002b1c <_svfiprintf_r+0x130>
 8002b06:	7863      	ldrb	r3, [r4, #1]
 8002b08:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b0a:	d132      	bne.n	8002b72 <_svfiprintf_r+0x186>
 8002b0c:	9b03      	ldr	r3, [sp, #12]
 8002b0e:	1d1a      	adds	r2, r3, #4
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	9203      	str	r2, [sp, #12]
 8002b14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002b18:	3402      	adds	r4, #2
 8002b1a:	9305      	str	r3, [sp, #20]
 8002b1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002be0 <_svfiprintf_r+0x1f4>
 8002b20:	7821      	ldrb	r1, [r4, #0]
 8002b22:	2203      	movs	r2, #3
 8002b24:	4650      	mov	r0, sl
 8002b26:	f7fd fb53 	bl	80001d0 <memchr>
 8002b2a:	b138      	cbz	r0, 8002b3c <_svfiprintf_r+0x150>
 8002b2c:	9b04      	ldr	r3, [sp, #16]
 8002b2e:	eba0 000a 	sub.w	r0, r0, sl
 8002b32:	2240      	movs	r2, #64	@ 0x40
 8002b34:	4082      	lsls	r2, r0
 8002b36:	4313      	orrs	r3, r2
 8002b38:	3401      	adds	r4, #1
 8002b3a:	9304      	str	r3, [sp, #16]
 8002b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b40:	4824      	ldr	r0, [pc, #144]	@ (8002bd4 <_svfiprintf_r+0x1e8>)
 8002b42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002b46:	2206      	movs	r2, #6
 8002b48:	f7fd fb42 	bl	80001d0 <memchr>
 8002b4c:	2800      	cmp	r0, #0
 8002b4e:	d036      	beq.n	8002bbe <_svfiprintf_r+0x1d2>
 8002b50:	4b21      	ldr	r3, [pc, #132]	@ (8002bd8 <_svfiprintf_r+0x1ec>)
 8002b52:	bb1b      	cbnz	r3, 8002b9c <_svfiprintf_r+0x1b0>
 8002b54:	9b03      	ldr	r3, [sp, #12]
 8002b56:	3307      	adds	r3, #7
 8002b58:	f023 0307 	bic.w	r3, r3, #7
 8002b5c:	3308      	adds	r3, #8
 8002b5e:	9303      	str	r3, [sp, #12]
 8002b60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002b62:	4433      	add	r3, r6
 8002b64:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b66:	e76a      	b.n	8002a3e <_svfiprintf_r+0x52>
 8002b68:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b6c:	460c      	mov	r4, r1
 8002b6e:	2001      	movs	r0, #1
 8002b70:	e7a8      	b.n	8002ac4 <_svfiprintf_r+0xd8>
 8002b72:	2300      	movs	r3, #0
 8002b74:	3401      	adds	r4, #1
 8002b76:	9305      	str	r3, [sp, #20]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	f04f 0c0a 	mov.w	ip, #10
 8002b7e:	4620      	mov	r0, r4
 8002b80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b84:	3a30      	subs	r2, #48	@ 0x30
 8002b86:	2a09      	cmp	r2, #9
 8002b88:	d903      	bls.n	8002b92 <_svfiprintf_r+0x1a6>
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0c6      	beq.n	8002b1c <_svfiprintf_r+0x130>
 8002b8e:	9105      	str	r1, [sp, #20]
 8002b90:	e7c4      	b.n	8002b1c <_svfiprintf_r+0x130>
 8002b92:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b96:	4604      	mov	r4, r0
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e7f0      	b.n	8002b7e <_svfiprintf_r+0x192>
 8002b9c:	ab03      	add	r3, sp, #12
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	462a      	mov	r2, r5
 8002ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8002bdc <_svfiprintf_r+0x1f0>)
 8002ba4:	a904      	add	r1, sp, #16
 8002ba6:	4638      	mov	r0, r7
 8002ba8:	f3af 8000 	nop.w
 8002bac:	1c42      	adds	r2, r0, #1
 8002bae:	4606      	mov	r6, r0
 8002bb0:	d1d6      	bne.n	8002b60 <_svfiprintf_r+0x174>
 8002bb2:	89ab      	ldrh	r3, [r5, #12]
 8002bb4:	065b      	lsls	r3, r3, #25
 8002bb6:	f53f af2d 	bmi.w	8002a14 <_svfiprintf_r+0x28>
 8002bba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002bbc:	e72c      	b.n	8002a18 <_svfiprintf_r+0x2c>
 8002bbe:	ab03      	add	r3, sp, #12
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	462a      	mov	r2, r5
 8002bc4:	4b05      	ldr	r3, [pc, #20]	@ (8002bdc <_svfiprintf_r+0x1f0>)
 8002bc6:	a904      	add	r1, sp, #16
 8002bc8:	4638      	mov	r0, r7
 8002bca:	f000 f879 	bl	8002cc0 <_printf_i>
 8002bce:	e7ed      	b.n	8002bac <_svfiprintf_r+0x1c0>
 8002bd0:	08003044 	.word	0x08003044
 8002bd4:	0800304e 	.word	0x0800304e
 8002bd8:	00000000 	.word	0x00000000
 8002bdc:	08002935 	.word	0x08002935
 8002be0:	0800304a 	.word	0x0800304a

08002be4 <_printf_common>:
 8002be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002be8:	4616      	mov	r6, r2
 8002bea:	4698      	mov	r8, r3
 8002bec:	688a      	ldr	r2, [r1, #8]
 8002bee:	690b      	ldr	r3, [r1, #16]
 8002bf0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	bfb8      	it	lt
 8002bf8:	4613      	movlt	r3, r2
 8002bfa:	6033      	str	r3, [r6, #0]
 8002bfc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002c00:	4607      	mov	r7, r0
 8002c02:	460c      	mov	r4, r1
 8002c04:	b10a      	cbz	r2, 8002c0a <_printf_common+0x26>
 8002c06:	3301      	adds	r3, #1
 8002c08:	6033      	str	r3, [r6, #0]
 8002c0a:	6823      	ldr	r3, [r4, #0]
 8002c0c:	0699      	lsls	r1, r3, #26
 8002c0e:	bf42      	ittt	mi
 8002c10:	6833      	ldrmi	r3, [r6, #0]
 8002c12:	3302      	addmi	r3, #2
 8002c14:	6033      	strmi	r3, [r6, #0]
 8002c16:	6825      	ldr	r5, [r4, #0]
 8002c18:	f015 0506 	ands.w	r5, r5, #6
 8002c1c:	d106      	bne.n	8002c2c <_printf_common+0x48>
 8002c1e:	f104 0a19 	add.w	sl, r4, #25
 8002c22:	68e3      	ldr	r3, [r4, #12]
 8002c24:	6832      	ldr	r2, [r6, #0]
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	42ab      	cmp	r3, r5
 8002c2a:	dc26      	bgt.n	8002c7a <_printf_common+0x96>
 8002c2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002c30:	6822      	ldr	r2, [r4, #0]
 8002c32:	3b00      	subs	r3, #0
 8002c34:	bf18      	it	ne
 8002c36:	2301      	movne	r3, #1
 8002c38:	0692      	lsls	r2, r2, #26
 8002c3a:	d42b      	bmi.n	8002c94 <_printf_common+0xb0>
 8002c3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002c40:	4641      	mov	r1, r8
 8002c42:	4638      	mov	r0, r7
 8002c44:	47c8      	blx	r9
 8002c46:	3001      	adds	r0, #1
 8002c48:	d01e      	beq.n	8002c88 <_printf_common+0xa4>
 8002c4a:	6823      	ldr	r3, [r4, #0]
 8002c4c:	6922      	ldr	r2, [r4, #16]
 8002c4e:	f003 0306 	and.w	r3, r3, #6
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	bf02      	ittt	eq
 8002c56:	68e5      	ldreq	r5, [r4, #12]
 8002c58:	6833      	ldreq	r3, [r6, #0]
 8002c5a:	1aed      	subeq	r5, r5, r3
 8002c5c:	68a3      	ldr	r3, [r4, #8]
 8002c5e:	bf0c      	ite	eq
 8002c60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c64:	2500      	movne	r5, #0
 8002c66:	4293      	cmp	r3, r2
 8002c68:	bfc4      	itt	gt
 8002c6a:	1a9b      	subgt	r3, r3, r2
 8002c6c:	18ed      	addgt	r5, r5, r3
 8002c6e:	2600      	movs	r6, #0
 8002c70:	341a      	adds	r4, #26
 8002c72:	42b5      	cmp	r5, r6
 8002c74:	d11a      	bne.n	8002cac <_printf_common+0xc8>
 8002c76:	2000      	movs	r0, #0
 8002c78:	e008      	b.n	8002c8c <_printf_common+0xa8>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	4652      	mov	r2, sl
 8002c7e:	4641      	mov	r1, r8
 8002c80:	4638      	mov	r0, r7
 8002c82:	47c8      	blx	r9
 8002c84:	3001      	adds	r0, #1
 8002c86:	d103      	bne.n	8002c90 <_printf_common+0xac>
 8002c88:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c90:	3501      	adds	r5, #1
 8002c92:	e7c6      	b.n	8002c22 <_printf_common+0x3e>
 8002c94:	18e1      	adds	r1, r4, r3
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	2030      	movs	r0, #48	@ 0x30
 8002c9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002c9e:	4422      	add	r2, r4
 8002ca0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002ca4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002ca8:	3302      	adds	r3, #2
 8002caa:	e7c7      	b.n	8002c3c <_printf_common+0x58>
 8002cac:	2301      	movs	r3, #1
 8002cae:	4622      	mov	r2, r4
 8002cb0:	4641      	mov	r1, r8
 8002cb2:	4638      	mov	r0, r7
 8002cb4:	47c8      	blx	r9
 8002cb6:	3001      	adds	r0, #1
 8002cb8:	d0e6      	beq.n	8002c88 <_printf_common+0xa4>
 8002cba:	3601      	adds	r6, #1
 8002cbc:	e7d9      	b.n	8002c72 <_printf_common+0x8e>
	...

08002cc0 <_printf_i>:
 8002cc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002cc4:	7e0f      	ldrb	r7, [r1, #24]
 8002cc6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002cc8:	2f78      	cmp	r7, #120	@ 0x78
 8002cca:	4691      	mov	r9, r2
 8002ccc:	4680      	mov	r8, r0
 8002cce:	460c      	mov	r4, r1
 8002cd0:	469a      	mov	sl, r3
 8002cd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002cd6:	d807      	bhi.n	8002ce8 <_printf_i+0x28>
 8002cd8:	2f62      	cmp	r7, #98	@ 0x62
 8002cda:	d80a      	bhi.n	8002cf2 <_printf_i+0x32>
 8002cdc:	2f00      	cmp	r7, #0
 8002cde:	f000 80d2 	beq.w	8002e86 <_printf_i+0x1c6>
 8002ce2:	2f58      	cmp	r7, #88	@ 0x58
 8002ce4:	f000 80b9 	beq.w	8002e5a <_printf_i+0x19a>
 8002ce8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002cec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002cf0:	e03a      	b.n	8002d68 <_printf_i+0xa8>
 8002cf2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002cf6:	2b15      	cmp	r3, #21
 8002cf8:	d8f6      	bhi.n	8002ce8 <_printf_i+0x28>
 8002cfa:	a101      	add	r1, pc, #4	@ (adr r1, 8002d00 <_printf_i+0x40>)
 8002cfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d00:	08002d59 	.word	0x08002d59
 8002d04:	08002d6d 	.word	0x08002d6d
 8002d08:	08002ce9 	.word	0x08002ce9
 8002d0c:	08002ce9 	.word	0x08002ce9
 8002d10:	08002ce9 	.word	0x08002ce9
 8002d14:	08002ce9 	.word	0x08002ce9
 8002d18:	08002d6d 	.word	0x08002d6d
 8002d1c:	08002ce9 	.word	0x08002ce9
 8002d20:	08002ce9 	.word	0x08002ce9
 8002d24:	08002ce9 	.word	0x08002ce9
 8002d28:	08002ce9 	.word	0x08002ce9
 8002d2c:	08002e6d 	.word	0x08002e6d
 8002d30:	08002d97 	.word	0x08002d97
 8002d34:	08002e27 	.word	0x08002e27
 8002d38:	08002ce9 	.word	0x08002ce9
 8002d3c:	08002ce9 	.word	0x08002ce9
 8002d40:	08002e8f 	.word	0x08002e8f
 8002d44:	08002ce9 	.word	0x08002ce9
 8002d48:	08002d97 	.word	0x08002d97
 8002d4c:	08002ce9 	.word	0x08002ce9
 8002d50:	08002ce9 	.word	0x08002ce9
 8002d54:	08002e2f 	.word	0x08002e2f
 8002d58:	6833      	ldr	r3, [r6, #0]
 8002d5a:	1d1a      	adds	r2, r3, #4
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6032      	str	r2, [r6, #0]
 8002d60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002d64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e09d      	b.n	8002ea8 <_printf_i+0x1e8>
 8002d6c:	6833      	ldr	r3, [r6, #0]
 8002d6e:	6820      	ldr	r0, [r4, #0]
 8002d70:	1d19      	adds	r1, r3, #4
 8002d72:	6031      	str	r1, [r6, #0]
 8002d74:	0606      	lsls	r6, r0, #24
 8002d76:	d501      	bpl.n	8002d7c <_printf_i+0xbc>
 8002d78:	681d      	ldr	r5, [r3, #0]
 8002d7a:	e003      	b.n	8002d84 <_printf_i+0xc4>
 8002d7c:	0645      	lsls	r5, r0, #25
 8002d7e:	d5fb      	bpl.n	8002d78 <_printf_i+0xb8>
 8002d80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002d84:	2d00      	cmp	r5, #0
 8002d86:	da03      	bge.n	8002d90 <_printf_i+0xd0>
 8002d88:	232d      	movs	r3, #45	@ 0x2d
 8002d8a:	426d      	negs	r5, r5
 8002d8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d90:	4859      	ldr	r0, [pc, #356]	@ (8002ef8 <_printf_i+0x238>)
 8002d92:	230a      	movs	r3, #10
 8002d94:	e011      	b.n	8002dba <_printf_i+0xfa>
 8002d96:	6821      	ldr	r1, [r4, #0]
 8002d98:	6833      	ldr	r3, [r6, #0]
 8002d9a:	0608      	lsls	r0, r1, #24
 8002d9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002da0:	d402      	bmi.n	8002da8 <_printf_i+0xe8>
 8002da2:	0649      	lsls	r1, r1, #25
 8002da4:	bf48      	it	mi
 8002da6:	b2ad      	uxthmi	r5, r5
 8002da8:	2f6f      	cmp	r7, #111	@ 0x6f
 8002daa:	4853      	ldr	r0, [pc, #332]	@ (8002ef8 <_printf_i+0x238>)
 8002dac:	6033      	str	r3, [r6, #0]
 8002dae:	bf14      	ite	ne
 8002db0:	230a      	movne	r3, #10
 8002db2:	2308      	moveq	r3, #8
 8002db4:	2100      	movs	r1, #0
 8002db6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002dba:	6866      	ldr	r6, [r4, #4]
 8002dbc:	60a6      	str	r6, [r4, #8]
 8002dbe:	2e00      	cmp	r6, #0
 8002dc0:	bfa2      	ittt	ge
 8002dc2:	6821      	ldrge	r1, [r4, #0]
 8002dc4:	f021 0104 	bicge.w	r1, r1, #4
 8002dc8:	6021      	strge	r1, [r4, #0]
 8002dca:	b90d      	cbnz	r5, 8002dd0 <_printf_i+0x110>
 8002dcc:	2e00      	cmp	r6, #0
 8002dce:	d04b      	beq.n	8002e68 <_printf_i+0x1a8>
 8002dd0:	4616      	mov	r6, r2
 8002dd2:	fbb5 f1f3 	udiv	r1, r5, r3
 8002dd6:	fb03 5711 	mls	r7, r3, r1, r5
 8002dda:	5dc7      	ldrb	r7, [r0, r7]
 8002ddc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002de0:	462f      	mov	r7, r5
 8002de2:	42bb      	cmp	r3, r7
 8002de4:	460d      	mov	r5, r1
 8002de6:	d9f4      	bls.n	8002dd2 <_printf_i+0x112>
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d10b      	bne.n	8002e04 <_printf_i+0x144>
 8002dec:	6823      	ldr	r3, [r4, #0]
 8002dee:	07df      	lsls	r7, r3, #31
 8002df0:	d508      	bpl.n	8002e04 <_printf_i+0x144>
 8002df2:	6923      	ldr	r3, [r4, #16]
 8002df4:	6861      	ldr	r1, [r4, #4]
 8002df6:	4299      	cmp	r1, r3
 8002df8:	bfde      	ittt	le
 8002dfa:	2330      	movle	r3, #48	@ 0x30
 8002dfc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002e00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002e04:	1b92      	subs	r2, r2, r6
 8002e06:	6122      	str	r2, [r4, #16]
 8002e08:	f8cd a000 	str.w	sl, [sp]
 8002e0c:	464b      	mov	r3, r9
 8002e0e:	aa03      	add	r2, sp, #12
 8002e10:	4621      	mov	r1, r4
 8002e12:	4640      	mov	r0, r8
 8002e14:	f7ff fee6 	bl	8002be4 <_printf_common>
 8002e18:	3001      	adds	r0, #1
 8002e1a:	d14a      	bne.n	8002eb2 <_printf_i+0x1f2>
 8002e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e20:	b004      	add	sp, #16
 8002e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e26:	6823      	ldr	r3, [r4, #0]
 8002e28:	f043 0320 	orr.w	r3, r3, #32
 8002e2c:	6023      	str	r3, [r4, #0]
 8002e2e:	4833      	ldr	r0, [pc, #204]	@ (8002efc <_printf_i+0x23c>)
 8002e30:	2778      	movs	r7, #120	@ 0x78
 8002e32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002e36:	6823      	ldr	r3, [r4, #0]
 8002e38:	6831      	ldr	r1, [r6, #0]
 8002e3a:	061f      	lsls	r7, r3, #24
 8002e3c:	f851 5b04 	ldr.w	r5, [r1], #4
 8002e40:	d402      	bmi.n	8002e48 <_printf_i+0x188>
 8002e42:	065f      	lsls	r7, r3, #25
 8002e44:	bf48      	it	mi
 8002e46:	b2ad      	uxthmi	r5, r5
 8002e48:	6031      	str	r1, [r6, #0]
 8002e4a:	07d9      	lsls	r1, r3, #31
 8002e4c:	bf44      	itt	mi
 8002e4e:	f043 0320 	orrmi.w	r3, r3, #32
 8002e52:	6023      	strmi	r3, [r4, #0]
 8002e54:	b11d      	cbz	r5, 8002e5e <_printf_i+0x19e>
 8002e56:	2310      	movs	r3, #16
 8002e58:	e7ac      	b.n	8002db4 <_printf_i+0xf4>
 8002e5a:	4827      	ldr	r0, [pc, #156]	@ (8002ef8 <_printf_i+0x238>)
 8002e5c:	e7e9      	b.n	8002e32 <_printf_i+0x172>
 8002e5e:	6823      	ldr	r3, [r4, #0]
 8002e60:	f023 0320 	bic.w	r3, r3, #32
 8002e64:	6023      	str	r3, [r4, #0]
 8002e66:	e7f6      	b.n	8002e56 <_printf_i+0x196>
 8002e68:	4616      	mov	r6, r2
 8002e6a:	e7bd      	b.n	8002de8 <_printf_i+0x128>
 8002e6c:	6833      	ldr	r3, [r6, #0]
 8002e6e:	6825      	ldr	r5, [r4, #0]
 8002e70:	6961      	ldr	r1, [r4, #20]
 8002e72:	1d18      	adds	r0, r3, #4
 8002e74:	6030      	str	r0, [r6, #0]
 8002e76:	062e      	lsls	r6, r5, #24
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	d501      	bpl.n	8002e80 <_printf_i+0x1c0>
 8002e7c:	6019      	str	r1, [r3, #0]
 8002e7e:	e002      	b.n	8002e86 <_printf_i+0x1c6>
 8002e80:	0668      	lsls	r0, r5, #25
 8002e82:	d5fb      	bpl.n	8002e7c <_printf_i+0x1bc>
 8002e84:	8019      	strh	r1, [r3, #0]
 8002e86:	2300      	movs	r3, #0
 8002e88:	6123      	str	r3, [r4, #16]
 8002e8a:	4616      	mov	r6, r2
 8002e8c:	e7bc      	b.n	8002e08 <_printf_i+0x148>
 8002e8e:	6833      	ldr	r3, [r6, #0]
 8002e90:	1d1a      	adds	r2, r3, #4
 8002e92:	6032      	str	r2, [r6, #0]
 8002e94:	681e      	ldr	r6, [r3, #0]
 8002e96:	6862      	ldr	r2, [r4, #4]
 8002e98:	2100      	movs	r1, #0
 8002e9a:	4630      	mov	r0, r6
 8002e9c:	f7fd f998 	bl	80001d0 <memchr>
 8002ea0:	b108      	cbz	r0, 8002ea6 <_printf_i+0x1e6>
 8002ea2:	1b80      	subs	r0, r0, r6
 8002ea4:	6060      	str	r0, [r4, #4]
 8002ea6:	6863      	ldr	r3, [r4, #4]
 8002ea8:	6123      	str	r3, [r4, #16]
 8002eaa:	2300      	movs	r3, #0
 8002eac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002eb0:	e7aa      	b.n	8002e08 <_printf_i+0x148>
 8002eb2:	6923      	ldr	r3, [r4, #16]
 8002eb4:	4632      	mov	r2, r6
 8002eb6:	4649      	mov	r1, r9
 8002eb8:	4640      	mov	r0, r8
 8002eba:	47d0      	blx	sl
 8002ebc:	3001      	adds	r0, #1
 8002ebe:	d0ad      	beq.n	8002e1c <_printf_i+0x15c>
 8002ec0:	6823      	ldr	r3, [r4, #0]
 8002ec2:	079b      	lsls	r3, r3, #30
 8002ec4:	d413      	bmi.n	8002eee <_printf_i+0x22e>
 8002ec6:	68e0      	ldr	r0, [r4, #12]
 8002ec8:	9b03      	ldr	r3, [sp, #12]
 8002eca:	4298      	cmp	r0, r3
 8002ecc:	bfb8      	it	lt
 8002ece:	4618      	movlt	r0, r3
 8002ed0:	e7a6      	b.n	8002e20 <_printf_i+0x160>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	4632      	mov	r2, r6
 8002ed6:	4649      	mov	r1, r9
 8002ed8:	4640      	mov	r0, r8
 8002eda:	47d0      	blx	sl
 8002edc:	3001      	adds	r0, #1
 8002ede:	d09d      	beq.n	8002e1c <_printf_i+0x15c>
 8002ee0:	3501      	adds	r5, #1
 8002ee2:	68e3      	ldr	r3, [r4, #12]
 8002ee4:	9903      	ldr	r1, [sp, #12]
 8002ee6:	1a5b      	subs	r3, r3, r1
 8002ee8:	42ab      	cmp	r3, r5
 8002eea:	dcf2      	bgt.n	8002ed2 <_printf_i+0x212>
 8002eec:	e7eb      	b.n	8002ec6 <_printf_i+0x206>
 8002eee:	2500      	movs	r5, #0
 8002ef0:	f104 0619 	add.w	r6, r4, #25
 8002ef4:	e7f5      	b.n	8002ee2 <_printf_i+0x222>
 8002ef6:	bf00      	nop
 8002ef8:	08003055 	.word	0x08003055
 8002efc:	08003066 	.word	0x08003066

08002f00 <memmove>:
 8002f00:	4288      	cmp	r0, r1
 8002f02:	b510      	push	{r4, lr}
 8002f04:	eb01 0402 	add.w	r4, r1, r2
 8002f08:	d902      	bls.n	8002f10 <memmove+0x10>
 8002f0a:	4284      	cmp	r4, r0
 8002f0c:	4623      	mov	r3, r4
 8002f0e:	d807      	bhi.n	8002f20 <memmove+0x20>
 8002f10:	1e43      	subs	r3, r0, #1
 8002f12:	42a1      	cmp	r1, r4
 8002f14:	d008      	beq.n	8002f28 <memmove+0x28>
 8002f16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002f1e:	e7f8      	b.n	8002f12 <memmove+0x12>
 8002f20:	4402      	add	r2, r0
 8002f22:	4601      	mov	r1, r0
 8002f24:	428a      	cmp	r2, r1
 8002f26:	d100      	bne.n	8002f2a <memmove+0x2a>
 8002f28:	bd10      	pop	{r4, pc}
 8002f2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002f32:	e7f7      	b.n	8002f24 <memmove+0x24>

08002f34 <_sbrk_r>:
 8002f34:	b538      	push	{r3, r4, r5, lr}
 8002f36:	4d06      	ldr	r5, [pc, #24]	@ (8002f50 <_sbrk_r+0x1c>)
 8002f38:	2300      	movs	r3, #0
 8002f3a:	4604      	mov	r4, r0
 8002f3c:	4608      	mov	r0, r1
 8002f3e:	602b      	str	r3, [r5, #0]
 8002f40:	f7fd fc9a 	bl	8000878 <_sbrk>
 8002f44:	1c43      	adds	r3, r0, #1
 8002f46:	d102      	bne.n	8002f4e <_sbrk_r+0x1a>
 8002f48:	682b      	ldr	r3, [r5, #0]
 8002f4a:	b103      	cbz	r3, 8002f4e <_sbrk_r+0x1a>
 8002f4c:	6023      	str	r3, [r4, #0]
 8002f4e:	bd38      	pop	{r3, r4, r5, pc}
 8002f50:	20000278 	.word	0x20000278

08002f54 <memcpy>:
 8002f54:	440a      	add	r2, r1
 8002f56:	4291      	cmp	r1, r2
 8002f58:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f5c:	d100      	bne.n	8002f60 <memcpy+0xc>
 8002f5e:	4770      	bx	lr
 8002f60:	b510      	push	{r4, lr}
 8002f62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f6a:	4291      	cmp	r1, r2
 8002f6c:	d1f9      	bne.n	8002f62 <memcpy+0xe>
 8002f6e:	bd10      	pop	{r4, pc}

08002f70 <_realloc_r>:
 8002f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f74:	4680      	mov	r8, r0
 8002f76:	4615      	mov	r5, r2
 8002f78:	460c      	mov	r4, r1
 8002f7a:	b921      	cbnz	r1, 8002f86 <_realloc_r+0x16>
 8002f7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f80:	4611      	mov	r1, r2
 8002f82:	f7ff bc4b 	b.w	800281c <_malloc_r>
 8002f86:	b92a      	cbnz	r2, 8002f94 <_realloc_r+0x24>
 8002f88:	f7ff fbdc 	bl	8002744 <_free_r>
 8002f8c:	2400      	movs	r4, #0
 8002f8e:	4620      	mov	r0, r4
 8002f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f94:	f000 f81a 	bl	8002fcc <_malloc_usable_size_r>
 8002f98:	4285      	cmp	r5, r0
 8002f9a:	4606      	mov	r6, r0
 8002f9c:	d802      	bhi.n	8002fa4 <_realloc_r+0x34>
 8002f9e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002fa2:	d8f4      	bhi.n	8002f8e <_realloc_r+0x1e>
 8002fa4:	4629      	mov	r1, r5
 8002fa6:	4640      	mov	r0, r8
 8002fa8:	f7ff fc38 	bl	800281c <_malloc_r>
 8002fac:	4607      	mov	r7, r0
 8002fae:	2800      	cmp	r0, #0
 8002fb0:	d0ec      	beq.n	8002f8c <_realloc_r+0x1c>
 8002fb2:	42b5      	cmp	r5, r6
 8002fb4:	462a      	mov	r2, r5
 8002fb6:	4621      	mov	r1, r4
 8002fb8:	bf28      	it	cs
 8002fba:	4632      	movcs	r2, r6
 8002fbc:	f7ff ffca 	bl	8002f54 <memcpy>
 8002fc0:	4621      	mov	r1, r4
 8002fc2:	4640      	mov	r0, r8
 8002fc4:	f7ff fbbe 	bl	8002744 <_free_r>
 8002fc8:	463c      	mov	r4, r7
 8002fca:	e7e0      	b.n	8002f8e <_realloc_r+0x1e>

08002fcc <_malloc_usable_size_r>:
 8002fcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fd0:	1f18      	subs	r0, r3, #4
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	bfbc      	itt	lt
 8002fd6:	580b      	ldrlt	r3, [r1, r0]
 8002fd8:	18c0      	addlt	r0, r0, r3
 8002fda:	4770      	bx	lr

08002fdc <_init>:
 8002fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fde:	bf00      	nop
 8002fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fe2:	bc08      	pop	{r3}
 8002fe4:	469e      	mov	lr, r3
 8002fe6:	4770      	bx	lr

08002fe8 <_fini>:
 8002fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fea:	bf00      	nop
 8002fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fee:	bc08      	pop	{r3}
 8002ff0:	469e      	mov	lr, r3
 8002ff2:	4770      	bx	lr
